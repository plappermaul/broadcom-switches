/* $Id: ui_rom_defi_ppd_api.h,v 1.51 Broadcom SDK $
 * $Copyright: (c) 2016 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 * 
 * 
 * 
*/

#ifndef __UI_ROM_DEFI_PPD_API_INCLUDED__
/* { */
#define __UI_ROM_DEFI_PPD_API_INCLUDED__

#include <soc/dpp/SAND/Utils/sand_header.h>

#ifdef __VXWORKS__
  #define UI_DEMY_VAL
#else
  #define UI_DEMY_VAL 0
#endif

#include <appl/dpp/UserInterface/ui_pure_defi.h>
#include <appl/dpp/UserInterface/ui_pure_defi_ppd_api.h>   

#include <soc/dpp/PPD/ppd_api_llp_parse.h>
#include <soc/dpp/PPD/ppd_api_llp_sa_auth.h>
#include <soc/dpp/PPD/ppd_api_llp_vid_assign.h>
#include <soc/dpp/PPD/ppd_api_llp_filter.h>
#include <soc/dpp/PPD/ppd_api_lag.h>
#include <soc/dpp/PPD/ppd_api_lif_ing_vlan_edit.h>
#include <soc/dpp/PPD/ppd_api_llp_cos.h>
#include <soc/dpp/PPD/ppd_api_llp_trap.h>
#include <soc/dpp/PPD/ppd_api_mymac.h>
#include <soc/dpp/PPD/ppd_api_mpls_term.h>
#include <soc/dpp/PPD/ppd_api_vsi.h>
#include <soc/dpp/PPD/ppd_api_lif.h>
#include <soc/dpp/PPD/ppd_api_lif_table.h>
#include <soc/dpp/PPD/ppd_api_rif.h>
#include <soc/dpp/PPD/ppd_api_lif_cos.h>
#include <soc/dpp/PPD/ppd_api_frwrd_mact.h>
#include <soc/dpp/PPD/ppd_api_frwrd_mact_mgmt.h>
#include <soc/dpp/PPD/ppd_api_frwrd_ipv4.h>
#include <soc/dpp/PPD/ppd_api_frwrd_ipv6.h>
#include <soc/dpp/PPD/ppd_api_frwrd_ilm.h>
#include <soc/dpp/PPD/ppd_api_frwrd_bmact.h>
#include <soc/dpp/PPD/ppd_api_frwrd_trill.h>
#include <soc/dpp/PPD/ppd_api_frwrd_fec.h>
#include <soc/dpp/PPD/ppd_api_eg_filter.h>
#include <soc/dpp/PPD/ppd_api_eg_encap.h>
#include <soc/dpp/PPD/ppd_api_eg_ac.h>
#include <soc/dpp/PPD/ppd_api_eg_vlan_edit.h>
#include <soc/dpp/PPD/ppd_api_port.h>
#include <soc/dpp/PPD/ppd_api_trap_mgmt.h>
#include <soc/dpp/PPD/ppd_api_metering.h>
#include <soc/dpp/PPD/ppd_api_diag.h>
#include <soc/dpp/PPD/ppd_api_eg_qos.h>
#include <soc/dpp/PPD/ppd_api_acl.h>
#include <soc/dpp/PPD/ppd_api_fp.h>
#include <soc/dpp/TMC/tmc_api_tcam.h>
#include <soc/dpp/ARAD/ARAD_PP/arad_pp_lem_access.h>

#if LINK_T20E_LIBRARIES
  #include <soc/dpp/T20E/t20e_framework.h>
#endif
 /* 
  * ENUM RULES 
  * {
  */

/********************************************************/        
/********************************************************/        


EXTERN CONST
   PARAM_VAL_RULES
     soc_petra_api_members_vals[]
#ifdef INIT
   =
{
  {
    VAL_NUMERIC,
    SYMB_NAME_NUMERIC,
    {
      {
        HAS_NO_MIN_VALUE | HAS_NO_MAX_VALUE,
        0xff,
        0,
        80,
        (VAL_PROC_PTR)NULL
      }
    }
  },
/*
 * Last element. Do not remove.
 */
  {
    VAL_END_OF_LIST
  }
}
#endif
;

EXTERN CONST
   PARAM_VAL_RULES
     soc_ppd_api_mac_addr_vals[]
#ifdef INIT
   =
{
  {
    VAL_TEXT,
    (char *)0,
    {
      {
          /*
           * Maximal number of characters.
           */
        12,
          /*
           * Casting added here just to keep the compiler silent.
           */
        (long)"    MAC address parameter. 12 hex digits. No 0 no 0x Prefix",
      }
    }
  },
/*
 * Last element. Do not remove.
 */
  {
    VAL_END_OF_LIST
  }
}
#endif
;  

                                                                              
EXTERN CONST
   PARAM_VAL_RULES
     soc_ppd_api_ipv6_addr_vals[]
#ifdef INIT
   =
{
  {
    VAL_TEXT,
    (char *)0,
    {
      {
          /*
           * Maximal number of characters.
           */
        32,
          /*
           * Casting added here just to keep the compiler silent.
           */
        (long)"    IPV6 address parameter. 12 hex digits. No 0 no 0x Prefix",
      }
    }
  },
/*
 * Last element. Do not remove.
 */
  {
    VAL_END_OF_LIST
  }
}
#endif
;  

/********************************************************
*NAME
*  subnet_ip
*TYPE: BUFFER
*FUNCTION:
*  ARRAY CONTAINING THE INITIAL LIST OF VALUES
*  RELATED TO THE PARAMETER "WRITE".
*ORGANIZATION:
*  ARRAY OF STRUCTURES OF TYPE 'PARAM_VAL':
*    int val_type -
*      Type of value. Can be:
*        VAL_END_OF_LIST 0
*        VAL_NUMERIC     1
*        VAL_SYMBOL      2
*        VAL_TEXT        3
*        VAL_IP          4
*      The first one is only to indicate the end of
*      this array. The others indicate what kind of
*      value this is.
*    VAL_DESCRIPTOR val_descriptor -
*      Union of structures (of types VAL_NUM_DESCRIPTOR,
*      VAL_TEXT_DESCRIPTOR, VAL_IP_DESCRIPTOR and
*      VAL_SYMB_DESCRIPTOR). Descriptor of value.
*      See details in file of definition. Note: Symbols
*      must be small letters only!
*USAGE:
*  SEE ORGANIZATION.
*REMARKS:
*  NONE.
*SEE ALSO:
*
********************************************************/
EXTERN CONST
   PARAM_VAL_RULES
     soc_ppd_api_ip_address_vals[]
#ifdef INIT
   =
{
  {
    VAL_IP,
    SYMB_NAME_IP,
    {
      {UI_DEMY_VAL
      }
    }
  },
/*
 * Last element. Do not remove.
 */
  {
    VAL_END_OF_LIST
  }
}
#endif
;

EXTERN CONST
   PARAM_VAL_RULES
     soc_ppd_api_members_vals[]
#ifdef INIT
   =
{
  {
    VAL_NUMERIC,
    SYMB_NAME_NUMERIC,
    {
      {
        HAS_NO_MIN_VALUE | HAS_NO_MAX_VALUE,
        0xff,
        0,
        80,
        (VAL_PROC_PTR)NULL
      }
    }
  },
/*
 * Last element. Do not remove.
 */
  {
    VAL_END_OF_LIST
  }
}
#endif
;
/********************************************************/        
/********************************************************/        
EXTERN CONST 
   PARAM_VAL_RULES 
     SOC_SAND_SUCCESS_FAILURE_rule[] 
#ifdef INIT 
   = 
{ 
  { 
    VAL_SYMBOL, 
    "success", 
    { 
      { 
        SOC_SAND_SUCCESS, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_SAND_SUCCESS_FAILURE.SOC_SAND_SUCCESS:\n\r"
        "  Operation ended with success \n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "failure_out_of_resources", 
    { 
      { 
        SOC_SAND_FAILURE_OUT_OF_RESOURCES, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_SAND_SUCCESS_FAILURE.SOC_SAND_FAILURE_OUT_OF_RESOURCES:\n\r"
        "  Operation failed due to lack of resources, e.g., there is no space in the\n\r"
        "  Exact match that map the key to the table index or data\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "failure_out_of_resources_2", 
    { 
      { 
        SOC_SAND_FAILURE_OUT_OF_RESOURCES_2, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_SAND_SUCCESS_FAILURE.SOC_SAND_FAILURE_OUT_OF_RESOURCES_2:\n\r"
        "  Operation failed due to lack of resources.When there are two resources, this\n\r"
        "  indicates that the second resource type is missing\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "failure_out_of_resources_3", 
    { 
      { 
        SOC_SAND_FAILURE_OUT_OF_RESOURCES_3, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_SAND_SUCCESS_FAILURE.SOC_SAND_FAILURE_OUT_OF_RESOURCES_3:\n\r"
        "  Operation failed due to lack of resources.When there are three resource\n\r"
        "  types, this indicates that the third resource type is missing\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "failure_remove_entry_first", 
    { 
      { 
        SOC_SAND_FAILURE_REMOVE_ENTRY_FIRST, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_SAND_SUCCESS_FAILURE.SOC_SAND_FAILURE_REMOVE_ENTRY_FIRST:\n\r"
        "  Entries in some databases cannot be updated on the fly. This value indicates\n\r"
        "  that the item under configuration was already added, and the user is expected\n\r"
        "  to remove it before using the table index or key\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
/* 
 * Last element. Do not remove. 
 */ 
  { 
    VAL_END_OF_LIST 
  } 
} 
#endif 
; 

/********************************************************/        
EXTERN CONST 
   PARAM_VAL_RULES 
     SOC_SAND_DEST_SYS_PORT_TYPE_rule[] 
#ifdef INIT 
   = 
{ 
  { 
    VAL_SYMBOL, 
    "sys_phy_port", 
    { 
      { 
        SOC_SAND_PP_SYS_PORT_TYPE_SINGLE_PORT, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_SAND_DEST_SYS_PORT_TYPE.SOC_SAND_PP_SYS_PORT_TYPE_SINGLE_PORT:\n\r"
        "  System Physical FAP Port.Matching Index Range: 0 - 4095.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "lag", 
    { 
      { 
        SOC_SAND_PP_SYS_PORT_TYPE_LAG, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_SAND_DEST_SYS_PORT_TYPE.SOC_SAND_DEST_SYS_PORT_TYPE_LAG:\n\r"
        "  System LAG Id. Matching Index Range: 0 -\n\r"
        "  255.SOC_PETRA_DEST_SYS_PORT_NOF_TYPES	2	Total number of system-ports types. \n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
/* 
 * Last element. Do not remove. 
 */ 
  { 
    VAL_END_OF_LIST 
  } 
} 
#endif 
; 

/********************************************************/        
/********************************************************/        
 
EXTERN CONST 
   PARAM_VAL_RULES 
     SOC_PPD_SAND_PP_VLAN_TAG_TYPE_rule[] 
#ifdef INIT 
   = 
{ 
  { 
    VAL_SYMBOL, 
    "none", 
    { 
      { 
        SOC_SAND_PP_VLAN_TAG_TYPE_NONE, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_SAND_PP_VLAN_TAG_TYPE.SOC_SAND_PP_VLAN_TAG_TYPE_NONE:\n\r"
        "  No TAG Type-this may refer to Priority TAG or No Tag (in edit command)\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "ctag", 
    { 
      { 
        SOC_SAND_PP_VLAN_TAG_TYPE_CTAG, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_SAND_PP_VLAN_TAG_TYPE.SOC_SAND_PP_VLAN_TAG_TYPE_CTAG:\n\r"
        "  The tag type is C-Tag. Tag includes TPID, C-VID, CFI and UP. In some places,\n\r"
        "  it may refer to PCP, but when C-tag is used/generated this is actually the UP\n\r"
        "  of the C-tag. Where DEI is used, it may refer to the CFI and it should be\n\r"
        "  zero.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "stag", 
    { 
      { 
        SOC_SAND_PP_VLAN_TAG_TYPE_STAG, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_SAND_PP_VLAN_TAG_TYPE.SOC_SAND_PP_VLAN_TAG_TYPE_STAG:\n\r"
        "  The tag type is S-Tag. Tag includes TPID, S-VID, DEI and PCP\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "priority", 
    { 
      { 
        SOC_SAND_PP_VLAN_TAG_TYPE_PRIORITY, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_SAND_PP_VLAN_TAG_TYPE.SOC_SAND_PP_VLAN_TAG_TYPE_PRIORITY:\n\r"
        "  Priority Tag (VID = 0).\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "itag", 
    { 
      { 
        SOC_SAND_PP_VLAN_TAG_TYPE_ITAG, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_SAND_PP_VLAN_TAG_TYPE.SOC_SAND_PP_VLAN_TAG_TYPE_ITAG:\n\r"
        "  802.1ah Service Instance TAG\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
/* 
 * Last element. Do not remove. 
 */ 
  { 
    VAL_END_OF_LIST 
  } 
} 
#endif 
; 

/********************************************************/        
/********************************************************/        
 
EXTERN CONST 
   PARAM_VAL_RULES 
     SOC_PPD_SAND_PP_ETHERNET_DA_TYPE_rule[] 
#ifdef INIT 
   = 
{ 
  { 
    VAL_SYMBOL, 
    "type_uc", 
    { 
      { 
        SOC_SAND_PP_ETHERNET_DA_TYPE_TYPE_UC, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_SAND_PP_ETHERNET_DA_TYPE.SOC_SAND_PP_ETHERNET_DA_TYPE_TYPE_UC:\n\r"
        "  Destination MAC address is UC.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "type_mc", 
    { 
      { 
        SOC_SAND_PP_ETHERNET_DA_TYPE_TYPE_MC, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_SAND_PP_ETHERNET_DA_TYPE.SOC_SAND_PP_ETHERNET_DA_TYPE_TYPE_MC:\n\r"
        "  Destination MAC address is MC.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "type_bc", 
    { 
      { 
        SOC_SAND_PP_ETHERNET_DA_TYPE_TYPE_BC, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_SAND_PP_ETHERNET_DA_TYPE.SOC_SAND_PP_ETHERNET_DA_TYPE_TYPE_BC:\n\r"
        "  Destination MAC address is BC.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
/* 
 * Last element. Do not remove. 
 */ 
  { 
    VAL_END_OF_LIST 
  } 
} 
#endif 
; 

/********************************************************/        
/********************************************************/        
 
EXTERN CONST 
   PARAM_VAL_RULES 
     SOC_PPD_SAND_PP_PORT_L2_TYPE_rule[] 
#ifdef INIT 
   = 
{ 
  { 
    VAL_SYMBOL, 
    "vbp", 
    { 
      { 
        SOC_SAND_PP_PORT_L2_TYPE_VBP, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_SAND_PP_PORT_L2_TYPE.SOC_SAND_PP_PORT_L2_TYPE_VBP:\n\r"
        "  VLAN Bridge Port \n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "cnp", 
    { 
      { 
        SOC_SAND_PP_PORT_L2_TYPE_CNP, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_SAND_PP_PORT_L2_TYPE.SOC_SAND_PP_PORT_L2_TYPE_CNP:\n\r"
        "  Customer Network Port: An S-VLAN component Port on a Provider Bridge or\n\r"
        "  within a Provider Edge Bridge that receives and transmits frame for a single\n\r"
        "  customer. \n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "cep", 
    { 
      { 
        SOC_SAND_PP_PORT_L2_TYPE_CEP, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_SAND_PP_PORT_L2_TYPE.SOC_SAND_PP_PORT_L2_TYPE_CEP:\n\r"
        "  Customer Edge Port: A C-VLAN component Port on a Provider Edge Bridge that is\n\r"
        "  connected to customer owned equipment and receives and transmits frames for a\n\r"
        "  single customer\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "pnp", 
    { 
      { 
        SOC_SAND_PP_PORT_L2_TYPE_PNP, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_SAND_PP_PORT_L2_TYPE.SOC_SAND_PP_PORT_L2_TYPE_PNP:\n\r"
        "  Provider Network Port: An S-VLAN component Port on a Provider Bridge that can\n\r"
        "  transmit and receive frames for multiple customers.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
/* 
 * Last element. Do not remove. 
 */ 
  { 
    VAL_END_OF_LIST 
  } 
} 
#endif 
; 

/********************************************************/        
/********************************************************/        
 
EXTERN CONST 
   PARAM_VAL_RULES 
     SOC_PPD_SAND_PP_SYS_PORT_TYPE_rule[] 
#ifdef INIT 
   = 
{ 
  { 
    VAL_SYMBOL, 
    "single_port", 
    { 
      { 
        SOC_SAND_PP_SYS_PORT_TYPE_SINGLE_PORT, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_SAND_PP_SYS_PORT_TYPE.SOC_SAND_PP_SYS_PORT_TYPE_SINGLE_PORT:\n\r"
        "  Single port\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "lag", 
    { 
      { 
        SOC_SAND_PP_SYS_PORT_TYPE_LAG, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_SAND_PP_SYS_PORT_TYPE.SOC_SAND_PP_SYS_PORT_TYPE_LAG:\n\r"
        "  LAG\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
/* 
 * Last element. Do not remove. 
 */ 
  { 
    VAL_END_OF_LIST 
  } 
} 
#endif 
; 

/********************************************************/        
/********************************************************/        
 
EXTERN CONST 
   PARAM_VAL_RULES 
     SOC_PPD_SAND_PP_L4_PRTCL_TYPE_rule[] 
#ifdef INIT 
   = 
{ 
  { 
    VAL_SYMBOL, 
    "udp", 
    { 
      { 
        SOC_SAND_PP_L4_PRTCL_TYPE_UDP, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_SAND_PP_L4_PRTCL_TYPE.SOC_SAND_PP_L4_PRTCL_TYPE_UDP:\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "tcp", 
    { 
      { 
        SOC_SAND_PP_L4_PRTCL_TYPE_TCP, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_SAND_PP_L4_PRTCL_TYPE.SOC_SAND_PP_L4_PRTCL_TYPE_TCP:\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
/* 
 * Last element. Do not remove. 
 */ 
  { 
    VAL_END_OF_LIST 
  } 
} 
#endif 
; 

/********************************************************/        
/********************************************************/        
 
EXTERN CONST 
   PARAM_VAL_RULES 
     SOC_SAND_PP_IP_TYPE_rule[] 
#ifdef INIT 
   = 
{ 
  { 
    VAL_SYMBOL, 
    "none", 
    { 
      { 
        SOC_SAND_PP_IP_TYPE_NONE, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_SAND_PP_IP_TYPE.SOC_SAND_PP_IP_TYPE_NONE:\n\r"
        "  None\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "ipv4_uc", 
    { 
      { 
        SOC_SAND_PP_IP_TYPE_IPV4_UC, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_SAND_PP_IP_TYPE.SOC_SAND_PP_IP_TYPE_IPV4_UC:\n\r"
        "  IPv4 Unicast\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "ipv4_mc", 
    { 
      { 
        SOC_SAND_PP_IP_TYPE_IPV4_MC, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_SAND_PP_IP_TYPE.SOC_SAND_PP_IP_TYPE_IPV4_MC:\n\r"
        "  IPv4 Multicast\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "ipv4", 
    { 
      { 
        SOC_SAND_PP_IP_TYPE_IPV4, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_SAND_PP_IP_TYPE.SOC_SAND_PP_IP_TYPE_IPV4:\n\r"
        "  IPv4 Unicast/Multicast\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "ipv6_uc", 
    { 
      { 
        SOC_SAND_PP_IP_TYPE_IPV6_UC, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_SAND_PP_IP_TYPE.SOC_SAND_PP_IP_TYPE_IPV6_UC:\n\r"
        "  IPv6 Unicast\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "ipv6_mc", 
    { 
      { 
        SOC_SAND_PP_IP_TYPE_IPV6_MC, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_SAND_PP_IP_TYPE.SOC_SAND_PP_IP_TYPE_IPV6_MC:\n\r"
        "  IPv6 Multicast\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "ipv6", 
    { 
      { 
        SOC_SAND_PP_IP_TYPE_IPV6, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_SAND_PP_IP_TYPE.SOC_SAND_PP_IP_TYPE_IPV6:\n\r"
        "  IPv6 Unicast/Multicast\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "all", 
    { 
      { 
        SOC_SAND_PP_IP_TYPE_ALL, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_SAND_PP_IP_TYPE.SOC_SAND_PP_IP_TYPE_ALL:\n\r"
        "  IPv4/6 Unicast/Multicast\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
/* 
 * Last element. Do not remove. 
 */ 
  { 
    VAL_END_OF_LIST 
  } 
} 
#endif 
; 

/********************************************************/        
/********************************************************/        
 
EXTERN CONST 
   PARAM_VAL_RULES 
     SOC_PPD_SAND_PP_HUB_SPOKE_ORIENTATION_rule[] 
#ifdef INIT 
   = 
{ 
  { 
    VAL_SYMBOL, 
    "hub", 
    { 
      { 
        SOC_SAND_PP_HUB_SPOKE_ORIENTATION_HUB, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_SAND_PP_HUB_SPOKE_ORIENTATION.SOC_SAND_PP_HUB_SPOKE_ORIENTATION_HUB:\n\r"
        "  The orientation of the interface/tunnel is hub i.e. connected from the\n\r"
        "  Network side. Traffic may not be forwarded between two hub interfaces, to\n\r"
        "  prevent loopback on the network side.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "spoke", 
    { 
      { 
        SOC_SAND_PP_HUB_SPOKE_ORIENTATION_SPOKE, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_SAND_PP_HUB_SPOKE_ORIENTATION.SOC_SAND_PP_HUB_SPOKE_ORIENTATION_SPOKE:\n\r"
        "  The orientation of the interface/tunnel is 'spoke', i.e., connected from the\n\r"
        "  Access side. Traffic entering from spoke interface may be forwarded either to\n\r"
        "  spoke or hub interfaces.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
/* 
 * Last element. Do not remove. 
 */ 
  { 
    VAL_END_OF_LIST 
  } 
} 
#endif 
; 

/********************************************************/        
/********************************************************/        
 
EXTERN CONST 
   PARAM_VAL_RULES 
     SOC_PPC_FRWRD_MACT_MSG_HDR_TYPE_rule[] 
#ifdef INIT 
   = 
{ 
  { 
    VAL_SYMBOL, 
    "raw", 
    { 
      { 
        SOC_PPC_FRWRD_MACT_MSG_HDR_TYPE_RAW, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FRWRD_MACT_MSG_HDR_TYPE.SOC_PPC_FRWRD_MACT_MSG_HDR_TYPE_RAW:\n\r"
        "  Learning messages are injected into the local device as raw packets. The\n\r"
        "  packet is forwarded according to port configuration (according to the ITMH\n\r"
        "  header associated with the port). The learn message leaves the device as a\n\r"
        "  raw packet that includes the learn records.in this mode both the shadow\n\r"
        "  messages and learn messages will have the same header/destination.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "itmh", 
    { 
      { 
        SOC_PPC_FRWRD_MACT_MSG_HDR_TYPE_ITMH, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FRWRD_MACT_MSG_HDR_TYPE.SOC_PPC_FRWRD_MACT_MSG_HDR_TYPE_ITMH:\n\r"
        "  Learning messages are injected into the local device with ITMH header the\n\r"
        "  packet is processed/forwarded in the device as TM packet (according to the\n\r"
        "  associated ITMH header). The learn message leaves the device as a raw packet\n\r"
        "  that includes the learn records.in order to build ITMH header use\n\r"
        "  tmd_hpu_itmh_build()\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "eth_o_itmh", 
    { 
      { 
        SOC_PPC_FRWRD_MACT_MSG_HDR_TYPE_ETH_O_ITMH, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FRWRD_MACT_MSG_HDR_TYPE.SOC_PPC_FRWRD_MACT_MSG_HDR_TYPE_ETH_O_ITMH2Learning:\n\r"
        "  are injected into the local device with ITMH header the packet is\n\r"
        "  processed/forwarded in the device as a TM packet (according to the associated\n\r"
        "  ITMH header). The learn message leaves the device as an Ethernet packet that\n\r"
        "  includes the learn records.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
/* 
 * Last element. Do not remove. 
 */ 
  { 
    VAL_END_OF_LIST 
  } 
} 
#endif 
; 

/********************************************************/        
/********************************************************/        
 
EXTERN CONST 
   PARAM_VAL_RULES 
     SOC_PPD_SAND_PP_SPLIT_HORIZON_ORIENTATION_rule[] 
#ifdef INIT 
   = 
{ 
  { 
    VAL_SYMBOL, 
    "split", 
    { 
      { 
        SOC_SAND_PP_SPLIT_HORIZON_ORIENTATION_SPLIT, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_SAND_PP_SPLIT_HORIZON_ORIENTATION.SOC_SAND_PP_SPLIT_HORIZON_ORIENTATION_SPLIT:\n\r"
        "  The orientation of the interface/tunnel is 'split'\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "hub_spoke_orientation_spoke_horizon", 
    { 
      { 
        SOC_SAND_PP_HUB_SPOKE_ORIENTATION_SPOKE_HORIZON, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_SAND_PP_SPLIT_HORIZON_ORIENTATION.SOC_SAND_PP_HUB_SPOKE_ORIENTATION_SPOKE_HORIZON:\n\r"
        "  The orientation of the interface/tunnel is 'horizon'\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
/* 
 * Last element. Do not remove. 
 */ 
  { 
    VAL_END_OF_LIST 
  } 
} 
#endif 
; 
 

/********************************************************/        
/********************************************************/        
 
EXTERN CONST 
   PARAM_VAL_RULES 
     SOC_PPD_SAND_PP_DEST_TYPE_rule[] 
#ifdef INIT 
   = 
{ 
  { 
    VAL_SYMBOL, 
    "drop", 
    { 
      { 
        SOC_SAND_PP_DEST_TYPE_DROP, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_SAND_PP_DEST_TYPE.SOC_SAND_PP_DEST_TYPE_DROP:\n\r"
        "  Drop destination\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "router", 
    { 
      { 
        SOC_SAND_PP_DEST_TYPE_ROUTER, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_SAND_PP_DEST_TYPE.SOC_SAND_PP_DEST_TYPE_ROUTER:\n\r"
        "  Router destination. Relevant only for Petra-A.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "single_port", 
    { 
      { 
        SOC_SAND_PP_DEST_SINGLE_PORT, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_SAND_PP_DEST_TYPE.SOC_SAND_PP_DEST_SINGLE_PORT:\n\r"
        "  Single port\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "explicit_flow", 
    { 
      { 
        SOC_SAND_PP_DEST_EXPLICIT_FLOW, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_SAND_PP_DEST_TYPE.SOC_SAND_PP_DEST_EXPLICIT_FLOW:\n\r"
        "  Explicit flow.Also referred to as direct flow.Enable allocating dedicated QoS\n\r"
        "  resources for a PP destination\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "lag", 
    { 
      { 
        SOC_SAND_PP_DEST_LAG, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_SAND_PP_DEST_TYPE.SOC_SAND_PP_DEST_LAG:\n\r"
        "  LAG\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "multicast", 
    { 
      { 
        SOC_SAND_PP_DEST_MULTICAST, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_SAND_PP_DEST_TYPE.SOC_SAND_PP_DEST_MULTICAST:\n\r"
        "  LIF Group Destination\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "fec", 
    { 
      { 
        SOC_SAND_PP_DEST_FEC, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_SAND_PP_DEST_TYPE.SOC_SAND_PP_DEST_FEC:\n\r"
        "  FEC pointer.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "trap", 
    { 
      { 
        SOC_SAND_PP_DEST_TRAP, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_SAND_PP_DEST_TYPE.SOC_SAND_PP_DEST_TRAP:\n\r"
        "  Trap. then supply cpu-code and fwd/snoop strength \n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 

    
/* 
 * Last element. Do not remove. 
 */ 
  { 
    VAL_END_OF_LIST 
  } 
} 
#endif 
; 

/********************************************************/        
/********************************************************/        
 
EXTERN CONST 
   PARAM_VAL_RULES 
     SOC_PPC_FRWRD_MACT_EVENT_PATH_TYPE_rule[] 
#ifdef INIT 
   = 
{ 
  { 
    VAL_SYMBOL, 
    "msg_single", 
    { 
      { 
        SOC_PPC_FRWRD_MACT_EVENT_PATH_TYPE_MSG_SINGLE, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FRWRD_MACT_EVENT_PATH_TYPE.SOC_PPC_FRWRD_MACT_EVENT_PATH_TYPE_MSG_SINGLE:\n\r"
        "  Learn information transmitted through OLP messages composed of single learned\n\r"
        "  information. Small packets are sent frequently.In this case, the header\n\r"
        "  information of the messages must be set.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "msg_aggr", 
    { 
      { 
        SOC_PPC_FRWRD_MACT_EVENT_PATH_TYPE_MSG_AGGR, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FRWRD_MACT_EVENT_PATH_TYPE.SOC_PPC_FRWRD_MACT_EVENT_PATH_TYPE_MSG_AGGR:\n\r"
        "  Learn information transmitted through OLP messages composed of aggregated\n\r"
        "  learned information. For aggregated messages, larger packets are sent less\n\r"
        "  frequently.In this case, the header information of the messages must be set.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "direct_access", 
    { 
      { 
        SOC_PPC_FRWRD_MACT_EVENT_PATH_TYPE_DIRECT_ACCESS, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FRWRD_MACT_EVENT_PATH_TYPE.SOC_PPC_FRWRD_MACT_EVENT_PATH_TYPE_DIRECT_ACCESS:\n\r"
        "  Learn information obtained through direct access to device using\n\r"
        "  soc_ppd_frwrd_mact_event_get(). Can be used only in a Centralized learning mode.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
/* 
 * Last element. Do not remove. 
 */ 
  { 
    VAL_END_OF_LIST 
  } 
} 
#endif 
; 

 /* 
  * } ENUM RULES 
  */
/********************************************************/        
/********************************************************/        
 
EXTERN CONST 
   PARAM_VAL_RULES 
     SOC_PPD_SAND_PP_MPLS_TUNNEL_MODEL_rule[] 
#ifdef INIT 
   = 
{ 
  { 
    VAL_SYMBOL, 
    "pipe", 
    { 
      { 
        SOC_SAND_PP_MPLS_TUNNEL_MODEL_PIPE, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_SAND_PP_MPLS_TUNNEL_MODEL.SOC_SAND_PP_MPLS_TUNNEL_MODEL_PIPE:\n\r"
        "  Pipe Model: A MPLS network acts like a circuit when MPLS packets traverse the\n\r"
        "  network such that only the LSP ingress and egress points are visible to nodes\n\r"
        "  that are outside the tunnel.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "uniform", 
    { 
      { 
        SOC_SAND_PP_MPLS_TUNNEL_MODEL_UNIFORM, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_SAND_PP_MPLS_TUNNEL_MODEL.SOC_SAND_PP_MPLS_TUNNEL_MODEL_UNIFORM:\n\r"
        "  Uniform Model: Makes all the nodes that a LSP traverses visible to nodes\n\r"
        "  outside the tunnel.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
/* 
 * Last element. Do not remove. 
 */ 
  { 
    VAL_END_OF_LIST 
  } 
} 
#endif 
; 

/********************************************************/        
/********************************************************/        
 
EXTERN CONST 
   PARAM_VAL_RULES 
     SOC_PPD_SAND_PP_FEC_COMMAND_TYPE_rule[] 
#ifdef INIT 
   = 
{ 
  { 
    VAL_SYMBOL, 
    "route", 
    { 
      { 
        SOC_SAND_PP_FEC_COMMAND_TYPE_ROUTE, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_SAND_PP_FEC_COMMAND_TYPE.SOC_SAND_PP_FEC_COMMAND_TYPE_ROUTE:\n\r"
        "  Route command: The packet is routed and sent to next destination.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "trap", 
    { 
      { 
        SOC_SAND_PP_FEC_COMMAND_TYPE_TRAP, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_SAND_PP_FEC_COMMAND_TYPE.SOC_SAND_PP_FEC_COMMAND_TYPE_TRAP:\n\r"
        "  Trap command: The packet is forwarded to the CPU with a 'cpu_code'.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "drop", 
    { 
      { 
        SOC_SAND_PP_FEC_COMMAND_TYPE_DROP, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_SAND_PP_FEC_COMMAND_TYPE.SOC_SAND_PP_FEC_COMMAND_TYPE_DROP:\n\r"
        "  Drop command: The packet is dropped-no further processing is done for the\n\r"
        "  packet.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
/* 
 * Last element. Do not remove. 
 */ 
  { 
    VAL_END_OF_LIST 
  } 
} 
#endif 
; 

/********************************************************/        
/********************************************************/        
 
EXTERN CONST 
   PARAM_VAL_RULES 
     SOC_PPD_SAND_PP_ETHERNET_FRAME_VLAN_FORMAT_rule[] 
#ifdef INIT 
   = 
{ 
  { 
    VAL_SYMBOL, 
    "none", 
    { 
      { 
        SOC_SAND_PP_ETHERNET_FRAME_VLAN_FORMAT_NONE, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_SAND_PP_ETHERNET_FRAME_VLAN_FORMAT.SOC_SAND_PP_ETHERNET_FRAME_VLAN_FORMAT_NONE:\n\r"
        "  Frame has no VLAN TAGs\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "c_tag", 
    { 
      { 
        SOC_SAND_PP_ETHERNET_FRAME_VLAN_FORMAT_C_TAG, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_SAND_PP_ETHERNET_FRAME_VLAN_FORMAT.SOC_SAND_PP_ETHERNET_FRAME_VLAN_FORMAT_C_TAG:\n\r"
        "  Frame has C-VLAN TAG\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "s_tag", 
    { 
      { 
        SOC_SAND_PP_ETHERNET_FRAME_VLAN_FORMAT_S_TAG, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_SAND_PP_ETHERNET_FRAME_VLAN_FORMAT.SOC_SAND_PP_ETHERNET_FRAME_VLAN_FORMAT_S_TAG:\n\r"
        "  Frame has S-VLAN TAG\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "s_c_tag", 
    { 
      { 
        SOC_SAND_PP_ETHERNET_FRAME_VLAN_FORMAT_S_C_TAG, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_SAND_PP_ETHERNET_FRAME_VLAN_FORMAT.SOC_SAND_PP_ETHERNET_FRAME_VLAN_FORMAT_S_C_TAG:\n\r"
        "  Frame has S-C-VLAN TAGs\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "priority_tag", 
    { 
      { 
        SOC_SAND_PP_ETHERNET_FRAME_VLAN_FORMAT_PRIORITY_TAG, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_SAND_PP_ETHERNET_FRAME_VLAN_FORMAT.SOC_SAND_PP_ETHERNET_FRAME_VLAN_FORMAT_PRIORIT\n\r"
        "  _TAG:\n\r"
        "  Frame has Only Priority TAG\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "priority_c_tag", 
    { 
      { 
        SOC_SAND_PP_ETHERNET_FRAME_VLAN_FORMAT_PRIORITY_C_TAG, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_SAND_PP_ETHERNET_FRAME_VLAN_FORMAT.SOC_SAND_PP_ETHERNET_FRAME_VLAN_FORMAT_PRIORIT\n\r"
        "  _C_TAG:\n\r"
        "  Frame has Priority-C-VLAN TAGs\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "c_s_tag", 
    { 
      { 
        SOC_SAND_PP_ETHERNET_FRAME_VLAN_FORMAT_C_S_TAG, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_SAND_PP_ETHERNET_FRAME_VLAN_FORMAT.SOC_SAND_PP_ETHERNET_FRAME_VLAN_FORMAT_C_S_TAG:\n\r"
        "  Frame has C-S-VLAN TAGs\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "priority_s_tag", 
    { 
      { 
        SOC_SAND_PP_ETHERNET_FRAME_VLAN_FORMAT_PRIORITY_S_TAG, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_SAND_PP_ETHERNET_FRAME_VLAN_FORMAT.SOC_SAND_PP_ETHERNET_FRAME_VLAN_FORMAT_PRIORIT\n\r"
        "  _S_TAG:\n\r"
        "  Frame has Priority-S-VLAN TAGs\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "s_s_tag", 
    { 
      { 
        SOC_SAND_PP_ETHERNET_FRAME_VLAN_FORMAT_S_S_TAG, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_SAND_PP_ETHERNET_FRAME_VLAN_FORMAT.SOC_SAND_PP_ETHERNET_FRAME_VLAN_FORMAT_S_S_TAG:\n\r"
        "  Frame has S-S-VLAN TAGs\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "c_c_tag", 
    { 
      { 
        SOC_SAND_PP_ETHERNET_FRAME_VLAN_FORMAT_C_C_TAG, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_SAND_PP_ETHERNET_FRAME_VLAN_FORMAT.SOC_SAND_PP_ETHERNET_FRAME_VLAN_FORMAT_C_C_TAG:\n\r"
        "  Frame has C-C-VLAN TAGs\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "i_tag", 
    { 
      { 
        SOC_SAND_PP_ETHERNET_FRAME_VLAN_FORMAT_I_TAG, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_SAND_PP_ETHERNET_FRAME_VLAN_FORMAT.SOC_SAND_PP_ETHERNET_FRAME_VLAN_FORMAT_I_TAG:\n\r"
        "  Frame has I-TAG\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "any", 
    { 
      { 
        SOC_SAND_PP_ETHERNET_FRAME_VLAN_FORMAT_ANY, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_SAND_PP_ETHERNET_FRAME_VLAN_FORMAT.SOC_SAND_PP_ETHERNET_FRAME_VLAN_FORMAT_ANY:\n\r"
        "  Frame with any VLAN format. Packet may have any number/type of tags. This\n\r"
        "  type is used for setting the acceptable frame types. When this type is used,\n\r"
        "  all VLAN formats are accepted or not, according to the accept parameter\n\r"
        "  value. See, for example, soc_ppd_llp_filter_ingress_acceptable_frames_set().\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
/* 
 * Last element. Do not remove. 
 */ 
  { 
    VAL_END_OF_LIST 
  } 
} 
#endif 
; 

/********************************************************/        
/********************************************************/        
 
EXTERN CONST 
   PARAM_VAL_RULES 
     SOC_PPC_EEI_TYPE_rule[] 
#ifdef INIT 
   = 
{ 
  { 
    VAL_SYMBOL, 
    "empty", 
    { 
      { 
        SOC_PPC_EEI_TYPE_EMPTY, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_EEI_TYPE.SOC_PPC_EEI_TYPE_EMPTY:\n\r"
        "  No EEI is used; ingress PP will not transmit EEI in the header.EEI value is\n\r"
        "  not relevant in this case.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "trill", 
    { 
      { 
        SOC_PPC_EEI_TYPE_TRILL, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_EEI_TYPE.SOC_PPC_EEI_TYPE_TRILL:\n\r"
        "  The EEI includes TRILL information (Dist-Nick and multicast indication). The\n\r"
        "  TRILL info is relevant in this case.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "mpls", 
    { 
      { 
        SOC_PPC_EEI_TYPE_MPLS, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_EEI_TYPE.SOC_PPC_EEI_TYPE_MPLS:\n\r"
        "  EEI used as mpls command. To pop/push/swap VC/Tunnel Label. The MPLS info is\n\r"
        "  relevant in this case. When using the EEI for mpls command, then push_profile\n\r"
        "  0 cannot be used.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "mim", 
    { 
      { 
        SOC_PPC_EEI_TYPE_MIM, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_EEI_TYPE.SOC_PPC_EEI_TYPE_MIM:\n\r"
        "  The EEI is used as ISID for MAC in MAC application. In this case, the\n\r"
        "  destination port that the EEI/ISID is transmitted to must be a PBP port.\n\r"
        "  Otherwise, mis-configuration and behavior is unexpected.The ISID field is\n\r"
        "  relevant in this case.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
/* 
 * Last element. Do not remove. 
 */ 
  { 
    VAL_END_OF_LIST 
  } 
} 
#endif 
; 

/********************************************************/        
/********************************************************/        
 
EXTERN CONST 
   PARAM_VAL_RULES 
     SOC_PPC_OUTLIF_ENCODE_TYPE_rule[] 
#ifdef INIT 
   = 
{ 
  { 
    VAL_SYMBOL, 
    "none", 
    { 
      { 
        SOC_PPC_OUTLIF_ENCODE_TYPE_NONE, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_OUTLIF_ENCODE_TYPE.SOC_PPC_OUTLIF_ENCODE_TYPE_NONE:\n\r"
        "  No Out-LIF is used\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "ac", 
    { 
      { 
        SOC_PPC_OUTLIF_ENCODE_TYPE_AC, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_OUTLIF_ENCODE_TYPE.SOC_PPC_OUTLIF_ENCODE_TYPE_AC:\n\r"
        "  The Out-LIF encoding type is AC.Egress Processing is done according to the AC\n\r"
        "  database\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "eep", 
    { 
      { 
        SOC_PPC_OUTLIF_ENCODE_TYPE_EEP, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_OUTLIF_ENCODE_TYPE.SOC_PPC_OUTLIF_ENCODE_TYPE_EEP:\n\r"
        "  The Out-LIF encoding type is EEP.The Out-LIF may be a PWE, MinM interface,\n\r"
        "  RIF-Tunnel or RIF-Trill.Egress Processing is done according to the Egress\n\r"
        "  Editing database.Valid for bridging, VPLS, Mac-in-Mac, TRILL and Routing\n\r"
        "  applications\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "vsi", 
    { 
      { 
        SOC_PPC_OUTLIF_ENCODE_TYPE_VSI, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_OUTLIF_ENCODE_TYPE.SOC_PPC_OUTLIF_ENCODE_TYPE_VSI:\n\r"
        "  The Out-LIF encoding type is VSI.The Out-LIF is RIF-VSI.Valid for IP-Routing\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
/* 
 * Last element. Do not remove. 
 */ 
  { 
    VAL_END_OF_LIST 
  } 
} 
#endif 
; 

/********************************************************/        
/********************************************************/        
 
EXTERN CONST 
   PARAM_VAL_RULES 
     SOC_PPC_FRWRD_DECISION_TYPE_rule[] 
#ifdef INIT 
   = 
{ 
  { 
    VAL_SYMBOL, 
    "drop", 
    { 
      { 
        SOC_PPC_FRWRD_DECISION_TYPE_DROP, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FRWRD_DECISION_TYPE.SOC_PPC_FRWRD_DECISION_TYPE_DROP:\n\r"
        "  Drop the packet.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "uc_flow", 
    { 
      { 
        SOC_PPC_FRWRD_DECISION_TYPE_UC_FLOW, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FRWRD_DECISION_TYPE.SOC_PPC_FRWRD_DECISION_TYPE_UC_FLOW:\n\r"
        "  Unicast forwarding without a FEC.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "uc_lag", 
    { 
      { 
        SOC_PPC_FRWRD_DECISION_TYPE_UC_LAG, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FRWRD_DECISION_TYPE.SOC_PPC_FRWRD_DECISION_TYPE_UC_LAG:\n\r"
        "  Unicast forwarding without a FEC.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  },   
  { 
    VAL_SYMBOL, 
    "uc_port", 
    { 
      { 
        SOC_PPC_FRWRD_DECISION_TYPE_UC_PORT, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FRWRD_DECISION_TYPE.SOC_PPC_FRWRD_DECISION_TYPE_UC_PORT:\n\r"
        "  Unicast forwarding without a FEC.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "mc", 
    { 
      { 
        SOC_PPC_FRWRD_DECISION_TYPE_MC, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FRWRD_DECISION_TYPE.SOC_PPC_FRWRD_DECISION_TYPE_MC:\n\r"
        "  Multicast forwarding without a FEC.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "fec", 
    { 
      { 
        SOC_PPC_FRWRD_DECISION_TYPE_FEC, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FRWRD_DECISION_TYPE.SOC_PPC_FRWRD_DECISION_TYPE_FEC:\n\r"
        "  Forwarding via a FEC.May be either Unicast forwarding or Multicast forwarding\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "trap", 
    { 
      { 
        SOC_PPC_FRWRD_DECISION_TYPE_TRAP, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FRWRD_DECISION_TYPE.SOC_PPC_FRWRD_DECISION_TYPE_TRAP:\n\r"
        "  Trapping to the control plane\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
/* 
 * Last element. Do not remove. 
 */ 
  { 
    VAL_END_OF_LIST 
  } 
} 
#endif 
; 

/********************************************************/        
/********************************************************/        
 
EXTERN CONST 
   PARAM_VAL_RULES 
     SOC_PPC_MPLS_COMMAND_TYPE_rule[] 
#ifdef INIT 
   = 
{ 
  { 
    VAL_SYMBOL, 
    "push", 
    { 
      { 
        SOC_PPC_MPLS_COMMAND_TYPE_PUSH, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_MPLS_COMMAND_TYPE.SOC_PPC_MPLS_COMMAND_TYPE_PUSH:\n\r"
        "  Push new label. The payload of the command is a push profile to build the TTL\n\r"
        "  and EXP of the pushed label.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  },
  { 
    VAL_SYMBOL, 
    "pop", 
    { 
      { 
        SOC_PPC_MPLS_COMMAND_TYPE_POP, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_MPLS_COMMAND_TYPE.SOC_PPC_MPLS_COMMAND_TYPE_POP:\n\r"
        "  Pop MPLS header, next header, processing type \n\r"
        "  and CW passed by other attributes \n\r"
        "  Arad only. cannot be used for Petra-B.\n\r"
         "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  },  
  { 
    VAL_SYMBOL, 
    "pop_into_mpls_pipe", 
    { 
      { 
        SOC_PPC_MPLS_COMMAND_TYPE_POP_INTO_MPLS_PIPE, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_MPLS_COMMAND_TYPE.SOC_PPC_MPLS_COMMAND_TYPE_POP_INTO_MPLS_PIPE:\n\r"
        "  Pop into MPLS. TTL and EXP of the exposed label not affected by the popped\n\r"
        "  label. May perform mapping of the EXP field.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "pop_into_mpls_uniform", 
    { 
      { 
        SOC_PPC_MPLS_COMMAND_TYPE_POP_INTO_MPLS_UNIFORM, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_MPLS_COMMAND_TYPE.SOC_PPC_MPLS_COMMAND_TYPE_POP_INTO_MPLS_UNIFORM:\n\r"
        "  Pop into MPLS and inherent TTL and EXP from the popped label with optional\n\r"
        "  mapping of the EXP field.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "pop_into_ipv4_pipe", 
    { 
      { 
        SOC_PPC_MPLS_COMMAND_TYPE_POP_INTO_IPV4_PIPE, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_MPLS_COMMAND_TYPE.SOC_PPC_MPLS_COMMAND_TYPE_POP_INTO_IPV4_PIPE:\n\r"
        "  Pop into MPLS. TTL and TOS of the exposed IPv4 header not affected by the\n\r"
        "  popped label. May perform mapping of the TOS field.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "pop_into_ipv4_uniform", 
    { 
      { 
        SOC_PPC_MPLS_COMMAND_TYPE_POP_INTO_IPV4_UNIFORM, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_MPLS_COMMAND_TYPE.SOC_PPC_MPLS_COMMAND_TYPE_POP_INTO_IPV4_UNIFORM:\n\r"
        "  Pop into IPv4 and inherent TTL and EXP from the popped label with mapping of\n\r"
        "  the EXP field to TOS.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "pop_into_ipv6_pipe", 
    { 
      { 
        SOC_PPC_MPLS_COMMAND_TYPE_POP_INTO_IPV6_PIPE, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_MPLS_COMMAND_TYPE.SOC_PPC_MPLS_COMMAND_TYPE_POP_INTO_IPV6_PIPE:\n\r"
        "  Pop into MPLS. TTL and TC of the exposed IPv6 header not affected by the\n\r"
        "  popped label. May perform mapping of the TC field.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "pop_into_ipv6_uniform", 
    { 
      { 
        SOC_PPC_MPLS_COMMAND_TYPE_POP_INTO_IPV6_UNIFORM, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_MPLS_COMMAND_TYPE.SOC_PPC_MPLS_COMMAND_TYPE_POP_INTO_IPV6_UNIFORM:\n\r"
        "  Pop into IPv4 and inherent TTL and EXP from the popped label with mapping of\n\r"
        "  the EXP field to TC.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "pop_into_ethernet", 
    { 
      { 
        SOC_PPC_MPLS_COMMAND_TYPE_POP_INTO_ETHERNET, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_MPLS_COMMAND_TYPE.SOC_PPC_MPLS_COMMAND_TYPE_POP_INTO_ETHERNET:\n\r"
        "  Pop into Ethernet. For Drop and Continue applications.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "swap", 
    { 
      { 
        SOC_PPC_MPLS_COMMAND_TYPE_SWAP, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_MPLS_COMMAND_TYPE.SOC_PPC_MPLS_COMMAND_TYPE_SWAP:\n\r"
        "  Swap the label of the MPLS header.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
/* 
 * Last element. Do not remove. 
 */ 
  { 
    VAL_END_OF_LIST 
  } 
} 
#endif 
; 

/********************************************************/        
/********************************************************/        
 
EXTERN CONST 
   PARAM_VAL_RULES 
     SOC_PPC_L2_NEXT_PRTCL_TYPE_rule[] 
#ifdef INIT 
   = 
{ 
  { 
    VAL_SYMBOL, 
    "mac_in_mac", 
    { 
      { 
        SOC_PPC_L2_NEXT_PRTCL_TYPE_MAC_IN_MAC, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_L2_NEXT_PRTCL_TYPE.SOC_PPC_L2_NEXT_PRTCL_TYPE_MAC_IN_MAC:\n\r"
        "  MAC-in-MAC. MAC in MAC header will be identified according special TPID,\n\r"
        "  ISID-TPID.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "trill", 
    { 
      { 
        SOC_PPC_L2_NEXT_PRTCL_TYPE_TRILL, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_L2_NEXT_PRTCL_TYPE.SOC_PPC_L2_NEXT_PRTCL_TYPE_TRILL:\n\r"
        "  Trill packet.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "ipv4", 
    { 
      { 
        SOC_PPC_L2_NEXT_PRTCL_TYPE_IPV4, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_L2_NEXT_PRTCL_TYPE.SOC_PPC_L2_NEXT_PRTCL_TYPE_IPV4:\n\r"
        "  IPv4 packet.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "ipv6", 
    { 
      { 
        SOC_PPC_L2_NEXT_PRTCL_TYPE_IPV6, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_L2_NEXT_PRTCL_TYPE.SOC_PPC_L2_NEXT_PRTCL_TYPE_IPV6:\n\r"
        "  IPv6 packet\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "arp", 
    { 
      { 
        SOC_PPC_L2_NEXT_PRTCL_TYPE_ARP, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_L2_NEXT_PRTCL_TYPE.SOC_PPC_L2_NEXT_PRTCL_TYPE_ARP:\n\r"
        "  ARP packet.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "cfm", 
    { 
      { 
        SOC_PPC_L2_NEXT_PRTCL_TYPE_CFM, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_L2_NEXT_PRTCL_TYPE.SOC_PPC_L2_NEXT_PRTCL_TYPE_CFM:\n\r"
        "  CFM (Connectivity Fault Management) packet.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "mpls", 
    { 
      { 
        SOC_PPC_L2_NEXT_PRTCL_TYPE_MPLS, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_L2_NEXT_PRTCL_TYPE.SOC_PPC_L2_NEXT_PRTCL_TYPE_MPLS:\n\r"
        "  MPLS packet.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "fc_eth", 
    { 
      { 
        SOC_PPC_L2_NEXT_PRTCL_TYPE_FC_ETH, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_L2_NEXT_PRTCL_TYPE.SOC_PPC_L2_NEXT_PRTCL_TYPE_FC_ETH:\n\r"
        "  Fabric Channel over Ethernet.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "fc_eth", 
    { 
      { 
        SOC_PPC_L2_NEXT_PRTCL_TYPE_OTHER, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_L2_NEXT_PRTCL_TYPE.SOC_PPC_L2_NEXT_PRTCL_TYPE_OTHER:\n\r"
        "  Other Next protocol type, not one of the above..\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
/* 
 * Last element. Do not remove. 
 */ 
  { 
    VAL_END_OF_LIST 
  } 
} 
#endif 
; 

/********************************************************/        
/********************************************************/        
 
EXTERN CONST 
   PARAM_VAL_RULES 
     SOC_PPC_L3_NEXT_PRTCL_TYPE_rule[] 
#ifdef INIT 
   = 
{ 
  { 
    VAL_SYMBOL, 
    "none", 
    { 
      { 
        SOC_PPC_L3_NEXT_PRTCL_TYPE_NONE, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_L3_NEXT_PRTCL_TYPE.SOC_PPC_L3_NEXT_PRTCL_TYPE_NONE:\n\r"
        "  None of the listed protocol types, useful to indicate that packet next\n\r"
        "  protocol doesn't match any of the configured protocol types.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "tcp", 
    { 
      { 
        SOC_PPC_L3_NEXT_PRTCL_TYPE_TCP, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_L3_NEXT_PRTCL_TYPE.SOC_PPC_L3_NEXT_PRTCL_TYPE_TCP:\n\r"
        "  Next header is TCP. i.e. TCP over IP\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "udp", 
    { 
      { 
        SOC_PPC_L3_NEXT_PRTCL_TYPE_UDP, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_L3_NEXT_PRTCL_TYPE.SOC_PPC_L3_NEXT_PRTCL_TYPE_UDP:\n\r"
        "  Next header is TCP. i.e. UDP over IP\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "igmp", 
    { 
      { 
        SOC_PPC_L3_NEXT_PRTCL_TYPE_IGMP, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_L3_NEXT_PRTCL_TYPE.SOC_PPC_L3_NEXT_PRTCL_TYPE_IGMP:\n\r"
        "  Next header is IGMP\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "icmp", 
    { 
      { 
        SOC_PPC_L3_NEXT_PRTCL_TYPE_ICMP, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_L3_NEXT_PRTCL_TYPE.SOC_PPC_L3_NEXT_PRTCL_TYPE_ICMP:\n\r"
        "  Next header is ICMP\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "icmpv6", 
    { 
      { 
        SOC_PPC_L3_NEXT_PRTCL_TYPE_ICMPV6, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_L3_NEXT_PRTCL_TYPE.SOC_PPC_L3_NEXT_PRTCL_TYPE_ICMPV6:\n\r"
        "  Next header is ICMPv6\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "ipv4", 
    { 
      { 
        SOC_PPC_L3_NEXT_PRTCL_TYPE_IPV4, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_L3_NEXT_PRTCL_TYPE.SOC_PPC_L3_NEXT_PRTCL_TYPE_IPV4:\n\r"
        "  Next header is IPv4: IP in IP (encapsulation)\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "ipv6", 
    { 
      { 
        SOC_PPC_L3_NEXT_PRTCL_TYPE_IPV6, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_L3_NEXT_PRTCL_TYPE.SOC_PPC_L3_NEXT_PRTCL_TYPE_IPV6:\n\r"
        "  Next header is IPv6, encapsulated IPv6.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "mpls", 
    { 
      { 
        SOC_PPC_L3_NEXT_PRTCL_TYPE_MPLS, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_L3_NEXT_PRTCL_TYPE.SOC_PPC_L3_NEXT_PRTCL_TYPE_MPLS:\n\r"
        "  Next header is MPLS: MPLS-in-IP\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
/* 
 * Last element. Do not remove. 
 */ 
  { 
    VAL_END_OF_LIST 
  } 
} 
#endif 
; 

/********************************************************/        
/********************************************************/        
 
EXTERN CONST 
   PARAM_VAL_RULES 
     SOC_PPC_PKT_TERM_TYPE_rule[] 
#ifdef INIT 
   = 
{ 
  { 
    VAL_SYMBOL, 
    "none", 
    { 
      { 
        SOC_PPC_PKT_TERM_TYPE_NONE, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_PKT_TERM_TYPE.SOC_PPC_PKT_TERM_TYPE_NONE:\n\r"
        "  No header is terminated (Bridging)\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "eth", 
    { 
      { 
        SOC_PPC_PKT_TERM_TYPE_ETH, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_PKT_TERM_TYPE.SOC_PPC_PKT_TERM_TYPE_ETH:\n\r"
        "  Most outer LL header wasterminated (Routing, MAC-in-MAC, VPLS)\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "ipv4_eth", 
    { 
      { 
        SOC_PPC_PKT_TERM_TYPE_IPV4_ETH, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_PKT_TERM_TYPE.SOC_PPC_PKT_TERM_TYPE_IPV4_ETH:\n\r"
        "  Link-Layer and IPv4 tunnel were terminated\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "mpls_eth", 
    { 
      { 
        SOC_PPC_PKT_TERM_TYPE_MPLS_ETH, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_PKT_TERM_TYPE.SOC_PPC_PKT_TERM_TYPE_MPLS_ETH:\n\r"
        "  Link-Layer and MPLS tunnel were terminated\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "cw_mpls_eth", 
    { 
      { 
        SOC_PPC_PKT_TERM_TYPE_CW_MPLS_ETH, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_PKT_TERM_TYPE.SOC_PPC_PKT_TERM_TYPE_CW_MPLS_ETH:\n\r"
        "  Link-Layer and MPLS (with Control Word) tunnel were terminated\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "mpls2_eth", 
    { 
      { 
        SOC_PPC_PKT_TERM_TYPE_MPLS2_ETH, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_PKT_TERM_TYPE.SOC_PPC_PKT_TERM_TYPE_MPLS2_ETH:\n\r"
        "  Link-Layer and MPLSx2 tunnel were terminated\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "cw_mpls2_eth", 
    { 
      { 
        SOC_PPC_PKT_TERM_TYPE_CW_MPLS2_ETH, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_PKT_TERM_TYPE.SOC_PPC_PKT_TERM_TYPE_CW_MPLS2_ETH:\n\r"
        "  Link-Layer and MPLSx2 (with Control Word) tunnel were terminated\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "mpls3_eth", 
    { 
      { 
        SOC_PPC_PKT_TERM_TYPE_MPLS3_ETH, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_PKT_TERM_TYPE.SOC_PPC_PKT_TERM_TYPE_MPLS3_ETH:\n\r"
        "  Link-Layer and MPLSx3 tunnel were terminated\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "cw_mpls3_eth", 
    { 
      { 
        SOC_PPC_PKT_TERM_TYPE_CW_MPLS3_ETH, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_PKT_TERM_TYPE.SOC_PPC_PKT_TERM_TYPE_CW_MPLS3_ETH:\n\r"
        "  Link-Layer and MPLSx3 (with Control Word) tunnel were terminated\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "trill", 
    { 
      { 
        SOC_PPC_PKT_TERM_TYPE_TRILL, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_PKT_TERM_TYPE.SOC_PPC_PKT_TERM_TYPE_TRILL:\n\r"
        "  Link-Layer TRILL tunnel were terminated\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
/* 
 * Last element. Do not remove. 
 */ 
  { 
    VAL_END_OF_LIST 
  } 
} 
#endif 
; 

/********************************************************/        
/********************************************************/        
 
EXTERN CONST 
   PARAM_VAL_RULES 
     SOC_PPC_PKT_FRWRD_TYPE_rule[] 
#ifdef INIT 
   = 
{ 
  { 
    VAL_SYMBOL, 
    "bridge", 
    { 
      { 
        SOC_PPC_PKT_FRWRD_TYPE_BRIDGE, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_PKT_FRWRD_TYPE.SOC_PPC_PKT_FRWRD_TYPE_BRIDGE:\n\r"
        "  packet is bridged according to outer most LL header\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "ipv4_uc", 
    { 
      { 
        SOC_PPC_PKT_FRWRD_TYPE_IPV4_UC, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_PKT_FRWRD_TYPE.SOC_PPC_PKT_FRWRD_TYPE_IPV4_UC:\n\r"
        "  packet is IPv4 UC routed\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "ipv4_mc", 
    { 
      { 
        SOC_PPC_PKT_FRWRD_TYPE_IPV4_MC, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_PKT_FRWRD_TYPE.SOC_PPC_PKT_FRWRD_TYPE_IPV4_MC:\n\r"
        "  packet is IPv4 MC routed\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "ipv6_uc", 
    { 
      { 
        SOC_PPC_PKT_FRWRD_TYPE_IPV6_UC, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_PKT_FRWRD_TYPE.SOC_PPC_PKT_FRWRD_TYPE_IPV6_UC:\n\r"
        "  packet is IPv6 UC routed\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "ipv6_mc", 
    { 
      { 
        SOC_PPC_PKT_FRWRD_TYPE_IPV6_MC, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_PKT_FRWRD_TYPE.SOC_PPC_PKT_FRWRD_TYPE_IPV6_MC:\n\r"
        "  packet is IPv6 MC routed\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "mpls", 
    { 
      { 
        SOC_PPC_PKT_FRWRD_TYPE_MPLS, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_PKT_FRWRD_TYPE.SOC_PPC_PKT_FRWRD_TYPE_MPLS:\n\r"
        "  packet is forwarded according to MPLS label, Ingress-label-mapping\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "trill", 
    { 
      { 
        SOC_PPC_PKT_FRWRD_TYPE_TRILL, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_PKT_FRWRD_TYPE.SOC_PPC_PKT_FRWRD_TYPE_TRILL:\n\r"
        "  packet is forwarded according to TRILL\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "cpu_trap", 
    { 
      { 
        SOC_PPC_PKT_FRWRD_TYPE_CPU_TRAP, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_PKT_FRWRD_TYPE.SOC_PPC_PKT_FRWRD_TYPE_CPU_TRAP:\n\r"
        "  packet is trapped\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "bridge_after_term", 
    { 
      { 
        SOC_PPC_PKT_FRWRD_TYPE_BRIDGE_AFTER_TERM, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_PKT_FRWRD_TYPE.SOC_PPC_PKT_FRWRD_TYPE_BRIDGE_AFTER_TERM:\n\r"
        "  packet is bridged according to inner LL header, outer LL header is\n\r"
        "  terminated. For example in VPLS application.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
      "tm", 
    { 
      { 
        SOC_PPC_PKT_FRWRD_TYPE_TM, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_PKT_FRWRD_TYPE.SOC_PPC_PKT_FRWRD_TYPE_TM:\n\r"
        "  packet is bridged according to inner LL header, outer LL header is\n\r"
        "  terminated. For example in VPLS application.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
    /* 
 * Last element. Do not remove. 
 */ 
  { 
    VAL_END_OF_LIST 
  } 
} 
#endif 
; 

/********************************************************/        
/********************************************************/        
 
EXTERN CONST 
   PARAM_VAL_RULES 
     SOC_PPC_PKT_HDR_TYPE_rule[] 
#ifdef INIT 
   = 
{ 
  { 
    VAL_SYMBOL, 
    "eth", 
    { 
      { 
        SOC_PPC_PKT_HDR_TYPE_ETH, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_PKT_HDR_TYPE.SOC_PPC_PKT_HDR_TYPE_ETH:\n\r"
        "  Ethernet header\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "ipv4", 
    { 
      { 
        SOC_PPC_PKT_HDR_TYPE_IPV4, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_PKT_HDR_TYPE.SOC_PPC_PKT_HDR_TYPE_IPV4:\n\r"
        "  IPv4 header\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "ipv6", 
    { 
      { 
        SOC_PPC_PKT_HDR_TYPE_IPV6, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_PKT_HDR_TYPE.SOC_PPC_PKT_HDR_TYPE_IPV6:\n\r"
        "  IPv6 over Ethernet\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "mpls", 
    { 
      { 
        SOC_PPC_PKT_HDR_TYPE_MPLS, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_PKT_HDR_TYPE.SOC_PPC_PKT_HDR_TYPE_MPLS:\n\r"
        "  MPLS header\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "trill", 
    { 
      { 
        SOC_PPC_PKT_HDR_TYPE_TRILL, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_PKT_HDR_TYPE.SOC_PPC_PKT_HDR_TYPE_TRILL:\n\r"
        "  TRILL header\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
/* 
 * Last element. Do not remove. 
 */ 
  { 
    VAL_END_OF_LIST 
  } 
} 
#endif 
; 

/********************************************************/        
/********************************************************/        
 
EXTERN CONST 
   PARAM_VAL_RULES 
     SOC_PPC_PKT_HDR_STK_TYPE_rule[] 
#ifdef INIT 
   = 
{ 
  { 
    VAL_SYMBOL, 
    "eth", 
    { 
      { 
        SOC_PPC_PKT_HDR_STK_TYPE_ETH, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_PKT_HDR_STK_TYPE.SOC_PPC_PKT_HDR_STK_TYPE_ETH:\n\r"
        "  Ethernet\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "eth_eth", 
    { 
      { 
        SOC_PPC_PKT_HDR_STK_TYPE_ETH_ETH, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_PKT_HDR_STK_TYPE.SOC_PPC_PKT_HDR_STK_TYPE_ETH_ETH:\n\r"
        "  MAC-in-MAC\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "ipv4_eth", 
    { 
      { 
        SOC_PPC_PKT_HDR_STK_TYPE_IPV4_ETH, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_PKT_HDR_STK_TYPE.SOC_PPC_PKT_HDR_STK_TYPE_IPV4_ETH:\n\r"
        "  IPv4 over Ethernet\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "ipv6_eth", 
    { 
      { 
        SOC_PPC_PKT_HDR_STK_TYPE_IPV6_ETH, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_PKT_HDR_STK_TYPE.SOC_PPC_PKT_HDR_STK_TYPE_IPV6_ETH:\n\r"
        "  IPv6 over Ethernet\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "mpls1_eth", 
    { 
      { 
        SOC_PPC_PKT_HDR_STK_TYPE_MPLS1_ETH, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_PKT_HDR_STK_TYPE.SOC_PPC_PKT_HDR_STK_TYPE_MPLS1_ETH:\n\r"
        "  MPLS over Ethernet\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "mpls2_eth", 
    { 
      { 
        SOC_PPC_PKT_HDR_STK_TYPE_MPLS2_ETH, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_PKT_HDR_STK_TYPE.SOC_PPC_PKT_HDR_STK_TYPE_MPLS2_ETH:\n\r"
        "  MPLS x 2 over Ethernet\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "mpls3_eth", 
    { 
      { 
        SOC_PPC_PKT_HDR_STK_TYPE_MPLS3_ETH, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_PKT_HDR_STK_TYPE.SOC_PPC_PKT_HDR_STK_TYPE_MPLS3_ETH:\n\r"
        "  MPLS x 3 over Ethernet\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "eth_trill_eth", 
    { 
      { 
        SOC_PPC_PKT_HDR_STK_TYPE_ETH_TRILL_ETH, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_PKT_HDR_STK_TYPE.SOC_PPC_PKT_HDR_STK_TYPE_ETH_TRILL_ETH:\n\r"
        "  Ethenet over TRILL over Ethernet\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "eth_mpls1_eth", 
    { 
      { 
        SOC_PPC_PKT_HDR_STK_TYPE_ETH_MPLS1_ETH, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_PKT_HDR_STK_TYPE.SOC_PPC_PKT_HDR_STK_TYPE_ETH_MPLS1_ETH:\n\r"
        "  Ethernet over MPLS over Ethernet\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "eth_mpls2_eth", 
    { 
      { 
        SOC_PPC_PKT_HDR_STK_TYPE_ETH_MPLS2_ETH, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_PKT_HDR_STK_TYPE.SOC_PPC_PKT_HDR_STK_TYPE_ETH_MPLS2_ETH:\n\r"
        "  Ethernet over MPLSx2 over Ethernet\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "eth_mpls3_eth", 
    { 
      { 
        SOC_PPC_PKT_HDR_STK_TYPE_ETH_MPLS3_ETH, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_PKT_HDR_STK_TYPE.SOC_PPC_PKT_HDR_STK_TYPE_ETH_MPLS3_ETH:\n\r"
        "  Ethernet over MPLSx3 over Ethernet\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "ipv4_ipv4_eth", 
    { 
      { 
        SOC_PPC_PKT_HDR_STK_TYPE_IPV4_IPV4_ETH, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_PKT_HDR_STK_TYPE.SOC_PPC_PKT_HDR_STK_TYPE_IPV4_IPV4_ETH:\n\r"
        "  IPv4 over IPv4 over Ethernet\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "ipv4_mpls1_eth", 
    { 
      { 
        SOC_PPC_PKT_HDR_STK_TYPE_IPV4_MPLS1_ETH, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_PKT_HDR_STK_TYPE.SOC_PPC_PKT_HDR_STK_TYPE_IPV4_MPLS1_ETH:\n\r"
        "  IPv4 over MPLS over Ethernet\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "ipv4_mpls2_eth", 
    { 
      { 
        SOC_PPC_PKT_HDR_STK_TYPE_IPV4_MPLS2_ETH, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_PKT_HDR_STK_TYPE.SOC_PPC_PKT_HDR_STK_TYPE_IPV4_MPLS2_ETH:\n\r"
        "  IPv4 over MPLSx2 over Ethernet\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "ipv4_mpls3_eth", 
    { 
      { 
        SOC_PPC_PKT_HDR_STK_TYPE_IPV4_MPLS3_ETH, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_PKT_HDR_STK_TYPE.SOC_PPC_PKT_HDR_STK_TYPE_IPV4_MPLS3_ETH:\n\r"
        "  IPv4 over MPLSx3 over Ethernet\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "ipv6_ipv4_eth", 
    { 
      { 
        SOC_PPC_PKT_HDR_STK_TYPE_IPV6_IPV4_ETH, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_PKT_HDR_STK_TYPE.SOC_PPC_PKT_HDR_STK_TYPE_IPV6_IPV4_ETH:\n\r"
        "  IPv6 over IPv4 over Ethernet\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "ipv6_mpls1_eth", 
    { 
      { 
        SOC_PPC_PKT_HDR_STK_TYPE_IPV6_MPLS1_ETH, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_PKT_HDR_STK_TYPE.SOC_PPC_PKT_HDR_STK_TYPE_IPV6_MPLS1_ETH:\n\r"
        "  IPv6 over MPLS over Ethernet\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "ipv6_mpls2_eth", 
    { 
      { 
        SOC_PPC_PKT_HDR_STK_TYPE_IPV6_MPLS2_ETH, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_PKT_HDR_STK_TYPE.SOC_PPC_PKT_HDR_STK_TYPE_IPV6_MPLS2_ETH:\n\r"
        "  IPv6 over MPLSx2 over Ethernet\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "ipv6_mpls3_eth", 
    { 
      { 
        SOC_PPC_PKT_HDR_STK_TYPE_IPV6_MPLS3_ETH, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_PKT_HDR_STK_TYPE.SOC_PPC_PKT_HDR_STK_TYPE_IPV6_MPLS3_ETH:\n\r"
        "  IPv6 over MPLSx3 over Ethernet\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
/* 
 * Last element. Do not remove. 
 */ 
  { 
    VAL_END_OF_LIST 
  } 
} 
#endif 
; 

/********************************************************/        
/********************************************************/        
 
EXTERN CONST 
   PARAM_VAL_RULES 
     SOC_PPC_IP_ROUTING_TABLE_ITER_TYPE_rule[] 
#ifdef INIT 
   = 
{ 
  { 
    VAL_SYMBOL, 
    "type_fast", 
    { 
      { 
        SOC_PPC_IP_ROUTING_TABLE_ITER_TYPE_FAST, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_IP_ROUTING_TABLE_ITER_TYPE.SOC_PPC_IP_ROUTING_TABLE_ITER_TYPE_FAST:\n\r"
        "  According to this type the iterator, traverse the table unordered, but it\n\r"
        "  provides an efficient traverse of the table.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "type_ip_prefix_ordered", 
    { 
      { 
        SOC_PPC_IP_ROUTING_TABLE_ITER_TYPE_IP_PREFIX_ORDERED, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_IP_ROUTING_TABLE_ITER_TYPE.SOC_PPC_IP_ROUTING_TABLE_ITER_TYPE_IP_PREFIX_ORDER\n\r"
        "  D:\n\r"
        "  According to this type the iterator, traverse the table ordered according to\n\r"
        "  (IP, Prefix)-slower than the fast type.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "type_prefix_ip_ordered", 
    { 
      { 
        SOC_PPC_IP_ROUTING_TABLE_ITER_TYPE_PREFIX_IP_ORDERED, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_IP_ROUTING_TABLE_ITER_TYPE.SOC_PPC_IP_ROUTING_TABLE_ITER_TYPE_PREFIX_IP_ORDER\n\r"
        "  D:\n\r"
        "  According to this type the iterator, traverse the table ordered according to\n\r"
        "  (Prefix, IP)-slower than the previous types (fast and (IP, Prefix)).\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
/* 
 * Last element. Do not remove. 
 */ 
  { 
    VAL_END_OF_LIST 
  } 
} 
#endif 
; 

EXTERN CONST 
   PARAM_VAL_RULES 
     SOC_PPC_HASH_MASKS_rule[] 
#ifdef INIT 
   = 
{ 
  { 
    VAL_SYMBOL, 
    "mac_sa", 
    { 
      { 
        SOC_PPC_HASH_MASKS_MAC_SA, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_HASH_MASKS.SOC_PPC_HASH_MASKS_MAC_SA:\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "mac_da", 
    { 
      { 
        SOC_PPC_HASH_MASKS_MAC_DA, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_HASH_MASKS.SOC_PPC_HASH_MASKS_MAC_DA:\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "vsi", 
    { 
      { 
        SOC_PPC_HASH_MASKS_VSI, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_HASH_MASKS.SOC_PPC_HASH_MASKS_VSI:\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "eth_type_code", 
    { 
      { 
        SOC_PPC_HASH_MASKS_ETH_TYPE_CODE, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_HASH_MASKS.SOC_PPC_HASH_MASKS_ETH_TYPE_CODE:\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "mpls_label_1", 
    { 
      { 
        SOC_PPC_HASH_MASKS_MPLS_LABEL_1, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_HASH_MASKS.SOC_PPC_HASH_MASKS_MPLS_LABEL_1:\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "mpls_label_2", 
    { 
      { 
        SOC_PPC_HASH_MASKS_MPLS_LABEL_2, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_HASH_MASKS.SOC_PPC_HASH_MASKS_MPLS_LABEL_2:\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "mpls_label_3", 
    { 
      { 
        SOC_PPC_HASH_MASKS_MPLS_LABEL_3, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_HASH_MASKS.SOC_PPC_HASH_MASKS_MPLS_LABEL_3:\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "ipv4_sip", 
    { 
      { 
        SOC_PPC_HASH_MASKS_IPV4_SIP, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_HASH_MASKS.SOC_PPC_HASH_MASKS_IPV4_SIP:\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "ipv4_dip", 
    { 
      { 
        SOC_PPC_HASH_MASKS_IPV4_DIP, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_HASH_MASKS.SOC_PPC_HASH_MASKS_IPV4_DIP:\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "ipv4_protocol", 
    { 
      { 
        SOC_PPC_HASH_MASKS_IPV4_PROTOCOL, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_HASH_MASKS.SOC_PPC_HASH_MASKS_IPV4_PROTOCOL:\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "ipv6_sip", 
    { 
      { 
        SOC_PPC_HASH_MASKS_IPV6_SIP, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_HASH_MASKS.SOC_PPC_HASH_MASKS_IPV6_SIP:\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "ipv6_dip", 
    { 
      { 
        SOC_PPC_HASH_MASKS_IPV6_DIP, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_HASH_MASKS.SOC_PPC_HASH_MASKS_IPV6_DIP:\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "ipv6_protocol", 
    { 
      { 
        SOC_PPC_HASH_MASKS_IPV6_PROTOCOL, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_HASH_MASKS.SOC_PPC_HASH_MASKS_IPV6_PROTOCOL:\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "l4_src_port", 
    { 
      { 
        SOC_PPC_HASH_MASKS_L4_SRC_PORT, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_HASH_MASKS.SOC_PPC_HASH_MASKS_L4_SRC_PORT:\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "l4_dest_port", 
    { 
      { 
        SOC_PPC_HASH_MASKS_L4_DEST_PORT, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_HASH_MASKS.SOC_PPC_HASH_MASKS_L4_DEST_PORT:\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "fc_dest_id", 
    { 
      { 
        SOC_PPC_HASH_MASKS_FC_DEST_ID, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_HASH_MASKS.SOC_PPC_HASH_MASKS_FC_DEST_ID:\n\r"
        "  Fibre channel. (FCoE packets)\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "fc_src_id", 
    { 
      { 
        SOC_PPC_HASH_MASKS_FC_SRC_ID, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_HASH_MASKS.SOC_PPC_HASH_MASKS_FC_SRC_ID:\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "fc_seq_id", 
    { 
      { 
        SOC_PPC_HASH_MASKS_FC_SEQ_ID, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_HASH_MASKS.SOC_PPC_HASH_MASKS_FC_SEQ_ID:\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "fc_org_ex_id", 
    { 
      { 
        SOC_PPC_HASH_MASKS_FC_ORG_EX_ID, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_HASH_MASKS.SOC_PPC_HASH_MASKS_FC_ORG_EX_ID:\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "fc_res_ex_id", 
    { 
      { 
        SOC_PPC_HASH_MASKS_FC_RES_EX_ID, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_HASH_MASKS.SOC_PPC_HASH_MASKS_FC_RES_EX_ID:\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "trill_nick_name", 
    { 
      { 
        SOC_PPC_HASH_MASKS_TRILL_EG_NICK, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_HASH_MASKS.SOC_PPC_HASH_MASKS_TRILL_EG_NICK:\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
/* 
 * Last element. Do not remove. 
 */ 
  { 
    VAL_END_OF_LIST 
  } 
} 
#endif 
; 


/********************************************************/        
/********************************************************/        
 
EXTERN CONST 
   PARAM_VAL_RULES 
     SOC_PPC_FP_QUAL_TYPE_rule[] 
#ifdef INIT 
   = 
{ 
  { 
    VAL_SYMBOL, 
    "fwd_vlan_tag", 
    { 
      { 
        SOC_PPC_FP_QUAL_HDR_FWD_VLAN_TAG, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_QUAL_TYPE.SOC_PPC_FP_QUAL_HDR_FWD_VLAN_TAG:\n\r"
        "  VLAN Tag (16b) of the default Ethernet Header. The default Ethernet Header is\n\r"
        "  the forwarding Header (if Ethernet), otherwise the outermost Ethernet Header.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "fwd_sa", 
    { 
      { 
        SOC_PPC_FP_QUAL_HDR_FWD_SA, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_QUAL_TYPE.SOC_PPC_FP_QUAL_HDR_FWD_SA:\n\r"
        "  Default Source MAC address.The Qualifier value can be constructed using the\n\r"
        "  macro SOC_PPC_FP_QUAL_VAL_ENCODE _MAC_ADDRESS (48b). \n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "fwd_da", 
    { 
      { 
        SOC_PPC_FP_QUAL_HDR_FWD_DA, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_QUAL_TYPE.SOC_PPC_FP_QUAL_HDR_FWD_DA:\n\r"
        "  Default Destination MAC address.The Qualifier value can be constructed using\n\r"
        "  the macro SOC_PPC_FP_QUAL_VAL_ENCODE _MAC_ADDRESS (48b).\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "fwd_ethertype", 
    { 
      { 
        SOC_PPC_FP_QUAL_HDR_FWD_ETHERTYPE, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_QUAL_TYPE.SOC_PPC_FP_QUAL_HDR_FWD_ETHERTYPE:\n\r"
        "  Default Ethernet-Type. User-defined EtherTypes can be added via the\n\r"
        "  soc_ppd_fp_control_set API using the type SOC_PPC_FP_CONTROL_TYPE_ETHERTYPE (16b)\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "fwd_2nd_vlan_tag", 
    { 
      { 
        SOC_PPC_FP_QUAL_HDR_FWD_2ND_VLAN_TAG, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_QUAL_TYPE.SOC_PPC_FP_QUAL_HDR_FWD_2ND_VLAN_TAG:\n\r"
        "  Default VLAN TAG (2nd one in the header) - (16b)\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "inner_vlan_tag", 
    { 
      { 
        SOC_PPC_FP_QUAL_HDR_INNER_VLAN_TAG, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_QUAL_TYPE.SOC_PPC_FP_QUAL_HDR_INNER_VLAN_TAG:\n\r"
        "  Inner VLAN Tag (16b)\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "inner_sa", 
    { 
      { 
        SOC_PPC_FP_QUAL_HDR_INNER_SA, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_QUAL_TYPE.SOC_PPC_FP_QUAL_HDR_INNER_SA:\n\r"
        "  Inner Source MAC address.The Qualifier value can be constructed using the\n\r"
        "  macro SOC_PPC_FP_QUAL_VAL_ENCODE _MAC_ADDRESS (48b). \n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "inner_da", 
    { 
      { 
        SOC_PPC_FP_QUAL_HDR_INNER_DA, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_QUAL_TYPE.SOC_PPC_FP_QUAL_HDR_INNER_DA:\n\r"
        "  Inner Destination MAC address.The Qualifier value can be constructed using\n\r"
        "  the macro SOC_PPC_FP_QUAL_VAL_ENCODE _MAC_ADDRESS (48b).\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "inner_ethertype", 
    { 
      { 
        SOC_PPC_FP_QUAL_HDR_INNER_ETHERTYPE, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_QUAL_TYPE.SOC_PPC_FP_QUAL_HDR_INNER_ETHERTYPE:\n\r"
        "  Inner Ethernet-Type. User-defined EtherTypes can be added via the\n\r"
        "  soc_ppd_fp_control_set API using the type SOC_PPC_FP_CONTROL_TYPE_ETHERTYPE (16b)\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "inner_2nd_vlan_tag", 
    { 
      { 
        SOC_PPC_FP_QUAL_HDR_INNER_2ND_VLAN_TAG, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_QUAL_TYPE.SOC_PPC_FP_QUAL_HDR_INNER_2ND_VLAN_TAG:\n\r"
        "  Inner VLAN TAG (2nd one in the header) - (16b)\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "vlan_format", 
    { 
      { 
        SOC_PPC_FP_QUAL_HDR_VLAN_FORMAT, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_QUAL_TYPE.SOC_PPC_FP_QUAL_HDR_VLAN_FORMAT:\n\r"
        "  VLAN Format of the packet. Its value can be built using the enum \n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "vlan_tag", 
    { 
      { 
        SOC_PPC_FP_QUAL_HDR_VLAN_TAG, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_QUAL_TYPE.SOC_PPC_FP_QUAL_HDR_VLAN_TAG:\n\r"
        "  Outer VLAN Tag (16b)\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "sa", 
    { 
      { 
        SOC_PPC_FP_QUAL_HDR_SA, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_QUAL_TYPE.SOC_PPC_FP_QUAL_HDR_SA:\n\r"
        "  Source MAC address.The Qualifier value can be constructed using the macro\n\r"
        "  SOC_PPC_FP_QUAL_VAL_ENCODE _MAC_ADDRESS (48b). \n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "da", 
    { 
      { 
        SOC_PPC_FP_QUAL_HDR_DA, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_QUAL_TYPE.SOC_PPC_FP_QUAL_HDR_DA:\n\r"
        "  Destination MAC address.The Qualifier value can be constructed using the\n\r"
        "  macro SOC_PPC_FP_QUAL_VAL_ENCODE _MAC_ADDRESS (48b). \n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "ethertype", 
    { 
      { 
        SOC_PPC_FP_QUAL_HDR_ETHERTYPE, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_QUAL_TYPE.SOC_PPC_FP_QUAL_HDR_ETHERTYPE:\n\r"
        "  Ethernet-Type code. User-defined EtherTypes can be added via the\n\r"
        "  soc_ppd_fp_control_set API using the type SOC_PPC_FP_CONTROL_TYPE_ETHERTYPE (16b)\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "2nd_vlan_tag", 
    { 
      { 
        SOC_PPC_FP_QUAL_HDR_2ND_VLAN_TAG, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_QUAL_TYPE.SOC_PPC_FP_QUAL_HDR_2ND_VLAN_TAG:\n\r"
        "  VLAN TAG (2nd one in the header) - (16b). The 2nd VLAN Tag can be NOT part of\n\r"
        "  the predefined L2 Key if the In-LIF field replaces it. The replacement is set\n\r"
        "  via the soc_ppd_fp_control_set API with type\n\r"
        "  SOC_PPC_FP_CONTROL_TYPE_L2_L3_KEY_IN_LIF_ENABLE\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "fwd_ipv4_next_prtcl", 
    { 
      { 
        SOC_PPC_FP_QUAL_HDR_FWD_IPV4_NEXT_PRTCL, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_QUAL_TYPE.SOC_PPC_FP_QUAL_HDR_FWD_IPV4_NEXT_PRTCL:\n\r"
        "  Next-Protocol of the default IPv4 Header. The default IPv4 Header is the\n\r"
        "  forwarding Header (if IPv4), otherwise the outermost IPv4 Header. The field\n\r"
        "  value is set according to the SOC_PPD_FP_IPV4_NEXT_PRTCL enum (8b).\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "fwd_ipv4_df", 
    { 
      { 
        SOC_PPC_FP_QUAL_HDR_FWD_IPV4_DF, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_QUAL_TYPE.SOC_PPC_FP_QUAL_HDR_FWD_IPV4_DF:\n\r"
        "  Dont-Fragment (1b)\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "fwd_ipv4_mf", 
    { 
      { 
        SOC_PPC_FP_QUAL_HDR_FWD_IPV4_MF, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_QUAL_TYPE.SOC_PPC_FP_QUAL_HDR_FWD_IPV4_MF:\n\r"
        "  More-Fragment (1b)\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "fwd_ipv4_sip", 
    { 
      { 
        SOC_PPC_FP_QUAL_HDR_FWD_IPV4_SIP, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_QUAL_TYPE.SOC_PPC_FP_QUAL_HDR_FWD_IPV4_SIP:\n\r"
        "  Source-IP.The Qualifier value can be constructed using the macro\n\r"
        "  SOC_PPC_FP_QUAL_VAL_ENCODE _IPV4_SUBNET (32b). \n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "fwd_ipv4_dip", 
    { 
      { 
        SOC_PPC_FP_QUAL_HDR_FWD_IPV4_DIP, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_QUAL_TYPE.SOC_PPC_FP_QUAL_HDR_FWD_IPV4_DIP:\n\r"
        "  Destination-IP.The Qualifier value can be constructed using the macro\n\r"
        "  SOC_PPC_FP_QUAL_VAL_ENCODE _IPV4_SUBNET (32b). \n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "fwd_ipv4_src_port", 
    { 
      { 
        SOC_PPC_FP_QUAL_HDR_FWD_IPV4_SRC_PORT, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_QUAL_TYPE.SOC_PPC_FP_QUAL_HDR_FWD_IPV4_SRC_PORT:\n\r"
        "  L4-Src-Port (16b)\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "fwd_ipv4_dest_port", 
    { 
      { 
        SOC_PPC_FP_QUAL_HDR_FWD_IPV4_DEST_PORT, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_QUAL_TYPE.SOC_PPC_FP_QUAL_HDR_FWD_IPV4_DEST_PORT:\n\r"
        "  L4-Dest-Port (16b)\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "fwd_ipv4_tos", 
    { 
      { 
        SOC_PPC_FP_QUAL_HDR_FWD_IPV4_TOS, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_QUAL_TYPE.SOC_PPC_FP_QUAL_HDR_FWD_IPV4_TOS:\n\r"
        "  Type of Service\n\r"
        "  (8b)\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "fwd_ipv4_tcp_ctl", 
    { 
      { 
        SOC_PPC_FP_QUAL_HDR_FWD_IPV4_TCP_CTL, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_QUAL_TYPE.SOC_PPC_FP_QUAL_HDR_FWD_IPV4_TCP_CTL:\n\r"
        "  TCP-Control field (Bits URG to FIN of the TCP header) (6b)\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "fwd_ipv4_in_vid", 
    { 
      { 
        SOC_PPC_FP_QUAL_HDR_FWD_IPV4_IN_VID, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_QUAL_TYPE.SOC_PPC_FP_QUAL_HDR_FWD_IPV4_IN_VID:\n\r"
        "  Incoming-VID\n\r"
        "  (12b)\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "inner_ipv4_next_prtcl", 
    { 
      { 
        SOC_PPC_FP_QUAL_HDR_INNER_IPV4_NEXT_PRTCL, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_QUAL_TYPE.SOC_PPC_FP_QUAL_HDR_INNER_IPV4_NEXT_PRTCL:\n\r"
        "  Inner Next-Protocol. The field value is set according to the\n\r"
        "  SOC_PPD_FP_IPV4_NEXT_PRTCL enum (8b).\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "inner_ipv4_df", 
    { 
      { 
        SOC_PPC_FP_QUAL_HDR_INNER_IPV4_DF, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_QUAL_TYPE.SOC_PPC_FP_QUAL_HDR_INNER_IPV4_DF:\n\r"
        "  Inner Dont-Fragment (1b)\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "inner_ipv4_mf", 
    { 
      { 
        SOC_PPC_FP_QUAL_HDR_INNER_IPV4_MF, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_QUAL_TYPE.SOC_PPC_FP_QUAL_HDR_INNER_IPV4_MF:\n\r"
        "  Inner More-Fragment (1b)\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "inner_ipv4_sip", 
    { 
      { 
        SOC_PPC_FP_QUAL_HDR_INNER_IPV4_SIP, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_QUAL_TYPE.SOC_PPC_FP_QUAL_HDR_INNER_IPV4_SIP:\n\r"
        "  Inner Source-IP.The Qualifier value can be constructed using the macro\n\r"
        "  SOC_PPC_FP_QUAL_VAL_ENCODE _IPV4_SUBNET (32b). \n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "inner_ipv4_dip", 
    { 
      { 
        SOC_PPC_FP_QUAL_HDR_INNER_IPV4_DIP, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_QUAL_TYPE.SOC_PPC_FP_QUAL_HDR_INNER_IPV4_DIP:\n\r"
        "  Inner Destination-IP.The Qualifier value can be constructed using the macro\n\r"
        "  SOC_PPC_FP_QUAL_VAL_ENCODE _IPV4_SUBNET (32b). \n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "inner_ipv4_src_port", 
    { 
      { 
        SOC_PPC_FP_QUAL_HDR_INNER_IPV4_SRC_PORT, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_QUAL_TYPE.SOC_PPC_FP_QUAL_HDR_INNER_IPV4_SRC_PORT:\n\r"
        "  Inner L4-Src-Port (16b)\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "inner_ipv4_dest_port", 
    { 
      { 
        SOC_PPC_FP_QUAL_HDR_INNER_IPV4_DEST_PORT, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_QUAL_TYPE.SOC_PPC_FP_QUAL_HDR_INNER_IPV4_DEST_PORT:\n\r"
        "  Inner L4-Dest-Port (16b)\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "inner_ipv4_tos", 
    { 
      { 
        SOC_PPC_FP_QUAL_HDR_INNER_IPV4_TOS, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_QUAL_TYPE.SOC_PPC_FP_QUAL_HDR_INNER_IPV4_TOS:\n\r"
        "  Inner Type of Service\n\r"
        "  (8b)\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "inner_ipv4_tcp_ctl", 
    { 
      { 
        SOC_PPC_FP_QUAL_HDR_INNER_IPV4_TCP_CTL, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_QUAL_TYPE.SOC_PPC_FP_QUAL_HDR_INNER_IPV4_TCP_CTL:\n\r"
        "  Inner TCP-Control field (Bits URG to FIN of the TCP header) (6b)\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "ipv4_next_prtcl", 
    { 
      { 
        SOC_PPC_FP_QUAL_HDR_IPV4_NEXT_PRTCL, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_QUAL_TYPE.SOC_PPC_FP_QUAL_HDR_IPV4_NEXT_PRTCL:\n\r"
        "  Next-Protocol. The field value is set according to the SOC_PPD_FP_IPV4_NEXT_PRTCL\n\r"
        "  enum (8b).\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "ipv4_df", 
    { 
      { 
        SOC_PPC_FP_QUAL_HDR_IPV4_DF, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_QUAL_TYPE.SOC_PPC_FP_QUAL_HDR_IPV4_DF:\n\r"
        "  Dont-Fragment\n\r"
        "  (1b)\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "ipv4_mf", 
    { 
      { 
        SOC_PPC_FP_QUAL_HDR_IPV4_MF, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_QUAL_TYPE.SOC_PPC_FP_QUAL_HDR_IPV4_MF:\n\r"
        "  More-Fragment\n\r"
        "  (1b)\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "ipv4_sip", 
    { 
      { 
        SOC_PPC_FP_QUAL_HDR_IPV4_SIP, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_QUAL_TYPE.SOC_PPC_FP_QUAL_HDR_IPV4_SIP:\n\r"
        "  Source-IP.The Qualifier value can be constructed using the macro\n\r"
        "  SOC_PPC_FP_QUAL_VAL_ENCODE _IPV4_SUBNET (32b). \n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "ipv4_dip", 
    { 
      { 
        SOC_PPC_FP_QUAL_HDR_IPV4_DIP, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_QUAL_TYPE.SOC_PPC_FP_QUAL_HDR_IPV4_DIP:\n\r"
        "  Destination-IP.The Qualifier value can be constructed using the macro\n\r"
        "  SOC_PPC_FP_QUAL_VAL_ENCODE _IPV4_SUBNET (32b). \n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "ipv4_src_port", 
    { 
      { 
        SOC_PPC_FP_QUAL_HDR_IPV4_SRC_PORT, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_QUAL_TYPE.SOC_PPC_FP_QUAL_HDR_IPV4_SRC_PORT:\n\r"
        "  L4-Src-Port\n\r"
        "  (16b)\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "ipv4_dest_port", 
    { 
      { 
        SOC_PPC_FP_QUAL_HDR_IPV4_DEST_PORT, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_QUAL_TYPE.SOC_PPC_FP_QUAL_HDR_IPV4_DEST_PORT:\n\r"
        "  L4-Dest-Port\n\r"
        "  (16b)\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "ipv4_tos", 
    { 
      { 
        SOC_PPC_FP_QUAL_HDR_IPV4_TOS, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_QUAL_TYPE.SOC_PPC_FP_QUAL_HDR_IPV4_TOS:\n\r"
        "  Type of Service (8b). \n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "ipv4_tcp_ctl", 
    { 
      { 
        SOC_PPC_FP_QUAL_HDR_IPV4_TCP_CTL, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_QUAL_TYPE.SOC_PPC_FP_QUAL_HDR_IPV4_TCP_CTL:\n\r"
        "  TCP-Control field (Bits URG to FIN of the TCP header) (6b).\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "ipv4_l4ops_hi", 
    { 
      { 
        SOC_PPC_FP_QUAL_HDR_IPV4_L4OPS_HI, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_QUAL_TYPE.SOC_PPC_FP_QUAL_HDR_IPV4_L4OPS_HI:\n\r"
        "  Layer-4 Ops. Its value is defined according to the L4Ops ranges which can be\n\r"
        "  set via the soc_ppd_fp_control_set API with the type\n\r"
        "  SOC_PPC_FP_CONTROL_TYPE_L4OPS_RANGE (24b)\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "ipv4_l4ops_low", 
    { 
      { 
        SOC_PPC_FP_QUAL_HDR_IPV4_L4OPS_LOW, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_QUAL_TYPE.SOC_PPC_FP_QUAL_HDR_IPV4_L4OPS_LOW:\n\r"
        "  Layer-4 Ops. Its value is defined according to the L4Ops ranges which can be\n\r"
        "  set via the soc_ppd_fp_control_set API with the type\n\r"
        "  SOC_PPC_FP_CONTROL_TYPE_L4OPS_RANGE (24b)\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "ipv6_sip_high", 
    { 
      { 
        SOC_PPC_FP_QUAL_HDR_IPV6_SIP_HIGH, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_QUAL_TYPE.SOC_PPC_FP_QUAL_HDR_IPV6_SIP_HIGH:\n\r"
        "  Source-IP MSBs.The Qualifier value can be constructed using the macro\n\r"
        "  SOC_PPC_FP_QUAL_VAL_ENCODE _IPV6_SUBNET (64b).\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "ipv6_sip_low", 
    { 
      { 
        SOC_PPC_FP_QUAL_HDR_IPV6_SIP_LOW, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_QUAL_TYPE.SOC_PPC_FP_QUAL_HDR_IPV6_SIP_LOW:\n\r"
        "  Source-IP LSBs.The Qualifier value can be constructed using the macro\n\r"
        "  SOC_PPC_FP_QUAL_VAL_ENCODE _IPV6_SUBNET (64b).\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "ipv6_dip_high", 
    { 
      { 
        SOC_PPC_FP_QUAL_HDR_IPV6_DIP_HIGH, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_QUAL_TYPE.SOC_PPC_FP_QUAL_HDR_IPV6_DIP_HIGH:\n\r"
        "  Destination-IP MSBs.The Qualifier value can be constructed using the macro\n\r"
        "  SOC_PPC_FP_QUAL_VAL_ENCODE _IPV6_SUBNET (64b).\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "ipv6_dip_low", 
    { 
      { 
        SOC_PPC_FP_QUAL_HDR_IPV6_DIP_LOW, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_QUAL_TYPE.SOC_PPC_FP_QUAL_HDR_IPV6_DIP_LOW:\n\r"
        "  Destination-IP LSBs.The Qualifier value can be constructed using the macro\n\r"
        "  SOC_PPC_FP_QUAL_VAL_ENCODE _IPV6_SUBNET (64b).\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "ipv6_next_prtcl", 
    { 
      { 
        SOC_PPC_FP_QUAL_HDR_IPV6_NEXT_PRTCL, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_QUAL_TYPE.SOC_PPC_FP_QUAL_HDR_IPV6_NEXT_PRTCL:\n\r"
        "  Next-Protocol The field value is set according to the SOC_PPD_FP_IPV6_NEXT_PRTCL\n\r"
        "  enum (8b).\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "ipv6_tcp_ctl", 
    { 
      { 
        SOC_PPC_FP_QUAL_HDR_IPV6_TCP_CTL, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_QUAL_TYPE.SOC_PPC_FP_QUAL_HDR_IPV6_TCP_CTL:\n\r"
        "  TCP-Control\n\r"
        "  (6b)\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "ipv6_l4ops", 
    { 
      { 
        SOC_PPC_FP_QUAL_HDR_IPV6_L4OPS, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_QUAL_TYPE.SOC_PPC_FP_QUAL_HDR_IPV6_L4OPS:\n\r"
        "  L4-Ops. Its value is defined according to the L4Ops ranges which can be set\n\r"
        "  via the soc_ppd_fp_control_set API with the type SOC_PPC_FP_CONTROL_TYPE_L4OPS_RANGE\n\r"
        "  (24b)\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "ipv6_flow_label", 
    { 
      { 
        SOC_PPC_FP_QUAL_HDR_IPV6_FLOW_LABEL, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_QUAL_TYPE.SOC_PPC_FP_QUAL_HDR_IPV6_FLOW_LABEL:\n\r"
        "  FLOW_LABEL\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
      "ipv6_hop_limit", 
    { 
      { 
        SOC_PPC_FP_QUAL_HDR_IPV6_HOP_LIMIT, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_QUAL_TYPE.SOC_PPC_FP_QUAL_HDR_IPV6_HOP_LIMIT:\n\r"
        "  ipv6_hop_limit\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "ipv6_tc", 
    { 
      { 
        SOC_PPC_FP_QUAL_HDR_IPV6_TC, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_QUAL_TYPE.SOC_PPC_FP_QUAL_HDR_IPV6_TC:\n\r"
        "  TC. \n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "mpls_label_fwd", 
    { 
      { 
        SOC_PPC_FP_QUAL_HDR_MPLS_LABEL_FWD, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_QUAL_TYPE.SOC_PPC_FP_QUAL_HDR_MPLS_LABEL_FWD:\n\r"
        "  Forwarding MPLS Label (20b)\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "mpls_exp_fwd", 
    { 
      { 
        SOC_PPC_FP_QUAL_HDR_MPLS_EXP_FWD, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_QUAL_TYPE.SOC_PPC_FP_QUAL_HDR_MPLS_EXP_FWD:\n\r"
        "  Forwarding MPLS Experimental Use (3b)\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "mpls_ttl_fwd", 
    { 
      { 
        SOC_PPC_FP_QUAL_HDR_MPLS_TTL_FWD, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_QUAL_TYPE.SOC_PPC_FP_QUAL_HDR_MPLS_TTL_FWD:\n\r"
        "  Forwarding MPLS Time-To-Live (8b)\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "mpls_bos_fwd", 
    { 
      { 
        SOC_PPC_FP_QUAL_HDR_MPLS_BOS_FWD, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_QUAL_TYPE.SOC_PPC_FP_QUAL_HDR_MPLS_BOS_FWD:\n\r"
        "  Forwarding MPLS Bottom-of-Stack (32b)\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "mpls_label1", 
    { 
      { 
        SOC_PPC_FP_QUAL_HDR_MPLS_LABEL1, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_QUAL_TYPE.SOC_PPC_FP_QUAL_HDR_MPLS_LABEL1:\n\r"
        "  MPLS Label 1 (20b)\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "mpls_exp1", 
    { 
      { 
        SOC_PPC_FP_QUAL_HDR_MPLS_EXP1, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_QUAL_TYPE.SOC_PPC_FP_QUAL_HDR_MPLS_EXP1:\n\r"
        "  MPLS Experimental Use 1 (3b)\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "mpls_ttl1", 
    { 
      { 
        SOC_PPC_FP_QUAL_HDR_MPLS_TTL1, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_QUAL_TYPE.SOC_PPC_FP_QUAL_HDR_MPLS_TTL1:\n\r"
        "  MPLS Time-To-Live 1 (8b)\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "mpls_bos1", 
    { 
      { 
        SOC_PPC_FP_QUAL_HDR_MPLS_BOS1, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_QUAL_TYPE.SOC_PPC_FP_QUAL_HDR_MPLS_BOS1:\n\r"
        "  MPLS Bottom-of-Stack 1 (32b)\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "mpls_label2", 
    { 
      { 
        SOC_PPC_FP_QUAL_HDR_MPLS_LABEL2, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_QUAL_TYPE.SOC_PPC_FP_QUAL_HDR_MPLS_LABEL2:\n\r"
        "  MPLS Label 2 (20b)\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "mpls_exp2", 
    { 
      { 
        SOC_PPC_FP_QUAL_HDR_MPLS_EXP2, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_QUAL_TYPE.SOC_PPC_FP_QUAL_HDR_MPLS_EXP2:\n\r"
        "  MPLS Experimental Use 2 (3b)\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "mpls_ttl2", 
    { 
      { 
        SOC_PPC_FP_QUAL_HDR_MPLS_TTL2, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_QUAL_TYPE.SOC_PPC_FP_QUAL_HDR_MPLS_TTL2:\n\r"
        "  MPLS Time-To-Live 2 (8b)\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "mpls_bos2", 
    { 
      { 
        SOC_PPC_FP_QUAL_HDR_MPLS_BOS2, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_QUAL_TYPE.SOC_PPC_FP_QUAL_HDR_MPLS_BOS2:\n\r"
        "  MPLS Bottom-of-Stack 2 (32b)\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "mpls_label3", 
    { 
      { 
        SOC_PPC_FP_QUAL_HDR_MPLS_LABEL3, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_QUAL_TYPE.SOC_PPC_FP_QUAL_HDR_MPLS_LABEL3:\n\r"
        "  MPLS Label 3 (20b)\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "mpls_exp3", 
    { 
      { 
        SOC_PPC_FP_QUAL_HDR_MPLS_EXP3, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_QUAL_TYPE.SOC_PPC_FP_QUAL_HDR_MPLS_EXP3:\n\r"
        "  MPLS Experimental Use 3 (3b)\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "mpls_ttl3", 
    { 
      { 
        SOC_PPC_FP_QUAL_HDR_MPLS_TTL3, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_QUAL_TYPE.SOC_PPC_FP_QUAL_HDR_MPLS_TTL3:\n\r"
        "  MPLS Time-To-Live 3 (8b)\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "mpls_bos3", 
    { 
      { 
        SOC_PPC_FP_QUAL_HDR_MPLS_BOS3, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_QUAL_TYPE.SOC_PPC_FP_QUAL_HDR_MPLS_BOS3:\n\r"
        "  MPLS Bottom-of-Stack 3 (32b)\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "src_tm_port", 
    { 
      { 
        SOC_PPC_FP_QUAL_IRPP_SRC_TM_PORT, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_QUAL_TYPE.SOC_PPC_FP_QUAL_IRPP_SRC_TM_PORT:\n\r"
        "  Local incoming TM port. Range: 0 - 79.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "src_syst_port", 
    { 
      { 
        SOC_PPC_FP_QUAL_IRPP_SRC_SYST_PORT, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_QUAL_TYPE.SOC_PPC_FP_QUAL_IRPP_SRC_SYST_PORT:\n\r"
        "  Source System-Port ID. Range: 0 - 4K-1.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "src_pp_port", 
    { 
      { 
        SOC_PPC_FP_QUAL_IRPP_SRC_PP_PORT, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_QUAL_TYPE.SOC_PPC_FP_QUAL_IRPP_SRC_PP_PORT:\n\r"
        "  Local incoming PP port. Range: 0 - 63.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "processing_type", 
    { 
      { 
        SOC_PPC_FP_QUAL_IRPP_PROCESSING_TYPE, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_QUAL_TYPE.SOC_PPC_FP_QUAL_IRPP_PROCESSING_TYPE:\n\r"
        "  Processing type set by the parser for this Packet. The value is set according\n\r"
        "  to the SOC_PPC_FP_PROCESSING_TYPE enum \n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "pkt_hdr_type", 
    { 
      { 
        SOC_PPC_FP_QUAL_IRPP_PKT_HDR_TYPE, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_QUAL_TYPE.SOC_PPC_FP_QUAL_IRPP_PKT_HDR_TYPE:\n\r"
        "  Packet header type: header stack of the packet. The field value is set\n\r"
        "  according to the SOC_PPC_FP_PKT_HDR_TYPE enum.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "eth_tag_format", 
    { 
      { 
        SOC_PPC_FP_QUAL_IRPP_ETH_TAG_FORMAT, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_QUAL_TYPE.SOC_PPC_FP_QUAL_IRPP_ETH_TAG_FORMAT:\n\r"
        "  Ethernet Tag format of the packet. Identifies the VLAN tags structure on the\n\r"
        "  packet. The field value can be built using the macro\n\r"
        "  SOC_PPC_FP_QUAL_VAL_ENCODE_ETH_TAG_FORMAT.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "fwd_dec_dest", 
    { 
      { 
        SOC_PPC_FP_QUAL_IRPP_FWD_DEC_DEST, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_QUAL_TYPE.SOC_PPC_FP_QUAL_IRPP_FWD_DEC_DEST:\n\r"
        "  The Forwarding Decision taken for the packet.The Qualifier value can be\n\r"
        "  constructed using the macro SOC_PPC_FP_QUAL_VAL_ENCODE_FWD_DECISION (17b). \n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "fwd_dec_tc", 
    { 
      { 
        SOC_PPC_FP_QUAL_IRPP_FWD_DEC_TC, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_QUAL_TYPE.SOC_PPC_FP_QUAL_IRPP_FWD_DEC_TC:\n\r"
        "  Traffic Class of the Forwarding decision (3b)\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "fwd_dec_dp", 
    { 
      { 
        SOC_PPC_FP_QUAL_IRPP_FWD_DEC_DP, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_QUAL_TYPE.SOC_PPC_FP_QUAL_IRPP_FWD_DEC_DP:\n\r"
        "  Drop Precedence of the Forwarding decision (2b)\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "fwd_dec_cpu_trap_code", 
    { 
      { 
        SOC_PPC_FP_QUAL_IRPP_FWD_DEC_CPU_TRAP_CODE, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_QUAL_TYPE.SOC_PPC_FP_QUAL_IRPP_FWD_DEC_CPU_TRAP_CODE:\n\r"
        "  CPU Trap code of the Forwarding Decision (8b)\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "fwd_dec_cpu_trap_qual", 
    { 
      { 
        SOC_PPC_FP_QUAL_IRPP_FWD_DEC_CPU_TRAP_QUAL, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_QUAL_TYPE.SOC_PPC_FP_QUAL_IRPP_FWD_DEC_CPU_TRAP_QUAL:\n\r"
        "  CPU Trap qualifier of the Forwarding Decision (14b)\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "up", 
    { 
      { 
        SOC_PPC_FP_QUAL_IRPP_UP, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_QUAL_TYPE.SOC_PPC_FP_QUAL_IRPP_UP:\n\r"
        "  User-Priority of the Packet (3b)\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "snoop_code", 
    { 
      { 
        SOC_PPC_FP_QUAL_IRPP_SNOOP_CODE, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_QUAL_TYPE.SOC_PPC_FP_QUAL_IRPP_SNOOP_CODE:\n\r"
        "  Snoop code (8b)\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "learn_decision_dest", 
    { 
      { 
        SOC_PPC_FP_QUAL_IRPP_LEARN_DECISION_DEST, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_QUAL_TYPE.SOC_PPC_FP_QUAL_IRPP_LEARN_DECISION_DEST:\n\r"
        "  Learn Decision Destination.The Qualifier value can be constructed using the\n\r"
        "  macro SOC_PPC_FP_QUAL_VAL_ENCODE_FWD_DECISION (16b).\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "learn_add_info", 
    { 
      { 
        SOC_PPC_FP_QUAL_IRPP_LEARN_ADD_INFO, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_QUAL_TYPE.SOC_PPC_FP_QUAL_IRPP_LEARN_ADD_INFO:\n\r"
        "  Learn Decision Addition Information.The Qualifier value can be constructed\n\r"
        "  using the macro SOC_PPC_FP_QUAL_VAL_ENCODE_FWD_DECISION (24b).\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "in_lif", 
    { 
      { 
        SOC_PPC_FP_QUAL_IRPP_IN_LIF, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_QUAL_TYPE.SOC_PPC_FP_QUAL_IRPP_IN_LIF:\n\r"
        "  In-LIF (16b).The In-LIF can appear in the predefined L2 and L3 IPv4 ACL Keys.\n\r"
        "  In this case, use the soc_ppd_fp_control_set API with type\n\r"
        "  SOC_PPC_FP_CONTROL_TYPE_L2_L3_KEY_IN_LIF_ENABLE\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "ll_mirror_cmd", 
    { 
      { 
        SOC_PPC_FP_QUAL_IRPP_LL_MIRROR_CMD, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_QUAL_TYPE.SOC_PPC_FP_QUAL_IRPP_LL_MIRROR_CMD:\n\r"
        "  LL Mirror Command (4b)\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "system_vsi", 
    { 
      { 
        SOC_PPC_FP_QUAL_IRPP_SYSTEM_VSI, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_QUAL_TYPE.SOC_PPC_FP_QUAL_IRPP_SYSTEM_VSI:\n\r"
        "  System VSI (16b)\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "orientation_is_hub", 
    { 
      { 
        SOC_PPC_FP_QUAL_IRPP_ORIENTATION_IS_HUB, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_QUAL_TYPE.SOC_PPC_FP_QUAL_IRPP_ORIENTATION_IS_HUB:\n\r"
        "  Orientation=Is-Hub (1b)\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "vlan_id", 
    { 
      { 
        SOC_PPC_FP_QUAL_IRPP_VLAN_ID, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_QUAL_TYPE.SOC_PPC_FP_QUAL_IRPP_VLAN_ID:\n\r"
        "  VLAN-ID result of the VLAN Ingress Editing (16b)\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "vlan_pcp", 
    { 
      { 
        SOC_PPC_FP_QUAL_IRPP_VLAN_PCP, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_QUAL_TYPE.SOC_PPC_FP_QUAL_IRPP_VLAN_PCP:\n\r"
        "  PCP result of the VLAN Ingress Editing\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "vlan_dei", 
    { 
      { 
        SOC_PPC_FP_QUAL_IRPP_VLAN_DEI, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_QUAL_TYPE.SOC_PPC_FP_QUAL_IRPP_VLAN_DEI:\n\r"
        "  DEI result of the VLAN Ingress Editing\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "stp_state", 
    { 
      { 
        SOC_PPC_FP_QUAL_IRPP_STP_STATE, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_QUAL_TYPE.SOC_PPC_FP_QUAL_IRPP_STP_STATE_LEARN:\n\r"
        "  Learn State in the Spanning Tree Protocol (2b)\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "fwd_type", 
    { 
      { 
        SOC_PPC_FP_QUAL_IRPP_FWD_TYPE, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_QUAL_TYPE.SOC_PPC_FP_QUAL_IRPP_FWD_TYPE:\n\r"
        "  Type of forwarding processed on the packet.The field value is set according\n\r"
        "  to the SOC_PPC_FP_FWD_TYPE enum.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "sub_header_ndx", 
    { 
      { 
        SOC_PPC_FP_QUAL_IRPP_SUB_HEADER_NDX, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_QUAL_TYPE.SOC_PPC_FP_QUAL_IRPP_SUB_HEADER_NDX:\n\r"
        "  Indicate on which header the forwarding occurs (3b)\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "key_changed", 
    { 
      { 
        SOC_PPC_FP_QUAL_IRPP_KEY_CHANGED, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_QUAL_TYPE.SOC_PPC_FP_QUAL_IRPP_KEY_CHANGED:\n\r"
        "  key changed (12b)\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "in_rif", 
    { 
      { 
        SOC_PPC_FP_QUAL_IRPP_IN_RIF, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_QUAL_TYPE.SOC_PPC_FP_QUAL_IRPP_IN_RIF:\n\r"
        "  In-RIF (12b)\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "vrf", 
    { 
      { 
        SOC_PPC_FP_QUAL_IRPP_VRF, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_QUAL_TYPE.SOC_PPC_FP_QUAL_IRPP_VRF:\n\r"
        "  VRF (8b)\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "pckt_is_comp_mc", 
    { 
      { 
        SOC_PPC_FP_QUAL_IRPP_PCKT_IS_COMP_MC, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_QUAL_TYPE.SOC_PPC_FP_QUAL_IRPP_PCKT_IS_COMP_MC:\n\r"
        "  Packet-Is-Compatible-Multicast (1b)\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "my_bmac", 
    { 
      { 
        SOC_PPC_FP_QUAL_IRPP_MY_BMAC, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_QUAL_TYPE.SOC_PPC_FP_QUAL_IRPP_MY_BMAC:\n\r"
        "  My-Backbone-MAC (1b)\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "in_ttl", 
    { 
      { 
        SOC_PPC_FP_QUAL_IRPP_IN_TTL, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_QUAL_TYPE.SOC_PPC_FP_QUAL_IRPP_IN_TTL:\n\r"
        "  In-TTL (8b)\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "in_dscp_exp", 
    { 
      { 
        SOC_PPC_FP_QUAL_IRPP_IN_DSCP_EXP, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_QUAL_TYPE.SOC_PPC_FP_QUAL_IRPP_IN_DSCP_EXP:\n\r"
        "  In-DSCP-EXP (8b)\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "packet_size_range", 
    { 
      { 
        SOC_PPC_FP_QUAL_IRPP_PACKET_SIZE_RANGE, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_QUAL_TYPE.SOC_PPC_FP_QUAL_IRPP_PACKET_SIZE_RANGE:\n\r"
        "  Packet-Size-Range (2b). The soc_ppd_fp_control_set API can be called to set the\n\r"
        "  packet size ranges.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "term_type", 
    { 
      { 
        SOC_PPC_FP_QUAL_IRPP_TERM_TYPE, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_QUAL_TYPE.SOC_PPC_FP_QUAL_IRPP_TERM_TYPE:\n\r"
        "  Packet termination type (4b) indicating the number of headers that have been terminated. \n\r"
        "  Its encoding is based on the enum SOC_PPC_PKT_TERM_TYPE.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "erpp_pp_port_data", 
    { 
      { 
        SOC_PPC_FP_QUAL_ERPP_PP_PORT_DATA, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_QUAL_TYPE.SOC_PPC_FP_QUAL_ERPP_PP_PORT_DATA:\n\r"
        "  Out-PP-Port data part of the predefined Egress ACL Keys. The value of each\n\r"
        "  PP-Port can be defined via the soc_ppd_fp_control_set API with type\n\r"
        "  SOC_PPC_FP_CONTROL_TYPE_EGR_PP_PORT_DATA (6b).\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "erpp_ipv4_next_protocol", 
    { 
      { 
        SOC_PPC_FP_QUAL_ERPP_IPV4_NEXT_PROTOCOL, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_QUAL_TYPE.SOC_PPC_FP_QUAL_ERPP_IPV4_NEXT_PROTOCOL:\n\r"
        "  IPv4 Next-Protocol matches. The IPv4 Next-Protocol is compared to values\n\r"
        "  which can be set via the soc_ppd_fp_control_set API with type\n\r"
        "  SOC_PPC_FP_CONTROL_TYPE_EGR_IPV4_NEXT_PROTOCOL (4b).\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "erpp_ftmh", 
    { 
      { 
        SOC_PPC_FP_QUAL_ERPP_FTMH, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_QUAL_TYPE.SOC_PPC_FP_QUAL_ERPP_FTMH:\n\r"
        "  Packet FTMH (Base + CUD Extension). Needed for the predefined egress MPLS and\n\r"
        "  TM ACL Keys (64b). Its value can be built using the macro\n\r"
        "  SOC_PPC_FP_QUAL_VAL_ENCODE_FTMH.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "erpp_payload", 
    { 
      { 
        SOC_PPC_FP_QUAL_ERPP_PAYLOAD, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_QUAL_TYPE.SOC_PPC_FP_QUAL_ERPP_PAYLOAD:\n\r"
        "  Packet Payload .\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "user_def_0", 
    { 
      { 
        SOC_PPC_FP_QUAL_HDR_USER_DEF_0, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_QUAL_TYPE.SOC_PPC_FP_QUAL_HDR_USER_DEF_0:\n\r"
        "  User-Defined field from the Packet Header. The field corresponds to bits\n\r"
        "  extracted from a specific location which can be set via the\n\r"
        "  soc_ppd_fp_control_set API with type SOC_PPC_FP_CONTROL_TYPE_HDR_USER_DEF.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "user_def_1", 
    { 
      { 
        SOC_PPC_FP_QUAL_HDR_USER_DEF_1, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_QUAL_TYPE.SOC_PPC_FP_QUAL_HDR_USER_DEF_1:\n\r"
        "  See SOC_PPC_FP_QUAL_HDR_USER_DEF_0.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "user_def_2", 
    { 
      { 
        SOC_PPC_FP_QUAL_HDR_USER_DEF_2, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_QUAL_TYPE.SOC_PPC_FP_QUAL_HDR_USER_DEF_2:\n\r"
        "  See SOC_PPC_FP_QUAL_HDR_USER_DEF_0.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "user_def_3", 
    { 
      { 
        SOC_PPC_FP_QUAL_HDR_USER_DEF_3, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_QUAL_TYPE.SOC_PPC_FP_QUAL_HDR_USER_DEF_3:\n\r"
        "  See SOC_PPC_FP_QUAL_HDR_USER_DEF_0.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "user_def_4", 
    { 
      { 
        SOC_PPC_FP_QUAL_HDR_USER_DEF_4, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_QUAL_TYPE.SOC_PPC_FP_QUAL_HDR_USER_DEF_4:\n\r"
        "  See SOC_PPC_FP_QUAL_HDR_USER_DEF_0.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "user_def_5", 
    { 
      { 
        SOC_PPC_FP_QUAL_HDR_USER_DEF_5, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_QUAL_TYPE.SOC_PPC_FP_QUAL_HDR_USER_DEF_5:\n\r"
        "  See SOC_PPC_FP_QUAL_HDR_USER_DEF_0.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "user_def_6", 
    { 
      { 
        SOC_PPC_FP_QUAL_HDR_USER_DEF_6, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_QUAL_TYPE.SOC_PPC_FP_QUAL_HDR_USER_DEF_6:\n\r"
        "  See SOC_PPC_FP_QUAL_HDR_USER_DEF_0.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "user_def_7", 
    { 
      { 
        SOC_PPC_FP_QUAL_HDR_USER_DEF_7, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_QUAL_TYPE.SOC_PPC_FP_QUAL_HDR_USER_DEF_7:\n\r"
        "  See SOC_PPC_FP_QUAL_HDR_USER_DEF_0.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "user_def_8", 
    { 
      { 
        SOC_PPC_FP_QUAL_HDR_USER_DEF_8, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_QUAL_TYPE.SOC_PPC_FP_QUAL_HDR_USER_DEF_8:\n\r"
        "  See SOC_PPC_FP_QUAL_HDR_USER_DEF_0.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "user_def_9", 
    { 
      { 
        SOC_PPC_FP_QUAL_HDR_USER_DEF_9, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_QUAL_TYPE.SOC_PPC_FP_QUAL_HDR_USER_DEF_9:\n\r"
        "  See SOC_PPC_FP_QUAL_HDR_USER_DEF_0.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "2nd_lkp_asd", 
    { 
      { 
        SOC_PPC_FP_QUAL_IRPP_LEM_2ND_LKUP_ASD, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_QUAL_TYPE.SOC_PPC_FP_QUAL_IRPP_LEM_2ND_LKUP_ASD:\n\r"
        "  See SOC_PPC_FP_QUAL_IRPP_LEM_2ND_LKUP_ASD.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
/* 
 * Last element. Do not remove. 
 */ 
  { 
    VAL_END_OF_LIST 
  } 
} 
#endif 
; 

/********************************************************/        
/********************************************************/        
 
EXTERN CONST 
   PARAM_VAL_RULES 
     SOC_PPC_FP_PKT_HDR_TYPE_rule[] 
#ifdef INIT 
   = 
{ 
  { 
    VAL_SYMBOL, 
    "raw", 
    { 
      { 
        SOC_PPC_FP_PKT_HDR_TYPE_RAW, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_PKT_HDR_TYPE.SOC_PPC_FP_PKT_HDR_TYPE_RAW:\n\r"
        "  Raw packet\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "ftmh", 
    { 
      { 
        SOC_PPC_FP_PKT_HDR_TYPE_FTMH, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_PKT_HDR_TYPE.SOC_PPC_FP_PKT_HDR_TYPE_FTMH:\n\r"
        "  Packet with first header FTMH (e.g., for stacking ports) and possibly with a\n\r"
        "  PPH afterwards.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "tm", 
    { 
      { 
        SOC_PPC_FP_PKT_HDR_TYPE_TM, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_PKT_HDR_TYPE.SOC_PPC_FP_PKT_HDR_TYPE_TM:\n\r"
        "  Only ITMH as parsed header\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "tm_is", 
    { 
      { 
        SOC_PPC_FP_PKT_HDR_TYPE_TM_IS, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_PKT_HDR_TYPE.SOC_PPC_FP_PKT_HDR_TYPE_TM_IS:\n\r"
        "  Ingress Shaping + ITMH headers\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "tm_pph", 
    { 
      { 
        SOC_PPC_FP_PKT_HDR_TYPE_TM_PPH, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_PKT_HDR_TYPE.SOC_PPC_FP_PKT_HDR_TYPE_TM_PPH:\n\r"
        "  ITMH + PPH headers\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "tm_is_pph", 
    { 
      { 
        SOC_PPC_FP_PKT_HDR_TYPE_TM_IS_PPH, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_PKT_HDR_TYPE.SOC_PPC_FP_PKT_HDR_TYPE_TM_IS_PPH:\n\r"
        "  Ingress Shaping + ITMH + PPH headers\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "eth", 
    { 
      { 
        SOC_PPC_FP_PKT_HDR_TYPE_ETH, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_PKT_HDR_TYPE.SOC_PPC_FP_PKT_HDR_TYPE_ETH:\n\r"
        "  Ethernet\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "eth_eth", 
    { 
      { 
        SOC_PPC_FP_PKT_HDR_TYPE_ETH_ETH, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_PKT_HDR_TYPE.SOC_PPC_FP_PKT_HDR_TYPE_ETH_ETH:\n\r"
        "  MAC-in-MAC\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "ipv4_eth", 
    { 
      { 
        SOC_PPC_FP_PKT_HDR_TYPE_IPV4_ETH, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_PKT_HDR_TYPE.SOC_PPC_FP_PKT_HDR_TYPE_IPV4_ETH:\n\r"
        "  IPv4 over Ethernet\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "ipv6_eth", 
    { 
      { 
        SOC_PPC_FP_PKT_HDR_TYPE_IPV6_ETH, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_PKT_HDR_TYPE.SOC_PPC_FP_PKT_HDR_TYPE_IPV6_ETH:\n\r"
        "  IPv6 over Ethernet\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "mpls1_eth", 
    { 
      { 
        SOC_PPC_FP_PKT_HDR_TYPE_MPLS1_ETH, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_PKT_HDR_TYPE.SOC_PPC_FP_PKT_HDR_TYPE_MPLS1_ETH:\n\r"
        "  MPLS over Ethernet\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "mpls2_eth", 
    { 
      { 
        SOC_PPC_FP_PKT_HDR_TYPE_MPLS2_ETH, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_PKT_HDR_TYPE.SOC_PPC_FP_PKT_HDR_TYPE_MPLS2_ETH:\n\r"
        "  MPLS x 2 over Ethernet\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "mpls3_eth", 
    { 
      { 
        SOC_PPC_FP_PKT_HDR_TYPE_MPLS3_ETH, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_PKT_HDR_TYPE.SOC_PPC_FP_PKT_HDR_TYPE_MPLS3_ETH:\n\r"
        "  MPLS x 3 over Ethernet\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "eth_mpls1_eth", 
    { 
      { 
        SOC_PPC_FP_PKT_HDR_TYPE_ETH_MPLS1_ETH, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_PKT_HDR_TYPE.SOC_PPC_FP_PKT_HDR_TYPE_ETH_MPLS1_ETH:\n\r"
        "  Ethernet over MPLS over Ethernet\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "eth_mpls2_eth", 
    { 
      { 
        SOC_PPC_FP_PKT_HDR_TYPE_ETH_MPLS2_ETH, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_PKT_HDR_TYPE.SOC_PPC_FP_PKT_HDR_TYPE_ETH_MPLS2_ETH:\n\r"
        "  Ethernet over MPLS x 2 over Ethernet\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "eth_mpls3_eth", 
    { 
      { 
        SOC_PPC_FP_PKT_HDR_TYPE_ETH_MPLS3_ETH, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_PKT_HDR_TYPE.SOC_PPC_FP_PKT_HDR_TYPE_ETH_MPLS3_ETH:\n\r"
        "  Ethernet over MPLS x 3 over Ethernet\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "ipv4_mpls1_eth", 
    { 
      { 
        SOC_PPC_FP_PKT_HDR_TYPE_IPV4_MPLS1_ETH, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_PKT_HDR_TYPE.SOC_PPC_FP_PKT_HDR_TYPE_IPV4_MPLS1_ETH:\n\r"
        "  IPv4 over MPLS over Ethernet\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "ipv4_mpls2_eth", 
    { 
      { 
        SOC_PPC_FP_PKT_HDR_TYPE_IPV4_MPLS2_ETH, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_PKT_HDR_TYPE.SOC_PPC_FP_PKT_HDR_TYPE_IPV4_MPLS2_ETH:\n\r"
        "  IPv4 over MPLS x 2 over Ethernet\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "ipv4_mpls3_eth", 
    { 
      { 
        SOC_PPC_FP_PKT_HDR_TYPE_IPV4_MPLS3_ETH, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_PKT_HDR_TYPE.SOC_PPC_FP_PKT_HDR_TYPE_IPV4_MPLS3_ETH:\n\r"
        "  IPv4 over MPLS x 3 over Ethernet\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "ipv6_mpls1_eth", 
    { 
      { 
        SOC_PPC_FP_PKT_HDR_TYPE_IPV6_MPLS1_ETH, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_PKT_HDR_TYPE.SOC_PPC_FP_PKT_HDR_TYPE_IPV6_MPLS1_ETH:\n\r"
        "  IPv6 over MPLS over Ethernet\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "ipv6_mpls2_eth", 
    { 
      { 
        SOC_PPC_FP_PKT_HDR_TYPE_IPV6_MPLS2_ETH, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_PKT_HDR_TYPE.SOC_PPC_FP_PKT_HDR_TYPE_IPV6_MPLS2_ETH:\n\r"
        "  IPv6 over MPLS x 2 over Ethernet\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "ipv6_mpls3_eth", 
    { 
      { 
        SOC_PPC_FP_PKT_HDR_TYPE_IPV6_MPLS3_ETH, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_PKT_HDR_TYPE.SOC_PPC_FP_PKT_HDR_TYPE_IPV6_MPLS3_ETH:\n\r"
        "  IPv6 over MPLS x 3 over Ethernet\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "ipv4_ipv4_eth", 
    { 
      { 
        SOC_PPC_FP_PKT_HDR_TYPE_IPV4_IPV4_ETH, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_PKT_HDR_TYPE.SOC_PPC_FP_PKT_HDR_TYPE_IPV4_IPV4_ETH:\n\r"
        "  IPv4 over IPv4 over Ethernet\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "ipv6_ipv4_eth", 
    { 
      { 
        SOC_PPC_FP_PKT_HDR_TYPE_IPV6_IPV4_ETH, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_PKT_HDR_TYPE.SOC_PPC_FP_PKT_HDR_TYPE_IPV6_IPV4_ETH:\n\r"
        "  IPv6 over IPv4 over Ethernet\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "eth_trill_eth", 
    { 
      { 
        SOC_PPC_FP_PKT_HDR_TYPE_ETH_TRILL_ETH, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_PKT_HDR_TYPE.SOC_PPC_FP_PKT_HDR_TYPE_ETH_TRILL_ETH:\n\r"
        "  Ethernet over Trill over Ethernet\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
/* 
 * Last element. Do not remove. 
 */ 
  { 
    VAL_END_OF_LIST 
  } 
} 
#endif 
; 

/********************************************************/        
/********************************************************/        
 
EXTERN CONST 
   PARAM_VAL_RULES 
     SOC_PPC_FP_FWD_TYPE_rule[] 
#ifdef INIT 
   = 
{ 
  { 
    VAL_SYMBOL, 
    "bridged", 
    { 
      { 
        SOC_PPC_FP_FWD_TYPE_BRIDGED, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_FWD_TYPE.SOC_PPC_FP_FWD_TYPE_BRIDGED:\n\r"
        "  The packet was bridged according to outer most LL header\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "ipv4_uc", 
    { 
      { 
        SOC_PPC_FP_FWD_TYPE_IPV4_UC, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_FWD_TYPE.SOC_PPC_FP_FWD_TYPE_IPV4_UC:\n\r"
        "  The packet was IPv4 UC routed\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "ipv4_mc", 
    { 
      { 
        SOC_PPC_FP_FWD_TYPE_IPV4_MC, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_FWD_TYPE.SOC_PPC_FP_FWD_TYPE_IPV4_MC:\n\r"
        "  The packet was IPv4 MC routed\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "ipv6_uc", 
    { 
      { 
        SOC_PPC_FP_FWD_TYPE_IPV6_UC, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_FWD_TYPE.SOC_PPC_FP_FWD_TYPE_IPV6_UC:\n\r"
        "  The packet was IPv6 UC routed\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "ipv6_mc", 
    { 
      { 
        SOC_PPC_FP_FWD_TYPE_IPV6_MC, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_FWD_TYPE.SOC_PPC_FP_FWD_TYPE_IPV6_MC:\n\r"
        "  The packet was IPv6 MC routed\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "mpls", 
    { 
      { 
        SOC_PPC_FP_FWD_TYPE_MPLS, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_FWD_TYPE.SOC_PPC_FP_FWD_TYPE_MPLS:\n\r"
        "  The packet was forwarded according to MPLS label, Ingress-label-mapping\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "trill", 
    { 
      { 
        SOC_PPC_FP_FWD_TYPE_TRILL, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_FWD_TYPE.SOC_PPC_FP_FWD_TYPE_TRILL:\n\r"
        "  The packet was forwarded according to TRILL\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "bridged_after_term", 
    { 
      { 
        SOC_PPC_FP_FWD_TYPE_BRIDGED_AFTER_TERM, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_FWD_TYPE.SOC_PPC_FP_FWD_TYPE_BRIDGED_AFTER_TERM:\n\r"
        "  The packet was bridged according to inner LL header, outer LL header was\n\r"
        "  terminated. For example in VPLS application.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "cpu_trap", 
    { 
      { 
        SOC_PPC_FP_FWD_TYPE_CPU_TRAP, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_FWD_TYPE.SOC_PPC_FP_FWD_TYPE_CPU_TRAP:\n\r"
        "  The packet was trapped\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "tm", 
    { 
      { 
        SOC_PPC_FP_FWD_TYPE_TM, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_FWD_TYPE.SOC_PPC_FP_FWD_TYPE_TM:\n\r"
        "  The packet was trapped\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
/* 
 * Last element. Do not remove. 
 */ 
  { 
    VAL_END_OF_LIST 
  } 
} 
#endif 
; 

/********************************************************/        
/********************************************************/        
 
EXTERN CONST 
   PARAM_VAL_RULES 
     SOC_PPC_FP_PROCESSING_TYPE_rule[] 
#ifdef INIT 
   = 
{ 
  { 
    VAL_SYMBOL, 
    "raw", 
    { 
      { 
        SOC_PPC_FP_PROCESSING_TYPE_RAW, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_PROCESSING_TYPE.SOC_PPC_FP_PROCESSING_TYPE_RAW:\n\r"
        "  The packet headers are not parsed: all the packet is considered as payload\n\r"
        "  (e.g., for Raw ports).\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "eth", 
    { 
      { 
        SOC_PPC_FP_PROCESSING_TYPE_ETH, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_PROCESSING_TYPE.SOC_PPC_FP_PROCESSING_TYPE_ETH:\n\r"
        "  The first parsed packet Header is of Ethernet type.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "tm", 
    { 
      { 
        SOC_PPC_FP_PROCESSING_TYPE_TM, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_PROCESSING_TYPE.SOC_PPC_FP_PROCESSING_TYPE_TM:\n\r"
        "  The first parsed packet Header is ITMH\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "ftmh", 
    { 
      { 
        SOC_PPC_FP_PROCESSING_TYPE_FTMH, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_PROCESSING_TYPE.SOC_PPC_FP_PROCESSING_TYPE_FTMH:\n\r"
        "  The first parsed packet Header is FTMH\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
/* 
 * Last element. Do not remove. 
 */ 
  { 
    VAL_END_OF_LIST 
  } 
} 
#endif 
; 

/********************************************************/        
/********************************************************/        
 
EXTERN CONST 
   PARAM_VAL_RULES 
     SOC_PPC_FP_BASE_HEADER_TYPE_rule[] 
#ifdef INIT 
   = 
{ 
  { 
    VAL_SYMBOL, 
    "header_0", 
    { 
      { 
        SOC_PPC_FP_BASE_HEADER_TYPE_HEADER_0, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_BASE_HEADER_TYPE.SOC_PPC_FP_BASE_HEADER_TYPE_HEADER_0:\n\r"
        "  First header as identified by the parser. For example, a Custom Header before\n\r"
        "  Ethernet, or Sequence Number for Fat Pipe packets.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "header_1", 
    { 
      { 
        SOC_PPC_FP_BASE_HEADER_TYPE_HEADER_1, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_BASE_HEADER_TYPE.SOC_PPC_FP_BASE_HEADER_TYPE_HEADER_1:\n\r"
        "  Second header as identified by the parser: Ethernet for Packets with Ethernet\n\r"
        "  header, or ITMH for TM traffic.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "header_2", 
    { 
      { 
        SOC_PPC_FP_BASE_HEADER_TYPE_HEADER_2, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_BASE_HEADER_TYPE.SOC_PPC_FP_BASE_HEADER_TYPE_HEADER_2:\n\r"
        "  Third header as identified by the parser. For example, IPv4 for IPv4 over\n\r"
        "  Ethernet packets.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "header_3", 
    { 
      { 
        SOC_PPC_FP_BASE_HEADER_TYPE_HEADER_3, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_BASE_HEADER_TYPE.SOC_PPC_FP_BASE_HEADER_TYPE_HEADER_3:\n\r"
        "  Fourth header as identified by the parser. For example, IPv6 for IPv6 over\n\r"
        "  IPv4 over Ethernet packets.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "header_4", 
    { 
      { 
        SOC_PPC_FP_BASE_HEADER_TYPE_HEADER_4, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_BASE_HEADER_TYPE.SOC_PPC_FP_BASE_HEADER_TYPE_HEADER_4:\n\r"
        "  Fifth header as identified by the parser. For example, the third MPLS header\n\r"
        "  for MPLS * 3 over Ethernet packets.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "header_5", 
    { 
      { 
        SOC_PPC_FP_BASE_HEADER_TYPE_HEADER_5, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_BASE_HEADER_TYPE.SOC_PPC_FP_BASE_HEADER_TYPE_HEADER_5:\n\r"
        "  Sixth header as identified by the parser.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "fwd", 
    { 
      { 
        SOC_PPC_FP_BASE_HEADER_TYPE_FWD, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_BASE_HEADER_TYPE.SOC_PPC_FP_BASE_HEADER_TYPE_FWD:\n\r"
        "  Forwarding header.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "fwd_post", 
    { 
      { 
        SOC_PPC_FP_BASE_HEADER_TYPE_FWD_POST, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_BASE_HEADER_TYPE.SOC_PPC_FP_BASE_HEADER_TYPE_FWD_POST:\n\r"
        "  Header following the forwarding header.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
/* 
 * Last element. Do not remove. 
 */ 
  { 
    VAL_END_OF_LIST 
  } 
} 
#endif 
; 

/********************************************************/        
/********************************************************/        
 
EXTERN CONST 
   PARAM_VAL_RULES 
     SOC_PPC_FP_ACTION_TYPE_rule[] 
#ifdef INIT 
   = 
{ 
  { 
    VAL_SYMBOL, 
    "dest", 
    { 
      { 
        SOC_PPC_FP_ACTION_TYPE_DEST, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_ACTION_TYPE.SOC_PPC_FP_ACTION_TYPE_DEST:\n\r"
        "  Action on the Destination field.Output value encoded in 17 bits, use the\n\r"
        "  macro SOC_PPC_FP_QUAL_VAL_ENCODE _FWD_DECISION for its construction.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "dp", 
    { 
      { 
        SOC_PPC_FP_ACTION_TYPE_DP, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_ACTION_TYPE.SOC_PPC_FP_ACTION_TYPE_DP:\n\r"
        "  Action on the Drop Precedence field. Output value (4 bits): '1' (1b), '0'\n\r"
        "  (1b), Drop Precedence (2b).\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "tc", 
    { 
      { 
        SOC_PPC_FP_ACTION_TYPE_TC, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_ACTION_TYPE.SOC_PPC_FP_ACTION_TYPE_TC:\n\r"
        "  Action on the Traffic Class field.Output value (4 bits): '1' (1b), Traffic\n\r"
        "  Class (3b).\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "trap", 
    { 
      { 
        SOC_PPC_FP_ACTION_TYPE_TRAP, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_ACTION_TYPE.SOC_PPC_FP_ACTION_TYPE_TRAP:\n\r"
        "  Action on the Forward field.Output value (11 bits): Strength (3b), Trap code\n\r"
        "  (8b).\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "snp", 
    { 
      { 
        SOC_PPC_FP_ACTION_TYPE_SNP, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_ACTION_TYPE.SOC_PPC_FP_ACTION_TYPE_SNP:\n\r"
        "  Action on the Snoop field.Output value (10 bits): Strength (2b), Snoop code\n\r"
        "  (8b).\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "mirror", 
    { 
      { 
        SOC_PPC_FP_ACTION_TYPE_MIRROR, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_ACTION_TYPE.SOC_PPC_FP_ACTION_TYPE_MIRROR:\n\r"
        "  Action on the Mirror field.Output value (4 bits): Mirror profile (3b).\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "mir_dis", 
    { 
      { 
        SOC_PPC_FP_ACTION_TYPE_MIR_DIS, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_ACTION_TYPE.SOC_PPC_FP_ACTION_TYPE_MIR_DIS:\n\r"
        "  Action on the Outbound-Mirror-Disable field.Output value (1 bit):\n\r"
        "  Mirror-Disable (1b).\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "exc_src", 
    { 
      { 
        SOC_PPC_FP_ACTION_TYPE_EXC_SRC, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_ACTION_TYPE.SOC_PPC_FP_ACTION_TYPE_EXC_SRC:\n\r"
        "  Action on the Exclude-Source field.Output value (1 bit): Exclude-Source (1b).\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "is", 
    { 
      { 
        SOC_PPC_FP_ACTION_TYPE_IS, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_ACTION_TYPE.SOC_PPC_FP_ACTION_TYPE_IS:\n\r"
        "  Action on the Ingress Shaping field.Output value (16 bits): IS-Destination\n\r"
        "  (16b).\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "meter", 
    { 
      { 
        SOC_PPC_FP_ACTION_TYPE_METER, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_ACTION_TYPE.SOC_PPC_FP_ACTION_TYPE_METER:\n\r"
        "  Action on the Meter field.Output value (14 bits): Meter-Instance (13b),\n\r"
        "  Meter-Processor (1b).\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "counter", 
    { 
      { 
        SOC_PPC_FP_ACTION_TYPE_COUNTER, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_ACTION_TYPE.SOC_PPC_FP_ACTION_TYPE_COUNTER:\n\r"
        "  Action on the Counter field.Output value (14 bits): Counter-Instance (13b),\n\r"
        "  Counter-Processor (1b).\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "stat", 
    { 
      { 
        SOC_PPC_FP_ACTION_TYPE_STAT, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_ACTION_TYPE.SOC_PPC_FP_ACTION_TYPE_STAT:\n\r"
        "  Action on the Statistic-Tag field. Output value (18 bits).\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "outlif", 
    { 
      { 
        SOC_PPC_FP_ACTION_TYPE_OUTLIF, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_ACTION_TYPE.SOC_PPC_FP_ACTION_TYPE_OUTLIF:\n\r"
        "  Action on the Out-LIF field. Output value (16 bits): Out-LIF value (16b).\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "lag_lb", 
    { 
      { 
        SOC_PPC_FP_ACTION_TYPE_LAG_LB, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_ACTION_TYPE.SOC_PPC_FP_ACTION_TYPE_LAG_LB:\n\r"
        "  Action on the LAG Load-Balancing field. Output value (30 bits): Out-LIF value\n\r"
        "  (16b).\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "ecmp_lb", 
    { 
      { 
        SOC_PPC_FP_ACTION_TYPE_ECMP_LB, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_ACTION_TYPE.SOC_PPC_FP_ACTION_TYPE_ECMP_LB:\n\r"
        "  Action on the ECMP Load-Balancing field. Output value (20 bits): ECMP\n\r"
        "  Load-Balancing\n\r"
        "  (20b).\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "stack_rt_hist", 
    { 
      { 
        SOC_PPC_FP_ACTION_TYPE_STACK_RT_HIST, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_ACTION_TYPE.SOC_PPC_FP_ACTION_TYPE_STACK_RT_HIST:\n\r"
        "  Action on the Stacking-Route-History field. Output value (16 bits):\n\r"
        "  Stacking-Route-History data (16b).\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "vsq_ptr", 
    { 
      { 
        SOC_PPC_FP_ACTION_TYPE_VSQ_PTR, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_ACTION_TYPE.SOC_PPC_FP_ACTION_TYPE_VSQ_PTR:\n\r"
        "  Action on the VSQ-Pointer field.Output value (8 bits): the ST-VSQ-Pointer\n\r"
        "  value is modified also according to the Flow Control mode (set per PP-Port).\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "change_key", 
    { 
      { 
        SOC_PPC_FP_ACTION_TYPE_CHANGE_KEY, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_ACTION_TYPE.SOC_PPC_FP_ACTION_TYPE_CHANGE_KEY:\n\r"
        "  Change key\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  },   { 
    VAL_SYMBOL, 
    "nop", 
    { 
      { 
        SOC_PPC_FP_ACTION_TYPE_NOP, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_ACTION_TYPE.SOC_PPC_FP_ACTION_TYPE_NOP:\n\r"
        "  No action\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "egr_trap", 
    { 
      { 
        SOC_PPC_FP_ACTION_TYPE_EGR_TRAP, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_ACTION_TYPE.SOC_PPC_FP_ACTION_TYPE_EGR_TRAP:\n\r"
        "  Egress Trapping. The trap code range is: 0 - 255.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "egr_ofp", 
    { 
      { 
        SOC_PPC_FP_ACTION_TYPE_EGR_OFP, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_ACTION_TYPE.SOC_PPC_FP_ACTION_TYPE_EGR_OFP:\n\r"
        "  Modify the Out-TM-Port (aka OFP). Range: 0 - 79.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "egr_tc_dp", 
    { 
      { 
        SOC_PPC_FP_ACTION_TYPE_EGR_TC_DP, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_ACTION_TYPE.SOC_PPC_FP_ACTION_TYPE_EGR_TC_DP:\n\r"
        "  Traffic Class and Drop Precedence modification. Encoding: {TC(3b), Predefined-DP(1b)}.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "egr_outlif", 
    { 
      { 
        SOC_PPC_FP_ACTION_TYPE_EGR_OUTLIF, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_ACTION_TYPE.SOC_PPC_FP_ACTION_TYPE_EGR_OUTLIF:\n\r"
        "  Out-LIF (Copy-Unique-Data) modification. Range: 0 - 65K-1.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
/* 
 * Last element. Do not remove. 
 */ 
  { 
    VAL_END_OF_LIST 
  } 
} 
#endif 
; 

/********************************************************/        
/********************************************************/        
 
EXTERN CONST 
   PARAM_VAL_RULES 
     SOC_PPC_FP_DATABASE_TYPE_rule[] 
#ifdef INIT 
   = 
{ 
  { 
    VAL_SYMBOL, 
    "tcam", 
    { 
      { 
        SOC_PPC_FP_DB_TYPE_TCAM, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_DATABASE_TYPE.SOC_PPC_FP_DB_TYPE_TCAM:\n\r"
        "  TCAM database: when a packet is qualified to an entry in the database, the\n\r"
        "  entry's actions are applied to it.Entries are inserted to this database using\n\r"
        "  the API soc_ppd_fp_entry_add().\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "direct_table", 
    { 
      { 
        SOC_PPC_FP_DB_TYPE_DIRECT_TABLE, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_DATABASE_TYPE.SOC_PPC_FP_DB_TYPE_DIRECT_TABLE:\n\r"
        "  Direct Access Table database: when a packet is qualified to an entry in the\n\r"
        "  database, the entry's actions are applied to it.Up to one Database can be\n\r"
        "  created of this type.Entries are inserted to this database using the API\n\r"
        "  soc_ppd_fp_entry_add().\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "direct_extraction", 
    { 
      { 
        SOC_PPC_FP_DB_TYPE_DIRECT_EXTRACTION, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
#ifdef COMPILER_STRING_CONST_LIMIT
        (long)"  Full documentation cannot be displayed with -pendantic compiler\n\r",
#else
        (long)"" 
        "  SOC_PPC_FP_DATABASE_TYPE.SOC_PPC_FP_DB_TYPE_DIRECT_EXTRACTION:\n\r"
        "  Direct Extraction Database: When a packet is qualified to an entry in the\n\r"
        "  database, the entry's action applies configurable logic to bits extracted\n\r"
        "  from specific qualifier fields, and uses the result as the resolved action\n\r"
        "  value.E.g.: One can define a database that attaches packets to meters\n\r"
        "  according to incoming Attachment Circuit. A single entry in this database can\n\r"
        "  attach meters 2K-3K to packets with In-ACs 0-1K, Respectively. Entries are\n\r"
        "  inserted to this database using the API soc_ppd_fp_direct_extraction_entry_add() \n\r"
          "", 
#endif /* COMPILER_STRING_CONST_LIMIT */
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "egress", 
    { 
      { 
        SOC_PPC_FP_DB_TYPE_EGRESS, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_DATABASE_TYPE.SOC_PPC_FP_DB_TYPE_EGRESS:\n\r"
        "  TCAM Database with actions changed at egress. At egress, a packet is mapped\n\r"
        "  to a single Database according to the soc_ppd_fp_egr_db_map_set API. For a same\n\r"
        "  Database, all the Egress actions can be done altogether.Up to 7 Egress\n\r"
        "  Databases can be defined.Entries are inserted to this database using the API\n\r"
        "  soc_ppd_fp_entry_add ().\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
/* 
 * Last element. Do not remove. 
 */ 
  { 
    VAL_END_OF_LIST 
  } 
} 
#endif 
; 

/********************************************************/        
/********************************************************/        
 
EXTERN CONST 
   PARAM_VAL_RULES 
     SOC_PPC_FP_PREDEFINED_ACL_KEY_rule[] 
#ifdef INIT 
   = 
{ 
  { 
    VAL_SYMBOL, 
    "l2", 
    { 
      { 
        SOC_PPC_FP_PREDEFINED_ACL_KEY_L2, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_PREDEFINED_ACL_KEY.SOC_PPC_FP_PREDEFINED_ACL_KEY_L2:\n\r"
        "  The database builds an ACL Key according to the predefined Layer 2 (Ethernet)\n\r"
        "  ACL Key.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "ipv4", 
    { 
      { 
        SOC_PPC_FP_PREDEFINED_ACL_KEY_IPV4, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_PREDEFINED_ACL_KEY.SOC_PPC_FP_PREDEFINED_ACL_KEY_IPV4:\n\r"
        "  The database builds an ACL Key according to the predefined Layer 3 (IPv4) ACL\n\r"
        "  Key.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "ipv6", 
    { 
      { 
        SOC_PPC_FP_PREDEFINED_ACL_KEY_IPV6, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_PREDEFINED_ACL_KEY.SOC_PPC_FP_PREDEFINED_ACL_KEY_IPV6:\n\r"
        "  The database builds an ACL Key according to the predefined Layer 3 (IPv6) ACL\n\r"
        "  Key.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "egr_eth", 
    { 
      { 
        SOC_PPC_FP_PREDEFINED_ACL_KEY_EGR_ETH, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_PREDEFINED_ACL_KEY.SOC_PPC_FP_PREDEFINED_ACL_KEY_EGR_ETH:\n\r"
        "  The database builds an ACL Key according to the predefined Egress Ethernet\n\r"
        "  ACL Key.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "egr_ipv4", 
    { 
      { 
        SOC_PPC_FP_PREDEFINED_ACL_KEY_EGR_IPV4, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_PREDEFINED_ACL_KEY.SOC_PPC_FP_PREDEFINED_ACL_KEY_EGR_IPV4:\n\r"
        "  The database builds an ACL Key according to the predefined Egress IPv4 ACL\n\r"
        "  Key.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "egr_mpls", 
    { 
      { 
        SOC_PPC_FP_PREDEFINED_ACL_KEY_EGR_MPLS, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_PREDEFINED_ACL_KEY.SOC_PPC_FP_PREDEFINED_ACL_KEY_EGR_MPLS:\n\r"
        "  The database builds an ACL Key according to the predefined Egress MPLS ACL\n\r"
        "  Key.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "egr_tm", 
    { 
      { 
        SOC_PPC_FP_PREDEFINED_ACL_KEY_EGR_TM, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_PREDEFINED_ACL_KEY.SOC_PPC_FP_PREDEFINED_ACL_KEY_EGR_TM:\n\r"
        "  The database builds an ACL Key according to the predefined Egress TM ACL Key.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
/* 
 * Last element. Do not remove. 
 */ 
  { 
    VAL_END_OF_LIST 
  } 
} 
#endif 
; 

/********************************************************/        
/********************************************************/        
 
EXTERN CONST 
   PARAM_VAL_RULES 
     SOC_PPC_FP_CONTROL_TYPE_rule[] 
#ifdef INIT 
   = 
{ 
  { 
    VAL_SYMBOL, 
    "l4ops_range", 
    { 
      { 
        SOC_PPC_FP_CONTROL_TYPE_L4OPS_RANGE, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_CONTROL_TYPE.SOC_PPC_FP_CONTROL_TYPE_L4OPS_RANGE:\n\r"
        "  Set a L4Ops range. The qualifier value L4Ops is a bitmap of the source &\n\r"
        "  destination ports in the found ranges.'val_ndx' indicates the L4Ops range\n\r"
        "  index.Val[0] (resp. Val[1]) is the min (resp. max) source port. Val[2] (resp.\n\r"
        "  Val[3]) is the min (resp. max) destination port. \n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "packet_size_range", 
    { 
      { 
        SOC_PPC_FP_CONTROL_TYPE_PACKET_SIZE_RANGE, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_CONTROL_TYPE.SOC_PPC_FP_CONTROL_TYPE_PACKET_SIZE_RANGE:\n\r"
        "  Set a packet size range. The qualifier value Packet size is set according to\n\r"
        "  the first found range (inclusive comparison).'val_ndx' indicates the Packet\n\r"
        "  size range index.Val[0] (resp. Val[1]) is the min (resp. max) packet size of\n\r"
        "  this range. \n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "ethertype", 
    { 
      { 
        SOC_PPC_FP_CONTROL_TYPE_ETHERTYPE, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_CONTROL_TYPE.SOC_PPC_FP_CONTROL_TYPE_ETHERTYPE:\n\r"
        "  Add an EtherType (Ethernet Next-Protocol). By default, the EtherTypes of\n\r"
        "  MPLS, MAC in MAC, ARP, CFM, IPv4, IPv6, FCoE and TRILL are always identified.\n\r"
        "  Up to 7 user-defined EtherTypes can be defined. 'val_ndx' indicates the\n\r"
        "  EtherType value (e.g., IPv4 is 0x0800) - (16b).Val[0] indicates if this\n\r"
        "  EtherType must be identified (1b). \n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "next_protocol_ip", 
    { 
      { 
        SOC_PPC_FP_CONTROL_TYPE_NEXT_PROTOCOL_IP, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_CONTROL_TYPE.SOC_PPC_FP_CONTROL_TYPE_NEXT_PROTOCOL_IP:\n\r"
        "  Add an IP Next-Protocol to be identified. By default, the Next-Protocols of\n\r"
        "  TCP, UDP, IGMP, ICMP, ICMPv6, IPv4, IPv6 and MPLS are always identified. Up\n\r"
        "  to 7 user-defined IPv4 Next-Protocol can be defined. The Next-Protocol values\n\r"
        "  are shared between the Ipv4 and the IPv6 packets. 'val_ndx' indicates the IP\n\r"
        "  Next-Protocol value (e.g., TCP is 6) - (8b).val[0] indicates if this IP\n\r"
        "  Next-Protocol must be identified (1b). \n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "egr_pp_port_data", 
    { 
      { 
        SOC_PPC_FP_CONTROL_TYPE_EGR_PP_PORT_DATA, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_CONTROL_TYPE.SOC_PPC_FP_CONTROL_TYPE_EGR_PP_PORT_DATA:\n\r"
        "  Set the data of each PP-Port for the Egress Databases. 'val_ndx' indicates\n\r"
        "  the PP-Port index. Range: 0 - 63.val[0] indicates the PP-Port data (6b). \n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "egr_l2_ethertypes", 
    { 
      { 
        SOC_PPC_FP_CONTROL_TYPE_EGR_L2_ETHERTYPES, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_CONTROL_TYPE.SOC_PPC_FP_CONTROL_TYPE_EGR_L2_ETHERTYPES:\n\r"
        "  Set the L2 Next-Protocol indexes for the Eth Egress Databases. \n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "egr_ipv4_next_protocol", 
    { 
      { 
        SOC_PPC_FP_CONTROL_TYPE_EGR_IPV4_NEXT_PROTOCOL, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_CONTROL_TYPE.SOC_PPC_FP_CONTROL_TYPE_EGR_IPV4_NEXT_PROTOCOL:\n\r"
        "  Set the IPv4 Next-Protocol indexes for the IPv4 Egress Databases. Up to 15\n\r"
        "  User-Defined IPv4 Next-Protocols can be defined. 'val_ndx' indicates the\n\r"
        "  Next-Protocol index. Range: 1 - 15.val[0] indicates the IPv4 Next-Protocol\n\r"
        "  value (8b). \n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "pp_port_profile", 
    { 
      { 
        SOC_PPC_FP_CONTROL_TYPE_PP_PORT_PROFILE, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_CONTROL_TYPE.SOC_PPC_FP_CONTROL_TYPE_PP_PORT_PROFILE:\n\r"
        "  Set the PP-Port profile. This PP-Port profile and the packet header type is\n\r"
        "  mapped to an Egress ACL Database according to the soc_ppd_fp_egr_db_map_set API.\n\r"
        "  'val_ndx' indicates the PP-Port. Range: 0 - 63.val[0] indicates the PP-Port\n\r"
        "  profile value (2b). \n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "l2_l3_key_in_lif_enable", 
    { 
      { 
        SOC_PPC_FP_CONTROL_TYPE_L2_L3_KEY_IN_LIF_ENABLE, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_CONTROL_TYPE.SOC_PPC_FP_CONTROL_TYPE_L2_L3_KEY_IN_LIF_ENABLE:\n\r"
        "  Modify the predefined L2 & L3 ACL Key format. If enabled, the In-LIF field\n\r"
        "  replaces the Inner-VID in the L2 Key and the ToS and TCP control in the L3\n\r"
        "  IPv4 Key. Must be set before any Database definition.\n\r"
        "  'val_ndx' is not usedval[0] indicates if the In-LIF is part of the Key (value\n\r"
        "  1) or not (0). \n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "l3_ipv6_tcp_ctl_enable", 
    { 
      { 
        SOC_PPC_FP_CONTROL_TYPE_L3_IPV6_TCP_CTL_ENABLE, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_CONTROL_TYPE.SOC_PPC_FP_CONTROL_TYPE_L3_IPV6_TCP_CTL_ENABLE:\n\r"
        "  Modify the predefined L2 & L3 ACL Key format. If enabled, the In-LIF field\n\r"
        "  replaces the Inner-VID in the L2 Key and the ToS and TCP control in the L3\n\r"
        "  IPv4 Key. Must be set before any Database definition.\n\r"
        "  'val_ndx' is not usedval[0] indicates if the In-LIF is part of the Key (value\n\r"
        "  1) or not (0). \n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "hdr_user_def", 
    { 
      { 
        SOC_PPC_FP_CONTROL_TYPE_HDR_USER_DEF, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_CONTROL_TYPE.SOC_PPC_FP_CONTROL_TYPE_HDR_USER_DEF:\n\r"
        "  Define a User-Defined field. Must be set before the Database definition using\n\r"
        "  it.\n\r"
        "  'val_ndx' indicates the User-Defined field index. Range: 0 - 9.val[0]\n\r"
        "  indicates the Base-Header type (via the SOC_PPC_FP_BASE_HEADER_TYPE enum). val[1]\n\r"
        "  indicates the offset from this Base-Header. Units: bit. Resolution: nibbles\n\r"
        "  (4b). Range: 0 - 252.val[2] indicates the number of bits to copy. Units: bit.\n\r"
        "  Resolution: bit. Range: 1- 32.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "dp", 
    { 
      { 
        SOC_PPC_FP_CONTROL_TYPE_EGRESS_DP, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_CONTROL_TYPE.SOC_PPC_FP_CONTROL_TYPE_EGRESS_DP:\n\r"
        "  Resolution: bit. Range: 1- 32.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
      "inner_eth_nof_vlan_tags", 
    { 
      { 
        SOC_PPC_FP_CONTROL_TYPE_INNER_ETH_NOF_VLAN_TAGS, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FP_CONTROL_TYPE.SOC_PPC_FP_CONTROL_TYPE_INNER_ETH_NOF_VLAN_TAGS:\n\r"
        "  Resolution: bit. Range: 1- 32.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  /* 
 * Last element. Do not remove. 
 */ 
  { 
    VAL_END_OF_LIST 
  } 
} 
#endif 
; 

 /* 
  * } ENUM RULES 
  */
/********************************************************/        
/********************************************************/        
 
EXTERN CONST 
   PARAM_VAL_RULES 
     SOC_PPC_PORT_STP_STATE_rule[] 
#ifdef INIT 
   = 
{ 
  { 
    VAL_SYMBOL, 
    "block", 
    { 
      { 
        SOC_PPC_PORT_STP_STATE_BLOCK, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_PORT_STP_STATE.SOC_PPC_PORT_STP_STATE_BLOCK:\n\r"
        "  Packet is dropped. SA not learned.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "learn", 
    { 
      { 
        SOC_PPC_PORT_STP_STATE_LEARN, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_PORT_STP_STATE.SOC_PPC_PORT_STP_STATE_LEARN:\n\r"
        "  Packet is dropped. SA learned\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "forward", 
    { 
      { 
        SOC_PPC_PORT_STP_STATE_FORWARD, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_PORT_STP_STATE.SOC_PPC_PORT_STP_STATE_FORWARD:\n\r"
        "  Packet is forwarded and learned.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
/* 
 * Last element. Do not remove. 
 */ 
  { 
    VAL_END_OF_LIST 
  } 
} 
#endif 
; 

/********************************************************/        
/********************************************************/        
 
EXTERN CONST 
   PARAM_VAL_RULES 
     SOC_PPC_LLP_PARSE_TPID_INDEX_rule[] 
#ifdef INIT 
   = 
{ 
  { 
    VAL_SYMBOL, 
    "none", 
    { 
      { 
        SOC_PPC_LLP_PARSE_TPID_INDEX_NONE, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_LLP_PARSE_TPID_INDEX.SOC_PPC_LLP_PARSE_TPID_INDEX_NONE:\n\r"
        "  Indicates that none of the TPIDs assigned to the port was found on the packet.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "tpid1", 
    { 
      { 
        SOC_PPC_LLP_PARSE_TPID_INDEX_TPID1, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_LLP_PARSE_TPID_INDEX.SOC_PPC_LLP_PARSE_TPID_INDEX_TPID1:\n\r"
        "  Indicates that tpid1 was found on the packet. tpid1 as set by\n\r"
        "  soc_ppd_llp_parse_tpid_profile_info_set() for the relvant tpid profle\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "tpid2", 
    { 
      { 
        SOC_PPC_LLP_PARSE_TPID_INDEX_TPID2, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_LLP_PARSE_TPID_INDEX.SOC_PPC_LLP_PARSE_TPID_INDEX_TPID2:\n\r"
        "  Indicates that tpid2 was found on the packet. tpid2 as set by\n\r"
        "  soc_ppd_llp_parse_tpid_profile_info_set()\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "isid_tpid", 
    { 
      { 
        SOC_PPC_LLP_PARSE_TPID_INDEX_ISID_TPID, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_LLP_PARSE_TPID_INDEX.SOC_PPC_LLP_PARSE_TPID_INDEX_ISID_TPID:\n\r"
        "  Indicates that ISID-TPID was found on the packet. ISID-TPID as set by\n\r"
        "  soc_ppd_llp_parse_tpid_values_set()\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
/* 
 * Last element. Do not remove. 
 */ 
  { 
    VAL_END_OF_LIST 
  } 
} 
#endif 
; 

/********************************************************/        
/********************************************************/        
 
EXTERN CONST 
   PARAM_VAL_RULES 
     SOC_PPC_LLP_TRAP_PORT_ENABLE_rule[] 
#ifdef INIT 
   = 
{ 
  { 
    VAL_SYMBOL, 
    "none", 
    { 
      { 
        SOC_PPC_LLP_TRAP_PORT_ENABLE_NONE, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_LLP_TRAP_PORT_ENABLE.SOC_PPC_LLP_TRAP_PORT_ENABLE_NONE:\n\r"
        "  Disable all traps on the port\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "arp", 
    { 
      { 
        SOC_PPC_LLP_TRAP_PORT_ENABLE_ARP, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_LLP_TRAP_PORT_ENABLE.SOC_PPC_LLP_TRAP_PORT_ENABLE_ARP:\n\r"
        "  Enable ARP Request/Reply traps on the port.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "igmp", 
    { 
      { 
        SOC_PPC_LLP_TRAP_PORT_ENABLE_IGMP, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_LLP_TRAP_PORT_ENABLE.SOC_PPC_LLP_TRAP_PORT_ENABLE_IGMP:\n\r"
        "  Enable IGMP traps on the port (including Query, Leave)\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "mld", 
    { 
      { 
        SOC_PPC_LLP_TRAP_PORT_ENABLE_MLD, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_LLP_TRAP_PORT_ENABLE.SOC_PPC_LLP_TRAP_PORT_ENABLE_MLD:\n\r"
        "  Enable MLD traps on the port (including Query, Done, Others)\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "dhcp", 
    { 
      { 
        SOC_PPC_LLP_TRAP_PORT_ENABLE_DHCP, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_LLP_TRAP_PORT_ENABLE.SOC_PPC_LLP_TRAP_PORT_ENABLE_DHCP:\n\r"
        "  Enable DHCP traps on the port (including server/client)\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "prog_trap_0", 
    { 
      { 
        SOC_PPC_LLP_TRAP_PORT_ENABLE_PROG_TRAP_0, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_LLP_TRAP_PORT_ENABLE.SOC_PPC_LLP_TRAP_PORT_ENABLE_PROG_TRAP_0:\n\r"
        "  Enable programmable trap '0'\n\r"
        "  on the port\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "prog_trap_1", 
    { 
      { 
        SOC_PPC_LLP_TRAP_PORT_ENABLE_PROG_TRAP_1, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_LLP_TRAP_PORT_ENABLE.SOC_PPC_LLP_TRAP_PORT_ENABLE_PROG_TRAP_1:\n\r"
        "  Enable programmable trap '1'\n\r"
        "  on the port\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "prog_trap_2", 
    { 
      { 
        SOC_PPC_LLP_TRAP_PORT_ENABLE_PROG_TRAP_2, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_LLP_TRAP_PORT_ENABLE.SOC_PPC_LLP_TRAP_PORT_ENABLE_PROG_TRAP_2:\n\r"
        "  Enable programmable trap '2'\n\r"
        "  on the port\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "prog_trap_3", 
    { 
      { 
        SOC_PPC_LLP_TRAP_PORT_ENABLE_PROG_TRAP_3, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_LLP_TRAP_PORT_ENABLE.SOC_PPC_LLP_TRAP_PORT_ENABLE_PROG_TRAP_3:\n\r"
        "  Enable programmable trap '3'\n\r"
        "  on the port\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "prog_trap_3", 
    { 
      { 
        SOC_PPC_LLP_TRAP_PORT_ENABLE_ING_VLAN_MEMBERSHIP, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_LLP_TRAP_PORT_ENABLE.SOC_PPC_LLP_TRAP_PORT_ENABLE_ING_VLAN_MEMBERSHIP:\n\r"
        "  Enable ingress vlan membership \n\r"
        "  on the port\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "all", 
    { 
      { 
        SOC_PPC_LLP_TRAP_PORT_ENABLE_ALL, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_LLP_TRAP_PORT_ENABLE.SOC_PPC_LLP_TRAP_PORT_ENABLE_ALL:\n\r"
        "  Enable all (supported) traps on the port\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
/* 
 * Last element. Do not remove. 
 */ 
  { 
    VAL_END_OF_LIST 
  } 
} 
#endif 
; 

 /* 
  * } ENUM RULES 
  */
/********************************************************/        
/********************************************************/        
 
EXTERN CONST 
   PARAM_VAL_RULES 
     SOC_PPD_FRWRD_DECISION_MACRO_TYPE_rule[] 
#ifdef INIT 
   = 
{ 
  { 
    VAL_SYMBOL, 
    "drop", 
    { 
      { 
        SOC_PPD_FWD_DECISION_UI_DROP_SET, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  },
  { 
    VAL_SYMBOL, 
    "cpu", 
    { 
      { 
        SOC_PPD_FWD_DECISION_UI_LOCAL_CPU_SET, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  },
  { 
    VAL_SYMBOL, 
    "phy_port(dest_id=port_id)", 
    { 
      { 
        SOC_PPD_FWD_DECISION_UI_PHY_SYS_PORT_SET, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  },
  { 
    VAL_SYMBOL, 
    "lag(dest_id=lag_group_id)", 
    { 
      { 
        SOC_PPD_FWD_DECISION_UI_LAG_SET, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  },
  { 
    VAL_SYMBOL, 
    "mc_group(dest_id=mc_group_id)",  
    { 
      { 
        SOC_PPD_FWD_DECISION_UI_MC_GROUP_SET, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  },
  { 
    VAL_SYMBOL, 
    "fec(dest_id=fec_ptr)", 
    { 
      { 
        SOC_PPD_FWD_DECISION_UI_FEC_SET, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  },
  { 
    VAL_SYMBOL, 
    "flow-id(dest_id=flow_id)",
    { 
      { 
        SOC_PPD_FWD_DECISION_UI_EXPL_FLOW_SET, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  },
  { 
    VAL_SYMBOL, 
    "trap(trap_code,frwrd_strength,snp_strength)", 
    { 
      { 
        SOC_PPD_FWD_DECISION_UI_TRAP_SET, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  },
  { 
    VAL_SYMBOL, 
    "ac(ac_id,is_lag,dest_id=port_id)", 
    { 
      { 
        SOC_PPD_FWD_DECISION_UI_AC_SET, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  },
  { 
    VAL_SYMBOL, 
    "ac_with_cosq(ac_id,dest_id=flow_id)", 
    { 
      { 
        SOC_PPD_FWD_DECISION_UI_AC_WITH_COSQ_SET, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  },
  { 
    VAL_SYMBOL, 
    "ac_with_protection(ac_id,dest_id=fec_ptr)", 
    { 
      { 
        SOC_PPD_FWD_DECISION_UI_PROTECTED_AC_SET, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  },
  { 
    VAL_SYMBOL, 
    "mac_in_mac(isid,dest_id=fec_ptr)", 
    { 
      { 
        SOC_PPD_FWD_DECISION_UI_MAC_IN_MAC_SET, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the stupid 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  },
  { 
    VAL_SYMBOL, 
    "pwe_id(eep_ndx,is_lag,dest_id=port_id)", 
    { 
      { 
        SOC_PPD_FWD_DECISION_UI_PWE_SET, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  },
  { 
    VAL_SYMBOL, 
    "pwe_with_cosq(eep_ndx,dest_id=flow_id)", 
    { 
      { 
        SOC_PPD_FWD_DECISION_UI_PWE_WITH_COSQ_SET, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  },
  { 
    VAL_SYMBOL, 
    "pwe_with_protect_tunnel(label,push_profile,dest_id=fec_ptr)", 
    { 
      { 
        SOC_PPD_FWD_DECISION_UI_PWE_PROTECTED_TUNNEL_SET, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  },
  { 
    VAL_SYMBOL, 
    "pwe_with_protection(dest_id=fec_ptr)", 
    { 
      { 
        SOC_PPD_FWD_DECISION_UI_PROTECTED_PWE_SET, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  },
  { 
    VAL_SYMBOL, 
    "ilm_swap(label,dest_id=fec_ptr)", 
    { 
      { 
        SOC_PPD_FWD_DECISION_UI_ILM_SWAP_SET, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  },
  { 
    VAL_SYMBOL, 
    "ilm_push(label,push_profile, dest_id=fec_ptr)", 
    { 
      { 
        SOC_PPD_FWD_DECISION_UI_ILM_PUSH_SET, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  },
  { 
    VAL_SYMBOL, 
    "ilm_eep(eep_ndx,is_lag,dest_id=port_id)", 
    { 
      { 
        SOC_PPD_FWD_DECISION_UI_ILM_EEP_SET, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  },
  { 
  VAL_SYMBOL, 
  "trill(label=dest_nick,push_profile=is_multicast,dest_id=fec_ptr\\mc_id)", 
  { 
    { 
      SOC_PPD_FWD_DECISION_UI_TRILL_SET, 
      (long)"" 
        "", 
        (long)NULL 
      } 
    } 
  },

/* 
 * Last element. Do not remove. 
 */ 
  { 
    VAL_END_OF_LIST 
  } 
} 
#endif 
; 

/********************************************************/        
/********************************************************/        
 
EXTERN CONST 
   PARAM_VAL_RULES 
     SOC_PPC_LLP_SA_AUTH_MATCH_RULE_TYPE_rule[] 
#ifdef INIT 
   = 
{ 
  { 
    VAL_SYMBOL, 
    "port", 
    { 
      { 
        SOC_PPC_LLP_SA_AUTH_MATCH_RULE_TYPE_PORT, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_LLP_SA_AUTH_MATCH_RULE_TYPE.SOC_PPC_LLP_SA_AUTH_MATCH_RULE_TYPE_PORT:\n\r"
        "  Entries that used for port authentication\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "vid", 
    { 
      { 
        SOC_PPC_LLP_SA_AUTH_MATCH_RULE_TYPE_VID, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_LLP_SA_AUTH_MATCH_RULE_TYPE.SOC_PPC_LLP_SA_AUTH_MATCH_RULE_TYPE_VID:\n\r"
        "  Entries that used for VID authentication\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "soc_ppd_llp_sa_match_rule_type_all", 
    { 
      { 
        SOC_PPC_LLP_SA_MATCH_RULE_TYPE_ALL, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_LLP_SA_AUTH_MATCH_RULE_TYPE.SOC_PPC_LLP_SA_MATCH_RULE_TYPE_ALL:\n\r"
        "  All enitres used for SA-authentication\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
/* 
 * Last element. Do not remove. 
 */ 
  { 
    VAL_END_OF_LIST 
  } 
} 
#endif 
; 

/********************************************************/        
/********************************************************/        
 
EXTERN CONST 
   PARAM_VAL_RULES 
     SOC_PPC_LLP_VID_ASSIGN_MATCH_RULE_TYPE_rule[] 
#ifdef INIT 
   = 
{ 
  { 
    VAL_SYMBOL, 
    "tagged", 
    { 
      { 
        SOC_PPC_LLP_VID_ASSIGN_MATCH_RULE_TYPE_TAGGED, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_LLP_VID_ASSIGN_MATCH_RULE_TYPE.SOC_PPC_LLP_VID_ASSIGN_MATCH_RULE_TYPE_TAGGED:\n\r"
        "  Entries that used for VID assignment for tagged packets\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "untagged", 
    { 
      { 
        SOC_PPC_LLP_VID_ASSIGN_MATCH_RULE_TYPE_UNTAGGED, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_LLP_VID_ASSIGN_MATCH_RULE_TYPE.SOC_PPC_LLP_VID_ASSIGN_MATCH_RULE_TYPE_UNTAGGE\n\r"
        "  :\n\r"
        "  Entries that used for VID assignment for untagged packets\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "all", 
    { 
      { 
        SOC_PPC_LLP_VID_ASSIGN_MATCH_RULE_TYPE_ALL, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_LLP_VID_ASSIGN_MATCH_RULE_TYPE.SOC_PPC_LLP_VID_ASSIGN_MATCH_RULE_TYPE_ALL:\n\r"
        "  All enitres used for VID assignment\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
/* 
 * Last element. Do not remove. 
 */ 
  { 
    VAL_END_OF_LIST 
  } 
} 
#endif 
; 

/********************************************************/        
/********************************************************/        
/********************************************************/        
 
EXTERN CONST 
   PARAM_VAL_RULES 
     SOC_PPC_L2_LIF_AC_SERVICE_TYPE_rule[] 
#ifdef INIT 
   = 
{ 
  { 
    VAL_SYMBOL, 
    "mp", 
    { 
      { 
        SOC_PPC_L2_LIF_AC_SERVICE_TYPE_MP, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_L2_LIF_AC_SERVICE_TYPE.SOC_PPC_L2_LIF_AC_SERVICE_TYPE_MP:\n\r"
        "  AC multi-point service\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "ac2ac", 
    { 
      { 
        SOC_PPC_L2_LIF_AC_SERVICE_TYPE_AC2AC, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_L2_LIF_AC_SERVICE_TYPE.SOC_PPC_L2_LIF_AC_SERVICE_TYPE_AC2AC:\n\r"
        "  AC to AC service\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "ac2pwe", 
    { 
      { 
        SOC_PPC_L2_LIF_AC_SERVICE_TYPE_AC2PWE, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_L2_LIF_AC_SERVICE_TYPE.SOC_PPC_L2_LIF_AC_SERVICE_TYPE_AC2PWE:\n\r"
        "  AC to PWE service\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "ac2pbb", 
    { 
      { 
        SOC_PPC_L2_LIF_AC_SERVICE_TYPE_AC2PBB, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_L2_LIF_AC_SERVICE_TYPE.SOC_PPC_L2_LIF_AC_SERVICE_TYPE_AC2PBB:\n\r"
        "  AC to ISID service (MAC in MAC)\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
/* 
 * Last element. Do not remove. 
 */ 
  { 
    VAL_END_OF_LIST 
  } 
} 
#endif 
; 

/********************************************************/        
/********************************************************/        
 
EXTERN CONST 
   PARAM_VAL_RULES 
     SOC_PPC_L2_LIF_PWE_SERVICE_TYPE_rule[] 
#ifdef INIT 
   = 
{ 
  { 
    VAL_SYMBOL, 
    "mp", 
    { 
      { 
        SOC_PPC_L2_LIF_PWE_SERVICE_TYPE_MP, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_L2_LIF_PWE_SERVICE_TYPE.SOC_PPC_L2_LIF_PWE_SERVICE_TYPE_MP:\n\r"
        "  PWE multi-point service\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "p2p", 
    { 
      { 
        SOC_PPC_L2_LIF_PWE_SERVICE_TYPE_P2P, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_L2_LIF_PWE_SERVICE_TYPE.SOC_PPC_L2_LIF_PWE_SERVICE_TYPE_P2P:\n\r"
        "  PWE point to point service\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "p2p_custom", 
    { 
      { 
        SOC_PPC_L2_LIF_PWE_SERVICE_TYPE_P2P_CUSTOM, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_L2_LIF_PWE_SERVICE_TYPE.SOC_PPC_L2_LIF_PWE_SERVICE_TYPE_P2P:\n\r"
        "  PWE point to point service\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
/* 
 * Last element. Do not remove. 
 */ 
  { 
    VAL_END_OF_LIST 
  } 
} 
#endif 
; 

/********************************************************/        
/********************************************************/        
 
EXTERN CONST 
   PARAM_VAL_RULES 
     SOC_PPC_L2_LIF_ISID_SERVICE_TYPE_rule[] 
#ifdef INIT 
   = 
{ 
  { 
    VAL_SYMBOL, 
    "mp", 
    { 
      { 
        SOC_PPC_L2_LIF_ISID_SERVICE_TYPE_MP, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_L2_LIF_ISID_SERVICE_TYPE.SOC_PPC_L2_LIF_ISID_SERVICE_TYPE_MP:\n\r"
        "  ISID multi-point service\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "p2p", 
    { 
      { 
        SOC_PPC_L2_LIF_ISID_SERVICE_TYPE_P2P, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_L2_LIF_ISID_SERVICE_TYPE.SOC_PPC_L2_LIF_ISID_SERVICE_TYPE_P2P:\n\r"
        "  ISID\n\r"
        "  point to point service\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
/* 
 * Last element. Do not remove. 
 */ 
  { 
    VAL_END_OF_LIST 
  } 
} 
#endif 
; 

/********************************************************/        
/********************************************************/        
 
EXTERN CONST 
   PARAM_VAL_RULES 
     SOC_PPC_L2_LIF_AC_LEARN_TYPE_rule[] 
#ifdef INIT 
   = 
{ 
  { 
    VAL_SYMBOL, 
    "disable", 
    { 
      { 
        SOC_PPC_L2_LIF_AC_LEARN_DISABLE, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_L2_LIF_AC_LEARN_TYPE.SOC_PPC_L2_LIF_AC_LEARN_DISABLE:\n\r"
        "  Learning is disabled\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "sys_port", 
    { 
      { 
        SOC_PPC_L2_LIF_AC_LEARN_SYS_PORT, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_L2_LIF_AC_LEARN_TYPE.SOC_PPC_L2_LIF_AC_LEARN_SYS_PORT:\n\r"
        "  Addresses are learned on source system port/LAG\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "decision", 
    { 
      { 
        SOC_PPC_L2_LIF_AC_LEARN_INFO, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_L2_LIF_AC_LEARN_TYPE.SOC_PPC_L2_LIF_AC_LEARN_INFO:\n\r"
        "  Addresses are learned with a specific\n\r"
        "  forwarding decision (e.g., specific TM-Flow)\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
/* 
 * Last element. Do not remove. 
 */ 
  { 
    VAL_END_OF_LIST 
  } 
} 
#endif 
; 

/********************************************************/        
/********************************************************/        
 
EXTERN CONST 
   PARAM_VAL_RULES 
     SOC_PPC_L2_LIF_L2CP_HANDLE_TYPE_rule[] 
#ifdef INIT 
   = 
{ 
  { 
    VAL_SYMBOL, 
    "normal", 
    { 
      { 
        SOC_PPC_L2_LIF_L2CP_HANDLE_TYPE_NORMAL, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_L2_LIF_L2CP_HANDLE_TYPE.SOC_PPC_L2_LIF_L2CP_HANDLE_TYPE_NORMAL:\n\r"
        "  Handle the L2CP packet as normal packet (including vlan editing)\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "tunnel", 
    { 
      { 
        SOC_PPC_L2_LIF_L2CP_HANDLE_TYPE_TUNNEL, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_L2_LIF_L2CP_HANDLE_TYPE.SOC_PPC_L2_LIF_L2CP_HANDLE_TYPE_TUNNEL:\n\r"
        "  The packet is forwarded Transparently (with no vlan editing) i.e. the content\n\r"
        "  of a Service Frame is delivered unaltered.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "peer", 
    { 
      { 
        SOC_PPC_L2_LIF_L2CP_HANDLE_TYPE_PEER, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_L2_LIF_L2CP_HANDLE_TYPE.SOC_PPC_L2_LIF_L2CP_HANDLE_TYPE_PEER:\n\r"
        "  Packet is trapped and assigned SOC_PPC_TRAP_CODE_L2CP_PEER trap code\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "drop", 
    { 
      { 
        SOC_PPC_L2_LIF_L2CP_HANDLE_TYPE_DROP, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_L2_LIF_L2CP_HANDLE_TYPE.SOC_PPC_L2_LIF_L2CP_HANDLE_TYPE_DROP:\n\r"
        "  Packet is dropped, assigned SOC_PPC_TRAP_CODE_L2CP_DROP trap code\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
/* 
 * Last element. Do not remove. 
 */ 
  { 
    VAL_END_OF_LIST 
  } 
} 
#endif 
; 

/********************************************************/        

/********************************************************/        
 
EXTERN CONST 
   PARAM_VAL_RULES 
     SOC_PPC_LIF_ING_VLAN_EDIT_TAG_VID_SRC_rule[] 
#ifdef INIT 
   = 
{ 
  { 
    VAL_SYMBOL, 
    "empty", 
    { 
      { 
        SOC_PPC_LIF_ING_VLAN_EDIT_TAG_VID_SRC_EMPTY, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_LIF_ING_VLAN_EDIT_TAG_VID_SRC.SOC_PPC_LIF_ING_VLAN_EDIT_TAG_VID_SRC_EMPTY:\n\r"
        "  Indicates that tag will not be generated.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "outer_tag", 
    { 
      { 
        SOC_PPC_LIF_ING_VLAN_EDIT_TAG_VID_SRC_OUTER_TAG, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_LIF_ING_VLAN_EDIT_TAG_VID_SRC.SOC_PPC_LIF_ING_VLAN_EDIT_TAG_VID_SRC_OUTER_TAG:\n\r"
        "  The VID value is taken from the outer tag of the packet. \n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "inner_tag", 
    { 
      { 
        SOC_PPC_LIF_ING_VLAN_EDIT_TAG_VID_SRC_INNER_TAG, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_LIF_ING_VLAN_EDIT_TAG_VID_SRC.SOC_PPC_LIF_ING_VLAN_EDIT_TAG_VID_SRC_INNER_TAG:\n\r"
        "  The VID value is taken from the inner tag of the packet.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "ac_edit_info", 
    { 
      { 
        SOC_PPC_LIF_ING_VLAN_EDIT_TAG_VID_SRC_AC_EDIT_INFO, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_LIF_ING_VLAN_EDIT_TAG_VID_SRC.SOC_PPC_LIF_ING_VLAN_EDIT_TAG_VID_SRC_AC_EDIT_I\n\r"
        "  FO:\n\r"
        "  The VID value is taken from the edit information configured set to the AC.\n\r"
        "  See soc_ppd_l2_lif_ac_add()\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "ac_edit_info_2", 
    { 
      { 
        SOC_PPC_LIF_ING_VLAN_EDIT_TAG_VID_SRC_AC_EDIT_INFO_2, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_LIF_ING_VLAN_EDIT_TAG_VID_SRC.SOC_PPC_LIF_ING_VLAN_EDIT_TAG_VID_SRC_AC_EDIT_INFO_2:\n\r"
        "  ARAD only. The VID value is taken from the edit information configured set to the AC.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
/* 
 * Last element. Do not remove. 
 */ 
  { 
    VAL_END_OF_LIST 
  } 
} 
#endif 
; 

/********************************************************/        
/********************************************************/        
 
EXTERN CONST 
   PARAM_VAL_RULES 
     SOC_PPC_LIF_ING_VLAN_EDIT_TAG_PCP_DEI_SRC_rule[] 
#ifdef INIT 
   = 
{ 
  { 
    VAL_SYMBOL, 
    "none", 
    { 
      { 
        SOC_PPC_LIF_ING_VLAN_EDIT_TAG_PCP_DEI_SRC_NONE, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_LIF_ING_VLAN_EDIT_TAG_PCP_DEI_SRC.SOC_PPC_LIF_ING_VLAN_EDIT_TAG_PCP_DEI_SRC_N\n\r"
        "  NE:\n\r"
        "  Use when no VLAN tag is generated. \n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "outer_tag", 
    { 
      { 
        SOC_PPC_LIF_ING_VLAN_EDIT_TAG_PCP_DEI_SRC_OUTER_TAG, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_LIF_ING_VLAN_EDIT_TAG_PCP_DEI_SRC.SOC_PPC_LIF_ING_VLAN_EDIT_TAG_PCP_DEI_SRC_O\n\r"
        "  TER_TAG:\n\r"
        "  PCP_DEI value is taken from the outer tag of the packet. \n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "inner_tag", 
    { 
      { 
        SOC_PPC_LIF_ING_VLAN_EDIT_TAG_PCP_DEI_SRC_INNER_TAG, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_LIF_ING_VLAN_EDIT_TAG_PCP_DEI_SRC.SOC_PPC_LIF_ING_VLAN_EDIT_TAG_PCP_DEI_SRC_I\n\r"
        "  NER_TAG:\n\r"
        "  PCP_DEI value is taken from the inner tag of the packet.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "new", 
    { 
      { 
        SOC_PPC_LIF_ING_VLAN_EDIT_TAG_PCP_DEI_SRC_NEW, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
#ifdef COMPILER_STRING_CONST_LIMIT
        (long)"  Full documentation cannot be displayed with -pendantic compiler\n\r",
#else
        (long)"" 
        "  SOC_PPC_LIF_ING_VLAN_EDIT_TAG_PCP_DEI_SRC.SOC_PPC_LIF_ING_VLAN_EDIT_TAG_PCP_DEI_SRC_N\n\r"
        "  W:\n\r"
        "  New value is set for the PCP, according to either\n\r"
        "  mappings or explicitly as attribute of AC (T20E only)1. The PCP (UP) and DEI\n\r"
        "  values are set according to mapping. See PCP Mapping Setting\n\r"
        "  (soc_ppd_lif_ing_vlan_edit_pcp_map_stag_set(),\n\r"
        "  soc_ppd_lif_ing_vlan_edit_pcp_map_ctag_set() and\n\r"
        "  soc_ppd_lif_ing_vlan_edit_pcp_map_untagged_set()). In 2. (T20E only) PCP_DEI\n\r"
        "  value may be set to explicitly value according to AC edit information, see\n\r"
        "  soc_ppd_l2_lif_ac_add()\n\r"
          "", 
#endif /* COMPILER_STRING_CONST_LIMIT */
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
/* 
 * Last element. Do not remove. 
 */ 
  { 
    VAL_END_OF_LIST 
  } 
} 
#endif 
; 

/********************************************************/        
/********************************************************/        
 
EXTERN CONST 
   PARAM_VAL_RULES 
     SOC_PPC_LLP_COS_MAPPING_TABLE_rule[] 
#ifdef INIT 
   = 
{ 
  { 
    VAL_SYMBOL, 
    "up_to_de_tc", 
    { 
      { 
        SOC_PPC_LLP_COS_MAPPING_TABLE_UP_TO_DE_TC, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_LLP_COS_MAPPING_TABLE.SOC_PPC_LLP_COS_MAPPING_TABLE_UP_TO_DE_TC:\n\r"
        "  UP to DE and TC.Decodes the UP/PCP of the incoming packet to Traffic Class\n\r"
        "  and Drop Eligibility (internal representation of the COS parameters) In\n\r"
        "  Petra-B: the mapping to DE is used if packet has S-tag, then the DE is used\n\r"
        "  to set the DP value.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "ipv4_tos_to_dp_tc_valid", 
    { 
      { 
        SOC_PPC_LLP_COS_MAPPING_TABLE_IPV4_TOS_TO_DP_TC_VALID, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_LLP_COS_MAPPING_TABLE.SOC_PPC_LLP_COS_MAPPING_TABLE_IPV4_TOS_TO_DP_TC_VALID:\n\r"
        "  IPv4 TOS to DP and TC.Maps the IPv4 header TOS to the following values: *DP -\n\r"
        "  Drop Precedence  *TC - Traffic Class *TC-Valid \n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "ipv6_tc_to_dp_tc_valid", 
    { 
      { 
        SOC_PPC_LLP_COS_MAPPING_TABLE_IPV6_TC_TO_DP_TC_VALID, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_LLP_COS_MAPPING_TABLE.SOC_PPC_LLP_COS_MAPPING_TABLE_IPV6_TC_TO_DP_TC_VALID:\n\r"
        "  IPv6 TC to DP and TC.Maps the IPv6 header TC to the following values: *DP -\n\r"
        "  Drop Precedence  *TC - Traffic Class *TC-Valid \n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "tc_to_dp", 
    { 
      { 
        SOC_PPC_LLP_COS_MAPPING_TABLE_TC_TO_DP, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_LLP_COS_MAPPING_TABLE.SOC_PPC_LLP_COS_MAPPING_TABLE_TC_TO_DP:\n\r"
        "  TC to DP.Relevant only for T20E.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "incoming_up_to_up", 
    { 
      { 
        SOC_PPC_LLP_COS_MAPPING_TABLE_INCOMING_UP_TO_UP, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_LLP_COS_MAPPING_TABLE.SOC_PPC_LLP_COS_MAPPING_TABLE_INCOMING_UP_TO_UP:\n\r"
        "  Maps the incoming user priority / PCP to a user priority (i.e. the internal\n\r"
        "  representation)Relevant only for Petra-A compatibility. Otherwise has no use.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "tc_to_up", 
    { 
      { 
        SOC_PPC_LLP_COS_MAPPING_TABLE_TC_TO_UP, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_LLP_COS_MAPPING_TABLE.SOC_PPC_LLP_COS_MAPPING_TABLE_TC_TO_UP:\n\r"
        "  Maps the traffic class to user priority. Relevant only for Petra-A\n\r"
        "  compatibility. Otherwise has no use.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "de_to_dp", 
    { 
      { 
        SOC_PPC_LLP_COS_MAPPING_TABLE_DE_TO_DP, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_LLP_COS_MAPPING_TABLE.SOC_PPC_LLP_COS_MAPPING_TABLE_DE_TO_DP:\n\r"
        "  DE to DP.Maps the drop eligibility to a drop precedence.In Petra-B: This\n\r"
        "  mapping is used when the packet has S-Tag. \n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "up_to_dp", 
    { 
      { 
        SOC_PPC_LLP_COS_MAPPING_TABLE_UP_TO_DP, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_LLP_COS_MAPPING_TABLE.SOC_PPC_LLP_COS_MAPPING_TABLE_UP_TO_DP:\n\r"
        "  UP to DP.Maps the user priority to drop precedence.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
/* 
 * Last element. Do not remove. 
 */ 
  { 
    VAL_END_OF_LIST 
  } 
} 
#endif 
; 

/********************************************************/        
/********************************************************/        
 
EXTERN CONST 
   PARAM_VAL_RULES 
     SOC_PPC_LLP_TRAP_PROG_TRAP_COND_SELECT_rule[] 
#ifdef INIT 
   = 
{ 
  { 
    VAL_SYMBOL, 
    "none", 
    { 
      { 
        SOC_PPC_LLP_TRAP_PROG_TRAP_COND_SELECT_NONE, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_LLP_TRAP_PROG_TRAP_COND_SELECT.SOC_PPC_LLP_TRAP_PROG_TRAP_COND_SELECT_N\n\r"
        "  NE:\n\r"
        "  None of the optional conditions of the general trap is tested.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "da", 
    { 
      { 
        SOC_PPC_LLP_TRAP_PROG_TRAP_COND_SELECT_DA, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_LLP_TRAP_PROG_TRAP_COND_SELECT.SOC_PPC_LLP_TRAP_PROG_TRAP_COND_SELECT_D\n\r"
        "  :\n\r"
        "  Compare packet MAC DA with general TRAP DA. The configured DA may be set to\n\r"
        "  compare part of the value - see SOC_PPC_LLP_TRAP_PROG_TRAP_L2_INFO\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "ether_type", 
    { 
      { 
        SOC_PPC_LLP_TRAP_PROG_TRAP_COND_SELECT_ETHER_TYPE, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_LLP_TRAP_PROG_TRAP_COND_SELECT.SOC_PPC_LLP_TRAP_PROG_TRAP_COND_SELECT_E\n\r"
        "  HER_TYPE:\n\r"
        "  Compare packet Ethernet type with general TRAP Ethernet type.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "sub_type", 
    { 
      { 
        SOC_PPC_LLP_TRAP_PROG_TRAP_COND_SELECT_SUB_TYPE, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_LLP_TRAP_PROG_TRAP_COND_SELECT.SOC_PPC_LLP_TRAP_PROG_TRAP_COND_SELECT_S\n\r"
        "  B_TYPE:\n\r"
        "  Compare first nibble after link layer header with general trap Sub-type.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  },
  { 
    VAL_SYMBOL, 
    "ip_prtcl", 
    { 
      { 
        SOC_PPC_LLP_TRAP_PROG_TRAP_COND_SELECT_IP_PRTCL, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_LLP_TRAP_PROG_TRAP_COND_SELECT.SOC_PPC_LLP_TRAP_PROG_TRAP_COND_SELECT_I\n\r"
        "  _PRTCL:\n\r"
        "  If packet is IP over Ethernet, compare protocol from IP header with general\n\r"
        "  trap IP-protocol.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "l4_ports", 
    { 
      { 
        SOC_PPC_LLP_TRAP_PROG_TRAP_COND_SELECT_L4_PORTS, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_LLP_TRAP_PROG_TRAP_COND_SELECT.SOC_PPC_LLP_TRAP_PROG_TRAP_COND_SELECT_L\n\r"
        "  _PORTS:\n\r"
        "  If packet is IP over Ethernet, then compare L4 ports of the packet with the\n\r"
        "  general trap ranges. Ranges definition may have masking over the values - see\n\r"
        "  SOC_PPC_LLP_TRAP_PROG_TRAP_L4_INFO. \n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
/* 
 * Last element. Do not remove. 
 */ 
  { 
    VAL_END_OF_LIST 
  } 
} 
#endif 
; 

/********************************************************/        
/********************************************************/        
 
EXTERN CONST 
   PARAM_VAL_RULES 
     SOC_PPC_MYMAC_VRRP_MODE_rule[] 
#ifdef INIT 
   = 
{ 
  { 
    VAL_SYMBOL, 
    "vsi_based_all", 
    { 
      { 
        SOC_PPC_MYMAC_VRRP_MODE_ALL_VSI_BASED, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_MYMAC_VRRP_MODE.SOC_PPC_MYMAC_VRRP_MODE_ALL_VSI_BASED:\n\r"
        "  The LSB of the MAC addresses is set per VSI. In Petra: Up to 2 MAC addresses may be set\n\r"
        "  per VSI. \n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  },
  { 
    VAL_SYMBOL, 
    "vsi_based_256", 
    { 
      { 
        SOC_PPC_MYMAC_VRRP_MODE_256_VSI_BASED, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_MYMAC_VRRP_MODE.SOC_PPC_MYMAC_VRRP_MODE_256_VSI_BASED:\n\r"
        "  The LSB of the MAC addresses is set for each VSI-only for VSIs [0,256]. In Petra: Up to\n\r"
        "  32 MAC addresses may be set for each such VSI. In ARAD: up to 16 for IPV4 or 8 for IPV4 and 8 for IPV6. \n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  },
  { 
    VAL_SYMBOL, 
    "vsi_based_512", 
    { 
      { 
        SOC_PPC_MYMAC_VRRP_MODE_512_VSI_BASED, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_MYMAC_VRRP_MODE.SOC_PPC_MYMAC_VRRP_MODE_512_VSI_BASED:\n\r"
        "  The LSB of the MAC addresses is set for each VSI-only for VSIs [0,512]. Up to 8 MAC addresses for IPV4 \n\r"
        "  or 4 for IPV4 and 4 for IPV6 may be set for each such VSI. ARAD only. \n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "vsi_based_1K", 
    { 
      { 
        SOC_PPC_MYMAC_VRRP_MODE_1K_VSI_BASED, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_MYMAC_VRRP_MODE.SOC_PPC_MYMAC_VRRP_MODE_1K_VSI_BASED:\n\r"
        "  The LSB of the MAC addresses is set for each VSI-only for VSIs [0,1K]. Up to 4 MAC addresses for IPV4 \n\r"
        "  or 2 for IPV4 and 2 for IPV6 may be set for each such VSI. ARAD only. \n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  },     
  { 
    VAL_SYMBOL, 
    "vsi_based_2K", 
    { 
      { 
        SOC_PPC_MYMAC_VRRP_MODE_2K_VSI_BASED, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_MYMAC_VRRP_MODE.SOC_PPC_MYMAC_VRRP_MODE_2K_VSI_BASED:\n\r"
        "  The LSB of the MAC addresses is set for each VSI-only for VSIs [0,2K]. Up to\n\r"
        "  2 MAC addresses may be set for each such VSI. ARAD only. \n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  },   
/* 
 * Last element. Do not remove. 
 */ 
  { 
    VAL_END_OF_LIST 
  } 
} 
#endif 
; 

/********************************************************/        
/********************************************************/        
 
EXTERN CONST 
   PARAM_VAL_RULES 
     SOC_PPC_MPLS_TERM_MODEL_TYPE_rule[] 
#ifdef INIT 
   = 
{ 
  { 
    VAL_SYMBOL, 
    "pipe", 
    { 
      { 
        SOC_PPC_MPLS_TERM_MODEL_PIPE, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_MPLS_TERM_MODEL_TYPE.SOC_PPC_MPLS_TERM_MODEL_PIPE:\n\r"
        "  Pipe-model processing\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "uniform", 
    { 
      { 
        SOC_PPC_MPLS_TERM_MODEL_UNIFORM, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_MPLS_TERM_MODEL_TYPE.SOC_PPC_MPLS_TERM_MODEL_UNIFORM:\n\r"
        "  Uniform-model processing\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
/* 
 * Last element. Do not remove. 
 */ 
  { 
    VAL_END_OF_LIST 
  } 
} 
#endif 
; 

/********************************************************/        
/********************************************************/        
 
EXTERN CONST 
   PARAM_VAL_RULES 
     SOC_PPC_MPLS_TERM_KEY_TYPE_rule[] 
#ifdef INIT 
   = 
{ 
  { 
    VAL_SYMBOL, 
    "label", 
    { 
      { 
        SOC_PPC_MPLS_TERM_KEY_TYPE_LABEL, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_MPLS_TERM_KEY_TYPE.SOC_PPC_MPLS_TERM_KEY_TYPE_LABEL:\n\r"
        "  The lookup key is MPLS label\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "label_rif", 
    { 
      { 
        SOC_PPC_MPLS_TERM_KEY_TYPE_LABEL_RIF, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_MPLS_TERM_KEY_TYPE.SOC_PPC_MPLS_TERM_KEY_TYPE_LABEL_RIF:\n\r"
        "  The lookup key is MPLS label + in RIF\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
/* 
 * Last element. Do not remove. 
 */ 
  { 
    VAL_END_OF_LIST 
  } 
} 
#endif 
; 

 /* 
  * } ENUM RULES 
  */
/********************************************************/        
/********************************************************/        
 
EXTERN CONST 
   PARAM_VAL_RULES 
     SOC_PPC_L2_LIF_AC_MAP_KEY_TYPE_rule[] 
#ifdef INIT 
   = 
{ 
  { 
    VAL_SYMBOL, 
    "port", 
    { 
      { 
        SOC_PPC_L2_LIF_AC_MAP_KEY_TYPE_PORT, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_L2_LIF_AC_MAP_KEY_TYPE.SOC_PPC_L2_LIF_AC_MAP_KEY_TYPE_PORT:\n\r"
        "  The AC is mapped from the port number only. Outer and inner tags are ignored\n\r"
        "  in the mapping. Use SOC_PPC_LIF_IGNORE_OUTER_VID and SOC_PPC_LIF_IGNORE_INNER_VID\n\r"
        "  for the VIDs in the AC key when adding AC for the port.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "port_vlan", 
    { 
      { 
        SOC_PPC_L2_LIF_AC_MAP_KEY_TYPE_PORT_VLAN, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_L2_LIF_AC_MAP_KEY_TYPE.SOC_PPC_L2_LIF_AC_MAP_KEY_TYPE_PORT_VLAN:\n\r"
        "  The AC is mapped according to Port\n\r"
        "  x Vlan. Inner tag is ignored in the mapping. SOC_PPC_LIF_IGNORE_INNER_VID for\n\r"
        "  the inner VID in the AC key when adding AC. This VLAN is actually the\n\r"
        "  initial-VID results from VID assignment.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "port_vlan_vlan", 
    { 
      { 
        SOC_PPC_L2_LIF_AC_MAP_KEY_TYPE_PORT_VLAN_VLAN, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_L2_LIF_AC_MAP_KEY_TYPE.SOC_PPC_L2_LIF_AC_MAP_KEY_TYPE_PORT_VLAN_VLAN:\n\r"
        "  The AC is mapped according to Port\n\r"
        "  x Vlan x Vlan. Outer-VLAN is actually the initial-VID results from VID\n\r"
        "  assignment. \n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  },
  { 
    VAL_SYMBOL, 
    "port_comp_vlan", 
    { 
      { 
        SOC_PPC_L2_LIF_AC_MAP_KEY_TYPE_PORT_COMP_VLAN, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_L2_LIF_AC_MAP_KEY_TYPE.SOC_PPC_L2_LIF_AC_MAP_KEY_TYPE_PORT_COMP_VLAN:\n\r"
        "  The AC is mapped according to Port x compressed Vlan. Inner tag is\n\r"
        "  ignored in the mapping. SOC_PPC_LIF_IGNORE_INNER_VID for\n\r"
        "  the inner VID in the AC key when adding AC.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "port_comp_vlan_comp_vlan", 
    { 
      { 
        SOC_PPC_L2_LIF_AC_MAP_KEY_TYPE_PORT_COMP_VLAN_COMP_VLAN, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_L2_LIF_AC_MAP_KEY_TYPE.SOC_PPC_L2_LIF_AC_MAP_KEY_TYPE_PORT_COMP_VLAN_COMP_VLAN:\n\r"
        "  The AC is mapped according to Port x compressed Vlan x compressed Vlan.\n\r"
        "  Outer-VLAN is actually the initial-VID results from VID\n\r"
        "  assignment. \n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "raw", 
    { 
      { 
        SOC_PPC_L2_LIF_AC_MAP_KEY_TYPE_RAW, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_L2_LIF_AC_MAP_KEY_TYPE.SOC_PPC_L2_LIF_AC_MAP_KEY_TYPE_RAW:\n\r"
        "  The AC is mapped according to raw value calculated based on packet\n\r"
        "  attributes. In this key only the 'raw_key' field is considered from the key.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "raw_vlan", 
    { 
      { 
        SOC_PPC_L2_LIF_AC_MAP_KEY_TYPE_RAW_VLAN, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_L2_LIF_AC_MAP_KEY_TYPE.SOC_PPC_L2_LIF_AC_MAP_KEY_TYPE_RAW_VLAN:\n\r"
        "  The AC is mapped according to raw value calculated based on packet\n\r"
        "  attributes. In this key only the 'raw_key' field is considered from the key.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  },  
  { 
    VAL_SYMBOL, 
      "raw_vlan_vlan", 
    { 
      { 
        SOC_PPC_L2_LIF_AC_MAP_KEY_TYPE_RAW_VLAN_VLAN, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_L2_LIF_AC_MAP_KEY_TYPE.SOC_PPC_L2_LIF_AC_MAP_KEY_TYPE_RAW_VLAN_VLAN:\n\r"
        "  The AC is mapped according to raw value calculated based on packet\n\r"
        "  attributes. In this key only the 'raw_key' field is considered from the key.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  },
  { 
    VAL_SYMBOL, 
      "port_initial_vlan", 
    { 
      { 
        SOC_PPC_L2_LIF_AC_MAP_KEY_TYPE_PORT_INITIAL_VLAN, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_L2_LIF_AC_MAP_KEY_TYPE.SOC_PPC_L2_LIF_AC_MAP_KEY_TYPE_PORT_INITIAL_VLAN:\n\r"
        "  The AC is mapped according to Port x Initial-Vlan. Inner tag is\n\r"
        "  ignored in the mapping. SOC_PPC_LIF_IGNORE_INNER_VID for\n\r"
        "  the inner VID in the AC key when adding AC.\n\r"
        "  Initial-VLAN is mainly used for untagged packet and when SA based is set (per port).\n\r"
        "  Invalid for Petra-B.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  },
  { 
    VAL_SYMBOL, 
      "port_outer_pcp_vlan", 
    { 
      { 
        SOC_PPC_L2_LIF_AC_MAP_KEY_TYPE_PORT_PCP_VLAN, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_L2_LIF_AC_MAP_KEY_TYPE.SOC_PPC_L2_LIF_AC_MAP_KEY_TYPE_PORT_PCP_VLAN:\n\r"
        "  The AC is mapped according to Port x PCP x Vlan . Inner tag is\n\r"
        "  ignored in the mapping. SOC_PPC_LIF_IGNORE_INNER_VID for\n\r"
        "  the inner VID in the AC key when adding AC.\n\r"
        "  Only avaiable when PCP lookup global property is enabled.\n\r"
        "  In this case also outer_pcp is used.\n\r"
        "  Invalid for Petra-B.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  },
  { 
    VAL_SYMBOL, 
      "port_outer_pcp_vlan_vlan", 
    { 
      { 
        SOC_PPC_L2_LIF_AC_MAP_KEY_TYPE_PORT_PCP_VLAN_VLAN, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_L2_LIF_AC_MAP_KEY_TYPE.SOC_PPC_L2_LIF_AC_MAP_KEY_TYPE_PORT_PCP_VLAN_VLAN:\n\r"
        "  The AC is mapped according to Port x Outer-PCP x Vlan x Vlan.\n\r"
        "  Only aviable when PCP lookup global property is enabled\n\r"
        "  In this case also outer_pcp is used.\n\r"
        "  Invalid for Petra-B.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  },
  { 
    VAL_SYMBOL, 
      "port_tunnel", 
    { 
      { 
        SOC_PPC_L2_LIF_AC_MAP_KEY_TYPE_PORT_TUNNEL, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_L2_LIF_AC_MAP_KEY_TYPE.SOC_PPC_L2_LIF_AC_MAP_KEY_TYPE_PORT_TUNNEL:\n\r"
        "  The AC is mapped according to Port x Tunnel_ID. Outer and.\n\r"
        "  Inner tag is ignored in the mapping.  Use\n\r"
        "  SOC_PPC_LIF_IGNORE_OUTER_VID and SOC_PPC_LIF_IGNORE_INNER_VID \n\r"
        "  for the VIDs in the AC key when adding AC for the port.\n\r"
        "  Only aviable when port is PON-port.\n\r"
        "  In this case also Tunnel_ID is used.\n\r"
        "  Invalid for Petra-B.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    }
  },
  { 
    VAL_SYMBOL, 
      "port_tunnel_comp_vlan", 
    { 
      { 
        SOC_PPC_L2_LIF_AC_MAP_KEY_TYPE_PORT_TUNNEL_COMP_VLAN, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_L2_LIF_AC_MAP_KEY_TYPE.SOC_PPC_L2_LIF_AC_MAP_KEY_TYPE_PORT_TUNNEL_COMP_VLAN:\n\r"
        "  The AC is mapped according to Port x Tunnel_ID x Vlan. Inner tag is\n\r"
        "  ignored in the mapping. SOC_PPC_LIF_IGNORE_INNER_VID for\n\r"
        "  the inner VID in the AC key when adding AC.\n\r"
        "  Only aviable when port is PON-port.\n\r"
        "  In this case also Tunnel_ID is used.\n\r"
        "  Invalid for Petra-B.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    }
  },
  { 
    VAL_SYMBOL, 
      "port_tunnel_comp_vlan_comp_vlan", 
    { 
      { 
        SOC_PPC_L2_LIF_AC_MAP_KEY_TYPE_PORT_TUNNEL_COMP_VLAN_COMP_VLAN, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_L2_LIF_AC_MAP_KEY_TYPE.SOC_PPC_L2_LIF_AC_MAP_KEY_TYPE_PORT_TUNNEL_COMP_VLAN_COMP_VLAN:\n\r"
        "  The AC is mapped according to Port x Tunnel_ID x Vlan x Vlan. \n\r"
        "  Only aviable when port is PON-port.\n\r"
        "  In this case also Tunnel_ID is used.\n\r"
        "  Invalid for Petra-B.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    }
  },
  { 
    VAL_SYMBOL, 
      "port_tunnel_pcp_ether_type_comp_vlan_comp_vlan", 
    { 
      { 
        SOC_PPC_L2_LIF_AC_MAP_KEY_TYPE_PORT_TUNNEL_PCP_ETHER_TYPE_COMP_VLAN_COMP_VLAN, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_L2_LIF_AC_MAP_KEY_TYPE.SOC_PPC_L2_LIF_AC_MAP_KEY_TYPE_PORT_TUNNEL_PCP_ETHER_TYPE_COMP_VLAN_COMP_VLAN:\n\r"
        "  The AC is mapped according to  Port x Tunnel_ID x PCP x EtherType x Vlan x Vlan. \n\r"
        "  Only aviable when port is PON-port.\n\r"
        "  In this case also Tunnel_ID is used.\n\r"
        "  Invalid for Petra-B.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    }
  },
  { 
      VAL_SYMBOL, 
        "port_desingated_vlan", 
      { 
        { 
          SOC_PPC_L2_LIF_AC_MAP_KEY_TYPE_TRILL_DESIGNATED_VLAN, 
            /* 
             * Casting added here just to keep the compiler silent. 
             */ 
          (long)"" 
          "  SOC_PPC_L2_LIF_AC_MAP_KEY_TYPE.SOC_PPC_L2_LIF_AC_MAP_KEY_TYPE_TRILL_DESIGNATED_VLAN:\n\r"
          "  The AC is mapped according to Port x Designated-Vlan. Inner tag is\n\r"
          "  ignored in the mapping. SOC_PPC_LIF_IGNORE_INNER_VID for\n\r"
          "  the inner VID in the AC key when adding AC.\n\r"
          "  Designated-VLAN is mainly used for TRILL UC and MC egress RBridges (per port).\n\r"
          "  Invalid for Petra-B.\n\r"
            "", 
            /* 
             * Pointer to a function to call after symbolic value 
             * has been accepted. Casting should be 'VAL_PROC_PTR'. 
             * Casting to 'long' added here just to keep the 
             * compiler silent. 
             */ 
          (long)NULL 
        } 
      } 
  },
  { 
    VAL_SYMBOL, 
    "flex_qinq_port_vlan", 
    { 
      { 
        SOC_PPC_L2_LIF_AC_MAP_KEY_TYPE_FLEXIBLE_Q_IN_Q_PORT_INITIAL_VID, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_L2_LIF_AC_MAP_KEY_TYPE.SOC_PPC_L2_LIF_AC_MAP_KEY_TYPE_FLEXIBLE_Q_IN_Q_PORT_INITIAL_VID:\n\r"
        "  The AC is mapped according to Port\n\r"
        "  x Vlan. Outer-VLAN is actually the initial-VID results from VID\n\r"
        "  assignment. \n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  },
  { 
    VAL_SYMBOL, 
    "flex_qinq_port_vlan", 
    { 
      { 
        SOC_PPC_L2_LIF_AC_MAP_KEY_TYPE_FLEXIBLE_Q_IN_Q_PORT_INITIAL_VID_VID, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_L2_LIF_AC_MAP_KEY_TYPE.SOC_PPC_L2_LIF_AC_MAP_KEY_TYPE_FLEXIBLE_Q_IN_Q_PORT_INITIAL_VID_VID:\n\r"
        "  The AC is mapped according to Port\n\r"
        "  x Vlan x Vlan. Outer-VLAN is actually the initial-VID results from VID\n\r"
        "  assignment. \n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  },
 /* 
 * Last element. Do not remove. 
 */ 
  { 
    VAL_END_OF_LIST 
  } 
} 
#endif 
; 

/********************************************************/        
/********************************************************/        
 
EXTERN CONST 
   PARAM_VAL_RULES 
     SOC_PPC_L2_LIF_DFLT_FRWRD_SRC_rule[] 
#ifdef INIT 
   = 
{ 
  { 
    VAL_SYMBOL, 
    "vsi", 
    { 
      { 
        SOC_PPC_L2_LIF_DFLT_FRWRD_SRC_VSI, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_L2_LIF_DFLT_FRWRD_SRC.SOC_PPC_L2_LIF_DFLT_FRWRD_SRC_VSI:\n\r"
        "  The default forwarding is according to the VSI\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "lif", 
    { 
      { 
        SOC_PPC_L2_LIF_DFLT_FRWRD_SRC_LIF, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_L2_LIF_DFLT_FRWRD_SRC.SOC_PPC_L2_LIF_DFLT_FRWRD_SRC_LIF:\n\r"
        "  The default forwarding is according to LIF\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
/* 
 * Last element. Do not remove. 
 */ 
  { 
    VAL_END_OF_LIST 
  } 
} 
#endif 
; 

/********************************************************/        
/********************************************************/        
 
EXTERN CONST 
   PARAM_VAL_RULES 
     SOC_PPC_RIF_ROUTE_ENABLE_TYPE_rule[] 
#ifdef INIT 
   = 
{ 
  { 
    VAL_SYMBOL, 
    "none", 
    { 
      { 
        SOC_PPC_RIF_ROUTE_ENABLE_TYPE_NONE, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_RIF_ROUTE_ENABLE_TYPE.SOC_PPC_RIF_ROUTE_ENABLE_TYPE_NONE:\n\r"
        "  Disable all following routing on RIF.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "ip_uc", 
    { 
      { 
        SOC_PPC_RIF_ROUTE_ENABLE_TYPE_IP_UC, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_RIF_ROUTE_ENABLE_TYPE.SOC_PPC_RIF_ROUTE_ENABLE_TYPE_IP_UC:\n\r"
        "  Enable IPv4/v6 UC routing.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "ip_mc", 
    { 
      { 
        SOC_PPC_RIF_ROUTE_ENABLE_TYPE_IP_MC, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_RIF_ROUTE_ENABLE_TYPE.SOC_PPC_RIF_ROUTE_ENABLE_TYPE_IP_MC:\n\r"
        "  Enable IPv4/v6 MC routing.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "mpls", 
    { 
      { 
        SOC_PPC_RIF_ROUTE_ENABLE_TYPE_MPLS, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_RIF_ROUTE_ENABLE_TYPE.SOC_PPC_RIF_ROUTE_ENABLE_TYPE_MPLS:\n\r"
        "  Enable MPLS routing (LSR)\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "all", 
    { 
      { 
        SOC_PPC_RIF_ROUTE_ENABLE_TYPE_ALL, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_RIF_ROUTE_ENABLE_TYPE.SOC_PPC_RIF_ROUTE_ENABLE_TYPE_ALL:\n\r"
        "  Enable all above routing on RIF.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
/* 
 * Last element. Do not remove. 
 */ 
  { 
    VAL_END_OF_LIST 
  } 
} 
#endif 
; 

/********************************************************/        
/********************************************************/        
 
EXTERN CONST 
   PARAM_VAL_RULES 
     SOC_PPC_LIF_COS_AC_PROFILE_TYPE_rule[] 
#ifdef INIT 
   = 
{ 
  { 
    VAL_SYMBOL, 
    "none", 
    { 
      { 
        SOC_PPC_LIF_COS_AC_PROFILE_TYPE_NONE, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_LIF_COS_AC_PROFILE_TYPE.SOC_PPC_LIF_COS_AC_PROFILE_TYPE_NONE:\n\r"
        "  No action.DP and TC are not modified.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "force_always", 
    { 
      { 
        SOC_PPC_LIF_COS_AC_PROFILE_TYPE_FORCE_ALWAYS, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_LIF_COS_AC_PROFILE_TYPE.SOC_PPC_LIF_COS_AC_PROFILE_TYPE_FORCE_ALWAYS:\n\r"
        "  Set constant values for the TC and DP, regardless the packet fields.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "map_if_tag_else_force", 
    { 
      { 
        SOC_PPC_LIF_COS_AC_PROFILE_TYPE_MAP_IF_TAG_ELSE_FORCE, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_LIF_COS_AC_PROFILE_TYPE.SOC_PPC_LIF_COS_AC_PROFILE_TYPE_MAP_IF_TAG_ELSE_FORCE:\n\r"
        "  If packet has VLAN tag, then map from Tag fields (UP/PCP, DEI, Tag-TPIDs).\n\r"
        "  Otherwise, set to constant values.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "map_if_ip_else_force", 
    { 
      { 
        SOC_PPC_LIF_COS_AC_PROFILE_TYPE_MAP_IF_IP_ELSE_FORCE, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_LIF_COS_AC_PROFILE_TYPE.SOC_PPC_LIF_COS_AC_PROFILE_TYPE_MAP_IF_IP_ELSE_FORCE:\n\r"
        "  If packet has IP header tag, then map from DSCP in the Header. Otherwise, set\n\r"
        "  to constant values.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "map_if_tag_else_none", 
    { 
      { 
        SOC_PPC_LIF_COS_AC_PROFILE_TYPE_MAP_IF_TAG_ELSE_NONE, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_LIF_COS_AC_PROFILE_TYPE.SOC_PPC_LIF_COS_AC_PROFILE_TYPE_MAP_IF_TAG_ELSE_NONE:\n\r"
        "  If packet has VLAN tag, then map from Tag fields (UP/PCP, DEI, Tag-TPIDs).\n\r"
        "  Otherwise, no change.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "map_if_ip_else_none", 
    { 
      { 
        SOC_PPC_LIF_COS_AC_PROFILE_TYPE_MAP_IF_IP_ELSE_NONE, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_LIF_COS_AC_PROFILE_TYPE.SOC_PPC_LIF_COS_AC_PROFILE_TYPE_MAP_IF_IP_ELSE_NONE:\n\r"
        "  If packet has IP header tag, then map from DSCP in the Header. Otherwise, no\n\r"
        "  change.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
/* 
 * Last element. Do not remove. 
 */ 
  { 
    VAL_END_OF_LIST 
  } 
} 
#endif 
; 

/********************************************************/        
/********************************************************/        
 
EXTERN CONST 
   PARAM_VAL_RULES 
     SOC_PPC_LIF_COS_PWE_PROFILE_TYPE_rule[] 
#ifdef INIT 
   = 
{ 
  { 
    VAL_SYMBOL, 
    "none", 
    { 
      { 
        SOC_PPC_LIF_COS_PWE_PROFILE_TYPE_NONE, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_LIF_COS_PWE_PROFILE_TYPE.SOC_PPC_LIF_COS_PWE_PROFILE_TYPE_NONE:\n\r"
        "  No action.DP and TC are not modified.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "force_always", 
    { 
      { 
        SOC_PPC_LIF_COS_PWE_PROFILE_TYPE_FORCE_ALWAYS, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_LIF_COS_PWE_PROFILE_TYPE.SOC_PPC_LIF_COS_PWE_PROFILE_TYPE_FORCE_ALWAYS:\n\r"
        "  Set constant values for the TC and DP, regardless the packet fields.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "map", 
    { 
      { 
        SOC_PPC_LIF_COS_PWE_PROFILE_TYPE_MAP, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_LIF_COS_PWE_PROFILE_TYPE.SOC_PPC_LIF_COS_PWE_PROFILE_TYPE_MAP:\n\r"
        "  Map the EXP field in the label \n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
/* 
 * Last element. Do not remove. 
 */ 
  { 
    VAL_END_OF_LIST 
  } 
} 
#endif 
; 

/********************************************************/        
/********************************************************/        
 
EXTERN CONST 
   PARAM_VAL_RULES 
     SOC_PPC_LIF_COS_OPCODE_TYPE_rule[] 
#ifdef INIT 
   = 
{ 
  { 
    VAL_SYMBOL, 
    "l3", 
    { 
      { 
        SOC_PPC_LIF_COS_OPCODE_TYPE_L3, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_LIF_COS_OPCODE_TYPE.SOC_PPC_LIF_COS_OPCODE_TYPE_L3:\n\r"
        "  Opcode mapping is according to Layer3 header.The AC-offset is mapped\n\r"
        "  according to IPv4/IPv6 TOS fieldWhen there is no IP header, it is according\n\r"
        "  to the resolved TC and DP\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "l2", 
    { 
      { 
        SOC_PPC_LIF_COS_OPCODE_TYPE_L2, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_LIF_COS_OPCODE_TYPE.SOC_PPC_LIF_COS_OPCODE_TYPE_L2:\n\r"
        "  Opcode mapping is according to Layer2 header.The AC-offset is mapped\n\r"
        "  according to the VLAN Tag\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "tc_dp", 
    { 
      { 
        SOC_PPC_LIF_COS_OPCODE_TYPE_TC_DP, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_LIF_COS_OPCODE_TYPE.SOC_PPC_LIF_COS_OPCODE_TYPE_TC_DP:\n\r"
        "  Opcode mapping is according to the resolved Traffic Class and Drop Precedence\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
/* 
 * Last element. Do not remove. 
 */ 
  { 
    VAL_END_OF_LIST 
  } 
} 
#endif 
; 

/********************************************************/        
/********************************************************/        
 
EXTERN CONST 
   PARAM_VAL_RULES 
     SOC_PPC_LIF_ENTRY_TYPE_rule[] 
#ifdef INIT 
   = 
{ 
  { 
    VAL_SYMBOL, 
    "empty", 
    { 
      { 
        SOC_PPC_LIF_ENTRY_TYPE_EMPTY, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_LIF_ENTRY_TYPE.SOC_PPC_LIF_ENTRY_TYPE_EMPTY:\n\r"
        "  Empty entry.The LIF entry is not used\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "ac", 
    { 
      { 
        SOC_PPC_LIF_ENTRY_TYPE_AC, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_LIF_ENTRY_TYPE.SOC_PPC_LIF_ENTRY_TYPE_AC:\n\r"
        "  Attachement Circuit entry.The AC is not part of ACs group\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "first_ac_in_group", 
    { 
      { 
        SOC_PPC_LIF_ENTRY_TYPE_FIRST_AC_IN_GROUP, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_LIF_ENTRY_TYPE.SOC_PPC_LIF_ENTRY_TYPE_FIRST_AC_IN_GROUP:\n\r"
        "  First AC in ACs groups.ACs group is used for attaching a packet with an AC\n\r"
        "  according to the packet's QoS params\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "middle_ac_in_group", 
    { 
      { 
        SOC_PPC_LIF_ENTRY_TYPE_MIDDLE_AC_IN_GROUP, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_LIF_ENTRY_TYPE.SOC_PPC_LIF_ENTRY_TYPE_MIDDLE_AC_IN_GROUP:\n\r"
        "  Middle AC in ACs groups.ACs group is used for attaching a packet with an AC\n\r"
        "  according to the packet's QoS params\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "pwe", 
    { 
      { 
        SOC_PPC_LIF_ENTRY_TYPE_PWE, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_LIF_ENTRY_TYPE.SOC_PPC_LIF_ENTRY_TYPE_PWE:\n\r"
        "  Pseudo Wire entry\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "eei_isid", 
    { 
      { 
        SOC_PPC_LIF_ENTRY_TYPE_ISID, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_LIF_ENTRY_TYPE.SOC_PPC_LIF_ENTRY_TYPE_ISID:\n\r"
        "  Mac-in-Mac ISID attributes\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "ip_tunnel_rif", 
    { 
      { 
        SOC_PPC_LIF_ENTRY_TYPE_IP_TUNNEL_RIF, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_LIF_ENTRY_TYPE.SOC_PPC_LIF_ENTRY_TYPE_IP_TUNNEL_RIF:\n\r"
        "  Router Interface derived from IP tunnel\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "mpls_tunnel_rif", 
    { 
      { 
        SOC_PPC_LIF_ENTRY_TYPE_MPLS_TUNNEL_RIF, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_LIF_ENTRY_TYPE.SOC_PPC_LIF_ENTRY_TYPE_MPLS_TUNNEL_RIF:\n\r"
        "  Router Interface derived from MPLS tunnel\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "trill_nick", 
    { 
      { 
        SOC_PPC_LIF_ENTRY_TYPE_TRILL_NICK, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_LIF_ENTRY_TYPE.SOC_PPC_LIF_ENTRY_TYPE_TRILL_NICK:\n\r"
        "  TRILL Nick-name\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
/* 
 * Last element. Do not remove. 
 */ 
  { 
    VAL_END_OF_LIST 
  } 
} 
#endif 
; 

/********************************************************/        
/********************************************************/        

EXTERN CONST 
PARAM_VAL_RULES 
SOC_PPC_FRWRD_MACT_KEY_TYPE_rule[] 
#ifdef INIT 
= 
{ 
  { 
    VAL_SYMBOL, 
      "mac_addr", 
    { 
      { 
        SOC_PPC_FRWRD_MACT_KEY_TYPE_MAC_ADDR, 
          /* 
          * Casting added here just to keep the compiler silent. 
          */ 
          (long)"" 
          "  SOC_PPC_FRWRD_MACT_KEY_TYPE.SOC_PPC_FRWRD_MACT_KEY_TYPE_MAC_ADDR:\n\r"
          "  The MACT is access with the key composed of MACT and FID, (normal bridging).\n\r"
          "", 
          /* 
          * Pointer to a function to call after symbolic value 
          * has been accepted. Casting should be 'VAL_PROC_PTR'. 
          * Casting to 'long' added here just to keep the 
          * compiler silent. 
          */ 
          (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
      "ipv4_mc", 
    { 
      { 
        SOC_PPC_FRWRD_MACT_KEY_TYPE_IPV4_MC, 
          /* 
          * Casting added here just to keep the compiler silent. 
          */ 
          (long)"" 
          "  SOC_PPC_FRWRD_MACT_KEY_TYPE.SOC_PPC_FRWRD_MACT_KEY_TYPE_IPV4_MC:\n\r"
          "  The MACT is access with the key composed of IPv4 DIP and FID; used for IPv4\n\r"
          "  compatible MC packets when MC routing is disabled (see\n\r"
          "  soc_ppd_rif_vsid_map_set()) and ipv4_compatible is enabled (see\n\r"
          "  soc_ppd_frwrd_mact_ip_compatible_mc_info_set()). In this case packets are\n\r"
          "  bridged where the lookup key into the MACT is DIP and FID. FID can be masked.\n\r"
          "  see soc_ppd_frwrd_mact_ip_compatible_mc_info_set()\n\r"
          "", 
          /* 
          * Pointer to a function to call after symbolic value 
          * has been accepted. Casting should be 'VAL_PROC_PTR'. 
          * Casting to 'long' added here just to keep the 
          * compiler silent. 
          */ 
          (long)NULL 
      } 
    } 
  }, 
    /* 
    * Last element. Do not remove. 
    */ 
  { 
    VAL_END_OF_LIST 
  } 
} 
#endif 
; 

/********************************************************/     
/********************************************************/        
 
EXTERN CONST 
   PARAM_VAL_RULES 
     SOC_PPC_FRWRD_MACT_ADD_TYPE_rule[] 
#ifdef INIT 
   = 
{ 
  { 
    VAL_SYMBOL, 
    "insert", 
    { 
      { 
        SOC_PPC_FRWRD_MACT_ADD_TYPE_INSERT, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FRWRD_MACT_ADD_TYPE.SOC_PPC_FRWRD_MACT_ADD_TYPE_INSERT:\n\r"
        "  Inserts an entry according to key. If in the MAC table there is already an\n\r"
        "  entry with this key, it is (always) overwritten by this value.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "learn", 
    { 
      { 
        SOC_PPC_FRWRD_MACT_ADD_TYPE_LEARN, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FRWRD_MACT_ADD_TYPE.SOC_PPC_FRWRD_MACT_ADD_TYPE_LEARN:\n\r"
        "  Learns an entry for given key and value. If in the MAC table there is already\n\r"
        "  a non static entry with this key, it is overwritten. If the entry in the MACT\n\r"
        "  is static and the entry to be learned (value) is dynamic, then no change will\n\r"
        "  be done for the existing entry. However, if both are static, the new value\n\r"
        "  overwrites the existing one.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "refresh", 
    { 
      { 
        SOC_PPC_FRWRD_MACT_ADD_TYPE_REFRESH, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FRWRD_MACT_ADD_TYPE.SOC_PPC_FRWRD_MACT_ADD_TYPE_REFRESH:\n\r"
        "  Same as learn (above), with the exception that static entries are never\n\r"
        "  overridden by the refresh command.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "transplant", 
    { 
      { 
        SOC_PPC_FRWRD_MACT_ADD_TYPE_TRANSPLANT, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FRWRD_MACT_ADD_TYPE.SOC_PPC_FRWRD_MACT_ADD_TYPE_TRANSPLANT:\n\r"
        "  Same as refresh\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
/* 
 * Last element. Do not remove. 
 */ 
  { 
    VAL_END_OF_LIST 
  } 
} 
#endif 
; 

/********************************************************/        
/********************************************************/        
 
EXTERN CONST 
   PARAM_VAL_RULES 
     SOC_PPC_FRWRD_MACT_TRAVERSE_ACTION_TYPE_rule[] 
#ifdef INIT 
   = 
{ 
  { 
    VAL_SYMBOL, 
    "none", 
    { 
      { 
        SOC_PPC_FRWRD_MACT_TRAVERSE_ACTION_TYPE_NONE, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FRWRD_MACT_TRAVERSE_ACTION_TYPE.SOC_PPC_FRWRD_MACT_TRAVERSE_ACTION_TYPE_NONE:\n\r"
        "  None: No affect to the MAC Table entries. May be useful to count entries of\n\r"
        "  the MAC table that match a given rule.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "remove", 
    { 
      { 
        SOC_PPC_FRWRD_MACT_TRAVERSE_ACTION_TYPE_REMOVE, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FRWRD_MACT_TRAVERSE_ACTION_TYPE.SOC_PPC_FRWRD_MACT_TRAVERSE_ACTION_TYPE_REMOV\n\r"
        "  :\n\r"
        "  Remove matched entries from the MAC Table.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "update", 
    { 
      { 
        SOC_PPC_FRWRD_MACT_TRAVERSE_ACTION_TYPE_UPDATE, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FRWRD_MACT_TRAVERSE_ACTION_TYPE.SOC_PPC_FRWRD_MACT_TRAVERSE_ACTION_TYPE_UPDAT\n\r"
        "  :\n\r"
        "  Modify the content of matched entries.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "count", 
    { 
      { 
        SOC_PPC_FRWRD_MACT_TRAVERSE_ACTION_TYPE_COUNT, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FRWRD_MACT_TRAVERSE_ACTION_TYPE.SOC_PPC_FRWRD_MACT_TRAVERSE_ACTION_TYPE_COUNT:\n\r"
        "  to count entries of the MAC table that match a given rule.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "retrieve", 
    { 
      { 
        SOC_PPC_FRWRD_MACT_TRAVERSE_ACTION_TYPE_RETRIEVE, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FRWRD_MACT_TRAVERSE_ACTION_TYPE.SOC_PPC_FRWRD_MACT_TRAVERSE_ACTION_TYPE_RETRI\n\r"
        "  VE:\n\r"
        "  Retrieve matched entries into the MACT event FIFO. To read entries from the\n\r"
        "  event FIFO use soc_ppd_trap_mact_event_get()/ soc_ppd_trap_mact_event_parse().Note\n\r"
        "  user may also read MACT content using soc_ppd_frwrd_mact_get_block(). T20E only.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
/* 
 * Last element. Do not remove. 
 */ 
  { 
    VAL_END_OF_LIST 
  } 
} 
#endif 
; 

/********************************************************/        
/********************************************************/        
 
EXTERN CONST 
   PARAM_VAL_RULES 
     SOC_PPC_FRWRD_MACT_TRAVERSE_MATCH_SELECT_rule[] 
#ifdef INIT 
   = 
{ 
  { 
    VAL_SYMBOL, 
    "none", 
    { 
      { 
        SOC_PPC_FRWRD_MACT_TRAVERSE_MATCH_SELECT_NONE, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FRWRD_MACT_TRAVERSE_MATCH_SELECT.SOC_PPC_FRWRD_MACT_TRAVERSE_MATCH_SELECT_NON\n\r"
        "  :\n\r"
        "  Compare/replace NONE of the fields. All entries will matched/replaced. \n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "dest_type", 
    { 
      { 
        SOC_PPC_FRWRD_MACT_TRAVERSE_MATCH_SELECT_DEST_TYPE, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FRWRD_MACT_TRAVERSE_MATCH_SELECT.SOC_PPC_FRWRD_MACT_TRAVERSE_MATCH_SELECT_DES\n\r"
        "  _TYPE:\n\r"
        "  Compare/replace Destination type.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "dest_val", 
    { 
      { 
        SOC_PPC_FRWRD_MACT_TRAVERSE_MATCH_SELECT_DEST_VAL, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FRWRD_MACT_TRAVERSE_MATCH_SELECT.SOC_PPC_FRWRD_MACT_TRAVERSE_MATCH_SELECT_DES\n\r"
        "  _VAL:\n\r"
        "  Compare/replace Destination value.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "additional_info", 
    { 
      { 
        SOC_PPC_FRWRD_MACT_TRAVERSE_MATCH_SELECT_ADDITIONAL_INFO, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FRWRD_MACT_TRAVERSE_MATCH_SELECT.SOC_PPC_FRWRD_MACT_TRAVERSE_MATCH_SELECT_ADD\n\r"
        "  TIONAL_INFO:\n\r"
        "  Compare/replace the additional information see additional_info at\n\r"
        "  SOC_PPC_FRWRD_DECISION_INFO.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "is_dynamic", 
    { 
      { 
        SOC_PPC_FRWRD_MACT_TRAVERSE_MATCH_SELECT_IS_DYNAMIC, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FRWRD_MACT_TRAVERSE_MATCH_SELECT.SOC_PPC_FRWRD_MACT_TRAVERSE_MATCH_SELECT_IS_\n\r"
        "  YNAMIC:\n\r"
        "  Compare/replace is dynamic field.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "drop_sa", 
    { 
      { 
        SOC_PPC_FRWRD_MACT_TRAVERSE_MATCH_SELECT_DROP_SA, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FRWRD_MACT_TRAVERSE_MATCH_SELECT.SOC_PPC_FRWRD_MACT_TRAVERSE_MATCH_SELECT_DRO\n\r"
        "  _SA:\n\r"
        "  Compare/replace drop_when_sa_is_known field.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "accessed", 
    { 
      { 
        SOC_PPC_FRWRD_MACT_TRAVERSE_MATCH_SELECT_ACCESSED, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FRWRD_MACT_TRAVERSE_MATCH_SELECT.SOC_PPC_FRWRD_MACT_TRAVERSE_MATCH_SELECT_ACCESSED\n\r"
        "  _SA:\n\r"
        "  Compare/replace accessed entries for SA/DA lookup field.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "all", 
    { 
      { 
        SOC_PPC_FRWRD_MACT_TRAVERSE_MATCH_SELECT_ALL, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FRWRD_MACT_TRAVERSE_MATCH_SELECT.SOC_PPC_FRWRD_MACT_TRAVERSE_MATCH_SELECT_ALL:\n\r"
        "  Compare/replace ALL fields.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
/* 
 * Last element. Do not remove. 
 */ 
  { 
    VAL_END_OF_LIST 
  } 
} 
#endif 
; 

/********************************************************/        
/********************************************************/        
 
EXTERN CONST 
   PARAM_VAL_RULES 
     SOC_PPC_FRWRD_MACT_LEARNING_MODE_rule[] 
#ifdef INIT 
   = 
{ 
  { 
    VAL_SYMBOL, 
    "ingress_distributed", 
    { 
      { 
        SOC_PPC_FRWRD_MACT_LEARNING_MODE_INGRESS_DISTRIBUTED, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FRWRD_MACT_LEARNING_MODE.SOC_PPC_FRWRD_MACT_LEARNING_MODE_INGRESS_D\n\r"
        "  STRIBUTED:\n\r"
        "  The learning occurs in the ingress device, distributed mode. \n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "ingress_centralized", 
    { 
      { 
        SOC_PPC_FRWRD_MACT_LEARNING_MODE_INGRESS_CENTRALIZED, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FRWRD_MACT_LEARNING_MODE.SOC_PPC_FRWRD_MACT_LEARNING_MODE_INGRESS_C\n\r"
        "  NTRALIZED:\n\r"
        "  The learning occurs in the ingress device, centralized mode. \n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "egress_distributed", 
    { 
      { 
        SOC_PPC_FRWRD_MACT_LEARNING_MODE_EGRESS_DISTRIBUTED, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FRWRD_MACT_LEARNING_MODE.SOC_PPC_FRWRD_MACT_LEARNING_MODE_EGRESS_DI\n\r"
        "  TRIBUTED:\n\r"
        "  The learning occurs in the egress device, distributed mode. \n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "egress_centralized", 
    { 
      { 
        SOC_PPC_FRWRD_MACT_LEARNING_MODE_EGRESS_CENTRALIZED, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FRWRD_MACT_LEARNING_MODE.SOC_PPC_FRWRD_MACT_LEARNING_MODE_EGRESS_CE\n\r"
        "  TRALIZED:\n\r"
        "  The learning occurs in the egress device, centralized mode. \n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "egress_independent", 
    { 
      { 
        SOC_PPC_FRWRD_MACT_LEARNING_MODE_EGRESS_INDEPENDENT, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FRWRD_MACT_LEARNING_MODE.SOC_PPC_FRWRD_MACT_LEARNING_MODE_EGRESS_SE\n\r"
        "  FISH:\n\r"
        "  The learning occurs in the egress device, independent mode. \n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
/* 
 * Last element. Do not remove. 
 */ 
  { 
    VAL_END_OF_LIST 
  } 
} 
#endif 
; 

/********************************************************/        
/********************************************************/        
 
EXTERN CONST 
   PARAM_VAL_RULES 
     SOC_PPC_FRWRD_MACT_SHADOW_MODE_rule[] 
#ifdef INIT 
   = 
{ 
  { 
    VAL_SYMBOL, 
    "none", 
    { 
      { 
        SOC_PPC_FRWRD_MACT_SHADOW_MODE_NONE, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FRWRD_MACT_SHADOW_MODE.SOC_PPC_FRWRD_MACT_SHADOW_MODE_NONE:\n\r"
        "  No shadow is maintained by the CPU, and the CPU is not informed regarding\n\r"
        "  changes in the MACT\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "arp", 
    { 
      { 
        SOC_PPC_FRWRD_MACT_SHADOW_MODE_ARP, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FRWRD_MACT_SHADOW_MODE.SOC_PPC_FRWRD_MACT_SHADOW_MODE_ARP:\n\r"
        "  The shadow maintained by the CPU is for ARP managment (for routing), in this\n\r"
        "  case the CPU is informed upon age-out and transplant events, but not Learn\n\r"
        "  events. In this case learned events are not relevant because new entries\n\r"
        "  inserted to the MACT by the control-plan upon ARP requests.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "lag", 
    { 
      { 
        SOC_PPC_FRWRD_MACT_SHADOW_MODE_LAG, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
            
        (long)"" 
        "  SOC_PPC_FRWRD_MACT_SHADOW_MODE.SOC_PPC_FRWRD_MACT_SHADOW_MODE_LAG:\n\r"
        "  The shadow maintained by the CPU is for LAG management. In this case the CPU\n\r"
        "  is informed upon learn/transplant and aged out events that were generated due\n\r"
        "  to packets  whose Destination port is a LAG."
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "all", 
    { 
      { 
        SOC_PPC_FRWRD_MACT_SHADOW_MODE_ALL, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FRWRD_MACT_SHADOW_MODE.SOC_PPC_FRWRD_MACT_SHADOW_MODE_ALL:\n\r"
        "  The shadow maintained by the CPU is fully synchronized with MACT of the\n\r"
        "  hardware. In this case CPU is informed upon age-out, transplant and learn\n\r"
        "  events. This mode may be used when the CPU supervises the Hardware MACT.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
/* 
 * Last element. Do not remove. 
 */ 
  { 
    VAL_END_OF_LIST 
  } 
} 
#endif 
; 

/********************************************************/        
     
/********************************************************/        
 
EXTERN CONST 
   PARAM_VAL_RULES 
     SOC_PPD_FRWRD_MACT_MESSAGE_HEADER_TYPE_rule[] 
#ifdef INIT 
   = 
{ 
  { 
    VAL_SYMBOL, 
    "raw", 
    { 
      { 
        SOC_PPC_FRWRD_MACT_MSG_HDR_TYPE_RAW, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPD_FRWRD_MACT_MESSAGE_HEADER_TYPE.SOC_PPD_FRWRD_MACT_MESSAGE_HEADER_TY\n\r"
        "  E_RAW:\n\r"
        "  Learning messages are sent with Raw header- OLP port type has to be Raw\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "itmh", 
    { 
      { 
        SOC_PPC_FRWRD_MACT_MSG_HDR_TYPE_ITMH, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPD_FRWRD_MACT_MESSAGE_HEADER_TYPE.SOC_PPD_FRWRD_MACT_MESSAGE_HEADER_TY\n\r"
        "  E_ITMH:\n\r"
        "  Learning messages are sent with ITMH header- OLP port type has to be TM\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "eth_o_itmh", 
    { 
      { 
        SOC_PPC_FRWRD_MACT_MSG_HDR_TYPE_ETH_O_ITMH, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FRWRD_MACT_MSG_HDR_TYPE.SOC_PPC_FRWRD_MACT_MSG_HDR_TYPE_ETH_O_ITMH:\n\r"
        "  are injected into the local device with ITMH header the packet is\n\r"
        "  processed/forwarded in the device as a TM packet (according to the associated\n\r"
        "  ITMH header). The learn message leaves the device as an Ethernet packet that\n\r"
        "  includes the learn records.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
/* 
 * Last element. Do not remove. 
 */ 
  { 
    VAL_END_OF_LIST 
  } 
} 
#endif 
; 

/********************************************************/        
/********************************************************/        
 
EXTERN CONST 
   PARAM_VAL_RULES 
     SOC_PPC_FRWRD_MACT_LIMIT_EXCEED_NOTIFY_TYPE_rule[] 
#ifdef INIT 
   = 
{ 
  { 
    VAL_SYMBOL, 
    "none", 
    { 
      { 
        SOC_PPC_FRWRD_MACT_LIMIT_EXCEED_NOTIFY_TYPE_NONE, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FRWRD_MACT_LIMIT_EXCEED_NOTIFY_TYPE.SOC_PPD_FRWRD_MACT_LIMIT_EXCEED\n\r"
        "  NOTIFY_TYPE_NONE:\n\r"
        "  No notification is performed.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "interrupt", 
    { 
      { 
        SOC_PPC_FRWRD_MACT_LIMIT_EXCEED_NOTIFY_TYPE_INTERRUPT, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FRWRD_MACT_LIMIT_EXCEED_NOTIFY_TYPE.SOC_PPD_FRWRD_MACT_LIMIT_EXCEED\n\r"
        "  NOTIFY_TYPE_INTERRUPT:\n\r"
        "  Raise an interrupt. Relevant only for Petra-B.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "msg", 
    { 
      { 
        SOC_PPC_FRWRD_MACT_LIMIT_EXCEED_NOTIFY_TYPE_MSG, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FRWRD_MACT_LIMIT_EXCEED_NOTIFY_TYPE.SOC_PPD_FRWRD_MACT_LIMIT_EXCEED\n\r"
        "  NOTIFY_TYPE_MSG:\n\r"
        "  Send a message. Relevant only for Petra-B.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "event", 
    { 
      { 
        SOC_PPC_FRWRD_MACT_LIMIT_EXCEED_NOTIFY_TYPE_EVENT, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FRWRD_MACT_LIMIT_EXCEED_NOTIFY_TYPE.SOC_PPD_FRWRD_MACT_LIMIT_EXCEED\n\r"
        "  NOTIFY_TYPE_EVENT:\n\r"
        "  Generate a special event and add it to the MACT event FIFO. Use\n\r"
        "  soc_ppd_trap_mact_event_get()/soc_ppd_trap_mact_event_parse() to catch this event\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
/* 
 * Last element. Do not remove. 
 */ 
  { 
    VAL_END_OF_LIST 
  } 
} 
#endif 
; 

/********************************************************/        
/********************************************************/        
 
EXTERN CONST 
   PARAM_VAL_RULES 
     SOC_PPC_FRWRD_MACT_TRAP_TYPE_rule[] 
#ifdef INIT 
   = 
{ 
  { 
    VAL_SYMBOL, 
    "sa_drop", 
    { 
      { 
        SOC_PPC_FRWRD_MACT_TRAP_TYPE_SA_DROP, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FRWRD_MACT_TRAP_TYPE.SOC_PPC_FRWRD_MACT_TRAP_TYPE_SA_DROP:\n\r"
        "  Trap performed for SA with drop_known.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "sa_unknown", 
    { 
      { 
        SOC_PPC_FRWRD_MACT_TRAP_TYPE_SA_UNKNOWN, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FRWRD_MACT_TRAP_TYPE.SOC_PPC_FRWRD_MACT_TRAP_TYPE_SA_UNKNOWN:\n\r"
        "  Trap performed for unknown SA.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
/* 
 * Last element. Do not remove. 
 */ 
  { 
    VAL_END_OF_LIST 
  } 
} 
#endif 
; 

/********************************************************/        
/********************************************************/        
 
EXTERN CONST 
   PARAM_VAL_RULES 
     SOC_PPC_FRWRD_MACT_EVENT_TYPE_rule[] 
#ifdef INIT 
   = 
{ 
  { 
    VAL_SYMBOL, 
    "none", 
    { 
      { 
        SOC_PPC_FRWRD_MACT_EVENT_TYPE_NONE, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FRWRD_MACT_EVENT_TYPE.SOC_PPC_FRWRD_MACT_EVENT_TYPE_NONE:\n\r"
        "  Not valid event\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "aged_out", 
    { 
      { 
        SOC_PPC_FRWRD_MACT_EVENT_TYPE_AGED_OUT, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FRWRD_MACT_EVENT_TYPE.SOC_PPC_FRWRD_MACT_EVENT_TYPE_AGED_OUT:\n\r"
        "  Event indicates that the entry is subject to be aged out.Note: using\n\r"
        "  soc_ppd_frwrd_mact_aging_events_handle_info_set the user can define whether\n\r"
        "  the aging process: -	generate aged out events, -	handle internally the\n\r"
        "  aged-out entry and delete it,-	both.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "learn", 
    { 
      { 
        SOC_PPC_FRWRD_MACT_EVENT_TYPE_LEARN, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FRWRD_MACT_EVENT_TYPE.SOC_PPC_FRWRD_MACT_EVENT_TYPE_LEARN:\n\r"
        "  This event indicates that the entry is subject to be learned.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "transplant", 
    { 
      { 
        SOC_PPC_FRWRD_MACT_EVENT_TYPE_TRANSPLANT, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FRWRD_MACT_EVENT_TYPE.SOC_PPC_FRWRD_MACT_EVENT_TYPE_TRANSPLANT:\n\r"
        "  This event indicates that the entry is subject to be transplanted, i.e. its\n\r"
        "  key already exists in the MACT but the packet arrived on a different\n\r"
        "  interface.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "refresh", 
    { 
      { 
        SOC_PPC_FRWRD_MACT_EVENT_TYPE_REFRESH, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FRWRD_MACT_EVENT_TYPE.SOC_PPC_FRWRD_MACT_EVENT_TYPE_REFRESH:\n\r"
        "  This event indicates that the entry is subject to be refreshed, i.e. its key\n\r"
        "  and its value already exist in the MACT but its age status has been reset due\n\r"
        "  to the arrival of a new packet from the same interface.Note: using\n\r"
        "  soc_ppd_frwrd_mact_aging_events_handle_info_set the user can define whether the\n\r"
        "  aging process generates refresh events or not.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "retrieve", 
    { 
      { 
        SOC_PPC_FRWRD_MACT_EVENT_TYPE_RETRIEVE, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FRWRD_MACT_EVENT_TYPE.SOC_PPC_FRWRD_MACT_EVENT_TYPE_RETRIEVE:\n\r"
        "  MACT entry returned upon CPU request using soc_ppd_frwrd_mact_traverse() with\n\r"
        "  action type RETRIEVE.T20E only.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "limit_exceed", 
    { 
      { 
        SOC_PPC_FRWRD_MACT_EVENT_TYPE_LIMIT_EXCEED, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FRWRD_MACT_EVENT_TYPE.SOC_PPC_FRWRD_MACT_EVENT_TYPE_LIMIT_EXCEED:\n\r"
        "  Insertion to MACT failed due to exceeding the limit assigned to the\n\r"
        "  particular VSI.T20E only.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "ack", 
    { 
      { 
        SOC_PPC_FRWRD_MACT_EVENT_TYPE_ACK, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FRWRD_MACT_EVENT_TYPE.SOC_PPC_FRWRD_MACT_EVENT_TYPE_ACK:\n\r"
        "  Acknowledgment event upon CPU request (insert/learn/delete).\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "req_fail", 
    { 
      { 
        SOC_PPC_FRWRD_MACT_EVENT_TYPE_REQ_FAIL, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FRWRD_MACT_EVENT_TYPE.SOC_PPC_FRWRD_MACT_EVENT_TYPE_REQ_FAIL:\n\r"
        "  Request to the MACT has failed.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
/* 
 * Last element. Do not remove. 
 */ 
  { 
    VAL_END_OF_LIST 
  } 
} 
#endif 
; 
/********************************************************/        
/********************************************************/        
 
EXTERN CONST 
   PARAM_VAL_RULES 
     SOC_PPC_FRWRD_IPV4_ROUTER_DEFAULT_ACTION_TYPE_rule[] 
#ifdef INIT 
   = 
{ 
  { 
    VAL_SYMBOL, 
    "fec", 
    { 
      { 
        SOC_PPC_FRWRD_IPV4_ROUTER_DEFAULT_ACTION_TYPE_FEC, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FRWRD_IPV4_ROUTER_DEFAULT_ACTION_TYPE.SOC_PPD_FRWRD_IPV4_ROUTER_DEFAULT_ACTIO\n\r"
        "  _TYPE_FEC:\n\r"
        "  The default action is the FEC pointer that uses the entry from the FEC table.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "action_profile", 
    { 
      { 
        SOC_PPC_FRWRD_IPV4_ROUTER_DEFAULT_ACTION_TYPE_ACTION_PROFILE, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FRWRD_IPV4_ROUTER_DEFAULT_ACTION_TYPE.SOC_PPD_FRWRD_IPV4_ROUTER_DEFAULT_ACTIO\n\r"
        "  _TYPE_ACTION_PROFILE:\n\r"
        "  The default action is the action profile.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
/* 
 * Last element. Do not remove. 
 */ 
  { 
    VAL_END_OF_LIST 
  } 
} 
#endif 
; 

/********************************************************/        
/********************************************************/        
 
EXTERN CONST 
   PARAM_VAL_RULES 
     SOC_PPC_FRWRD_IPV4_HOST_TABLE_RESOURCE_rule[] 
#ifdef INIT 
   = 
{ 
  { 
    VAL_SYMBOL, 
    "lpm_then_lem", 
    { 
      { 
        SOC_PPC_FRWRD_IPV4_HOST_TABLE_RESOURCE_LPM_THEN_LEM, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FRWRD_IPV4_HOST_TABLE_RESOURCE.SOC_PPC_FRWRD_IPV4_HOST_TABLE_RESOURCE_LPM_THE\n\r"
        "  _LEM:\n\r"
        "  For Ipv4 hosts (keys with prefix length = 32), use the longest prefix match\n\r"
        "  DB, and only when no available space, use the Large Exact Match DB.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "lpm_only", 
    { 
      { 
        SOC_PPC_FRWRD_IPV4_HOST_TABLE_RESOURCE_LPM_ONLY, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FRWRD_IPV4_HOST_TABLE_RESOURCE.SOC_PPC_FRWRD_IPV4_HOST_TABLE_RESOURCE_LPM_ONL\n\r"
        "  :\n\r"
        "  For Ipv4 hosts (keys with prefix length = 32), use ONLY longest prefix match\n\r"
        "  DB.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "lem_then_lpm", 
    { 
      { 
        SOC_PPC_FRWRD_IPV4_HOST_TABLE_RESOURCE_LEM_THEN_LPM, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FRWRD_IPV4_HOST_TABLE_RESOURCE.SOC_PPC_FRWRD_IPV4_HOST_TABLE_RESOURCE_LEM_THE\n\r"
        "  _LPM:\n\r"
        "  For Ipv4 hosts (keys with prefix length = 32), use Large Exact Match DB, and\n\r"
        "  only when no available space, use the longest prefix match DB.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "lem_only", 
    { 
      { 
        SOC_PPC_FRWRD_IPV4_HOST_TABLE_RESOURCE_LEM_ONLY, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FRWRD_IPV4_HOST_TABLE_RESOURCE.SOC_PPC_FRWRD_IPV4_HOST_TABLE_RESOURCE_LEM_ONL\n\r"
        "  :\n\r"
        "  For Ipv4 hosts (keys with prefix length = 32), use ONLY Large Exact Match DB.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
/* 
 * Last element. Do not remove. 
 */ 
  { 
    VAL_END_OF_LIST 
  } 
} 
#endif 
; 

/********************************************************/        
/********************************************************/        
 
EXTERN CONST 
   PARAM_VAL_RULES 
     SOC_PPC_FRWRD_IPV4_MC_HOST_TABLE_RESOURCE_rule[] 
#ifdef INIT 
   = 
{ 
  { 
    VAL_SYMBOL, 
    "tcam_only", 
    { 
      { 
        SOC_PPC_FRWRD_IPV4_MC_HOST_TABLE_RESOURCE_TCAM_ONLY, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FRWRD_IPV4_MC_HOST_TABLE_RESOURCE.SOC_PPC_FRWRD_IPV4_MC_HOST_TABLE_RESOURCE_T\n\r"
        "  AM_ONLY:\n\r"
        "  For Ipv4 MC hosts (keys with prefix length = 32), use ONLY longest prefix\n\r"
        "  match DB.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 

/* 
 * Last element. Do not remove. 
 */ 
  { 
    VAL_END_OF_LIST 
  } 
} 
#endif 
; 

/********************************************************/        
/********************************************************/        
 
EXTERN CONST 
   PARAM_VAL_RULES 
     SOC_PPC_FRWRD_IP_CACHE_MODE_rule[] 
#ifdef INIT 
   = 
{ 
  { 
    VAL_SYMBOL, 
    "none", 
    { 
      { 
        SOC_PPC_FRWRD_IP_CACHE_MODE_NONE, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FRWRD_IP_CACHE_MODE.SOC_PPC_FRWRD_IP_CACHE_MODE_NONE\n\r"
        "  SOC_PPC_FRWRD_IP_CACHE_MODE_NONE:\n\r"
        "  no caching\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "ipv4_lpm", 
    { 
      { 
        SOC_PPC_FRWRD_IP_CACHE_MODE_IPV4_UC_LPM, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FRWRD_IP_CACHE_MODE.SOC_PPC_FRWRD_IP_CACHE_MODE_IPV4_UC_LPM\n\r"
        "  SOC_PPC_FRWRD_IP_CACHE_MODE_IPV4_UC_LPM:\n\r"
        "  cache all routes add into LPM\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 

/* 
 * Last element. Do not remove. 
 */ 
  { 
    VAL_END_OF_LIST 
  } 
} 
#endif 
; 

/********************************************************/    
/********************************************************/        
 
EXTERN CONST 
   PARAM_VAL_RULES 
     SOC_PPC_FRWRD_IPV6_ROUTER_DEFAULT_ACTION_TYPE_rule[] 
#ifdef INIT 
   = 
{ 
  { 
    VAL_SYMBOL, 
    "fec", 
    { 
      { 
        SOC_PPC_FRWRD_IPV6_ROUTER_DEFAULT_ACTION_TYPE_FEC, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FRWRD_IPV6_ROUTER_DEFAULT_ACTION_TYPE.SOC_PPD_FRWRD_IPV6_ROUTER_DEFAULT_ACTIO\n\r"
        "  _TYPE_FEC:\n\r"
        "  The default action is the FEC pointer that uses entry from the FEC table.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "action_profile", 
    { 
      { 
        SOC_PPC_FRWRD_IPV6_ROUTER_DEFAULT_ACTION_TYPE_ACTION_PROFILE, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FRWRD_IPV6_ROUTER_DEFAULT_ACTION_TYPE.SOC_PPD_FRWRD_IPV6_ROUTER_DEFAULT_ACTIO\n\r"
        "  _TYPE_ACTION_PROFILE:\n\r"
        "  The default action is the action profile.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
/* 
 * Last element. Do not remove. 
 */ 
  { 
    VAL_END_OF_LIST 
  } 
} 
#endif 
; 

/********************************************************/        
/********************************************************/        
 
EXTERN CONST 
   PARAM_VAL_RULES 
     SOC_PPC_FEC_TYPE_rule[] 
#ifdef INIT 
   = 
{ 
  { 
    VAL_SYMBOL, 
    "drop", 
    { 
      { 
        SOC_PPC_FEC_TYPE_DROP, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FEC_TYPE.SOC_PPC_FEC_TYPE_DROP:\n\r"
        "  The FEC entry is used to drop packets. \n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "ip_mc", 
    { 
      { 
        SOC_PPC_FEC_TYPE_IP_MC, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FEC_TYPE.SOC_PPC_FEC_TYPE_IP_MC:\n\r"
        "  This FEC entry is used for IP MC routing. \n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "ip_uc", 
    { 
      { 
        SOC_PPC_FEC_TYPE_IP_UC, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FEC_TYPE.SOC_PPC_FEC_TYPE_IP_UC:\n\r"
        "  This FEC entry is used for IP UC routing. \n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "trill_mc", 
    { 
      { 
        SOC_PPC_FEC_TYPE_TRILL_MC, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FEC_TYPE.SOC_PPC_FEC_TYPE_TRILL_MC:\n\r"
        "  This FEC entry is used for TRILL MC multicast switching. \n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "trill_uc", 
    { 
      { 
        SOC_PPC_FEC_TYPE_TRILL_UC, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FEC_TYPE.SOC_PPC_FEC_TYPE_TRILL_UC:\n\r"
        "  This FEC entry is used for TRILL UC multicast switching. \n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "bridging_into_tunnel", 
    { 
      { 
        SOC_PPC_FEC_TYPE_BRIDGING_INTO_TUNNEL, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FEC_TYPE.SOC_PPC_FEC_TYPE_BRIDGING_INTO_TUNNEL:\n\r"
        "  The FEC entry is used for Layer2 Forwarding. The application may be VPLS /\n\r"
        "  MAC-In-MAC / TRILL, when the forwarding is according to MACT.When forwarding\n\r"
        "  to TRILL distribution TREE, the type should be SOC_PPC_FEC_TYPE_TRILL_MC.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "bridging_with_ac", 
    { 
      { 
        SOC_PPC_FEC_TYPE_BRIDGING_WITH_AC, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FEC_TYPE.SOC_PPC_FEC_TYPE_BRIDGING_WITH_AC:\n\r"
        "  The FEC entry is used for Layer2 Forwarding. The application may be Bridging\n\r"
        "  with protected-AC. no tunneling in this case\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "mpls_lsr", 
    { 
      { 
        SOC_PPC_FEC_TYPE_MPLS_LSR, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FEC_TYPE.SOC_PPC_FEC_TYPE_MPLS_LSR:\n\r"
        "  This FEC entry is used for MPLS LSR Switching.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "simple_dest", 
    { 
      { 
        SOC_PPC_FEC_TYPE_SIMPLE_DEST, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FEC_TYPE.SOC_PPC_FEC_TYPE_SIMPLE_DEST:\n\r"
        "  the FEC includes destination only..\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "routing", 
    { 
      { 
        SOC_PPC_FEC_TYPE_ROUTING, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FEC_TYPE.SOC_PPC_FEC_TYPE_ROUTING:\n\r"
        "  FEC is used for routing (IP/MPLS).\n\r"
        "  FEC includes destination, out-lif, out-RIF.\n\r"
        "  used for IP/MPLS routing.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "tunneling", 
    { 
      { 
        SOC_PPC_FEC_TYPE_TUNNELING, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FEC_TYPE.SOC_PPC_FEC_TYPE_TUNNELING:\n\r"
        "  FEC includes destination and out-lif.\n\r"
        "  used for IP/MPLS/Briding into tunnel.\n\r"
        "  used also for bridging with out-AC.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
/* 
 * Last element. Do not remove. 
 */ 
  { 
    VAL_END_OF_LIST 
  } 
} 
#endif 
; 

/********************************************************/        
/********************************************************/        
 
EXTERN CONST 
   PARAM_VAL_RULES 
     SOC_PPC_FRWRD_FEC_RPF_MODE_rule[] 
#ifdef INIT 
   = 
{ 
  { 
    VAL_SYMBOL, 
    "none", 
    { 
      { 
        SOC_PPC_FRWRD_FEC_RPF_MODE_NONE, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FRWRD_FEC_RPF_MODE.SOC_PPC_FRWRD_FEC_RPF_MODE_NONE:\n\r"
        "  No RPF check is performed.Should be aligned with the settings of\n\r"
        "  'uc_rpf_enable' via soc_ppd_rif_vsid_map_set().\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "uc_strict", 
    { 
      { 
        SOC_PPC_FRWRD_FEC_RPF_MODE_UC_STRICT, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FRWRD_FEC_RPF_MODE.SOC_PPC_FRWRD_FEC_RPF_MODE_UC_STRICT:\n\r"
        "  SIP lookup must succeed and In-RIF must be equal to Out-RIF from SIP lookup.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "uc_loose", 
    { 
      { 
        SOC_PPC_FRWRD_FEC_RPF_MODE_UC_LOOSE, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FRWRD_FEC_RPF_MODE.SOC_PPC_FRWRD_FEC_RPF_MODE_UC_LOOSE:\n\r"
        "  SIP lookup must succeed. But Out-RIF must not to be equal to In-RIF.SIP\n\r"
        "  lookup Success means that the SIP lookup did not return the default FEC\n\r"
        "  entry. Relevant only when the FEC entry is used for IPv4-UC routing with VPN\n\r"
        "  (VRF != 0).\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "mc_explicit", 
    { 
      { 
        SOC_PPC_FRWRD_FEC_RPF_MODE_MC_EXPLICIT, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FRWRD_FEC_RPF_MODE.SOC_PPC_FRWRD_FEC_RPF_MODE_MC_EXPLICIT:\n\r"
        "  Packet In-RIF is compared against Expected-In-RIF explicitly specified in the\n\r"
        "  FEC entry.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "mc_use_sip", 
    { 
      { 
        SOC_PPC_FRWRD_FEC_RPF_MODE_MC_USE_SIP, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FRWRD_FEC_RPF_MODE.SOC_PPC_FRWRD_FEC_RPF_MODE_MC_USE_SIP:\n\r"
        "  Lookup the SIP of the packet. Same as UC RPF. The SIP's FEC Out-RIF is\n\r"
        "  compared to the In-RIF that the packet arrives with. When The SIP points to\n\r"
        "  an ECMP, the RPF is ignored, and in this case packet can be trapped/snooped\n\r"
        "  according to the trap code SOC_PPC_TRAP_CODE_MC_USE_SIP_ECMP.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "mc_use_sip_with_ecmp", 
    { 
      { 
        SOC_PPC_FRWRD_FEC_RPF_MODE_MC_USE_SIP_WITH_ECMP, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FRWRD_FEC_RPF_MODE.SOC_PPC_FRWRD_FEC_RPF_MODE_MC_USE_SIP_WITH_ECMP:\n\r"
        "  Lookup the SIP of the packet. Same as UC RPF. The SIP's FEC Out-RIF is\n\r"
        "  compared to the In-RIF that the packet arrives with. When The SIP points to\n\r"
        "  an ECMP, the In-RIF compared with the Out-RIF of the first ECMP's FEC Entry.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
/* 
 * Last element. Do not remove. 
 */ 
  { 
    VAL_END_OF_LIST 
  } 
} 
#endif 
; 

/********************************************************/        
/********************************************************/        
 
EXTERN CONST 
   PARAM_VAL_RULES 
     SOC_PPC_FRWRD_FEC_PROTECT_TYPE_rule[] 
#ifdef INIT 
   = 
{ 
  { 
    VAL_SYMBOL, 
    "none", 
    { 
      { 
        SOC_PPC_FRWRD_FEC_PROTECT_TYPE_NONE, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FRWRD_FEC_PROTECT_TYPE.SOC_PPC_FRWRD_FEC_PROTECT_TYPE_NONE:\n\r"
        "  No protection for the FEC entry.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "facility", 
    { 
      { 
        SOC_PPC_FRWRD_FEC_PROTECT_TYPE_FACILITY, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
#ifdef COMPILER_STRING_CONST_LIMIT
        (long)"  Full documentation cannot be displayed with -pendantic compiler\n\r",
#else
        (long)"" 
        "  SOC_PPC_FRWRD_FEC_PROTECT_TYPE.SOC_PPC_FRWRD_FEC_PROTECT_TYPE_FACILITY:\n\r"
        "  Facility Protection. In this case user has to supply Working FEC and\n\r"
        "  Protecting FEC. Packets are forwarded according to: 1. Working FEC: if the\n\r"
        "  destination of this FEC is System Port and it status is up. 2. (Otherwise)\n\r"
        "  Protection FEC: if the destination of this FEC is System Port and it status\n\r"
        "  is up. 3. (Otherwise) packet may be forwarded/snooped according to action\n\r"
        "  profile. To set this the forwarding and snooping actions use\n\r"
        "  soc_ppd_trap_frwrd_profile_info_set(),soc_ppd_trap_snoop_profile_info_set() with trap\n\r"
        "  code SOC_PPC_TRAP_CODE_FACILITY_INVALIDIn order to set the status of the system\n\r"
        "  port use soc_ppd_frwrd_fec_protection_sys_port_status_set(system_port, is_up)\n\r"
          "", 
#endif /* COMPILER_STRING_CONST_LIMIT */
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "path", 
    { 
      { 
        SOC_PPC_FRWRD_FEC_PROTECT_TYPE_PATH, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FRWRD_FEC_PROTECT_TYPE.SOC_PPC_FRWRD_FEC_PROTECT_TYPE_PATH:\n\r"
        "  Path Protection. In this case user has to supply Working FEC, Protecting FEC\n\r"
        "  and OAM instance. Packets are forwarded according to Working FEC if the\n\r"
        "  status of the OAM instance is up, and according to the Protection FEC\n\r"
        "  otherwise.In order to set the status of the OAM instance use\n\r"
        "  soc_ppd_frwrd_fec_protection_oam_instance_status_set(oam_id, is_up)\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
/* 
 * Last element. Do not remove. 
 */ 
  { 
    VAL_END_OF_LIST 
  } 
} 
#endif 
; 

/********************************************************/        
/********************************************************/        
 
EXTERN CONST 
   PARAM_VAL_RULES 

     SOC_PPC_FRWRD_FEC_ENTRY_USE_TYPE_rule[] 
#ifdef INIT 
   = 
{ 
  { 
    VAL_SYMBOL, 
    "none", 
    { 
      { 
        SOC_PPC_FRWRD_FEC_ENTRY_USE_TYPE_NONE, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FRWRD_FEC_ENTRY_USE_TYPE.SOC_PPC_FRWRD_FEC_ENTRY_USE_TYPE_NONE:\n\r"
        "  The pointed FEC is not allocated for any use.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "one_fec", 
    { 
      { 
        SOC_PPC_FRWRD_FEC_ENTRY_USE_TYPE_ONE_FEC, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FRWRD_FEC_ENTRY_USE_TYPE.SOC_PPC_FRWRD_FEC_ENTRY_USE_TYPE_ONE_FEC:\n\r"
        "  The pointed FEC is allocated as one FEC entry (no protection).\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "ecmp", 
    { 
      { 
        SOC_PPC_FRWRD_FEC_ENTRY_USE_TYPE_ECMP, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FRWRD_FEC_ENTRY_USE_TYPE.SOC_PPC_FRWRD_FEC_ENTRY_USE_TYPE_ECMP:\n\r"
        "  The pointed FEC is allocated as part of ECMP.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "path_protect", 
    { 
      { 
        SOC_PPC_FRWRD_FEC_ENTRY_USE_TYPE_PATH_PROTECT, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FRWRD_FEC_ENTRY_USE_TYPE.SOC_PPC_FRWRD_FEC_ENTRY_USE_TYPE_PATH_PROTECT:\n\r"
        "  The pointed FEC is allocated as part of Path protection.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "facility_protect", 
    { 
      { 
        SOC_PPC_FRWRD_FEC_ENTRY_USE_TYPE_FACILITY_PROTECT, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FRWRD_FEC_ENTRY_USE_TYPE.SOC_PPC_FRWRD_FEC_ENTRY_USE_TYPE_FACILITY_PROTECT:\n\r"
        "  The pointed FEC is allocated as part of Facility protection.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
/* 
 * Last element. Do not remove. 
 */ 
  { 
    VAL_END_OF_LIST 
  } 
} 
#endif 
; 

/********************************************************/        
/********************************************************/        
 
EXTERN CONST 
   PARAM_VAL_RULES 
     SOC_PPC_FRWRD_FEC_MATCH_RULE_TYPE_rule[] 
#ifdef INIT 
   = 
{ 
  { 
    VAL_SYMBOL, 
    "all", 
    { 
      { 
        SOC_PPC_FRWRD_FEC_MATCH_RULE_TYPE_ALL, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FRWRD_FEC_MATCH_RULE_TYPE.SOC_PPC_FRWRD_FEC_MATCH_RULE_TYPE_ALL:\n\r"
        "  Get all valid (Allocated) FEC entries\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "app_type", 
    { 
      { 
        SOC_PPC_FRWRD_FEC_MATCH_RULE_TYPE_APP_TYPE, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FRWRD_FEC_MATCH_RULE_TYPE.SOC_PPC_FRWRD_FEC_MATCH_RULE_TYPE_APP_TYPE:\n\r"
        "  Returns all FEC entries of application type (Routing UC/MC, Bridging).\n\r"
        "  Application type is specified by value - see SOC_PPC_FRWRD_FEC_MATCH_RULE.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "accessed", 
    { 
      { 
        SOC_PPC_FRWRD_FEC_MATCH_RULE_TYPE_ACCESSED, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FRWRD_FEC_MATCH_RULE_TYPE.SOC_PPC_FRWRD_FEC_MATCH_RULE_TYPE_ACCESSED:\n\r"
        "  Get all FEC entries that have been accessed lately, i.e. the sticky bit is up\n\r"
        "  from the last read.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "path_protected", 
    { 
      { 
        SOC_PPC_FRWRD_FEC_MATCH_RULE_TYPE_PATH_PROTECTED, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FRWRD_FEC_MATCH_RULE_TYPE.SOC_PPC_FRWRD_FEC_MATCH_RULE_TYPE_PATH_PROTECTED:\n\r"
        "  Get all path protected FEC entries. According to its value, may return all\n\r"
        "  FEC entries that use a specific OAM instance.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "facility_protected", 
    { 
      { 
        SOC_PPC_FRWRD_FEC_MATCH_RULE_TYPE_FACILITY_PROTECTED, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_FRWRD_FEC_MATCH_RULE_TYPE.SOC_PPC_FRWRD_FEC_MATCH_RULE_TYPE_FACILITY_PROTECTE\n\r"
        "  :\n\r"
        "  Get all facility protected FEC entries. According to its value, may return\n\r"
        "  all FEC entries that use a specific system port.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
/* 
 * Last element. Do not remove. 
 */ 
  { 
    VAL_END_OF_LIST 
  } 
} 
#endif 
; 

/********************************************************/        
/********************************************************/        
 
EXTERN CONST 
   PARAM_VAL_RULES 
     SOC_PPC_EG_FILTER_PVLAN_PORT_TYPE_rule[] 
#ifdef INIT 
   = 
{ 
  { 
    VAL_SYMBOL, 
    "promiscuous", 
    { 
      { 
        SOC_PPC_EG_FILTER_PVLAN_PORT_TYPE_PROMISCUOUS, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_EG_FILTER_PVLAN_PORT_TYPE.SOC_PPC_EG_FILTER_PVLAN_PORT_TYPE_PROMISCUOUS:\n\r"
        "  Port which is allowed to send and receive frames from any other port on the\n\r"
        "  VLAN. Usually connects to a router\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "isolated", 
    { 
      { 
        SOC_PPC_EG_FILTER_PVLAN_PORT_TYPE_ISOLATED, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_EG_FILTER_PVLAN_PORT_TYPE.SOC_PPC_EG_FILTER_PVLAN_PORT_TYPE_ISOLATED:\n\r"
        "  Port is only allowed to communicate with Promiscuous-ports - they are 'stub'.\n\r"
        "  This type of ports usually connects to hosts\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "community", 
    { 
      { 
        SOC_PPC_EG_FILTER_PVLAN_PORT_TYPE_COMMUNITY, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_EG_FILTER_PVLAN_PORT_TYPE.SOC_PPC_EG_FILTER_PVLAN_PORT_TYPE_COMMUNITY:\n\r"
        "  Community ports are allowed to talk to other ports in same community, sharing\n\r"
        "  the same group and to Promiscuous-ports.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
/* 
 * Last element. Do not remove. 
 */ 
  { 
    VAL_END_OF_LIST 
  } 
} 
#endif 
; 

/********************************************************/        
/********************************************************/        
 
EXTERN CONST 
   PARAM_VAL_RULES 

     SOC_PPC_EG_FILTER_PORT_ENABLE_rule[] 
#ifdef INIT 
   = 
{ 
  { 
    VAL_SYMBOL, 
    "none", 
    { 
      { 
        SOC_PPC_EG_FILTER_PORT_ENABLE_NONE, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_EG_FILTER_PORT_ENABLE.SOC_PPC_EG_FILTER_PORT_ENABLE_NONE:\n\r"
        "  Disable egress filtering.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "vsi_membership", 
    { 
      { 
        SOC_PPC_EG_FILTER_PORT_ENABLE_VSI_MEMBERSHIP, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_EG_FILTER_PORT_ENABLE.SOC_PPC_EG_FILTER_PORT_ENABLE_VSI_MEMBERSHIP:\n\r"
        "  Enable filtering according to VSI membership. Filter packets transmitted port\n\r"
        "  that is not member of the packet VSI.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "same_interface", 
    { 
      { 
        SOC_PPC_EG_FILTER_PORT_ENABLE_SAME_INTERFACE, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_EG_FILTER_PORT_ENABLE.SOC_PPC_EG_FILTER_PORT_ENABLE_SAME_INTERFACE:\n\r"
        "  Filter packets incoming interface equal to outgoing interface (Hair-Pin). In\n\r"
        "  order to perform this filtering over packet also the in-port has to enable\n\r"
        "  this filtering. See soc_ppd_port_info_set().\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "uc_unknow_da", 
    { 
      { 
        SOC_PPC_EG_FILTER_PORT_ENABLE_UC_UNKNOW_DA, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_EG_FILTER_PORT_ENABLE.SOC_PPC_EG_FILTER_PORT_ENABLE_UC_UNKNOW_DA:\n\r"
        "  Filter UC packets with unknown DA.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "mc_unknow_da", 
    { 
      { 
        SOC_PPC_EG_FILTER_PORT_ENABLE_MC_UNKNOW_DA, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_EG_FILTER_PORT_ENABLE.SOC_PPC_EG_FILTER_PORT_ENABLE_MC_UNKNOW_DA:\n\r"
        "  Filter MC packets with unknown DA.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "bc_unknow_da", 
    { 
      { 
        SOC_PPC_EG_FILTER_PORT_ENABLE_BC_UNKNOW_DA, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_EG_FILTER_PORT_ENABLE.SOC_PPC_EG_FILTER_PORT_ENABLE_BC_UNKNOW_DA:\n\r"
        "  Filter BC packets with unknown DA.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "mtu", 
    { 
      { 
        SOC_PPC_EG_FILTER_PORT_ENABLE_MTU, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_EG_FILTER_PORT_ENABLE.SOC_PPC_EG_FILTER_PORT_ENABLE_MTU:\n\r"
        "  Perform MTU check, and filter packets their size exceed the MTU limit.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "stp", 
    { 
      { 
        SOC_PPC_EG_FILTER_PORT_ENABLE_STP, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_EG_FILTER_PORT_ENABLE.SOC_PPC_EG_FILTER_PORT_ENABLE_STP:\n\r"
        "  Filter packets with STP state discard. T20E only.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "pep_acceptable_frm_types", 
    { 
      { 
        SOC_PPC_EG_FILTER_PORT_ENABLE_PEP_ACCEPTABLE_FRM_TYPES, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_EG_FILTER_PORT_ENABLE.SOC_PPC_EG_FILTER_PORT_ENABLE_PEP_ACCEPTABLE_FRM_TYPES:\n\r"
        "  Perform PEP acceptable frame types filtering and filter unaccepted frames.\n\r"
        "  T20E only.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "split_horizon", 
    { 
      { 
        SOC_PPC_EG_FILTER_PORT_ENABLE_SPLIT_HORIZON, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_EG_FILTER_PORT_ENABLE.SOC_PPC_EG_FILTER_PORT_ENABLE_SPLIT_HORIZON:\n\r"
        "  Perform Split Horizon Filtering and Filter packets from Horizon to Horizon.\n\r"
        "  T20E only.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "all", 
    { 
      { 
        SOC_PPC_EG_FILTER_PORT_ENABLE_ALL, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_EG_FILTER_PORT_ENABLE.SOC_PPC_EG_FILTER_PORT_ENABLE_ALL:\n\r"
        "  Enable all filters in the egress.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
/* 
 * Last element. Do not remove. 
 */ 
  { 
    VAL_END_OF_LIST 
  } 
} 
#endif 
; 

/********************************************************/        
/********************************************************/        
 
EXTERN CONST 
   PARAM_VAL_RULES 
     SOC_PPC_EG_ENCAP_EEP_TYPE_rule[] 
#ifdef INIT 
   = 
{ 
  { 
    VAL_SYMBOL, 
    "lif_eep", 
    { 
      { 
        SOC_PPC_EG_ENCAP_EEP_TYPE_LIF_EEP, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_EG_ENCAP_EEP_TYPE.SOC_PPC_EG_ENCAP_EEP_TYPE_LIF_EEP:\n\r"
        "  The EEP points to LIF Editing Table.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "tunnel_eep", 
    { 
      { 
        SOC_PPC_EG_ENCAP_EEP_TYPE_TUNNEL_EEP, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_EG_ENCAP_EEP_TYPE.SOC_PPC_EG_ENCAP_EEP_TYPE_TUNNEL_EEP:\n\r"
        "  The EEP points to Tunnels Editing Table.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "ll", 
    { 
      { 
        SOC_PPC_EG_ENCAP_EEP_TYPE_LL, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_EG_ENCAP_EEP_TYPE.SOC_PPC_EG_ENCAP_EEP_TYPE_LL:\n\r"
        "  The EEP points to LL encapsulation Table.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "vsi", 
    { 
      { 
        SOC_PPC_EG_ENCAP_EEP_TYPE_VSI, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_EG_ENCAP_EEP_TYPE.SOC_PPC_EG_ENCAP_EEP_TYPE_VSI:\n\r"
        "  The EEP points to VSI (out-RIF). \n\r"
        " valid only for ARAD. \n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
/* 
 * Last element. Do not remove. 
 */ 
  { 
    VAL_END_OF_LIST 
  } 
} 
#endif 
; 

/********************************************************/        
/********************************************************/        
 
EXTERN CONST 
   PARAM_VAL_RULES 
     SOC_PPC_EG_ENCAP_ENTRY_TYPE_rule[] 
#ifdef INIT 
   = 
{ 
  { 
    VAL_SYMBOL, 
    "vsi", 
    { 
      { 
        SOC_PPC_EG_ENCAP_ENTRY_TYPE_VSI, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_EG_ENCAP_ENTRY_TYPE.SOC_PPC_EG_ENCAP_ENTRY_TYPE_VSI:\n\r"
        "  The egress encapsulation entry includes VSI\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "ac", 
    { 
      { 
        SOC_PPC_EG_ENCAP_ENTRY_TYPE_AC, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_EG_ENCAP_ENTRY_TYPE.SOC_PPC_EG_ENCAP_ENTRY_TYPE_AC:\n\r"
        "  The egress encapsulation entry includes AC\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "swap_cmnd", 
    { 
      { 
        SOC_PPC_EG_ENCAP_ENTRY_TYPE_SWAP_CMND, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_EG_ENCAP_ENTRY_TYPE.SOC_PPC_EG_ENCAP_ENTRY_TYPE_SWAP_CMND:\n\r"
        "  The egress encapsulation entry includes SWAP command\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "pwe", 
    { 
      { 
        SOC_PPC_EG_ENCAP_ENTRY_TYPE_PWE, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_EG_ENCAP_ENTRY_TYPE.SOC_PPC_EG_ENCAP_ENTRY_TYPE_PWE:\n\r"
        "  The egress encapsulation entry includes PWE (VC encapsulation)\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "pop_cmnd", 
    { 
      { 
        SOC_PPC_EG_ENCAP_ENTRY_TYPE_POP_CMND, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_EG_ENCAP_ENTRY_TYPE.SOC_PPC_EG_ENCAP_ENTRY_TYPE_POP_CMND:\n\r"
        "  The egress encapsulation entry includes POP command\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "mpls_ecnap", 
    { 
      { 
        SOC_PPC_EG_ENCAP_ENTRY_TYPE_MPLS_ENCAP, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_EG_ENCAP_ENTRY_TYPE.SOC_PPC_EG_ENCAP_ENTRY_TYPE_MPLS_ENCAP:\n\r"
        "  The egress encapsulation entry includes MPLS encapsulations (tunneling)\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "ipv4_encap", 
    { 
      { 
        SOC_PPC_EG_ENCAP_ENTRY_TYPE_IPV4_ENCAP, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_EG_ENCAP_ENTRY_TYPE.SOC_PPC_EG_ENCAP_ENTRY_TYPE_IPV4_ENCAP:\n\r"
        "  The egress encapsulation entry includes IPv4 encapsulations (tunneling)\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "ll_encap", 
    { 
      { 
        SOC_PPC_EG_ENCAP_ENTRY_TYPE_LL_ENCAP, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_EG_ENCAP_ENTRY_TYPE.SOC_PPC_EG_ENCAP_ENTRY_TYPE_LL_ENCAP:\n\r"
        "  The egress encapsulation entry includes LL encapsulation\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
/* 
 * Last element. Do not remove. 
 */ 
  { 
    VAL_END_OF_LIST 
  } 
} 
#endif 
; 
/********************************************************/        
/********************************************************/        
 
EXTERN CONST 
   PARAM_VAL_RULES 
     SOC_PPC_EG_VLAN_EDIT_TAG_VID_SRC_rule[] 
#ifdef INIT 
   = 
{ 
  { 
    VAL_SYMBOL, 
    "empty", 
    { 
      { 
        SOC_PPC_EG_VLAN_EDIT_TAG_VID_SRC_EMPTY, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_EG_VLAN_EDIT_TAG_VID_SRC.SOC_PPC_EG_VLAN_EDIT_TAG_VID_SRC_EMPTY:\n\r"
        "  Indicates that tag will not be generated. The outer tag cannot be empty. To\n\r"
        "  transmit a packet with no tags, see\n\r"
        "  soc_ppd_eg_vlan_edit_port_vlan_transmit_outer_tag_set().\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "outer_tag", 
    { 
      { 
        SOC_PPC_EG_VLAN_EDIT_TAG_VID_SRC_OUTER_TAG, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_EG_VLAN_EDIT_TAG_VID_SRC.SOC_PPC_EG_VLAN_EDIT_TAG_VID_SRC_OUTER_TAG:\n\r"
        "  The VID value is taken from the outer tag of the packet (considering the\n\r"
        "  ingress editing effect). \n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "inner_tag", 
    { 
      { 
        SOC_PPC_EG_VLAN_EDIT_TAG_VID_SRC_INNER_TAG, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_EG_VLAN_EDIT_TAG_VID_SRC.SOC_PPC_EG_VLAN_EDIT_TAG_VID_SRC_INNER_TAG:\n\r"
        "  The VID value is taken from the inner tag of the packet (considering the\n\r"
        "  ingress editing effect)\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "edit_info_0", 
    { 
      { 
        SOC_PPC_EG_VLAN_EDIT_TAG_VID_SRC_EDIT_INFO_0, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_EG_VLAN_EDIT_TAG_VID_SRC.SOC_PPC_EG_VLAN_EDIT_TAG_VID_SRC_EDIT_INFO_1:\n\r"
        "  The VID value is taken from the edit information configured (vlan_tags[0]).\n\r"
        "  See soc_ppd_eg_ac_info_set() In T20E: This can be the source only of\n\r"
        "  the outer tag\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "edit_info_1", 
    { 
      { 
        SOC_PPC_EG_VLAN_EDIT_TAG_VID_SRC_EDIT_INFO_1, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_EG_VLAN_EDIT_TAG_VID_SRC.SOC_PPC_EG_VLAN_EDIT_TAG_VID_SRC_EDIT_INFO_2:\n\r"
        "  The VID value is taken from the edit information configured (vlan_tags[1]).\n\r"
        "  See soc_ppd_eg_ac_info_set() In T20E: This can be the source only of\n\r"
        "  the inner tag\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "encap_info", 
    { 
      { 
        SOC_PPC_EG_VLAN_EDIT_TAG_VID_SRC_ENCAP_INFO, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_EG_VLAN_EDIT_TAG_VID_SRC.SOC_PPC_EG_VLAN_EDIT_TAG_VID_SRC_ENCAP_INFO:\n\r"
        "  Petra-B only.The VID value is taken from the configured link-layer\n\r"
        "  encapsulation information. This VID may be used only if it valid. See\n\r"
        "  soc_ppd_eg_encap_ll_entry_add().\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "cep_edit_info", 
    { 
      { 
        SOC_PPC_EG_VLAN_EDIT_TAG_VID_SRC_CEP_EDIT_INFO, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_EG_VLAN_EDIT_TAG_VID_SRC.SOC_PPC_EG_VLAN_EDIT_TAG_VID_SRC_CEP_EDIT_INFO:\n\r"
        "  T20E only. The VID value is taken from the editing information configured by\n\r"
        "  soc_ppd_eg_ac_port_cvid_info_set () This is relevant only for editing packets\n\r"
        "  transmitted out from CEP port. can be use only the source of outer Tag\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "pep_edit", 
    { 
      { 
        SOC_PPC_EG_VLAN_EDIT_TAG_VID_SRC_PEP_EDIT, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_EG_VLAN_EDIT_TAG_VID_SRC.SOC_PPC_EG_VLAN_EDIT_TAG_VID_SRC_PEP_EDIT:\n\r"
        "  T20E only. This is relevant only for editing packets transmitted out from CEP\n\r"
        "  port. In this case, the CVID value is set according to the PEP editing, which\n\r"
        "  may be: 1. The C-VID appears in the outer-tag, if exists.2. The C-VID appears\n\r"
        "  in the inner-tag, if exists.3. The PEP-PVID, if none of the previous. \n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  },
  { 
    VAL_SYMBOL, 
    "vsi", 
    { 
      {
        SOC_PPC_EG_VLAN_EDIT_TAG_VID_SRC_VSI, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_EG_VLAN_EDIT_TAG_VID_SRC.SOC_PPC_EG_VLAN_EDIT_TAG_VID_SRC_VSI:\n\r"
        "  ARAD only. Arad only. The VID value is equal to VSI 12 ls bits. \n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  },
/* 
 * Last element. Do not remove. 
 */ 
  { 
    VAL_END_OF_LIST 
  } 
} 
#endif 
; 

/********************************************************/        
/********************************************************/        
 
EXTERN CONST 
   PARAM_VAL_RULES 
     SOC_PPC_EG_VLAN_EDIT_TAG_PCP_DEI_SRC_rule[] 
#ifdef INIT 
   = 
{ 
  { 
    VAL_SYMBOL, 
    "none", 
    { 
      { 
        SOC_PPC_EG_VLAN_EDIT_TAG_PCP_DEI_NONE, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_EG_VLAN_EDIT_TAG_PCP_DEI_SRC.SOC_PPC_EG_VLAN_EDIT_TAG_PCP_DEI_NONE:\n\r"
        "  Use when no VLAN tag is generated. in T20E: use also for inner tag of CEP\n\r"
        "  port (which should not be exist).\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "map", 
    { 
      { 
        SOC_PPC_EG_VLAN_EDIT_TAG_PCP_DEI_SRC_MAP, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_EG_VLAN_EDIT_TAG_PCP_DEI_SRC.SOC_PPC_EG_VLAN_EDIT_TAG_PCP_DEI_SRC_MAP:\n\r"
        "  The PCP (UP) and DEI values are set according to mapping. See PCP Mapping\n\r"
        "  Setting (soc_ppd_eg_vlan_edit_pcp_map_stag_set(),\n\r"
        "  soc_ppd_eg_vlan_edit_pcp_map_ctag_set() and\n\r"
        "  soc_ppd_eg_vlan_edit_pcp_map_untagged_set())\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "outer_tag", 
    { 
      { 
        SOC_PPC_EG_VLAN_EDIT_TAG_PCP_DEI_SRC_OUTER_TAG, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_EG_VLAN_EDIT_TAG_PCP_DEI_SRC.SOC_PPC_EG_VLAN_EDIT_TAG_PCP_DEI_SRC_OUTER_TAG:\n\r"
        "  The PCP (UP) and DEI values are taken from the outer tag.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "inner_tag", 
    { 
      { 
        SOC_PPC_EG_VLAN_EDIT_TAG_PCP_DEI_SRC_INNER_TAG, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_EG_VLAN_EDIT_TAG_PCP_DEI_SRC.SOC_PPC_EG_VLAN_EDIT_TAG_PCP_DEI_SRC_INNER_TAG:\n\r"
        "  The PCP (UP) and DEI values are taken from the inner tag.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "edit_info_0", 
    { 
      { 
        SOC_PPC_EG_VLAN_EDIT_TAG_PCP_DEI_SRC_EDIT_INFO_0, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_EG_VLAN_EDIT_TAG_PCP_DEI_SRC.SOC_PPC_EG_VLAN_EDIT_TAG_PCP_DEI_SRC_EDIT_INFO_1:\n\r"
        "  T20E only.The PCP (UP) and DEI values are taken from the editing information\n\r"
        "  configured by soc_ppd_eg_ac_info_set() (vlan_tags[0]).\n\r"
        "  T20E: this refers to outer Tag-PCP-DEI i.e. this can be the source of the\n\r"
        "  PCP-DEI of outer-tag only.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "edit_info_1", 
    { 
      { 
        SOC_PPC_EG_VLAN_EDIT_TAG_PCP_DEI_SRC_EDIT_INFO_1, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_EG_VLAN_EDIT_TAG_PCP_DEI_SRC.SOC_PPC_EG_VLAN_EDIT_TAG_PCP_DEI_SRC_EDIT_INFO_2:\n\r"
        "  T20E only.The PCP (UP) and DEI values are taken from the editing information\n\r"
        "  configured by soc_ppd_eg_ac_info_set() (vlan_tags[1]).\n\r"
        "  T20E: this refers to inner Tag-PCP-DEI i.e. this can be the source of the\n\r"
        "  PCP-DEI of inner-tag only.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "cep_edit_info", 
    { 
      { 
        SOC_PPC_EG_VLAN_EDIT_TAG_PCP_DEI_SRC_CEP_EDIT_INFO, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_EG_VLAN_EDIT_TAG_PCP_DEI_SRC.SOC_PPC_EG_VLAN_EDIT_TAG_PCP_DEI_SRC_CEP_EDIT_IN\n\r"
        "  O:\n\r"
        "  T20E only. The PCP (UP) and DEI values are taken from the editing information\n\r"
        "  configured by soc_ppd_eg_ac_port_cvid_info_set () This is relevant only for\n\r"
        "  editing packets transmitted out from CEP port. can be use only the source of\n\r"
        "  outer Tag\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "pep_edit", 
    { 
      { 
        SOC_PPC_EG_VLAN_EDIT_TAG_PCP_DEI_SRC_PEP_EDIT, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_EG_VLAN_EDIT_TAG_PCP_DEI_SRC.SOC_PPC_EG_VLAN_EDIT_TAG_PCP_DEI_SRC_PEP_EDIT:\n\r"
        "  T20E only.This is relevant only for editing packets transmitted out from the\n\r"
        "  CEP port. In this case, the PCP/UP value will be set according to the PEP\n\r"
        "  editing, which may be: 1. The UP appears in the outer-tag, if exist.2. The UP\n\r"
        "  appears in the inner-tag, if exist.3. The PEP-UP, if none of the previous.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
/* 
 * Last element. Do not remove. 
 */ 
  { 
    VAL_END_OF_LIST 
  } 
} 
#endif 
; 

/********************************************************/        
/********************************************************/        
 
EXTERN CONST 
   PARAM_VAL_RULES 
     SOC_PPC_EG_VLAN_EDIT_TAG_PCP_DEI_MAP_KEY_rule[] 
#ifdef INIT 
   = 
{ 
  { 
    VAL_SYMBOL, 
    "tc_dp", 
    { 
      { 
        SOC_PPC_EG_VLAN_EDIT_TAG_PCP_DEI_MAP_KEY_TC_DP, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_EG_VLAN_EDIT_TAG_PCP_DEI_MAP_KEY.SOC_PPC_EG_VLAN_EDIT_TAG_PCP_DEI_MAP_KEY_TC_DP:\n\r"
        "  When the Edit Command is set to determine the PCP-DEI value according to\n\r"
        "  mapping, then the key used for mapping is TC and DP as calculated.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "pcp", 
    { 
      { 
        SOC_PPC_EG_VLAN_EDIT_TAG_PCP_DEI_MAP_KEY_PCP, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_EG_VLAN_EDIT_TAG_PCP_DEI_MAP_KEY.SOC_PPC_EG_VLAN_EDIT_TAG_PCP_DEI_MAP_KEY_PCP:\n\r"
        "  When the Edit Command is set to determine the PCP-DEI value according to\n\r"
        "  mapping, then the key used for mapping is packets attributes, which depends\n\r"
        "  on Tags exist on the packet:1. Packet's PCP-DEI, if packet has S-tag.2.\n\r"
        "  Packets UP if packet has C-tag. 3. TC and DP if there is no C/S Tags on the\n\r"
        "  packet\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    }
  },
  { 
    VAL_SYMBOL, 
    "dscp_exp", 
    { 
      { 
        SOC_PPC_EG_VLAN_EDIT_TAG_PCP_DEI_MAP_KEY_DSCP_EXP, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_EG_VLAN_EDIT_TAG_PCP_DEI_MAP_KEY.SOC_PPC_EG_VLAN_EDIT_TAG_PCP_DEI_MAP_KEY_DSCP_EXP:\n\r"
        "  When the Edit Command is set to determine the PCP-DEI value according to\n\r"
        "  mapping, then the key used for mapping is DSCP and EXP as calculated.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
/* 
 * Last element. Do not remove. 
 */ 
  { 
    VAL_END_OF_LIST 
  } 
} 
#endif 
; 

/********************************************************/        
/********************************************************/        

EXTERN CONST 
PARAM_VAL_RULES 
SOC_PPC_PORT_DIRECTION_rule[] 
#ifdef INIT 
= 
{ 
  { 
    VAL_SYMBOL, 
      "incoming", 
    { 
      { 
        SOC_PPC_PORT_DIRECTION_INCOMING, 
          /* 
          * Casting added here just to keep the compiler silent. 
          */ 
          (long)"" 
          "  SOC_PPC_PORT_DIRECTION.SOC_PPC_PORT_DIRECTION_INCOMING:\n\r"
          "  Port direction - incoming (IFP).\n\r"
          "", 
          /* 
          * Pointer to a function to call after symbolic value 
          * has been accepted. Casting should be 'VAL_PROC_PTR'. 
          * Casting to 'long' added here just to keep the 
          * compiler silent. 
          */ 
          (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
      "outgoing", 
    { 
      { 
        SOC_PPC_PORT_DIRECTION_OUTGOING, 
          /* 
          * Casting added here just to keep the compiler silent. 
          */ 
          (long)"" 
          "  SOC_PPC_PORT_DIRECTION.SOC_PPC_PORT_DIRECTION_OUTGOING:\n\r"
          "  Port direction - outgoing (OFP).\n\r"
          "", 
          /* 
          * Pointer to a function to call after symbolic value 
          * has been accepted. Casting should be 'VAL_PROC_PTR'. 
          * Casting to 'long' added here just to keep the 
          * compiler silent. 
          */ 
          (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
      "both", 
    { 
      { 
        SOC_PPC_PORT_DIRECTION_BOTH, 
          /* 
          * Casting added here just to keep the compiler silent. 
          */ 
          (long)"" 
          "  SOC_PPC_PORT_DIRECTION.SOC_PPC_PORT_DIRECTION_BOTH:\n\r"
          "  Port direction - both incoming (IFP) and outgoing (OFP).\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
/* 
 * Last element. Do not remove. 
 */ 
  { 
    VAL_END_OF_LIST 
  } 
} 
#endif 
; 

/********************************************************/        
/********************************************************/        
 
EXTERN CONST 
   PARAM_VAL_RULES 
     SOC_PPC_LAG_HASH_FRST_HDR_rule[] 
#ifdef INIT 
   = 
{ 
  { 
    VAL_SYMBOL, 
    "farwarding", 
    { 
      { 
        SOC_PPC_LAG_HASH_FRST_HDR_FARWARDING, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_LAG_HASH_FRST_HDR.SOC_PPC_LAG_HASH_FRST_HDR_FARWARDING:\n\r"
        "  The first header to be taken for the LAG hashing key, is the forwarding\n\r"
        "  header.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "last_terminated", 
    { 
      { 
        SOC_PPC_LAG_HASH_FRST_HDR_LAST_TERMINATED, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_LAG_HASH_FRST_HDR.SOC_PPC_LAG_HASH_FRST_HDR_LAST_TERMINATED:\n\r"
        "  The first header to be taken for the LAG hashing key, is the last terminated\n\r"
        "  header. I.E: The header below the forwarding header.'nof_headers =1': Only\n\r"
        "  the header below the forwarding header is taken'nof_headers =2': The\n\r"
        "  forwarding header and the header below are taken'nof_headers =3': The\n\r"
        "  forwarding header; the header below it; and the header above it are taken\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
/* 
 * Last element. Do not remove. 
 */ 
  { 
    VAL_END_OF_LIST 
  } 
} 
#endif 
; 

/********************************************************/        
/********************************************************/        
 
EXTERN CONST 
   PARAM_VAL_RULES 
     SOC_PPC_LAG_LB_TYPE_rule[] 
#ifdef INIT 
   = 
{ 
  { 
    VAL_SYMBOL, 
    "hash", 
    { 
      { 
        SOC_PPC_LAG_LB_TYPE_HASH, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_LAG_LB_TYPE.SOC_PPC_LAG_LB_TYPE_HASH:\n\r"
        "  The loading balance between the members of the LAG performed by hashing over\n\r"
        "  the packet fields.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "round_robin", 
    { 
      { 
        SOC_PPC_LAG_LB_TYPE_ROUND_ROBIN, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_LAG_LB_TYPE.SOC_PPC_LAG_LB_TYPE_ROUND_ROBIN:\n\r"
        "  The loading balance between the members of the LAG performed by round-robin\n\r"
        "  between the memebers \n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
    /* 
    * Last element. Do not remove. 
    */ 
  { 
    VAL_END_OF_LIST 
  } 
} 
#endif 
; 

/********************************************************/     
/********************************************************/        
 
EXTERN CONST 
   PARAM_VAL_RULES 
     SOC_PPC_TRAP_SNOOP_ACTION_SIZE_rule[] 
#ifdef INIT 
   = 
{ 
  { 
    VAL_SYMBOL, 
    "64b", 
    { 
      { 
        SOC_PPC_TRAP_SNOOP_ACTION_SIZE_64B, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_TRAP_SNOOP_ACTION_SIZE.SOC_PPC_TRAP_SNOOP_ACTION_SIZE_64B:\n\r"
        "  Snoop 64 bytes from the packet.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "128b", 
    { 
      { 
        SOC_PPC_TRAP_SNOOP_ACTION_SIZE_128B, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_TRAP_SNOOP_ACTION_SIZE.SOC_PPC_TRAP_SNOOP_ACTION_SIZE_128B:\n\r"
        "  Snoop 128 bytes from the packet.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "full_packet", 
    { 
      { 
        SOC_PPC_TRAP_SNOOP_ACTION_SIZE_FULL_PACKET, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_TRAP_SNOOP_ACTION_SIZE.SOC_PPC_TRAP_SNOOP_ACTION_SIZE_FULL_PACKET:\n\r"
        "  Snoop the full packet.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
/* 
 * Last element. Do not remove. 
 */ 
  { 
    VAL_END_OF_LIST 
  } 
} 
#endif 
; 

/********************************************************/        
/********************************************************/        
 
EXTERN CONST 
   PARAM_VAL_RULES 
     SOC_PPC_TRAP_ACTION_PROFILE_OVERWRITE_rule[] 
#ifdef INIT 
   = 
{ 
  { 
    VAL_SYMBOL, 
    "none", 
    { 
      { 
        SOC_PPC_TRAP_ACTION_PROFILE_OVERWRITE_NONE, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_TRAP_ACTION_PROFILE_OVERWRITE.SOC_PPC_TRAP_ACTION_PROFILE_OVERWRITE_NONE:\n\r"
        "  None of the optional fields of the forwarding action is overwritten.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "dest", 
    { 
      { 
        SOC_PPC_TRAP_ACTION_PROFILE_OVERWRITE_DEST, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_TRAP_ACTION_PROFILE_OVERWRITE.SOC_PPC_TRAP_ACTION_PROFILE_OVERWRITE_DEST:\n\r"
        "  Overwrite the packet destination.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "tc", 
    { 
      { 
        SOC_PPC_TRAP_ACTION_PROFILE_OVERWRITE_TC, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_TRAP_ACTION_PROFILE_OVERWRITE.SOC_PPC_TRAP_ACTION_PROFILE_OVERWRITE_TC:\n\r"
        "  Overwrite the packet TC.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "dp", 
    { 
      { 
        SOC_PPC_TRAP_ACTION_PROFILE_OVERWRITE_DP, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_TRAP_ACTION_PROFILE_OVERWRITE.SOC_PPC_TRAP_ACTION_PROFILE_OVERWRITE_DP:\n\r"
        "  Overwrite the packet DP\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "policer", 
    { 
      { 
        SOC_PPC_TRAP_ACTION_PROFILE_OVERWRITE_POLICER, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_TRAP_ACTION_PROFILE_OVERWRITE.SOC_PPC_TRAP_ACTION_PROFILE_OVERWRITE_POLICER:\n\r"
        "  Overwrite the policer associated with the packet\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "frwrd_offset", 
    { 
      { 
        SOC_PPC_TRAP_ACTION_PROFILE_OVERWRITE_FRWRD_OFFSET, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_TRAP_ACTION_PROFILE_OVERWRITE.SOC_PPC_TRAP_ACTION_PROFILE_OVERWRITE_FRWRD_OFF\n\r"
        "  ET:\n\r"
        "  Overwrite the packet forwarding offset. Relevant only for forwarding action.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "all", 
    { 
      { 
        SOC_PPC_TRAP_ACTION_PROFILE_OVERWRITE_ALL, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_TRAP_ACTION_PROFILE_OVERWRITE.SOC_PPC_TRAP_ACTION_PROFILE_OVERWRITE_ALL:\n\r"
        "  All of the optional fields of the forwarding action are overwritten.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
/* 
 * Last element. Do not remove. 
 */ 
  { 
    VAL_END_OF_LIST 
  } 
} 
#endif 
; 

/********************************************************/        
/********************************************************/        
 
EXTERN CONST 
   PARAM_VAL_RULES 
     SOC_PPC_EG_ENCAP_ACCESS_PHASE_rule[] 
#ifdef INIT 
   = 
{ 
  { 
    VAL_SYMBOL, 
    "phase_1", 
    { 
      { 
        SOC_PPC_EG_ENCAP_ACCESS_PHASE_ONE, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_EG_ENCAP_ACCESS_PHASE_ONE:\n\r"
        "  access phase of type PWE.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "phase_2", 
    { 
      { 
        SOC_PPC_EG_ENCAP_ACCESS_PHASE_TWO, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
         "  SOC_PPC_EG_ENCAP_ACCESS_PHASE_TWO:\n\r"
         "  access phase: MPLS tunnel, IP tunnel, I-SID, Out-RIF, TRILL.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "phase_3", 
    { 
      { 
        SOC_PPC_EG_ENCAP_ACCESS_PHASE_THREE, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
         "  SOC_PPC_EG_ENCAP_ACCESS_PHASE_THREE:\n\r"
         "  access phase: link layer. \n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "phase_4", 
    { 
      { 
        SOC_PPC_EG_ENCAP_ACCESS_PHASE_FOUR, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_EG_ENCAP_ACCESS_PHASE_FOUR:\n\r"
        "  access phase: AC. \n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
/* 
 * Last element. Do not remove. 
 */ 
  { 
    VAL_END_OF_LIST 
  } 
} 
#endif 
; 

/********************************************************/        
/********************************************************/        
 
EXTERN CONST 
   PARAM_VAL_RULES 
     SOC_PPC_EG_ENCAP_ENCAPSULATION_MODE_rule[] 
#ifdef INIT 
   = 
{ 
  { 
    VAL_SYMBOL, 
    "none", 
    { 
      { 
        SOC_PPC_EG_ENCAP_ENCAPSULATION_MODE_NONE, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_EG_ENCAP_ENCAPSULATION_MODE_NONE:\n\r"
        "   No additional encapsulation.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "ether_ip", 
    { 
      { 
        SOC_PPC_EG_ENCAP_ENCAPSULATION_MODE_ETHER_IP, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
         "  SOC_PPC_EG_ENCAP_ENCAPSULATION_MODE_ETHER_IP:\n\r"
         "  Ether IP encapsulation.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "basic_gre", 
    { 
      { 
        SOC_PPC_EG_ENCAP_ENCAPSULATION_MODE_BASIC_GRE, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
         "  SOC_PPC_EG_ENCAP_ENCAPSULATION_MODE_BASIC_GRE:\n\r"
         "  Basic GRE (4B) encapsulation. \n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "enhance_gre", 
    { 
      { 
        SOC_PPC_EG_ENCAP_ENCAPSULATION_MODE_ENHANCE_GRE, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_EG_ENCAP_ENCAPSULATION_MODE_ENHANCE_GRE:\n\r"
        "  Inhance GRE (8B) encapsulation. \n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
/* 
 * Last element. Do not remove. 
 */ 
  { 
    VAL_END_OF_LIST 
  } 
} 
#endif 
; 

/********************************************************/        
/********************************************************/        
 
EXTERN CONST 
   PARAM_VAL_RULES 
     SOC_PPC_TRAP_MACT_EVENT_TYPE_rule[] 
#ifdef INIT 
   = 
{ 
  { 
    VAL_SYMBOL, 
    "none", 
    { 
      { 
        SOC_PPC_TRAP_MACT_EVENT_TYPE_NONE, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_TRAP_MACT_EVENT_TYPE.SOC_PPC_TRAP_MACT_EVENT_TYPE_NONE:\n\r"
        "  Entry has been aged out.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  },  
  { 
    VAL_SYMBOL, 
    "aged_out", 
    { 
      { 
        SOC_PPC_TRAP_MACT_EVENT_TYPE_AGED_OUT, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_TRAP_MACT_EVENT_TYPE.SOC_PPC_TRAP_MACT_EVENT_TYPE_AGED_OUT:\n\r"
        "  Entry has been aged out.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "learn", 
    { 
      { 
        SOC_PPC_TRAP_MACT_EVENT_TYPE_LEARN, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_TRAP_MACT_EVENT_TYPE.SOC_PPC_TRAP_MACT_EVENT_TYPE_LEARN:\n\r"
        "  Entry has been learned.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "transplant", 
    { 
      { 
        SOC_PPC_TRAP_MACT_EVENT_TYPE_TRANSPLANT, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_TRAP_MACT_EVENT_TYPE.SOC_PPC_TRAP_MACT_EVENT_TYPE_TRANSPLANT:\n\r"
        "  Entry has been transplanted, i.e. key already exit in MACT but learnt with\n\r"
        "  new value.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "refresh", 
    { 
      { 
        SOC_PPC_TRAP_MACT_EVENT_TYPE_REFRESH, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_TRAP_MACT_EVENT_TYPE.SOC_PPC_TRAP_MACT_EVENT_TYPE_REFRESH:\n\r"
        "  Entry has been refreshed, i.e. key and value already exit in MACT but age\n\r"
        "  status has been updated.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "ack", 
    { 
      { 
        SOC_PPC_TRAP_MACT_EVENT_TYPE_ACK, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_TRAP_MACT_EVENT_TYPE.SOC_PPC_TRAP_MACT_EVENT_TYPE_ACK:\n\r"
        "  Acknowledgment\n\r"
        "  event upon CPU request (insert/learn/delete)\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "retrieve", 
    { 
      { 
        SOC_PPC_TRAP_MACT_EVENT_TYPE_RETRIEVE, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_TRAP_MACT_EVENT_TYPE.SOC_PPC_TRAP_MACT_EVENT_TYPE_RETRIEVE:\n\r"
        "  MACT entry returned upon CPU request using soc_ppd_frwrd_mact_traverse() with\n\r"
        "  action type RETRIEVE.T20E only.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "limit_exceed", 
    { 
      { 
        SOC_PPC_TRAP_MACT_EVENT_TYPE_LIMIT_EXCEED, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_TRAP_MACT_EVENT_TYPE.SOC_PPC_TRAP_MACT_EVENT_TYPE_LIMIT_EXCEED:\n\r"
        "  Insertion to MACT failed due to exceeding the limit assigned to the\n\r"
        "  particular VSI.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "cpu_req_fail", 
    { 
      { 
        SOC_PPC_TRAP_MACT_EVENT_TYPE_CPU_REQ_FAIL, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_TRAP_MACT_EVENT_TYPE.SOC_PPC_TRAP_MACT_EVENT_TYPE_CPU_REQ_FAIL:\n\r"
        "  CPU request to the MACT has failed.T20E only.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
/* 
 * Last element. Do not remove. 
 */ 
  { 
    VAL_END_OF_LIST 
  } 
} 
#endif 
; 

/********************************************************/        
/********************************************************/        

EXTERN CONST 
PARAM_VAL_RULES 
SOC_PPC_TRAP_EG_TYPE_rule[] 
#ifdef INIT 
= 
{ 
  { 
    VAL_SYMBOL, 
      "no_vsi_translation", 
    { 
      { 
        SOC_PPC_TRAP_EG_TYPE_NO_VSI_TRANSLATION, 
          /* 
          * Casting added here just to keep the compiler silent. 
          */ 
          (long)"" 
          "  SOC_PPC_TRAP_EG_TYPE.SOC_PPC_TRAP_EG_TYPE_NO_VSI_TRANSLATION:\n\r"
          "  Mapping system VSI to Local VSI is not valid\n\r"
          "", 
          /* 
          * Pointer to a function to call after symbolic value 
          * has been accepted. Casting should be 'VAL_PROC_PTR'. 
          * Casting to 'long' added here just to keep the 
          * compiler silent. 
          */ 
          (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
      "vsi_membership", 
    { 
      { 
        SOC_PPC_TRAP_EG_TYPE_VSI_MEMBERSHIP, 
          /* 
          * Casting added here just to keep the compiler silent. 
          */ 
          (long)"" 
          "  SOC_PPC_TRAP_EG_TYPE.SOC_PPC_TRAP_EG_TYPE_VSI_MEMBERSHIP:\n\r"
          "  VSI membership filter (analogic to vlan membership) i.e. packet transmitted\n\r"
          "  out from port that is not member in the packet's VSI.\n\r"
          "", 
          /* 
          * Pointer to a function to call after symbolic value 
          * has been accepted. Casting should be 'VAL_PROC_PTR'. 
          * Casting to 'long' added here just to keep the 
          * compiler silent. 
          */ 
          (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
      "acc_frm", 
    { 
      { 
        SOC_PPC_TRAP_EG_TYPE_ACC_FRM, 
          /* 
          * Casting added here just to keep the compiler silent. 
          */ 
          (long)"" 
          "  SOC_PPC_TRAP_EG_TYPE.SOC_PPC_TRAP_EG_TYPE_ACC_FRM:\n\r"
          "  Packet frame type is unacceptable see\n\r"
          "  soc_ppd_eg_filter_port_acceptable_frames_set()\n\r"
          "", 
          /* 
          * Pointer to a function to call after symbolic value 
          * has been accepted. Casting should be 'VAL_PROC_PTR'. 
          * Casting to 'long' added here just to keep the 
          * compiler silent. 
          */ 
          (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
      "hair_pin", 
    { 
      { 
        SOC_PPC_TRAP_EG_TYPE_HAIR_PIN, 
          /* 
          * Casting added here just to keep the compiler silent. 
          */ 
          (long)"" 
          "  SOC_PPC_TRAP_EG_TYPE.SOC_PPC_TRAP_EG_TYPE_HAIR_PIN:\n\r"
          "  Hair-pin filtering, packet is filtered if Source interface equals destination\n\r"
          "  interface.\n\r"
          "", 
          /* 
          * Pointer to a function to call after symbolic value 
          * has been accepted. Casting should be 'VAL_PROC_PTR'. 
          * Casting to 'long' added here just to keep the 
          * compiler silent. 
          */ 
          (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
      "unknown_da", 
    { 
      { 
        SOC_PPC_TRAP_EG_TYPE_UNKNOWN_DA, 
          /* 
          * Casting added here just to keep the compiler silent. 
          */ 
          (long)"" 
          "  SOC_PPC_TRAP_EG_TYPE.SOC_PPC_TRAP_EG_TYPE_UNKNOWN_DA:\n\r"
          "  (Ethernet Filter) for bridged packet when packet's DA not found in the MACT.\n\r"
          "", 
          /* 
          * Pointer to a function to call after symbolic value 
          * has been accepted. Casting should be 'VAL_PROC_PTR'. 
          * Casting to 'long' added here just to keep the 
          * compiler silent. 
          */ 
          (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
      "split_horizon", 
    { 
      { 
        SOC_PPC_TRAP_EG_TYPE_SPLIT_HORIZON, 
          /* 
          * Casting added here just to keep the compiler silent. 
          */ 
          (long)"" 
          "  SOC_PPC_TRAP_EG_TYPE.SOC_PPC_TRAP_EG_TYPE_SPLIT_HORIZON:\n\r"
          "  Packet is transmitted from Hub to Hub\n\r"
          "", 
          /* 
          * Pointer to a function to call after symbolic value 
          * has been accepted. Casting should be 'VAL_PROC_PTR'. 
          * Casting to 'long' added here just to keep the 
          * compiler silent. 
          */ 
          (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
      "private_vlan", 
    { 
      { 
        SOC_PPC_TRAP_EG_TYPE_PRIVATE_VLAN, 
          /* 
          * Casting added here just to keep the compiler silent. 
          */ 
          (long)"" 
          "  SOC_PPC_TRAP_EG_TYPE.SOC_PPC_TRAP_EG_TYPE_PRIVATE_VLAN:\n\r"
          "  Packet is transmitted from Isolated port to not promiscuous port\n\r"
          "", 
          /* 
          * Pointer to a function to call after symbolic value 
          * has been accepted. Casting should be 'VAL_PROC_PTR'. 
          * Casting to 'long' added here just to keep the 
          * compiler silent. 
          */ 
          (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
      "ttl_scope", 
    { 
      { 
        SOC_PPC_TRAP_EG_TYPE_TTL_SCOPE, 
          /* 
          * Casting added here just to keep the compiler silent. 
          */ 
          (long)"" 
          "  SOC_PPC_TRAP_EG_TYPE.SOC_PPC_TRAP_EG_TYPE_TTL_SCOPE:\n\r"
          "  (for router packets) Packet's TTL is lower than the configured value\n\r"
          "", 
          /* 
          * Pointer to a function to call after symbolic value 
          * has been accepted. Casting should be 'VAL_PROC_PTR'. 
          * Casting to 'long' added here just to keep the 
          * compiler silent. 
          */ 
          (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
      "mtu_violation", 
    { 
      { 
        SOC_PPC_TRAP_EG_TYPE_MTU_VIOLATION, 
          /* 
          * Casting added here just to keep the compiler silent. 
          */ 
          (long)"" 
          "  SOC_PPC_TRAP_EG_TYPE.SOC_PPC_TRAP_EG_TYPE_MTU_VIOLATION:\n\r"
          "  (for router packets) Packet's MTU is higher than the configured value (see\n\r"
          "  soc_ppd_port_info_set)\n\r"
          "", 
          /* 
          * Pointer to a function to call after symbolic value 
          * has been accepted. Casting should be 'VAL_PROC_PTR'. 
          * Casting to 'long' added here just to keep the 
          * compiler silent. 
          */ 
          (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
      "trill_ttl_0", 
    { 
      { 
        SOC_PPC_TRAP_EG_TYPE_TRILL_TTL_0, 
          /* 
          * Casting added here just to keep the compiler silent. 
          */ 
          (long)"" 
          "  SOC_PPC_TRAP_EG_TYPE.SOC_PPC_TRAP_EG_TYPE_TRILL_TTL_0:\n\r"
          "  (TRILL) packet's TTL is equal to zero.\n\r"
          "", 
          /* 
          * Pointer to a function to call after symbolic value 
          * has been accepted. Casting should be 'VAL_PROC_PTR'. 
          * Casting to 'long' added here just to keep the 
          * compiler silent. 
          */ 
          (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
      "trill_same_interface", 
    { 
      { 
        SOC_PPC_TRAP_EG_TYPE_TRILL_SAME_INTERFACE, 
          /* 
          * Casting added here just to keep the compiler silent. 
          */ 
          (long)"" 
          "  SOC_PPC_TRAP_EG_TYPE.SOC_PPC_TRAP_EG_TYPE_TRILL_SAME_INTERFACE:\n\r"
          "  (TRILL) Packet sent back to where it came from (from/to same Adjacent-RBridge)\n\r"
          "", 
          /* 
          * Pointer to a function to call after symbolic value 
          * has been accepted. Casting should be 'VAL_PROC_PTR'. 
          * Casting to 'long' added here just to keep the 
          * compiler silent. 
          */ 
          (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
      "trill_bounce_back", 
    { 
      { 
        SOC_PPC_TRAP_EG_TYPE_TRILL_BOUNCE_BACK, 
          /* 
          * Casting added here just to keep the compiler silent. 
          */ 
          (long)"" 
          "  SOC_PPC_TRAP_EG_TYPE.SOC_PPC_TRAP_EG_TYPE_TRILL_BOUNCE_BACK:\n\r"
          "  (TRILL) This filter is used in order to prevent bounce back of trill\n\r"
          "  terminated unicast packets by the egress router bridge in case of a DA not\n\r"
          "  found.\n\r"
          "", 
          /* 
          * Pointer to a function to call after symbolic value 
          * has been accepted. Casting should be 'VAL_PROC_PTR'. 
          * Casting to 'long' added here just to keep the 
          * compiler silent. 
          */ 
          (long)NULL 
      } 
    } 
  },
  { 
    VAL_SYMBOL, 
      "dss_stacking", 
    { 
      { 
        SOC_PPC_TRAP_EG_TYPE_DSS_STACKING, 
          /* 
          * Casting added here just to keep the compiler silent. 
          */ 
          (long)"" 
          "  SOC_PPC_TRAP_EG_TYPE.SOC_PPC_TRAP_EG_TYPE_DSS_STACKING:\n\r"
          "  in stacking: packet is to be forwarded to \n\r"
          "  to TM-domain marked to be filtered.\n\r"
          "", 
          /* 
          * Pointer to a function to call after symbolic value 
          * has been accepted. Casting should be 'VAL_PROC_PTR'. 
          * Casting to 'long' added here just to keep the 
          * compiler silent. 
          */ 
          (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
      "lag_multicast", 
    { 
      { 
        SOC_PPC_TRAP_EG_TYPE_LAG_MULTICAST, 
          /* 
          * Casting added here just to keep the compiler silent. 
          */ 
          (long)"" 
          "  SOC_PPC_TRAP_EG_TYPE.SOC_PPC_TRAP_EG_TYPE_LAG_MULTICAST:\n\r"
          "  packet sent to port where packet's LB key\n\r"
          "  doesn't fill in the LB-range of the port \n\r"
          "", 
          /* 
          * Pointer to a function to call after symbolic value 
          * has been accepted. Casting should be 'VAL_PROC_PTR'. 
          * Casting to 'long' added here just to keep the 
          * compiler silent. 
          */ 
          (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
      "exclude_src", 
    { 
      { 
        SOC_PPC_TRAP_EG_TYPE_EXCLUDE_SRC, 
          /* 
          * Casting added here just to keep the compiler silent. 
          */ 
          (long)"" 
          "  SOC_PPC_TRAP_EG_TYPE.SOC_PPC_TRAP_EG_TYPE_EXCLUDE_SRC:\n\r"
          "  packet forwarded back to incoming port (considering LAG)\n\r"
          "", 
          /* 
          * Pointer to a function to call after symbolic value 
          * has been accepted. Casting should be 'VAL_PROC_PTR'. 
          * Casting to 'long' added here just to keep the 
          * compiler silent. 
          */ 
          (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
      "cfm_trap", 
    { 
      { 
        SOC_PPC_TRAP_EG_TYPE_CFM_TRAP, 
          /* 
          * Casting added here just to keep the compiler silent. 
          */ 
          (long)"" 
          "  SOC_PPC_TRAP_EG_TYPE.SOC_PPC_TRAP_EG_TYPE_CFM_TRAP:\n\r"
          "  packet with out-AC, where AC.CFM-valid and \n\r"
          "  AC.CFM-Max-Level >= packet.CFM-Level \n\r"
          "  found.\n\r"
          "", 
          /* 
          * Pointer to a function to call after symbolic value 
          * has been accepted. Casting should be 'VAL_PROC_PTR'. 
          * Casting to 'long' added here just to keep the 
          * compiler silent. 
          */ 
          (long)NULL 
      } 
    } 
  }, 
    { 
    VAL_SYMBOL, 
    "invalid_out_port", 
    { 
      { 
        SOC_PPC_TRAP_EG_TYPE_INVALID_OUT_PORT, 
          (long)"" 
        "  SOC_PPC_TRAP_EG_TYPE.SOC_PPC_TRAP_EG_TYPE_INVALID_OUT_PORT:\n\r"
        "", 
          (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
   "cnm_packet", 
    { 
      { 
        SOC_PPC_TRAP_EG_TYPE_CNM_PACKET, 
          (long)"" 
        "  SOC_PPC_TRAP_EG_TYPE.SOC_PPC_TRAP_EG_TYPE_CNM_PACKET:\n\r"
        "", 
          (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
   "ipv4_version_error", 
    { 
      { 
        SOC_PPC_TRAP_EG_TYPE_IPV4_VERSION_ERROR, 
          (long)"" 
        "  SOC_PPC_TRAP_EG_TYPE.SOC_PPC_TRAP_EG_TYPE_IPV4_VERSION_ERROR:\n\r"
        "", 
          (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
   "ipv4_checksum_error", 
    { 
      { 
        SOC_PPC_TRAP_EG_TYPE_IPV4_CHECKSUM_ERROR, 
          (long)"" 
        "  SOC_PPC_TRAP_EG_TYPE.SOC_PPC_TRAP_EG_TYPE_IPV4_CHECKSUM_ERROR:\n\r"
        "", 
          (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
   "ipv4_header_length_error", 
    { 
      { 
        SOC_PPC_TRAP_EG_TYPE_IPV4_HEADER_LENGTH_ERROR, 
          (long)"" 
        "  SOC_PPC_TRAP_EG_TYPE.SOC_PPC_TRAP_EG_TYPE_IPV4_HEADER_LENGTH_ERROR:\n\r"
        "", 
          (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
   "ipv4_total_length_error", 
    { 
      { 
        SOC_PPC_TRAP_EG_TYPE_IPV4_TOTAL_LENGTH_ERROR, 
          (long)"" 
        "  SOC_PPC_TRAP_EG_TYPE.SOC_PPC_TRAP_EG_TYPE_IPV4_TOTAL_LENGTH_ERROR:\n\r"
        "", 
          (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
   "ip_ttl0", 
    { 
      { 
        SOC_PPC_TRAP_EG_TYPE_IP_TTL0, 
          (long)"" 
        "  SOC_PPC_TRAP_EG_TYPE.SOC_PPC_TRAP_EG_TYPE_IP_TTL0:\n\r"
        "", 
          (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
   "ip_has_options", 
    { 
      { 
        SOC_PPC_TRAP_EG_TYPE_IP_HAS_OPTIONS, 
          (long)"" 
        "  SOC_PPC_TRAP_EG_TYPE.SOC_PPC_TRAP_EG_TYPE_IP_HAS_OPTIONS:\n\r"
        "", 
          (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
   "ip_ttl1", 
    { 
      { 
        SOC_PPC_TRAP_EG_TYPE_IP_TTL1, 
          (long)"" 
        "  SOC_PPC_TRAP_EG_TYPE.SOC_PPC_TRAP_EG_TYPE_IP_TTL1:\n\r"
        "", 
          (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
   "ipv4_sip_equal_dip", 
    { 
      { 
        SOC_PPC_TRAP_EG_TYPE_IPV4_SIP_EQUAL_DIP, 
          (long)"" 
        "  SOC_PPC_TRAP_EG_TYPE.SOC_PPC_TRAP_EG_TYPE_IPV4_SIP_EQUAL_DIP:\n\r"
        "", 
          (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
   "ipv4_dip_zero", 
    { 
      { 
        SOC_PPC_TRAP_EG_TYPE_IPV4_DIP_ZERO, 
          (long)"" 
        "  SOC_PPC_TRAP_EG_TYPE.SOC_PPC_TRAP_EG_TYPE_IPV4_DIP_ZERO:\n\r"
        "", 
          (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
   "ipv4_sip_is_mc", 
    { 
      { 
        SOC_PPC_TRAP_EG_TYPE_IPV4_SIP_IS_MC, 
          (long)"" 
        "  SOC_PPC_TRAP_EG_TYPE.SOC_PPC_TRAP_EG_TYPE_IPV4_SIP_IS_MC:\n\r"
        "", 
          (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
   "ipv6_unspecified_destination", 
    { 
      { 
        SOC_PPC_TRAP_EG_TYPE_IPV6_UNSPECIFIED_DESTINATION, 
          (long)"" 
        "  SOC_PPC_TRAP_EG_TYPE.SOC_PPC_TRAP_EG_TYPE_IPV6_UNSPECIFIED_DESTINATION:\n\r"
        "", 
          (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
   "ipv6_loopback_address", 
    { 
      { 
        SOC_PPC_TRAP_EG_TYPE_IPV6_LOOPBACK_ADDRESS, 
          (long)"" 
        "  SOC_PPC_TRAP_EG_TYPE.SOC_PPC_TRAP_EG_TYPE_IPV6_LOOPBACK_ADDRESS:\n\r"
        "", 
          (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
   "ipv6_multicast_source", 
    { 
      { 
        SOC_PPC_TRAP_EG_TYPE_IPV6_MULTICAST_SOURCE, 
          (long)"" 
        "  SOC_PPC_TRAP_EG_TYPE.SOC_PPC_TRAP_EG_TYPE_IPV6_MULTICAST_SOURCE:\n\r"
        "", 
          (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
   "ipv6_unspecified_source", 
    { 
      { 
        SOC_PPC_TRAP_EG_TYPE_IPV6_UNSPECIFIED_SOURCE, 
          (long)"" 
        "  SOC_PPC_TRAP_EG_TYPE.SOC_PPC_TRAP_EG_TYPE_IPV6_UNSPECIFIED_SOURCE:\n\r"
        "", 
          (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
   "ipv6_local_link_destination", 
    { 
      { 
        SOC_PPC_TRAP_EG_TYPE_IPV6_LOCAL_LINK_DESTINATION, 
          (long)"" 
        "  SOC_PPC_TRAP_EG_TYPE.SOC_PPC_TRAP_EG_TYPE_IPV6_LOCAL_LINK_DESTINATION:\n\r"
        "", 
          (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
   "ipv6_local_site_destination", 
    { 
      { 
        SOC_PPC_TRAP_EG_TYPE_IPV6_LOCAL_SITE_DESTINATION, 
          (long)"" 
        "  SOC_PPC_TRAP_EG_TYPE.SOC_PPC_TRAP_EG_TYPE_IPV6_LOCAL_SITE_DESTINATION:\n\r"
        "", 
          (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
   "ipv6_local_link_source", 
    { 
      { 
        SOC_PPC_TRAP_EG_TYPE_IPV6_LOCAL_LINK_SOURCE, 
          (long)"" 
        "  SOC_PPC_TRAP_EG_TYPE.SOC_PPC_TRAP_EG_TYPE_IPV6_LOCAL_LINK_SOURCE:\n\r"
        "", 
          (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
   "ipv6_local_site_source", 
    { 
      { 
        SOC_PPC_TRAP_EG_TYPE_IPV6_LOCAL_SITE_SOURCE, 
          (long)"" 
        "  SOC_PPC_TRAP_EG_TYPE.SOC_PPC_TRAP_EG_TYPE_IPV6_LOCAL_SITE_SOURCE:\n\r"
        "", 
          (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
   "ipv6_ipv4_compatible_destination", 
    { 
      { 
        SOC_PPC_TRAP_EG_TYPE_IPV6_IPV4_COMPATIBLE_DESTINATION, 
          (long)"" 
        "  SOC_PPC_TRAP_EG_TYPE.SOC_PPC_TRAP_EG_TYPE_IPV6_IPV4_COMPATIBLE_DESTINATION:\n\r"
        "", 
          (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
   "ipv6_ipv4_mapped_destination", 
    { 
      { 
        SOC_PPC_TRAP_EG_TYPE_IPV6_IPV4_MAPPED_DESTINATION, 
          (long)"" 
        "  SOC_PPC_TRAP_EG_TYPE.SOC_PPC_TRAP_EG_TYPE_IPV6_IPV4_MAPPED_DESTINATION:\n\r"
        "", 
          (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
   "ipv6_multicast_destination", 
    { 
      { 
        SOC_PPC_TRAP_EG_TYPE_IPV6_MULTICAST_DESTINATION, 
          (long)"" 
        "  SOC_PPC_TRAP_EG_TYPE.SOC_PPC_TRAP_EG_TYPE_IPV6_MULTICAST_DESTINATION:\n\r"
        "", 
          (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
   "ipv6_hop_by_hop", 
    { 
      { 
        SOC_PPC_TRAP_EG_TYPE_IPV6_HOP_BY_HOP, 
          (long)"" 
        "  SOC_PPC_TRAP_EG_TYPE.SOC_PPC_TRAP_EG_TYPE_IPV6_HOP_BY_HOP:\n\r"
        "", 
          (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
      "all", 
    { 
      { 
        SOC_PPC_TRAP_EG_TYPE_ALL, 
          /* 
          * Casting added here just to keep the compiler silent. 
          */ 
          (long)"" 
          "  SOC_PPC_TRAP_EG_TYPE.SOC_PPC_TRAP_EG_TYPE_ALL:\n\r"
          "  Use to set all traps\n\r"
          "", 
          /* 
          * Pointer to a function to call after symbolic value 
          * has been accepted. Casting should be 'VAL_PROC_PTR'. 
          * Casting to 'long' added here just to keep the 
          * compiler silent. 
          */ 
          (long)NULL 
      } 
    } 
  }, 
    /* 
    * Last element. Do not remove. 
    */ 
  { 
    VAL_END_OF_LIST 
  } 
} 
#endif 
; 

/********************************************************/        
/********************************************************/  
EXTERN CONST 
PARAM_VAL_RULES 
SOC_PPD_ARAD_LEM_TYPE_rule[] 
#ifdef INIT 
= 
{ 
  { 
    VAL_SYMBOL, 
      "mact", 
    { 
      { 
        ARAD_PP_LEM_ACCESS_KEY_TYPE_MAC, 
          (long)"" 
          "ARAD_PP_LEM_ACCESS_KEY_TYPE_MAC\n\r",
          (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
      "bmact", 
    { 
      { 
        ARAD_PP_LEM_ACCESS_KEY_TYPE_BACKBONE_MAC, 
          (long)"" 
          "ARAD_PP_LEM_ACCESS_KEY_TYPE_BACKBONE_MAC\n\r",
          (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
      "ipmc_comp", 
    { 
      { 
        ARAD_PP_LEM_ACCESS_KEY_TYPE_IPV4_MC, 
          (long)"" 
          "ARAD_PP_LEM_ACCESS_KEY_TYPE_IPV4_MC\n\r",
          (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
      "ip_host", 
    { 
      { 
        ARAD_PP_LEM_ACCESS_KEY_TYPE_IP_HOST, 
          (long)"" 
          "ARAD_PP_LEM_ACCESS_KEY_TYPE_IP_HOST\n\r",
          (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
      "sa_auth", 
    { 
      { 
        ARAD_PP_LEM_ACCESS_KEY_TYPE_SA_AUTH, 
          (long)"" 
          "ARAD_PP_LEM_ACCESS_KEY_TYPE_SA_AUTH\n\r",
          (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
      "ilm", 
    { 
      { 
        ARAD_PP_LEM_ACCESS_KEY_TYPE_ILM, 
          (long)"" 
          "ARAD_PP_LEM_ACCESS_KEY_TYPE_ILM\n\r",
          (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
      "extended", 
    { 
      { 
        ARAD_PP_LEM_ACCESS_KEY_TYPE_EXTENDED, 
          (long)"" 
          "ARAD_PP_LEM_ACCESS_KEY_TYPE_EXTENDED\n\r",
          (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
      "trill_uc", 
    { 
      { 
        ARAD_PP_LEM_ACCESS_KEY_TYPE_TRILL_UC, 
          (long)"" 
          "ARAD_PP_LEM_ACCESS_KEY_TYPE_TRILL_UC\n\r",
          (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
      "trill_mc", 
    { 
      { 
        ARAD_PP_LEM_ACCESS_KEY_TYPE_TRILL_MC, 
          (long)"" 
          "ARAD_PP_LEM_ACCESS_KEY_TYPE_TRILL_MC\n\r",
          (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
      "spoof_dhcp", 
    { 
      { 
        ARAD_PP_LEM_ACCESS_KEY_TYPE_IP_SPOOF_DHCP, 
          (long)"" 
          "ARAD_PP_LEM_ACCESS_KEY_TYPE_IP_SPOOF_DHCP\n\r",
          (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
      "spoof_static", 
    { 
      { 
        ARAD_PP_LEM_ACCESS_KEY_TYPE_IPV4_SPOOF_STATIC, 
          (long)"" 
          "ARAD_PP_LEM_ACCESS_KEY_TYPE_IPV4_SPOOF_STATIC\n\r",
          (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
      "fcf_local", 
    { 
      { 
        ARAD_PP_LEM_ACCESS_KEY_TYPE_FC_LOCAL, 
          (long)"" 
          "ARAD_PP_LEM_ACCESS_KEY_TYPE_FC_LOCAL\n\r",
          (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
      "fcf_remote", 
    { 
      { 
        ARAD_PP_LEM_ACCESS_KEY_TYPE_FC_REMOTE, 
          (long)"" 
          "ARAD_PP_LEM_ACCESS_KEY_TYPE_FC_REMOTE\n\r",
          (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
      "fc_zoning", 
    { 
      { 
        ARAD_PP_LEM_ACCESS_KEY_TYPE_FC_ZONING, 
          (long)"" 
          "ARAD_PP_LEM_ACCESS_KEY_TYPE_FC_ZONING\n\r",
          (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
      "ip6_spoof_static", 
    { 
      { 
        ARAD_PP_LEM_ACCESS_KEY_TYPE_IP6_SPOOF_STATIC, 
          (long)"" 
          "ARAD_PP_LEM_ACCESS_KEY_TYPE_IP6_SPOOF_STATIC\n\r",
          (long)NULL 
      } 
    } 
  }, 

  { 
    VAL_SYMBOL, 
      "dip6_compression", 
    { 
      { 
        ARAD_PP_LEM_ACCESS_KEY_TYPE_IP6_COMPRESSION_DIP, 
          (long)"" 
          "ARAD_PP_LEM_ACCESS_KEY_TYPE_IP6_COMPRESSION_DIP\n\r",
          (long)NULL 
      } 
    } 
  },
  { 
    VAL_SYMBOL, 
      "all", 
    { 
      { 
        ARAD_PP_LEM_ACCESS_ALL_TYPES, 
          (long)"" 
          "ARAD_PP_LEM_ACCESS_ALL_TYPES\n\r",
          (long)NULL 
      } 
    } 
  }, 
    /* 
    * Last element. Do not remove. 
    */ 
  { 
    VAL_END_OF_LIST 
  } 
} 
#endif 
;
/********************************************************/  
/********************************************************/        

 
EXTERN CONST 
   PARAM_VAL_RULES 
     SOC_PPC_MTR_ETH_TYPE_rule[] 
#ifdef INIT 
   = 
{ 
  { 
    VAL_SYMBOL, 
    "unknow_uc", 
    { 
      { 
        SOC_PPC_MTR_ETH_TYPE_UNKNOW_UC, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_MTR_ETH_TYPE.SOC_PPC_MTR_ETH_TYPE_UNKNOW_UC:\n\r"
        "  Unknown Unicast traffic\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "know_uc", 
    { 
      { 
        SOC_PPC_MTR_ETH_TYPE_KNOW_UC, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_MTR_ETH_TYPE.SOC_PPC_MTR_ETH_TYPE_KNOW_UC:\n\r"
        "  Known Unicast traffic\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "unknow_mc", 
    { 
      { 
        SOC_PPC_MTR_ETH_TYPE_UNKNOW_MC, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_MTR_ETH_TYPE.SOC_PPC_MTR_ETH_TYPE_UNKNOW_MC:\n\r"
        "  Unknown Multicast traffic\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "know_mc", 
    { 
      { 
        SOC_PPC_MTR_ETH_TYPE_KNOW_MC, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_MTR_ETH_TYPE.SOC_PPC_MTR_ETH_TYPE_KNOW_MC:\n\r"
        "  Known Multicast traffic\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "bc", 
    { 
      { 
        SOC_PPC_MTR_ETH_TYPE_BC, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_MTR_ETH_TYPE.SOC_PPC_MTR_ETH_TYPE_BC:\n\r"
        "  Broadcast traffic\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
/* 
 * Last element. Do not remove. 
 */ 
  { 
    VAL_END_OF_LIST 
  } 
} 
#endif 
; 

/********************************************************/       
/********************************************************/        
 
EXTERN CONST 
   PARAM_VAL_RULES 
     SOC_PPC_MTR_COLOR_MODE_rule[] 
#ifdef INIT 
   = 
{ 
  { 
    VAL_SYMBOL, 
    "blind", 
    { 
      { 
        SOC_PPC_MTR_COLOR_MODE_BLIND, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_MTR_COLOR_MODE.SOC_PPC_MTR_COLOR_MODE_BLIND:\n\r"
        "  Ignore the incoming packet color (if any) when determining the (new) color to\n\r"
        "  apply to the packet. (all packets are assumed Green)\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "aware", 
    { 
      { 
        SOC_PPC_MTR_COLOR_MODE_AWARE, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_MTR_COLOR_MODE.SOC_PPC_MTR_COLOR_MODE_AWARE:\n\r"
        "  Consider the incoming packet color (if any) when determining the (new) color\n\r"
        "  to apply to the packet.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
/* 
 * Last element. Do not remove. 
 */ 
  { 
    VAL_END_OF_LIST 
  } 
} 
#endif 
; 

/********************************************************/        
/********************************************************/        
 
EXTERN CONST 
   PARAM_VAL_RULES 
     SOC_PPC_MTR_RES_USE_rule[] 
#ifdef INIT 
   = 
{ 
  { 
    VAL_SYMBOL, 
    "none", 
    { 
      { 
        SOC_PPC_MTR_RES_USE_NONE, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_MTR_RES_USE.SOC_PPC_MTR_RES_USE_NONE:\n\r"
        "  Metering has no effect. Mainly for debug purpose.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "ow_dp", 
    { 
      { 
        SOC_PPC_MTR_RES_USE_OW_DP, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_MTR_RES_USE.SOC_PPC_MTR_RES_USE_OW_DP:\n\r"
        "  Metering result overwrite the DP (Drop Precedence) in ingress, used for\n\r"
        "  ingress packet queuing.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "ow_de", 
    { 
      { 
        SOC_PPC_MTR_RES_USE_OW_DE, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_MTR_RES_USE.SOC_PPC_MTR_RES_USE_OW_DE:\n\r"
        "  Metering result overwrite the DE (Drop Eligibility), used by egress to build\n\r"
        "  the packet UP/PCP.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "ow_dp_de", 
    { 
      { 
        SOC_PPC_MTR_RES_USE_OW_DP_DE, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_MTR_RES_USE.SOC_PPC_MTR_RES_USE_OW_DP_DE:\n\r"
        "  Metering result overwrite both DE and DP. (See above)\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
/* 
 * Last element. Do not remove. 
 */ 
  { 
    VAL_END_OF_LIST 
  } 
} 
#endif 
; 

/********************************************************/        
/********************************************************/        
 
EXTERN CONST 
   PARAM_VAL_RULES 
     SOC_PPC_MTR_TYPE_rule[] 
#ifdef INIT 
   = 
{ 
  { 
    VAL_SYMBOL, 
    "inlif", 
    { 
      { 
        SOC_PPC_MTR_TYPE_INLIF, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_MTR_TYPE.SOC_PPC_MTR_TYPE_INLIF:\n\r"
        "  Packets are metered according to the incoming logical interface they attached\n\r"
        "  to\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "outlif", 
    { 
      { 
        SOC_PPC_MTR_TYPE_OUTLIF, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_MTR_TYPE.SOC_PPC_MTR_TYPE_OUTLIF:\n\r"
        "  Packets are metered according to the Outgoing AC they are sent from\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "in_ac", 
    { 
      { 
        SOC_PPC_MTR_TYPE_IN_AC, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_MTR_TYPE.SOC_PPC_MTR_TYPE_IN_AC:\n\r"
        "  Packets are metered according to the Ingress AC\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "out_ac", 
    { 
      { 
        SOC_PPC_MTR_TYPE_OUT_AC, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_MTR_TYPE.SOC_PPC_MTR_TYPE_OUT_AC:\n\r"
        "  Packets are metered according to the Egress AC they are sent from\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "vsid", 
    { 
      { 
        SOC_PPC_MTR_TYPE_VSID, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_MTR_TYPE.SOC_PPC_MTR_TYPE_VSID:\n\r"
        "  Packets are metered according to the VSID they are attached to\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "in_pwe", 
    { 
      { 
        SOC_PPC_MTR_TYPE_IN_PWE, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_MTR_TYPE.SOC_PPC_MTR_TYPE_IN_PWE:\n\r"
        "  Packets are metered according to the PWE incoming MPLS label ID\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "in_label", 
    { 
      { 
        SOC_PPC_MTR_TYPE_IN_LABEL, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_MTR_TYPE.SOC_PPC_MTR_TYPE_IN_LABEL:\n\r"
        "  Packets are metered according to the Ingress terminated label (Tunnel/LSR\n\r"
        "  label) \n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "out_label", 
    { 
      { 
        SOC_PPC_MTR_TYPE_OUT_LABEL, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_MTR_TYPE.SOC_PPC_MTR_TYPE_OUT_LABEL:\n\r"
        "  Packets are metered according to the Egress label they sent with\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "fec_id", 
    { 
      { 
        SOC_PPC_MTR_TYPE_FEC_ID, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_MTR_TYPE.SOC_PPC_MTR_TYPE_FEC_ID:\n\r"
        "  Petra-B only, Packets are metered according to the FEC entry they were\n\r"
        "  forwarded by.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "in_ac_and_tc", 
    { 
      { 
        SOC_PPC_MTR_TYPE_IN_AC_AND_TC, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_MTR_TYPE.SOC_PPC_MTR_TYPE_IN_AC_AND_TC:\n\r"
        "  Packets are metered according to the Ingress AC and Traffic Class.Each AC is\n\r"
        "  attached to 8 Meter instances:Meter-ID = AC-ID * 8 + TC\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
/* 
 * Last element. Do not remove. 
 */ 
  { 
    VAL_END_OF_LIST 
  } 
} 
#endif 
; 

/********************************************************/        
/********************************************************/        
 
EXTERN CONST 
   PARAM_VAL_RULES 
     SOC_PPC_DIAG_TCAM_USAGE_rule[] 
#ifdef INIT 
   = 
{ 
  { 
    VAL_SYMBOL, 
    "frwrding", 
    { 
      { 
        SOC_PPC_DIAG_TCAM_USAGE_FRWRDING, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_DIAG_TCAM_USAGE.SOC_PPC_DIAG_TCAM_USAGE_FRWRDING:\n\r"
        "  The TCAM User is the Forwarding (for IPv4 MC and IPv6)\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "pmf", 
    { 
      { 
        SOC_PPC_DIAG_TCAM_USAGE_PMF, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_DIAG_TCAM_USAGE.SOC_PPC_DIAG_TCAM_USAGE_PMF:\n\r"
        "  The TCAM User is the IRPP PMF\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "egr_acl", 
    { 
      { 
        SOC_PPC_DIAG_TCAM_USAGE_EGR_ACL, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_DIAG_TCAM_USAGE.SOC_PPC_DIAG_TCAM_USAGE_EGR_ACL:\n\r"
        "  The TCAM User is the Egress ACL\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
/* 
 * Last element. Do not remove. 
 */ 
  { 
    VAL_END_OF_LIST 
  } 
} 
#endif 
; 

/********************************************************/        
/********************************************************/        
 
EXTERN CONST 
   PARAM_VAL_RULES 
     SOC_PPC_DIAG_FLAVOR_rule[] 
#ifdef INIT 
   = 
{ 
  { 
    VAL_SYMBOL, 
    "none", 
    { 
      { 
        SOC_PPC_DIAG_FLAVOR_NONE, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_DIAG_FLAVOR.SOC_PPC_DIAG_FLAVOR_NONE:\n\r"
        "  none of the below flavors\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "raw", 
    { 
      { 
        SOC_PPC_DIAG_FLAVOR_RAW, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_DIAG_FLAVOR.SOC_PPC_DIAG_FLAVOR_RAW:\n\r"
        "  The returned value by Diag API is a raw bit-stream i.e. without parsing into\n\r"
        "  structure.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "clear_on_get", 
    { 
      { 
        SOC_PPC_DIAG_FLAVOR_CLEAR_ON_GET, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_DIAG_FLAVOR.SOC_PPC_DIAG_FLAVOR_CLEAR_ON_GET:\n\r"
        "  after getting packet trace/log info clear this information.\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
/* 
 * Last element. Do not remove. 
 */ 
  { 
    VAL_END_OF_LIST 
  } 
} 
#endif 
; 

/********************************************************/        
/********************************************************/        
 
EXTERN CONST 
   PARAM_VAL_RULES 
     SOC_PPC_DIAG_PKT_TRACE_rule[] 
#ifdef INIT 
   = 
{ 
  { 
    VAL_SYMBOL, 
    "lif", 
    { 
      { 
        SOC_PPC_DIAG_PKT_TRACE_LIF, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_DIAG_PKT_TRACE.SOC_PPC_DIAG_PKT_TRACE_LIF:\n\r"
        "  Trace of packet over the LIF table, including hit bit for each LIF entry\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "tunnel_rng", 
    { 
      { 
        SOC_PPC_DIAG_PKT_TRACE_TUNNEL_RNG, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_DIAG_PKT_TRACE.SOC_PPC_DIAG_PKT_TRACE_TUNNEL_RNG:\n\r"
        "  Trace of packet over tunnel termination by range\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "trap", 
    { 
      { 
        SOC_PPC_DIAG_PKT_TRACE_TRAP, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_DIAG_PKT_TRACE.SOC_PPC_DIAG_PKT_TRACE_TRAP:\n\r"
        "  Trace of packet over traps hit bit\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "fec", 
    { 
      { 
        SOC_PPC_DIAG_PKT_TRACE_FEC, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_DIAG_PKT_TRACE.SOC_PPC_DIAG_PKT_TRACE_FEC:\n\r"
        "  Trace of packet over FEC hit bit\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "eg_drop_log", 
    { 
      { 
        SOC_PPC_DIAG_PKT_TRACE_EG_DROP_LOG, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_DIAG_PKT_TRACE.SOC_PPC_DIAG_PKT_TRACE_EG_DROP_LOG:\n\r"
        "  Clear packets drop log at egress\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "all", 
    { 
      { 
        SOC_PPC_DIAG_PKT_TRACE_ALL, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_DIAG_PKT_TRACE.SOC_PPC_DIAG_PKT_TRACE_ALL:\n\r"
        "  Clear all the above traces \n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
/* 
 * Last element. Do not remove. 
 */ 
  { 
    VAL_END_OF_LIST 
  } 
} 
#endif 
; 

/********************************************************/        
/********************************************************/        
 
EXTERN CONST 
   PARAM_VAL_RULES 
     SOC_PPC_EG_QOS_UNIFORM_PHP_TYPE_rule[] 
#ifdef INIT 
   = 
{ 
  { 
    VAL_SYMBOL, 
    "soc_ppd_eg_qos_uniform_php_pop_into_ipv4", 
    { 
      { 
        SOC_PPC_EG_QOS_UNIFORM_PHP_POP_INTO_IPV4, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_EG_QOS_UNIFORM_PHP_TYPE.SOC_PPC_EG_QOS_UNIFORM_PHP_POP_INTO_IPV4:\n\r"
        "  Packet was forwarded according to MPLS label (LSR), and the label was poped\n\r"
        "  (uniform) into ipv4. \n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "soc_ppd_eg_qos_uniform_php_pop_into_ipv6", 
    { 
      { 
        SOC_PPC_EG_QOS_UNIFORM_PHP_POP_INTO_IPV6, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPC_EG_QOS_UNIFORM_PHP_TYPE.SOC_PPC_EG_QOS_UNIFORM_PHP_POP_INTO_IPV6:\n\r"
        "  Packet was forwarded according to MPLS label (LSR), and the label was poped\n\r"
        "  (uniform) into ipv6. \n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
/* 
 * Last element. Do not remove. 
 */ 
  { 
    VAL_END_OF_LIST 
  } 
} 
#endif 
; 

 /* 
  * } ENUM RULES 
  */
/********************************************************/  
/********************************************************/        
 
EXTERN CONST 
   PARAM_VAL_RULES 
     SOC_TMC_TCAM_BANK_ENTRY_SIZE_rule[] 
#ifdef INIT 
   = 
{ 
  { 
    VAL_SYMBOL, 
    "size_72_bits", 
    { 
      { 
        SOC_TMC_TCAM_BANK_ENTRY_SIZE_72_BITS, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPD_TCAM_BANK_SIZE.SOC_PPD_TCAM_BANK_SIZE_72_BITS:\n\r"
        "  TCAM bank size of 72 bits\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "size_144_bits", 
    { 
      { 
        SOC_TMC_TCAM_BANK_ENTRY_SIZE_144_BITS, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPD_TCAM_BANK_SIZE.SOC_PPD_TCAM_BANK_SIZE_144_BITS:\n\r"
        "  TCAM bank size of 144 bits\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "size_288_bits", 
    { 
      { 
        SOC_TMC_TCAM_BANK_ENTRY_SIZE_288_BITS, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPD_TCAM_BANK_SIZE.SOC_PPD_TCAM_BANK_SIZE_288_BITS:\n\r"
        "  TCAM bank size of 288 bits\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
/* 
 * Last element. Do not remove. 
 */ 
  { 
    VAL_END_OF_LIST 
  } 
} 
#endif 
; 

/********************************************************/        
/********************************************************/        
 
EXTERN CONST 
   PARAM_VAL_RULES 
     SOC_TMC_TCAM_USER_rule[] 
#ifdef INIT 
   = 
{ 
  { 
    VAL_SYMBOL, 
    "fwding_ipv4_mc", 
    { 
      { 
        SOC_TMC_TCAM_USER_FWDING_IPV4_MC, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPD_TCAM_USER.SOC_PPD_TCAM_USER_FWDING_IPV4_MC:\n\r"
        "  The TCAM User is the IPv4 multicast forwarding database\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "fwding_ipv6_uc", 
    { 
      { 
        SOC_TMC_TCAM_USER_FWDING_IPV6_UC, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPD_TCAM_USER.SOC_PPD_TCAM_USER_FWDING_IPV6:\n\r"
        "  The TCAM User is the IPv6 unicast forwarding database\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "fwding_ipv6_mc", 
    { 
      { 
        SOC_TMC_TCAM_USER_FWDING_IPV6_MC, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPD_TCAM_USER.SOC_PPD_TCAM_USER_FWDING_IPV6:\n\r"
        "  The TCAM User is the IPv6 multicast forwarding database\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  },
  { 
    VAL_SYMBOL, 
    "ingress_fp", 
    { 
      { 
        SOC_TMC_TCAM_USER_FP, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPD_TCAM_USER.SOC_PPD_TCAM_USER_FP:\n\r"
        "  The TCAM User is the IRPP PMF\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
  { 
    VAL_SYMBOL, 
    "egress_acl", 
    { 
      { 
        SOC_TMC_TCAM_USER_EGRESS_ACL, 
          /* 
           * Casting added here just to keep the compiler silent. 
           */ 
        (long)"" 
        "  SOC_PPD_TCAM_USER.SOC_PPD_TCAM_USER_ACL:\n\r"
        "  The TCAM User is the Egress ACL\n\r"
          "", 
          /* 
           * Pointer to a function to call after symbolic value 
           * has been accepted. Casting should be 'VAL_PROC_PTR'. 
           * Casting to 'long' added here just to keep the 
           * compiler silent. 
           */ 
        (long)NULL 
      } 
    } 
  }, 
/* 
 * Last element. Do not remove. 
 */ 
  { 
    VAL_END_OF_LIST 
  } 
} 
#endif 
; 
 /*
  * } ENUM RULES
  */
/********************************************************/

/********************************************************/          
/********************************************************/        
EXTERN CONST
   PARAM_VAL_RULES
     SOC_PPD_CELL_LINKS_NUMBER_rule[]
#ifdef INIT
   =
{
  {
    VAL_NUMERIC,SYMB_NAME_NUMERIC,
    {
      {
        HAS_NO_MIN_VALUE | HAS_NO_MAX_VALUE,
        0 ,0,
          /*
           * Number of times this value can be repeated (i.e.,
           * value is an array). Must be at least 1!
           */
        5,
        (VAL_PROC_PTR)NULL
      }
    }
  },
/*
 * Last element. Do not remove.
 */
  {
    VAL_END_OF_LIST
  }
}
#endif
;
/********************************************************/          
/********************************************************/ 

EXTERN CONST 
   PARAM_VAL_RULES 
     soc_ppd_api_free_vals[] 
#ifdef INIT 
   = 
{ 
  { 
    VAL_NUMERIC,SYMB_NAME_NUMERIC, 
    { 
      { 
        HAS_NO_MIN_VALUE | HAS_NO_MAX_VALUE, 
        0,0, 
          /* 
           * Number of times this value can be repeated (i.e., 
           * value is an array). Must be at least 1! 
           */ 
        1, 
        (VAL_PROC_PTR)NULL 
      } 
    } 
  }, 
/* 
 * Last element. Do not remove. 
 */ 
  { 
    VAL_END_OF_LIST 
  } 
} 
#endif 
; 
EXTERN CONST 
   PARAM_VAL_RULES 
     soc_ppd_api_empty_vals[] 
#ifdef INIT 
   = 
{ 
/* 
 * Last element. Do not remove. 
 */ 
  { 
    VAL_END_OF_LIST 
  } 
} 
#endif 
; 
/********************************************************/        
/********************************************************/        
EXTERN CONST 
   PARAM 
     soc_ppd_api_params[] 
#ifdef INIT 
   = 
{ 
#ifdef UI_DEFAULT_SECTION/* { default_section*/
#endif /* } default_section*/
#ifdef UI_SAND_FRAMEWORK/* { soc_sand_framework*/
#endif /* } soc_sand_framework*/
#ifdef UI_SAND_PP_GENERAL/* { soc_sand_pp_general*/
#endif /* } soc_sand_pp_general*/
#ifdef UI_PPD_GENERAL/* { soc_ppd_general*/
#endif /* } soc_ppd_general*/
#ifdef UI_LLP_PARSE/* { llp_parse*/
  { 
    SOC_PARAM_PPD_LLP_PARSE_TPID_VALUES_SET_TPID_VALUES_SET_ID, 
    "tpid_values_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Sets the global information for link layer parsing, including TPID values.\n\r"
    "  Used in ingress to identify VLAN tags on incoming packets, and used in egress\n\r"
    "  to construct VLAN tags on outgoing packets.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_parse tpid_values_set tpid_vals_index 0 tpid_vals 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_LLP_PARSE_TPID_VALUES_SET_TPID_VALUES_SET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_PARSE_TPID_VALUES_SET_TPID_VALUES_SET_TPID_VALS_TPID_VALS_INDEX_ID, 
    "tpid_vals_index", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  tpid_vals_index:\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_parse tpid_values_set tpid_vals_index 0 tpid_vals 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_LLP_PARSE_TPID_VALUES_SET_TPID_VALUES_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_PARSE_TPID_VALUES_SET_TPID_VALUES_SET_TPID_VALS_TPID_VALS_ID, 
    "tpid_vals", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  tpid_vals.tpid_vals[ prm_tpid_vals_index]:\n\r"
    "  Device TPID values. Used for Link-layer parsing to identify the VLAN tags on\n\r"
    "  the packets. Also used to build the VLAN tags in egress. The last TPID in the\n\r"
    "  array is used for ISID tag processing (ISID-TPID)Range: 0 - 0xFFFF.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_parse tpid_values_set tpid_vals_index 0 tpid_vals 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_LLP_PARSE_TPID_VALUES_SET_TPID_VALUES_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_PARSE_TPID_VALUES_GET_TPID_VALUES_GET_ID, 
    "tpid_values_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Sets the global information for link layer parsing, including TPID values.\n\r"
    "  Used in ingress to identify VLAN tags on incoming packets, and used in egress\n\r"
    "  to construct VLAN tags on outgoing packets.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_parse tpid_values_get\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_LLP_PARSE_TPID_VALUES_GET_TPID_VALUES_GET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_PARSE_TPID_PROFILE_INFO_SET_TPID_PROFILE_INFO_SET_ID, 
    "tpid_profile_info_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Sets the TPID profile selection of two TPIDs from the Global TPIDs.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_parse tpid_profile_info_set tpid_profile_ndx 0 type 0 index 0\n\r"
    "  type 0 index 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_LLP_PARSE_TPID_PROFILE_INFO_SET_TPID_PROFILE_INFO_SET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_PARSE_TPID_PROFILE_INFO_SET_TPID_PROFILE_INFO_SET_TPID_PROFILE_NDX_ID, 
    "tpid_profile_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  tpid_profile_ndx:\n\r"
    "  TPID Profile ID. Range: PetraB: 0 - 3. T20E: 0 - 7.	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_parse tpid_profile_info_set tpid_profile_ndx 0 type 0 index 0\n\r"
    "  type 0 index 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_LLP_PARSE_TPID_PROFILE_INFO_SET_TPID_PROFILE_INFO_SET_ID), 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_PARSE_TPID_PROFILE_INFO_SET_TPID_PROFILE_INFO_SET_TPID_PROFILE_INFO_TPID2_TYPE_ID, 
    "type2", 
    (PARAM_VAL_RULES *)&SOC_PPD_SAND_PP_VLAN_TAG_TYPE_rule[0], 
    (sizeof(SOC_PPD_SAND_PP_VLAN_TAG_TYPE_rule) / sizeof(SOC_PPD_SAND_PP_VLAN_TAG_TYPE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  tpid_profile_info.tpid2.type:\n\r"
    "  T20E only.Is C-tag or S-Tag. S-tag composed of TPID, PCP, DEI and VID. C-tag\n\r"
    "  composed of TPID, UP, CFI and VID.For Petra-B has to be NONE and user may use\n\r"
    "  soc_ppd_llp_parse_packet_format_info_set() to set the TPID type S, C ,etc...	 \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_parse tpid_profile_info_set tpid_profile_ndx 0 type 0 index 0\n\r"
    "  type 0 index 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_LLP_PARSE_TPID_PROFILE_INFO_SET_TPID_PROFILE_INFO_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_PARSE_TPID_PROFILE_INFO_SET_TPID_PROFILE_INFO_SET_TPID_PROFILE_INFO_TPID2_INDEX_ID, 
    "index2", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  tpid_profile_info.tpid2.index:\n\r"
    "  Selects one of four global TPIDs. Used to parse the VLAN Tags in the\n\r"
    "  ingress/egress and to construct the VLAN Tags in the egress. Range: 0 - 3.	 \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_parse tpid_profile_info_set tpid_profile_ndx 0 type 0 index 0\n\r"
    "  type 0 index 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_LLP_PARSE_TPID_PROFILE_INFO_SET_TPID_PROFILE_INFO_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_PARSE_TPID_PROFILE_INFO_SET_TPID_PROFILE_INFO_SET_TPID_PROFILE_INFO_TPID1_TYPE_ID, 
    "type1", 
    (PARAM_VAL_RULES *)&SOC_PPD_SAND_PP_VLAN_TAG_TYPE_rule[0], 
    (sizeof(SOC_PPD_SAND_PP_VLAN_TAG_TYPE_rule) / sizeof(SOC_PPD_SAND_PP_VLAN_TAG_TYPE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  tpid_profile_info.tpid1.type:\n\r"
    "  T20E only.Is C-tag or S-Tag. S-tag composed of TPID, PCP, DEI and VID. C-tag\n\r"
    "  composed of TPID, UP, CFI and VID.For Petra-B has to be NONE and user may use\n\r"
    "  soc_ppd_llp_parse_packet_format_info_set() to set the TPID type S, C ,etc...	 \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_parse tpid_profile_info_set tpid_profile_ndx 0 type 0 index 0\n\r"
    "  type 0 index 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_LLP_PARSE_TPID_PROFILE_INFO_SET_TPID_PROFILE_INFO_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_PARSE_TPID_PROFILE_INFO_SET_TPID_PROFILE_INFO_SET_TPID_PROFILE_INFO_TPID1_INDEX_ID, 
    "index1", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  tpid_profile_info.tpid1.index:\n\r"
    "  Selects one of four global TPIDs. Used to parse the VLAN Tags in the\n\r"
    "  ingress/egress and to construct the VLAN Tags in the egress. Range: 0 - 3.	 \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_parse tpid_profile_info_set tpid_profile_ndx 0 type 0 index 0\n\r"
    "  type 0 index 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_LLP_PARSE_TPID_PROFILE_INFO_SET_TPID_PROFILE_INFO_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_PARSE_TPID_PROFILE_INFO_GET_TPID_PROFILE_INFO_GET_ID, 
    "tpid_profile_info_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Sets the TPID profile selection of two TPIDs from the Global TPIDs.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_parse tpid_profile_info_get tpid_profile_ndx 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_LLP_PARSE_TPID_PROFILE_INFO_GET_TPID_PROFILE_INFO_GET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_PARSE_TPID_PROFILE_INFO_GET_TPID_PROFILE_INFO_GET_TPID_PROFILE_NDX_ID, 
    "tpid_profile_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  tpid_profile_ndx:\n\r"
    "  TPID Profile ID. Range: PetraB: 0 - 3. T20E: 0 - 7.	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_parse tpid_profile_info_get tpid_profile_ndx 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_LLP_PARSE_TPID_PROFILE_INFO_GET_TPID_PROFILE_INFO_GET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_PARSE_PORT_PROFILE_TO_TPID_PROFILE_MAP_SET_PORT_PROFILE_TO_TPID_PROFILE_MAP_SET_ID, 
    "port_profile_to_tpid_profile_map_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Maps from Port profile to TPID Profile.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_parse port_profile_to_tpid_profile_map_set port_profile_ndx 0\n\r"
    "  tpid_profile_id 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_LLP_PARSE_PORT_PROFILE_TO_TPID_PROFILE_MAP_SET_PORT_PROFILE_TO_TPID_PROFILE_MAP_SET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_PARSE_PORT_PROFILE_TO_TPID_PROFILE_MAP_SET_PORT_PROFILE_TO_TPID_PROFILE_MAP_SET_PORT_PROFILE_NDX_ID, 
    "port_profile_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  port_profile_ndx:\n\r"
    "  Port Profile ID. Range 0 - 7. set by soc_ppd_port_info_set().	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_parse port_profile_to_tpid_profile_map_set port_profile_ndx 0\n\r"
    "  tpid_profile_id 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_LLP_PARSE_PORT_PROFILE_TO_TPID_PROFILE_MAP_SET_PORT_PROFILE_TO_TPID_PROFILE_MAP_SET_ID), 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_PARSE_PORT_PROFILE_TO_TPID_PROFILE_MAP_SET_PORT_PROFILE_TO_TPID_PROFILE_MAP_SET_TPID_PROFILE_ID_ID, 
    "tpid_profile_id", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  tpid_profile_id:\n\r"
    "  TPID Profile ID. Used for packet parsing/editing.Range: PetraB: 0 - 3. T20E:\n\r"
    "  0 - 7.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_parse port_profile_to_tpid_profile_map_set port_profile_ndx 0\n\r"
    "  tpid_profile_id 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_LLP_PARSE_PORT_PROFILE_TO_TPID_PROFILE_MAP_SET_PORT_PROFILE_TO_TPID_PROFILE_MAP_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_PARSE_PORT_PROFILE_TO_TPID_PROFILE_MAP_GET_PORT_PROFILE_TO_TPID_PROFILE_MAP_GET_ID, 
    "port_profile_to_tpid_profile_map_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Maps from Port profile to TPID Profile.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_parse port_profile_to_tpid_profile_map_get port_profile_ndx 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_LLP_PARSE_PORT_PROFILE_TO_TPID_PROFILE_MAP_GET_PORT_PROFILE_TO_TPID_PROFILE_MAP_GET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_PARSE_PORT_PROFILE_TO_TPID_PROFILE_MAP_GET_PORT_PROFILE_TO_TPID_PROFILE_MAP_GET_PORT_PROFILE_NDX_ID, 
    "port_profile_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  port_profile_ndx:\n\r"
    "  Port Profile ID. Range 0 - 7. set by soc_ppd_port_info_set().	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_parse port_profile_to_tpid_profile_map_get port_profile_ndx 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_LLP_PARSE_PORT_PROFILE_TO_TPID_PROFILE_MAP_GET_PORT_PROFILE_TO_TPID_PROFILE_MAP_GET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_PARSE_PACKET_FORMAT_INFO_SET_PACKET_FORMAT_INFO_SET_ID, 
    "packet_format_info_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Given the port profile and the parsing information determine: - Whether this\n\r"
    "  packet format accepted or denied. - The tag structure of the packet, i.e.\n\r"
    "  what vlan tags exist on the packet\n\r"
    "  (S-tag, S-C-tag, etc...).\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_parse packet_format_info_set port_profile_ndx 0 is_outer_prio 0\n\r"
    "  inner_tpid 0 outer_tpid 0 dflt_edit_pcp_profile 0 dlft_edit_command_id 0\n\r"
    "  priority_tag_type 0 tag_format 0 action_trap_code 0X00\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_LLP_PARSE_PACKET_FORMAT_INFO_SET_PACKET_FORMAT_INFO_SET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_PARSE_PACKET_FORMAT_INFO_SET_PACKET_FORMAT_INFO_SET_PORT_PROFILE_NDX_ID, 
    "port_profile_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  port_profile_ndx:\n\r"
    "  Port Profile ID. Range 0 - 7. Set by soc_ppd_port_info_set().	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_parse packet_format_info_set port_profile_ndx 0 is_outer_prio 0\n\r"
    "  inner_tpid 0 outer_tpid 0 dflt_edit_pcp_profile 0 dlft_edit_command_id 0\n\r"
    "  priority_tag_type 0 tag_format 0 action_trap_code 0X00\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_LLP_PARSE_PACKET_FORMAT_INFO_SET_PACKET_FORMAT_INFO_SET_ID), 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_PARSE_PACKET_FORMAT_INFO_SET_PACKET_FORMAT_INFO_SET_PARSE_KEY_IS_OUTER_PRIO_ID, 
    "is_outer_prio", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  parse_key.is_outer_prio:\n\r"
    "  Set to TRUE to indicate that the outer Vlan-tag is priority-tag i.e. VLAN tag\n\r"
    "  with VLAN ID equal to 0.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_parse packet_format_info_set port_profile_ndx 0 is_outer_prio 0\n\r"
    "  inner_tpid 0 outer_tpid 0 dflt_edit_pcp_profile 0 dlft_edit_command_id 0\n\r"
    "  priority_tag_type 0 tag_format 0 action_trap_code 0X00\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_LLP_PARSE_PACKET_FORMAT_INFO_SET_PACKET_FORMAT_INFO_SET_ID), 
    4, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_PARSE_PACKET_FORMAT_INFO_SET_PACKET_FORMAT_INFO_SET_PARSE_KEY_INNER_TPID_ID, 
    "inner_tpid", 
    (PARAM_VAL_RULES *)&SOC_PPC_LLP_PARSE_TPID_INDEX_rule[0], 
    (sizeof(SOC_PPC_LLP_PARSE_TPID_INDEX_rule) / sizeof(SOC_PPC_LLP_PARSE_TPID_INDEX_rule[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  parse_key.inner_tpid:\n\r"
    "  Indicates what is the inner TPID of the packet (tpid1, tpid2 or none).\n\r"
    "  Relevant only for double tagged packets (when outer-tpid is note none)\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_parse packet_format_info_set port_profile_ndx 0 is_outer_prio 0\n\r"
    "  inner_tpid 0 outer_tpid 0 dflt_edit_pcp_profile 0 dlft_edit_command_id 0\n\r"
    "  priority_tag_type 0 tag_format 0 action_trap_code 0X00\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_LLP_PARSE_PACKET_FORMAT_INFO_SET_PACKET_FORMAT_INFO_SET_ID), 
    5, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_PARSE_PACKET_FORMAT_INFO_SET_PACKET_FORMAT_INFO_SET_PARSE_KEY_OUTER_TPID_ID, 
    "outer_tpid", 
    (PARAM_VAL_RULES *)&SOC_PPC_LLP_PARSE_TPID_INDEX_rule[0], 
    (sizeof(SOC_PPC_LLP_PARSE_TPID_INDEX_rule) / sizeof(SOC_PPC_LLP_PARSE_TPID_INDEX_rule[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  parse_key.outer_tpid:\n\r"
    "  Indicates what is the outer TPID of the packet (tpid1, tpid2 or none). Range ...\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_parse packet_format_info_set port_profile_ndx 0 is_outer_prio 0\n\r"
    "  inner_tpid 0 outer_tpid 0 dflt_edit_pcp_profile 0 dlft_edit_command_id 0\n\r"
    "  priority_tag_type 0 tag_format 0 action_trap_code 0X00\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_LLP_PARSE_PACKET_FORMAT_INFO_SET_PACKET_FORMAT_INFO_SET_ID), 
    6, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_PARSE_PACKET_FORMAT_INFO_SET_PACKET_FORMAT_INFO_SET_FORMAT_INFO_DFLT_EDIT_PCP_PROFILE_ID, 
    "dflt_edit_pcp_profile", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  format_info.dflt_edit_pcp_profile:\n\r"
    "  Default PCP profile, used during ingress VLAN editing phase, to set the\n\r"
    "  PCP/UP of the edited VLAN headers.See soc_ppd_ing_vlan_edit_command_info_set\n\r"
    "  ().This is the default PCP profile packet will be edited according if AC\n\r"
    "  lookup fails, otherwise the pcp-profile will be set according to AC.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_parse packet_format_info_set port_profile_ndx 0 is_outer_prio 0\n\r"
    "  inner_tpid 0 outer_tpid 0 dflt_edit_pcp_profile 0 dlft_edit_command_id 0\n\r"
    "  priority_tag_type 0 tag_format 0 action_trap_code 0X00\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_LLP_PARSE_PACKET_FORMAT_INFO_SET_PACKET_FORMAT_INFO_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_PARSE_PACKET_FORMAT_INFO_SET_PACKET_FORMAT_INFO_SET_FORMAT_INFO_DLFT_EDIT_COMMAND_ID_ID, 
    "dlft_edit_command_id", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  format_info.dlft_edit_command_id:\n\r"
    "  Default Ingress VLAN edit command ID:Handle used to set the Vlan edit command\n\r"
    "  information. See soc_ppd_lif_ing_vlan_edit_command_info_set()This is the default\n\r"
    "  command packet will be edited according if AC lookup fails, otherwise the\n\r"
    "  edit-command will be set according to AC.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_parse packet_format_info_set port_profile_ndx 0 is_outer_prio 0\n\r"
    "  inner_tpid 0 outer_tpid 0 dflt_edit_pcp_profile 0 dlft_edit_command_id 0\n\r"
    "  priority_tag_type 0 tag_format 0 action_trap_code 0X00\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_LLP_PARSE_PACKET_FORMAT_INFO_SET_PACKET_FORMAT_INFO_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_PARSE_PACKET_FORMAT_INFO_SET_PACKET_FORMAT_INFO_SET_FORMAT_INFO_PRIORITY_TAG_TYPE_ID, 
    "priority_tag_type", 
    (PARAM_VAL_RULES *)&SOC_PPD_SAND_PP_VLAN_TAG_TYPE_rule[0], 
    (sizeof(SOC_PPD_SAND_PP_VLAN_TAG_TYPE_rule) / sizeof(SOC_PPD_SAND_PP_VLAN_TAG_TYPE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  format_info.priority_tag_type:\n\r"
    "  Should priority Tag considered as C-Tag or S-tag. Range:\n\r"
    "  SOC_SAND_PP_VLAN_TAG_TYPE_NONE - SOC_SAND_PP_VLAN_TAG_TYPE_STAG. Relevant only when\n\r"
    "  is_outer_prio = TRUE, otherwise should be set to SOC_SAND_PP_VLAN_TAG_TYPE_NONE.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_parse packet_format_info_set port_profile_ndx 0 is_outer_prio 0\n\r"
    "  inner_tpid 0 outer_tpid 0 dflt_edit_pcp_profile 0 dlft_edit_command_id 0\n\r"
    "  priority_tag_type 0 tag_format 0 action_trap_code 0X00\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_LLP_PARSE_PACKET_FORMAT_INFO_SET_PACKET_FORMAT_INFO_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_PARSE_PACKET_FORMAT_INFO_SET_PACKET_FORMAT_INFO_SET_FORMAT_INFO_TAG_FORMAT_ID, 
    "tag_format", 
    (PARAM_VAL_RULES *)&SOC_PPD_SAND_PP_ETHERNET_FRAME_VLAN_FORMAT_rule[0], 
    (sizeof(SOC_PPD_SAND_PP_ETHERNET_FRAME_VLAN_FORMAT_rule) / sizeof(SOC_PPD_SAND_PP_ETHERNET_FRAME_VLAN_FORMAT_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  format_info.tag_format:\n\r"
    "  VLAN format of the packet, Identifies the VLAN tags structure on the packet.\n\r"
    "  Used by vlan editing see soc_ppd_lif_ing_vlan_edit_command_id_set().Besides\n\r"
    "  affects the initial cos assignment:- when outer tag is of type 'S' then the\n\r"
    "  DP value consider the DEI from the tag.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_parse packet_format_info_set port_profile_ndx 0 is_outer_prio 0\n\r"
    "  inner_tpid 0 outer_tpid 0 dflt_edit_pcp_profile 0 dlft_edit_command_id 0\n\r"
    "  priority_tag_type 0 tag_format 0 action_trap_code 0X00\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_LLP_PARSE_PACKET_FORMAT_INFO_SET_PACKET_FORMAT_INFO_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_PARSE_PACKET_FORMAT_INFO_SET_PACKET_FORMAT_INFO_SET_FORMAT_INFO_ACTION_TRAP_CODE_ID, 
    "action_trap_code", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals/*SOC_PPC_TRAP_CODE_rule*/[0], 
    (sizeof(soc_ppd_api_free_vals/*SOC_PPC_TRAP_CODE_rule*/) / sizeof(soc_ppd_api_free_vals/*SOC_PPC_TRAP_CODE_rule*/[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  format_info.action_trap_code:\n\r"
    "  Trap-code according to which to process/drop/forward the packet.Use trap code\n\r"
    "  SOC_PPC_TRAP_CODE_ACCEPTABLE_FRAME_TYPE_DROP to drop packet.Use trap code\n\r"
    "  SOC_PPC_TRAP_CODE_ACCEPTABLE_FRAME_TYPE_ACCEPT to accept packet.use\n\r"
    "  SOC_PPC_TRAP_CODE_ACCEPTABLE_FRAME_TYPE_CUSTOM1 and\n\r"
    "  SOC_PPC_TRAP_CODE_ACCEPTABLE_FRAME_TYPE_CUSTOM2\n\r"
    "  for custom actions, to configure what action to perform use\n\r"
    "  soc_ppd_trap_frwrd_profile_info_set()\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_parse packet_format_info_set port_profile_ndx 0 is_outer_prio 0\n\r"
    "  inner_tpid 0 outer_tpid 0 dflt_edit_pcp_profile 0 dlft_edit_command_id 0\n\r"
    "  priority_tag_type 0 tag_format 0 action_trap_code 0X00\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_LLP_PARSE_PACKET_FORMAT_INFO_SET_PACKET_FORMAT_INFO_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_PARSE_PACKET_FORMAT_INFO_GET_PACKET_FORMAT_INFO_GET_ID, 
    "packet_format_info_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Given the port profile and the parsing information determine: - Whether this\n\r"
    "  packet format accepted or denied. - The tag structure of the packet, i.e.\n\r"
    "  what vlan tags exist on the packet\n\r"
    "  (S-tag, S-C-tag, etc...).\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_parse packet_format_info_get port_profile_ndx 0 is_outer_prio 0\n\r"
    "  inner_tpid 0 outer_tpid 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_LLP_PARSE_PACKET_FORMAT_INFO_GET_PACKET_FORMAT_INFO_GET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_PARSE_PACKET_FORMAT_INFO_GET_PACKET_FORMAT_INFO_GET_PORT_PROFILE_NDX_ID, 
    "port_profile_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  port_profile_ndx:\n\r"
    "  Port Profile ID. Range 0 - 7. Set by soc_ppd_port_info_set().	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_parse packet_format_info_get port_profile_ndx 0 is_outer_prio 0\n\r"
    "  inner_tpid 0 outer_tpid 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_LLP_PARSE_PACKET_FORMAT_INFO_GET_PACKET_FORMAT_INFO_GET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_PARSE_PACKET_FORMAT_INFO_GET_PACKET_FORMAT_INFO_GET_PARSE_KEY_IS_OUTER_PRIO_ID, 
    "is_outer_prio", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  parse_key.is_outer_prio:\n\r"
    "  Set to TRUE to indicate that the outer Vlan-tag is priority-tag i.e. VLAN tag\n\r"
    "  with VLAN ID equal to 0.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_parse packet_format_info_get port_profile_ndx 0 is_outer_prio 0\n\r"
    "  inner_tpid 0 outer_tpid 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_LLP_PARSE_PACKET_FORMAT_INFO_GET_PACKET_FORMAT_INFO_GET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_PARSE_PACKET_FORMAT_INFO_GET_PACKET_FORMAT_INFO_GET_PARSE_KEY_INNER_TPID_ID, 
    "inner_tpid", 
    (PARAM_VAL_RULES *)&SOC_PPC_LLP_PARSE_TPID_INDEX_rule[0], 
    (sizeof(SOC_PPC_LLP_PARSE_TPID_INDEX_rule) / sizeof(SOC_PPC_LLP_PARSE_TPID_INDEX_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  parse_key.inner_tpid:\n\r"
    "  Indicates what is the inner TPID of the packet (tpid1, tpid2 or none).\n\r"
    "  Relevant only for double tagged packets (when outer-tpid is note none)\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_parse packet_format_info_get port_profile_ndx 0 is_outer_prio 0\n\r"
    "  inner_tpid 0 outer_tpid 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_LLP_PARSE_PACKET_FORMAT_INFO_GET_PACKET_FORMAT_INFO_GET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_PARSE_PACKET_FORMAT_INFO_GET_PACKET_FORMAT_INFO_GET_PARSE_KEY_OUTER_TPID_ID, 
    "outer_tpid", 
    (PARAM_VAL_RULES *)&SOC_PPC_LLP_PARSE_TPID_INDEX_rule[0], 
    (sizeof(SOC_PPC_LLP_PARSE_TPID_INDEX_rule) / sizeof(SOC_PPC_LLP_PARSE_TPID_INDEX_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  parse_key.outer_tpid:\n\r"
    "  Indicates what is the outer TPID of the packet (tpid1, tpid2 or none). Range ...\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_parse packet_format_info_get port_profile_ndx 0 is_outer_prio 0\n\r"
    "  inner_tpid 0 outer_tpid 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_LLP_PARSE_PACKET_FORMAT_INFO_GET_PACKET_FORMAT_INFO_GET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
    
  { 
    SOC_PARAM_PPD_API_LLP_PARSE_ID, 
    "llp_parse", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "",
    "", 
    "",
    BIT_UI_16_RNG(SOC_FUN_PPD_API_LLP_PARSE_FIRST_ID,SOC_FUN_PPD_API_LLP_PARSE_LAST_ID), 
    1, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
#endif /* } llp_parse*/
#ifdef UI_LLP_SA_AUTH/* { llp_sa_auth*/
  { 
    SOC_PARAM_PPD_LLP_SA_AUTH_PORT_INFO_SET_PORT_INFO_SET_ID, 
    "port_info_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Sets port information for SA authentication, including whether to enable SA\n\r"
    "  authentication on this port.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_sa_auth port_info_set local_port_ndx 0 sa_auth_enable 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_LLP_SA_AUTH_PORT_INFO_SET_PORT_INFO_SET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_SA_AUTH_PORT_INFO_SET_PORT_INFO_SET_LOCAL_PORT_NDX_ID, 
    "local_port_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  local_port_ndx:\n\r"
    "  Local port ID.	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_sa_auth port_info_set local_port_ndx 0 sa_auth_enable 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_LLP_SA_AUTH_PORT_INFO_SET_PORT_INFO_SET_ID), 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_SA_AUTH_PORT_INFO_SET_PORT_INFO_SET_PORT_AUTH_INFO_SA_AUTH_ENABLE_ID, 
    "sa_auth_enable", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  port_auth_info.sa_auth_enable:\n\r"
    "  Whether to enable MAC SA authentication over packets entering the device from\n\r"
    "  this port.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_sa_auth port_info_set local_port_ndx 0 sa_auth_enable 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_LLP_SA_AUTH_PORT_INFO_SET_PORT_INFO_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_SA_AUTH_PORT_INFO_GET_PORT_INFO_GET_ID, 
    "port_info_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Sets port information for SA authentication, including whether to enable SA\n\r"
    "  authentication on this port.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_sa_auth port_info_get local_port_ndx 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_LLP_SA_AUTH_PORT_INFO_GET_PORT_INFO_GET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_SA_AUTH_PORT_INFO_GET_PORT_INFO_GET_LOCAL_PORT_NDX_ID, 
    "local_port_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  local_port_ndx:\n\r"
    "  Local port ID.	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_sa_auth port_info_get local_port_ndx 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_LLP_SA_AUTH_PORT_INFO_GET_PORT_INFO_GET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_SA_AUTH_MAC_INFO_SET_MAC_INFO_SET_ID, 
    "mac_info_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set authentication information for a MAC address, including the expected\n\r"
    "  VLAN/ports the MAC address has to come with.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_sa_auth mac_info_set mac_address_key 0 sys_id 0 sys_port_type 0\n\r"
    "  expect_tag_vid 0 tagged_only 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_LLP_SA_AUTH_MAC_INFO_SET_MAC_INFO_SET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_SA_AUTH_MAC_INFO_SET_MAC_INFO_SET_MAC_ADDRESS_KEY_ID, 
    "mac_address_key", 
    (PARAM_VAL_RULES *)&soc_ppd_api_mac_addr_vals[0], 
    (sizeof(soc_ppd_api_mac_addr_vals) / sizeof(soc_ppd_api_mac_addr_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  mac_address_key:\n\r"
    "  MAC address to set authentication over it.	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_sa_auth mac_info_set mac_address_key 0 sys_id 0 sys_port_type 0\n\r"
    "  expect_tag_vid 0 tagged_only 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_LLP_SA_AUTH_MAC_INFO_SET_MAC_INFO_SET_ID), 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_SA_AUTH_MAC_INFO_SET_MAC_INFO_SET_MAC_AUTH_INFO_EXPECT_SYSTEM_PORT_SYS_ID_ID, 
    "sys_id", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  mac_auth_info.expect_system_port.sys_id:\n\r"
    "  The system port value, according to the type (Single or LAG).For LAG the\n\r"
    "  value is the group ID.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_sa_auth mac_info_set mac_address_key 0 sys_id 0 sys_port_type 0\n\r"
    "  expect_tag_vid 0 tagged_only 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_LLP_SA_AUTH_MAC_INFO_SET_MAC_INFO_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_SA_AUTH_MAC_INFO_SET_MAC_INFO_SET_MAC_AUTH_INFO_EXPECT_SYSTEM_PORT_SYS_PORT_TYPE_ID, 
    "sys_port_type", 
    (PARAM_VAL_RULES *)&SOC_PPD_SAND_PP_SYS_PORT_TYPE_rule[0], 
    (sizeof(SOC_PPD_SAND_PP_SYS_PORT_TYPE_rule) / sizeof(SOC_PPD_SAND_PP_SYS_PORT_TYPE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  mac_auth_info.expect_system_port.sys_port_type:\n\r"
    "  The system port type single/LAG.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_sa_auth mac_info_set mac_address_key 0 sys_id 0 sys_port_type 0\n\r"
    "  expect_tag_vid 0 tagged_only 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_LLP_SA_AUTH_MAC_INFO_SET_MAC_INFO_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_SA_AUTH_MAC_INFO_SET_MAC_INFO_SET_MAC_AUTH_INFO_EXPECT_TAG_VID_ID, 
    "expect_tag_vid", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  mac_auth_info.expect_tag_vid:\n\r"
    "  Expected outer VLAN ID. If the outer VID of the incoming packet is not equal\n\r"
    "  to this, the VID check fails and proper action is taken.\n\r"
    "  Set to SOC_PPC_LLP_SA_AUTH_ACCEPT_ALL_VIDS in order to skip this check.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_sa_auth mac_info_set mac_address_key 0 sys_id 0 sys_port_type 0\n\r"
    "  expect_tag_vid 0 tagged_only 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_LLP_SA_AUTH_MAC_INFO_SET_MAC_INFO_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_SA_AUTH_MAC_INFO_SET_MAC_INFO_SET_MAC_AUTH_INFO_TAGGED_ONLY_ID, 
    "tagged_only", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  mac_auth_info.tagged_only:\n\r"
    "  If TRUE and packets are untagged, then the Authentication test fails and\n\r"
    "  proper action is taken.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_sa_auth mac_info_set mac_address_key 0 sys_id 0 sys_port_type 0\n\r"
    "  expect_tag_vid 0 tagged_only 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_LLP_SA_AUTH_MAC_INFO_SET_MAC_INFO_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_SA_AUTH_MAC_INFO_SET_MAC_INFO_SET_ENABLE_ID, 
    "enable", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  enable:\n\r"
    "  Set to TRUE to add the entry, and to FALSE to remove the entry from the DB.	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_sa_auth mac_info_set mac_address_key 0 sys_id 0 sys_port_type 0\n\r"
    "  expect_tag_vid 0 tagged_only 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_LLP_SA_AUTH_MAC_INFO_SET_MAC_INFO_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_SA_AUTH_MAC_INFO_GET_MAC_INFO_GET_ID, 
    "mac_info_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set authentication information for a MAC address, including the expected\n\r"
    "  VLAN/ports the MAC address has to come with.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_sa_auth mac_info_get mac_address_key 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_LLP_SA_AUTH_MAC_INFO_GET_MAC_INFO_GET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_SA_AUTH_MAC_INFO_GET_MAC_INFO_GET_MAC_ADDRESS_KEY_ID, 
    "mac_address_key", 
    (PARAM_VAL_RULES *)&soc_ppd_api_mac_addr_vals[0], 
    (sizeof(soc_ppd_api_mac_addr_vals) / sizeof(soc_ppd_api_mac_addr_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  mac_address_key:\n\r"
    "  MAC address to set authentication over it.	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_sa_auth mac_info_get mac_address_key 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_LLP_SA_AUTH_MAC_INFO_GET_MAC_INFO_GET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_SA_AUTH_GET_BLOCK_GET_BLOCK_ID, 
    "get_block", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Get SA authentation information according to source MAC address.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_sa_auth get_block vid 0 sys_id 0 sys_port_type 0 rule_type 0x1\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_LLP_SA_AUTH_GET_BLOCK_GET_BLOCK_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_SA_AUTH_GET_BLOCK_GET_BLOCK_RULE_VID_ID, 
    "vid", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  rule.vid:\n\r"
    "  VID value to match, use SOC_PPD_IGNORE_VAL to not compare to VID value. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_sa_auth get_block vid 0 sys_id 0 sys_port_type 0 rule_type 0x1\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_LLP_SA_AUTH_GET_BLOCK_GET_BLOCK_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_SA_AUTH_GET_BLOCK_GET_BLOCK_RULE_PORT_SYS_ID_ID, 
    "sys_id", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  rule.port.sys_id:\n\r"
    "  The system port value, according to the type (Single or LAG).For LAG the\n\r"
    "  value is the group ID.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_sa_auth get_block vid 0 sys_id 0 sys_port_type 0 rule_type 0x1\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_LLP_SA_AUTH_GET_BLOCK_GET_BLOCK_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_SA_AUTH_GET_BLOCK_GET_BLOCK_RULE_PORT_SYS_PORT_TYPE_ID, 
    "sys_port_type", 
    (PARAM_VAL_RULES *)&SOC_PPD_SAND_PP_SYS_PORT_TYPE_rule[0], 
    (sizeof(SOC_PPD_SAND_PP_SYS_PORT_TYPE_rule) / sizeof(SOC_PPD_SAND_PP_SYS_PORT_TYPE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  rule.port.sys_port_type:\n\r"
    "  The system port type single/LAG.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_sa_auth get_block vid 0 sys_id 0 sys_port_type 0 rule_type 0x1\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_LLP_SA_AUTH_GET_BLOCK_GET_BLOCK_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_SA_AUTH_GET_BLOCK_GET_BLOCK_RULE_RULE_TYPE_ID, 
    "rule_type", 
    (PARAM_VAL_RULES *)&SOC_PPC_LLP_SA_AUTH_MATCH_RULE_TYPE_rule[0], 
    (sizeof(SOC_PPC_LLP_SA_AUTH_MATCH_RULE_TYPE_rule) / sizeof(SOC_PPC_LLP_SA_AUTH_MATCH_RULE_TYPE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  rule.rule_type:\n\r"
    "  Rule type specifies which entries to return\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_sa_auth get_block vid 0 sys_id 0 sys_port_type 0 rule_type 0x1\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_LLP_SA_AUTH_GET_BLOCK_GET_BLOCK_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_API_LLP_SA_AUTH_ID, 
    "llp_sa_auth", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "",
    "", 
    "",
    BIT_UI_16_RNG(SOC_FUN_PPD_API_LLP_SA_AUTH_FIRST_ID,SOC_FUN_PPD_API_LLP_SA_AUTH_LAST_ID), 
    1, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
#endif /* } llp_sa_auth*/
#ifdef UI_LLP_VID_ASSIGN/* { llp_vid_assign*/
  { 
    SOC_PARAM_PPD_LLP_VID_ASSIGN_PORT_INFO_SET_PORT_INFO_SET_ID, 
    "port_info_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Sets port information for VID assignment, including PVID and which assignment\n\r"
    "  mechanism to enable for this port.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_vid_assign port_info_set local_port_ndx 0 enable_protocol 0\n\r"
    "  enable_subnet_ip 0 ignore_incoming_tag 0 pvid 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_LLP_VID_ASSIGN_PORT_INFO_SET_PORT_INFO_SET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_VID_ASSIGN_PORT_INFO_SET_PORT_INFO_SET_LOCAL_PORT_NDX_ID, 
    "local_port_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  local_port_ndx:\n\r"
    "  Local port ID.	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_vid_assign port_info_set local_port_ndx 0 enable_protocol 0\n\r"
    "  enable_subnet_ip 0 ignore_incoming_tag 0 pvid 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_LLP_VID_ASSIGN_PORT_INFO_SET_PORT_INFO_SET_ID), 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_VID_ASSIGN_PORT_INFO_SET_PORT_INFO_SET_PORT_VID_ASSIGN_INFO_ENABLE_PROTOCOL_ID, 
    "enable_protocol", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  port_vid_assign_info.enable_protocol:\n\r"
    "  Enable VID resolution according to L2 protocol\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_vid_assign port_info_set local_port_ndx 0 enable_protocol 0\n\r"
    "  enable_subnet_ip 0 ignore_incoming_tag 0 pvid 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_LLP_VID_ASSIGN_PORT_INFO_SET_PORT_INFO_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_VID_ASSIGN_PORT_INFO_SET_PORT_INFO_SET_PORT_VID_ASSIGN_INFO_ENABLE_SUBNET_IP_ID, 
    "enable_subnet_ip", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  port_vid_assign_info.enable_subnet_ip:\n\r"
    "  Enable VID resolution according to IP subnet\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_vid_assign port_info_set local_port_ndx 0 enable_protocol 0\n\r"
    "  enable_subnet_ip 0 ignore_incoming_tag 0 pvid 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_LLP_VID_ASSIGN_PORT_INFO_SET_PORT_INFO_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_VID_ASSIGN_PORT_INFO_SET_PORT_INFO_SET_PORT_VID_ASSIGN_INFO_ENABLE_SA_BASED_ID,
    "enable_sa_based", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  port_vid_assign_info.enable_sa_based:\n\r"
    "  Enable VID resolution according to SA\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_vid_assign port_info_set local_port_ndx 0 enable_protocol 0\n\r"
    "  enable_subnet_ip 0 ignore_incoming_tag 0 pvid 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_LLP_VID_ASSIGN_PORT_INFO_SET_PORT_INFO_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_VID_ASSIGN_PORT_INFO_SET_PORT_INFO_SET_PORT_VID_ASSIGN_INFO_IGNORE_INCOMING_TAG_ID, 
    "ignore_incoming_tag", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  port_vid_assign_info.ignore_incoming_tag:\n\r"
    "  If TRUE, then ignore VID coming in the packet tag. Note that for SA-based,\n\r"
    "  assignment of whether to ignore (override) the VID of the packet is per entry\n\r"
    "  (MAC) attribute-See soc_ppd_llp_vid_assign_mac_based_set().\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_vid_assign port_info_set local_port_ndx 0 enable_protocol 0\n\r"
    "  enable_subnet_ip 0 ignore_incoming_tag 0 pvid 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_LLP_VID_ASSIGN_PORT_INFO_SET_PORT_INFO_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_VID_ASSIGN_PORT_INFO_SET_PORT_INFO_SET_PORT_VID_ASSIGN_INFO_PVID_ID, 
    "pvid", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  port_vid_assign_info.pvid:\n\r"
    "  Port default VLAN ID. Range: 0 - 4095.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_vid_assign port_info_set local_port_ndx 0 enable_protocol 0\n\r"
    "  enable_subnet_ip 0 ignore_incoming_tag 0 pvid 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_LLP_VID_ASSIGN_PORT_INFO_SET_PORT_INFO_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_VID_ASSIGN_PORT_INFO_GET_PORT_INFO_GET_ID, 
    "port_info_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Sets port information for VID assignment, including PVID and which assignment\n\r"
    "  mechanism to enable for this port.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_vid_assign port_info_get local_port_ndx 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_LLP_VID_ASSIGN_PORT_INFO_GET_PORT_INFO_GET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_VID_ASSIGN_PORT_INFO_GET_PORT_INFO_GET_LOCAL_PORT_NDX_ID, 
    "local_port_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  local_port_ndx:\n\r"
    "  Local port ID.	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_vid_assign port_info_get local_port_ndx 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_LLP_VID_ASSIGN_PORT_INFO_GET_PORT_INFO_GET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_VID_ASSIGN_MAC_BASED_ADD_MAC_BASED_ADD_ID, 
    "mac_based_add", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set assignment to VLAN ID according to source MAC address.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_vid_assign mac_based_add mac_address_key 0 override_tagged 0\n\r"
    "  use_for_untagged 0 vid 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_LLP_VID_ASSIGN_MAC_BASED_ADD_MAC_BASED_ADD_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_VID_ASSIGN_MAC_BASED_ADD_MAC_BASED_ADD_MAC_ADDRESS_KEY_ID, 
    "mac_address_key", 
    (PARAM_VAL_RULES *)&soc_ppd_api_mac_addr_vals[0], 
    (sizeof(soc_ppd_api_mac_addr_vals) / sizeof(soc_ppd_api_mac_addr_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  mac_address_key:\n\r"
    "  MAC address, according to which to assign VID.	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_vid_assign mac_based_add mac_address_key 0 override_tagged 0\n\r"
    "  use_for_untagged 0 vid 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_LLP_VID_ASSIGN_MAC_BASED_ADD_MAC_BASED_ADD_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_VID_ASSIGN_MAC_BASED_ADD_MAC_BASED_ADD_MAC_BASED_INFO_OVERRIDE_TAGGED_ID, 
    "override_tagged", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  mac_based_info.override_tagged:\n\r"
    "  If TRUE, then the VID is used when the packet comes tagged and overrides it.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_vid_assign mac_based_add mac_address_key 0 override_tagged 0\n\r"
    "  use_for_untagged 0 vid 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_LLP_VID_ASSIGN_MAC_BASED_ADD_MAC_BASED_ADD_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_VID_ASSIGN_MAC_BASED_ADD_MAC_BASED_ADD_MAC_BASED_INFO_USE_FOR_UNTAGGED_ID, 
    "use_for_untagged", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  mac_based_info.use_for_untagged:\n\r"
    "  If TRUE, then the VID is used when packet comes untagged.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_vid_assign mac_based_add mac_address_key 0 override_tagged 0\n\r"
    "  use_for_untagged 0 vid 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_LLP_VID_ASSIGN_MAC_BASED_ADD_MAC_BASED_ADD_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_VID_ASSIGN_MAC_BASED_ADD_MAC_BASED_ADD_MAC_BASED_INFO_VID_ID, 
    "vid", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  mac_based_info.vid:\n\r"
    "  VLAN ID. Range: 0 - 4095.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_vid_assign mac_based_add mac_address_key 0 override_tagged 0\n\r"
    "  use_for_untagged 0 vid 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_LLP_VID_ASSIGN_MAC_BASED_ADD_MAC_BASED_ADD_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_VID_ASSIGN_MAC_BASED_REMOVE_MAC_BASED_REMOVE_ID, 
    "mac_based_remove", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Remove assignment to VLAN ID according to source MAC address.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_vid_assign mac_based_remove mac_address_key 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_LLP_VID_ASSIGN_MAC_BASED_REMOVE_MAC_BASED_REMOVE_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_VID_ASSIGN_MAC_BASED_REMOVE_MAC_BASED_REMOVE_MAC_ADDRESS_KEY_ID, 
    "mac_address_key", 
    (PARAM_VAL_RULES *)&soc_ppd_api_mac_addr_vals[0], 
    (sizeof(soc_ppd_api_mac_addr_vals) / sizeof(soc_ppd_api_mac_addr_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  mac_address_key:\n\r"
    "  MAC address, according to which to assign the VID.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_vid_assign mac_based_remove mac_address_key 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_LLP_VID_ASSIGN_MAC_BASED_REMOVE_MAC_BASED_REMOVE_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_VID_ASSIGN_MAC_BASED_GET_MAC_BASED_GET_ID, 
    "mac_based_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Get VLAN ID assignment information according to source MAC address.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_vid_assign mac_based_get mac_address_key 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_LLP_VID_ASSIGN_MAC_BASED_GET_MAC_BASED_GET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_VID_ASSIGN_MAC_BASED_GET_MAC_BASED_GET_MAC_ADDRESS_KEY_ID, 
    "mac_address_key", 
    (PARAM_VAL_RULES *)&soc_ppd_api_mac_addr_vals[0], 
    (sizeof(soc_ppd_api_mac_addr_vals) / sizeof(soc_ppd_api_mac_addr_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  mac_address_key:\n\r"
    "  MAC address, according to which to assign VID.	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_vid_assign mac_based_get mac_address_key 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_LLP_VID_ASSIGN_MAC_BASED_GET_MAC_BASED_GET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_VID_ASSIGN_MAC_BASED_GET_BLOCK_MAC_BASED_GET_BLOCK_ID, 
    "mac_based_get_block", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Get VLAN ID assignment information according to source MAC address.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_vid_assign mac_based_get_block vid 0 rule_type 0x4\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_LLP_VID_ASSIGN_MAC_BASED_GET_BLOCK_MAC_BASED_GET_BLOCK_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_VID_ASSIGN_MAC_BASED_GET_BLOCK_MAC_BASED_GET_BLOCK_RULE_VID_ID, 
    "vid", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  rule.vid:\n\r"
    "  VID value to match, use SOC_PPD_IGNORE_VAL to not compare to VID value. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_vid_assign mac_based_get_block vid 0 rule_type 0x4\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_LLP_VID_ASSIGN_MAC_BASED_GET_BLOCK_MAC_BASED_GET_BLOCK_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_VID_ASSIGN_MAC_BASED_GET_BLOCK_MAC_BASED_GET_BLOCK_RULE_RULE_TYPE_ID, 
    "rule_type", 
    (PARAM_VAL_RULES *)&SOC_PPC_LLP_VID_ASSIGN_MATCH_RULE_TYPE_rule[0], 
    (sizeof(SOC_PPC_LLP_VID_ASSIGN_MATCH_RULE_TYPE_rule) / sizeof(SOC_PPC_LLP_VID_ASSIGN_MATCH_RULE_TYPE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  rule.rule_type:\n\r"
    "  Rule type specifies which entries to return\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_vid_assign mac_based_get_block vid 0 rule_type 0x4\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_LLP_VID_ASSIGN_MAC_BASED_GET_BLOCK_MAC_BASED_GET_BLOCK_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_VID_ASSIGN_IPV4_SUBNET_BASED_SET_IPV4_SUBNET_BASED_SET_ID, 
    "ipv4_subnet_based_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set assignment of VLAN ID based on source IPv4 subnet.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_vid_assign ipv4_subnet_based_set entry_ndx 0 prefix_len 0\n\r"
    "  ip_address 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_LLP_VID_ASSIGN_IPV4_SUBNET_BASED_SET_IPV4_SUBNET_BASED_SET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_VID_ASSIGN_IPV4_SUBNET_BASED_SET_IPV4_SUBNET_BASED_SET_ENTRY_NDX_ID, 
    "entry_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  entry_ndx:\n\r"
    "  Index in the subnet table where to write the information. Range: PetraB: 0 -\n\r"
    "  15. T20E: 0 - 23.	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_vid_assign ipv4_subnet_based_set entry_ndx 0 prefix_len 0\n\r"
    "  ip_address 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_LLP_VID_ASSIGN_IPV4_SUBNET_BASED_SET_IPV4_SUBNET_BASED_SET_ID), 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_VID_ASSIGN_IPV4_SUBNET_BASED_SET_IPV4_SUBNET_BASED_SET_SUBNET_PREFIX_LEN_ID, 
    "prefix_len", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  subnet.prefix_len:\n\r"
    "  Number of bits to consider in the IP address starting from the msb. Range: 0\n\r"
    "  - 32.Example for key ip_address 192.168.1.0 and prefix_len 24 would match any\n\r"
    "  IP Address of the form 192.168.1.x\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_vid_assign ipv4_subnet_based_set entry_ndx 0 prefix_len 0\n\r"
    "  ip_address 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_LLP_VID_ASSIGN_IPV4_SUBNET_BASED_SET_IPV4_SUBNET_BASED_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_VID_ASSIGN_IPV4_SUBNET_BASED_SET_IPV4_SUBNET_BASED_SET_SUBNET_IP_ADDRESS_ID, 
    "ip_address", 
    (PARAM_VAL_RULES *)&soc_ppd_api_ip_address_vals[0], 
    (sizeof(soc_ppd_api_ip_address_vals) / sizeof(soc_ppd_api_ip_address_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  subnet.ip_address:\n\r"
    "  Ipv4 address.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_vid_assign ipv4_subnet_based_set entry_ndx 0 prefix_len 0\n\r"
    "  ip_address 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_LLP_VID_ASSIGN_IPV4_SUBNET_BASED_SET_IPV4_SUBNET_BASED_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_VID_ASSIGN_IPV4_SUBNET_BASED_SET_IPV4_SUBNET_BASED_SET_SUBNET_BASED_INFO_VID_IS_VALID_ID, 
    "vid_is_valid", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  subnet_based_info.vid_is_valid:\n\r"
    "  Is the VID valid for this entry. If TRUE, then when there is subnet match,\n\r"
    "  the above VID is taken.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_vid_assign ipv4_subnet_based_set entry_ndx 0 prefix_len 0\n\r"
    "  ip_address 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_LLP_VID_ASSIGN_IPV4_SUBNET_BASED_SET_IPV4_SUBNET_BASED_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_VID_ASSIGN_IPV4_SUBNET_BASED_SET_IPV4_SUBNET_BASED_SET_SUBNET_BASED_INFO_VID_ID, 
    "vid", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  subnet_based_info.vid:\n\r"
    "  VLAN ID. Range: 0 - 4095.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_vid_assign ipv4_subnet_based_set entry_ndx 0 prefix_len 0\n\r"
    "  ip_address 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_LLP_VID_ASSIGN_IPV4_SUBNET_BASED_SET_IPV4_SUBNET_BASED_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_VID_ASSIGN_IPV4_SUBNET_BASED_GET_IPV4_SUBNET_BASED_GET_ID, 
    "ipv4_subnet_based_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set assignment of VLAN ID based on source IPv4 subnet.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_vid_assign ipv4_subnet_based_get entry_ndx 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_LLP_VID_ASSIGN_IPV4_SUBNET_BASED_GET_IPV4_SUBNET_BASED_GET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_VID_ASSIGN_IPV4_SUBNET_BASED_GET_IPV4_SUBNET_BASED_GET_ENTRY_NDX_ID, 
    "entry_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  entry_ndx:\n\r"
    "  Index in the subnet table where to write the information. Range: PetraB: 0 -\n\r"
    "  15. T20E: 0 - 23.	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_vid_assign ipv4_subnet_based_get entry_ndx 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_LLP_VID_ASSIGN_IPV4_SUBNET_BASED_GET_IPV4_SUBNET_BASED_GET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_VID_ASSIGN_PROTOCOL_BASED_SET_PROTOCOL_BASED_SET_ID, 
    "protocol_based_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Sets mapping from Ethernet Type and profile to VID.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_vid_assign protocol_based_set port_profile_ndx 0 ether_type_ndx 0\n\r"
    "  vid_is_valid 0 vid 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_LLP_VID_ASSIGN_PROTOCOL_BASED_SET_PROTOCOL_BASED_SET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_VID_ASSIGN_PROTOCOL_BASED_SET_PROTOCOL_BASED_SET_PORT_PROFILE_NDX_ID, 
    "port_profile_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  port_profile_ndx:\n\r"
    "  Profile for VID assignment (and COS resolution) according to L2 Protocol\n\r"
    "  (Ethernet Type). Profile is determined per port see soc_ppd_port_info_set().\n\r"
    "  Range: 0 - 7.	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_vid_assign protocol_based_set port_profile_ndx 0 ether_type_ndx 0\n\r"
    "  vid_is_valid 0 vid 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_LLP_VID_ASSIGN_PROTOCOL_BASED_SET_PROTOCOL_BASED_SET_ID), 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_VID_ASSIGN_PROTOCOL_BASED_SET_PROTOCOL_BASED_SET_ETHER_TYPE_NDX_ID, 
    "ether_type_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  ether_type_ndx:\n\r"
    "  Ethernet Type, up to 10 different Ethernet Types, including\n\r"
    "  IPv4(0x0800),IPv6(0x86DD),ARP(0x0806),CFM(0x8902), TRILL MPLS(0x8847). Use\n\r"
    "  SOC_PPC_L2_NEXT_PRTCL_TYPE enumeration to refer to these constant values.	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_vid_assign protocol_based_set port_profile_ndx 0 ether_type_ndx 0\n\r"
    "  vid_is_valid 0 vid 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_LLP_VID_ASSIGN_PROTOCOL_BASED_SET_PROTOCOL_BASED_SET_ID), 
    4, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_VID_ASSIGN_PROTOCOL_BASED_SET_PROTOCOL_BASED_SET_PRTCL_ASSIGN_INFO_VID_IS_VALID_ID, 
    "vid_is_valid", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  prtcl_assign_info.vid_is_valid:\n\r"
    "  Is the VID valid for this entry. If TRUE, then when there are protocol\n\r"
    "  matches, the VID is taken. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_vid_assign protocol_based_set port_profile_ndx 0 ether_type_ndx 0\n\r"
    "  vid_is_valid 0 vid 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_LLP_VID_ASSIGN_PROTOCOL_BASED_SET_PROTOCOL_BASED_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_VID_ASSIGN_PROTOCOL_BASED_SET_PROTOCOL_BASED_SET_PRTCL_ASSIGN_INFO_VID_ID, 
    "vid", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  prtcl_assign_info.vid:\n\r"
    "  VLAN ID. Range: 0 - 4095.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_vid_assign protocol_based_set port_profile_ndx 0 ether_type_ndx 0\n\r"
    "  vid_is_valid 0 vid 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_LLP_VID_ASSIGN_PROTOCOL_BASED_SET_PROTOCOL_BASED_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_VID_ASSIGN_PROTOCOL_BASED_GET_PROTOCOL_BASED_GET_ID, 
    "protocol_based_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Sets mapping from Ethernet Type and profile to VID.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_vid_assign protocol_based_get port_profile_ndx 0 ether_type_ndx 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_LLP_VID_ASSIGN_PROTOCOL_BASED_GET_PROTOCOL_BASED_GET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_VID_ASSIGN_PROTOCOL_BASED_GET_PROTOCOL_BASED_GET_PORT_PROFILE_NDX_ID, 
    "port_profile_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  port_profile_ndx:\n\r"
    "  Profile for VID assignment (and COS resolution) according to L2 Protocol\n\r"
    "  (Ethernet Type). Profile is determined per port see soc_ppd_port_info_set().\n\r"
    "  Range: 0 - 7.	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_vid_assign protocol_based_get port_profile_ndx 0 ether_type_ndx 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_LLP_VID_ASSIGN_PROTOCOL_BASED_GET_PROTOCOL_BASED_GET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_VID_ASSIGN_PROTOCOL_BASED_GET_PROTOCOL_BASED_GET_ETHER_TYPE_NDX_ID, 
    "ether_type_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  ether_type_ndx:\n\r"
    "  Ethernet Type, up to 10 different Ethernet Types, including\n\r"
    "  IPv4(0x0800),IPv6(0x86DD),ARP(0x0806),CFM(0x8902), TRILL MPLS(0x8847). Use\n\r"
    "  SOC_PPC_L2_NEXT_PRTCL_TYPE enumeration to refer to these constant values.	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_vid_assign protocol_based_get port_profile_ndx 0 ether_type_ndx 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_LLP_VID_ASSIGN_PROTOCOL_BASED_GET_PROTOCOL_BASED_GET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_API_LLP_VID_ASSIGN_ID, 
    "llp_vid_assign", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "",
    "", 
    "",
    BIT_UI_16_RNG(SOC_FUN_PPD_API_LLP_VID_ASSIGN_FIRST_ID,SOC_FUN_PPD_API_LLP_VID_ASSIGN_LAST_ID), 
    1, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
#endif /* } llp_vid_assign*/
#ifdef UI_LLP_FILTER/* { llp_filter*/
  { 
    SOC_PARAM_PPD_LLP_FILTER_INGRESS_VLAN_MEMBERSHIP_SET_INGRESS_VLAN_MEMBERSHIP_SET_ID, 
    "ingress_vlan_membership_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Sets ingress VLAN membership; which incoming local ports belong to the VLAN.\n\r"
    "  Packets received on a port that is not a member of the VLAN the packet is\n\r"
    "  classified to be filtered. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_filter ingress_vlan_membership_set vid_ndx 0 ports_index 0 ports 0\n\r"
#endif 
    "",
    "",
    {BIT(20), 0, 0, 0}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_FILTER_INGRESS_VLAN_MEMBERSHIP_SET_INGRESS_VLAN_MEMBERSHIP_SET_VID_NDX_ID, 
    "vid_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  vid_ndx:\n\r"
    "  VLAN ID to set the membership for. Range: 0 - 4095.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_filter ingress_vlan_membership_set vid_ndx 0 ports_index 0 ports 0\n\r"
#endif 
    "",
    "",
    {BIT(20), 0, 0, 0}, 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_FILTER_INGRESS_VLAN_MEMBERSHIP_SET_INGRESS_VLAN_MEMBERSHIP_SET_PORTS_ID, 
    "member_ports", 
    (PARAM_VAL_RULES *)&soc_ppd_api_members_vals[0], 
    (sizeof(soc_ppd_api_members_vals) / sizeof(soc_ppd_api_members_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  member_ports:\n\r"
    "  uint32] -    The VLAN membership: bitmap of VLAN member ports specific\n\r"
    "  information, each member occupate two bits. Setting bit to 1 indicates port\n\r"
    "  is member in the vlan.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_filter ingress_vlan_membership_set vid_ndx 0 ports_index 0 ports 0\n\r"
#endif 
    "",
    "",
    {BIT(20), 0, 0, 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_FILTER_INGRESS_VLAN_MEMBERSHIP_GET_INGRESS_VLAN_MEMBERSHIP_GET_ID, 
    "ingress_vlan_membership_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Sets ingress VLAN membership; which incoming local ports belong to the VLAN.\n\r"
    "  Packets received on a port that is not a member of the VLAN the packet is\n\r"
    "  classified to be filtered. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_filter ingress_vlan_membership_get vid_ndx 0\n\r"
#endif 
    "",
    "",
    {BIT(21), 0, 0, 0}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_FILTER_INGRESS_VLAN_MEMBERSHIP_GET_INGRESS_VLAN_MEMBERSHIP_GET_VID_NDX_ID, 
    "vid_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  vid_ndx:\n\r"
    "  VLAN ID to set the membership for. Range: 0 - 4095.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_filter ingress_vlan_membership_get vid_ndx 0\n\r"
#endif 
    "",
    "",
    {BIT(21), 0, 0, 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_FILTER_INGRESS_VLAN_MEMBERSHIP_PORT_ADD_INGRESS_VLAN_MEMBERSHIP_PORT_ADD_ID, 
    "ingress_vlan_membership_port_add", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Add a local port as a member in a VLAN.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_filter ingress_vlan_membership_port_add vid_ndx 0 local_port 0\n\r"
#endif 
    "",
    "",
    {BIT(22), 0, 0, 0}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_FILTER_INGRESS_VLAN_MEMBERSHIP_PORT_ADD_INGRESS_VLAN_MEMBERSHIP_PORT_ADD_VID_NDX_ID, 
    "vid_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  vid_ndx:\n\r"
    "  VLAN ID. Range: 0 - 4095.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_filter ingress_vlan_membership_port_add vid_ndx 0 local_port 0\n\r"
#endif 
    "",
    "",
    {BIT(22), 0, 0, 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_FILTER_INGRESS_VLAN_MEMBERSHIP_PORT_ADD_INGRESS_VLAN_MEMBERSHIP_PORT_ADD_LOCAL_PORT_ID, 
    "local_port", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  local_port:\n\r"
    "  the local port to add to the VLAN.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_filter ingress_vlan_membership_port_add vid_ndx 0 local_port 0\n\r"
#endif 
    "",
    "",
    {BIT(22), 0, 0, 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_FILTER_INGRESS_VLAN_MEMBERSHIP_PORT_REMOVE_INGRESS_VLAN_MEMBERSHIP_PORT_REMOVE_ID, 
    "ingress_vlan_membership_port_remove", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Remove a local port from the VLAN membership.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_filter ingress_vlan_membership_port_remove vid_ndx 0 local_port 0\n\r"
#endif 
    "",
    "",
    {BIT(23), 0, 0, 0}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_FILTER_INGRESS_VLAN_MEMBERSHIP_PORT_REMOVE_INGRESS_VLAN_MEMBERSHIP_PORT_REMOVE_VID_NDX_ID, 
    "vid_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  vid_ndx:\n\r"
    "  VLAN ID. Range: 0 - 4095.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_filter ingress_vlan_membership_port_remove vid_ndx 0 local_port 0\n\r"
#endif 
    "",
    "",
    {BIT(23), 0, 0, 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_FILTER_INGRESS_VLAN_MEMBERSHIP_PORT_REMOVE_INGRESS_VLAN_MEMBERSHIP_PORT_REMOVE_LOCAL_PORT_ID, 
    "local_port", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  local_port:\n\r"
    "  The local port to add to the VLAN.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_filter ingress_vlan_membership_port_remove vid_ndx 0 local_port 0\n\r"
#endif 
    "",
    "",
    {BIT(23), 0, 0, 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_FILTER_INGRESS_ACCEPTABLE_FRAMES_SET_INGRESS_ACCEPTABLE_FRAMES_SET_ID, 
    "ingress_acceptable_frames_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Sets acceptable frame type on incoming port.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_filter ingress_acceptable_frames_set port_profile_ndx 0\n\r"
    "  vlan_format_ndx 0 frwrd_action_id 0 snoop_action_id 0\n\r"
#endif 
    "",
    "",
    {BIT(26), 0, 0, 0}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_FILTER_INGRESS_ACCEPTABLE_FRAMES_SET_INGRESS_ACCEPTABLE_FRAMES_SET_PORT_PROFILE_NDX_ID, 
    "port_profile_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  port_profile_ndx:\n\r"
    "  Port Profile ID. Range 0 - 7. Set by soc_ppd_port_info_set().  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_filter ingress_acceptable_frames_set port_profile_ndx 0\n\r"
    "  vlan_format_ndx 0 frwrd_action_id 0 snoop_action_id 0\n\r"
#endif 
    "",
    "",
    {BIT(26), 0, 0, 0}, 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_FILTER_INGRESS_ACCEPTABLE_FRAMES_SET_INGRESS_ACCEPTABLE_FRAMES_SET_VLAN_FORMAT_NDX_ID, 
    "vlan_format_ndx", 
    (PARAM_VAL_RULES *)&SOC_PPD_SAND_PP_ETHERNET_FRAME_VLAN_FORMAT_rule[0], 
    (sizeof(SOC_PPD_SAND_PP_ETHERNET_FRAME_VLAN_FORMAT_rule) / sizeof(SOC_PPD_SAND_PP_ETHERNET_FRAME_VLAN_FORMAT_rule[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  vlan_format_ndx:\n\r"
    "  Acceptable frame types (S-tag, double Tags etc.).Use\n\r"
    "  SOC_SAND_PP_ETHERNET_FRAME_VLAN_FORMAT_ANY to affect the status of all possible\n\r"
    "  vlan Tag formats.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_filter ingress_acceptable_frames_set port_profile_ndx 0\n\r"
    "  vlan_format_ndx 0 frwrd_action_id 0 snoop_action_id 0\n\r"
#endif 
    "",
    "",
    {BIT(26), 0, 0, 0}, 
    4, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_FILTER_INGRESS_ACCEPTABLE_FRAMES_SET_INGRESS_ACCEPTABLE_FRAMES_SET_ACTION_PROFILE_TRAP_CODE_LSB_ID, 
    "trap_code", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals/*SOC_PPC_TRAP_CODE_rule*/[0], 
    (sizeof(soc_ppd_api_free_vals/*SOC_PPC_TRAP_CODE_rule*/) / sizeof(soc_ppd_api_free_vals/*SOC_PPC_TRAP_CODE_rule*/[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
#ifdef COMPILER_STRING_CONST_LIMIT
    "  Full documentation cannot be displayed with -pendantic compiler\n\r",
#else
    "  action_profile.trap_code:\n\r"
    "  Sets the LSB of the CPU code. For trapped packet the CPU \n\r"
    "  code are associated into the packet headers. The CPU \n\r"
    "  code also used as index for the forwarding/snooping \n\r"
    "  actions. see to soc_ppd_trap_frwrd_profile_info_set(), \n\r"
    "  soc_ppd_trap_snoop_profile_info_set(). Range Petra-B: 0-255, \n\r"
    "  T20E:0-63.To know the legal range in specific use of \n\r"
    "  this field, see the documentation in that specific \n\r"
    "  use.In Petra-B this field affects the CPU code set on \n\r"
    "  the packets header, IN T20E it's only select the \n\r"
    "  forwarding and snooping profiles.                     \n\r"  
    "",
#endif /* COMPILER_STRING_CONST_LIMIT */
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_filter ingress_acceptable_frames_set port_profile_ndx 0\n\r"
    "  vlan_format_ndx 0 frwrd_action_id 0 snoop_action_id 0\n\r"
#endif 
    "",
    "",
    {BIT(26), 0, 0, 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_FILTER_INGRESS_ACCEPTABLE_FRAMES_SET_INGRESS_ACCEPTABLE_FRAMES_SET_ACTION_PROFILE_FRWRD_STRENGTH_ID, 
    "frwrd_action_strength", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  action_profile.frwrd_action_strength:\n\r"
    "  Value that identifies the strength of the assignment of \n\r"
    "  Forward action to the packet. Through the packet \n\r"
    "  processing pipe, many forwarding decisions may be taken; \n\r"
    "  yet one decision may overwrite a former decision only if \n\r"
    "  it stronger, i.e., its strength is higher than the last \n\r"
    "  decision that was taken. Range 0-7.Relevant only for \n\r"
    "  Petra-B.                \n\r"                                
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_filter ingress_acceptable_frames_set port_profile_ndx 0\n\r"
    "  vlan_format_ndx 0 frwrd_action_id 0 snoop_action_id 0\n\r"
#endif 
    "",
    "",
    {BIT(26), 0, 0, 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_FILTER_INGRESS_ACCEPTABLE_FRAMES_SET_INGRESS_ACCEPTABLE_FRAMES_SET_ACTION_PROFILE_SNOOP_STRENGTH_ID, 
    "frwrd_snoop_strength", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  action_profile.frwrd_snoop_strength:\n\r"
    "  Value that identifies the strength of the assignment of \n\r"
    "  Snoop action to the packet. Through the packet \n\r"
    "  processing pipe, many snooping decisions may be taken; \n\r"
    "  yet one decision may overwrite a former decision only if \n\r"
    "  it stronger, i.e., its strength is higher than the last \n\r"
    "  decision that was taken. Range 0-7.Relevant only for \n\r"
    "  Petra-B.              \n\r"                                  
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_filter ingress_acceptable_frames_set port_profile_ndx 0\n\r"
    "  vlan_format_ndx 0 frwrd_action_id 0 snoop_action_id 0\n\r"
#endif 
    "",
    "",
    {BIT(26), 0, 0, 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_FILTER_INGRESS_ACCEPTABLE_FRAMES_GET_INGRESS_ACCEPTABLE_FRAMES_GET_ID, 
    "ingress_acceptable_frames_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Sets acceptable frame type on incoming port.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_filter ingress_acceptable_frames_get port_profile_ndx 0\n\r"
    "  vlan_format_ndx 0\n\r"
#endif 
    "",
    "",
    {BIT(27), 0, 0, 0}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_FILTER_INGRESS_ACCEPTABLE_FRAMES_GET_INGRESS_ACCEPTABLE_FRAMES_GET_PORT_PROFILE_NDX_ID, 
    "port_profile_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  port_profile_ndx:\n\r"
    "  Port Profile ID. Range 0 - 7. Set by soc_ppd_port_info_set().  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_filter ingress_acceptable_frames_get port_profile_ndx 0\n\r"
    "  vlan_format_ndx 0\n\r"
#endif 
    "",
    "",
    {BIT(27), 0, 0, 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_FILTER_INGRESS_ACCEPTABLE_FRAMES_GET_INGRESS_ACCEPTABLE_FRAMES_GET_VLAN_FORMAT_NDX_ID, 
    "vlan_format_ndx", 
    (PARAM_VAL_RULES *)&SOC_PPD_SAND_PP_ETHERNET_FRAME_VLAN_FORMAT_rule[0], 
    (sizeof(SOC_PPD_SAND_PP_ETHERNET_FRAME_VLAN_FORMAT_rule) / sizeof(SOC_PPD_SAND_PP_ETHERNET_FRAME_VLAN_FORMAT_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  vlan_format_ndx:\n\r"
    "  Acceptable frame types (S-tag, double Tags etc.).Use\n\r"
    "  SOC_SAND_PP_ETHERNET_FRAME_VLAN_FORMAT_ANY to affect the status of all possible\n\r"
    "  vlan Tag formats.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_filter ingress_acceptable_frames_get port_profile_ndx 0\n\r"
    "  vlan_format_ndx 0\n\r"
#endif 
    "",
    "",
    {BIT(27), 0, 0, 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_FILTER_DESIGNATED_VLAN_SET_DESIGNATED_VLAN_SET_ID, 
    "designated_vlan_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set a designated VLAN for a port. Incoming Trill packet will be checked if it\n\r"
    "  has this T-VID; otherwise, packet will be dropped.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_filter designated_vlan_set local_port_ndx 0 vid 0\n\r"
#endif 
    "",
    "",
    {BIT(28), 0, 0, 0}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_FILTER_DESIGNATED_VLAN_SET_DESIGNATED_VLAN_SET_LOCAL_PORT_NDX_ID, 
    "local_port_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  local_port_ndx:\n\r"
    "  Local port ID.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_filter designated_vlan_set local_port_ndx 0 vid 0\n\r"
#endif 
    "",
    "",
    {BIT(28), 0, 0, 0}, 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_FILTER_DESIGNATED_VLAN_SET_DESIGNATED_VLAN_SET_VID_ID, 
    "vid", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  vid:\n\r"
    "  VID, To set as designated VLAN of the Port. Range: 0-4095.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_filter designated_vlan_set local_port_ndx 0 vid 0\n\r"
#endif 
    "",
    "",
    {BIT(28), 0, 0, 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_FILTER_DESIGNATED_VLAN_SET_DESIGNATED_VLAN_SET_ACCEPT_ID, 
    "accept", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  accept:\n\r"
    "  Accept or deny this frame type for this port type\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_filter designated_vlan_set local_port_ndx 0 vid 0\n\r"
#endif 
    "",
    "",
    {BIT(28), 0, 0, 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_FILTER_DESIGNATED_VLAN_GET_DESIGNATED_VLAN_GET_ID, 
    "designated_vlan_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set a designated VLAN for a port. Incoming Trill packet will be checked if it\n\r"
    "  has this T-VID; otherwise, packet will be dropped.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_filter designated_vlan_get local_port_ndx 0\n\r"
#endif 
    "",
    "",
    {BIT(29), 0, 0, 0}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_FILTER_DESIGNATED_VLAN_GET_DESIGNATED_VLAN_GET_LOCAL_PORT_NDX_ID, 
    "local_port_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  local_port_ndx:\n\r"
    "  Local port ID.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_filter designated_vlan_get local_port_ndx 0\n\r"
#endif 
    "",
    "",
    {BIT(29), 0, 0, 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_API_LLP_FILTER_ID, 
    "llp_filter", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "",
    "", 
    "",
    {BIT(20)|BIT(21)|BIT(22)|BIT(23)|BIT(26)|BIT(27)|BIT(28)|BIT(29), 0, 0, 0}, 
    1, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
#endif /* } llp_filter*/
#ifdef UI_LIF_ING_VLAN_EDIT/* { lif_ing_vlan_edit*/
  { 
    SOC_PARAM_PPD_LIF_ING_VLAN_EDIT_COMMAND_ID_SET_COMMAND_ID_SET_ID, 
    "command_id_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set the Ingress VLAN Edit command to perform over packets according to\n\r"
    "  incoming VLAN tags format and required VLAN edit profile (set according to\n\r"
    "  AC).\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_ing_vlan_edit command_id_set edit_profile 0 tag_format 0\n\r"
    "  command_id 0\n\r"
#endif 
    "",
    "",
    {0, BIT(0), 0, 0}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_ING_VLAN_EDIT_COMMAND_ID_SET_COMMAND_ID_SET_COMMAND_KEY_EDIT_PROFILE_ID, 
    "edit_profile", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  command_key.edit_profile:\n\r"
    "  Profile according to which to edit the VLAN tags. This profile is set\n\r"
    "  according to in-AC.Range: 0 - 7.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_ing_vlan_edit command_id_set edit_profile 0 tag_format 0\n\r"
    "  command_id 0\n\r"
#endif 
    "",
    "",
    {0, BIT(0), 0, 0}, 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_ING_VLAN_EDIT_COMMAND_ID_SET_COMMAND_ID_SET_COMMAND_KEY_TAG_FORMAT_ID, 
    "tag_format", 
    (PARAM_VAL_RULES *)&SOC_PPD_SAND_PP_ETHERNET_FRAME_VLAN_FORMAT_rule[0], 
    (sizeof(SOC_PPD_SAND_PP_ETHERNET_FRAME_VLAN_FORMAT_rule) / sizeof(SOC_PPD_SAND_PP_ETHERNET_FRAME_VLAN_FORMAT_rule[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  command_key.tag_format:\n\r"
    "  VLAN frame type (VLAN tags structure) of incoming packet.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_ing_vlan_edit command_id_set edit_profile 0 tag_format 0\n\r"
    "  command_id 0\n\r"
#endif 
    "",
    "",
    {0, BIT(0), 0, 0}, 
    4, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_ING_VLAN_EDIT_COMMAND_ID_SET_COMMAND_ID_SET_COMMAND_ID_ID, 
    "command_id", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  command_id:\n\r"
    "  Handle to be used to set the Edit command information. See\n\r"
    "  soc_ppd_lif_ing_vlan_edit_command_info_set()\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_ing_vlan_edit command_id_set edit_profile 0 tag_format 0\n\r"
    "  command_id 0\n\r"
#endif 
    "",
    "",
    {0, BIT(0), 0, 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_ING_VLAN_EDIT_COMMAND_ID_GET_COMMAND_ID_GET_ID, 
    "command_id_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set the Ingress VLAN Edit command to perform over packets according to\n\r"
    "  incoming VLAN tags format and required VLAN edit profile (set according to\n\r"
    "  AC).\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_ing_vlan_edit command_id_get edit_profile 0 tag_format 0\n\r"
#endif 
    "",
    "",
    {0, BIT(1), 0, 0}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_ING_VLAN_EDIT_COMMAND_ID_GET_COMMAND_ID_GET_COMMAND_KEY_EDIT_PROFILE_ID, 
    "edit_profile", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  command_key.edit_profile:\n\r"
    "  Profile according to which to edit the VLAN tags. This profile is set\n\r"
    "  according to in-AC.Range: 0 - 7.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_ing_vlan_edit command_id_get edit_profile 0 tag_format 0\n\r"
#endif 
    "",
    "",
    {0, BIT(1), 0, 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_ING_VLAN_EDIT_COMMAND_ID_GET_COMMAND_ID_GET_COMMAND_KEY_TAG_FORMAT_ID, 
    "tag_format", 
    (PARAM_VAL_RULES *)&SOC_PPD_SAND_PP_ETHERNET_FRAME_VLAN_FORMAT_rule[0], 
    (sizeof(SOC_PPD_SAND_PP_ETHERNET_FRAME_VLAN_FORMAT_rule) / sizeof(SOC_PPD_SAND_PP_ETHERNET_FRAME_VLAN_FORMAT_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  command_key.tag_format:\n\r"
    "  VLAN frame type (VLAN tags structure) of incoming packet.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_ing_vlan_edit command_id_get edit_profile 0 tag_format 0\n\r"
#endif 
    "",
    "",
    {0, BIT(1), 0, 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_ING_VLAN_EDIT_COMMAND_INFO_SET_COMMAND_INFO_SET_ID, 
    "command_info_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set the Edit command to perform over packets.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_ing_vlan_edit command_info_set command_ndx 0 pcp_dei_source 0\n\r"
    "  vid_source 0 tpid_index 0 pcp_dei_source 0 vid_source 0 tpid_index 0\n\r"
    "  tags_to_remove 0\n\r"
#endif 
    "",
    "",
    {0, BIT(2), 0, 0}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_ING_VLAN_EDIT_COMMAND_INFO_SET_COMMAND_INFO_SET_COMMAND_NDX_ID, 
    "command_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  command_ndx:\n\r"
    "  Command ID, set according soc_ppd_lif_ing_vlan_edit_command_id_set(). Range: 0 -\n\r"
    "  15.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_ing_vlan_edit command_info_set command_ndx 0 pcp_dei_source 0\n\r"
    "  vid_source 0 tpid_index 0 pcp_dei_source 0 vid_source 0 tpid_index 0\n\r"
    "  tags_to_remove 0\n\r"
#endif 
    "",
    "",
    {0, BIT(2), 0, 0}, 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_ING_VLAN_EDIT_COMMAND_INFO_SET_COMMAND_INFO_SET_COMMAND_INFO_OUTER_TAG_PCP_DEI_SOURCE_ID, 
    "outer_pcp_dei_source", 
    (PARAM_VAL_RULES *)&SOC_PPC_LIF_ING_VLAN_EDIT_TAG_PCP_DEI_SRC_rule[0], 
    (sizeof(SOC_PPC_LIF_ING_VLAN_EDIT_TAG_PCP_DEI_SRC_rule) / sizeof(SOC_PPC_LIF_ING_VLAN_EDIT_TAG_PCP_DEI_SRC_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  command_info.outer_tag.pcp_dei_source:\n\r"
    "  The source to get the PCP-DEI/UP value from. If vid_source is empty, then\n\r"
    "  this value is not relevant.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_ing_vlan_edit command_info_set command_ndx 0 pcp_dei_source 0\n\r"
    "  vid_source 0 tpid_index 0 pcp_dei_source 0 vid_source 0 tpid_index 0\n\r"
    "  tags_to_remove 0\n\r"
#endif 
    "",
    "",
    {0, BIT(2), 0, 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_ING_VLAN_EDIT_COMMAND_INFO_SET_COMMAND_INFO_SET_COMMAND_INFO_OUTER_TAG_VID_SOURCE_ID, 
    "outer_vid_source", 
    (PARAM_VAL_RULES *)&SOC_PPC_LIF_ING_VLAN_EDIT_TAG_VID_SRC_rule[0], 
    (sizeof(SOC_PPC_LIF_ING_VLAN_EDIT_TAG_VID_SRC_rule) / sizeof(SOC_PPC_LIF_ING_VLAN_EDIT_TAG_VID_SRC_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  command_info.outer_tag.vid_source:\n\r"
    "  The source to get the VID value from. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_ing_vlan_edit command_info_set command_ndx 0 pcp_dei_source 0\n\r"
    "  vid_source 0 tpid_index 0 pcp_dei_source 0 vid_source 0 tpid_index 0\n\r"
    "  tags_to_remove 0\n\r"
#endif 
    "",
    "",
    {0, BIT(2), 0, 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_ING_VLAN_EDIT_COMMAND_INFO_SET_COMMAND_INFO_SET_COMMAND_INFO_OUTER_TAG_TPID_INDEX_ID, 
    "outer_tpid_index", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  command_info.outer_tag.tpid_index:\n\r"
    "  Selects one of the global TPID values. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_ing_vlan_edit command_info_set command_ndx 0 pcp_dei_source 0\n\r"
    "  vid_source 0 tpid_index 0 pcp_dei_source 0 vid_source 0 tpid_index 0\n\r"
    "  tags_to_remove 0\n\r"
#endif 
    "",
    "",
    {0, BIT(2), 0, 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },
  { 
    SOC_PARAM_PPD_LIF_ING_VLAN_EDIT_COMMAND_INFO_SET_COMMAND_INFO_SET_COMMAND_INFO_TPID_PROFILE_ID, 
    "tpid_profile", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  command_info.outer_tag.tpid_index:\n\r"
    "  Select one of the four global TPIDs configured by\n\r"
    "  soc_ppd_llp_parse_tpid_value_set() as the TPID of the built tag of the packet.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_ing_vlan_edit command_info_set command_ndx 0 pcp_dei_source 0\n\r"
    "  vid_source 0 tpid_index 0 pcp_dei_source 0 vid_source 0 tpid_index 0\n\r"
    "  tags_to_remove 0\n\r"
#endif 
    "",
    "",
    {0, BIT(2), 0, 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_ING_VLAN_EDIT_COMMAND_INFO_SET_COMMAND_INFO_SET_COMMAND_INFO_INNER_TAG_PCP_DEI_SOURCE_ID, 
    "inner_pcp_dei_source", 
    (PARAM_VAL_RULES *)&SOC_PPC_LIF_ING_VLAN_EDIT_TAG_PCP_DEI_SRC_rule[0], 
    (sizeof(SOC_PPC_LIF_ING_VLAN_EDIT_TAG_PCP_DEI_SRC_rule) / sizeof(SOC_PPC_LIF_ING_VLAN_EDIT_TAG_PCP_DEI_SRC_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  command_info.inner_tag.pcp_dei_source:\n\r"
    "  The source to get the PCP-DEI/UP value from. If vid_source is empty, then\n\r"
    "  this value is not relevant.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_ing_vlan_edit command_info_set command_ndx 0 pcp_dei_source 0\n\r"
    "  vid_source 0 tpid_index 0 pcp_dei_source 0 vid_source 0 tpid_index 0\n\r"
    "  tags_to_remove 0\n\r"
#endif 
    "",
    "",
    {0, BIT(2), 0, 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_ING_VLAN_EDIT_COMMAND_INFO_SET_COMMAND_INFO_SET_COMMAND_INFO_INNER_TAG_VID_SOURCE_ID, 
    "inner_vid_source", 
    (PARAM_VAL_RULES *)&SOC_PPC_LIF_ING_VLAN_EDIT_TAG_VID_SRC_rule[0], 
    (sizeof(SOC_PPC_LIF_ING_VLAN_EDIT_TAG_VID_SRC_rule) / sizeof(SOC_PPC_LIF_ING_VLAN_EDIT_TAG_VID_SRC_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  command_info.inner_tag.vid_source:\n\r"
    "  The source to get the VID value from. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_ing_vlan_edit command_info_set command_ndx 0 pcp_dei_source 0\n\r"
    "  vid_source 0 tpid_index 0 pcp_dei_source 0 vid_source 0 tpid_index 0\n\r"
    "  tags_to_remove 0\n\r"
#endif 
    "",
    "",
    {0, BIT(2), 0, 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_ING_VLAN_EDIT_COMMAND_INFO_SET_COMMAND_INFO_SET_COMMAND_INFO_INNER_TAG_TPID_INDEX_ID, 
    "inner_tpid_index", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  command_info.inner_tag.tpid_index:\n\r"
    "  Selects one of the global TPID values. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_ing_vlan_edit command_info_set command_ndx 0 pcp_dei_source 0\n\r"
    "  vid_source 0 tpid_index 0 pcp_dei_source 0 vid_source 0 tpid_index 0\n\r"
    "  tags_to_remove 0\n\r"
#endif 
    "",
    "",
    {0, BIT(2), 0, 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },
  { 
    SOC_PARAM_PPD_LIF_ING_VLAN_EDIT_COMMAND_INFO_SET_COMMAND_INFO_SET_COMMAND_INFO_TAGS_TO_REMOVE_ID, 
    "tags_to_remove", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  command_info.tags_to_remove:\n\r"
    "  Number of VLAN tags to remove from the incoming packet (after the ingress\n\r"
    "  editing, if present)0 - none.1 - to remove outer tag.2 - to remove outer and\n\r"
    "  inner tags.In the editing process, first these tags are removed and then the\n\r"
    "  inner tag and outer tag are built according to the fields below. Range: 0 - 2.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_ing_vlan_edit command_info_set command_ndx 0 pcp_dei_source 0\n\r"
    "  vid_source 0 tpid_index 0 pcp_dei_source 0 vid_source 0 tpid_index 0\n\r"
    "  tags_to_remove 0\n\r"
#endif 
    "",
    "",
    {0, BIT(2), 0, 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_ING_VLAN_EDIT_COMMAND_INFO_GET_COMMAND_INFO_GET_ID, 
    "command_info_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set the Edit command to perform over packets.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_ing_vlan_edit command_info_get command_ndx 0\n\r"
#endif 
    "",
    "",
    {0, BIT(3), 0, 0}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_ING_VLAN_EDIT_COMMAND_INFO_GET_COMMAND_INFO_GET_COMMAND_NDX_ID, 
    "command_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  command_ndx:\n\r"
    "  Command ID, set according soc_ppd_lif_ing_vlan_edit_command_id_set(). Range: 0 -\n\r"
    "  15.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_ing_vlan_edit command_info_get command_ndx 0\n\r"
#endif 
    "",
    "",
    {0, BIT(3), 0, 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_ING_VLAN_EDIT_PCP_MAP_STAG_SET_PCP_MAP_STAG_SET_ID, 
    "pcp_map_stag_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set mapping from outer S-tag PCP and DEI to the PCP and DEI values to be set\n\r"
    "  in the transmitted packet's tag. This is the mapping to be used when the\n\r"
    "  incoming packet is S-tagged (outer Tag). \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_ing_vlan_edit pcp_map_stag_set pcp_profile_ndx 0 tag_pcp_ndx 0\n\r"
    "  tag_dei_ndx 0 out_pcp 0\n\r"
#endif 
    "",
    "",
    {0, BIT(4), 0, 0}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_ING_VLAN_EDIT_PCP_MAP_STAG_SET_PCP_MAP_STAG_SET_PCP_PROFILE_NDX_ID, 
    "pcp_profile_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pcp_profile_ndx:\n\r"
    "  The PCP profile is set according to AC. Range: 0 - 7.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_ing_vlan_edit pcp_map_stag_set pcp_profile_ndx 0 tag_pcp_ndx 0\n\r"
    "  tag_dei_ndx 0 out_pcp 0\n\r"
#endif 
    "",
    "",
    {0, BIT(4), 0, 0}, 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_ING_VLAN_EDIT_PCP_MAP_STAG_SET_PCP_MAP_STAG_SET_TAG_PCP_NDX_ID, 
    "tag_pcp_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  tag_pcp_ndx:\n\r"
    "  The PCP appears in the outer S-Tag of the packet. Range: 0 - 7.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_ing_vlan_edit pcp_map_stag_set pcp_profile_ndx 0 tag_pcp_ndx 0\n\r"
    "  tag_dei_ndx 0 out_pcp 0\n\r"
#endif 
    "",
    "",
    {0, BIT(4), 0, 0}, 
    4, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_ING_VLAN_EDIT_PCP_MAP_STAG_SET_PCP_MAP_STAG_SET_TAG_DEI_NDX_ID, 
    "tag_dei_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  tag_dei_ndx:\n\r"
    "  The DEI appears in the outer S-Tag of the packet. Range: 0 - 1.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_ing_vlan_edit pcp_map_stag_set pcp_profile_ndx 0 tag_pcp_ndx 0\n\r"
    "  tag_dei_ndx 0 out_pcp 0\n\r"
#endif 
    "",
    "",
    {0, BIT(4), 0, 0}, 
    5, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_ING_VLAN_EDIT_PCP_MAP_STAG_SET_PCP_MAP_STAG_SET_OUT_PCP_ID, 
    "out_pcp", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  out_pcp:\n\r"
    "  The mapped PCP to set in the transmitted packet header. When the mapping used\n\r"
    "  to build C-tag, this value presents the UP to set in the packet tag.Range: 0\n\r"
    "  - 7.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_ing_vlan_edit pcp_map_stag_set pcp_profile_ndx 0 tag_pcp_ndx 0\n\r"
    "  tag_dei_ndx 0 out_pcp 0\n\r"
#endif 
    "",
    "",
    {0, BIT(4), 0, 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_ING_VLAN_EDIT_PCP_MAP_STAG_SET_PCP_MAP_STAG_SET_OUT_DEI_ID, 
    "out_dei", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  out_dei:\n\r"
    "  The mapped DEI to set in the transmitted packet header. This is relevant when\n\r"
    "  used for S-Tag. When the mapping used to build C tag, this value has to be\n\r"
    "  set to 0. Range: 0 - 1.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_ing_vlan_edit pcp_map_stag_set pcp_profile_ndx 0 tag_pcp_ndx 0\n\r"
    "  tag_dei_ndx 0 out_pcp 0\n\r"
#endif 
    "",
    "",
    {0, BIT(4), 0, 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_ING_VLAN_EDIT_PCP_MAP_STAG_GET_PCP_MAP_STAG_GET_ID, 
    "pcp_map_stag_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set mapping from outer S-tag PCP and DEI to the PCP and DEI values to be set\n\r"
    "  in the transmitted packet's tag. This is the mapping to be used when the\n\r"
    "  incoming packet is S-tagged (outer Tag). \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_ing_vlan_edit pcp_map_stag_get pcp_profile_ndx 0 tag_pcp_ndx 0\n\r"
    "  tag_dei_ndx 0\n\r"
#endif 
    "",
    "",
    {0, BIT(5), 0, 0}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_ING_VLAN_EDIT_PCP_MAP_STAG_GET_PCP_MAP_STAG_GET_PCP_PROFILE_NDX_ID, 
    "pcp_profile_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pcp_profile_ndx:\n\r"
    "  The PCP profile is set according to AC. Range: 0 - 7.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_ing_vlan_edit pcp_map_stag_get pcp_profile_ndx 0 tag_pcp_ndx 0\n\r"
    "  tag_dei_ndx 0\n\r"
#endif 
    "",
    "",
    {0, BIT(5), 0, 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_ING_VLAN_EDIT_PCP_MAP_STAG_GET_PCP_MAP_STAG_GET_TAG_PCP_NDX_ID, 
    "tag_pcp_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  tag_pcp_ndx:\n\r"
    "  The PCP appears in the outer S-Tag of the packet. Range: 0 - 7.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_ing_vlan_edit pcp_map_stag_get pcp_profile_ndx 0 tag_pcp_ndx 0\n\r"
    "  tag_dei_ndx 0\n\r"
#endif 
    "",
    "",
    {0, BIT(5), 0, 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_ING_VLAN_EDIT_PCP_MAP_STAG_GET_PCP_MAP_STAG_GET_TAG_DEI_NDX_ID, 
    "tag_dei_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  tag_dei_ndx:\n\r"
    "  The DEI appears in the outer S-Tag of the packet. Range: 0 - 1.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_ing_vlan_edit pcp_map_stag_get pcp_profile_ndx 0 tag_pcp_ndx 0\n\r"
    "  tag_dei_ndx 0\n\r"
#endif 
    "",
    "",
    {0, BIT(5), 0, 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_ING_VLAN_EDIT_PCP_MAP_CTAG_SET_PCP_MAP_CTAG_SET_ID, 
    "pcp_map_ctag_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set mapping from outer C-tag UP to the PCP and DEI values to be set in the\n\r"
    "  transmitted packet's tag. This is the mapping to be used when the incoming\n\r"
    "  packet is C-tagged (outer Tag. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_ing_vlan_edit pcp_map_ctag_set pcp_profile_ndx 0 tag_up_ndx 0\n\r"
    "  out_pcp 0\n\r"
#endif 
    "",
    "",
    {0, BIT(6), 0, 0}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_ING_VLAN_EDIT_PCP_MAP_CTAG_SET_PCP_MAP_CTAG_SET_PCP_PROFILE_NDX_ID, 
    "pcp_profile_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pcp_profile_ndx:\n\r"
    "  The PCP profile is set according to AC. Range: 0 - 7.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_ing_vlan_edit pcp_map_ctag_set pcp_profile_ndx 0 tag_up_ndx 0\n\r"
    "  out_pcp 0\n\r"
#endif 
    "",
    "",
    {0, BIT(6), 0, 0}, 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_ING_VLAN_EDIT_PCP_MAP_CTAG_SET_PCP_MAP_CTAG_SET_TAG_UP_NDX_ID, 
    "tag_up_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  tag_up_ndx:\n\r"
    "  The UP appears in the outer C-Tag of the packet. Range: 0 - 7.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_ing_vlan_edit pcp_map_ctag_set pcp_profile_ndx 0 tag_up_ndx 0\n\r"
    "  out_pcp 0\n\r"
#endif 
    "",
    "",
    {0, BIT(6), 0, 0}, 
    4, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_ING_VLAN_EDIT_PCP_MAP_CTAG_SET_PCP_MAP_CTAG_SET_OUT_PCP_ID, 
    "out_pcp", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  out_pcp:\n\r"
    "  The mapped PCP to set in the transmitted packet header. When the mapping used\n\r"
    "  to build C-tag, this value presents the UP to set in the packet tag.Range: 0\n\r"
    "  - 7.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_ing_vlan_edit pcp_map_ctag_set pcp_profile_ndx 0 tag_up_ndx 0\n\r"
    "  out_pcp 0\n\r"
#endif 
    "",
    "",
    {0, BIT(6), 0, 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_ING_VLAN_EDIT_PCP_MAP_CTAG_SET_PCP_MAP_CTAG_SET_OUT_DEI_ID, 
    "out_dei", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  out_dei:\n\r"
    "  The mapped DEI to set in the transmitted packet header. This is relevant when\n\r"
    "  used for S-Tag. When the mapping used to build C tag, this value has to be\n\r"
    "  set to 0. Range: 0 - 1.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_ing_vlan_edit pcp_map_ctag_set pcp_profile_ndx 0 tag_up_ndx 0\n\r"
    "  out_pcp 0\n\r"
#endif 
    "",
    "",
    {0, BIT(6), 0, 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_ING_VLAN_EDIT_PCP_MAP_CTAG_GET_PCP_MAP_CTAG_GET_ID, 
    "pcp_map_ctag_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set mapping from outer C-tag UP to the PCP and DEI values to be set in the\n\r"
    "  transmitted packet's tag. This is the mapping to be used when the incoming\n\r"
    "  packet is C-tagged (outer Tag. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_ing_vlan_edit pcp_map_ctag_get pcp_profile_ndx 0 tag_up_ndx 0\n\r"
#endif 
    "",
    "",
    {0, BIT(7), 0, 0}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_ING_VLAN_EDIT_PCP_MAP_CTAG_GET_PCP_MAP_CTAG_GET_PCP_PROFILE_NDX_ID, 
    "pcp_profile_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pcp_profile_ndx:\n\r"
    "  The PCP profile is set according to AC. Range: 0 - 7.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_ing_vlan_edit pcp_map_ctag_get pcp_profile_ndx 0 tag_up_ndx 0\n\r"
#endif 
    "",
    "",
    {0, BIT(7), 0, 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_ING_VLAN_EDIT_PCP_MAP_CTAG_GET_PCP_MAP_CTAG_GET_TAG_UP_NDX_ID, 
    "tag_up_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  tag_up_ndx:\n\r"
    "  The UP appears in the outer C-Tag of the packet. Range: 0 - 7.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_ing_vlan_edit pcp_map_ctag_get pcp_profile_ndx 0 tag_up_ndx 0\n\r"
#endif 
    "",
    "",
    {0, BIT(7), 0, 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_ING_VLAN_EDIT_PCP_MAP_UNTAGGED_SET_PCP_MAP_UNTAGGED_SET_ID, 
    "pcp_map_untagged_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set mapping from COS parameters (DP and TC) to the PCP and DEI values to be\n\r"
    "  set in the transmitted packet's tag. This is the mapping to be used when the\n\r"
    "  incoming packet has not tags.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_ing_vlan_edit pcp_map_untagged_set pcp_profile_ndx 0 tc_ndx 0\n\r"
    "  dp_ndx 0 out_pcp 0\n\r"
#endif 
    "",
    "",
    {0, BIT(8), 0, 0}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_ING_VLAN_EDIT_PCP_MAP_UNTAGGED_SET_PCP_MAP_UNTAGGED_SET_PCP_PROFILE_NDX_ID, 
    "pcp_profile_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pcp_profile_ndx:\n\r"
    "  The PCP profile is set according to AC. Range: 0 - 7.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_ing_vlan_edit pcp_map_untagged_set pcp_profile_ndx 0 tc_ndx 0\n\r"
    "  dp_ndx 0 out_pcp 0\n\r"
#endif 
    "",
    "",
    {0, BIT(8), 0, 0}, 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_ING_VLAN_EDIT_PCP_MAP_UNTAGGED_SET_PCP_MAP_UNTAGGED_SET_TC_NDX_ID, 
    "tc_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  tc_ndx:\n\r"
    "  Traffic Class. Calculated at the ingress. See COS module. Range: 0 - 7.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_ing_vlan_edit pcp_map_untagged_set pcp_profile_ndx 0 tc_ndx 0\n\r"
    "  dp_ndx 0 out_pcp 0\n\r"
#endif 
    "",
    "",
    {0, BIT(8), 0, 0}, 
    4, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_ING_VLAN_EDIT_PCP_MAP_UNTAGGED_SET_PCP_MAP_UNTAGGED_SET_DP_NDX_ID, 
    "dp_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  dp_ndx:\n\r"
    "  Drop Precedence. Calculated at the ingress. See COS module. Range: 0 - 3.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_ing_vlan_edit pcp_map_untagged_set pcp_profile_ndx 0 tc_ndx 0\n\r"
    "  dp_ndx 0 out_pcp 0\n\r"
#endif 
    "",
    "",
    {0, BIT(8), 0, 0}, 
    5, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_ING_VLAN_EDIT_PCP_MAP_UNTAGGED_SET_PCP_MAP_UNTAGGED_SET_OUT_PCP_ID, 
    "out_pcp", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  out_pcp:\n\r"
    "  The mapped PCP to set in the transmitted packet header. When the mapping used\n\r"
    "  to build C-tag, this value represents the UP to set in the packet\n\r"
    "  C-tag.Range: 0 - 7.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_ing_vlan_edit pcp_map_untagged_set pcp_profile_ndx 0 tc_ndx 0\n\r"
    "  dp_ndx 0 out_pcp 0\n\r"
#endif 
    "",
    "",
    {0, BIT(8), 0, 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_ING_VLAN_EDIT_PCP_MAP_UNTAGGED_SET_PCP_MAP_UNTAGGED_SET_OUT_DEI_ID, 
    "out_dei", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  out_dei:\n\r"
    "  The mapped DEI to set in the transmitted packet header.\n\r"
    "  This is relevant when used for S-Tag. When the mapping used to build C tag,\n\r"
    "  this value has to be set to 0. Range: 0 - 1.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_ing_vlan_edit pcp_map_untagged_set pcp_profile_ndx 0 tc_ndx 0\n\r"
    "  dp_ndx 0 out_pcp 0\n\r"
#endif 
    "",
    "",
    {0, BIT(8), 0, 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_ING_VLAN_EDIT_PCP_MAP_UNTAGGED_GET_PCP_MAP_UNTAGGED_GET_ID, 
    "pcp_map_untagged_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set mapping from COS parameters (DP and TC) to the PCP and DEI values to be\n\r"
    "  set in the transmitted packet's tag. This is the mapping to be used when the\n\r"
    "  incoming packet has not tags.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_ing_vlan_edit pcp_map_untagged_get pcp_profile_ndx 0 tc_ndx 0\n\r"
    "  dp_ndx 0\n\r"
#endif 
    "",
    "",
    {0, BIT(9), 0, 0}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_ING_VLAN_EDIT_PCP_MAP_UNTAGGED_GET_PCP_MAP_UNTAGGED_GET_PCP_PROFILE_NDX_ID, 
    "pcp_profile_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pcp_profile_ndx:\n\r"
    "  The PCP profile is set according to AC. Range: 0 - 7.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_ing_vlan_edit pcp_map_untagged_get pcp_profile_ndx 0 tc_ndx 0\n\r"
    "  dp_ndx 0\n\r"
#endif 
    "",
    "",
    {0, BIT(9), 0, 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_ING_VLAN_EDIT_PCP_MAP_UNTAGGED_GET_PCP_MAP_UNTAGGED_GET_TC_NDX_ID, 
    "tc_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  tc_ndx:\n\r"
    "  Traffic Class. Calculated at the ingress. See COS module. Range: 0 - 7.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_ing_vlan_edit pcp_map_untagged_get pcp_profile_ndx 0 tc_ndx 0\n\r"
    "  dp_ndx 0\n\r"
#endif 
    "",
    "",
    {0, BIT(9), 0, 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_ING_VLAN_EDIT_PCP_MAP_UNTAGGED_GET_PCP_MAP_UNTAGGED_GET_DP_NDX_ID, 
    "dp_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  dp_ndx:\n\r"
    "  Drop Precedence. Calculated at the ingress. See COS module. Range: 0 - 3.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_ing_vlan_edit pcp_map_untagged_get pcp_profile_ndx 0 tc_ndx 0\n\r"
    "  dp_ndx 0\n\r"
#endif 
    "",
    "",
    {0, BIT(9), 0, 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },
  { 
    SOC_PARAM_PPD_API_LIF_ING_VLAN_EDIT_ID, 
    "lif_ing_vlan_edit", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "",
    "", 
    "",
    {0, BIT(0)|BIT(1)|BIT(2)|BIT(3)|BIT(4)|BIT(5)|BIT(6)|BIT(7)|BIT(8)|BIT(9), 0, 0}, 
    1, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
#endif /* } lif_ing_vlan_edit*/
#ifdef UI_LLP_COS/* { llp_cos*/
  { 
    SOC_PARAM_PPD_LLP_COS_GLBL_INFO_SET_GLBL_INFO_SET_ID, 
    "glbl_info_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Sets global information for COS resolution, including default drop precedence.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_cos glbl_info_set default_dp 0\n\r"
#endif 
    "",
    "",
    {0, BIT(12), 0, 0}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_COS_GLBL_INFO_SET_GLBL_INFO_SET_GLBL_INFO_DEFAULT_DP_ID, 
    "default_dp", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  glbl_info.default_dp:\n\r"
    "  Default Drop Precedence.Range: 0 - 7. Default TC may be set per port-See\n\r"
    "  SOC_PPC_LLP_COS_PORT_INFO.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_cos glbl_info_set default_dp 0\n\r"
#endif 
    "",
    "",
    {0, BIT(12), 0, 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_COS_GLBL_INFO_GET_GLBL_INFO_GET_ID, 
    "glbl_info_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Sets global information for COS resolution, including default drop precedence.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_cos glbl_info_get\n\r"
#endif 
    "",
    "",
    {0, BIT(13), 0, 0}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_COS_PORT_INFO_SET_PORT_INFO_SET_ID, 
    "port_info_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Sets port information for COS resolution, including which mechanisms to\n\r"
    "  perform, table instance to use for mapping,...\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_cos port_info_set local_port_ndx 0 default_tc 0 use_l4_prtcl 0\n\r"
    "  use_mpls_term_lbl 0 use_ip_subnet 0 ip_qos_to_tc_index 0 use_ip_qos 0\n\r"
    "  tc_to_dp_index 0 up_to_dp_index 0 tc_to_up_index 0 in_up_to_tc_and_de_index 0\n\r"
    "  use_dei 0 use_l2_protocol 0 use_for_out_up 0 use_for_tc 0\n\r"
#endif 
    "",
    "",
    {0, BIT(14), 0, 0}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_COS_PORT_INFO_SET_PORT_INFO_SET_LOCAL_PORT_NDX_ID, 
    "local_port_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  local_port_ndx:\n\r"
    "  Local port ID.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_cos port_info_set local_port_ndx 0 default_tc 0 use_l4_prtcl 0\n\r"
    "  use_mpls_term_lbl 0 use_ip_subnet 0 ip_qos_to_tc_index 0 use_ip_qos 0\n\r"
    "  tc_to_dp_index 0 up_to_dp_index 0 tc_to_up_index 0 in_up_to_tc_and_de_index 0\n\r"
    "  use_dei 0 use_l2_protocol 0 use_for_out_up 0 use_for_tc 0\n\r"
#endif 
    "",
    "",
    {0, BIT(14), 0, 0}, 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_COS_PORT_INFO_SET_PORT_INFO_SET_PORT_INFO_DEFAULT_TC_ID, 
    "default_tc", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  port_info.default_tc:\n\r"
    "  Default TC of the port\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_cos port_info_set local_port_ndx 0 default_tc 0 use_l4_prtcl 0\n\r"
    "  use_mpls_term_lbl 0 use_ip_subnet 0 ip_qos_to_tc_index 0 use_ip_qos 0\n\r"
    "  tc_to_dp_index 0 up_to_dp_index 0 tc_to_up_index 0 in_up_to_tc_and_de_index 0\n\r"
    "  use_dei 0 use_l2_protocol 0 use_for_out_up 0 use_for_tc 0\n\r"
#endif 
    "",
    "",
    {0, BIT(14), 0, 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_COS_PORT_INFO_SET_PORT_INFO_SET_PORT_INFO_L4_INFO_USE_L4_PRTCL_ID, 
    "use_l4_prtcl", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  port_info.l4_info.use_l4_prtcl:\n\r"
    "  If TRUE, then use L4 header protocol (TCP and UDP) and ports range for\n\r"
    "  mapping to TC\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_cos port_info_set local_port_ndx 0 default_tc 0 use_l4_prtcl 0\n\r"
    "  use_mpls_term_lbl 0 use_ip_subnet 0 ip_qos_to_tc_index 0 use_ip_qos 0\n\r"
    "  tc_to_dp_index 0 up_to_dp_index 0 tc_to_up_index 0 in_up_to_tc_and_de_index 0\n\r"
    "  use_dei 0 use_l2_protocol 0 use_for_out_up 0 use_for_tc 0\n\r"
#endif 
    "",
    "",
    {0, BIT(14), 0, 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_COS_PORT_INFO_SET_PORT_INFO_SET_PORT_INFO_L3_INFO_USE_IP_SUBNET_ID, 
    "use_ip_subnet", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  port_info.l3_info.use_ip_subnet:\n\r"
    "  If TRUE, then use IPv4 source subnet for mapping to TC\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_cos port_info_set local_port_ndx 0 default_tc 0 use_l4_prtcl 0\n\r"
    "  use_ip_subnet 0 use_mpls_term_lbl 0 ip_qos_to_tc_index 0 use_ip_qos 0 tc_to_dp_index 0\n\r"
    "  up_to_dp_index 0 tc_to_up_index 0 in_up_to_tc_and_de_index 0 use_dei 0\n\r"
    "  use_l2_protocol 0 use_for_out_up 0 use_for_tc 0\n\r"
#endif 
    "",
    "",
    {0, BIT(14), 0, 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_COS_PORT_INFO_SET_PORT_INFO_SET_PORT_INFO_L3_INFO_USE_MPLS_TERM_LBL_ID, 
    "use_mpls_term_lbl", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  port_info.l3_info.use_mpls_term_lbl:\n\r"
    "  If TRUE, then use mapping from terminated MPLS label\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_cos port_info_set local_port_ndx 0 default_tc 0 use_l4_prtcl 0\n\r"
    "  use_ip_subnet 0 use_mpls_term_lbl 0 ip_qos_to_tc_index 0 use_ip_qos 0 tc_to_dp_index 0\n\r"
    "  up_to_dp_index 0 tc_to_up_index 0 in_up_to_tc_and_de_index 0 use_dei 0\n\r"
    "  use_l2_protocol 0 use_for_out_up 0 use_for_tc 0\n\r"
#endif 
    "",
    "",
    {0, BIT(14), 0, 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_COS_PORT_INFO_SET_PORT_INFO_SET_PORT_INFO_L3_INFO_IP_QOS_TO_TC_INDEX_ID, 
    "ip_qos_to_tc_index", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  port_info.l3_info.ip_qos_to_tc_index:\n\r"
    "  Selects the table for mapping the TOS/TC field in IPv4/IPv6 Header to TC.\n\r"
    "  Relevant only if use_ip_qos is TRUE\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_cos port_info_set local_port_ndx 0 default_tc 0 use_l4_prtcl 0\n\r"
    "  use_ip_subnet 0 use_mpls_term_lbl 0 ip_qos_to_tc_index 0 use_ip_qos 0 tc_to_dp_index 0\n\r"
    "  up_to_dp_index 0 tc_to_up_index 0 in_up_to_tc_and_de_index 0 use_dei 0\n\r"
    "  use_l2_protocol 0 use_for_out_up 0 use_for_tc 0\n\r"
#endif 
    "",
    "",
    {0, BIT(14), 0, 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_COS_PORT_INFO_SET_PORT_INFO_SET_PORT_INFO_L3_INFO_USE_IP_QOS_ID, 
    "use_ip_qos", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  port_info.l3_info.use_ip_qos:\n\r"
    "  If TRUE, then use IPv4 header (TOS) and IPv6 header (TC) for mapping to TC\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_cos port_info_set local_port_ndx 0 default_tc 0 use_l4_prtcl 0\n\r"
    "  use_ip_subnet 0 use_mpls_term_lbl 0 ip_qos_to_tc_index 0 use_ip_qos 0 tc_to_dp_index 0\n\r"
    "  up_to_dp_index 0 tc_to_up_index 0 in_up_to_tc_and_de_index 0 use_dei 0\n\r"
    "  use_l2_protocol 0 use_for_out_up 0 use_for_tc 0\n\r"
#endif 
    "",
    "",
    {0, BIT(14), 0, 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_COS_PORT_INFO_SET_PORT_INFO_SET_PORT_INFO_L2_INFO_TBLS_SELECT_TC_TO_DP_INDEX_ID, 
    "tc_to_dp_index", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  port_info.l2_info.tbls_select.tc_to_dp_index:\n\r"
    "  Selects the table for mapping TC to DP. Range: 0 - 1. Relevant only for T20E.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_cos port_info_set local_port_ndx 0 default_tc 0 use_l4_prtcl 0\n\r"
    "  use_ip_subnet 0 use_mpls_term_lbl 0 ip_qos_to_tc_index 0 use_ip_qos 0 tc_to_dp_index 0\n\r"
    "  up_to_dp_index 0 tc_to_up_index 0 in_up_to_tc_and_de_index 0 use_dei 0\n\r"
    "  use_l2_protocol 0 use_for_out_up 0 use_for_tc 0\n\r"
#endif 
    "",
    "",
    {0, BIT(14), 0, 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_COS_PORT_INFO_SET_PORT_INFO_SET_PORT_INFO_L2_INFO_TBLS_SELECT_UP_TO_DP_INDEX_ID, 
    "up_to_dp_index", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  port_info.l2_info.tbls_select.up_to_dp_index:\n\r"
    "  Selects the table for mapping UP to DP. Range: 0 - 1. Relevant only for\n\r"
    "  Petra-B.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_cos port_info_set local_port_ndx 0 default_tc 0 use_l4_prtcl 0\n\r"
    "  use_ip_subnet 0 use_mpls_term_lbl 0 ip_qos_to_tc_index 0 use_ip_qos 0 tc_to_dp_index 0\n\r"
    "  up_to_dp_index 0 tc_to_up_index 0 in_up_to_tc_and_de_index 0 use_dei 0\n\r"
    "  use_l2_protocol 0 use_for_out_up 0 use_for_tc 0\n\r"
#endif 
    "",
    "",
    {0, BIT(14), 0, 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_COS_PORT_INFO_SET_PORT_INFO_SET_PORT_INFO_L2_INFO_TBLS_SELECT_TC_TO_UP_INDEX_ID, 
    "tc_to_up_index", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  port_info.l2_info.tbls_select.tc_to_up_index:\n\r"
    "  Selects the table for mapping TC to UP. Range: 0 - 3.Relevant only for\n\r"
    "  Petra-B (For Petra-A Compatibility).\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_cos port_info_set local_port_ndx 0 default_tc 0 use_l4_prtcl 0\n\r"
    "  use_ip_subnet 0 use_mpls_term_lbl 0 ip_qos_to_tc_index 0 use_ip_qos 0 tc_to_dp_index 0\n\r"
    "  up_to_dp_index 0 tc_to_up_index 0 in_up_to_tc_and_de_index 0 use_dei 0\n\r"
    "  use_l2_protocol 0 use_for_out_up 0 use_for_tc 0\n\r"
#endif 
    "",
    "",
    {0, BIT(14), 0, 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_COS_PORT_INFO_SET_PORT_INFO_SET_PORT_INFO_L2_INFO_TBLS_SELECT_IN_UP_TO_TC_AND_DE_INDEX_ID, 
    "in_up_to_tc_and_de_index", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  port_info.l2_info.tbls_select.in_up_to_tc_and_de_index:\n\r"
    "  Selects the table for mapping the incoming UP/PCP field (from the Tag) to TC\n\r"
    "  and DE\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_cos port_info_set local_port_ndx 0 default_tc 0 use_l4_prtcl 0\n\r"
    "  use_ip_subnet 0 use_mpls_term_lbl 0 ip_qos_to_tc_index 0 use_ip_qos 0 tc_to_dp_index 0\n\r"
    "  up_to_dp_index 0 tc_to_up_index 0 in_up_to_tc_and_de_index 0 use_dei 0\n\r"
    "  use_l2_protocol 0 use_for_out_up 0 use_for_tc 0\n\r"
#endif 
    "",
    "",
    {0, BIT(14), 0, 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_COS_PORT_INFO_SET_PORT_INFO_SET_PORT_INFO_L2_INFO_USE_DEI_ID, 
    "use_dei", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  port_info.l2_info.use_dei:\n\r"
    "  If set, the port uses the DEI. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_cos port_info_set local_port_ndx 0 default_tc 0 use_l4_prtcl 0\n\r"
    "  use_ip_subnet 0 use_mpls_term_lbl 0 ip_qos_to_tc_index 0 use_ip_qos 0 tc_to_dp_index 0\n\r"
    "  up_to_dp_index 0 tc_to_up_index 0 in_up_to_tc_and_de_index 0 use_dei 0\n\r"
    "  use_l2_protocol 0 use_for_out_up 0 use_for_tc 0\n\r"
#endif 
    "",
    "",
    {0, BIT(14), 0, 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_COS_PORT_INFO_SET_PORT_INFO_SET_PORT_INFO_L2_INFO_USE_L2_PROTOCOL_ID, 
    "use_l2_protocol", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  port_info.l2_info.use_l2_protocol:\n\r"
    "  If TRUE, then use L2 Ethernet type for mapping to TC\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_cos port_info_set local_port_ndx 0 default_tc 0 use_l4_prtcl 0\n\r"
    "  use_ip_subnet 0 use_mpls_term_lbl 0 ip_qos_to_tc_index 0 use_ip_qos 0 tc_to_dp_index 0\n\r"
    "  up_to_dp_index 0 tc_to_up_index 0 in_up_to_tc_and_de_index 0 use_dei 0\n\r"
    "  use_l2_protocol 0 use_for_out_up 0 use_for_tc 0\n\r"
#endif 
    "",
    "",
    {0, BIT(14), 0, 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_COS_PORT_INFO_SET_PORT_INFO_SET_PORT_INFO_L2_INFO_IGNORE_PCP_FOR_TC_ID, 
    "l2_ignore_pcp_for_tc", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  port_info.l2_info.ignore_pkt_pcp_for_tc:\n\r"
    "  If TRUE, ignore Packet PCP for mappping to TC\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_cos port_info_set local_port_ndx 0 default_tc 0 use_l4_prtcl 0\n\r"
    "  use_ip_subnet 0 use_mpls_term_lbl 0 ip_qos_to_tc_index 0 use_ip_qos 0 tc_to_dp_index 0\n\r"
    "  up_to_dp_index 0 tc_to_up_index 0 in_up_to_tc_and_de_index 0 use_dei 0\n\r"
    "  use_l2_protocol 0 use_for_out_up 0 use_for_tc 0\n\r"
#endif 
    "",
    "",
    {0, BIT(14), 0, 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_COS_PORT_INFO_SET_PORT_INFO_SET_PORT_INFO_L2_INFO_UP_USE_USE_FOR_OUT_UP_ID, 
    "use_for_out_up", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  port_info.l2_info.up_use.use_for_out_up:\n\r"
    "  When valid, the incoming UP also affects the calculation of the UP to be sent\n\r"
    "  when leaving the bridge. Relevant only for Petra-compatibility.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_cos port_info_set local_port_ndx 0 default_tc 0 use_l4_prtcl 0\n\r"
    "  use_ip_subnet 0 use_mpls_term_lbl 0 ip_qos_to_tc_index 0 use_ip_qos 0 tc_to_dp_index 0\n\r"
    "  up_to_dp_index 0 tc_to_up_index 0 in_up_to_tc_and_de_index 0 use_dei 0\n\r"
    "  use_l2_protocol 0 use_for_out_up 0 use_for_tc 0\n\r"
#endif 
    "",
    "",
    {0, BIT(14), 0, 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_COS_PORT_INFO_SET_PORT_INFO_SET_PORT_INFO_L2_INFO_UP_USE_USE_FOR_TC_ID, 
    "use_for_tc", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  port_info.l2_info.up_use.use_for_tc:\n\r"
    "  Should the UP that arrived with the packet take place in the calculation of TC\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_cos port_info_set local_port_ndx 0 default_tc 0 use_l4_prtcl 0\n\r"
    "  use_ip_subnet 0 use_mpls_term_lbl 0 ip_qos_to_tc_index 0 use_ip_qos 0 tc_to_dp_index 0\n\r"
    "  up_to_dp_index 0 tc_to_up_index 0 in_up_to_tc_and_de_index 0 use_dei 0\n\r"
    "  use_l2_protocol 0 use_for_out_up 0 use_for_tc 0\n\r"
#endif 
    "",
    "",
    {0, BIT(14), 0, 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_COS_PORT_INFO_GET_PORT_INFO_GET_ID, 
    "port_info_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Sets port information for COS resolution, including which mechanisms to\n\r"
    "  perform, table instance to use for mapping,...\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_cos port_info_get local_port_ndx 0\n\r"
#endif 
    "",
    "",
    {0, BIT(15), 0, 0}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_COS_PORT_INFO_GET_PORT_INFO_GET_LOCAL_PORT_NDX_ID, 
    "local_port_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  local_port_ndx:\n\r"
    "  Local port ID.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_cos port_info_get local_port_ndx 0\n\r"
#endif 
    "",
    "",
    {0, BIT(15), 0, 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },
  { 
    SOC_PARAM_PPD_LLP_COS_MAPPING_TABLE_ENTRY_SET_MAPPING_TABLE_ENTRY_SET_ID, 
    "mapping_table_entry_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set mapping from packet fields to TC/DP, includes the following mappings:- UP\n\r"
    "  to DE and TC.- IPv4 TOS to DP and TC.- IPv6 TC to DP and TC.- MPLS EXP to DP\n\r"
    "  and TC.- DE to DP- UP to DP.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_cos mapping_table_entry_set mapping_tbl_ndx 0 table_id_ndx 0\n\r"
    "  entry_ndx 0 valid 0 value2 0 value1 0\n\r"
#endif 
    "",
    "",
    {0, BIT(16), 0, 0}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_COS_MAPPING_TABLE_ENTRY_SET_MAPPING_TABLE_ENTRY_SET_MAPPING_TBL_NDX_ID, 
    "mapping_tbl_ndx", 
    (PARAM_VAL_RULES *)&SOC_PPC_LLP_COS_MAPPING_TABLE_rule[0], 
    (sizeof(SOC_PPC_LLP_COS_MAPPING_TABLE_rule) / sizeof(SOC_PPC_LLP_COS_MAPPING_TABLE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  mapping_tbl_ndx:\n\r"
    "  Selects the mapping table to modify (TOS to TC, UP to TC etc...)  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_cos mapping_table_entry_set mapping_tbl_ndx 0 table_id_ndx 0\n\r"
    "  entry_ndx 0 valid 0 value2 0 value1 0\n\r"
#endif 
    "",
    "",
    {0, BIT(16), 0, 0}, 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_COS_MAPPING_TABLE_ENTRY_SET_MAPPING_TABLE_ENTRY_SET_TABLE_ID_NDX_ID, 
    "table_id_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  table_id_ndx:\n\r"
    "  Selects the instance of the table. One mapping may have more than one table,\n\r"
    "  for example, TOS to TC has two tables, and this parameter selects one of\n\r"
    "  these tables. Each port is assigned one of these tables to be used - see\n\r"
    "  soc_ppd_llp_cos_port_info_set()  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_cos mapping_table_entry_set mapping_tbl_ndx 0 table_id_ndx 0\n\r"
    "  entry_ndx 0 valid 0 value2 0 value1 0\n\r"
#endif 
    "",
    "",
    {0, BIT(16), 0, 0}, 
    4, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_COS_MAPPING_TABLE_ENTRY_SET_MAPPING_TABLE_ENTRY_SET_ENTRY_NDX_ID, 
    "entry_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  entry_ndx:\n\r"
    "  Mapped value may be UP/TOS/TC/DE/EXP according to the selected table.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_cos mapping_table_entry_set mapping_tbl_ndx 0 table_id_ndx 0\n\r"
    "  entry_ndx 0 valid 0 value2 0 value1 0\n\r"
#endif 
    "",
    "",
    {0, BIT(16), 0, 0}, 
    5, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_COS_MAPPING_TABLE_ENTRY_SET_MAPPING_TABLE_ENTRY_SET_ENTRY_VALID_ID, 
    "valid", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  entry.valid:\n\r"
    "  The valid field of the entry (if presents). Refers to value2. See\n\r"
    "  SOC_PPC_LLP_COS_MAPPING_TABLE..\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_cos mapping_table_entry_set mapping_tbl_ndx 0 table_id_ndx 0\n\r"
    "  entry_ndx 0 valid 0 value2 0 value1 0\n\r"
#endif 
    "",
    "",
    {0, BIT(16), 0, 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_COS_MAPPING_TABLE_ENTRY_SET_MAPPING_TABLE_ENTRY_SET_ENTRY_VALUE2_ID, 
    "value2", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  entry.value2:\n\r"
    "  The second value of the entry (if presents)\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_cos mapping_table_entry_set mapping_tbl_ndx 0 table_id_ndx 0\n\r"
    "  entry_ndx 0 valid 0 value2 0 value1 0\n\r"
#endif 
    "",
    "",
    {0, BIT(16), 0, 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_COS_MAPPING_TABLE_ENTRY_SET_MAPPING_TABLE_ENTRY_SET_ENTRY_VALUE1_ID, 
    "value1", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  entry.value1:\n\r"
    "  The first value of the entry\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_cos mapping_table_entry_set mapping_tbl_ndx 0 table_id_ndx 0\n\r"
    "  entry_ndx 0 valid 0 value2 0 value1 0\n\r"
#endif 
    "",
    "",
    {0, BIT(16), 0, 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_COS_MAPPING_TABLE_ENTRY_GET_MAPPING_TABLE_ENTRY_GET_ID, 
    "mapping_table_entry_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set mapping from packet fields to TC/DP, includes the following mappings:- UP\n\r"
    "  to DE and TC.- IPv4 TOS to DP and TC.- IPv6 TC to DP and TC.- MPLS EXP to DP\n\r"
    "  and TC.- DE to DP- UP to DP.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_cos mapping_table_entry_get mapping_tbl_ndx 0 table_id_ndx 0\n\r"
    "  entry_ndx 0\n\r"
#endif 
    "",
    "",
    {0, BIT(17), 0, 0}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_COS_MAPPING_TABLE_ENTRY_GET_MAPPING_TABLE_ENTRY_GET_MAPPING_TBL_NDX_ID, 
    "mapping_tbl_ndx", 
    (PARAM_VAL_RULES *)&SOC_PPC_LLP_COS_MAPPING_TABLE_rule[0], 
    (sizeof(SOC_PPC_LLP_COS_MAPPING_TABLE_rule) / sizeof(SOC_PPC_LLP_COS_MAPPING_TABLE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  mapping_tbl_ndx:\n\r"
    "  Selects the mapping table to modify (TOS to TC, UP to TC etc...)  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_cos mapping_table_entry_get mapping_tbl_ndx 0 table_id_ndx 0\n\r"
    "  entry_ndx 0\n\r"
#endif 
    "",
    "",
    {0, BIT(17), 0, 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_COS_MAPPING_TABLE_ENTRY_GET_MAPPING_TABLE_ENTRY_GET_TABLE_ID_NDX_ID, 
    "table_id_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  table_id_ndx:\n\r"
    "  Selects the instance of the table. One mapping may have more than one table,\n\r"
    "  for example, TOS to TC has two tables, and this parameter selects one of\n\r"
    "  these tables. Each port is assigned one of these tables to be used - see\n\r"
    "  soc_ppd_llp_cos_port_info_set()  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_cos mapping_table_entry_get mapping_tbl_ndx 0 table_id_ndx 0\n\r"
    "  entry_ndx 0\n\r"
#endif 
    "",
    "",
    {0, BIT(17), 0, 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_COS_MAPPING_TABLE_ENTRY_GET_MAPPING_TABLE_ENTRY_GET_ENTRY_NDX_ID, 
    "entry_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  entry_ndx:\n\r"
    "  Mapped value may be UP/TOS/TC/DE/EXP according to the selected table.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_cos mapping_table_entry_get mapping_tbl_ndx 0 table_id_ndx 0\n\r"
    "  entry_ndx 0\n\r"
#endif 
    "",
    "",
    {0, BIT(17), 0, 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_COS_L4_PORT_RANGE_INFO_SET_L4_PORT_RANGE_INFO_SET_ID, 
    "l4_port_range_info_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Sets range of L4 ports. Packets L4 ports will be compared to this range in\n\r"
    "  order to set TC value correspondingly.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_cos l4_port_range_info_set range_ndx 0 in_range 0 end 0 start 0\n\r"
#endif 
    "",
    "",
    {0, BIT(18), 0, 0}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_COS_L4_PORT_RANGE_INFO_SET_L4_PORT_RANGE_INFO_SET_RANGE_NDX_ID, 
    "range_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  range_ndx:\n\r"
    "  Range ID. Range: 0 - 2.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_cos l4_port_range_info_set range_ndx 0 in_range 0 end 0 start 0\n\r"
#endif 
    "",
    "",
    {0, BIT(18), 0, 0}, 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_COS_L4_PORT_RANGE_INFO_SET_L4_PORT_RANGE_INFO_SET_RANGE_INFO_IN_RANGE_ID, 
    "in_range", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  range_info.in_range:\n\r"
    "  If TRUE, then there is match if the port is inside the range, i.e., port x\n\r"
    "  matches if start<=x<= end. If FALSE, there is match if the port is outside\n\r"
    "  the range, i.e., x > end or x <start.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_cos l4_port_range_info_set range_ndx 0 in_range 0 end 0 start 0\n\r"
#endif 
    "",
    "",
    {0, BIT(18), 0, 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_COS_L4_PORT_RANGE_INFO_SET_L4_PORT_RANGE_INFO_SET_RANGE_INFO_END_ID, 
    "end", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  range_info.end:\n\r"
    "  High limit of the ports range. Range: 0 - 65535.last_port >= first_port.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_cos l4_port_range_info_set range_ndx 0 in_range 0 end 0 start 0\n\r"
#endif 
    "",
    "",
    {0, BIT(18), 0, 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_COS_L4_PORT_RANGE_INFO_SET_L4_PORT_RANGE_INFO_SET_RANGE_INFO_START_ID, 
    "start", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  range_info.start:\n\r"
    "  Low limit of the ports range. Range: 0 - 65535.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_cos l4_port_range_info_set range_ndx 0 in_range 0 end 0 start 0\n\r"
#endif 
    "",
    "",
    {0, BIT(18), 0, 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_COS_L4_PORT_RANGE_INFO_GET_L4_PORT_RANGE_INFO_GET_ID, 
    "l4_port_range_info_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Sets range of L4 ports. Packets L4 ports will be compared to this range in\n\r"
    "  order to set TC value correspondingly.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_cos l4_port_range_info_get range_ndx 0\n\r"
#endif 
    "",
    "",
    {0, BIT(19), 0, 0}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_COS_L4_PORT_RANGE_INFO_GET_L4_PORT_RANGE_INFO_GET_RANGE_NDX_ID, 
    "range_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  range_ndx:\n\r"
    "  Range ID. Range: 0 - 2.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_cos l4_port_range_info_get range_ndx 0\n\r"
#endif 
    "",
    "",
    {0, BIT(19), 0, 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_COS_L4_PORT_RANGE_TO_TC_INFO_SET_L4_PORT_RANGE_TO_TC_INFO_SET_ID, 
    "l4_port_range_to_tc_info_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set mapping to Traffic class according to L4 information\n\r"
    "  includingSource/Destination and protocol type (TCP or UDP). Packet L4\n\r"
    "  destination and source ports are compared to the ranges set by\n\r"
    "  soc_ppd_llp_cos_l4_port_range_info_set(). Then according to comparison result:\n\r"
    "  - 0-3 for source port (where 3 means was not match)\n\r"
    "  - 0-3 for destination port (where 3 means was not match)and according to\n\r"
    "  protocol type (UDP/TCP), this API is used to determine the TC value to set to\n\r"
    "  the packet \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_cos l4_port_range_to_tc_info_set l4_prtcl_type_ndx 0\n\r"
    "  src_port_match_range_ndx 0 dest_port_match_range_ndx 0 valid 0 tc 0\n\r"
#endif 
    "",
    "",
    {0, BIT(20), 0, 0}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_COS_L4_PORT_RANGE_TO_TC_INFO_SET_L4_PORT_RANGE_TO_TC_INFO_SET_L4_PRTCL_TYPE_NDX_ID, 
    "l4_prtcl_type_ndx", 
    (PARAM_VAL_RULES *)&SOC_PPD_SAND_PP_L4_PRTCL_TYPE_rule[0], 
    (sizeof(SOC_PPD_SAND_PP_L4_PRTCL_TYPE_rule) / sizeof(SOC_PPD_SAND_PP_L4_PRTCL_TYPE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  l4_prtcl_type_ndx:\n\r"
    "  L4 Protocol type (UDP/TCP).  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_cos l4_port_range_to_tc_info_set l4_prtcl_type_ndx 0\n\r"
    "  src_port_match_range_ndx 0 dest_port_match_range_ndx 0 valid 0 tc 0\n\r"
#endif 
    "",
    "",
    {0, BIT(20), 0, 0}, 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_COS_L4_PORT_RANGE_TO_TC_INFO_SET_L4_PORT_RANGE_TO_TC_INFO_SET_SRC_PORT_MATCH_RANGE_NDX_ID, 
    "src_port_match_range_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  src_port_match_range_ndx:\n\r"
    "  The ranges match the packet L4 source port - set to\n\r"
    "  SOC_PPD_LLP_COS_l4_RANG_RANGE_NO_MATCH for packet with no match.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_cos l4_port_range_to_tc_info_set l4_prtcl_type_ndx 0\n\r"
    "  src_port_match_range_ndx 0 dest_port_match_range_ndx 0 valid 0 tc 0\n\r"
#endif 
    "",
    "",
    {0, BIT(20), 0, 0}, 
    4, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_COS_L4_PORT_RANGE_TO_TC_INFO_SET_L4_PORT_RANGE_TO_TC_INFO_SET_DEST_PORT_MATCH_RANGE_NDX_ID, 
    "dest_port_match_range_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  dest_port_match_range_ndx:\n\r"
    "  The ranges match the packet L4 destination port - set to\n\r"
    "  SOC_PPD_LLP_COS_l4_RANG_RANGE_NO_MATCH for packet with no match.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_cos l4_port_range_to_tc_info_set l4_prtcl_type_ndx 0\n\r"
    "  src_port_match_range_ndx 0 dest_port_match_range_ndx 0 valid 0 tc 0\n\r"
#endif 
    "",
    "",
    {0, BIT(20), 0, 0}, 
    5, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_COS_L4_PORT_RANGE_TO_TC_INFO_SET_L4_PORT_RANGE_TO_TC_INFO_SET_TC_INFO_VALID_ID, 
    "valid", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  tc_info.valid:\n\r"
    "  Is the TC valid\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_cos l4_port_range_to_tc_info_set l4_prtcl_type_ndx 0\n\r"
    "  src_port_match_range_ndx 0 dest_port_match_range_ndx 0 valid 0 tc 0\n\r"
#endif 
    "",
    "",
    {0, BIT(20), 0, 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_COS_L4_PORT_RANGE_TO_TC_INFO_SET_L4_PORT_RANGE_TO_TC_INFO_SET_TC_INFO_TC_ID, 
    "tc", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  tc_info.tc:\n\r"
    "  Traffic Class value.Range: 0 - 7.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_cos l4_port_range_to_tc_info_set l4_prtcl_type_ndx 0\n\r"
    "  src_port_match_range_ndx 0 dest_port_match_range_ndx 0 valid 0 tc 0\n\r"
#endif 
    "",
    "",
    {0, BIT(20), 0, 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_COS_L4_PORT_RANGE_TO_TC_INFO_GET_L4_PORT_RANGE_TO_TC_INFO_GET_ID, 
    "l4_port_range_to_tc_info_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set mapping to Traffic class according to L4 information\n\r"
    "  includingSource/Destination and protocol type (TCP or UDP). Packet L4\n\r"
    "  destination and source ports are compared to the ranges set by\n\r"
    "  soc_ppd_llp_cos_l4_port_range_info_set(). Then according to comparison result:\n\r"
    "  - 0-3 for source port (where 3 means was not match)\n\r"
    "  - 0-3 for destination port (where 3 means was not match)and according to\n\r"
    "  protocol type (UDP/TCP), this API is used to determine the TC value to set to\n\r"
    "  the packet \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_cos l4_port_range_to_tc_info_get l4_prtcl_type_ndx 0\n\r"
    "  src_port_match_range_ndx 0 dest_port_match_range_ndx 0\n\r"
#endif 
    "",
    "",
    {0, BIT(21), 0, 0}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_COS_L4_PORT_RANGE_TO_TC_INFO_GET_L4_PORT_RANGE_TO_TC_INFO_GET_L4_PRTCL_TYPE_NDX_ID, 
    "l4_prtcl_type_ndx", 
    (PARAM_VAL_RULES *)&SOC_PPD_SAND_PP_L4_PRTCL_TYPE_rule[0], 
    (sizeof(SOC_PPD_SAND_PP_L4_PRTCL_TYPE_rule) / sizeof(SOC_PPD_SAND_PP_L4_PRTCL_TYPE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  l4_prtcl_type_ndx:\n\r"
    "  L4 Protocol type (UDP/TCP).  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_cos l4_port_range_to_tc_info_get l4_prtcl_type_ndx 0\n\r"
    "  src_port_match_range_ndx 0 dest_port_match_range_ndx 0\n\r"
#endif 
    "",
    "",
    {0, BIT(21), 0, 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_COS_L4_PORT_RANGE_TO_TC_INFO_GET_L4_PORT_RANGE_TO_TC_INFO_GET_SRC_PORT_MATCH_RANGE_NDX_ID, 
    "src_port_match_range_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  src_port_match_range_ndx:\n\r"
    "  The ranges match the packet L4 source port - set to\n\r"
    "  SOC_PPD_LLP_COS_l4_RANG_RANGE_NO_MATCH for packet with no match.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_cos l4_port_range_to_tc_info_get l4_prtcl_type_ndx 0\n\r"
    "  src_port_match_range_ndx 0 dest_port_match_range_ndx 0\n\r"
#endif 
    "",
    "",
    {0, BIT(21), 0, 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_COS_L4_PORT_RANGE_TO_TC_INFO_GET_L4_PORT_RANGE_TO_TC_INFO_GET_DEST_PORT_MATCH_RANGE_NDX_ID, 
    "dest_port_match_range_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  dest_port_match_range_ndx:\n\r"
    "  The ranges match the packet L4 destination port - set to\n\r"
    "  SOC_PPD_LLP_COS_l4_RANG_RANGE_NO_MATCH for packet with no match.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_cos l4_port_range_to_tc_info_get l4_prtcl_type_ndx 0\n\r"
    "  src_port_match_range_ndx 0 dest_port_match_range_ndx 0\n\r"
#endif 
    "",
    "",
    {0, BIT(21), 0, 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_COS_IPV4_SUBNET_BASED_SET_IPV4_SUBNET_BASED_SET_ID, 
    "ipv4_subnet_based_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set COS parameters based on source IPv4 subnet.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_cos ipv4_subnet_based_set entry_ndx 0 prefix_len 0 ip_address 0\n\r"
    "  tc_is_valid 0 tc 0\n\r"
#endif 
    "",
    "",
    {0, BIT(22), 0, 0}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_COS_IPV4_SUBNET_BASED_SET_IPV4_SUBNET_BASED_SET_ENTRY_NDX_ID, 
    "entry_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  entry_ndx:\n\r"
    "  Entry index in the subnet table.\n\r"
    "  Range: Petra-B: 0 - 15. T20E: 0 - 23.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_cos ipv4_subnet_based_set entry_ndx 0 prefix_len 0 ip_address 0\n\r"
    "  tc_is_valid 0 tc 0\n\r"
#endif 
    "",
    "",
    {0, BIT(22), 0, 0}, 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_COS_IPV4_SUBNET_BASED_SET_IPV4_SUBNET_BASED_SET_SUBNET_BASED_INFO_TC_IS_VALID_ID, 
    "tc_is_valid", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  subnet_based_info.tc_is_valid:\n\r"
    "  TC validity for this entry. If TRUE, then when there are subnet matches, this\n\r"
    "  TC is taken. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_cos ipv4_subnet_based_set entry_ndx 0 prefix_len 0 ip_address 0\n\r"
    "  tc_is_valid 0 tc 0\n\r"
#endif 
    "",
    "",
    {0, BIT(22), 0, 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_COS_IPV4_SUBNET_BASED_SET_IPV4_SUBNET_BASED_SET_SUBNET_BASED_INFO_TC_ID, 
    "tc", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  subnet_based_info.tc:\n\r"
    "  Traffic Class.Range: 0 - 7.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_cos ipv4_subnet_based_set entry_ndx 0 prefix_len 0 ip_address 0\n\r"
    "  tc_is_valid 0 tc 0\n\r"
#endif 
    "",
    "",
    {0, BIT(22), 0, 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_COS_IPV4_SUBNET_BASED_GET_IPV4_SUBNET_BASED_GET_ID, 
    "ipv4_subnet_based_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set COS parameters based on source IPv4 subnet.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_cos ipv4_subnet_based_get entry_ndx 0 prefix_len 0 ip_address 0\n\r"
#endif 
    "",
    "",
    {0, BIT(23), 0, 0}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_COS_IPV4_SUBNET_BASED_GET_IPV4_SUBNET_BASED_GET_ENTRY_NDX_ID, 
    "entry_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  entry_ndx:\n\r"
    "  Entry index in the subnet table.\n\r"
    "  Range: Petra-B: 0 - 15. T20E: 0 - 23.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_cos ipv4_subnet_based_get entry_ndx 0 prefix_len 0 ip_address 0\n\r"
#endif 
    "",
    "",
    {0, BIT(23), 0, 0}, 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_COS_IPV4_SUBNET_BASED_GET_IPV4_SUBNET_BASED_GET_SUBNET_KEY_PREFIX_LEN_ID, 
    "prefix_len", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  subnet_key.prefix_len:\n\r"
    "  Number of bits to consider in the IP address starting from the msb. Range: 0\n\r"
    "  - 32.Example for key ip_address 192.168.1.0 and prefix_len 24 would match any\n\r"
    "  IP Address of the form 192.168.1.x\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_cos ipv4_subnet_based_get entry_ndx 0 prefix_len 0 ip_address 0\n\r"
#endif 
    "",
    "",
    {0, BIT(22) | BIT(23), 0, 0}, 
    5, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_COS_IPV4_SUBNET_BASED_GET_IPV4_SUBNET_BASED_GET_SUBNET_KEY_IP_ADDRESS_ID, 
    "ip_address", 
    (PARAM_VAL_RULES *)&soc_ppd_api_ip_address_vals[0], 
    (sizeof(soc_ppd_api_ip_address_vals) / sizeof(soc_ppd_api_ip_address_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  subnet_key.ip_address:\n\r"
    "  Ipv4 destination address.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_cos ipv4_subnet_based_get entry_ndx 0 prefix_len 0 ip_address 0\n\r"
#endif 
    "",
    "",
    {0, BIT(22) | BIT(23), 0, 0}, 
    4, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_COS_PROTOCOL_BASED_SET_PROTOCOL_BASED_SET_ID, 
    "protocol_based_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Sets mapping from Ethernet Type and profile to COS parameters.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_cos protocol_based_set profile_ndx 0 ether_type 0\n\r"
#endif 
    "",
    "",
    {0, BIT(24), 0, 0}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_COS_PROTOCOL_BASED_SET_PROTOCOL_BASED_SET_PROFILE_NDX_ID, 
    "profile_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  profile_ndx:\n\r"
    "  Profile for COS resolution (and VID assignment) according to L2 Protocol\n\r"
    "  (Ethernet Type). Profile is determined per port see soc_ppd_port_info_set()\n\r"
    "  Range: 0 - 7.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_cos protocol_based_set profile_ndx 0 ether_type 0\n\r"
#endif 
    "",
    "",
    {0, BIT(24), 0, 0}, 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_COS_PROTOCOL_BASED_SET_PROTOCOL_BASED_SET_ETHER_TYPE_ID, 
    "ether_type_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  ether_type:\n\r"
    "  Ethernet Type, up to 10 different Ethernet Types, including\n\r"
    "  IPv4(0x0800),IPv6(0x86DD),ARP(0x0806),CFM(0x8902), TRILL MPLS(0x8847). Use\n\r"
    "  SOC_PPC_L2_NEXT_PRTCL_TYPE enumeration to refer to these constant values.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_cos protocol_based_set profile_ndx 0 ether_type 0\n\r"
#endif 
    "",
    "",
    {0, BIT(24), 0, 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_COS_PROTOCOL_BASED_SET_PROTOCOL_BASED_SET_PRTCL_ASSIGN_INFO_TC_IS_VALID_ID, 
    "tc_is_valid", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  prtcl_assign_info.tc_is_valid:\n\r"
    "  TC validity for this entry. If TRUE, then when there are subnet matches, this\n\r"
    "  TC is taken. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_cos protocol_based_set profile_ndx 0 ether_type 0\n\r"
#endif 
    "",
    "",
    {0, BIT(24), 0, 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_COS_PROTOCOL_BASED_SET_PROTOCOL_BASED_SET_PRTCL_ASSIGN_INFO_TC_ID, 
    "tc", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  prtcl_assign_info.tc:\n\r"
    "  Traffic Class.Range: 0 - 7.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_cos protocol_based_set profile_ndx 0 ether_type 0\n\r"
#endif 
    "",
    "",
    {0, BIT(24), 0, 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_COS_PROTOCOL_BASED_GET_PROTOCOL_BASED_GET_ID, 
    "protocol_based_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Sets mapping from Ethernet Type and profile to COS parameters.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_cos protocol_based_get profile_ndx 0\n\r"
#endif 
    "",
    "",
    {0, BIT(25), 0, 0}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_COS_PROTOCOL_BASED_GET_PROTOCOL_BASED_GET_PROFILE_NDX_ID, 
    "profile_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  profile_ndx:\n\r"
    "  Profile for COS resolution (and VID assignment) according to L2 Protocol\n\r"
    "  (Ethernet Type). Profile is determined per port see soc_ppd_port_info_set()\n\r"
    "  Range: 0 - 7.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_cos protocol_based_get profile_ndx 0\n\r"
#endif 
    "",
    "",
    {0, BIT(25), 0, 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_COS_PROTOCOL_BASED_GET_PROTOCOL_BASED_GET_ETHER_TYPE_NDX_ID, 
    "ether_type_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  ether_type:\n\r"
    "  Ethernet Type, up to 10 different Ethernet Types, including\n\r"
    "  IPv4(0x0800),IPv6(0x86DD),ARP(0x0806),CFM(0x8902), TRILL MPLS(0x8847). Use\n\r"
    "  SOC_PPC_L2_NEXT_PRTCL_TYPE enumeration to refer to these constant values.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_cos protocol_based_get profile_ndx 0 ether_type 0\n\r"
#endif 
    "",
    "",
    {0, BIT(25), 0, 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_API_LLP_COS_ID, 
    "llp_cos", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "",
    "", 
    "",
    {0, BIT(12)|BIT(13)|BIT(14)|BIT(15)|BIT(16)|BIT(17)|BIT(18)|BIT(19)|BIT(20)|BIT(21)|BIT(22)|BIT(23)|BIT(24)|BIT(25), 0, 0}, 
    1, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
#endif /* } llp_cos*/
#ifdef UI_LLP_TRAP/* { llp_trap*/
  { 
    SOC_PARAM_PPD_LLP_TRAP_PORT_INFO_SET_PORT_INFO_SET_ID, 
    "port_info_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Sets port information for Link Layer Traps, including which reserved\n\r"
    "  Multicast profile and which general Traps are enabled...\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_trap port_info_set local_port_ndx 0 general_trap_enable_mask 0\n\r"
    "  reserved_mc_profile 0\n\r"
#endif 
    "",
    "",
    {0, BIT(26), 0, 0}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_TRAP_PORT_INFO_SET_PORT_INFO_SET_LOCAL_PORT_NDX_ID, 
    "local_port_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  local_port_ndx:\n\r"
    "  Local port ID.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_trap port_info_set local_port_ndx 0 general_trap_enable_mask 0\n\r"
    "  reserved_mc_profile 0\n\r"
#endif 
    "",
    "",
    {0, BIT(26), 0, 0}, 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_TRAP_PORT_INFO_SET_PORT_INFO_SET_PORT_INFO_TRAP_ENABLE_MASK_ID, 
    "enable_trap", 
    (PARAM_VAL_RULES *)&SOC_PPC_LLP_TRAP_PORT_ENABLE_rule[0], 
    (sizeof(SOC_PPC_LLP_TRAP_PORT_ENABLE_rule) / sizeof(SOC_PPC_LLP_TRAP_PORT_ENABLE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  port_info.trap_enable_mask:\n\r"
    "  Bitmap Enable/disable for Traps.See SOC_PPC_LLP_TRAP_PORT_ENABLE to what is the\n\r"
    "  usag of each bit. Example: to enable IGMP\n\r"
    "  and ARP trap, set . trap_enable_mask = SOC_PPC_LLP_TRAP_PORT_ENABLE_ARP |\n\r"
    "  SOC_PPC_LLP_TRAP_PORT_ENABLE_IGMP;\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_trap port_info_set local_port_ndx 0 trap_enable_mask 0\n\r"
    "  reserved_mc_profile 0\n\r"
#endif 
    "",
    "",
    {0, BIT(26), 0, 0}, 
    LAST_ORDINAL, 
    /* 
    * Pointer to a function to call after symbolic parameter 
    * has been accepted. 
    */ 
    (VAL_PROC_PTR)NULL 
  },
  { 
    SOC_PARAM_PPD_LLP_TRAP_PORT_INFO_SET_PORT_INFO_SET_PORT_INFO_TRAP_DISABLE_MASK_ID, 
      "disable_trap", 
      (PARAM_VAL_RULES *)&SOC_PPC_LLP_TRAP_PORT_ENABLE_rule[0], 
      (sizeof(SOC_PPC_LLP_TRAP_PORT_ENABLE_rule) / sizeof(SOC_PPC_LLP_TRAP_PORT_ENABLE_rule[0])) - 1, 
      HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
      0,0,0,0,0,0,0, 
      "  port_info.trap_enable_mask:\n\r"
      "  Bitmap Enable/disable for Traps.See SOC_PPC_LLP_TRAP_PORT_ENABLE to what is the\n\r"
      "  usag of each bit. Example: to enable IGMP\n\r"
      "  and ARP trap, set . trap_enable_mask = SOC_PPC_LLP_TRAP_PORT_ENABLE_ARP |\n\r"
      "  SOC_PPC_LLP_TRAP_PORT_ENABLE_IGMP;\n\r"
      "",
#if UI_PPD_API_ADD_EXAMPLE 
      "Examples:\n\r" 
      "  soc_ppd_api llp_trap port_info_set local_port_ndx 0 trap_enable_mask 0\n\r"
      "  reserved_mc_profile 0\n\r"
#endif 
      "",
      "",
      {0, BIT(26), 0, 0}, 
      LAST_ORDINAL, 
      /* 
      * Pointer to a function to call after symbolic parameter 
      * has been accepted. 
      */ 
      (VAL_PROC_PTR)NULL 
  },
  { 
    SOC_PARAM_PPD_LLP_TRAP_PORT_INFO_SET_PORT_INFO_SET_PORT_INFO_RESERVED_MC_PROFILE_ID, 
    "reserved_mc_profile", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  port_info.reserved_mc_profile:\n\r"
    "  Reserved MC Trap profile Range: 0 - 3.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_trap port_info_set local_port_ndx 0 general_trap_enable_mask 0\n\r"
    "  reserved_mc_profile 0\n\r"
#endif 
    "",
    "",
    {0, BIT(26), 0, 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_TRAP_PORT_INFO_GET_PORT_INFO_GET_ID, 
    "port_info_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Sets port information for Link Layer Traps, including which reserved\n\r"
    "  Multicast profile and which general Traps are enabled...\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_trap port_info_get local_port_ndx 0\n\r"
#endif 
    "",
    "",
    {0, BIT(27), 0, 0}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_TRAP_PORT_INFO_GET_PORT_INFO_GET_LOCAL_PORT_NDX_ID, 
    "local_port_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  local_port_ndx:\n\r"
    "  Local port ID.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_trap port_info_get local_port_ndx 0\n\r"
#endif 
    "",
    "",
    {0, BIT(27), 0, 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
    { 
      SOC_PARAM_PPD_LLP_TRAP_ARP_INFO_SET_ARP_INFO_SET_ID, 
        "arp_info_set", 
        (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
        (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
        HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
        0,0,0,0,0,0,0, 
        "  Sets information for ARP trapping, including My-IP addresses (used to Trap\n\r"
        "  ARP Requests)\n\r"
        "",
#if UI_PPD_API_ADD_EXAMPLE 
        "Examples:\n\r" 
        "  soc_ppd_api llp_trap arp_info_set my_ips_index 0 my_ips 0\n\r"
#endif 
        "",
        "",
        {0, BIT(28), 0, 0}, 
        2, 
        /* 
        * Pointer to a function to call after symbolic parameter 
        * has been accepted. 
        */ 
        (VAL_PROC_PTR)NULL 
    },
    { 
      SOC_PARAM_PPD_LLP_TRAP_ARP_INFO_SET_ARP_INFO_SET_ARP_INFO_IGNORE_DA_ID, 
      "ignore_da", 
      (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
      (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
      HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
      0,0,0,0,0,0,0, 
      "  arp_info.ignore_da:\n\r"
      "  If set to FALSE then only packets with DA equal to ff-ff-ff-ff-ff-ff will be\n\r"
      "  trapped (match ARP requests messages). If set to TRUE then packet will be\n\r"
      "  trapped regardless the DA of the packet, may be useful to trap both ARP\n\r"
      "  requests and responses. Note: Unicast ARP request/replies may be trapped\n\r"
      "  (with trap-code = SOC_PPC_TRAP_CODE_MY_MAC_AND_ARP) if packet has my-MAC and\n\r"
      "  next-protocol is ARP. \n\r"
      "",
#if UI_PPD_API_ADD_EXAMPLE 
      "Examples:\n\r" 
      "  soc_ppd_api llp_trap arp_info_set ignore_da 0 my_ips_index 0 my_ips 0\n\r"
#endif 
      "",
      "",
      {0, BIT(28), 0, 0}, 
      LAST_ORDINAL, 
        /* 
         * Pointer to a function to call after symbolic parameter 
         * has been accepted. 
         */ 
      (VAL_PROC_PTR)NULL 
    },
    { 
      SOC_PARAM_PPD_LLP_TRAP_ARP_INFO_SET_ARP_INFO_SET_ARP_INFO_MY_IPS_INDEX_ID, 
        "ip2", 
        (PARAM_VAL_RULES *)&soc_ppd_api_ip_address_vals[0], 
        (sizeof(soc_ppd_api_ip_address_vals) / sizeof(soc_ppd_api_ip_address_vals[0])) - 1, 
        HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
        0,0,0,0,0,0,0, 
        "  my_ips_index:\n\r"
        "",
#if UI_PPD_API_ADD_EXAMPLE 
        "Examples:\n\r" 
        "  soc_ppd_api llp_trap arp_info_set my_ips_index 0 my_ips 0\n\r"
#endif 
        "",
        "",
        {0, BIT(28), 0, 0}, 
        LAST_ORDINAL, 
        /* 
        * Pointer to a function to call after symbolic parameter 
        * has been accepted. 
        */ 
        (VAL_PROC_PTR)NULL 
      },  
      { 
        SOC_PARAM_PPD_LLP_TRAP_ARP_INFO_SET_ARP_INFO_SET_ARP_INFO_MY_IPS_ID, 
          "ip1", 
          (PARAM_VAL_RULES *)&soc_ppd_api_ip_address_vals[0], 
          (sizeof(soc_ppd_api_ip_address_vals) / sizeof(soc_ppd_api_ip_address_vals[0])) - 1, 
          HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
          0,0,0,0,0,0,0, 
          "  arp_info.my_ips[ prm_my_ips_index]:\n\r"
          "  IP addresses to identify ARP requests to this device. i.e. all ARP requests\n\r"
          "  with TPA equal to one of these IP address, will be considered as request to\n\r"
          "  this device Range: 0 - 63.\n\r"
          "",
#if UI_PPD_API_ADD_EXAMPLE 
          "Examples:\n\r" 
          "  soc_ppd_api llp_trap arp_info_set my_ips_index 0 my_ips 0\n\r"
#endif 
          "",
          "",
          {0, BIT(28), 0, 0}, 
          LAST_ORDINAL, 
          /* 
          * Pointer to a function to call after symbolic parameter 
          * has been accepted. 
          */ 
          (VAL_PROC_PTR)NULL 
      },  
      { 
        SOC_PARAM_PPD_LLP_TRAP_ARP_INFO_GET_ARP_INFO_GET_ID, 
          "arp_info_get", 
          (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
          (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
          HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
          0,0,0,0,0,0,0, 
          "  Sets information for ARP trapping, including My-IP addresses (used to Trap\n\r"
          "  ARP Requests)\n\r"
          "",
#if UI_PPD_API_ADD_EXAMPLE 
          "Examples:\n\r" 
          "  soc_ppd_api llp_trap arp_info_get\n\r"
#endif 
          "",
          "",
          {BIT(19), 0, 0, 0}, 
          2, 
          /* 
          * Pointer to a function to call after symbolic parameter 
          * has been accepted. 
          */ 
          (VAL_PROC_PTR)NULL 
        },
  { 
    SOC_PARAM_PPD_LLP_TRAP_RESERVED_MC_INFO_SET_RESERVED_MC_INFO_SET_ID, 
    "reserved_mc_info_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Sets Trap information for IEEE reserved multicast (Ethernet Header.DA matches\n\r"
    "  01-80-c2-00-00-XX where XX = 8'b00xx_xxxx. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_trap reserved_mc_info_set da_mac_address_lsb 0\n\r"
    "  reserved_mc_profile 0 frwrd_action_id 0 snoop_action_id 0\n\r"
#endif 
    "",
    "",
    {0, BIT(30), 0, 0}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_TRAP_RESERVED_MC_INFO_SET_RESERVED_MC_INFO_SET_RESERVED_MC_KEY_DA_MAC_ADDRESS_LSB_ID, 
    "da_mac_address_lsb", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  reserved_mc_key.da_mac_address_lsb:\n\r"
    "  The 6 lsb of the Destination MAC address (DA[5:0]). The msb bits DA[47:6] are\n\r"
    "  01-80-c2-00-00-XX where XX = 8'b00xx_xxxx)Range: 0 - 63.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_trap reserved_mc_info_set da_mac_address_lsb 0\n\r"
    "  reserved_mc_profile 0 frwrd_action_id 0 snoop_action_id 0\n\r"
#endif 
    "",
    "",
    {0, BIT(30), 0, 0}, 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_TRAP_RESERVED_MC_INFO_SET_RESERVED_MC_INFO_SET_RESERVED_MC_KEY_RESERVED_MC_PROFILE_ID, 
    "reserved_mc_profile", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  reserved_mc_key.reserved_mc_profile:\n\r"
    "  Reserved MC profile. The user may set a profile per port.See\n\r"
    "  soc_ppd_llp_trap_port_info_set() Range: 0 - 3.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_trap reserved_mc_info_set da_mac_address_lsb 0\n\r"
    "  reserved_mc_profile 0 frwrd_action_id 0 snoop_action_id 0\n\r"
#endif 
    "",
    "",
    {0, BIT(30), 0, 0}, 
    4, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_TRAP_RESERVED_MC_INFO_SET_RESERVED_MC_INFO_SET_TRAP_ACTION_PROFILE_TRAP_CODE_LSB_ID, 
    "trap_code", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals/*SOC_PPC_TRAP_CODE_rule*/[0], 
    (sizeof(soc_ppd_api_free_vals/*SOC_PPC_TRAP_CODE_rule*/) / sizeof(soc_ppd_api_free_vals/*SOC_PPC_TRAP_CODE_rule*/[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
#ifdef COMPILER_STRING_CONST_LIMIT
    "  Full documentation cannot be displayed with -pendantic compiler\n\r",
#else
    "  action_profile.trap_code:\n\r"
    "  Sets the LSB of the CPU code. For trapped packet the CPU \n\r"
    "  code are associated into the packet headers. The CPU \n\r"
    "  code also used as index for the forwarding/snooping \n\r"
    "  actions. see to soc_ppd_trap_frwrd_profile_info_set(), \n\r"
    "  soc_ppd_trap_snoop_profile_info_set(). Range Petra-B: 0-255, \n\r"
    "  T20E:0-63.To know the legal range in specific use of \n\r"
    "  this field, see the documentation in that specific \n\r"
    "  use.In Petra-B this field affects the CPU code set on \n\r"
    "  the packets header, IN T20E it's only select the \n\r"
    "  forwarding and snooping profiles.                     \n\r"  
    "",
#endif /* COMPILER_STRING_CONST_LIMIT */
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_trap reserved_mc_info_set da_mac_address_lsb 0\n\r"
    "  reserved_mc_profile 0 frwrd_action_id 0 snoop_action_id 0\n\r"
#endif 
    "",
    "",
    {0, BIT(30), 0, 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_TRAP_RESERVED_MC_INFO_SET_RESERVED_MC_INFO_SET_TRAP_ACTION_PROFILE_FRWRD_STRENGTH_ID, 
    "frwrd_action_strength", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  action_profile.frwrd_action_strength:\n\r"
    "  Value that identifies the strength of the assignment of \n\r"
    "  Forward action to the packet. Through the packet \n\r"
    "  processing pipe, many forwarding decisions may be taken; \n\r"
    "  yet one decision may overwrite a former decision only if \n\r"
    "  it stronger, i.e., its strength is higher than the last \n\r"
    "  decision that was taken. Range 0-7.Relevant only for \n\r"
    "  Petra-B.                \n\r"                                
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_trap reserved_mc_info_set da_mac_address_lsb 0\n\r"
    "  reserved_mc_profile 0 frwrd_action_id 0 snoop_action_id 0\n\r"
#endif 
    "",
    "",
    {0, BIT(30), 0, 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_TRAP_RESERVED_MC_INFO_SET_RESERVED_MC_INFO_SET_TRAP_ACTION_PROFILE_SNOOP_STRENGTH_ID, 
    "frwrd_snoop_strength", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  action_profile.frwrd_snoop_strength:\n\r"
    "  Value that identifies the strength of the assignment of \n\r"
    "  Snoop action to the packet. Through the packet \n\r"
    "  processing pipe, many snooping decisions may be taken; \n\r"
    "  yet one decision may overwrite a former decision only if \n\r"
    "  it stronger, i.e., its strength is higher than the last \n\r"
    "  decision that was taken. Range 0-7.Relevant only for \n\r"
    "  Petra-B.              \n\r"                                  
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_trap reserved_mc_info_set da_mac_address_lsb 0\n\r"
    "  reserved_mc_profile 0 frwrd_action_id 0 snoop_action_id 0\n\r"
#endif 
    "",
    "",
    {0, BIT(30), 0, 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_TRAP_RESERVED_MC_INFO_GET_RESERVED_MC_INFO_GET_ID, 
    "reserved_mc_info_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Sets Trap information for IEEE reserved multicast (Ethernet Header.DA matches\n\r"
    "  01-80-c2-00-00-XX where XX = 8'b00xx_xxxx. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_trap reserved_mc_info_get da_mac_address_lsb 0\n\r"
    "  reserved_mc_profile 0\n\r"
#endif 
    "",
    "",
    {0, BIT(31), 0, 0}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_TRAP_RESERVED_MC_INFO_GET_RESERVED_MC_INFO_GET_RESERVED_MC_KEY_DA_MAC_ADDRESS_LSB_ID, 
    "da_mac_address_lsb", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  reserved_mc_key.da_mac_address_lsb:\n\r"
    "  The 6 lsb of the Destination MAC address (DA[5:0]). The msb bits DA[47:6] are\n\r"
    "  01-80-c2-00-00-XX where XX = 8'b00xx_xxxx)Range: 0 - 63.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_trap reserved_mc_info_get da_mac_address_lsb 0\n\r"
    "  reserved_mc_profile 0\n\r"
#endif 
    "",
    "",
    {0, BIT(31), 0, 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_TRAP_RESERVED_MC_INFO_GET_RESERVED_MC_INFO_GET_RESERVED_MC_KEY_RESERVED_MC_PROFILE_ID, 
    "reserved_mc_profile", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  reserved_mc_key.reserved_mc_profile:\n\r"
    "  Reserved MC profile. The user may set a profile per port.See\n\r"
    "  soc_ppd_llp_trap_port_info_set() Range: 0 - 3.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_trap reserved_mc_info_get da_mac_address_lsb 0\n\r"
    "  reserved_mc_profile 0\n\r"
#endif 
    "",
    "",
    {0, BIT(31), 0, 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_TRAP_PROG_TRAP_QUALIFIER_SET_GENERAL_TRAP_INFO_SET_ID, 
    "prog_trap_info_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Sets a general Trap, a trap that may be set to packets according to L2/L3/L4\n\r"
    "  attributes. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_trap general_trap_info_set general_trap_ndx 0 inverse_bitmap 0\n\r"
    "  enable_bitmap 0 dest_port_bitmap 0 dest_port 0 src_port_bitmap 0 src_port 0\n\r"
    "  ip_protocol 0 sub_type 0 ether_type 0 dest_mac_nof_bits 0 dest_mac 0\n\r"
#endif 
    "",
    "",
    {0, 0, BIT(0), 0}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_TRAP_PROG_TRAP_QUALIFIER_SET_GENERAL_TRAP_INFO_SET_GENERAL_TRAP_NDX_ID, 
    "general_trap_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  general_trap_ndx:\n\r"
    "  Trap ID. Range: 0 - 3.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_trap general_trap_info_set general_trap_ndx 0 inverse_bitmap 0\n\r"
    "  enable_bitmap 0 dest_port_bitmap 0 dest_port 0 src_port_bitmap 0 src_port 0\n\r"
    "  ip_protocol 0 sub_type 0 ether_type 0 dest_mac_nof_bits 0 dest_mac 0\n\r"
#endif 
    "",
    "",
    {0, 0, BIT(0), 0}, 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_TRAP_PROG_TRAP_QUALIFIER_SET_GENERAL_TRAP_INFO_SET_GENERAL_TRAP_INFO_INVERSE_BITMAP_ID, 
    "inverse_bitmap", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  general_trap_info.inverse_bitmap:\n\r"
    "  Specifies conditions that will be met only if the compare failed. See\n\r"
    "  SOC_PPC_LLP_TRAP_PROG_TRAP_COND_SELECT. For fields that are not selected here,\n\r"
    "  the condition will be met if the compare succeeds.For example, user may\n\r"
    "  choose to trap all packets with DA not equal to some value.\n\r"
    "    DA         = 0x1    0001\n\r"
    "    ETHER_TYPE = 0x2    0010 \n\r"
    "    SUB_TYPE   = 0x4    0100\n\r"
    "    IP_PRTCL   = 0x8    1000\n\r"
    "    L4_PORTS   = 0x10 1 0000\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_trap general_trap_info_set general_trap_ndx 0 inverse_bitmap 0\n\r"
    "  enable_bitmap 0 dest_port_bitmap 0 dest_port 0 src_port_bitmap 0 src_port 0\n\r"
    "  ip_protocol 0 sub_type 0 ether_type 0 dest_mac_nof_bits 0 dest_mac 0\n\r"
    "    DA = 1\n\r"
#endif 
    "",
    "",
    {0, 0, BIT(0), 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_TRAP_PROG_TRAP_QUALIFIER_SET_GENERAL_TRAP_INFO_SET_GENERAL_TRAP_INFO_ENABLE_BITMAP_ID, 
    "enable_bitmap", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  general_trap_info.enable_bitmap:\n\r"
    "  Specifies which conditions are to be tested. See\n\r"
    "  SOC_PPC_LLP_TRAP_PROG_TRAP_COND_SELECT. For example, user may select to check\n\r"
    "  packet DA/Ethernet-type/ IP-protocol/Sub-Type/L4 ports etc...General Traps 2\n\r"
    "  and 3 may consider only DA and Ethernet-Type. Error will be returned\n\r"
    "  otherwise.\n\r"
    "    DA         = 0x1    0001\n\r"
    "    ETHER_TYPE = 0x2    0010 \n\r"
    "    SUB_TYPE   = 0x4    0100\n\r"
    "    IP_PRTCL   = 0x8    1000\n\r"
    "    L4_PORTS   = 0x10 1 0000\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_trap general_trap_info_set general_trap_ndx 0 inverse_bitmap 0\n\r"
    "  enable_bitmap 0 dest_port_bitmap 0 dest_port 0 src_port_bitmap 0 src_port 0\n\r"
    "  ip_protocol 0 sub_type 0 ether_type 0 dest_mac_nof_bits 0 dest_mac 0\n\r"
#endif 
    "",
    "",
    {0, 0, BIT(0), 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_TRAP_PROG_TRAP_QUALIFIER_SET_GENERAL_TRAP_INFO_SET_GENERAL_TRAP_INFO_L4_INFO_DEST_PORT_BITMAP_ID, 
    "dest_port_bitmap", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  general_trap_info.l4_info.dest_port_bitmap:\n\r"
    "  Bitmap mask over the destination port. 0 to mask corresponding bit, and 1 to\n\r"
    "  consider it. Compare successes if packet l4 destination port value equal to\n\r"
    "  dest_port ignoring the bits masked by dest_port_bitmap.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_trap general_trap_info_set general_trap_ndx 0 inverse_bitmap 0\n\r"
    "  enable_bitmap 0 dest_port_bitmap 0 dest_port 0 src_port_bitmap 0 src_port 0\n\r"
    "  ip_protocol 0 sub_type 0 ether_type 0 dest_mac_nof_bits 0 dest_mac 0\n\r"
#endif 
    "",
    "",
    {0, 0, BIT(0), 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_TRAP_PROG_TRAP_QUALIFIER_SET_GENERAL_TRAP_INFO_SET_GENERAL_TRAP_INFO_L4_INFO_DEST_PORT_ID, 
    "dest_port", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  general_trap_info.l4_info.dest_port:\n\r"
    "  The layer 4 destination port\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_trap general_trap_info_set general_trap_ndx 0 inverse_bitmap 0\n\r"
    "  enable_bitmap 0 dest_port_bitmap 0 dest_port 0 src_port_bitmap 0 src_port 0\n\r"
    "  ip_protocol 0 sub_type 0 ether_type 0 dest_mac_nof_bits 0 dest_mac 0\n\r"
#endif 
    "",
    "",
    {0, 0, BIT(0), 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_TRAP_PROG_TRAP_QUALIFIER_SET_GENERAL_TRAP_INFO_SET_GENERAL_TRAP_INFO_L4_INFO_SRC_PORT_BITMAP_ID, 
    "src_port_bitmap", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  general_trap_info.l4_info.src_port_bitmap:\n\r"
    "  Bitmap mask over the source port. 0 to mask corresponding bit, and 1 to\n\r"
    "  consider it. Compare successes if packet l4 source port value equal to\n\r"
    "  src_port ignoring the bits masked by src_port_bitmap.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_trap general_trap_info_set general_trap_ndx 0 inverse_bitmap 0\n\r"
    "  enable_bitmap 0 dest_port_bitmap 0 dest_port 0 src_port_bitmap 0 src_port 0\n\r"
    "  ip_protocol 0 sub_type 0 ether_type 0 dest_mac_nof_bits 0 dest_mac 0\n\r"
#endif 
    "",
    "",
    {0, 0, BIT(0), 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_TRAP_PROG_TRAP_QUALIFIER_SET_GENERAL_TRAP_INFO_SET_GENERAL_TRAP_INFO_L4_INFO_SRC_PORT_ID, 
    "src_port", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  general_trap_info.l4_info.src_port:\n\r"
    "  The layer 4 source port\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_trap general_trap_info_set general_trap_ndx 0 inverse_bitmap 0\n\r"
    "  enable_bitmap 0 dest_port_bitmap 0 dest_port 0 src_port_bitmap 0 src_port 0\n\r"
    "  ip_protocol 0 sub_type 0 ether_type 0 dest_mac_nof_bits 0 dest_mac 0\n\r"
#endif 
    "",
    "",
    {0, 0, BIT(0), 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_TRAP_PROG_TRAP_QUALIFIER_SET_GENERAL_TRAP_INFO_SET_GENERAL_TRAP_INFO_L3_INFO_IP_PROTOCOL_ID, 
    "ip_protocol", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  general_trap_info.l3_info.ip_protocol:\n\r"
    "  The IP protocol in the IP header Examples: TCP, UDP, ICMP etc... Compare\n\r"
    "  successes if packet IP-protocol (in IP header) equal to this value.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_trap general_trap_info_set general_trap_ndx 0 inverse_bitmap 0\n\r"
    "  enable_bitmap 0 dest_port_bitmap 0 dest_port 0 src_port_bitmap 0 src_port 0\n\r"
    "  ip_protocol 0 sub_type 0 ether_type 0 dest_mac_nof_bits 0 dest_mac 0\n\r"
#endif 
    "",
    "",
    {0, 0, BIT(0), 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_TRAP_PROG_TRAP_INFO_SET_PROG_TRAP_INFO_SET_PROG_TRAP_QUAL_L2_INFO_SUB_TYPE_BITMAP_ID, 
      "sub_type_bitmap", 
      (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
      (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
      HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
      0,0,0,0,0,0,0, 
      "  prog_trap_qual.l2_info.sub_type_bitmap:\n\r"
      "  Bitmap mask over the sub_type. 0 to mask corresponding bit, and 1 to consider\n\r"
      "  it. Compare successes if packet's subtype value equal to sub_type ignoring\n\r"
      "  the bits masked (set to zero) by sub_type_bitmap \n\r"
      "",
#if UI_PPD_API_ADD_EXAMPLE 
      "Examples:\n\r" 
      "  soc_ppd_api llp_trap prog_trap_info_set prog_trap_ndx 0 inverse_bitmap 0\n\r"
      "  enable_bitmap 0 dest_port_bitmap 0 dest_port 0 src_port_bitmap 0 src_port 0\n\r"
      "  ip_protocol 0 sub_type_bitmap 0 sub_type 0 ether_type 0 dest_mac_nof_bits 0\n\r"
      "  dest_mac 0\n\r"
#endif 
      "",
      "",
      {0, 0, BIT(0), 0}, 
      LAST_ORDINAL, 
      /* 
      * Pointer to a function to call after symbolic parameter 
      * has been accepted. 
      */ 
      (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_TRAP_PROG_TRAP_QUALIFIER_SET_GENERAL_TRAP_INFO_SET_GENERAL_TRAP_INFO_L2_INFO_SUB_TYPE_ID, 
    "sub_type", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  general_trap_info.l2_info.sub_type:\n\r"
    "  First nibble after link layer header.Range: 0 - 15.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_trap general_trap_info_set general_trap_ndx 0 inverse_bitmap 0\n\r"
    "  enable_bitmap 0 dest_port_bitmap 0 dest_port 0 src_port_bitmap 0 src_port 0\n\r"
    "  ip_protocol 0 sub_type 0 ether_type 0 dest_mac_nof_bits 0 dest_mac 0\n\r"
#endif 
    "",
    "",
    {0, 0, BIT(0), 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_TRAP_PROG_TRAP_QUALIFIER_SET_GENERAL_TRAP_INFO_SET_GENERAL_TRAP_INFO_L2_INFO_ETHER_TYPE_ID, 
    "ether_type", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  general_trap_info.l2_info.ether_type:\n\r"
    "  Ethernet Type to compare with the Ethernet of the packets. Up to 10 different\n\r"
    "  Ethernet Types, including 802.1x(0x88ea), IPv4 (0x0800), IPv6 (0x86DD), ARP\n\r"
    "  (0x0806), CFM (0x8902), and TRILL MPLS(0x8847). Use SOC_PPC_L2_NEXT_PRTCL_TYPE\n\r"
    "  enumeration to refer to these constant values\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_trap general_trap_info_set general_trap_ndx 0 inverse_bitmap 0\n\r"
    "  enable_bitmap 0 dest_port_bitmap 0 dest_port 0 src_port_bitmap 0 src_port 0\n\r"
    "  ip_protocol 0 sub_type 0 ether_type 0 dest_mac_nof_bits 0 dest_mac 0\n\r"
#endif 
    "",
    "",
    {0, 0, BIT(0), 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_TRAP_PROG_TRAP_QUALIFIER_SET_GENERAL_TRAP_INFO_SET_GENERAL_TRAP_INFO_L2_INFO_DEST_MAC_NOF_BITS_ID, 
    "dest_mac_nof_bits", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  general_trap_info.l2_info.dest_mac_nof_bits:\n\r"
    "  Number of (MS) bits to consider from the above MAC address. The\n\r"
    "  'dest_mac_nof_bits ' (MS) bits of Packet DA and dest_mac are\n\r"
    "  compared.Compares successes if packet DA MAC equal to dest_mac, considering\n\r"
    "  only the 'dest_mac_nof_bits' MS-bitsRange: 0 - 48.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_trap general_trap_info_set general_trap_ndx 0 inverse_bitmap 0\n\r"
    "  enable_bitmap 0 dest_port_bitmap 0 dest_port 0 src_port_bitmap 0 src_port 0\n\r"
    "  ip_protocol 0 sub_type 0 ether_type 0 dest_mac_nof_bits 0 dest_mac 0\n\r"
#endif 
    "",
    "",
    {0, 0, BIT(0), 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    SOC_PARAM_PPD_LLP_TRAP_PROG_TRAP_QUALIFIER_SET_GENERAL_TRAP_INFO_SET_GENERAL_TRAP_INFO_L2_INFO_DEST_MAC_ID, 
    "dest_mac", 
    (PARAM_VAL_RULES *)&soc_ppd_api_mac_addr_vals[0], 
    (sizeof(soc_ppd_api_mac_addr_vals) / sizeof(soc_ppd_api_mac_addr_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  general_trap_qual.l2_info.dest_mac:\n\r"
    "  Destination MAC address to compare\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_trap general_trap_info_set general_trap_ndx 0 inverse_bitmap 0\n\r"
    "  enable_bitmap 0 dest_port_bitmap 0 dest_port 0 src_port_bitmap 0 src_port 0\n\r"
    "  ip_protocol 0 sub_type 0 ether_type 0 dest_mac_nof_bits 0 dest_mac 0\n\r"
#endif 
    "",
    "",
    {0, 0, BIT(0), 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_TRAP_PROG_TRAP_QUALIFIER_GET_GENERAL_TRAP_INFO_GET_ID, 
    "prog_trap_info_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Sets a general Trap, a trap that may be set to packets according to L2/L3/L4\n\r"
    "  attributes. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_trap general_trap_info_get general_trap_ndx 0\n\r"
#endif 
    "",
    "",
    {0, 0, BIT(1), 0}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_TRAP_PROG_TRAP_QUALIFIER_GET_GENERAL_TRAP_INFO_GET_GENERAL_TRAP_NDX_ID, 
    "general_trap_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  general_trap_ndx:\n\r"
    "  Trap ID. Range: 0 - 3.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_trap general_trap_info_get general_trap_ndx 0\n\r"
#endif 
    "",
    "",
    {0, 0, BIT(1), 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_MIRROR_PORT_VLAN_ADD_LLP_MIRROR_PORT_VLAN_ADD_ID, 
    "llp_mirror_port_vlan_add", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set a mirroring for port and VLAN, so all incoming packets enter from the\n\r"
    "  given port and identified with the given VID will be associated with Mirror\n\r"
    "  command (Enables mirroring (copying) the packets to additional destination. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_trap llp_mirror_port_vlan_add local_port_ndx 0 vid_ndx 0\n\r"
    "  mirror_profile 0\n\r"
#endif 
    "",
    "",
     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(9)},  
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_MIRROR_PORT_VLAN_ADD_LLP_MIRROR_PORT_VLAN_ADD_LOCAL_PORT_NDX_ID, 
    "local_port_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  local_port_ndx:\n\r"
    "  Local port ID.	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_trap llp_mirror_port_vlan_add local_port_ndx 0 vid_ndx 0\n\r"
    "  mirror_profile 0\n\r"
#endif 
    "",
    "",
     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(9)},  
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_MIRROR_PORT_VLAN_ADD_LLP_MIRROR_PORT_VLAN_ADD_VID_NDX_ID, 
    "vid_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  vid_ndx:\n\r"
    "  VLAN ID. Range: 0 - 4095.	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_trap llp_mirror_port_vlan_add local_port_ndx 0 vid_ndx 0\n\r"
    "  mirror_profile 0\n\r"
#endif 
    "",
    "",
     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(9)},  
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_MIRROR_PORT_VLAN_ADD_LLP_MIRROR_PORT_VLAN_ADD_MIRROR_PROFILE_ID, 
    "mirror_profile", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  mirror_profile:\n\r"
    "  Mirroring profile to associate with packets, the resolution of this mirroring\n\r"
    "  occurs in Petra-TM device. Range 0-15.	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_trap llp_mirror_port_vlan_add local_port_ndx 0 vid_ndx 0\n\r"
    "  mirror_profile 0\n\r"
#endif 
    "",
    "",
     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(9)},  
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_MIRROR_PORT_VLAN_REMOVE_LLP_MIRROR_PORT_VLAN_REMOVE_ID, 
    "llp_mirror_port_vlan_remove", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Remove a mirroring for port and VLAN \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_trap llp_mirror_port_vlan_remove local_port_ndx 0 vid_ndx 0\n\r"
#endif 
    "",
    "",
     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(10)},  
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_MIRROR_PORT_VLAN_REMOVE_LLP_MIRROR_PORT_VLAN_REMOVE_LOCAL_PORT_NDX_ID, 
    "local_port_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  local_port_ndx:\n\r"
    "  Local port ID.	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_trap llp_mirror_port_vlan_remove local_port_ndx 0 vid_ndx 0\n\r"
#endif 
    "",
    "",
     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(10)},  
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_MIRROR_PORT_VLAN_REMOVE_LLP_MIRROR_PORT_VLAN_REMOVE_VID_NDX_ID, 
    "vid_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  vid_ndx:\n\r"
    "  VLAN ID. Range: 0 - 4095.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_trap llp_mirror_port_vlan_remove local_port_ndx 0 vid_ndx 0\n\r"
#endif 
    "",
    "",
     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(10)},  
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_MIRROR_PORT_VLAN_GET_LLP_MIRROR_PORT_VLAN_GET_ID, 
    "llp_mirror_port_vlan_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Get the assigned mirroring profile for port and VLAN. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_trap llp_mirror_port_vlan_get local_port_ndx 0 vid_ndx 0\n\r"
#endif 
    "",
    "",
     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(11)},  
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_MIRROR_PORT_VLAN_GET_LLP_MIRROR_PORT_VLAN_GET_LOCAL_PORT_NDX_ID, 
    "local_port_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  local_port_ndx:\n\r"
    "  Local port ID.	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_trap llp_mirror_port_vlan_get local_port_ndx 0 vid_ndx 0\n\r"
#endif 
    "",
    "",
     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(11)},  
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_MIRROR_PORT_VLAN_GET_LLP_MIRROR_PORT_VLAN_GET_VID_NDX_ID, 
    "vid_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  vid_ndx:\n\r"
    "  VLAN ID. Range: 0 - 4095.	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_trap llp_mirror_port_vlan_get local_port_ndx 0 vid_ndx 0\n\r"
#endif 
    "",
    "",
     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(11)},  
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_MIRROR_PORT_DFLT_SET_LLP_MIRROR_PORT_DFLT_SET_ID, 
    "llp_mirror_port_dflt_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set default mirroring profiles for port \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_trap llp_mirror_port_dflt_set local_port_ndx 0 untagged_dflt 0\n\r"
    "  tagged_dflt 0\n\r"
#endif 
    "",
    "",
     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(12)},  
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_MIRROR_PORT_DFLT_SET_LLP_MIRROR_PORT_DFLT_SET_LOCAL_PORT_NDX_ID, 
    "local_port_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  local_port_ndx:\n\r"
    "  Local port ID.	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_trap llp_mirror_port_dflt_set local_port_ndx 0 untagged_dflt 0\n\r"
    "  tagged_dflt 0\n\r"
#endif 
    "",
    "",
     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(12)},  
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_MIRROR_PORT_DFLT_SET_LLP_MIRROR_PORT_DFLT_SET_DFLT_MIRRORING_INFO_UNTAGGED_DFLT_ID, 
    "untagged_dflt", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  dflt_mirroring_info.untagged_dflt:\n\r"
    "  Default mirroring profile for untagged packets. Range 0-15.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_trap llp_mirror_port_dflt_set local_port_ndx 0 untagged_dflt 0\n\r"
    "  tagged_dflt 0\n\r"
#endif 
    "",
    "",
     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(12)},  
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_MIRROR_PORT_DFLT_SET_LLP_MIRROR_PORT_DFLT_SET_DFLT_MIRRORING_INFO_TAGGED_DFLT_ID, 
    "tagged_dflt", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  dflt_mirroring_info.tagged_dflt:\n\r"
    "  Default mirroring profile for tagged packets. Range 0-15.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_trap llp_mirror_port_dflt_set local_port_ndx 0 untagged_dflt 0\n\r"
    "  tagged_dflt 0\n\r"
#endif 
    "",
    "",
     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(12)},  
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_MIRROR_PORT_DFLT_GET_LLP_MIRROR_PORT_DFLT_GET_ID, 
    "llp_mirror_port_dflt_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set default mirroring profiles for port \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_trap llp_mirror_port_dflt_get local_port_ndx 0\n\r"
#endif 
    "",
    "",
     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(13)},  
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LLP_MIRROR_PORT_DFLT_GET_LLP_MIRROR_PORT_DFLT_GET_LOCAL_PORT_NDX_ID, 
    "local_port_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  local_port_ndx:\n\r"
    "  Local port ID.	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api llp_trap llp_mirror_port_dflt_get local_port_ndx 0\n\r"
#endif 
    "",
    "",
     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(13)},  
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_API_LLP_TRAP_ID, 
    "llp_trap", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "",
    "", 
    "",
    {BIT(19), BIT(26)|BIT(27)|BIT(28)|BIT(30)|BIT(31), BIT(0)|BIT(1), 0, 0, 0, 0, 0, 0, 0, 0, BIT(0)|BIT(9)|BIT(10)|BIT(11)|BIT(12)|BIT(13)}, 
    1, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
#endif /* } llp_trap*/
#ifdef UI_MYMAC/* { mymac*/
  { 
    SOC_PARAM_PPD_MYMAC_MSB_SET_MSB_SET_ID, 
    "msb_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set the MSB of the MAC address of the device. Used for ingress termination\n\r"
    "  and egress encapsulation. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api mymac msb_set my_mac_msb 0\n\r"
#endif 
    "",
    "",
    {0, 0, BIT(2), 0}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_MYMAC_MSB_SET_MSB_SET_MY_MAC_MSB_ID, 
    "my_mac_msb", 
    (PARAM_VAL_RULES *)&soc_ppd_api_mac_addr_vals[0], 
    (sizeof(soc_ppd_api_mac_addr_vals) / sizeof(soc_ppd_api_mac_addr_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  my_mac_msb:\n\r"
    "  The MSB of the MAC address of the device. The LSBs are according to VSI.\n\r"
    "",
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api mymac msb_set my_mac_msb 0\n\r"
#endif 
    "",
    "",
    {0, 0, BIT(2), 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_MYMAC_MSB_GET_MSB_GET_ID, 
    "msb_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set the MSB of the MAC address of the device. Used for ingress termination\n\r"
    "  and egress encapsulation. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api mymac msb_get\n\r"
#endif 
    "",
    "",
    {0, 0, BIT(3), 0}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_MYMAC_VSI_LSB_SET_VSI_LSB_SET_ID, 
    "vsi_lsb_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set MAC address LSB according to VSI.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api mymac vsi_lsb_set vsi_ndx 0 my_mac_lsb 0\n\r"
#endif 
    "",
    "",
    {0, 0, BIT(4), 0}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_MYMAC_VSI_LSB_SET_VSI_LSB_SET_VSI_NDX_ID, 
    "vsi_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  vsi_ndx:\n\r"
    "  VSI ID.Range: Petra-B: 0-4K.T20E: 0- 64K.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api mymac vsi_lsb_set vsi_ndx 0 my_mac_lsb 0\n\r"
#endif 
    "",
    "",
    {0, 0, BIT(4), 0}, 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_MYMAC_VSI_LSB_SET_VSI_LSB_SET_MY_MAC_LSB_ID, 
    "my_mac_lsb", 
    (PARAM_VAL_RULES *)&soc_ppd_api_mac_addr_vals[0], 
    (sizeof(soc_ppd_api_mac_addr_vals) / sizeof(soc_ppd_api_mac_addr_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  my_mac_lsb:\n\r"
    "  The LSB of the MAC address. MSB is global.\n\r"
    "",
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api mymac vsi_lsb_set vsi_ndx 0 my_mac_lsb 0\n\r"
#endif 
    "",
    "",
    {0, 0, BIT(4), 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_MYMAC_VSI_LSB_GET_VSI_LSB_GET_ID, 
    "vsi_lsb_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set MAC address LSB according to VSI.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api mymac vsi_lsb_get vsi_ndx 0\n\r"
#endif 
    "",
    "",
    {0, 0, BIT(5), 0}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_MYMAC_VSI_LSB_GET_VSI_LSB_GET_VSI_NDX_ID, 
    "vsi_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  vsi_ndx:\n\r"
    "  VSI ID.Range: Petra-B: 0-4K.T20E: 0- 64K.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api mymac vsi_lsb_get vsi_ndx 0\n\r"
#endif 
    "",
    "",
    {0, 0, BIT(5), 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_MYMAC_VRRP_INFO_SET_VRRP_INFO_SET_ID, 
    "vrrp_info_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set My-MAC according to Virtual Router Redundancy Protocol.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api mymac vrrp_info_set mode 0 enable 0\n\r"
#endif 
    "",
    "",
    {0, 0, BIT(6), 0}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_MYMAC_VRRP_INFO_SET_VRRP_INFO_SET_VRRP_INFO_MODE_ID, 
    "mode", 
    (PARAM_VAL_RULES *)&SOC_PPC_MYMAC_VRRP_MODE_rule[0], 
    (sizeof(SOC_PPC_MYMAC_VRRP_MODE_rule) / sizeof(SOC_PPC_MYMAC_VRRP_MODE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  vrrp_info.mode:\n\r"
    "  May be: - Port based - VSI based- 256 VSIs basedRelevant only if enable is\n\r"
    "  TRUE.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api mymac vrrp_info_set mode 0 enable 0\n\r"
#endif 
    "",
    "",
    {0, 0, BIT(6), 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_MYMAC_VRRP_INFO_SET_VRRP_INFO_SET_VRRP_INFO_ENABLE_ID, 
    "enable", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  vrrp_info.enable:\n\r"
    "  Enable MyMAC according to Virtual Router Redundancy Protocol. Choose one of\n\r"
    "  My MAC VRRP support mythologies: per Port / VSI / 256 VSIs\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api mymac vrrp_info_set mode 0 enable 0\n\r"
#endif 
    "",
    "",
    {0, 0, BIT(6), 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_MYMAC_VRRP_INFO_SET_VRRP_INFO_SET_VRRP_INFO_IPV6_ENABLE_ID, 
    "ipv6_enable", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  vrrp_info.ipv6_enable:\n\r"
    "  ARAD only.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api mymac vrrp_info_set mode 0 enable 0\n\r"
#endif 
    "",
    "",
    {0, 0, BIT(6), 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_MYMAC_VRRP_INFO_SET_VRRP_INFO_SET_VRRP_INFO_VRID_MY_MAC_MSB_ID, 
    "vrid_my_mac_msb", 
    (PARAM_VAL_RULES *)&soc_ppd_api_mac_addr_vals[0], 
    (sizeof(soc_ppd_api_mac_addr_vals) / sizeof(soc_ppd_api_mac_addr_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,
    0,0,0,0,0,0,0, 
    "  vrrp_info.vrid_my_mac_msb:\n\r"
    "  Set the MSB of the VRID MAC address of the device.\n\r"
    "  Used for ingress termination. Note that the various\n\r"
    "  modes use a different number of bits from this address.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api mymac vrrp_info_set mode 0 enable 0 vrid_my_mac_msb 0\n\r"
#endif 
    "",
    "",
    {0, 0, BIT(6), 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_MYMAC_VRRP_INFO_SET_VRRP_INFO_SET_VRRP_INFO_IPV6_VRID_MY_MAC_MSB_ID, 
    "ipv6_vrid_my_mac_msb", 
    (PARAM_VAL_RULES *)&soc_ppd_api_mac_addr_vals[0], 
    (sizeof(soc_ppd_api_mac_addr_vals) / sizeof(soc_ppd_api_mac_addr_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,
    0,0,0,0,0,0,0, 
    "  vrrp_info.ipv6_vrid_my_mac_msb:\n\r"
    "  ARAD only.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api mymac vrrp_info_set mode 0 enable 0 vrid_my_mac_msb 0\n\r"
#endif 
    "",
    "",
    {0, 0, BIT(6), 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_MYMAC_VRRP_INFO_GET_VRRP_INFO_GET_ID, 
    "vrrp_info_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set My-MAC according to Virtual Router Redundancy Protocol.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api mymac vrrp_info_get\n\r"
#endif 
    "",
    "",
    {0, 0, BIT(7), 0}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_MYMAC_VRRP_MAC_SET_VRRP_MAC_SET_ID, 
    "vrrp_mac_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Enable / Disable MyMAC according to VRRP-ID and Mac Address LSB.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api mymac vrrp_mac_set vrrp_id_ndx 0\n\r"
#endif 
    "",
    "",
    {0, 0, BIT(8), 0}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_MYMAC_VRRP_MAC_SET_VRRP_MAC_SET_VRRP_ID_NDX_ID, 
    "vrrp_id_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  vrrp_id_ndx:\n\r"
    "  VRRP-ID. The port or VSI, according to which to configure the MAC. Depending\n\r"
    "  on the VRRP_MODE.  SOC_SAND_IN  SOC_SAND_PP_MAC_ADDRESS  *vrrp_mac_lsb -    The LSB of the\n\r"
    "  MAC address. MSB is global.  SOC_SAND_IN  uint8  enable -    Whether to enable or\n\r"
    "  disable the given MAC for the given vrrp_id\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api mymac vrrp_mac_set vrrp_id_ndx 0\n\r"
#endif 
    "",
    "",
    {0, 0, BIT(8), 0}, 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_MYMAC_VRRP_MAC_SET_VRRP_MAC_SET_VRRP_MAC_LSB_KEY_ID, 
    "vrrp_mac_lsb_key", 
    (PARAM_VAL_RULES *)&soc_ppd_api_mac_addr_vals[0], 
    (sizeof(soc_ppd_api_mac_addr_vals) / sizeof(soc_ppd_api_mac_addr_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  vrrp_mac_lsb:\n\r"
    "  The LSB of the MAC address. MSB is global.	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api mymac vrrp_mac_set vrrp_id_ndx 0 vrrp_mac_lsb 0\n\r"
#endif 
    "",
    "",
    {0, 0, BIT(8), 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_MYMAC_VRRP_MAC_SET_VRRP_MAC_SET_ENABLE_ID, 
    "enable", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  enable:\n\r"
    "  Whether to enable or disable the given MAC for the given vrrp_id\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api mymac vrrp_mac_set vrrp_id_ndx 0 vrrp_mac_lsb 0\n\r"
#endif 
    "",
    "",
    {0, 0, BIT(8), 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_MYMAC_VRRP_MAC_GET_VRRP_MAC_GET_ID, 
    "vrrp_mac_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Enable / Disable MyMAC according to VRRP-ID and Mac Address LSB.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api mymac vrrp_mac_get vrrp_id_ndx 0\n\r"
#endif 
    "",
    "",
    {0, 0, BIT(9), 0}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_MYMAC_VRRP_MAC_GET_VRRP_MAC_GET_VRRP_ID_NDX_ID, 
    "vrrp_id_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  vrrp_id_ndx:\n\r"
    "  VRRP-ID. The port or VSI, according to which to configure the MAC. Depending\n\r"
    "  on the VRRP_MODE.  SOC_SAND_IN  SOC_SAND_PP_MAC_ADDRESS  *vrrp_mac_lsb -    The LSB of the\n\r"
    "  MAC address. MSB is global.  SOC_SAND_IN  uint8  enable -    Whether to enable or\n\r"
    "  disable the given MAC for the given vrrp_id\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api mymac vrrp_mac_get vrrp_id_ndx 0\n\r"
#endif 
    "",
    "",
    {0, 0, BIT(9), 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_MYMAC_VRRP_MAC_GET_VRRP_MAC_GET_VRRP_MAC_LSB_KEY_ID, 
    "vrrp_mac_lsb_key", 
    (PARAM_VAL_RULES *)&soc_ppd_api_mac_addr_vals[0], 
    (sizeof(soc_ppd_api_mac_addr_vals) / sizeof(soc_ppd_api_mac_addr_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  vrrp_mac_lsb_key:\n\r"
    "  The LSB of the MAC address. MSB is global.	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api mymac vrrp_mac_get vrrp_id_ndx 0 vrrp_mac_lsb_key 0\n\r"
#endif 
    "",
    "",
    {0, 0, BIT(9), 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_MYMAC_TRILL_INFO_SET_TRILL_INFO_SET_ID, 
    "trill_info_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set TRILL My-Nick-Name and reserved Nick-Name.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api mymac trill_info_set all_esadi_rbridges 0 all_rbridges_mac 0\n\r"
    "  my_nick_name 0\n\r"
#endif 
    "",
    "",
    {0, 0, BIT(10), 0}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_MYMAC_TRILL_INFO_SET_TRILL_INFO_SET_TRILL_INFO_ALL_ESADI_RBRIDGES_ID, 
    "all_esadi_rbridges", 
    (PARAM_VAL_RULES *)&soc_ppd_api_mac_addr_vals[0], 
    (sizeof(soc_ppd_api_mac_addr_vals) / sizeof(soc_ppd_api_mac_addr_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  trill_info.all_esadi_rbridges:\n\r"
    "  End System Address Distribution Instance. Packets with this MAC will be\n\r"
    "  trapped.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api mymac trill_info_set all_esadi_rbridges 0 all_rbridges_mac 0\n\r"
    "  my_nick_name 0\n\r"
#endif 
    "",
    "",
    {0, 0, BIT(10), 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    SOC_PARAM_PPD_MYMAC_TRILL_INFO_SET_TRILL_INFO_SET_TRILL_INFO_ALL_RBRIDGES_MAC_ID, 
    "all_rbridges_mac", 
    (PARAM_VAL_RULES *)&soc_ppd_api_mac_addr_vals[0], 
    (sizeof(soc_ppd_api_mac_addr_vals) / sizeof(soc_ppd_api_mac_addr_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  trill_info.all_rbridges_mac:\n\r"
    "  To terminate/encapsulate Multicast TRILL packets. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api mymac trill_info_set all_esadi_rbridges 0 all_rbridges_mac 0\n\r"
    "  my_nick_name 0\n\r"
#endif 
    "",
    "",
    {0, 0, BIT(10), 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_MYMAC_TRILL_INFO_SET_TRILL_INFO_SET_TRILL_INFO_MY_NICK_NAME_ID, 
    "my_nick_name", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  trill_info.my_nick_name:\n\r"
    "  The Device TRILL nickname. Used for terminate or encapsulate TRILL packets.\n\r"
    "  (at the ingress/egress devices)\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api mymac trill_info_set all_esadi_rbridges 0 all_rbridges_mac 0\n\r"
    "  my_nick_name 0\n\r"
#endif 
    "",
    "",
    {0, 0, BIT(10), 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_MYMAC_TRILL_INFO_SET_TRILL_INFO_SET_TRILL_INFO_VIRTUAL_NICK_NAME_INDEX_ID, 
    "virtual_nick_name_index", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  virtual nickname index:\n\r"
    "  Used to update one of virtual nickname .\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api mymac trill_info_set all_esadi_rbridges 0 all_rbridges_mac 0\n\r"
    "  virtual_nick_name_index 0 virtual_nick_name 0 \n\r"
#endif 
    "",
    "",
    {0, 0, BIT(10), 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_MYMAC_TRILL_INFO_SET_TRILL_INFO_SET_TRILL_INFO_VIRTUAL_NICK_NAME_ID, 
    "virtual_nick_name", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  trill_info.virtual_nick_names:\n\r"
    "  The Device TRILL virtual nickname. \n\r"
    "  Alternative for my nick name, terminate or encapsulate TRILL packets.\n\r"
    "  (at the ingress/egress devices)\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api mymac trill_info_set all_esadi_rbridges 0 all_rbridges_mac 0\n\r"
    "  virtual_nick_name_index 0 virtual_nick_name 0 \n\r"
#endif 
    "",
    "",
    {0, 0, BIT(10), 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  


  { 
    SOC_PARAM_PPD_MYMAC_TRILL_INFO_GET_TRILL_INFO_GET_ID, 
    "trill_info_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set TRILL My-Nick-Name and reserved Nick-Name.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api mymac trill_info_get\n\r"
#endif 
    "",
    "",
    {0, 0, BIT(11), 0}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_MY_BMAC_MSB_SET_LIF_MY_BMAC_MSB_SET_ID, 
    "lif_my_bmac_msb_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set the MSB of the My-B-MAC. My-B-MAC forwards the packets to the\n\r"
    "  I-Component, and is added as the SA when sending toward the backbone network.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api mymac lif_my_bmac_msb_set my_bmac_msb 0\n\r"
#endif 
    "",
    "",
    {0, 0, BIT(12), 0}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_MY_BMAC_MSB_SET_LIF_MY_BMAC_MSB_SET_MY_BMAC_MSB_ID, 
    "my_bmac_msb", 
    (PARAM_VAL_RULES *)&soc_ppd_api_mac_addr_vals[0], 
    (sizeof(soc_ppd_api_mac_addr_vals) / sizeof(soc_ppd_api_mac_addr_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  my_bmac_msb:\n\r"
    "  The MSB of the MAC address of the device. The LSBs are according to VSI.\n\r"
    "",
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api mymac lif_my_bmac_msb_set my_bmac_msb 0\n\r"
#endif 
    "",
    "",
    {0, 0, BIT(12), 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_MY_BMAC_MSB_GET_LIF_MY_BMAC_MSB_GET_ID, 
    "lif_my_bmac_msb_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set the MSB of the My-B-MAC. My-B-MAC forwards the packets to the\n\r"
    "  I-Component, and is added as the SA when sending toward the backbone network.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api mymac lif_my_bmac_msb_get\n\r"
#endif 
    "",
    "",
    {0, 0, BIT(13), 0}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_MY_BMAC_PORT_LSB_SET_LIF_MY_BMAC_PORT_LSB_SET_ID, 
    "lif_my_bmac_port_lsb_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set the My-B-MAC LSB according to the source system port.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api mymac lif_my_bmac_port_lsb_set sys_id 0 sys_port_type 0 my_mac_lsb 0\n\r"
#endif 
    "",
    "",
    {0, 0, BIT(14), 0}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_MY_BMAC_PORT_LSB_SET_LIF_MY_BMAC_PORT_LSB_SET_SRC_SYS_PORT_NDX_SYS_ID_ID, 
    "sys_id", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  src_sys_port_ndx.sys_id:\n\r"
    "  The system port value, according to the type (Single or LAG)For LAG the value\n\r"
    "  is the group ID.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api mymac lif_my_bmac_port_lsb_set sys_id 0 sys_port_type 0 my_mac_lsb 0\n\r"
#endif 
    "",
    "",
    {0, 0, BIT(14), 0}, 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_MY_BMAC_PORT_LSB_SET_LIF_MY_BMAC_PORT_LSB_SET_SRC_SYS_PORT_NDX_SYS_PORT_TYPE_ID, 
    "sys_port_type", 
    (PARAM_VAL_RULES *)&SOC_PPD_SAND_PP_SYS_PORT_TYPE_rule[0], 
    (sizeof(SOC_PPD_SAND_PP_SYS_PORT_TYPE_rule) / sizeof(SOC_PPD_SAND_PP_SYS_PORT_TYPE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  src_sys_port_ndx.sys_port_type:\n\r"
    "  The system port type single/LAG.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api mymac lif_my_bmac_port_lsb_set sys_id 0 sys_port_type 0 my_mac_lsb 0\n\r"
#endif 
    "",
    "",
    {0, 0, BIT(14), 0}, 
    4, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_MY_BMAC_PORT_LSB_SET_LIF_MY_BMAC_PORT_LSB_SET_MY_MAC_LSB_ID, 
    "my_mac_lsb", 
    (PARAM_VAL_RULES *)&soc_ppd_api_mac_addr_vals[0], 
    (sizeof(soc_ppd_api_mac_addr_vals) / sizeof(soc_ppd_api_mac_addr_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  my_mac_lsb:\n\r"
    "  The LSB of the MAC address. MSB is global according to\n\r"
    "  soc_ppd_lif_my_bmac_msb_set().  \n\r"
    "",
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api mymac lif_my_bmac_port_lsb_set sys_id 0 sys_port_type 0 my_mac_lsb 0\n\r"
#endif 
    "",
    "",
    {0, 0, BIT(14), 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_MY_BMAC_PORT_LSB_SET_LIF_MY_BMAC_PORT_LSB_SET_ENABLE_ID, 
    "enable", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  enable:\n\r"
    "  When negated, the MAC address LSB is disabled for the system port\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api mymac lif_my_bmac_port_lsb_set sys_id 0 sys_port_type 0 my_mac_lsb 0\n\r"
#endif 
    "",
    "",
    {0, 0, BIT(14), 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_MY_BMAC_PORT_LSB_GET_LIF_MY_BMAC_PORT_LSB_GET_ID, 
    "lif_my_bmac_port_lsb_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set the My-B-MAC LSB according to the source system port.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api mymac lif_my_bmac_port_lsb_get sys_id 0 sys_port_type 0\n\r"
#endif 
    "",
    "",
    {0, 0, BIT(15), 0}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_MY_BMAC_PORT_LSB_GET_LIF_MY_BMAC_PORT_LSB_GET_SRC_SYS_PORT_NDX_SYS_ID_ID, 
    "sys_id", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  src_sys_port_ndx.sys_id:\n\r"
    "  The system port value, according to the type (Single or LAG)For LAG the value\n\r"
    "  is the group ID.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api mymac lif_my_bmac_port_lsb_get sys_id 0 sys_port_type 0\n\r"
#endif 
    "",
    "",
    {0, 0, BIT(15), 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_MY_BMAC_PORT_LSB_GET_LIF_MY_BMAC_PORT_LSB_GET_SRC_SYS_PORT_NDX_SYS_PORT_TYPE_ID, 
    "sys_port_type", 
    (PARAM_VAL_RULES *)&SOC_PPD_SAND_PP_SYS_PORT_TYPE_rule[0], 
    (sizeof(SOC_PPD_SAND_PP_SYS_PORT_TYPE_rule) / sizeof(SOC_PPD_SAND_PP_SYS_PORT_TYPE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  src_sys_port_ndx.sys_port_type:\n\r"
    "  The system port type single/LAG.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api mymac lif_my_bmac_port_lsb_get sys_id 0 sys_port_type 0\n\r"
#endif 
    "",
    "",
    {0, 0, BIT(15), 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_API_MYMAC_ID, 
    "mymac", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "",
    "", 
    "",
    {0, 0, BIT(2)|BIT(3)|BIT(4)|BIT(5)|BIT(6)|BIT(7)|BIT(8)|BIT(9)|BIT(10)|BIT(11)|BIT(12)|BIT(13)|BIT(14)|BIT(15), 0}, 
    1, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
#endif /* } mymac*/
#ifdef UI_MPLS_TERM/* { mpls_term*/
  { 
    SOC_PARAM_PPD_MPLS_TERM_LKUP_INFO_SET_LKUP_INFO_SET_ID, 
    "lkup_info_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set the lookup to perfrom for MPLS tunnel termination\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api mpls_term lkup_info_set key_type 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_MPLS_TERM_LKUP_INFO_SET_LKUP_INFO_SET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_MPLS_TERM_LKUP_INFO_SET_LKUP_INFO_SET_LKUP_INFO_KEY_TYPE_ID, 
    "key_type", 
    (PARAM_VAL_RULES *)&SOC_PPC_MPLS_TERM_KEY_TYPE_rule[0], 
    (sizeof(SOC_PPC_MPLS_TERM_KEY_TYPE_rule) / sizeof(SOC_PPC_MPLS_TERM_KEY_TYPE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  lkup_info.key_type:\n\r"
    "  Lookup type for tunnel termination may be Label or (Label, In-RIF)\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api mpls_term lkup_info_set key_type 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_MPLS_TERM_LKUP_INFO_SET_LKUP_INFO_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_MPLS_TERM_LKUP_INFO_GET_LKUP_INFO_GET_ID, 
    "lkup_info_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set the lookup to perfrom for MPLS tunnel termination\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api mpls_term lkup_info_get\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_MPLS_TERM_LKUP_INFO_GET_LKUP_INFO_GET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_MPLS_TERM_LABEL_RANGE_SET_LABEL_RANGE_SET_ID, 
    "label_range_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set the range of MPLS labels that may be used as tunnels, and enable\n\r"
    "  terminating those tables\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api mpls_term label_range_set range_ndx 0 next_prtcl 0x0 cos_profile 0\n\r"
    "  rif 0 processing_type 0 last_label 0 first_label 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_MPLS_TERM_LABEL_RANGE_SET_LABEL_RANGE_SET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_MPLS_TERM_LABEL_RANGE_SET_LABEL_RANGE_SET_RANGE_NDX_ID, 
    "range_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  range_ndx:\n\r"
    "  There are 3 different ranges of labels. Range: 0-2.	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api mpls_term label_range_set range_ndx 0 next_prtcl 0x0 cos_profile 0\n\r"
    "  rif 0 processing_type 0 last_label 0 first_label 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_MPLS_TERM_LABEL_RANGE_SET_LABEL_RANGE_SET_ID), 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_MPLS_TERM_LABEL_RANGE_SET_LABEL_RANGE_SET_LABEL_RANGE_INFO_TERM_INFO_NEXT_PRTCL_ID, 
    "next_prtcl", 
    (PARAM_VAL_RULES *)&SOC_PPC_L3_NEXT_PRTCL_TYPE_rule[0], 
    (sizeof(SOC_PPC_L3_NEXT_PRTCL_TYPE_rule) / sizeof(SOC_PPC_L3_NEXT_PRTCL_TYPE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  label_range_info.term_info.next_prtcl:\n\r"
    "  When MPLS label is terminated user has to specify what is the next header\n\r"
    "  type, value can be IP or MPLS.Range: SOC_PPC_L3_NEXT_PRTCL_TYPE_IPV4:\n\r"
    "  SOC_PPC_L3_NEXT_PRTCL_TYPE_MPLS.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api mpls_term label_range_set range_ndx 0 next_prtcl 0x0 cos_profile 0\n\r"
    "  rif 0 processing_type 0 last_label 0 first_label 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_MPLS_TERM_LABEL_RANGE_SET_LABEL_RANGE_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_MPLS_TERM_LABEL_RANGE_SET_LABEL_RANGE_SET_LABEL_RANGE_INFO_TERM_INFO_COS_PROFILE_ID, 
    "cos_profile", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  label_range_info.term_info.cos_profile:\n\r"
    "  Class of Service mapping profile.Setting the profile to '0' keeps the\n\r"
    "  previous TC and DP values T20E: Ignored. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api mpls_term label_range_set range_ndx 0 next_prtcl 0x0 cos_profile 0\n\r"
    "  rif 0 processing_type 0 last_label 0 first_label 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_MPLS_TERM_LABEL_RANGE_SET_LABEL_RANGE_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_MPLS_TERM_LABEL_RANGE_SET_LABEL_RANGE_SET_LABEL_RANGE_INFO_TERM_INFO_RIF_ID, 
    "rif_id", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  label_range_info.term_info.rif:\n\r"
    "  RIF Id.When RIF == SOC_PPC_RIF_NULL, the default RIF ID and RPF enable flag are\n\r"
    "  not updated.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api mpls_term label_range_set range_ndx 0 next_prtcl 0x0 cos_profile 0\n\r"
    "  rif 0 processing_type 0 last_label 0 first_label 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_MPLS_TERM_LABEL_RANGE_SET_LABEL_RANGE_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_MPLS_TERM_LABEL_RANGE_SET_LABEL_RANGE_SET_LABEL_RANGE_INFO_TERM_INFO_PROCESSING_TYPE_ID, 
    "processing_type", 
    (PARAM_VAL_RULES *)&SOC_PPC_MPLS_TERM_MODEL_TYPE_rule[0], 
    (sizeof(SOC_PPC_MPLS_TERM_MODEL_TYPE_rule) / sizeof(SOC_PPC_MPLS_TERM_MODEL_TYPE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  label_range_info.term_info.processing_type:\n\r"
    "  Pipe/Uniform processing\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api mpls_term label_range_set range_ndx 0 next_prtcl 0x0 cos_profile 0\n\r"
    "  rif 0 processing_type 0 last_label 0 first_label 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_MPLS_TERM_LABEL_RANGE_SET_LABEL_RANGE_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_MPLS_TERM_LABEL_RANGE_SET_LABEL_RANGE_SET_LABEL_RANGE_INFO_RANGE_LAST_LABEL_ID, 
    "last_label", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  label_range_info.range.last_label:\n\r"
    "  Last label in a range.Range: 0-2^20\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api mpls_term label_range_set range_ndx 0 next_prtcl 0x0 cos_profile 0\n\r"
    "  rif 0 processing_type 0 last_label 0 first_label 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_MPLS_TERM_LABEL_RANGE_SET_LABEL_RANGE_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_MPLS_TERM_LABEL_RANGE_SET_LABEL_RANGE_SET_LABEL_RANGE_INFO_RANGE_FIRST_LABEL_ID, 
    "first_label", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  label_range_info.range.first_label:\n\r"
    "  First label in a range.Range: 0-2^20\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api mpls_term label_range_set range_ndx 0 next_prtcl 0x0 cos_profile 0\n\r"
    "  rif 0 processing_type 0 last_label 0 first_label 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_MPLS_TERM_LABEL_RANGE_SET_LABEL_RANGE_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_MPLS_TERM_LABEL_RANGE_GET_LABEL_RANGE_GET_ID, 
    "label_range_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set the range of MPLS labels that may be used as tunnels, and enable\n\r"
    "  terminating those tables\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api mpls_term label_range_get range_ndx 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_MPLS_TERM_LABEL_RANGE_GET_LABEL_RANGE_GET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_MPLS_TERM_LABEL_RANGE_GET_LABEL_RANGE_GET_RANGE_NDX_ID, 
    "range_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  range_ndx:\n\r"
    "  There are 3 different ranges of labels. Range: 0-2.	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api mpls_term label_range_get range_ndx 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_MPLS_TERM_LABEL_RANGE_GET_LABEL_RANGE_GET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_MPLS_TERM_RANGE_TERMINATED_LABEL_SET_RANGE_TERMINATED_LABEL_SET_ID, 
    "range_terminated_label_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Enable / Disable termination of each label in the MPLS tunnels range\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api mpls_term range_terminated_label_set label_ndx 0 is_terminated_label 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_MPLS_TERM_RANGE_TERMINATED_LABEL_SET_RANGE_TERMINATED_LABEL_SET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_MPLS_TERM_RANGE_TERMINATED_LABEL_SET_RANGE_TERMINATED_LABEL_SET_LABEL_NDX_ID, 
    "label_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  label_ndx:\n\r"
    "  MPLS Label ID.Range: 0-2^20-1	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api mpls_term range_terminated_label_set label_ndx 0 is_terminated_label 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_MPLS_TERM_RANGE_TERMINATED_LABEL_SET_RANGE_TERMINATED_LABEL_SET_ID), 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_MPLS_TERM_RANGE_TERMINATED_LABEL_SET_RANGE_TERMINATED_LABEL_SET_IS_TERMINATED_LABEL_ID, 
    "is_terminated_label", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  is_terminated_label:\n\r"
    "  TRUE:\n\r"
    "  Label is terminated as tunnelFALSE: Label is not terminated, although it is\n\r"
    "  in the termination range\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api mpls_term range_terminated_label_set label_ndx 0 is_terminated_label 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_MPLS_TERM_RANGE_TERMINATED_LABEL_SET_RANGE_TERMINATED_LABEL_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_MPLS_TERM_RANGE_TERMINATED_LABEL_GET_RANGE_TERMINATED_LABEL_GET_ID, 
    "range_terminated_label_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Enable / Disable termination of each label in the MPLS tunnels range\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api mpls_term range_terminated_label_get label_ndx 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_MPLS_TERM_RANGE_TERMINATED_LABEL_GET_RANGE_TERMINATED_LABEL_GET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_MPLS_TERM_RANGE_TERMINATED_LABEL_GET_RANGE_TERMINATED_LABEL_GET_LABEL_NDX_ID, 
    "label_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  label_ndx:\n\r"
    "  MPLS Label ID.Range: 0-2^20-1	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api mpls_term range_terminated_label_get label_ndx 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_MPLS_TERM_RANGE_TERMINATED_LABEL_GET_RANGE_TERMINATED_LABEL_GET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_MPLS_TERM_RESERVED_LABELS_GLOBAL_INFO_SET_RESERVED_LABELS_GLOBAL_INFO_SET_ID, 
    "reserved_labels_global_info_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Processing information for the MPLS reserved labels. MPLS Reserved labels are\n\r"
    "  from 0 to 15.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api mpls_term reserved_labels_global_info_set uc_rpf_enable 0 default_rif\n\r"
    "  0 processing_type 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_MPLS_TERM_RESERVED_LABELS_GLOBAL_INFO_SET_RESERVED_LABELS_GLOBAL_INFO_SET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_MPLS_TERM_RESERVED_LABELS_GLOBAL_INFO_SET_RESERVED_LABELS_GLOBAL_INFO_SET_RESERVED_LABELS_INFO_UC_RPF_ENABLE_ID, 
    "uc_rpf_enable", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  reserved_labels_info.uc_rpf_enable:\n\r"
    "  TRUE: Unicast RPF is enabledFALSE: Unicast RPF is disabled\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api mpls_term reserved_labels_global_info_set uc_rpf_enable 0 default_rif\n\r"
    "  0 processing_type 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_MPLS_TERM_RESERVED_LABELS_GLOBAL_INFO_SET_RESERVED_LABELS_GLOBAL_INFO_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_MPLS_TERM_RESERVED_LABELS_GLOBAL_INFO_SET_RESERVED_LABELS_GLOBAL_INFO_SET_RESERVED_LABELS_INFO_DEFAULT_RIF_ID, 
    "default_rif", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  reserved_labels_info.default_rif:\n\r"
    "  Default RIF Ids, for each range type.Range: 0-4K.When RIF == SOC_PPC_RIF_NULL,\n\r"
    "  the default RIF ID and RPF enable flag are not updated.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api mpls_term reserved_labels_global_info_set uc_rpf_enable 0 default_rif\n\r"
    "  0 processing_type 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_MPLS_TERM_RESERVED_LABELS_GLOBAL_INFO_SET_RESERVED_LABELS_GLOBAL_INFO_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_MPLS_TERM_RESERVED_LABELS_GLOBAL_INFO_SET_RESERVED_LABELS_GLOBAL_INFO_SET_RESERVED_LABELS_INFO_PROCESSING_TYPE_ID, 
    "processing_type", 
    (PARAM_VAL_RULES *)&SOC_PPC_MPLS_TERM_MODEL_TYPE_rule[0], 
    (sizeof(SOC_PPC_MPLS_TERM_MODEL_TYPE_rule) / sizeof(SOC_PPC_MPLS_TERM_MODEL_TYPE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  reserved_labels_info.processing_type:\n\r"
    "  Pipe/Uniform processing\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api mpls_term reserved_labels_global_info_set uc_rpf_enable 0 default_rif\n\r"
    "  0 processing_type 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_MPLS_TERM_RESERVED_LABELS_GLOBAL_INFO_SET_RESERVED_LABELS_GLOBAL_INFO_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_MPLS_TERM_RESERVED_LABELS_GLOBAL_INFO_GET_RESERVED_LABELS_GLOBAL_INFO_GET_ID, 
    "reserved_labels_global_info_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Processing information for the MPLS reserved labels. MPLS Reserved labels are\n\r"
    "  from 0 to 15.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api mpls_term reserved_labels_global_info_get\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_MPLS_TERM_RESERVED_LABELS_GLOBAL_INFO_GET_RESERVED_LABELS_GLOBAL_INFO_GET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_MPLS_TERM_RESERVED_LABEL_INFO_SET_RESERVED_LABEL_INFO_SET_ID, 
    "reserved_label_info_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set the per-reserved label processing information\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api mpls_term reserved_label_info_set label_ndx 0 next_prtcl 0x0\n\r"
    "  cos_profile 0 rif 0 processing_type 0 snoop_action_strength 0\n\r"
    "  frwrd_action_strength 0 trap_code 0 snoop_action_strength 0\n\r"
    "  frwrd_action_strength 0 trap_code 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_MPLS_TERM_RESERVED_LABEL_INFO_SET_RESERVED_LABEL_INFO_SET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_MPLS_TERM_RESERVED_LABEL_INFO_SET_RESERVED_LABEL_INFO_SET_LABEL_NDX_ID, 
    "label_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  label_ndx:\n\r"
    "  Reserved label IDRange: 0-15	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api mpls_term reserved_label_info_set label_ndx 0 next_prtcl 0x0\n\r"
    "  cos_profile 0 rif 0 processing_type 0 snoop_action_strength 0\n\r"
    "  frwrd_action_strength 0 trap_code 0 snoop_action_strength 0\n\r"
    "  frwrd_action_strength 0 trap_code 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_MPLS_TERM_RESERVED_LABEL_INFO_SET_RESERVED_LABEL_INFO_SET_ID), 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_MPLS_TERM_RESERVED_LABEL_INFO_SET_RESERVED_LABEL_INFO_SET_LABEL_INFO_TERM_INFO_NEXT_PRTCL_ID, 
    "next_prtcl", 
    (PARAM_VAL_RULES *)&SOC_PPC_L3_NEXT_PRTCL_TYPE_rule[0], 
    (sizeof(SOC_PPC_L3_NEXT_PRTCL_TYPE_rule) / sizeof(SOC_PPC_L3_NEXT_PRTCL_TYPE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  label_info.term_info.next_prtcl:\n\r"
    "  When MPLS label is terminated user has to specify what is the next header\n\r"
    "  type, value can be IP or MPLS.Range: SOC_PPC_L3_NEXT_PRTCL_TYPE_IPV4:\n\r"
    "  SOC_PPC_L3_NEXT_PRTCL_TYPE_MPLS.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api mpls_term reserved_label_info_set label_ndx 0 next_prtcl 0x0\n\r"
    "  cos_profile 0 rif 0 processing_type 0 snoop_action_strength 0\n\r"
    "  frwrd_action_strength 0 trap_code 0 snoop_action_strength 0\n\r"
    "  frwrd_action_strength 0 trap_code 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_MPLS_TERM_RESERVED_LABEL_INFO_SET_RESERVED_LABEL_INFO_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_MPLS_TERM_RESERVED_LABEL_INFO_SET_RESERVED_LABEL_INFO_SET_LABEL_INFO_TERM_INFO_COS_PROFILE_ID, 
    "term_cos_profile", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  label_info.term_info.cos_profile:\n\r"
    "  Class of Service mapping profile.Setting the profile to '0' keeps the\n\r"
    "  previous TC and DP values T20E: Ignored. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api mpls_term reserved_label_info_set label_ndx 0 next_prtcl 0x0\n\r"
    "  cos_profile 0 rif 0 processing_type 0 snoop_action_strength 0\n\r"
    "  frwrd_action_strength 0 trap_code 0 snoop_action_strength 0\n\r"
    "  frwrd_action_strength 0 trap_code 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_MPLS_TERM_RESERVED_LABEL_INFO_SET_RESERVED_LABEL_INFO_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_MPLS_TERM_RESERVED_LABEL_INFO_SET_RESERVED_LABEL_INFO_SET_LABEL_INFO_TERM_INFO_RIF_ID, 
    "rif_id", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  label_info.term_info.rif:\n\r"
    "  RIF Id.When RIF == SOC_PPC_RIF_NULL, the default RIF ID and RPF enable flag are\n\r"
    "  not updated.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api mpls_term reserved_label_info_set label_ndx 0 next_prtcl 0x0\n\r"
    "  cos_profile 0 rif 0 processing_type 0 snoop_action_strength 0\n\r"
    "  frwrd_action_strength 0 trap_code 0 snoop_action_strength 0\n\r"
    "  frwrd_action_strength 0 trap_code 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_MPLS_TERM_RESERVED_LABEL_INFO_SET_RESERVED_LABEL_INFO_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_MPLS_TERM_RESERVED_LABEL_INFO_SET_RESERVED_LABEL_INFO_SET_LABEL_INFO_TERM_INFO_PROCESSING_TYPE_ID, 
    "processing_type", 
    (PARAM_VAL_RULES *)&SOC_PPC_MPLS_TERM_MODEL_TYPE_rule[0], 
    (sizeof(SOC_PPC_MPLS_TERM_MODEL_TYPE_rule) / sizeof(SOC_PPC_MPLS_TERM_MODEL_TYPE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  label_info.term_info.processing_type:\n\r"
    "  Pipe/Uniform processing\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api mpls_term reserved_label_info_set label_ndx 0 next_prtcl 0x0\n\r"
    "  cos_profile 0 rif 0 processing_type 0 snoop_action_strength 0\n\r"
    "  frwrd_action_strength 0 trap_code 0 snoop_action_strength 0\n\r"
    "  frwrd_action_strength 0 trap_code 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_MPLS_TERM_RESERVED_LABEL_INFO_SET_RESERVED_LABEL_INFO_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_MPLS_TERM_RESERVED_LABEL_INFO_SET_RESERVED_LABEL_INFO_SET_LABEL_INFO_NON_BOS_ACTION_SNOOP_ACTION_STRENGTH_ID, 
    "non_bos_snp_strength", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  label_info.non_bos_action.snoop_action_strength:\n\r"
    "  Value that identifies the strength of the assignment of Snoop action to the\n\r"
    "  packet. Through the packet processing pipe, many snooping decisions may be\n\r"
    "  taken; yet one decision may overwrite a former decision only if it stronger,\n\r"
    "  i.e., its strength is higher than the last decision that was taken. Range\n\r"
    "  0-3. Relevant only for Petra-B.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api mpls_term reserved_label_info_set label_ndx 0 next_prtcl 0x0\n\r"
    "  cos_profile 0 rif 0 processing_type 0 snoop_action_strength 0\n\r"
    "  frwrd_action_strength 0 trap_code 0 snoop_action_strength 0\n\r"
    "  frwrd_action_strength 0 trap_code 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_MPLS_TERM_RESERVED_LABEL_INFO_SET_RESERVED_LABEL_INFO_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_MPLS_TERM_RESERVED_LABEL_INFO_SET_RESERVED_LABEL_INFO_SET_LABEL_INFO_NON_BOS_ACTION_FRWRD_ACTION_STRENGTH_ID, 
    "non_bos_frwrd_strength", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  label_info.non_bos_action.frwrd_action_strength:\n\r"
    "  Value that identifies the strength of the assignment of Forward action to the\n\r"
    "  packet. Through the packet processing pipe, many forwarding decisions may be\n\r"
    "  taken; yet one decision may overwrite a former decision only if it stronger,\n\r"
    "  i.e., its strength is higher than the last decision that was taken.\n\r"
    "  Range 0-7.Relevant only for Petra-B.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api mpls_term reserved_label_info_set label_ndx 0 next_prtcl 0x0\n\r"
    "  cos_profile 0 rif 0 processing_type 0 snoop_action_strength 0\n\r"
    "  frwrd_action_strength 0 trap_code 0 snoop_action_strength 0\n\r"
    "  frwrd_action_strength 0 trap_code 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_MPLS_TERM_RESERVED_LABEL_INFO_SET_RESERVED_LABEL_INFO_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_MPLS_TERM_RESERVED_LABEL_INFO_SET_RESERVED_LABEL_INFO_SET_LABEL_INFO_NON_BOS_ACTION_TRAP_CODE_LSB_ID, 
    "non_bos_trap_code", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals/*SOC_PPC_TRAP_CODE_rule*/[0], 
    (sizeof(soc_ppd_api_free_vals/*SOC_PPC_TRAP_CODE_rule*/) / sizeof(soc_ppd_api_free_vals/*SOC_PPC_TRAP_CODE_rule*/[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
#ifdef COMPILER_STRING_CONST_LIMIT
    "  Full documentation cannot be displayed with -pendantic compiler\n\r",
#else
    "  label_info.non_bos_action.trap_code:\n\r"
    "  Sets the LSB of the CPU code. For trapped packet the CPU code are associated\n\r"
    "  into the packet headers. The CPU code also used as index for the\n\r"
    "  forwarding/snooping actions. see to soc_ppd_trap_frwrd_profile_info_set(),\n\r"
    "  soc_ppd_trap_snoop_profile_info_set(). Range Petra-B: 0-255, T20E:0-63.To know\n\r"
    "  the legal range in specific use of this field, see the documentation in that\n\r"
    "  specific use.In Petra-B this field affects Both, the CPU code set on the\n\r"
    "  packets header and the index to access the forwarding and snooping tables, IN\n\r"
    "  T20E it's only affects the forwarding and snooping index. \n\r"
    "",
#endif /* COMPILER_STRING_CONST_LIMIT */
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api mpls_term reserved_label_info_set label_ndx 0 next_prtcl 0x0\n\r"
    "  cos_profile 0 rif 0 processing_type 0 snoop_action_strength 0\n\r"
    "  frwrd_action_strength 0 trap_code 0 snoop_action_strength 0\n\r"
    "  frwrd_action_strength 0 trap_code 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_MPLS_TERM_RESERVED_LABEL_INFO_SET_RESERVED_LABEL_INFO_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_MPLS_TERM_RESERVED_LABEL_INFO_SET_RESERVED_LABEL_INFO_SET_LABEL_INFO_BOS_ACTION_SNOOP_ACTION_STRENGTH_ID, 
    "bos_snp_strength", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  label_info.bos_action.snoop_action_strength:\n\r"
    "  Value that identifies the strength of the assignment of Snoop action to the\n\r"
    "  packet. Through the packet processing pipe, many snooping decisions may be\n\r"
    "  taken; yet one decision may overwrite a former decision only if it stronger,\n\r"
    "  i.e., its strength is higher than the last decision that was taken. Range\n\r"
    "  0-3. Relevant only for Petra-B.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api mpls_term reserved_label_info_set label_ndx 0 next_prtcl 0x0\n\r"
    "  cos_profile 0 rif 0 processing_type 0 snoop_action_strength 0\n\r"
    "  frwrd_action_strength 0 trap_code 0 snoop_action_strength 0\n\r"
    "  frwrd_action_strength 0 trap_code 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_MPLS_TERM_RESERVED_LABEL_INFO_SET_RESERVED_LABEL_INFO_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_MPLS_TERM_RESERVED_LABEL_INFO_SET_RESERVED_LABEL_INFO_SET_LABEL_INFO_BOS_ACTION_FRWRD_ACTION_STRENGTH_ID, 
    "bos_frwrd_strength", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  label_info.bos_action.frwrd_action_strength:\n\r"
    "  Value that identifies the strength of the assignment of Forward action to the\n\r"
    "  packet. Through the packet processing pipe, many forwarding decisions may be\n\r"
    "  taken; yet one decision may overwrite a former decision only if it stronger,\n\r"
    "  i.e., its strength is higher than the last decision that was taken.\n\r"
    "  Range 0-7.Relevant only for Petra-B.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api mpls_term reserved_label_info_set label_ndx 0 next_prtcl 0x0\n\r"
    "  cos_profile 0 rif 0 processing_type 0 snoop_action_strength 0\n\r"
    "  frwrd_action_strength 0 trap_code 0 snoop_action_strength 0\n\r"
    "  frwrd_action_strength 0 trap_code 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_MPLS_TERM_RESERVED_LABEL_INFO_SET_RESERVED_LABEL_INFO_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_MPLS_TERM_RESERVED_LABEL_INFO_SET_RESERVED_LABEL_INFO_SET_LABEL_INFO_BOS_ACTION_TRAP_CODE_LSB_ID, 
    "bos_trap_code", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals/*SOC_PPC_TRAP_CODE_rule*/[0], 
    (sizeof(soc_ppd_api_free_vals/*SOC_PPC_TRAP_CODE_rule*/) / sizeof(soc_ppd_api_free_vals/*SOC_PPC_TRAP_CODE_rule*/[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
#ifdef COMPILER_STRING_CONST_LIMIT
    "  Full documentation cannot be displayed with -pendantic compiler\n\r",
#else
    "  label_info.bos_action.trap_code:\n\r"
    "  Sets the LSB of the CPU code. For trapped packet the CPU code are associated\n\r"
    "  into the packet headers. The CPU code also used as index for the\n\r"
    "  forwarding/snooping actions. see to soc_ppd_trap_frwrd_profile_info_set(),\n\r"
    "  soc_ppd_trap_snoop_profile_info_set(). Range Petra-B: 0-255, T20E:0-63.To know\n\r"
    "  the legal range in specific use of this field, see the documentation in that\n\r"
    "  specific use.In Petra-B this field affects Both, the CPU code set on the\n\r"
    "  packets header and the index to access the forwarding and snooping tables, IN\n\r"
    "  T20E it's only affects the forwarding and snooping index. \n\r"
    "",
#endif /* COMPILER_STRING_CONST_LIMIT */
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api mpls_term reserved_label_info_set label_ndx 0 next_prtcl 0x0\n\r"
    "  cos_profile 0 rif 0 processing_type 0 snoop_action_strength 0\n\r"
    "  frwrd_action_strength 0 trap_code 0 snoop_action_strength 0\n\r"
    "  frwrd_action_strength 0 trap_code 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_MPLS_TERM_RESERVED_LABEL_INFO_SET_RESERVED_LABEL_INFO_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_MPLS_TERM_RESERVED_LABEL_INFO_GET_RESERVED_LABEL_INFO_GET_ID, 
    "reserved_label_info_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set the per-reserved label processing information\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api mpls_term reserved_label_info_get label_ndx 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_MPLS_TERM_RESERVED_LABEL_INFO_GET_RESERVED_LABEL_INFO_GET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_MPLS_TERM_RESERVED_LABEL_INFO_GET_RESERVED_LABEL_INFO_GET_LABEL_NDX_ID, 
    "label_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  label_ndx:\n\r"
    "  Reserved label IDRange: 0-15	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api mpls_term reserved_label_info_get label_ndx 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_MPLS_TERM_RESERVED_LABEL_INFO_GET_RESERVED_LABEL_INFO_GET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_MPLS_TERM_ENCOUNTERED_ENTRIES_GET_BLOCK_ENCOUNTERED_ENTRIES_GET_BLOCK_ID, 
    "encountered_entries_get_block", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Diagnostic tool: Indicates the terminated MPLS label Ids. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api mpls_term encountered_entries_get_block first_label_ndx 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_MPLS_TERM_ENCOUNTERED_ENTRIES_GET_BLOCK_ENCOUNTERED_ENTRIES_GET_BLOCK_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_MPLS_TERM_ENCOUNTERED_ENTRIES_GET_BLOCK_ENCOUNTERED_ENTRIES_GET_BLOCK_FIRST_LABEL_NDX_ID, 
    "first_label_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  first_label_ndx:\n\r"
    "  First MPLS label to scan	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api mpls_term encountered_entries_get_block first_label_ndx 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_MPLS_TERM_ENCOUNTERED_ENTRIES_GET_BLOCK_ENCOUNTERED_ENTRIES_GET_BLOCK_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
   },
   { 
    SOC_PARAM_PPD_MPLS_TERM_PROFILE_INFO_SET_PROFILE_INFO_SET_ID, 
    "profile_info_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set termination profile attributes. Indicates how to process\n\r"
    "  the terminated mpls-header\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api mpls_term profile_info_set\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_MPLS_TERM_PROFILE_INFO_SET_PROFILE_INFO_SET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_MPLS_TERM_PROFILE_INFO_SET_PROFILE_INFO_SET_PROFILE_NDX_ID, 
    "profile_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  profile_ndx:\n\r"
    "  Entry index. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api mpls_term profile_info_set profile_ndx 0\n\r"
#endif 
    "",
    "",
   BIT_UI_16(SOC_FUN_PPD_MPLS_TERM_PROFILE_INFO_SET_PROFILE_INFO_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_MPLS_TERM_PROFILE_INFO_SET_PROFILE_INFO_SET_PROFILE_INFO_NOF_HEADERS_ID, 
    "nof_headers", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  nof_headers:\n\r"
    "  Number of headers to remove. Range 1-3 \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api mpls_term profile_info_set profile_ndx 0 nof_headers 0\n\r"
#endif 
    "",
    "",
   BIT_UI_16(SOC_FUN_PPD_MPLS_TERM_PROFILE_INFO_SET_PROFILE_INFO_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_MPLS_TERM_PROFILE_INFO_SET_PROFILE_INFO_SET_PROFILE_INFO_TTL_EXP_NDX_ID, 
    "ttl_exp_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  ttl_exp_ndx:\n\r"
    "  From which of the terminated labels to take TTL and EXP. Range 0-1. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api mpls_term profile_info_set profile_ndx 0 nof_headers 0 ttl_exp_ndx 0\n\r"
#endif 
    "",
    "",
   BIT_UI_16(SOC_FUN_PPD_MPLS_TERM_PROFILE_INFO_SET_PROFILE_INFO_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_MPLS_TERM_PROFILE_INFO_SET_PROFILE_INFO_SET_PROFILE_INFO_DISCARD_TTL_0_ID, 
    "discard_ttl_0", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  discard_ttl_0:\n\r"
    "  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api mpls_term profile_info_set profile_ndx 0 nof_headers 0 ttl_exp_ndx 0\n\r"
	"  discard_ttl_0 0\n\r"
#endif 
    "",
    "",
   BIT_UI_16(SOC_FUN_PPD_MPLS_TERM_PROFILE_INFO_SET_PROFILE_INFO_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_MPLS_TERM_PROFILE_INFO_SET_PROFILE_INFO_SET_PROFILE_INFO_DISCARD_TTL_1_ID, 
    "discard_ttl_1", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  discard_ttl_1:\n\r"
    "  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api mpls_term profile_info_set profile_ndx 0 nof_headers 0 ttl_exp_ndx 0\n\r"
	"  discard_ttl_0 0 discard_ttl_1 0\n\r"
#endif 
    "",
    "",
   BIT_UI_16(SOC_FUN_PPD_MPLS_TERM_PROFILE_INFO_SET_PROFILE_INFO_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_MPLS_TERM_PROFILE_INFO_SET_PROFILE_INFO_SET_PROFILE_INFO_HAS_CW_ID, 
    "has_cw", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  has_cw:\n\r"
    "  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api mpls_term profile_info_set profile_ndx 0 nof_headers 0 ttl_exp_ndx 0\n\r"
	"  discard_ttl_0 0 discard_ttl_1 0 has_cw 0\n\r"
#endif 
    "",
    "",
   BIT_UI_16(SOC_FUN_PPD_MPLS_TERM_PROFILE_INFO_SET_PROFILE_INFO_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_MPLS_TERM_PROFILE_INFO_SET_PROFILE_INFO_SET_PROFILE_INFO_SKIP_ETH_ID, 
    "skip_eth", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  skip_eth:\n\r"
    "  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api mpls_term profile_info_set profile_ndx 0 nof_headers 0 ttl_exp_ndx 0\n\r"
	"  discard_ttl_0 0 discard_ttl_1 0 has_cw 0 skip_eth 0\n\r"
#endif 
    "",
    "",
   BIT_UI_16(SOC_FUN_PPD_MPLS_TERM_PROFILE_INFO_SET_PROFILE_INFO_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },
  { 
    SOC_PARAM_PPD_MPLS_TERM_PROFILE_INFO_GET_PROFILE_INFO_GET_ID, 
    "profile_info_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Get termination profile attributes. Indicates how to process\n\r"
    "  the terminated mpls-header\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api mpls_term profile_info_get\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_MPLS_TERM_PROFILE_INFO_GET_PROFILE_INFO_GET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_MPLS_TERM_PROFILE_INFO_GET_PROFILE_INFO_GET_PROFILE_NDX_ID, 
    "profile_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  profile_ndx:\n\r"
    "  Entry index. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api mpls_term profile_info_get profile_ndx 0\n\r"
#endif 
    "",
    "",
   BIT_UI_16(SOC_FUN_PPD_MPLS_TERM_PROFILE_INFO_GET_PROFILE_INFO_GET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },    
  { 
    SOC_PARAM_PPD_MPLS_TERM_COS_INFO_SET_COS_INFO_SET_ID, 
    "cos_info_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set information of resolving COS parameters whenever MPLS label is terminated.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api mpls_term cos_info_set use_for_uniform 0 use_for_pipe 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_MPLS_TERM_COS_INFO_SET_COS_INFO_SET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_MPLS_TERM_COS_INFO_SET_COS_INFO_SET_TERM_COS_INFO_USE_FOR_UNIFORM_ID, 
    "use_for_uniform", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  term_cos_info.use_for_uniform:\n\r"
    "  Use terminated label in COS parameters termination if the terminated label is\n\r"
    "  of Uniform model.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api mpls_term cos_info_set use_for_uniform 0 use_for_pipe 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_MPLS_TERM_COS_INFO_SET_COS_INFO_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_MPLS_TERM_COS_INFO_SET_COS_INFO_SET_TERM_COS_INFO_USE_FOR_PIPE_ID, 
    "use_for_pipe", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  term_cos_info.use_for_pipe:\n\r"
    "  Use terminated label in COS parameters termination if the terminated label is\n\r"
    "  of Pipe model. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api mpls_term cos_info_set use_for_uniform 0 use_for_pipe 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_MPLS_TERM_COS_INFO_SET_COS_INFO_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_MPLS_TERM_COS_INFO_GET_COS_INFO_GET_ID, 
    "cos_info_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set information of resolving COS parameters whenever MPLS label is terminated.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api mpls_term cos_info_get\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_MPLS_TERM_COS_INFO_GET_COS_INFO_GET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_MPLS_TERM_LABEL_TO_COS_INFO_SET_LABEL_TO_COS_INFO_SET_ID, 
    "label_to_cos_info_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set mapping from terminated label fields (EXP) to COS parameters TC and DP.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api mpls_term label_to_cos_info_set model 0 in_exp 0 overwrite_dp 0 dp 0\n\r"
    "  overwrite_tc 0 tc 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_MPLS_TERM_LABEL_TO_COS_INFO_SET_LABEL_TO_COS_INFO_SET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_MPLS_TERM_LABEL_TO_COS_INFO_SET_LABEL_TO_COS_INFO_SET_COS_KEY_MODEL_ID, 
    "model", 
    (PARAM_VAL_RULES *)&SOC_PPD_SAND_PP_MPLS_TUNNEL_MODEL_rule[0], 
    (sizeof(SOC_PPD_SAND_PP_MPLS_TUNNEL_MODEL_rule) / sizeof(SOC_PPD_SAND_PP_MPLS_TUNNEL_MODEL_rule[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  cos_key.model:\n\r"
    "  Tunnel model (Pipe or uniform)\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api mpls_term label_to_cos_info_set model 0 in_exp 0 overwrite_dp 0 dp 0\n\r"
    "  overwrite_tc 0 tc 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_MPLS_TERM_LABEL_TO_COS_INFO_SET_LABEL_TO_COS_INFO_SET_ID), 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_MPLS_TERM_LABEL_TO_COS_INFO_SET_LABEL_TO_COS_INFO_SET_COS_KEY_IN_EXP_ID, 
    "in_exp", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  cos_key.in_exp:\n\r"
    "  Incoming EXP in the label of the packet.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api mpls_term label_to_cos_info_set model 0 in_exp 0 overwrite_dp 0 dp 0\n\r"
    "  overwrite_tc 0 tc 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_MPLS_TERM_LABEL_TO_COS_INFO_SET_LABEL_TO_COS_INFO_SET_ID), 
    4, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_MPLS_TERM_LABEL_TO_COS_INFO_SET_LABEL_TO_COS_INFO_SET_COS_VAL_OVERWRITE_DP_ID, 
    "overwrite_dp", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  cos_val.overwrite_dp:\n\r"
    "  Whether to overwrite the DP value associated with the packet with this 'dp'\n\r"
    "  value.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api mpls_term label_to_cos_info_set model 0 in_exp 0 overwrite_dp 0 dp 0\n\r"
    "  overwrite_tc 0 tc 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_MPLS_TERM_LABEL_TO_COS_INFO_SET_LABEL_TO_COS_INFO_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_MPLS_TERM_LABEL_TO_COS_INFO_SET_LABEL_TO_COS_INFO_SET_COS_VAL_DP_ID, 
    "dp", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  cos_val.dp:\n\r"
    "  Drop Precedence value.Range: 0 - 3.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api mpls_term label_to_cos_info_set model 0 in_exp 0 overwrite_dp 0 dp 0\n\r"
    "  overwrite_tc 0 tc 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_MPLS_TERM_LABEL_TO_COS_INFO_SET_LABEL_TO_COS_INFO_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_MPLS_TERM_LABEL_TO_COS_INFO_SET_LABEL_TO_COS_INFO_SET_COS_VAL_OVERWRITE_TC_ID, 
    "overwrite_tc", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  cos_val.overwrite_tc:\n\r"
    "  Whether to overwrite the TC value associated with the packet with this 'tc'\n\r"
    "  value.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api mpls_term label_to_cos_info_set model 0 in_exp 0 overwrite_dp 0 dp 0\n\r"
    "  overwrite_tc 0 tc 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_MPLS_TERM_LABEL_TO_COS_INFO_SET_LABEL_TO_COS_INFO_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_MPLS_TERM_LABEL_TO_COS_INFO_SET_LABEL_TO_COS_INFO_SET_COS_VAL_TC_ID, 
    "tc", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  cos_val.tc:\n\r"
    "  Traffic Class value.Range: 0 - 7.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api mpls_term label_to_cos_info_set model 0 in_exp 0 overwrite_dp 0 dp 0\n\r"
    "  overwrite_tc 0 tc 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_MPLS_TERM_LABEL_TO_COS_INFO_SET_LABEL_TO_COS_INFO_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_MPLS_TERM_LABEL_TO_COS_INFO_GET_LABEL_TO_COS_INFO_GET_ID, 
    "label_to_cos_info_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set mapping from terminated label fields (EXP) to COS parameters TC and DP.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api mpls_term label_to_cos_info_get model 0 in_exp 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_MPLS_TERM_LABEL_TO_COS_INFO_GET_LABEL_TO_COS_INFO_GET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_MPLS_TERM_LABEL_TO_COS_INFO_GET_LABEL_TO_COS_INFO_GET_COS_KEY_MODEL_ID, 
    "model", 
    (PARAM_VAL_RULES *)&SOC_PPD_SAND_PP_MPLS_TUNNEL_MODEL_rule[0], 
    (sizeof(SOC_PPD_SAND_PP_MPLS_TUNNEL_MODEL_rule) / sizeof(SOC_PPD_SAND_PP_MPLS_TUNNEL_MODEL_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  cos_key.model:\n\r"
    "  Tunnel model (Pipe or uniform)\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api mpls_term label_to_cos_info_get model 0 in_exp 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_MPLS_TERM_LABEL_TO_COS_INFO_GET_LABEL_TO_COS_INFO_GET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_MPLS_TERM_LABEL_TO_COS_INFO_GET_LABEL_TO_COS_INFO_GET_COS_KEY_IN_EXP_ID, 
    "in_exp", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  cos_key.in_exp:\n\r"
    "  Incoming EXP in the label of the packet.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api mpls_term label_to_cos_info_get model 0 in_exp 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_MPLS_TERM_LABEL_TO_COS_INFO_GET_LABEL_TO_COS_INFO_GET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_API_MPLS_TERM_ID, 
    "mpls_term", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "",
    "", 
    "",
    BIT_UI_16_RNG(SOC_FUN_PPD_API_MPLS_TERM_FIRST_ID,SOC_FUN_PPD_API_MPLS_TERM_LAST_ID), 
    1, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
#endif /* } mpls_term*/
#ifdef UI_VSI/* { vsi*/
  { 
    SOC_PARAM_PPD_VSI_MAP_ADD_MAP_ADD_ID, 
    "map_add", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Map VSI to sys-VSI and system VSI to egress VSI\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api vsi map_add local_vsi_ndx 0 sys_vsid 0 eg_local_vsid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(7)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_VSI_MAP_ADD_MAP_ADD_LOCAL_VSI_NDX_ID, 
    "local_vsi_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  local_vsi_ndx:\n\r"
    "  Local VSID.Petra-B Range: 0-16K  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api vsi map_add local_vsi_ndx 0 sys_vsid 0 eg_local_vsid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(7)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_VSI_MAP_ADD_MAP_ADD_SYS_VSID_ID, 
    "sys_vsid", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  sys_vsid:\n\r"
    "  System VSID.Range: 0-64K  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api vsi map_add local_vsi_ndx 0 sys_vsid 0 eg_local_vsid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(7)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_VSI_MAP_ADD_MAP_ADD_EG_LOCAL_VSID_ID, 
    "eg_local_vsid", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  eg_local_vsid:\n\r"
    "  Local VSID.During the egress processing, packets that arrive from the fabric\n\r"
    "  with 'sys_vsid' are mapped to 'eg_local_vsid'.Typically, 'eg_local_vsid'\n\r"
    "  equals 'local_vsi_ndx'   \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api vsi map_add local_vsi_ndx 0 sys_vsid 0 eg_local_vsid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(7)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_VSI_MAP_REMOVE_MAP_REMOVE_ID, 
    "map_remove", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Remove mapping of local VSI to system VSI, and system VSI to local VSI.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api vsi map_remove local_vsi_ndx 0 sys_vsid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(5)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_VSI_MAP_REMOVE_MAP_REMOVE_LOCAL_VSI_NDX_ID, 
    "local_vsi_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  local_vsi_ndx:\n\r"
    "  Local VSID.Petra-B Range: 0-16K  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api vsi map_remove local_vsi_ndx 0 sys_vsid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(5)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_VSI_MAP_REMOVE_MAP_REMOVE_SYS_VSID_ID, 
    "sys_vsid", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  sys_vsid:\n\r"
    "  System VSID.Range: 0-64K.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api vsi map_remove local_vsi_ndx 0 sys_vsid 0\n\r"
#endif 
    "",
    "",
    {0, 0, BIT(30), 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_VSI_INFO_SET_INFO_SET_ID, 
    "vsi_info_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set the Virtual Switch Instance information. After setting the VSI, the user\n\r"
    "  may attach L2 Logical Interfaces to it: ACs; PWEs\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api vsi info_set vsi_ndx 0 enable_ip_snooping 0 limit_profile_id 0\n\r"
    "  fid_profile_id 0 enable_my_mac 0 stp_topology_id 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(6)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_VSI_INFO_SET_INFO_SET_VSI_NDX_ID, 
    "vsi_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  vsi_ndx:\n\r"
    "  System VSID.Range: 0-64K  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api vsi info_set vsi_ndx 0 enable_ip_snooping 0 limit_profile_id 0\n\r"
    "  fid_profile_id 0 enable_my_mac 0 stp_topology_id 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(6)}, 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_VSI_INFO_SET_INFO_SET_VSI_INFO_LIMIT_PROFILE_ID_ID, 
    "limit_profile_id", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  vsi_info.limit_profile_id:\n\r"
    "  Limit the number of MAC addresses learnt on the\n\r"
    "  VSI.soc_ppd_frwrd_mact_learn_profile_limit_info_set() set the limitation\n\r"
    "  attributes of the profile.When fid_profile_id id not 'SOC_PPC_VSI_FID_IS_VSID',\n\r"
    "  limits the number of MAC addresses learnt on the shared FID\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api vsi info_set vsi_ndx 0 enable_ip_snooping 0 limit_profile_id 0\n\r"
    "  fid_profile_id 0 enable_my_mac 0 stp_topology_id 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(6)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_VSI_INFO_SET_INFO_SET_VSI_INFO_FID_PROFILE_ID_ID, 
    "fid_profile_id", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  vsi_info.fid_profile_id:\n\r"
    "  VSID mapping to MAC table FID (Filtering ID).SOC_PPC_VSI_FID_IS_VSID: indicates\n\r"
    "  that the FID is the VSID.Other profiles enable shared learning, by calling\n\r"
    "  soc_ppd_frwrd_mact_fid_profile_to_fid_map_set()In T20E: Must be set to\n\r"
    "  'SOC_PPC_VSI_FID_IS_VSID'\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api vsi info_set vsi_ndx 0 enable_ip_snooping 0 limit_profile_id 0\n\r"
    "  fid_profile_id 0 enable_my_mac 0 stp_topology_id 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(6)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_VSI_INFO_SET_INFO_SET_VSI_INFO_ENABLE_MY_MAC_ID, 
    "enable_my_mac", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  vsi_info.enable_my_mac:\n\r"
    "  Enable/Disable L2 termination due to My MAC. The MyMAC Address is configured\n\r"
    "  in the MyMAC module.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api vsi info_set vsi_ndx 0 enable_ip_snooping 0 limit_profile_id 0\n\r"
    "  fid_profile_id 0 enable_my_mac 0 stp_topology_id 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(6)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_VSI_INFO_SET_INFO_SET_VSI_INFO_STP_TOPOLOGY_ID_ID, 
    "stp_topology_id", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  vsi_info.stp_topology_id:\n\r"
    "  STP topology ID.Range: 0-63 \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api vsi info_set vsi_ndx 0 enable_ip_snooping 0 limit_profile_id 0\n\r"
    "  fid_profile_id 0 enable_my_mac 0 stp_topology_id 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(6)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_DECISION_INFO_ADDITIONAL_INFO_TRAP_INFO_TRAP_ACTION_PROFILE_ID_ID,
    "dflt_frwrd_profile_id", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  vsi_info.default_forwarding.additional_info.trap_info.trap_action_profile_id:\n\r"
    "  Trapping action profile ID.Range: 0-15.Points to a database that holds\n\r"
    "  trapping options. The profile ID selects the CPU to handle the trap; The CPU\n\r"
    "  port ID; the priority of the message; etc.The TRAP action profile is\n\r"
    "  configured via soc_ppd_trap_mgmt_frwrd_profile_info_set()\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api vsi info_set vsi_ndx 0 enable_ip_snooping 0 limit_profile_id 0\n\r"
    "  fid_profile_id 0 enable_my_mac 0 stp_topology_id 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(6)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_DECISION_FD_TRAP_CODE_ID, 
    "fd_trap_code", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals/*SOC_PPC_TRAP_CODE_rule*/[0], 
    (sizeof(soc_ppd_api_free_vals/*SOC_PPC_TRAP_CODE_rule*/) / sizeof(soc_ppd_api_free_vals/*SOC_PPC_TRAP_CODE_rule*/[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pwe_info.default_frwrd.default_forwarding.additional_info.trap_info.trap_acti\n\r"
    "  n_profile_id:\n\r"
    "  Trapping action profile ID.Range: 0-15.Points to a database that holds\n\r"
    "  trapping options. The profile ID selects the CPU to handle the trap; The CPU\n\r"
    "  port ID; the priority of the message; etc.The TRAP action profile is\n\r"
    "  configured via soc_ppd_trap_mgmt_frwrd_profile_info_set()\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api vsi info_set vsi_ndx 0 enable_ip_snooping 0 limit_profile_id 0\n\r"
    "  fid_profile_id 0 enable_my_mac 0 stp_topology_id 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(6)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_DECISION_FD_FWD_STRENGTH_ID, 
    "fd_frwrd_strength", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pwe_info.default_frwrd.default_forwarding.additional_info.trap_info.trap_qual\n\r"
    "  fier:\n\r"
    "  Trap qualifier to be associated with the packet to identify the trap. Range:\n\r"
    "  0-4K.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api vsi info_set vsi_ndx 0 enable_ip_snooping 0 limit_profile_id 0\n\r"
    "  fid_profile_id 0 enable_my_mac 0 stp_topology_id 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(6)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_DECISION_FD_SNOOP_STRENGTH_ID,
    "fd_snp_strength", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pwe_info.default_frwrd.default_forwarding.additional_info.outlif.val:\n\r"
    "  Out-LIF value, according to type. May be AC / EEP / VSI\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api vsi info_set vsi_ndx 0 enable_ip_snooping 0 limit_profile_id 0\n\r"
    "  fid_profile_id 0 enable_my_mac 0 stp_topology_id 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(6)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_DECISION_FD_AC_ID,
    "fd_ac_id", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pwe_info.default_frwrd.default_forwarding.additional_info.outlif.val:\n\r"
    "  Out-LIF value, according to type. May be AC / EEP / VSI\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api vsi info_set vsi_ndx 0 enable_ip_snooping 0 limit_profile_id 0\n\r"
    "  fid_profile_id 0 enable_my_mac 0 stp_topology_id 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(6)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_DECISION_FD_EEP_NDX_ID,
    "fd_eep_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pwe_info.default_frwrd.default_forwarding.additional_info.outlif.val:\n\r"
    "  Out-LIF value, according to type. May be AC / EEP / VSI\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api vsi info_set vsi_ndx 0 enable_ip_snooping 0 limit_profile_id 0\n\r"
    "  fid_profile_id 0 enable_my_mac 0 stp_topology_id 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(6)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_DECISION_FD_PUSH_PROFILE_ID, 
    "fd_push_profile", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pwe_info.default_frwrd.default_forwarding.additional_info.eei.val.mpls_comman\n\r"
    "  .push_profile:\n\r"
    "  If the command is push, this is the push profile used to construct the\n\r"
    "  label's TTL and EXP.Otherwise, this field is ignored.Range: 0 - 7.EEI may\n\r"
    "  include the MPLS command, but then the command cannot be Push with\n\r"
    "  push_profile 0. See SOC_PPC_EEI.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api vsi info_set vsi_ndx 0 enable_ip_snooping 0 limit_profile_id 0\n\r"
    "  fid_profile_id 0 enable_my_mac 0 stp_topology_id 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(6)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_DECISION_FD_LABEL_ID, 
    "fd_label", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pwe_info.default_frwrd.default_forwarding.additional_info.eei.val.mpls_comman\n\r"
    "  .label:\n\r"
    "  Label. Relevant if the command is push or swap.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api vsi info_set vsi_ndx 0 enable_ip_snooping 0 limit_profile_id 0\n\r"
    "  fid_profile_id 0 enable_my_mac 0 stp_topology_id 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(6)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_DECISION_FD_IS_LAG_ID, 
    "fd_is_lag", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pwe_info.default_frwrd.default_forwarding.additional_info.eei.val.trill_dest.\n\r"
    "  s_multicast:\n\r"
    "  Is the TRILL packet is sent as multicast (flooded in the Distribution Tree)\n\r"
    "  or sent as Unicast to Egress Nick.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api vsi info_set vsi_ndx 0 enable_ip_snooping 0 limit_profile_id 0\n\r"
    "  fid_profile_id 0 enable_my_mac 0 stp_topology_id 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(6)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_DECISION_FD_DEST_ID, 
    "fd_dest_id", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pwe_info.default_frwrd.default_forwarding.dest_id:\n\r"
    "  Destination ID, according to type.Multicast: MIDFEC:\n\r"
    "  FEC IDTrap:\n\r"
    "  IgnoredDrop:\n\r"
    "  IgnoredUnicast:\n\r"
    "  System port. When LAG, the user should\n\r"
    "  use SOC_PPD_LAG_ID(lag-id). When system\n\r"
    "  port is with allocated QoS resources the\n\r"
    "  user should use\n\r"
    "  SOC_PPD_DIRECT_FLOW_ID(flow-id)\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api vsi info_set vsi_ndx 0 enable_ip_snooping 0 limit_profile_id 0\n\r"
    "  fid_profile_id 0 enable_my_mac 0 stp_topology_id 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(6)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_DECISION_FD_TYPE_ID, 
    "fd_type",
    (PARAM_VAL_RULES *)&SOC_PPD_FRWRD_DECISION_MACRO_TYPE_rule[0], 
    (sizeof(SOC_PPD_FRWRD_DECISION_MACRO_TYPE_rule) / sizeof(SOC_PPD_FRWRD_DECISION_MACRO_TYPE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pwe_info.default_frwrd.default_forwarding.type:\n\r"
    "  Forwarding decision type:Unicast without FEC; Multicast without FEC; FEC;\n\r"
    "  Drop or Trap\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api vsi info_set vsi_ndx 0 enable_ip_snooping 0 limit_profile_id 0\n\r"
    "  fid_profile_id 0 enable_my_mac 0 stp_topology_id 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(6)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_VSI_INFO_GET_INFO_GET_ID, 
    "vsi_info_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set the Virtual Switch Instance information. After setting the VSI, the user\n\r"
    "  may attach L2 Logical Interfaces to it: ACs; PWEs\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api vsi info_get vsi_ndx 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(2)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_VSI_INFO_GET_INFO_GET_VSI_NDX_ID, 
    "vsi_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  vsi_ndx:\n\r"
    "  System VSID.Range: 0-64K  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api vsi info_get vsi_ndx 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(2)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  {
    SOC_PARAM_PPD_VSI_EGRESS_MTU_SET_VSI_EGRESS_MTU_SET_ID, 
    "egress_mtu_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set MTU value.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api vsi vsi_egress_mtu_set vsi_profile_ndx 1 vsi_val 100\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(31)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  }, 
  { 
    SOC_PARAM_PPD_VSI_EGRESS_MTU_SET_VSI_EGRESS_MTU_SET_VSI_PROFILE_NDX_ID, 
    "vsi_profile_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  vsi_profile_ndx:\n\r"
    "  vsi profile index. Range:1-3\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api vsi vsi_egress_mtu_set vsi_profile_ndx 1 vsi_val 100\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(31)},
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  }, 
  { 
    SOC_PARAM_PPD_VSI_EGRESS_MTU_SET_VSI_EGRESS_MTU_SET_MTU_VAL_ID, 
    "mtu_val", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  mtu_val:\n\r"
    "  MTU value. Range: 0-0x3fff.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api vsi vsi_egress_mtu_set vsi_profile_ndx 1 vsi_val 100\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(31)},
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_VSI_EGRESS_MTU_GET_VSI_EGRESS_MTU_GET_ID, 
    "egress_mtu_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Get MTU value.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api vsi vsi_egress_mtu_get vsi_profile_ndx 1\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(23)},
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_VSI_EGRESS_MTU_GET_VSI_EGRESS_MTU_GET_VSI_PROFILE_NDX_ID, 
    "vsi_profile_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  vsi_profile_ndx:\n\r"
    "  vsi profile index. Range:1-3\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api rif ttl_scope_get ttl_scope_ndx 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(23)},
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },
  { 
    SOC_PARAM_PPD_API_VSI_ID, 
    "vsi", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "",
    "", 
    "",
    {0, 0, BIT(31), BIT(0)|BIT(1)|BIT(2), 0, 0, 0, 0, 0, 0, 0, BIT(5)|BIT(6)|BIT(7), 0, BIT(31), BIT(23)}, 
    1, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
#endif /* } vsi*/
#ifdef UI_LIF/* { lif*/
  { 
    SOC_PARAM_PPD_L2_LIF_PWE_MAP_RANGE_SET_PWE_MAP_RANGE_SET_ID, 
    "pwe_map_range_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set MPLS labels that may be used as in-vc-labels\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif pwe_map_range_set last_label 0 first_label 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(3)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_L2_LIF_PWE_MAP_RANGE_SET_PWE_MAP_RANGE_SET_IN_VC_RANGE_LAST_LABEL_ID, 
    "last_label", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  in_vc_range.last_label:\n\r"
    "  Last MPLS label, to be used as In-VC label.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif pwe_map_range_set last_label 0 first_label 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(3)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_L2_LIF_PWE_MAP_RANGE_SET_PWE_MAP_RANGE_SET_IN_VC_RANGE_FIRST_LABEL_ID, 
    "first_label", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  in_vc_range.first_label:\n\r"
    "  First MPLS label, to be used as In-VC label.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif pwe_map_range_set last_label 0 first_label 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(3)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_L2_LIF_PWE_MAP_RANGE_GET_PWE_MAP_RANGE_GET_ID, 
    "pwe_map_range_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set MPLS labels that may be used as in-vc-labels\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif pwe_map_range_get\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(4)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_L2_LIF_PWE_ADD_PWE_ADD_ID, 
    "pwe_add", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Enable an in VC label as a PWE handle, and set the PWE attributes\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif pwe_add in_vc_label 0 lif_index 0 cos_profile 0\n\r"
    "  tpid_profile_index 0 orientation 0 trap_action_profile_id 0 trap_qualifier 0\n\r"
    "  val 0 type 0 isid 0 push_profile 0 label 0 command 0 dest_nick 0 is_multicast\n\r"
    "  0 type 0 dest_id 0 type 0 enable_learning 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0 vsid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(5)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_L2_LIF_PWE_ADD_PWE_NOF_REPS_ID, 
    "nof_reps", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Enable an in VC label as a PWE handle, and set the PWE attributes\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif pwe_add in_vc_label 0 lif_index 0 cos_profile 0\n\r"
    "  tpid_profile_index 0 orientation 0 trap_action_profile_id 0 trap_qualifier 0\n\r"
    "  val 0 type 0 isid 0 push_profile 0 label 0 command 0 dest_nick 0 is_multicast\n\r"
    "  0 type 0 dest_id 0 type 0 enable_learning 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0 vsid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(5)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_L2_LIF_PWE_ADD_PWE_ADD_IN_VC_LABEL_ID, 
    "in_vc_label", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  in_vc_label:\n\r"
    "  The In MPLS label that attached to the PWE  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif pwe_add in_vc_label 0 lif_index 0 cos_profile 0\n\r"
    "  tpid_profile_index 0 orientation 0 trap_action_profile_id 0 trap_qualifier 0\n\r"
    "  val 0 type 0 isid 0 push_profile 0 label 0 command 0 dest_nick 0 is_multicast\n\r"
    "  0 type 0 dest_id 0 type 0 enable_learning 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0 vsid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(5)}, 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_L2_LIF_PWE_ADD_PWE_ADD_LIF_INDEX_ID, 
    "lif_index", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  lif_index:\n\r"
    "  LIF table index  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif pwe_add in_vc_label 0 lif_index 0 cos_profile 0\n\r"
    "  tpid_profile_index 0 orientation 0 trap_action_profile_id 0 trap_qualifier 0\n\r"
    "  val 0 type 0 isid 0 push_profile 0 label 0 command 0 dest_nick 0 is_multicast\n\r"
    "  0 type 0 dest_id 0 type 0 enable_learning 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0 vsid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(5)}, 
    4, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_L2_LIF_PWE_ADD_PWE_ADD_PWE_INFO_SERVICE_TYPE_ID, 
    "service_type", 
    (PARAM_VAL_RULES *)&SOC_PPC_L2_LIF_PWE_SERVICE_TYPE_rule[0], 
    (sizeof(SOC_PPC_L2_LIF_PWE_SERVICE_TYPE_rule) / sizeof(SOC_PPC_L2_LIF_PWE_SERVICE_TYPE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pwe_info.service_type:\n\r"
    "  PWE service type. P2P or MP. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif pwe_add in_vc_label 0 lif_index 0 service_type 0 has_cw 0\n\r"
    "  cos_profile 0 tpid_profile_index 0 orientation 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 enable_learning 0\n\r"
    "  trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0 push_profile 0\n\r"
    "  label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0\n\r"
    "  default_frwd_type 0 vsid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(5)}, 
    5, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_L2_LIF_PWE_ADD_PWE_ADD_PWE_INFO_COS_PROFILE_ID, 
    "cos_profile", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pwe_info.cos_profile:\n\r"
    "  Class of Service mapping profile\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif pwe_add in_vc_label 0 lif_index 0 cos_profile 0\n\r"
    "  tpid_profile_index 0 orientation 0 trap_action_profile_id 0 trap_qualifier 0\n\r"
    "  val 0 type 0 isid 0 push_profile 0 label 0 command 0 dest_nick 0 is_multicast\n\r"
    "  0 type 0 dest_id 0 type 0 enable_learning 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0 vsid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(5)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_L2_LIF_PWE_ADD_PWE_ADD_PWE_INFO_TPID_PROFILE_INDEX_ID, 
    "tpid_profile_index", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pwe_info.tpid_profile_index:\n\r"
    "  Pointer to TPID profile options table.Needed for the internal L2 header\n\r"
    "  parsing. The profile table is configured via 'soc_ppd_llp_parse_tpid_value_set()'\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif pwe_add in_vc_label 0 lif_index 0 cos_profile 0\n\r"
    "  tpid_profile_index 0 orientation 0 trap_action_profile_id 0 trap_qualifier 0\n\r"
    "  val 0 type 0 isid 0 push_profile 0 label 0 command 0 dest_nick 0 is_multicast\n\r"
    "  0 type 0 dest_id 0 type 0 enable_learning 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0 vsid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(5)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_L2_LIF_PWE_ADD_PWE_ADD_PWE_INFO_HAS_CW_ID, 
    "has_cw", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pwe_info.has_cw:\n\r"
    "  Pointer to TPID profile options table.Needed for the internal L2 header\n\r"
    "  parsing. The profile table is configured via 'soc_ppd_llp_parse_tpid_value_set()'\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif pwe_add in_vc_label 0 lif_index 0 cos_profile 0\n\r"
    "  has_cw 0 orientation 0 trap_action_profile_id 0 trap_qualifier 0\n\r"
    "  val 0 type 0 isid 0 push_profile 0 label 0 command 0 dest_nick 0 is_multicast\n\r"
    "  0 type 0 dest_id 0 type 0 enable_learning 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0 vsid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(5)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },
  { 
    SOC_PARAM_PPD_L2_LIF_PWE_ADD_PWE_ADD_PWE_INFO_USE_IN_LIF_ID, 
    "use_in_lif", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pwe_info.use_lif:\n\r"
    "  In-lif is used, for hair-pin filter and learning\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif pwe_add in_vc_label 0 lif_index 0 cos_profile 0\n\r"
    "  tpid_profile_index 0 orientation 0 trap_action_profile_id 0 trap_qualifier 0\n\r"
    "  val 0 type 0 isid 0 push_profile 0 label 0 command 0 dest_nick 0 is_multicast\n\r"
    "  0 type 0 dest_id 0 type 0 enable_learning 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0 vsid 0\n\r"
	"  protection_pass_val 0 default_frwrd_profile 0 oam_instance 0 vsi_assignment_mode 0 use_in_lif 0"
#endif 
    "",
    "",
    {0, 0, 0, BIT(5)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
   },
   { 
    SOC_PARAM_PPD_L2_LIF_PWE_ADD_PWE_ADD_PWE_INFO_VSI_ASSIGNMENT_MODE_ID, 
    "vsi_assignment_mode", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pwe_info.vsi_assignment_mode:\n\r"
    "  Used to refine above VSI value\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif pwe_add in_vc_label 0 lif_index 0 cos_profile 0\n\r"
    "  tpid_profile_index 0 orientation 0 trap_action_profile_id 0 trap_qualifier 0\n\r"
    "  val 0 type 0 isid 0 push_profile 0 label 0 command 0 dest_nick 0 is_multicast\n\r"
    "  0 type 0 dest_id 0 type 0 enable_learning 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0 vsid 0\n\r"
	"  vsi_assignment_mode 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(5)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
   },
   { 
    SOC_PARAM_PPD_L2_LIF_PWE_ADD_PWE_ADD_PWE_INFO_LIF_PROFILE_ID, 
    "lif_profile", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pwe_info.lif_profile:\n\r"
    "  Used for OAM and PMF setting\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif pwe_add in_vc_label 0 lif_index 0 cos_profile 0\n\r"
    "  tpid_profile_index 0 orientation 0 trap_action_profile_id 0 trap_qualifier 0\n\r"
    "  val 0 type 0 isid 0 push_profile 0 label 0 command 0 dest_nick 0 is_multicast\n\r"
    "  0 type 0 dest_id 0 type 0 enable_learning 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0 vsid 0\n\r"
	"  vsi_assignment_mode 0 lif_profile 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(5)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
   },        
   { 
    SOC_PARAM_PPD_L2_LIF_PWE_ADD_PWE_ADD_PWE_INFO_OAM_INSTANCE_ID, 
    "oam_instance", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pwe_info.oam_instance:\n\r"
    "  OAM instance to observe as failover id\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif pwe_add in_vc_label 0 lif_index 0 cos_profile 0\n\r"
    "  tpid_profile_index 0 orientation 0 trap_action_profile_id 0 trap_qualifier 0\n\r"
    "  val 0 type 0 isid 0 push_profile 0 label 0 command 0 dest_nick 0 is_multicast\n\r"
    "  0 type 0 dest_id 0 type 0 enable_learning 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0 vsid 0\n\r"
	"  vsi_assignment_mode 0 lif_profile 0 oam_instance 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(5)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
   },        
   { 
    SOC_PARAM_PPD_L2_LIF_PWE_ADD_PWE_ADD_PWE_INFO_TERMINATION_PROFILE_ID, 
    "termination_profile", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pwe_info.termination_profile:\n\r"
    "  Indicates how to process the terminated mpls-header\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif pwe_add in_vc_label 0 lif_index 0 cos_profile 0\n\r"
    "  tpid_profile_index 0 orientation 0 trap_action_profile_id 0 trap_qualifier 0\n\r"
    "  val 0 type 0 isid 0 push_profile 0 label 0 command 0 dest_nick 0 is_multicast\n\r"
    "  0 type 0 dest_id 0 type 0 enable_learning 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0 vsid 0\n\r"
	"  vsi_assignment_mode 0 lif_profile 0 oam_instance 0 termination_profile 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(5)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
   },        
   { 
    SOC_PARAM_PPD_L2_LIF_PWE_ADD_PWE_ADD_PWE_INFO_ACTION_PROFILE_ID, 
    "action_profile", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pwe_info.action_profile:\n\r"
    "  Used to set trap action for label\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif pwe_add in_vc_label 0 lif_index 0 cos_profile 0\n\r"
    "  tpid_profile_index 0 orientation 0 trap_action_profile_id 0 trap_qualifier 0\n\r"
    "  val 0 type 0 isid 0 push_profile 0 label 0 command 0 dest_nick 0 is_multicast\n\r"
    "  0 type 0 dest_id 0 type 0 enable_learning 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0 vsid 0\n\r"
	"  vsi_assignment_mode 0 lif_profile 0 oam_instance 0 termination_profile 0\n\r"
	"  action_profile 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(5)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
   },
   { 
    SOC_PARAM_PPD_L2_LIF_PWE_ADD_PWE_ADD_PWE_INFO_DEFAULT_FRWRD_PROFILE_ID, 
    "default_frwrd_profile", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pwe_info.default_frwrd_profile:\n\r"
    "  Forwarding decision to apply when there is no hit in the MAC table\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif pwe_add in_vc_label 0 lif_index 0 cos_profile 0\n\r"
    "  tpid_profile_index 0 orientation 0 trap_action_profile_id 0 trap_qualifier 0\n\r"
    "  val 0 type 0 isid 0 push_profile 0 label 0 command 0 dest_nick 0 is_multicast\n\r"
    "  0 type 0 dest_id 0 type 0 enable_learning 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0 vsid 0\n\r"
	"  vsi_assignment_mode 0 lif_profile 0 oam_instance 0 termination_profile 0\n\r"
	"  action_profile 0 default_frwrd_profile 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(5)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
   },                
   { 
    SOC_PARAM_PPD_L2_LIF_PWE_ADD_PWE_ADD_PWE_INFO_PROTECTION_PASS_VAL_ID, 
    "protection_pass_val", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pwe_info.protection_pass_val:\n\r"
    "  OAM instance pass value.\n\r"
	"  If oam_instance_id.value != oam_instance_pass_val\n\r"
	"  then packet is dropped otherwise packet is forwarded\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif pwe_add in_vc_label 0 lif_index 0 cos_profile 0\n\r"
    "  tpid_profile_index 0 orientation 0 trap_action_profile_id 0 trap_qualifier 0\n\r"
    "  val 0 type 0 isid 0 push_profile 0 label 0 command 0 dest_nick 0 is_multicast\n\r"
    "  0 type 0 dest_id 0 type 0 enable_learning 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0 vsid 0\n\r"
	"  vsi_assignment_mode 0 lif_profile 0 oam_instance 0 termination_profile 0\n\r"
	"  action_profile 0 default_frwrd_profile 0 protection_pass_val 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(5)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
   },
   { 
    SOC_PARAM_PPD_L2_LIF_PWE_ADD_PWE_ADD_PWE_INFO_MODEL_ID, 
    "model", 
    (PARAM_VAL_RULES *)&SOC_PPD_SAND_PP_MPLS_TUNNEL_MODEL_rule[0], 
    (sizeof(SOC_PPD_SAND_PP_MPLS_TUNNEL_MODEL_rule) / sizeof(SOC_PPD_SAND_PP_MPLS_TUNNEL_MODEL_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pwe_info.model:\n\r"
    "  Tunnel model (Pipe or uniform)\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif pwe_add in_vc_label 0 lif_index 0 cos_profile 0\n\r"
    "  tpid_profile_index 0 orientation 0 trap_action_profile_id 0 trap_qualifier 0\n\r"
    "  val 0 type 0 isid 0 push_profile 0 label 0 command 0 dest_nick 0 is_multicast\n\r"
    "  0 type 0 dest_id 0 type 0 enable_learning 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0 vsid 0\n\r"
	"  vsi_assignment_mode 0 lif_profile 0 oam_instance 0 termination_profile 0\n\r"
	"  action_profile 0 default_frwrd_profile 0 protection_pass_val 0 model 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(5)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },                                
  { 
    SOC_PARAM_PPD_L2_LIF_PWE_ADD_PWE_ADD_PWE_INFO_ORIENTATION_ID, 
    "orientation", 
    (PARAM_VAL_RULES *)&SOC_PPD_SAND_PP_HUB_SPOKE_ORIENTATION_rule[0], 
    (sizeof(SOC_PPD_SAND_PP_HUB_SPOKE_ORIENTATION_rule) / sizeof(SOC_PPD_SAND_PP_HUB_SPOKE_ORIENTATION_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pwe_info.orientation:\n\r"
    "  Hub/Spoke: Orientation HUB.1. H-VPLS support: Split Horizon filter is not\n\r"
    "  activated when the packet origination is Spoke and the destination is HUB,\n\r"
    "  nor the other way around.2. VSI Default forwarding: The VSI default\n\r"
    "  forwarding, upon unknown MAC DA, is different for HUB LIF and Spoke LIF.\n\r"
    "  Useful for H-VPLS, E-TREE and E-LINE services\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif pwe_add in_vc_label 0 lif_index 0 cos_profile 0\n\r"
    "  tpid_profile_index 0 orientation 0 trap_action_profile_id 0 trap_qualifier 0\n\r"
    "  val 0 type 0 isid 0 push_profile 0 label 0 command 0 dest_nick 0 is_multicast\n\r"
    "  0 type 0 dest_id 0 type 0 enable_learning 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0 vsid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(5)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_L2_LIF_PWE_ADD_PWE_ADD_PWE_INFO_LEARN_INFO_ENABLE_LEARNING_ID, 
    "learn_enable_learning", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pwe_info.learn_info.enable_learning:\n\r"
    "  When enabled, packets arriving with this PWE are dynamically learned\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif pwe_add in_vc_label 0 lif_index 0 cos_profile 0\n\r"
    "  tpid_profile_index 0 orientation 0 trap_action_profile_id 0 trap_qualifier 0\n\r"
    "  val 0 type 0 isid 0 push_profile 0 label 0 command 0 dest_nick 0 is_multicast\n\r"
    "  0 type 0 dest_id 0 type 0 enable_learning 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0 vsid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(5)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_DECISION_FD_TRAP_CODE_ID, 
    "fd_trap_code", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals/*SOC_PPC_TRAP_CODE_rule*/[0], 
    (sizeof(soc_ppd_api_free_vals/*SOC_PPC_TRAP_CODE_rule*/) / sizeof(soc_ppd_api_free_vals/*SOC_PPC_TRAP_CODE_rule*/[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pwe_info.default_frwrd.default_forwarding.additional_info.trap_info.trap_acti\n\r"
    "  n_profile_id:\n\r"
    "  Trapping action profile ID.Range: 0-15.Points to a database that holds\n\r"
    "  trapping options. The profile ID selects the CPU to handle the trap; The CPU\n\r"
    "  port ID; the priority of the message; etc.The TRAP action profile is\n\r"
    "  configured via soc_ppd_trap_mgmt_frwrd_profile_info_set()\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif pwe_add in_vc_label 0 lif_index 0 cos_profile 0\n\r"
    "  tpid_profile_index 0 orientation 0 trap_action_profile_id 0 trap_qualifier 0\n\r"
    "  val 0 type 0 isid 0 push_profile 0 label 0 command 0 dest_nick 0 is_multicast\n\r"
    "  0 type 0 dest_id 0 type 0 enable_learning 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0 vsid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(5)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_DECISION_FD_FWD_STRENGTH_ID, 
    "fd_frwrd_strength", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pwe_info.default_frwrd.default_forwarding.additional_info.trap_info.trap_qual\n\r"
    "  fier:\n\r"
    "  Trap qualifier to be associated with the packet to identify the trap. Range:\n\r"
    "  0-4K.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif pwe_add in_vc_label 0 lif_index 0 cos_profile 0\n\r"
    "  tpid_profile_index 0 orientation 0 trap_action_profile_id 0 trap_qualifier 0\n\r"
    "  val 0 type 0 isid 0 push_profile 0 label 0 command 0 dest_nick 0 is_multicast\n\r"
    "  0 type 0 dest_id 0 type 0 enable_learning 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0 vsid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(5)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_DECISION_FD_SNOOP_STRENGTH_ID,
    "fd_snp_strength", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pwe_info.default_frwrd.default_forwarding.additional_info.outlif.val:\n\r"
    "  Out-LIF value, according to type. May be AC / EEP / VSI\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif pwe_add in_vc_label 0 lif_index 0 cos_profile 0\n\r"
    "  tpid_profile_index 0 orientation 0 trap_action_profile_id 0 trap_qualifier 0\n\r"
    "  val 0 type 0 isid 0 push_profile 0 label 0 command 0 dest_nick 0 is_multicast\n\r"
    "  0 type 0 dest_id 0 type 0 enable_learning 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0 vsid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(5)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_DECISION_FD_AC_ID,
    "fd_ac_id", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pwe_info.default_frwrd.default_forwarding.additional_info.outlif.val:\n\r"
    "  Out-LIF value, according to type. May be AC / EEP / VSI\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif pwe_add in_vc_label 0 lif_index 0 cos_profile 0\n\r"
    "  tpid_profile_index 0 orientation 0 trap_action_profile_id 0 trap_qualifier 0\n\r"
    "  val 0 type 0 isid 0 push_profile 0 label 0 command 0 dest_nick 0 is_multicast\n\r"
    "  0 type 0 dest_id 0 type 0 enable_learning 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0 vsid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(5)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_DECISION_FD_EEP_NDX_ID,
    "fd_eep_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pwe_info.default_frwrd.default_forwarding.additional_info.outlif.val:\n\r"
    "  Out-LIF value, according to type. May be AC / EEP / VSI\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif pwe_add in_vc_label 0 lif_index 0 cos_profile 0\n\r"
    "  tpid_profile_index 0 orientation 0 trap_action_profile_id 0 trap_qualifier 0\n\r"
    "  val 0 type 0 isid 0 push_profile 0 label 0 command 0 dest_nick 0 is_multicast\n\r"
    "  0 type 0 dest_id 0 type 0 enable_learning 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0 vsid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(5)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_DECISION_FD_PUSH_PROFILE_ID, 
    "fd_push_profile", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pwe_info.default_frwrd.default_forwarding.additional_info.eei.val.mpls_comman\n\r"
    "  .push_profile:\n\r"
    "  If the command is push, this is the push profile used to construct the\n\r"
    "  label's TTL and EXP.Otherwise, this field is ignored.Range: 0 - 7.EEI may\n\r"
    "  include the MPLS command, but then the command cannot be Push with\n\r"
    "  push_profile 0. See SOC_PPC_EEI.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif pwe_add in_vc_label 0 lif_index 0 cos_profile 0\n\r"
    "  tpid_profile_index 0 orientation 0 trap_action_profile_id 0 trap_qualifier 0\n\r"
    "  val 0 type 0 isid 0 push_profile 0 label 0 command 0 dest_nick 0 is_multicast\n\r"
    "  0 type 0 dest_id 0 type 0 enable_learning 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0 vsid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(5)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_DECISION_FD_LABEL_ID, 
    "fd_label", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pwe_info.default_frwrd.default_forwarding.additional_info.eei.val.mpls_comman\n\r"
    "  .label:\n\r"
    "  Label. Relevant if the command is push or swap.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif pwe_add in_vc_label 0 lif_index 0 cos_profile 0\n\r"
    "  tpid_profile_index 0 orientation 0 trap_action_profile_id 0 trap_qualifier 0\n\r"
    "  val 0 type 0 isid 0 push_profile 0 label 0 command 0 dest_nick 0 is_multicast\n\r"
    "  0 type 0 dest_id 0 type 0 enable_learning 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0 vsid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(5)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_DECISION_FD_IS_LAG_ID, 
    "fd_is_lag", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pwe_info.default_frwrd.default_forwarding.additional_info.eei.val.trill_dest.\n\r"
    "  s_multicast:\n\r"
    "  Is the TRILL packet is sent as multicast (flooded in the Distribution Tree)\n\r"
    "  or sent as Unicast to Egress Nick.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif pwe_add in_vc_label 0 lif_index 0 cos_profile 0\n\r"
    "  tpid_profile_index 0 orientation 0 trap_action_profile_id 0 trap_qualifier 0\n\r"
    "  val 0 type 0 isid 0 push_profile 0 label 0 command 0 dest_nick 0 is_multicast\n\r"
    "  0 type 0 dest_id 0 type 0 enable_learning 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0 vsid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(5)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_DECISION_FD_DEST_ID, 
    "fd_dest_id", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pwe_info.default_frwrd.default_forwarding.dest_id:\n\r"
    "  Destination ID, according to type.Multicast: MIDFEC:\n\r"
    "  FEC IDTrap:\n\r"
    "  IgnoredDrop:\n\r"
    "  IgnoredUnicast:\n\r"
    "  System port. When LAG, the user should\n\r"
    "  use SOC_PPD_LAG_ID(lag-id). When system\n\r"
    "  port is with allocated QoS resources the\n\r"
    "  user should use\n\r"
    "  SOC_PPD_DIRECT_FLOW_ID(flow-id)\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif pwe_add in_vc_label 0 lif_index 0 cos_profile 0\n\r"
    "  tpid_profile_index 0 orientation 0 trap_action_profile_id 0 trap_qualifier 0\n\r"
    "  val 0 type 0 isid 0 push_profile 0 label 0 command 0 dest_nick 0 is_multicast\n\r"
    "  0 type 0 dest_id 0 type 0 enable_learning 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0 vsid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(5)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_DECISION_FD_TYPE_ID, 
    "fd_type",
    (PARAM_VAL_RULES *)&SOC_PPD_FRWRD_DECISION_MACRO_TYPE_rule[0], 
    (sizeof(SOC_PPD_FRWRD_DECISION_MACRO_TYPE_rule) / sizeof(SOC_PPD_FRWRD_DECISION_MACRO_TYPE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pwe_info.default_frwrd.default_forwarding.type:\n\r"
    "  Forwarding decision type:Unicast without FEC; Multicast without FEC; FEC;\n\r"
    "  Drop or Trap\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif pwe_add in_vc_label 0 lif_index 0 cos_profile 0\n\r"
    "  tpid_profile_index 0 orientation 0 trap_action_profile_id 0 trap_qualifier 0\n\r"
    "  val 0 type 0 isid 0 push_profile 0 label 0 command 0 dest_nick 0 is_multicast\n\r"
    "  0 type 0 dest_id 0 type 0 enable_learning 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0 vsid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(5)}, 
    6, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_L2_LIF_PWE_ADD_PWE_ADD_PWE_INFO_DEFAULT_FRWRD_DEFAULT_FRWD_TYPE_ID, 
    "frwrd_type", 
    (PARAM_VAL_RULES *)&SOC_PPC_L2_LIF_DFLT_FRWRD_SRC_rule[0], 
    (sizeof(SOC_PPC_L2_LIF_DFLT_FRWRD_SRC_rule) / sizeof(SOC_PPC_L2_LIF_DFLT_FRWRD_SRC_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pwe_info.default_frwrd.default_frwrd_type:\n\r"
    "  LIF: Use the following fields in case of unknown MAC destination.VSI: Use VSI\n\r"
    "  default forwarding in case of unknown MAC destination.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif pwe_add in_vc_label 0 lif_index 0 cos_profile 0\n\r"
    "  tpid_profile_index 0 orientation 0 trap_action_profile_id 0 trap_qualifier 0\n\r"
    "  val 0 type 0 isid 0 push_profile 0 label 0 command 0 dest_nick 0 is_multicast\n\r"
    "  0 type 0 dest_id 0 type 0 enable_learning 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0 vsid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(5)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_L2_LIF_PWE_ADD_PWE_ADD_PWE_INFO_VSID_ID, 
    "vsid", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pwe_info.vsid:\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif pwe_add in_vc_label 0 lif_index 0 cos_profile 0\n\r"
    "  tpid_profile_index 0 orientation 0 trap_action_profile_id 0 trap_qualifier 0\n\r"
    "  val 0 type 0 isid 0 push_profile 0 label 0 command 0 dest_nick 0 is_multicast\n\r"
    "  0 type 0 dest_id 0 type 0 enable_learning 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0 vsid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(5)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_L2_LIF_PWE_GET_PWE_GET_ID, 
    "pwe_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Get PWE attributes and the LIF-index according to in_vc_label.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif pwe_get in_vc_label 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(6)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_L2_LIF_PWE_GET_PWE_GET_IN_VC_LABEL_ID, 
    "in_vc_label", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  in_vc_label:\n\r"
    "  The In MPLS label that attached to the PWE  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif pwe_get in_vc_label 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(6)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_L2_LIF_PWE_REMOVE_PWE_REMOVE_ID, 
    "pwe_remove", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Remvoe the in-VC-label\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif pwe_remove in_vc_label 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(7)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_L2_LIF_PWE_REMOVE_PWE_REMOVE_IN_VC_LABEL_ID, 
    "in_vc_label", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  in_vc_label:\n\r"
    "  The In MPLS label that attached to the PWE  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif pwe_remove in_vc_label 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(7)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_L2_LIF_VLAN_COMPRESSION_ADD_VLAN_COMPRESSION_ADD_ID, 
    "vlan_compression_add", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Enable VLAN compression when adding Attachment Circuits. Enables defining an\n\r"
    "  AC according to VLAN domain and a range of VLANs, and not only according to\n\r"
    "  port*VLAN\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif vlan_compression_add last_vid 0 first_vid 0 is_outer 0 vlan_domain\n\r"
    "  0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(8)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_L2_LIF_VLAN_COMPRESSION_ADD_VLAN_COMPRESSION_ADD_VLAN_RANGE_KEY_LAST_VID_ID, 
    "last_vid", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  vlan_range_key.last_vid:\n\r"
    "  Last VID in the range.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif vlan_compression_add last_vid 0 first_vid 0 is_outer 0 vlan_domain\n\r"
    "  0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(8)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_L2_LIF_VLAN_COMPRESSION_ADD_VLAN_COMPRESSION_ADD_VLAN_RANGE_KEY_FIRST_VID_ID, 
    "first_vid", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  vlan_range_key.first_vid:\n\r"
    "  First VID in the range.When AC is added, with this VID, the AC is defined for\n\r"
    "  all the VLAN in the range.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif vlan_compression_add last_vid 0 first_vid 0 is_outer 0 vlan_domain\n\r"
    "  0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(8)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_L2_LIF_VLAN_COMPRESSION_ADD_VLAN_COMPRESSION_ADD_VLAN_RANGE_KEY_IS_OUTER_ID, 
    "is_outer", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  vlan_range_key.is_outer:\n\r"
    "  Outer-Vlan tag range or Inner-Vlan tag range. There are different ranges for Outer-Vlan and for Inner-Vlan.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif vlan_compression_add last_vid 0 first_vid 0 is_outer 0 local_port_ndx 0\n\r"
    "  0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(8)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_L2_LIF_VLAN_COMPRESSION_ADD_VLAN_COMPRESSION_ADD_VLAN_RANGE_KEY_LOCAL_PORT_NDX_ID, 
    "local_port_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  vlan_range_key.local_port_ndx:\n\r"
    "  Local inner-port ID\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif vlan_compression_add last_vid 0 first_vid 0 is_outer 0 vlan_domain\n\r"
    "  0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(8)}, 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_L2_LIF_VLAN_COMPRESSION_REMOVE_VLAN_COMPRESSION_REMOVE_ID, 
    "vlan_compression_remove", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Remove a VLAN range from the compressed VLAN ranges database\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif vlan_compression_remove last_vid 0 first_vid 0 is_outer 0\n\r"
    "  local_port_ndx 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(9)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_L2_LIF_VLAN_COMPRESSION_REMOVE_VLAN_COMPRESSION_REMOVE_VLAN_RANGE_KEY_LAST_VID_ID, 
    "last_vid", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  vlan_range_key.last_vid:\n\r"
    "  Last VID in the range.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif vlan_compression_remove last_vid 0 first_vid 0 is_outer 0\n\r"
    "  local_port_ndx 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(9)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_L2_LIF_VLAN_COMPRESSION_REMOVE_VLAN_COMPRESSION_REMOVE_VLAN_RANGE_KEY_FIRST_VID_ID, 
    "first_vid", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  vlan_range_key.first_vid:\n\r"
    "  First VID in the range.When AC is added, with this VID, the AC is defined for\n\r"
    "  all the VLAN in the range.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif vlan_compression_remove last_vid 0 first_vid 0 is_outer 0\n\r"
    "  local_port_ndx 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(9)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_L2_LIF_VLAN_COMPRESSION_REMOVE_VLAN_COMPRESSION_REMOVE_VLAN_RANGE_KEY_IS_OUTER_ID, 
    "is_outer", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(SOC_PPD_SAND_PP_VLAN_TAG_TYPE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  vlan_range_key.is_outer:\n\r"
    "  Outer-Vlan tag range or Inner-Vlan tag range. There are different ranges for Outer-Vlan and for Inner-Vlan.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif vlan_compression_remove last_vid 0 first_vid 0 is_outer 0\n\r"
    "  local_port_ndx 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(9)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_L2_LIF_VLAN_COMPRESSION_REMOVE_VLAN_COMPRESSION_REMOVE_VLAN_RANGE_KEY_LOCAL_PORT_NDX_ID, 
    "local_port_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  vlan_range_key.local_port_ndx:\n\r"
    "  Local inner-port ID\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif vlan_compression_remove last_vid 0 first_vid 0 is_outer 0\n\r"
    "  local_port_ndx 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(9)}, 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_L2_LIF_AC_MAP_KEY_SET_AC_MAP_KEY_SET_ID, 
    "ac_map_key_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Sets the packets attributes (in-port, VIDs) to consider when associating an\n\r"
    "  incoming packet to in-AC.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif ac_map_key_set port_profile_ndx 0 vlan_format_ndx 0 ac_map_key 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, BIT(7)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_L2_LIF_AC_MAP_KEY_SET_AC_MAP_KEY_SET_PORT_PROFILE_NDX_ID, 
    "port_profile_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  port_profile_ndx:\n\r"
    "  Port Profile ID. Range 0 - 7.   \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif ac_map_key_set port_profile_ndx 0 vlan_format_ndx 0 ac_map_key 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, BIT(7)}, 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_L2_LIF_AC_MAP_KEY_SET_AC_MAP_KEY_SET_VLAN_FORMAT_OUTER_TPID_NDX_ID, 
    "outer_tpid", 
    (PARAM_VAL_RULES *)&SOC_PPC_LLP_PARSE_TPID_INDEX_rule[0], 
    (sizeof(SOC_PPC_LLP_PARSE_TPID_INDEX_rule) / sizeof(SOC_PPC_LLP_PARSE_TPID_INDEX_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  vlan_format_ndx:\n\r"
    "  frame types (S-tag, double Tags etc.).  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif ac_map_key_set port_profile_ndx 0 vlan_format_ndx 0 ac_map_key 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, BIT(7)}, 
    4, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_L2_LIF_AC_MAP_KEY_SET_AC_MAP_KEY_SET_VLAN_FORMAT_INNER_TPID_NDX_ID, 
    "inner_tpid", 
    (PARAM_VAL_RULES *)&SOC_PPC_LLP_PARSE_TPID_INDEX_rule[0], 
    (sizeof(SOC_PPC_LLP_PARSE_TPID_INDEX_rule) / sizeof(SOC_PPC_LLP_PARSE_TPID_INDEX_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  vlan_format_ndx:\n\r"
    "  frame types (S-tag, double Tags etc.).  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif ac_map_key_set port_profile_ndx 0 vlan_format_ndx 0 ac_map_key 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, BIT(7)}, 
    5, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_L2_LIF_AC_MAP_KEY_SET_AC_MAP_KEY_SET_VLAN_FORMAT_IS_OUTER_PRIO_NDX_ID, 
    "is_outer_prio", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  vlan_format_ndx:\n\r"
    "  frame types (S-tag, double Tags etc.).  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif ac_map_key_set port_profile_ndx 0 vlan_format_ndx 0 ac_map_key 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, BIT(7)}, 
    6, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_L2_LIF_AC_MAP_KEY_SET_AC_MAP_KEY_SET_AC_MAP_KEY_ID, 
    "ac_map_key", 
    (PARAM_VAL_RULES *)&SOC_PPC_L2_LIF_AC_MAP_KEY_TYPE_rule[0], 
    (sizeof(SOC_PPC_L2_LIF_AC_MAP_KEY_TYPE_rule) / sizeof(SOC_PPC_L2_LIF_AC_MAP_KEY_TYPE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  ac_map_key:\n\r"
    "  AC map key, can be any of the following:- port- port x Vlan (outer)- port x\n\r"
    "  Vlan x Vlan\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif ac_map_key_set port_profile_ndx 0 vlan_format_ndx 0 ac_map_key 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, BIT(7)}, 
    7, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_L2_LIF_AC_MAP_KEY_GET_AC_MAP_KEY_GET_ID, 
    "ac_map_key_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Sets the packets attributes (in-port, VIDs) to consider when associating an\n\r"
    "  incoming packet to in-AC.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif ac_map_key_get port_profile_ndx 0 vlan_format_ndx 0 ac_map_key 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, BIT(8)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_L2_LIF_AC_MAP_KEY_GET_AC_MAP_KEY_GET_PORT_PROFILE_NDX_ID, 
    "port_profile_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  port_profile_ndx:\n\r"
    "  Port Profile ID. Range 0 - 7.   \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif ac_map_key_get port_profile_ndx 0 vlan_format_ndx 0 ac_map_key 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, BIT(8)}, 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_L2_LIF_AC_MAP_KEY_GET_AC_MAP_KEY_GET_VLAN_FORMAT_OUTER_TPID_NDX_ID, 
    "outer_tpid", 
    (PARAM_VAL_RULES *)&SOC_PPC_LLP_PARSE_TPID_INDEX_rule[0], 
    (sizeof(SOC_PPC_LLP_PARSE_TPID_INDEX_rule) / sizeof(SOC_PPC_LLP_PARSE_TPID_INDEX_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  vlan_format_ndx:\n\r"
    "  frame types (S-tag, double Tags etc.).  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif ac_map_key_get port_profile_ndx 0 vlan_format_ndx 0 ac_map_key 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, BIT(8)}, 
    4, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_L2_LIF_AC_MAP_KEY_GET_AC_MAP_KEY_GET_VLAN_FORMAT_INNER_TPID_NDX_ID, 
    "inner_tpid", 
    (PARAM_VAL_RULES *)&SOC_PPC_LLP_PARSE_TPID_INDEX_rule[0], 
    (sizeof(SOC_PPC_LLP_PARSE_TPID_INDEX_rule) / sizeof(SOC_PPC_LLP_PARSE_TPID_INDEX_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  vlan_format_ndx:\n\r"
    "  frame types (S-tag, double Tags etc.).  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif ac_map_key_get port_profile_ndx 0 vlan_format_ndx 0 ac_map_key 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, BIT(8)}, 
    5, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_L2_LIF_AC_MAP_KEY_GET_AC_MAP_KEY_GET_VLAN_FORMAT_IS_OUTER_PRIO_NDX_ID, 
    "is_outer_prio", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  vlan_format_ndx:\n\r"
    "  frame types (S-tag, double Tags etc.).  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif ac_map_key_get port_profile_ndx 0 vlan_format_ndx 0 ac_map_key 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, BIT(8)}, 
    6, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },
  { 
    SOC_PARAM_PPD_T20E_L2_LIF_AC_MAP_KEY_SET_AC_MAP_KEY_SET_ID, 
    "t20e_ac_map_key_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Sets the packets attributes (in-port, VIDs) to consider when associating an\n\r"
    "  incoming packet to in-AC.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif ac_map_key_set port_profile_ndx 0 vlan_format_ndx 0 ac_map_key 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(10)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_T20E_L2_LIF_AC_MAP_KEY_SET_AC_MAP_KEY_SET_PORT_PROFILE_NDX_ID, 
    "port_profile_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  port_profile_ndx:\n\r"
    "  Port Profile ID. Range 0 - 7.   \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif ac_map_key_set port_profile_ndx 0 vlan_format_ndx 0 ac_map_key 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(10)}, 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_T20E_L2_LIF_AC_MAP_KEY_SET_AC_MAP_KEY_SET_VLAN_FORMAT_NDX_ID, 
    "vlan_format_ndx", 
    (PARAM_VAL_RULES *)&SOC_PPD_SAND_PP_ETHERNET_FRAME_VLAN_FORMAT_rule[0], 
    (sizeof(SOC_PPD_SAND_PP_ETHERNET_FRAME_VLAN_FORMAT_rule) / sizeof(SOC_PPD_SAND_PP_ETHERNET_FRAME_VLAN_FORMAT_rule[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  vlan_format_ndx:\n\r"
    "  frame types (S-tag, double Tags etc.).  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif ac_map_key_set port_profile_ndx 0 vlan_format_ndx 0 ac_map_key 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(10)}, 
    4, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_T20E_L2_LIF_AC_MAP_KEY_SET_AC_MAP_KEY_SET_AC_MAP_KEY_ID, 
    "ac_map_key", 
    (PARAM_VAL_RULES *)&SOC_PPC_L2_LIF_AC_MAP_KEY_TYPE_rule[0], 
    (sizeof(SOC_PPC_L2_LIF_AC_MAP_KEY_TYPE_rule) / sizeof(SOC_PPC_L2_LIF_AC_MAP_KEY_TYPE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  ac_map_key:\n\r"
    "  AC map key, can be any of the following:- port- port x Vlan (outer)- port x\n\r"
    "  Vlan x Vlan\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif ac_map_key_set port_profile_ndx 0 vlan_format_ndx 0 ac_map_key 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(10)}, 
    5, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_T20E_L2_LIF_AC_MAP_KEY_GET_AC_MAP_KEY_GET_ID, 
    "t20e_ac_map_key_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Sets the packets attributes (in-port, VIDs) to consider when associating an\n\r"
    "  incoming packet to in-AC.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif ac_map_key_get port_profile_ndx 0 vlan_format_ndx 0 ac_map_key 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(11)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_T20E_L2_LIF_AC_MAP_KEY_GET_AC_MAP_KEY_GET_PORT_PROFILE_NDX_ID, 
    "port_profile_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  port_profile_ndx:\n\r"
    "  Port Profile ID. Range 0 - 7.   \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif ac_map_key_get port_profile_ndx 0 vlan_format_ndx 0 ac_map_key 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(11)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_T20E_L2_LIF_AC_MAP_KEY_GET_AC_MAP_KEY_GET_VLAN_FORMAT_NDX_ID, 
    "vlan_format_ndx", 
    (PARAM_VAL_RULES *)&SOC_PPD_SAND_PP_ETHERNET_FRAME_VLAN_FORMAT_rule[0], 
    (sizeof(SOC_PPD_SAND_PP_ETHERNET_FRAME_VLAN_FORMAT_rule) / sizeof(SOC_PPD_SAND_PP_ETHERNET_FRAME_VLAN_FORMAT_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  vlan_format_ndx:\n\r"
    "  frame types (S-tag, double Tags etc.).  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif ac_map_key_get port_profile_ndx 0 vlan_format_ndx 0 ac_map_key 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(11)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_L2_LIF_AC_MP_INFO_SET_AC_MP_INFO_SET_ID, 
    "ac_mp_info_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  This function is used to define a Maintenance Point (MP) on an incoming\n\r"
    "  Attachment-Circuit (port x VLAN x VLAN) and MD-level, and to determine the\n\r"
    "  action to perform. If the MP is one of the 4K accelerated MEPs, the function\n\r"
    "  configures the related OAMP databases and associates the AC and MD-Level with\n\r"
    "  a user-provided handle. This handle is later used by user to access OAMP\n\r"
    "  database for this MEP.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif ac_mp_info_set lif_ndx 0 is_valid 0 mp_level 0\n\r"
#endif 
    "",
    "",
    {BIT(24)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_L2_LIF_AC_MP_INFO_SET_AC_MP_INFO_SET_LIF_NDX_ID, 
    "lif_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  lif_ndx:\n\r"
    "  LIF table index	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif ac_mp_info_set lif_ndx 0 is_valid 0 mp_level 0\n\r"
#endif 
    "",
    "",
    {BIT(24)}, 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_L2_LIF_AC_MP_INFO_SET_AC_MP_INFO_SET_INFO_IS_VALID_ID, 
    "is_valid", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  info.is_valid:\n\r"
    "  If True, then enable MP for this ACF.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif ac_mp_info_set lif_ndx 0 is_valid 0 mp_level 0\n\r"
#endif 
    "",
    "",
    {BIT(24)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_L2_LIF_AC_MP_INFO_SET_AC_MP_INFO_SET_INFO_MP_LEVEL_ID, 
    "mp_level", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  info.mp_level:\n\r"
    "  The level of the MEP. Range: 0 - 7.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif ac_mp_info_set lif_ndx 0 is_valid 0 mp_level 0\n\r"
#endif 
    "",
    "",
    {BIT(24)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_L2_LIF_AC_MP_INFO_GET_AC_MP_INFO_GET_ID, 
    "ac_mp_info_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  This function is used to define a Maintenance Point (MP) on an incoming\n\r"
    "  Attachment-Circuit (port x VLAN x VLAN) and MD-level, and to determine the\n\r"
    "  action to perform. If the MP is one of the 4K accelerated MEPs, the function\n\r"
    "  configures the related OAMP databases and associates the AC and MD-Level with\n\r"
    "  a user-provided handle. This handle is later used by user to access OAMP\n\r"
    "  database for this MEP.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif ac_mp_info_get lif_ndx 0\n\r"
#endif 
    "",
    "",
    {BIT(25)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_L2_LIF_AC_MP_INFO_GET_AC_MP_INFO_GET_LIF_NDX_ID, 
    "lif_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  lif_ndx:\n\r"
    "  LIF table index	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif ac_mp_info_get lif_ndx 0\n\r"
#endif 
    "",
    "",
    {BIT(25)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_L2_LIF_AC_ADD_AC_ADD_ID, 
    "ac_add", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Enable an Attachment Circuit, and set the AC attributes. Bind the ac-key to\n\r"
    "  the LIF, and set the LIF attributes\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif ac_add inner_vid 0 outer_vid 0 vlan_domain 0 lif_index 0\n\r"
    "  cos_profile 0 orientation 0 trap_action_profile_id 0 trap_qualifier 0 val 0\n\r"
    "  type 0 isid 0 push_profile 0 label 0 command 0 dest_nick 0 is_multicast 0\n\r"
    "  type 0 dest_id 0 type 0 default_frwrd_type 0 pcp_dei 0 edit_pcp_profile 0 vid\n\r"
    "  0 ing_vlan_edit_profile 0 tm_destination 0 is_learn_ac 0 enable_learning 0\n\r"
    "  vsid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(12)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_L2_LIF_AC_ADD_AC_ADD_AC_KEY_RAW_KEY_ID, 
    "raw_key", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  ac_key.raw_key:\n\r"
    "  Raw key consider when the 'key_type' is raw\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif ac_add raw_key 0 inner_vid 0 outer_vid 0 vlan_domain 0 key_type 0\n\r"
    "  lif_index 0 l2cp_profile 0 cos_profile 0 orientation 0 snoop_action_strength\n\r"
    "  0 frwrd_action_strength 0 trap_code_lsb 0 val 0 type 0 isid 0 push_profile 0\n\r"
    "  label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0\n\r"
    "  default_frwd_type 0 edit_pcp_profile 0 vid 0 ing_vlan_edit_profile 0\n\r"
    "  snoop_action_strength 0 frwrd_action_strength 0 trap_code_lsb 0 val 0 type 0\n\r"
    "  isid 0 push_profile 0 label 0 command 0 dest_nick 0 is_multicast 0 type 0\n\r"
    "  dest_id 0 type 0 learn_type 0 vsid 0 service_type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(12)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_L2_LIF_AC_ADD_AC_ADD_AC_KEY_INNER_VID_ID, 
    "key_inner_vid", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  ac_key.inner_vid:\n\r"
    "  Inner VID. Should be 'SOC_PPC_LIF_IGNORE_INNER_VID' when the vlan_domain\n\r"
    "  refers to ports that do not support VSI according to 2 VIDs\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif ac_add inner_vid 0 outer_vid 0 vlan_domain 0 lif_index 0\n\r"
    "  cos_profile 0 orientation 0 trap_action_profile_id 0 trap_qualifier 0 val 0\n\r"
    "  type 0 isid 0 push_profile 0 label 0 command 0 dest_nick 0 is_multicast 0\n\r"
    "  type 0 dest_id 0 type 0 default_frwrd_type 0 pcp_dei 0 edit_pcp_profile 0 vid\n\r"
    "  0 ing_vlan_edit_profile 0 tm_destination 0 is_learn_ac 0 enable_learning 0\n\r"
    "  vsid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(12)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_L2_LIF_AC_ADD_AC_ADD_AC_KEY_OUTER_VID_ID, 
    "key_outer_vid", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  ac_key.outer_vid:\n\r"
    "  Outer VID. Set to SOC_PPC_LIF_IGNORE_OUTER_VID in order to ignore outer_VID, then\n\r"
    "  also the inner VID will be ignored and the AC is set according to vlan_domain\n\r"
    "  only.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif ac_add inner_vid 0 outer_vid 0 vlan_domain 0 lif_index 0\n\r"
    "  cos_profile 0 orientation 0 trap_action_profile_id 0 trap_qualifier 0 val 0\n\r"
    "  type 0 isid 0 push_profile 0 label 0 command 0 dest_nick 0 is_multicast 0\n\r"
    "  type 0 dest_id 0 type 0 default_frwrd_type 0 pcp_dei 0 edit_pcp_profile 0 vid\n\r"
    "  0 ing_vlan_edit_profile 0 tm_destination 0 is_learn_ac 0 enable_learning 0\n\r"
    "  vsid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(12)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_L2_LIF_AC_ADD_AC_ADD_AC_KEY_VLAN_DOMAIN_ID, 
    "key_vlan_domain", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  ac_key.vlan_domain:\n\r"
    "  VLAN Domain ID.The VLAN domain is either a port, or a group of ports, that\n\r"
    "  share the same VLAN IDs space\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif ac_add inner_vid 0 outer_vid 0 vlan_domain 0 lif_index 0\n\r"
    "  cos_profile 0 orientation 0 trap_action_profile_id 0 trap_qualifier 0 val 0\n\r"
    "  type 0 isid 0 push_profile 0 label 0 command 0 dest_nick 0 is_multicast 0\n\r"
    "  type 0 dest_id 0 type 0 default_frwrd_type 0 pcp_dei 0 edit_pcp_profile 0 vid\n\r"
    "  0 ing_vlan_edit_profile 0 tm_destination 0 is_learn_ac 0 enable_learning 0\n\r"
    "  vsid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(12)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_L2_LIF_AC_ADD_AC_ADD_AC_KEY_PCP_ID, 
    "key_outer_pcp", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  ac_key.outer_pcp:\n\r"
    "  Outer PCP. Must be set in case key type includes PCP.\n\r"
    "  Invalid for Petra-B\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif ac_add inner_vid 0 outer_vid 0 vlan_domain 0 lif_index 0\n\r"
    "  cos_profile 0 orientation 0 trap_action_profile_id 0 trap_qualifier 0 val 0\n\r"
    "  type 0 isid 0 push_profile 0 label 0 command 0 dest_nick 0 is_multicast 0\n\r"
    "  type 0 dest_id 0 type 0 default_frwrd_type 0 pcp_dei 0 edit_pcp_profile 0 vid\n\r"
    "  0 ing_vlan_edit_profile 0 tm_destination 0 is_learn_ac 0 enable_learning 0\n\r"
    "  vsid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(12)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },
  { 
    SOC_PARAM_PPD_L2_LIF_AC_ADD_AC_ADD_AC_KEY_TUNNEL_ID, 
    "key_tunnel", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  ac_key.tunnel:\n\r"
    "  Tunnel ID.\n\r"
    "  Invalid for Petra-B\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif ac_add inner_vid 0 outer_vid 0 vlan_domain 0 lif_index 0\n\r"
    "  cos_profile 0 orientation 0 trap_action_profile_id 0 trap_qualifier 0 val 0\n\r"
    "  type 0 isid 0 push_profile 0 label 0 command 0 dest_nick 0 is_multicast 0\n\r"
    "  type 0 dest_id 0 type 0 default_frwrd_type 0 pcp_dei 0 edit_pcp_profile 0 vid\n\r"
    "  0 ing_vlan_edit_profile 0 tm_destination 0 is_learn_ac 0 enable_learning 0\n\r"
    "  vsid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(12)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },
  { 
    SOC_PARAM_PPD_L2_LIF_AC_ADD_AC_ADD_AC_KEY_KEY_TYPE_ID, 
    "key_type", 
    (PARAM_VAL_RULES *)&SOC_PPC_L2_LIF_AC_MAP_KEY_TYPE_rule[0], 
    (sizeof(SOC_PPC_L2_LIF_AC_MAP_KEY_TYPE_rule) / sizeof(SOC_PPC_L2_LIF_AC_MAP_KEY_TYPE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  ac_key.key_type:\n\r"
    "  Key type. Determines which attributes of the packet to consider when\n\r"
    "  associate the packet with AC-ID.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif ac_add raw_key 0 inner_vid 0 outer_vid 0 vlan_domain 0 key_type 0\n\r"
    "  lif_index 0 l2cp_profile 0 cos_profile 0 orientation 0 snoop_action_strength\n\r"
    "  0 frwrd_action_strength 0 trap_code_lsb 0 val 0 type 0 isid 0 push_profile 0\n\r"
    "  label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0\n\r"
    "  default_frwd_type 0 edit_pcp_profile 0 vid 0 ing_vlan_edit_profile 0\n\r"
    "  snoop_action_strength 0 frwrd_action_strength 0 trap_code_lsb 0 val 0 type 0\n\r"
    "  isid 0 push_profile 0 label 0 command 0 dest_nick 0 is_multicast 0 type 0\n\r"
    "  dest_id 0 type 0 learn_type 0 vsid 0 service_type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(12)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_L2_LIF_AC_ADD_AC_ADD_NOF_REPS_ID, 
    "nof_reps", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  lif_index:\n\r"
    "  Logical Interfaces table index.The LIF index is also the AC ID, that the\n\r"
    "  packet is learnt with.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif ac_add inner_vid 0 outer_vid 0 vlan_domain 0 lif_index 0\n\r"
    "  cos_profile 0 orientation 0 trap_action_profile_id 0 trap_qualifier 0 val 0\n\r"
    "  type 0 isid 0 push_profile 0 label 0 command 0 dest_nick 0 is_multicast 0\n\r"
    "  type 0 dest_id 0 type 0 default_frwrd_type 0 pcp_dei 0 edit_pcp_profile 0 vid\n\r"
    "  0 ing_vlan_edit_profile 0 tm_destination 0 is_learn_ac 0 enable_learning 0\n\r"
    "  vsid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(12)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_L2_LIF_AC_ADD_AC_ADD_LIF_INDEX_ID, 
    "lif_index", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  lif_index:\n\r"
    "  Logical Interfaces table index.The LIF index is also the AC ID, that the\n\r"
    "  packet is learnt with.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif ac_add inner_vid 0 outer_vid 0 vlan_domain 0 lif_index 0\n\r"
    "  cos_profile 0 orientation 0 trap_action_profile_id 0 trap_qualifier 0 val 0\n\r"
    "  type 0 isid 0 push_profile 0 label 0 command 0 dest_nick 0 is_multicast 0\n\r"
    "  type 0 dest_id 0 type 0 default_frwrd_type 0 pcp_dei 0 edit_pcp_profile 0 vid\n\r"
    "  0 ing_vlan_edit_profile 0 tm_destination 0 is_learn_ac 0 enable_learning 0\n\r"
    "  vsid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(12)}, 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_L2_LIF_AC_ADD_AC_ADD_AC_INFO_COS_PROFILE_ID, 
    "cos_profile", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  ac_info.cos_profile:\n\r"
    "  Class of Service mapping profile\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif ac_add inner_vid 0 outer_vid 0 vlan_domain 0 lif_index 0\n\r"
    "  cos_profile 0 orientation 0 trap_action_profile_id 0 trap_qualifier 0 val 0\n\r"
    "  type 0 isid 0 push_profile 0 label 0 command 0 dest_nick 0 is_multicast 0\n\r"
    "  type 0 dest_id 0 type 0 default_frwrd_type 0 pcp_dei 0 edit_pcp_profile 0 vid\n\r"
    "  0 ing_vlan_edit_profile 0 tm_destination 0 is_learn_ac 0 enable_learning 0\n\r"
    "  vsid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(12)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_L2_LIF_AC_ADD_AC_ADD_AC_INFO_ORIENTATION_ID, 
    "orientation", 
    (PARAM_VAL_RULES *)&SOC_PPD_SAND_PP_HUB_SPOKE_ORIENTATION_rule[0], 
    (sizeof(SOC_PPD_SAND_PP_HUB_SPOKE_ORIENTATION_rule) / sizeof(SOC_PPD_SAND_PP_HUB_SPOKE_ORIENTATION_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  ac_info.orientation:\n\r"
    "  Hub/Spoke Orientation.Typically, ACs are Spokes.VSI default forwarding: The\n\r"
    "  VSI default forwarding, upon unknown MAC DA, is different for HUB LIF and\n\r"
    "  Spoke LIF. Useful for E-TREE and E-LINE services\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif ac_add inner_vid 0 outer_vid 0 vlan_domain 0 lif_index 0\n\r"
    "  cos_profile 0 orientation 0 trap_action_profile_id 0 trap_qualifier 0 val 0\n\r"
    "  type 0 isid 0 push_profile 0 label 0 command 0 dest_nick 0 is_multicast 0\n\r"
    "  type 0 dest_id 0 type 0 default_frwrd_type 0 pcp_dei 0 edit_pcp_profile 0 vid\n\r"
    "  0 ing_vlan_edit_profile 0 tm_destination 0 is_learn_ac 0 enable_learning 0\n\r"
    "  vsid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(12)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_L2_LIF_AC_ADD_AC_ADD_AC_INFO_L2CP_PROFILE_ID, 
    "l2cp_profile", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  ac_info.l2cp_profile:\n\r"
    "  Profile to control the trapping editing of Layer 2\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif ac_add inner_vid 0 outer_vid 0 vlan_domain 0 lif_index 0\n\r"
    "  cos_profile 0 orientation 0 trap_action_profile_id 0 trap_qualifier 0 val 0\n\r"
    "  type 0 isid 0 push_profile 0 label 0 command 0 dest_nick 0 is_multicast 0\n\r"
    "  type 0 dest_id 0 type 0 default_frwrd_type 0 pcp_dei 0 edit_pcp_profile 0 vid\n\r"
    "  0 ing_vlan_edit_profile 0 tm_destination 0 is_learn_ac 0 enable_learning 0\n\r"
    "  vsid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(12)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_DECISION_FD_TRAP_CODE_ID, 
    "fd_trap_code", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals/*SOC_PPC_TRAP_CODE_rule*/[0], 
    (sizeof(soc_ppd_api_free_vals/*SOC_PPC_TRAP_CODE_rule*/) / sizeof(soc_ppd_api_free_vals/*SOC_PPC_TRAP_CODE_rule*/[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  ac_info.default_frwrd.default_forwarding.additional_info.trap_info.trap_actio\n\r"
    "  _profile_id:\n\r"
    "  Trapping action profile ID.Range: 0-15.Points to a database that holds\n\r"
    "  trapping options. The profile ID selects the CPU to handle the trap; The CPU\n\r"
    "  port ID; the priority of the message; etc.The TRAP action profile is\n\r"
    "  configured via soc_ppd_trap_mgmt_frwrd_profile_info_set()\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif ac_add inner_vid 0 outer_vid 0 vlan_domain 0 lif_index 0\n\r"
    "  cos_profile 0 orientation 0 trap_action_profile_id 0 trap_qualifier 0 val 0\n\r"
    "  type 0 isid 0 push_profile 0 label 0 command 0 dest_nick 0 is_multicast 0\n\r"
    "  type 0 dest_id 0 type 0 default_frwrd_type 0 pcp_dei 0 edit_pcp_profile 0 vid\n\r"
    "  0 ing_vlan_edit_profile 0 tm_destination 0 is_learn_ac 0 enable_learning 0\n\r"
    "  vsid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(12)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_DECISION_FD_FWD_STRENGTH_ID, 
    "fd_frwrd_strength", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  ac_info.default_frwrd.default_forwarding.additional_info.trap_info.trap_quali\n\r"
    "  ier:\n\r"
    "  Trap qualifier to be associated with the packet to identify the trap. Range:\n\r"
    "  0-4K.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif ac_add inner_vid 0 outer_vid 0 vlan_domain 0 lif_index 0\n\r"
    "  cos_profile 0 orientation 0 trap_action_profile_id 0 trap_qualifier 0 val 0\n\r"
    "  type 0 isid 0 push_profile 0 label 0 command 0 dest_nick 0 is_multicast 0\n\r"
    "  type 0 dest_id 0 type 0 default_frwrd_type 0 pcp_dei 0 edit_pcp_profile 0 vid\n\r"
    "  0 ing_vlan_edit_profile 0 tm_destination 0 is_learn_ac 0 enable_learning 0\n\r"
    "  vsid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(12)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_DECISION_FD_SNOOP_STRENGTH_ID,
    "fd_snp_strength", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  ac_info.default_frwrd.default_forwarding.additional_info.outlif.val:\n\r"
    "  Out-LIF value, according to type. May be AC / EEP / VSI\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif ac_add inner_vid 0 outer_vid 0 vlan_domain 0 lif_index 0\n\r"
    "  cos_profile 0 orientation 0 trap_action_profile_id 0 trap_qualifier 0 val 0\n\r"
    "  type 0 isid 0 push_profile 0 label 0 command 0 dest_nick 0 is_multicast 0\n\r"
    "  type 0 dest_id 0 type 0 default_frwrd_type 0 pcp_dei 0 edit_pcp_profile 0 vid\n\r"
    "  0 ing_vlan_edit_profile 0 tm_destination 0 is_learn_ac 0 enable_learning 0\n\r"
    "  vsid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(12)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_DECISION_FD_AC_ID,
    "fd_ac_id", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  ac_info.default_frwrd.default_forwarding.additional_info.outlif.type:\n\r"
    "  Outgoing Logical interface type: Layer 2 or Layer 3\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif ac_add inner_vid 0 outer_vid 0 vlan_domain 0 lif_index 0\n\r"
    "  cos_profile 0 orientation 0 trap_action_profile_id 0 trap_qualifier 0 val 0\n\r"
    "  type 0 isid 0 push_profile 0 label 0 command 0 dest_nick 0 is_multicast 0\n\r"
    "  type 0 dest_id 0 type 0 default_frwrd_type 0 pcp_dei 0 edit_pcp_profile 0 vid\n\r"
    "  0 ing_vlan_edit_profile 0 tm_destination 0 is_learn_ac 0 enable_learning 0\n\r"
    "  vsid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(12)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_DECISION_FD_EEP_NDX_ID,
    "fd_eep_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  ac_info.default_frwrd.default_forwarding.additional_info.eei.val.isid:\n\r"
    "  I-SID to be encapsulated on packets from the customers toward the\n\r"
    "  backbone.Relevant when EEI type is MIM (MAC-in-MAC).\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif ac_add inner_vid 0 outer_vid 0 vlan_domain 0 lif_index 0\n\r"
    "  cos_profile 0 orientation 0 trap_action_profile_id 0 trap_qualifier 0 val 0\n\r"
    "  type 0 isid 0 push_profile 0 label 0 command 0 dest_nick 0 is_multicast 0\n\r"
    "  type 0 dest_id 0 type 0 default_frwrd_type 0 pcp_dei 0 edit_pcp_profile 0 vid\n\r"
    "  0 ing_vlan_edit_profile 0 tm_destination 0 is_learn_ac 0 enable_learning 0\n\r"
    "  vsid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(12)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_DECISION_FD_ISID_ID,
    "fd_isid_id", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  ac_info.default_frwrd.default_forwarding.additional_info.eei.val.isid:\n\r"
    "  I-SID to be encapsulated on packets from the customers toward the\n\r"
    "  backbone.Relevant when EEI type is MIM (MAC-in-MAC).\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif ac_add inner_vid 0 outer_vid 0 vlan_domain 0 lif_index 0\n\r"
    "  cos_profile 0 orientation 0 trap_action_profile_id 0 trap_qualifier 0 val 0\n\r"
    "  type 0 isid 0 push_profile 0 label 0 command 0 dest_nick 0 is_multicast 0\n\r"
    "  type 0 dest_id 0 type 0 default_frwrd_type 0 pcp_dei 0 edit_pcp_profile 0 vid\n\r"
    "  0 ing_vlan_edit_profile 0 tm_destination 0 is_learn_ac 0 enable_learning 0\n\r"
    "  vsid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(12)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_DECISION_FD_PUSH_PROFILE_ID, 
    "fd_push_profile", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  ac_info.default_frwrd.default_forwarding.additional_info.eei.val.mpls_command\n\r"
    "  push_profile:\n\r"
    "  If the command is push, this is the push profile used to construct the\n\r"
    "  label's TTL and EXP.Otherwise, this field is ignored.Range: 0 - 7.EEI may\n\r"
    "  include the MPLS command, but then the command cannot be Push with\n\r"
    "  push_profile 0. See SOC_PPC_EEI.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif ac_add inner_vid 0 outer_vid 0 vlan_domain 0 lif_index 0\n\r"
    "  cos_profile 0 orientation 0 trap_action_profile_id 0 trap_qualifier 0 val 0\n\r"
    "  type 0 isid 0 push_profile 0 label 0 command 0 dest_nick 0 is_multicast 0\n\r"
    "  type 0 dest_id 0 type 0 default_frwrd_type 0 pcp_dei 0 edit_pcp_profile 0 vid\n\r"
    "  0 ing_vlan_edit_profile 0 tm_destination 0 is_learn_ac 0 enable_learning 0\n\r"
    "  vsid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(12)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_DECISION_FD_LABEL_ID, 
    "fd_label", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  ac_info.default_frwrd.default_forwarding.additional_info.eei.val.mpls_command\n\r"
    "  label:\n\r"
    "  Label. Relevant if the command is push or swap.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif ac_add inner_vid 0 outer_vid 0 vlan_domain 0 lif_index 0\n\r"
    "  cos_profile 0 orientation 0 trap_action_profile_id 0 trap_qualifier 0 val 0\n\r"
    "  type 0 isid 0 push_profile 0 label 0 command 0 dest_nick 0 is_multicast 0\n\r"
    "  type 0 dest_id 0 type 0 default_frwrd_type 0 pcp_dei 0 edit_pcp_profile 0 vid\n\r"
    "  0 ing_vlan_edit_profile 0 tm_destination 0 is_learn_ac 0 enable_learning 0\n\r"
    "  vsid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(12)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_DECISION_FD_IS_LAG_ID, 
    "fd_is_lag", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pwe_info.default_frwrd.default_forwarding.additional_info.eei.val.trill_dest.\n\r"
    "  s_multicast:\n\r"
    "  Is the TRILL packet is sent as multicast (flooded in the Distribution Tree)\n\r"
    "  or sent as Unicast to Egress Nick.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif pwe_add in_vc_label 0 lif_index 0 cos_profile 0\n\r"
    "  tpid_profile_index 0 orientation 0 trap_action_profile_id 0 trap_qualifier 0\n\r"
    "  val 0 type 0 isid 0 push_profile 0 label 0 command 0 dest_nick 0 is_multicast\n\r"
    "  0 type 0 dest_id 0 type 0 enable_learning 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0 vsid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(12)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_DECISION_FD_DEST_ID, 
    "fd_dest_id", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pwe_info.default_frwrd.default_forwarding.dest_id:\n\r"
    "  Destination ID, according to type.Multicast: MIDFEC:\n\r"
    "  FEC IDTrap:\n\r"
    "  IgnoredDrop:\n\r"
    "  IgnoredUnicast:\n\r"
    "  System port. When LAG, the user should\n\r"
    "  use SOC_PPD_LAG_ID(lag-id). When system\n\r"
    "  port is with allocated QoS resources the\n\r"
    "  user should use\n\r"
    "  SOC_PPD_DIRECT_FLOW_ID(flow-id)\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif pwe_add in_vc_label 0 lif_index 0 cos_profile 0\n\r"
    "  tpid_profile_index 0 orientation 0 trap_action_profile_id 0 trap_qualifier 0\n\r"
    "  val 0 type 0 isid 0 push_profile 0 label 0 command 0 dest_nick 0 is_multicast\n\r"
    "  0 type 0 dest_id 0 type 0 enable_learning 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0 vsid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(12)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_DECISION_FD_TYPE_ID, 
    "fd_type",
    (PARAM_VAL_RULES *)&SOC_PPD_FRWRD_DECISION_MACRO_TYPE_rule[0], 
    (sizeof(SOC_PPD_FRWRD_DECISION_MACRO_TYPE_rule) / sizeof(SOC_PPD_FRWRD_DECISION_MACRO_TYPE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pwe_info.default_frwrd.default_forwarding.type:\n\r"
    "  Forwarding decision type:Unicast without FEC; Multicast without FEC; FEC;\n\r"
    "  Drop or Trap\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif pwe_add in_vc_label 0 lif_index 0 cos_profile 0\n\r"
    "  tpid_profile_index 0 orientation 0 trap_action_profile_id 0 trap_qualifier 0\n\r"
    "  val 0 type 0 isid 0 push_profile 0 label 0 command 0 dest_nick 0 is_multicast\n\r"
    "  0 type 0 dest_id 0 type 0 enable_learning 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0 vsid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(12)}, 
    5, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },    
  { 
    SOC_PARAM_PPD_L2_LIF_AC_ADD_AC_ADD_AC_INFO_DEFAULT_FRWRD_DEFAULT_FRWD_TYPE_ID, 
    "frwrd_type", 
    (PARAM_VAL_RULES *)&SOC_PPC_L2_LIF_DFLT_FRWRD_SRC_rule[0], 
    (sizeof(SOC_PPC_L2_LIF_DFLT_FRWRD_SRC_rule) / sizeof(SOC_PPC_L2_LIF_DFLT_FRWRD_SRC_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  ac_info.default_frwrd.default_frwrd_type:\n\r"
    "  LIF: Use the following fields in case of unknown MAC destination.VSI: Use VSI\n\r"
    "  default forwarding in case of unknown MAC destination.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif ac_add inner_vid 0 outer_vid 0 vlan_domain 0 lif_index 0\n\r"
    "  cos_profile 0 orientation 0 trap_action_profile_id 0 trap_qualifier 0 val 0\n\r"
    "  type 0 isid 0 push_profile 0 label 0 command 0 dest_nick 0 is_multicast 0\n\r"
    "  type 0 dest_id 0 type 0 default_frwrd_type 0 pcp_dei 0 edit_pcp_profile 0 vid\n\r"
    "  0 ing_vlan_edit_profile 0 tm_destination 0 is_learn_ac 0 enable_learning 0\n\r"
    "  vsid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(12)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_L2_LIF_AC_ADD_AC_ADD_AC_INFO_ING_EDIT_INFO_PCP_DEI_ID, 
    "edit_info_pcp_dei", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  ac_info.ing_edit_info.pcp_dei:\n\r"
    "  Relevant only for T20E.PCP-DEI value to be used in building the VLAN tag in\n\r"
    "  ingress vlan editing. See\n\r"
    "  soc_ppd_lif_ing_vlan_edit_profile_to_pcp_profile_map_set(vlan-edit-profile,\n\r"
    "  pcp-profile,valid) .\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif ac_add inner_vid 0 outer_vid 0 vlan_domain 0 lif_index 0\n\r"
    "  cos_profile 0 orientation 0 trap_action_profile_id 0 trap_qualifier 0 val 0\n\r"
    "  type 0 isid 0 push_profile 0 label 0 command 0 dest_nick 0 is_multicast 0\n\r"
    "  type 0 dest_id 0 type 0 default_frwrd_type 0 pcp_dei 0 edit_pcp_profile 0 vid\n\r"
    "  0 ing_vlan_edit_profile 0 tm_destination 0 is_learn_ac 0 enable_learning 0\n\r"
    "  vsid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(12)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_L2_LIF_AC_ADD_AC_ADD_AC_INFO_ING_EDIT_INFO_EDIT_PCP_PROFILE_ID, 
    "edit_info_pcp_profile", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  ac_info.ing_edit_info.edit_pcp_profile:\n\r"
    "  PCP profile, used during ingress VLAN editing phase, to set the PCP/UP of the\n\r"
    "  edited VLAN headers.See soc_ppd_ing_vlan_edit_command_info_set (). Relevant only\n\r"
    "  for Petra-B. for T20E: has to be zero, use\n\r"
    "  soc_ppd_lif_ing_vlan_edit_profile_to_pcp_profile_map_set(vlan-edit-profile,\n\r"
    "  pcp-profile,valid) to set PCP profile\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif ac_add inner_vid 0 outer_vid 0 vlan_domain 0 lif_index 0\n\r"
    "  cos_profile 0 orientation 0 trap_action_profile_id 0 trap_qualifier 0 val 0\n\r"
    "  type 0 isid 0 push_profile 0 label 0 command 0 dest_nick 0 is_multicast 0\n\r"
    "  type 0 dest_id 0 type 0 default_frwrd_type 0 pcp_dei 0 edit_pcp_profile 0 vid\n\r"
    "  0 ing_vlan_edit_profile 0 tm_destination 0 is_learn_ac 0 enable_learning 0\n\r"
    "  vsid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(12)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_L2_LIF_AC_ADD_AC_ADD_AC_INFO_ING_EDIT_INFO_VID_ID, 
    "edit_info_vid", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  ac_info.ing_edit_info.vid:\n\r"
    "  Translated-VID\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif ac_add inner_vid 0 outer_vid 0 vlan_domain 0 lif_index 0\n\r"
    "  cos_profile 0 orientation 0 trap_action_profile_id 0 trap_qualifier 0 val 0\n\r"
    "  type 0 isid 0 push_profile 0 label 0 command 0 dest_nick 0 is_multicast 0\n\r"
    "  type 0 dest_id 0 type 0 default_frwrd_type 0 pcp_dei 0 edit_pcp_profile 0 vid\n\r"
    "  0 ing_vlan_edit_profile 0 tm_destination 0 is_learn_ac 0 enable_learning 0\n\r"
    "  vsid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(12)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_L2_LIF_AC_ADD_AC_ADD_AC_INFO_ING_EDIT_INFO_ING_VLAN_EDIT_PROFILE_ID, 
    "edit_info_ing_vlan_edit_profile", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  ac_info.ing_edit_info.ing_vlan_edit_profile:\n\r"
    "  Ingress-VLAN-Edit-Profile.Used together with the packet's tag structure to\n\r"
    "  set packet's Ingress VLAN Editing command to perform over the packet. see\n\r"
    "  soc_ppd_lif_ing_vlan_edit_command_info_set()Range: 0 - 7.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif ac_add inner_vid 0 outer_vid 0 vlan_domain 0 lif_index 0\n\r"
    "  cos_profile 0 orientation 0 trap_action_profile_id 0 trap_qualifier 0 val 0\n\r"
    "  type 0 isid 0 push_profile 0 label 0 command 0 dest_nick 0 is_multicast 0\n\r"
    "  type 0 dest_id 0 type 0 default_frwrd_type 0 pcp_dei 0 edit_pcp_profile 0 vid\n\r"
    "  0 ing_vlan_edit_profile 0 tm_destination 0 is_learn_ac 0 enable_learning 0\n\r"
    "  vsid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(12)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },
  { 
    SOC_PARAM_PPD_L2_LIF_AC_ADD_AC_ADD_AC_INFO_LEARN_INFO_LEARN_TYPE_ID, 
    "learn_type", 
    (PARAM_VAL_RULES *)&SOC_PPC_L2_LIF_AC_LEARN_TYPE_rule[0], 
    (sizeof(SOC_PPC_L2_LIF_AC_LEARN_TYPE_rule) / sizeof(SOC_PPC_L2_LIF_AC_LEARN_TYPE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  ac_info.learn_info.learn_type:\n\r"
    "  When enabled, packets arriving with this AC are dynamically learned\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif ac_add in_vc_label 0 lif_index 0 cos_profile 0\n\r"
    "  tpid_profile_index 0 orientation 0 trap_action_profile_id 0 trap_qualifier 0\n\r"
    "  val 0 type 0 isid 0 push_profile 0 label 0 command 0 dest_nick 0 is_multicast\n\r"
    "  0 type 0 dest_id 0 type 0 learn_type 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0 vsid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(12)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  

  { 
    SOC_PARAM_PPD_L2_LIF_AC_ADD_AC_ADD_AC_INFO_VSID_ID, 
    "vsid", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  ac_info.vsid:\n\r"
    "  Virtual Switch ID\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif ac_add inner_vid 0 outer_vid 0 vlan_domain 0 lif_index 0\n\r"
    "  cos_profile 0 orientation 0 trap_action_profile_id 0 trap_qualifier 0 val 0\n\r"
    "  type 0 isid 0 push_profile 0 label 0 command 0 dest_nick 0 is_multicast 0\n\r"
    "  type 0 dest_id 0 type 0 default_frwrd_type 0 pcp_dei 0 edit_pcp_profile 0 vid\n\r"
    "  0 ing_vlan_edit_profile 0 tm_destination 0 is_learn_ac 0 enable_learning 0\n\r"
    "  vsid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(12)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  }, 
  { 
    SOC_PARAM_PPD_L2_LIF_AC_ADD_AC_ADD_AC_INFO_SERVICE_TYPE_ID, 
    "service_type", 
    (PARAM_VAL_RULES *)&SOC_PPC_L2_LIF_AC_SERVICE_TYPE_rule[0], 
    (sizeof(SOC_PPC_L2_LIF_AC_SERVICE_TYPE_rule) / sizeof(SOC_PPC_L2_LIF_AC_SERVICE_TYPE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  ac_info.service_type:\n\r"
    "  AC service type. One of 4 service types. If the service type is P2P then use\n\r"
    "  VSI SOC_PPC_VSI_P2P_SERVICE.in T20E use T20E_VSI_P2P_SERVICE.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif ac_add inner_vid 0 outer_vid 0 vlan_domain 0 lif_index 0\n\r"
    "  l2cp_profile 0 cos_profile 0 orientation 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwd_type 0\n\r"
    "  edit_pcp_profile 0 vid 0 ing_vlan_edit_profile 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 learn_type 0 vsid 0\n\r"
    "  service_type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(12)}, 
    4, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_L2_LIF_AC_GET_AC_GET_ID, 
    "ac_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Get an Attachment Circuit, according to AC key.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif ac_get inner_vid 0 outer_vid 0 vlan_domain 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(13)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_L2_LIF_AC_GET_AC_GET_AC_KEY_RAW_KEY_ID, 
    "raw_key", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  ac_key.raw_key:\n\r"
    "  Raw key consider when the 'key_type' is raw\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif ac_get raw_key 0 inner_vid 0 outer_vid 0 vlan_domain 0 key_type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(13)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_L2_LIF_AC_GET_AC_GET_AC_KEY_INNER_VID_ID, 
    "inner_vid", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  ac_key.inner_vid:\n\r"
    "  Inner VID. Should be 'SOC_PPC_LIF_IGNORE_INNER_VID' when the vlan_domain\n\r"
    "  refers to ports that do not support VSI according to 2 VIDs\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif ac_get inner_vid 0 outer_vid 0 vlan_domain 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(13)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_L2_LIF_AC_GET_AC_GET_AC_KEY_OUTER_VID_ID, 
    "outer_vid", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  ac_key.outer_vid:\n\r"
    "  Outer VID. Set to SOC_PPC_LIF_IGNORE_OUTER_VID in order to ignore outer_VID, then\n\r"
    "  also the inner VID will be ignored and the AC is set according to vlan_domain\n\r"
    "  only.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif ac_get inner_vid 0 outer_vid 0 vlan_domain 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(13)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_L2_LIF_AC_GET_AC_GET_AC_KEY_VLAN_DOMAIN_ID, 
    "vlan_domain", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  ac_key.vlan_domain:\n\r"
    "  VLAN Domain ID.The VLAN domain is either a port, or a group of ports, that\n\r"
    "  share the same VLAN IDs space\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif ac_get inner_vid 0 outer_vid 0 vlan_domain 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(13)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_L2_LIF_AC_GET_AC_GET_AC_KEY_PCP_ID, 
    "outer_pcp", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  ac_key.outer_pcp:\n\r"
    "  Outer PCP. Must be set in case key type includes PCP.\n\r"
    "  Invalid for Petra-B\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif ac_get inner_vid 0 outer_vid 0 vlan_domain 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(13)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },
  { 
    SOC_PARAM_PPD_L2_LIF_AC_GET_AC_GET_AC_KEY_TUNNEL_ID, 
    "tunnel_id", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  ac_key.tunnel:\n\r"
    "  Tunnel ID. \n\r"
    "  Invalid for Petra-B\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif ac_get inner_vid 0 outer_vid 0 vlan_domain 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(13)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_L2_LIF_AC_GET_AC_GET_AC_KEY_KEY_TYPE_ID, 
    "key_type", 
    (PARAM_VAL_RULES *)&SOC_PPC_L2_LIF_AC_MAP_KEY_TYPE_rule[0], 
    (sizeof(SOC_PPC_L2_LIF_AC_MAP_KEY_TYPE_rule) / sizeof(SOC_PPC_L2_LIF_AC_MAP_KEY_TYPE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  ac_key.key_type:\n\r"
    "  Key type. Determines which attributes of the packet to consider when\n\r"
    "  associate the packet with AC-ID.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif ac_get raw_key 0 inner_vid 0 outer_vid 0 vlan_domain 0 key_type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(13)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_L2_LIF_AC_WITH_COS_ADD_AC_WITH_COS_ADD_ID, 
    "ac_with_cos_add", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Add Attachment Circuit (AC) group.Enable defining ACs, according to Quality\n\r"
    "  of Service attributes, on top of the usual port * VID [*VID] identification\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif ac_with_cos_add inner_vid 0 outer_vid 0 vlan_domain 0\n\r"
    "  base_lif_index 0 nof_lif_entries 0 opcode_id 0 acs_info_index 0 cos_profile 0\n\r"
    "  orientation 0 trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0\n\r"
    "  push_profile 0 label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0\n\r"
    "  type 0 default_frwrd_type 0 pcp_dei 0 edit_pcp_profile 0 vid 0\n\r"
    "  ing_vlan_edit_profile 0 tm_destination 0 is_learn_ac 0 enable_learning 0 vsid\n\r"
    "  0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(14)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_L2_LIF_AC_WITH_COS_ADD_AC_WITH_COS_ADD_AC_KEY_INNER_VID_ID, 
    "inner_vid", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  ac_key.inner_vid:\n\r"
    "  Inner VID. Should be 'SOC_PPC_LIF_IGNORE_INNER_VID' when the vlan_domain\n\r"
    "  refers to ports that do not support VSI according to 2 VIDs\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif ac_with_cos_add inner_vid 0 outer_vid 0 vlan_domain 0\n\r"
    "  base_lif_index 0 nof_lif_entries 0 opcode_id 0 acs_info_index 0 cos_profile 0\n\r"
    "  orientation 0 trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0\n\r"
    "  push_profile 0 label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0\n\r"
    "  type 0 default_frwrd_type 0 pcp_dei 0 edit_pcp_profile 0 vid 0\n\r"
    "  ing_vlan_edit_profile 0 tm_destination 0 is_learn_ac 0 enable_learning 0 vsid\n\r"
    "  0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(14)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_L2_LIF_AC_WITH_COS_ADD_AC_WITH_COS_ADD_AC_KEY_OUTER_VID_ID, 
    "outer_vid", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  ac_key.outer_vid:\n\r"
    "  Outer VID. Set to SOC_PPC_LIF_IGNORE_OUTER_VID in order to ignore outer_VID, then\n\r"
    "  also the inner VID will be ignored and the AC is set according to vlan_domain\n\r"
    "  only.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif ac_with_cos_add inner_vid 0 outer_vid 0 vlan_domain 0\n\r"
    "  base_lif_index 0 nof_lif_entries 0 opcode_id 0 acs_info_index 0 cos_profile 0\n\r"
    "  orientation 0 trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0\n\r"
    "  push_profile 0 label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0\n\r"
    "  type 0 default_frwrd_type 0 pcp_dei 0 edit_pcp_profile 0 vid 0\n\r"
    "  ing_vlan_edit_profile 0 tm_destination 0 is_learn_ac 0 enable_learning 0 vsid\n\r"
    "  0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(14)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_L2_LIF_AC_WITH_COS_ADD_AC_WITH_COS_ADD_AC_KEY_VLAN_DOMAIN_ID, 
    "vlan_domain", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  ac_key.vlan_domain:\n\r"
    "  VLAN Domain ID.The VLAN domain is either a port, or a group of ports, that\n\r"
    "  share the same VLAN IDs space\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif ac_with_cos_add inner_vid 0 outer_vid 0 vlan_domain 0\n\r"
    "  base_lif_index 0 nof_lif_entries 0 opcode_id 0 acs_info_index 0 cos_profile 0\n\r"
    "  orientation 0 trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0\n\r"
    "  push_profile 0 label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0\n\r"
    "  type 0 default_frwrd_type 0 pcp_dei 0 edit_pcp_profile 0 vid 0\n\r"
    "  ing_vlan_edit_profile 0 tm_destination 0 is_learn_ac 0 enable_learning 0 vsid\n\r"
    "  0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(14)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_L2_LIF_AC_WITH_COS_ADD_AC_WITH_COS_ADD_BASE_LIF_INDEX_ID, 
    "base_lif_index", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  base_lif_index:\n\r"
    "  Logical Interfaces table base index.The AC occupies entries base_lif_index to\n\r"
    "  (base_lif_index + ACs-group size - 1) in the Logical Interfaces table  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif ac_with_cos_add inner_vid 0 outer_vid 0 vlan_domain 0\n\r"
    "  base_lif_index 0 nof_lif_entries 0 opcode_id 0 acs_info_index 0 cos_profile 0\n\r"
    "  orientation 0 trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0\n\r"
    "  push_profile 0 label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0\n\r"
    "  type 0 default_frwrd_type 0 pcp_dei 0 edit_pcp_profile 0 vid 0\n\r"
    "  ing_vlan_edit_profile 0 tm_destination 0 is_learn_ac 0 enable_learning 0 vsid\n\r"
    "  0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(14)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_L2_LIF_AC_WITH_COS_ADD_AC_WITH_COS_ADD_ACS_GROUP_INFO_NOF_LIF_ENTRIES_ID, 
    "nof_lif_entries", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  acs_group_info.nof_lif_entries:\n\r"
    "  Number of ACs in the LIF table that mapped to the AC-Key.The driver validates\n\r"
    "  that 'nof_lif_entries' corresponds to 'opcode_id'.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif ac_with_cos_add inner_vid 0 outer_vid 0 vlan_domain 0\n\r"
    "  base_lif_index 0 nof_lif_entries 0 opcode_id 0 acs_info_index 0 cos_profile 0\n\r"
    "  orientation 0 trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0\n\r"
    "  push_profile 0 label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0\n\r"
    "  type 0 default_frwrd_type 0 pcp_dei 0 edit_pcp_profile 0 vid 0\n\r"
    "  ing_vlan_edit_profile 0 tm_destination 0 is_learn_ac 0 enable_learning 0 vsid\n\r"
    "  0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(14)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_L2_LIF_AC_WITH_COS_ADD_AC_WITH_COS_ADD_ACS_GROUP_INFO_OPCODE_ID_ID, 
    "opcode_id", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  acs_group_info.opcode_id:\n\r"
    "  Opcode ID.Range: 0-3Set the mapping between the QoS attributes and the LIF\n\r"
    "  table offset.The opcode determines the QoS attributes that affects the AC\n\r"
    "  identification, and the mapping of those attributes to AC Ids.Opcode ID '0'\n\r"
    "  is reserved to Non-QoS mapping\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif ac_with_cos_add inner_vid 0 outer_vid 0 vlan_domain 0\n\r"
    "  base_lif_index 0 nof_lif_entries 0 opcode_id 0 acs_info_index 0 cos_profile 0\n\r"
    "  orientation 0 trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0\n\r"
    "  push_profile 0 label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0\n\r"
    "  type 0 default_frwrd_type 0 pcp_dei 0 edit_pcp_profile 0 vid 0\n\r"
    "  ing_vlan_edit_profile 0 tm_destination 0 is_learn_ac 0 enable_learning 0 vsid\n\r"
    "  0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(14)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_L2_LIF_AC_WITH_COS_ADD_AC_WITH_COS_ADD_ACS_GROUP_INFO_ACS_INFO_SET, 
    "ac_with_cos_add_acs_info_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Add Attachment Circuit (AC) group.Enable defining ACs, according to Quality\n\r"
    "  of Service attributes, on top of the usual port * VID [*VID] identification\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif ac_with_cos_add inner_vid 0 outer_vid 0 vlan_domain 0\n\r"
    "  base_lif_index 0 nof_lif_entries 0 opcode_id 0 acs_info_index 0 cos_profile 0\n\r"
    "  orientation 0 trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0\n\r"
    "  push_profile 0 label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0\n\r"
    "  type 0 default_frwrd_type 0 pcp_dei 0 edit_pcp_profile 0 vid 0\n\r"
    "  ing_vlan_edit_profile 0 tm_destination 0 is_learn_ac 0 enable_learning 0 vsid\n\r"
    "  0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(20)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_L2_LIF_AC_WITH_COS_ADD_AC_WITH_COS_ADD_ACS_GROUP_INFO_ACS_INFO_INDEX_ID, 
    "acs_info_index", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  acs_info_index:\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif ac_with_cos_add inner_vid 0 outer_vid 0 vlan_domain 0\n\r"
    "  base_lif_index 0 nof_lif_entries 0 opcode_id 0 acs_info_index 0 cos_profile 0\n\r"
    "  orientation 0 trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0\n\r"
    "  push_profile 0 label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0\n\r"
    "  type 0 default_frwrd_type 0 pcp_dei 0 edit_pcp_profile 0 vid 0\n\r"
    "  ing_vlan_edit_profile 0 tm_destination 0 is_learn_ac 0 enable_learning 0 vsid\n\r"
    "  0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(20)}, 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_L2_LIF_AC_WITH_COS_ADD_AC_WITH_COS_ADD_ACS_GROUP_INFO_ACS_INFO_COS_PROFILE_ID, 
    "cos_profile", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  acs_group_info.acs_info[ prm_acs_info_index].cos_profile:\n\r"
    "  Class of Service mapping profile\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif ac_with_cos_add inner_vid 0 outer_vid 0 vlan_domain 0\n\r"
    "  base_lif_index 0 nof_lif_entries 0 opcode_id 0 acs_info_index 0 cos_profile 0\n\r"
    "  orientation 0 trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0\n\r"
    "  push_profile 0 label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0\n\r"
    "  type 0 default_frwrd_type 0 pcp_dei 0 edit_pcp_profile 0 vid 0\n\r"
    "  ing_vlan_edit_profile 0 tm_destination 0 is_learn_ac 0 enable_learning 0 vsid\n\r"
    "  0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(20)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_L2_LIF_AC_WITH_COS_ADD_AC_WITH_COS_ADD_ACS_GROUP_INFO_ACS_INFO_ORIENTATION_ID, 
    "orientation", 
    (PARAM_VAL_RULES *)&SOC_PPD_SAND_PP_HUB_SPOKE_ORIENTATION_rule[0], 
    (sizeof(SOC_PPD_SAND_PP_HUB_SPOKE_ORIENTATION_rule) / sizeof(SOC_PPD_SAND_PP_HUB_SPOKE_ORIENTATION_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  acs_group_info.acs_info[ prm_acs_info_index].orientation:\n\r"
    "  Hub/Spoke Orientation.Typically, ACs are Spokes.VSI default forwarding: The\n\r"
    "  VSI default forwarding, upon unknown MAC DA, is different for HUB LIF and\n\r"
    "  Spoke LIF. Useful for E-TREE and E-LINE services\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif ac_with_cos_add inner_vid 0 outer_vid 0 vlan_domain 0\n\r"
    "  base_lif_index 0 nof_lif_entries 0 opcode_id 0 acs_info_index 0 cos_profile 0\n\r"
    "  orientation 0 trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0\n\r"
    "  push_profile 0 label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0\n\r"
    "  type 0 default_frwrd_type 0 pcp_dei 0 edit_pcp_profile 0 vid 0\n\r"
    "  ing_vlan_edit_profile 0 tm_destination 0 is_learn_ac 0 enable_learning 0 vsid\n\r"
    "  0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(20)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_L2_LIF_AC_WITH_COS_ADD_AC_WITH_COS_ADD_ACS_GROUP_INFO_ACS_INFO_DEFAULT_FRWRD_DEFAULT_FRWD_TYPE_ID, 
    "frwrd_type", 
    (PARAM_VAL_RULES *)&SOC_PPC_L2_LIF_DFLT_FRWRD_SRC_rule[0], 
    (sizeof(SOC_PPC_L2_LIF_DFLT_FRWRD_SRC_rule) / sizeof(SOC_PPC_L2_LIF_DFLT_FRWRD_SRC_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  acs_group_info.acs_info[ prm_acs_info_index].default_frwrd.default_frwrd_type:\n\r"
    "  LIF: Use the following fields in case of unknown MAC destination.VSI: Use VSI\n\r"
    "  default forwarding in case of unknown MAC destination.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif ac_with_cos_add inner_vid 0 outer_vid 0 vlan_domain 0\n\r"
    "  base_lif_index 0 nof_lif_entries 0 opcode_id 0 acs_info_index 0 cos_profile 0\n\r"
    "  orientation 0 trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0\n\r"
    "  push_profile 0 label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0\n\r"
    "  type 0 default_frwrd_type 0 pcp_dei 0 edit_pcp_profile 0 vid 0\n\r"
    "  ing_vlan_edit_profile 0 tm_destination 0 is_learn_ac 0 enable_learning 0 vsid\n\r"
    "  0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(20)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_DECISION_FD_TRAP_CODE_ID, 
    "fd_trap_code", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals/*SOC_PPC_TRAP_CODE_rule*/[0], 
    (sizeof(soc_ppd_api_free_vals/*SOC_PPC_TRAP_CODE_rule*/) / sizeof(soc_ppd_api_free_vals/*SOC_PPC_TRAP_CODE_rule*/[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pwe_info.default_frwrd.default_forwarding.additional_info.trap_info.trap_acti\n\r"
    "  n_profile_id:\n\r"
    "  Trapping action profile ID.Range: 0-15.Points to a database that holds\n\r"
    "  trapping options. The profile ID selects the CPU to handle the trap; The CPU\n\r"
    "  port ID; the priority of the message; etc.The TRAP action profile is\n\r"
    "  configured via soc_ppd_trap_mgmt_frwrd_profile_info_set()\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif ac_with_cos_add inner_vid 0 outer_vid 0 vlan_domain 0\n\r"
    "  base_lif_index 0 nof_lif_entries 0 opcode_id 0 acs_info_index 0 cos_profile 0\n\r"
    "  orientation 0 trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0\n\r"
    "  push_profile 0 label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0\n\r"
    "  type 0 default_frwrd_type 0 pcp_dei 0 edit_pcp_profile 0 vid 0\n\r"
    "  ing_vlan_edit_profile 0 tm_destination 0 is_learn_ac 0 enable_learning 0 vsid\n\r"
    "  0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(20)},
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_DECISION_FD_FWD_STRENGTH_ID, 
    "fd_frwrd_strength", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pwe_info.default_frwrd.default_forwarding.additional_info.trap_info.trap_qual\n\r"
    "  fier:\n\r"
    "  Trap qualifier to be associated with the packet to identify the trap. Range:\n\r"
    "  0-4K.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif ac_with_cos_add inner_vid 0 outer_vid 0 vlan_domain 0\n\r"
    "  base_lif_index 0 nof_lif_entries 0 opcode_id 0 acs_info_index 0 cos_profile 0\n\r"
    "  orientation 0 trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0\n\r"
    "  push_profile 0 label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0\n\r"
    "  type 0 default_frwrd_type 0 pcp_dei 0 edit_pcp_profile 0 vid 0\n\r"
    "  ing_vlan_edit_profile 0 tm_destination 0 is_learn_ac 0 enable_learning 0 vsid\n\r"
    "  0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(20)},
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_DECISION_FD_SNOOP_STRENGTH_ID,
    "fd_snp_strength", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pwe_info.default_frwrd.default_forwarding.additional_info.outlif.val:\n\r"
    "  Out-LIF value, according to type. May be AC / EEP / VSI\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif ac_with_cos_add inner_vid 0 outer_vid 0 vlan_domain 0\n\r"
    "  base_lif_index 0 nof_lif_entries 0 opcode_id 0 acs_info_index 0 cos_profile 0\n\r"
    "  orientation 0 trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0\n\r"
    "  push_profile 0 label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0\n\r"
    "  type 0 default_frwrd_type 0 pcp_dei 0 edit_pcp_profile 0 vid 0\n\r"
    "  ing_vlan_edit_profile 0 tm_destination 0 is_learn_ac 0 enable_learning 0 vsid\n\r"
    "  0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(20)},
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_DECISION_FD_AC_ID,
    "fd_ac_id", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pwe_info.default_frwrd.default_forwarding.additional_info.outlif.val:\n\r"
    "  Out-LIF value, according to type. May be AC / EEP / VSI\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif ac_with_cos_add inner_vid 0 outer_vid 0 vlan_domain 0\n\r"
    "  base_lif_index 0 nof_lif_entries 0 opcode_id 0 acs_info_index 0 cos_profile 0\n\r"
    "  orientation 0 trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0\n\r"
    "  push_profile 0 label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0\n\r"
    "  type 0 default_frwrd_type 0 pcp_dei 0 edit_pcp_profile 0 vid 0\n\r"
    "  ing_vlan_edit_profile 0 tm_destination 0 is_learn_ac 0 enable_learning 0 vsid\n\r"
    "  0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(20)},
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_DECISION_FD_EEP_NDX_ID,
    "fd_eep_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pwe_info.default_frwrd.default_forwarding.additional_info.outlif.val:\n\r"
    "  Out-LIF value, according to type. May be AC / EEP / VSI\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif ac_with_cos_add inner_vid 0 outer_vid 0 vlan_domain 0\n\r"
    "  base_lif_index 0 nof_lif_entries 0 opcode_id 0 acs_info_index 0 cos_profile 0\n\r"
    "  orientation 0 trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0\n\r"
    "  push_profile 0 label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0\n\r"
    "  type 0 default_frwrd_type 0 pcp_dei 0 edit_pcp_profile 0 vid 0\n\r"
    "  ing_vlan_edit_profile 0 tm_destination 0 is_learn_ac 0 enable_learning 0 vsid\n\r"
    "  0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(20)},
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_DECISION_FD_PUSH_PROFILE_ID, 
    "fd_push_profile", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pwe_info.default_frwrd.default_forwarding.additional_info.eei.val.mpls_comman\n\r"
    "  .push_profile:\n\r"
    "  If the command is push, this is the push profile used to construct the\n\r"
    "  label's TTL and EXP.Otherwise, this field is ignored.Range: 0 - 7.EEI may\n\r"
    "  include the MPLS command, but then the command cannot be Push with\n\r"
    "  push_profile 0. See SOC_PPC_EEI.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif ac_with_cos_add inner_vid 0 outer_vid 0 vlan_domain 0\n\r"
    "  base_lif_index 0 nof_lif_entries 0 opcode_id 0 acs_info_index 0 cos_profile 0\n\r"
    "  orientation 0 trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0\n\r"
    "  push_profile 0 label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0\n\r"
    "  type 0 default_frwrd_type 0 pcp_dei 0 edit_pcp_profile 0 vid 0\n\r"
    "  ing_vlan_edit_profile 0 tm_destination 0 is_learn_ac 0 enable_learning 0 vsid\n\r"
    "  0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(20)},
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_DECISION_FD_LABEL_ID, 
    "fd_label", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pwe_info.default_frwrd.default_forwarding.additional_info.eei.val.mpls_comman\n\r"
    "  .label:\n\r"
    "  Label. Relevant if the command is push or swap.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif ac_with_cos_add inner_vid 0 outer_vid 0 vlan_domain 0\n\r"
    "  base_lif_index 0 nof_lif_entries 0 opcode_id 0 acs_info_index 0 cos_profile 0\n\r"
    "  orientation 0 trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0\n\r"
    "  push_profile 0 label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0\n\r"
    "  type 0 default_frwrd_type 0 pcp_dei 0 edit_pcp_profile 0 vid 0\n\r"
    "  ing_vlan_edit_profile 0 tm_destination 0 is_learn_ac 0 enable_learning 0 vsid\n\r"
    "  0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(20)},
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_DECISION_FD_IS_LAG_ID, 
    "fd_is_lag", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pwe_info.default_frwrd.default_forwarding.additional_info.eei.val.trill_dest.\n\r"
    "  s_multicast:\n\r"
    "  Is the TRILL packet is sent as multicast (flooded in the Distribution Tree)\n\r"
    "  or sent as Unicast to Egress Nick.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif ac_with_cos_add inner_vid 0 outer_vid 0 vlan_domain 0\n\r"
    "  base_lif_index 0 nof_lif_entries 0 opcode_id 0 acs_info_index 0 cos_profile 0\n\r"
    "  orientation 0 trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0\n\r"
    "  push_profile 0 label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0\n\r"
    "  type 0 default_frwrd_type 0 pcp_dei 0 edit_pcp_profile 0 vid 0\n\r"
    "  ing_vlan_edit_profile 0 tm_destination 0 is_learn_ac 0 enable_learning 0 vsid\n\r"
    "  0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(20)},
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_DECISION_FD_DEST_ID, 
    "fd_dest_id", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pwe_info.default_frwrd.default_forwarding.dest_id:\n\r"
    "  Destination ID, according to type.Multicast: MIDFEC:\n\r"
    "  FEC IDTrap:\n\r"
    "  IgnoredDrop:\n\r"
    "  IgnoredUnicast:\n\r"
    "  System port. When LAG, the user should\n\r"
    "  use SOC_PPD_LAG_ID(lag-id). When system\n\r"
    "  port is with allocated QoS resources the\n\r"
    "  user should use\n\r"
    "  SOC_PPD_DIRECT_FLOW_ID(flow-id)\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif ac_with_cos_add inner_vid 0 outer_vid 0 vlan_domain 0\n\r"
    "  base_lif_index 0 nof_lif_entries 0 opcode_id 0 acs_info_index 0 cos_profile 0\n\r"
    "  orientation 0 trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0\n\r"
    "  push_profile 0 label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0\n\r"
    "  type 0 default_frwrd_type 0 pcp_dei 0 edit_pcp_profile 0 vid 0\n\r"
    "  ing_vlan_edit_profile 0 tm_destination 0 is_learn_ac 0 enable_learning 0 vsid\n\r"
    "  0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(20)},
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_DECISION_FD_TYPE_ID, 
    "fd_type",
    (PARAM_VAL_RULES *)&SOC_PPD_FRWRD_DECISION_MACRO_TYPE_rule[0], 
    (sizeof(SOC_PPD_FRWRD_DECISION_MACRO_TYPE_rule) / sizeof(SOC_PPD_FRWRD_DECISION_MACRO_TYPE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pwe_info.default_frwrd.default_forwarding.type:\n\r"
    "  Forwarding decision type:Unicast without FEC; Multicast without FEC; FEC;\n\r"
    "  Drop or Trap\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif ac_with_cos_add inner_vid 0 outer_vid 0 vlan_domain 0\n\r"
    "  base_lif_index 0 nof_lif_entries 0 opcode_id 0 acs_info_index 0 cos_profile 0\n\r"
    "  orientation 0 trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0\n\r"
    "  push_profile 0 label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0\n\r"
    "  type 0 default_frwrd_type 0 pcp_dei 0 edit_pcp_profile 0 vid 0\n\r"
    "  ing_vlan_edit_profile 0 tm_destination 0 is_learn_ac 0 enable_learning 0 vsid\n\r"
    "  0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(20)},
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_L2_LIF_AC_WITH_COS_ADD_AC_WITH_COS_ADD_ACS_GROUP_INFO_ACS_INFO_ING_EDIT_INFO_PCP_DEI_ID, 
    "edit_pcp_dei", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  acs_group_info.acs_info[ prm_acs_info_index].ing_edit_info.pcp_dei:\n\r"
    "  Relevant only for T20E.PCP-DEI value to be used in building the VLAN tag in\n\r"
    "  ingress vlan editing. See\n\r"
    "  soc_ppd_lif_ing_vlan_edit_profile_to_pcp_profile_map_set(vlan-edit-profile,\n\r"
    "  pcp-profile,valid) .\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif ac_with_cos_add inner_vid 0 outer_vid 0 vlan_domain 0\n\r"
    "  base_lif_index 0 nof_lif_entries 0 opcode_id 0 acs_info_index 0 cos_profile 0\n\r"
    "  orientation 0 trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0\n\r"
    "  push_profile 0 label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0\n\r"
    "  type 0 default_frwrd_type 0 pcp_dei 0 edit_pcp_profile 0 vid 0\n\r"
    "  ing_vlan_edit_profile 0 tm_destination 0 is_learn_ac 0 enable_learning 0 vsid\n\r"
    "  0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(20)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_L2_LIF_AC_WITH_COS_ADD_AC_WITH_COS_ADD_ACS_GROUP_INFO_ACS_INFO_ING_EDIT_INFO_EDIT_PCP_PROFILE_ID, 
    "edit_pcp_profile", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  acs_group_info.acs_info[ prm_acs_info_index].ing_edit_info.edit_pcp_profile:\n\r"
    "  PCP profile, used during ingress VLAN editing phase, to set the PCP/UP of the\n\r"
    "  edited VLAN headers.See soc_ppd_ing_vlan_edit_command_info_set (). Relevant only\n\r"
    "  for Petra-B. for T20E: has to be zero, use\n\r"
    "  soc_ppd_lif_ing_vlan_edit_profile_to_pcp_profile_map_set(vlan-edit-profile,\n\r"
    "  pcp-profile,valid) to set PCP profile\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif ac_with_cos_add inner_vid 0 outer_vid 0 vlan_domain 0\n\r"
    "  base_lif_index 0 nof_lif_entries 0 opcode_id 0 acs_info_index 0 cos_profile 0\n\r"
    "  orientation 0 trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0\n\r"
    "  push_profile 0 label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0\n\r"
    "  type 0 default_frwrd_type 0 pcp_dei 0 edit_pcp_profile 0 vid 0\n\r"
    "  ing_vlan_edit_profile 0 tm_destination 0 is_learn_ac 0 enable_learning 0 vsid\n\r"
    "  0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(20)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_L2_LIF_AC_WITH_COS_ADD_AC_WITH_COS_ADD_ACS_GROUP_INFO_ACS_INFO_ING_EDIT_INFO_VID_ID, 
    "ing_vlan_edit_vid", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  acs_group_info.acs_info[ prm_acs_info_index].ing_edit_info.vid:\n\r"
    "  Translated-VID\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif ac_with_cos_add inner_vid 0 outer_vid 0 vlan_domain 0\n\r"
    "  base_lif_index 0 nof_lif_entries 0 opcode_id 0 acs_info_index 0 cos_profile 0\n\r"
    "  orientation 0 trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0\n\r"
    "  push_profile 0 label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0\n\r"
    "  type 0 default_frwrd_type 0 pcp_dei 0 edit_pcp_profile 0 vid 0\n\r"
    "  ing_vlan_edit_profile 0 tm_destination 0 is_learn_ac 0 enable_learning 0 vsid\n\r"
    "  0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(20)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_L2_LIF_AC_WITH_COS_ADD_AC_WITH_COS_ADD_ACS_GROUP_INFO_ACS_INFO_ING_EDIT_INFO_ING_VLAN_EDIT_PROFILE_ID, 
    "ing_vlan_edit_profile", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  acs_group_info.acs_info[\n\r"
    "  prm_acs_info_index].ing_edit_info.ing_vlan_edit_profile:\n\r"
    "  Ingress-VLAN-Edit-Profile.Used together with the packet's tag structure to\n\r"
    "  set packet's Ingress VLAN Editing command to perform over the packet. see\n\r"
    "  soc_ppd_lif_ing_vlan_edit_command_info_set()Range: 0 - 7.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif ac_with_cos_add inner_vid 0 outer_vid 0 vlan_domain 0\n\r"
    "  base_lif_index 0 nof_lif_entries 0 opcode_id 0 acs_info_index 0 cos_profile 0\n\r"
    "  orientation 0 trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0\n\r"
    "  push_profile 0 label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0\n\r"
    "  type 0 default_frwrd_type 0 pcp_dei 0 edit_pcp_profile 0 vid 0\n\r"
    "  ing_vlan_edit_profile 0 tm_destination 0 is_learn_ac 0 enable_learning 0 vsid\n\r"
    "  0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(20)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_L2_LIF_AC_WITH_COS_ADD_AC_WITH_COS_ADD_ACS_GROUP_INFO_ACS_INFO_LEARN_TYPE_ID, 
    "learn_type", 
    (PARAM_VAL_RULES *)&SOC_PPC_L2_LIF_AC_LEARN_TYPE_rule[0], 
    (sizeof(SOC_PPC_L2_LIF_AC_LEARN_TYPE_rule) / sizeof(SOC_PPC_L2_LIF_AC_LEARN_TYPE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  prm_acs_group_info.acs_info[ prm_acs_info_index].learn_info.learn_type:\n\r"
    "  When enabled, packets arriving with this AC are dynamically learned\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif ac_add in_vc_label 0 lif_index 0 cos_profile 0\n\r"
    "  tpid_profile_index 0 orientation 0 trap_action_profile_id 0 trap_qualifier 0\n\r"
    "  val 0 type 0 isid 0 push_profile 0 label 0 command 0 dest_nick 0 is_multicast\n\r"
    "  0 type 0 dest_id 0 type 0 learn_type 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0 vsid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(20)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_L2_LIF_AC_WITH_COS_ADD_AC_WITH_COS_ADD_ACS_GROUP_INFO_ACS_INFO_VSID_ID, 
    "vsid", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  acs_group_info.acs_info[ prm_acs_info_index].vsid:\n\r"
    "  Virtual Switch ID\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif ac_with_cos_add inner_vid 0 outer_vid 0 vlan_domain 0\n\r"
    "  base_lif_index 0 nof_lif_entries 0 opcode_id 0 acs_info_index 0 cos_profile 0\n\r"
    "  orientation 0 trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0\n\r"
    "  push_profile 0 label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0\n\r"
    "  type 0 default_frwrd_type 0 pcp_dei 0 edit_pcp_profile 0 vid 0\n\r"
    "  ing_vlan_edit_profile 0 tm_destination 0 is_learn_ac 0 enable_learning 0 vsid\n\r"
    "  0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(20)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_L2_LIF_AC_WITH_COS_ADD_AC_WITH_COS_ADD_ACS_GROUP_INFO_ACS_INFO_SERVICE_TYPE_ID, 
    "service_type", 
    (PARAM_VAL_RULES *)&SOC_PPC_L2_LIF_AC_SERVICE_TYPE_rule[0], 
    (sizeof(SOC_PPC_L2_LIF_AC_SERVICE_TYPE_rule) / sizeof(SOC_PPC_L2_LIF_AC_SERVICE_TYPE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  acs_group_info.acs_info[ prm_acs_info_index].service_type:\n\r"
    "  AC service type. One of 4 service types. If the service type is P2P then use\n\r"
    "  VSI SOC_PPC_VSI_P2P_SERVICE.in T20E use T20E_VSI_P2P_SERVICE.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif ac_with_cos_add inner_vid 0 outer_vid 0 vlan_domain 0\n\r"
    "  base_lif_index 0 nof_lif_entries 0 opcode_id 0 acs_info_index 0 l2cp_profile\n\r"
    "  0 cos_profile 0 orientation 0 trap_action_profile_id 0 trap_qualifier 0 val 0\n\r"
    "  type 0 isid 0 push_profile 0 label 0 command 0 dest_nick 0 is_multicast 0\n\r"
    "  type 0 dest_id 0 type 0 default_frwd_type 0 edit_pcp_profile 0 vid 0\n\r"
    "  ing_vlan_edit_profile 0 trap_action_profile_id 0 trap_qualifier 0 val 0 type\n\r"
    "  0 isid 0 push_profile 0 label 0 command 0 dest_nick 0 is_multicast 0 type 0\n\r"
    "  dest_id 0 type 0 learn_type 0 vsid 0 service_type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(20)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_L2_LIF_AC_WITH_COS_GET_AC_WITH_COS_GET_ID, 
    "ac_with_cos_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Get Attachment Circuit (AC) group attributes\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif ac_with_cos_get inner_vid 0 outer_vid 0 vlan_domain 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(15)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_L2_LIF_AC_WITH_COS_GET_AC_WITH_COS_GET_AC_KEY_INNER_VID_ID, 
    "inner_vid", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  ac_key.inner_vid:\n\r"
    "  Inner VID. Should be 'SOC_PPC_LIF_IGNORE_INNER_VID' when the vlan_domain\n\r"
    "  refers to ports that do not support VSI according to 2 VIDs\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif ac_with_cos_get inner_vid 0 outer_vid 0 vlan_domain 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(15)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_L2_LIF_AC_WITH_COS_GET_AC_WITH_COS_GET_AC_KEY_OUTER_VID_ID, 
    "outer_vid", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  ac_key.outer_vid:\n\r"
    "  Outer VID. Set to SOC_PPC_LIF_IGNORE_OUTER_VID in order to ignore outer_VID, then\n\r"
    "  also the inner VID will be ignored and the AC is set according to vlan_domain\n\r"
    "  only.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif ac_with_cos_get inner_vid 0 outer_vid 0 vlan_domain 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(15)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_L2_LIF_AC_WITH_COS_GET_AC_WITH_COS_GET_AC_KEY_VLAN_DOMAIN_ID, 
    "vlan_domain", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  ac_key.vlan_domain:\n\r"
    "  VLAN Domain ID.The VLAN domain is either a port, or a group of ports, that\n\r"
    "  share the same VLAN IDs space\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif ac_with_cos_get inner_vid 0 outer_vid 0 vlan_domain 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(15)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_L2_LIF_AC_REMOVE_AC_REMOVE_ID, 
    "ac_remove", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Remove an Attachment Circuit\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif ac_remove inner_vid 0 outer_vid 0 vlan_domain 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(16)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_L2_LIF_AC_REMOVE_AC_REMOVE_AC_KEY_RAW_KEY_ID, 
    "raw_key", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  ac_key.raw_key:\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif ac_remove inner_vid 0 outer_vid 0 vlan_domain 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(16)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_L2_LIF_AC_REMOVE_AC_REMOVE_AC_KEY_INNER_VID_ID, 
    "inner_vid", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  ac_key.inner_vid:\n\r"
    "  Inner VID. Should be 'SOC_PPC_LIF_IGNORE_INNER_VID' when the vlan_domain\n\r"
    "  refers to ports that do not support VSI according to 2 VIDs\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif ac_remove inner_vid 0 outer_vid 0 vlan_domain 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(16)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_L2_LIF_AC_REMOVE_AC_REMOVE_AC_KEY_OUTER_VID_ID, 
    "outer_vid", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  ac_key.outer_vid:\n\r"
    "  Outer VID. Set to SOC_PPC_LIF_IGNORE_OUTER_VID in order to ignore outer_VID, then\n\r"
    "  also the inner VID will be ignored and the AC is set according to vlan_domain\n\r"
    "  only.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif ac_remove inner_vid 0 outer_vid 0 vlan_domain 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(16)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_L2_LIF_AC_REMOVE_AC_REMOVE_AC_KEY_VLAN_DOMAIN_ID, 
    "vlan_domain", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  ac_key.vlan_domain:\n\r"
    "  VLAN Domain ID.The VLAN domain is either a port, or a group of ports, that\n\r"
    "  share the same VLAN IDs space\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif ac_remove inner_vid 0 outer_vid 0 vlan_domain 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(16)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_L2_LIF_AC_REMOVE_AC_REMOVE_AC_KEY_PCP_ID, 
    "outer_pcp", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  ac_key.outer_pcp:\n\r"
    "  Outer PCP. Must be set in case key type includes PCP.\n\r"
    "  Invalid for Petra-B\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif ac_remove inner_vid 0 outer_vid 0 vlan_domain 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(16)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  }, 
  { 
    SOC_PARAM_PPD_L2_LIF_AC_REMOVE_AC_REMOVE_AC_KEY_KEY_TYPE_ID, 
    "key_type", 
    (PARAM_VAL_RULES *)&SOC_PPC_L2_LIF_AC_MAP_KEY_TYPE_rule[0], 
    (sizeof(SOC_PPC_L2_LIF_AC_MAP_KEY_TYPE_rule) / sizeof(SOC_PPC_L2_LIF_AC_MAP_KEY_TYPE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  ac_key.key_type:\n\r"
    "  Key type. Determines which attributes of the packet to consider when\n\r"
    "  associating the packet with AC-ID.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_extend_p2p ac_remove raw_key 0 inner_vid 0 outer_vid 0\n\r"
    "  vlan_domain 0 key_type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(16)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_L2_LIF_L2CP_TRAP_SET_L2_LIF_L2CP_TRAP_SET_ID, 
    "l2cp_trap_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Sets Trap information for Layer 2 control protocol frames. Packet is an MEF\n\r"
    "  layer 2 control protocol service frame When DA matches 01-80-c2-00-00-XX\n\r"
    "  where XX = 8'b00xx_xxxx.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api default_section l2_lif_l2cp_trap_set da_mac_address_lsb 0\n\r"
    "  l2cp_profile 0 handle_type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(26)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_L2_LIF_L2CP_TRAP_SET_L2_LIF_L2CP_TRAP_SET_L2CP_KEY_DA_MAC_ADDRESS_LSB_ID, 
    "da_mac_address_lsb", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  l2cp_key.da_mac_address_lsb:\n\r"
    "  The 6 lsb of the Destination MAC address (DA[5:0]). The msb bits DA[47:6] are\n\r"
    "  01-80-c2-00-00-XX where XX = 8'b00xx_xxxx)Range: 0 - 63.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api default_section l2_lif_l2cp_trap_set da_mac_address_lsb 0\n\r"
    "  l2cp_profile 0 handle_type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(26)}, 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_L2_LIF_L2CP_TRAP_SET_L2_LIF_L2CP_TRAP_SET_L2CP_KEY_L2CP_PROFILE_ID, 
    "l2cp_profile", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  l2cp_key.l2cp_profile:\n\r"
    "  l2cp profile (set according to LIF see soc_ppd_l2_lif_ac_add()).Range: 0 - 1.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api default_section l2_lif_l2cp_trap_set da_mac_address_lsb 0\n\r"
    "  l2cp_profile 0 handle_type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(26)}, 
    4, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_L2_LIF_L2CP_TRAP_SET_L2_LIF_L2CP_TRAP_SET_HANDLE_TYPE_ID, 
    "handle_type", 
    (PARAM_VAL_RULES *)&SOC_PPC_L2_LIF_L2CP_HANDLE_TYPE_rule[0], 
    (sizeof(SOC_PPC_L2_LIF_L2CP_HANDLE_TYPE_rule) / sizeof(SOC_PPC_L2_LIF_L2CP_HANDLE_TYPE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  handle_type:\n\r"
    "  How to handle the frame with the l2cp_key, drop, peer(trap), normal or\n\r"
    "  tunneled (transparent)\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api default_section l2_lif_l2cp_trap_set da_mac_address_lsb 0\n\r"
    "  l2cp_profile 0 handle_type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(26)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_L2_LIF_L2CP_TRAP_GET_L2_LIF_L2CP_TRAP_GET_ID, 
    "l2cp_trap_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Sets Trap information for Layer 2 control protocol frames. Packet is an MEF\n\r"
    "  layer 2 control protocol service frame When DA matches 01-80-c2-00-00-XX\n\r"
    "  where XX = 8'b00xx_xxxx.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api default_section l2_lif_l2cp_trap_get da_mac_address_lsb 0\n\r"
    "  l2cp_profile 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(27)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_L2_LIF_L2CP_TRAP_GET_L2_LIF_L2CP_TRAP_GET_L2CP_KEY_DA_MAC_ADDRESS_LSB_ID, 
    "da_mac_address_lsb", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  l2cp_key.da_mac_address_lsb:\n\r"
    "  The 6 lsb of the Destination MAC address (DA[5:0]). The msb bits DA[47:6] are\n\r"
    "  01-80-c2-00-00-XX where XX = 8'b00xx_xxxx)Range: 0 - 63.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api default_section l2_lif_l2cp_trap_get da_mac_address_lsb 0\n\r"
    "  l2cp_profile 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(27)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_L2_LIF_L2CP_TRAP_GET_L2_LIF_L2CP_TRAP_GET_L2CP_KEY_L2CP_PROFILE_ID, 
    "l2cp_profile", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  l2cp_key.l2cp_profile:\n\r"
    "  l2cp profile (set according to LIF see soc_ppd_l2_lif_ac_add()).Range: 0 - 1.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api default_section l2_lif_l2cp_trap_get da_mac_address_lsb 0\n\r"
    "  l2cp_profile 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(27)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  }, 
  { 
    SOC_PARAM_PPD_L2_LIF_ISID_ADD_ISID_ADD_ID, 
    "isid_add", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Map an I-SID to VSI and vice versa. Set I-SID related attributes. Relevant\n\r"
    "  when the packet arrives from the PBP\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif isid_add vsi_ndx 0 isid_domain 0 isid_id 0 lif_index 0\n\r"
    "  tpid2_index 0 tpid1_index 0 learn_enable 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(17)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_L2_LIF_ISID_ADD_ISID_ADD_VSI_NDX_ID, 
    "vsi_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  vsi_ndx:\n\r"
    "  System VSID.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif isid_add vsi_ndx 0 isid_domain 0 isid_id 0 lif_index 0\n\r"
    "  tpid2_index 0 tpid1_index 0 learn_enable 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(17)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_L2_LIF_ISID_ADD_ISID_ADD_ISID_KEY_ISID_DOMAIN_ID, 
    "isid_domain", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  isid_key.isid_domain:\n\r"
    "  I-SID Domain ID.Enable mapping to VSID according to I-SID * I-SID Domain. The\n\r"
    "  I-SID domain is set according to the MIM tunnel (B-VID *\n\r"
    "  B-SA)SOC_PPC_ISID_DM_DISABLE, indicates that the mapping is only according to\n\r"
    "  I-SID\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif isid_add vsi_ndx 0 isid_domain 0 isid_id 0 lif_index 0\n\r"
    "  tpid2_index 0 tpid1_index 0 learn_enable 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(17)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_L2_LIF_ISID_ADD_ISID_ADD_ISID_KEY_ISID_ID_ID, 
    "isid_id", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  isid_key.isid_id:\n\r"
    "  I-SID value, as arriving in the I-TAG\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif isid_add vsi_ndx 0 isid_domain 0 isid_id 0 lif_index 0\n\r"
    "  tpid2_index 0 tpid1_index 0 learn_enable 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(17)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_L2_LIF_ISID_ADD_ISID_ADD_LIF_INDEX_ID, 
    "lif_index", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  lif_index:\n\r"
    "  Logical Interfaces Table Entry. I-SID mapping to VSI is done in the LIF\n\r"
    "  table.Petra-B Range: 0-16KT20E Range: 0-128K  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif isid_add vsi_ndx 0 isid_domain 0 isid_id 0 lif_index 0\n\r"
    "  tpid2_index 0 tpid1_index 0 learn_enable 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(17)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },
  { 
    SOC_PARAM_PPD_L2_LIF_ISID_ADD_ISID_ADD_ISID_INFO_SERVICE_TYPE_ID, 
    "service_type", 
    (PARAM_VAL_RULES *)&SOC_PPC_L2_LIF_ISID_SERVICE_TYPE_rule[0], 
    (sizeof(SOC_PPC_L2_LIF_ISID_SERVICE_TYPE_rule) / sizeof(SOC_PPC_L2_LIF_ISID_SERVICE_TYPE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  isid_info.service_type:\n\r"
    "  ISID service type. P2P or MP..\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif isid_add vsi_ndx 0 isid_domain 0 isid_id 0 lif_index 0\n\r"
    "  service_type 0 tpid2_index 0 tpid1_index 0 learn_enable 0\n\r"
    "  trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0 push_profile 0\n\r"
    "  label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0\n\r"
    "  default_frwd_type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(17)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_L2_LIF_ISID_ADD_ISID_ADD_ISID_INFO_TPID_PROFILE_INDEX_ID, 
    "tpid_profile_index", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  isid_info.tpid_profiles.tpid2_index:\n\r"
    "  Selects one of four global TPIDs (usually the inner). Used to parse the VLAN\n\r"
    "  Tags in the ingress/egress and to construct the VLAN Tags in the egress.\n\r"
    "  Range: 0 - 3.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif isid_add vsi_ndx 0 isid_domain 0 isid_id 0 lif_index 0\n\r"
    "  tpid2_index 0 tpid1_index 0 learn_enable 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(17)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_L2_LIF_ISID_ADD_ISID_ADD_ISID_INFO_COS_PROFILE_ID, 
    "cos_profile", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  isid_info.cos_profile:\n\r"
    "  Class of Service mapping profile\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif isid_add vsi_ndx 0 isid_domain 0 isid_id 0 lif_index 0\n\r"
    "  tpid2_index 0 tpid1_index 0 learn_enable 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(17)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_L2_LIF_ISID_ADD_ISID_ADD_ISID_INFO_LEARN_ENABLE_ID, 
    "learn_enable", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  isid_info.learn_enable:\n\r"
    "  Indicate whether learning of customer MACs from this tunnel and on this\n\r"
    "  service are permitted.Should be disabled for PBB-TE.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif isid_add vsi_ndx 0 isid_domain 0 isid_id 0 lif_index 0\n\r"
    "  tpid2_index 0 tpid1_index 0 learn_enable 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(17)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
   },
   { 
    SOC_PARAM_PPD_L2_LIF_ISID_ADD_ISID_ADD_ISID_INFO_VSI_ASSIGNMENT_MODE_ID, 
    "vsi_assignment_mode", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  isid_info.vsi_assignment_mode:\n\r"
    "  Used to refine above VSI value\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif isid_add vsi_ndx 0 isid_domain 0 isid_id 0 lif_index 0\n\r"
    "  tpid2_index 0 tpid1_index 0 learn_enable 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0\n\r"
    "  protection_pass_val 0 default_frwrd_profile 0 oam_instance 0 use_in_lif 0\n\r"
	"  vsi_assignment_mode 0\n\r" 
#endif 
    "",
    "",
    {0, 0, 0, BIT(7)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
   },
   { 
    SOC_PARAM_PPD_L2_LIF_ISID_ADD_ISID_ADD_ISID_INFO_USE_IN_LIF_ID, 
    "use_in_lif", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  isid_info.use_lif:\n\r"
    "  Used to refine above VSI value\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif isid_add vsi_ndx 0 isid_domain 0 isid_id 0 lif_index 0\n\r"
    "  tpid2_index 0 tpid1_index 0 learn_enable 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0\n\r"
    "  protection_pass_val 0 default_frwrd_profile 0 oam_instance 0 use_in_lif 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(7)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
   },
   { 
    SOC_PARAM_PPD_L2_LIF_ISID_ADD_ISID_ADD_ISID_INFO_OAM_INSTANCE_ID, 
    "oam_instance", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  isid_info.oam_instance:\n\r"
    "  OAM instance to observe as failover id\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif isid_add vsi_ndx 0 isid_domain 0 isid_id 0 lif_index 0\n\r"
    "  tpid2_index 0 tpid1_index 0 learn_enable 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0\n\r"
    "  protection_pass_val 0 default_frwrd_profile 0 oam_instance 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(7)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
   },        
   { 
    SOC_PARAM_PPD_L2_LIF_ISID_ADD_ISID_ADD_ISID_INFO_DEFAULT_FRWRD_PROFILE_ID, 
    "default_frwrd_profile", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pwe_info.default_frwrd_profile:\n\r"
    "  Forwarding decision to apply when there is no hit in the MAC table\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif isid_add vsi_ndx 0 isid_domain 0 isid_id 0 lif_index 0\n\r"
    "  tpid2_index 0 tpid1_index 0 learn_enable 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0\n\r"
    "  protection_pass_val 0 default_frwrd_profile 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(7)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
   },                
   { 
    SOC_PARAM_PPD_L2_LIF_ISID_ADD_ISID_ADD_ISID_INFO_PROTECTION_PASS_VAL_ID, 
    "protection_pass_val", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pwe_info.protection_pass_val:\n\r"
    "  OAM instance pass value.\n\r"
	"  If oam_instance_id.value != oam_instance_pass_val\n\r"
	"  then packet is dropped otherwise packet is forwarded\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif isid_add vsi_ndx 0 isid_domain 0 isid_id 0 lif_index 0\n\r"
    "  tpid2_index 0 tpid1_index 0 learn_enable 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0\n\r"
    "  protection_pass_val 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(7)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
   },          
  { 
    SOC_PARAM_PPD_FRWRD_DECISION_FD_TRAP_CODE_ID, 
    "fd_trap_code", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals/*SOC_PPC_TRAP_CODE_rule*/[0], 
    (sizeof(soc_ppd_api_free_vals/*SOC_PPC_TRAP_CODE_rule*/) / sizeof(soc_ppd_api_free_vals/*SOC_PPC_TRAP_CODE_rule*/[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  isid_info.default_frwrd.default_forwarding.additional_info.trap_info.trap_acti\n\r"
    "  n_profile_id:\n\r"
    "  Trapping action profile ID.Range: 0-15.Points to a database that holds\n\r"
    "  trapping options. The profile ID selects the CPU to handle the trap; The CPU\n\r"
    "  port ID; the priority of the message; etc.The TRAP action profile is\n\r"
    "  configured via soc_ppd_trap_mgmt_frwrd_profile_info_set()\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif isid_add vsi_ndx 0 isid_domain 0 isid_id 0 lif_index 0\n\r"
    "  tpid2_index 0 tpid1_index 0 learn_enable 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(17)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_DECISION_FD_FWD_STRENGTH_ID, 
    "fd_frwrd_strength", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  isid_info.default_frwrd.default_forwarding.additional_info.trap_info.trap_qual\n\r"
    "  fier:\n\r"
    "  Trap qualifier to be associated with the packet to identify the trap. Range:\n\r"
    "  0-4K.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif isid_add vsi_ndx 0 isid_domain 0 isid_id 0 lif_index 0\n\r"
    "  tpid2_index 0 tpid1_index 0 learn_enable 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(17)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_DECISION_FD_SNOOP_STRENGTH_ID,
    "fd_snp_strength", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  isid_info.default_frwrd.default_forwarding.additional_info.outlif.val:\n\r"
    "  Out-LIF value, according to type. May be AC / EEP / VSI\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif isid_add vsi_ndx 0 isid_domain 0 isid_id 0 lif_index 0\n\r"
    "  tpid2_index 0 tpid1_index 0 learn_enable 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(17)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_DECISION_FD_AC_ID,
    "fd_ac_id", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  isid_info.default_frwrd.default_forwarding.additional_info.outlif.val:\n\r"
    "  Out-LIF value, according to type. May be AC / EEP / VSI\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif isid_add vsi_ndx 0 isid_domain 0 isid_id 0 lif_index 0\n\r"
    "  tpid2_index 0 tpid1_index 0 learn_enable 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(17)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_DECISION_FD_EEP_NDX_ID,
    "fd_eep_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  isid_info.default_frwrd.default_forwarding.additional_info.outlif.val:\n\r"
    "  Out-LIF value, according to type. May be AC / EEP / VSI\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif isid_add vsi_ndx 0 isid_domain 0 isid_id 0 lif_index 0\n\r"
    "  tpid2_index 0 tpid1_index 0 learn_enable 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(17)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_DECISION_FD_PUSH_PROFILE_ID, 
    "fd_push_profile", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  isid_info.default_frwrd.default_forwarding.additional_info.eei.val.mpls_comman\n\r"
    "  .push_profile:\n\r"
    "  If the command is push, this is the push profile used to construct the\n\r"
    "  label's TTL and EXP.Otherwise, this field is ignored.Range: 0 - 7.EEI may\n\r"
    "  include the MPLS command, but then the command cannot be Push with\n\r"
    "  push_profile 0. See SOC_PPC_EEI.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif isid_add vsi_ndx 0 isid_domain 0 isid_id 0 lif_index 0\n\r"
    "  tpid2_index 0 tpid1_index 0 learn_enable 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(17)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_DECISION_FD_LABEL_ID, 
    "fd_label", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  isid_info.default_frwrd.default_forwarding.additional_info.eei.val.mpls_comman\n\r"
    "  .label:\n\r"
    "  Label. Relevant if the command is push or swap.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif isid_add vsi_ndx 0 isid_domain 0 isid_id 0 lif_index 0\n\r"
    "  tpid2_index 0 tpid1_index 0 learn_enable 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(17)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_DECISION_FD_IS_LAG_ID, 
    "fd_is_lag", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  isid_info.default_frwrd.default_forwarding.additional_info.eei.val.trill_dest.\n\r"
    "  s_multicast:\n\r"
    "  Is the TRILL packet is sent as multicast (flooded in the Distribution Tree)\n\r"
    "  or sent as Unicast to Egress Nick.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif isid_add vsi_ndx 0 isid_domain 0 isid_id 0 lif_index 0\n\r"
    "  tpid2_index 0 tpid1_index 0 learn_enable 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(17)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_DECISION_FD_DEST_ID, 
    "fd_dest_id", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  isid_info.default_frwrd.default_forwarding.dest_id:\n\r"
    "  Destination ID, according to type.Multicast: MIDFEC:\n\r"
    "  FEC IDTrap:\n\r"
    "  IgnoredDrop:\n\r"
    "  IgnoredUnicast:\n\r"
    "  System port. When LAG, the user should\n\r"
    "  use SOC_PPD_LAG_ID(lag-id). When system\n\r"
    "  port is with allocated QoS resources the\n\r"
    "  user should use\n\r"
    "  SOC_PPD_DIRECT_FLOW_ID(flow-id)\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif isid_add vsi_ndx 0 isid_domain 0 isid_id 0 lif_index 0\n\r"
    "  tpid2_index 0 tpid1_index 0 learn_enable 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(17)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_DECISION_FD_TYPE_ID, 
    "fd_type",
    (PARAM_VAL_RULES *)&SOC_PPD_FRWRD_DECISION_MACRO_TYPE_rule[0], 
    (sizeof(SOC_PPD_FRWRD_DECISION_MACRO_TYPE_rule) / sizeof(SOC_PPD_FRWRD_DECISION_MACRO_TYPE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  isid_info.default_frwrd.default_forwarding.type:\n\r"
    "  Forwarding decision type:Unicast without FEC; Multicast without FEC; FEC;\n\r"
    "  Drop or Trap\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif isid_add vsi_ndx 0 isid_domain 0 isid_id 0 lif_index 0\n\r"
    "  tpid2_index 0 tpid1_index 0 learn_enable 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(17)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_L2_LIF_ISID_ADD_ISID_ADD_ISID_INFO_DEFAULT_FRWRD_DEFAULT_FRWD_TYPE_ID, 
    "frwrd_type", 
    (PARAM_VAL_RULES *)&SOC_PPC_L2_LIF_DFLT_FRWRD_SRC_rule[0], 
    (sizeof(SOC_PPC_L2_LIF_DFLT_FRWRD_SRC_rule) / sizeof(SOC_PPC_L2_LIF_DFLT_FRWRD_SRC_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  isid_info.default_frwrd.default_frwrd_type:\n\r"
    "  LIF: Use the following fields in case of unknown MAC destination.VSI: Use VSI\n\r"
    "  default forwarding in case of unknown MAC destination.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif isid_add vsi_ndx 0 isid_domain 0 isid_id 0 lif_index 0\n\r"
    "  tpid2_index 0 tpid1_index 0 learn_enable 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(17)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_L2_LIF_ISID_GET_ISID_GET_ID, 
    "isid_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Map an I-SID to VSI and vice versa. Set I-SID related attributes. Relevant\n\r"
    "  when the packet arrives from the PBP\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif isid_get isid_domain 0 isid_id 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(3)},
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_L2_LIF_ISID_GET_ISID_GET_ISID_KEY_ISID_DOMAIN_ID, 
    "isid_domain", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  isid_key.isid_domain:\n\r"
    "  I-SID Domain ID.Enable mapping to VSID according to I-SID * I-SID Domain. The\n\r"
    "  I-SID domain is set according to the MIM tunnel (B-VID *\n\r"
    "  B-SA)SOC_PPC_ISID_DM_DISABLE, indicates that the mapping is only according to\n\r"
    "  I-SID\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif isid_get isid_domain 0 isid_id 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(3)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_L2_LIF_ISID_GET_ISID_GET_ISID_KEY_ISID_ID_ID, 
    "isid_id", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  isid_key.isid_id:\n\r"
    "  I-SID value, as arriving in the I-TAG\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif isid_get isid_domain 0 isid_id 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(3)},
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_L2_LIF_ISID_REMOVE_ISID_REMOVE_ID, 
    "isid_remove", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Unbind an I-SID from VSI and vice versa\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif isid_remove vsi_ndx 0 isid_domain 0 isid_id 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(19)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_L2_LIF_ISID_REMOVE_ISID_REMOVE_ISID_KEY_ISID_DOMAIN_ID, 
    "isid_domain", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  isid_key.isid_domain:\n\r"
    "  I-SID Domain ID.Enable mapping to VSID according to I-SID * I-SID Domain. The\n\r"
    "  I-SID domain is set according to the MIM tunnel (B-VID *\n\r"
    "  B-SA)SOC_PPC_ISID_DM_DISABLE, indicates that the mapping is only according to\n\r"
    "  I-SID\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif isid_remove vsi_ndx 0 isid_domain 0 isid_id 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(19)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_L2_LIF_ISID_REMOVE_ISID_REMOVE_ISID_KEY_ISID_ID_ID, 
    "isid_id", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  isid_key.isid_id:\n\r"
    "  I-SID value, as arriving in the I-TAG\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif isid_remove vsi_ndx 0 isid_domain 0 isid_id 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(19)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_API_LIF_ID, 
    "lif", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "",
    "", 
    "",
    {BIT(24)|BIT(25), 0, 0, BIT(3)|BIT(4)|BIT(5)|BIT(6)|BIT(7)|BIT(8)|BIT(9)|BIT(10)|BIT(11)|BIT(12)|BIT(13)|BIT(14)|BIT(15)|BIT(16)|BIT(17)|BIT(18)|BIT(19)|BIT(20)|BIT(26)|BIT(27), 0, BIT(7)|BIT(8), 0, 0, 0, 0, 0, BIT(3)}, 
    1, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
#endif /* } lif*/
#ifdef UI_RIF/* { rif*/
  { 
    SOC_PARAM_PPD_RIF_MPLS_LABELS_RANGE_SET_MPLS_LABELS_RANGE_SET_ID, 
    "mpls_labels_range_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set the MPLS labels that may be mapped to Router Interfaces \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api rif mpls_labels_range_set last_label 0 first_label 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_RIF_MPLS_LABELS_RANGE_SET_MPLS_LABELS_RANGE_SET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_RIF_MPLS_LABELS_RANGE_SET_MPLS_LABELS_RANGE_SET_RIF_LABELS_RANGE_LAST_LABEL_ID, 
    "last_label", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  rif_labels_range.last_label:\n\r"
    "  Last MPLS label, to be used for Router Interface mapping.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api rif mpls_labels_range_set last_label 0 first_label 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_RIF_MPLS_LABELS_RANGE_SET_MPLS_LABELS_RANGE_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_RIF_MPLS_LABELS_RANGE_SET_MPLS_LABELS_RANGE_SET_RIF_LABELS_RANGE_FIRST_LABEL_ID, 
    "first_label", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  rif_labels_range.first_label:\n\r"
    "  First MPLS label, to be used for Router Interface mapping.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api rif mpls_labels_range_set last_label 0 first_label 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_RIF_MPLS_LABELS_RANGE_SET_MPLS_LABELS_RANGE_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_RIF_MPLS_LABELS_RANGE_GET_MPLS_LABELS_RANGE_GET_ID, 
    "mpls_labels_range_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set the MPLS labels that may be mapped to Router Interfaces \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api rif mpls_labels_range_get\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_RIF_MPLS_LABELS_RANGE_GET_MPLS_LABELS_RANGE_GET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_RIF_MPLS_LABEL_MAP_ADD_MPLS_LABEL_MAP_ADD_ID, 
    "mpls_label_map_add", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Enable MPLS labels termination and setting the Router interface according to\n\r"
    "  the terminated MPLS label.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api rif mpls_label_map_add vsid 0 label_id 0 lif_index 0 next_prtcl 0x0\n\r"
    "  cos_profile 0 rif 0 processing_type 0 routing_enablers_bm 0 ttl_scope_index 0\n\r"
    "  cos_profile 0 vrf_id 0 uc_rpf_enable 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_RIF_MPLS_LABEL_MAP_ADD_MPLS_LABEL_MAP_ADD_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_RIF_MPLS_LABEL_MAP_ADD_MPLS_LABEL_MAP_ADD_MPLS_KEY_VSID_ID, 
    "vsid", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  mpls_key.vsid:\n\r"
    "  The VSID was assigned to the packet, according to the Link Layer Ethernet\n\r"
    "  header's AC.SOC_PPC_RIF_NULL: Indicates that the termination is only according to\n\r"
    "  the MPLS label\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api rif mpls_label_map_add vsid 0 label_id 0 lif_index 0 next_prtcl 0x0\n\r"
    "  cos_profile 0 rif 0 processing_type 0 routing_enablers_bm 0 ttl_scope_index 0\n\r"
    "  cos_profile 0 vrf_id 0 uc_rpf_enable 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_RIF_MPLS_LABEL_MAP_ADD_MPLS_LABEL_MAP_ADD_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },
  {
    SOC_PARAM_PPD_RIF_MPLS_LABEL_MAP_ADD_MPLS_LABEL_MAP_ADD_MPLS_KEY_LABEL_ID_ID,
    "label_id",
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0],
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1,
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,
    0,0,0,0,0,0,0,
    "  mpls_key.label_id:\n\r"
    "  MPLS label ID.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE
    "Examples:\n\r"
    "  soc_ppd_api rif mpls_label_map_add vsid 0 label_id 0 lif_index 0 next_prtcl 0x0\n\r"
    "  cos_profile 0 rif 0 processing_type 0 routing_enablers_bm 0 ttl_scope_index 0\n\r"
    "  cos_profile 0 vrf_id 0 uc_rpf_enable 0\n\r"
#endif
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_RIF_MPLS_LABEL_MAP_ADD_MPLS_LABEL_MAP_ADD_ID),
    LAST_ORDINAL,
      /*
       * Pointer to a function to call after symbolic parameter
       * has been accepted.
       */
    (VAL_PROC_PTR)NULL
  },  
  {
    SOC_PARAM_PPD_RIF_MPLS_LABEL_MAP_ADD_MPLS_LABEL_MAP_ADD_MPLS_KEY_LABEL_ID_SECOND_ID,
    "label_id_second",
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0],
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1,
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,
    0,0,0,0,0,0,0,
    "  mpls_key.label_id_second:\n\r"
    "  MPLS label ID second.\n\r"
    "  Used in case of FRR or Coupling. Adding new entry with two labels.\n\r"
    "  Invalid for Petra-B.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE
    "Examples:\n\r"
    "  soc_ppd_api rif mpls_label_map_add vsid 0 label_id 0 lif_index 0 next_prtcl 0x0\n\r"
    "  cos_profile 0 rif 0 processing_type 0 routing_enablers_bm 0 ttl_scope_index 0\n\r"
    "  cos_profile 0 vrf_id 0 uc_rpf_enable 0\n\r"
#endif
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_RIF_MPLS_LABEL_MAP_ADD_MPLS_LABEL_MAP_ADD_ID),
    LAST_ORDINAL,
      /*
       * Pointer to a function to call after symbolic parameter
       * has been accepted.
       */
    (VAL_PROC_PTR)NULL
  },
  {
    SOC_PARAM_PPD_RIF_MPLS_LABEL_MAP_ADD_MPLS_LABEL_MAP_ADD_MPLS_KEY_LABEL_ID_FLAGS_ID,
    "flags",
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0],
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1,
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,
    0,0,0,0,0,0,0,
    "  mpls_key.flags:\n\r"
    "  MPLS RIF Key flags.0x1 for FRR, 0x2 for Coupling.\n\r"
    "  See SOC_PPC_RIF_MPLS_LABEL_XXX.\n\r"
    "  Invalid for Petra-B.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE
    "Examples:\n\r"
    "  soc_ppd_api rif mpls_label_map_add vsid 0 label_id 0 lif_index 0 next_prtcl 0x0\n\r"
    "  cos_profile 0 rif 0 processing_type 0 routing_enablers_bm 0 ttl_scope_index 0\n\r"
    "  cos_profile 0 vrf_id 0 uc_rpf_enable 0\n\r"
#endif
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_RIF_MPLS_LABEL_MAP_ADD_MPLS_LABEL_MAP_ADD_ID),
    LAST_ORDINAL,
      /*
       * Pointer to a function to call after symbolic parameter
       * has been accepted.
       */
    (VAL_PROC_PTR)NULL
  },
  { 
    SOC_PARAM_PPD_RIF_MPLS_LABEL_MAP_ADD_MPLS_LABEL_MAP_ADD_MPLS_KEY_LABEL_INDEX_ID, 
    "label_index", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  mpls_key.label_index:\n\r"
    "  MPLS label index. The location of the label in the MPLS stack.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api rif mpls_label_map_add vsid 0 label_id 0 lif_index 0 next_prtcl 0x0\n\r"
    "  cos_profile 0 rif 0 processing_type 0 routing_enablers_bm 0 ttl_scope_index 0\n\r"
    "  cos_profile 0 vrf_id 0 uc_rpf_enable 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_RIF_MPLS_LABEL_MAP_ADD_MPLS_LABEL_MAP_ADD_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_RIF_MPLS_LABEL_MAP_ADD_MPLS_LABEL_MAP_ADD_LIF_INDEX_ID, 
    "lif_index", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  lif_index:\n\r"
    "  LIF table index	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api rif mpls_label_map_add vsid 0 label_id 0 lif_index 0 next_prtcl 0x0\n\r"
    "  cos_profile 0 rif 0 processing_type 0 routing_enablers_bm 0 ttl_scope_index 0\n\r"
    "  cos_profile 0 vrf_id 0 uc_rpf_enable 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_RIF_MPLS_LABEL_MAP_ADD_MPLS_LABEL_MAP_ADD_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_RIF_MPLS_LABEL_MAP_ADD_MPLS_LABEL_MAP_ADD_TERM_INFO_NEXT_PRTCL_ID, 
    "next_prtcl", 
    (PARAM_VAL_RULES *)&SOC_PPC_L3_NEXT_PRTCL_TYPE_rule[0], 
    (sizeof(SOC_PPC_L3_NEXT_PRTCL_TYPE_rule) / sizeof(SOC_PPC_L3_NEXT_PRTCL_TYPE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  term_info.next_prtcl:\n\r"
    "  When MPLS label is terminated user has to specify what is the next header\n\r"
    "  type, value can be IP or MPLS.Range: SOC_PPC_L3_NEXT_PRTCL_TYPE_IPV4:\n\r"
    "  SOC_PPC_L3_NEXT_PRTCL_TYPE_MPLS.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api rif mpls_label_map_add vsid 0 label_id 0 lif_index 0 next_prtcl 0x0\n\r"
    "  cos_profile 0 rif 0 processing_type 0 routing_enablers_bm 0 ttl_scope_index 0\n\r"
    "  cos_profile 0 vrf_id 0 uc_rpf_enable 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_RIF_MPLS_LABEL_MAP_ADD_MPLS_LABEL_MAP_ADD_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_RIF_MPLS_LABEL_MAP_ADD_MPLS_LABEL_MAP_ADD_TERM_INFO_COS_PROFILE_ID, 
    "term_cos_profile", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  term_info.cos_profile:\n\r"
    "  Class of Service mapping profile.Setting the profile to '0' keeps the\n\r"
    "  previous TC and DP values T20E: Ignored. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api rif mpls_label_map_add vsid 0 label_id 0 lif_index 0 next_prtcl 0x0\n\r"
    "  cos_profile 0 rif 0 processing_type 0 routing_enablers_bm 0 ttl_scope_index 0\n\r"
    "  cos_profile 0 vrf_id 0 uc_rpf_enable 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_RIF_MPLS_LABEL_MAP_ADD_MPLS_LABEL_MAP_ADD_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_RIF_MPLS_LABEL_MAP_ADD_MPLS_LABEL_MAP_ADD_TERM_INFO_RIF_ID, 
    "rif_id", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  term_info.rif:\n\r"
    "  RIF Id.When RIF == SOC_PPC_RIF_NULL, the default RIF ID and RPF enable flag are\n\r"
    "  not updated.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api rif mpls_label_map_add vsid 0 label_id 0 lif_index 0 next_prtcl 0x0\n\r"
    "  cos_profile 0 rif 0 processing_type 0 routing_enablers_bm 0 ttl_scope_index 0\n\r"
    "  cos_profile 0 vrf_id 0 uc_rpf_enable 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_RIF_MPLS_LABEL_MAP_ADD_MPLS_LABEL_MAP_ADD_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_RIF_MPLS_LABEL_MAP_ADD_MPLS_LABEL_MAP_ADD_TERM_INFO_PROCESSING_TYPE_ID, 
    "processing_type", 
    (PARAM_VAL_RULES *)&SOC_PPC_MPLS_TERM_MODEL_TYPE_rule[0], 
    (sizeof(SOC_PPC_MPLS_TERM_MODEL_TYPE_rule) / sizeof(SOC_PPC_MPLS_TERM_MODEL_TYPE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  term_info.processing_type:\n\r"
    "  Pipe/Uniform processing\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api rif mpls_label_map_add vsid 0 label_id 0 lif_index 0 next_prtcl 0x0\n\r"
    "  cos_profile 0 rif 0 processing_type 0 routing_enablers_bm 0 ttl_scope_index 0\n\r"
    "  cos_profile 0 vrf_id 0 uc_rpf_enable 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_RIF_MPLS_LABEL_MAP_ADD_MPLS_LABEL_MAP_ADD_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_RIF_MPLS_LABEL_MAP_ADD_MPLS_LABEL_MAP_ADD_RIF_INFO_ROUTING_ENABLERS_BM_ID, 
    "routing_enablers_bm", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  rif_info.routing_enablers_bm:\n\r"
    "  BIT MAP of routing enables options.Bit 0: IP Unicast Routing EnableBit 1: IP\n\r"
    "  Multicast Routing EnableBit 2: MPLS Processing EnableIn Petra-B, only valid\n\r"
    "  for VSID RIFs see SOC_PPC_RIF_ROUTE_ENABLE_TYPE\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api rif mpls_label_map_add vsid 0 label_id 0 lif_index 0 next_prtcl 0x0\n\r"
    "  cos_profile 0 rif 0 processing_type 0 routing_enablers_bm 0 ttl_scope_index 0\n\r"
    "  cos_profile 0 vrf_id 0 uc_rpf_enable 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_RIF_MPLS_LABEL_MAP_ADD_MPLS_LABEL_MAP_ADD_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_RIF_MPLS_LABEL_MAP_ADD_MPLS_LABEL_MAP_ADD_RIF_INFO_TTL_SCOPE_INDEX_ID, 
    "ttl_scope_index", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  rif_info.ttl_scope_index:\n\r"
    "  When packet is routed (IP/MPLS routing) to this RIF then packet's TTL is\n\r"
    "  compared againsy the TTL pointed by this index and if it less or equal then\n\r"
    "  packet is filter.\n\r"
    "  Use soc_ppd_rif_ttl_scope_set to set the TTL value.Range: 0 - 7. use\n\r"
    "  soc_ppd_trap_eg_profile_info_set(SOC_PPC_TRAP_EG_TYPE_TTL_SCOPE, eg_trap_info) to set\n\r"
    "  how to handle packets match condition of this filter.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api rif mpls_label_map_add vsid 0 label_id 0 lif_index 0 next_prtcl 0x0\n\r"
    "  cos_profile 0 rif 0 processing_type 0 routing_enablers_bm 0 ttl_scope_index 0\n\r"
    "  cos_profile 0 vrf_id 0 uc_rpf_enable 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_RIF_MPLS_LABEL_MAP_ADD_MPLS_LABEL_MAP_ADD_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_RIF_MPLS_LABEL_MAP_ADD_MPLS_LABEL_MAP_ADD_RIF_INFO_COS_PROFILE_ID, 
    "rif_cos_profile", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  rif_info.cos_profile:\n\r"
    "  Class of Service mapping profile.Setting the profile to '0' keeps the\n\r"
    "  previous TC and DP values\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api rif mpls_label_map_add vsid 0 label_id 0 lif_index 0 next_prtcl 0x0\n\r"
    "  cos_profile 0 rif 0 processing_type 0 routing_enablers_bm 0 ttl_scope_index 0\n\r"
    "  cos_profile 0 vrf_id 0 uc_rpf_enable 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_RIF_MPLS_LABEL_MAP_ADD_MPLS_LABEL_MAP_ADD_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_RIF_MPLS_LABEL_MAP_ADD_MPLS_LABEL_MAP_ADD_RIF_INFO_VRF_ID_ID, 
    "vrf_id", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  rif_info.vrf_id:\n\r"
    "  Virtual routing and forwarding instance ID.Only relevant when the RIF is\n\r"
    "  utilized for IP routing.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api rif mpls_label_map_add vsid 0 label_id 0 lif_index 0 next_prtcl 0x0\n\r"
    "  cos_profile 0 rif 0 processing_type 0 routing_enablers_bm 0 ttl_scope_index 0\n\r"
    "  cos_profile 0 vrf_id 0 uc_rpf_enable 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_RIF_MPLS_LABEL_MAP_ADD_MPLS_LABEL_MAP_ADD_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_RIF_MPLS_LABEL_MAP_ADD_MPLS_LABEL_MAP_ADD_RIF_INFO_UC_RPF_ENABLE_ID, 
    "uc_rpf_enable", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  rif_info.uc_rpf_enable:\n\r"
    "  Enable RPF for Unicast traffic.Only relevant when the RIF is utilized for IP\n\r"
    "  routing. (The same RIF may be used for both IP Routing and MPLS LSR.) \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api rif mpls_label_map_add vsid 0 label_id 0 lif_index 0 next_prtcl 0x0\n\r"
    "  cos_profile 0 rif 0 processing_type 0 routing_enablers_bm 0 ttl_scope_index 0\n\r"
    "  cos_profile 0 vrf_id 0 uc_rpf_enable 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_RIF_MPLS_LABEL_MAP_ADD_MPLS_LABEL_MAP_ADD_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_RIF_MPLS_LABEL_MAP_REMOVE_MPLS_LABEL_MAP_REMOVE_ID, 
    "mpls_label_map_remove", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Remove MPLS label that was mapped to a RIF-Tunnel\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api rif mpls_label_map_remove vsid 0 label_id 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_RIF_MPLS_LABEL_MAP_REMOVE_MPLS_LABEL_MAP_REMOVE_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_RIF_MPLS_LABEL_MAP_REMOVE_MPLS_LABEL_MAP_REMOVE_MPLS_KEY_VSID_ID, 
    "vsid", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  mpls_key.vsid:\n\r"
    "  The VSID was assigned to the packet, according to the Link Layer Ethernet\n\r"
    "  header's AC.SOC_PPC_RIF_NULL: Indicates that the termination is only according to\n\r"
    "  the MPLS label\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api rif mpls_label_map_remove vsid 0 label_id 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_RIF_MPLS_LABEL_MAP_REMOVE_MPLS_LABEL_MAP_REMOVE_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_RIF_MPLS_LABEL_MAP_REMOVE_MPLS_LABEL_MAP_REMOVE_MPLS_KEY_LABEL_ID_ID, 
    "label_id", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  mpls_key.label_id:\n\r"
    "  MPLS label ID.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api rif mpls_label_map_remove vsid 0 label_id 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_RIF_MPLS_LABEL_MAP_REMOVE_MPLS_LABEL_MAP_REMOVE_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  {
    SOC_PARAM_PPD_RIF_MPLS_LABEL_MAP_REMOVE_MPLS_LABEL_MAP_REMOVE_MPLS_KEY_LABEL_ID_SECOND_ID,
    "label_id_second",
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0],
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1,
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,
    0,0,0,0,0,0,0,
    "  mpls_key.label_id_second:\n\r"
    "  MPLS label ID second.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE
    "Examples:\n\r"
    "  soc_ppd_api rif mpls_label_map_remove vsid 0 label_id 0\n\r"
#endif
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_RIF_MPLS_LABEL_MAP_REMOVE_MPLS_LABEL_MAP_REMOVE_ID),
    LAST_ORDINAL,
      /*
       * Pointer to a function to call after symbolic parameter
       * has been accepted.
       */
    (VAL_PROC_PTR)NULL
  }, 
  {
    SOC_PARAM_PPD_RIF_MPLS_LABEL_MAP_REMOVE_MPLS_LABEL_MAP_REMOVE_MPLS_KEY_LABEL_ID_FLAGS_ID,
    "flags",
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0],
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1,
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,
    0,0,0,0,0,0,0,
    "  mpls_key.flags:\n\r"
    "  MPLS label flags. 0x1 FRR, 0x2 Coupling.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE
    "Examples:\n\r"
    "  soc_ppd_api rif mpls_label_map_remove vsid 0 label_id 0\n\r"
#endif
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_RIF_MPLS_LABEL_MAP_REMOVE_MPLS_LABEL_MAP_REMOVE_ID),
    LAST_ORDINAL,
      /*
       * Pointer to a function to call after symbolic parameter
       * has been accepted.
       */
    (VAL_PROC_PTR)NULL
  },
  {
    SOC_PARAM_PPD_RIF_MPLS_LABEL_MAP_REMOVE_MPLS_LABEL_MAP_REMOVE_MPLS_KEY_LABEL_INDEX_ID,
    "label_index",
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0],
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1,
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,
    0,0,0,0,0,0,0,
    "  mpls_key.label_index:\n\r"
    "  MPLS label index. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE
    "Examples:\n\r"
    "  soc_ppd_api rif mpls_label_map_remove vsid 0 label_id 0\n\r"
#endif
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_RIF_MPLS_LABEL_MAP_REMOVE_MPLS_LABEL_MAP_REMOVE_ID),
    LAST_ORDINAL,
      /*
       * Pointer to a function to call after symbolic parameter
       * has been accepted.
       */
    (VAL_PROC_PTR)NULL
  },
  { 
    SOC_PARAM_PPD_RIF_MPLS_LABEL_MAP_GET_MPLS_LABEL_MAP_GET_ID, 
    "mpls_label_map_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Get MPLS label termination and Router interface info according to the\n\r"
    "  terminated MPLS label.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api rif mpls_label_map_get vsid 0 label_id 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_RIF_MPLS_LABEL_MAP_GET_MPLS_LABEL_MAP_GET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_RIF_MPLS_LABEL_MAP_GET_MPLS_LABEL_MAP_GET_MPLS_KEY_VSID_ID, 
    "vsid", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  mpls_key.vsid:\n\r"
    "  The VSID was assigned to the packet, according to the Link Layer Ethernet\n\r"
    "  header's AC.SOC_PPC_RIF_NULL: Indicates that the termination is only according to\n\r"
    "  the MPLS label\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api rif mpls_label_map_get vsid 0 label_id 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_RIF_MPLS_LABEL_MAP_GET_MPLS_LABEL_MAP_GET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_RIF_MPLS_LABEL_MAP_GET_MPLS_LABEL_MAP_GET_MPLS_KEY_LABEL_ID_ID, 
    "label_id", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  mpls_key.label_id:\n\r"
    "  MPLS label ID.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api rif mpls_label_map_get vsid 0 label_id 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_RIF_MPLS_LABEL_MAP_GET_MPLS_LABEL_MAP_GET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  {
    SOC_PARAM_PPD_RIF_MPLS_LABEL_MAP_GET_MPLS_LABEL_MAP_GET_MPLS_KEY_LABEL_ID_SECOND_ID,
    "label_id_second",
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0],
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1,
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,
    0,0,0,0,0,0,0,
    "  mpls_key.label_id_second:\n\r"
    "  MPLS label ID SECOND.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE
    "Examples:\n\r"
    "  soc_ppd_api rif mpls_label_map_get vsid 0 label_id 0\n\r"
#endif
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_RIF_MPLS_LABEL_MAP_GET_MPLS_LABEL_MAP_GET_ID),
    LAST_ORDINAL,
      /*
       * Pointer to a function to call after symbolic parameter
       * has been accepted.
       */
    (VAL_PROC_PTR)NULL
  },
  {
    SOC_PARAM_PPD_RIF_MPLS_LABEL_MAP_GET_MPLS_LABEL_MAP_GET_MPLS_KEY_LABEL_ID_FLAGS_ID,
    "flags",
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0],
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1,
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,
    0,0,0,0,0,0,0,
    "  mpls_key.flags:\n\r"
    "  MPLS label flags. 0x1 FRR, 0x2 Coupling.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE
    "Examples:\n\r"
    "  soc_ppd_api rif mpls_label_map_get vsid 0 label_id 0\n\r"
#endif
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_RIF_MPLS_LABEL_MAP_GET_MPLS_LABEL_MAP_GET_ID),
    LAST_ORDINAL,
      /*
       * Pointer to a function to call after symbolic parameter
       * has been accepted.
       */
    (VAL_PROC_PTR)NULL
  },
  {
    SOC_PARAM_PPD_RIF_MPLS_LABEL_MAP_GET_MPLS_LABEL_MAP_GET_MPLS_KEY_LABEL_INDEX_ID,
    "label_index",
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0],
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1,
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,
    0,0,0,0,0,0,0,
    "  mpls_key.label_index:\n\r"
    "  MPLS label index. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE
    "Examples:\n\r"
    "  soc_ppd_api rif mpls_label_map_get vsid 0 label_id 0\n\r"
#endif
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_RIF_MPLS_LABEL_MAP_GET_MPLS_LABEL_MAP_GET_ID),
    LAST_ORDINAL,
      /*
       * Pointer to a function to call after symbolic parameter
       * has been accepted.
       */
    (VAL_PROC_PTR)NULL
  },
  { 
    SOC_PARAM_PPD_RIF_VSID_MAP_SET_VSID_MAP_SET_ID, 
    "vsid_map_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set the Router Interface according to the VSID.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api rif vsid_map_set vsid_ndx 0 routing_enablers_bm 0 ttl_scope_index 0\n\r"
    "  cos_profile 0 vrf_id 0 uc_rpf_enable 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_RIF_VSID_MAP_SET_VSID_MAP_SET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_RIF_VSID_MAP_SET_VSID_MAP_SET_VSID_NDX_ID, 
    "vsid_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  vsid_ndx:\n\r"
    "  VSID. Equal to the RIF-ID	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api rif vsid_map_set vsid_ndx 0 routing_enablers_bm 0 ttl_scope_index 0\n\r"
    "  cos_profile 0 vrf_id 0 uc_rpf_enable 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_RIF_VSID_MAP_SET_VSID_MAP_SET_ID), 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_RIF_VSID_MAP_SET_VSID_MAP_SET_RIF_INFO_ROUTING_ENABLERS_BM_ID, 
    "routing_enablers_bm", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  rif_info.routing_enablers_bm:\n\r"
    "  BIT MAP of routing enables options.Bit 0: IP Unicast Routing EnableBit 1: IP\n\r"
    "  Multicast Routing EnableBit 2: MPLS Processing EnableIn Petra-B, only valid\n\r"
    "  for VSID RIFs see SOC_PPC_RIF_ROUTE_ENABLE_TYPE\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api rif vsid_map_set vsid_ndx 0 routing_enablers_bm 0 ttl_scope_index 0\n\r"
    "  cos_profile 0 vrf_id 0 uc_rpf_enable 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_RIF_VSID_MAP_SET_VSID_MAP_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_RIF_VSID_MAP_SET_VSID_MAP_SET_RIF_INFO_TTL_SCOPE_INDEX_ID, 
    "ttl_scope_index", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  rif_info.ttl_scope_index:\n\r"
    "  When packet is routed (IP/MPLS routing) to this RIF then packet's TTL is\n\r"
    "  compared againsy the TTL pointed by this index and if it less or equal then\n\r"
    "  packet is filter.\n\r"
    "  Use soc_ppd_rif_ttl_scope_set to set the TTL value.Range: 0 - 7. use\n\r"
    "  soc_ppd_trap_eg_profile_info_set(SOC_PPC_TRAP_EG_TYPE_TTL_SCOPE, eg_trap_info) to set\n\r"
    "  how to handle packets match condition of this filter.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api rif vsid_map_set vsid_ndx 0 routing_enablers_bm 0 ttl_scope_index 0\n\r"
    "  cos_profile 0 vrf_id 0 uc_rpf_enable 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_RIF_VSID_MAP_SET_VSID_MAP_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_RIF_VSID_MAP_SET_VSID_MAP_SET_RIF_INFO_COS_PROFILE_ID, 
    "cos_profile", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  rif_info.cos_profile:\n\r"
    "  Class of Service mapping profile.Setting the profile to '0' keeps the\n\r"
    "  previous TC and DP values\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api rif vsid_map_set vsid_ndx 0 routing_enablers_bm 0 ttl_scope_index 0\n\r"
    "  cos_profile 0 vrf_id 0 uc_rpf_enable 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_RIF_VSID_MAP_SET_VSID_MAP_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_RIF_VSID_MAP_SET_VSID_MAP_SET_RIF_INFO_VRF_ID_ID, 
    "vrf_id", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  rif_info.vrf_id:\n\r"
    "  Virtual routing and forwarding instance ID.Only relevant when the RIF is\n\r"
    "  utilized for IP routing.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api rif vsid_map_set vsid_ndx 0 routing_enablers_bm 0 ttl_scope_index 0\n\r"
    "  cos_profile 0 vrf_id 0 uc_rpf_enable 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_RIF_VSID_MAP_SET_VSID_MAP_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_RIF_VSID_MAP_SET_VSID_MAP_SET_RIF_INFO_UC_RPF_ENABLE_ID, 
    "uc_rpf_enable", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  rif_info.uc_rpf_enable:\n\r"
    "  Enable RPF for Unicast traffic.Only relevant when the RIF is utilized for IP\n\r"
    "  routing. (The same RIF may be used for both IP Routing and MPLS LSR.) \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api rif vsid_map_set vsid_ndx 0 routing_enablers_bm 0 ttl_scope_index 0\n\r"
    "  cos_profile 0 vrf_id 0 uc_rpf_enable 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_RIF_VSID_MAP_SET_VSID_MAP_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_RIF_VSID_MAP_GET_VSID_MAP_GET_ID, 
    "vsid_map_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set the Router Interface according to the VSID.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api rif vsid_map_get vsid_ndx 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_RIF_VSID_MAP_GET_VSID_MAP_GET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_RIF_VSID_MAP_GET_VSID_MAP_GET_VSID_NDX_ID, 
    "vsid_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  vsid_ndx:\n\r"
    "  VSID. Equal to the RIF-ID	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api rif vsid_map_get vsid_ndx 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_RIF_VSID_MAP_GET_VSID_MAP_GET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_RIF_INFO_SET_INFO_SET_ID, 
    "rif_info_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set the Router Interface according to the VSID.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api rif info_set rif_ndx 0 routing_enablers_bm 0 ttl_scope_index 0\n\r"
    "  cos_profile 0 vrf_id 0 uc_rpf_enable 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_RIF_INFO_SET_INFO_SET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_RIF_INFO_SET_INFO_SET_RIF_NDX_ID, 
    "rif_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  rif_ndx:\n\r"
    "  Router Interface ID. Range: 0 - 4K-1.	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api rif info_set rif_ndx 0 routing_enablers_bm 0 ttl_scope_index 0\n\r"
    "  cos_profile 0 vrf_id 0 uc_rpf_enable 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_RIF_INFO_SET_INFO_SET_ID), 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_RIF_INFO_SET_INFO_SET_RIF_INFO_ROUTING_ENABLERS_BM_ID, 
    "routing_enablers_bm", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  rif_info.routing_enablers_bm:\n\r"
    "  BIT MAP of routing enables options.Bit 0: IP Unicast Routing EnableBit 1: IP\n\r"
    "  Multicast Routing EnableBit 2: MPLS Processing EnableIn Petra-B, only valid\n\r"
    "  for VSID RIFs see SOC_PPC_RIF_ROUTE_ENABLE_TYPE\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api rif info_set rif_ndx 0 routing_enablers_bm 0 ttl_scope_index 0\n\r"
    "  cos_profile 0 vrf_id 0 uc_rpf_enable 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_RIF_INFO_SET_INFO_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_RIF_INFO_SET_INFO_SET_RIF_INFO_TTL_SCOPE_INDEX_ID, 
    "ttl_scope_index", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  rif_info.ttl_scope_index:\n\r"
    "  When packet is routed (IP/MPLS routing) to this RIF then packet's TTL is\n\r"
    "  compared againsy the TTL pointed by this index and if it less or equal then\n\r"
    "  packet is filter.\n\r"
    "  Use soc_ppd_rif_ttl_scope_set to set the TTL value.Range: 0 - 7. use\n\r"
    "  soc_ppd_trap_eg_profile_info_set(SOC_PPC_TRAP_EG_TYPE_TTL_SCOPE, eg_trap_info) to set\n\r"
    "  how to handle packets match condition of this filter.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api rif info_set rif_ndx 0 routing_enablers_bm 0 ttl_scope_index 0\n\r"
    "  cos_profile 0 vrf_id 0 uc_rpf_enable 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_RIF_INFO_SET_INFO_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_RIF_INFO_SET_INFO_SET_RIF_INFO_COS_PROFILE_ID, 
    "cos_profile", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  rif_info.cos_profile:\n\r"
    "  Class of Service mapping profile.Setting the profile to '0' keeps the\n\r"
    "  previous TC and DP values\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api rif info_set rif_ndx 0 routing_enablers_bm 0 ttl_scope_index 0\n\r"
    "  cos_profile 0 vrf_id 0 uc_rpf_enable 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_RIF_INFO_SET_INFO_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_RIF_INFO_SET_INFO_SET_RIF_INFO_VRF_ID_ID, 
    "vrf_id", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  rif_info.vrf_id:\n\r"
    "  Virtual routing and forwarding instance ID.Only relevant when the RIF is\n\r"
    "  utilized for IP routing.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api rif info_set rif_ndx 0 routing_enablers_bm 0 ttl_scope_index 0\n\r"
    "  cos_profile 0 vrf_id 0 uc_rpf_enable 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_RIF_INFO_SET_INFO_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_RIF_INFO_SET_INFO_SET_RIF_INFO_UC_RPF_ENABLE_ID, 
    "uc_rpf_enable", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  rif_info.uc_rpf_enable:\n\r"
    "  Enable RPF for Unicast traffic.Only relevant when the RIF is utilized for IP\n\r"
    "  routing. (The same RIF may be used for both IP Routing and MPLS LSR.) \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api rif info_set rif_ndx 0 routing_enablers_bm 0 ttl_scope_index 0\n\r"
    "  cos_profile 0 vrf_id 0 uc_rpf_enable 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_RIF_INFO_SET_INFO_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_RIF_INFO_SET_INFO_SET_RIF_INFO_DEFAULT_ROUTING_ENABLE_ID, 
    "dflt_route_enable", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  rif_info.uc_rpf_enable:\n\r"
    "  Enable RPF for Unicast traffic.Only relevant when the RIF is utilized for IP\n\r"
    "  routing. (The same RIF may be used for both IP Routing and MPLS LSR.) \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api rif info_set rif_ndx 0 routing_enablers_bm 0 ttl_scope_index 0\n\r"
    "  cos_profile 0 vrf_id 0 uc_rpf_enable 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_RIF_INFO_SET_INFO_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_RIF_INFO_GET_INFO_GET_ID, 
    "rif_info_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set the Router Interface according to the VSID.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api rif info_get rif_ndx 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_RIF_INFO_GET_INFO_GET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_RIF_INFO_GET_INFO_GET_RIF_NDX_ID, 
    "rif_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  rif_ndx:\n\r"
    "  Router Interface ID. Range: 0 - 4K-1.	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api rif info_get rif_ndx 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_RIF_INFO_GET_INFO_GET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_RIF_TTL_SCOPE_SET_TTL_SCOPE_SET_ID, 
    "ttl_scope_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set TTL value for TTL-scope.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api rif ttl_scope_set ttl_scope_ndx 0 ttl_val 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_RIF_TTL_SCOPE_SET_TTL_SCOPE_SET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_RIF_TTL_SCOPE_SET_TTL_SCOPE_SET_TTL_SCOPE_NDX_ID, 
    "ttl_scope_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  ttl_scope_ndx:\n\r"
    "  TTL scope index. Range: 0-7. set according to RIF. See SOC_PPC_RIF_INFO.	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api rif ttl_scope_set ttl_scope_ndx 0 ttl_val 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_RIF_TTL_SCOPE_SET_TTL_SCOPE_SET_ID), 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_RIF_TTL_SCOPE_SET_TTL_SCOPE_SET_TTL_VAL_ID, 
    "ttl_val", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  ttl_val:\n\r"
    "  TTL value. Range: 0 -255.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api rif ttl_scope_set ttl_scope_ndx 0 ttl_val 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_RIF_TTL_SCOPE_SET_TTL_SCOPE_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_RIF_TTL_SCOPE_GET_TTL_SCOPE_GET_ID, 
    "ttl_scope_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set TTL value for TTL-scope.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api rif ttl_scope_get ttl_scope_ndx 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_RIF_TTL_SCOPE_GET_TTL_SCOPE_GET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_RIF_TTL_SCOPE_GET_TTL_SCOPE_GET_TTL_SCOPE_NDX_ID, 
    "ttl_scope_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  ttl_scope_ndx:\n\r"
    "  TTL scope index. Range: 0-7. set according to RIF. See SOC_PPC_RIF_INFO.	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api rif ttl_scope_get ttl_scope_ndx 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_RIF_TTL_SCOPE_GET_TTL_SCOPE_GET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_API_RIF_ID, 
    "rif", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "",
    "", 
    "",
    BIT_UI_16_RNG(SOC_FUN_PPD_API_RIF_FIRST_ID,SOC_FUN_PPD_API_RIF_LAST_ID), 
    1, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
#endif /* } rif*/
#ifdef UI_LIF_COS/* { lif_cos*/
  { 
    SOC_PARAM_PPD_LIF_COS_AC_PROFILE_INFO_SET_AC_PROFILE_INFO_SET_ID, 
    "ac_profile_info_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Sets COS information of AC COS Profile including(FORCE to const values, map\n\r"
    "  field from the packet and select mapping table) \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos ac_profile_info_set profile_ndx 0 map_table 0 dp 0 tc 0 type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(28)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_COS_AC_PROFILE_INFO_SET_AC_PROFILE_INFO_SET_PROFILE_NDX_ID, 
    "profile_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  profile_ndx:\n\r"
    "  AC COS Profile. Range: 0 - 7. Set by soc_ppd_l2_lif_ac_add().  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos ac_profile_info_set profile_ndx 0 map_table 0 dp 0 tc 0 type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(28)}, 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_COS_AC_PROFILE_INFO_SET_AC_PROFILE_INFO_SET_PROFILE_INFO_MAP_TABLE_ID, 
    "map_table", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  profile_info.map_table:\n\r"
    "  Selects table for mapping. Relevant only if the type has MAP. To fill this\n\r"
    "  mapping tables use\n\r"
    "  soc_ppd_lif_cos_profile_map_l2_info_set()/soc_ppd_lif_cos_profile_map_ip_info_s\n\r"
    "  t() Range: 0 - 15.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos ac_profile_info_set profile_ndx 0 map_table 0 dp 0 tc 0 type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(28)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_COS_AC_PROFILE_INFO_SET_AC_PROFILE_INFO_SET_PROFILE_INFO_DP_ID, 
    "dp", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  profile_info.dp:\n\r"
    "  Drop Precedence value. Relevant only if the type has FORCE.Range: 0 - 3.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos ac_profile_info_set profile_ndx 0 map_table 0 dp 0 tc 0 type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(28)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_COS_AC_PROFILE_INFO_SET_AC_PROFILE_INFO_SET_PROFILE_INFO_TC_ID, 
    "tc", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  profile_info.tc:\n\r"
    "  Traffic Class value. Relevant only if the type has FORCE.Range: 0 - 7.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos ac_profile_info_set profile_ndx 0 map_table 0 dp 0 tc 0 type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(28)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_COS_AC_PROFILE_INFO_SET_AC_PROFILE_INFO_SET_PROFILE_INFO_TYPE_ID, 
    "type", 
    (PARAM_VAL_RULES *)&SOC_PPC_LIF_COS_AC_PROFILE_TYPE_rule[0], 
    (sizeof(SOC_PPC_LIF_COS_AC_PROFILE_TYPE_rule) / sizeof(SOC_PPC_LIF_COS_AC_PROFILE_TYPE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  profile_info.type:\n\r"
    "  Profile type, whether to force to const values or to map from packet fields.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos ac_profile_info_set profile_ndx 0 map_table 0 dp 0 tc 0 type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(28)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_COS_AC_PROFILE_INFO_GET_AC_PROFILE_INFO_GET_ID, 
    "ac_profile_info_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Sets COS information of AC COS Profile including(FORCE to const values, map\n\r"
    "  field from the packet and select mapping table) \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos ac_profile_info_get profile_ndx 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(29)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_COS_AC_PROFILE_INFO_GET_AC_PROFILE_INFO_GET_PROFILE_NDX_ID, 
    "profile_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  profile_ndx:\n\r"
    "  AC COS Profile. Range: 0 - 7. Set by soc_ppd_l2_lif_ac_add().  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos ac_profile_info_get profile_ndx 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(29)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_COS_PROFILE_MAP_L2_INFO_SET_PROFILE_MAP_L2_INFO_SET_ID, 
    "profile_map_l2_info_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set mapping from L2 VLAN Tag fields to DP and TC.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos profile_map_l2_info_set map_tbl_ndx 0 incoming_dei 0\n\r"
    "  incoming_up 0 outer_tpid 0 overwrite_dp 0 dp 0 overwrite_tc 0 tc 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(30)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_COS_PROFILE_MAP_L2_INFO_SET_PROFILE_MAP_L2_INFO_SET_MAP_TBL_NDX_ID, 
    "map_tbl_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  map_tbl_ndx:\n\r"
    "  Mapping table ID. Range: 0 - 15.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos profile_map_l2_info_set map_tbl_ndx 0 incoming_dei 0\n\r"
    "  incoming_up 0 outer_tpid 0 overwrite_dp 0 dp 0 overwrite_tc 0 tc 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(30)}, 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_COS_PROFILE_MAP_L2_INFO_SET_PROFILE_MAP_L2_INFO_SET_MAP_KEY_INCOMING_DEI_ID, 
    "incoming_dei", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  map_key.incoming_dei:\n\r"
    "  Incoming DEI on the packet. If the packet has C-Tag, this should be zero\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos profile_map_l2_info_set map_tbl_ndx 0 incoming_dei 0\n\r"
    "  incoming_up 0 outer_tpid 0 overwrite_dp 0 dp 0 overwrite_tc 0 tc 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(30)}, 
    4, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_COS_PROFILE_MAP_L2_INFO_SET_PROFILE_MAP_L2_INFO_SET_MAP_KEY_INCOMING_UP_ID, 
    "incoming_up", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  map_key.incoming_up:\n\r"
    "  Incoming UP/PCP on the VLAN tag of the packet\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos profile_map_l2_info_set map_tbl_ndx 0 incoming_dei 0\n\r"
    "  incoming_up 0 outer_tpid 0 overwrite_dp 0 dp 0 overwrite_tc 0 tc 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(30)}, 
    5, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_COS_PROFILE_MAP_L2_INFO_SET_PROFILE_MAP_L2_INFO_SET_MAP_KEY_OUTER_TPID_ID, 
    "outer_tpid", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  map_key.outer_tpid:\n\r"
    "  The outer TPID on the packet could be 0 - for None1 - port outer TPID2 - port\n\r"
    "  inner TPID3 - ISID - TPID\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos profile_map_l2_info_set map_tbl_ndx 0 incoming_dei 0\n\r"
    "  incoming_up 0 outer_tpid 0 overwrite_dp 0 dp 0 overwrite_tc 0 tc 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(30)}, 
    6, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_COS_PROFILE_MAP_L2_INFO_SET_PROFILE_MAP_L2_INFO_SET_MAP_VALUE_DP_ID, 
    "dp", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  map_value.dp:\n\r"
    "  Drop Precedence value.Range: 0 - 3.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos profile_map_l2_info_set map_tbl_ndx 0 incoming_dei 0\n\r"
    "  incoming_up 0 outer_tpid 0 overwrite_dp 0 dp 0 overwrite_tc 0 tc 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(30)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_COS_PROFILE_MAP_L2_INFO_SET_PROFILE_MAP_L2_INFO_SET_MAP_VALUE_TC_ID, 
    "tc", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  map_value.tc:\n\r"
    "  Traffic Class value.Range: 0 - 7.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos profile_map_l2_info_set map_tbl_ndx 0 incoming_dei 0\n\r"
    "  incoming_up 0 outer_tpid 0 overwrite_dp 0 dp 0 overwrite_tc 0 tc 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(30)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_COS_PROFILE_MAP_L2_INFO_GET_PROFILE_MAP_L2_INFO_GET_ID, 
    "profile_map_l2_info_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set mapping from L2 VLAN Tag fields to DP and TC.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos profile_map_l2_info_get map_tbl_ndx 0 incoming_dei 0\n\r"
    "  incoming_up 0 outer_tpid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(31)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_COS_PROFILE_MAP_L2_INFO_GET_PROFILE_MAP_L2_INFO_GET_MAP_TBL_NDX_ID, 
    "map_tbl_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  map_tbl_ndx:\n\r"
    "  Mapping table ID. Range: 0 - 15.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos profile_map_l2_info_get map_tbl_ndx 0 incoming_dei 0\n\r"
    "  incoming_up 0 outer_tpid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(31)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_COS_PROFILE_MAP_L2_INFO_GET_PROFILE_MAP_L2_INFO_GET_MAP_KEY_INCOMING_DEI_ID, 
    "incoming_dei", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  map_key.incoming_dei:\n\r"
    "  Incoming DEI on the packet. If the packet has C-Tag, this should be zero\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos profile_map_l2_info_get map_tbl_ndx 0 incoming_dei 0\n\r"
    "  incoming_up 0 outer_tpid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(31)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_COS_PROFILE_MAP_L2_INFO_GET_PROFILE_MAP_L2_INFO_GET_MAP_KEY_INCOMING_UP_ID, 
    "incoming_up", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  map_key.incoming_up:\n\r"
    "  Incoming UP/PCP on the VLAN tag of the packet\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos profile_map_l2_info_get map_tbl_ndx 0 incoming_dei 0\n\r"
    "  incoming_up 0 outer_tpid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(31)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_COS_PROFILE_MAP_L2_INFO_GET_PROFILE_MAP_L2_INFO_GET_MAP_KEY_OUTER_TPID_ID, 
    "outer_tpid", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  map_key.outer_tpid:\n\r"
    "  The outer TPID on the packet could be 0 - for None1 - port outer TPID2 - port\n\r"
    "  inner TPID3 - ISID - TPID\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos profile_map_l2_info_get map_tbl_ndx 0 incoming_dei 0\n\r"
    "  incoming_up 0 outer_tpid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(31)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_COS_PROFILE_MAP_IP_INFO_SET_PROFILE_MAP_IP_INFO_SET_ID, 
    "profile_map_ip_info_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set mapping from IP header fields (DSCP) to DP and TC.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos profile_map_ip_info_set map_tbl_ndx 0 dscp 0 overwrite_dp\n\r"
    "  0 dp 0 overwrite_tc 0 tc 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(0)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_COS_PROFILE_MAP_IP_INFO_SET_PROFILE_MAP_IP_INFO_SET_MAP_TBL_NDX_ID, 
    "map_tbl_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  map_tbl_ndx:\n\r"
    "  Mapping table ID. Range: 0 - 15.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos profile_map_ip_info_set map_tbl_ndx 0 dscp 0 overwrite_dp\n\r"
    "  0 dp 0 overwrite_tc 0 tc 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(0)}, 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_COS_PROFILE_MAP_IP_INFO_SET_PROFILE_MAP_IP_INFO_SET_MAP_KEY_DSCP_ID, 
    "tos", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  map_key.tos:\n\r"
    "  Differentiated Services Code Point (DSCP) in the header of IP\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos profile_map_ip_info_set map_tbl_ndx 0 dscp 0 overwrite_dp\n\r"
    "  0 dp 0 overwrite_tc 0 tc 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(0)}, 
    4, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_COS_PROFILE_MAP_IP_INFO_SET_PROFILE_MAP_IP_INFO_SET_MAP_KEY_IP_TYPE_ID, 
    "ip_type", 
    (PARAM_VAL_RULES *)&SOC_SAND_PP_IP_TYPE_rule[0], 
    (sizeof(SOC_SAND_PP_IP_TYPE_rule) / sizeof(SOC_SAND_PP_IP_TYPE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  map_key.ip_type:\n\r"
    "  IP packet type IPv4 or IPv6. In Petra has to be either SOC_SAND_PP_IP_TYPE_IPV6\n\r"
    "  or SOC_SAND_PP_IP_TYPE_IPV4. In T20E has to be SOC_SAND_PP_IP_TYPE_ALL.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos profile_map_ip_info_set map_tbl_ndx 0 tos 0 ip_type 0x0\n\r"
    "  overwrite_dp 0 dp 0 overwrite_tc 0 tc 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(0)}, 
    5, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },
  { 
    SOC_PARAM_PPD_LIF_COS_PROFILE_MAP_IP_INFO_SET_PROFILE_MAP_IP_INFO_SET_MAP_VALUE_DP_ID, 
    "dp", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  map_value.dp:\n\r"
    "  Drop Precedence value.Range: 0 - 3.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos profile_map_ip_info_set map_tbl_ndx 0 dscp 0 overwrite_dp\n\r"
    "  0 dp 0 overwrite_tc 0 tc 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(0)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_COS_PROFILE_MAP_IP_INFO_SET_PROFILE_MAP_IP_INFO_SET_MAP_VALUE_TC_ID, 
    "tc", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  map_value.tc:\n\r"
    "  Traffic Class value.Range: 0 - 7.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos profile_map_ip_info_set map_tbl_ndx 0 dscp 0 overwrite_dp\n\r"
    "  0 dp 0 overwrite_tc 0 tc 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(0)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_COS_PROFILE_MAP_IP_INFO_GET_PROFILE_MAP_IP_INFO_GET_ID, 
    "profile_map_ip_info_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set mapping from IP header fields (DSCP) to DP and TC.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos profile_map_ip_info_get map_tbl_ndx 0 dscp 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(1)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_COS_PROFILE_MAP_IP_INFO_GET_PROFILE_MAP_IP_INFO_GET_MAP_TBL_NDX_ID, 
    "map_tbl_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  map_tbl_ndx:\n\r"
    "  Mapping table ID. Range: 0 - 15.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos profile_map_ip_info_get map_tbl_ndx 0 dscp 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(1)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_COS_PROFILE_MAP_IP_INFO_GET_PROFILE_MAP_IP_INFO_GET_MAP_KEY_DSCP_ID, 
    "tos", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  map_key.tos:\n\r"
    "  Differentiated Services Code Point (DSCP) in the header of IP\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos profile_map_ip_info_get map_tbl_ndx 0 dscp 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(1)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_COS_PROFILE_MAP_IP_INFO_GET_PROFILE_MAP_IP_INFO_GET_MAP_KEY_IP_TYPE_ID, 
    "ip_type", 
    (PARAM_VAL_RULES *)&SOC_SAND_PP_IP_TYPE_rule[0], 
    (sizeof(SOC_SAND_PP_IP_TYPE_rule) / sizeof(SOC_SAND_PP_IP_TYPE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  map_key.ip_type:\n\r"
    "  IP packet type IPv4 or IPv6. In Petra has to be either SOC_SAND_PP_IP_TYPE_IPV6\n\r"
    "  or SOC_SAND_PP_IP_TYPE_IPV4. In T20E has to be SOC_SAND_PP_IP_TYPE_ALL.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos profile_map_ip_info_get map_tbl_ndx 0 tos 0 ip_type 0x0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(1)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_COS_PWE_PROFILE_INFO_SET_PWE_PROFILE_INFO_SET_ID, 
    "pwe_profile_info_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Sets COS Profile information (FORCE to const values, map field from the\n\r"
    "  packet and select mapping table) \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos pwe_profile_info_set profile_ndx 0 map_table 0 dp 0 tc 0 type\n\r"
    "  0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(2)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_COS_PWE_PROFILE_INFO_SET_PWE_PROFILE_INFO_SET_PROFILE_NDX_ID, 
    "profile_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  profile_ndx:\n\r"
    "  Profile. Range: 0 - 7.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos pwe_profile_info_set profile_ndx 0 map_table 0 dp 0 tc 0 type\n\r"
    "  0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(2)}, 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_COS_PWE_PROFILE_INFO_SET_PWE_PROFILE_INFO_SET_PROFILE_INFO_MAP_TABLE_ID, 
    "map_table", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  profile_info.map_table:\n\r"
    "  Selects table for mapping. Relevant only if the type has MAP.Range: 0 - 3.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos pwe_profile_info_set profile_ndx 0 map_table 0 dp 0 tc 0 type\n\r"
    "  0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(2)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_COS_PWE_PROFILE_INFO_SET_PWE_PROFILE_INFO_SET_PROFILE_INFO_DP_ID, 
    "dp", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  profile_info.dp:\n\r"
    "  Drop Precedence value. Relevant only if the type has FORCE.Range: 0 - 3.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos pwe_profile_info_set profile_ndx 0 map_table 0 dp 0 tc 0 type\n\r"
    "  0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(2)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_COS_PWE_PROFILE_INFO_SET_PWE_PROFILE_INFO_SET_PROFILE_INFO_TC_ID, 
    "tc", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  profile_info.tc:\n\r"
    "  Traffic Class value. Relevant only if the type has FORCE.Range: 0 - 7.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos pwe_profile_info_set profile_ndx 0 map_table 0 dp 0 tc 0 type\n\r"
    "  0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(2)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_COS_PWE_PROFILE_INFO_SET_PWE_PROFILE_INFO_SET_PROFILE_INFO_TYPE_ID, 
    "type", 
    (PARAM_VAL_RULES *)&SOC_PPC_LIF_COS_PWE_PROFILE_TYPE_rule[0], 
    (sizeof(SOC_PPC_LIF_COS_PWE_PROFILE_TYPE_rule) / sizeof(SOC_PPC_LIF_COS_PWE_PROFILE_TYPE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  profile_info.type:\n\r"
    "  Profile type. Whether to force to const values or to map from packet fields.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos pwe_profile_info_set profile_ndx 0 map_table 0 dp 0 tc 0 type\n\r"
    "  0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(2)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_COS_PWE_PROFILE_INFO_GET_PWE_PROFILE_INFO_GET_ID, 
    "pwe_profile_info_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Sets COS Profile information (FORCE to const values, map field from the\n\r"
    "  packet and select mapping table) \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos pwe_profile_info_get profile_ndx 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(3)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_COS_PWE_PROFILE_INFO_GET_PWE_PROFILE_INFO_GET_PROFILE_NDX_ID, 
    "profile_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  profile_ndx:\n\r"
    "  Profile. Range: 0 - 7.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos pwe_profile_info_get profile_ndx 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(3)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_COS_PROFILE_MAP_MPLS_LABEL_INFO_SET_PROFILE_MAP_MPLS_LABEL_INFO_SET_ID, 
    "profile_map_mpls_label_info_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set mapping from label fields (EXP) to DP and TC.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos profile_map_mpls_label_info_set map_tbl_ndx 0 in_exp 0\n\r"
    "  overwrite_dp 0 dp 0 overwrite_tc 0 tc 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(4)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_COS_PROFILE_MAP_MPLS_LABEL_INFO_SET_PROFILE_MAP_MPLS_LABEL_INFO_SET_MAP_TBL_NDX_ID, 
    "map_tbl_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  map_tbl_ndx:\n\r"
    "  Mapping table ID. Range: 0 - 15.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos profile_map_mpls_label_info_set map_tbl_ndx 0 in_exp 0\n\r"
    "  overwrite_dp 0 dp 0 overwrite_tc 0 tc 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(4)}, 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_COS_PROFILE_MAP_MPLS_LABEL_INFO_SET_PROFILE_MAP_MPLS_LABEL_INFO_SET_MAP_KEY_IN_EXP_ID, 
    "in_exp", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  map_key.in_exp:\n\r"
    "  Incoming EXP in the label of the packet.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos profile_map_mpls_label_info_set map_tbl_ndx 0 in_exp 0\n\r"
    "  overwrite_dp 0 dp 0 overwrite_tc 0 tc 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(4)}, 
    4, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_COS_PROFILE_MAP_MPLS_LABEL_INFO_SET_PROFILE_MAP_MPLS_LABEL_INFO_SET_MAP_VALUE_DP_ID, 
    "dp", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  map_value.dp:\n\r"
    "  Drop Precedence value.Range: 0 - 3.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos profile_map_mpls_label_info_set map_tbl_ndx 0 in_exp 0\n\r"
    "  overwrite_dp 0 dp 0 overwrite_tc 0 tc 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(4)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_COS_PROFILE_MAP_MPLS_LABEL_INFO_SET_PROFILE_MAP_MPLS_LABEL_INFO_SET_MAP_VALUE_TC_ID, 
    "tc", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  map_value.tc:\n\r"
    "  Traffic Class value.Range: 0 - 7.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos profile_map_mpls_label_info_set map_tbl_ndx 0 in_exp 0\n\r"
    "  overwrite_dp 0 dp 0 overwrite_tc 0 tc 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(4)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_COS_PROFILE_MAP_MPLS_LABEL_INFO_GET_PROFILE_MAP_MPLS_LABEL_INFO_GET_ID, 
    "profile_map_mpls_label_info_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set mapping from label fields (EXP) to DP and TC.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos profile_map_mpls_label_info_get map_tbl_ndx 0 in_exp 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(5)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_COS_PROFILE_MAP_MPLS_LABEL_INFO_GET_PROFILE_MAP_MPLS_LABEL_INFO_GET_MAP_TBL_NDX_ID, 
    "map_tbl_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  map_tbl_ndx:\n\r"
    "  Mapping table ID. Range: 0 - 15.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos profile_map_mpls_label_info_get map_tbl_ndx 0 in_exp 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(5)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_COS_PROFILE_MAP_MPLS_LABEL_INFO_GET_PROFILE_MAP_MPLS_LABEL_INFO_GET_MAP_KEY_IN_EXP_ID, 
    "in_exp", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  map_key.in_exp:\n\r"
    "  Incoming EXP in the label of the packet.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos profile_map_mpls_label_info_get map_tbl_ndx 0 in_exp 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(5)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_COS_OPCODE_TYPES_SET_OPCODE_TYPES_SET_ID, 
    "opcode_types_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set the Opcode type.Set the mapping of Class of Service attributes to the\n\r"
    "  AC-Offset. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos opcode_types_set opcode_ndx 0 opcode_type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(6)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_COS_OPCODE_TYPES_SET_OPCODE_TYPES_SET_OPCODE_NDX_ID, 
    "opcode_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  opcode_ndx:\n\r"
    "  The ID of the configured Opcode.Range: 1 - 3.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos opcode_types_set opcode_ndx 0 opcode_type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(6)}, 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_COS_OPCODE_TYPES_SET_OPCODE_TYPES_SET_OPCODE_TYPE_ID, 
    "use_l3", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  opcode_type:\n\r"
    "  The CoS attributes that will affect the AC-Offset setting.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos opcode_types_set opcode_ndx 0 opcode_type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(6)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_COS_OPCODE_TYPES_SET_OPCODE_TYPES_SET_OPCODE_TYPE_UES_TC_DP_ID, 
    "use_tc_dp", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  opcode_type:\n\r"
    "  The CoS attributes that will affect the AC-Offset setting.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos opcode_types_set opcode_ndx 0 opcode_type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(6)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_COS_OPCODE_TYPES_GET_OPCODE_TYPES_GET_ID, 
    "opcode_types_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set the Opcode type.Set the mapping of Class of Service attributes to the\n\r"
    "  AC-Offset. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos opcode_types_get opcode_ndx 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(7)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_COS_OPCODE_TYPES_GET_OPCODE_TYPES_GET_OPCODE_NDX_ID, 
    "opcode_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  opcode_ndx:\n\r"
    "  The ID of the configured Opcode.Range: 1 - 3.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos opcode_types_get opcode_ndx 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(7)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_COS_OPCODE_IPV6_TOS_MAP_SET_OPCODE_IPV6_TOS_MAP_SET_ID, 
    "opcode_ipv6_tos_map_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set the Opcode according to IPv6 TOS field\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos opcode_ipv6_tos_map_set opcode_ndx 0 ipv6_tos_ndx 0 ac_offset\n\r"
    "  0 is_qos_only 0 is_packet_valid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(8)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_COS_OPCODE_IPV6_TOS_MAP_SET_OPCODE_IPV6_TOS_MAP_SET_OPCODE_NDX_ID, 
    "opcode_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  opcode_ndx:\n\r"
    "  The ID of the configured Opcode.Range: 1 - 3.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos opcode_ipv6_tos_map_set opcode_ndx 0 ipv6_tos_ndx 0 ac_offset\n\r"
    "  0 is_qos_only 0 is_packet_valid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(8)}, 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_COS_OPCODE_IPV6_TOS_MAP_SET_OPCODE_IPV6_TOS_MAP_SET_IPV6_TOS_NDX_ID, 
    "ipv6_tos_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  ipv6_tos_ndx:\n\r"
    "  IPv6 TOS value, as arriving in the packet. Range: 0 - 255.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos opcode_ipv6_tos_map_set opcode_ndx 0 ipv6_tos_ndx 0 ac_offset\n\r"
    "  0 is_qos_only 0 is_packet_valid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(8)}, 
    4, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_COS_OPCODE_IPV6_TOS_MAP_SET_OPCODE_IPV6_TOS_MAP_SET_ACTION_INFO_AC_OFFSET_ID, 
    "ac_offset", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  action_info.ac_offset:\n\r"
    "  AC-Offset.The AC ID is Base-LIF-ID + the AC-Offset.The updated AC ID may\n\r"
    "  affect the QoS processing, or the entire processing.E.G, when 'is_qos_only'\n\r"
    "  is negated, and AC learning is supported, the AC that to be learn on the\n\r"
    "  remote devices is Base-LIF-ID + the AC-Offset.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos opcode_ipv6_tos_map_set opcode_ndx 0 ipv6_tos_ndx 0 ac_offset\n\r"
    "  0 is_qos_only 0 is_packet_valid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(8)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_COS_OPCODE_IPV6_TOS_MAP_SET_OPCODE_IPV6_TOS_MAP_SET_ACTION_INFO_IS_QOS_ONLY_ID, 
    "is_qos_only", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  action_info.is_qos_only:\n\r"
    "  When TRUE, the packet Logical Interface ID is not affected by the\n\r"
    "  'ac_offset', but it is affecting the QoS related proccessnig\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos opcode_ipv6_tos_map_set opcode_ndx 0 ipv6_tos_ndx 0 ac_offset\n\r"
    "  0 is_qos_only 0 is_packet_valid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(8)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_COS_OPCODE_IPV6_TOS_MAP_SET_OPCODE_IPV6_TOS_MAP_SET_ACTION_INFO_IS_PACKET_VALID_ID, 
    "is_packet_valid", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  action_info.is_packet_valid:\n\r"
    "  When FALSE, the packet is invalid.For example, packets may be allowed on a\n\r"
    "  specific port*VLAN only with specific UP?PCP values\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos opcode_ipv6_tos_map_set opcode_ndx 0 ipv6_tos_ndx 0 ac_offset\n\r"
    "  0 is_qos_only 0 is_packet_valid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(8)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_COS_OPCODE_IPV6_TOS_MAP_GET_OPCODE_IPV6_TOS_MAP_GET_ID, 
    "opcode_ipv6_tos_map_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set the Opcode according to IPv6 TOS field\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos opcode_ipv6_tos_map_get opcode_ndx 0 ipv6_tos_ndx 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(9)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_COS_OPCODE_IPV6_TOS_MAP_GET_OPCODE_IPV6_TOS_MAP_GET_OPCODE_NDX_ID, 
    "opcode_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  opcode_ndx:\n\r"
    "  The ID of the configured Opcode.Range: 1 - 3.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos opcode_ipv6_tos_map_get opcode_ndx 0 ipv6_tos_ndx 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(9)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_COS_OPCODE_IPV6_TOS_MAP_GET_OPCODE_IPV6_TOS_MAP_GET_IPV6_TOS_NDX_ID, 
    "ipv6_tos_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  ipv6_tos_ndx:\n\r"
    "  IPv6 TOS value, as arriving in the packet. Range: 0 - 255.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos opcode_ipv6_tos_map_get opcode_ndx 0 ipv6_tos_ndx 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(9)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_COS_OPCODE_IPV4_TOS_MAP_SET_OPCODE_IPV4_TOS_MAP_SET_ID, 
    "opcode_ipv4_tos_map_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set the Opcode according to IPv4 TOS field\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos opcode_ipv4_tos_map_set opcode_ndx 0 ipv4_tos_ndx 0 ac_offset\n\r"
    "  0 is_qos_only 0 is_packet_valid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(10)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_COS_OPCODE_IPV4_TOS_MAP_SET_OPCODE_IPV4_TOS_MAP_SET_OPCODE_NDX_ID, 
    "opcode_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  opcode_ndx:\n\r"
    "  The ID of the configured Opcode.Range: 1 - 3.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos opcode_ipv4_tos_map_set opcode_ndx 0 ipv4_tos_ndx 0 ac_offset\n\r"
    "  0 is_qos_only 0 is_packet_valid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(10)}, 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_COS_OPCODE_IPV4_TOS_MAP_SET_OPCODE_IPV4_TOS_MAP_SET_IPV4_TOS_NDX_ID, 
    "ipv4_tos_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  ipv4_tos_ndx:\n\r"
    "  IPv4 TOS value, as arriving in the packet. Range: 0 - 255.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos opcode_ipv4_tos_map_set opcode_ndx 0 ipv4_tos_ndx 0 ac_offset\n\r"
    "  0 is_qos_only 0 is_packet_valid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(10)}, 
    4, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_COS_OPCODE_IPV4_TOS_MAP_SET_OPCODE_IPV4_TOS_MAP_SET_ACTION_INFO_AC_OFFSET_ID, 
    "ac_offset", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  action_info.ac_offset:\n\r"
    "  AC-Offset.The AC ID is Base-LIF-ID + the AC-Offset.The updated AC ID may\n\r"
    "  affect the QoS processing, or the entire processing.E.G, when 'is_qos_only'\n\r"
    "  is negated, and AC learning is supported, the AC that to be learn on the\n\r"
    "  remote devices is Base-LIF-ID + the AC-Offset.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos opcode_ipv4_tos_map_set opcode_ndx 0 ipv4_tos_ndx 0 ac_offset\n\r"
    "  0 is_qos_only 0 is_packet_valid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(10)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_COS_OPCODE_IPV4_TOS_MAP_SET_OPCODE_IPV4_TOS_MAP_SET_ACTION_INFO_IS_QOS_ONLY_ID, 
    "is_qos_only", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  action_info.is_qos_only:\n\r"
    "  When TRUE, the packet Logical Interface ID is not affected by the\n\r"
    "  'ac_offset', but it is affecting the QoS related proccessnig\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos opcode_ipv4_tos_map_set opcode_ndx 0 ipv4_tos_ndx 0 ac_offset\n\r"
    "  0 is_qos_only 0 is_packet_valid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(10)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_COS_OPCODE_IPV4_TOS_MAP_SET_OPCODE_IPV4_TOS_MAP_SET_ACTION_INFO_IS_PACKET_VALID_ID, 
    "is_packet_valid", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  action_info.is_packet_valid:\n\r"
    "  When FALSE, the packet is invalid.For example, packets may be allowed on a\n\r"
    "  specific port*VLAN only with specific UP?PCP values\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos opcode_ipv4_tos_map_set opcode_ndx 0 ipv4_tos_ndx 0 ac_offset\n\r"
    "  0 is_qos_only 0 is_packet_valid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(10)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_COS_OPCODE_IPV4_TOS_MAP_GET_OPCODE_IPV4_TOS_MAP_GET_ID, 
    "opcode_ipv4_tos_map_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set the Opcode according to IPv4 TOS field\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos opcode_ipv4_tos_map_get opcode_ndx 0 ipv4_tos_ndx 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(11)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_COS_OPCODE_IPV4_TOS_MAP_GET_OPCODE_IPV4_TOS_MAP_GET_OPCODE_NDX_ID, 
    "opcode_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  opcode_ndx:\n\r"
    "  The ID of the configured Opcode.Range: 1 - 3.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos opcode_ipv4_tos_map_get opcode_ndx 0 ipv4_tos_ndx 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(11)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_COS_OPCODE_IPV4_TOS_MAP_GET_OPCODE_IPV4_TOS_MAP_GET_IPV4_TOS_NDX_ID, 
    "ipv4_tos_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  ipv4_tos_ndx:\n\r"
    "  IPv4 TOS value, as arriving in the packet. Range: 0 - 255.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos opcode_ipv4_tos_map_get opcode_ndx 0 ipv4_tos_ndx 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(11)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_COS_OPCODE_TC_DP_MAP_SET_OPCODE_TC_DP_MAP_SET_ID, 
    "opcode_tc_dp_map_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set the Opcode according to Traffic Class and Drop Precedence\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos opcode_tc_dp_map_set opcode_ndx 0 tc_ndx 0 dp_ndx 0 ac_offset\n\r"
    "  0 is_qos_only 0 is_packet_valid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(12)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_COS_OPCODE_TC_DP_MAP_SET_OPCODE_TC_DP_MAP_SET_OPCODE_NDX_ID, 
    "opcode_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  opcode_ndx:\n\r"
    "  The ID of the configured Opcode.Range: 1 - 3.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos opcode_tc_dp_map_set opcode_ndx 0 tc_ndx 0 dp_ndx 0 ac_offset\n\r"
    "  0 is_qos_only 0 is_packet_valid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(12)}, 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_COS_OPCODE_TC_DP_MAP_SET_OPCODE_TC_DP_MAP_SET_TC_NDX_ID, 
    "tc_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  tc_ndx:\n\r"
    "  Traffic Class. Range: 0 - 7.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos opcode_tc_dp_map_set opcode_ndx 0 tc_ndx 0 dp_ndx 0 ac_offset\n\r"
    "  0 is_qos_only 0 is_packet_valid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(12)}, 
    4, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_COS_OPCODE_TC_DP_MAP_SET_OPCODE_TC_DP_MAP_SET_DP_NDX_ID, 
    "dp_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  dp_ndx:\n\r"
    "  Drop Precedence. Range: 0 - 3.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos opcode_tc_dp_map_set opcode_ndx 0 tc_ndx 0 dp_ndx 0 ac_offset\n\r"
    "  0 is_qos_only 0 is_packet_valid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(12)}, 
    5, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_COS_OPCODE_TC_DP_MAP_SET_OPCODE_TC_DP_MAP_SET_ACTION_INFO_AC_OFFSET_ID, 
    "ac_offset", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  action_info.ac_offset:\n\r"
    "  AC-Offset.The AC ID is Base-LIF-ID + the AC-Offset.The updated AC ID may\n\r"
    "  affect the QoS processing, or the entire processing.E.G, when 'is_qos_only'\n\r"
    "  is negated, and AC learning is supported, the AC that to be learn on the\n\r"
    "  remote devices is Base-LIF-ID + the AC-Offset.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos opcode_tc_dp_map_set opcode_ndx 0 tc_ndx 0 dp_ndx 0 ac_offset\n\r"
    "  0 is_qos_only 0 is_packet_valid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(12)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_COS_OPCODE_TC_DP_MAP_SET_OPCODE_TC_DP_MAP_SET_ACTION_INFO_IS_QOS_ONLY_ID, 
    "is_qos_only", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  action_info.is_qos_only:\n\r"
    "  When TRUE, the packet Logical Interface ID is not affected by the\n\r"
    "  'ac_offset', but it is affecting the QoS related proccessnig\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos opcode_tc_dp_map_set opcode_ndx 0 tc_ndx 0 dp_ndx 0 ac_offset\n\r"
    "  0 is_qos_only 0 is_packet_valid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(12)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_COS_OPCODE_TC_DP_MAP_SET_OPCODE_TC_DP_MAP_SET_ACTION_INFO_IS_PACKET_VALID_ID, 
    "is_packet_valid", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  action_info.is_packet_valid:\n\r"
    "  When FALSE, the packet is invalid.For example, packets may be allowed on a\n\r"
    "  specific port*VLAN only with specific UP?PCP values\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos opcode_tc_dp_map_set opcode_ndx 0 tc_ndx 0 dp_ndx 0 ac_offset\n\r"
    "  0 is_qos_only 0 is_packet_valid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(12)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_COS_OPCODE_TC_DP_MAP_GET_OPCODE_TC_DP_MAP_GET_ID, 
    "opcode_tc_dp_map_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set the Opcode according to Traffic Class and Drop Precedence\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos opcode_tc_dp_map_get opcode_ndx 0 tc_ndx 0 dp_ndx 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(13)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_COS_OPCODE_TC_DP_MAP_GET_OPCODE_TC_DP_MAP_GET_OPCODE_NDX_ID, 
    "opcode_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  opcode_ndx:\n\r"
    "  The ID of the configured Opcode.Range: 1 - 3.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos opcode_tc_dp_map_get opcode_ndx 0 tc_ndx 0 dp_ndx 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(13)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_COS_OPCODE_TC_DP_MAP_GET_OPCODE_TC_DP_MAP_GET_TC_NDX_ID, 
    "tc_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  tc_ndx:\n\r"
    "  Traffic Class. Range: 0 - 7.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos opcode_tc_dp_map_get opcode_ndx 0 tc_ndx 0 dp_ndx 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(13)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_COS_OPCODE_TC_DP_MAP_GET_OPCODE_TC_DP_MAP_GET_DP_NDX_ID, 
    "dp_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  dp_ndx:\n\r"
    "  Drop Precedence. Range: 0 - 3.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos opcode_tc_dp_map_get opcode_ndx 0 tc_ndx 0 dp_ndx 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(13)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_COS_OPCODE_VLAN_TAG_MAP_SET_OPCODE_VLAN_TAG_MAP_SET_ID, 
    "opcode_vlan_tag_map_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set the Opcode according to VLAN Tag\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos opcode_vlan_tag_map_set opcode_ndx 0 tag_type_ndx 0 pcp_ndx 0\n\r"
    "  dei_ndx 0 ac_offset 0 is_qos_only 0 is_packet_valid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(14)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_COS_OPCODE_VLAN_TAG_MAP_SET_OPCODE_VLAN_TAG_MAP_SET_OPCODE_NDX_ID, 
    "opcode_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  opcode_ndx:\n\r"
    "  The ID of the configured Opcode.Range: 1 - 3.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos opcode_vlan_tag_map_set opcode_ndx 0 tag_type_ndx 0 pcp_ndx 0\n\r"
    "  dei_ndx 0 ac_offset 0 is_qos_only 0 is_packet_valid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(14)}, 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_COS_OPCODE_VLAN_TAG_MAP_SET_OPCODE_VLAN_TAG_MAP_SET_TAG_TYPE_NDX_ID, 
    "outer_tpid_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  outer_tpid_ndx:\n\r"
    "  0-3.  \n\r"
    "the outer TPID on the packet could be 0 - for None1\n\r"
    "  port outer TPID2 - port inner TPID3 - ISID - TPID\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos opcode_vlan_tag_map_set opcode_ndx 0 tag_type_ndx 0 pcp_ndx 0\n\r"
    "  dei_ndx 0 ac_offset 0 is_qos_only 0 is_packet_valid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(14)}, 
    4, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_COS_OPCODE_VLAN_TAG_MAP_SET_OPCODE_VLAN_TAG_MAP_SET_PCP_NDX_ID, 
    "pcp_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pcp_ndx:\n\r"
    "  Priority Code Point. Range: 0 - 7.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos opcode_vlan_tag_map_set opcode_ndx 0 tag_type_ndx 0 pcp_ndx 0\n\r"
    "  dei_ndx 0 ac_offset 0 is_qos_only 0 is_packet_valid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(14)}, 
    5, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_COS_OPCODE_VLAN_TAG_MAP_SET_OPCODE_VLAN_TAG_MAP_SET_DEI_NDX_ID, 
    "dei_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  dei_ndx:\n\r"
    "  Drop Eligible Indicator. Range: 0 - 1.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos opcode_vlan_tag_map_set opcode_ndx 0 tag_type_ndx 0 pcp_ndx 0\n\r"
    "  dei_ndx 0 ac_offset 0 is_qos_only 0 is_packet_valid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(14)}, 
    6, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_COS_OPCODE_VLAN_TAG_MAP_SET_OPCODE_VLAN_TAG_MAP_SET_ACTION_INFO_AC_OFFSET_ID, 
    "ac_offset", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  action_info.ac_offset:\n\r"
    "  AC-Offset.The AC ID is Base-LIF-ID + the AC-Offset.The updated AC ID may\n\r"
    "  affect the QoS processing, or the entire processing.E.G, when 'is_qos_only'\n\r"
    "  is negated, and AC learning is supported, the AC that to be learn on the\n\r"
    "  remote devices is Base-LIF-ID + the AC-Offset.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos opcode_vlan_tag_map_set opcode_ndx 0 tag_type_ndx 0 pcp_ndx 0\n\r"
    "  dei_ndx 0 ac_offset 0 is_qos_only 0 is_packet_valid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(14)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_COS_OPCODE_VLAN_TAG_MAP_SET_OPCODE_VLAN_TAG_MAP_SET_ACTION_INFO_IS_QOS_ONLY_ID, 
    "is_qos_only", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  action_info.is_qos_only:\n\r"
    "  When TRUE, the packet Logical Interface ID is not affected by the\n\r"
    "  'ac_offset', but it is affecting the QoS related proccessnig\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos opcode_vlan_tag_map_set opcode_ndx 0 tag_type_ndx 0 pcp_ndx 0\n\r"
    "  dei_ndx 0 ac_offset 0 is_qos_only 0 is_packet_valid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(14)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_COS_OPCODE_VLAN_TAG_MAP_SET_OPCODE_VLAN_TAG_MAP_SET_ACTION_INFO_IS_PACKET_VALID_ID, 
    "is_packet_valid", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  action_info.is_packet_valid:\n\r"
    "  When FALSE, the packet is invalid.For example, packets may be allowed on a\n\r"
    "  specific port*VLAN only with specific UP?PCP values\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos opcode_vlan_tag_map_set opcode_ndx 0 tag_type_ndx 0 pcp_ndx 0\n\r"
    "  dei_ndx 0 ac_offset 0 is_qos_only 0 is_packet_valid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(14)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_COS_OPCODE_VLAN_TAG_MAP_GET_OPCODE_VLAN_TAG_MAP_GET_ID, 
    "opcode_vlan_tag_map_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set the Opcode according to VLAN Tag\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos opcode_vlan_tag_map_get opcode_ndx 0 tag_type_ndx 0 pcp_ndx 0\n\r"
    "  dei_ndx 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(15)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_COS_OPCODE_VLAN_TAG_MAP_GET_OPCODE_VLAN_TAG_MAP_GET_OPCODE_NDX_ID, 
    "opcode_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  opcode_ndx:\n\r"
    "  The ID of the configured Opcode.Range: 1 - 3.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos opcode_vlan_tag_map_get opcode_ndx 0 tag_type_ndx 0 pcp_ndx 0\n\r"
    "  dei_ndx 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(15)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_COS_OPCODE_VLAN_TAG_MAP_GET_OPCODE_VLAN_TAG_MAP_GET_TAG_TYPE_NDX_ID, 
    "outer_tpid_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  tag_type_ndx:\n\r"
    "  VLAN tag type S-TAG; C-TAG; I-TAG or none.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos opcode_vlan_tag_map_get opcode_ndx 0 tag_type_ndx 0 pcp_ndx 0\n\r"
    "  dei_ndx 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(15)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_COS_OPCODE_VLAN_TAG_MAP_GET_OPCODE_VLAN_TAG_MAP_GET_PCP_NDX_ID, 
    "pcp_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pcp_ndx:\n\r"
    "  Priority Code Point. Range: 0 - 7.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos opcode_vlan_tag_map_get opcode_ndx 0 tag_type_ndx 0 pcp_ndx 0\n\r"
    "  dei_ndx 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(15)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_COS_OPCODE_VLAN_TAG_MAP_GET_OPCODE_VLAN_TAG_MAP_GET_DEI_NDX_ID, 
    "dei_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  dei_ndx:\n\r"
    "  Drop Eligible Indicator. Range: 0 - 1.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos opcode_vlan_tag_map_get opcode_ndx 0 tag_type_ndx 0 pcp_ndx 0\n\r"
    "  dei_ndx 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(15)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_TABLE_GET_BLOCK_LIF_TABLE_GET_BLOCK_ID, 
    "lif_table_get_block", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Traverse the LIF Table entries (in specified range), and retrieve entries\n\r"
    "  that match the given rule.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos lif_table_get_block entries_type_bm 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(16)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_TABLE_GET_BLOCK_LIF_TABLE_GET_BLOCK_RULE_ENTRIES_TYPE_BM_ID, 
    "entries_type_bm", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  rule.entries_type_bm:\n\r"
    "  Bitmap that indicates which type of entries to retrieve. See\n\r"
    "  SOC_PPC_LIF_ENTRY_TYPE\n\r"
    "EMPTY =              0x1  \n\r"
    "AC =                 0x2  \n\r"
    "FIRST_AC_IN_GROUP =  0x4\n\r"
    "MIDDLE_AC_IN_GROUP = 0x8\n\r"
    "PWE =                0x10\n\r"
    "ISID =               0x20\n\r"
    "IP_TUNNEL_RIF =      0x40\n\r"
    "MPLS_TUNNEL_RIF =    0x80\n\r"
    "TRILL_NICK =         0x100\n\r"
    "ALL = 0xFFFFFFFF\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos lif_table_get_block entries_type_bm 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(16)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_TABLE_GET_BLOCK_LIF_TABLE_GET_BLOCK_RULE_ENTRIES_ACCESSED_ONLY_ID, 
    "accessed_only", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  rule.entries_type_bm:\n\r"
    "  return accessed entries only \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos lif_table_get_block entries_type_bm 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(16)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_TABLE_GET_BLOCK_LIF_TABLE_GET_BLOCK_START_FROM_ID, 
    "start_from", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  rule.entries_type_bm:\n\r"
    "  return accessed entries only \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos lif_table_get_block entries_type_bm 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(16)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_TABLE_ENTRY_GET_LIF_TABLE_ENTRY_GET_ID, 
    "lif_table_entry_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Enable updating LIF table entry attribute, without accessing the LIF KEY.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos lif_table_entry_get lif_ndx 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(17)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_TABLE_ENTRY_GET_LIF_TABLE_ENTRY_GET_LIF_NDX_ID, 
    "lif_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  lif_ndx:\n\r"
    "  Lif entry index  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos lif_table_entry_get lif_ndx 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(17)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_TABLE_ENTRY_UPDATE_LIF_TABLE_ENTRY_UPDATE_ID, 
    "lif_table_entry_update", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Enable updating LIF table entry attribute, without accessing the LIF KEY.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos lif_table_entry_update lif_ndx 0 index 0 fec_id 0\n\r"
    "  routing_enablers_bm 0 processing_type 0 vrf_id 0 uc_rpf_enable 0 rif_id 0\n\r"
    "  tpid2_index 0 tpid1_index 0 learn_enable 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0\n\r"
    "  cos_profile 0 tpid_profile_index 0 orientation 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 enable_learning 0\n\r"
    "  trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0 push_profile 0\n\r"
    "  label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0\n\r"
    "  default_frwrd_type 0 vsid 0 cos_profile 0 orientation 0 trap_action_profile_id\n\r"
    "  0 trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0\n\r"
    "  pcp_dei 0 edit_pcp_profile 0 vid 0 ing_vlan_edit_profile 0 tm_destination 0\n\r"
    "  is_learn_ac 0 enable_learning 0 vsid 0 type 0x1\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(18)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_TABLE_ENTRY_UPDATE_LIF_TABLE_ENTRY_UPDATE_LIF_NDX_ID, 
    "lif_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  lif_ndx:\n\r"
    "  Lif entry index  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos lif_table_entry_update lif_ndx 0 index 0 fec_id 0\n\r"
    "  routing_enablers_bm 0 processing_type 0 vrf_id 0 uc_rpf_enable 0 rif_id 0\n\r"
    "  tpid2_index 0 tpid1_index 0 learn_enable 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0\n\r"
    "  cos_profile 0 tpid_profile_index 0 orientation 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 enable_learning 0\n\r"
    "  trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0 push_profile 0\n\r"
    "  label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0\n\r"
    "  default_frwrd_type 0 vsid 0 cos_profile 0 orientation 0 trap_action_profile_id\n\r"
    "  0 trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0\n\r"
    "  pcp_dei 0 edit_pcp_profile 0 vid 0 ing_vlan_edit_profile 0 tm_destination 0\n\r"
    "  is_learn_ac 0 enable_learning 0 vsid 0 type 0x1\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(18)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  /*{ 
    SOC_PARAM_PPD_LIF_TABLE_ENTRY_UPDATE_LIF_TABLE_ENTRY_UPDATE_LIF_ENTRY_INFO_INDEX_ID, 
	"index",
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  lif_entry_info.index:\n\r"
    "  LIF index.  Needed when retrieved by the get block function\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos lif_table_entry_update lif_ndx 0 index 0 fec_id 0\n\r"
    "  routing_enablers_bm 0 processing_type 0 vrf_id 0 uc_rpf_enable 0 rif_id 0\n\r"
    "  tpid2_index 0 tpid1_index 0 learn_enable 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0\n\r"
    "  cos_profile 0 tpid_profile_index 0 orientation 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 enable_learning 0\n\r"
    "  trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0 push_profile 0\n\r"
    "  label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0\n\r"
    "  default_frwrd_type 0 vsid 0 cos_profile 0 orientation 0 trap_action_profile_id\n\r"
    "  0 trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0\n\r"
    "  pcp_dei 0 edit_pcp_profile 0 vid 0 ing_vlan_edit_profile 0 tm_destination 0\n\r"
    "  is_learn_ac 0 enable_learning 0 vsid 0 type 0x1\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(18)}, 
    LAST_ORDINAL, 
      (VAL_PROC_PTR)NULL 
  }, */
  { 
    SOC_PARAM_PPD_LIF_TABLE_ENTRY_UPDATE_LIF_TABLE_ENTRY_UPDATE_LIF_ENTRY_INFO_VALUE_TRILL_FEC_ID_ID, 
    "fec_id", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  lif_entry_info.value.trill.fec_id:\n\r"
    "  The FEC-ID that the TRILL Nickname is attached to.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos lif_table_entry_update lif_ndx 0 index 0 fec_id 0\n\r"
    "  routing_enablers_bm 0 processing_type 0 vrf_id 0 uc_rpf_enable 0 rif_id 0\n\r"
    "  tpid2_index 0 tpid1_index 0 learn_enable 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0\n\r"
    "  cos_profile 0 tpid_profile_index 0 orientation 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 enable_learning 0\n\r"
    "  trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0 push_profile 0\n\r"
    "  label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0\n\r"
    "  default_frwrd_type 0 vsid 0 cos_profile 0 orientation 0 trap_action_profile_id\n\r"
    "  0 trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0\n\r"
    "  pcp_dei 0 edit_pcp_profile 0 vid 0 ing_vlan_edit_profile 0 tm_destination 0\n\r"
    "  is_learn_ac 0 enable_learning 0 vsid 0 type 0x1\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(18)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },
  { 
    SOC_PARAM_PPD_LIF_TABLE_ENTRY_UPDATE_LIF_TABLE_ENTRY_UPDATE_LIF_ENTRY_INFO_VALUE_TRILL_LEARN_ENABLE_ID, 
    "learn_enable", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  lif_entry_info.value.trill.learn_enable:\n\r"
    "  Indicate whether learning of ingress Nick-name is enable on this interface.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos lif_table_entry_update lif_ndx 0 index 0 fec_id 0\n\r"
    "  routing_enablers_bm 0 processing_type 0 vrf_id 0 uc_rpf_enable 0 rif_id 0\n\r"
    "  tpid2_index 0 tpid1_index 0 learn_enable 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0\n\r"
    "  cos_profile 0 tpid_profile_index 0 orientation 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 enable_learning 0\n\r"
    "  trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0 push_profile 0\n\r"
    "  label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0\n\r"
    "  default_frwrd_type 0 vsid 0 cos_profile 0 orientation 0 trap_action_profile_id\n\r"
    "  0 trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0\n\r"
    "  pcp_dei 0 edit_pcp_profile 0 vid 0 ing_vlan_edit_profile 0 tm_destination 0\n\r"
    "  is_learn_ac 0 enable_learning 0 vsid 0 type 0x1\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(18)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_TABLE_ENTRY_UPDATE_LIF_TABLE_ENTRY_UPDATE_LIF_ENTRY_INFO_VALUE_RIF_ROUTING_ENABLERS_BM_ID, 
    "rif_routing_enablers_bm", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  lif_entry_info.value.rif.routing_enablers_bm:\n\r"
    "  BIT MAP of routing enables options.Bit 0: IP Unicast Routing EnableBit 1: IP\n\r"
    "  Multicast Routing EnableBit 2: MPLS Processing EnableIn Petra-B, only valid\n\r"
    "  for VSID RIFs\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos lif_table_entry_update lif_ndx 0 index 0 fec_id 0\n\r"
    "  routing_enablers_bm 0 processing_type 0 vrf_id 0 uc_rpf_enable 0 rif_id 0\n\r"
    "  tpid2_index 0 tpid1_index 0 learn_enable 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0\n\r"
    "  cos_profile 0 tpid_profile_index 0 orientation 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 enable_learning 0\n\r"
    "  trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0 push_profile 0\n\r"
    "  label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0\n\r"
    "  default_frwrd_type 0 vsid 0 cos_profile 0 orientation 0 trap_action_profile_id\n\r"
    "  0 trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0\n\r"
    "  pcp_dei 0 edit_pcp_profile 0 vid 0 ing_vlan_edit_profile 0 tm_destination 0\n\r"
    "  is_learn_ac 0 enable_learning 0 vsid 0 type 0x1\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(18)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_TABLE_ENTRY_UPDATE_LIF_TABLE_ENTRY_UPDATE_LIF_ENTRY_INFO_VALUE_RIF_PROCESSING_TYPE_ID, 
    "rif_processing_type", 
    (PARAM_VAL_RULES *)&SOC_PPC_MPLS_TERM_MODEL_TYPE_rule[0], 
    (sizeof(SOC_PPC_MPLS_TERM_MODEL_TYPE_rule) / sizeof(SOC_PPC_MPLS_TERM_MODEL_TYPE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  lif_entry_info.value.rif.processing_type:\n\r"
    "  Pipe/Uniform processing.Not relevant for IP tunnel termination.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos lif_table_entry_update lif_ndx 0 index 0 fec_id 0\n\r"
    "  routing_enablers_bm 0 processing_type 0 vrf_id 0 uc_rpf_enable 0 rif_id 0\n\r"
    "  tpid2_index 0 tpid1_index 0 learn_enable 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0\n\r"
    "  cos_profile 0 tpid_profile_index 0 orientation 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 enable_learning 0\n\r"
    "  trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0 push_profile 0\n\r"
    "  label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0\n\r"
    "  default_frwrd_type 0 vsid 0 cos_profile 0 orientation 0 trap_action_profile_id\n\r"
    "  0 trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0\n\r"
    "  pcp_dei 0 edit_pcp_profile 0 vid 0 ing_vlan_edit_profile 0 tm_destination 0\n\r"
    "  is_learn_ac 0 enable_learning 0 vsid 0 type 0x1\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(18)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_TABLE_ENTRY_UPDATE_LIF_TABLE_ENTRY_UPDATE_LIF_ENTRY_INFO_VALUE_RIF_VRF_ID_ID, 
    "rif_vrf_id", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  lif_entry_info.value.rif.vrf_id:\n\r"
    "  Virtual routing and forwarding instance ID.Only relevant when the RIF is\n\r"
    "  utilized for IP routing.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos lif_table_entry_update lif_ndx 0 index 0 fec_id 0\n\r"
    "  routing_enablers_bm 0 processing_type 0 vrf_id 0 uc_rpf_enable 0 rif_id 0\n\r"
    "  tpid2_index 0 tpid1_index 0 learn_enable 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0\n\r"
    "  cos_profile 0 tpid_profile_index 0 orientation 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 enable_learning 0\n\r"
    "  trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0 push_profile 0\n\r"
    "  label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0\n\r"
    "  default_frwrd_type 0 vsid 0 cos_profile 0 orientation 0 trap_action_profile_id\n\r"
    "  0 trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0\n\r"
    "  pcp_dei 0 edit_pcp_profile 0 vid 0 ing_vlan_edit_profile 0 tm_destination 0\n\r"
    "  is_learn_ac 0 enable_learning 0 vsid 0 type 0x1\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(18)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_TABLE_ENTRY_UPDATE_LIF_TABLE_ENTRY_UPDATE_LIF_ENTRY_INFO_VALUE_RIF_UC_RPF_ENABLE_ID, 
    "rif_uc_rpf_enable", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  lif_entry_info.value.rif.uc_rpf_enable:\n\r"
    "  Enable RPF for Unicast traffic.Only relevant when the RIF is utilized for IP\n\r"
    "  routing. (The same RIF may be used for both IP Routing and MPLS LSR.) \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos lif_table_entry_update lif_ndx 0 index 0 fec_id 0\n\r"
    "  routing_enablers_bm 0 processing_type 0 vrf_id 0 uc_rpf_enable 0 rif_id 0\n\r"
    "  tpid2_index 0 tpid1_index 0 learn_enable 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0\n\r"
    "  cos_profile 0 tpid_profile_index 0 orientation 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 enable_learning 0\n\r"
    "  trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0 push_profile 0\n\r"
    "  label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0\n\r"
    "  default_frwrd_type 0 vsid 0 cos_profile 0 orientation 0 trap_action_profile_id\n\r"
    "  0 trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0\n\r"
    "  pcp_dei 0 edit_pcp_profile 0 vid 0 ing_vlan_edit_profile 0 tm_destination 0\n\r"
    "  is_learn_ac 0 enable_learning 0 vsid 0 type 0x1\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(18)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_TABLE_ENTRY_UPDATE_LIF_TABLE_ENTRY_UPDATE_LIF_ENTRY_INFO_VALUE_RIF_RIF_ID_ID, 
    "rif_id", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  lif_entry_info.value.rif.rif_id:\n\r"
    "  Router Interface ID.SOC_PPC_RIF_NULL: The RIF ID and RPF-enable are not updated\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos lif_table_entry_update lif_ndx 0 index 0 fec_id 0\n\r"
    "  routing_enablers_bm 0 processing_type 0 vrf_id 0 uc_rpf_enable 0 rif_id 0\n\r"
    "  tpid2_index 0 tpid1_index 0 learn_enable 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0\n\r"
    "  cos_profile 0 tpid_profile_index 0 orientation 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 enable_learning 0\n\r"
    "  trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0 push_profile 0\n\r"
    "  label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0\n\r"
    "  default_frwrd_type 0 vsid 0 cos_profile 0 orientation 0 trap_action_profile_id\n\r"
    "  0 trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0\n\r"
    "  pcp_dei 0 edit_pcp_profile 0 vid 0 ing_vlan_edit_profile 0 tm_destination 0\n\r"
    "  is_learn_ac 0 enable_learning 0 vsid 0 type 0x1\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(18)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_TABLE_ENTRY_UPDATE_LIF_TABLE_ENTRY_UPDATE_LIF_ENTRY_INFO_VALUE_ISID_TPID_PROFILE_INDEX_ID, 
    "tpid_profile_index", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  lif_entry_info.value.isid.tpid_profiles.tpid2_index:\n\r"
    "  Selects one of four global TPIDs (usually the inner). Used to parse the VLAN\n\r"
    "  Tags in the ingress/egress and to construct the VLAN Tags in the egress.\n\r"
    "  Range: 0 - 3.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos lif_table_entry_update lif_ndx 0 index 0 fec_id 0\n\r"
    "  routing_enablers_bm 0 processing_type 0 vrf_id 0 uc_rpf_enable 0 rif_id 0\n\r"
    "  tpid2_index 0 tpid1_index 0 learn_enable 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0\n\r"
    "  cos_profile 0 tpid_profile_index 0 orientation 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 enable_learning 0\n\r"
    "  trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0 push_profile 0\n\r"
    "  label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0\n\r"
    "  default_frwrd_type 0 vsid 0 cos_profile 0 orientation 0 trap_action_profile_id\n\r"
    "  0 trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0\n\r"
    "  pcp_dei 0 edit_pcp_profile 0 vid 0 ing_vlan_edit_profile 0 tm_destination 0\n\r"
    "  is_learn_ac 0 enable_learning 0 vsid 0 type 0x1\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(18)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_TABLE_ENTRY_UPDATE_LIF_TABLE_ENTRY_UPDATE_LIF_ENTRY_INFO_VALUE_ISID_LEARN_ENABLE_ID, 
    "learn_enable", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  lif_entry_info.value.isid.learn_enable:\n\r"
    "  Indicate whether learning of customer MACs from this tunnel and on this\n\r"
    "  service are permitted.Should be disabled for PBB-TE.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos lif_table_entry_update lif_ndx 0 index 0 fec_id 0\n\r"
    "  routing_enablers_bm 0 processing_type 0 vrf_id 0 uc_rpf_enable 0 rif_id 0\n\r"
    "  tpid2_index 0 tpid1_index 0 learn_enable 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0\n\r"
    "  cos_profile 0 tpid_profile_index 0 orientation 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 enable_learning 0\n\r"
    "  trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0 push_profile 0\n\r"
    "  label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0\n\r"
    "  default_frwrd_type 0 vsid 0 cos_profile 0 orientation 0 trap_action_profile_id\n\r"
    "  0 trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0\n\r"
    "  pcp_dei 0 edit_pcp_profile 0 vid 0 ing_vlan_edit_profile 0 tm_destination 0\n\r"
    "  is_learn_ac 0 enable_learning 0 vsid 0 type 0x1\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(18)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_DECISION_FD_TRAP_CODE_ID, 
    "fd_trap_code", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals/*SOC_PPC_TRAP_CODE_rule*/[0], 
    (sizeof(soc_ppd_api_free_vals/*SOC_PPC_TRAP_CODE_rule*/) / sizeof(soc_ppd_api_free_vals/*SOC_PPC_TRAP_CODE_rule*/[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pwe_info.default_frwrd.default_forwarding.additional_info.trap_info.trap_acti\n\r"
    "  n_profile_id:\n\r"
    "  Trapping action profile ID.Range: 0-15.Points to a database that holds\n\r"
    "  trapping options. The profile ID selects the CPU to handle the trap; The CPU\n\r"
    "  port ID; the priority of the message; etc.The TRAP action profile is\n\r"
    "  configured via soc_ppd_trap_mgmt_frwrd_profile_info_set()\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos lif_table_entry_update lif_ndx 0 index 0 fec_id 0\n\r"
    "  routing_enablers_bm 0 processing_type 0 vrf_id 0 uc_rpf_enable 0 rif_id 0\n\r"
    "  tpid2_index 0 tpid1_index 0 learn_enable 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0\n\r"
    "  cos_profile 0 tpid_profile_index 0 orientation 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 enable_learning 0\n\r"
    "  trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0 push_profile 0\n\r"
    "  label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0\n\r"
    "  default_frwrd_type 0 vsid 0 cos_profile 0 orientation 0 trap_action_profile_id\n\r"
    "  0 trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0\n\r"
    "  pcp_dei 0 edit_pcp_profile 0 vid 0 ing_vlan_edit_profile 0 tm_destination 0\n\r"
    "  is_learn_ac 0 enable_learning 0 vsid 0 type 0x1\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(18)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_DECISION_FD_FWD_STRENGTH_ID, 
    "fd_frwrd_strength", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pwe_info.default_frwrd.default_forwarding.additional_info.trap_info.trap_qual\n\r"
    "  fier:\n\r"
    "  Trap qualifier to be associated with the packet to identify the trap. Range:\n\r"
    "  0-4K.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos lif_table_entry_update lif_ndx 0 index 0 fec_id 0\n\r"
    "  routing_enablers_bm 0 processing_type 0 vrf_id 0 uc_rpf_enable 0 rif_id 0\n\r"
    "  tpid2_index 0 tpid1_index 0 learn_enable 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0\n\r"
    "  cos_profile 0 tpid_profile_index 0 orientation 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 enable_learning 0\n\r"
    "  trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0 push_profile 0\n\r"
    "  label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0\n\r"
    "  default_frwrd_type 0 vsid 0 cos_profile 0 orientation 0 trap_action_profile_id\n\r"
    "  0 trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0\n\r"
    "  pcp_dei 0 edit_pcp_profile 0 vid 0 ing_vlan_edit_profile 0 tm_destination 0\n\r"
    "  is_learn_ac 0 enable_learning 0 vsid 0 type 0x1\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(18)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_DECISION_FD_SNOOP_STRENGTH_ID,
    "fd_snp_strength", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pwe_info.default_frwrd.default_forwarding.additional_info.outlif.val:\n\r"
    "  Out-LIF value, according to type. May be AC / EEP / VSI\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos lif_table_entry_update lif_ndx 0 index 0 fec_id 0\n\r"
    "  routing_enablers_bm 0 processing_type 0 vrf_id 0 uc_rpf_enable 0 rif_id 0\n\r"
    "  tpid2_index 0 tpid1_index 0 learn_enable 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0\n\r"
    "  cos_profile 0 tpid_profile_index 0 orientation 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 enable_learning 0\n\r"
    "  trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0 push_profile 0\n\r"
    "  label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0\n\r"
    "  default_frwrd_type 0 vsid 0 cos_profile 0 orientation 0 trap_action_profile_id\n\r"
    "  0 trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0\n\r"
    "  pcp_dei 0 edit_pcp_profile 0 vid 0 ing_vlan_edit_profile 0 tm_destination 0\n\r"
    "  is_learn_ac 0 enable_learning 0 vsid 0 type 0x1\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(18)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_DECISION_FD_AC_ID,
    "fd_ac_id", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pwe_info.default_frwrd.default_forwarding.additional_info.outlif.val:\n\r"
    "  Out-LIF value, according to type. May be AC / EEP / VSI\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos lif_table_entry_update lif_ndx 0 index 0 fec_id 0\n\r"
    "  routing_enablers_bm 0 processing_type 0 vrf_id 0 uc_rpf_enable 0 rif_id 0\n\r"
    "  tpid2_index 0 tpid1_index 0 learn_enable 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0\n\r"
    "  cos_profile 0 tpid_profile_index 0 orientation 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 enable_learning 0\n\r"
    "  trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0 push_profile 0\n\r"
    "  label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0\n\r"
    "  default_frwrd_type 0 vsid 0 cos_profile 0 orientation 0 trap_action_profile_id\n\r"
    "  0 trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0\n\r"
    "  pcp_dei 0 edit_pcp_profile 0 vid 0 ing_vlan_edit_profile 0 tm_destination 0\n\r"
    "  is_learn_ac 0 enable_learning 0 vsid 0 type 0x1\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(18)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_DECISION_FD_EEP_NDX_ID,
    "fd_eep_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pwe_info.default_frwrd.default_forwarding.additional_info.outlif.val:\n\r"
    "  Out-LIF value, according to type. May be AC / EEP / VSI\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos lif_table_entry_update lif_ndx 0 index 0 fec_id 0\n\r"
    "  routing_enablers_bm 0 processing_type 0 vrf_id 0 uc_rpf_enable 0 rif_id 0\n\r"
    "  tpid2_index 0 tpid1_index 0 learn_enable 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0\n\r"
    "  cos_profile 0 tpid_profile_index 0 orientation 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 enable_learning 0\n\r"
    "  trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0 push_profile 0\n\r"
    "  label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0\n\r"
    "  default_frwrd_type 0 vsid 0 cos_profile 0 orientation 0 trap_action_profile_id\n\r"
    "  0 trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0\n\r"
    "  pcp_dei 0 edit_pcp_profile 0 vid 0 ing_vlan_edit_profile 0 tm_destination 0\n\r"
    "  is_learn_ac 0 enable_learning 0 vsid 0 type 0x1\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(18)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_DECISION_FD_PUSH_PROFILE_ID, 
    "fd_push_profile", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pwe_info.default_frwrd.default_forwarding.additional_info.eei.val.mpls_comman\n\r"
    "  .push_profile:\n\r"
    "  If the command is push, this is the push profile used to construct the\n\r"
    "  label's TTL and EXP.Otherwise, this field is ignored.Range: 0 - 7.EEI may\n\r"
    "  include the MPLS command, but then the command cannot be Push with\n\r"
    "  push_profile 0. See SOC_PPC_EEI.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos lif_table_entry_update lif_ndx 0 index 0 fec_id 0\n\r"
    "  routing_enablers_bm 0 processing_type 0 vrf_id 0 uc_rpf_enable 0 rif_id 0\n\r"
    "  tpid2_index 0 tpid1_index 0 learn_enable 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0\n\r"
    "  cos_profile 0 tpid_profile_index 0 orientation 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 enable_learning 0\n\r"
    "  trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0 push_profile 0\n\r"
    "  label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0\n\r"
    "  default_frwrd_type 0 vsid 0 cos_profile 0 orientation 0 trap_action_profile_id\n\r"
    "  0 trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0\n\r"
    "  pcp_dei 0 edit_pcp_profile 0 vid 0 ing_vlan_edit_profile 0 tm_destination 0\n\r"
    "  is_learn_ac 0 enable_learning 0 vsid 0 type 0x1\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(18)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_DECISION_FD_LABEL_ID, 
    "fd_label", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pwe_info.default_frwrd.default_forwarding.additional_info.eei.val.mpls_comman\n\r"
    "  .label:\n\r"
    "  Label. Relevant if the command is push or swap.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos lif_table_entry_update lif_ndx 0 index 0 fec_id 0\n\r"
    "  routing_enablers_bm 0 processing_type 0 vrf_id 0 uc_rpf_enable 0 rif_id 0\n\r"
    "  tpid2_index 0 tpid1_index 0 learn_enable 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0\n\r"
    "  cos_profile 0 tpid_profile_index 0 orientation 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 enable_learning 0\n\r"
    "  trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0 push_profile 0\n\r"
    "  label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0\n\r"
    "  default_frwrd_type 0 vsid 0 cos_profile 0 orientation 0 trap_action_profile_id\n\r"
    "  0 trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0\n\r"
    "  pcp_dei 0 edit_pcp_profile 0 vid 0 ing_vlan_edit_profile 0 tm_destination 0\n\r"
    "  is_learn_ac 0 enable_learning 0 vsid 0 type 0x1\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(18)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_DECISION_FD_IS_LAG_ID, 
    "fd_is_lag", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pwe_info.default_frwrd.default_forwarding.additional_info.eei.val.trill_dest.\n\r"
    "  s_multicast:\n\r"
    "  Is the TRILL packet is sent as multicast (flooded in the Distribution Tree)\n\r"
    "  or sent as Unicast to Egress Nick.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos lif_table_entry_update lif_ndx 0 index 0 fec_id 0\n\r"
    "  routing_enablers_bm 0 processing_type 0 vrf_id 0 uc_rpf_enable 0 rif_id 0\n\r"
    "  tpid2_index 0 tpid1_index 0 learn_enable 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0\n\r"
    "  cos_profile 0 tpid_profile_index 0 orientation 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 enable_learning 0\n\r"
    "  trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0 push_profile 0\n\r"
    "  label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0\n\r"
    "  default_frwrd_type 0 vsid 0 cos_profile 0 orientation 0 trap_action_profile_id\n\r"
    "  0 trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0\n\r"
    "  pcp_dei 0 edit_pcp_profile 0 vid 0 ing_vlan_edit_profile 0 tm_destination 0\n\r"
    "  is_learn_ac 0 enable_learning 0 vsid 0 type 0x1\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(18)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_DECISION_FD_DEST_ID, 
    "fd_dest_id", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pwe_info.default_frwrd.default_forwarding.dest_id:\n\r"
    "  Destination ID, according to type.Multicast: MIDFEC:\n\r"
    "  FEC IDTrap:\n\r"
    "  IgnoredDrop:\n\r"
    "  IgnoredUnicast:\n\r"
    "  System port. When LAG, the user should\n\r"
    "  use SOC_PPD_LAG_ID(lag-id). When system\n\r"
    "  port is with allocated QoS resources the\n\r"
    "  user should use\n\r"
    "  SOC_PPD_DIRECT_FLOW_ID(flow-id)\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos lif_table_entry_update lif_ndx 0 index 0 fec_id 0\n\r"
    "  routing_enablers_bm 0 processing_type 0 vrf_id 0 uc_rpf_enable 0 rif_id 0\n\r"
    "  tpid2_index 0 tpid1_index 0 learn_enable 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0\n\r"
    "  cos_profile 0 tpid_profile_index 0 orientation 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 enable_learning 0\n\r"
    "  trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0 push_profile 0\n\r"
    "  label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0\n\r"
    "  default_frwrd_type 0 vsid 0 cos_profile 0 orientation 0 trap_action_profile_id\n\r"
    "  0 trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0\n\r"
    "  pcp_dei 0 edit_pcp_profile 0 vid 0 ing_vlan_edit_profile 0 tm_destination 0\n\r"
    "  is_learn_ac 0 enable_learning 0 vsid 0 type 0x1\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(18)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_DECISION_FD_TYPE_ID, 
    "fd_type",
    (PARAM_VAL_RULES *)&SOC_PPD_FRWRD_DECISION_MACRO_TYPE_rule[0], 
    (sizeof(SOC_PPD_FRWRD_DECISION_MACRO_TYPE_rule) / sizeof(SOC_PPD_FRWRD_DECISION_MACRO_TYPE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pwe_info.default_frwrd.default_forwarding.type:\n\r"
    "  Forwarding decision type:Unicast without FEC; Multicast without FEC; FEC;\n\r"
    "  Drop or Trap\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos lif_table_entry_update lif_ndx 0 index 0 fec_id 0\n\r"
    "  routing_enablers_bm 0 processing_type 0 vrf_id 0 uc_rpf_enable 0 rif_id 0\n\r"
    "  tpid2_index 0 tpid1_index 0 learn_enable 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0\n\r"
    "  cos_profile 0 tpid_profile_index 0 orientation 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 enable_learning 0\n\r"
    "  trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0 push_profile 0\n\r"
    "  label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0\n\r"
    "  default_frwrd_type 0 vsid 0 cos_profile 0 orientation 0 trap_action_profile_id\n\r"
    "  0 trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0\n\r"
    "  pcp_dei 0 edit_pcp_profile 0 vid 0 ing_vlan_edit_profile 0 tm_destination 0\n\r"
    "  is_learn_ac 0 enable_learning 0 vsid 0 type 0x1\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(18)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },    { 
    SOC_PARAM_PPD_LIF_TABLE_ENTRY_UPDATE_LIF_TABLE_ENTRY_UPDATE_LIF_ENTRY_INFO_VALUE_ISID_DEFAULT_FRWRD_DEFAULT_FRWD_TYPE_ID, 
    "frwrd_type", 
    (PARAM_VAL_RULES *)&SOC_PPC_L2_LIF_DFLT_FRWRD_SRC_rule[0], 
    (sizeof(SOC_PPC_L2_LIF_DFLT_FRWRD_SRC_rule) / sizeof(SOC_PPC_L2_LIF_DFLT_FRWRD_SRC_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  lif_entry_info.value.isid.default_frwrd.default_frwrd_type:\n\r"
    "  LIF: Use the following fields in case of unknown MAC destination.VSI: Use VSI\n\r"
    "  default forwarding in case of unknown MAC destination.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos lif_table_entry_update lif_ndx 0 index 0 fec_id 0\n\r"
    "  routing_enablers_bm 0 processing_type 0 vrf_id 0 uc_rpf_enable 0 rif_id 0\n\r"
    "  tpid2_index 0 tpid1_index 0 learn_enable 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0\n\r"
    "  cos_profile 0 tpid_profile_index 0 orientation 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 enable_learning 0\n\r"
    "  trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0 push_profile 0\n\r"
    "  label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0\n\r"
    "  default_frwrd_type 0 vsid 0 cos_profile 0 orientation 0 trap_action_profile_id\n\r"
    "  0 trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0\n\r"
    "  pcp_dei 0 edit_pcp_profile 0 vid 0 ing_vlan_edit_profile 0 tm_destination 0\n\r"
    "  is_learn_ac 0 enable_learning 0 vsid 0 type 0x1\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(18)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_TABLE_ENTRY_UPDATE_ENTRY_UPDATE_LIF_ENTRY_INFO_VALUE_PWE_HAS_CW_ID, 
    "pwe_has_cw", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  lif_entry_info.value.pwe.has_cw:\n\r"
    "  Has Control-word. Used by the PWE termination to determine number of bytes to\n\r"
    "  remove from the header\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_table entry_update lif_ndx 0 index 0 fec_id 0 routing_enablers_bm\n\r"
    "  0 processing_type 0 vrf_id 0 uc_rpf_enable 0 rif_id 0 tpid2_index 0\n\r"
    "  tpid1_index 0 learn_enable 0 trap_action_profile_id 0 trap_qualifier 0 val 0\n\r"
    "  type 0 isid 0 push_profile 0 label 0 command 0 dest_nick 0 is_multicast 0\n\r"
    "  type 0 dest_id 0 type 0 default_frwrd_type 0 has_cw 0 cos_profile 0\n\r"
    "  tpid_profile_index 0 orientation 0 trap_action_profile_id 0 trap_qualifier 0\n\r"
    "  val 0 type 0 isid 0 push_profile 0 label 0 command 0 dest_nick 0 is_multicast\n\r"
    "  0 type 0 dest_id 0 type 0 enable_learning 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0 vsid 0\n\r"
    "  cos_profile 0 orientation 0 trap_action_profile_id 0 trap_qualifier 0 val 0\n\r"
    "  type 0 isid 0 push_profile 0 label 0 command 0 dest_nick 0 is_multicast 0\n\r"
    "  type 0 dest_id 0 type 0 default_frwrd_type 0 edit_pcp_profile 0 vid 0\n\r"
    "  ing_vlan_edit_profile 0 dest_val 0 dest_type 0 is_learn_ac 0 enable_learning\n\r"
    "  0 vsid 0 type 0x1\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(18)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  {
    SOC_PARAM_PPD_LIF_TABLE_ENTRY_UPDATE_LIF_TABLE_ENTRY_UPDATE_LIF_ENTRY_INFO_VALUE_PWE_COS_PROFILE_ID, 
    "pwe_cos_profile", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  lif_entry_info.value.pwe.cos_profile:\n\r"
    "  Class of Service mapping profile\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos lif_table_entry_update lif_ndx 0 index 0 fec_id 0\n\r"
    "  routing_enablers_bm 0 processing_type 0 vrf_id 0 uc_rpf_enable 0 rif_id 0\n\r"
    "  tpid2_index 0 tpid1_index 0 learn_enable 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0\n\r"
    "  cos_profile 0 tpid_profile_index 0 orientation 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 enable_learning 0\n\r"
    "  trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0 push_profile 0\n\r"
    "  label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0\n\r"
    "  default_frwrd_type 0 vsid 0 cos_profile 0 orientation 0 trap_action_profile_id\n\r"
    "  0 trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0\n\r"
    "  pcp_dei 0 edit_pcp_profile 0 vid 0 ing_vlan_edit_profile 0 tm_destination 0\n\r"
    "  is_learn_ac 0 enable_learning 0 vsid 0 type 0x1\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(18)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_TABLE_ENTRY_UPDATE_LIF_TABLE_ENTRY_UPDATE_LIF_ENTRY_INFO_VALUE_PWE_TPID_PROFILE_INDEX_ID, 
    "pwe_tpid_profile_index", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  lif_entry_info.value.pwe.tpid_profile_index:\n\r"
    "  Pointer to TPID profile options table.Needed for the internal L2 header\n\r"
    "  parsing. The profile table is configured via 'soc_ppd_llp_parse_tpid_value_set()'\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos lif_table_entry_update lif_ndx 0 index 0 fec_id 0\n\r"
    "  routing_enablers_bm 0 processing_type 0 vrf_id 0 uc_rpf_enable 0 rif_id 0\n\r"
    "  tpid2_index 0 tpid1_index 0 learn_enable 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0\n\r"
    "  cos_profile 0 tpid_profile_index 0 orientation 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 enable_learning 0\n\r"
    "  trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0 push_profile 0\n\r"
    "  label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0\n\r"
    "  default_frwrd_type 0 vsid 0 cos_profile 0 orientation 0 trap_action_profile_id\n\r"
    "  0 trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0\n\r"
    "  pcp_dei 0 edit_pcp_profile 0 vid 0 ing_vlan_edit_profile 0 tm_destination 0\n\r"
    "  is_learn_ac 0 enable_learning 0 vsid 0 type 0x1\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(18)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_TABLE_ENTRY_UPDATE_LIF_TABLE_ENTRY_UPDATE_LIF_ENTRY_INFO_VALUE_PWE_ORIENTATION_ID, 
    "pwe_orientation", 
    (PARAM_VAL_RULES *)&SOC_PPD_SAND_PP_HUB_SPOKE_ORIENTATION_rule[0], 
    (sizeof(SOC_PPD_SAND_PP_HUB_SPOKE_ORIENTATION_rule) / sizeof(SOC_PPD_SAND_PP_HUB_SPOKE_ORIENTATION_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  lif_entry_info.value.pwe.orientation:\n\r"
    "  Hub/Spoke: Orientation HUB.1. H-VPLS support: Split Horizon filter is not\n\r"
    "  activated when the packet origination is Spoke and the destination is HUB,\n\r"
    "  nor the other way around.2. VSI Default forwarding: The VSI default\n\r"
    "  forwarding, upon unknown MAC DA, is different for HUB LIF and Spoke LIF.\n\r"
    "  Useful for H-VPLS, E-TREE and E-LINE services\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos lif_table_entry_update lif_ndx 0 index 0 fec_id 0\n\r"
    "  routing_enablers_bm 0 processing_type 0 vrf_id 0 uc_rpf_enable 0 rif_id 0\n\r"
    "  tpid2_index 0 tpid1_index 0 learn_enable 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0\n\r"
    "  cos_profile 0 tpid_profile_index 0 orientation 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 enable_learning 0\n\r"
    "  trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0 push_profile 0\n\r"
    "  label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0\n\r"
    "  default_frwrd_type 0 vsid 0 cos_profile 0 orientation 0 trap_action_profile_id\n\r"
    "  0 trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0\n\r"
    "  pcp_dei 0 edit_pcp_profile 0 vid 0 ing_vlan_edit_profile 0 tm_destination 0\n\r"
    "  is_learn_ac 0 enable_learning 0 vsid 0 type 0x1\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(18)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_TABLE_ENTRY_UPDATE_ENTRY_UPDATE_LIF_ENTRY_INFO_VALUE_AC_SERVICE_TYPE_ID, 
    "ac_service_type", 
    (PARAM_VAL_RULES *)&SOC_PPC_L2_LIF_AC_SERVICE_TYPE_rule[0], 
    (sizeof(SOC_PPC_L2_LIF_AC_SERVICE_TYPE_rule) / sizeof(SOC_PPC_L2_LIF_AC_SERVICE_TYPE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  lif_entry_info.value.ac.service_type:\n\r"
    "  AC service type. One of 4 service types. If the service type is P2P then use\n\r"
    "  VSI SOC_PPC_VSI_P2P_SERVICE.in T20E use T20E_VSI_P2P_SERVICE.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_table entry_update lif_ndx 0 index 0 fec_id 0 routing_enablers_bm\n\r"
    "  0 processing_type 0 vrf_id 0 uc_rpf_enable 0 rif_id 0 service_type 0\n\r"
    "  tpid2_index 0 tpid1_index 0 learn_enable 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwd_type 0\n\r"
    "  service_type 0 has_cw 0 cos_profile 0 tpid_profile_index 0 orientation 0\n\r"
    "  trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0 push_profile 0\n\r"
    "  label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0\n\r"
    "  enable_learning 0 trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid\n\r"
    "  0 push_profile 0 label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id\n\r"
    "  0 type 0 default_frwd_type 0 vsid 0 l2cp_profile 0 cos_profile 0 orientation\n\r"
    "  0 trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0 push_profile\n\r"
    "  0 label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0\n\r"
    "  default_frwd_type 0 edit_pcp_profile 0 vid 0 ing_vlan_edit_profile 0\n\r"
    "  trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0 push_profile 0\n\r"
    "  label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0\n\r"
    "  learn_type 0 vsid 0 service_type 0 type 0x1\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(18)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_TABLE_ENTRY_UPDATE_LIF_TABLE_ENTRY_UPDATE_LIF_ENTRY_INFO_VALUE_PWE_LEARN_INFO_ENABLE_LEARNING_ID, 
    "pwe_enable_learning", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  lif_entry_info.value.pwe.learn_info.enable_learning:\n\r"
    "  When enabled, packets arriving with this PWE are dynamically learned\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos lif_table_entry_update lif_ndx 0 index 0 fec_id 0\n\r"
    "  routing_enablers_bm 0 processing_type 0 vrf_id 0 uc_rpf_enable 0 rif_id 0\n\r"
    "  tpid2_index 0 tpid1_index 0 learn_enable 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0\n\r"
    "  cos_profile 0 tpid_profile_index 0 orientation 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 enable_learning 0\n\r"
    "  trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0 push_profile 0\n\r"
    "  label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0\n\r"
    "  default_frwrd_type 0 vsid 0 cos_profile 0 orientation 0 trap_action_profile_id\n\r"
    "  0 trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0\n\r"
    "  pcp_dei 0 edit_pcp_profile 0 vid 0 ing_vlan_edit_profile 0 tm_destination 0\n\r"
    "  is_learn_ac 0 enable_learning 0 vsid 0 type 0x1\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(18)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_TABLE_ENTRY_UPDATE_LIF_TABLE_ENTRY_UPDATE_LIF_ENTRY_INFO_VALUE_PWE_DEFAULT_FRWRD_DEFAULT_FRWD_TYPE_ID, 
    "pwe_frwrd_type", 
    (PARAM_VAL_RULES *)&SOC_PPC_L2_LIF_DFLT_FRWRD_SRC_rule[0], 
    (sizeof(SOC_PPC_L2_LIF_DFLT_FRWRD_SRC_rule) / sizeof(SOC_PPC_L2_LIF_DFLT_FRWRD_SRC_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  lif_entry_info.value.pwe.default_frwrd.default_frwrd_type:\n\r"
    "  LIF: Use the following fields in case of unknown MAC destination.VSI: Use VSI\n\r"
    "  default forwarding in case of unknown MAC destination.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos lif_table_entry_update lif_ndx 0 index 0 fec_id 0\n\r"
    "  routing_enablers_bm 0 processing_type 0 vrf_id 0 uc_rpf_enable 0 rif_id 0\n\r"
    "  tpid2_index 0 tpid1_index 0 learn_enable 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0\n\r"
    "  cos_profile 0 tpid_profile_index 0 orientation 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 enable_learning 0\n\r"
    "  trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0 push_profile 0\n\r"
    "  label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0\n\r"
    "  default_frwrd_type 0 vsid 0 cos_profile 0 orientation 0 trap_action_profile_id\n\r"
    "  0 trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0\n\r"
    "  pcp_dei 0 edit_pcp_profile 0 vid 0 ing_vlan_edit_profile 0 tm_destination 0\n\r"
    "  is_learn_ac 0 enable_learning 0 vsid 0 type 0x1\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(18)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_TABLE_ENTRY_UPDATE_LIF_TABLE_ENTRY_UPDATE_LIF_ENTRY_INFO_VALUE_PWE_VSID_ID, 
    "pwe_vsid", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  lif_entry_info.value.pwe.vsid:\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos lif_table_entry_update lif_ndx 0 index 0 fec_id 0\n\r"
    "  routing_enablers_bm 0 processing_type 0 vrf_id 0 uc_rpf_enable 0 rif_id 0\n\r"
    "  tpid2_index 0 tpid1_index 0 learn_enable 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0\n\r"
    "  cos_profile 0 tpid_profile_index 0 orientation 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 enable_learning 0\n\r"
    "  trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0 push_profile 0\n\r"
    "  label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0\n\r"
    "  default_frwrd_type 0 vsid 0 cos_profile 0 orientation 0 trap_action_profile_id\n\r"
    "  0 trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0\n\r"
    "  pcp_dei 0 edit_pcp_profile 0 vid 0 ing_vlan_edit_profile 0 tm_destination 0\n\r"
    "  is_learn_ac 0 enable_learning 0 vsid 0 type 0x1\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(18)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_TABLE_ENTRY_UPDATE_LIF_TABLE_ENTRY_UPDATE_LIF_ENTRY_INFO_VALUE_AC_COS_PROFILE_ID, 
    "ac_cos_profile", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  lif_entry_info.value.ac.cos_profile:\n\r"
    "  Class of Service mapping profile\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos lif_table_entry_update lif_ndx 0 index 0 fec_id 0\n\r"
    "  routing_enablers_bm 0 processing_type 0 vrf_id 0 uc_rpf_enable 0 rif_id 0\n\r"
    "  tpid2_index 0 tpid1_index 0 learn_enable 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0\n\r"
    "  cos_profile 0 tpid_profile_index 0 orientation 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 enable_learning 0\n\r"
    "  trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0 push_profile 0\n\r"
    "  label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0\n\r"
    "  default_frwrd_type 0 vsid 0 cos_profile 0 orientation 0 trap_action_profile_id\n\r"
    "  0 trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0\n\r"
    "  pcp_dei 0 edit_pcp_profile 0 vid 0 ing_vlan_edit_profile 0 tm_destination 0\n\r"
    "  is_learn_ac 0 enable_learning 0 vsid 0 type 0x1\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(18)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_TABLE_ENTRY_UPDATE_LIF_TABLE_ENTRY_UPDATE_LIF_ENTRY_INFO_VALUE_AC_ORIENTATION_ID, 
    "ac_orientation", 
    (PARAM_VAL_RULES *)&SOC_PPD_SAND_PP_HUB_SPOKE_ORIENTATION_rule[0], 
    (sizeof(SOC_PPD_SAND_PP_HUB_SPOKE_ORIENTATION_rule) / sizeof(SOC_PPD_SAND_PP_HUB_SPOKE_ORIENTATION_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  lif_entry_info.value.ac.orientation:\n\r"
    "  Hub/Spoke Orientation.Typically, ACs are Spokes.VSI default forwarding: The\n\r"
    "  VSI default forwarding, upon unknown MAC DA, is different for HUB LIF and\n\r"
    "  Spoke LIF. Useful for E-TREE and E-LINE services\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos lif_table_entry_update lif_ndx 0 index 0 fec_id 0\n\r"
    "  routing_enablers_bm 0 processing_type 0 vrf_id 0 uc_rpf_enable 0 rif_id 0\n\r"
    "  tpid2_index 0 tpid1_index 0 learn_enable 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0\n\r"
    "  cos_profile 0 tpid_profile_index 0 orientation 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 enable_learning 0\n\r"
    "  trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0 push_profile 0\n\r"
    "  label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0\n\r"
    "  default_frwrd_type 0 vsid 0 cos_profile 0 orientation 0 trap_action_profile_id\n\r"
    "  0 trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0\n\r"
    "  pcp_dei 0 edit_pcp_profile 0 vid 0 ing_vlan_edit_profile 0 tm_destination 0\n\r"
    "  is_learn_ac 0 enable_learning 0 vsid 0 type 0x1\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(18)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_TABLE_ENTRY_UPDATE_LIF_TABLE_ENTRY_UPDATE_LIF_ENTRY_INFO_VALUE_AC_DEFAULT_FRWRD_DEFAULT_FRWD_TYPE_ID, 
    "ac_frwrd_type", 
    (PARAM_VAL_RULES *)&SOC_PPC_L2_LIF_DFLT_FRWRD_SRC_rule[0], 
    (sizeof(SOC_PPC_L2_LIF_DFLT_FRWRD_SRC_rule) / sizeof(SOC_PPC_L2_LIF_DFLT_FRWRD_SRC_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  lif_entry_info.value.ac.default_frwrd.default_frwrd_type:\n\r"
    "  LIF: Use the following fields in case of unknown MAC destination.VSI: Use VSI\n\r"
    "  default forwarding in case of unknown MAC destination.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos lif_table_entry_update lif_ndx 0 index 0 fec_id 0\n\r"
    "  routing_enablers_bm 0 processing_type 0 vrf_id 0 uc_rpf_enable 0 rif_id 0\n\r"
    "  tpid2_index 0 tpid1_index 0 learn_enable 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0\n\r"
    "  cos_profile 0 tpid_profile_index 0 orientation 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 enable_learning 0\n\r"
    "  trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0 push_profile 0\n\r"
    "  label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0\n\r"
    "  default_frwrd_type 0 vsid 0 cos_profile 0 orientation 0 trap_action_profile_id\n\r"
    "  0 trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0\n\r"
    "  pcp_dei 0 edit_pcp_profile 0 vid 0 ing_vlan_edit_profile 0 tm_destination 0\n\r"
    "  is_learn_ac 0 enable_learning 0 vsid 0 type 0x1\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(18)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_TABLE_ENTRY_UPDATE_LIF_TABLE_ENTRY_UPDATE_LIF_ENTRY_INFO_VALUE_AC_ING_EDIT_INFO_PCP_DEI_ID, 
    "ac_pcp_dei", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  lif_entry_info.value.ac.ing_edit_info.pcp_dei:\n\r"
    "  Relevant only for T20E.PCP-DEI value to be used in building the VLAN tag in\n\r"
    "  ingress vlan editing. See\n\r"
    "  soc_ppd_lif_ing_vlan_edit_profile_to_pcp_profile_map_set(vlan-edit-profile,\n\r"
    "  pcp-profile,valid) .\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos lif_table_entry_update lif_ndx 0 index 0 fec_id 0\n\r"
    "  routing_enablers_bm 0 processing_type 0 vrf_id 0 uc_rpf_enable 0 rif_id 0\n\r"
    "  tpid2_index 0 tpid1_index 0 learn_enable 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0\n\r"
    "  cos_profile 0 tpid_profile_index 0 orientation 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 enable_learning 0\n\r"
    "  trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0 push_profile 0\n\r"
    "  label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0\n\r"
    "  default_frwrd_type 0 vsid 0 cos_profile 0 orientation 0 trap_action_profile_id\n\r"
    "  0 trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0\n\r"
    "  pcp_dei 0 edit_pcp_profile 0 vid 0 ing_vlan_edit_profile 0 tm_destination 0\n\r"
    "  is_learn_ac 0 enable_learning 0 vsid 0 type 0x1\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(18)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_TABLE_ENTRY_UPDATE_LIF_TABLE_ENTRY_UPDATE_LIF_ENTRY_INFO_VALUE_AC_ING_EDIT_INFO_EDIT_PCP_PROFILE_ID, 
    "ac_edit_pcp_profile", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  lif_entry_info.value.ac.ing_edit_info.edit_pcp_profile:\n\r"
    "  PCP profile, used during ingress VLAN editing phase, to set the PCP/UP of the\n\r"
    "  edited VLAN headers.See soc_ppd_ing_vlan_edit_command_info_set (). Relevant only\n\r"
    "  for Petra-B. for T20E: has to be zero, use\n\r"
    "  soc_ppd_lif_ing_vlan_edit_profile_to_pcp_profile_map_set(vlan-edit-profile,\n\r"
    "  pcp-profile,valid) to set PCP profile\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos lif_table_entry_update lif_ndx 0 index 0 fec_id 0\n\r"
    "  routing_enablers_bm 0 processing_type 0 vrf_id 0 uc_rpf_enable 0 rif_id 0\n\r"
    "  tpid2_index 0 tpid1_index 0 learn_enable 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0\n\r"
    "  cos_profile 0 tpid_profile_index 0 orientation 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 enable_learning 0\n\r"
    "  trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0 push_profile 0\n\r"
    "  label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0\n\r"
    "  default_frwrd_type 0 vsid 0 cos_profile 0 orientation 0 trap_action_profile_id\n\r"
    "  0 trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0\n\r"
    "  pcp_dei 0 edit_pcp_profile 0 vid 0 ing_vlan_edit_profile 0 tm_destination 0\n\r"
    "  is_learn_ac 0 enable_learning 0 vsid 0 type 0x1\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(18)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_TABLE_ENTRY_UPDATE_LIF_TABLE_ENTRY_UPDATE_LIF_ENTRY_INFO_VALUE_AC_ING_EDIT_INFO_VID_ID, 
    "ac_vid", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  lif_entry_info.value.ac.ing_edit_info.vid:\n\r"
    "  Translated-VID\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos lif_table_entry_update lif_ndx 0 index 0 fec_id 0\n\r"
    "  routing_enablers_bm 0 processing_type 0 vrf_id 0 uc_rpf_enable 0 rif_id 0\n\r"
    "  tpid2_index 0 tpid1_index 0 learn_enable 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0\n\r"
    "  cos_profile 0 tpid_profile_index 0 orientation 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 enable_learning 0\n\r"
    "  trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0 push_profile 0\n\r"
    "  label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0\n\r"
    "  default_frwrd_type 0 vsid 0 cos_profile 0 orientation 0 trap_action_profile_id\n\r"
    "  0 trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0\n\r"
    "  pcp_dei 0 edit_pcp_profile 0 vid 0 ing_vlan_edit_profile 0 tm_destination 0\n\r"
    "  is_learn_ac 0 enable_learning 0 vsid 0 type 0x1\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(18)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_TABLE_ENTRY_UPDATE_LIF_TABLE_ENTRY_UPDATE_LIF_ENTRY_INFO_VALUE_AC_ING_EDIT_INFO_ING_VLAN_EDIT_PROFILE_ID, 
    "ac_ing_vlan_edit_profile", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  lif_entry_info.value.ac.ing_edit_info.ing_vlan_edit_profile:\n\r"
    "  Ingress-VLAN-Edit-Profile.Used together with the packet's tag structure to\n\r"
    "  set packet's Ingress VLAN Editing command to perform over the packet. see\n\r"
    "  soc_ppd_lif_ing_vlan_edit_command_info_set()Range: 0 - 7.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos lif_table_entry_update lif_ndx 0 index 0 fec_id 0\n\r"
    "  routing_enablers_bm 0 processing_type 0 vrf_id 0 uc_rpf_enable 0 rif_id 0\n\r"
    "  tpid2_index 0 tpid1_index 0 learn_enable 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0\n\r"
    "  cos_profile 0 tpid_profile_index 0 orientation 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 enable_learning 0\n\r"
    "  trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0 push_profile 0\n\r"
    "  label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0\n\r"
    "  default_frwrd_type 0 vsid 0 cos_profile 0 orientation 0 trap_action_profile_id\n\r"
    "  0 trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0\n\r"
    "  pcp_dei 0 edit_pcp_profile 0 vid 0 ing_vlan_edit_profile 0 tm_destination 0\n\r"
    "  is_learn_ac 0 enable_learning 0 vsid 0 type 0x1\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(18)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_TABLE_ENTRY_UPDATE_LIF_TABLE_ENTRY_UPDATE_LIF_ENTRY_INFO_VALUE_AC_LEARN_TYPE_ID, 
    "learn_type", 
    (PARAM_VAL_RULES *)&SOC_PPC_L2_LIF_AC_LEARN_TYPE_rule[0], 
    (sizeof(SOC_PPC_L2_LIF_AC_LEARN_TYPE_rule) / sizeof(SOC_PPC_L2_LIF_AC_LEARN_TYPE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  prm_acs_group_info.acs_info[ prm_acs_info_index].learn_info.learn_type:\n\r"
    "  When enabled, packets arriving with this AC are dynamically learned\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif ac_add in_vc_label 0 lif_index 0 cos_profile 0\n\r"
    "  tpid_profile_index 0 orientation 0 trap_action_profile_id 0 trap_qualifier 0\n\r"
    "  val 0 type 0 isid 0 push_profile 0 label 0 command 0 dest_nick 0 is_multicast\n\r"
    "  0 type 0 dest_id 0 type 0 learn_type 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0 vsid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(18)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_TABLE_ENTRY_UPDATE_LIF_TABLE_ENTRY_UPDATE_LIF_ENTRY_INFO_VALUE_AC_VSID_ID, 
    "ac_vsid", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  lif_entry_info.value.ac.vsid:\n\r"
    "  Virtual Switch ID\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos lif_table_entry_update lif_ndx 0 index 0 fec_id 0\n\r"
    "  routing_enablers_bm 0 processing_type 0 vrf_id 0 uc_rpf_enable 0 rif_id 0\n\r"
    "  tpid2_index 0 tpid1_index 0 learn_enable 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0\n\r"
    "  cos_profile 0 tpid_profile_index 0 orientation 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 enable_learning 0\n\r"
    "  trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0 push_profile 0\n\r"
    "  label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0\n\r"
    "  default_frwrd_type 0 vsid 0 cos_profile 0 orientation 0 trap_action_profile_id\n\r"
    "  0 trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0\n\r"
    "  pcp_dei 0 edit_pcp_profile 0 vid 0 ing_vlan_edit_profile 0 tm_destination 0\n\r"
    "  is_learn_ac 0 enable_learning 0 vsid 0 type 0x1\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(18)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_TABLE_ENTRY_UPDATE_LIF_TABLE_ENTRY_UPDATE_LIF_ENTRY_INFO_TYPE_ID, 
    "type", 
    (PARAM_VAL_RULES *)&SOC_PPC_LIF_ENTRY_TYPE_rule[0], 
    (sizeof(SOC_PPC_LIF_ENTRY_TYPE_rule) / sizeof(SOC_PPC_LIF_ENTRY_TYPE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  lif_entry_info.type:\n\r"
    "  LIF entry Type \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos lif_table_entry_update lif_ndx 0 index 0 fec_id 0\n\r"
    "  routing_enablers_bm 0 processing_type 0 vrf_id 0 uc_rpf_enable 0 rif_id 0\n\r"
    "  tpid2_index 0 tpid1_index 0 learn_enable 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0\n\r"
    "  cos_profile 0 tpid_profile_index 0 orientation 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 enable_learning 0\n\r"
    "  trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0 push_profile 0\n\r"
    "  label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0\n\r"
    "  default_frwrd_type 0 vsid 0 cos_profile 0 orientation 0 trap_action_profile_id\n\r"
    "  0 trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 default_frwrd_type 0\n\r"
    "  pcp_dei 0 edit_pcp_profile 0 vid 0 ing_vlan_edit_profile 0 tm_destination 0\n\r"
    "  is_learn_ac 0 enable_learning 0 vsid 0 type 0x1\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(18)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },
  { 
    SOC_PARAM_PPD_LIF_COS_PROFILE_INFO_SET_PROFILE_INFO_SET_ID, 
    "profile_info_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set CoS Profile attributes.Incoming LIFs are mapped to CoS Profile.CoS\n\r"
    "  Profile '0' defined to keep the previous settings. The other CoS profiles are\n\r"
    "  configured by this function.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos profile_info_set cos_profile_ndx 0 forced_dp 0 forced_tc 0\n\r"
    "  map_from_tc_dp 0 map_when_l2 0 map_when_mpls 0 map_when_ip 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(20)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_COS_PROFILE_INFO_SET_PROFILE_INFO_SET_COS_PROFILE_NDX_ID, 
    "cos_profile_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  cos_profile_ndx:\n\r"
    "  CoS Profile ID. Range: 1 - 15.	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos profile_info_set cos_profile_ndx 0 forced_dp 0 forced_tc 0\n\r"
    "  map_from_tc_dp 0 map_when_l2 0 map_when_mpls 0 map_when_ip 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(20)}, 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_COS_PROFILE_INFO_SET_PROFILE_INFO_SET_PROFILE_INFO_FORCED_DP_ID, 
    "forced_dp", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  profile_info.forced_dp:\n\r"
    "  Forced DP, when mapping is disabled, from the specific header type.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos profile_info_set cos_profile_ndx 0 forced_dp 0 forced_tc 0\n\r"
    "  map_from_tc_dp 0 map_when_l2 0 map_when_mpls 0 map_when_ip 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(20)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_COS_PROFILE_INFO_SET_PROFILE_INFO_SET_PROFILE_INFO_FORCED_TC_ID, 
    "forced_tc", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  profile_info.forced_tc:\n\r"
    "  Forced TC, when mapping is disabled, from the specific header type.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos profile_info_set cos_profile_ndx 0 forced_dp 0 forced_tc 0\n\r"
    "  map_from_tc_dp 0 map_when_l2 0 map_when_mpls 0 map_when_ip 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(20)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_COS_PROFILE_INFO_SET_PROFILE_INFO_SET_PROFILE_INFO_MAP_FROM_TC_DP_ID, 
    "map_from_tc_dp", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  profile_info.map_from_tc_dp:\n\r"
    "  TRUE: Enable mapping from TC & DP.\n\r"
    "  soc_ppd_lif_cos_profile_map_tc_dp_info_set() set the mapping of TC & DP to new TC\n\r"
    "  & DP according to the CoS-Profile\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos profile_info_set cos_profile_ndx 0 forced_dp 0 forced_tc 0\n\r"
    "  map_from_tc_dp 0 map_when_l2 0 map_when_mpls 0 map_when_ip 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(20)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_COS_PROFILE_INFO_SET_PROFILE_INFO_SET_PROFILE_INFO_MAP_WHEN_L2_ID, 
    "map_when_l2", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  profile_info.map_when_l2:\n\r"
    "  TRUE: Enable mapping from L2 VLAN tag.\n\r"
    "  soc_ppd_lif_cos_profile_map_l2_info_set() set the mapping of Tag type, UP/PCP and\n\r"
    "  DEI to TC & DP according to the CoS-Profile\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos profile_info_set cos_profile_ndx 0 forced_dp 0 forced_tc 0\n\r"
    "  map_from_tc_dp 0 map_when_l2 0 map_when_mpls 0 map_when_ip 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(20)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_COS_PROFILE_INFO_SET_PROFILE_INFO_SET_PROFILE_INFO_MAP_WHEN_MPLS_ID, 
    "map_when_mpls", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  profile_info.map_when_mpls:\n\r"
    "  TRUE: Enable mapping from MPLS.\n\r"
    "  soc_ppd_lif_cos_profile_map_mpls_info_set() set the mapping of EXP to TC & DP\n\r"
    "  according to the CoS-Profile\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos profile_info_set cos_profile_ndx 0 forced_dp 0 forced_tc 0\n\r"
    "  map_from_tc_dp 0 map_when_l2 0 map_when_mpls 0 map_when_ip 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(20)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_COS_PROFILE_INFO_SET_PROFILE_INFO_SET_PROFILE_INFO_MAP_WHEN_IP_ID, 
    "map_when_ip", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  profile_info.map_when_ip:\n\r"
    "  TRUE: Enable mapping from IP.\n\r"
    "  soc_ppd_lif_cos_profile_map_ip_info_set() set the mapping of TOS(DSCP) to TC & DP\n\r"
    "  according to the CoS-Profile\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos profile_info_set cos_profile_ndx 0 forced_dp 0 forced_tc 0\n\r"
    "  map_from_tc_dp 0 map_when_l2 0 map_when_mpls 0 map_when_ip 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(20)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_COS_PROFILE_INFO_GET_PROFILE_INFO_GET_ID, 
    "profile_info_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set CoS Profile attributes.Incoming LIFs are mapped to CoS Profile.CoS\n\r"
    "  Profile '0' defined to keep the previous settings. The other CoS profiles are\n\r"
    "  configured by this function.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos profile_info_get cos_profile_ndx 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(21)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_COS_PROFILE_INFO_GET_PROFILE_INFO_GET_COS_PROFILE_NDX_ID, 
    "cos_profile_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  cos_profile_ndx:\n\r"
    "  CoS Profile ID. Range: 1 - 15.	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos profile_info_get cos_profile_ndx 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(21)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },
  { 
    SOC_PARAM_PPD_LIF_COS_PROFILE_MAP_TC_DP_INFO_SET_PROFILE_MAP_TC_DP_INFO_SET_ID, 
    "profile_map_tc_dp_info_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set remapping from TC and DP to TC and DP.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos profile_map_tc_dp_info_set map_tbl_ndx 0 dp 0 tc 0\n\r"
    "  overwrite_dp 0 dp 0 overwrite_tc 0 tc 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(22)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_COS_PROFILE_MAP_TC_DP_INFO_SET_PROFILE_MAP_TC_DP_INFO_SET_MAP_TBL_NDX_ID, 
    "map_tbl_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  map_tbl_ndx:\n\r"
    "  Mapping table ID. Range: 1 - 15.The map table index is the CoS profile.	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos profile_map_tc_dp_info_set map_tbl_ndx 0 dp 0 tc 0\n\r"
    "  overwrite_dp 0 dp 0 overwrite_tc 0 tc 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(22)}, 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_COS_PROFILE_MAP_TC_DP_INFO_SET_PROFILE_MAP_TC_DP_INFO_SET_MAP_KEY_DP_ID, 
    "key_dp", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  map_key.dp:\n\r"
    "  Drop Precedence value. (0-3)\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos profile_map_tc_dp_info_set map_tbl_ndx 0 dp 0 tc 0\n\r"
    "  overwrite_dp 0 dp 0 overwrite_tc 0 tc 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(22)}, 
    4, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_COS_PROFILE_MAP_TC_DP_INFO_SET_PROFILE_MAP_TC_DP_INFO_SET_MAP_KEY_TC_ID, 
    "key_tc", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  map_key.tc:\n\r"
    "  Traffic Class (0-7)\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos profile_map_tc_dp_info_set map_tbl_ndx 0 dp 0 tc 0\n\r"
    "  overwrite_dp 0 dp 0 overwrite_tc 0 tc 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(22)}, 
    5, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_COS_PROFILE_MAP_TC_DP_INFO_SET_PROFILE_MAP_TC_DP_INFO_SET_MAP_VALUE_DP_ID, 
    "dp", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  map_value.dp:\n\r"
    "  Drop Precedence value.Range: 0 - 3.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos profile_map_tc_dp_info_set map_tbl_ndx 0 dp 0 tc 0\n\r"
    "  overwrite_dp 0 dp 0 overwrite_tc 0 tc 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(22)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_COS_PROFILE_MAP_TC_DP_INFO_SET_PROFILE_MAP_TC_DP_INFO_SET_MAP_VALUE_TC_ID, 
    "tc", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  map_value.tc:\n\r"
    "  Traffic Class value.Range: 0 - 7.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos profile_map_tc_dp_info_set map_tbl_ndx 0 dp 0 tc 0\n\r"
    "  overwrite_dp 0 dp 0 overwrite_tc 0 tc 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(22)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_COS_PROFILE_MAP_TC_DP_INFO_GET_PROFILE_MAP_TC_DP_INFO_GET_ID, 
    "profile_map_tc_dp_info_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set remapping from TC and DP to TC and DP.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos profile_map_tc_dp_info_get map_tbl_ndx 0 dp 0 tc 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(23)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_COS_PROFILE_MAP_TC_DP_INFO_GET_PROFILE_MAP_TC_DP_INFO_GET_MAP_TBL_NDX_ID, 
    "map_tbl_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  map_tbl_ndx:\n\r"
    "  Mapping table ID. Range: 1 - 15.The map table index is the CoS profile.	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos profile_map_tc_dp_info_get map_tbl_ndx 0 dp 0 tc 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(23)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_COS_PROFILE_MAP_TC_DP_INFO_GET_PROFILE_MAP_TC_DP_INFO_GET_MAP_KEY_DP_ID, 
    "key_dp", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  map_key.dp:\n\r"
    "  Drop Precedence value. (0-3)\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos profile_map_tc_dp_info_get map_tbl_ndx 0 dp 0 tc 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(23)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LIF_COS_PROFILE_MAP_TC_DP_INFO_GET_PROFILE_MAP_TC_DP_INFO_GET_MAP_KEY_TC_ID, 
    "key_tc", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  map_key.tc:\n\r"
    "  Traffic Class (0-7)\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lif_cos profile_map_tc_dp_info_get map_tbl_ndx 0 dp 0 tc 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(23)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },
  { 
    SOC_PARAM_PPD_API_LIF_COS_ID, 
    "lif_cos", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "",
    "", 
    "",
    {0, 0, 0, BIT(28)|BIT(29)|BIT(30)|BIT(31), BIT(0)|BIT(1)|BIT(2)|BIT(3)|BIT(4)|BIT(5)|BIT(6)|BIT(7)|BIT(8)|BIT(9)|BIT(10)|BIT(11)|BIT(12)|BIT(13)|BIT(14)|BIT(15)|BIT(16)|BIT(17)|BIT(18)|BIT(20)|BIT(21)|BIT(22)|BIT(23)}, 
    1, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
#endif /* } lif_cos*/
#ifdef UI_FRWRD_MACT/* { frwrd_mact*/
  { 
    SOC_PARAM_PPD_FRWRD_MACT_ENTRY_ADD_ENTRY_ADD_ID, 
    "entry_add", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Add an entry to the MAC table.Given a key, e.g. (FID, MAC), the packets\n\r"
    "  associated with this FID and having this MAC address as DA will be processed\n\r"
    "  and forwarded according to the given value.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact entry_add add_type 0 fid 0 dip 0 fid 0 mac 0 key_type 0\n\r"
    "  age_status 0 is_dynamic 0 drop_when_sa_is_known 0 forward_decision 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_ENTRY_ADD_ENTRY_ADD_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_ENTRY_ADD_ENTRY_ADD_ADD_TYPE_ID, 
    "add_type", 
    (PARAM_VAL_RULES *)&SOC_PPC_FRWRD_MACT_ADD_TYPE_rule[0], 
    (sizeof(SOC_PPC_FRWRD_MACT_ADD_TYPE_rule) / sizeof(SOC_PPC_FRWRD_MACT_ADD_TYPE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  add_type:\n\r"
    "  Describe how this entry is added (insert/learn/refresh).\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact entry_add add_type 0 fid 0 dip 0 fid 0 mac 0 key_type 0\n\r"
    "  age_status 0 is_dynamic 0 drop_when_sa_is_known 0 forward_decision 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_ENTRY_ADD_ENTRY_ADD_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_ENTRY_ADD_ENTRY_ADD_MAC_ENTRY_KEY_FID_ID, 
    "fid", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  mac_entry_key.key_val.ipv4_mc.fid:\n\r"
    "  Filtering ID. Set according to VSI. See\n\r"
    "  soc_ppd_frwrd_mact_fid_profile_to_fid_map_set().The fid may be globally\n\r"
    "  masked. See soc_ppd_frwrd_mact_ip_compatible_mc_info_set(), if fid is\n\r"
    "  masked, then fid value has to be zero.Range: Petra: 0 - 16K-1.T20E: 0 - 64K-1\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact entry_add add_type 0 fid 0 dip 0 fid 0 mac 0 key_type 0\n\r"
    "  age_status 0 is_dynamic 0 drop_when_sa_is_known 0 forward_decision 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_ENTRY_ADD_ENTRY_ADD_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_ENTRY_ADD_ENTRY_ADD_MAC_ENTRY_KEY_MAC_ID, 
    "mac", 
    (PARAM_VAL_RULES *)&soc_ppd_api_mac_addr_vals[0], 
    (sizeof(soc_ppd_api_mac_addr_vals) / sizeof(soc_ppd_api_mac_addr_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  mac_entry_key.key_val.ipv4_mc.dip:\n\r"
    "  Packet DIP (Destination IP address).Address has to be IPv4 MC address i.e.\n\r"
    "  dip[31:28] = 0xE.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact entry_add add_type 0 fid 0 dip 0 fid 0 mac 0 key_type 0\n\r"
    "  age_status 0 is_dynamic 0 drop_when_sa_is_known 0 forward_decision 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_ENTRY_ADD_ENTRY_ADD_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_ENTRY_ADD_ENTRY_ADD_MAC_ENTRY_KEY_DIP_ID, 
    "dip", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  mac_entry_key.key_val.mac.fid:\n\r"
    "  Filtering ID. Set according to VSI. See\n\r"
    "  soc_ppd_frwrd_mact_fid_profile_to_fid_map_set()Range: Petra: 0 - 16K-1.T20E:\n\r"
    "  0 - 64K-1\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact entry_add add_type 0 fid 0 dip 0 fid 0 mac 0 key_type 0\n\r"
    "  age_status 0 is_dynamic 0 drop_when_sa_is_known 0 forward_decision 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_ENTRY_ADD_ENTRY_ADD_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_ENTRY_ADD_ENTRY_ADD_MAC_ENTRY_VALUE_AGING_INFO_IS_DYNAMIC_ID, 
    "is_dynamic", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  mac_entry_value.aging_info.is_dynamic:\n\r"
    "  Is the entry dynamic (i.e. not static) and participates in the aging process.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact entry_add add_type 0 fid 0 mac 0 is_dynamic 0\n\r"
    "  drop_when_sa_is_known 0 trap_action_profile_id 0 trap_qualifier 0 val 0 type\n\r"
    "  0 isid 0 push_profile 0 label 0 command 0 dest_nick 0 is_multicast 0 type 0\n\r"
    "  dest_id 0 type 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_ENTRY_ADD_ENTRY_ADD_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  }, 
  { 
    SOC_PARAM_PPD_FRWRD_MACT_ENTRY_ADD_ENTRY_ADD_MAC_ENTRY_VALUE_AGING_INFO_AGE_STATUS_ID, 
    "age_status", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  mac_entry_value.aging_info.age_status:\n\r"
    "  Is the entry dynamic (i.e. not static) and participates in the aging process.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact entry_add add_type 0 fid 0 mac 0 age_status 0\n\r"
    "  drop_when_sa_is_known 0 trap_action_profile_id 0 trap_qualifier 0 val 0 type\n\r"
    "  0 isid 0 push_profile 0 label 0 command 0 dest_nick 0 is_multicast 0 type 0\n\r"
    "  dest_id 0 type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, BIT(19)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  

  { 
    SOC_PARAM_PPD_FRWRD_MACT_ENTRY_ADD_ENTRY_ADD_MAC_ENTRY_VALUE_FRWRD_INFO_DROP_WHEN_SA_IS_KNOWN_ID, 
    "drop_when_sa_is_known", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
#ifdef COMPILER_STRING_CONST_LIMIT
    "  Full documentation cannot be displayed with -pendantic compiler\n\r",
#else
    "  mac_entry_value.frwrd_info.drop_when_sa_is_known:\n\r"
    "  Petra-B only. Has to be FALSE for T20E.If TRUE - For an SA lookup match, then\n\r"
    "  the packet is forwarded according to a special action profile - see\n\r"
    "  soc_ppd_frwrd_mact_trap_info_set(). If FALSE - SA lookup match does not\n\r"
    "  affect forwarding.Drop according to SA, is done by the device in one of the\n\r"
    "  following:1. SA-based VID-assignment is activated.2. Device performs Ingress\n\r"
    "  Learning.Use soc_ppd_frwrd_mact_port_info_set to set the action to perform\n\r"
    "  when such an SA is encountered.\n\r"
    "",
#endif /* COMPILER_STRING_CONST_LIMIT */
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact entry_add add_type 0 fid 0 dip 0 fid 0 mac 0 key_type 0\n\r"
    "  age_status 0 is_dynamic 0 drop_when_sa_is_known 0 forward_decision 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_ENTRY_ADD_ENTRY_ADD_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_DECISION_FD_TRAP_CODE_ID, 
    "fd_trap_code", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals/*SOC_PPC_TRAP_CODE_rule*/[0], 
    (sizeof(soc_ppd_api_free_vals/*SOC_PPC_TRAP_CODE_rule*/) / sizeof(soc_ppd_api_free_vals/*SOC_PPC_TRAP_CODE_rule*/[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pwe_info.default_frwrd.default_forwarding.additional_info.trap_info.trap_acti\n\r"
    "  n_profile_id:\n\r"
    "  Trapping action profile ID.Range: 0-15.Points to a database that holds\n\r"
    "  trapping options. The profile ID selects the CPU to handle the trap; The CPU\n\r"
    "  port ID; the priority of the message; etc.The TRAP action profile is\n\r"
    "  configured via soc_ppd_trap_mgmt_frwrd_profile_info_set()\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact entry_add add_type 0 fid 0 mac 0 is_dynamic 0\n\r"
    "  drop_when_sa_is_known 0 trap_action_profile_id 0 trap_qualifier 0 val 0 type\n\r"
    "  0 isid 0 push_profile 0 label 0 command 0 dest_nick 0 is_multicast 0 type 0\n\r"
    "  dest_id 0 type 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_ENTRY_ADD_ENTRY_ADD_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_DECISION_FD_FWD_STRENGTH_ID, 
    "fd_frwrd_strength", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pwe_info.default_frwrd.default_forwarding.additional_info.trap_info.trap_qual\n\r"
    "  fier:\n\r"
    "  Trap qualifier to be associated with the packet to identify the trap. Range:\n\r"
    "  0-4K.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact entry_add add_type 0 fid 0 mac 0 is_dynamic 0\n\r"
    "  drop_when_sa_is_known 0 trap_action_profile_id 0 trap_qualifier 0 val 0 type\n\r"
    "  0 isid 0 push_profile 0 label 0 command 0 dest_nick 0 is_multicast 0 type 0\n\r"
    "  dest_id 0 type 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_ENTRY_ADD_ENTRY_ADD_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_DECISION_FD_SNOOP_STRENGTH_ID,
    "fd_snp_strength", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pwe_info.default_frwrd.default_forwarding.additional_info.outlif.val:\n\r"
    "  Out-LIF value, according to type. May be AC / EEP / VSI\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact entry_add add_type 0 fid 0 mac 0 is_dynamic 0\n\r"
    "  drop_when_sa_is_known 0 trap_action_profile_id 0 trap_qualifier 0 val 0 type\n\r"
    "  0 isid 0 push_profile 0 label 0 command 0 dest_nick 0 is_multicast 0 type 0\n\r"
    "  dest_id 0 type 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_ENTRY_ADD_ENTRY_ADD_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_DECISION_FD_AC_ID,
    "fd_ac_id", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pwe_info.default_frwrd.default_forwarding.additional_info.outlif.val:\n\r"
    "  Out-LIF value, according to type. May be AC / EEP / VSI\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact entry_add add_type 0 fid 0 mac 0 is_dynamic 0\n\r"
    "  drop_when_sa_is_known 0 trap_action_profile_id 0 trap_qualifier 0 val 0 type\n\r"
    "  0 isid 0 push_profile 0 label 0 command 0 dest_nick 0 is_multicast 0 type 0\n\r"
    "  dest_id 0 type 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_ENTRY_ADD_ENTRY_ADD_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_DECISION_FD_EEP_NDX_ID,
    "fd_eep_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pwe_info.default_frwrd.default_forwarding.additional_info.outlif.val:\n\r"
    "  Out-LIF value, according to type. May be AC / EEP / VSI\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact entry_add add_type 0 fid 0 mac 0 is_dynamic 0\n\r"
    "  drop_when_sa_is_known 0 trap_action_profile_id 0 trap_qualifier 0 val 0 type\n\r"
    "  0 isid 0 push_profile 0 label 0 command 0 dest_nick 0 is_multicast 0 type 0\n\r"
    "  dest_id 0 type 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_ENTRY_ADD_ENTRY_ADD_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_DECISION_FD_ISID_ID,
    "fd_isid_id", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pwe_info.default_frwrd.default_forwarding.additional_info.outlif.val:\n\r"
    "  Out-LIF value, according to type. May be AC / EEP / VSI\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact entry_add add_type 0 fid 0 mac 0 is_dynamic 0\n\r"
    "  drop_when_sa_is_known 0 trap_action_profile_id 0 trap_qualifier 0 val 0 type\n\r"
    "  0 isid 0 push_profile 0 label 0 command 0 dest_nick 0 is_multicast 0 type 0\n\r"
    "  dest_id 0 type 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_ENTRY_ADD_ENTRY_ADD_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_DECISION_FD_PUSH_PROFILE_ID, 
    "fd_push_profile", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pwe_info.default_frwrd.default_forwarding.additional_info.eei.val.mpls_comman\n\r"
    "  .push_profile:\n\r"
    "  If the command is push, this is the push profile used to construct the\n\r"
    "  label's TTL and EXP.Otherwise, this field is ignored.Range: 0 - 7.EEI may\n\r"
    "  include the MPLS command, but then the command cannot be Push with\n\r"
    "  push_profile 0. See SOC_PPC_EEI.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact entry_add add_type 0 fid 0 mac 0 is_dynamic 0\n\r"
    "  drop_when_sa_is_known 0 trap_action_profile_id 0 trap_qualifier 0 val 0 type\n\r"
    "  0 isid 0 push_profile 0 label 0 command 0 dest_nick 0 is_multicast 0 type 0\n\r"
    "  dest_id 0 type 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_ENTRY_ADD_ENTRY_ADD_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_DECISION_FD_LABEL_ID, 
    "fd_label", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pwe_info.default_frwrd.default_forwarding.additional_info.eei.val.mpls_comman\n\r"
    "  .label:\n\r"
    "  Label. Relevant if the command is push or swap.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact entry_add add_type 0 fid 0 mac 0 is_dynamic 0\n\r"
    "  drop_when_sa_is_known 0 trap_action_profile_id 0 trap_qualifier 0 val 0 type\n\r"
    "  0 isid 0 push_profile 0 label 0 command 0 dest_nick 0 is_multicast 0 type 0\n\r"
    "  dest_id 0 type 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_ENTRY_ADD_ENTRY_ADD_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_DECISION_FD_IS_LAG_ID, 
    "fd_is_lag", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pwe_info.default_frwrd.default_forwarding.additional_info.eei.val.trill_dest.\n\r"
    "  s_multicast:\n\r"
    "  Is the TRILL packet is sent as multicast (flooded in the Distribution Tree)\n\r"
    "  or sent as Unicast to Egress Nick.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact entry_add add_type 0 fid 0 mac 0 is_dynamic 0\n\r"
    "  drop_when_sa_is_known 0 trap_action_profile_id 0 trap_qualifier 0 val 0 type\n\r"
    "  0 isid 0 push_profile 0 label 0 command 0 dest_nick 0 is_multicast 0 type 0\n\r"
    "  dest_id 0 type 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_ENTRY_ADD_ENTRY_ADD_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_DECISION_FD_DEST_ID, 
    "fd_dest_id", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pwe_info.default_frwrd.default_forwarding.dest_id:\n\r"
    "  Destination ID, according to type.Multicast: MIDFEC:\n\r"
    "  FEC IDTrap:\n\r"
    "  IgnoredDrop:\n\r"
    "  IgnoredUnicast:\n\r"
    "  System port. When LAG, the user should\n\r"
    "  use SOC_PPD_LAG_ID(lag-id). When system\n\r"
    "  port is with allocated QoS resources the\n\r"
    "  user should use\n\r"
    "  SOC_PPD_DIRECT_FLOW_ID(flow-id)\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact entry_add add_type 0 fid 0 mac 0 is_dynamic 0\n\r"
    "  drop_when_sa_is_known 0 trap_action_profile_id 0 trap_qualifier 0 val 0 type\n\r"
    "  0 isid 0 push_profile 0 label 0 command 0 dest_nick 0 is_multicast 0 type 0\n\r"
    "  dest_id 0 type 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_ENTRY_ADD_ENTRY_ADD_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_DECISION_FD_TYPE_ID, 
    "fd_type",
    (PARAM_VAL_RULES *)&SOC_PPD_FRWRD_DECISION_MACRO_TYPE_rule[0], 
    (sizeof(SOC_PPD_FRWRD_DECISION_MACRO_TYPE_rule) / sizeof(SOC_PPD_FRWRD_DECISION_MACRO_TYPE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pwe_info.default_frwrd.default_forwarding.type:\n\r"
    "  Forwarding decision type:Unicast without FEC; Multicast without FEC; FEC;\n\r"
    "  Drop or Trap\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact entry_add add_type 0 fid 0 mac 0 is_dynamic 0\n\r"
    "  drop_when_sa_is_known 0 trap_action_profile_id 0 trap_qualifier 0 val 0 type\n\r"
    "  0 isid 0 push_profile 0 label 0 command 0 dest_nick 0 is_multicast 0 type 0\n\r"
    "  dest_id 0 type 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_ENTRY_ADD_ENTRY_ADD_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_ENTRY_REMOVE_ENTRY_REMOVE_ID, 
    "entry_remove", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Remove entry from the MAC table according to the given Key.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact entry_remove fid 0 mac 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_ENTRY_REMOVE_ENTRY_REMOVE_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_ENTRY_REMOVE_ENTRY_REMOVE_MAC_ENTRY_KEY_FID_ID, 
    "fid", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  mac_entry_key.key_val.ipv4_mc.fid:\n\r"
    "  Filtering ID. Set according to VSI. See\n\r"
    "  soc_ppd_frwrd_mact_fid_profile_to_fid_map_set().The fid may be globally\n\r"
    "  masked. See soc_ppd_frwrd_mact_ip_compatible_mc_info_set(), if fid is\n\r"
    "  masked, then fid value has to be zero.Range: Petra: 0 - 16K-1.T20E: 0 - 64K-1\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact entry_remove fid 0 dip 0 fid 0 mac 0 key_type 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_ENTRY_REMOVE_ENTRY_REMOVE_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_ENTRY_REMOVE_ENTRY_REMOVE_MAC_ENTRY_KEY_MAC_ID, 
    "mac", 
    (PARAM_VAL_RULES *)&soc_ppd_api_mac_addr_vals[0], 
    (sizeof(soc_ppd_api_mac_addr_vals) / sizeof(soc_ppd_api_mac_addr_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  mac_entry_key.key_val.ipv4_mc.dip:\n\r"
    "  Packet DIP (Destination IP address).Address has to be IPv4 MC address i.e.\n\r"
    "  dip[31:28] = 0xE.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact entry_remove fid 0 dip 0 fid 0 mac 0 key_type 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_ENTRY_REMOVE_ENTRY_REMOVE_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_ENTRY_REMOVE_ENTRY_REMOVE_MAC_ENTRY_KEY_DIP_ID, 
    "dip", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  mac_entry_key.dip:\n\r"
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    "  DIP address\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact entry_remove fid 0 mac 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_ENTRY_REMOVE_ENTRY_REMOVE_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_ENTRY_GET_ENTRY_GET_ID, 
    "entry_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Get entry according to key (FID, MAC address)\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact entry_get fid 0 mac 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_ENTRY_GET_ENTRY_GET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_ENTRY_GET_ENTRY_GET_MAC_ENTRY_KEY_FID_ID, 
    "fid", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  mac_entry_key.key_val.ipv4_mc.fid:\n\r"
    "  Filtering ID. Set according to VSI. See\n\r"
    "  soc_ppd_frwrd_mact_fid_profile_to_fid_map_set().The fid may be globally\n\r"
    "  masked. See soc_ppd_frwrd_mact_ip_compatible_mc_info_set(), if fid is\n\r"
    "  masked, then fid value has to be zero.Range: Petra: 0 - 16K-1.T20E: 0 - 64K-1\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact entry_get fid 0 dip 0 fid 0 mac 0 key_type 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_ENTRY_GET_ENTRY_GET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_ENTRY_GET_ENTRY_GET_MAC_ENTRY_KEY_MAC_ID, 
    "mac", 
    (PARAM_VAL_RULES *)&soc_ppd_api_mac_addr_vals[0], 
    (sizeof(soc_ppd_api_mac_addr_vals) / sizeof(soc_ppd_api_mac_addr_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  mac_entry_key.mac:\n\r"
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    "  MAC address\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact entry_get fid 0 dip 0 fid 0 mac 0 key_type 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_ENTRY_GET_ENTRY_GET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_ENTRY_GET_ENTRY_GET_MAC_ENTRY_KEY_DIP_ID, 
    "dip", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  mac_entry_key.dip:\n\r"
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    "  DIP address\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact entry_remove fid 0 mac 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_ENTRY_GET_ENTRY_GET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_TRAVERSE_TRAVERSE_ID, 
    "traverse", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Traverse the MACT entries. Compare each entry to a given rule, and for\n\r"
    "  matching entries perform the given action.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact traverse compare_mask 0 is_dynamic 0 drop_when_sa_is_known\n\r"
    "  0 trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0 push_profile\n\r"
    "  0 label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 mask 0\n\r"
    "  fid 0 update_mask 0 is_dynamic 0 drop_when_sa_is_known 0\n\r"
    "  trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0 push_profile 0\n\r"
    "  label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 type 0\n\r"
    "  wait_till_finish 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_TRAVERSE_TRAVERSE_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_TRAVERSE_TRAVERSE_RULE_VALUE_RULE_COMPARE_MASK_ID, 
    "rule_compare_mask", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  rule.value_rule.compare_mask:\n\r"
    "  Bitmap that indicates which fields of the entry to compare. See\n\r"
    "  SOC_PPC_FRWRD_MACT_TRAVERSE_MATCH_SELECT.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact traverse compare_mask 0 is_dynamic 0 drop_when_sa_is_known\n\r"
    "  0 trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0 push_profile\n\r"
    "  0 label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 mask 0\n\r"
    "  fid 0 update_mask 0 is_dynamic 0 drop_when_sa_is_known 0\n\r"
    "  trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0 push_profile 0\n\r"
    "  label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 type 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_TRAVERSE_TRAVERSE_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_TRAVERSE_TRAVERSE_RULE_VALUE_RULE_VAL_AGING_INFO_AGE_STATUS_ID, 
    "rule_age_status", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  rule.value_rule.val.aging_info.age_status:\n\r"
    "  The age status of the entry used for Aging and indicates how fresh is the\n\r"
    "  entry. Higher valule indicates a more fresh recent entry. ForDuring an\n\r"
    "  insertion - soc_ppd_frwrd_mact_entry_add() - may beif ignored then the maximum\n\r"
    "  value is set. For During get a lookup - soc_ppd_frwrd_mact_entry_get() -\n\r"
    "  return the age status is returned, and an age_status = 0 indicates that the\n\r"
    "  entry is aged out but not deleted.Range: (Petra-B) 0 - 6.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact traverse compare_mask 0 age_status 0 is_dynamic 0\n\r"
    "  drop_when_sa_is_known 0 forward_decision 0 fid_mask 0 fid 0 dip_mask 0 dip 0\n\r"
    "  mac_mask 0 mac 0 fid_mask 0 fid 0 key_type 0 update_mask 0 age_status 0\n\r"
    "  is_dynamic 0 drop_when_sa_is_known 0 forward_decision 0 type 0\n\r"
    "  wait_till_finish 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_TRAVERSE_TRAVERSE_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_TRAVERSE_TRAVERSE_RULE_VALUE_RULE_VAL_AGING_INFO_IS_DYNAMIC_ID, 
    "rule_is_dynamic", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  rule.value_rule.val.aging_info.is_dynamic:\n\r"
    "  Is the entry dynamic (i.e. not static) and participates in the aging process.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact traverse compare_mask 0 is_dynamic 0 drop_when_sa_is_known\n\r"
    "  0 trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0 push_profile\n\r"
    "  0 label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 mask 0\n\r"
    "  fid 0 update_mask 0 is_dynamic 0 drop_when_sa_is_known 0\n\r"
    "  trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0 push_profile 0\n\r"
    "  label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 type 0\n\r"
    "  wait_till_finish 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_TRAVERSE_TRAVERSE_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_TRAVERSE_TRAVERSE_RULE_VALUE_RULE_VAL_FRWRD_INFO_DROP_WHEN_SA_IS_KNOWN_ID, 
    "rule_drop_when_sa_is_known", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  rule.value_rule.val.frwrd_info.drop_when_sa_is_known:\n\r"
    "  If TRUE - For an SA lookup match, then the packet is forwarded according to\n\r"
    "  special action profile - see soc_ppd_frwrd_mact_trap_info_set(). If FALSE -\n\r"
    "  SA lookup match does not affect forwarding.Drop according to SA, is done by\n\r"
    "  the device in one of the following:1. SA-based VID-assignment is activated.2.\n\r"
    "  Device performs Ingress Learning.Use soc_ppd_frwrd_mact_port_info_set to set\n\r"
    "  the action to perform when such SA is encountered.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact traverse compare_mask 0 is_dynamic 0 drop_when_sa_is_known\n\r"
    "  0 trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0 push_profile\n\r"
    "  0 label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 mask 0\n\r"
    "  fid 0 update_mask 0 is_dynamic 0 drop_when_sa_is_known 0\n\r"
    "  trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0 push_profile 0\n\r"
    "  label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 type 0\n\r"
    "  wait_till_finish 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_TRAVERSE_TRAVERSE_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },
  { 
    SOC_PARAM_PPD_FRWRD_MACT_TRAVERSE_TRAVERSE_RULE_VALUE_RULE_VAL_ACCESSED_ID, 
    "rule_accessed", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  rule.value_rule.val.frwrd_info.drop_when_sa_is_known:\n\r"
    "  If TRUE - For an SA lookup match, then the packet is forwarded according to\n\r"
    "  special action profile - see soc_ppd_frwrd_mact_trap_info_set(). If FALSE -\n\r"
    "  SA lookup match does not affect forwarding.Drop according to SA, is done by\n\r"
    "  the device in one of the following:1. SA-based VID-assignment is activated.2.\n\r"
    "  Device performs Ingress Learning.Use soc_ppd_frwrd_mact_port_info_set to set\n\r"
    "  the action to perform when such SA is encountered.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact traverse compare_mask 0 is_dynamic 0 drop_when_sa_is_known\n\r"
    "  0 trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0 push_profile\n\r"
    "  0 label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 mask 0\n\r"
    "  fid 0 update_mask 0 is_dynamic 0 drop_when_sa_is_known 0\n\r"
    "  trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0 push_profile 0\n\r"
    "  label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 type 0\n\r"
    "  wait_till_finish 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_TRAVERSE_TRAVERSE_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },
  { 
    SOC_PARAM_PPD_FRWRD_DECISION_FD_TRAP_CODE_ID, 
    "rule_fd_trap_code", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals/*SOC_PPC_TRAP_CODE_rule*/[0], 
    (sizeof(soc_ppd_api_free_vals/*SOC_PPC_TRAP_CODE_rule*/) / sizeof(soc_ppd_api_free_vals/*SOC_PPC_TRAP_CODE_rule*/[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pwe_info.default_frwrd.default_forwarding.additional_info.trap_info.trap_acti\n\r"
    "  n_profile_id:\n\r"
    "  Trapping action profile ID.Range: 0-15.Points to a database that holds\n\r"
    "  trapping options. The profile ID selects the CPU to handle the trap; The CPU\n\r"
    "  port ID; the priority of the message; etc.The TRAP action profile is\n\r"
    "  configured via soc_ppd_trap_mgmt_frwrd_profile_info_set()\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact traverse compare_mask 0 is_dynamic 0 drop_when_sa_is_known\n\r"
    "  0 trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0 push_profile\n\r"
    "  0 label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 mask 0\n\r"
    "  fid 0 update_mask 0 is_dynamic 0 drop_when_sa_is_known 0\n\r"
    "  trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0 push_profile 0\n\r"
    "  label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 type 0\n\r"
    "  wait_till_finish 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_TRAVERSE_TRAVERSE_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_DECISION_FD_FWD_STRENGTH_ID, 
    "rule_fd_frwrd_strength", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pwe_info.default_frwrd.default_forwarding.additional_info.trap_info.trap_qual\n\r"
    "  fier:\n\r"
    "  Trap qualifier to be associated with the packet to identify the trap. Range:\n\r"
    "  0-4K.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact traverse compare_mask 0 is_dynamic 0 drop_when_sa_is_known\n\r"
    "  0 trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0 push_profile\n\r"
    "  0 label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 mask 0\n\r"
    "  fid 0 update_mask 0 is_dynamic 0 drop_when_sa_is_known 0\n\r"
    "  trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0 push_profile 0\n\r"
    "  label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 type 0\n\r"
    "  wait_till_finish 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_TRAVERSE_TRAVERSE_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_DECISION_FD_SNOOP_STRENGTH_ID,
    "rule_fd_snp_strength", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pwe_info.default_frwrd.default_forwarding.additional_info.outlif.val:\n\r"
    "  Out-LIF value, according to type. May be AC / EEP / VSI\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact traverse compare_mask 0 is_dynamic 0 drop_when_sa_is_known\n\r"
    "  0 trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0 push_profile\n\r"
    "  0 label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 mask 0\n\r"
    "  fid 0 update_mask 0 is_dynamic 0 drop_when_sa_is_known 0\n\r"
    "  trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0 push_profile 0\n\r"
    "  label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 type 0\n\r"
    "  wait_till_finish 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_TRAVERSE_TRAVERSE_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_DECISION_FD_AC_ID,
    "rule_fd_ac_id", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pwe_info.default_frwrd.default_forwarding.additional_info.outlif.val:\n\r"
    "  Out-LIF value, according to type. May be AC / EEP / VSI\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact traverse compare_mask 0 is_dynamic 0 drop_when_sa_is_known\n\r"
    "  0 trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0 push_profile\n\r"
    "  0 label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 mask 0\n\r"
    "  fid 0 update_mask 0 is_dynamic 0 drop_when_sa_is_known 0\n\r"
    "  trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0 push_profile 0\n\r"
    "  label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 type 0\n\r"
    "  wait_till_finish 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_TRAVERSE_TRAVERSE_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_DECISION_FD_EEP_NDX_ID,
    "rule_fd_eep_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pwe_info.default_frwrd.default_forwarding.additional_info.outlif.val:\n\r"
    "  Out-LIF value, according to type. May be AC / EEP / VSI\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact traverse compare_mask 0 is_dynamic 0 drop_when_sa_is_known\n\r"
    "  0 trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0 push_profile\n\r"
    "  0 label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 mask 0\n\r"
    "  fid 0 update_mask 0 is_dynamic 0 drop_when_sa_is_known 0\n\r"
    "  trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0 push_profile 0\n\r"
    "  label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 type 0\n\r"
    "  wait_till_finish 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_TRAVERSE_TRAVERSE_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_DECISION_FD_PUSH_PROFILE_ID, 
    "rule_fd_push_profile", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pwe_info.default_frwrd.default_forwarding.additional_info.eei.val.mpls_comman\n\r"
    "  .push_profile:\n\r"
    "  If the command is push, this is the push profile used to construct the\n\r"
    "  label's TTL and EXP.Otherwise, this field is ignored.Range: 0 - 7.EEI may\n\r"
    "  include the MPLS command, but then the command cannot be Push with\n\r"
    "  push_profile 0. See SOC_PPC_EEI.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact traverse compare_mask 0 is_dynamic 0 drop_when_sa_is_known\n\r"
    "  0 trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0 push_profile\n\r"
    "  0 label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 mask 0\n\r"
    "  fid 0 update_mask 0 is_dynamic 0 drop_when_sa_is_known 0\n\r"
    "  trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0 push_profile 0\n\r"
    "  label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 type 0\n\r"
    "  wait_till_finish 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_TRAVERSE_TRAVERSE_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_DECISION_FD_LABEL_ID, 
    "rule_fd_label", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pwe_info.default_frwrd.default_forwarding.additional_info.eei.val.mpls_comman\n\r"
    "  .label:\n\r"
    "  Label. Relevant if the command is push or swap.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact traverse compare_mask 0 is_dynamic 0 drop_when_sa_is_known\n\r"
    "  0 trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0 push_profile\n\r"
    "  0 label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 mask 0\n\r"
    "  fid 0 update_mask 0 is_dynamic 0 drop_when_sa_is_known 0\n\r"
    "  trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0 push_profile 0\n\r"
    "  label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 type 0\n\r"
    "  wait_till_finish 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_TRAVERSE_TRAVERSE_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_DECISION_FD_IS_LAG_ID, 
    "rule_fd_is_lag", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pwe_info.default_frwrd.default_forwarding.additional_info.eei.val.trill_dest.\n\r"
    "  s_multicast:\n\r"
    "  Is the TRILL packet is sent as multicast (flooded in the Distribution Tree)\n\r"
    "  or sent as Unicast to Egress Nick.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact traverse compare_mask 0 is_dynamic 0 drop_when_sa_is_known\n\r"
    "  0 trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0 push_profile\n\r"
    "  0 label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 mask 0\n\r"
    "  fid 0 update_mask 0 is_dynamic 0 drop_when_sa_is_known 0\n\r"
    "  trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0 push_profile 0\n\r"
    "  label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 type 0\n\r"
    "  wait_till_finish 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_TRAVERSE_TRAVERSE_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_DECISION_FD_DEST_ID, 
    "rule_fd_dest_id", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pwe_info.default_frwrd.default_forwarding.dest_id:\n\r"
    "  Destination ID, according to type.Multicast: MIDFEC:\n\r"
    "  FEC IDTrap:\n\r"
    "  IgnoredDrop:\n\r"
    "  IgnoredUnicast:\n\r"
    "  System port. When LAG, the user should\n\r"
    "  use SOC_PPD_LAG_ID(lag-id). When system\n\r"
    "  port is with allocated QoS resources the\n\r"
    "  user should use\n\r"
    "  SOC_PPD_DIRECT_FLOW_ID(flow-id)\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact traverse compare_mask 0 is_dynamic 0 drop_when_sa_is_known\n\r"
    "  0 trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0 push_profile\n\r"
    "  0 label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 mask 0\n\r"
    "  fid 0 update_mask 0 is_dynamic 0 drop_when_sa_is_known 0\n\r"
    "  trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0 push_profile 0\n\r"
    "  label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 type 0\n\r"
    "  wait_till_finish 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_TRAVERSE_TRAVERSE_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_DECISION_FD_TYPE_ID, 
    "rule_fd_type",
    (PARAM_VAL_RULES *)&SOC_PPD_FRWRD_DECISION_MACRO_TYPE_rule[0], 
    (sizeof(SOC_PPD_FRWRD_DECISION_MACRO_TYPE_rule) / sizeof(SOC_PPD_FRWRD_DECISION_MACRO_TYPE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pwe_info.default_frwrd.default_forwarding.type:\n\r"
    "  Forwarding decision type:Unicast without FEC; Multicast without FEC; FEC;\n\r"
    "  Drop or Trap\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact traverse compare_mask 0 is_dynamic 0 drop_when_sa_is_known\n\r"
    "  0 trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0 push_profile\n\r"
    "  0 label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 mask 0\n\r"
    "  fid 0 update_mask 0 is_dynamic 0 drop_when_sa_is_known 0\n\r"
    "  trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0 push_profile 0\n\r"
    "  label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 type 0\n\r"
    "  wait_till_finish 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_TRAVERSE_TRAVERSE_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_TRAVERSE_TRAVERSE_RULE_KEY_RULE_FID_MASK_ID, 
    "rule_fid_mask", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  rule.key_rule.mac.fid_mask:\n\r"
    "  Mask over each bit of the FID. Indicates whether to compare it or to ignore\n\r"
    "  it while traversing the MACT DB. Set bit to zero to mask (ignore) the\n\r"
    "  corresponding bit in the FID.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact traverse compare_mask 0 age_status 0 is_dynamic 0\n\r"
    "  drop_when_sa_is_known 0 forward_decision 0 fid_mask 0 fid 0 dip_mask 0 dip 0\n\r"
    "  mac_mask 0 mac 0 fid_mask 0 fid 0 key_type 0 update_mask 0 age_status 0\n\r"
    "  is_dynamic 0 drop_when_sa_is_known 0 forward_decision 0 type 0\n\r"
    "  wait_till_finish 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_TRAVERSE_TRAVERSE_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  {
    SOC_PARAM_PPD_FRWRD_MACT_TRAVERSE_TRAVERSE_RULE_KEY_RULE_FID_ID, 
    "rule_fid", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  rule.key_rule.mac.fid:\n\r"
    "  FID.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact traverse compare_mask 0 age_status 0 is_dynamic 0\n\r"
    "  drop_when_sa_is_known 0 forward_decision 0 fid_mask 0 fid 0 dip_mask 0 dip 0\n\r"
    "  mac_mask 0 mac 0 fid_mask 0 fid 0 key_type 0 update_mask 0 age_status 0\n\r"
    "  is_dynamic 0 drop_when_sa_is_known 0 forward_decision 0 type 0\n\r"
    "  wait_till_finish 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_TRAVERSE_TRAVERSE_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },
  { 
    SOC_PARAM_PPD_FRWRD_MACT_TRAVERSE_TRAVERSE_RULE_KEY_RULE_MAC_MAC_ID, 
    "rule_mac_addr", 
    (PARAM_VAL_RULES *)&soc_ppd_api_mac_addr_vals[0], 
    (sizeof(soc_ppd_api_mac_addr_vals) / sizeof(soc_ppd_api_mac_addr_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  mac_address_key:\n\r"
    "  MAC addressit.	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact traverse compare_mask 0 age_status 0 is_dynamic 0\n\r"
    "  drop_when_sa_is_known 0 forward_decision 0 fid_mask 0 fid 0 dip_mask 0 dip 0\n\r"
    "  mac_mask 0 mac 0 fid_mask 0 fid 0 key_type 0 update_mask 0 age_status 0\n\r"
    "  is_dynamic 0 drop_when_sa_is_known 0 forward_decision 0 type 0\n\r"
    "  wait_till_finish 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_TRAVERSE_TRAVERSE_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_TRAVERSE_TRAVERSE_RULE_KEY_RULE_MAC_MAC_MASK_ID, 
    "rule_mac_addr_mask", 
    (PARAM_VAL_RULES *)&soc_ppd_api_mac_addr_vals[0], 
    (sizeof(soc_ppd_api_mac_addr_vals) / sizeof(soc_ppd_api_mac_addr_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  mac_address_key:\n\r"
    "  MAC MASK.	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact traverse compare_mask 0 age_status 0 is_dynamic 0\n\r"
    "  drop_when_sa_is_known 0 forward_decision 0 fid_mask 0 fid 0 dip_mask 0 dip 0\n\r"
    "  mac_mask 0 mac 0 fid_mask 0 fid 0 key_type 0 update_mask 0 age_status 0\n\r"
    "  is_dynamic 0 drop_when_sa_is_known 0 forward_decision 0 type 0\n\r"
    "  wait_till_finish 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_TRAVERSE_TRAVERSE_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_TRAVERSE_TRAVERSE_ACTION_UPDATE_MASK_ID, 
    "action_update_mask", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  action.update_mask:\n\r"
    "  Bitmap that indicates which fields to update for matched entries. See\n\r"
    "  SOC_PPC_FRWRD_MACT_TRAVERSE_MATCH_SELECT\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact traverse compare_mask 0 is_dynamic 0 drop_when_sa_is_known\n\r"
    "  0 trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0 push_profile\n\r"
    "  0 label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 mask 0\n\r"
    "  fid 0 update_mask 0 is_dynamic 0 drop_when_sa_is_known 0\n\r"
    "  trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0 push_profile 0\n\r"
    "  label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 type 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_TRAVERSE_TRAVERSE_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_TRAVERSE_TRAVERSE_ACTION_UPDATED_VAL_AGING_INFO_AGE_STATUS_ID, 
    "action_update_age_status", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  action.updated_val.aging_info.age_status:\n\r"
    "  The age status of the entry used for Aging and indicates how fresh is the\n\r"
    "  entry. Higher valule indicates a more fresh recent entry. ForDuring an\n\r"
    "  insertion - soc_ppd_frwrd_mact_entry_add() - may beif ignored then the maximum\n\r"
    "  value is set. For During get a lookup - soc_ppd_frwrd_mact_entry_get() -\n\r"
    "  return the age status is returned, and an age_status = 0 indicates that the\n\r"
    "  entry is aged out but not deleted.Range: (Petra-B) 0 - 6.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact traverse compare_mask 0 age_status 0 is_dynamic 0\n\r"
    "  drop_when_sa_is_known 0 forward_decision 0 fid_mask 0 fid 0 dip_mask 0 dip 0\n\r"
    "  mac_mask 0 mac 0 fid_mask 0 fid 0 key_type 0 update_mask 0 age_status 0\n\r"
    "  is_dynamic 0 drop_when_sa_is_known 0 forward_decision 0 type 0\n\r"
    "  wait_till_finish 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_TRAVERSE_TRAVERSE_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_TRAVERSE_TRAVERSE_ACTION_UPDATED_VAL_AGING_INFO_IS_DYNAMIC_ID, 
    "action_update_is_dynamic", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  action.updated_val.aging_info.is_dynamic:\n\r"
    "  Is the entry dynamic (i.e. not static) and participates in the aging process.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact traverse compare_mask 0 is_dynamic 0 drop_when_sa_is_known\n\r"
    "  0 trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0 push_profile\n\r"
    "  0 label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 mask 0\n\r"
    "  fid 0 update_mask 0 is_dynamic 0 drop_when_sa_is_known 0\n\r"
    "  trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0 push_profile 0\n\r"
    "  label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 type 0\n\r"
    "  wait_till_finish 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_TRAVERSE_TRAVERSE_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_TRAVERSE_TRAVERSE_ACTION_UPDATED_VAL_FRWRD_INFO_DROP_WHEN_SA_IS_KNOWN_ID, 
    "action_update_drop_when_sa_is_known", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  action.updated_val.frwrd_info.drop_when_sa_is_known:\n\r"
    "  If TRUE - For an SA lookup match, then the packet is forwarded according to\n\r"
    "  special action profile - see soc_ppd_frwrd_mact_trap_info_set(). If FALSE -\n\r"
    "  SA lookup match does not affect forwarding.Drop according to SA, is done by\n\r"
    "  the device in one of the following:1. SA-based VID-assignment is activated.2.\n\r"
    "  Device performs Ingress Learning.Use soc_ppd_frwrd_mact_port_info_set to set\n\r"
    "  the action to perform when such SA is encountered.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact traverse compare_mask 0 is_dynamic 0 drop_when_sa_is_known\n\r"
    "  0 trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0 push_profile\n\r"
    "  0 label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 mask 0\n\r"
    "  fid 0 update_mask 0 is_dynamic 0 drop_when_sa_is_known 0\n\r"
    "  trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0 push_profile 0\n\r"
    "  label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 type 0\n\r"
    "  wait_till_finish 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_TRAVERSE_TRAVERSE_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_DECISION_FD2_TRAP_CODE_ID, 
    "action_update_fd_trap_code", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals/*SOC_PPC_TRAP_CODE_rule*/[0], 
    (sizeof(soc_ppd_api_free_vals/*SOC_PPC_TRAP_CODE_rule*/) / sizeof(soc_ppd_api_free_vals/*SOC_PPC_TRAP_CODE_rule*/[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pwe_info.default_frwrd.default_forwarding.additional_info.trap_info.trap_acti\n\r"
    "  n_profile_id:\n\r"
    "  Trapping action profile ID.Range: 0-15.Points to a database that holds\n\r"
    "  trapping options. The profile ID selects the CPU to handle the trap; The CPU\n\r"
    "  port ID; the priority of the message; etc.The TRAP action profile is\n\r"
    "  configured via soc_ppd_trap_mgmt_frwrd_profile_info_set()\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact traverse compare_mask 0 is_dynamic 0 drop_when_sa_is_known\n\r"
    "  0 trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0 push_profile\n\r"
    "  0 label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 mask 0\n\r"
    "  fid 0 update_mask 0 is_dynamic 0 drop_when_sa_is_known 0\n\r"
    "  trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0 push_profile 0\n\r"
    "  label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 type 0\n\r"
    "  wait_till_finish 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_TRAVERSE_TRAVERSE_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_DECISION_FD2_FWD_STRENGTH_ID, 
    "action_update_fd_frwrd_strength", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pwe_info.default_frwrd.default_forwarding.additional_info.trap_info.trap_qual\n\r"
    "  fier:\n\r"
    "  Trap qualifier to be associated with the packet to identify the trap. Range:\n\r"
    "  0-4K.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact traverse compare_mask 0 is_dynamic 0 drop_when_sa_is_known\n\r"
    "  0 trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0 push_profile\n\r"
    "  0 label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 mask 0\n\r"
    "  fid 0 update_mask 0 is_dynamic 0 drop_when_sa_is_known 0\n\r"
    "  trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0 push_profile 0\n\r"
    "  label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 type 0\n\r"
    "  wait_till_finish 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_TRAVERSE_TRAVERSE_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_DECISION_FD2_SNOOP_STRENGTH_ID,
    "action_update_fd_snp_strength", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pwe_info.default_frwrd.default_forwarding.additional_info.outlif.val:\n\r"
    "  Out-LIF value, according to type. May be AC / EEP / VSI\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact traverse compare_mask 0 is_dynamic 0 drop_when_sa_is_known\n\r"
    "  0 trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0 push_profile\n\r"
    "  0 label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 mask 0\n\r"
    "  fid 0 update_mask 0 is_dynamic 0 drop_when_sa_is_known 0\n\r"
    "  trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0 push_profile 0\n\r"
    "  label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 type 0\n\r"
    "  wait_till_finish 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_TRAVERSE_TRAVERSE_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_DECISION_FD2_AC_ID,
    "action_update_fd_ac_id", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pwe_info.default_frwrd.default_forwarding.additional_info.outlif.val:\n\r"
    "  Out-LIF value, according to type. May be AC / EEP / VSI\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact traverse compare_mask 0 is_dynamic 0 drop_when_sa_is_known\n\r"
    "  0 trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0 push_profile\n\r"
    "  0 label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 mask 0\n\r"
    "  fid 0 update_mask 0 is_dynamic 0 drop_when_sa_is_known 0\n\r"
    "  trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0 push_profile 0\n\r"
    "  label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 type 0\n\r"
    "  wait_till_finish 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_TRAVERSE_TRAVERSE_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_DECISION_FD2_EEP_NDX_ID,
    "action_update_fd_eep_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pwe_info.default_frwrd.default_forwarding.additional_info.outlif.val:\n\r"
    "  Out-LIF value, according to type. May be AC / EEP / VSI\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact traverse compare_mask 0 is_dynamic 0 drop_when_sa_is_known\n\r"
    "  0 trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0 push_profile\n\r"
    "  0 label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 mask 0\n\r"
    "  fid 0 update_mask 0 is_dynamic 0 drop_when_sa_is_known 0\n\r"
    "  trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0 push_profile 0\n\r"
    "  label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 type 0\n\r"
    "  wait_till_finish 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_TRAVERSE_TRAVERSE_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_DECISION_FD2_PUSH_PROFILE_ID, 
    "action_update_fd_push_profile", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pwe_info.default_frwrd.default_forwarding.additional_info.eei.val.mpls_comman\n\r"
    "  .push_profile:\n\r"
    "  If the command is push, this is the push profile used to construct the\n\r"
    "  label's TTL and EXP.Otherwise, this field is ignored.Range: 0 - 7.EEI may\n\r"
    "  include the MPLS command, but then the command cannot be Push with\n\r"
    "  push_profile 0. See SOC_PPC_EEI.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact traverse compare_mask 0 is_dynamic 0 drop_when_sa_is_known\n\r"
    "  0 trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0 push_profile\n\r"
    "  0 label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 mask 0\n\r"
    "  fid 0 update_mask 0 is_dynamic 0 drop_when_sa_is_known 0\n\r"
    "  trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0 push_profile 0\n\r"
    "  label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 type 0\n\r"
    "  wait_till_finish 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_TRAVERSE_TRAVERSE_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_DECISION_FD2_LABEL_ID, 
    "action_update_fd_label", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pwe_info.default_frwrd.default_forwarding.additional_info.eei.val.mpls_comman\n\r"
    "  .label:\n\r"
    "  Label. Relevant if the command is push or swap.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact traverse compare_mask 0 is_dynamic 0 drop_when_sa_is_known\n\r"
    "  0 trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0 push_profile\n\r"
    "  0 label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 mask 0\n\r"
    "  fid 0 update_mask 0 is_dynamic 0 drop_when_sa_is_known 0\n\r"
    "  trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0 push_profile 0\n\r"
    "  label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 type 0\n\r"
    "  wait_till_finish 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_TRAVERSE_TRAVERSE_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_DECISION_FD2_IS_LAG_ID, 
    "action_update_fd_is_lag", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pwe_info.default_frwrd.default_forwarding.additional_info.eei.val.trill_dest.\n\r"
    "  s_multicast:\n\r"
    "  Is the TRILL packet is sent as multicast (flooded in the Distribution Tree)\n\r"
    "  or sent as Unicast to Egress Nick.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact traverse compare_mask 0 is_dynamic 0 drop_when_sa_is_known\n\r"
    "  0 trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0 push_profile\n\r"
    "  0 label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 mask 0\n\r"
    "  fid 0 update_mask 0 is_dynamic 0 drop_when_sa_is_known 0\n\r"
    "  trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0 push_profile 0\n\r"
    "  label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 type 0\n\r"
    "  wait_till_finish 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_TRAVERSE_TRAVERSE_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_DECISION_FD2_DEST_ID, 
    "action_update_fd_dest_id", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pwe_info.default_frwrd.default_forwarding.dest_id:\n\r"
    "  Destination ID, according to type.Multicast: MIDFEC:\n\r"
    "  FEC IDTrap:\n\r"
    "  IgnoredDrop:\n\r"
    "  IgnoredUnicast:\n\r"
    "  System port. When LAG, the user should\n\r"
    "  use SOC_PPD_LAG_ID(lag-id). When system\n\r"
    "  port is with allocated QoS resources the\n\r"
    "  user should use\n\r"
    "  SOC_PPD_DIRECT_FLOW_ID(flow-id)\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact traverse compare_mask 0 is_dynamic 0 drop_when_sa_is_known\n\r"
    "  0 trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0 push_profile\n\r"
    "  0 label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 mask 0\n\r"
    "  fid 0 update_mask 0 is_dynamic 0 drop_when_sa_is_known 0\n\r"
    "  trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0 push_profile 0\n\r"
    "  label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 type 0\n\r"
    "  wait_till_finish 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_TRAVERSE_TRAVERSE_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_DECISION_FD2_TYPE_ID, 
    "action_update_fd_type",
    (PARAM_VAL_RULES *)&SOC_PPD_FRWRD_DECISION_MACRO_TYPE_rule[0], 
    (sizeof(SOC_PPD_FRWRD_DECISION_MACRO_TYPE_rule) / sizeof(SOC_PPD_FRWRD_DECISION_MACRO_TYPE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pwe_info.default_frwrd.default_forwarding.type:\n\r"
    "  Forwarding decision type:Unicast without FEC; Multicast without FEC; FEC;\n\r"
    "  Drop or Trap\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact traverse compare_mask 0 is_dynamic 0 drop_when_sa_is_known\n\r"
    "  0 trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0 push_profile\n\r"
    "  0 label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 mask 0\n\r"
    "  fid 0 update_mask 0 is_dynamic 0 drop_when_sa_is_known 0\n\r"
    "  trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0 push_profile 0\n\r"
    "  label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 type 0\n\r"
    "  wait_till_finish 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_TRAVERSE_TRAVERSE_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },    { 
    SOC_PARAM_PPD_FRWRD_MACT_TRAVERSE_TRAVERSE_ACTION_TYPE_ID, 
    "action_type", 
    (PARAM_VAL_RULES *)&SOC_PPC_FRWRD_MACT_TRAVERSE_ACTION_TYPE_rule[0], 
    (sizeof(SOC_PPC_FRWRD_MACT_TRAVERSE_ACTION_TYPE_rule) / sizeof(SOC_PPC_FRWRD_MACT_TRAVERSE_ACTION_TYPE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  action.type:\n\r"
    "  Remove or update matched entries.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact traverse compare_mask 0 is_dynamic 0 drop_when_sa_is_known\n\r"
    "  0 trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0 push_profile\n\r"
    "  0 label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 mask 0\n\r"
    "  fid 0 update_mask 0 is_dynamic 0 drop_when_sa_is_known 0\n\r"
    "  trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0 push_profile 0\n\r"
    "  label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 type 0\n\r"
    "  wait_till_finish 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_TRAVERSE_TRAVERSE_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_TRAVERSE_TRAVERSE_WAIT_TILL_FINISH_ID, 
    "wait_till_finish", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  wait_till_finish:\n\r"
    "  If TRUE, then the function returns only when the traverse operation is\n\r"
    "  terminated; otherwise, it returns immediately.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact traverse compare_mask 0 is_dynamic 0 drop_when_sa_is_known\n\r"
    "  0 trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0 push_profile\n\r"
    "  0 label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 mask 0\n\r"
    "  fid 0 update_mask 0 is_dynamic 0 drop_when_sa_is_known 0\n\r"
    "  trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0 push_profile 0\n\r"
    "  label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 type 0\n\r"
    "  wait_till_finish 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_TRAVERSE_TRAVERSE_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_TRAVERSE_STATUS_GET_TRAVERSE_STATUS_GET_ID, 
    "traverse_status_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Returns the status of the traverse, including which action is performed and\n\r"
    "  according to what rule, besides the expected time to finish the traverse and\n\r"
    "  the matched entries if the traverse was finished.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact traverse_status_get\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_TRAVERSE_STATUS_GET_TRAVERSE_STATUS_GET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_GET_BLOCK_GET_BLOCK_ID, 
    "get_block", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Traverse the MAC Table entries(in specified range), and retrieve entries that\n\r"
    "  match the given rule.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact get_block compare_mask 0 is_dynamic 0\n\r"
    "  drop_when_sa_is_known 0 trap_action_profile_id 0 trap_qualifier 0 val 0 type\n\r"
    "  0 isid 0 push_profile 0 label 0 command 0 dest_nick 0 is_multicast 0 type 0\n\r"
    "  dest_id 0 type 0 mask 0 fid 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_GET_BLOCK_GET_BLOCK_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_GET_BLOCK_GET_BLOCK_RULE_VALUE_RULE_COMPARE_MASK_ID, 
    "compare_mask", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  rule.value_rule.compare_mask:\n\r"
    "  Bitmap that indicates which fields of the entry to compare. See\n\r"
    "  SOC_PPC_FRWRD_MACT_TRAVERSE_MATCH_SELECT.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact get_block compare_mask 0 is_dynamic 0\n\r"
    "  drop_when_sa_is_known 0 trap_action_profile_id 0 trap_qualifier 0 val 0 type\n\r"
    "  0 isid 0 push_profile 0 label 0 command 0 dest_nick 0 is_multicast 0 type 0\n\r"
    "  dest_id 0 type 0 mask 0 fid 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_GET_BLOCK_GET_BLOCK_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_GET_BLOCK_GET_BLOCK_RULE_VALUE_RULE_VAL_AGING_INFO_AGE_STATUS_ID, 
    "rule_age_status", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  rule.value_rule.val.aging_info.age_status:\n\r"
    "  The age status of the entry used for Aging and indicates how fresh is the\n\r"
    "  entry. Higher valule indicates a more fresh recent entry. ForDuring an\n\r"
    "  insertion - soc_ppd_frwrd_mact_entry_add() - may beif ignored then the maximum\n\r"
    "  value is set. For During get a lookup - soc_ppd_frwrd_mact_entry_get() -\n\r"
    "  return the age status is returned, and an age_status = 0 indicates that the\n\r"
    "  entry is aged out but not deleted.Range: (Petra-B) 0 - 6.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact get_block compare_mask 0 age_status 0 is_dynamic 0\n\r"
    "  drop_when_sa_is_known 0 forward_decision 0 fid_mask 0 fid 0 dip_mask 0 dip 0\n\r"
    "  mac_mask 0 mac 0 fid_mask 0 fid 0 key_type 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_GET_BLOCK_GET_BLOCK_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_GET_BLOCK_GET_BLOCK_RULE_VALUE_RULE_VAL_AGING_INFO_IS_DYNAMIC_ID, 
    "rule_is_dynamic", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  rule.value_rule.val.aging_info.is_dynamic:\n\r"
    "  Is the entry dynamic (i.e. not static) and participates in the aging process.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact get_block compare_mask 0 is_dynamic 0\n\r"
    "  drop_when_sa_is_known 0 trap_action_profile_id 0 trap_qualifier 0 val 0 type\n\r"
    "  0 isid 0 push_profile 0 label 0 command 0 dest_nick 0 is_multicast 0 type 0\n\r"
    "  dest_id 0 type 0 mask 0 fid 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_GET_BLOCK_GET_BLOCK_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_GET_BLOCK_GET_BLOCK_RULE_VALUE_RULE_VAL_FRWRD_INFO_DROP_WHEN_SA_IS_KNOWN_ID, 
    "rule_drop_when_sa_is_known", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  rule.value_rule.val.frwrd_info.drop_when_sa_is_known:\n\r"
    "  If TRUE - For an SA lookup match, then the packet is forwarded according to\n\r"
    "  special action profile - see soc_ppd_frwrd_mact_trap_info_set(). If FALSE -\n\r"
    "  SA lookup match does not affect forwarding.Drop according to SA, is done by\n\r"
    "  the device in one of the following:1. SA-based VID-assignment is activated.2.\n\r"
    "  Device performs Ingress Learning.Use soc_ppd_frwrd_mact_port_info_set to set\n\r"
    "  the action to perform when such SA is encountered.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact get_block compare_mask 0 is_dynamic 0\n\r"
    "  drop_when_sa_is_known 0 trap_action_profile_id 0 trap_qualifier 0 val 0 type\n\r"
    "  0 isid 0 push_profile 0 label 0 command 0 dest_nick 0 is_multicast 0 type 0\n\r"
    "  dest_id 0 type 0 mask 0 fid 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_GET_BLOCK_GET_BLOCK_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_GET_BLOCK_GET_BLOCK_RULE_VALUE_RULE_VAL_ACCESSED_ID, 
    "rule_accessed", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  rule.value_rule.val.frwrd_info.drop_when_sa_is_known:\n\r"
    "  If TRUE - For an SA lookup match, then the packet is forwarded according to\n\r"
    "  special action profile - see soc_ppd_frwrd_mact_trap_info_set(). If FALSE -\n\r"
    "  SA lookup match does not affect forwarding.Drop according to SA, is done by\n\r"
    "  the device in one of the following:1. SA-based VID-assignment is activated.2.\n\r"
    "  Device performs Ingress Learning.Use soc_ppd_frwrd_mact_port_info_set to set\n\r"
    "  the action to perform when such SA is encountered.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact get_block compare_mask 0 is_dynamic 0\n\r"
    "  drop_when_sa_is_known 0 trap_action_profile_id 0 trap_qualifier 0 val 0 type\n\r"
    "  0 isid 0 push_profile 0 label 0 command 0 dest_nick 0 is_multicast 0 type 0\n\r"
    "  dest_id 0 type 0 mask 0 fid 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_GET_BLOCK_GET_BLOCK_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_DECISION_FD_TRAP_CODE_ID, 
    "rule_fd_trap_code", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals/*SOC_PPC_TRAP_CODE_rule*/[0], 
    (sizeof(soc_ppd_api_free_vals/*SOC_PPC_TRAP_CODE_rule*/) / sizeof(soc_ppd_api_free_vals/*SOC_PPC_TRAP_CODE_rule*/[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pwe_info.default_frwrd.default_forwarding.additional_info.trap_info.trap_acti\n\r"
    "  n_profile_id:\n\r"
    "  Trapping action profile ID.Range: 0-15.Points to a database that holds\n\r"
    "  trapping options. The profile ID selects the CPU to handle the trap; The CPU\n\r"
    "  port ID; the priority of the message; etc.The TRAP action profile is\n\r"
    "  configured via soc_ppd_trap_mgmt_frwrd_profile_info_set()\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact get_block compare_mask 0 is_dynamic 0\n\r"
    "  drop_when_sa_is_known 0 trap_action_profile_id 0 trap_qualifier 0 val 0 type\n\r"
    "  0 isid 0 push_profile 0 label 0 command 0 dest_nick 0 is_multicast 0 type 0\n\r"
    "  dest_id 0 type 0 mask 0 fid 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_GET_BLOCK_GET_BLOCK_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_DECISION_FD_FWD_STRENGTH_ID, 
    "rule_fd_frwrd_strength", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pwe_info.default_frwrd.default_forwarding.additional_info.trap_info.trap_qual\n\r"
    "  fier:\n\r"
    "  Trap qualifier to be associated with the packet to identify the trap. Range:\n\r"
    "  0-4K.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact get_block compare_mask 0 is_dynamic 0\n\r"
    "  drop_when_sa_is_known 0 trap_action_profile_id 0 trap_qualifier 0 val 0 type\n\r"
    "  0 isid 0 push_profile 0 label 0 command 0 dest_nick 0 is_multicast 0 type 0\n\r"
    "  dest_id 0 type 0 mask 0 fid 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_GET_BLOCK_GET_BLOCK_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_DECISION_FD_SNOOP_STRENGTH_ID,
    "rule_fd_snp_strength", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pwe_info.default_frwrd.default_forwarding.additional_info.outlif.val:\n\r"
    "  Out-LIF value, according to type. May be AC / EEP / VSI\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact get_block compare_mask 0 is_dynamic 0\n\r"
    "  drop_when_sa_is_known 0 trap_action_profile_id 0 trap_qualifier 0 val 0 type\n\r"
    "  0 isid 0 push_profile 0 label 0 command 0 dest_nick 0 is_multicast 0 type 0\n\r"
    "  dest_id 0 type 0 mask 0 fid 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_GET_BLOCK_GET_BLOCK_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_DECISION_FD_AC_ID,
    "rule_fd_ac_id", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pwe_info.default_frwrd.default_forwarding.additional_info.outlif.val:\n\r"
    "  Out-LIF value, according to type. May be AC / EEP / VSI\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact get_block compare_mask 0 is_dynamic 0\n\r"
    "  drop_when_sa_is_known 0 trap_action_profile_id 0 trap_qualifier 0 val 0 type\n\r"
    "  0 isid 0 push_profile 0 label 0 command 0 dest_nick 0 is_multicast 0 type 0\n\r"
    "  dest_id 0 type 0 mask 0 fid 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_GET_BLOCK_GET_BLOCK_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_DECISION_FD_EEP_NDX_ID,
    "rule_fd_eep_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pwe_info.default_frwrd.default_forwarding.additional_info.outlif.val:\n\r"
    "  Out-LIF value, according to type. May be AC / EEP / VSI\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact get_block compare_mask 0 is_dynamic 0\n\r"
    "  drop_when_sa_is_known 0 trap_action_profile_id 0 trap_qualifier 0 val 0 type\n\r"
    "  0 isid 0 push_profile 0 label 0 command 0 dest_nick 0 is_multicast 0 type 0\n\r"
    "  dest_id 0 type 0 mask 0 fid 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_GET_BLOCK_GET_BLOCK_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_DECISION_FD_PUSH_PROFILE_ID, 
    "rule_fd_push_profile", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pwe_info.default_frwrd.default_forwarding.additional_info.eei.val.mpls_comman\n\r"
    "  .push_profile:\n\r"
    "  If the command is push, this is the push profile used to construct the\n\r"
    "  label's TTL and EXP.Otherwise, this field is ignored.Range: 0 - 7.EEI may\n\r"
    "  include the MPLS command, but then the command cannot be Push with\n\r"
    "  push_profile 0. See SOC_PPC_EEI.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact get_block compare_mask 0 is_dynamic 0\n\r"
    "  drop_when_sa_is_known 0 trap_action_profile_id 0 trap_qualifier 0 val 0 type\n\r"
    "  0 isid 0 push_profile 0 label 0 command 0 dest_nick 0 is_multicast 0 type 0\n\r"
    "  dest_id 0 type 0 mask 0 fid 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_GET_BLOCK_GET_BLOCK_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_DECISION_FD_LABEL_ID, 
    "rule_fd_label", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pwe_info.default_frwrd.default_forwarding.additional_info.eei.val.mpls_comman\n\r"
    "  .label:\n\r"
    "  Label. Relevant if the command is push or swap.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact get_block compare_mask 0 is_dynamic 0\n\r"
    "  drop_when_sa_is_known 0 trap_action_profile_id 0 trap_qualifier 0 val 0 type\n\r"
    "  0 isid 0 push_profile 0 label 0 command 0 dest_nick 0 is_multicast 0 type 0\n\r"
    "  dest_id 0 type 0 mask 0 fid 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_GET_BLOCK_GET_BLOCK_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_DECISION_FD_IS_LAG_ID, 
    "rule_fd_is_lag", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pwe_info.default_frwrd.default_forwarding.additional_info.eei.val.trill_dest.\n\r"
    "  s_multicast:\n\r"
    "  Is the TRILL packet is sent as multicast (flooded in the Distribution Tree)\n\r"
    "  or sent as Unicast to Egress Nick.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact get_block compare_mask 0 is_dynamic 0\n\r"
    "  drop_when_sa_is_known 0 trap_action_profile_id 0 trap_qualifier 0 val 0 type\n\r"
    "  0 isid 0 push_profile 0 label 0 command 0 dest_nick 0 is_multicast 0 type 0\n\r"
    "  dest_id 0 type 0 mask 0 fid 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_GET_BLOCK_GET_BLOCK_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_DECISION_FD_DEST_ID, 
    "rule_fd_dest_id", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pwe_info.default_frwrd.default_forwarding.dest_id:\n\r"
    "  Destination ID, according to type.Multicast: MIDFEC:\n\r"
    "  FEC IDTrap:\n\r"
    "  IgnoredDrop:\n\r"
    "  IgnoredUnicast:\n\r"
    "  System port. When LAG, the user should\n\r"
    "  use SOC_PPD_LAG_ID(lag-id). When system\n\r"
    "  port is with allocated QoS resources the\n\r"
    "  user should use\n\r"
    "  SOC_PPD_DIRECT_FLOW_ID(flow-id)\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact get_block compare_mask 0 is_dynamic 0\n\r"
    "  drop_when_sa_is_known 0 trap_action_profile_id 0 trap_qualifier 0 val 0 type\n\r"
    "  0 isid 0 push_profile 0 label 0 command 0 dest_nick 0 is_multicast 0 type 0\n\r"
    "  dest_id 0 type 0 mask 0 fid 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_GET_BLOCK_GET_BLOCK_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_DECISION_FD_TYPE_ID, 
    "rule_fd_type",
    (PARAM_VAL_RULES *)&SOC_PPD_FRWRD_DECISION_MACRO_TYPE_rule[0], 
    (sizeof(SOC_PPD_FRWRD_DECISION_MACRO_TYPE_rule) / sizeof(SOC_PPD_FRWRD_DECISION_MACRO_TYPE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pwe_info.default_frwrd.default_forwarding.type:\n\r"
    "  Forwarding decision type:Unicast without FEC; Multicast without FEC; FEC;\n\r"
    "  Drop or Trap\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact get_block compare_mask 0 is_dynamic 0\n\r"
    "  drop_when_sa_is_known 0 trap_action_profile_id 0 trap_qualifier 0 val 0 type\n\r"
    "  0 isid 0 push_profile 0 label 0 command 0 dest_nick 0 is_multicast 0 type 0\n\r"
    "  dest_id 0 type 0 mask 0 fid 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_GET_BLOCK_GET_BLOCK_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_GET_BLOCK_GET_BLOCK_RULE_KEY_RULE_MAC_MAC_ADDR_ID, 
    "rule_mac_addr", 
    (PARAM_VAL_RULES *)&soc_ppd_api_mac_addr_vals[0], 
    (sizeof(soc_ppd_api_mac_addr_vals) / sizeof(soc_ppd_api_mac_addr_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  mac_address_key:\n\r"
    "  MAC addressit.	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact get_block compare_mask 0 is_dynamic 0\n\r"
    "  drop_when_sa_is_known 0 trap_action_profile_id 0 trap_qualifier 0 val 0 type\n\r"
    "  0 isid 0 push_profile 0 label 0 command 0 dest_nick 0 is_multicast 0 type 0\n\r"
    "  dest_id 0 type 0 mask 0 fid 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_GET_BLOCK_GET_BLOCK_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_GET_BLOCK_GET_BLOCK_RULE_KEY_RULE_MAC_MAC_ADDR_MASK_ID, 
    "rule_mac_addr_mask", 
    (PARAM_VAL_RULES *)&soc_ppd_api_mac_addr_vals[0], 
    (sizeof(soc_ppd_api_mac_addr_vals) / sizeof(soc_ppd_api_mac_addr_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  mac_address_key:\n\r"
    "  MAC MASK.	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact get_block compare_mask 0 is_dynamic 0\n\r"
    "  drop_when_sa_is_known 0 trap_action_profile_id 0 trap_qualifier 0 val 0 type\n\r"
    "  0 isid 0 push_profile 0 label 0 command 0 dest_nick 0 is_multicast 0 type 0\n\r"
    "  dest_id 0 type 0 mask 0 fid 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_GET_BLOCK_GET_BLOCK_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_GET_BLOCK_GET_BLOCK_RULE_KEY_RULE_ENTRY_TYPE_ID, 
    "key_type", 
    (PARAM_VAL_RULES *)&SOC_PPC_FRWRD_MACT_KEY_TYPE_rule[0], 
    (sizeof(SOC_PPC_FRWRD_MACT_KEY_TYPE_rule) / sizeof(SOC_PPC_FRWRD_MACT_KEY_TYPE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  rule.key_type:\n\r"
    "  MACT key type (MAC address and FID (normal bridging), or\n\r"
    "  DIP and FID (compatible MC packets briding)\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact get_block compare_mask 0 age_status 0 is_dynamic 0\n\r"
    "  drop_when_sa_is_known 0 forward_decision 0 fid_mask 0 fid 0 dip_mask 0 dip 0\n\r"
    "  mac_mask 0 mac 0 fid_mask 0 fid 0 key_type 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_GET_BLOCK_GET_BLOCK_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_GET_BLOCK_GET_BLOCK_RULE_KEY_RULE_FID_MASK_ID, 
    "rule_fid_mask", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  rule.key_rule.mac.fid_mask:\n\r"
    "  Mask over each bit of the FID. Indicates whether to compare it or to ignore\n\r"
    "  it while traversing the MACT DB. Set bit to zero to mask (ignore) the\n\r"
    "  corresponding bit in the FID.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact get_block compare_mask 0 age_status 0 is_dynamic 0\n\r"
    "  drop_when_sa_is_known 0 forward_decision 0 fid_mask 0 fid 0 dip_mask 0 dip 0\n\r"
    "  mac_mask 0 mac 0 fid_mask 0 fid 0 key_type 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_GET_BLOCK_GET_BLOCK_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_GET_BLOCK_GET_BLOCK_RULE_KEY_RULE_FID_ID, 
    "rule_fid", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  rule.key_rule.mac.fid:\n\r"
    "  FID.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact get_block compare_mask 0 age_status 0 is_dynamic 0\n\r"
    "  drop_when_sa_is_known 0 forward_decision 0 fid_mask 0 fid 0 dip_mask 0 dip 0\n\r"
    "  mac_mask 0 mac 0 fid_mask 0 fid 0 key_type 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_GET_BLOCK_GET_BLOCK_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_ARAM_PPD_FRWRD_MACT_GET_BLOCK_GET_BLOCK_RANGE_KEY_ENTRIES_TO_ACT_ID, 
    "entries_to_act", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  block_range_key.entries_to_act:\n\r"
    "  Number of entries to read/modify.Stop after retrieving this number of entries.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact get_block compare_mask 0 is_dynamic 0\n\r"
    "  drop_when_sa_is_known 0 trap_action_profile_id 0 trap_qualifier 0 val 0 type\n\r"
    "  0 isid 0 push_profile 0 label 0 command 0 dest_nick 0 is_multicast 0 type 0\n\r"
    "  dest_id 0 type 0 mask 0 fid 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_GET_BLOCK_GET_BLOCK_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_ARAM_PPD_FRWRD_MACT_GET_BLOCK_GET_BLOCK_RANGE_KEY_ENTRIES_TO_SCAN_ID, 
    "entries_to_scan", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  block_range_key.entries_to_scan:\n\r"
    "  The number of entries to scan.Stop after scanning this number of entries.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact get_block compare_mask 0 is_dynamic 0\n\r"
    "  drop_when_sa_is_known 0 trap_action_profile_id 0 trap_qualifier 0 val 0 type\n\r"
    "  0 isid 0 push_profile 0 label 0 command 0 dest_nick 0 is_multicast 0 type 0\n\r"
    "  dest_id 0 type 0 mask 0 fid 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_GET_BLOCK_GET_BLOCK_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_ARAM_PPD_FRWRD_MACT_GET_BLOCK_GET_BLOCK_RANGE_KEY_START_PAYLOAD_ARR_INDEX_ID, 
    "start_from", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  arr_index:\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact get_block compare_mask 0 is_dynamic 0\n\r"
    "  drop_when_sa_is_known 0 trap_action_profile_id 0 trap_qualifier 0 val 0 type\n\r"
    "  0 isid 0 push_profile 0 label 0 command 0 dest_nick 0 is_multicast 0 type 0\n\r"
    "  dest_id 0 type 0 mask 0 fid 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_GET_BLOCK_GET_BLOCK_ID), 
    LAST_ORDINAL, 
    (VAL_PROC_PTR)NULL 
  },    
  { 
    SOC_PARAM_PPD_API_FRWRD_MACT_ID, 
    "frwrd_mact", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "",
    "", 
    "",
    BIT_UI_16_RNG(SOC_FUN_PPD_API_FRWRD_MACT_FIRST_ID,SOC_FUN_PPD_API_FRWRD_MACT_LAST_ID), 
    1, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
#endif /* } frwrd_mact*/
#ifdef UI_FRWRD_MACT_MGMT/* { frwrd_mact_mgmt*/
  { 
    SOC_PARAM_PPD_FRWRD_MACT_PPD_FRWRD_MACT_LOOKUP_TYPE_SET_PPD_FRWRD_MACT_LOOKUP_TYPE_SET_ID, 
    "lookup_type_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Configures the SA lookup type. Also configured 'opportunistic learning'\n\r"
    "  which is affected by whether SA authentication is enabled.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  ppd_api frwrd_mact lookup_type_set lookup_type 1"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_PPD_FRWRD_MACT_LOOKUP_TYPE_SET_PPD_FRWRD_MACT_LOOKUP_TYPE_SET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },
  { 
    SOC_PARAM_PPD_FRWRD_MACT_PPD_FRWRD_MACT_LOOKUP_TYPE_SET_PPD_FRWRD_MACT_LOOKUP_TYPE_SET_LOOKUP_TYPE_ID, 
    "lookup_type", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Configures the SA lookup type. Also configured 'opportunistic learning'\n\r"
    "  which is affected by whether SA authentication is enabled.\n\r"
    "  Lookup_type= 0 (mim) / 1 (sa auth) / 2 (sa lookup)"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  ppd_api frwrd_mact lookup_type_set lookup_type 1"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_PPD_FRWRD_MACT_LOOKUP_TYPE_SET_PPD_FRWRD_MACT_LOOKUP_TYPE_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },
  { 
    SOC_PARAM_PPD_FRWRD_MACT_OPER_MODE_INFO_SET_OPER_MODE_INFO_SET_ID, 
    "oper_mode_info_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Sets the mode of the MACT, including - ingress vs. egress learning- how each\n\r"
    "  device responds internally to events (learn/aged-out/refresh) - which events\n\r"
    "  to inform other devices.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact oper_mode_info_set header_type 0 header_index 0\n\r"
    "  header 0 generate_message 0 events_handle_mode 0 shadow_mode 0\n\r"
    "  soc_petra_a_compatible 0 learning_mode 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_OPER_MODE_INFO_SET_OPER_MODE_INFO_SET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_OPER_MODE_INFO_SET_OPER_MODE_INFO_SET_OPER_MODE_INFO_AUTO_MODE_INFO_HEADER_TYPE_ID, 
    "header_type", 
    (PARAM_VAL_RULES *)&SOC_PPD_FRWRD_MACT_MESSAGE_HEADER_TYPE_rule[0], 
    (sizeof(SOC_PPD_FRWRD_MACT_MESSAGE_HEADER_TYPE_rule) / sizeof(SOC_PPD_FRWRD_MACT_MESSAGE_HEADER_TYPE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  oper_mode_info.auto_mode_info.header_type:\n\r"
    "  Type of the header. According to this header the OLP sends the learning\n\r"
    "  messages to other devices/CPU. I.e. this header is attached to the Learning\n\r"
    "  messages. Not Relevant for T20E.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact oper_mode_info_set header_type 0 header_index 0\n\r"
    "  header 0 generate_message 0 events_handle_mode 0 shadow_mode 0\n\r"
    "  soc_petra_a_compatible 0 learning_mode 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_OPER_MODE_INFO_SET_OPER_MODE_INFO_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_OPER_MODE_INFO_SET_OPER_MODE_INFO_SET_OPER_MODE_INFO_AUTO_MODE_INFO_HEADER_TYPE_VAL_ID, 
    "learn_header", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  oper_mode_info.auto_mode_info.header_type:\n\r"
    "  Type of the header. According to this header the OLP sends the learning\n\r"
    "  messages to other devices/CPU. I.e. this header is attached to the Learning\n\r"
    "  messages. Not Relevant for T20E.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact oper_mode_info_set header_type 0 header_index 0\n\r"
    "  header 0 generate_message 0 events_handle_mode 0 shadow_mode 0\n\r"
    "  soc_petra_a_compatible 0 learning_mode 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_OPER_MODE_INFO_SET_OPER_MODE_INFO_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_OPER_MODE_INFO_SET_OPER_MODE_INFO_SET_OPER_MODE_INFO_LEARN_MSGS_INFO_INFO_HEADER_TYPE_VAL_ID, 
    "shadow_header", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  oper_mode_info.auto_mode_info.header_type:\n\r"
    "  Type of the header. According to this header the OLP sends the learning\n\r"
    "  messages to other devices/CPU. I.e. this header is attached to the Learning\n\r"
    "  messages. Not Relevant for T20E.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact oper_mode_info_set header_type 0 header_index 0\n\r"
    "  header 0 generate_message 0 events_handle_mode 0 shadow_mode 0\n\r"
    "  soc_petra_a_compatible 0 learning_mode 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_OPER_MODE_INFO_SET_OPER_MODE_INFO_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_OPER_MODE_INFO_SET_OPER_MODE_INFO_SET_OPER_MODE_INFO_SHADOW_MODE_ID, 
    "shadow_mode", 
    (PARAM_VAL_RULES *)&SOC_PPC_FRWRD_MACT_SHADOW_MODE_rule[0], 
    (sizeof(SOC_PPC_FRWRD_MACT_SHADOW_MODE_rule) / sizeof(SOC_PPC_FRWRD_MACT_SHADOW_MODE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  oper_mode_info.shadow_mode:\n\r"
    "  The mode to build the shadow of the MACT by the CPU. In other words the\n\r"
    "  subset of events to inform the CPU regarding.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact oper_mode_info_set header_type 0 header_index 0\n\r"
    "  header 0 generate_message 0 events_handle_mode 0 shadow_mode 0\n\r"
    "  soc_petra_a_compatible 0 learning_mode 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_OPER_MODE_INFO_SET_OPER_MODE_INFO_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_OPER_MODE_INFO_SET_OPER_MODE_INFO_SET_OPER_MODE_INFO_PETRA_A_COMPATIBLE_ID, 
    "soc_petra_a_compatible", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  oper_mode_info.soc_petra_a_compatible:\n\r"
    "  If TRUE, then the MACT operates in compatible mode for Petra-A.In this case,\n\r"
    "  egress learning is not supported. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact oper_mode_info_set header_type 0 header_index 0\n\r"
    "  header 0 generate_message 0 events_handle_mode 0 shadow_mode 0\n\r"
    "  soc_petra_a_compatible 0 learning_mode 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_OPER_MODE_INFO_SET_OPER_MODE_INFO_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_OPER_MODE_INFO_SET_OPER_MODE_INFO_SET_OPER_MODE_INFO_LEARNING_MODE_ID, 
    "learning_mode", 
    (PARAM_VAL_RULES *)&SOC_PPC_FRWRD_MACT_LEARNING_MODE_rule[0], 
    (sizeof(SOC_PPC_FRWRD_MACT_LEARNING_MODE_rule) / sizeof(SOC_PPC_FRWRD_MACT_LEARNING_MODE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  oper_mode_info.learning_mode:\n\r"
    "  Mode of learning (ingress/egress, centralized/distributed, independent) \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact oper_mode_info_set header_type 0 header_index 0\n\r"
    "  header 0 generate_message 0 events_handle_mode 0 shadow_mode 0\n\r"
    "  soc_petra_a_compatible 0 learning_mode 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_OPER_MODE_INFO_SET_OPER_MODE_INFO_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_OPER_MODE_INFO_SET_OPER_MODE_INFO_SET_OPER_MODE_INFO_LEARN_MSGS_INFO_TYPE_ID, 
    "distr_type", 
    (PARAM_VAL_RULES *)&SOC_PPC_FRWRD_MACT_EVENT_PATH_TYPE_rule[0], 
    (sizeof(SOC_PPC_FRWRD_MACT_EVENT_PATH_TYPE_rule) / sizeof(SOC_PPC_FRWRD_MACT_EVENT_PATH_TYPE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  oper_mode_info.learn_msgs_info.type:\n\r"
    "  Transmission type of the learning information. Can be through OLP messages or\n\r"
    "  direct access. Not Relevant for T20E.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact oper_mode_info_set header_index 0 header 0\n\r"
    "  header_type 0 type 0 shadow_mode 0 header_index 0 header 0 header_type 0 type\n\r"
    "  0 soc_petra_a_compatible 0 learning_mode 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_OPER_MODE_INFO_SET_OPER_MODE_INFO_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_OPER_MODE_INFO_GET_OPER_MODE_INFO_GET_ID, 
    "oper_mode_info_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Sets the mode of the MACT, including - ingress vs. egress learning- how each\n\r"
    "  device responds internally to events (learn/aged-out/refresh) - which events\n\r"
    "  to inform other devices.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact oper_mode_info_get\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_OPER_MODE_INFO_GET_OPER_MODE_INFO_GET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_AGING_INFO_SET_AGING_INFO_SET_ID, 
    "aging_info_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Sets the aging info including enable aging and aging time.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact aging_info_set\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_AGING_INFO_SET_AGING_INFO_SET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_AGING_INFO_SET_AGING_INFO_SET_ENABLE_ID, 
    "enable", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  enable:\n\r"
    "  enable aging.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact aging_info_set\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_AGING_INFO_SET_AGING_INFO_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_AGING_INFO_SET_AGING_INFO_SET_TIME_SEC_ID, 
    "seconds", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  seconds:\n\r"
    "  aging time seconds.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact aging_info_set\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_AGING_INFO_SET_AGING_INFO_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_AGING_INFO_SET_AGING_INFO_SET_TIME_MILI_SEC_ID, 
    "mili_seconds", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  mili_seconds:\n\r"
    "  aging time mili_seconds.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact aging_info_set\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_AGING_INFO_SET_AGING_INFO_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_AGING_INFO_GET_AGING_INFO_GET_ID, 
    "aging_info_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Sets the aging info including enable aging and aging time.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact aging_info_get\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_AGING_INFO_GET_AGING_INFO_GET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_AGING_EVENTS_HANDLE_INFO_SET_AGING_EVENTS_HANDLE_INFO_SET_ID, 
    "aging_events_handle_info_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Sets the device action upon events concern aging:\n\r"
    "  - If the device deletes entries internally\n\r"
    "  - If the device generates an event for aged out entries\n\r"
    "  - If the device generates an event for refreshed entries \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact aging_events_handle_info_set event_when_refreshed 0\n\r"
    "  event_when_aged_out 0 delete_internally 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_AGING_EVENTS_HANDLE_INFO_SET_AGING_EVENTS_HANDLE_INFO_SET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_AGING_EVENTS_HANDLE_INFO_SET_AGING_EVENTS_HANDLE_INFO_SET_AGING_INFO_EVENT_WHEN_REFRESHED_ID, 
    "event_when_refreshed", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  aging_info.event_when_refreshed:\n\r"
    "  If TRUE then the aging process generates events for entries refreshed in the\n\r"
    "  last traverse of the MACT.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact aging_events_handle_info_set event_when_refreshed 0\n\r"
    "  event_when_aged_out 0 delete_internally 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_AGING_EVENTS_HANDLE_INFO_SET_AGING_EVENTS_HANDLE_INFO_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_AGING_EVENTS_HANDLE_INFO_SET_AGING_EVENTS_HANDLE_INFO_SET_AGING_INFO_EVENT_WHEN_AGED_OUT_ID, 
    "event_when_aged_out", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  aging_info.event_when_aged_out:\n\r"
    "  If TRUE then the aging process generates events for aged out entries. Should\n\r"
    "  be set to TRUE for centralized mode\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact aging_events_handle_info_set event_when_refreshed 0\n\r"
    "  event_when_aged_out 0 delete_internally 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_AGING_EVENTS_HANDLE_INFO_SET_AGING_EVENTS_HANDLE_INFO_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_AGING_EVENTS_HANDLE_INFO_SET_AGING_EVENTS_HANDLE_INFO_SET_AGING_INFO_DELETE_INTERNALLY_ID, 
    "delete_internally", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  aging_info.delete_internally:\n\r"
    "  If TRUE then the aging process internally deletes aged out entries.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact aging_events_handle_info_set event_when_refreshed 0\n\r"
    "  event_when_aged_out 0 delete_internally 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_AGING_EVENTS_HANDLE_INFO_SET_AGING_EVENTS_HANDLE_INFO_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_AGING_EVENTS_HANDLE_INFO_GET_AGING_EVENTS_HANDLE_INFO_GET_ID, 
    "aging_events_handle_info_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Sets the device action upon events concern aging:\n\r"
    "  - If the device deletes entries internally\n\r"
    "  - If the device generates an event for aged out entries\n\r"
    "  - If the device generates an event for refreshed entries \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact aging_events_handle_info_get\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_AGING_EVENTS_HANDLE_INFO_GET_AGING_EVENTS_HANDLE_INFO_GET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_FID_PROFILE_TO_FID_MAP_SET_FID_PROFILE_TO_FID_MAP_SET_ID, 
    "fid_profile_to_fid_map_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Maps FID-Profile to FID, for shared learning.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact fid_profile_to_fid_map_set fid_profile_ndx 0 fid 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_FID_PROFILE_TO_FID_MAP_SET_FID_PROFILE_TO_FID_MAP_SET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_FID_PROFILE_TO_FID_MAP_SET_FID_PROFILE_TO_FID_MAP_SET_FID_PROFILE_NDX_ID, 
    "fid_profile_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  fid_profile_ndx:\n\r"
    "  FID Profile. Range: 1 - 7. The 0 value is used when FID = VSI.	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact fid_profile_to_fid_map_set fid_profile_ndx 0 fid 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_FID_PROFILE_TO_FID_MAP_SET_FID_PROFILE_TO_FID_MAP_SET_ID), 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_FID_PROFILE_TO_FID_MAP_SET_FID_PROFILE_TO_FID_MAP_SET_FID_ID, 
    "fid", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  fid:\n\r"
    "  Filtering ID.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact fid_profile_info_set fid_profile_ndx 0 fid 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_FID_PROFILE_TO_FID_MAP_SET_FID_PROFILE_TO_FID_MAP_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_FID_PROFILE_TO_FID_MAP_GET_FID_PROFILE_TO_FID_MAP_GET_ID, 
    "fid_profile_to_fid_map_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Maps FID-Profile to FID, for shared learning.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact fid_profile_info_get fid_profile_ndx 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_FID_PROFILE_TO_FID_MAP_GET_FID_PROFILE_TO_FID_MAP_GET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_FID_PROFILE_TO_FID_MAP_GET_FID_PROFILE_TO_FID_MAP_GET_FID_PROFILE_NDX_ID, 
    "fid_profile_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  fid_profile_ndx:\n\r"
    "  FID Profile. Range: 1-7. 0 used for FID = VSI.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact fid_profile_info_get fid_profile_ndx 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_FID_PROFILE_TO_FID_MAP_GET_FID_PROFILE_TO_FID_MAP_GET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_MAC_LIMIT_GLBL_INFO_SET_MAC_LIMIT_INFO_SET_ID, 
    "mac_limit_glbl_info_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set the global information regarding MAC limit feature. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact mac_limit_info_set fid_base 0 static_may_exceed 0\n\r"
    "  enable 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_MAC_LIMIT_GLBL_INFO_SET_MAC_LIMIT_INFO_SET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_MAC_LIMIT_GLBL_INFO_SET_MAC_LIMIT_INFO_SET_LIMIT_INFO_FID_BASE_ID, 
    "fid_base", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  limit_info.fid_base:\n\r"
    "  For T20E only, FIDs in the range [fid-base, fid-base+16k] may be limited and\n\r"
    "  assigned to a limited profile. Other entries may not be limited.For Petra-B,\n\r"
    "  has to be zero.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact mac_limit_info_set fid_base 0 static_may_exceed 0\n\r"
    "  enable 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_MAC_LIMIT_GLBL_INFO_SET_MAC_LIMIT_INFO_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_MAC_LIMIT_GLBL_INFO_SET_MAC_LIMIT_INFO_SET_LIMIT_INFO_STATIC_MAY_EXCEED_ID, 
    "static_may_exceed", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  limit_info.static_may_exceed:\n\r"
    "  If TRUE, then when adding a static entry to the MAC Table, it may exceed the\n\r"
    "  limit of the FID it belongs to.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact mac_limit_info_set fid_base 0 static_may_exceed 0\n\r"
    "  enable 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_MAC_LIMIT_GLBL_INFO_SET_MAC_LIMIT_INFO_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_MAC_LIMIT_GLBL_INFO_SET_MAC_LIMIT_INFO_SET_LIMIT_INFO_GLBL_LIMIT_ID, 
    "glbl_limit", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  limit_info.static_may_exceed:\n\r"
    "  If TRUE, then when adding a static entry to the MAC Table, it may exceed the\n\r"
    "  limit of the FID it belongs to.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact mac_limit_info_set fid_base 0 static_may_exceed 0\n\r"
    "  enable 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_MAC_LIMIT_GLBL_INFO_SET_MAC_LIMIT_INFO_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_MAC_LIMIT_GLBL_INFO_SET_MAC_LIMIT_INFO_SET_LIMIT_INFO_CPU_MAY_EXCEED_ID, 
    "cpu_may_exceed", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  limit_info.static_may_exceed:\n\r"
    "  If TRUE, then when adding a static entry to the MAC Table, it may exceed the\n\r"
    "  limit of the FID it belongs to.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact mac_limit_info_set fid_base 0 static_may_exceed 0\n\r"
    "  enable 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_MAC_LIMIT_GLBL_INFO_SET_MAC_LIMIT_INFO_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_MAC_LIMIT_GLBL_INFO_SET_MAC_LIMIT_INFO_SET_LIMIT_INFO_GENERATE_EVENT_ID, 
    "generate_event", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  limit_info.generate_event:\n\r"
    "  If TRUE, then when adding a static entry to the MAC Table, it may exceed the\n\r"
    "  limit of the FID it belongs to.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact mac_limit_info_set fid_base 0 generate_event 0\n\r"
    "  enable 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_MAC_LIMIT_GLBL_INFO_SET_MAC_LIMIT_INFO_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_MAC_LIMIT_GLBL_INFO_SET_MAC_LIMIT_INFO_SET_LIMIT_INFO_ENABLE_ID, 
    "enable", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  limit_info.enable:\n\r"
    "  If TRUE, then limit the number of MAC addresses learned by FID. Otherwise, no\n\r"
    "  limitation is enforced. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact mac_limit_info_set fid_base 0 static_may_exceed 0\n\r"
    "  enable 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_MAC_LIMIT_GLBL_INFO_SET_MAC_LIMIT_INFO_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_MAC_LIMIT_INFO_GET_MAC_LIMIT_INFO_GET_ID, 
    "mac_limit_glbl_info_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set the global information regarding MAC limit feature. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact mac_limit_info_get\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_MAC_LIMIT_GLBL_INFO_GET_MAC_LIMIT_INFO_GET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_LEARN_PROFILE_LIMIT_INFO_SET_LIMIT_PROFILE_INFO_SET_ID, 
    "mac_limit_profile_info_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set the limit profile information\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact limit_profile_info_set limit_profile_ndx 0\n\r"
    "  action_when_exceed 0 nof_entries 0 is_limited 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_LEARN_PROFILE_LIMIT_INFO_SET_MAC_LIMIT_PROFILE_INFO_SET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_LEARN_PROFILE_LIMIT_INFO_SET_LIMIT_PROFILE_INFO_SET_LIMIT_PROFILE_NDX_ID, 
    "mac_learn_profile_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  limit_profile_ndx:\n\r"
    "  Limit profile ID.Range: 0 - 7.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact limit_profile_info_set limit_profile_ndx 0\n\r"
    "  action_when_exceed 0 nof_entries 0 is_limited 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_LEARN_PROFILE_LIMIT_INFO_SET_MAC_LIMIT_PROFILE_INFO_SET_ID), 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_LEARN_PROFILE_LIMIT_INFO_SET_LIMIT_PROFILE_INFO_SET_LIMIT_INFO_ACTION_WHEN_EXCEED_ID, 
    "action_when_exceed", 
    (PARAM_VAL_RULES *)&SOC_PPC_FRWRD_MACT_LIMIT_EXCEED_NOTIFY_TYPE_rule[0], 
    (sizeof(SOC_PPC_FRWRD_MACT_LIMIT_EXCEED_NOTIFY_TYPE_rule) / sizeof(SOC_PPC_FRWRD_MACT_LIMIT_EXCEED_NOTIFY_TYPE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  limit_info.action_when_exceed:\n\r"
    "  The action to perform when trying to exceed the limit set to FID.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact limit_profile_info_set limit_profile_ndx 0\n\r"
    "  action_when_exceed 0 nof_entries 0 is_limited 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_LEARN_PROFILE_LIMIT_INFO_SET_MAC_LIMIT_PROFILE_INFO_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_LEARN_PROFILE_LIMIT_INFO_SET_LIMIT_PROFILE_INFO_SET_LIMIT_INFO_NOF_ENTRIES_ID, 
    "nof_entries", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  limit_info.nof_entries:\n\r"
    "  Maximum number of entries that can be learned on FIDs using this profile.\n\r"
    "  Whether the limitation includes static entries or not is a global\n\r"
    "  configuration.Range: 0 - 0x7FFF.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact limit_profile_info_set limit_profile_ndx 0\n\r"
    "  action_when_exceed 0 nof_entries 0 is_limited 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_LEARN_PROFILE_LIMIT_INFO_SET_MAC_LIMIT_PROFILE_INFO_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_LEARN_PROFILE_LIMIT_INFO_SET_LIMIT_PROFILE_INFO_SET_LIMIT_INFO_IS_LIMITED_ID, 
    "is_limited", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  limit_info.is_limited:\n\r"
    "  Is there a limitation for FID use of this profile.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact limit_profile_info_set limit_profile_ndx 0\n\r"
    "  action_when_exceed 0 nof_entries 0 is_limited 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_LEARN_PROFILE_LIMIT_INFO_SET_MAC_LIMIT_PROFILE_INFO_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_LEARN_PROFILE_LIMIT_INFO_GET_LIMIT_PROFILE_INFO_GET_ID, 
    "mac_limit_profile_info_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set the limit profile information\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact limit_profile_info_get limit_profile_ndx 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_LEARN_PROFILE_LIMIT_INFO_GET_MAC_LIMIT_PROFILE_INFO_GET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_LEARN_PROFILE_LIMIT_INFO_GET_LIMIT_PROFILE_INFO_GET_LIMIT_PROFILE_NDX_ID, 
    "mac_learn_profile_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  limit_profile_ndx:\n\r"
    "  Limit profile ID.Range: 0 - 7.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact limit_profile_info_get limit_profile_ndx 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_LEARN_PROFILE_LIMIT_INFO_GET_MAC_LIMIT_PROFILE_INFO_GET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  {
    SOC_PARAM_PPD_FRWRD_MACT_EVENT_HANDLE_PROFILE_SET_EVENT_HANDLE_PROFILE_SET_ID, 
    "event_handle_profile_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Map the mac-learn-profile to the event-handle profile.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact event_handle_profile_set mac_learn_profile_ndx 0\n\r"
    "  event_handle_profile 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_EVENT_HANDLE_PROFILE_SET_EVENT_HANDLE_PROFILE_SET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_EVENT_HANDLE_PROFILE_SET_EVENT_HANDLE_PROFILE_SET_MAC_LEARN_PROFILE_NDX_ID, 
    "mac_learn_profile_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  mac_learn_profile_ndx:\n\r"
    "  MAC-learn-profile ID.Range: 0 - 7.	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact event_handle_profile_set mac_learn_profile_ndx 0\n\r"
    "  event_handle_profile 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_EVENT_HANDLE_PROFILE_SET_EVENT_HANDLE_PROFILE_SET_ID), 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_EVENT_HANDLE_PROFILE_SET_EVENT_HANDLE_PROFILE_SET_EVENT_HANDLE_PROFILE_ID, 
    "event_handle_profile", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  event_handle_profile:\n\r"
    "  Profile used to set how MACT events are handled. See TBDRange: 0 - 1.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact event_handle_profile_set mac_learn_profile_ndx 0\n\r"
    "  event_handle_profile 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_EVENT_HANDLE_PROFILE_SET_EVENT_HANDLE_PROFILE_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_EVENT_HANDLE_PROFILE_GET_EVENT_HANDLE_PROFILE_GET_ID, 
    "event_handle_profile_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Map the mac-learn-profile to the event-handle profile.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact event_handle_profile_get mac_learn_profile_ndx 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_EVENT_HANDLE_PROFILE_GET_EVENT_HANDLE_PROFILE_GET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_EVENT_HANDLE_PROFILE_GET_EVENT_HANDLE_PROFILE_GET_MAC_LEARN_PROFILE_NDX_ID, 
    "mac_learn_profile_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  mac_learn_profile_ndx:\n\r"
    "  MAC-learn-profile ID.Range: 0 - 7.	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact event_handle_profile_get mac_learn_profile_ndx 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_EVENT_HANDLE_PROFILE_GET_EVENT_HANDLE_PROFILE_GET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  {
    SOC_PARAM_PPD_FRWRD_MACT_FID_AGING_PROFILE_SET_FID_AGING_PROFILE_SET_ID, 
    "fid_aging_profile_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Map the mac-learn-profile to the fid-aging profile.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact fid_aging_profile_set mac_learn_profile_ndx 0\n\r"
    "  fid_aging_profile 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_FID_AGING_PROFILE_SET_FID_AGING_PROFILE_SET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_FID_AGING_PROFILE_SET_FID_AGING_PROFILE_SET_MAC_LEARN_PROFILE_NDX_ID, 
    "mac_learn_profile_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  mac_learn_profile_ndx:\n\r"
    "  MAC-learn-profile ID.Range: 0 - 7.	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact fid_aging_profile_set mac_learn_profile_ndx 0\n\r"
    "  fid_aging_profile 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_FID_AGING_PROFILE_SET_FID_AGING_PROFILE_SET_ID), 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_FID_AGING_PROFILE_SET_FID_AGING_PROFILE_SET_FID_AGING_PROFILE_ID, 
    "fid_aging_profile", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  fid_aging_profile:\n\r"
    "  Profile used to set how MACT events are handled. See TBDRange: 0 - 3.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact fid_aging_profile_set mac_learn_profile_ndx 0\n\r"
    "  fid_aging_profile 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_FID_AGING_PROFILE_SET_FID_AGING_PROFILE_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_FID_AGING_PROFILE_GET_FID_AGING_PROFILE_GET_ID, 
    "fid_aging_profile_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Map the mac-learn-profile to the fid-aging profile.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact fid_aging_profile_get mac_learn_profile_ndx 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_FID_AGING_PROFILE_GET_FID_AGING_PROFILE_GET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_FID_AGING_PROFILE_GET_FID_AGING_PROFILE_GET_MAC_LEARN_PROFILE_NDX_ID, 
    "mac_learn_profile_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  mac_learn_profile_ndx:\n\r"
    "  MAC-learn-profile ID.Range: 0 - 7.	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact fid_aging_profile_get mac_learn_profile_ndx 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_FID_AGING_PROFILE_GET_FID_AGING_PROFILE_GET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },
  { 
    SOC_PARAM_PPD_FRWRD_MACT_EVENT_GET_EVENT_GET_ID, 
    "event_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Get the last event parameters for the direct access mode (i.e., if no OLP\n\r"
    "  messages are sent in case of event) from the Event FIFO.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact event_get\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_EVENT_GET_EVENT_GET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_EVENT_HANDLE_INFO_SET_EVENT_HANDLE_INFO_SET_ID, 
    "event_handle_info_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set how to handle an event according to the event key parameters\n\r"
    "  (event-type,vsi-handle-profile,is-lag)\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact event_handle_info_set vsi_event_handle_profile 0\n\r"
    "  is_lag 0 event_type 0x1 send_to_shadow_fifo 0 send_to_learning_fifo 0\n\r"
    "  self_learning 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_EVENT_HANDLE_INFO_SET_EVENT_HANDLE_INFO_SET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_EVENT_HANDLE_INFO_SET_EVENT_HANDLE_INFO_SET_EVENT_KEY_FID_EVENT_HANDLE_PROFILE_ID, 
    "vsi_event_handle_profile", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  event_key.vsi_event_handle_profile:\n\r"
    "  FID Profile that is used to set different event handling according to FID.Use\n\r"
    "  soc_ppd_frwrd_mact_event_nndle_profile_set() to set the fid event handle\n\r"
    "  profile.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact event_handle_info_set vsi_event_handle_profile 0\n\r"
    "  is_lag 0 event_type 0x1 send_to_shadow_fifo 0 send_to_learning_fifo 0\n\r"
    "  self_learning 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_EVENT_HANDLE_INFO_SET_EVENT_HANDLE_INFO_SET_ID), 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_EVENT_HANDLE_INFO_SET_EVENT_HANDLE_INFO_SET_EVENT_KEY_IS_LAG_ID, 
    "is_lag", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  event_key.is_lag:\n\r"
    "  Indicates that this Event was generated from a packet whose Destination port\n\r"
    "  is a LAG.Relevant only for egress learning, in ingress learning has to be\n\r"
    "  FALSE.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact event_handle_info_set vsi_event_handle_profile 0\n\r"
    "  is_lag 0 event_type 0x1 send_to_shadow_fifo 0 send_to_learning_fifo 0\n\r"
    "  self_learning 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_EVENT_HANDLE_INFO_SET_EVENT_HANDLE_INFO_SET_ID), 
    4, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_EVENT_HANDLE_INFO_SET_EVENT_HANDLE_INFO_SET_EVENT_KEY_EVENT_TYPE_ID, 
    "event_type", 
    (PARAM_VAL_RULES *)&SOC_PPC_FRWRD_MACT_EVENT_TYPE_rule[0], 
    (sizeof(SOC_PPC_FRWRD_MACT_EVENT_TYPE_rule) / sizeof(SOC_PPC_FRWRD_MACT_EVENT_TYPE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  event_key.event_type:\n\r"
    "  If TRUE, then enable the aging process of the device (aging machine). User\n\r"
    "  can handle in one mapping more than one event-type: for\n\r"
    "  examplePPD_FRWRD_MACT_EVENT_TYPE_LEARN | SOC_PPC_FRWRD_MACT_EVENT_TYPE_REFRESH\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact event_handle_info_set vsi_event_handle_profile 0\n\r"
    "  is_lag 0 event_type 0x1 send_to_shadow_fifo 0 send_to_learning_fifo 0\n\r"
    "  self_learning 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_EVENT_HANDLE_INFO_SET_EVENT_HANDLE_INFO_SET_ID), 
    5, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_EVENT_HANDLE_INFO_SET_EVENT_HANDLE_INFO_SET_HANDLE_INFO_SEND_TO_SHADOW_FIFO_ID, 
    "send_to_shadow_fifo", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  handle_info.send_to_shadow_fifo:\n\r"
    "  If set to TRUE then a 'copy' of the event is sent to shadow FIFO.Generally\n\r"
    "  this FIFO is used to inform the control plane upon 'interesting' events for\n\r"
    "  monitoring. See SOC_PPC_FRWRD_MACT_SHADOW_MODE. YetHowever the user can use this\n\r"
    "  FIFO to perform\n\r"
    "  an auto system learning. To set how to distribute events arriveing to this\n\r"
    "  FIFO, use: soc_ppd_frwrd_mact_shadow_msgs_distribution_info_set()\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact event_handle_info_set vsi_event_handle_profile 0\n\r"
    "  is_lag 0 event_type 0x1 send_to_shadow_fifo 0 send_to_learning_fifo 0\n\r"
    "  self_learning 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_EVENT_HANDLE_INFO_SET_EVENT_HANDLE_INFO_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_EVENT_HANDLE_INFO_SET_EVENT_HANDLE_INFO_SET_HANDLE_INFO_SEND_TO_LEARNING_FIFO_ID, 
    "send_to_learning_fifo", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  handle_info.send_to_learning_fifo:\n\r"
    "  If set to TRUE then a 'copy' of the event is sent to the learning FIFO.\n\r"
    "  Generally this FIFO is used to handle learning events. In centralized mode,\n\r"
    "  this fifo is expected to send events to the Cental CPU. To set how to\n\r"
    "  distribute events arriving to this FIFO, use:\n\r"
    "  soc_ppd_frwrd_mact_sys_learn_msgs_distribution_info_set()\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact event_handle_info_set vsi_event_handle_profile 0\n\r"
    "  is_lag 0 event_type 0x1 send_to_shadow_fifo 0 send_to_learning_fifo 0\n\r"
    "  self_learning 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_EVENT_HANDLE_INFO_SET_EVENT_HANDLE_INFO_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_EVENT_HANDLE_INFO_SET_EVENT_HANDLE_INFO_SET_HANDLE_INFO_SELF_LEARNING_ID, 
    "self_learning", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  handle_info.self_learning:\n\r"
    "  If set to TRUE then a 'copy' of the event is looped-back into the device and\n\r"
    "  handled internally i.e learned/deleted/refreshed... according to the event type\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact event_handle_info_set vsi_event_handle_profile 0\n\r"
    "  is_lag 0 event_type 0x1 send_to_shadow_fifo 0 send_to_learning_fifo 0\n\r"
    "  self_learning 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_EVENT_HANDLE_INFO_SET_EVENT_HANDLE_INFO_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_EVENT_HANDLE_INFO_GET_EVENT_HANDLE_INFO_GET_ID, 
    "event_handle_info_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set how to handle an event according to the event key parameters\n\r"
    "  (event-type,vsi-handle-profile,is-lag)\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact event_handle_info_get vsi_event_handle_profile 0\n\r"
    "  is_lag 0 event_type 0x1\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_EVENT_HANDLE_INFO_GET_EVENT_HANDLE_INFO_GET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_EVENT_HANDLE_INFO_GET_EVENT_HANDLE_INFO_GET_EVENT_KEY_FID_EVENT_HANDLE_PROFILE_ID, 
    "vsi_event_handle_profile", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  event_key.vsi_event_handle_profile:\n\r"
    "  FID Profile that is used to set different event handling according to FID.Use\n\r"
    "  soc_ppd_frwrd_mact_event_nndle_profile_set() to set the fid event handle\n\r"
    "  profile.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact event_handle_info_get vsi_event_handle_profile 0\n\r"
    "  is_lag 0 event_type 0x1\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_EVENT_HANDLE_INFO_GET_EVENT_HANDLE_INFO_GET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_EVENT_HANDLE_INFO_GET_EVENT_HANDLE_INFO_GET_EVENT_KEY_IS_LAG_ID, 
    "is_lag", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  event_key.is_lag:\n\r"
    "  Indicates that this Event was generated from a packet whose Destination port\n\r"
    "  is a LAG.Relevant only for egress learning, in ingress learning has to be\n\r"
    "  FALSE.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact event_handle_info_get vsi_event_handle_profile 0\n\r"
    "  is_lag 0 event_type 0x1\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_EVENT_HANDLE_INFO_GET_EVENT_HANDLE_INFO_GET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_EVENT_HANDLE_INFO_GET_EVENT_HANDLE_INFO_GET_EVENT_KEY_EVENT_TYPE_ID, 
    "event_type", 
    (PARAM_VAL_RULES *)&SOC_PPC_FRWRD_MACT_EVENT_TYPE_rule[0], 
    (sizeof(SOC_PPC_FRWRD_MACT_EVENT_TYPE_rule) / sizeof(SOC_PPC_FRWRD_MACT_EVENT_TYPE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  event_key.event_type:\n\r"
    "  If TRUE, then enable the aging process of the device (aging machine). User\n\r"
    "  can handle in one mapping more than one event-type: for\n\r"
    "  examplePPD_FRWRD_MACT_EVENT_TYPE_LEARN | SOC_PPC_FRWRD_MACT_EVENT_TYPE_REFRESH\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact event_handle_info_get vsi_event_handle_profile 0\n\r"
    "  is_lag 0 event_type 0x1\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_EVENT_HANDLE_INFO_GET_EVENT_HANDLE_INFO_GET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_LEARN_MSGS_DISTRIBUTION_INFO_SET_LEARN_MSGS_DISTRIBUTION_INFO_SET_ID, 
    "learn_msgs_distribution_info_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set how to distribute the learn messages to other devices/CPU.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact learn_msgs_distribution_info_set header_index 0\n\r"
    "  header 0 header_type 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_LEARN_MSGS_DISTRIBUTION_INFO_SET_LEARN_MSGS_DISTRIBUTION_INFO_SET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_LEARN_MSGS_DISTRIBUTION_INFO_SET_LEARN_MSGS_DISTRIBUTION_INFO_SET_DISTRIBUTION_INFO_HEADER_INDEX_ID, 
    "header_index", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  header_index:\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact learn_msgs_distribution_info_set header_index 0\n\r"
    "  header 0 header_type 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_LEARN_MSGS_DISTRIBUTION_INFO_SET_LEARN_MSGS_DISTRIBUTION_INFO_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_LEARN_MSGS_DISTRIBUTION_INFO_SET_LEARN_MSGS_DISTRIBUTION_INFO_SET_DISTRIBUTION_INFO_HEADER_ID, 
    "header", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
#ifdef COMPILER_STRING_CONST_LIMIT
    "  Full documentation cannot be displayed with -pendantic compiler\n\r",
#else
    "  distribution_info.header[ prm_header_index]:\n\r"
    "  Header that this device uses in order to send messages to other devices or\n\r"
    "  the central CPU. Network Order: First long of the header is header[0] and\n\r"
    "  first bit of the header is the lsb of header[0]. If not all the long is used,\n\r"
    "  then start from the lsb bits and reset the rest of the bits of the long. The\n\r"
    "  content of this header is up to the header_type as follows:- raw: content of\n\r"
    "  header is not considered. - OLP port type has to be Raw - TM: ITMH header\n\r"
    "  - OLP port type has be TM - Eth: Ethernet header. In this case, the Ethernet\n\r"
    "  type is not considered and is replaced with dsp_type.- OLP port type has to\n\r"
    "  be Ethernet, and it has to be member in the VLAN which is equal to its\n\r"
    "  VID.Not Relevant for T20E.\n\r"
    "",
#endif /* COMPILER_STRING_CONST_LIMIT */
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact learn_msgs_distribution_info_set header_index 0\n\r"
    "  header 0 header_type 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_LEARN_MSGS_DISTRIBUTION_INFO_SET_LEARN_MSGS_DISTRIBUTION_INFO_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_LEARN_MSGS_DISTRIBUTION_INFO_SET_LEARN_MSGS_DISTRIBUTION_INFO_SET_DISTRIBUTION_INFO_HEADER_TYPE_ID, 
    "header_type", 
    (PARAM_VAL_RULES *)&SOC_PPC_FRWRD_MACT_MSG_HDR_TYPE_rule[0], 
    (sizeof(SOC_PPC_FRWRD_MACT_MSG_HDR_TYPE_rule) / sizeof(SOC_PPC_FRWRD_MACT_MSG_HDR_TYPE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  distribution_info.header_type:\n\r"
    "  Type of the header. According to this header the OLP sends the learning\n\r"
    "  messages to other devices/CPU. I.e. this header is attached to the Learning\n\r"
    "  messages. Not Relevant for T20E.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact learn_msgs_distribution_info_set header_index 0\n\r"
    "  header 0 header_type 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_LEARN_MSGS_DISTRIBUTION_INFO_SET_LEARN_MSGS_DISTRIBUTION_INFO_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_LEARN_MSGS_DISTRIBUTION_INFO_GET_LEARN_MSGS_DISTRIBUTION_INFO_GET_ID, 
    "learn_msgs_distribution_info_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set how to distribute the learn messages to other devices/CPU.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact learn_msgs_distribution_info_get\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_LEARN_MSGS_DISTRIBUTION_INFO_GET_LEARN_MSGS_DISTRIBUTION_INFO_GET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_SHADOW_MSGS_DISTRIBUTION_INFO_SET_SHADOW_MSGS_DISTRIBUTION_INFO_SET_ID, 
    "shadow_msgs_distribution_info_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set how to distribute the shadow messages to the other devices/CPU.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact shadow_msgs_distribution_info_set header_index 0\n\r"
    "  header 0 header_type 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_SHADOW_MSGS_DISTRIBUTION_INFO_SET_SHADOW_MSGS_DISTRIBUTION_INFO_SET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_SHADOW_MSGS_DISTRIBUTION_INFO_SET_SHADOW_MSGS_DISTRIBUTION_INFO_SET_DISTRIBUTION_INFO_HEADER_INDEX_ID, 
    "header_index", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  header_index:\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact shadow_msgs_distribution_info_set header_index 0\n\r"
    "  header 0 header_type 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_SHADOW_MSGS_DISTRIBUTION_INFO_SET_SHADOW_MSGS_DISTRIBUTION_INFO_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_SHADOW_MSGS_DISTRIBUTION_INFO_SET_SHADOW_MSGS_DISTRIBUTION_INFO_SET_DISTRIBUTION_INFO_HEADER_ID, 
    "header", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
#ifdef COMPILER_STRING_CONST_LIMIT
    "  Full documentation cannot be displayed with -pendantic compiler\n\r",
#else
    "  distribution_info.header[ prm_header_index]:\n\r"
    "  Header that this device uses in order to send messages to other devices or\n\r"
    "  the central CPU. Network Order: First long of the header is header[0] and\n\r"
    "  first bit of the header is the lsb of header[0]. If not all the long is used,\n\r"
    "  then start from the lsb bits and reset the rest of the bits of the long. The\n\r"
    "  content of this header is up to the header_type as follows:- raw: content of\n\r"
    "  header is not considered. - OLP port type has to be Raw - TM: ITMH header\n\r"
    "  - OLP port type has be TM - Eth: Ethernet header. In this case, the Ethernet\n\r"
    "  type is not considered and is replaced with dsp_type.- OLP port type has to\n\r"
    "  be Ethernet, and it has to be member in the VLAN which is equal to its\n\r"
    "  VID.Not Relevant for T20E.\n\r"
    "",
#endif /* COMPILER_STRING_CONST_LIMIT */
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact shadow_msgs_distribution_info_set header_index 0\n\r"
    "  header 0 header_type 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_SHADOW_MSGS_DISTRIBUTION_INFO_SET_SHADOW_MSGS_DISTRIBUTION_INFO_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_SHADOW_MSGS_DISTRIBUTION_INFO_SET_SHADOW_MSGS_DISTRIBUTION_INFO_SET_DISTRIBUTION_INFO_HEADER_TYPE_ID, 
    "header_type", 
    (PARAM_VAL_RULES *)&SOC_PPC_FRWRD_MACT_MSG_HDR_TYPE_rule[0], 
    (sizeof(SOC_PPC_FRWRD_MACT_MSG_HDR_TYPE_rule) / sizeof(SOC_PPC_FRWRD_MACT_MSG_HDR_TYPE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  distribution_info.header_type:\n\r"
    "  Type of the header. According to this header the OLP sends the learning\n\r"
    "  messages to other devices/CPU. I.e. this header is attached to the Learning\n\r"
    "  messages. Not Relevant for T20E.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact shadow_msgs_distribution_info_set header_index 0\n\r"
    "  header 0 header_type 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_SHADOW_MSGS_DISTRIBUTION_INFO_SET_SHADOW_MSGS_DISTRIBUTION_INFO_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_SHADOW_MSGS_DISTRIBUTION_INFO_GET_SHADOW_MSGS_DISTRIBUTION_INFO_GET_ID, 
    "shadow_msgs_distribution_info_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set how to distribute the shadow messages to the other devices/CPU.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact shadow_msgs_distribution_info_get\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_SHADOW_MSGS_DISTRIBUTION_INFO_GET_SHADOW_MSGS_DISTRIBUTION_INFO_GET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_MAC_LIMIT_EXCEEDED_INFO_GET_MAC_LIMIT_EXCEEDED_INFO_GET_ID, 
    "mac_limit_exceeded_info_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Gets the information if the MAC limitation is exceeded, i.e. when a MAC Table\n\r"
    "  entry is tryied to be inserted and exceeds the limitation set per FID. This\n\r"
    "  insertion can be triggered by CPU or after a packet learning.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact mac_limit_exceeded_info_get fid_allowed 0 fid_fail 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_MAC_LIMIT_EXCEEDED_INFO_GET_MAC_LIMIT_EXCEEDED_INFO_GET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_PORT_INFO_SET_PORT_INFO_SET_ID, 
    "port_info_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set per port MACT management information including which profile to activate\n\r"
    "  when SA is known in this port.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact port_info_set local_port_ndx 0\n\r"
    "  sa_unknown_action_profile 0 sa_drop_action_profile 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_PORT_INFO_SET_PORT_INFO_SET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_PORT_INFO_SET_PORT_INFO_SET_LOCAL_PORT_NDX_ID, 
    "local_port_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  local_port_ndx:\n\r"
    "  Local port ID.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact port_info_set local_port_ndx 0\n\r"
    "  sa_unknown_action_profile 0 sa_drop_action_profile 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_PORT_INFO_SET_PORT_INFO_SET_ID), 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_PORT_INFO_SET_PORT_INFO_SET_PORT_INFO_SA_UNKNOWN_ACTION_PROFILE_ID, 
    "sa_unknown_action_profile", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  port_info.sa_unknown_action_profile:\n\r"
    "  Set profile for port for unknown SA MACs. This profile is mapped to the\n\r"
    "  action profile by soc_ppd_frwrd_mact_trap_info_set().\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact port_info_set local_port_ndx 0\n\r"
    "  sa_unknown_action_profile 0 sa_drop_action_profile 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_PORT_INFO_SET_PORT_INFO_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },
  { 
    SOC_PARAM_PPD_FRWRD_MACT_PORT_INFO_SET_PORT_INFO_SET_PORT_INFO_DA_UNKNOWN_ACTION_PROFILE_ID, 
    "da_unknown_action_profile", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  port_info.da_unknown_action_profile:\n\r"
    "  Set profile for port for unknown SA MACs. This profile is mapped to the\n\r"
    "  action profile by soc_ppd_frwrd_mact_trap_info_set().\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact port_info_set local_port_ndx 0\n\r"
    "  da_unknown_action_profile 0 da_known_action_profile 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_PORT_INFO_SET_PORT_INFO_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  

  { 
    SOC_PARAM_PPD_FRWRD_MACT_PORT_INFO_SET_PORT_INFO_SET_PORT_INFO_SA_KNOWN_ACTION_PROFILE_ID, 
    "sa_drop_action_profile", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  port_info.sa_drop_action_profile:\n\r"
    "  Set profile for port for known SA MACs with sa_drop_when_know set to TRUE.\n\r"
    "  This profile is mapped to the action profile by soc_ppd_frwrd_mact_trap_info_set().\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact port_info_set local_port_ndx 0\n\r"
    "  sa_unknown_action_profile 0 sa_drop_action_profile 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_PORT_INFO_SET_PORT_INFO_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_PORT_INFO_GET_PORT_INFO_GET_ID, 
    "port_info_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set per port MACT management information including which profile to activate\n\r"
    "  when SA is known in this port.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact port_info_get local_port_ndx 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_PORT_INFO_GET_PORT_INFO_GET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_PORT_INFO_GET_PORT_INFO_GET_LOCAL_PORT_NDX_ID, 
    "local_port_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  local_port_ndx:\n\r"
    "  Local port ID.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact port_info_get local_port_ndx 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_PORT_INFO_GET_PORT_INFO_GET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_TRAP_INFO_SET_TRAP_INFO_SET_ID, 
    "trap_info_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  For each trap type, set the action profile, according to which to forward and\n\r"
    "  process the packet. Different actions may be assigned to the same trap type\n\r"
    "  according to the port-profile.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact trap_info_set trap_type_ndx 0 port_profile_ndx 0\n\r"
    "  frwrd_action_id 0 snoop_action_id 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_TRAP_INFO_SET_TRAP_INFO_SET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_TRAP_INFO_SET_TRAP_INFO_SET_TRAP_TYPE_NDX_ID, 
    "trap_type_ndx", 
    (PARAM_VAL_RULES *)&SOC_PPC_FRWRD_MACT_TRAP_TYPE_rule[0], 
    (sizeof(SOC_PPC_FRWRD_MACT_TRAP_TYPE_rule) / sizeof(SOC_PPC_FRWRD_MACT_TRAP_TYPE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  trap_type_ndx:\n\r"
    "  Type of the Trap.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact trap_info_set trap_type_ndx 0 port_profile_ndx 0\n\r"
    "  frwrd_action_id 0 snoop_action_id 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_TRAP_INFO_SET_TRAP_INFO_SET_ID), 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_TRAP_INFO_SET_TRAP_INFO_SET_PORT_PROFILE_NDX_ID, 
    "port_profile_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  port_profile_ndx:\n\r"
    "  Per port profile, to enable setting different actions for same trap type\n\r"
    "  using this profile. To set this profile for a port, use\n\r"
    "  soc_ppd_frwrd_mact_port_info_set().  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact trap_info_set trap_type_ndx 0 port_profile_ndx 0\n\r"
    "  frwrd_action_id 0 snoop_action_id 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_TRAP_INFO_SET_TRAP_INFO_SET_ID), 
    4, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_TRAP_INFO_SET_TRAP_INFO_SET_ACTION_PROFILE_TRAP_CODE_LSB_ID, 
    "trap_code", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals/*SOC_PPC_TRAP_CODE_rule*/[0], 
    (sizeof(soc_ppd_api_free_vals/*SOC_PPC_TRAP_CODE_rule*/) / sizeof(soc_ppd_api_free_vals/*SOC_PPC_TRAP_CODE_rule*/[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
#ifdef COMPILER_STRING_CONST_LIMIT
    "  Full documentation cannot be displayed with -pendantic compiler\n\r",
#else
    "  action_profile.trap_code:\n\r"
    "  Sets the LSB of the CPU code. For trapped packet the CPU \n\r"
    "  code are associated into the packet headers. The CPU \n\r"
    "  code also used as index for the forwarding/snooping \n\r"
    "  actions. see to soc_ppd_trap_frwrd_profile_info_set(), \n\r"
    "  soc_ppd_trap_snoop_profile_info_set(). Range Petra-B: 0-255, \n\r"
    "  T20E:0-63.To know the legal range in specific use of \n\r"
    "  this field, see the documentation in that specific \n\r"
    "  use.In Petra-B this field affects the CPU code set on \n\r"
    "  the packets header, IN T20E it's only select the \n\r"
    "  forwarding and snooping profiles.                     \n\r"  
    "",
#endif /* COMPILER_STRING_CONST_LIMIT */
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact trap_info_set trap_type_ndx 0 port_profile_ndx 0\n\r"
    "  frwrd_action_id 0 snoop_action_id 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_TRAP_INFO_SET_TRAP_INFO_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_TRAP_INFO_SET_TRAP_INFO_SET_ACTION_PROFILE_FRWRD_STRENGTH_ID, 
    "frwrd_action_strength", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  action_profile.frwrd_action_strength:\n\r"
    "  Value that identifies the strength of the assignment of \n\r"
    "  Forward action to the packet. Through the packet \n\r"
    "  processing pipe, many forwarding decisions may be taken; \n\r"
    "  yet one decision may overwrite a former decision only if \n\r"
    "  it stronger, i.e., its strength is higher than the last \n\r"
    "  decision that was taken. Range 0-7.Relevant only for \n\r"
    "  Petra-B.                \n\r"                                
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact trap_info_set trap_type_ndx 0 port_profile_ndx 0\n\r"
    "  frwrd_action_id 0 snoop_action_id 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_TRAP_INFO_SET_TRAP_INFO_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_TRAP_INFO_SET_TRAP_INFO_SET_ACTION_PROFILE_SNOOP_STRENGTH_ID, 
    "frwrd_snoop_strength", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  action_profile.frwrd_snoop_strength:\n\r"
    "  Value that identifies the strength of the assignment of \n\r"
    "  Snoop action to the packet. Through the packet \n\r"
    "  processing pipe, many snooping decisions may be taken; \n\r"
    "  yet one decision may overwrite a former decision only if \n\r"
    "  it stronger, i.e., its strength is higher than the last \n\r"
    "  decision that was taken. Range 0-7.Relevant only for \n\r"
    "  Petra-B.              \n\r"                                  
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact trap_info_set trap_type_ndx 0 port_profile_ndx 0\n\r"
    "  frwrd_action_id 0 snoop_action_id 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_TRAP_INFO_SET_TRAP_INFO_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_TRAP_INFO_GET_TRAP_INFO_GET_ID, 
    "trap_info_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  For each trap type, set the action profile, according to which to forward and\n\r"
    "  process the packet. Different actions may be assigned to the same trap type\n\r"
    "  according to the port-profile.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact trap_info_get trap_type_ndx 0 port_profile_ndx 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_TRAP_INFO_GET_TRAP_INFO_GET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_TRAP_INFO_GET_TRAP_INFO_GET_TRAP_TYPE_NDX_ID, 
    "trap_type_ndx", 
    (PARAM_VAL_RULES *)&SOC_PPC_FRWRD_MACT_TRAP_TYPE_rule[0], 
    (sizeof(SOC_PPC_FRWRD_MACT_TRAP_TYPE_rule) / sizeof(SOC_PPC_FRWRD_MACT_TRAP_TYPE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  trap_type_ndx:\n\r"
    "  Type of the Trap.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact trap_info_get trap_type_ndx 0 port_profile_ndx 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_TRAP_INFO_GET_TRAP_INFO_GET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_TRAP_INFO_GET_TRAP_INFO_GET_PORT_PROFILE_NDX_ID, 
    "port_profile_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  port_profile_ndx:\n\r"
    "  Per port profile, to enable setting different actions for same trap type\n\r"
    "  using this profile. To set this profile for a port, use\n\r"
    "  soc_ppd_frwrd_mact_port_info_set().  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact trap_info_get trap_type_ndx 0 port_profile_ndx 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_TRAP_INFO_GET_TRAP_INFO_GET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_IP_COMPATIBLE_MC_INFO_SET_IP_COMPATIBLE_MC_INFO_SET_ID, 
    "ip_compatible_mc_info_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Sets the information regarding bridging Compatible MC MAC addresses. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact ip_compatible_mc_info_set\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_IP_COMPATIBLE_MC_INFO_SET_IP_COMPATIBLE_MC_INFO_SET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_IP_COMPATIBLE_MC_INFO_SET_IP_COMPATIBLE_MC_INFO_SET_INFO_MASK_FID_ID, 
    "mask_fid", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  info.mask_fid:\n\r"
    "  If TRUE, then the lookup key (in the MACT) is DIP. If FALSE, then the lookup\n\r"
    "  key is (FID,DIP).\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact ip_compatible_mc_info_set mask_fid 0\n\r"
    "  enable_ipv4_mc_compatible 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_IP_COMPATIBLE_MC_INFO_SET_IP_COMPATIBLE_MC_INFO_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_IP_COMPATIBLE_MC_INFO_SET_IP_COMPATIBLE_MC_INFO_SET_INFO_ENABLE_IPV4_MC_COMPATIBLE_ID, 
    "enable_ipv4_mc_compatible", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
#ifdef COMPILER_STRING_CONST_LIMIT
    "  Full documentation cannot be displayed with -pendantic compiler\n\r",
#else
    "  info.enable_ipv4_mc_compatible:\n\r"
    "  When (1) IPv4 MC packet over Ethernet is identified as compatible MC, i.e the\n\r"
    "  DA is in the range of compatible MC addresses (see below),(2) IP Multicast\n\r"
    "  Routing is disabled on the in-RIF\n\r"
    "  (see soc_ppd_rif_vsid_map_set, SOC_PPC_RIF_INFO)\n\r"
    "  Then - If this field is set to TRUE then the MACT is accessed with the packet\n\r"
    "  DIP and FID (FID may be masked)\n\r"
    "  (i.e., the packet is bridged)- If this field is set to FALSE then the MACT is\n\r"
    "  accessed with the MAC address and FID (a normal bridging occurs). Remarks:-\n\r"
    "  The compatible MC MAC addresses range is 01:00:5e:00:00:00 -\n\r"
    "  01:00:5e:7f:ff:ff.- on (2) above, if the Multicast routing is enabled then\n\r"
    "  the packet is routed 'normally' - for IPv6 compatible packets, if the IP\n\r"
    "  Multicast Routing is enabled on the in-RIF then the packet is routed,\n\r"
    "  otherwise the packet is bridged according to its MAC address and its FID\n\r"
    "  (normal bridging)\n\r"
    "",
#endif /* COMPILER_STRING_CONST_LIMIT */
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact ip_compatible_mc_info_set mask_fid 0\n\r"
    "  enable_ipv4_mc_compatible 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_IP_COMPATIBLE_MC_INFO_SET_IP_COMPATIBLE_MC_INFO_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_IP_COMPATIBLE_MC_INFO_GET_IP_COMPATIBLE_MC_INFO_GET_ID, 
    "ip_compatible_mc_info_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Sets the information regarding bridging Compatible MC MAC addresses. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact ip_compatible_mc_info_get\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_IP_COMPATIBLE_MC_INFO_GET_IP_COMPATIBLE_MC_INFO_GET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_EVENT_PARSE_FRWRD_MACT_EVENT_PARSE_ID, 
    "event_parse", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  The MACT may report different events using the event FIFO (e.g., learn, age,\n\r"
    "  transplant, and retrieve). This API Parses the event buffer into a meaningful\n\r"
    "  structure.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact_mgmt frwrd_mact_event_parse buff_len 0 buff_index 0 buff 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_EVENT_PARSE_FRWRD_MACT_EVENT_PARSE_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_EVENT_PARSE_FRWRD_MACT_EVENT_PARSE_EVENT_BUF_BUFF_LEN_ID, 
    "buff_len", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  event_buf.buff_len:\n\r"
    "  the actual length of the returned buffer (in longs)\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact_mgmt frwrd_mact_event_parse buff_len 0 buff_index 0 buff 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_EVENT_PARSE_FRWRD_MACT_EVENT_PARSE_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_EVENT_PARSE_FRWRD_MACT_EVENT_PARSE_EVENT_BUF_BUFF_INDEX_ID, 
    "buff_index", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  buff_index:\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact_mgmt frwrd_mact_event_parse buff_len 0 buff_index 0 buff 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_EVENT_PARSE_FRWRD_MACT_EVENT_PARSE_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_MACT_EVENT_PARSE_FRWRD_MACT_EVENT_PARSE_EVENT_BUF_BUFF_ID, 
    "buff", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  event_buf.buff[ prm_buff_index]:\n\r"
    "  Buffer to copy the Event to. Event is copied to buff starting from buff[0]\n\r"
    "  lsb.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_mact_mgmt frwrd_mact_event_parse buff_len 0 buff_index 0 buff 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_MACT_EVENT_PARSE_FRWRD_MACT_EVENT_PARSE_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_API_FRWRD_MACT_MGMT_ID, 
    "frwrd_mact_mgmt", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "",
    "", 
    "",
    BIT_UI_16_RNG(SOC_FUN_PPD_API_FRWRD_MACT_MGMT_FIRST_ID,SOC_FUN_PPD_API_FRWRD_MACT_MGMT_LAST_ID), 
    1, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
#endif /* } frwrd_mact*/
#ifdef UI_FRWRD_IPV4/* { frwrd_ipv4*/
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_GLBL_INFO_SET_GLBL_INFO_SET_ID, 
    "glbl_info_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Setting global information of the IP routing (including resources to use)\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 glbl_info_set mc_table_resouces 0 uc_table_resouces 0\n\r"
    "  frwrd_action_id 0 snoop_action_id 0 route_val 0 type 0 frwrd_action_id 0\n\r"
    "  snoop_action_id 0 route_val 0 type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, BIT(9)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_GLBL_INFO_SET_GLBL_INFO_SET_GLBL_INFO_ROUTER_INFO_MC_DEFAULT_ACTION_VALUE_ACTION_PROFILE_TRAP_CODE_LSB_ID, 
    "mc_trap_code", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals/*SOC_PPC_TRAP_CODE_rule*/[0], 
    (sizeof(soc_ppd_api_free_vals/*SOC_PPC_TRAP_CODE_rule*/) / sizeof(soc_ppd_api_free_vals/*SOC_PPC_TRAP_CODE_rule*/[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
#ifdef COMPILER_STRING_CONST_LIMIT
    "  Full documentation cannot be displayed with -pendantic compiler\n\r",
#else
    "  action_profile.trap_code:\n\r"
    "  Sets the LSB of the CPU code. For trapped packet the CPU \n\r"
    "  code are associated into the packet headers. The CPU \n\r"
    "  code also used as index for the forwarding/snooping \n\r"
    "  actions. see to soc_ppd_trap_frwrd_profile_info_set(), \n\r"
    "  soc_ppd_trap_snoop_profile_info_set(). Range Petra-B: 0-255, \n\r"
    "  T20E:0-63.To know the legal range in specific use of \n\r"
    "  this field, see the documentation in that specific \n\r"
    "  use.In Petra-B this field affects the CPU code set on \n\r"
    "  the packets header, IN T20E it's only select the \n\r"
    "  forwarding and snooping profiles.                     \n\r"  
    "",
#endif /* COMPILER_STRING_CONST_LIMIT */
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 glbl_info_set mc_table_resouces 0 uc_table_resouces 0\n\r"
    "  frwrd_action_id 0 snoop_action_id 0 route_val 0 type 0 frwrd_action_id 0\n\r"
    "  snoop_action_id 0 route_val 0 type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, BIT(9)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_GLBL_INFO_SET_GLBL_INFO_SET_GLBL_INFO_ROUTER_INFO_MC_DEFAULT_ACTION_VALUE_ACTION_PROFILE_FRWRD_STRENGTH_ID, 
    "mc_frwrd_action_strength", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  action_profile.frwrd_action_strength:\n\r"
    "  Value that identifies the strength of the assignment of \n\r"
    "  Forward action to the packet. Through the packet \n\r"
    "  processing pipe, many forwarding decisions may be taken; \n\r"
    "  yet one decision may overwrite a former decision only if \n\r"
    "  it stronger, i.e., its strength is higher than the last \n\r"
    "  decision that was taken. Range 0-7.Relevant only for \n\r"
    "  Petra-B.                \n\r"                                
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 glbl_info_set mc_table_resouces 0 uc_table_resouces 0\n\r"
    "  frwrd_action_id 0 snoop_action_id 0 route_val 0 type 0 frwrd_action_id 0\n\r"
    "  snoop_action_id 0 route_val 0 type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, BIT(9)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_GLBL_INFO_SET_GLBL_INFO_SET_GLBL_INFO_ROUTER_INFO_MC_DEFAULT_ACTION_VALUE_ACTION_PROFILE_SNOOP_STRENGTH_ID, 
    "mc_frwrd_snoop_strength", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  action_profile.frwrd_snoop_strength:\n\r"
    "  Value that identifies the strength of the assignment of \n\r"
    "  Snoop action to the packet. Through the packet \n\r"
    "  processing pipe, many snooping decisions may be taken; \n\r"
    "  yet one decision may overwrite a former decision only if \n\r"
    "  it stronger, i.e., its strength is higher than the last \n\r"
    "  decision that was taken. Range 0-7.Relevant only for \n\r"
    "  Petra-B.              \n\r"                                  
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 glbl_info_set mc_table_resouces 0 uc_table_resouces 0\n\r"
    "  frwrd_action_id 0 snoop_action_id 0 route_val 0 type 0 frwrd_action_id 0\n\r"
    "  snoop_action_id 0 route_val 0 type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, BIT(9)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_GLBL_INFO_SET_GLBL_INFO_SET_GLBL_INFO_ROUTER_INFO_MC_DEFAULT_ACTION_VALUE_ROUTE_VAL_ID, 
    "mc_fec", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  glbl_info.router_info.mc_default_action.value.route_val:\n\r"
    "  Forward according to FEC entry in the FEC table. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 glbl_info_set mc_table_resouces 0 uc_table_resouces 0\n\r"
    "  frwrd_action_id 0 snoop_action_id 0 route_val 0 type 0 frwrd_action_id 0\n\r"
    "  snoop_action_id 0 route_val 0 type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, BIT(9)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_GLBL_INFO_SET_GLBL_INFO_SET_GLBL_INFO_ROUTER_INFO_MC_DEFAULT_ACTION_TYPE_ID, 
    "mc_type", 
    (PARAM_VAL_RULES *)&SOC_PPC_FRWRD_IPV4_ROUTER_DEFAULT_ACTION_TYPE_rule[0], 
    (sizeof(SOC_PPC_FRWRD_IPV4_ROUTER_DEFAULT_ACTION_TYPE_rule) / sizeof(SOC_PPC_FRWRD_IPV4_ROUTER_DEFAULT_ACTION_TYPE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  glbl_info.router_info.mc_default_action.type:\n\r"
    "  Type of the default forwarding action may be FEC or Action profile.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 glbl_info_set mc_table_resouces 0 uc_table_resouces 0\n\r"
    "  frwrd_action_id 0 snoop_action_id 0 route_val 0 type 0 frwrd_action_id 0\n\r"
    "  snoop_action_id 0 route_val 0 type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, BIT(9)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_GLBL_INFO_SET_GLBL_INFO_SET_GLBL_INFO_ROUTER_INFO_UC_DEFAULT_ACTION_VALUE_ACTION_PROFILE_TRAP_CODE_LSB_ID, 
    "uc_trap_code", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals/*SOC_PPC_TRAP_CODE_rule*/[0], 
    (sizeof(soc_ppd_api_free_vals/*SOC_PPC_TRAP_CODE_rule*/) / sizeof(soc_ppd_api_free_vals/*SOC_PPC_TRAP_CODE_rule*/[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
#ifdef COMPILER_STRING_CONST_LIMIT
    "  Full documentation cannot be displayed with -pendantic compiler\n\r",
#else
    "  action_profile.trap_code:\n\r"
    "  Sets the LSB of the CPU code. For trapped packet the CPU \n\r"
    "  code are associated into the packet headers. The CPU \n\r"
    "  code also used as index for the forwarding/snooping \n\r"
    "  actions. see to soc_ppd_trap_frwrd_profile_info_set(), \n\r"
    "  soc_ppd_trap_snoop_profile_info_set(). Range Petra-B: 0-255, \n\r"
    "  T20E:0-63.To know the legal range in specific use of \n\r"
    "  this field, see the documentation in that specific \n\r"
    "  use.In Petra-B this field affects the CPU code set on \n\r"
    "  the packets header, IN T20E it's only select the \n\r"
    "  forwarding and snooping profiles.                     \n\r"  
    "",
#endif /* COMPILER_STRING_CONST_LIMIT */
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 glbl_info_set uc_table_resouces 0 uc_table_resouces 0\n\r"
    "  frwrd_action_id 0 snoop_action_id 0 route_val 0 type 0 frwrd_action_id 0\n\r"
    "  snoop_action_id 0 route_val 0 type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, BIT(9)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_GLBL_INFO_SET_GLBL_INFO_SET_GLBL_INFO_ROUTER_INFO_UC_DEFAULT_ACTION_VALUE_ACTION_PROFILE_FRWRD_STRENGTH_ID, 
    "uc_frwrd_action_strength", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  action_profile.frwrd_action_strength:\n\r"
    "  Value that identifies the strength of the assignment of \n\r"
    "  Forward action to the packet. Through the packet \n\r"
    "  processing pipe, many forwarding decisions may be taken; \n\r"
    "  yet one decision may overwrite a former decision only if \n\r"
    "  it stronger, i.e., its strength is higher than the last \n\r"
    "  decision that was taken. Range 0-7.Relevant only for \n\r"
    "  Petra-B.                \n\r"                                
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 glbl_info_set uc_table_resouces 0 uc_table_resouces 0\n\r"
    "  frwrd_action_id 0 snoop_action_id 0 route_val 0 type 0 frwrd_action_id 0\n\r"
    "  snoop_action_id 0 route_val 0 type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, BIT(9)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_GLBL_INFO_SET_GLBL_INFO_SET_GLBL_INFO_ROUTER_INFO_UC_DEFAULT_ACTION_VALUE_ACTION_PROFILE_SNOOP_STRENGTH_ID, 
    "uc_frwrd_snoop_strength", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  action_profile.frwrd_snoop_strength:\n\r"
    "  Value that identifies the strength of the assignment of \n\r"
    "  Snoop action to the packet. Through the packet \n\r"
    "  processing pipe, many snooping decisions may be taken; \n\r"
    "  yet one decision may overwrite a former decision only if \n\r"
    "  it stronger, i.e., its strength is higher than the last \n\r"
    "  decision that was taken. Range 0-7.Relevant only for \n\r"
    "  Petra-B.              \n\r"                                  
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 glbl_info_set uc_table_resouces 0 uc_table_resouces 0\n\r"
    "  frwrd_action_id 0 snoop_action_id 0 route_val 0 type 0 frwrd_action_id 0\n\r"
    "  snoop_action_id 0 route_val 0 type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, BIT(9)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_GLBL_INFO_SET_GLBL_INFO_SET_GLBL_INFO_ROUTER_INFO_UC_DEFAULT_ACTION_VALUE_ROUTE_VAL_ID, 
    "uc_fec", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  glbl_info.router_info.uc_default_action.value.route_val:\n\r"
    "  Forward according to FEC entry in the FEC table. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 glbl_info_set mc_table_resouces 0 uc_table_resouces 0\n\r"
    "  frwrd_action_id 0 snoop_action_id 0 route_val 0 type 0 frwrd_action_id 0\n\r"
    "  snoop_action_id 0 route_val 0 type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, BIT(9)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_GLBL_INFO_SET_GLBL_INFO_SET_GLBL_INFO_ROUTER_INFO_UC_DEFAULT_ACTION_TYPE_ID, 
    "uc_type", 
    (PARAM_VAL_RULES *)&SOC_PPC_FRWRD_IPV4_ROUTER_DEFAULT_ACTION_TYPE_rule[0], 
    (sizeof(SOC_PPC_FRWRD_IPV4_ROUTER_DEFAULT_ACTION_TYPE_rule) / sizeof(SOC_PPC_FRWRD_IPV4_ROUTER_DEFAULT_ACTION_TYPE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  glbl_info.router_info.uc_default_action.type:\n\r"
    "  Type of the default forwarding action may be FEC or Action profile.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 glbl_info_set mc_table_resouces 0 uc_table_resouces 0\n\r"
    "  frwrd_action_id 0 snoop_action_id 0 route_val 0 type 0 frwrd_action_id 0\n\r"
    "  snoop_action_id 0 route_val 0 type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, BIT(9)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_GLBL_INFO_GET_GLBL_INFO_GET_ID, 
    "glbl_info_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Setting global information of the IP routing (including resources to use)\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 glbl_info_get\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, BIT(10)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_UC_ROUTE_ADD_UC_ROUTE_ADD_ID, 
    "uc_route_add", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Add IPv4 route entry to the routing table.\n\r"
    "  Binds between Ipv4 Unicast route key (IPv4-address/prefix) and a FEC entry\n\r"
    "  identified by sys_fec_id for a given virtual router. As a result of this\n\r"
    "  operation, Unicast Ipv4 packets designated to the IP address matching the\n\r"
    "  given key (as long there is no more-specific route key) will be routed\n\r"
    "  according to the information in the FEC entry identified by sys_fec_id.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 uc_route_add prefix_len 0 ip_address 0 fec_id 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, BIT(17)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_UC_ROUTE_ADD_UC_ROUTE_ADD_ROUTE_KEY_SUBNET_PREFIX_LEN_ID, 
    "prefix_len", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  route_key.subnet.prefix_len:\n\r"
    "  Number of bits to consider in the IP address starting from the msb. Range: 0\n\r"
    "  - 32.Example for key ip_address 192.168.1.0 and prefix_len 24 would match any\n\r"
    "  IP Address of the form 192.168.1.x\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 uc_route_add prefix_len 0 ip_address 0 fec_id 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, BIT(17)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_UC_ROUTE_ADD_UC_ROUTE_ADD_ROUTE_KEY_SUBNET_IP_ADDRESS_ID, 
    "ip_address", 
    (PARAM_VAL_RULES *)&soc_ppd_api_ip_address_vals[0], 
    (sizeof(soc_ppd_api_ip_address_vals) / sizeof(soc_ppd_api_ip_address_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  route_key.subnet.ip_address:\n\r"
    "  Ipv4 destination address.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 uc_route_add prefix_len 0 ip_address 0 fec_id 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, BIT(17)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_UC_ROUTE_ADD_UC_ROUTE_ADD_ROUTE_KEY_SUBNET_IP_ADDRESS_INCR, 
    "ip_address_incr", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
	"  Ipv4 destination address increment.\n\r"
	"",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 uc_route_add ip_address_count 0 prefix_len 0 ip_address 0 ip_address_incr 0 fec_id 0 fec_id_incr 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, BIT(17)}, 
    LAST_ORDINAL, 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_UC_ROUTE_ADD_UC_ROUTE_ADD_NUMBER_OF_ENTRIES, 
    "entries", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
	"  Number of entires to enter.\n\r"
	"",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 uc_route_add ip_address_count 0 prefix_len 0 ip_address 0 ip_address_incr 0 fec_id 0 fec_id_incr 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, BIT(17)}, 
    LAST_ORDINAL, 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_UC_ROUTE_ADD_UC_ROUTE_ADD_FEC_ID_INCR, 
    "fec_id_incr", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
	"  fec_id increment.\n\r"
	"",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 uc_route_add ip_address_count 0 prefix_len 0 ip_address 0 ip_address_incr 0 fec_id 0 fec_id_incr 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, BIT(17)}, 
    LAST_ORDINAL, 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_UC_ROUTE_ADD_UC_ROUTE_ADD_FEC_ID_ID, 
    "fec_id", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  fec_id:\n\r"
    "  FEC ID.   \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 uc_route_add prefix_len 0 ip_address 0 fec_id 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, BIT(17)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_UC_ROUTE_GET_UC_ROUTE_GET_ID, 
    "uc_route_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Gets the routing information (system-fec-id) associated with the given route\n\r"
    "  key.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 uc_route_get prefix_len 0 ip_address 0 exact_match 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, BIT(18)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_UC_ROUTE_GET_UC_ROUTE_GET_ROUTE_KEY_SUBNET_PREFIX_LEN_ID, 
    "prefix_len", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  route_key.subnet.prefix_len:\n\r"
    "  Number of bits to consider in the IP address starting from the msb. Range: 0\n\r"
    "  - 32.Example for key ip_address 192.168.1.0 and prefix_len 24 would match any\n\r"
    "  IP Address of the form 192.168.1.x\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 uc_route_get prefix_len 0 ip_address 0 exact_match 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, BIT(18)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_UC_ROUTE_GET_UC_ROUTE_GET_ROUTE_KEY_SUBNET_IP_ADDRESS_ID, 
    "ip_address", 
    (PARAM_VAL_RULES *)&soc_ppd_api_ip_address_vals[0], 
    (sizeof(soc_ppd_api_ip_address_vals) / sizeof(soc_ppd_api_ip_address_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  route_key.subnet.ip_address:\n\r"
    "  Ipv4 destination address.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 uc_route_get prefix_len 0 ip_address 0 exact_match 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, BIT(18)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_UC_ROUTE_GET_UC_ROUTE_GET_EXACT_MATCH_ID, 
    "exact_match", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  exact_match:\n\r"
    "  If TRUE returns exact match only; if FALSE returns longest prefix match.   \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 uc_route_get prefix_len 0 ip_address 0 exact_match 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, BIT(18)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_UC_ROUTE_GET_BLOCK_UC_ROUTE_GET_BLOCK_ID, 
    "uc_route_get_block", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Gets the Ipv4 UC routing table.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 uc_route_get_block entries_to_act 0 entries_to_scan 0\n\r"
    "  arr_index 0 arr 0 type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, BIT(19)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_UC_ROUTE_GET_BLOCK_UC_ROUTE_GET_BLOCK_BLOCK_RANGE_ENTRIES_TO_ACT_ID, 
    "entries_to_act", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  block_range.entries_to_act:\n\r"
    "  Number of entries to read/modify.Stop after retrieving this number of entries.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 uc_route_get_block entries_to_act 0 entries_to_scan 0\n\r"
    "  arr_index 0 arr 0 type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, BIT(19)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_UC_ROUTE_GET_BLOCK_UC_ROUTE_GET_BLOCK_BLOCK_RANGE_ENTRIES_TO_SCAN_ID, 
    "entries_to_scan", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  block_range.entries_to_scan:\n\r"
    "  The number of entries to scan.Stop after scanning this number of entries.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 uc_route_get_block entries_to_act 0 entries_to_scan 0\n\r"
    "  arr_index 0 arr 0 type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, BIT(19)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_UC_ROUTE_GET_BLOCK_UC_ROUTE_GET_BLOCK_BLOCK_RANGE_START_PAYLOAD_ARR_INDEX_ID, 
    "arr_index", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  arr_index:\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 uc_route_get_block entries_to_act 0 entries_to_scan 0\n\r"
    "  arr_index 0 arr 0 type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, BIT(19)}, 
    LAST_ORDINAL, 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_UC_ROUTE_GET_BLOCK_UC_ROUTE_GET_BLOCK_BLOCK_RANGE_START_PAYLOAD_ARR_ID, 
    "arr", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  block_range.start.payload.arr[ prm_arr_index]:\n\r"
    "  Start of the range.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 uc_route_get_block entries_to_act 0 entries_to_scan 0\n\r"
    "  arr_index 0 arr 0 type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, BIT(19)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_UC_ROUTE_GET_BLOCK_UC_ROUTE_GET_BLOCK_RULE_KEY_RULE_FEC_ID, 
    "rule_fec_id", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Print only entries with this fec_id.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 uc_route_get_block entries_to_act 0 entries_to_scan 0\n\r"
    "  arr_index 0 arr 0 type 0 rule_fec_id 0 enable_count_only 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, BIT(19)}, 
    LAST_ORDINAL, 
    (VAL_PROC_PTR)NULL 
  },
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_UC_ROUTE_GET_BLOCK_UC_ROUTE_GET_BLOCK_COUNT_ONLY, 
    "enable_count_only", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Print only the number of entries.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 uc_route_get_block entries_to_act 0 entries_to_scan 0\n\r"
    "  arr_index 0 arr 0 type 0 rule_fec_id 0 enable_count_only 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, BIT(19)}, 
    LAST_ORDINAL, 
    (VAL_PROC_PTR)NULL 
  },
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_UC_ROUTE_GET_BLOCK_UC_ROUTE_GET_BLOCK_PRINT_ALL, 
    "enable_print_all", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Print only the number of entries.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 uc_route_get_block entries_to_act 0 entries_to_scan 0\n\r"
    "  arr_index 0 arr 0 type 0 rule_fec_id 0 enable_count_only 0 enable_print_all 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, BIT(19)}, 
    LAST_ORDINAL, 
    (VAL_PROC_PTR)NULL 
  },
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_UC_ROUTE_GET_BLOCK_UC_ROUTE_GET_BLOCK_BLOCK_RANGE_START_TYPE_ID, 
    "type", 
    (PARAM_VAL_RULES *)&SOC_PPC_IP_ROUTING_TABLE_ITER_TYPE_rule[0], 
    (sizeof(SOC_PPC_IP_ROUTING_TABLE_ITER_TYPE_rule) / sizeof(SOC_PPC_IP_ROUTING_TABLE_ITER_TYPE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  block_range.start.type:\n\r"
    "  The type of the iterator. (fast, ordered ...)\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 uc_route_get_block entries_to_act 0 entries_to_scan 0\n\r"
    "  arr_index 0 arr 0 type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, BIT(19)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_UC_ROUTE_REMOVE_UC_ROUTE_REMOVE_ID, 
    "uc_route_remove", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Remove entry from the routing table.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 uc_route_remove prefix_len 0 ip_address 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, BIT(20)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_UC_ROUTE_REMOVE_UC_ROUTE_REMOVE_ROUTE_KEY_SUBNET_PREFIX_LEN_ID, 
    "prefix_len", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  route_key.subnet.prefix_len:\n\r"
    "  Number of bits to consider in the IP address starting from the msb. Range: 0\n\r"
    "  - 32.Example for key ip_address 192.168.1.0 and prefix_len 24 would match any\n\r"
    "  IP Address of the form 192.168.1.x\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 uc_route_remove prefix_len 0 ip_address 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, BIT(20)}, 
    LAST_ORDINAL, 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_UC_ROUTE_REMOVE_UC_ROUTE_REMOVE_ROUTE_KEY_SUBNET_IP_ADDRESS_INCR, 
    "ip_address_incr", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
	"  Ipv4 destination address incrementation.\n\r"
	"",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 uc_route_remove prefix_len 0 ip_address 0 ip_address_count 0 ip_address_incr 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, BIT(20)}, 
    LAST_ORDINAL, 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_UC_ROUTE_REMOVE_UC_ROUTE_REMOVE_NUMBER_OF_ENTRIES, 
    "entries", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
	"  Number of entries to remove.\n\r"
	"",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 uc_route_remove prefix_len 0 ip_address 0 ip_address_count 0 ip_address_incr 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, BIT(20)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_UC_ROUTE_REMOVE_UC_ROUTE_REMOVE_ROUTE_KEY_SUBNET_IP_ADDRESS_ID, 
    "ip_address", 
    (PARAM_VAL_RULES *)&soc_ppd_api_ip_address_vals[0], 
    (sizeof(soc_ppd_api_ip_address_vals) / sizeof(soc_ppd_api_ip_address_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  route_key.subnet.ip_address:\n\r"
    "  Ipv4 destination address.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 uc_route_remove prefix_len 0 ip_address 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, BIT(20)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_UC_ROUTING_TABLE_CLEAR_UC_ROUTING_TABLE_CLEAR_ID, 
    "uc_routing_table_clear", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Clear the IPv4 UC routing table.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 uc_routing_table_clear\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, BIT(21)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_CACHE_MODE_SET_ID, 
    "cache_mode_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  set caching mode.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 host_add ip_address 0 vrf_ndx 0 eep 0 fec_id 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, BIT(6)},
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_CACHE_MODE_SET_VRF_ID, 
    "vrf_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  host_key.vrf_ndx:\n\r"
    "  VRF ID. Range: 0 - 255.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 host_add ip_address 0 vrf_ndx 0 eep 0 fec_id 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, BIT(6)},
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_CACHE_MODE_SET_MODE_ID, 
    "mode", 
    (PARAM_VAL_RULES *)&SOC_PPC_FRWRD_IP_CACHE_MODE_rule[0], 
    (sizeof(SOC_PPC_FRWRD_IP_CACHE_MODE_rule) / sizeof(SOC_PPC_FRWRD_IP_CACHE_MODE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  cache_mode:\n\r"
    "  mode of caching\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 glbl_info_set mc_table_resouces 0 uc_table_resouces 0\n\r"
    "  frwrd_action_id 0 snoop_action_id 0 route_val 0 type 0 frwrd_action_id 0\n\r"
    "  snoop_action_id 0 route_val 0 type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, BIT(6)},
    4, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_CACHE_MODE_GET_ID, 
    "cache_mode_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  get caching mode.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 host_add ip_address 0 vrf_ndx 0 eep 0 fec_id 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, BIT(20)},
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_CACHE_MODE_GET_VRF_ID, 
    "vrf_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  host_key.vrf_ndx:\n\r"
    "  VRF ID. Range: 0 - 255.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 host_add ip_address 0 vrf_ndx 0 eep 0 fec_id 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, BIT(20)},
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_COMMIT_ID, 
    "commit", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  commit cahed routes.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 host_add ip_address 0 vrf_ndx 0 eep 0 fec_id 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, BIT(13)},
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_COMMIT_VRF_ID, 
    "vrf_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  host_key.vrf_ndx:\n\r"
    "  VRF ID. Range: 0 - 255.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 host_add ip_address 0 vrf_ndx 0 eep 0 fec_id 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, BIT(13)},
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_HOST_ADD_HOST_ADD_ID, 
    "host_add", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Add IPv4 entry to the Host table.\n\r"
    "  Binds between Host and next hop information.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 host_add ip_address 0 vrf_ndx 0 eep 0 fec_id 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, BIT(17)},
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_HOST_ADD_HOST_ADD_HOST_KEY_IP_ADDRESS_ID, 
    "ip_address", 
    (PARAM_VAL_RULES *)&soc_ppd_api_ip_address_vals[0], 
    (sizeof(soc_ppd_api_ip_address_vals) / sizeof(soc_ppd_api_ip_address_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  host_key.ip_address:\n\r"
    "  Ipv4 address.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 host_add ip_address 0 vrf_ndx 0 eep 0 fec_id 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, BIT(17)},
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_HOST_ADD_HOST_ADD_HOST_KEY_IP_ADDRESS_INCR, 
    "ip_address_incr", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Ipv4 address incrementation.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 host_add entries 0 ip_address 0 ip_address_incr 0 vrf_ndx 0 eep 0 eep_incr 0 fec_id 0 fec_id_incr 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, BIT(17)},
    LAST_ORDINAL, 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_HOST_ADD_HOST_ADD_NUMBER_OF_ENTRIES, 
    "entries", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  EEP incrementation. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 host_add entries 0 ip_address 0 ip_address_incr 0 vrf_ndx 0 eep 0 eep_incr 0 fec_id 0 fec_id_incr 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, BIT(17)},
    LAST_ORDINAL, 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_HOST_ADD_HOST_ADD_HOST_KEY_VRF_NDX_ID, 
    "vrf_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  host_key.vrf_ndx:\n\r"
    "  VRF ID. Range: 0 - 255.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 host_add ip_address 0 vrf_ndx 0 eep 0 fec_id 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, BIT(17)},
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_HOST_ADD_HOST_ADD_ROUTING_INFO_EEP_ID, 
    "eep", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  EEP incrementation. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 host_add entries 0 ip_address 0 ip_address_incr 0 vrf_ndx 0 eep 0 eep_incr 0 fec_id 0 fec_id_incr 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, BIT(17)},
    LAST_ORDINAL, 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_HOST_ADD_HOST_ADD_ROUTING_INFO_EEP_INCR, 
    "eep_incr", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  routing_info.eep:\n\r"
    "  Egress Encapsulation pointer. Points to link-layer next-hop/Tunnel\n\r"
    "  information set to SOC_PPC_EEP_NULL to be ignored.Range: 0 - 16K-1.Remarks:\n\r"
    "  for routed packets, EEP value can be obtained by two ways (only for host\n\r"
    "  entries exist in LEM Database):- directly, as a result of the host lookup in\n\r"
    "  the LEM.- As a part of the FEC entry information.The EEP is taken from the\n\r"
    "  FEC entry unless it value is SOC_PPC_EEP_NULL. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 host_add ip_address 0 vrf_ndx 0 eep 0 fec_id 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, BIT(17)},
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_HOST_ADD_HOST_ADD_ROUTING_INFO_FEC_ID_ID, 
    "fec_id", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  routing_info.fec_id:\n\r"
    "  FEC ID. Range: 0 - 16383.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 host_add ip_address 0 vrf_ndx 0 eep 0 fec_id 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, BIT(17)},
    LAST_ORDINAL, 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_HOST_ADD_HOST_ADD_ROUTING_INFO_FEC_ID_INCR, 
    "fec_id_incr", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    " FEC ID incrementation. Range: 0 - 16383.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 host_add ip_address 0 ip_address_incr 0 vrf_ndx 0 eep 0 fec_id 0 fec_id_incr 0 entries 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, BIT(17)},
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_HOST_GET_HOST_GET_ID, 
    "host_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Gets the routing information associated with the given route key on VRF.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 host_get ip_address 0 vrf_ndx 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, BIT(18)},
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_HOST_GET_HOST_GET_HOST_KEY_IP_ADDRESS_ID, 
    "ip_address", 
    (PARAM_VAL_RULES *)&soc_ppd_api_ip_address_vals[0], 
    (sizeof(soc_ppd_api_ip_address_vals) / sizeof(soc_ppd_api_ip_address_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  host_key.ip_address:\n\r"
    "  Ipv4 address.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 host_get ip_address 0 vrf_ndx 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, BIT(18)},
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_HOST_GET_HOST_GET_HOST_KEY_VRF_NDX_ID, 
    "vrf_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  host_key.vrf_ndx:\n\r"
    "  VRF ID. Range: 0 - 255.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 host_get ip_address 0 vrf_ndx 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, BIT(18)},
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_LEM_GET_BLOCK_LEM_GET_BLOCK_ID, 
    "lem_get_block", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Gets the lem table.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 lem_get_block rule_eep 0 rule_fec_id 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, BIT(27)}, 
    2, 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_LEM_GET_BLOCK_LEM_GET_BLOCK_ID_TYPE, 
    "type", 
    (PARAM_VAL_RULES *)&SOC_PPD_ARAD_LEM_TYPE_rule[0], 
    (sizeof(SOC_PPD_ARAD_LEM_TYPE_rule) / sizeof(SOC_PPD_ARAD_LEM_TYPE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Prints only lems with this eep.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 lem_get_block \n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, BIT(27)},  
	LAST_ORDINAL,
    (VAL_PROC_PTR)NULL 
  },
  { 
    SOC_PARAM_PPD_FRWRD_LEM_GET_BLOCK_LEM_GET_BLOCK_ID_RULE_KEY_ACCESSED_ONLY, 
    "accessed_only", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Prints only lems with this eep.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 lem_get_block \n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, BIT(27)},  
	LAST_ORDINAL,
    (VAL_PROC_PTR)NULL 
  },
  { 
    SOC_PARAM_PPD_FRWRD_LEM_GET_BLOCK_LEM_GET_BLOCK_ID_ACCESSED_CLEAR_ID, 
    "clear_accessed", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Prints only lems with this eep.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 lem_get_block \n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, BIT(27)},  
    LAST_ORDINAL,
    (VAL_PROC_PTR)NULL 
  },
  {
    SOC_PARAM_PPD_FRWRD_IPV4_HOST_GET_BLOCK_HOST_GET_BLOCK_ID, 
    "host_get_block", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Gets the host table.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 host_get_block rule_eep 0 rule_fec_id 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, BIT(19)},
    2, 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_HOST_GET_BLOCK_HOST_GET_BLOCK_ID_RULE_KEY_RULE_FEC_ID, 
    "rule_fec_id", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Prints only hosts with this fec_id.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 host_get_block\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, BIT(19)},
	LAST_ORDINAL,
    (VAL_PROC_PTR)NULL 
  },
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_HOST_GET_BLOCK_HOST_GET_BLOCK_ID_RULE_KEY_ACCESSED_ONLY, 
    "accessed_only", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Prints only hosts with this eep.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 host_get_block \n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, BIT(19)}, 
	LAST_ORDINAL,
    (VAL_PROC_PTR)NULL 
  },
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_HOST_GET_BLOCK_HOST_GET_BLOCK_ID_ACCESSED_CLEAR_ID, 
    "clear_accessed", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Prints only hosts with this eep.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 host_get_block \n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, BIT(19)}, 
    LAST_ORDINAL,
    (VAL_PROC_PTR)NULL 
  },
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_HOST_GET_BLOCK_HOST_GET_BLOCK_ID_RULE_KEY_RULE_EEP, 
    "rule_eep", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Prints only hosts with this eep.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 host_get_block \n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, BIT(19)}, 
	LAST_ORDINAL,
    (VAL_PROC_PTR)NULL 
  },
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_HOST_GET_BLOCK_HOST_GET_BLOCK_ID_RULE_KEY_ACCESSED_ONLY, 
    "accessed_only", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Prints only hosts with this eep.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 host_get_block \n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, BIT(19)}, 
	LAST_ORDINAL,
    (VAL_PROC_PTR)NULL 
  },
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_HOST_GET_BLOCK_HOST_GET_BLOCK_ID_ACCESSED_CLEAR_ID, 
    "clear_accessed", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Prints only hosts with this eep.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 host_get_block \n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, BIT(19)}, 
    LAST_ORDINAL,
    (VAL_PROC_PTR)NULL 
  },
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_HOST_GET_BLOCK_HOST_GET_BLOCK_ID_COUNT, 
    "enable_count_only", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Prints only the number of hosts.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 host_get_block \n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, BIT(19)}, 
	LAST_ORDINAL,
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_HOST_REMOVE_HOST_REMOVE_ID, 
    "host_remove", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Remove IPv4 route entry from the routing table of a virtual router (VRF).\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 host_remove ip_address 0 vrf_ndx 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, BIT(16)},
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_HOST_REMOVE_HOST_REMOVE_HOST_KEY_IP_ADDRESS_ID, 
    "ip_address", 
    (PARAM_VAL_RULES *)&soc_ppd_api_ip_address_vals[0], 
    (sizeof(soc_ppd_api_ip_address_vals) / sizeof(soc_ppd_api_ip_address_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  host_key.ip_address:\n\r"
    "  Ipv4 address.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 host_remove ip_address 0 vrf_ndx 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, BIT(16)},
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_HOST_REMOVE_HOST_REMOVE_HOST_KEY_VRF_NDX_ID, 
    "vrf_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  host_key.vrf_ndx:\n\r"
    "  VRF ID. Range: 0 - 255.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 host_remove ip_address 0 vrf_ndx 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, BIT(16)},
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_MC_ROUTE_ADD_MC_ROUTE_ADD_ID, 
    "mc_route_add", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Add IPv4 MC route entry to the routing table.\n\r"
    "  Binds between Ipv4 Unicast route key (IPv4-address/prefix) and a FEC entry\n\r"
    "  identified by sys_fec_id for a given virtual router. As a result of this\n\r"
    "  operation, Unicast Ipv4 packets designated to IP address matching the given\n\r"
    "  key (as long there is no more-specific route key) will be routed according to\n\r"
    "  the information in the FEC entry identified by sys_fec_id.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 mc_route_add inrif_valid 0 inrif 0 prefix_len 0 ip_address\n\r"
    "  0 group 0 fec_id 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, BIT(22)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_MC_ROUTE_ADD_MC_ROUTE_ADD_ROUTE_KEY_INRIF_VALID_ID, 
    "inrif_valid", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  route_key.inrif_valid:\n\r"
    "  If set to FALSE then inrif is masked.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 mc_route_add inrif_valid 0 inrif 0 prefix_len 0 ip_address\n\r"
    "  0 group 0 fec_id 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, BIT(22)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_MC_ROUTE_ADD_MC_ROUTE_ADD_ROUTE_KEY_INRIF_ID, 
    "inrif", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  route_key.inrif:\n\r"
    "  The Incoming router interface. May be masked using inrif_valid.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 mc_route_add inrif_valid 0 inrif 0 prefix_len 0 ip_address\n\r"
    "  0 group 0 fec_id 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, BIT(22)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_MC_ROUTE_ADD_MC_ROUTE_ADD_ROUTE_KEY_SOURCE_PREFIX_LEN_ID, 
    "src_prefix_len", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  route_key.source.prefix_len:\n\r"
    "  Number of bits to consider in the IP address starting from the msb. Range: 0\n\r"
    "  - 32.Example for key ip_address 192.168.1.0 and prefix_len 24 would match any\n\r"
    "  IP Address of the form 192.168.1.x\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 mc_route_add inrif_valid 0 inrif 0 prefix_len 0 ip_address\n\r"
    "  0 group 0 fec_id 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, BIT(22)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_MC_ROUTE_ADD_MC_ROUTE_ADD_ROUTE_KEY_SOURCE_IP_ADDRESS_ID, 
    "src_ip_address", 
    (PARAM_VAL_RULES *)&soc_ppd_api_ip_address_vals[0], 
    (sizeof(soc_ppd_api_ip_address_vals) / sizeof(soc_ppd_api_ip_address_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  route_key.source.ip_address:\n\r"
    "  Ipv4 destination address.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 mc_route_add inrif_valid 0 inrif 0 prefix_len 0 ip_address\n\r"
    "  0 group 0 fec_id 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, BIT(22)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_MC_ROUTE_ADD_MC_ROUTE_ADD_ROUTE_KEY_GROUP_ID, 
    "group_ip", 
    (PARAM_VAL_RULES *)&soc_ppd_api_ip_address_vals[0], 
    (sizeof(soc_ppd_api_ip_address_vals) / sizeof(soc_ppd_api_ip_address_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  route_key.group:\n\r"
    "  The multicast IP address of the destination group. Class D. Range: 224.0.0.0\n\r"
    "  - 239.255.255.255.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 mc_route_add inrif_valid 0 inrif 0 prefix_len 0 ip_address\n\r"
    "  0 group 0 fec_id 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, BIT(22)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_MC_ROUTE_ADD_MC_ROUTE_ADD_FEC_ID_ID, 
    "dest_val", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  route_info.dest_id.dest_val:\n\r"
    "  The destination value, according to the type (Single, LAG, Multicast...)For the\n\r"
    "  LAG type, the value is the LAG ID. Range: 0 - 255.For the DROP type, value is\n\r"
    "  not relevant.For the ROUTER type, value is not relevant.For the MULTICAST\n\r"
    "  type, range: 0 - 16383.For the Single_Port type, range: 0 - 4095.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 mc_route_add inrif_valid 0 inrif 0 prefix_len 0 ip_address\n\r"
    "  0 group 0 fec_id 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, BIT(22)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
 { 
    SOC_PARAM_PPD_FRWRD_IPV4_MC_ROUTE_ADD_MC_ROUTE_ADD_ROUTE_INFO_DEST_ID_DEST_TYPE_ID, 
    "dest_type", 
    (PARAM_VAL_RULES *)&SOC_PPD_SAND_PP_DEST_TYPE_rule[0], 
    (sizeof(SOC_PPD_SAND_PP_DEST_TYPE_rule) / sizeof(SOC_PPD_SAND_PP_DEST_TYPE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  route_info.dest_id.dest_type:\n\r"
    "  The type of the following destination ID.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 mc_route_add inrif_valid 0 inrif 0 prefix_len 0 ip_address\n\r"
    "  0 group 0 dest_val 0 dest_type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, BIT(22)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },   { 
    SOC_PARAM_PPD_FRWRD_IPV4_MC_ROUTE_GET_MC_ROUTE_GET_ID, 
    "mc_route_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Gets the routing information (system-fec-id) associated with the given route\n\r"
    "  key.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 mc_route_get inrif_valid 0 inrif 0 prefix_len 0 ip_address\n\r"
    "  0 group 0 exact_match 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, BIT(23)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_MC_ROUTE_GET_MC_ROUTE_GET_ROUTE_KEY_INRIF_VALID_ID, 
    "inrif_valid", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  route_key.inrif_valid:\n\r"
    "  If set to FALSE then inrif is masked.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 mc_route_get inrif_valid 0 inrif 0 prefix_len 0 ip_address\n\r"
    "  0 group 0 exact_match 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, BIT(23)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_MC_ROUTE_GET_MC_ROUTE_GET_ROUTE_KEY_INRIF_ID, 
    "inrif", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  route_key.inrif:\n\r"
    "  The Incoming router interface. May be masked using inrif_valid.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 mc_route_get inrif_valid 0 inrif 0 prefix_len 0 ip_address\n\r"
    "  0 group 0 exact_match 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, BIT(23)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_MC_ROUTE_GET_MC_ROUTE_GET_ROUTE_KEY_SOURCE_PREFIX_LEN_ID, 
    "src_prefix_len", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  route_key.source.prefix_len:\n\r"
    "  Number of bits to consider in the IP address starting from the msb. Range: 0\n\r"
    "  - 32.Example for key ip_address 192.168.1.0 and prefix_len 24 would match any\n\r"
    "  IP Address of the form 192.168.1.x\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 mc_route_get inrif_valid 0 inrif 0 prefix_len 0 ip_address\n\r"
    "  0 group 0 exact_match 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, BIT(23)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_MC_ROUTE_GET_MC_ROUTE_GET_ROUTE_KEY_SOURCE_IP_ADDRESS_ID, 
    "src_ip_address", 
    (PARAM_VAL_RULES *)&soc_ppd_api_ip_address_vals[0], 
    (sizeof(soc_ppd_api_ip_address_vals) / sizeof(soc_ppd_api_ip_address_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  route_key.source.ip_address:\n\r"
    "  Ipv4 destination address.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 mc_route_get inrif_valid 0 inrif 0 prefix_len 0 ip_address\n\r"
    "  0 group 0 exact_match 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, BIT(23)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_MC_ROUTE_GET_MC_ROUTE_GET_ROUTE_KEY_GROUP_ID, 
    "group_ip", 
    (PARAM_VAL_RULES *)&soc_ppd_api_ip_address_vals[0], 
    (sizeof(soc_ppd_api_ip_address_vals) / sizeof(soc_ppd_api_ip_address_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  route_key.group:\n\r"
    "  The multicast IP address of the destination group. Class D. Range: 224.0.0.0\n\r"
    "  - 239.255.255.255.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 mc_route_get inrif_valid 0 inrif 0 prefix_len 0 ip_address\n\r"
    "  0 group 0 exact_match 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, BIT(23)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_MC_ROUTE_GET_MC_ROUTE_GET_EXACT_MATCH_ID, 
    "exact_match", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  exact_match:\n\r"
    "  If TRUE returns exact match only; if FALSE returns longest prefix match.   \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 mc_route_get inrif_valid 0 inrif 0 prefix_len 0 ip_address\n\r"
    "  0 group 0 exact_match 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, BIT(23)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_MC_ROUTE_GET_MC_ROUTE_GET_CLEAR_ACCESSED, 
    "clear_hit", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  exact_match:\n\r"
    "  If TRUE returns exact match only; if FALSE returns longest prefix match.   \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 mc_route_get inrif_valid 0 inrif 0 prefix_len 0 ip_address\n\r"
    "  0 group 0 exact_match 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, BIT(23)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_MC_ROUTE_GET_BLOCK_MC_ROUTE_GET_BLOCK_ID, 
    "mc_route_get_block", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Gets the Ipv4 MC routing table.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 mc_route_get_block entries_to_act 0 entries_to_scan 0\n\r"
    "  arr_index 0 arr 0 type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, BIT(24)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_MC_ROUTE_GET_BLOCK_MC_ROUTE_GET_BLOCK_BLOCK_RANGE_KEY_ENTRIES_TO_ACT_ID, 
    "entries_to_act", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  block_range_key.entries_to_act:\n\r"
    "  Number of entries to read/modify.Stop after retrieving this number of entries.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 mc_route_get_block entries_to_act 0 entries_to_scan 0\n\r"
    "  arr_index 0 arr 0 type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, BIT(24)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_MC_ROUTE_GET_BLOCK_MC_ROUTE_GET_BLOCK_BLOCK_RANGE_KEY_ENTRIES_TO_SCAN_ID, 
    "entries_to_scan", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  block_range_key.entries_to_scan:\n\r"
    "  The number of entries to scan.Stop after scanning this number of entries.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 mc_route_get_block entries_to_act 0 entries_to_scan 0\n\r"
    "  arr_index 0 arr 0 type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, BIT(24)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_MC_ROUTE_GET_BLOCK_MC_ROUTE_GET_BLOCK_BLOCK_RANGE_KEY_START_PAYLOAD_ARR_INDEX_ID, 
    "arr_index", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  arr_index:\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 mc_route_get_block entries_to_act 0 entries_to_scan 0\n\r"
    "  arr_index 0 arr 0 type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, BIT(24)}, 
    LAST_ORDINAL, 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_MC_ROUTE_GET_BLOCK_MC_ROUTE_GET_BLOCK_BLOCK_RANGE_KEY_START_PAYLOAD_ARR_ID, 
    "arr", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  block_range_key.start.payload.arr[ prm_arr_index]:\n\r"
    "  Start of the range.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 mc_route_get_block entries_to_act 0 entries_to_scan 0\n\r"
    "  arr_index 0 arr 0 type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, BIT(24)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_MC_ROUTE_GET_BLOCK_MC_ROUTE_GET_BLOCK_BLOCK_RANGE_KEY_START_TYPE_ID, 
    "type", 
    (PARAM_VAL_RULES *)&SOC_PPC_IP_ROUTING_TABLE_ITER_TYPE_rule[0], 
    (sizeof(SOC_PPC_IP_ROUTING_TABLE_ITER_TYPE_rule) / sizeof(SOC_PPC_IP_ROUTING_TABLE_ITER_TYPE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  block_range_key.start.type:\n\r"
    "  The type of the iterator. (fast, ordered ...)\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 mc_route_get_block entries_to_act 0 entries_to_scan 0\n\r"
    "  arr_index 0 arr 0 type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, BIT(24)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_MC_ROUTE_REMOVE_MC_ROUTE_REMOVE_ID, 
    "mc_route_remove", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Remove IPv4 route entry from the routing table.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 mc_route_remove inrif_valid 0 inrif 0 prefix_len 0\n\r"
    "  ip_address 0 group 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, BIT(25)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_MC_ROUTE_REMOVE_MC_ROUTE_REMOVE_ROUTE_KEY_INRIF_VALID_ID, 
    "inrif_valid", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  route_key.inrif_valid:\n\r"
    "  If set to FALSE then inrif is masked.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 mc_route_remove inrif_valid 0 inrif 0 prefix_len 0\n\r"
    "  ip_address 0 group 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, BIT(25)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_MC_ROUTE_REMOVE_MC_ROUTE_REMOVE_ROUTE_KEY_INRIF_ID, 
    "inrif", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  route_key.inrif:\n\r"
    "  The Incoming router interface. May be masked using inrif_valid.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 mc_route_remove inrif_valid 0 inrif 0 prefix_len 0\n\r"
    "  ip_address 0 group 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, BIT(25)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_MC_ROUTE_REMOVE_MC_ROUTE_REMOVE_ROUTE_KEY_SOURCE_PREFIX_LEN_ID, 
    "prefix_len", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  route_key.source.prefix_len:\n\r"
    "  Number of bits to consider in the IP address starting from the msb. Range: 0\n\r"
    "  - 32.Example for key ip_address 192.168.1.0 and prefix_len 24 would match any\n\r"
    "  IP Address of the form 192.168.1.x\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 mc_route_remove inrif_valid 0 inrif 0 prefix_len 0\n\r"
    "  ip_address 0 group 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, BIT(25)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_MC_ROUTE_REMOVE_MC_ROUTE_REMOVE_ROUTE_KEY_SOURCE_IP_ADDRESS_ID, 
    "ip_address", 
    (PARAM_VAL_RULES *)&soc_ppd_api_ip_address_vals[0], 
    (sizeof(soc_ppd_api_ip_address_vals) / sizeof(soc_ppd_api_ip_address_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  route_key.source.ip_address:\n\r"
    "  Ipv4 destination address.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 mc_route_remove inrif_valid 0 inrif 0 prefix_len 0\n\r"
    "  ip_address 0 group 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, BIT(25)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_MC_ROUTE_REMOVE_MC_ROUTE_REMOVE_ROUTE_KEY_GROUP_ID, 
    "group", 
    (PARAM_VAL_RULES *)&soc_ppd_api_ip_address_vals[0], 
    (sizeof(soc_ppd_api_ip_address_vals) / sizeof(soc_ppd_api_ip_address_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  route_key.group:\n\r"
    "  The multicast IP address of the destination group. Class D. Range: 224.0.0.0\n\r"
    "  - 239.255.255.255.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 mc_route_remove inrif_valid 0 inrif 0 prefix_len 0\n\r"
    "  ip_address 0 group 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, BIT(25)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_MC_ROUTING_TABLE_CLEAR_MC_ROUTING_TABLE_CLEAR_ID, 
    "mc_routing_table_clear", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Clear the IPv4 MC routing table.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 mc_routing_table_clear\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, BIT(26)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_VRF_INFO_SET_VRF_INFO_SET_ID, 
    "vrf_info_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Setting global information of the VRF including (defaults forwarding).\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 vrf_info_set vrf_ndx 0 use_dflt_non_vrf_routing 0\n\r"
    "  frwrd_action_id 0 snoop_action_id 0 route_val 0 type 0 frwrd_action_id 0\n\r"
    "  snoop_action_id 0 route_val 0 type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_VRF_INFO_SET_VRF_INFO_SET_VRF_NDX_ID, 
    "vrf_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  vrf_ndx:\n\r"
    "  Virtual router id. Range: 1 - 255.   \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 vrf_info_set vrf_ndx 0 use_dflt_non_vrf_routing 0\n\r"
    "  frwrd_action_id 0 snoop_action_id 0 route_val 0 type 0 frwrd_action_id 0\n\r"
    "  snoop_action_id 0 route_val 0 type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0}, 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_VRF_INFO_SET_VRF_INFO_SET_VRF_INFO_USE_DFLT_NON_VRF_ROUTING_ID, 
    "use_dflt_non_vrf_routing", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  vrf_info.use_dflt_non_vrf_routing:\n\r"
    "  When TRUE, if lookup in this VRF routing table fails, a lookup will performed\n\r"
    "  in default routing table (VRF zero). Note: A system can either do L3VPN\n\r"
    "  default forwarding or RPF, not both.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 vrf_info_set vrf_ndx 0 use_dflt_non_vrf_routing 0\n\r"
    "  frwrd_action_id 0 snoop_action_id 0 route_val 0 type 0 frwrd_action_id 0\n\r"
    "  snoop_action_id 0 route_val 0 type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_VRF_INFO_SET_VRF_INFO_SET_VRF_INFO_ROUTER_INFO_MC_DEFAULT_ACTION_VALUE_ACTION_PROFILE_TRAP_CODE_LSB_ID, 
    "mc_trap_code", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals/*SOC_PPC_TRAP_CODE_rule*/[0], 
    (sizeof(soc_ppd_api_free_vals/*SOC_PPC_TRAP_CODE_rule*/) / sizeof(soc_ppd_api_free_vals/*SOC_PPC_TRAP_CODE_rule*/[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
#ifdef COMPILER_STRING_CONST_LIMIT
    "  Full documentation cannot be displayed with -pendantic compiler\n\r",
#else
    "  action_profile.trap_code:\n\r"
    "  Sets the LSB of the CPU code. For trapped packet the CPU \n\r"
    "  code are associated into the packet headers. The CPU \n\r"
    "  code also used as index for the forwarding/snooping \n\r"
    "  actions. see to soc_ppd_trap_frwrd_profile_info_set(), \n\r"
    "  soc_ppd_trap_snoop_profile_info_set(). Range Petra-B: 0-255, \n\r"
    "  T20E:0-63.To know the legal range in specific use of \n\r"
    "  this field, see the documentation in that specific \n\r"
    "  use.In Petra-B this field affects the CPU code set on \n\r"
    "  the packets header, IN T20E it's only select the \n\r"
    "  forwarding and snooping profiles.                     \n\r"  
    "",
#endif /* COMPILER_STRING_CONST_LIMIT */
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 vrf_info_set vrf_ndx 0 use_dflt_non_vrf_routing 0\n\r"
    "  frwrd_action_id 0 snoop_action_id 0 route_val 0 type 0 frwrd_action_id 0\n\r"
    "  snoop_action_id 0 route_val 0 type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_VRF_INFO_SET_VRF_INFO_SET_VRF_INFO_ROUTER_INFO_MC_DEFAULT_ACTION_VALUE_ACTION_PROFILE_FRWRD_STRENGTH_ID, 
    "mc_frwrd_action_strength", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  action_profile.frwrd_action_strength:\n\r"
    "  Value that identifies the strength of the assignment of \n\r"
    "  Forward action to the packet. Through the packet \n\r"
    "  processing pipe, many forwarding decisions may be taken; \n\r"
    "  yet one decision may overwrite a former decision only if \n\r"
    "  it stronger, i.e., its strength is higher than the last \n\r"
    "  decision that was taken. Range 0-7.Relevant only for \n\r"
    "  Petra-B.                \n\r"                                
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 vrf_info_set vrf_ndx 0 use_dflt_non_vrf_routing 0\n\r"
    "  frwrd_action_id 0 snoop_action_id 0 route_val 0 type 0 frwrd_action_id 0\n\r"
    "  snoop_action_id 0 route_val 0 type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_VRF_INFO_SET_VRF_INFO_SET_VRF_INFO_ROUTER_INFO_MC_DEFAULT_ACTION_VALUE_ACTION_PROFILE_SNOOP_STRENGTH_ID, 
    "mc_frwrd_snoop_strength", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  action_profile.frwrd_snoop_strength:\n\r"
    "  Value that identifies the strength of the assignment of \n\r"
    "  Snoop action to the packet. Through the packet \n\r"
    "  processing pipe, many snooping decisions may be taken; \n\r"
    "  yet one decision may overwrite a former decision only if \n\r"
    "  it stronger, i.e., its strength is higher than the last \n\r"
    "  decision that was taken. Range 0-7.Relevant only for \n\r"
    "  Petra-B.              \n\r"                                  
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 vrf_info_set vrf_ndx 0 use_dflt_non_vrf_routing 0\n\r"
    "  frwrd_action_id 0 snoop_action_id 0 route_val 0 type 0 frwrd_action_id 0\n\r"
    "  snoop_action_id 0 route_val 0 type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
 
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_VRF_INFO_SET_VRF_INFO_SET_VRF_INFO_ROUTER_INFO_MC_DEFAULT_ACTION_VALUE_ROUTE_VAL_ID, 
    "mc_fec", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  vrf_info.router_info.mc_default_action.value.route_val:\n\r"
    "  Forward according to FEC entry in the FEC table. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 vrf_info_set vrf_ndx 0 use_dflt_non_vrf_routing 0\n\r"
    "  frwrd_action_id 0 snoop_action_id 0 route_val 0 type 0 frwrd_action_id 0\n\r"
    "  snoop_action_id 0 route_val 0 type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_VRF_INFO_SET_VRF_INFO_SET_VRF_INFO_ROUTER_INFO_MC_DEFAULT_ACTION_TYPE_ID, 
    "mc_type", 
    (PARAM_VAL_RULES *)&SOC_PPC_FRWRD_IPV4_ROUTER_DEFAULT_ACTION_TYPE_rule[0], 
    (sizeof(SOC_PPC_FRWRD_IPV4_ROUTER_DEFAULT_ACTION_TYPE_rule) / sizeof(SOC_PPC_FRWRD_IPV4_ROUTER_DEFAULT_ACTION_TYPE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  vrf_info.router_info.mc_default_action.type:\n\r"
    "  Type of the default forwarding action may be FEC or Action profile.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 vrf_info_set vrf_ndx 0 use_dflt_non_vrf_routing 0\n\r"
    "  frwrd_action_id 0 snoop_action_id 0 route_val 0 type 0 frwrd_action_id 0\n\r"
    "  snoop_action_id 0 route_val 0 type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_VRF_INFO_SET_VRF_INFO_SET_VRF_INFO_ROUTER_INFO_UC_DEFAULT_ACTION_VALUE_ACTION_PROFILE_TRAP_CODE_LSB_ID, 
    "uc_trap_code", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals/*SOC_PPC_TRAP_CODE_rule*/[0], 
    (sizeof(soc_ppd_api_free_vals/*SOC_PPC_TRAP_CODE_rule*/) / sizeof(soc_ppd_api_free_vals/*SOC_PPC_TRAP_CODE_rule*/[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
#ifdef COMPILER_STRING_CONST_LIMIT
    "  Full documentation cannot be displayed with -pendantic compiler\n\r",
#else
    "  action_profile.trap_code:\n\r"
    "  Sets the LSB of the CPU code. For trapped packet the CPU \n\r"
    "  code are associated into the packet headers. The CPU \n\r"
    "  code also used as index for the forwarding/snooping \n\r"
    "  actions. see to soc_ppd_trap_frwrd_profile_info_set(), \n\r"
    "  soc_ppd_trap_snoop_profile_info_set(). Range Petra-B: 0-255, \n\r"
    "  T20E:0-63.To know the legal range in specific use of \n\r"
    "  this field, see the documentation in that specific \n\r"
    "  use.In Petra-B this field affects the CPU code set on \n\r"
    "  the packets header, IN T20E it's only select the \n\r"
    "  forwarding and snooping profiles.                     \n\r"  
    "",
#endif /* COMPILER_STRING_CONST_LIMIT */
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 vrf_info_set vrf_ndx 0 use_dflt_non_vrf_routing 0\n\r"
    "  frwrd_action_id 0 snoop_action_id 0 route_val 0 type 0 frwrd_action_id 0\n\r"
    "  snoop_action_id 0 route_val 0 type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_VRF_INFO_SET_VRF_INFO_SET_VRF_INFO_ROUTER_INFO_UC_DEFAULT_ACTION_VALUE_ACTION_PROFILE_FRWRD_STRENGTH_ID, 
    "uc_frwrd_action_strength", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  action_profile.frwrd_action_strength:\n\r"
    "  Value that identifies the strength of the assignment of \n\r"
    "  Forward action to the packet. Through the packet \n\r"
    "  processing pipe, many forwarding decisions may be taken; \n\r"
    "  yet one decision may overwrite a former decision only if \n\r"
    "  it stronger, i.e., its strength is higher than the last \n\r"
    "  decision that was taken. Range 0-7.Relevant only for \n\r"
    "  Petra-B.                \n\r"                                
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 vrf_info_set vrf_ndx 0 use_dflt_non_vrf_routing 0\n\r"
    "  frwrd_action_id 0 snoop_action_id 0 route_val 0 type 0 frwrd_action_id 0\n\r"
    "  snoop_action_id 0 route_val 0 type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_VRF_INFO_SET_VRF_INFO_SET_VRF_INFO_ROUTER_INFO_UC_DEFAULT_ACTION_VALUE_ACTION_PROFILE_SNOOP_STRENGTH_ID, 
    "uc_frwrd_snoop_strength", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  action_profile.frwrd_snoop_strength:\n\r"
    "  Value that identifies the strength of the assignment of \n\r"
    "  Snoop action to the packet. Through the packet \n\r"
    "  processing pipe, many snooping decisions may be taken; \n\r"
    "  yet one decision may overwrite a former decision only if \n\r"
    "  it stronger, i.e., its strength is higher than the last \n\r"
    "  decision that was taken. Range 0-7.Relevant only for \n\r"
    "  Petra-B.              \n\r"                                  
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 vrf_info_set vrf_ndx 0 use_dflt_non_vrf_routing 0\n\r"
    "  frwrd_action_id 0 snoop_action_id 0 route_val 0 type 0 frwrd_action_id 0\n\r"
    "  snoop_action_id 0 route_val 0 type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_VRF_INFO_SET_VRF_INFO_SET_VRF_INFO_ROUTER_INFO_UC_DEFAULT_ACTION_VALUE_ROUTE_VAL_ID, 
    "uc_fec", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  vrf_info.router_info.uc_default_action.value.route_val:\n\r"
    "  Forward according to FEC entry in the FEC table. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 vrf_info_set vrf_ndx 0 use_dflt_non_vrf_routing 0\n\r"
    "  frwrd_action_id 0 snoop_action_id 0 route_val 0 type 0 frwrd_action_id 0\n\r"
    "  snoop_action_id 0 route_val 0 type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_VRF_INFO_SET_VRF_INFO_SET_VRF_INFO_ROUTER_INFO_UC_DEFAULT_ACTION_TYPE_ID, 
    "uc_type", 
    (PARAM_VAL_RULES *)&SOC_PPC_FRWRD_IPV4_ROUTER_DEFAULT_ACTION_TYPE_rule[0], 
    (sizeof(SOC_PPC_FRWRD_IPV4_ROUTER_DEFAULT_ACTION_TYPE_rule) / sizeof(SOC_PPC_FRWRD_IPV4_ROUTER_DEFAULT_ACTION_TYPE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  vrf_info.router_info.uc_default_action.type:\n\r"
    "  Type of the default forwarding action may be FEC or Action profile.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 vrf_info_set vrf_ndx 0 use_dflt_non_vrf_routing 0\n\r"
    "  frwrd_action_id 0 snoop_action_id 0 route_val 0 type 0 frwrd_action_id 0\n\r"
    "  snoop_action_id 0 route_val 0 type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_VRF_INFO_GET_VRF_INFO_GET_ID, 
    "vrf_info_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Setting global information of the VRF including (defaults forwarding).\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 vrf_info_get vrf_ndx 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, BIT(28)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_VRF_INFO_GET_VRF_INFO_GET_VRF_NDX_ID, 
    "vrf_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  vrf_ndx:\n\r"
    "  Virtual router id. Range: 1 - 255.   \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 vrf_info_get vrf_ndx 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, BIT(28)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_VRF_ROUTE_ADD_VRF_ROUTE_ADD_ID, 
    "vrf_route_add", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Add IPv4 route entry to the virtual routing table (VRF).\n\r"
    "  Binds between Ipv4 route key (UC/MC IPv4-address\\prefix) and a FEC entry\n\r"
    "  identified by fec_id for a given virtual router. As a result of this\n\r"
    "  operation, Unicast Ipv4 packets designated to IP address matching the given\n\r"
    "  key (as long there is no more-specific route key) will be routed according to\n\r"
    "  the information in the FEC entry identified by sys_fec_id.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 vrf_route_add vrf_ndx 0 prefix_len 0 ip_address 0 fec_id 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, BIT(29)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_VRF_ROUTE_ADD_VRF_ROUTE_ADD_VRF_NDX_ID, 
    "vrf_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  vrf_ndx:\n\r"
    "  Virtual router id. Range: 1 - 255.   \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 vrf_route_add vrf_ndx 0 prefix_len 0 ip_address 0 fec_id 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, BIT(29)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_VRF_ROUTE_ADD_VRF_ROUTE_ADD_ROUTE_KEY_SUBNET_PREFIX_LEN_ID, 
    "prefix_len", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  route_key.subnet.prefix_len:\n\r"
    "  Number of bits to consider in the IP address starting from the msb. Range: 0\n\r"
    "  - 32.Example for key ip_address 192.168.1.0 and prefix_len 24 would match any\n\r"
    "  IP Address of the form 192.168.1.x\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 vrf_route_add vrf_ndx 0 prefix_len 0 ip_address 0 fec_id 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, BIT(29)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_VRF_ROUTE_ADD_VRF_ROUTE_ADD_ROUTE_KEY_SUBNET_IP_ADDRESS_ID, 
    "ip_address", 
    (PARAM_VAL_RULES *)&soc_ppd_api_ip_address_vals[0], 
    (sizeof(soc_ppd_api_ip_address_vals) / sizeof(soc_ppd_api_ip_address_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  route_key.subnet.ip_address:\n\r"
    "  Ipv4 destination address.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 vrf_route_add vrf_ndx 0 prefix_len 0 ip_address 0 fec_id 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, BIT(29)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_VRF_ROUTE_ADD_VRF_ROUTE_ADD_ROUTE_KEY_SUBNET_IP_ADDRESS_INCR, 
    "ip_address_incr", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  IP Address incrementation.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 vrf_route_add vrf_ndx 0 prefix_len 0 ip_address 0 ip_address_incr 0 fec_id 0 fec_id_incr 0 entires 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, BIT(29)}, 
    LAST_ORDINAL, 
    (VAL_PROC_PTR)NULL 
  },  
  { 
	SOC_PARAM_PPD_FRWRD_IPV4_VRF_ROUTE_ADD_VRF_ROUTE_ADD_NUMBER_OF_ENTRIES, 
    "entries", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Number of entries to enter.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 vrf_route_add vrf_ndx 0 prefix_len 0 ip_address 0 ip_address_incr 0 fec_id 0 fec_id_incr 0 entires 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, BIT(29)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_VRF_ROUTE_ADD_VRF_ROUTE_ADD_FEC_ID_ID, 
    "fec_id", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  fec_id:\n\r"
    "  FEC ID.   \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 vrf_route_add vrf_ndx 0 prefix_len 0 ip_address 0 fec_id 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, BIT(29)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_VRF_ROUTE_ADD_VRF_ROUTE_ADD_FEC_ID_INCR, 
    "fec_id_incr", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  FEC ID incrementation.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    " soc_ppd_api frwrd_ipv4 vrf_route_add vrf_ndx 0 prefix_len 0 ip_address 0 ip_address_incr 0 fec_id 0 fec_id_incr 0 entires 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, BIT(29)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_VRF_ROUTE_GET_VRF_ROUTE_GET_ID, 
    "vrf_route_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Gets the routing information (system-fec-id) associated with the given route\n\r"
    "  key on VRF.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 vrf_route_get vrf_ndx 0 inrif_valid 0 inrif 0 prefix_len 0\n\r"
    "  ip_address 0 group 0 exact_match 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, BIT(30)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_VRF_ROUTE_GET_VRF_ROUTE_GET_VRF_NDX_ID, 
    "vrf_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  vrf_ndx:\n\r"
    "  Virtual router id. Range: 1 - 255.   \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 vrf_route_get vrf_ndx 0 inrif_valid 0 inrif 0 prefix_len 0\n\r"
    "  ip_address 0 group 0 exact_match 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, BIT(30)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_VRF_ROUTE_GET_VRF_ROUTE_GET_ROUTE_KEY_SUBNET_PREFIX_LEN_ID, 
    "prefix_len", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  route_key.source.prefix_len:\n\r"
    "  Number of bits to consider in the IP address starting from the msb. Range: 0\n\r"
    "  - 32.Example for key ip_address 192.168.1.0 and prefix_len 24 would match any\n\r"
    "  IP Address of the form 192.168.1.x\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 vrf_route_get vrf_ndx 0 inrif_valid 0 inrif 0 prefix_len 0\n\r"
    "  ip_address 0 group 0 exact_match 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, BIT(30)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_VRF_ROUTE_GET_VRF_ROUTE_GET_ROUTE_KEY_SUBNET_IP_ADDRESS_ID, 
    "ip_address", 
    (PARAM_VAL_RULES *)&soc_ppd_api_ip_address_vals[0], 
    (sizeof(soc_ppd_api_ip_address_vals) / sizeof(soc_ppd_api_ip_address_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  route_key.source.ip_address:\n\r"
    "  Ipv4 destination address.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 vrf_route_get vrf_ndx 0 inrif_valid 0 inrif 0 prefix_len 0\n\r"
    "  ip_address 0 group 0 exact_match 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, BIT(30)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_VRF_ROUTE_GET_VRF_ROUTE_GET_EXACT_MATCH_ID, 
    "exact_match", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  exact_match:\n\r"
    "  If TRUE returns exact match only; if FALSE returns longest prefix match.   \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 vrf_route_get vrf_ndx 0 inrif_valid 0 inrif 0 prefix_len 0\n\r"
    "  ip_address 0 group 0 exact_match 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, BIT(30)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_VRF_ROUTE_GET_BLOCK_VRF_ROUTE_GET_BLOCK_ID, 
    "vrf_route_get_block", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Gets the routing table of a virtual router (VRF).\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 vrf_route_get_block vrf_ndx 0 entries_to_act 0\n\r"
    "  entries_to_scan 0 arr_index 0 arr 0 type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, BIT(31)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_VRF_ROUTE_GET_BLOCK_VRF_ROUTE_GET_BLOCK_VRF_NDX_ID, 
    "vrf_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  vrf_ndx:\n\r"
    "  Virtual router id. Range: 1 - 255.   \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 vrf_route_get_block vrf_ndx 0 entries_to_act 0\n\r"
    "  entries_to_scan 0 arr_index 0 arr 0 type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, BIT(31)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_VRF_ROUTE_GET_BLOCK_VRF_ROUTE_GET_BLOCK_BLOCK_RANGE_KEY_ENTRIES_TO_ACT_ID, 
    "entries_to_act", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  block_range_key.entries_to_act:\n\r"
    "  Number of entries to read/modify.Stop after retrieving this number of entries.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 vrf_route_get_block vrf_ndx 0 entries_to_act 0\n\r"
    "  entries_to_scan 0 arr_index 0 arr 0 type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, BIT(31)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_VRF_ROUTE_GET_BLOCK_VRF_ROUTE_GET_BLOCK_BLOCK_RANGE_KEY_ENTRIES_TO_SCAN_ID, 
    "entries_to_scan", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  block_range_key.entries_to_scan:\n\r"
    "  The number of entries to scan.Stop after scanning this number of entries.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 vrf_route_get_block vrf_ndx 0 entries_to_act 0\n\r"
    "  entries_to_scan 0 arr_index 0 arr 0 type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, BIT(31)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_VRF_ROUTE_GET_BLOCK_VRF_ROUTE_GET_BLOCK_BLOCK_RANGE_KEY_START_PAYLOAD_ARR_INDEX_ID, 
    "arr_index", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  arr_index:\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 vrf_route_get_block vrf_ndx 0 entries_to_act 0\n\r"
    "  entries_to_scan 0 arr_index 0 arr 0 type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, BIT(31)}, 
    LAST_ORDINAL, 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_VRF_ROUTE_GET_BLOCK_VRF_ROUTE_GET_BLOCK_BLOCK_RANGE_KEY_START_PAYLOAD_ARR_ID, 
    "arr", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  block_range_key.start.payload.arr[ prm_arr_index]:\n\r"
    "  Start of the range.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 vrf_route_get_block vrf_ndx 0 entries_to_act 0\n\r"
    "  entries_to_scan 0 arr_index 0 arr 0 type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, BIT(31)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_VRF_ROUTE_GET_BLOCK_VRF_ROUTE_GET_BLOCK_BLOCK_RANGE_KEY_START_TYPE_ID, 
    "type", 
    (PARAM_VAL_RULES *)&SOC_PPC_IP_ROUTING_TABLE_ITER_TYPE_rule[0], 
    (sizeof(SOC_PPC_IP_ROUTING_TABLE_ITER_TYPE_rule) / sizeof(SOC_PPC_IP_ROUTING_TABLE_ITER_TYPE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  block_range_key.start.type:\n\r"
    "  The type of the iterator. (fast, ordered ...)\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 vrf_route_get_block vrf_ndx 0 entries_to_act 0\n\r"
    "  entries_to_scan 0 arr_index 0 arr 0 type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, BIT(31)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_VRF_ROUTE_GET_BLOCK_VRF_ROUTE_GET_BLOCK_RULE_KEY_RULE_FEC_ID, 
    "rule_fec_id", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  print only vrf routes with this fec_id 0\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
	"  soc_ppd_api frwrd_ipv4 vrf_route_get_block vrf_ndx 0 entries_to_act 0\n\r"
	"  entries_to_scan 0 arr_index 0 arr 0 type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, BIT(31)}, 
    LAST_ORDINAL, 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_VRF_ROUTE_GET_BLOCK_VRF_ROUTE_GET_BLOCK_COUNT, 
    "enable_count_only", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  print only number of vrf routes 0\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
	"  soc_ppd_api frwrd_ipv4 vrf_route_get_block vrf_ndx 0 entries_to_act 0\n\r"
	"  entries_to_scan 0 arr_index 0 arr 0 type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, BIT(31)}, 
    LAST_ORDINAL, 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_VRF_ROUTE_REMOVE_VRF_ROUTE_REMOVE_ID, 
    "vrf_route_remove", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Remove IPv4 route entry from the routing table of a virtual router (VRF).\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 vrf_route_remove vrf_ndx 0 prefix_len 0 ip_address 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, BIT(0)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_VRF_ROUTE_REMOVE_VRF_ROUTE_REMOVE_VRF_NDX_ID, 
    "vrf_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  vrf_ndx:\n\r"
    "  Virtual router id. Range: 1 - 255.   \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 vrf_route_remove vrf_ndx 0 prefix_len 0 ip_address 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, BIT(0)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_VRF_ROUTE_REMOVE_VRF_ROUTE_REMOVE_ROUTE_KEY_SUBNET_PREFIX_LEN_ID, 
    "prefix_len", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  route_key.subnet.prefix_len:\n\r"
    "  Number of bits to consider in the IP address starting from the msb. Range: 0\n\r"
    "  - 32.Example for key ip_address 192.168.1.0 and prefix_len 24 would match any\n\r"
    "  IP Address of the form 192.168.1.x\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 vrf_route_remove vrf_ndx 0 prefix_len 0 ip_address 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, BIT(0)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_VRF_ROUTE_REMOVE_VRF_ROUTE_REMOVE_ROUTE_KEY_SUBNET_IP_ADDRESS_ID, 
    "ip_address", 
    (PARAM_VAL_RULES *)&soc_ppd_api_ip_address_vals[0], 
    (sizeof(soc_ppd_api_ip_address_vals) / sizeof(soc_ppd_api_ip_address_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  route_key.subnet.ip_address:\n\r"
    "  Ipv4 destination address.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 vrf_route_remove vrf_ndx 0 prefix_len 0 ip_address 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, BIT(0)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_VRF_ROUTING_TABLE_CLEAR_VRF_ROUTING_TABLE_CLEAR_ID, 
    "vrf_routing_table_clear", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Clear IPv4 routing table of VRF\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 vrf_routing_table_clear vrf_ndx 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, BIT(1)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_VRF_ROUTING_TABLE_CLEAR_VRF_ROUTING_TABLE_CLEAR_VRF_NDX_ID, 
    "vrf_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  vrf_ndx:\n\r"
    "  Virtual router id. Range: 1 - 255. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 vrf_routing_table_clear vrf_ndx 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, BIT(1)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_VRF_ALL_ROUTING_TABLES_CLEAR_VRF_ALL_ROUTING_TABLES_CLEAR_ID, 
    "vrf_all_routing_tables_clear", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Clear IPv4 routing tables for all VRFs.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 vrf_all_routing_tables_clear\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, BIT(2)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_VRF_ALL_ROUTING_TABLES_CLEAR_VRF_ALL_ROUTING_TABLES_CLEAR_LPM, 
    "lpm_only", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  clear only lpm :\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 vrf_routing_table_clear vrf_ndx 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, BIT(2)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
    { 
    SOC_PARAM_PPD_FRWRD_IPV4_VRF_ALL_ROUTING_TABLES_CLEAR_VRF_ALL_ROUTING_TABLES_CLEAR_HOST, 
    "host_only", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  clear only host table :\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 vrf_routing_table_clear vrf_ndx 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, BIT(2)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_MEM_STATUS_GET_MEM_STATUS_GET_ID, 
    "mem_status_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Returns the status and usage of memory.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 mem_status_get mem_ndx 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, BIT(4)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_MEM_STATUS_GET_MEM_STATUS_GET_MEM_NDX_ID, 
    "mem_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  mem_ndx:\n\r"
    "  memory/table id. Range: 0 - 4.	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 mem_status_get mem_ndx 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, BIT(4)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_MEM_DEFRAGE_MEM_DEFRAGE_ID, 
    "mem_defrage", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Returns the status and usage of memory.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 mem_defrage mem_ndx 0 entries_to_get 0 entries_to_scan 0\n\r"
    "  iter 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, BIT(5)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_MEM_DEFRAGE_MEM_DEFRAGE_MEM_NDX_ID, 
    "mem_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  mem_ndx:\n\r"
    "  memory/table id. Range: 0 - 4.	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 mem_defrage mem_ndx 0 entries_to_get 0 entries_to_scan 0\n\r"
    "  iter 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, BIT(5)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_MEM_DEFRAGE_MEM_DEFRAGE_DEFRAG_INFO_RANGE_ENTRIES_TO_GET_ID, 
    "entries_to_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  defrag_info.range.entries_to_get:\n\r"
    "  Number of entries to get/return.Stop after get this number of entries.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 mem_defrage mem_ndx 0 entries_to_get 0 entries_to_scan 0\n\r"
    "  iter 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, BIT(5)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_MEM_DEFRAGE_MEM_DEFRAGE_DEFRAG_INFO_RANGE_ENTRIES_TO_SCAN_ID, 
    "entries_to_scan", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  defrag_info.range.entries_to_scan:\n\r"
    "  The number of entries to scan.Stop after scanning this number of entries.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 mem_defrage mem_ndx 0 entries_to_get 0 entries_to_scan 0\n\r"
    "  iter 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, BIT(5)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_MEM_DEFRAGE_MEM_DEFRAGE_DEFRAG_INFO_RANGE_ITER_ID, 
    "iter", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  defrag_info.range.iter:\n\r"
    "  Iterator indicates the place to start to scan from (read/delete/modify).\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ipv4 mem_defrage mem_ndx 0 entries_to_get 0 entries_to_scan 0\n\r"
    "  iter 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, BIT(5)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },    
  { 
    SOC_PARAM_PPD_API_FRWRD_IPV4_ID, 
    "frwrd_ipv4", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "",
    "", 
    "",
    {0, 0, 0, 0, 0, BIT(9)|BIT(10)|BIT(13)|BIT(14)|BIT(15)|BIT(16)|BIT(17)|BIT(18)|BIT(19)|BIT(20)|BIT(21)|BIT(22)|BIT(23)|BIT(24)|BIT(25)|BIT(26)|BIT(27)|BIT(28)|BIT(29)|BIT(30)|BIT(31), BIT(0)|BIT(1)|BIT(2),BIT(4)|BIT(5)|BIT(13),BIT(17)|BIT(18)|BIT(19)|BIT(16)|BIT(6)|BIT(20)}, 
    1, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
#endif /* } frwrd_ipv4*/
#ifdef UI_PPD_FRWRD_IPV4_TEST/* { soc_ppd_frwrd_ipv4_test*/
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_TEST_CLEAR_VRF_FRWRD_IPV4_TEST_CLEAR_VRF_ID, 
    "clear_vrf", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Clear all databases used for Test and clear VRF tables\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api soc_ppd_frwrd_ipv4_test frwrd_ipv4_test_clear_vrf vrf 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_IPV4_TEST_CLEAR_VRF_FRWRD_IPV4_TEST_CLEAR_VRF_ID), 
    2, 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_TEST_INIT_VRF_FRWRD_IPV4_TEST_INIT_VRF_ID, 
    "init_test", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Clear all databases used for Test and clear VRF tables\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api soc_ppd_frwrd_ipv4_test frwrd_ipv4_test_clear_vrf vrf 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_IPV4_TEST_CLEAR_VRF_FRWRD_IPV4_TEST_CLEAR_VRF_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_TEST_CLEAR_VRF_FRWRD_IPV4_TEST_CLEAR_VRF_CLEAR_INFO_VRF_ID, 
    "vrf", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  clear_info.vrf:\n\r"
    "  Vrf-id to rest set to 0xFFFFFFFF\n\r"
    "  to reset all VRFs \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api soc_ppd_frwrd_ipv4_test frwrd_ipv4_test_clear_vrf vrf 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_IPV4_TEST_CLEAR_VRF_FRWRD_IPV4_TEST_CLEAR_VRF_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_TEST_PRINT_MEM_FRWRD_IPV4_TEST_PRINT_MEM_ID, 
    "print_mem", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Print memory status\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api soc_ppd_frwrd_ipv4_test frwrd_ipv4_test_print_mem\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_IPV4_TEST_PRINT_MEM_FRWRD_IPV4_TEST_PRINT_MEM_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_TEST_LOOKUP_FRWRD_IPV4_TEST_LOOKUP_ID, 
    "key_lookup", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Lookup for given key in all databases\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api soc_ppd_frwrd_ipv4_test frwrd_ipv4_test_lookup prefix_len 0 ip_address 0\n\r"
    "  vrf 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_IPV4_TEST_LOOKUP_FRWRD_IPV4_TEST_LOOKUP_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_TEST_LOOKUP_FRWRD_IPV4_TEST_LOOKUP_LKUP_INFO_KEY_KEY_SUBNET_PREFIX_LEN_ID, 
    "prefix_len", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  lkup_info.key.key.subnet.prefix_len:\n\r"
    "  Number of bits to consider in the IP address starting from the msb. Range: 0\n\r"
    "  - 32.Example for key ip_address 192.168.1.0 and prefix_len 24 would match any\n\r"
    "  IP Address of the form 192.168.1.x\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api soc_ppd_frwrd_ipv4_test frwrd_ipv4_test_lookup prefix_len 0 ip_address 0\n\r"
    "  vrf 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_IPV4_TEST_LOOKUP_FRWRD_IPV4_TEST_LOOKUP_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_TEST_LOOKUP_FRWRD_IPV4_TEST_LOOKUP_LKUP_INFO_KEY_KEY_SUBNET_IP_ADDRESS_ID, 
    "ip_address", 
    (PARAM_VAL_RULES *)&soc_ppd_api_ip_address_vals[0], 
    (sizeof(soc_ppd_api_ip_address_vals) / sizeof(soc_ppd_api_ip_address_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  lkup_info.key.key.subnet.ip_address:\n\r"
    "  Ipv4 address.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api soc_ppd_frwrd_ipv4_test frwrd_ipv4_test_lookup prefix_len 0 ip_address 0\n\r"
    "  vrf 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_IPV4_TEST_LOOKUP_FRWRD_IPV4_TEST_LOOKUP_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_TEST_LOOKUP_FRWRD_IPV4_TEST_LOOKUP_LKUP_INFO_KEY_VRF_ID, 
    "vrf", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  lkup_info.key.vrf:\n\r"
    "  VRF\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api soc_ppd_frwrd_ipv4_test frwrd_ipv4_test_lookup prefix_len 0 ip_address 0\n\r"
    "  vrf 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_IPV4_TEST_LOOKUP_FRWRD_IPV4_TEST_LOOKUP_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_TEST_VRF_FRWRD_IPV4_TEST_VRF_ID, 
    "vrf_test", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Perform random test on VRF without addition \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api soc_ppd_frwrd_ipv4_test frwrd_ipv4_test_vrf vrf_ndx 0 nof_iterations 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_IPV4_TEST_VRF_FRWRD_IPV4_TEST_VRF_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_TEST_VRF_FRWRD_IPV4_TEST_VRF_VRF_NDX_ID, 
    "vrf_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  vrf_ndx:\n\r"
    "  VRF-id	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api soc_ppd_frwrd_ipv4_test frwrd_ipv4_test_vrf vrf_ndx 0 nof_iterations 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_IPV4_TEST_VRF_FRWRD_IPV4_TEST_VRF_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_TEST_VRF_FRWRD_IPV4_TEST_VRF_NOF_ITERATIONS_ID, 
    "nof_iterations", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  nof_iterations:\n\r"
    "  Number of iteration to perform, set to 0xFFFFFFFFINPUT\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api soc_ppd_frwrd_ipv4_test frwrd_ipv4_test_vrf vrf_ndx 0 nof_iterations 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_IPV4_TEST_VRF_FRWRD_IPV4_TEST_VRF_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_TEST_RUN_FRWRD_IPV4_TEST_RUN_ID, 
    "test_run", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  run random test on VRF with additions/remove\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api soc_ppd_frwrd_ipv4_test frwrd_ipv4_test_run fec_id 0 add_prob 0\n\r"
    "  remove_prob 0 print_level 0 hw_test 0 test 0 cache_change 0 nof_routes 0 seed\n\r"
    "  0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_IPV4_TEST_RUN_FRWRD_IPV4_TEST_RUN_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_TEST_RUN_FRWRD_IPV4_TEST_RUN_TES_INFO_FEC_ID_ID, 
    "fec_id", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  tes_info.fec_id:\n\r"
    "  FEC id for all added routesIf 0xFFFFFFFF then add random\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api soc_ppd_frwrd_ipv4_test frwrd_ipv4_test_run fec_id 0 add_prob 0\n\r"
    "  remove_prob 0 print_level 0 hw_test 0 test 0 cache_change 0 nof_routes 0 seed\n\r"
    "  0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_IPV4_TEST_RUN_FRWRD_IPV4_TEST_RUN_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_TEST_RUN_FRWRD_IPV4_TEST_RUN_TES_INFO_ADD_PROB_ID, 
    "add_prob", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  tes_info.add_prob:\n\r"
    "  Addition probability\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api soc_ppd_frwrd_ipv4_test frwrd_ipv4_test_run fec_id 0 add_prob 0\n\r"
    "  remove_prob 0 print_level 0 hw_test 0 test 0 cache_change 0 nof_routes 0 seed\n\r"
    "  0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_IPV4_TEST_RUN_FRWRD_IPV4_TEST_RUN_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_TEST_RUN_FRWRD_IPV4_TEST_RUN_TES_INFO_REMOVE_PROB_ID, 
    "remove_prob", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  tes_info.remove_prob:\n\r"
    "  Remove probability\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api soc_ppd_frwrd_ipv4_test frwrd_ipv4_test_run fec_id 0 add_prob 0\n\r"
    "  remove_prob 0 print_level 0 hw_test 0 test 0 cache_change 0 nof_routes 0 seed\n\r"
    "  0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_IPV4_TEST_RUN_FRWRD_IPV4_TEST_RUN_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_TEST_RUN_FRWRD_IPV4_TEST_RUN_TES_INFO_PRINT_LEVEL_ID, 
    "print_level", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  tes_info.print_level:\n\r"
    "  Print level\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api soc_ppd_frwrd_ipv4_test frwrd_ipv4_test_run fec_id 0 add_prob 0\n\r"
    "  remove_prob 0 print_level 0 hw_test 0 test 0 cache_change 0 nof_routes 0 seed\n\r"
    "  0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_IPV4_TEST_RUN_FRWRD_IPV4_TEST_RUN_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_TEST_RUN_FRWRD_IPV4_TEST_RUN_TES_INFO_HW_TEST_ID, 
    "hw_test", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  tes_info.hw_test:\n\r"
    "  Test by hardware diag\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api soc_ppd_frwrd_ipv4_test frwrd_ipv4_test_run fec_id 0 add_prob 0\n\r"
    "  remove_prob 0 print_level 0 hw_test 0 test 0 cache_change 0 nof_routes 0 seed\n\r"
    "  0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_IPV4_TEST_RUN_FRWRD_IPV4_TEST_RUN_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_TEST_RUN_FRWRD_IPV4_TEST_RUN_TES_INFO_TEST_ID, 
    "test", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  tes_info.test:\n\r"
    "  Test when add/remove, or just add/remove\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api soc_ppd_frwrd_ipv4_test frwrd_ipv4_test_run fec_id 0 add_prob 0\n\r"
    "  remove_prob 0 print_level 0 hw_test 0 test 0 cache_change 0 nof_routes 0 seed\n\r"
    "  0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_IPV4_TEST_RUN_FRWRD_IPV4_TEST_RUN_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_TEST_RUN_FRWRD_IPV4_TEST_RUN_TES_INFO_CACHE_CHANGE_ID, 
    "cache_change", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  tes_info.cache_change:\n\r"
    "  Change caching status after these number of routes, if 0 then all is cached,\n\r"
    "  IF cache_change < nof_routes, then no caching, start status as uncached\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api soc_ppd_frwrd_ipv4_test frwrd_ipv4_test_run fec_id 0 add_prob 0\n\r"
    "  remove_prob 0 print_level 0 hw_test 0 test 0 cache_change 0 nof_routes 0 seed\n\r"
    "  0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_IPV4_TEST_RUN_FRWRD_IPV4_TEST_RUN_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_TEST_RUN_FRWRD_IPV4_TEST_RUN_TES_INFO_NOF_CACHED_ID, 
    "nof_cached", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  tes_info.cache_change:\n\r"
    "  Change caching status after these number of routes, if 0 then all is cached,\n\r"
    "  IF cache_change < nof_routes, then no caching, start status as uncached\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api soc_ppd_frwrd_ipv4_test frwrd_ipv4_test_run fec_id 0 add_prob 0\n\r"
    "  remove_prob 0 print_level 0 hw_test 0 test 0 cache_change 0 nof_routes 0 seed\n\r"
    "  0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_IPV4_TEST_RUN_FRWRD_IPV4_TEST_RUN_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_TEST_RUN_FRWRD_IPV4_TEST_RUN_TES_INFO_DEFRAGE_RATE_ID, 
    "defrag_rate", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  tes_info.cache_change:\n\r"
    "  Change caching status after these number of routes, if 0 then all is cached,\n\r"
    "  IF cache_change < nof_routes, then no caching, start status as uncached\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api soc_ppd_frwrd_ipv4_test frwrd_ipv4_test_run fec_id 0 add_prob 0\n\r"
    "  remove_prob 0 print_level 0 hw_test 0 test 0 cache_change 0 nof_routes 0 seed\n\r"
    "  0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_IPV4_TEST_RUN_FRWRD_IPV4_TEST_RUN_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_TEST_RUN_FRWRD_IPV4_TEST_RUN_TES_INFO_DEFRAGE_BNK_BMP_ID, 
    "defrag_bnks_bmp", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  tes_info.cache_change:\n\r"
    "  Change caching status after these number of routes, if 0 then all is cached,\n\r"
    "  IF cache_change < nof_routes, then no caching, start status as uncached\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api soc_ppd_frwrd_ipv4_test frwrd_ipv4_test_run fec_id 0 add_prob 0\n\r"
    "  remove_prob 0 print_level 0 hw_test 0 test 0 cache_change 0 nof_routes 0 seed\n\r"
    "  0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_IPV4_TEST_RUN_FRWRD_IPV4_TEST_RUN_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_TEST_RUN_FRWRD_IPV4_TEST_RUN_TES_INFO_NOF_ROUTES_ID, 
    "nof_routes", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  tes_info.nof_routes:\n\r"
    "  Number of routes to add/remove \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api soc_ppd_frwrd_ipv4_test frwrd_ipv4_test_run fec_id 0 add_prob 0\n\r"
    "  remove_prob 0 print_level 0 hw_test 0 test 0 cache_change 0 nof_routes 0 seed\n\r"
    "  0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_IPV4_TEST_RUN_FRWRD_IPV4_TEST_RUN_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_TEST_RUN_FRWRD_IPV4_TEST_RUN_TES_INFO_SEED_ID, 
    "seed", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  tes_info.seed:\n\r"
    "  seed \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api soc_ppd_frwrd_ipv4_test frwrd_ipv4_test_run fec_id 0 add_prob 0\n\r"
    "  remove_prob 0 print_level 0 hw_test 0 test 0 cache_change 0 nof_routes 0 seed\n\r"
    "  0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_IPV4_TEST_RUN_FRWRD_IPV4_TEST_RUN_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_TEST_ID, 
    "test_ipv4", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "",
    "", 
    "",
    BIT_UI_16_RNG(SOC_FUN_PPD_FRWRD_IPV4_TEST_FIRST_ID,SOC_FUN_PPD_FRWRD_IPV4_TEST_LAST_ID), 
    1, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_TEST2_ID, 
    "pcp_test_ipv4", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "",
    "", 
    "",
    BIT_UI_16_RNG(SOC_FUN_PPD_FRWRD_IPV4_TEST_FIRST_ID,SOC_FUN_PPD_FRWRD_IPV4_TEST_LAST_ID), 
    1, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_IPV4_TEST3_ID, 
    "arad_test_ipv4", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "",
    "", 
    "",
    BIT_UI_16_RNG(SOC_FUN_PPD_FRWRD_IPV4_TEST_FIRST_ID,SOC_FUN_PPD_FRWRD_IPV4_TEST_LAST_ID), 
    1, 
    (VAL_PROC_PTR)NULL 
  },  

#endif /* } soc_ppd_frwrd_ipv4_test*/
#ifdef UI_FRWRD_ILM/* { frwrd_ilm*/
  { 
    SOC_PARAM_PPD_FRWRD_ILM_GLBL_INFO_SET_GLBL_INFO_SET_ID, 
    "glbl_info_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Setting global information of the ILM (ingress label mapping) (including ELSP\n\r"
    "  and key building information)\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ilm glbl_info_set exp_map_tbl_index 0 exp_map_tbl 0 end 0 start\n\r"
    "  0 mask_inrif 0 mask_port 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, BIT(25)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_ILM_GLBL_INFO_SET_GLBL_INFO_SET_GLBL_INFO_ELSP_INFO_EXP_MAP_TBL_INDEX_ID, 
    "exp_map_tbl_index", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  exp_map_tbl_index:\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ilm glbl_info_set exp_map_tbl_index 0 exp_map_tbl 0 end 0 start\n\r"
    "  0 mask_inrif 0 mask_port 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, BIT(25)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_ILM_GLBL_INFO_SET_GLBL_INFO_SET_GLBL_INFO_ELSP_INFO_EXP_MAP_TBL_ID, 
    "exp_map_tbl", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  glbl_info.elsp_info.exp_map_tbl[ prm_exp_map_tbl_index]:\n\r"
    "  For labels in the range: map the EXP (from the MPLS header) to internal\n\r"
    "  values. For labels out of the range, internal value is masked and set to 0.\n\r"
    "  exp_map_tbl[x] = y; maps EXP x to internal value y.Note that the mapped\n\r"
    "  values should be smaller than 8.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ilm glbl_info_set exp_map_tbl_index 0 exp_map_tbl 0 end 0 start\n\r"
    "  0 mask_inrif 0 mask_port 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, BIT(25)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_ILM_GLBL_INFO_SET_GLBL_INFO_SET_GLBL_INFO_ELSP_INFO_LABELS_RANGE_END_ID, 
    "end", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  glbl_info.elsp_info.labels_range.end:\n\r"
    "  End of the range [start, end]: May be closed or open range according to what\n\r"
    "  is specified for the specific use.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ilm glbl_info_set exp_map_tbl_index 0 exp_map_tbl 0 end 0 start\n\r"
    "  0 mask_inrif 0 mask_port 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, BIT(25)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_ILM_GLBL_INFO_SET_GLBL_INFO_SET_GLBL_INFO_ELSP_INFO_LABELS_RANGE_START_ID, 
    "start", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  glbl_info.elsp_info.labels_range.start:\n\r"
    "  Start of the range.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ilm glbl_info_set exp_map_tbl_index 0 exp_map_tbl 0 end 0 start\n\r"
    "  0 mask_inrif 0 mask_port 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, BIT(25)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_ILM_GLBL_INFO_SET_GLBL_INFO_SET_GLBL_INFO_KEY_INFO_MASK_INRIF_ID, 
    "mask_inrif", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  glbl_info.key_info.mask_inrif:\n\r"
    "  If FALSE, then the key of the ILM includes the incoming router interface the\n\r"
    "  packet came from. Otherwise it is masked. Always masked in T20E\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ilm glbl_info_set exp_map_tbl_index 0 exp_map_tbl 0 end 0 start\n\r"
    "  0 mask_inrif 0 mask_port 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, BIT(25)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_ILM_GLBL_INFO_SET_GLBL_INFO_SET_GLBL_INFO_KEY_INFO_MASK_PORT_ID, 
    "mask_port", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  glbl_info.key_info.mask_port:\n\r"
    "  If FALSE, then the key of the ILM includes the local port the packet came\n\r"
    "  from. Otherwise it is masked. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ilm glbl_info_set exp_map_tbl_index 0 exp_map_tbl 0 end 0 start\n\r"
    "  0 mask_inrif 0 mask_port 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, BIT(25)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_ILM_GLBL_INFO_GET_GLBL_INFO_GET_ID, 
    "glbl_info_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Setting global information of the ILM (ingress label mapping) (including ELSP\n\r"
    "  and key building information)\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ilm glbl_info_get\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, BIT(26)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_ILM_ADD_ADD_ID, 
    "add", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Add mapping from incoming label to destination and MPLS command.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ilm add inrif 0 in_local_port 0 mapped_exp 0 in_label 0\n\r"
    "  trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0 push_profile 0\n\r"
    "  label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, BIT(27)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_ILM_ADD_ADD_ILM_KEY_INRIF_ID, 
    "inrif", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  ilm_key.inrif:\n\r"
    "  The incoming interface the packet associated with. Note: If by the global\n\r"
    "  setting soc_ppd_frwrd_ilm_glbl_info_set, the in-RIF is masked, then this value\n\r"
    "  has to be zero.Always masked in T20E.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ilm add inrif 0 in_local_port 0 mapped_exp 0 in_label 0\n\r"
    "  trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0 push_profile 0\n\r"
    "  label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, BIT(27)}, 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_ILM_ADD_ADD_ILM_KEY_IN_LOCAL_PORT_ID, 
    "in_local_port", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  ilm_key.in_local_port:\n\r"
    "  The local port the packet enters from. Note: If by the global setting\n\r"
    "  soc_ppd_frwrd_ilm_glbl_info_set, the port is masked, then this value has to be\n\r"
    "  zero.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ilm add inrif 0 in_local_port 0 mapped_exp 0 in_label 0\n\r"
    "  trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0 push_profile 0\n\r"
    "  label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, BIT(27)}, 
    4, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_ILM_ADD_ADD_ILM_KEY_MAPPED_EXP_ID, 
    "mapped_exp", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  ilm_key.mapped_exp:\n\r"
    "  Internal EXP. Relevant only for labels in the ELSP range. In this case, this\n\r"
    "  is the value after mapping the header EXP with 'exp_map_tbl table'.\n\r"
    "  Otherwise, this is ignored (set to zero)\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ilm add inrif 0 in_local_port 0 mapped_exp 0 in_label 0\n\r"
    "  trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0 push_profile 0\n\r"
    "  label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, BIT(27)}, 
    5, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_ILM_ADD_ADD_ILM_KEY_IN_LABEL_ID, 
    "in_label", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  ilm_key.in_label:\n\r"
    "  Incoming label.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ilm add inrif 0 in_local_port 0 mapped_exp 0 in_label 0\n\r"
    "  trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0 push_profile 0\n\r"
    "  label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, BIT(27)}, 
    6, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_DECISION_FD_TRAP_CODE_ID, 
    "fd_trap_code", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals/*SOC_PPC_TRAP_CODE_rule*/[0], 
    (sizeof(soc_ppd_api_free_vals/*SOC_PPC_TRAP_CODE_rule*/) / sizeof(soc_ppd_api_free_vals/*SOC_PPC_TRAP_CODE_rule*/[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pwe_info.default_frwrd.default_forwarding.additional_info.trap_info.trap_acti\n\r"
    "  n_profile_id:\n\r"
    "  Trapping action profile ID.Range: 0-15.Points to a database that holds\n\r"
    "  trapping options. The profile ID selects the CPU to handle the trap; The CPU\n\r"
    "  port ID; the priority of the message; etc.The TRAP action profile is\n\r"
    "  configured via soc_ppd_trap_mgmt_frwrd_profile_info_set()\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ilm add inrif 0 in_local_port 0 mapped_exp 0 in_label 0\n\r"
    "  trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0 push_profile 0\n\r"
    "  label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, BIT(27)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_DECISION_FD_FWD_STRENGTH_ID, 
    "fd_frwrd_strength", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pwe_info.default_frwrd.default_forwarding.additional_info.trap_info.trap_qual\n\r"
    "  fier:\n\r"
    "  Trap qualifier to be associated with the packet to identify the trap. Range:\n\r"
    "  0-4K.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ilm add inrif 0 in_local_port 0 mapped_exp 0 in_label 0\n\r"
    "  trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0 push_profile 0\n\r"
    "  label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, BIT(27)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_DECISION_FD_SNOOP_STRENGTH_ID,
    "fd_snp_strength", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pwe_info.default_frwrd.default_forwarding.additional_info.outlif.val:\n\r"
    "  Out-LIF value, according to type. May be AC / EEP / VSI\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ilm add inrif 0 in_local_port 0 mapped_exp 0 in_label 0\n\r"
    "  trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0 push_profile 0\n\r"
    "  label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, BIT(27)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_DECISION_FD_AC_ID,
    "fd_ac_id", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pwe_info.default_frwrd.default_forwarding.additional_info.outlif.val:\n\r"
    "  Out-LIF value, according to type. May be AC / EEP / VSI\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ilm add inrif 0 in_local_port 0 mapped_exp 0 in_label 0\n\r"
    "  trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0 push_profile 0\n\r"
    "  label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, BIT(27)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_DECISION_FD_EEP_NDX_ID,
    "fd_eep_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pwe_info.default_frwrd.default_forwarding.additional_info.outlif.val:\n\r"
    "  Out-LIF value, according to type. May be AC / EEP / VSI\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ilm add inrif 0 in_local_port 0 mapped_exp 0 in_label 0\n\r"
    "  trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0 push_profile 0\n\r"
    "  label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, BIT(27)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_DECISION_FD_PUSH_PROFILE_ID, 
    "fd_push_profile", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pwe_info.default_frwrd.default_forwarding.additional_info.eei.val.mpls_comman\n\r"
    "  .push_profile:\n\r"
    "  If the command is push, this is the push profile used to construct the\n\r"
    "  label's TTL and EXP.Otherwise, this field is ignored.Range: 0 - 7.EEI may\n\r"
    "  include the MPLS command, but then the command cannot be Push with\n\r"
    "  push_profile 0. See SOC_PPC_EEI.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ilm add inrif 0 in_local_port 0 mapped_exp 0 in_label 0\n\r"
    "  trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0 push_profile 0\n\r"
    "  label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, BIT(27)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },
  { 
    SOC_PARAM_PPD_FRWRD_DECISION_FD_LABEL_ID, 
    "fd_label", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pwe_info.default_frwrd.default_forwarding.additional_info.eei.val.mpls_comman\n\r"
    "  .label:\n\r"
    "  Label. Relevant if the command is push or swap.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ilm add inrif 0 in_local_port 0 mapped_exp 0 in_label 0\n\r"
    "  trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0 push_profile 0\n\r"
    "  label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, BIT(27)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_DECISION_FD_IS_LAG_ID, 
    "fd_is_lag", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pwe_info.default_frwrd.default_forwarding.additional_info.eei.val.trill_dest.\n\r"
    "  s_multicast:\n\r"
    "  Is the TRILL packet is sent as multicast (flooded in the Distribution Tree)\n\r"
    "  or sent as Unicast to Egress Nick.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ilm add inrif 0 in_local_port 0 mapped_exp 0 in_label 0\n\r"
    "  trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0 push_profile 0\n\r"
    "  label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, BIT(27)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_DECISION_FD_DEST_ID, 
    "fd_dest_id", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pwe_info.default_frwrd.default_forwarding.dest_id:\n\r"
    "  Destination ID, according to type.Multicast: MIDFEC:\n\r"
    "  FEC IDTrap:\n\r"
    "  IgnoredDrop:\n\r"
    "  IgnoredUnicast:\n\r"
    "  System port. When LAG, the user should\n\r"
    "  use SOC_PPD_LAG_ID(lag-id). When system\n\r"
    "  port is with allocated QoS resources the\n\r"
    "  user should use\n\r"
    "  SOC_PPD_DIRECT_FLOW_ID(flow-id)\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ilm add inrif 0 in_local_port 0 mapped_exp 0 in_label 0\n\r"
    "  trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0 push_profile 0\n\r"
    "  label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, BIT(27)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_DECISION_FD_TYPE_ID, 
    "fd_type",
    (PARAM_VAL_RULES *)&SOC_PPD_FRWRD_DECISION_MACRO_TYPE_rule[0], 
    (sizeof(SOC_PPD_FRWRD_DECISION_MACRO_TYPE_rule) / sizeof(SOC_PPD_FRWRD_DECISION_MACRO_TYPE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pwe_info.default_frwrd.default_forwarding.type:\n\r"
    "  Forwarding decision type:Unicast without FEC; Multicast without FEC; FEC;\n\r"
    "  Drop or Trap\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ilm add inrif 0 in_local_port 0 mapped_exp 0 in_label 0\n\r"
    "  trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0 push_profile 0\n\r"
    "  label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, BIT(27)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },    { 
    SOC_PARAM_PPD_FRWRD_ILM_GET_GET_ID, 
    "get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Gets the value (destination and MPLS command) the incoming label key is\n\r"
    "  associated with.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ilm get inrif 0 in_local_port 0 mapped_exp 0 in_label 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, BIT(28)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_ILM_GET_GET_ILM_KEY_INRIF_ID, 
    "inrif", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  ilm_key.inrif:\n\r"
    "  The incoming interface the packet associated with. Note: If by the global\n\r"
    "  setting soc_ppd_frwrd_ilm_glbl_info_set, the in-RIF is masked, then this value\n\r"
    "  has to be zero.Always masked in T20E.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ilm get inrif 0 in_local_port 0 mapped_exp 0 in_label 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, BIT(28)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_ILM_GET_GET_ILM_KEY_IN_LOCAL_PORT_ID, 
    "in_local_port", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  ilm_key.in_local_port:\n\r"
    "  The local port the packet enters from. Note: If by the global setting\n\r"
    "  soc_ppd_frwrd_ilm_glbl_info_set, the port is masked, then this value has to be\n\r"
    "  zero.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ilm get inrif 0 in_local_port 0 mapped_exp 0 in_label 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, BIT(28)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_ILM_GET_GET_ILM_KEY_MAPPED_EXP_ID, 
    "mapped_exp", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  ilm_key.mapped_exp:\n\r"
    "  Internal EXP. Relevant only for labels in the ELSP range. In this case, this\n\r"
    "  is the value after mapping the header EXP with 'exp_map_tbl table'.\n\r"
    "  Otherwise, this is ignored (set to zero)\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ilm get inrif 0 in_local_port 0 mapped_exp 0 in_label 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, BIT(28)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_ILM_GET_GET_ILM_KEY_IN_LABEL_ID, 
    "in_label", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  ilm_key.in_label:\n\r"
    "  Incoming label.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ilm get inrif 0 in_local_port 0 mapped_exp 0 in_label 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, BIT(28)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_ILM_GET_BLOCK_GET_BLOCK_ID, 
    "get_block", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Gets the block of entries from the ILM DB.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ilm get_block\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, BIT(29)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_ILM_REMOVE_REMOVE_ID, 
    "remove", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Remove incoming label key from the ILM DB.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ilm remove inrif 0 in_local_port 0 mapped_exp 0 in_label 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, BIT(30)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_ILM_REMOVE_REMOVE_ILM_KEY_INRIF_ID, 
    "inrif", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  ilm_key.inrif:\n\r"
    "  The incoming interface the packet associated with. Note: If by the global\n\r"
    "  setting soc_ppd_frwrd_ilm_glbl_info_set, the in-RIF is masked, then this value\n\r"
    "  has to be zero.Always masked in T20E.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ilm remove inrif 0 in_local_port 0 mapped_exp 0 in_label 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, BIT(30)}, 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_ILM_REMOVE_REMOVE_ILM_KEY_IN_LOCAL_PORT_ID, 
    "in_local_port", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  ilm_key.in_local_port:\n\r"
    "  The local port the packet enters from. Note: If by the global setting\n\r"
    "  soc_ppd_frwrd_ilm_glbl_info_set, the port is masked, then this value has to be\n\r"
    "  zero.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ilm remove inrif 0 in_local_port 0 mapped_exp 0 in_label 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, BIT(30)}, 
    4, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_ILM_REMOVE_REMOVE_ILM_KEY_MAPPED_EXP_ID, 
    "mapped_exp", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  ilm_key.mapped_exp:\n\r"
    "  Internal EXP. Relevant only for labels in the ELSP range. In this case, this\n\r"
    "  is the value after mapping the header EXP with 'exp_map_tbl table'.\n\r"
    "  Otherwise, this is ignored (set to zero)\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ilm remove inrif 0 in_local_port 0 mapped_exp 0 in_label 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, BIT(30)}, 
    5, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_ILM_REMOVE_REMOVE_ILM_KEY_IN_LABEL_ID, 
    "in_label", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  ilm_key.in_label:\n\r"
    "  Incoming label.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ilm remove inrif 0 in_local_port 0 mapped_exp 0 in_label 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, BIT(30)}, 
    6, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_ILM_TABLE_CLEAR_TABLE_CLEAR_ID, 
    "table_clear", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Remove all keys from the ILM DB.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_ilm table_clear\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, BIT(31)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_API_FRWRD_ILM_ID, 
    "frwrd_ilm", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "",
    "", 
    "",
    {0, 0, 0, 0, 0, 0, BIT(25)|BIT(26)|BIT(27)|BIT(28)|BIT(29)|BIT(30)|BIT(31)}, 
    1, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
#endif /* } frwrd_ilm*/
#ifdef UI_FRWRD_BMACT/* { frwrd_bmact*/
  { 
    SOC_PARAM_PPD_FRWRD_BMACT_PCP_MAP_SET_PCP_MAP_SET_ID, 
    "pcp_map_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set mapping from COS parameters (DP and TC) to the PCP and DEI values to be\n\r"
    "  set in the transmitted packet's tag. This is the mapping to be used when the\n\r"
    "  incoming packet has not tags or pcp profile set to use TC and DP for the\n\r"
    "  mapping.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_vlan_edit pcp_map_untagged_set pcp_profile_ndx 0 tc_ndx 0 dp_ndx 0\n\r"
    "  out_pcp 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(4)},
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_BMACT_PCP_MAP_SET_PCP_MAP_SET_PCP_PROFILE_NDX_ID, 
    "pcp_profile_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pcp_profile_ndx:\n\r"
    "  The PCP profile is set according to OUT-AC setting. Range: 0 - 7.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_vlan_edit pcp_map_untagged_set pcp_profile_ndx 0 tc_ndx 0 dp_ndx 0\n\r"
    "  out_pcp 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(4)},
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_BMACT_PCP_MAP_SET_PCP_MAP_SET_TC_NDX_ID, 
    "tc_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  tc_ndx:\n\r"
    "  Traffic Class. Calculated at the ingress. See COS module. Range: 0 - 7.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_vlan_edit pcp_map_untagged_set pcp_profile_ndx 0 tc_ndx 0 dp_ndx 0\n\r"
    "  out_pcp 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(4)},
    4, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_BMACT_PCP_MAP_SET_PCP_MAP_SET_DP_NDX_ID, 
    "dp_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  dp_ndx:\n\r"
    "  Drop Precedence. Calculated at the ingress. See COS module. Range: 0 - 3.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_vlan_edit pcp_map_untagged_set pcp_profile_ndx 0 tc_ndx 0 dp_ndx 0\n\r"
    "  out_pcp 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(4)},
    5, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_BMACT_PCP_MAP_SET_PCP_MAP_SET_OUT_PCP_ID, 
    "out_pcp", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  out_pcp:\n\r"
    "  The mapped PCP to set in the transmitted packet header. When the mapping used\n\r"
    "  to build C-tag, this value represents the UP to set in the packet\n\r"
    "  C-tag.Range: 0 - 7.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_vlan_edit pcp_map_untagged_set pcp_profile_ndx 0 tc_ndx 0 dp_ndx 0\n\r"
    "  out_pcp 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(4)},
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_BMACT_PCP_MAP_SET_PCP_MAP_SET_OUT_DEI_ID, 
    "out_dei", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  out_dei:\n\r"
    "  The mapped DEI to set in the transmitted packet header.\n\r"
    "  This is relevant when used for S-Tag. When the mapping used to build C tag,\n\r"
    "  this value has to be set to 0. Range: 0 - 1.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_vlan_edit pcp_map_untagged_set pcp_profile_ndx 0 tc_ndx 0 dp_ndx 0\n\r"
    "  out_pcp 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(4)},
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_BMACT_PCP_MAP_GET_PCP_MAP_GET_ID, 
    "pcp_map_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set mapping from COS parameters (DP and TC) to the PCP and DEI values to be\n\r"
    "  set in the transmitted packet's tag. This is the mapping to be used when the\n\r"
    "  incoming packet has not tags or pcp profile set to use TC and DP for the\n\r"
    "  mapping.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_vlan_edit pcp_map_untagged_get pcp_profile_ndx 0 tc_ndx 0 dp_ndx 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(1)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_BMACT_PCP_MAP_GET_PCP_MAP_GET_PCP_PROFILE_NDX_ID, 
    "pcp_profile_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pcp_profile_ndx:\n\r"
    "  The PCP profile is set according to OUT-AC setting. Range: 0 - 7.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_vlan_edit pcp_map_untagged_get pcp_profile_ndx 0 tc_ndx 0 dp_ndx 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(1)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_BMACT_PCP_MAP_GET_PCP_MAP_GET_TC_NDX_ID, 
    "tc_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  tc_ndx:\n\r"
    "  Traffic Class. Calculated at the ingress. See COS module. Range: 0 - 7.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_vlan_edit pcp_map_untagged_get pcp_profile_ndx 0 tc_ndx 0 dp_ndx 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(1)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_BMACT_PCP_MAP_GET_PCP_MAP_GET_DP_NDX_ID, 
    "dp_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  dp_ndx:\n\r"
    "  Drop Precedence. Calculated at the ingress. See COS module. Range: 0 - 3.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_vlan_edit pcp_map_untagged_get pcp_profile_ndx 0 tc_ndx 0 dp_ndx 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(1)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },    
  { 
    SOC_PARAM_PPD_FRWRD_BMACT_BVID_INFO_SET_BVID_INFO_SET_ID, 
    "bvid_info_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set the B-VID bridging attributes. Backbone Mac addresses that do not serve\n\r"
    "  as MyMAC for I-components that are processed according to their B-VID\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_bmact bvid_info_set bvid_ndx 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 b_fid_profile 0\n\r"
    "  stp_topology_id 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, BIT(0)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_BMACT_BVID_INFO_SET_BVID_INFO_SET_BVID_NDX_ID, 
    "bvid_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  bvid_ndx:\n\r"
    "  Backbone VID  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_bmact bvid_info_set bvid_ndx 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 b_fid_profile 0\n\r"
    "  stp_topology_id 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, BIT(0)}, 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_BMACT_BVID_INFO_SET_BVID_INFO_SET_BVID_INFO_UKNOWN_DA_DEST_DEST_ID_ID, 
    "da_not_found_profile_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  bvid_info.default_frwrd_profile:\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_bmact bvid_info_set bvid_ndx 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 b_fid_profile 0\n\r"
    "  stp_topology_id 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, BIT(0)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  /*{ 
    SOC_PARAM_PPD_FRWRD_BMACT_BVID_INFO_SET_BVID_INFO_SET_BVID_INFO_UKNOWN_DA_DEST_TYPE_ID,
    "dest_type",
    (PARAM_VAL_RULES *)&SOC_PPD_FRWRD_DECISION_MACRO_TYPE_rule[0], 
    (sizeof(SOC_PPD_FRWRD_DECISION_MACRO_TYPE_rule) / sizeof(SOC_PPD_FRWRD_DECISION_MACRO_TYPE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  bvid_info.uknown_da_dest.type:\n\r"
    "  Forwarding decision type:Unicast without FEC; Multicast without FEC; FEC;\n\r"
    "  Drop or Trap\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_bmact bvid_info_set bvid_ndx 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 b_fid_profile 0\n\r"
    "  stp_topology_id 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, BIT(0)}, 
    LAST_ORDINAL, 
      (VAL_PROC_PTR)NULL 
  }, */ 
  { 
    SOC_PARAM_PPD_FRWRD_BMACT_BVID_INFO_SET_BVID_INFO_SET_BVID_INFO_B_FID_PROFILE_ID, 
    "b_fid_profile", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  bvid_info.b_fid_profile:\n\r"
    "  SOC_PPC_BFID_EQUAL_TO_BVID: The B-MACT FID is the B-VID.The B-MACT FID: The\n\r"
    "  B-MACT FID is '0'. Enable shared learning.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_bmact bvid_info_set bvid_ndx 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 b_fid_profile 0\n\r"
    "  stp_topology_id 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, BIT(0)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_BMACT_BVID_INFO_SET_BVID_INFO_SET_BVID_INFO_STP_TOPOLOGY_ID_ID, 
    "stp_topology_id", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  bvid_info.stp_topology_id:\n\r"
    "  Backbone STP topology ID.PBB dedicated set of topology Ids. Does not share\n\r"
    "  the I-components domain of STP topology Ids \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_bmact bvid_info_set bvid_ndx 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 b_fid_profile 0\n\r"
    "  stp_topology_id 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, BIT(0)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_BMACT_BVID_INFO_GET_BVID_INFO_GET_ID, 
    "bvid_info_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set the B-VID bridging attributes. Backbone Mac addresses that do not serve\n\r"
    "  as MyMAC for I-components that are processed according to their B-VID\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_bmact bvid_info_get bvid_ndx 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, BIT(1)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_BMACT_BVID_INFO_GET_BVID_INFO_GET_BVID_NDX_ID, 
    "bvid_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  bvid_ndx:\n\r"
    "  Backbone VID  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_bmact bvid_info_get bvid_ndx 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, BIT(1)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_BMACT_PBB_TE_BVID_RANGE_SET_PBB_TE_BVID_RANGE_SET_ID, 
    "pbb_te_bvid_range_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set the BVID range for Traffic Engineered Provider Backbone Bridging\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_bmact pbb_te_bvid_range_set last_vid 0 first_vid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, BIT(2)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_BMACT_PBB_TE_BVID_RANGE_SET_PBB_TE_BVID_RANGE_SET_PBB_TE_BVIDS_LAST_VID_ID, 
    "last_vid", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pbb_te_bvids.last_vid:\n\r"
    "  Last B-VID to be treated as PBB-TE\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_bmact pbb_te_bvid_range_set last_vid 0 first_vid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, BIT(2)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_BMACT_PBB_TE_BVID_RANGE_SET_PBB_TE_BVID_RANGE_SET_PBB_TE_BVIDS_FIRST_VID_ID, 
    "first_vid", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pbb_te_bvids.first_vid:\n\r"
    "  First B-VID to be treated as PBB-TE\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_bmact pbb_te_bvid_range_set last_vid 0 first_vid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, BIT(2)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_BMACT_PBB_TE_BVID_RANGE_GET_PBB_TE_BVID_RANGE_GET_ID, 
    "pbb_te_bvid_range_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set the BVID range for Traffic Engineered Provider Backbone Bridging\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_bmact pbb_te_bvid_range_get\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, BIT(3)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_BMACT_ENTRY_ADD_ENTRY_ADD_ID, 
    "entry_add", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Add an entry to the B-MACT DB.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_bmact entry_add b_mac_addr 0 b_vid 0 drop_sa 0 sa_learn_fec_id\n\r"
    "  0 i_sid_domain 0 sys_port_id 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, BIT(6)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_BMACT_ENTRY_ADD_ENTRY_ADD_BMAC_KEY_B_MAC_ADDR_ID, 
    "b_mac_addr", 
    (PARAM_VAL_RULES *)&soc_ppd_api_mac_addr_vals[0], 
    (sizeof(soc_ppd_api_mac_addr_vals) / sizeof(soc_ppd_api_mac_addr_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  bmac_key.b_mac_addr:\n\r"
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    "  B-MAC-Address\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_bmact entry_add b_mac_addr 0 b_vid 0 drop_sa 0 sa_learn_fec_id\n\r"
    "  0 i_sid_domain 0 sys_port_id 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, BIT(6)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_BMACT_ENTRY_ADD_ENTRY_ADD_BMAC_KEY_B_VID_ID, 
    "b_vid", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  bmac_key.b_vid:\n\r"
    "  B-VID\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_bmact entry_add b_mac_addr 0 b_vid 0 drop_sa 0 sa_learn_fec_id\n\r"
    "  0 i_sid_domain 0 sys_port_id 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, BIT(6)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_BMACT_ENTRY_ADD_ENTRY_ADD_BMAC_KEY_FLAGS_ID, 
    "flags", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  bmac_key.flags:\n\r"
    "  flags can be 1 SOC_PPC_BMACT_ENTRY_TYPE_FRWRD or 2 SOC_PPC_BMACT_ENTRY_TYPE_LEARN\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_bmact entry_add b_mac_addr 0 b_vid 0 drop_sa 0 sa_learn_fec_id\n\r"
    "  0 i_sid_domain 0 sys_port_id 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, BIT(6)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },
  { 
    SOC_PARAM_PPD_FRWRD_BMACT_ENTRY_ADD_ENTRY_ADD_BMACT_ENTRY_INFO_DROP_SA_ID, 
    "drop_sa", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  bmact_entry_info.drop_sa:\n\r"
    "  Drop B-SA.TRUE: Drop packets that correspond to the bmac-key \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_bmact entry_add b_mac_addr 0 b_vid 0 drop_sa 0 sa_learn_fec_id\n\r"
    "  0 i_sid_domain 0 sys_port_id 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, BIT(6)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_BMACT_ENTRY_ADD_ENTRY_ADD_BMACT_ENTRY_INFO_SA_LEARN_FEC_ID_ID, 
    "sa_learn_fec_id", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  bmact_entry_info.sa_learn_fec_id:\n\r"
    "  The FEC ID that hold the forwarding information to the destination port and\n\r"
    "  MIM link-layer encapsulation.C-SA to be learned in the service MACT, will use\n\r"
    "  it as forwarding destination.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_bmact entry_add b_mac_addr 0 b_vid 0 drop_sa 0 sa_learn_fec_id\n\r"
    "  0 i_sid_domain 0 sys_port_id 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, BIT(6)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_BMACT_ENTRY_ADD_ENTRY_ADD_BMACT_ENTRY_INFO_I_SID_DOMAIN_ID, 
    "i_sid_domain", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  bmact_entry_info.i_sid_domain:\n\r"
    "  I-SID-Domain.When not 'SOC_PPC_ISID_DM_DISABLE', the VSI is assigned according to\n\r"
    "  the I-SID * I-SID domain\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_bmact entry_add b_mac_addr 0 b_vid 0 drop_sa 0 sa_learn_fec_id\n\r"
    "  0 i_sid_domain 0 sys_port_id 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, BIT(6)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_BMACT_ENTRY_ADD_ENTRY_ADD_BMACT_ENTRY_INFO_SYS_PORT_ID_ID, 
    "sys_port_id", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  bmact_entry_info.sys_port_id:\n\r"
    "  System port ID.May be single port or LAG.Upon DA lookup: The destination\n\r"
    "  system port, for packets that forwarded according to the B-VID * B-DA. Upon SA\n\r"
    "  Lookup: Expected source system port. When the source port is not the\n\r"
    "  expected, indicates that B-SA was transplanted, and the CPU is informed.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_bmact entry_add b_mac_addr 0 b_vid 0 drop_sa 0 sa_learn_fec_id\n\r"
    "  0 i_sid_domain 0 sys_port_id 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, BIT(6)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_BMACT_ENTRY_REMOVE_ENTRY_REMOVE_ID, 
    "entry_remove", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Remove an entry from the B-MACT DB.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_bmact entry_remove b_mac_addr 0 b_vid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, BIT(7)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_BMACT_ENTRY_REMOVE_ENTRY_REMOVE_BMAC_KEY_B_MAC_ADDR_ID, 
    "b_mac_addr", 
    (PARAM_VAL_RULES *)&soc_ppd_api_mac_addr_vals[0], 
    (sizeof(soc_ppd_api_mac_addr_vals) / sizeof(soc_ppd_api_mac_addr_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  bmac_key.b_mac_addr:\n\r"
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    "  B-MAC-Address\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_bmact entry_remove b_mac_addr 0 b_vid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, BIT(7)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_BMACT_ENTRY_REMOVE_ENTRY_REMOVE_BMAC_KEY_B_VID_ID, 
    "b_vid", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  bmac_key.b_vid:\n\r"
    "  B-VID\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_bmact entry_remove b_mac_addr 0 b_vid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, BIT(7)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_BMACT_ENTRY_REMOVE_ENTRY_REMOVE_BMAC_KEY_FLAGS_ID, 
    "flags", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  bmac_key.flags:\n\r"
    "  flags can be 1 SOC_PPC_BMACT_ENTRY_TYPE_FRWRD or 2 SOC_PPC_BMACT_ENTRY_TYPE_LEARN\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_bmact entry_remove b_mac_addr 0 b_vid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, BIT(7)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },
  { 
    SOC_PARAM_PPD_FRWRD_BMACT_ENTRY_GET_ENTRY_GET_ID, 
    "entry_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Get an entry from the B-MACT DB.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_bmact entry_get b_mac_addr 0 b_vid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(14)},
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_BMACT_ENTRY_GET_ENTRY_GET_BMAC_KEY_B_MAC_ADDR_ID, 
    "b_mac_addr", 
    (PARAM_VAL_RULES *)&soc_ppd_api_mac_addr_vals[0], 
    (sizeof(soc_ppd_api_mac_addr_vals) / sizeof(soc_ppd_api_mac_addr_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  bmac_key.b_mac_addr:\n\r"
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    "  B-MAC-Address\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_bmact entry_get b_mac_addr 0 b_vid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(14)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_BMACT_ENTRY_GET_ENTRY_GET_BMAC_KEY_B_VID_ID, 
    "b_vid", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  bmac_key.b_vid:\n\r"
    "  B-VID\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_bmact entry_get b_mac_addr 0 b_vid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(14)},
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_BMACT_ENTRY_GET_ENTRY_GET_BMAC_KEY_FLAGS_ID, 
    "flags", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  bmac_key.flags:\n\r"
    "  flags can be 1 SOC_PPC_BMACT_ENTRY_TYPE_FRWRD or 2 SOC_PPC_BMACT_ENTRY_TYPE_LEARN\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_bmact entry_get b_mac_addr 0 b_vid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(14)},
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },
  { 
    SOC_PARAM_PPD_API_FRWRD_BMACT_ID, 
    "frwrd_bmact", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "",
    "", 
    "",
    {0, 0, 0, 0, 0, 0, 0, BIT(0)|BIT(1)|BIT(2)|BIT(3)|BIT(6)|BIT(7), 0, 0, BIT(14), BIT(4), BIT(1)}, 
    1, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
#endif /* } frwrd_bmact*/












  #ifdef UI_FRWRD_TRILL/* { frwrd_trill*/
  { 
    SOC_PARAM_PPD_FRWRD_TRILL_MULTICAST_KEY_MASK_SET_MULTICAST_KEY_MASK_SET_ID, 
    "multicast_key_mask_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set the key type of TRILL multicast routes lookup. The following fields are\n\r"
    "  optional: Ing-Nick-key; Adjacent-EEP-key; FID-key\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_trill multicast_key_mask_set mask_fid 0 mask_adjacent_nickname\n\r"
    "  0 mask_ing_nickname 0\n\r"
#endif 
    "",
    "",
    {BIT(0), 0, 0, 0, 0}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_TRILL_MULTICAST_KEY_MASK_SET_MULTICAST_KEY_MASK_SET_MASKED_FIELDS_MASK_FID_ID, 
    "mask_fid", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  masked_fields.mask_fid:\n\r"
    "  Mask FID:When FALSE: The tree route forwarding depends on packet FID\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_trill multicast_key_mask_set mask_fid 0 mask_adjacent_nickname\n\r"
    "  0 mask_ing_nickname 0\n\r"
#endif 
    "",
    "",
    {BIT(0), 0, 0, 0, 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_TRILL_MULTICAST_KEY_MASK_SET_MULTICAST_KEY_MASK_SET_MASKED_FIELDS_MASK_ADJACENT_NICKNAME_ID, 
    "mask_adjacent_nickname", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  masked_fields.mask_adjacent_nickname:\n\r"
    "  Mask Adjacent NickName:When FALSE: The tree route forwarding depends on\n\r"
    "  packet Adjacent NickName.Used for TRILL RPF\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_trill multicast_key_mask_set mask_fid 0 mask_adjacent_nickname\n\r"
    "  0 mask_ing_nickname 0\n\r"
#endif 
    "",
    "",
    {BIT(0), 0, 0, 0, 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_TRILL_MULTICAST_KEY_MASK_SET_MULTICAST_KEY_MASK_SET_MASKED_FIELDS_MASK_ING_NICKNAME_ID, 
    "mask_ing_nickname", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  masked_fields.mask_ing_nickname:\n\r"
    "  Mask Ingress NickName:When FALSE: The tree route forwarding depends on packet\n\r"
    "  Ingress NickName. The Ingress Nick name is the packet originator.Used for\n\r"
    "  TRILL RPF\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_trill multicast_key_mask_set mask_fid 0 mask_adjacent_nickname\n\r"
    "  0 mask_ing_nickname 0\n\r"
#endif 
    "",
    "",
    {BIT(0), 0, 0, 0, 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_TRILL_MULTICAST_KEY_MASK_GET_MULTICAST_KEY_MASK_GET_ID, 
    "multicast_key_mask_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set the key type of TRILL multicast routes lookup. The following fields are\n\r"
    "  optional: Ing-Nick-key; Adjacent-EEP-key; FID-key\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_trill multicast_key_mask_get\n\r"
#endif 
    "",
    "",
    {BIT(18), 0, 0, 0, 0}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_TRILL_UNICAST_ROUTE_ADD_UNICAST_ROUTE_ADD_ID, 
    "unicast_route_add", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Map nick-name to a FEC entry ID.Used for forwarding packets with the nick\n\r"
    "  name as destination to the FEC, and to associate the FEC as learning\n\r"
    "  information, upon receiving packets with the Nick-Name as the source address\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_trill unicast_route_add lif_index 0 nickname_key 0 fec_id 0\n\r"
#endif 
    "",
    "",
    {BIT(31), 0, 0, 0, 0}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_TRILL_UNICAST_ROUTE_ADD_UNICAST_ROUTE_ADD_LIF_INDEX_ID, 
    "lif_index", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  lif_index:\n\r"
    "  Index to the Logical interfaces table	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_trill unicast_route_add lif_index 0 nickname_key 0 fec_id 0\n\r"
#endif 
    "",
    "",
    {BIT(31), 0, 0, 0, 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_TRILL_UNICAST_ROUTE_ADD_UNICAST_ROUTE_ADD_NICKNAME_KEY_ID, 
    "nickname_key", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  nickname_key:\n\r"
    "  TRILL NickName key	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_trill unicast_route_add lif_index 0 nickname_key 0 fec_id 0\n\r"
#endif 
    "",
    "",
    {BIT(31), 0, 0, 0, 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_TRILL_UNICAST_ROUTE_ADD_UNICAST_ROUTE_ADD_FEC_ID_ID, 
    "fec_id", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  fec_id:\n\r"
    "  FEC Entry ID.The FEC is expected to hold the out-port as destination and an\n\r"
    "  EEP that points to the link layer encapsulation towards the adjacent\n\r"
    "  RBridge.The FEC ID may also point to ECMP with list of adjacent RBridges, and\n\r"
    "  the connected ports.	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_trill unicast_route_add lif_index 0 nickname_key 0 fec_id 0\n\r"
#endif 
    "",
    "",
    {BIT(31), 0, 0, 0, 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_TRILL_UNICAST_ROUTE_ADD_UNICAST_ROUTE_ADD_LEARN_ENABLE_ID, 
    "learn_enable", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  lif_entry_info.value.trill.learn_enable:\n\r"
    "  Indicate whether learning of ingress Nick-name is enable on this interface\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_trill unicast_route_add lif_index 0 nickname_key 0 fec_id 0\n\r"
#endif 
    "",
    "",
    {BIT(31), 0, 0, 0, 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },
  { 
    SOC_PARAM_PPD_FRWRD_TRILL_UNICAST_ROUTE_GET_UNICAST_ROUTE_GET_ID, 
    "unicast_route_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Get mapping of TRILL nickname to FEC ID and LIF index\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_trill unicast_route_get nickname_key 0\n\r"
#endif 
    "",
    "",
    {0, BIT(29), 0, 0, 0}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_TRILL_UNICAST_ROUTE_GET_UNICAST_ROUTE_GET_NICKNAME_KEY_ID, 
    "nickname_key", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  nickname_key:\n\r"
    "  TRILL NickName key	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_trill unicast_route_get nickname_key 0\n\r"
#endif 
    "",
    "",
    {0, BIT(29), 0, 0, 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_TRILL_UNICAST_ROUTE_REMOVE_UNICAST_ROUTE_REMOVE_ID, 
    "unicast_route_remove", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Remove TRILL nick-name\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_trill unicast_route_remove nickname_key 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(21), 0}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_TRILL_UNICAST_ROUTE_REMOVE_UNICAST_ROUTE_REMOVE_NICKNAME_KEY_ID, 
    "nickname_key", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  nickname_key:\n\r"
    "  TRILL NickName key	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_trill unicast_route_remove nickname_key 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, BIT(21), 0}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_TRILL_MULTICAST_ROUTE_ADD_MULTICAST_ROUTE_ADD_ID, 
    "multicast_route_add", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Map a TRILL distribution tree to a FEC\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_trill multicast_route_add adjacent_eep 0 ing_nick 0 fid 0\n\r"
    "  tree_nick 0 mc_id 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, BIT(8)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_TRILL_MULTICAST_ROUTE_ADD_MULTICAST_ROUTE_ADD_TRILL_MC_KEY_ADJACENT_EEP_ID, 
    "adjacent_eep", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  trill_mc_key.adjacent_eep:\n\r"
    "  The Adjacent egress encapsulation pointer.Indicates the adjacent RBridge that\n\r"
    "  the packet arrived from. The TRILL RPF enables discarding the packet, when\n\r"
    "  the ingress nick-name is invalid for packets that arrive from the adjacent\n\r"
    "  RBridge.'SOC_PPC_TRILL_MC_IGNORE_FIELD': Indicates that the adjacent_eep is masked\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_trill multicast_route_add adjacent_eep 0 ing_nick 0 fid 0\n\r"
    "  tree_nick 0 mc_id 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, BIT(8)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_TRILL_MULTICAST_ROUTE_ADD_MULTICAST_ROUTE_ADD_TRILL_MC_KEY_ING_NICK_ID, 
    "ing_nick", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  trill_mc_key.ing_nick:\n\r"
    "  The Ingress Nick-Name as it arrives on the packet TRILL header.Indicates the\n\r"
    "  originator RBridge. The TRILL RPF enables discarding the packet, when the\n\r"
    "  ingress nick-name is invalid for packets that arrive from the adjacent\n\r"
    "  RBridge.'SOC_PPC_TRILL_MC_IGNORE_FIELD': Indicates that the ing_nickname is masked\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_trill multicast_route_add adjacent_eep 0 ing_nick 0 fid 0\n\r"
    "  tree_nick 0 mc_id 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, BIT(8)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_TRILL_MULTICAST_ROUTE_ADD_MULTICAST_ROUTE_ADD_TRILL_MC_KEY_FID_ID, 
    "fid", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  trill_mc_key.fid:\n\r"
    "  MACT Filter ID.'SOC_PPC_TRILL_MC_IGNORE_FIELD': The FID in the TRILL multicast\n\r"
    "  lookup.The FID is used as part of the key to:1.	Attach the assigned\n\r"
    "  forwarders of the VLAN. When masked, the multicast group should contain the\n\r"
    "  assigned forwarders of all the VLANs.2.	Enable pruning when the IS-IS\n\r"
    "  protocol finds out that there is no purpose to replicate to a specific\n\r"
    "  adjacent, since none of the RBridges behind have assigned forwarder for the\n\r"
    "  VLAN.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_trill multicast_route_add adjacent_eep 0 ing_nick 0 fid 0\n\r"
    "  tree_nick 0 mc_id 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, BIT(8)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_TRILL_MULTICAST_ROUTE_ADD_MULTICAST_ROUTE_ADD_TRILL_MC_KEY_TREE_NICK_ID, 
    "tree_nick", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  trill_mc_key.tree_nick:\n\r"
    "  Dist-Tree-Nick: The multicast tree nickname\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_trill multicast_route_add adjacent_eep 0 ing_nick 0 fid 0\n\r"
    "  tree_nick 0 mc_id 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, BIT(8)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_TRILL_MULTICAST_ROUTE_ADD_MULTICAST_ROUTE_ADD_MC_ID_ID, 
    "mc_id", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  mc_id:\n\r"
    "  Multicast ID.The multicast ID should contain the L2 assigned forwarder ports\n\r"
    "  and a list of the adjacent RBridges, according to the distribution tree\n\r"
    "  topology. An adjacent RBridge is pointed via the port connected to it, and a\n\r"
    "  Copy Unique Data that points to the encapsulation pointer that contains its\n\r"
    "  link-layer encapsulation.	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_trill multicast_route_add adjacent_eep 0 ing_nick 0 fid 0\n\r"
    "  tree_nick 0 mc_id 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, BIT(8)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },
  { 
    SOC_PARAM_PPD_FRWRD_TRILL_MULTICAST_ROUTE_ADD_MULTICAST_ROUTE_ADD_TRILL_MC_KEY_ESADI_ID, 
    "esadi", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  trill_mc_key.esadi:\n\r"    
    "  ESADI bit \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_trill multicast_route_add adjacent_nick 0 ing_nick 0 fid 0\n\r"
    "  tree_nick 0 mc_id 0 esadi 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, BIT(8)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  }, 
  { 
    SOC_PARAM_PPD_FRWRD_TRILL_MULTICAST_ROUTE_GET_MULTICAST_ROUTE_GET_ID, 
    "multicast_route_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Get Mapping of TRILL distribution tree to a FEC\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_trill multicast_route_get adjacent_eep 0 ing_nick 0 fid 0\n\r"
    "  tree_nick 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, BIT(9)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_TRILL_MULTICAST_ROUTE_GET_MULTICAST_ROUTE_GET_TRILL_MC_KEY_ADJACENT_EEP_ID, 
    "adjacent_eep", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  trill_mc_key.adjacent_eep:\n\r"
    "  The Adjacent egress encapsulation pointer.Indicates the adjacent RBridge that\n\r"
    "  the packet arrived from. The TRILL RPF enables discarding the packet, when\n\r"
    "  the ingress nick-name is invalid for packets that arrive from the adjacent\n\r"
    "  RBridge.'SOC_PPC_TRILL_MC_IGNORE_FIELD': Indicates that the adjacent_eep is masked\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_trill multicast_route_get adjacent_eep 0 ing_nick 0 fid 0\n\r"
    "  tree_nick 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, BIT(9)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_TRILL_MULTICAST_ROUTE_GET_MULTICAST_ROUTE_GET_TRILL_MC_KEY_ING_NICK_ID, 
    "ing_nick", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  trill_mc_key.ing_nick:\n\r"
    "  The Ingress Nick-Name as it arrives on the packet TRILL header.Indicates the\n\r"
    "  originator RBridge. The TRILL RPF enables discarding the packet, when the\n\r"
    "  ingress nick-name is invalid for packets that arrive from the adjacent\n\r"
    "  RBridge.'SOC_PPC_TRILL_MC_IGNORE_FIELD': Indicates that the ing_nickname is masked\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_trill multicast_route_get adjacent_eep 0 ing_nick 0 fid 0\n\r"
    "  tree_nick 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, BIT(9)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_TRILL_MULTICAST_ROUTE_GET_MULTICAST_ROUTE_GET_TRILL_MC_KEY_FID_ID, 
    "fid", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  trill_mc_key.fid:\n\r"
    "  MACT Filter ID.'SOC_PPC_TRILL_MC_IGNORE_FIELD': The FID in the TRILL multicast\n\r"
    "  lookup.The FID is used as part of the key to:1.	Attach the assigned\n\r"
    "  forwarders of the VLAN. When masked, the multicast group should contain the\n\r"
    "  assigned forwarders of all the VLANs.2.	Enable pruning when the IS-IS\n\r"
    "  protocol finds out that there is no purpose to replicate to a specific\n\r"
    "  adjacent, since none of the RBridges behind have assigned forwarder for the\n\r"
    "  VLAN.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_trill multicast_route_get adjacent_eep 0 ing_nick 0 fid 0\n\r"
    "  tree_nick 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, BIT(9)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_TRILL_MULTICAST_ROUTE_GET_MULTICAST_ROUTE_GET_TRILL_MC_KEY_TREE_NICK_ID, 
    "tree_nick", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  trill_mc_key.tree_nick:\n\r"
    "  Dist-Tree-Nick: The multicast tree nickname\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_trill multicast_route_get adjacent_eep 0 ing_nick 0 fid 0\n\r"
    "  tree_nick 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, BIT(9)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },
  { 
    SOC_PARAM_PPD_FRWRD_TRILL_MULTICAST_ROUTE_GET_MULTICAST_ROUTE_GET_TRILL_MC_KEY_ESADI_ID, 
    "esadi", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  trill_mc_key.esadi:\n\r"    
    "  ESADI bit \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_trill multicast_route_add adjacent_nick 0 ing_nick 0 fid 0\n\r"
    "  tree_nick 0 mc_id 0 esadi 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, BIT(9)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  }, 
  { 
    SOC_PARAM_PPD_FRWRD_TRILL_MULTICAST_ROUTE_GET_MULTICAST_ROUTE_GET_ID, 
    "multicast_route_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Get Mapping of TRILL distribution tree to a FEC\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_trill multicast_route_get adjacent_eep 0 ing_nick 0 fid 0\n\r"
    "  tree_nick 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, BIT(9)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },
  { 
    SOC_PARAM_PPD_FRWRD_TRILL_MULTICAST_ROUTE_REMOVE_MULTICAST_ROUTE_REMOVE_ID, 
    "multicast_route_remove", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Remove a TRILL distribution tree mapping\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_trill multicast_route_remove adjacent_eep 0 ing_nick 0 fid 0\n\r"
    "  tree_nick 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, BIT(10)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_TRILL_MULTICAST_ROUTE_REMOVE_MULTICAST_ROUTE_REMOVE_TRILL_MC_KEY_ADJACENT_EEP_ID, 
    "adjacent_eep", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  trill_mc_key.adjacent_eep:\n\r"
    "  The Adjacent egress encapsulation pointer.Indicates the adjacent RBridge that\n\r"
    "  the packet arrived from. The TRILL RPF enables discarding the packet, when\n\r"
    "  the ingress nick-name is invalid for packets that arrive from the adjacent\n\r"
    "  RBridge.'SOC_PPC_TRILL_MC_IGNORE_FIELD': Indicates that the adjacent_eep is masked\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_trill multicast_route_remove adjacent_eep 0 ing_nick 0 fid 0\n\r"
    "  tree_nick 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, BIT(10)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_TRILL_MULTICAST_ROUTE_REMOVE_MULTICAST_ROUTE_REMOVE_TRILL_MC_KEY_ING_NICK_ID, 
    "ing_nick", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  trill_mc_key.ing_nick:\n\r"
    "  The Ingress Nick-Name as it arrives on the packet TRILL header.Indicates the\n\r"
    "  originator RBridge. The TRILL RPF enables discarding the packet, when the\n\r"
    "  ingress nick-name is invalid for packets that arrive from the adjacent\n\r"
    "  RBridge.'SOC_PPC_TRILL_MC_IGNORE_FIELD': Indicates that the ing_nickname is masked\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_trill multicast_route_remove adjacent_eep 0 ing_nick 0 fid 0\n\r"
    "  tree_nick 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, BIT(10)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_TRILL_MULTICAST_ROUTE_REMOVE_MULTICAST_ROUTE_REMOVE_TRILL_MC_KEY_FID_ID, 
    "fid", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  trill_mc_key.fid:\n\r"
    "  MACT Filter ID.'SOC_PPC_TRILL_MC_IGNORE_FIELD': The FID in the TRILL multicast\n\r"
    "  lookup.The FID is used as part of the key to:1.	Attach the assigned\n\r"
    "  forwarders of the VLAN. When masked, the multicast group should contain the\n\r"
    "  assigned forwarders of all the VLANs.2.	Enable pruning when the IS-IS\n\r"
    "  protocol finds out that there is no purpose to replicate to a specific\n\r"
    "  adjacent, since none of the RBridges behind have assigned forwarder for the\n\r"
    "  VLAN.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_trill multicast_route_remove adjacent_eep 0 ing_nick 0 fid 0\n\r"
    "  tree_nick 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, BIT(10)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_TRILL_MULTICAST_ROUTE_REMOVE_MULTICAST_ROUTE_REMOVE_TRILL_MC_KEY_TREE_NICK_ID, 
    "tree_nick", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  trill_mc_key.tree_nick:\n\r"
    "  Dist-Tree-Nick: The multicast tree nickname\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_trill multicast_route_remove adjacent_eep 0 ing_nick 0 fid 0\n\r"
    "  tree_nick 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, BIT(10)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },
  { 
    SOC_PARAM_PPD_FRWRD_TRILL_MULTICAST_ROUTE_REMOVE_MULTICAST_ROUTE_REMOVE_TRILL_MC_KEY_ESADI_ID, 
    "esadi", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  trill_mc_key.esadi:\n\r"    
    "  ESADI bit \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_trill multicast_route_add adjacent_nick 0 ing_nick 0 fid 0\n\r"
    "  tree_nick 0 mc_id 0 esadi 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, BIT(10)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  }, 
  { 
    SOC_PARAM_PPD_FRWRD_TRILL_ADJ_INFO_SET_ADJ_INFO_SET_ID, 
    "adj_info_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Map SA MAC adress to expected adjacent EEP and expected system port in\n\r"
    "  SA-Based_adj db.Used for authenticating incoming trill packets\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_trill adj_info_set mac_address_key 0 sys_id 0 sys_port_type 0\n\r"
    "  expect_adjacent_eep 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, BIT(11)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_TRILL_ADJ_INFO_SET_ADJ_INFO_SET_MAC_ADDRESS_KEY_ID, 
    "mac_address_key", 
    (PARAM_VAL_RULES *)&soc_ppd_api_mac_addr_vals[0], 
    (sizeof(soc_ppd_api_mac_addr_vals) / sizeof(soc_ppd_api_mac_addr_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  mac_address_key:\n\r"
    "  MAC address to set authentication over it.	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_trill adj_info_set mac_address_key 0 sys_id 0 sys_port_type 0\n\r"
    "  expect_adjacent_eep 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, BIT(11)}, 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_TRILL_ADJ_INFO_SET_ADJ_INFO_SET_MAC_AUTH_INFO_EXPECT_SYSTEM_PORT_SYS_ID_ID, 
    "sys_id", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  mac_auth_info.expect_system_port.sys_id:\n\r"
    "  The system port value, according to the type (Single or LAG).For LAG the\n\r"
    "  value is the group ID.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_trill adj_info_set mac_address_key 0 sys_id 0 sys_port_type 0\n\r"
    "  expect_adjacent_eep 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, BIT(11)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_TRILL_ADJ_INFO_SET_ADJ_INFO_SET_MAC_AUTH_INFO_EXPECT_SYSTEM_PORT_SYS_PORT_TYPE_ID, 
    "sys_port_type", 
    (PARAM_VAL_RULES *)&SOC_PPD_SAND_PP_SYS_PORT_TYPE_rule[0], 
    (sizeof(SOC_PPD_SAND_PP_SYS_PORT_TYPE_rule) / sizeof(SOC_PPD_SAND_PP_SYS_PORT_TYPE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  mac_auth_info.expect_system_port.sys_port_type:\n\r"
    "  The system port type single/LAG.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_trill adj_info_set mac_address_key 0 sys_id 0 sys_port_type 0\n\r"
    "  expect_adjacent_eep 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, BIT(11)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_TRILL_ADJ_INFO_SET_ADJ_INFO_SET_MAC_AUTH_INFO_EXPECT_ADJACENT_EEP_ID, 
    "expect_adjacent_eep", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  mac_auth_info.expect_adjacent_eep:\n\r"
    "  Expected adjacent EEP. If the EEP of the incoming packet is not equal to\n\r"
    "  this, the check fails and proper action is taken.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_trill adj_info_set mac_address_key 0 sys_id 0 sys_port_type 0\n\r"
    "  expect_adjacent_eep 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, BIT(11)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_TRILL_ADJ_INFO_SET_ADJ_INFO_SET_ENABLE_ID, 
    "enable", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  enable:\n\r"
    "  Set to TRUE to add the entry, and to FALSE to remove the entry from the DB.	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_trill adj_info_set mac_address_key 0 sys_id 0 sys_port_type 0\n\r"
    "  expect_adjacent_eep 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, BIT(11)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_TRILL_ADJ_INFO_GET_ADJ_INFO_GET_ID, 
    "adj_info_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Map SA MAC adress to expected adjacent EEP and expected system port in\n\r"
    "  SA-Based_adj db.Used for authenticating incoming trill packets\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_trill adj_info_get mac_address_key 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, BIT(12)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_TRILL_ADJ_INFO_GET_ADJ_INFO_GET_MAC_ADDRESS_KEY_ID, 
    "mac_address_key", 
    (PARAM_VAL_RULES *)&soc_ppd_api_mac_addr_vals[0], 
    (sizeof(soc_ppd_api_mac_addr_vals) / sizeof(soc_ppd_api_mac_addr_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  mac_address_key:\n\r"
    "  MAC address to set authentication over it.	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_trill adj_info_get mac_address_key 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, BIT(12)}, 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  }, 
  { 
    SOC_PARAM_PPD_FRWRD_TRILL_ADJ_INFO_GET_ADJ_INFO_GET_MAC_AUTH_INFO_EXPECT_SYSTEM_PORT_SYS_ID_ID, 
    "sys_id", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  mac_auth_info.expect_system_port.sys_id:\n\r"
    "  The system port value, according to the type (Single or LAG).For LAG the\n\r"
    "  value is the group ID.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_trill adj_info_get mac_address_key 0 sys_id 0 \n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, BIT(12)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  }, 
  { 
    SOC_PARAM_PPD_FRWRD_TRILL_GLOBAL_INFO_SET_GLOBAL_INFO_SET_ID, 
    "global_info_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set TRILL global attributes\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_trill global_info_set cfg_ttl 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, BIT(14)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_TRILL_GLOBAL_INFO_SET_GLOBAL_INFO_SET_GLBL_INFO_CFG_TTL_ID, 
    "cfg_ttl", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  glbl_info.cfg_ttl:\n\r"
    "  Initial TRILL time to live to be assigned for any trill packet.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_trill global_info_set cfg_ttl 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, BIT(14)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_TRILL_GLOBAL_INFO_GET_GLOBAL_INFO_GET_ID, 
    "global_info_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set TRILL global attributes\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_trill global_info_get\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, BIT(21)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_TRILL_GET_PROCS_PTR_GET_PROCS_PTR_ID, 
    "get_procs_ptr", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Get the pointer to the list of procedures of the soc_ppd_api_frwrd_trill module.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_trill get_procs_ptr\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(13)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_API_FRWRD_TRILL_ID, 
    "frwrd_trill", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "",
    "", 
    "",
    {BIT(0)|BIT(18)|BIT(31), BIT(29), 0, BIT(21), 0, 0, 0, BIT(8)|BIT(9)|BIT(10)|BIT(11)|BIT(12)|BIT(14), BIT(21), 0, BIT(13)}, 
    1, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
#endif /* } frwrd_trill*/







#ifdef UI_FRWRD_FEC/* { frwrd_fec*/
  { 
    SOC_PARAM_PPD_FRWRD_FEC_GLBL_INFO_SET_GLBL_INFO_SET_ID, 
    "glbl_info_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Setting global information of the FEC table (including resources to use)\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_fec glbl_info_set ecmp_sizes_index 0\n\r"
    "  ecmp_sizes 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_FEC_GLBL_INFO_SET_GLBL_INFO_SET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_FEC_GLBL_INFO_SET_GLBL_INFO_SET_GLBL_INFO_ECMP_SIZES_INDEX_ID, 
    "ecmp_sizes_index", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  ecmp_sizes_index:\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_fec glbl_info_set ecmp_sizes_index 0\n\r"
    "  ecmp_sizes 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_FEC_GLBL_INFO_SET_GLBL_INFO_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_FEC_GLBL_INFO_SET_GLBL_INFO_SET_GLBL_INFO_ECMP_SIZES_ID, 
    "ecmp_sizes", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  glbl_info.ecmp_sizes[ prm_ecmp_sizes_index]:\n\r"
    "  Array that includes the supported sizes of ECMPs.Range: 1-288.16 ECMP sizes\n\r"
    "  are supported. The sizes are between 1 and 288.Petra-B: ecmp_sizes[0] has to\n\r"
    "  be 1. This is the default obtained by _clear.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_fec glbl_info_set ecmp_sizes_index 0\n\r"
    "  ecmp_sizes 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_FEC_GLBL_INFO_SET_GLBL_INFO_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_FEC_GLBL_INFO_GET_GLBL_INFO_GET_ID, 
    "glbl_info_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Setting global information of the FEC table (including resources to use)\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_fec glbl_info_get\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_FEC_GLBL_INFO_GET_GLBL_INFO_GET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_FEC_ENTRY_ADD_ENTRY_ADD_ID, 
    "entry_add", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Add FEC entry. May include protection of type Facility or Path. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_fec entry_add fec_ndx 0 protect_type 0 expected_in_rif 0\n\r"
    "  rpf_mode 0 dist_tree_nick 0 out_rif 0 out_ac_id 0 eep 0 dest_val 0 dest_type\n\r"
    "  0 type 0 expected_in_rif 0 rpf_mode 0 dist_tree_nick 0 out_rif 0 out_ac_id 0\n\r"
    "  eep 0 dest_val 0 dest_type 0 type 0 oam_instance_id 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_FEC_ENTRY_ADD_ENTRY_ADD_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_FEC_ENTRY_ADD_ENTRY_ADD_FEC_NDX_ID, 
    "fec_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  fec_ndx:\n\r"
    "  Index in the FEC table.Range: 0 - 16383. Has to be even for protected FECs in\n\r"
    "  Petra-B.	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_fec entry_add fec_ndx 0 protect_type 0 expected_in_rif 0\n\r"
    "  rpf_mode 0 dist_tree_nick 0 out_rif 0 out_ac_id 0 eep 0 dest_val 0 dest_type\n\r"
    "  0 type 0 expected_in_rif 0 rpf_mode 0 dist_tree_nick 0 out_rif 0 out_ac_id 0\n\r"
    "  eep 0 dest_val 0 dest_type 0 type 0 oam_instance_id 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_FEC_ENTRY_ADD_ENTRY_ADD_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_FEC_ENTRY_ADD_ENTRY_ADD_PROTECT_TYPE_ID, 
    "protect_type", 
    (PARAM_VAL_RULES *)&SOC_PPC_FRWRD_FEC_PROTECT_TYPE_rule[0], 
    (sizeof(SOC_PPC_FRWRD_FEC_PROTECT_TYPE_rule) / sizeof(SOC_PPC_FRWRD_FEC_PROTECT_TYPE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  protect_type:\n\r"
    "  Protection type may be None, Path, or Facility.	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_fec entry_add fec_ndx 0 protect_type 0 expected_in_rif 0\n\r"
    "  rpf_mode 0 dist_tree_nick 0 out_rif 0 out_ac_id 0 eep 0 dest_val 0 dest_type\n\r"
    "  0 type 0 expected_in_rif 0 rpf_mode 0 dist_tree_nick 0 out_rif 0 out_ac_id 0\n\r"
    "  eep 0 dest_val 0 dest_type 0 type 0 oam_instance_id 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_FEC_ENTRY_ADD_ENTRY_ADD_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
    { 
    SOC_PARAM_PPD_FRWRD_FEC_ENTRY_ADD_ENTRY_ADD_WORKING_FEC_TRAP_INFO_SNOOP_ACTION_STRENGTH_ID, 
    "working_snoop_action_strength", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  working_fec.trap_info.snoop_action_strength:\n\r"
    "  Value that identifies the strength of the assignment of Snoop action to the\n\r"
    "  packet. Through the packet processing pipe, many snooping decisions may be\n\r"
    "  taken; yet one decision may overwrite a former decision only if it stronger,\n\r"
    "  i.e., its strength is higher than the last decision that was taken. Range\n\r"
    "  0-3. Relevant only for Petra-B.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_fec entry_add fec_ndx 0 protect_type 0 snoop_action_strength 0\n\r"
    "  frwrd_action_strength 0 trap_code 0 expected_in_rif 0 rpf_mode 0\n\r"
    "  dist_tree_nick 0 out_rif 0 out_ac_id 0 eep 0 dest_val 0 dest_type 0 type 0\n\r"
    "  snoop_action_strength 0 frwrd_action_strength 0 trap_code 0 expected_in_rif 0\n\r"
    "  rpf_mode 0 dist_tree_nick 0 out_rif 0 out_ac_id 0 eep 0 dest_val 0 dest_type\n\r"
    "  0 type 0 oam_instance_id 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_FEC_ENTRY_ADD_ENTRY_ADD_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_FEC_ENTRY_ADD_ENTRY_ADD_WORKING_FEC_TRAP_INFO_FRWRD_ACTION_STRENGTH_ID, 
    "working_frwrd_action_strength", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  working_fec.trap_info.frwrd_action_strength:\n\r"
    "  Value that identifies the strength of the assignment of Forward action to the\n\r"
    "  packet. Through the packet processing pipe, many forwarding decisions may be\n\r"
    "  taken; yet one decision may overwrite a former decision only if it stronger,\n\r"
    "  i.e., its strength is higher than the last decision that was taken.\n\r"
    "  Range 0-7.Relevant only for Petra-B.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_fec entry_add fec_ndx 0 protect_type 0 snoop_action_strength 0\n\r"
    "  frwrd_action_strength 0 trap_code 0 expected_in_rif 0 rpf_mode 0\n\r"
    "  dist_tree_nick 0 out_rif 0 out_ac_id 0 eep 0 dest_val 0 dest_type 0 type 0\n\r"
    "  snoop_action_strength 0 frwrd_action_strength 0 trap_code 0 expected_in_rif 0\n\r"
    "  rpf_mode 0 dist_tree_nick 0 out_rif 0 out_ac_id 0 eep 0 dest_val 0 dest_type\n\r"
    "  0 type 0 oam_instance_id 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_FEC_ENTRY_ADD_ENTRY_ADD_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_FEC_ENTRY_ADD_ENTRY_ADD_WORKING_FEC_TRAP_INFO_TRAP_CODE_ID, 
    "working_trap_code", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
#ifdef COMPILER_STRING_CONST_LIMIT
    "  Full documentation cannot be displayed with -pendantic compiler\n\r",
#else
    "  working_fec.trap_info.trap_code:\n\r"
    "  Sets the CPU Trap code. For trapped packet the CPU code are associated into\n\r"
    "  the packet headers. The CPU code also used as index for the\n\r"
    "  forwarding/snooping actions. see to soc_ppd_trap_frwrd_profile_info_set(),\n\r"
    "  soc_ppd_trap_snoop_profile_info_set(). Range Petra-B: 0-255.To know the legal\n\r"
    "  range in specific use of this field, see the documentation in that specific\n\r"
    "  use.Affects Both, the CPU code set on the packets header and the index to\n\r"
    "  access the forwarding and snooping tables. \n\r"
    "",
#endif /* COMPILER_STRING_CONST_LIMIT */
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_fec entry_add fec_ndx 0 protect_type 0 snoop_action_strength 0\n\r"
    "  frwrd_action_strength 0 trap_code 0 expected_in_rif 0 rpf_mode 0\n\r"
    "  dist_tree_nick 0 out_rif 0 out_ac_id 0 eep 0 dest_val 0 dest_type 0 type 0\n\r"
    "  snoop_action_strength 0 frwrd_action_strength 0 trap_code 0 expected_in_rif 0\n\r"
    "  rpf_mode 0 dist_tree_nick 0 out_rif 0 out_ac_id 0 eep 0 dest_val 0 dest_type\n\r"
    "  0 type 0 oam_instance_id 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_FEC_ENTRY_ADD_ENTRY_ADD_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_FEC_ENTRY_ADD_ENTRY_ADD_WORKING_FEC_RPF_INFO_EXPECTED_IN_RIF_ID, 
    "working_ipmc_expected_in_rif", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  working_fec.rpf_info.expected_in_rif:\n\r"
    "  Expected In-RIF used in the MC RPF check\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_fec entry_add fec_ndx 0 protect_type 0 expected_in_rif 0\n\r"
    "  rpf_mode 0 dist_tree_nick 0 out_rif 0 out_ac_id 0 eep 0 dest_val 0 dest_type\n\r"
    "  0 type 0 expected_in_rif 0 rpf_mode 0 dist_tree_nick 0 out_rif 0 out_ac_id 0\n\r"
    "  eep 0 dest_val 0 dest_type 0 type 0 oam_instance_id 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_FEC_ENTRY_ADD_ENTRY_ADD_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_FEC_ENTRY_ADD_ENTRY_ADD_WORKING_FEC_RPF_INFO_RPF_MODE_ID, 
    "working_ip_rpf_mode", 
    (PARAM_VAL_RULES *)&SOC_PPC_FRWRD_FEC_RPF_MODE_rule[0], 
    (sizeof(SOC_PPC_FRWRD_FEC_RPF_MODE_rule) / sizeof(SOC_PPC_FRWRD_FEC_RPF_MODE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  working_fec.rpf_info.rpf_mode:\n\r"
    "  RPF mode (explicit/SIP/SIP_AS_IS).This is relevant only for FEC entries that\n\r"
    "  are used for IPv4 MC.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_fec entry_add fec_ndx 0 protect_type 0 expected_in_rif 0\n\r"
    "  rpf_mode 0 dist_tree_nick 0 out_rif 0 out_ac_id 0 eep 0 dest_val 0 dest_type\n\r"
    "  0 type 0 expected_in_rif 0 rpf_mode 0 dist_tree_nick 0 out_rif 0 out_ac_id 0\n\r"
    "  eep 0 dest_val 0 dest_type 0 type 0 oam_instance_id 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_FEC_ENTRY_ADD_ENTRY_ADD_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_FEC_ENTRY_ADD_ENTRY_ADD_WORKING_FEC_RPF_INFO_RPF_MODE_VAL_ID, 
    "working_ip_rpf_mode_val", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  working_fec.rpf_info.rpf_mode:\n\r"
    "  RPF mode (explicit/SIP/SIP_AS_IS).This is relevant only for FEC entries that\n\r"
    "  are used for IPv4 MC.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_fec entry_add fec_ndx 0 protect_type 0 expected_in_rif 0\n\r"
    "  rpf_mode 0 dist_tree_nick 0 out_rif 0 out_ac_id 0 eep 0 dest_val 0 dest_type\n\r"
    "  0 type 0 expected_in_rif 0 rpf_mode 0 dist_tree_nick 0 out_rif 0 out_ac_id 0\n\r"
    "  eep 0 dest_val 0 dest_type 0 type 0 oam_instance_id 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_FEC_ENTRY_ADD_ENTRY_ADD_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_FEC_ENTRY_ADD_ENTRY_ADD_WORKING_FEC_APP_INFO_DIST_TREE_NICK_ID, 
    "working_trill_dist_tree_nick", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  working_fec.app_info.dist_tree_nick:\n\r"
    "  Dist-Tree-Nick for TRILL Multicast.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_fec entry_add fec_ndx 0 protect_type 0 expected_in_rif 0\n\r"
    "  rpf_mode 0 dist_tree_nick 0 out_rif 0 out_ac_id 0 eep 0 dest_val 0 dest_type\n\r"
    "  0 type 0 expected_in_rif 0 rpf_mode 0 dist_tree_nick 0 out_rif 0 out_ac_id 0\n\r"
    "  eep 0 dest_val 0 dest_type 0 type 0 oam_instance_id 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_FEC_ENTRY_ADD_ENTRY_ADD_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_FEC_ENTRY_ADD_ENTRY_ADD_WORKING_FEC_APP_INFO_OUT_RIF_ID, 
    "working_ipuc_out_rif", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  working_fec.app_info.out_rif:\n\r"
    "  Out-RIF. For IP-UC, MPLS applications. For IP-MC out-RIF is set per copy from\n\r"
    "  the Multicast Group.\n\r"
    "",
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_fec entry_add fec_ndx 0 protect_type 0 expected_in_rif 0\n\r"
    "  rpf_mode 0 dist_tree_nick 0 out_rif 0 out_ac_id 0 eep 0 dest_val 0 dest_type\n\r"
    "  0 type 0 expected_in_rif 0 rpf_mode 0 dist_tree_nick 0 out_rif 0 out_ac_id 0\n\r"
    "  eep 0 dest_val 0 dest_type 0 type 0 oam_instance_id 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_FEC_ENTRY_ADD_ENTRY_ADD_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_FEC_ENTRY_ADD_ENTRY_ADD_WORKING_FEC_APP_INFO_OUT_RIF2_ID, 
    "working_mpls_out_rif", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  working_fec.app_info.out_rif:\n\r"
    "  Out-RIF. For IP-UC, MPLS applications. For IP-MC out-RIF is set per copy from\n\r"
    "  the Multicast Group.\n\r"
    "",
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_fec entry_add fec_ndx 0 protect_type 0 expected_in_rif 0\n\r"
    "  rpf_mode 0 dist_tree_nick 0 out_rif 0 out_ac_id 0 eep 0 dest_val 0 dest_type\n\r"
    "  0 type 0 expected_in_rif 0 rpf_mode 0 dist_tree_nick 0 out_rif 0 out_ac_id 0\n\r"
    "  eep 0 dest_val 0 dest_type 0 type 0 oam_instance_id 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_FEC_ENTRY_ADD_ENTRY_ADD_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_FEC_ENTRY_ADD_ENTRY_ADD_WORKING_FEC_APP_INFO_OUT_AC_ID_ID, 
    "working_bridge_out_ac_id", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  working_fec.app_info.out_ac_id:\n\r"
    "  Attachment Circuit ID. For Bridging with ACRange: PetraB: 0 - 16K-1. T20E\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_fec entry_add fec_ndx 0 protect_type 0 expected_in_rif 0\n\r"
    "  rpf_mode 0 dist_tree_nick 0 out_rif 0 out_ac_id 0 eep 0 dest_val 0 dest_type\n\r"
    "  0 type 0 expected_in_rif 0 rpf_mode 0 dist_tree_nick 0 out_rif 0 out_ac_id 0\n\r"
    "  eep 0 dest_val 0 dest_type 0 type 0 oam_instance_id 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_FEC_ENTRY_ADD_ENTRY_ADD_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_FEC_ENTRY_ADD_ENTRY_ADD_WORKING_FEC_EEP_ID, 
    "working_eep", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
#ifdef COMPILER_STRING_CONST_LIMIT
    "  Full documentation cannot be displayed with -pendantic compiler\n\r",
#else
    "  working_fec.eep:\n\r"
    "  Egress Encapsulation pointer.According to FEC Type:Bridging: Expected to\n\r"
    "  point to Tunnel/ PWE / MinM interfaceIP UC to RIF-VSI: Expected to point to\n\r"
    "  the link-layer next-hop information.IP UC to RIF-Tunnel: Expected to point to\n\r"
    "  the Tunnel information.TRILL-UC: Expected to point to the link-layer next-hop\n\r"
    "  information.MPLS LSR: In PetraB - Expected to point to: *An MPLS Tunnel, for\n\r"
    "  Swap & Push. *Next hop DA, for Swap. The rest of the LL encapasulation (SA\n\r"
    "  and VID) is deduced from the Out-RIF assigned by this FEC entry (see app_info\n\r"
    "  field)In T20E - Expected to point to: *An MPLS Tunnel. If only Swap action is\n\r"
    "  required, the indexed Tunnel should be null, providing only the index to the\n\r"
    "  link-layer encapsulation information and the outgoing core VSID.\n\r"
    "",
#endif /* COMPILER_STRING_CONST_LIMIT */
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_fec entry_add fec_ndx 0 protect_type 0 expected_in_rif 0\n\r"
    "  rpf_mode 0 dist_tree_nick 0 out_rif 0 out_ac_id 0 eep 0 dest_val 0 dest_type\n\r"
    "  0 type 0 expected_in_rif 0 rpf_mode 0 dist_tree_nick 0 out_rif 0 out_ac_id 0\n\r"
    "  eep 0 dest_val 0 dest_type 0 type 0 oam_instance_id 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_FEC_ENTRY_ADD_ENTRY_ADD_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_FEC_ENTRY_ADD_ENTRY_ADD_WORKING_FEC_DEST_DEST_VAL_ID, 
    "working_dest_val", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  working_fec.dest.dest_val:\n\r"
    "  The destination value, according to the type (Single, LAG, Multicast...)For the\n\r"
    "  LAG type, the value is the LAG ID. Range: 0 - 255.For the DROP type, value is\n\r"
    "  not relevant.For the ROUTER type, value is not relevant.For the MULTICAST\n\r"
    "  type, range: 0 - 16383.For the Single_Port type, range: 0 - 4095.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_fec entry_add fec_ndx 0 protect_type 0 expected_in_rif 0\n\r"
    "  rpf_mode 0 dist_tree_nick 0 out_rif 0 out_ac_id 0 eep 0 dest_val 0 dest_type\n\r"
    "  0 type 0 expected_in_rif 0 rpf_mode 0 dist_tree_nick 0 out_rif 0 out_ac_id 0\n\r"
    "  eep 0 dest_val 0 dest_type 0 type 0 oam_instance_id 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_FEC_ENTRY_ADD_ENTRY_ADD_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_FEC_ENTRY_ADD_ENTRY_ADD_WORKING_FEC_DEST_DEST_TYPE_ID, 
    "working_dest_type", 
    (PARAM_VAL_RULES *)&SOC_PPD_SAND_PP_DEST_TYPE_rule[0], 
    (sizeof(SOC_PPD_SAND_PP_DEST_TYPE_rule) / sizeof(SOC_PPD_SAND_PP_DEST_TYPE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  working_fec.dest.dest_type:\n\r"
    "  The type of the following destination ID.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_fec entry_add fec_ndx 0 protect_type 0 expected_in_rif 0\n\r"
    "  rpf_mode 0 dist_tree_nick 0 out_rif 0 out_ac_id 0 eep 0 dest_val 0 dest_type\n\r"
    "  0 type 0 expected_in_rif 0 rpf_mode 0 dist_tree_nick 0 out_rif 0 out_ac_id 0\n\r"
    "  eep 0 dest_val 0 dest_type 0 type 0 oam_instance_id 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_FEC_ENTRY_ADD_ENTRY_ADD_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_FEC_ENTRY_ADD_ENTRY_ADD_WORKING_FEC_TYPE_ID, 
    "working_entry_type", 
    (PARAM_VAL_RULES *)&SOC_PPC_FEC_TYPE_rule[0], 
    (sizeof(SOC_PPC_FEC_TYPE_rule) / sizeof(SOC_PPC_FEC_TYPE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  working_fec.type:\n\r"
    "  The type of the FEC entry may be one of the following: IP UC/ MC, TRILL UC /\n\r"
    "  MC, Bridging, MPLS LSR, Drop, or Trap.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_fec entry_add fec_ndx 0 protect_type 0 expected_in_rif 0\n\r"
    "  rpf_mode 0 dist_tree_nick 0 out_rif 0 out_ac_id 0 eep 0 dest_val 0 dest_type\n\r"
    "  0 type 0 expected_in_rif 0 rpf_mode 0 dist_tree_nick 0 out_rif 0 out_ac_id 0\n\r"
    "  eep 0 dest_val 0 dest_type 0 type 0 oam_instance_id 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_FEC_ENTRY_ADD_ENTRY_ADD_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },
    { 
    SOC_PARAM_PPD_FRWRD_FEC_ENTRY_ADD_ENTRY_ADD_PROTECT_FEC_TRAP_INFO_SNOOP_ACTION_STRENGTH_ID, 
    "protect_snoop_action_strength", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  protect_fec.trap_info.snoop_action_strength:\n\r"
    "  Value that identifies the strength of the assignment of Snoop action to the\n\r"
    "  packet. Through the packet processing pipe, many snooping decisions may be\n\r"
    "  taken; yet one decision may overwrite a former decision only if it stronger,\n\r"
    "  i.e., its strength is higher than the last decision that was taken. Range\n\r"
    "  0-3. Relevant only for Petra-B.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_fec entry_add fec_ndx 0 protect_type 0 snoop_action_strength 0\n\r"
    "  frwrd_action_strength 0 trap_code 0 expected_in_rif 0 rpf_mode 0\n\r"
    "  dist_tree_nick 0 out_rif 0 out_ac_id 0 eep 0 dest_val 0 dest_type 0 type 0\n\r"
    "  snoop_action_strength 0 frwrd_action_strength 0 trap_code 0 expected_in_rif 0\n\r"
    "  rpf_mode 0 dist_tree_nick 0 out_rif 0 out_ac_id 0 eep 0 dest_val 0 dest_type\n\r"
    "  0 type 0 oam_instance_id 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_FEC_ENTRY_ADD_ENTRY_ADD_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_FEC_ENTRY_ADD_ENTRY_ADD_PROTECT_FEC_TRAP_INFO_FRWRD_ACTION_STRENGTH_ID, 
    "protect_frwrd_action_strength", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  protect_fec.trap_info.frwrd_action_strength:\n\r"
    "  Value that identifies the strength of the assignment of Forward action to the\n\r"
    "  packet. Through the packet processing pipe, many forwarding decisions may be\n\r"
    "  taken; yet one decision may overwrite a former decision only if it stronger,\n\r"
    "  i.e., its strength is higher than the last decision that was taken.\n\r"
    "  Range 0-7.Relevant only for Petra-B.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_fec entry_add fec_ndx 0 protect_type 0 snoop_action_strength 0\n\r"
    "  frwrd_action_strength 0 trap_code 0 expected_in_rif 0 rpf_mode 0\n\r"
    "  dist_tree_nick 0 out_rif 0 out_ac_id 0 eep 0 dest_val 0 dest_type 0 type 0\n\r"
    "  snoop_action_strength 0 frwrd_action_strength 0 trap_code 0 expected_in_rif 0\n\r"
    "  rpf_mode 0 dist_tree_nick 0 out_rif 0 out_ac_id 0 eep 0 dest_val 0 dest_type\n\r"
    "  0 type 0 oam_instance_id 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_FEC_ENTRY_ADD_ENTRY_ADD_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_FEC_ENTRY_ADD_ENTRY_ADD_PROTECT_FEC_TRAP_INFO_TRAP_CODE_ID, 
    "protect_trap_code", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
#ifdef COMPILER_STRING_CONST_LIMIT
    "  Full documentation cannot be displayed with -pendantic compiler\n\r",
#else
    "  protect_fec.trap_info.trap_code:\n\r"
    "  Sets the CPU Trap code. For trapped packet the CPU code are associated into\n\r"
    "  the packet headers. The CPU code also used as index for the\n\r"
    "  forwarding/snooping actions. see to soc_ppd_trap_frwrd_profile_info_set(),\n\r"
    "  soc_ppd_trap_snoop_profile_info_set(). Range Petra-B: 0-255.To know the legal\n\r"
    "  range in specific use of this field, see the documentation in that specific\n\r"
    "  use.Affects Both, the CPU code set on the packets header and the index to\n\r"
    "  access the forwarding and snooping tables. \n\r"
    "",
#endif /* COMPILER_STRING_CONST_LIMIT */
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_fec entry_add fec_ndx 0 protect_type 0 snoop_action_strength 0\n\r"
    "  frwrd_action_strength 0 trap_code 0 expected_in_rif 0 rpf_mode 0\n\r"
    "  dist_tree_nick 0 out_rif 0 out_ac_id 0 eep 0 dest_val 0 dest_type 0 type 0\n\r"
    "  snoop_action_strength 0 frwrd_action_strength 0 trap_code 0 expected_in_rif 0\n\r"
    "  rpf_mode 0 dist_tree_nick 0 out_rif 0 out_ac_id 0 eep 0 dest_val 0 dest_type\n\r"
    "  0 type 0 oam_instance_id 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_FEC_ENTRY_ADD_ENTRY_ADD_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },    
  { 
    SOC_PARAM_PPD_FRWRD_FEC_ENTRY_ADD_ENTRY_ADD_PROTECT_FEC_RPF_INFO_EXPECTED_IN_RIF_ID, 
    "protect_ipmc_expected_in_rif", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  protect_fec.rpf_info.expected_in_rif:\n\r"
    "  Expected In-RIF used in the MC RPF check\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_fec entry_add fec_ndx 0 protect_type 0 expected_in_rif 0\n\r"
    "  rpf_mode 0 dist_tree_nick 0 out_rif 0 out_ac_id 0 eep 0 dest_val 0 dest_type\n\r"
    "  0 type 0 expected_in_rif 0 rpf_mode 0 dist_tree_nick 0 out_rif 0 out_ac_id 0\n\r"
    "  eep 0 dest_val 0 dest_type 0 type 0 oam_instance_id 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_FEC_ENTRY_ADD_ENTRY_ADD_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_FEC_ENTRY_ADD_ENTRY_ADD_PROTECT_FEC_RPF_INFO_RPF_MODE_ID, 
    "protect_ip_rpf_mode", 
    (PARAM_VAL_RULES *)&SOC_PPC_FRWRD_FEC_RPF_MODE_rule[0], 
    (sizeof(SOC_PPC_FRWRD_FEC_RPF_MODE_rule) / sizeof(SOC_PPC_FRWRD_FEC_RPF_MODE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  protect_fec.rpf_info.rpf_mode:\n\r"
    "  RPF mode (explicit/SIP/SIP_AS_IS).This is relevant only for FEC entries that\n\r"
    "  are used for IPv4 MC.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_fec entry_add fec_ndx 0 protect_type 0 expected_in_rif 0\n\r"
    "  rpf_mode 0 dist_tree_nick 0 out_rif 0 out_ac_id 0 eep 0 dest_val 0 dest_type\n\r"
    "  0 type 0 expected_in_rif 0 rpf_mode 0 dist_tree_nick 0 out_rif 0 out_ac_id 0\n\r"
    "  eep 0 dest_val 0 dest_type 0 type 0 oam_instance_id 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_FEC_ENTRY_ADD_ENTRY_ADD_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
    { 
    SOC_PARAM_PPD_FRWRD_FEC_ENTRY_ADD_ENTRY_ADD_PROTECT_FEC_RPF_INFO_RPF_MODE_VAL_ID, 
    "protect_ip_rpf_mode_val", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  protect_fec.rpf_info.rpf_mode:\n\r"
    "  RPF mode (explicit/SIP/SIP_AS_IS).This is relevant only for FEC entries that\n\r"
    "  are used for IPv4 MC.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_fec entry_add fec_ndx 0 protect_type 0 expected_in_rif 0\n\r"
    "  rpf_mode 0 dist_tree_nick 0 out_rif 0 out_ac_id 0 eep 0 dest_val 0 dest_type\n\r"
    "  0 type 0 expected_in_rif 0 rpf_mode 0 dist_tree_nick 0 out_rif 0 out_ac_id 0\n\r"
    "  eep 0 dest_val 0 dest_type 0 type 0 oam_instance_id 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_FEC_ENTRY_ADD_ENTRY_ADD_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_FEC_ENTRY_ADD_ENTRY_ADD_PROTECT_FEC_APP_INFO_DIST_TREE_NICK_ID, 
    "protect_trill_dist_tree_nick", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  protect_fec.app_info.dist_tree_nick:\n\r"
    "  Dist-Tree-Nick for TRILL Multicast.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_fec entry_add fec_ndx 0 protect_type 0 expected_in_rif 0\n\r"
    "  rpf_mode 0 dist_tree_nick 0 out_rif 0 out_ac_id 0 eep 0 dest_val 0 dest_type\n\r"
    "  0 type 0 expected_in_rif 0 rpf_mode 0 dist_tree_nick 0 out_rif 0 out_ac_id 0\n\r"
    "  eep 0 dest_val 0 dest_type 0 type 0 oam_instance_id 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_FEC_ENTRY_ADD_ENTRY_ADD_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_FEC_ENTRY_ADD_ENTRY_ADD_PROTECT_FEC_APP_INFO_OUT_RIF_ID, 
    "protect_ipuc_out_rif", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  protect_fec.app_info.out_rif:\n\r"
    "  Out-RIF. For IP-UC, MPLS applications. For IP-MC out-RIF is set per copy from\n\r"
    "  the Multicast Group.\n\r"
    "",
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_fec entry_add fec_ndx 0 protect_type 0 expected_in_rif 0\n\r"
    "  rpf_mode 0 dist_tree_nick 0 out_rif 0 out_ac_id 0 eep 0 dest_val 0 dest_type\n\r"
    "  0 type 0 expected_in_rif 0 rpf_mode 0 dist_tree_nick 0 out_rif 0 out_ac_id 0\n\r"
    "  eep 0 dest_val 0 dest_type 0 type 0 oam_instance_id 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_FEC_ENTRY_ADD_ENTRY_ADD_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_FEC_ENTRY_ADD_ENTRY_ADD_PROTECT_FEC_APP_INFO_OUT_RIF2_ID, 
    "protect_mpls_out_rif", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  protect_fec.app_info.out_rif:\n\r"
    "  Out-RIF. For IP-UC, MPLS applications. For IP-MC out-RIF is set per copy from\n\r"
    "  the Multicast Group.\n\r"
    "",
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_fec entry_add fec_ndx 0 protect_type 0 expected_in_rif 0\n\r"
    "  rpf_mode 0 dist_tree_nick 0 out_rif 0 out_ac_id 0 eep 0 dest_val 0 dest_type\n\r"
    "  0 type 0 expected_in_rif 0 rpf_mode 0 dist_tree_nick 0 out_rif 0 out_ac_id 0\n\r"
    "  eep 0 dest_val 0 dest_type 0 type 0 oam_instance_id 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_FEC_ENTRY_ADD_ENTRY_ADD_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_FEC_ENTRY_ADD_ENTRY_ADD_PROTECT_FEC_APP_INFO_OUT_AC_ID_ID, 
    "protect_bridge_out_ac_id", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  protect_fec.app_info.out_ac_id:\n\r"
    "  Attachment Circuit ID. For Bridging with ACRange: PetraB: 0 - 16K-1. T20E\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_fec entry_add fec_ndx 0 protect_type 0 expected_in_rif 0\n\r"
    "  rpf_mode 0 dist_tree_nick 0 out_rif 0 out_ac_id 0 eep 0 dest_val 0 dest_type\n\r"
    "  0 type 0 expected_in_rif 0 rpf_mode 0 dist_tree_nick 0 out_rif 0 out_ac_id 0\n\r"
    "  eep 0 dest_val 0 dest_type 0 type 0 oam_instance_id 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_FEC_ENTRY_ADD_ENTRY_ADD_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_FEC_ENTRY_ADD_ENTRY_ADD_PROTECT_FEC_EEP_ID, 
    "protect_eep", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
#ifdef COMPILER_STRING_CONST_LIMIT
    "  Full documentation cannot be displayed with -pendantic compiler\n\r",
#else
    "  protect_fec.eep:\n\r"
    "  Egress Encapsulation pointer.According to FEC Type:Bridging: Expected to\n\r"
    "  point to Tunnel/ PWE / MinM interfaceIP UC to RIF-VSI: Expected to point to\n\r"
    "  the link-layer next-hop information.IP UC to RIF-Tunnel: Expected to point to\n\r"
    "  the Tunnel information.TRILL-UC: Expected to point to the link-layer next-hop\n\r"
    "  information.MPLS LSR: In PetraB - Expected to point to: *An MPLS Tunnel, for\n\r"
    "  Swap & Push. *Next hop DA, for Swap. The rest of the LL encapasulation (SA\n\r"
    "  and VID) is deduced from the Out-RIF assigned by this FEC entry (see app_info\n\r"
    "  field)In T20E - Expected to point to: *An MPLS Tunnel. If only Swap action is\n\r"
    "  required, the indexed Tunnel should be null, providing only the index to the\n\r"
    "  link-layer encapsulation information and the outgoing core VSID.\n\r"
    "",
#endif /* COMPILER_STRING_CONST_LIMIT */
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_fec entry_add fec_ndx 0 protect_type 0 expected_in_rif 0\n\r"
    "  rpf_mode 0 dist_tree_nick 0 out_rif 0 out_ac_id 0 eep 0 dest_val 0 dest_type\n\r"
    "  0 type 0 expected_in_rif 0 rpf_mode 0 dist_tree_nick 0 out_rif 0 out_ac_id 0\n\r"
    "  eep 0 dest_val 0 dest_type 0 type 0 oam_instance_id 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_FEC_ENTRY_ADD_ENTRY_ADD_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_FEC_ENTRY_ADD_ENTRY_ADD_PROTECT_FEC_DEST_DEST_VAL_ID, 
    "protect_dest_val", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  protect_fec.dest.dest_val:\n\r"
    "  The destination value, according to the type (Single, LAG, Multicast...)For the\n\r"
    "  LAG type, the value is the LAG ID. Range: 0 - 255.For the DROP type, value is\n\r"
    "  not relevant.For the ROUTER type, value is not relevant.For the MULTICAST\n\r"
    "  type, range: 0 - 16383.For the Single_Port type, range: 0 - 4095.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_fec entry_add fec_ndx 0 protect_type 0 expected_in_rif 0\n\r"
    "  rpf_mode 0 dist_tree_nick 0 out_rif 0 out_ac_id 0 eep 0 dest_val 0 dest_type\n\r"
    "  0 type 0 expected_in_rif 0 rpf_mode 0 dist_tree_nick 0 out_rif 0 out_ac_id 0\n\r"
    "  eep 0 dest_val 0 dest_type 0 type 0 oam_instance_id 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_FEC_ENTRY_ADD_ENTRY_ADD_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_FEC_ENTRY_ADD_ENTRY_ADD_PROTECT_FEC_DEST_DEST_TYPE_ID, 
    "protect_dest_type", 
    (PARAM_VAL_RULES *)&SOC_PPD_SAND_PP_DEST_TYPE_rule[0], 
    (sizeof(SOC_PPD_SAND_PP_DEST_TYPE_rule) / sizeof(SOC_PPD_SAND_PP_DEST_TYPE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  protect_fec.dest.dest_type:\n\r"
    "  The type of the following destination ID.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_fec entry_add fec_ndx 0 protect_type 0 expected_in_rif 0\n\r"
    "  rpf_mode 0 dist_tree_nick 0 out_rif 0 out_ac_id 0 eep 0 dest_val 0 dest_type\n\r"
    "  0 type 0 expected_in_rif 0 rpf_mode 0 dist_tree_nick 0 out_rif 0 out_ac_id 0\n\r"
    "  eep 0 dest_val 0 dest_type 0 type 0 oam_instance_id 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_FEC_ENTRY_ADD_ENTRY_ADD_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_FEC_ENTRY_ADD_ENTRY_ADD_PROTECT_FEC_TYPE_ID, 
    "protect_entry_type", 
    (PARAM_VAL_RULES *)&SOC_PPC_FEC_TYPE_rule[0], 
    (sizeof(SOC_PPC_FEC_TYPE_rule) / sizeof(SOC_PPC_FEC_TYPE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  protect_fec.type:\n\r"
    "  The type of the FEC entry may be one of the following: IP UC/ MC, TRILL UC /\n\r"
    "  MC, Bridging, MPLS LSR, Drop, or Trap.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_fec entry_add fec_ndx 0 protect_type 0 expected_in_rif 0\n\r"
    "  rpf_mode 0 dist_tree_nick 0 out_rif 0 out_ac_id 0 eep 0 dest_val 0 dest_type\n\r"
    "  0 type 0 expected_in_rif 0 rpf_mode 0 dist_tree_nick 0 out_rif 0 out_ac_id 0\n\r"
    "  eep 0 dest_val 0 dest_type 0 type 0 oam_instance_id 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_FEC_ENTRY_ADD_ENTRY_ADD_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_FEC_ENTRY_ADD_ENTRY_ADD_PROTECT_INFO_OAM_INSTANCE_ID_ID, 
    "oam_instance_id", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  protect_info.oam_instance_id:\n\r"
    "  OAM instance ID. Relvant for PATH protected FECs. If the OAM instance is TRUE\n\r"
    "  (UP), then packets will be forwarded according to working FEC; otherwise,\n\r"
    "  packets will be forwarded according to protect FEC. See\n\r"
    "  soc_ppd_frwrd_fec_protection_oam_instance_status_set() to configure the status of\n\r"
    "  the OAM instance.Range: Petra-B:0-4K-1, T20E:0-16K-1.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_fec entry_add fec_ndx 0 protect_type 0 expected_in_rif 0\n\r"
    "  rpf_mode 0 dist_tree_nick 0 out_rif 0 out_ac_id 0 eep 0 dest_val 0 dest_type\n\r"
    "  0 type 0 expected_in_rif 0 rpf_mode 0 dist_tree_nick 0 out_rif 0 out_ac_id 0\n\r"
    "  eep 0 dest_val 0 dest_type 0 type 0 oam_instance_id 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_FEC_ENTRY_ADD_ENTRY_ADD_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_FEC_ECMP_ADD_ECMP_ADD_ID, 
    "ecmp_add", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Add ECMP to the FEC table.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_fec ecmp_add fec_ndx 0 expected_in_rif 0 rpf_mode 0\n\r"
    "  dist_tree_nick 0 out_rif 0 out_ac_id 0 eep 0 dest_val 0 dest_type 0 type 0\n\r"
    "  nof_entries 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_FEC_ECMP_ADD_ECMP_ADD_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_FEC_ECMP_ADD_ECMP_ADD_FEC_NDX_ID, 
    "fec_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  fec_ndx:\n\r"
    "  Index in the FEC table.Range: 0 - 16383. Must be even.	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_fec ecmp_add fec_ndx 0 expected_in_rif 0 rpf_mode 0\n\r"
    "  dist_tree_nick 0 out_rif 0 out_ac_id 0 eep 0 dest_val 0 dest_type 0 type 0\n\r"
    "  nof_entries 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_FEC_ECMP_ADD_ECMP_ADD_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
{ 
    SOC_PARAM_PPD_FRWRD_FEC_ECMP_ADD_ECMP_ADD_FEC_ARRAY_TRAP_INFO_SNOOP_ACTION_STRENGTH_ID, 
    "snoop_action_strength", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  fec_array.trap_info.snoop_action_strength:\n\r"
    "  Value that identifies the strength of the assignment of Snoop action to the\n\r"
    "  packet. Through the packet processing pipe, many snooping decisions may be\n\r"
    "  taken; yet one decision may overwrite a former decision only if it stronger,\n\r"
    "  i.e., its strength is higher than the last decision that was taken. Range\n\r"
    "  0-3. Relevant only for Petra-B.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_fec ecmp_add fec_ndx 0 snoop_action_strength 0\n\r"
    "  frwrd_action_strength 0 trap_code 0 expected_in_rif 0 rpf_mode 0\n\r"
    "  dist_tree_nick 0 out_rif 0 out_ac_id 0 eep 0 dest_val 0 dest_type 0 type 0\n\r"
    "  nof_entries 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_FEC_ECMP_ADD_ECMP_ADD_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_FEC_ECMP_ADD_ECMP_ADD_FEC_ARRAY_TRAP_INFO_FRWRD_ACTION_STRENGTH_ID, 
    "frwrd_action_strength", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  fec_array.trap_info.frwrd_action_strength:\n\r"
    "  Value that identifies the strength of the assignment of Forward action to the\n\r"
    "  packet. Through the packet processing pipe, many forwarding decisions may be\n\r"
    "  taken; yet one decision may overwrite a former decision only if it stronger,\n\r"
    "  i.e., its strength is higher than the last decision that was taken.\n\r"
    "  Range 0-7.Relevant only for Petra-B.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_fec ecmp_add fec_ndx 0 snoop_action_strength 0\n\r"
    "  frwrd_action_strength 0 trap_code 0 expected_in_rif 0 rpf_mode 0\n\r"
    "  dist_tree_nick 0 out_rif 0 out_ac_id 0 eep 0 dest_val 0 dest_type 0 type 0\n\r"
    "  nof_entries 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_FEC_ECMP_ADD_ECMP_ADD_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_FEC_ECMP_ADD_ECMP_ADD_FEC_ARRAY_TRAP_INFO_TRAP_CODE_ID, 
    "trap_code", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
#ifdef COMPILER_STRING_CONST_LIMIT
    "  Full documentation cannot be displayed with -pendantic compiler\n\r",
#else
    "  fec_array.trap_info.trap_code:\n\r"
    "  Sets the CPU Trap code. For trapped packet the CPU code are associated into\n\r"
    "  the packet headers. The CPU code also used as index for the\n\r"
    "  forwarding/snooping actions. see to soc_ppd_trap_frwrd_profile_info_set(),\n\r"
    "  soc_ppd_trap_snoop_profile_info_set(). Range Petra-B: 0-255.To know the legal\n\r"
    "  range in specific use of this field, see the documentation in that specific\n\r"
    "  use.Affects Both, the CPU code set on the packets header and the index to\n\r"
    "  access the forwarding and snooping tables. \n\r"
    "",
#endif /* COMPILER_STRING_CONST_LIMIT */
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_fec ecmp_add fec_ndx 0 snoop_action_strength 0\n\r"
    "  frwrd_action_strength 0 trap_code 0 expected_in_rif 0 rpf_mode 0\n\r"
    "  dist_tree_nick 0 out_rif 0 out_ac_id 0 eep 0 dest_val 0 dest_type 0 type 0\n\r"
    "  nof_entries 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_FEC_ECMP_ADD_ECMP_ADD_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },    
  { 
    SOC_PARAM_PPD_FRWRD_FEC_ECMP_ADD_ECMP_ADD_FEC_ARRAY_RPF_INFO_EXPECTED_IN_RIF_ID, 
    "ipmc_expected_in_rif", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  fec_array.rpf_info.expected_in_rif:\n\r"
    "  Expected In-RIF used in the MC RPF check\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_fec ecmp_add fec_ndx 0 expected_in_rif 0 rpf_mode 0\n\r"
    "  dist_tree_nick 0 out_rif 0 out_ac_id 0 eep 0 dest_val 0 dest_type 0 type 0\n\r"
    "  nof_entries 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_FEC_ECMP_ADD_ECMP_ADD_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_FEC_ECMP_ADD_ECMP_ADD_FEC_ARRAY_RPF_INFO_RPF_MODE_ID, 
    "ip_rpf_mode", 
    (PARAM_VAL_RULES *)&SOC_PPC_FRWRD_FEC_RPF_MODE_rule[0], 
    (sizeof(SOC_PPC_FRWRD_FEC_RPF_MODE_rule) / sizeof(SOC_PPC_FRWRD_FEC_RPF_MODE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  fec_array.rpf_info.rpf_mode:\n\r"
    "  RPF mode (explicit/SIP/SIP_AS_IS).This is relevant only for FEC entries that\n\r"
    "  are used for IPv4 MC.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_fec ecmp_add fec_ndx 0 expected_in_rif 0 rpf_mode 0\n\r"
    "  dist_tree_nick 0 out_rif 0 out_ac_id 0 eep 0 dest_val 0 dest_type 0 type 0\n\r"
    "  nof_entries 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_FEC_ECMP_ADD_ECMP_ADD_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
    { 
    SOC_PARAM_PPD_FRWRD_FEC_ECMP_ADD_ECMP_ADD_FEC_ARRAY_RPF_INFO_RPF_MODE_VAL_ID, 
    "ip_rpf_mode_val", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  fec_array.rpf_info.rpf_mode:\n\r"
    "  RPF mode (explicit/SIP/SIP_AS_IS).This is relevant only for FEC entries that\n\r"
    "  are used for IPv4 MC.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_fec ecmp_add fec_ndx 0 expected_in_rif 0 rpf_mode 0\n\r"
    "  dist_tree_nick 0 out_rif 0 out_ac_id 0 eep 0 dest_val 0 dest_type 0 type 0\n\r"
    "  nof_entries 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_FEC_ECMP_ADD_ECMP_ADD_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_FEC_ECMP_ADD_ECMP_ADD_FEC_ARRAY_APP_INFO_DIST_TREE_NICK_ID, 
    "trill_dist_tree_nick", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  fec_array.app_info.dist_tree_nick:\n\r"
    "  Dist-Tree-Nick for TRILL Multicast.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_fec ecmp_add fec_ndx 0 expected_in_rif 0 rpf_mode 0\n\r"
    "  dist_tree_nick 0 out_rif 0 out_ac_id 0 eep 0 dest_val 0 dest_type 0 type 0\n\r"
    "  nof_entries 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_FEC_ECMP_ADD_ECMP_ADD_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_FEC_ECMP_ADD_ECMP_ADD_FEC_ARRAY_APP_INFO_OUT_RIF_ID, 
    "ipuc_out_rif", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  fec_array.app_info.out_rif:\n\r"
    "  Out-RIF. For IP-UC, MPLS applications. For IP-MC out-RIF is set per copy from\n\r"
    "  the Multicast Group.\n\r"
    "",
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_fec ecmp_add fec_ndx 0 expected_in_rif 0 rpf_mode 0\n\r"
    "  dist_tree_nick 0 out_rif 0 out_ac_id 0 eep 0 dest_val 0 dest_type 0 type 0\n\r"
    "  nof_entries 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_FEC_ECMP_ADD_ECMP_ADD_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_FEC_ECMP_ADD_ECMP_ADD_FEC_ARRAY_APP_INFO_OUT_RIF2_ID, 
    "mpls_out_rif", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  fec_array.app_info.out_rif:\n\r"
    "  Out-RIF. For IP-UC, MPLS applications. For IP-MC out-RIF is set per copy from\n\r"
    "  the Multicast Group.\n\r"
    "",
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_fec ecmp_add fec_ndx 0 expected_in_rif 0 rpf_mode 0\n\r"
    "  dist_tree_nick 0 out_rif 0 out_ac_id 0 eep 0 dest_val 0 dest_type 0 type 0\n\r"
    "  nof_entries 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_FEC_ECMP_ADD_ECMP_ADD_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_FEC_ECMP_ADD_ECMP_ADD_FEC_ARRAY_APP_INFO_OUT_AC_ID_ID, 
    "bridge_out_ac_id", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  fec_array.app_info.out_ac_id:\n\r"
    "  Attachment Circuit ID. For Bridging with ACRange: PetraB: 0 - 16K-1. T20E\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_fec ecmp_add fec_ndx 0 expected_in_rif 0 rpf_mode 0\n\r"
    "  dist_tree_nick 0 out_rif 0 out_ac_id 0 eep 0 dest_val 0 dest_type 0 type 0\n\r"
    "  nof_entries 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_FEC_ECMP_ADD_ECMP_ADD_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_FEC_ECMP_ADD_ECMP_ADD_FEC_ARRAY_EEP_ID, 
    "eep", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
#ifdef COMPILER_STRING_CONST_LIMIT
    "  Full documentation cannot be displayed with -pendantic compiler\n\r",
#else
    "  fec_array.eep:\n\r"
    "  Egress Encapsulation pointer.According to FEC Type:Bridging: Expected to\n\r"
    "  point to Tunnel/ PWE / MinM interfaceIP UC to RIF-VSI: Expected to point to\n\r"
    "  the link-layer next-hop information.IP UC to RIF-Tunnel: Expected to point to\n\r"
    "  the Tunnel information.TRILL-UC: Expected to point to the link-layer next-hop\n\r"
    "  information.MPLS LSR: In PetraB - Expected to point to: *An MPLS Tunnel, for\n\r"
    "  Swap & Push. *Next hop DA, for Swap. The rest of the LL encapasulation (SA\n\r"
    "  and VID) is deduced from the Out-RIF assigned by this FEC entry (see app_info\n\r"
    "  field)In T20E - Expected to point to: *An MPLS Tunnel. If only Swap action is\n\r"
    "  required, the indexed Tunnel should be null, providing only the index to the\n\r"
    "  link-layer encapsulation information and the outgoing core VSID.\n\r"
    "",
#endif /* COMPILER_STRING_CONST_LIMIT */
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_fec ecmp_add fec_ndx 0 expected_in_rif 0 rpf_mode 0\n\r"
    "  dist_tree_nick 0 out_rif 0 out_ac_id 0 eep 0 dest_val 0 dest_type 0 type 0\n\r"
    "  nof_entries 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_FEC_ECMP_ADD_ECMP_ADD_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_FEC_ECMP_ADD_ECMP_ADD_FEC_ARRAY_DEST_DEST_VAL_ID, 
    "dest_val", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  fec_array.dest.dest_val:\n\r"
    "  The destination value, according to the type (Single, LAG, Multicast...)For the\n\r"
    "  LAG type, the value is the LAG ID. Range: 0 - 255.For the DROP type, value is\n\r"
    "  not relevant.For the ROUTER type, value is not relevant.For the MULTICAST\n\r"
    "  type, range: 0 - 16383.For the Single_Port type, range: 0 - 4095.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_fec ecmp_add fec_ndx 0 expected_in_rif 0 rpf_mode 0\n\r"
    "  dist_tree_nick 0 out_rif 0 out_ac_id 0 eep 0 dest_val 0 dest_type 0 type 0\n\r"
    "  nof_entries 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_FEC_ECMP_ADD_ECMP_ADD_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_FEC_ECMP_ADD_ECMP_ADD_FEC_ARRAY_DEST_DEST_TYPE_ID, 
    "dest_type", 
    (PARAM_VAL_RULES *)&SOC_PPD_SAND_PP_DEST_TYPE_rule[0], 
    (sizeof(SOC_PPD_SAND_PP_DEST_TYPE_rule) / sizeof(SOC_PPD_SAND_PP_DEST_TYPE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  fec_array.dest.dest_type:\n\r"
    "  The type of the following destination ID.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_fec ecmp_add fec_ndx 0 expected_in_rif 0 rpf_mode 0\n\r"
    "  dist_tree_nick 0 out_rif 0 out_ac_id 0 eep 0 dest_val 0 dest_type 0 type 0\n\r"
    "  nof_entries 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_FEC_ECMP_ADD_ECMP_ADD_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_FEC_ECMP_ADD_ECMP_ADD_FEC_ARRAY_TYPE_ID, 
    "type", 
    (PARAM_VAL_RULES *)&SOC_PPC_FEC_TYPE_rule[0], 
    (sizeof(SOC_PPC_FEC_TYPE_rule) / sizeof(SOC_PPC_FEC_TYPE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  fec_array.type:\n\r"
    "  The type of the FEC entry may be one of the following: IP UC/ MC, TRILL UC /\n\r"
    "  MC, Bridging, MPLS LSR, Drop, or Trap.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_fec ecmp_add fec_ndx 0 expected_in_rif 0 rpf_mode 0\n\r"
    "  dist_tree_nick 0 out_rif 0 out_ac_id 0 eep 0 dest_val 0 dest_type 0 type 0\n\r"
    "  nof_entries 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_FEC_ECMP_ADD_ECMP_ADD_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_FEC_ECMP_ADD_ECMP_ADD_NOF_ENTRIES_ID, 
    "nof_entries", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  nof_entries:\n\r"
    "  Size of ECMP and number of valid entries in fec_array. 	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_fec ecmp_add fec_ndx 0 expected_in_rif 0 rpf_mode 0\n\r"
    "  dist_tree_nick 0 out_rif 0 out_ac_id 0 eep 0 dest_val 0 dest_type 0 type 0\n\r"
    "  nof_entries 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_FEC_ECMP_ADD_ECMP_ADD_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_FEC_ECMP_ADD_ECMP_ADD_INC_OUTRIF_ID, 
    "inc_outrif", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  nof_entries:\n\r"
    "  Size of ECMP and number of valid entries in fec_array. 	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_fec ecmp_add fec_ndx 0 expected_in_rif 0 rpf_mode 0\n\r"
    "  dist_tree_nick 0 out_rif 0 out_ac_id 0 eep 0 dest_val 0 dest_type 0 type 0\n\r"
    "  nof_entries 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_FEC_ECMP_ADD_ECMP_ADD_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_FEC_ECMP_ADD_ECMP_ADD_INC_EEP_ID, 
    "inc_eep", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  nof_entries:\n\r"
    "  Size of ECMP and number of valid entries in fec_array. 	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_fec ecmp_add fec_ndx 0 expected_in_rif 0 rpf_mode 0\n\r"
    "  dist_tree_nick 0 out_rif 0 out_ac_id 0 eep 0 dest_val 0 dest_type 0 type 0\n\r"
    "  nof_entries 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_FEC_ECMP_ADD_ECMP_ADD_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_FEC_ECMP_UPDATE_ECMP_INFO_SET_ID, 
    "ecmp_info_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  set the ECMP info. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_fec ecmp_info_set ecmp_ndx 0 size base_fec is_protected\n\r"
    "  rpf_fec_index 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_FEC_ECMP_SET_ECMP_SET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_FEC_ECMP_UPDATE_ECMP_INFO_SET_ECMP_NDX_ID, 
    "ecmp_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  ecmp_ndx:\n\r"
    "  Index in the ECMP table.Range: 0 - 1K.	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_fec ecmp_info_set ecmp_ndx 0 size base_fec is_protected\n\r"
    "  rpf_fec_index 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_FEC_ECMP_SET_ECMP_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_FEC_ECMP_UPDATE_ECMP_INFO_SET_BASE_FEC_ID, 
    "base_fec_id", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  base_fec_id:\n\r"
    "  base fec.Range: 0 - 32K.	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_fec ecmp_info_set ecmp_ndx 0 size base_fec is_protected\n\r"
    "  rpf_fec_index 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_FEC_ECMP_SET_ECMP_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },    
  { 
    SOC_PARAM_PPD_FRWRD_FEC_ECMP_UPDATE_ECMP_INFO_SET_SIZE_ID, 
    "size", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  size:\n\r"
    "  base fec.Range: 0 - 511.	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_fec ecmp_info_set ecmp_ndx 0 size base_fec is_protected\n\r"
    "  rpf_fec_index 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_FEC_ECMP_SET_ECMP_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },    
  { 
    SOC_PARAM_PPD_FRWRD_FEC_ECMP_UPDATE_ECMP_INFO_SET_IS_PROTECTED_ID, 
    "is_protected", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  is_protected:\n\r"
    "  is_protected.Range: 0 - 1.	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_fec ecmp_info_set ecmp_ndx 0 size base_fec is_protected\n\r"
    "  rpf_fec_index 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_FEC_ECMP_SET_ECMP_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_FEC_ECMP_UPDATE_ECMP_INFO_SET_RPF_FEC_INDEX_ID, 
    "rpf_fec_index", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  rpf_fec_index:\n\r"
    "  rpf_fec_index.Range: 0 - 511.	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_fec ecmp_info_set ecmp_ndx 0 size base_fec is_protected\n\r"
    "  rpf_fec_index 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_FEC_ECMP_SET_ECMP_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },     
    { 
    SOC_PARAM_PPD_FRWRD_FEC_ECMP_UPDATE_ECMP_INFO_GET_ID, 
    "ecmp_info_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  set the ECMP info. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_fec ecmp_info_get ecmp_ndx 0 size base_fec is_protected\n\r"
    "  rpf_fec_index 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_FEC_ECMP_GET_ECMP_GET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_FEC_ECMP_UPDATE_ECMP_INFO_GET_ECMP_NDX_ID, 
    "ecmp_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  ecmp_ndx:\n\r"
    "  Index in the ECMP table.Range: 0 - 1K.	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_fec ecmp_info_get ecmp_ndx 0 size base_fec is_protected\n\r"
    "  rpf_fec_index 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_FEC_ECMP_GET_ECMP_GET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_FEC_ECMP_UPDATE_ECMP_UPDATE_ID, 
    "ecmp_update", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Update the content of block of entries from the ECMP. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_fec ecmp_update fec_ndx 0 expected_in_rif 0 rpf_mode 0\n\r"
    "  dist_tree_nick 0 out_rif 0 out_ac_id 0 eep 0 dest_val 0 dest_type 0 type 0\n\r"
    "  end 0 start 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_FEC_ECMP_UPDATE_ECMP_UPDATE_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_FEC_ECMP_UPDATE_ECMP_UPDATE_FEC_NDX_ID, 
    "fec_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  fec_ndx:\n\r"
    "  Index in the FEC table.Range: 0 - 16383. Must be even.	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_fec ecmp_update fec_ndx 0 expected_in_rif 0 rpf_mode 0\n\r"
    "  dist_tree_nick 0 out_rif 0 out_ac_id 0 eep 0 dest_val 0 dest_type 0 type 0\n\r"
    "  end 0 start 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_FEC_ECMP_UPDATE_ECMP_UPDATE_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_FEC_ECMP_UPDATE_ECMP_UPDATE_FEC_ARRAY_TRAP_INFO_SNOOP_ACTION_STRENGTH_ID, 
    "snoop_action_strength", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  fec_array.trap_info.snoop_action_strength:\n\r"
    "  Value that identifies the strength of the assignment of Snoop action to the\n\r"
    "  packet. Through the packet processing pipe, many snooping decisions may be\n\r"
    "  taken; yet one decision may overwrite a former decision only if it stronger,\n\r"
    "  i.e., its strength is higher than the last decision that was taken. Range\n\r"
    "  0-3. Relevant only for Petra-B.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_fec ecmp_update fec_ndx 0 snoop_action_strength 0\n\r"
    "  frwrd_action_strength 0 trap_code 0 expected_in_rif 0 rpf_mode 0\n\r"
    "  dist_tree_nick 0 out_rif 0 out_ac_id 0 eep 0 dest_val 0 dest_type 0 type 0\n\r"
    "  end 0 start 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_FEC_ECMP_UPDATE_ECMP_UPDATE_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_FEC_ECMP_UPDATE_ECMP_UPDATE_FEC_ARRAY_TRAP_INFO_FRWRD_ACTION_STRENGTH_ID, 
    "frwrd_action_strength", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  fec_array.trap_info.frwrd_action_strength:\n\r"
    "  Value that identifies the strength of the assignment of Forward action to the\n\r"
    "  packet. Through the packet processing pipe, many forwarding decisions may be\n\r"
    "  taken; yet one decision may overwrite a former decision only if it stronger,\n\r"
    "  i.e., its strength is higher than the last decision that was taken.\n\r"
    "  Range 0-7.Relevant only for Petra-B.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_fec ecmp_update fec_ndx 0 snoop_action_strength 0\n\r"
    "  frwrd_action_strength 0 trap_code 0 expected_in_rif 0 rpf_mode 0\n\r"
    "  dist_tree_nick 0 out_rif 0 out_ac_id 0 eep 0 dest_val 0 dest_type 0 type 0\n\r"
    "  end 0 start 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_FEC_ECMP_UPDATE_ECMP_UPDATE_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_FEC_ECMP_UPDATE_ECMP_UPDATE_FEC_ARRAY_TRAP_INFO_TRAP_CODE_ID, 
    "trap_code", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
#ifdef COMPILER_STRING_CONST_LIMIT
    "  Full documentation cannot be displayed with -pendantic compiler\n\r",
#else
    "  fec_array.trap_info.trap_code:\n\r"
    "  Sets the CPU Trap code. For trapped packet the CPU code are associated into\n\r"
    "  the packet headers. The CPU code also used as index for the\n\r"
    "  forwarding/snooping actions. see to soc_ppd_trap_frwrd_profile_info_set(),\n\r"
    "  soc_ppd_trap_snoop_profile_info_set(). Range Petra-B: 0-255.To know the legal\n\r"
    "  range in specific use of this field, see the documentation in that specific\n\r"
    "  use.Affects Both, the CPU code set on the packets header and the index to\n\r"
    "  access the forwarding and snooping tables. \n\r"
    "",
#endif /* COMPILER_STRING_CONST_LIMIT */
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_fec ecmp_update fec_ndx 0 snoop_action_strength 0\n\r"
    "  frwrd_action_strength 0 trap_code 0 expected_in_rif 0 rpf_mode 0\n\r"
    "  dist_tree_nick 0 out_rif 0 out_ac_id 0 eep 0 dest_val 0 dest_type 0 type 0\n\r"
    "  end 0 start 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_FEC_ECMP_UPDATE_ECMP_UPDATE_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },    
  { 
    SOC_PARAM_PPD_FRWRD_FEC_ECMP_UPDATE_ECMP_UPDATE_FEC_ARRAY_RPF_INFO_EXPECTED_IN_RIF_ID, 
    "ipmc_expected_in_rif", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  fec_array.rpf_info.expected_in_rif:\n\r"
    "  Expected In-RIF used in the MC RPF check\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_fec ecmp_update fec_ndx 0 expected_in_rif 0 rpf_mode 0\n\r"
    "  dist_tree_nick 0 out_rif 0 out_ac_id 0 eep 0 dest_val 0 dest_type 0 type 0\n\r"
    "  end 0 start 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_FEC_ECMP_UPDATE_ECMP_UPDATE_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_FEC_ECMP_UPDATE_ECMP_UPDATE_FEC_ARRAY_RPF_INFO_RPF_MODE_ID, 
    "ip_rpf_mode", 
    (PARAM_VAL_RULES *)&SOC_PPC_FRWRD_FEC_RPF_MODE_rule[0], 
    (sizeof(SOC_PPC_FRWRD_FEC_RPF_MODE_rule) / sizeof(SOC_PPC_FRWRD_FEC_RPF_MODE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  fec_array.rpf_info.rpf_mode:\n\r"
    "  RPF mode (explicit/SIP/SIP_AS_IS).This is relevant only for FEC entries that\n\r"
    "  are used for IPv4 MC.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_fec ecmp_update fec_ndx 0 expected_in_rif 0 rpf_mode 0\n\r"
    "  dist_tree_nick 0 out_rif 0 out_ac_id 0 eep 0 dest_val 0 dest_type 0 type 0\n\r"
    "  end 0 start 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_FEC_ECMP_UPDATE_ECMP_UPDATE_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_FEC_ECMP_UPDATE_ECMP_UPDATE_FEC_ARRAY_RPF_INFO_RPF_MODE_VAL_ID, 
    "ip_rpf_mode_val", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  fec_array.rpf_info.rpf_mode:\n\r"
    "  RPF mode (explicit/SIP/SIP_AS_IS).This is relevant only for FEC entries that\n\r"
    "  are used for IPv4 MC.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_fec ecmp_update fec_ndx 0 expected_in_rif 0 rpf_mode 0\n\r"
    "  dist_tree_nick 0 out_rif 0 out_ac_id 0 eep 0 dest_val 0 dest_type 0 type 0\n\r"
    "  end 0 start 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_FEC_ECMP_UPDATE_ECMP_UPDATE_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_FEC_ECMP_UPDATE_ECMP_UPDATE_FEC_ARRAY_APP_INFO_DIST_TREE_NICK_ID, 
    "trill_dist_tree_nick", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  fec_array.app_info.dist_tree_nick:\n\r"
    "  Dist-Tree-Nick for TRILL Multicast.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_fec ecmp_update fec_ndx 0 expected_in_rif 0 rpf_mode 0\n\r"
    "  dist_tree_nick 0 out_rif 0 out_ac_id 0 eep 0 dest_val 0 dest_type 0 type 0\n\r"
    "  end 0 start 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_FEC_ECMP_UPDATE_ECMP_UPDATE_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_FEC_ECMP_UPDATE_ECMP_UPDATE_FEC_ARRAY_APP_INFO_OUT_RIF_ID, 
    "ipuc_out_rif", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  fec_array.app_info.out_rif:\n\r"
    "  Out-RIF. For IP-UC, MPLS applications. For IP-MC out-RIF is set per copy from\n\r"
    "  the Multicast Group.\n\r"
    "",
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_fec ecmp_update fec_ndx 0 expected_in_rif 0 rpf_mode 0\n\r"
    "  dist_tree_nick 0 out_rif 0 out_ac_id 0 eep 0 dest_val 0 dest_type 0 type 0\n\r"
    "  end 0 start 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_FEC_ECMP_UPDATE_ECMP_UPDATE_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_FEC_ECMP_UPDATE_ECMP_UPDATE_FEC_ARRAY_APP_INFO_OUT_RIF2_ID, 
    "mpls_out_rif", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  fec_array.app_info.out_rif:\n\r"
    "  Out-RIF. For IP-UC, MPLS applications. For IP-MC out-RIF is set per copy from\n\r"
    "  the Multicast Group.\n\r"
    "",
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_fec ecmp_update fec_ndx 0 expected_in_rif 0 rpf_mode 0\n\r"
    "  dist_tree_nick 0 out_rif 0 out_ac_id 0 eep 0 dest_val 0 dest_type 0 type 0\n\r"
    "  end 0 start 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_FEC_ECMP_UPDATE_ECMP_UPDATE_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_FEC_ECMP_UPDATE_ECMP_UPDATE_FEC_ARRAY_APP_INFO_OUT_AC_ID_ID, 
    "bridge_out_ac_id", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  fec_array.app_info.out_ac_id:\n\r"
    "  Attachment Circuit ID. For Bridging with ACRange: PetraB: 0 - 16K-1. T20E\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_fec ecmp_update fec_ndx 0 expected_in_rif 0 rpf_mode 0\n\r"
    "  dist_tree_nick 0 out_rif 0 out_ac_id 0 eep 0 dest_val 0 dest_type 0 type 0\n\r"
    "  end 0 start 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_FEC_ECMP_UPDATE_ECMP_UPDATE_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_FEC_ECMP_UPDATE_ECMP_UPDATE_FEC_ARRAY_EEP_ID, 
    "eep", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
#ifdef COMPILER_STRING_CONST_LIMIT
    "  Full documentation cannot be displayed with -pendantic compiler\n\r",
#else
    "  fec_array.eep:\n\r"
    "  Egress Encapsulation pointer.According to FEC Type:Bridging: Expected to\n\r"
    "  point to Tunnel/ PWE / MinM interfaceIP UC to RIF-VSI: Expected to point to\n\r"
    "  the link-layer next-hop information.IP UC to RIF-Tunnel: Expected to point to\n\r"
    "  the Tunnel information.TRILL-UC: Expected to point to the link-layer next-hop\n\r"
    "  information.MPLS LSR: In PetraB - Expected to point to: *An MPLS Tunnel, for\n\r"
    "  Swap & Push. *Next hop DA, for Swap. The rest of the LL encapasulation (SA\n\r"
    "  and VID) is deduced from the Out-RIF assigned by this FEC entry (see app_info\n\r"
    "  field)In T20E - Expected to point to: *An MPLS Tunnel. If only Swap action is\n\r"
    "  required, the indexed Tunnel should be null, providing only the index to the\n\r"
    "  link-layer encapsulation information and the outgoing core VSID.\n\r"
    "",
#endif /* COMPILER_STRING_CONST_LIMIT */
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_fec ecmp_update fec_ndx 0 expected_in_rif 0 rpf_mode 0\n\r"
    "  dist_tree_nick 0 out_rif 0 out_ac_id 0 eep 0 dest_val 0 dest_type 0 type 0\n\r"
    "  end 0 start 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_FEC_ECMP_UPDATE_ECMP_UPDATE_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_FEC_ECMP_UPDATE_ECMP_UPDATE_FEC_ARRAY_DEST_DEST_VAL_ID, 
    "dest_val", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  fec_array.dest.dest_val:\n\r"
    "  The destination value, according to the type (Single, LAG, Multicast...)For the\n\r"
    "  LAG type, the value is the LAG ID. Range: 0 - 255.For the DROP type, value is\n\r"
    "  not relevant.For the ROUTER type, value is not relevant.For the MULTICAST\n\r"
    "  type, range: 0 - 16383.For the Single_Port type, range: 0 - 4095.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_fec ecmp_update fec_ndx 0 expected_in_rif 0 rpf_mode 0\n\r"
    "  dist_tree_nick 0 out_rif 0 out_ac_id 0 eep 0 dest_val 0 dest_type 0 type 0\n\r"
    "  end 0 start 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_FEC_ECMP_UPDATE_ECMP_UPDATE_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_FEC_ECMP_UPDATE_ECMP_UPDATE_FEC_ARRAY_DEST_DEST_TYPE_ID, 
    "dest_type", 
    (PARAM_VAL_RULES *)&SOC_PPD_SAND_PP_DEST_TYPE_rule[0], 
    (sizeof(SOC_PPD_SAND_PP_DEST_TYPE_rule) / sizeof(SOC_PPD_SAND_PP_DEST_TYPE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  fec_array.dest.dest_type:\n\r"
    "  The type of the following destination ID.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_fec ecmp_update fec_ndx 0 expected_in_rif 0 rpf_mode 0\n\r"
    "  dist_tree_nick 0 out_rif 0 out_ac_id 0 eep 0 dest_val 0 dest_type 0 type 0\n\r"
    "  end 0 start 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_FEC_ECMP_UPDATE_ECMP_UPDATE_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_FEC_ECMP_UPDATE_ECMP_UPDATE_FEC_ARRAY_TYPE_ID, 
    "type", 
    (PARAM_VAL_RULES *)&SOC_PPC_FEC_TYPE_rule[0], 
    (sizeof(SOC_PPC_FEC_TYPE_rule) / sizeof(SOC_PPC_FEC_TYPE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  fec_array.type:\n\r"
    "  The type of the FEC entry may be one of the following: IP UC/ MC, TRILL UC /\n\r"
    "  MC, Bridging, MPLS LSR, Drop, or Trap.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_fec ecmp_update fec_ndx 0 expected_in_rif 0 rpf_mode 0\n\r"
    "  dist_tree_nick 0 out_rif 0 out_ac_id 0 eep 0 dest_val 0 dest_type 0 type 0\n\r"
    "  end 0 start 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_FEC_ECMP_UPDATE_ECMP_UPDATE_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_FEC_ECMP_UPDATE_ECMP_UPDATE_FEC_RANGE_END_ID, 
    "end", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  fec_range.end:\n\r"
    "  End of the range [start, end]: May be closed or open range according to what\n\r"
    "  is specified for the specific use.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_fec ecmp_update fec_ndx 0 expected_in_rif 0 rpf_mode 0\n\r"
    "  dist_tree_nick 0 out_rif 0 out_ac_id 0 eep 0 dest_val 0 dest_type 0 type 0\n\r"
    "  end 0 start 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_FEC_ECMP_UPDATE_ECMP_UPDATE_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_FEC_ECMP_UPDATE_ECMP_UPDATE_FEC_RANGE_START_ID, 
    "start", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  fec_range.start:\n\r"
    "  Start of the range.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_fec ecmp_update fec_ndx 0 expected_in_rif 0 rpf_mode 0\n\r"
    "  dist_tree_nick 0 out_rif 0 out_ac_id 0 eep 0 dest_val 0 dest_type 0 type 0\n\r"
    "  end 0 start 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_FEC_ECMP_UPDATE_ECMP_UPDATE_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_FEC_ENTRY_USE_INFO_GET_ENTRY_USE_INFO_GET_ID, 
    "entry_use_info_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Get the usage/allocation of the FEC entry pointed by fec_ndx\n\r"
    "  (ECMP/FEC/protected FEC/none).\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_fec entry_use_info_get fec_ndx 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_FEC_ENTRY_USE_INFO_GET_ENTRY_USE_INFO_GET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_FEC_ENTRY_USE_INFO_GET_ENTRY_USE_INFO_GET_FEC_NDX_ID, 
    "fec_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  fec_ndx:\n\r"
    "  Index in the FEC table.Range: 0 - 16383.	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_fec entry_use_info_get fec_ndx 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_FEC_ENTRY_USE_INFO_GET_ENTRY_USE_INFO_GET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_FEC_ENTRY_GET_ENTRY_GET_ID, 
    "entry_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Get FEC entry from the FEC table. May include protection. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_fec entry_get fec_ndx 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_FEC_ENTRY_GET_ENTRY_GET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_FEC_ENTRY_GET_ENTRY_GET_FEC_NDX_ID, 
    "fec_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  fec_ndx:\n\r"
    "  Index in the FEC table.Range: 0 - 16383. Has to be even for Protected FECs in\n\r"
    "  Petra-B.	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_fec entry_get fec_ndx 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_FEC_ENTRY_GET_ENTRY_GET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_FEC_ECMP_GET_ECMP_GET_ID, 
    "ecmp_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Update content of range of the ECMP.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_fec ecmp_get fec_ndx 0 end 0 start 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_FEC_ECMP_GET_ECMP_GET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_FEC_ECMP_GET_ECMP_GET_FEC_NDX_ID, 
    "fec_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  fec_ndx:\n\r"
    "  Index in the FEC table.Range: 0 - 16383. Must be even and start of ECMP.	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_fec ecmp_get fec_ndx 0 end 0 start 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_FEC_ECMP_GET_ECMP_GET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_FEC_ECMP_GET_ECMP_GET_FEC_RANGE_END_ID, 
    "end", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  fec_range.end:\n\r"
    "  End of the range [start, end]: May be closed or open range according to what\n\r"
    "  is specified for the specific use.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_fec ecmp_get fec_ndx 0 end 0 start 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_FEC_ECMP_GET_ECMP_GET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_FEC_ECMP_GET_ECMP_GET_FEC_RANGE_START_ID, 
    "start", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  fec_range.start:\n\r"
    "  Start of the range.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_fec ecmp_get fec_ndx 0 end 0 start 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_FEC_ECMP_GET_ECMP_GET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_FEC_REMOVE_REMOVE_ID, 
    "remove", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Remove FEC entry/entries associated with fec_ndx.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_fec remove fec_ndx 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_FEC_REMOVE_REMOVE_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_FEC_REMOVE_REMOVE_FEC_NDX_ID, 
    "fec_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  fec_ndx:\n\r"
    "  Index in the FEC table.Range: 0 - 16383.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_fec remove fec_ndx 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_FEC_REMOVE_REMOVE_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_FEC_PROTECTION_OAM_INSTANCE_STATUS_SET_PROTECTION_OAM_INSTANCE_STATUS_SET_ID, 
    "protection_oam_instance_status_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set the status of the OAM instance. For all PATH protected FECs that point to\n\r"
    "  this instance, the working FEC will be used if up is TRUE, and the protect\n\r"
    "  FEC will be used otherwise.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_fec protection_oam_instance_status_set oam_instance_ndx 0 up 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_FEC_PROTECTION_OAM_INSTANCE_STATUS_SET_PROTECTION_OAM_INSTANCE_STATUS_SET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_FEC_PROTECTION_OAM_INSTANCE_STATUS_SET_PROTECTION_OAM_INSTANCE_STATUS_SET_OAM_INSTANCE_NDX_ID, 
    "oam_instance_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  oam_instance_ndx:\n\r"
    "  OAM instance ID.Range: Petra-B: 0-4K-1, T20E:0-16K-1.	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_fec protection_oam_instance_status_set oam_instance_ndx 0 up 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_FEC_PROTECTION_OAM_INSTANCE_STATUS_SET_PROTECTION_OAM_INSTANCE_STATUS_SET_ID), 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_FEC_PROTECTION_OAM_INSTANCE_STATUS_SET_PROTECTION_OAM_INSTANCE_STATUS_SET_UP_ID, 
    "up", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  up:\n\r"
    "  OAM instance status.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_fec protection_oam_instance_status_set oam_instance_ndx 0 up 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_FEC_PROTECTION_OAM_INSTANCE_STATUS_SET_PROTECTION_OAM_INSTANCE_STATUS_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_FEC_PROTECTION_OAM_INSTANCE_STATUS_GET_PROTECTION_OAM_INSTANCE_STATUS_GET_ID, 
    "protection_oam_instance_status_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set the status of the OAM instance. For all PATH protected FECs that point to\n\r"
    "  this instance, the working FEC will be used if up is TRUE, and the protect\n\r"
    "  FEC will be used otherwise.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_fec protection_oam_instance_status_get oam_instance_ndx 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_FEC_PROTECTION_OAM_INSTANCE_STATUS_GET_PROTECTION_OAM_INSTANCE_STATUS_GET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_FEC_PROTECTION_OAM_INSTANCE_STATUS_GET_PROTECTION_OAM_INSTANCE_STATUS_GET_OAM_INSTANCE_NDX_ID, 
    "oam_instance_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  oam_instance_ndx:\n\r"
    "  OAM instance ID.Range: Petra-B: 0-4K-1, T20E:0-16K-1.	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_fec protection_oam_instance_status_get oam_instance_ndx 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_FEC_PROTECTION_OAM_INSTANCE_STATUS_GET_PROTECTION_OAM_INSTANCE_STATUS_GET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_FEC_PROTECTION_SYS_PORT_STATUS_SET_PROTECTION_SYS_PORT_STATUS_SET_ID, 
    "protection_sys_port_status_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set the status of the System Port (LAG or Physical port).\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_fec protection_sys_port_status_set sys_id 0 sys_port_type 0 up 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_FEC_PROTECTION_SYS_PORT_STATUS_SET_PROTECTION_SYS_PORT_STATUS_SET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_FEC_PROTECTION_SYS_PORT_STATUS_SET_PROTECTION_SYS_PORT_STATUS_SET_SYS_PORT_NDX_SYS_ID_ID, 
    "sys_id", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  sys_port_ndx.sys_id:\n\r"
    "  The system port value, according to the type (Single or LAG).For LAG the\n\r"
    "  value is the group ID.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_fec protection_sys_port_status_set sys_id 0 sys_port_type 0 up 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_FEC_PROTECTION_SYS_PORT_STATUS_SET_PROTECTION_SYS_PORT_STATUS_SET_ID), 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_FEC_PROTECTION_SYS_PORT_STATUS_SET_PROTECTION_SYS_PORT_STATUS_SET_SYS_PORT_NDX_SYS_PORT_TYPE_ID, 
    "sys_port_type", 
    (PARAM_VAL_RULES *)&SOC_PPD_SAND_PP_SYS_PORT_TYPE_rule[0], 
    (sizeof(SOC_PPD_SAND_PP_SYS_PORT_TYPE_rule) / sizeof(SOC_PPD_SAND_PP_SYS_PORT_TYPE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  sys_port_ndx.sys_port_type:\n\r"
    "  The system port type single/LAG.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_fec protection_sys_port_status_set sys_id 0 sys_port_type 0 up 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_FEC_PROTECTION_SYS_PORT_STATUS_SET_PROTECTION_SYS_PORT_STATUS_SET_ID), 
    4, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_FEC_PROTECTION_SYS_PORT_STATUS_SET_PROTECTION_SYS_PORT_STATUS_SET_UP_ID, 
    "up", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  up:\n\r"
    "  System port status.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_fec protection_sys_port_status_set sys_id 0 sys_port_type 0 up 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_FEC_PROTECTION_SYS_PORT_STATUS_SET_PROTECTION_SYS_PORT_STATUS_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_FEC_PROTECTION_SYS_PORT_STATUS_GET_PROTECTION_SYS_PORT_STATUS_GET_ID, 
    "protection_sys_port_status_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set the status of the System Port (LAG or Physical port).\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_fec protection_sys_port_status_get sys_id 0 sys_port_type 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_FEC_PROTECTION_SYS_PORT_STATUS_GET_PROTECTION_SYS_PORT_STATUS_GET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_FEC_PROTECTION_SYS_PORT_STATUS_GET_PROTECTION_SYS_PORT_STATUS_GET_SYS_PORT_NDX_SYS_ID_ID, 
    "sys_id", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  sys_port_ndx.sys_id:\n\r"
    "  The system port value, according to the type (Single or LAG).For LAG the\n\r"
    "  value is the group ID.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_fec protection_sys_port_status_get sys_id 0 sys_port_type 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_FEC_PROTECTION_SYS_PORT_STATUS_GET_PROTECTION_SYS_PORT_STATUS_GET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_FEC_PROTECTION_SYS_PORT_STATUS_GET_PROTECTION_SYS_PORT_STATUS_GET_SYS_PORT_NDX_SYS_PORT_TYPE_ID, 
    "sys_port_type", 
    (PARAM_VAL_RULES *)&SOC_PPD_SAND_PP_SYS_PORT_TYPE_rule[0], 
    (sizeof(SOC_PPD_SAND_PP_SYS_PORT_TYPE_rule) / sizeof(SOC_PPD_SAND_PP_SYS_PORT_TYPE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  sys_port_ndx.sys_port_type:\n\r"
    "  The system port type single/LAG.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_fec protection_sys_port_status_get sys_id 0 sys_port_type 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_FEC_PROTECTION_SYS_PORT_STATUS_GET_PROTECTION_SYS_PORT_STATUS_GET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_FEC_GET_BLOCK_GET_BLOCK_ID, 
    "get_block", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Traverse the FEC table (in the specified range) and get all the FEC entries\n\r"
    "  that match the given rule.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_fec get_block value 0 type 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_FEC_GET_BLOCK_GET_BLOCK_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_FEC_GET_BLOCK_GET_BLOCK_RULE_VALUE_ID, 
    "value", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  rule.value:\n\r"
    "  A value that is compared with the FEC entry contents.According to type:-\n\r"
    "  path_protect, then this is the OAM instance- facility_protect, then this is\n\r"
    "  the system port- app_type, then this is the application type-\n\r"
    "  accessed/trap_if_accessed ignored\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_fec get_block value 0 type 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_FEC_GET_BLOCK_GET_BLOCK_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
{ 
    SOC_PARAM_PPD_FRWRD_FEC_GET_BLOCK_GET_BLOCK_START_FROM_ID, 
    "start_from", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  rule.value:\n\r"
    "  A value that is compared with the FEC entry contents.According to type:-\n\r"
    "  path_protect, then this is the OAM instance- facility_protect, then this is\n\r"
    "  the system port- app_type, then this is the application type-\n\r"
    "  accessed/trap_if_accessed ignored\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_fec get_block value 0 type 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_FEC_GET_BLOCK_GET_BLOCK_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_FEC_GET_BLOCK_GET_BLOCK_RULE_TYPE_ID, 
    "type", 
    (PARAM_VAL_RULES *)&SOC_PPC_FRWRD_FEC_MATCH_RULE_TYPE_rule[0], 
    (sizeof(SOC_PPC_FRWRD_FEC_MATCH_RULE_TYPE_rule) / sizeof(SOC_PPC_FRWRD_FEC_MATCH_RULE_TYPE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  rule.type:\n\r"
    "  The use of the FEC (none/one FEC/ECMP/path or facility protection)\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_fec get_block value 0 type 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_FEC_GET_BLOCK_GET_BLOCK_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_FEC_ENTRY_ACCESSED_INFO_SET_ENTRY_ACCESSED_INFO_SET_ID, 
    "entry_accessed_info_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set action to do by the device when a packet accesses the FEC entry. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_fec entry_accessed_info_set fec_id_ndx 0 accessed 0\n\r"
    "  trap_if_accessed 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_FEC_ENTRY_ACCESSED_INFO_SET_ENTRY_ACCESSED_INFO_SET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_FEC_ENTRY_ACCESSED_INFO_SET_ENTRY_ACCESSED_INFO_SET_FEC_ID_NDX_ID, 
    "fec_id_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  fec_id_ndx:\n\r"
    "  Index in the FEC table.Range: 0 - 16383.	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_fec entry_accessed_info_set fec_id_ndx 0 accessed 0\n\r"
    "  trap_if_accessed 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_FEC_ENTRY_ACCESSED_INFO_SET_ENTRY_ACCESSED_INFO_SET_ID), 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_FEC_ENTRY_ACCESSED_INFO_SET_ENTRY_ACCESSED_INFO_SET_ACCESSED_INFO_TRAP_IF_ACCESSED_ID, 
    "trap_if_accessed", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  accessed_info.trap_if_accessed:\n\r"
    "  If entry is accessed and this set to TRUE, trap the packet with trap code\n\r"
    "  SOC_PPC_TRAP_CODE_FEC_ENTRY_ACCESSED, and reset this field.Can be set to first 64\n\r"
    "  entries only.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_fec entry_accessed_info_set fec_id_ndx 0 accessed 0\n\r"
    "  trap_if_accessed 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_FEC_ENTRY_ACCESSED_INFO_SET_ENTRY_ACCESSED_INFO_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
    
  { 
    SOC_PARAM_PPD_FRWRD_FEC_ENTRY_ACCESSED_INFO_GET_ENTRY_ACCESSED_INFO_GET_ID, 
    "entry_accessed_info_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set action to do by the device when a packet accesses the FEC entry. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_fec entry_accessed_info_get fec_id_ndx 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_FEC_ENTRY_ACCESSED_INFO_GET_ENTRY_ACCESSED_INFO_GET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_FEC_ENTRY_ACCESSED_INFO_GET_ENTRY_ACCESSED_INFO_GET_FEC_ID_NDX_ID, 
    "fec_id_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  fec_id_ndx:\n\r"
    "  Index in the FEC table.Range: 0 - 16383.	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_fec entry_accessed_info_get fec_id_ndx 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_FEC_ENTRY_ACCESSED_INFO_GET_ENTRY_ACCESSED_INFO_GET_ID), 
    LAST_ORDINAL, 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_FEC_ENTRY_ACCESSED_INFO_GET_ENTRY_ACCESSED_INFO_GET_CLEAR_ID, 
    "clear", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  fec_id_ndx:\n\r"
    "  Index in the FEC table.Range: 0 - 16383.	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_fec entry_accessed_info_get fec_id_ndx 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_FEC_ENTRY_ACCESSED_INFO_GET_ENTRY_ACCESSED_INFO_GET_ID), 
    LAST_ORDINAL, 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_FEC_ECMP_HASHING_GLOBAL_INFO_SET_ECMP_HASHING_GLOBAL_INFO_SET_ID, 
    "ecmp_hashing_global_info_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set the ECMP hashing global attributes\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_fec ecmp_hashing_global_info_set key_shift 0 hash_func_id 0\n\r"
    "  seed 0 use_port_id 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_FEC_ECMP_HASHING_GLOBAL_INFO_SET_ECMP_HASHING_GLOBAL_INFO_SET_ID), 
    2, 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_FEC_ECMP_HASHING_GLOBAL_INFO_SET_ECMP_HASHING_GLOBAL_INFO_SET_GLBL_HASH_INFO_KEY_SHIFT_ID, 
    "key_shift", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  glbl_hash_info.key_shift:\n\r"
    "  The load balancing key is barrel shifted by this value.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_fec ecmp_hashing_global_info_set key_shift 0 hash_func_id 0\n\r"
    "  seed 0 use_port_id 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_FEC_ECMP_HASHING_GLOBAL_INFO_SET_ECMP_HASHING_GLOBAL_INFO_SET_ID), 
    LAST_ORDINAL, 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_FEC_ECMP_HASHING_GLOBAL_INFO_SET_ECMP_HASHING_GLOBAL_INFO_SET_GLBL_HASH_INFO_HASH_FUNC_ID_ID, 
    "hash_func_id", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
#ifdef COMPILER_STRING_CONST_LIMIT
    "  Full documentation cannot be displayed with -pendantic compiler\n\r",
#else
    "  glbl_hash_info.hash_func_id:\n\r"
    "  0 - Use polynomial 0x17111 \n\r"
    "  1 - Use polynomial 0x10491 \n\r"
    "  2 - Use polynomial 0x155f5 \n\r"
    "  3 - Use polynomial 0x19715 \n\r"
    "  4 - Use polynomial 0x13965 \n\r"
    "  5 - Use polynomial 0x1698d \n\r"
    "  6 - Use polynomial 0x1105d \n\r"
    "  7 - Use LB-Key-Packet-Data directly \n\r"
    "  8 - Use counter incremented every packet \n\r"
    "  9 - User counter incremented every two clocks \n\r"
    "  10 - Use polynomial 0x10861  \n\r"
    "  11 - Use polynomial 0x10285  \n\r"
    "  12 - Use polynomial 0x101a1  \n\r"
    "  13 - Use polynomial 0x12499  \n\r"
    "  14 - Use polynomial 0x1f801   \n\r"
    "  15 - Use polynomial 0x172e1  \n\r"
    "  16 - Use polynomial 0x1eb21  \n\r"
    "  Petra-B supports 0-9. \n\r"
    "  Arad Supports 4-15. \n\r"
    "  in Arad: cannot use same function for ECMP and LAG hashing \n\r"
    "  see SOC_PPC_FEC_LB_xxx \n\r"
    "",
#endif /* COMPILER_STRING_CONST_LIMIT */
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_fec ecmp_hashing_global_info_set key_shift 0 hash_func_id 0\n\r"
    "  seed 0 use_port_id 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_FEC_ECMP_HASHING_GLOBAL_INFO_SET_ECMP_HASHING_GLOBAL_INFO_SET_ID), 
    LAST_ORDINAL, 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_FEC_ECMP_HASHING_GLOBAL_INFO_SET_ECMP_HASHING_GLOBAL_INFO_SET_GLBL_HASH_INFO_SEED_ID, 
    "seed", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  glbl_hash_info.seed:\n\r"
    "  Initial value for the LB key generation\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_fec ecmp_hashing_global_info_set key_shift 0 hash_func_id 0\n\r"
    "  seed 0 use_port_id 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_FEC_ECMP_HASHING_GLOBAL_INFO_SET_ECMP_HASHING_GLOBAL_INFO_SET_ID), 
    LAST_ORDINAL, 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_FEC_ECMP_HASHING_GLOBAL_INFO_SET_ECMP_HASHING_GLOBAL_INFO_SET_GLBL_HASH_INFO_USE_PORT_ID_ID, 
    "use_port_id", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  glbl_hash_info.use_port_id:\n\r"
    "  If set the In-PP-Port is used in the CRC vectors\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_fec ecmp_hashing_global_info_set key_shift 0 hash_func_id 0\n\r"
    "  seed 0 use_port_id 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_FEC_ECMP_HASHING_GLOBAL_INFO_SET_ECMP_HASHING_GLOBAL_INFO_SET_ID), 
    LAST_ORDINAL, 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_FEC_ECMP_HASHING_GLOBAL_INFO_GET_ECMP_HASHING_GLOBAL_INFO_GET_ID, 
    "ecmp_hashing_global_info_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set the ECMP hashing global attributes\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_fec ecmp_hashing_global_info_get\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_FEC_ECMP_HASHING_GLOBAL_INFO_GET_ECMP_HASHING_GLOBAL_INFO_GET_ID), 
    2, 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_FEC_ECMP_HASHING_PORT_INFO_SET_ECMP_HASHING_PORT_INFO_SET_ID, 
    "ecmp_hashing_port_info_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set the ECMP hashing per-port attributes\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_fec ecmp_hashing_port_info_set port_ndx 0 nof_headers 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_FEC_ECMP_HASHING_PORT_INFO_SET_ECMP_HASHING_PORT_INFO_SET_ID), 
    2, 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_FEC_ECMP_HASHING_PORT_INFO_SET_ECMP_HASHING_PORT_INFO_SET_PORT_NDX_ID, 
    "port_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  port_ndx:\n\r"
    "  Port ID. 	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_fec ecmp_hashing_port_info_set port_ndx 0 nof_headers 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_FEC_ECMP_HASHING_PORT_INFO_SET_ECMP_HASHING_PORT_INFO_SET_ID), 
    3, 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_FEC_ECMP_HASHING_PORT_INFO_SET_ECMP_HASHING_PORT_INFO_SET_PORT_HASH_INFO_NOF_HEADERS_ID, 
    "nof_headers", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  port_hash_info.nof_headers:\n\r"
    "  Number of headers to parse.Range: 1-2\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_fec ecmp_hashing_port_info_set port_ndx 0 nof_headers 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_FEC_ECMP_HASHING_PORT_INFO_SET_ECMP_HASHING_PORT_INFO_SET_ID), 
    LAST_ORDINAL, 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_FEC_ECMP_HASHING_PORT_INFO_GET_ECMP_HASHING_PORT_INFO_GET_ID, 
    "ecmp_hashing_port_info_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set the ECMP hashing per-port attributes\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_fec ecmp_hashing_port_info_get port_ndx 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_FEC_ECMP_HASHING_PORT_INFO_GET_ECMP_HASHING_PORT_INFO_GET_ID), 
    2, 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_FEC_ECMP_HASHING_PORT_INFO_GET_ECMP_HASHING_PORT_INFO_GET_PORT_NDX_ID, 
    "port_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  port_ndx:\n\r"
    "  Port ID. 	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api frwrd_fec ecmp_hashing_port_info_get port_ndx 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FRWRD_FEC_ECMP_HASHING_PORT_INFO_GET_ECMP_HASHING_PORT_INFO_GET_ID), 
    LAST_ORDINAL, 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_API_FRWRD_FEC_ID, 
    "frwrd_fec", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "",
    "", 
    "",
    BIT_UI_16_RNG(SOC_FUN_PPD_API_FRWRD_FEC_FIRST_ID,SOC_FUN_PPD_API_FRWRD_FEC_LAST_ID), 
    1, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
#endif /* } frwrd_fec*/
#ifdef UI_EG_FILTER/* { eg_filter*/
  { 
    SOC_PARAM_PPD_EG_FILTER_PORT_INFO_SET_PORT_INFO_SET_ID, 
    "port_info_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Sets out-port filtering information, including which filtering to perform on\n\r"
    "  this specific out-port.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_filter port_info_set out_port_ndx 0 acceptable_frames_profile 0\n\r"
    "  filter_mask 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_EG_FILTER_PORT_INFO_SET_PORT_INFO_SET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_FILTER_PORT_INFO_SET_PORT_INFO_SET_OUT_PORT_NDX_ID, 
    "out_port_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  out_port_ndx:\n\r"
    "  Local out-port ID.	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_filter port_info_set out_port_ndx 0 acceptable_frames_profile 0\n\r"
    "  filter_mask 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_EG_FILTER_PORT_INFO_SET_PORT_INFO_SET_ID), 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_FILTER_PORT_INFO_SET_PORT_INFO_SET_PORT_INFO_ACCEPTABLE_FRAMES_PROFILE_ID, 
    "acceptable_frames_profile", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  port_info.acceptable_frames_profile:\n\r"
    "  Profile of out-port to be used in the setting of acceptable frames types.\n\r"
    "  Used by the API soc_ppd_eg_filter_port_acceptable_frames_set.Petra-B only.Range\n\r"
    "  0-3\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_filter port_info_set out_port_ndx 0 acceptable_frames_profile 0\n\r"
    "  filter_mask 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_EG_FILTER_PORT_INFO_SET_PORT_INFO_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_FILTER_PORT_INFO_SET_PORT_INFO_SET_PORT_INFO_FILTER_MASK_ID, 
    "enable_type", 
    (PARAM_VAL_RULES *)&SOC_PPC_EG_FILTER_PORT_ENABLE_rule[0], 
    (sizeof(SOC_PPC_EG_FILTER_PORT_ENABLE_rule) / sizeof(SOC_PPC_EG_FILTER_PORT_ENABLE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  port_info.filter_mask:\n\r"
    "  Mask to enable/disable filtering. See SOC_PPC_EG_FILTER_PORT_ENABLE. For example\n\r"
    "  to set enable filtering for VSI membership and STP, set filter_mask =\n\r"
    "  SOC_PPC_EG_FILTER_PORT_ENABLE_VSI_MEMBERSHIP | SOC_PPC_EG_FILTER_PORT_ENABLE_STP;\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_filter port_info_set out_port_ndx 0 acceptable_frames_profile 0\n\r"
    "  filter_mask 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_EG_FILTER_PORT_INFO_SET_PORT_INFO_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_FILTER_PORT_INFO_SET_PORT_INFO_SET_PORT_INFO_FILTER_MASK2_ID, 
    "disable_type", 
    (PARAM_VAL_RULES *)&SOC_PPC_EG_FILTER_PORT_ENABLE_rule[0], 
    (sizeof(SOC_PPC_EG_FILTER_PORT_ENABLE_rule) / sizeof(SOC_PPC_EG_FILTER_PORT_ENABLE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  port_info.filter_mask:\n\r"
    "  Mask to enable/disable filtering. See SOC_PPC_EG_FILTER_PORT_ENABLE. For example\n\r"
    "  to set enable filtering for VSI membership and STP, set filter_mask =\n\r"
    "  SOC_PPC_EG_FILTER_PORT_ENABLE_VSI_MEMBERSHIP | SOC_PPC_EG_FILTER_PORT_ENABLE_STP;\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_filter port_info_set out_port_ndx 0 acceptable_frames_profile 0\n\r"
    "  filter_mask 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_EG_FILTER_PORT_INFO_SET_PORT_INFO_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_FILTER_PORT_INFO_GET_PORT_INFO_GET_ID, 
    "port_info_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Sets out-port filtering information, including which filtering to perform on\n\r"
    "  this specific out-port.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_filter port_info_get out_port_ndx 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_EG_FILTER_PORT_INFO_GET_PORT_INFO_GET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_FILTER_PORT_INFO_GET_PORT_INFO_GET_OUT_PORT_NDX_ID, 
    "out_port_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  out_port_ndx:\n\r"
    "  Local out-port ID.	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_filter port_info_get out_port_ndx 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_EG_FILTER_PORT_INFO_GET_PORT_INFO_GET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_FILTER_VSI_PORT_MEMBERSHIP_SET_VSI_PORT_MEMBERSHIP_SET_ID, 
    "vsi_port_membership_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Sets egress VSI membership, which represents the Service/S-VLAN membership.\n\r"
    "  Set whether outgoing local port belongs to the VSI. Packets transmitted out\n\r"
    "  through a port that is not member of the packet's VSI are filtered. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_filter vsi_port_membership_set vsid_ndx 0 out_port_ndx 0 is_member\n\r"
    "  0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_EG_FILTER_VSI_PORT_MEMBERSHIP_SET_VSI_PORT_MEMBERSHIP_SET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_FILTER_VSI_PORT_MEMBERSHIP_SET_VSI_PORT_MEMBERSHIP_SET_VSID_NDX_ID, 
    "vsid_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  vsid_ndx:\n\r"
    "  SOC_SAND_IN	SOC_PPC_VSI_ID	vsid_ndx\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_filter vsi_port_membership_set vsid_ndx 0 out_port_ndx 0 is_member\n\r"
    "  0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_EG_FILTER_VSI_PORT_MEMBERSHIP_SET_VSI_PORT_MEMBERSHIP_SET_ID), 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_FILTER_VSI_PORT_MEMBERSHIP_SET_VSI_PORT_MEMBERSHIP_SET_OUT_PORT_NDX_ID, 
    "out_port_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  out_port_ndx:\n\r"
    "  Local out-port ID.	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_filter vsi_port_membership_set vsid_ndx 0 out_port_ndx 0 is_member\n\r"
    "  0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_EG_FILTER_VSI_PORT_MEMBERSHIP_SET_VSI_PORT_MEMBERSHIP_SET_ID), 
    4, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_FILTER_VSI_PORT_MEMBERSHIP_SET_VSI_PORT_MEMBERSHIP_SET_IS_MEMBER_ID, 
    "is_member", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  is_member:\n\r"
    "  If TRUE, then the port is member of the VSI; otherwise, the port is not\n\r"
    "  member.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_filter vsi_port_membership_set vsid_ndx 0 out_port_ndx 0 is_member\n\r"
    "  0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_EG_FILTER_VSI_PORT_MEMBERSHIP_SET_VSI_PORT_MEMBERSHIP_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_FILTER_VSI_PORT_MEMBERSHIP_GET_VSI_PORT_MEMBERSHIP_GET_ID, 
    "vsi_port_membership_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Sets egress VSI membership, which represents the Service/S-VLAN membership.\n\r"
    "  Set whether outgoing local port belongs to the VSI. Packets transmitted out\n\r"
    "  through a port that is not member of the packet's VSI are filtered. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_filter vsi_port_membership_get vsid_ndx 0 out_port_ndx 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_EG_FILTER_VSI_PORT_MEMBERSHIP_GET_VSI_PORT_MEMBERSHIP_GET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_FILTER_VSI_PORT_MEMBERSHIP_GET_VSI_PORT_MEMBERSHIP_GET_VSID_NDX_ID, 
    "vsid_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  vsid_ndx:\n\r"
    "  SOC_SAND_IN	SOC_PPC_VSI_ID	vsid_ndx\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_filter vsi_port_membership_get vsid_ndx 0 out_port_ndx 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_EG_FILTER_VSI_PORT_MEMBERSHIP_GET_VSI_PORT_MEMBERSHIP_GET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_FILTER_VSI_PORT_MEMBERSHIP_GET_VSI_PORT_MEMBERSHIP_GET_OUT_PORT_NDX_ID, 
    "out_port_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  out_port_ndx:\n\r"
    "  Local out-port ID.	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_filter vsi_port_membership_get vsid_ndx 0 out_port_ndx 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_EG_FILTER_VSI_PORT_MEMBERSHIP_GET_VSI_PORT_MEMBERSHIP_GET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_FILTER_CVID_PORT_MEMBERSHIP_SET_CVID_PORT_MEMBERSHIP_SET_ID, 
    "cvid_port_membership_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Sets egress CVID membership (relevant for CEP ports). Sets whether outgoing\n\r"
    "  local port belongs to the CVID. Packets transmitted out through a port that\n\r"
    "  is not member of the packet's CVID are filtered. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_filter cvid_port_membership_set cvid_ndx 0 out_port_ndx 0\n\r"
    "  is_member 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_EG_FILTER_CVID_PORT_MEMBERSHIP_SET_CVID_PORT_MEMBERSHIP_SET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_FILTER_CVID_PORT_MEMBERSHIP_SET_CVID_PORT_MEMBERSHIP_SET_CVID_NDX_ID, 
    "cvid_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  cvid_ndx:\n\r"
    "  CVID to set the membership for. Range: 0 - 4095. (4K)	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_filter cvid_port_membership_set cvid_ndx 0 out_port_ndx 0\n\r"
    "  is_member 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_EG_FILTER_CVID_PORT_MEMBERSHIP_SET_CVID_PORT_MEMBERSHIP_SET_ID), 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_FILTER_CVID_PORT_MEMBERSHIP_SET_CVID_PORT_MEMBERSHIP_SET_OUT_PORT_NDX_ID, 
    "out_port_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  out_port_ndx:\n\r"
    "  Local out-port ID.	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_filter cvid_port_membership_set cvid_ndx 0 out_port_ndx 0\n\r"
    "  is_member 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_EG_FILTER_CVID_PORT_MEMBERSHIP_SET_CVID_PORT_MEMBERSHIP_SET_ID), 
    4, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_FILTER_CVID_PORT_MEMBERSHIP_SET_CVID_PORT_MEMBERSHIP_SET_IS_MEMBER_ID, 
    "is_member", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  is_member:\n\r"
    "  If TRUE, then the port is member of the CVID; otherwise, the port is not\n\r"
    "  member.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_filter cvid_port_membership_set cvid_ndx 0 out_port_ndx 0\n\r"
    "  is_member 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_EG_FILTER_CVID_PORT_MEMBERSHIP_SET_CVID_PORT_MEMBERSHIP_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_FILTER_CVID_PORT_MEMBERSHIP_GET_CVID_PORT_MEMBERSHIP_GET_ID, 
    "cvid_port_membership_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Sets egress CVID membership (relevant for CEP ports). Sets whether outgoing\n\r"
    "  local port belongs to the CVID. Packets transmitted out through a port that\n\r"
    "  is not member of the packet's CVID are filtered. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_filter cvid_port_membership_get cvid_ndx 0 out_port_ndx 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_EG_FILTER_CVID_PORT_MEMBERSHIP_GET_CVID_PORT_MEMBERSHIP_GET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_FILTER_CVID_PORT_MEMBERSHIP_GET_CVID_PORT_MEMBERSHIP_GET_CVID_NDX_ID, 
    "cvid_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  cvid_ndx:\n\r"
    "  CVID to set the membership for. Range: 0 - 4095. (4K)	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_filter cvid_port_membership_get cvid_ndx 0 out_port_ndx 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_EG_FILTER_CVID_PORT_MEMBERSHIP_GET_CVID_PORT_MEMBERSHIP_GET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_FILTER_CVID_PORT_MEMBERSHIP_GET_CVID_PORT_MEMBERSHIP_GET_OUT_PORT_NDX_ID, 
    "out_port_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  out_port_ndx:\n\r"
    "  Local out-port ID.	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_filter cvid_port_membership_get cvid_ndx 0 out_port_ndx 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_EG_FILTER_CVID_PORT_MEMBERSHIP_GET_CVID_PORT_MEMBERSHIP_GET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_FILTER_PORT_ACCEPTABLE_FRAMES_SET_PORT_ACCEPTABLE_FRAMES_SET_ID, 
    "port_acceptable_frames_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Sets acceptable frame type on outgoing port.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_filter port_acceptable_frames_set port_acc_frames_profile_ndx 0\n\r"
    "  is_outer_prio 0 inner_tpid 0 outer_tpid 0 accept 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_EG_FILTER_PORT_ACCEPTABLE_FRAMES_SET_PORT_ACCEPTABLE_FRAMES_SET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_FILTER_PORT_ACCEPTABLE_FRAMES_SET_PORT_ACCEPTABLE_FRAMES_SET_PORT_ACC_FRAMES_PROFILE_NDX_ID, 
    "out_port_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  port_acc_frames_profile_ndx:\n\r"
    "  Port profile regarding acceptable frames types. Set by\n\r"
    "  soc_ppd_eg_filter_port_info_set	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_filter port_acceptable_frames_set port_acc_frames_profile_ndx 0\n\r"
    "  is_outer_prio 0 inner_tpid 0 outer_tpid 0 accept 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_EG_FILTER_PORT_ACCEPTABLE_FRAMES_SET_PORT_ACCEPTABLE_FRAMES_SET_ID), 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_FILTER_PORT_ACCEPTABLE_FRAMES_SET_PORT_ACCEPTABLE_FRAMES_SET_EG_PRSR_OUT_KEY_IS_OUTER_PRIO_ID, 
    "is_outer_prio", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  eg_prsr_out_key.is_outer_prio:\n\r"
    "  Set to TRUE to indicate that the outer Vlan-tag is priority-tag i.e. VLAN tag\n\r"
    "  with VLAN ID equal to 0.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_filter port_acceptable_frames_set port_acc_frames_profile_ndx 0\n\r"
    "  is_outer_prio 0 inner_tpid 0 outer_tpid 0 accept 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_EG_FILTER_PORT_ACCEPTABLE_FRAMES_SET_PORT_ACCEPTABLE_FRAMES_SET_ID), 
    4, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_FILTER_PORT_ACCEPTABLE_FRAMES_SET_PORT_ACCEPTABLE_FRAMES_SET_EG_PRSR_OUT_KEY_INNER_TPID_ID, 
    "inner_tpid", 
    (PARAM_VAL_RULES *)&SOC_PPC_LLP_PARSE_TPID_INDEX_rule[0], 
    (sizeof(SOC_PPC_LLP_PARSE_TPID_INDEX_rule) / sizeof(SOC_PPC_LLP_PARSE_TPID_INDEX_rule[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  eg_prsr_out_key.inner_tpid:\n\r"
    "  Indicates what is the inner TPID of the packet (tpid1, tpid2 or none).\n\r"
    "  Relevant only for double tagged packets (when outer-tpid is note none)\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_filter port_acceptable_frames_set port_acc_frames_profile_ndx 0\n\r"
    "  is_outer_prio 0 inner_tpid 0 outer_tpid 0 accept 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_EG_FILTER_PORT_ACCEPTABLE_FRAMES_SET_PORT_ACCEPTABLE_FRAMES_SET_ID), 
    5, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_FILTER_PORT_ACCEPTABLE_FRAMES_SET_PORT_ACCEPTABLE_FRAMES_SET_EG_PRSR_OUT_KEY_OUTER_TPID_ID, 
    "outer_tpid", 
    (PARAM_VAL_RULES *)&SOC_PPC_LLP_PARSE_TPID_INDEX_rule[0], 
    (sizeof(SOC_PPC_LLP_PARSE_TPID_INDEX_rule) / sizeof(SOC_PPC_LLP_PARSE_TPID_INDEX_rule[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  eg_prsr_out_key.outer_tpid:\n\r"
    "  Indicates what is the outer TPID of the packet (tpid1, tpid2 or none). Range ...\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_filter port_acceptable_frames_set port_acc_frames_profile_ndx 0\n\r"
    "  is_outer_prio 0 inner_tpid 0 outer_tpid 0 accept 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_EG_FILTER_PORT_ACCEPTABLE_FRAMES_SET_PORT_ACCEPTABLE_FRAMES_SET_ID), 
    6, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_FILTER_PORT_ACCEPTABLE_FRAMES_SET_PORT_ACCEPTABLE_FRAMES_SET_ACCEPT_ID, 
    "accept", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  accept:\n\r"
    "  Accept or deny this frame type for this port type.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_filter port_acceptable_frames_set port_acc_frames_profile_ndx 0\n\r"
    "  is_outer_prio 0 inner_tpid 0 outer_tpid 0 accept 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_EG_FILTER_PORT_ACCEPTABLE_FRAMES_SET_PORT_ACCEPTABLE_FRAMES_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_FILTER_PORT_ACCEPTABLE_FRAMES_GET_PORT_ACCEPTABLE_FRAMES_GET_ID, 
    "port_acceptable_frames_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Sets acceptable frame type on outgoing port.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_filter port_acceptable_frames_get port_acc_frames_profile_ndx 0\n\r"
    "  is_outer_prio 0 inner_tpid 0 outer_tpid 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_EG_FILTER_PORT_ACCEPTABLE_FRAMES_GET_PORT_ACCEPTABLE_FRAMES_GET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_FILTER_PORT_ACCEPTABLE_FRAMES_GET_PORT_ACCEPTABLE_FRAMES_GET_PORT_ACC_FRAMES_PROFILE_NDX_ID, 
    "out_port_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  port_acc_frames_profile_ndx:\n\r"
    "  Port profile regarding acceptable frames types. Set by\n\r"
    "  soc_ppd_eg_filter_port_info_set	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_filter port_acceptable_frames_get port_acc_frames_profile_ndx 0\n\r"
    "  is_outer_prio 0 inner_tpid 0 outer_tpid 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_EG_FILTER_PORT_ACCEPTABLE_FRAMES_GET_PORT_ACCEPTABLE_FRAMES_GET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_FILTER_PORT_ACCEPTABLE_FRAMES_GET_PORT_ACCEPTABLE_FRAMES_GET_EG_PRSR_OUT_KEY_IS_OUTER_PRIO_ID, 
    "is_outer_prio", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  eg_prsr_out_key.is_outer_prio:\n\r"
    "  Set to TRUE to indicate that the outer Vlan-tag is priority-tag i.e. VLAN tag\n\r"
    "  with VLAN ID equal to 0.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_filter port_acceptable_frames_get port_acc_frames_profile_ndx 0\n\r"
    "  is_outer_prio 0 inner_tpid 0 outer_tpid 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_EG_FILTER_PORT_ACCEPTABLE_FRAMES_GET_PORT_ACCEPTABLE_FRAMES_GET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_FILTER_PORT_ACCEPTABLE_FRAMES_GET_PORT_ACCEPTABLE_FRAMES_GET_EG_PRSR_OUT_KEY_INNER_TPID_ID, 
    "inner_tpid", 
    (PARAM_VAL_RULES *)&SOC_PPC_LLP_PARSE_TPID_INDEX_rule[0], 
    (sizeof(SOC_PPC_LLP_PARSE_TPID_INDEX_rule) / sizeof(SOC_PPC_LLP_PARSE_TPID_INDEX_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  eg_prsr_out_key.inner_tpid:\n\r"
    "  Indicates what is the inner TPID of the packet (tpid1, tpid2 or none).\n\r"
    "  Relevant only for double tagged packets (when outer-tpid is note none)\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_filter port_acceptable_frames_get port_acc_frames_profile_ndx 0\n\r"
    "  is_outer_prio 0 inner_tpid 0 outer_tpid 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_EG_FILTER_PORT_ACCEPTABLE_FRAMES_GET_PORT_ACCEPTABLE_FRAMES_GET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_FILTER_PORT_ACCEPTABLE_FRAMES_GET_PORT_ACCEPTABLE_FRAMES_GET_EG_PRSR_OUT_KEY_OUTER_TPID_ID, 
    "outer_tpid", 
    (PARAM_VAL_RULES *)&SOC_PPC_LLP_PARSE_TPID_INDEX_rule[0], 
    (sizeof(SOC_PPC_LLP_PARSE_TPID_INDEX_rule) / sizeof(SOC_PPC_LLP_PARSE_TPID_INDEX_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  eg_prsr_out_key.outer_tpid:\n\r"
    "  Indicates what is the outer TPID of the packet (tpid1, tpid2 or none). Range ...\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_filter port_acceptable_frames_get port_acc_frames_profile_ndx 0\n\r"
    "  is_outer_prio 0 inner_tpid 0 outer_tpid 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_EG_FILTER_PORT_ACCEPTABLE_FRAMES_GET_PORT_ACCEPTABLE_FRAMES_GET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_FILTER_PEP_ACCEPTABLE_FRAMES_SET_PEP_ACCEPTABLE_FRAMES_SET_ID, 
    "pep_acceptable_frames_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Sets acceptable frame type for PEP port.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_filter pep_acceptable_frames_set vsi 0 port 0 vlan_format_ndx 0\n\r"
    "  accept 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_EG_FILTER_PEP_ACCEPTABLE_FRAMES_SET_PEP_ACCEPTABLE_FRAMES_SET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_FILTER_PEP_ACCEPTABLE_FRAMES_SET_PEP_ACCEPTABLE_FRAMES_SET_PEP_KEY_VSI_ID, 
    "vsi", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pep_key.vsi:\n\r"
    "  The VSI the packet associated with. For Link Layer encapsulated packets, this\n\r"
    "  is the VSI from the Egress Encapsulation.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_filter pep_acceptable_frames_set vsi 0 port 0 vlan_format_ndx 0\n\r"
    "  accept 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_EG_FILTER_PEP_ACCEPTABLE_FRAMES_SET_PEP_ACCEPTABLE_FRAMES_SET_ID), 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_FILTER_PEP_ACCEPTABLE_FRAMES_SET_PEP_ACCEPTABLE_FRAMES_SET_PEP_KEY_PORT_ID, 
    "port", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pep_key.port:\n\r"
    "  Local port ID. Has to be of type CEP.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_filter pep_acceptable_frames_set vsi 0 port 0 vlan_format_ndx 0\n\r"
    "  accept 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_EG_FILTER_PEP_ACCEPTABLE_FRAMES_SET_PEP_ACCEPTABLE_FRAMES_SET_ID), 
    4, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_FILTER_PEP_ACCEPTABLE_FRAMES_SET_PEP_ACCEPTABLE_FRAMES_SET_VLAN_FORMAT_NDX_ID, 
    "vlan_format_ndx", 
    (PARAM_VAL_RULES *)&SOC_PPD_SAND_PP_ETHERNET_FRAME_VLAN_FORMAT_rule[0], 
    (sizeof(SOC_PPD_SAND_PP_ETHERNET_FRAME_VLAN_FORMAT_rule) / sizeof(SOC_PPD_SAND_PP_ETHERNET_FRAME_VLAN_FORMAT_rule[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  vlan_format_ndx:\n\r"
    "  Packet frame type (tags stack structure).Possible values: -\n\r"
    "  SOC_SAND_PP_ETHERNET_FRAME_VLAN_FORMAT_C_TAG, -\n\r"
    "  SOC_SAND_PP_ETHERNET_FRAME_VLAN_FORMAT_NONE-\n\r"
    "  SOC_SAND_PP_ETHERNET_FRAME_VLAN_FORMAT_ANY (presents both C-Tagged and untagged\n\r"
    "  packets)	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_filter pep_acceptable_frames_set vsi 0 port 0 vlan_format_ndx 0\n\r"
    "  accept 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_EG_FILTER_PEP_ACCEPTABLE_FRAMES_SET_PEP_ACCEPTABLE_FRAMES_SET_ID), 
    5, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_FILTER_PEP_ACCEPTABLE_FRAMES_SET_PEP_ACCEPTABLE_FRAMES_SET_ACCEPT_ID, 
    "accept", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  accept:\n\r"
    "  Accept or deny this frame type for the given PEP.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_filter pep_acceptable_frames_set vsi 0 port 0 vlan_format_ndx 0\n\r"
    "  accept 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_EG_FILTER_PEP_ACCEPTABLE_FRAMES_SET_PEP_ACCEPTABLE_FRAMES_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_FILTER_PEP_ACCEPTABLE_FRAMES_GET_PEP_ACCEPTABLE_FRAMES_GET_ID, 
    "pep_acceptable_frames_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Sets acceptable frame type for PEP port.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_filter pep_acceptable_frames_get vsi 0 port 0 vlan_format_ndx 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_EG_FILTER_PEP_ACCEPTABLE_FRAMES_GET_PEP_ACCEPTABLE_FRAMES_GET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_FILTER_PEP_ACCEPTABLE_FRAMES_GET_PEP_ACCEPTABLE_FRAMES_GET_PEP_KEY_VSI_ID, 
    "vsi", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pep_key.vsi:\n\r"
    "  The VSI the packet associated with. For Link Layer encapsulated packets, this\n\r"
    "  is the VSI from the Egress Encapsulation.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_filter pep_acceptable_frames_get vsi 0 port 0 vlan_format_ndx 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_EG_FILTER_PEP_ACCEPTABLE_FRAMES_GET_PEP_ACCEPTABLE_FRAMES_GET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_FILTER_PEP_ACCEPTABLE_FRAMES_GET_PEP_ACCEPTABLE_FRAMES_GET_PEP_KEY_PORT_ID, 
    "port", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pep_key.port:\n\r"
    "  Local port ID. Has to be of type CEP.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_filter pep_acceptable_frames_get vsi 0 port 0 vlan_format_ndx 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_EG_FILTER_PEP_ACCEPTABLE_FRAMES_GET_PEP_ACCEPTABLE_FRAMES_GET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_FILTER_PEP_ACCEPTABLE_FRAMES_GET_PEP_ACCEPTABLE_FRAMES_GET_VLAN_FORMAT_NDX_ID, 
    "vlan_format_ndx", 
    (PARAM_VAL_RULES *)&SOC_PPD_SAND_PP_ETHERNET_FRAME_VLAN_FORMAT_rule[0], 
    (sizeof(SOC_PPD_SAND_PP_ETHERNET_FRAME_VLAN_FORMAT_rule) / sizeof(SOC_PPD_SAND_PP_ETHERNET_FRAME_VLAN_FORMAT_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  vlan_format_ndx:\n\r"
    "  Packet frame type (tags stack structure).Possible values: -\n\r"
    "  SOC_SAND_PP_ETHERNET_FRAME_VLAN_FORMAT_C_TAG, -\n\r"
    "  SOC_SAND_PP_ETHERNET_FRAME_VLAN_FORMAT_NONE-\n\r"
    "  SOC_SAND_PP_ETHERNET_FRAME_VLAN_FORMAT_ANY (presents both C-Tagged and untagged\n\r"
    "  packets)	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_filter pep_acceptable_frames_get vsi 0 port 0 vlan_format_ndx 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_EG_FILTER_PEP_ACCEPTABLE_FRAMES_GET_PEP_ACCEPTABLE_FRAMES_GET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_FILTER_PVLAN_PORT_TYPE_SET_PVLAN_PORT_TYPE_SET_ID, 
    "pvlan_port_type_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set the Private VLAN (PVLAN) port type.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_filter pvlan_port_type_set sys_id 0 sys_port_type 0\n\r"
    "  pvlan_port_type 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_EG_FILTER_PVLAN_PORT_TYPE_SET_PVLAN_PORT_TYPE_SET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_FILTER_PVLAN_PORT_TYPE_SET_PVLAN_PORT_TYPE_SET_SRC_SYS_PORT_NDX_SYS_ID_ID, 
    "sys_id", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  src_sys_port_ndx.sys_id:\n\r"
    "  The system port value, according to the type (Single or LAG).For LAG the\n\r"
    "  value is the group ID.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_filter pvlan_port_type_set sys_id 0 sys_port_type 0\n\r"
    "  pvlan_port_type 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_EG_FILTER_PVLAN_PORT_TYPE_SET_PVLAN_PORT_TYPE_SET_ID), 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_FILTER_PVLAN_PORT_TYPE_SET_PVLAN_PORT_TYPE_SET_SRC_SYS_PORT_NDX_SYS_PORT_TYPE_ID, 
    "sys_port_type", 
    (PARAM_VAL_RULES *)&SOC_PPD_SAND_PP_SYS_PORT_TYPE_rule[0], 
    (sizeof(SOC_PPD_SAND_PP_SYS_PORT_TYPE_rule) / sizeof(SOC_PPD_SAND_PP_SYS_PORT_TYPE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  src_sys_port_ndx.sys_port_type:\n\r"
    "  The system port type single/LAG.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_filter pvlan_port_type_set sys_id 0 sys_port_type 0\n\r"
    "  pvlan_port_type 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_EG_FILTER_PVLAN_PORT_TYPE_SET_PVLAN_PORT_TYPE_SET_ID), 
    4, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_FILTER_PVLAN_PORT_TYPE_SET_PVLAN_PORT_TYPE_SET_PVLAN_PORT_TYPE_ID, 
    "pvlan_port_type", 
    (PARAM_VAL_RULES *)&SOC_PPC_EG_FILTER_PVLAN_PORT_TYPE_rule[0], 
    (sizeof(SOC_PPC_EG_FILTER_PVLAN_PORT_TYPE_rule) / sizeof(SOC_PPC_EG_FILTER_PVLAN_PORT_TYPE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pvlan_port_type:\n\r"
    "  PVLAN port Type (promiscuous, isolated, community)\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_filter pvlan_port_type_set sys_id 0 sys_port_type 0\n\r"
    "  pvlan_port_type 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_EG_FILTER_PVLAN_PORT_TYPE_SET_PVLAN_PORT_TYPE_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_FILTER_PVLAN_PORT_TYPE_GET_PVLAN_PORT_TYPE_GET_ID, 
    "pvlan_port_type_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set the Private VLAN (PVLAN) port type.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_filter pvlan_port_type_get sys_id 0 sys_port_type 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_EG_FILTER_PVLAN_PORT_TYPE_GET_PVLAN_PORT_TYPE_GET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_FILTER_PVLAN_PORT_TYPE_GET_PVLAN_PORT_TYPE_GET_SRC_SYS_PORT_NDX_SYS_ID_ID, 
    "sys_id", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  src_sys_port_ndx.sys_id:\n\r"
    "  The system port value, according to the type (Single or LAG).For LAG the\n\r"
    "  value is the group ID.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_filter pvlan_port_type_get sys_id 0 sys_port_type 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_EG_FILTER_PVLAN_PORT_TYPE_GET_PVLAN_PORT_TYPE_GET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_FILTER_PVLAN_PORT_TYPE_GET_PVLAN_PORT_TYPE_GET_SRC_SYS_PORT_NDX_SYS_PORT_TYPE_ID, 
    "sys_port_type", 
    (PARAM_VAL_RULES *)&SOC_PPD_SAND_PP_SYS_PORT_TYPE_rule[0], 
    (sizeof(SOC_PPD_SAND_PP_SYS_PORT_TYPE_rule) / sizeof(SOC_PPD_SAND_PP_SYS_PORT_TYPE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  src_sys_port_ndx.sys_port_type:\n\r"
    "  The system port type single/LAG.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_filter pvlan_port_type_get sys_id 0 sys_port_type 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_EG_FILTER_PVLAN_PORT_TYPE_GET_PVLAN_PORT_TYPE_GET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_FILTER_SPLIT_HORIZON_OUT_AC_ORIENTATION_SET_SPLIT_HORIZON_OUT_AC_ORIENTATION_SET_ID, 
    "split_horizon_out_ac_orientation_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Sets the orientation of out-AC, hub or spoke. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_filter split_horizon_out_ac_orientation_set out_ac_ndx 0\n\r"
    "  orientation 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_EG_FILTER_SPLIT_HORIZON_OUT_AC_ORIENTATION_SET_SPLIT_HORIZON_OUT_AC_ORIENTATION_SET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_FILTER_SPLIT_HORIZON_OUT_AC_ORIENTATION_SET_SPLIT_HORIZON_OUT_AC_ORIENTATION_SET_OUT_AC_NDX_ID, 
    "out_ac_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  out_ac_ndx:\n\r"
    "  The out-AC associated with packet.	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_filter split_horizon_out_ac_orientation_set out_ac_ndx 0\n\r"
    "  orientation 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_EG_FILTER_SPLIT_HORIZON_OUT_AC_ORIENTATION_SET_SPLIT_HORIZON_OUT_AC_ORIENTATION_SET_ID), 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_FILTER_SPLIT_HORIZON_OUT_AC_ORIENTATION_SET_SPLIT_HORIZON_OUT_AC_ORIENTATION_SET_ORIENTATION_ID, 
    "orientation", 
    (PARAM_VAL_RULES *)&SOC_PPD_SAND_PP_HUB_SPOKE_ORIENTATION_rule[0], 
    (sizeof(SOC_PPD_SAND_PP_HUB_SPOKE_ORIENTATION_rule) / sizeof(SOC_PPD_SAND_PP_HUB_SPOKE_ORIENTATION_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  orientation:\n\r"
    "  Out AC orientation Hub or Spoke. Packets forwarded from hub interface to hub\n\r"
    "  interface will be filtered.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_filter split_horizon_out_ac_orientation_set out_ac_ndx 0\n\r"
    "  orientation 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_EG_FILTER_SPLIT_HORIZON_OUT_AC_ORIENTATION_SET_SPLIT_HORIZON_OUT_AC_ORIENTATION_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_FILTER_SPLIT_HORIZON_OUT_AC_ORIENTATION_GET_SPLIT_HORIZON_OUT_AC_ORIENTATION_GET_ID, 
    "split_horizon_out_ac_orientation_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Sets the orientation of out-AC, hub or spoke. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_filter split_horizon_out_ac_orientation_get out_ac_ndx 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_EG_FILTER_SPLIT_HORIZON_OUT_AC_ORIENTATION_GET_SPLIT_HORIZON_OUT_AC_ORIENTATION_GET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_FILTER_SPLIT_HORIZON_OUT_AC_ORIENTATION_GET_SPLIT_HORIZON_OUT_AC_ORIENTATION_GET_OUT_AC_NDX_ID, 
    "out_ac_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  out_ac_ndx:\n\r"
    "  The out-AC associated with packet.	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_filter split_horizon_out_ac_orientation_get out_ac_ndx 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_EG_FILTER_SPLIT_HORIZON_OUT_AC_ORIENTATION_GET_SPLIT_HORIZON_OUT_AC_ORIENTATION_GET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_FILTER_SPLIT_HORIZON_OUT_LIF_ORIENTATION_SET_SPLIT_HORIZON_OUT_LIF_ORIENTATION_SET_ID, 
    "split_horizon_out_lif_orientation_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Sets the orientation of out-LIF, hub or spoke. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_filter split_horizon_out_lif_orientation_set out_lif_ndx 0\n\r"
    "  orientation 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_EG_FILTER_SPLIT_HORIZON_OUT_LIF_ORIENTATION_SET_SPLIT_HORIZON_OUT_LIF_ORIENTATION_SET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_FILTER_SPLIT_HORIZON_OUT_LIF_ORIENTATION_SET_SPLIT_HORIZON_OUT_LIF_ORIENTATION_SET_OUT_LIF_NDX_ID, 
    "out_lif_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  out_lif_ndx:\n\r"
    "  The out-LIF associated with packet.	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_filter split_horizon_out_lif_orientation_set out_lif_ndx 0\n\r"
    "  orientation 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_EG_FILTER_SPLIT_HORIZON_OUT_LIF_ORIENTATION_SET_SPLIT_HORIZON_OUT_LIF_ORIENTATION_SET_ID), 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_FILTER_SPLIT_HORIZON_OUT_LIF_ORIENTATION_SET_SPLIT_HORIZON_OUT_LIF_ORIENTATION_SET_ORIENTATION_ID, 
    "orientation", 
    (PARAM_VAL_RULES *)&SOC_PPD_SAND_PP_HUB_SPOKE_ORIENTATION_rule[0], 
    (sizeof(SOC_PPD_SAND_PP_HUB_SPOKE_ORIENTATION_rule) / sizeof(SOC_PPD_SAND_PP_HUB_SPOKE_ORIENTATION_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  orientation:\n\r"
    "  Out LIF orientation Hub or Spoke. Packets forwarded from hub interface to hub\n\r"
    "  interface will be filtered.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_filter split_horizon_out_lif_orientation_set out_lif_ndx 0\n\r"
    "  orientation 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_EG_FILTER_SPLIT_HORIZON_OUT_LIF_ORIENTATION_SET_SPLIT_HORIZON_OUT_LIF_ORIENTATION_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },
  { 
    SOC_PARAM_PPD_EG_FILTER_SPLIT_HORIZON_OUT_LIF_ORIENTATION_GET_SPLIT_HORIZON_OUT_LIF_ORIENTATION_GET_ID, 
    "split_horizon_out_lif_orientation_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Gets the orientation of out-LIF, hub or spoke. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_filter split_horizon_out_lif_orientation_set out_lif_ndx 0\n\r"
    "  orientation 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_EG_FILTER_SPLIT_HORIZON_OUT_LIF_ORIENTATION_GET_SPLIT_HORIZON_OUT_LIF_ORIENTATION_GET_ID),
    /*{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(15)}, */ 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_FILTER_SPLIT_HORIZON_OUT_LIF_ORIENTATION_GET_SPLIT_HORIZON_OUT_LIF_ORIENTATION_GET_OUT_LIF_NDX_ID, 
    "out_lif_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  out_lif_ndx:\n\r"
    "  The out-LIF associated with packet.	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_filter split_horizon_out_lif_orientation_get out_lif_ndx 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_EG_FILTER_SPLIT_HORIZON_OUT_LIF_ORIENTATION_GET_SPLIT_HORIZON_OUT_LIF_ORIENTATION_GET_ID),
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },
  { 
    SOC_PARAM_PPD_API_EG_FILTER_ID, 
    "eg_filter", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "",
    "", 
    "",
    BIT_UI_16_RNG(SOC_FUN_PPD_API_EG_FILTER_FIRST_ID,SOC_FUN_PPD_API_EG_FILTER_LAST_ID), 
    1, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
#endif /* } eg_filter*/
#ifdef UI_EG_ENCAP/* { eg_encap*/
  { 
    SOC_PARAM_PPD_EG_ENCAP_RANGE_INFO_SET_RANGE_INFO_SET_ID, 
    "range_info_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Sets devision of the Egress Encapsulation DB between the different usages\n\r"
    "  (Link layer/ IP tunnels/ MPLS tunnels).\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_encap range_info_set ip_tnl_limit 0 ll_limit 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, BIT(24)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_ENCAP_RANGE_INFO_SET_RANGE_INFO_SET_RANGE_INFO_IP_TNL_LIMIT_ID, 
    "ip_tnl_limit", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  range_info.ip_tnl_limit:\n\r"
    "  IP-Tunnels-Limit. Entries ll_limit- ip_tnl_limit are used for IP Tunnels\n\r"
    "  encapsulation. Range: (ll_limit + 1)-12K\n\r"
    "  invalid for ARAD. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_encap range_info_set ip_tnl_limit 0 ll_limit 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, BIT(24)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  {
    SOC_PARAM_PPD_EG_ENCAP_RANGE_INFO_SET_RANGE_INFO_SET_RANGE_INFO_LL_LIMIT_ID, 
    "ll_limit", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  range_info.ll_limit:\n\r"
    "  Link-Layer-Limit. Entries '0'- ll_limit are used for link-layer\n\r"
    "  encapsulation. Range: 0-4K.\n\r"
    "  invalid for ARAD. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_encap range_info_set ip_tnl_limit 0 ll_limit 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, BIT(24)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_ENCAP_RANGE_INFO_SET_RANGE_INFO_SET_RANGE_INFO_BANK_NDX_ID,
    "bank_index", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  access phase bank index:\n\r"
    "  Range: 0-15"
    "  valid only for ARAD. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_encap range_info_set ip_tnl_limit 0 ll_limit 0 bank_index 0 access_phase 0 \n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, BIT(24)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },
  { 
    SOC_PARAM_PPD_EG_ENCAP_RANGE_INFO_SET_RANGE_INFO_SET_RANGE_INFO_ACCESS_PHASE_ID,
    "access_phase", 
    (PARAM_VAL_RULES *)&SOC_PPC_EG_ENCAP_ACCESS_PHASE_rule[0], 
    (sizeof(SOC_PPC_EG_ENCAP_ACCESS_PHASE_rule) / sizeof(SOC_PPC_EG_ENCAP_ACCESS_PHASE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  access phase:\n\r"
    "  Range: 1-4. "
    "  valid only for ARAD. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_encap range_info_set ip_tnl_limit 0 ll_limit 0 bank_index 0 access_phase 0 \n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, BIT(24)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_ENCAP_RANGE_INFO_GET_RANGE_INFO_GET_ID, 
    "range_info_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Sets devision of the Egress Encapsulation DB between the different usages\n\r"
    "  (Link layer/ IP tunnels/ MPLS tunnels).\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_encap range_info_get\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, BIT(25)}, 
    2, 
    /* 
    * Pointer to a function to call after symbolic parameter 
    * has been accepted. 
    */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_ENCAP_NULL_LIF_ENTRY_ADD_NULL_LIF_ENTRY_ADD_ID, 
    "null_lif_entry_add", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set LIF Editing entry to be NULL Entry.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_encap null_lif_entry_add lif_eep_ndx 0 next_eep 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(15)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_ENCAP_NULL_LIF_ENTRY_ADD_NULL_LIF_ENTRY_ADD_LIF_EEP_NDX_ID, 
    "lif_eep_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  lif_eep_ndx:\n\r"
    "  Egress Encapsulation table entry, of type Out-LIF (First encapsulation)	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_encap null_lif_entry_add lif_eep_ndx 0 next_eep 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(15)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_ENCAP_NULL_LIF_ENTRY_ADD_NULL_LIF_ENTRY_ADD_NEXT_EEP_ID, 
    "next_eep", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  next_eep:\n\r"
    "  Pointer to the next egress encapsulation table entry\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_encap null_lif_entry_add lif_eep_ndx 0 next_eep 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(15)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_ENCAP_AC_ENTRY_ADD_AC_ENTRY_ADD_ID, 
    "ac_entry_add", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set LIF_EEP entry to hold AC ID. Actually maps from CUD to AC.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_encap ac_entry_add lif_eep_ndx 0 ac_id 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, BIT(26)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_ENCAP_AC_ENTRY_ADD_AC_ENTRY_ADD_LIF_EEP_NDX_ID, 
    "lif_eep_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  lif_eep_ndx:\n\r"
    "  LIF_EEP as taken from the CUD in the TM header; it points to the 'EEP 1' table.\n\r"
    "  The entry in the 'EEP 1' table contains the AC ID of the copy.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_encap ac_entry_add lif_eep_ndx 0 ac_id 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, BIT(26)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_ENCAP_AC_ENTRY_ADD_AC_ENTRY_ADD_AC_ID_ID, 
    "ac_id", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  ac_id:\n\r"
    "  The AC ID.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_encap ac_entry_add lif_eep_ndx 0 ac_id 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, BIT(26)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_ENCAP_SWAP_COMMAND_ENTRY_ADD_SWAP_COMMAND_ENTRY_ADD_ID, 
    "swap_command_entry_add", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set LIF_EEP entry to hold MPLS LSR SWAP label. Needed for MPLS multicast\n\r"
    "  services.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_encap swap_command_entry_add lif_eep_ndx 0 swap_label 0 next_eep 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, BIT(27)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_ENCAP_SWAP_COMMAND_ENTRY_ADD_SWAP_COMMAND_ENTRY_ADD_LIF_EEP_NDX_ID, 
    "lif_eep_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  lif_eep_ndx:\n\r"
    "  LIF_EEP as taken from the CUD of the TM header; points to the 'EEP 1' table. The\n\r"
    "  entry in the 'EEP 1' table contains the Swap label.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_encap swap_command_entry_add lif_eep_ndx 0 swap_label 0 next_eep 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, BIT(27)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_ENCAP_SWAP_COMMAND_ENTRY_ADD_SWAP_COMMAND_ENTRY_ADD_SWAP_INFO_SWAP_LABEL_ID, 
    "swap_label", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  swap_info.swap_label:\n\r"
    "  The label to swap the incoming label.Range: 0 - 1M.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_encap swap_command_entry_add lif_eep_ndx 0 swap_label 0 next_eep 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, BIT(27)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_ENCAP_SWAP_COMMAND_ENTRY_ADD_SWAP_COMMAND_ENTRY_ADD_NEXT_EEP_ID, 
    "next_eep", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  next_eep:\n\r"
    "  Points to next encapsulation (Tunnel or LL).\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_encap swap_command_entry_add lif_eep_ndx 0 swap_label 0 next_eep 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, BIT(27)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_ENCAP_SWAP_COMMAND_ENTRY_ADD_SWAP_COMMAND_ENTRY_ADD_OUT_VSI_ID, 
    "out_vsi", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  out_vsi :\n\r"
    "  The VSI to assign to the packet. For the processing of the Link-Layer header.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_encap swap_command_entry_add lif_eep_ndx 0 swap_label 0 next_eep 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, BIT(27)}, 
    LAST_ORDINAL, 
    (VAL_PROC_PTR)NULL 
  },
  { 
    SOC_PARAM_PPD_EG_ENCAP_SWAP_COMMAND_ENTRY_ADD_SWAP_COMMAND_ENTRY_ADD_OAM_LIF_SET_ID, 
    "oam_lif_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Valid only for ARAD.\n\r"
    "  If set, then OAM LIF value is equal to the OutLIF index. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_encap swap_command_entry_add lif_eep_ndx 0 swap_label 0 next_eep 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, BIT(27)}, 
    LAST_ORDINAL, 
    (VAL_PROC_PTR)NULL 
  },    
  { 
    SOC_PARAM_PPD_EG_ENCAP_PWE_ENTRY_ADD_PWE_ENTRY_ADD_ID, 
    "pwe_entry_add", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set LIF_EEP entry to hold PWE info (VC label and push profile).\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_encap pwe_entry_add lif_eep_ndx 0 push_profile 0 label 0 next_eep 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, BIT(28)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_ENCAP_PWE_ENTRY_ADD_PWE_ENTRY_ADD_NOF_REPS_ID, 
    "nof_reps", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  lif_eep_ndx:\n\r"
    "  LIF_EEP as taken from the CUD of the TM header or the EEP; points to 'EEP 1'\n\r"
    "  table. The entry in the 'EEP 1' table contains the Swap label.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_encap pwe_entry_add lif_eep_ndx 0 push_profile 0 label 0 next_eep 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, BIT(28)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_ENCAP_PWE_ENTRY_ADD_PWE_ENTRY_ADD_LIF_EEP_NDX_ID, 
    "lif_eep_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  lif_eep_ndx:\n\r"
    "  LIF_EEP as taken from the CUD of the TM header or the EEP; points to 'EEP 1'\n\r"
    "  table. The entry in the 'EEP 1' table contains the Swap label.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_encap pwe_entry_add lif_eep_ndx 0 push_profile 0 label 0 next_eep 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, BIT(28)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_ENCAP_PWE_ENTRY_ADD_PWE_ENTRY_ADD_PWE_INFO_PUSH_PROFILE_ID, 
    "mpls_push_profile", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pwe_info.push_profile:\n\r"
    "  Push profile used to construct the label's TTL and EXP.Range: 0 - 7.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_encap pwe_entry_add lif_eep_ndx 0 push_profile 0 label 0 next_eep 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, BIT(28)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_ENCAP_PWE_ENTRY_ADD_PWE_ENTRY_ADD_PWE_INFO_LABEL_ID, 
    "mpls_label", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pwe_info.label:\n\r"
    "  Label to push as VC label.Range: 0 - 1M.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_encap pwe_entry_add lif_eep_ndx 0 push_profile 0 label 0 next_eep 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, BIT(28)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_ENCAP_PWE_ENTRY_ADD_PWE_ENTRY_ADD_PWE_INFO_OAM_LIF_SET_ID, 
    "oam_lif_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pwe_info.oam_lif_set:\n\r"
    "  Valid only for ARAD.\n\r"
    "  If set, then OAM LIF value is equal to the OutLIF index. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_encap pwe_entry_add lif_eep_ndx 0 push_profile 0 label 0 next_eep 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, BIT(28)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_ENCAP_PWE_ENTRY_ADD_PWE_ENTRY_ADD_NEXT_EEP_ID, 
    "next_eep", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  next_eep:\n\r"
    "  Points to next encapsulation (Tunnel or LL).\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_encap pwe_entry_add lif_eep_ndx 0 push_profile 0 label 0 next_eep 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, BIT(28)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_ENCAP_PWE_ENTRY_ADD_PWE_ENTRY_ADD_NEXT_EEP_NOF_REPS_ID, 
    "eep_nof_reps", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  next_eep:\n\r"
    "  Points to next encapsulation (Tunnel or LL).\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_encap pwe_entry_add lif_eep_ndx 0 push_profile 0 label 0 next_eep 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, BIT(28)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_ENCAP_POP_COMMAND_ENTRY_ADD_POP_COMMAND_ENTRY_ADD_ID, 
    "pop_command_entry_add", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set LIF_EEP entry to hold MPLS LSR POP command. Needed for MPLS multicast\n\r"
    "  services.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_encap pop_command_entry_add lif_eep_ndx 0 has_cw 0 tpid2_index 0\n\r"
    "  tpid1_index 0 sys_vsi 0 pop_type 0 next_eep 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, BIT(11)|BIT(12), 0, 0, BIT(29)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_ENCAP_POP_COMMAND_ENTRY_ADD_POP_COMMAND_ENTRY_ADD_LIF_EEP_NDX_ID, 
    "lif_eep_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  lif_eep_ndx:\n\r"
    "  LIF_EEP points to 'EEP 1' table. The entry in the 'EEP 1' table contains the Pop\n\r"
    "  command.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_encap pop_command_entry_add lif_eep_ndx 0 has_cw 0 tpid2_index 0\n\r"
    "  tpid1_index 0 sys_vsi 0 pop_type 0 next_eep 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0,BIT(12)|BIT(11), 0, 0, BIT(29)}, 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_ENCAP_POP_COMMAND_ENTRY_ADD_POP_COMMAND_ENTRY_ADD_POP_INFO_ETHERNET_INFO_HAS_CW_ID, 
    "has_cw", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pop_info.ethernet_info.has_cw:\n\r"
    "  Has Control-word. Used to determine number of bytes to remove from the header.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_encap pop_command_entry_add lif_eep_ndx 0 has_cw 0 tpid2_index 0\n\r"
    "  tpid1_index 0 sys_vsi 0 pop_type 0 next_eep 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0,BIT(12)|BIT(11), 0, 0, BIT(29)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_ENCAP_POP_COMMAND_ENTRY_ADD_POP_COMMAND_ENTRY_ADD_POP_INFO_ETHERNET_INFO_TPID_PROFILE_TPID1_INDEX_ID, 
    "tpid_profile", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pop_info.ethernet_info.tpid_profile.tpid1_index:\n\r"
    "  Selects one of four global TPIDs (usually the outer). Used to parse the VLAN\n\r"
    "  Tags in the ingress/egress.Range: 0 - 3.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_encap pop_command_entry_add lif_eep_ndx 0 has_cw 0 tpid2_index 0\n\r"
    "  tpid1_index 0 sys_vsi 0 pop_type 0 next_eep 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0,BIT(12)|BIT(11), 0, 0, BIT(29)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_ENCAP_POP_COMMAND_ENTRY_ADD_POP_COMMAND_ENTRY_ADD_POP_INFO_ETHERNET_INFO_SYS_VSI_ID, 
    "out_vsi", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pop_info.ethernet_info.out_vsi:\n\r"
    "  System VSI, according to which to process the packet.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_encap pop_command_entry_add lif_eep_ndx 0 has_cw 0 tpid2_index 0\n\r"
    "  tpid1_index 0 sys_vsi 0 pop_type 0 next_eep 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, BIT(12)|BIT(11), 0, 0, BIT(29)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_ENCAP_POP_COMMAND_ENTRY_ADD_POP_COMMAND_ENTRY_ADD_POP_INFO_POP_TYPE_ID, 
    "pop_type", 
    (PARAM_VAL_RULES *)&SOC_PPC_MPLS_COMMAND_TYPE_rule[0], 
    (sizeof(SOC_PPC_MPLS_COMMAND_TYPE_rule) / sizeof(SOC_PPC_MPLS_COMMAND_TYPE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pop_info.pop_type:\n\r"
    "  Command to perform on the packets label. Must be Pop command."
    "  Petra-B Range: 8-14\n\r"
    "  ARAD Range: must be 'pop' SOC_PPC_MPLS_COMMAND_TYPE_POP"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_encap pop_command_entry_add lif_eep_ndx 0 has_cw 0 tpid2_index 0\n\r"
    "  tpid1_index 0 sys_vsi 0 pop_type 0 next_eep 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0,BIT(12)|BIT(11), 0, 0, BIT(29)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  }, 
  { 
    SOC_PARAM_PPD_EG_ENCAP_POP_COMMAND_ENTRY_ADD_POP_COMMAND_ENTRY_ADD_POP_INFO_POP_NEXT_HDR_ID, 
    "pop_next_header", 
    (PARAM_VAL_RULES *)&SOC_PPC_PKT_FRWRD_TYPE_rule[0], 
    (sizeof(SOC_PPC_PKT_FRWRD_TYPE_rule) / sizeof(SOC_PPC_PKT_FRWRD_TYPE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pop_info.pop_next_header:\n\r"
    "  type of next header. must be either ethernet/ipv4/ipv6/mpls. \n\r"
    "  relevant only for ARAD. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_encap pop_command_entry_add lif_eep_ndx 0 has_cw 0 tpid2_index 0\n\r"
    "  tpid1_index 0 sys_vsi 0 pop_type 0 next_eep 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0,BIT(12)|BIT(11), 0, 0, BIT(29)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },   
  { 
    SOC_PARAM_PPD_EG_ENCAP_POP_COMMAND_ENTRY_ADD_POP_COMMAND_ENTRY_ADD_POP_INFO_MODEL_ID, 
    "model", 
    (PARAM_VAL_RULES *)&SOC_PPD_SAND_PP_MPLS_TUNNEL_MODEL_rule[0], 
    (sizeof(SOC_PPD_SAND_PP_MPLS_TUNNEL_MODEL_rule) / sizeof(SOC_PPD_SAND_PP_MPLS_TUNNEL_MODEL_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pop_info.model:\n\r"
    "  Tunnel model (Pipe or uniform)\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_encap pop_command_entry_add lif_eep_ndx 0 has_cw 0 tpid2_index 0\n\r"
    "  tpid1_index 0 sys_vsi 0 pop_type 0 next_eep 0\n\r"
    "  relevant only for ARAD. \n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0,BIT(12)|BIT(11), 0, 0, BIT(29)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },
  { 
    SOC_PARAM_PPD_EG_ENCAP_POP_COMMAND_ENTRY_ADD_POP_COMMAND_ENTRY_ADD_POP_INFO_OAM_LIF_SET_ID, 
    "oam_lif_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pop_info.oam_lif_set:\n\r"
    "  Valid only for ARAD.\n\r"
    "  If set, then OAM LIF value is equal to the OutLIF index. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_encap pop_command_entry_add lif_eep_ndx 0 has_cw 0 tpid2_index 0\n\r"
    "  tpid1_index 0 sys_vsi 0 pop_type 0 next_eep 0\n\r"
    "  relevant only for ARAD. \n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0,BIT(12)|BIT(11), 0, 0, BIT(29)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },      
  { 
    SOC_PARAM_PPD_EG_ENCAP_POP_COMMAND_ENTRY_ADD_POP_COMMAND_ENTRY_ADD_POP_INFO_POP_TYPE_ETHERNET_ID, 
    "pop_into_ethernet", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pop_info.pop_type:\n\r"
    "  Command to perform on the packets label. Must be Pop command.Range: 8 - 14.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_encap pop_command_entry_add lif_eep_ndx 0 has_cw 0 tpid2_index 0\n\r"
    "  tpid1_index 0 sys_vsi 0 pop_type 0 next_eep 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0,BIT(12)|BIT(11), 0, 0, BIT(29)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_ENCAP_POP_COMMAND_ENTRY_ADD_POP_COMMAND_ENTRY_ADD_NEXT_EEP_ID, 
    "next_eep", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  next_eep:\n\r"
    "  Points to next encapsulation (Tunnel or LL). Relevant only if the pop was not\n\r"
    "  into Ethernet.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_encap pop_command_entry_add lif_eep_ndx 0 has_cw 0 tpid2_index 0\n\r"
    "  tpid1_index 0 sys_vsi 0 pop_type 0 next_eep 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0,BIT(12)|BIT(11), 0, 0, BIT(29)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_ENCAP_VSI_ENTRY_ADD_VSI_ENTRY_ADD_ID, 
    "vsi_entry_add", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Add RIF (vsi) encapsulation entry.\n\r"
    "  Valid only for ARAD."
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_encap vsi_entry_add lif_eep_ndx 0 out_vsi 0 remark_profile 0 \n\r"
    "  next_eep_valid 0 next_eep 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, BIT(30)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_ENCAP_VSI_ENTRY_ADD_VSI_ENTRY_ADD_LIF_EEP_NDX_ID, 
    "lif_eep_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  lif_eep_ndx:\n\r"
    "  Points to Egress Encapsulation table entry. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_encap ll_entry_add ll_eep_ndx 0 tpid_index 0 pcp_dei 0 out_vid 0\n\r"
    "  out_vid_valid 0 dest_mac 0\n\r"
#endif 
    "",
    "",
   {0, 0, 0, 0, 0, 0, 0, 0, BIT(30)}, 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_ENCAP_VSI_ENTRY_ADD_VSI_ENTRY_ADD_REMARK_PROFILE_ID, 
    "remark_profile", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  vsi_encap_info.remark_profile:\n\r"
    "  Select 1 of 16 Remark profiles. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_encap vsi_entry_add lif_eep_ndx 0 out_vsi 0 remark_profile 0 \n\r"
    "  next_eep_valid 0 next_eep 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, BIT(30)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_ENCAP_VSI_ENTRY_ADD_VSI_ENTRY_ADD_OUT_VSI_ID, 
    "out_vsi", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  vsi_info.out_vsi:\n\r"
    "  The VSI to assign to the packet. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_encap vsi_entry_add lif_eep_ndx 0 out_vsi 0 remark_profile 0 \n\r"
    "  next_eep_valid 0 next_eep 0 out_vsi 0\n\r"
#endif 
    "",
    "",
   {0, 0, 0, 0, 0, 0, 0, 0, BIT(30)},  
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },
  { 
    SOC_PARAM_PPD_EG_ENCAP_VSI_ENTRY_ADD_VSI_ENTRY_ADD_OAM_LIF_SET_ID, 
    "oam_lif_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  vsi_info.oam_lif_set:\n\r"
    "  Valid only for ARAD.\n\r"
    "  If set, then OAM LIF value is equal to the OutLIF index. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_encap vsi_entry_add lif_eep_ndx 0 out_vsi 0 remark_profile 0 \n\r"
    "  next_eep_valid 0 next_eep  oam_lif_set 0 \n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, BIT(30)},  
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },    
  { 
    SOC_PARAM_PPD_EG_ENCAP_VSI_ENTRY_ADD_VSI_ENTRY_ADD_NEXT_EEP_VALID_ID, 
    "next_eep_valid", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  next_eep_valid:\n\r"
	  "  Is next_eep valid. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_encap vsi_entry_add lif_eep_ndx 0 out_vsi 0 remark_profile 0 \n\r"
    "  next_eep_valid 0 next_eep 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, BIT(30)},  
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_ENCAP_VSI_ENTRY_ADD_VSI_ENTRY_ADD_NEXT_EEP_ID, 
    "next_eep", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  next_eep:\n\r"
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    " Pointer to the next egress encapsulation table entry.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_encap vsi_entry_add lif_eep_ndx 0 out_vsi 0 remark_profile 0 \n\r"
    "  next_eep_valid 0 next_eep 0\n\r"
#endif 
    "",
    "",
     {0, 0, 0, 0, 0, 0, 0, 0, BIT(30)},  
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },
  { 
    SOC_PARAM_PPD_EG_ENCAP_MPLS_ENTRY_ADD_MPLS_ENTRY_ADD_ID, 
    "mpls_entry_add", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Add MPLS tunnels encapsulation entry to the Egress Encapsulation DB (TUNNEL_EEP).\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_encap mpls_entry_add tunnel_eep_ndx 0 out_vsi 0 orientation 0\n\r"
    "  nof_tunnels 0 push_profile 0 tunnel_label 0 ll_eep 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, BIT(31)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_ENCAP_MPLS_ENTRY_ADD_MPLS_ENTRY_ADD_TUNNEL_EEP_NDX_ID, 
    "tunnel_eep_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  tunnel_eep_ndx:\n\r"
    "  TUNNEL_EEP points to 'EEP 2' table. The entry in the 'EEP 2' table contains MPLS\n\r"
    "  encapsulation information.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_encap mpls_entry_add tunnel_eep_ndx 0 out_vsi 0 orientation 0\n\r"
    "  nof_tunnels 0 push_profile 0 tunnel_label 0 ll_eep 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, BIT(31)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_ENCAP_MPLS_ENTRY_ADD_MPLS_ENTRY_ADD_NOF_REPS_ID, 
    "nof_reps", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  mpls_encap_info.out_vsi:\n\r"
    "  The VSI to assign to the packet. For the processing of the Link-Layer header.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_encap mpls_entry_add tunnel_eep_ndx 0 out_vsi 0 orientation 0\n\r"
    "  nof_tunnels 0 push_profile 0 tunnel_label 0 ll_eep 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, BIT(31)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_ENCAP_MPLS_ENTRY_ADD_MPLS_ENTRY_ADD_MPLS_ENCAP_INFO_OUT_VSI_ID, 
    "out_vsi", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  mpls_encap_info.out_vsi:\n\r"
    "  The VSI to assign to the packet. For the processing of the Link-Layer header.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_encap mpls_entry_add tunnel_eep_ndx 0 out_vsi 0 orientation 0\n\r"
    "  nof_tunnels 0 push_profile 0 tunnel_label 0 ll_eep 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, BIT(31)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_ENCAP_MPLS_ENTRY_ADD_MPLS_ENTRY_ADD_MPLS_ENCAP_INFO_ORIENTATION_ID, 
    "orientation", 
    (PARAM_VAL_RULES *)&SOC_PPD_SAND_PP_HUB_SPOKE_ORIENTATION_rule[0], 
    (sizeof(SOC_PPD_SAND_PP_HUB_SPOKE_ORIENTATION_rule) / sizeof(SOC_PPD_SAND_PP_HUB_SPOKE_ORIENTATION_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  mpls_encap_info.orientation:\n\r"
    "  Tunnel/s orientation Hub or Spoke. Packets forwarded from hub interface to\n\r"
    "  hub interface will be filtered.\n\r"
    "  Invalid for ARAD. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_encap mpls_entry_add tunnel_eep_ndx 0 out_vsi 0 orientation 0\n\r"
    "  nof_tunnels 0 push_profile 0 tunnel_label 0 ll_eep 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, BIT(31)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_ENCAP_MPLS_ENTRY_ADD_MPLS_ENTRY_ADD_MPLS_ENCAP_INFO_TUNNELS2_PUSH_PROFILE_ID, 
    "tunnel_2_push_profile", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  mpls_encap_info.tunnels.push_profile:\n\r"
    "  Used to construct the label's TTL and EXP.Range: 0 - 7.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_encap mpls_entry_add tunnel_eep_ndx 0 out_vsi 0 orientation 0\n\r"
    "  nof_tunnels 0 push_profile 0 tunnel_label 0 ll_eep 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, BIT(31)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_ENCAP_MPLS_ENTRY_ADD_MPLS_ENTRY_ADD_MPLS_ENCAP_INFO_TUNNELS2_TUNNEL_LABEL_ID, 
    "tunnel_2_label", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  mpls_encap_info.tunnels.tunnel_label:\n\r"
    "  Label of the tunnel.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_encap mpls_entry_add tunnel_eep_ndx 0 out_vsi 0 orientation 0\n\r"
    "  nof_tunnels 0 push_profile 0 tunnel_label 0 ll_eep 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, BIT(31)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_ENCAP_MPLS_ENTRY_ADD_MPLS_ENTRY_ADD_MPLS_ENCAP_INFO_TUNNELS1_PUSH_PROFILE_ID, 
    "tunnel_1_push_profile", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  mpls_encap_info.tunnels.push_profile:\n\r"
    "  Used to construct the label's TTL and EXP.Range: 0 - 7.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_encap mpls_entry_add tunnel_eep_ndx 0 out_vsi 0 orientation 0\n\r"
    "  nof_tunnels 0 push_profile 0 tunnel_label 0 ll_eep 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, BIT(31)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_ENCAP_MPLS_ENTRY_ADD_MPLS_ENTRY_ADD_MPLS_ENCAP_INFO_TUNNELS1_TUNNEL_LABEL_ID, 
    "tunnel_1_label", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  mpls_encap_info.tunnels.tunnel_label:\n\r"
    "  Label of the tunnel.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_encap mpls_entry_add tunnel_eep_ndx 0 out_vsi 0 orientation 0\n\r"
    "  nof_tunnels 0 push_profile 0 tunnel_label 0 ll_eep 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, BIT(31)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },
  { 
    SOC_PARAM_PPD_EG_ENCAP_MPLS_ENTRY_ADD_MPLS_ENTRY_ADD_OAM_LIF_SET_ID, 
    "oam_lif_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  oam_lif_set:\n\r"
    "  Valid only for ARAD.\n\r"
    "  If set, then OAM LIF value is equal to the OutLIF index. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
"  soc_ppd_api eg_encap ll_entry_add ll_eep_ndx 0 tpid_index 0 pcp_dei 0 out_vid 0\n\r"
    "  out_vid_valid 0 dest_mac 0 ll_remark_profile 0 out_ac_valid 0 out_ac_lsb 0 oam_lif_set 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, BIT(31)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_ENCAP_MPLS_ENTRY_ADD_MPLS_ENTRY_ADD_LL_EEP_NOF_REPS_ID, 
    "nof_ll_reps", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  ll_eep:\n\r"
    "  Points to next encapsulation (LL).\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_encap mpls_entry_add tunnel_eep_ndx 0 out_vsi 0 orientation 0\n\r"
    "  nof_tunnels 0 push_profile 0 tunnel_label 0 ll_eep 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, BIT(31)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_ENCAP_MPLS_ENTRY_ADD_MPLS_ENTRY_ADD_LL_EEP_ID, 
    "ll_eep", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  ll_eep:\n\r"
    "  Points to next encapsulation (LL).\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_encap mpls_entry_add tunnel_eep_ndx 0 out_vsi 0 orientation 0\n\r"
    "  nof_tunnels 0 push_profile 0 tunnel_label 0 ll_eep 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, BIT(31)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_ENCAP_IPV4_ENTRY_ADD_IPV4_ENTRY_ADD_ID, 
    "ipv4_entry_add", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Add IPv4 tunnels encapsulation entry to the Egress Encapsulation DB (TUNNEL_EEP).\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_encap ipv4_entry_add tunnel_eep_ndx 0 out_vsi 0 enable_gre 0 tos_index 0\n\r"
    "  ttl_index 0 src_index 0 dest 0 ll_eep 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(0)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_ENCAP_IPV4_ENTRY_ADD_IPV4_ENTRY_ADD_TUNNEL_EEP_NDX_ID, 
    "tunnel_eep_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  tunnel_eep_ndx:\n\r"
    "  TUNNEL_EEP points to 'EEP 2' table. The entry in the 'EEP 2' table contains IPv4\n\r"
    "  encapsulation information.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_encap ipv4_entry_add tunnel_eep_ndx 0 out_vsi 0 enable_gre 0 tos_index 0\n\r"
    "  ttl_index 0 src_index 0 dest 0 ll_eep 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(0)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_ENCAP_IPV4_ENTRY_ADD_IPV4_ENTRY_ADD_IPV4_ENCAP_INFO_OUT_VSI_ID, 
    "out_vsi", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  ipv4_encap_info.out_vsi:\n\r"
    "  The VSI to assign to the packet, for the processing of the Link-Layer header.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_encap ipv4_entry_add tunnel_eep_ndx 0 out_vsi 0 enable_gre 0 tos_index 0\n\r"
    "  ttl_index 0 src_index 0 dest 0 ll_eep 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(0)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_ENCAP_IPV4_ENTRY_ADD_IPV4_ENTRY_ADD_IPV4_ENCAP_INFO_DEST_ENABLE_GRE_ID, 
    "enable_gre", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  ipv4_encap_info.dest.enable_gre:\n\r"
    "  If TRUE, then the IPv4 tunnel has a GRE header. The GRE header is Constant.\n\r"
    "  Invalid for ARAD. \n\r "
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_encap ipv4_entry_add tunnel_eep_ndx 0 out_vsi 0 enable_gre 0 tos_index 0\n\r"
    "  ttl_index 0 src_index 0 dest 0 ll_eep 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(0)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_ENCAP_IPV4_ENTRY_ADD_IPV4_ENTRY_ADD_IPV4_ENCAP_INFO_DEST_TOS_INDEX_ID, 
    "tos_index", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  ipv4_encap_info.dest.tos_index:\n\r"
    "  Select 1 of 16 TOS values. See soc_ppd_eg_encap_ipv4_tunnel_glbl_tos_set.Range: 0\n\r"
    "  - 15.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_encap ipv4_entry_add tunnel_eep_ndx 0 out_vsi 0 enable_gre 0 tos_index 0\n\r"
    "  ttl_index 0 src_index 0 dest 0 ll_eep 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(0)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_ENCAP_IPV4_ENTRY_ADD_IPV4_ENTRY_ADD_IPV4_ENCAP_INFO_DEST_TTL_INDEX_ID, 
    "ttl_index", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  ipv4_encap_info.dest.ttl_index:\n\r"
    "  Select 1 of 3 TTL values. See soc_ppd_eg_encap_ipv4_tunnel_glbl_ttl_set.Range: 0\n\r"
    "  - 3.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_encap ipv4_entry_add tunnel_eep_ndx 0 out_vsi 0 enable_gre 0 tos_index 0\n\r"
    "  ttl_index 0 src_index 0 dest 0 ll_eep 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(0)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_ENCAP_IPV4_ENTRY_ADD_IPV4_ENTRY_ADD_IPV4_ENCAP_INFO_DEST_SRC_INDEX_ID, 
    "src_index", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(SOC_PPC_EG_ENCAP_ENCAPSULATION_MODE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  ipv4_encap_info.dest.src_index:\n\r"
    "  Select 1 of 16 source address. See\n\r"
    "  soc_ppd_eg_encap_ipv4_tunnel_glbl_src_ip_set.Range: 0 - 15.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_encap ipv4_entry_add tunnel_eep_ndx 0 out_vsi 0 enable_gre 0 tos_index 0\n\r"
    "  ttl_index 0 src_index 0 dest 0 ll_eep 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(0)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_ENCAP_IPV4_ENTRY_ADD_IPV4_ENTRY_ADD_IPV4_ENCAP_INFO_DEST_DEST_ID, 
    "dest", 
    (PARAM_VAL_RULES *)&soc_ppd_api_ip_address_vals[0], 
    (sizeof(soc_ppd_api_ip_address_vals) / sizeof(soc_ppd_api_ip_address_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  ipv4_encap_info.dest.dest:\n\r"
    "  IPv4 destination address.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_encap ipv4_entry_add tunnel_eep_ndx 0 out_vsi 0 enable_gre 0 tos_index 0\n\r"
    "  ttl_index 0 src_index 0 dest 0 ll_eep 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(0)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_ENCAP_IPV4_ENTRY_ADD_IPV4_ENTRY_ADD_IPV4_ENCAP_INFO_DEST_ENCAPSULATION_MODE_ID, 
    "encapsulation mode", 
    (PARAM_VAL_RULES *)&SOC_PPC_EG_ENCAP_ENCAPSULATION_MODE_rule[0], 
    (sizeof(SOC_PPC_EG_ENCAP_ENCAPSULATION_MODE_rule) / sizeof(SOC_PPC_EG_ENCAP_ENCAPSULATION_MODE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  ipv4_encap_info.dest.encapsulation_mode:\n\r"
    "  IPv4 encapsulation mode\n\r"
    "  Valid only for ARAD."
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_encap ipv4_entry_add tunnel_eep_ndx 0 out_vsi 0 enable_gre 0 tos_index 0\n\r"
    "  ttl_index 0 src_index 0 dest 0 ll_eep 0 encapsulation mode 0 \n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(0)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  }, 
  { 
    SOC_PARAM_PPD_EG_ENCAP_IPV4_ENTRY_ADD_IPV4_ENTRY_ADD_IPV4_ENCAP_INFO_DEST_OAM_LIF_SET_ID, 
    "oam_lif_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  ipv4_encap_info.dest.oam_lif_set:\n\r"
    "  OAM LIF indication value. If set, then OAM LIF value is equal to the OutLIF index. \n\r"
    "  Valid only for ARAD."
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_encap ipv4_entry_add tunnel_eep_ndx 0 out_vsi 0 enable_gre 0 tos_index 0\n\r"
    "  ttl_index 0 src_index 0 dest 0 ll_eep 0 encapsulation mode 0 oam_lif_set 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(0)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_ENCAP_IPV4_ENTRY_ADD_IPV4_ENTRY_ADD_LL_EEP_ID, 
    "ll_eep", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  ll_eep:\n\r"
    "  Points to next encapsulation (LL). IP tunnel must point to a link-layer\n\r"
    "  encapsulation entry and a link layer.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_encap ipv4_entry_add tunnel_eep_ndx 0 out_vsi 0 enable_gre 0 tos_index 0\n\r"
    "  ttl_index 0 src_index 0 dest 0 ll_eep 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(0)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_ENCAP_LL_ENTRY_ADD_LL_ENTRY_ADD_ID, 
    "ll_entry_add", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Add LL encapsulation entry.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_encap ll_entry_add ll_eep_ndx 0 tpid_index 0 pcp_dei 0 out_vid 0\n\r"
    "  out_vid_valid 0 dest_mac 0 ll_remark_profile 0 out_ac_valid 0 out_ac_lsb 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(1)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_ENCAP_LL_ENTRY_ADD_LL_ENTRY_ADD_LL_EEP_NDX_ID, 
    "ll_eep_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  ll_eep_ndx:\n\r"
    "  Points to LL table.   \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_encap ll_entry_add ll_eep_ndx 0 tpid_index 0 pcp_dei 0 out_vid 0\n\r"
    "  out_vid_valid 0 dest_mac 0 ll_remark_profile 0 out_ac_valid 0 out_ac_lsb 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(1)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_ENCAP_LL_ENTRY_ADD_LL_ENTRY_ADD_LL_ENCAP_INFO_TPID_INDEX_ID, 
    "tpid_index", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  ll_encap_info.tpid_index:\n\r"
    "  Relevant ONLY for T20E: used to set TPID of P2P link layer VLAN Tag. Select\n\r"
    "  one of the four global TPIDs configured by soc_ppd_llp_parse_tpid_value_set() as\n\r"
    "  the TPID of the tag of the packet (if exists).\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_encap ll_entry_add ll_eep_ndx 0 tpid_index 0 pcp_dei 0 out_vid 0\n\r"
    "  out_vid_valid 0 dest_mac 0 ll_remark_profile 0 out_ac_valid 0 out_ac_lsb 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(1)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_ENCAP_LL_ENTRY_ADD_LL_ENTRY_ADD_LL_ENCAP_INFO_PCP_DEI_ID, 
    "pcp_dei", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  ll_encap_info.pcp_dei:\n\r"
    "  Relevant ONLY for T20E: used to set Tag for P2P link layer. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_encap ll_entry_add ll_eep_ndx 0 tpid_index 0 pcp_dei 0 out_vid 0\n\r"
    "  out_vid_valid 0 dest_mac 0 ll_remark_profile 0 out_ac_valid 0 out_ac_lsb 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(1)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_ENCAP_LL_ENTRY_ADD_LL_ENTRY_ADD_LL_ENCAP_INFO_PCP_DEI_VALID_ID, 
    "pcp_dei_valid", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  ll_encap_info.pcp_dei:\n\r"
    "  Relevant ONLY for T20E: used to set Tag for P2P link layer. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_encap ll_entry_add ll_eep_ndx 0 tpid_index 0 pcp_dei 0 out_vid 0\n\r"
    "  out_vid_valid 0 dest_mac 0 ll_remark_profile 0 out_ac_valid 0 out_ac_lsb 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(1)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_ENCAP_LL_ENTRY_ADD_LL_ENTRY_ADD_LL_ENCAP_INFO_OUT_VID_ID, 
    "out_vid", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  ll_encap_info.out_vid:\n\r"
    "  Out-VID to set in the packet.T20E: used to set Tag for P2P link\n\r"
    "  layer.Petra-B: relevant for MIM tunnel and TRILL adjacent. In all other\n\r"
    "  applications, it is a function of the out-VSI.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_encap ll_entry_add ll_eep_ndx 0 tpid_index 0 pcp_dei 0 out_vid 0\n\r"
    "  out_vid_valid 0 dest_mac 0 ll_remark_profile 0 out_ac_valid 0 out_ac_lsb 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(1)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_ENCAP_LL_ENTRY_ADD_LL_ENTRY_ADD_LL_ENCAP_INFO_OUT_VID_VALID_ID, 
    "out_vid_valid", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  ll_encap_info.out_vid_valid:\n\r"
    "  T20E: used to set Tag for P2P link layer, If TRUE then Vlan Tag with out_vid\n\r"
    "  and pcp_deiis built over the MAC header.Petra-B: Is out_vid valid. Relevant\n\r"
    "  ONLY for MIM tunnel and TRILL adjacent; otherwise, has to be FALSE. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_encap ll_entry_add ll_eep_ndx 0 tpid_index 0 pcp_dei 0 out_vid 0\n\r"
    "  out_vid_valid 0 dest_mac 0 ll_remark_profile 0 out_ac_valid 0 out_ac_lsb 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(1)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_ENCAP_LL_ENTRY_ADD_LL_ENTRY_ADD_LL_ENCAP_INFO_DEST_MAC_ID, 
    "dest_mac", 
    (PARAM_VAL_RULES *)&soc_ppd_api_mac_addr_vals[0], 
    (sizeof(soc_ppd_api_mac_addr_vals) / sizeof(soc_ppd_api_mac_addr_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  ll_encap_info.dest_mac:\n\r"
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    "  DA MAC address.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_encap ll_entry_add ll_eep_ndx 0 tpid_index 0 pcp_dei 0 out_vid 0\n\r"
    "  out_vid_valid 0 dest_mac 0 ll_remark_profile 0 out_ac_valid 0 out_ac_lsb 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(1)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },
  { 
    SOC_PARAM_PPD_EG_ENCAP_LL_ENTRY_ADD_LL_ENTRY_ADD_LL_ENCAP_INFO_LL_REMARK_PROFILE_ID, 
    "ll_remark_profile", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  ll_encap_info.ll_remark_profile:\n\r"
    "  Range: 0-3. valid only for ARAD.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_encap ll_entry_add ll_eep_ndx 0 tpid_index 0 pcp_dei 0 out_vid 0\n\r"
    "  out_vid_valid 0 dest_mac 0 ll_remark_profile 0 out_ac_valid 0 out_ac_lsb 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(1)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },
  { 
    SOC_PARAM_PPD_EG_ENCAP_LL_ENTRY_ADD_LL_ENTRY_ADD_LL_ENCAP_INFO_OUT_AC_VALID_ID, 
    "out_ac_valid", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    " ll_encap_info.out_ac_valid:\n\r"
    " Valid only for ARAD.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_encap ll_entry_add ll_eep_ndx 0 tpid_index 0 pcp_dei 0 out_vid 0\n\r"
    "  out_vid_valid 0 dest_mac 0 ll_remark_profile 0 out_ac_valid 0 out_ac_lsb 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(1)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },
  { 
    SOC_PARAM_PPD_EG_ENCAP_LL_ENTRY_ADD_LL_ENTRY_ADD_LL_ENCAP_INFO_OUT_AC_LSB_ID, 
    "out_ac_lsb", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "ll_encap_info.out_ac_lsb:\n\r"
    "  Valid only for ARAD.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
"  soc_ppd_api eg_encap ll_entry_add ll_eep_ndx 0 tpid_index 0 pcp_dei 0 out_vid 0\n\r"
    "  out_vid_valid 0 dest_mac 0 ll_remark_profile 0 out_ac_valid 0 out_ac_lsb 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(1)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },
  { 
    SOC_PARAM_PPD_EG_ENCAP_LL_ENTRY_ADD_LL_ENTRY_ADD_LL_ENCAP_INFO_OUT_OAM_LIF_SET_ID, 
    "oam_lif_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "ll_encap_info.oam_lif_set:\n\r"
    "  Valid only for ARAD.\n\r"
    "  If set, then OAM LIF value is equal to the OutLIF index. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
"  soc_ppd_api eg_encap ll_entry_add ll_eep_ndx 0 tpid_index 0 pcp_dei 0 out_vid 0\n\r"
    "  out_vid_valid 0 dest_mac 0 ll_remark_profile 0 out_ac_valid 0 out_ac_lsb 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(1)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },
  { 
    SOC_PARAM_PPD_EG_ENCAP_ENTRY_REMOVE_ENTRY_REMOVE_ID, 
    "entry_remove", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Remove entry from the encapsulation DB.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_encap entry_remove eep_type_ndx 0 eep_ndx 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(3)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_ENCAP_ENTRY_REMOVE_ENTRY_REMOVE_EEP_TYPE_NDX_ID, 
    "eep_type_ndx", 
    (PARAM_VAL_RULES *)&SOC_PPC_EG_ENCAP_EEP_TYPE_rule[0], 
    (sizeof(SOC_PPC_EG_ENCAP_EEP_TYPE_rule) / sizeof(SOC_PPC_EG_ENCAP_EEP_TYPE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  eep_type_ndx:\n\r"
    "  Encapsulation DB to select(LIF_EEP/TUNNEL_EEP/LL).   \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_encap entry_remove eep_type_ndx 0 eep_ndx 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(3)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_ENCAP_ENTRY_REMOVE_ENTRY_REMOVE_EEP_NDX_ID, 
    "eep_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  eep_ndx:\n\r"
    "  Points into EEP DB according to 'eep_type_ndx'. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_encap entry_remove eep_type_ndx 0 eep_ndx 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(3)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_ENCAP_ENTRY_GET_ENTRY_GET_ID, 
    "entry_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  get entry from the encapsulation DB.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_encap entry_get eep_type_ndx 0 eep_ndx 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(8)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_ENCAP_ENTRY_GET_ENTRY_GET_EEP_TYPE_NDX_ID, 
    "eep_type_ndx", 
    (PARAM_VAL_RULES *)&SOC_PPC_EG_ENCAP_EEP_TYPE_rule[0], 
    (sizeof(SOC_PPC_EG_ENCAP_EEP_TYPE_rule) / sizeof(SOC_PPC_EG_ENCAP_EEP_TYPE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  eep_type_ndx:\n\r"
    "  Encapsulation DB to select(LIF_EEP/TUNNEL_EEP/LL).   \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_encap entry_get eep_type_ndx 0 eep_ndx 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(8)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_ENCAP_ENTRY_GET_ENTRY_GET_EEP_NDX_ID, 
    "eep_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  eep_ndx:\n\r"
    "  Points into EEP DB according to 'eep_type_ndx'. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_encap entry_get eep_type_ndx 0 eep_ndx 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(8)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_ENCAP_ENTRY_GET_ENTRY_GET_DEPTH_ID, 
    "depth", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  depth:\n\r"
    "  Points into EEP DB according to 'eep_type_ndx'. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_encap entry_get eep_type_ndx 0 depth 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(8)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_ENCAP_PUSH_PROFILE_INFO_SET_PUSH_PROFILE_INFO_SET_ID, 
    "push_profile_info_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Setting the push profile info - specifying how to build the label header.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_encap push_profile_info_set profile_ndx 0 exp 0 ttl 0 has_cw 0\n\r"
    "  model 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(4)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_ENCAP_PUSH_PROFILE_INFO_SET_PUSH_PROFILE_INFO_SET_PROFILE_NDX_ID, 
    "profile_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  profile_ndx:\n\r"
    "  Profile ID. Range: 0 - 7.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_encap push_profile_info_set profile_ndx 0 exp 0 ttl 0 has_cw 0\n\r"
    "  model 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(4)}, 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_ENCAP_PUSH_PROFILE_INFO_SET_PUSH_PROFILE_INFO_SET_PROFILE_INFO_EXP_ID, 
    "exp", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  profile_info.exp:\n\r"
    "  EXP to set in the tunnel header in case tunnel model is pipe.Range: 0 - 7.\n\r"
    "  for T20E user can override the mapping to EXP by calling\n\r"
    "  soc_ppd_eg_encap_push_exp_info_set() which set mapping from push_profile and COS\n\r"
    "  parameters (TC/DP) to exp.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_encap push_profile_info_set profile_ndx 0 exp 0 ttl 0 has_cw 0\n\r"
    "  model 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(4)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_ENCAP_PUSH_PROFILE_INFO_SET_PUSH_PROFILE_INFO_SET_PROFILE_INFO_OVERWRITE_EXP_ID, 
    "overwrite_exp", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  profile_info.exp_mark_mode:\n\r"
    "  Set EXP value according to this entry (exp value in this struct). \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_encap push_profile_info_set profile_ndx 0 exp 0 ttl 0 has_cw 0\n\r"
    "  model 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(4)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_ENCAP_PUSH_PROFILE_INFO_SET_PUSH_PROFILE_INFO_SET_PROFILE_INFO_TTL_ID, 
    "ttl", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  profile_info.ttl:\n\r"
    "  TTL to set in the tunnel header in case tunnel model is pipe.Range: 0 - 255.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_encap push_profile_info_set profile_ndx 0 exp 0 ttl 0 has_cw 0\n\r"
    "  model 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(4)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_ENCAP_PUSH_PROFILE_INFO_SET_PUSH_PROFILE_INFO_SET_PROFILE_INFO_HAS_CW_ID, 
    "has_cw", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  profile_info.has_cw:\n\r"
    "  Has Control-word. Used to determine whether to add CW under the tunnel\n\r"
    "  header. The value of CW is set according to soc_ppd_eg_encap_glbl_info_set \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_encap push_profile_info_set profile_ndx 0 exp 0 ttl 0 has_cw 0\n\r"
    "  model 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(4)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_ENCAP_PUSH_PROFILE_INFO_SET_PUSH_PROFILE_INFO_SET_PROFILE_INFO_MODEL_ID, 
    "model", 
    (PARAM_VAL_RULES *)&SOC_PPD_SAND_PP_MPLS_TUNNEL_MODEL_rule[0], 
    (sizeof(SOC_PPD_SAND_PP_MPLS_TUNNEL_MODEL_rule) / sizeof(SOC_PPD_SAND_PP_MPLS_TUNNEL_MODEL_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  profile_info.model:\n\r"
    "  Tunnel model (Pipe or uniform)\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_encap push_profile_info_set profile_ndx 0 exp 0 ttl 0 has_cw 0\n\r"
    "  model 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(4)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_ENCAP_PUSH_PROFILE_INFO_GET_PUSH_PROFILE_INFO_GET_ID, 
    "push_profile_info_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Setting the push profile info - specifying how to build the label header.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_encap push_profile_info_get profile_ndx 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(5)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_ENCAP_PUSH_PROFILE_INFO_GET_PUSH_PROFILE_INFO_GET_PROFILE_NDX_ID, 
    "profile_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  profile_ndx:\n\r"
    "  Profile ID. Range: 0 - 7.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_encap push_profile_info_get profile_ndx 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(5)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_ENCAP_PUSH_EXP_INFO_SET_PUSH_EXP_INFO_SET_ID, 
    "push_exp_info_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  The EXP value to set to the pushed label.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_encap push_exp_info_set dp 0 tc 0 push_profile 0 exp 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(6)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_ENCAP_PUSH_EXP_INFO_SET_PUSH_EXP_INFO_SET_EXP_KEY_DP_ID, 
    "dp", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  exp_key.dp:\n\r"
    "  Drop Precedence value as calculated by the ingress. See COS module. Relevant\n\r"
    "  ONLY for T20E; for Petra-B has to be 0.Range: 0 - 3.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_encap push_exp_info_set dp 0 tc 0 push_profile 0 exp 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(6)}, 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_ENCAP_PUSH_EXP_INFO_SET_PUSH_EXP_INFO_SET_EXP_KEY_TC_ID, 
    "tc", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  exp_key.tc:\n\r"
    "  Traffic Class value as calculated by the ingress. See COS module. Relevant\n\r"
    "  ONLY for T20E; for Petra-B has to be 0.Range: 0 - 7.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_encap push_exp_info_set dp 0 tc 0 push_profile 0 exp 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(6)}, 
    4, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_ENCAP_PUSH_EXP_INFO_SET_PUSH_EXP_INFO_SET_EXP_KEY_PUSH_PROFILE_ID, 
    "mpls_push_profile", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  exp_key.push_profile:\n\r"
    "  Push profile used to construct the label's TTL and EXP. Range: 0 - 7. This\n\r"
    "  profile is selected by the push command, either by encapsulation\n\r"
    "  soc_ppd_eg_encap_pwe_entry_add() or by forwarding - VPLS see\n\r"
    "  soc_ppd_frwrd_mact_entry_add when EEI is used as MPLS push command.- LSR see\n\r"
    "  soc_ppd_frwrd_ilm_add.In T20E, the EXP value may be mapped from the TC and DP\n\r"
    "  values for each pus_profile. See soc_ppd_eg_encap_push_exp_info_set().\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_encap push_exp_info_set dp 0 tc 0 push_profile 0 exp 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(6)}, 
    5, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_ENCAP_PUSH_EXP_INFO_SET_PUSH_EXP_INFO_SET_EXP_ID, 
    "exp", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  exp:\n\r"
    "  EXP to put in the pushed label.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_encap push_exp_info_set dp 0 tc 0 push_profile 0 exp 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(6)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_ENCAP_PUSH_EXP_INFO_GET_PUSH_EXP_INFO_GET_ID, 
    "push_exp_info_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  The EXP value to set to the pushed label.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_encap push_exp_info_get dp 0 tc 0 push_profile 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(7)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_ENCAP_PUSH_EXP_INFO_GET_PUSH_EXP_INFO_GET_EXP_KEY_DP_ID, 
    "dp", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  exp_key.dp:\n\r"
    "  Drop Precedence value as calculated by the ingress. See COS module. Relevant\n\r"
    "  ONLY for T20E; for Petra-B has to be 0.Range: 0 - 3.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_encap push_exp_info_get dp 0 tc 0 push_profile 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(7)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_ENCAP_PUSH_EXP_INFO_GET_PUSH_EXP_INFO_GET_EXP_KEY_TC_ID, 
    "tc", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  exp_key.tc:\n\r"
    "  Traffic Class value as calculated by the ingress. See COS module. Relevant\n\r"
    "  ONLY for T20E; for Petra-B has to be 0.Range: 0 - 7.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_encap push_exp_info_get dp 0 tc 0 push_profile 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(7)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_ENCAP_PUSH_EXP_INFO_GET_PUSH_EXP_INFO_GET_EXP_KEY_PUSH_PROFILE_ID, 
    "mpls_push_profile", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  exp_key.push_profile:\n\r"
    "  Push profile used to construct the label's TTL and EXP. Range: 0 - 7. This\n\r"
    "  profile is selected by the push command, either by encapsulation\n\r"
    "  soc_ppd_eg_encap_pwe_entry_add() or by forwarding - VPLS see\n\r"
    "  soc_ppd_frwrd_mact_entry_add when EEI is used as MPLS push command.- LSR see\n\r"
    "  soc_ppd_frwrd_ilm_add.In T20E, the EXP value may be mapped from the TC and DP\n\r"
    "  values for each pus_profile. See soc_ppd_eg_encap_push_exp_info_set().\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_encap push_exp_info_get dp 0 tc 0 push_profile 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(7)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_ENCAP_PWE_GLBL_INFO_SET_PWE_GLBL_INFO_SET_ID, 
    "pwe_glbl_info_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set Global information for PWE Encapsulation.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_encap pwe_glbl_info_set cw 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(8)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_ENCAP_PWE_GLBL_INFO_SET_PWE_GLBL_INFO_SET_GLBL_INFO_CW_ID, 
    "cw", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  glbl_info.cw:\n\r"
    "  Control Word value-to set to PWEs that are configured to have CW. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_encap pwe_glbl_info_set cw 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(8)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_ENCAP_PWE_GLBL_INFO_GET_PWE_GLBL_INFO_GET_ID, 
    "pwe_glbl_info_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set Global information for PWE Encapsulation.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_encap pwe_glbl_info_get\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(9)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_ENCAP_IPV4_TUNNEL_GLBL_SRC_IP_SET_IPV4_TUNNEL_GLBL_SRC_IP_SET_ID, 
    "ipv4_tunnel_glbl_src_ip_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set source IP address for IPv4 Tunneling.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_encap ipv4_tunnel_glbl_src_ip_set entry_ndx 0 src_ip 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(10)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_ENCAP_IPV4_TUNNEL_GLBL_SRC_IP_SET_IPV4_TUNNEL_GLBL_SRC_IP_SET_ENTRY_NDX_ID, 
    "entry_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  entry_ndx:\n\r"
    "  Entry pointed by IPv4 Tunnel - see soc_ppd_eg_encap_ipv4_encap_entry_add().\n\r"
    "  Range: 0 - 15.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_encap ipv4_tunnel_glbl_src_ip_set entry_ndx 0 src_ip 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(10)}, 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_ENCAP_IPV4_TUNNEL_GLBL_SRC_IP_SET_IPV4_TUNNEL_GLBL_SRC_IP_SET_SRC_IP_ID, 
    "src_ip", 
    (PARAM_VAL_RULES *)&soc_ppd_api_ip_address_vals[0], 
    (sizeof(soc_ppd_api_ip_address_vals) / sizeof(soc_ppd_api_ip_address_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  src_ip:\n\r"
    "  Source IP address.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_encap ipv4_tunnel_glbl_src_ip_set entry_ndx 0 src_ip 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(10)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_ENCAP_IPV4_TUNNEL_GLBL_SRC_IP_GET_IPV4_TUNNEL_GLBL_SRC_IP_GET_ID, 
    "ipv4_tunnel_glbl_src_ip_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set source IP address for IPv4 Tunneling.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_encap ipv4_tunnel_glbl_src_ip_get entry_ndx 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(30)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_ENCAP_IPV4_TUNNEL_GLBL_SRC_IP_GET_IPV4_TUNNEL_GLBL_SRC_IP_GET_ENTRY_NDX_ID, 
    "entry_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  entry_ndx:\n\r"
    "  Entry pointed by IPv4 Tunnel - see soc_ppd_eg_encap_ipv4_encap_entry_add().\n\r"
    "  Range: 0 - 15.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_encap ipv4_tunnel_glbl_src_ip_get entry_ndx 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(30)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_ENCAP_IPV4_TUNNEL_GLBL_TTL_SET_IPV4_TUNNEL_GLBL_TTL_SET_ID, 
    "ipv4_tunnel_glbl_ttl_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set TTL for IPv4 Tunneling.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_encap ipv4_tunnel_glbl_ttl_set entry_ndx 0 ttl 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(12)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_ENCAP_IPV4_TUNNEL_GLBL_TTL_SET_IPV4_TUNNEL_GLBL_TTL_SET_ENTRY_NDX_ID, 
    "entry_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  entry_ndx:\n\r"
    "  Entry pointed by IPv4 Tunnel, see soc_ppd_eg_encap_ipv4_encap_entry_add(). Range:\n\r"
    "  0 - 3.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_encap ipv4_tunnel_glbl_ttl_set entry_ndx 0 ttl 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(12)}, 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_ENCAP_IPV4_TUNNEL_GLBL_TTL_SET_IPV4_TUNNEL_GLBL_TTL_SET_TTL_ID, 
    "ttl", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  ttl:\n\r"
    "  TTL value to set in the IPV4 tunnel header. Range: 0 - 63. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_encap ipv4_tunnel_glbl_ttl_set entry_ndx 0 ttl 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(12)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_ENCAP_IPV4_TUNNEL_GLBL_TTL_GET_IPV4_TUNNEL_GLBL_TTL_GET_ID, 
    "ipv4_tunnel_glbl_ttl_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set TTL for IPv4 Tunneling.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_encap ipv4_tunnel_glbl_ttl_get entry_ndx 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(13)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_ENCAP_IPV4_TUNNEL_GLBL_TTL_GET_IPV4_TUNNEL_GLBL_TTL_GET_ENTRY_NDX_ID, 
    "entry_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  entry_ndx:\n\r"
    "  Entry pointed by IPv4 Tunnel, see soc_ppd_eg_encap_ipv4_encap_entry_add(). Range:\n\r"
    "  0 - 3.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_encap ipv4_tunnel_glbl_ttl_get entry_ndx 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(13)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_ENCAP_IPV4_TUNNEL_GLBL_TOS_SET_IPV4_TUNNEL_GLBL_TOS_SET_ID, 
    "ipv4_tunnel_glbl_tos_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set TOS for IPv4 Tunneling.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_encap ipv4_tunnel_glbl_tos_set entry_ndx 0 tos 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(14)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_ENCAP_IPV4_TUNNEL_GLBL_TOS_SET_IPV4_TUNNEL_GLBL_TOS_SET_ENTRY_NDX_ID, 
    "entry_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  entry_ndx:\n\r"
    "  Entry pointed by IPv4 Tunnel, see soc_ppd_eg_encap_ipv4_encap_entry_add(). Range:\n\r"
    "  0 - 15.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_encap ipv4_tunnel_glbl_tos_set entry_ndx 0 tos 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(14)}, 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_ENCAP_IPV4_TUNNEL_GLBL_TOS_SET_IPV4_TUNNEL_GLBL_TOS_SET_TOS_ID, 
    "tos", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  tos:\n\r"
    "  TOS value to set in the IPV4 tunnel header. Range: 0 - 255. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_encap ipv4_tunnel_glbl_tos_set entry_ndx 0 tos 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(14)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_ENCAP_IPV4_TUNNEL_GLBL_TOS_GET_IPV4_TUNNEL_GLBL_TOS_GET_ID, 
    "ipv4_tunnel_glbl_tos_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set TOS for IPv4 Tunneling.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_encap ipv4_tunnel_glbl_tos_get entry_ndx 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(15)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_ENCAP_IPV4_TUNNEL_GLBL_TOS_GET_IPV4_TUNNEL_GLBL_TOS_GET_ENTRY_NDX_ID, 
    "entry_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  entry_ndx:\n\r"
    "  Entry pointed by IPv4 Tunnel, see soc_ppd_eg_encap_ipv4_encap_entry_add(). Range:\n\r"
    "  0 - 15.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_encap ipv4_tunnel_glbl_tos_get entry_ndx 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(15)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_API_EG_ENCAP_ID, 
    "eg_encap", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "",
    "", 
    "",
    {0, 0, 0, 0, 0, BIT(11)|BIT(12), 0, 0, BIT(24)|BIT(25)|BIT(26)|BIT(27)|BIT(28)|BIT(29)|BIT(30)|BIT(31), BIT(0)|BIT(1)|BIT(3)|BIT(4)|BIT(5)|BIT(6)|BIT(7)|BIT(8)|BIT(9)|BIT(10)|BIT(12)|BIT(13)|BIT(14)|BIT(15), BIT(15)|BIT(30), BIT(8)}, 
    1, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
#endif /* } eg_encap*/
#ifdef UI_EG_AC/* { eg_ac*/
  { 
    SOC_PARAM_PPD_EG_AC_INFO_SET_INFO_SET_ID, 
    "out_ac_info_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Sets the editing and trap information for packets associated with AC.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_ac info_set out_ac_ndx 0 max_level 0 is_trap_valid 0 pcp_profile 0\n\r"
    "  edit_profile 0 nof_tags 0 vlan_tags_index 0 dei 0 pcp 0 vid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(16)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_AC_INFO_SET_INFO_SET_OUT_AC_NDX_ID, 
    "out_ac_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  out_ac_ndx:\n\r"
    "  AC ID. Should be equal to the LIF ID in the incoming LIF module.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_ac info_set out_ac_ndx 0 max_level 0 is_trap_valid 0 pcp_profile 0\n\r"
    "  edit_profile 0 nof_tags 0 vlan_tags_index 0 dei 0 pcp 0 vid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(16)}, 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_AC_INFO_SET_INFO_SET_AC_INFO_EDIT_INFO_PCP_PROFILE_ID, 
    "pcp_profile", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  ac_info.edit_info.pcp_profile:\n\r"
    "  Profile to build the packet PCP-DEI/UP.See COS Mapping APIs in Egress Edit\n\r"
    "  Module:soc_ppd_eg_vlan_edit_pcp_map_stag_setppd_eg_vlan_edit_pcp_map_ctag_setppd_\n\r"
    "  g_vlan_edit_pcp_map_untagged_setThese APIs map COS parameters\n\r"
    "  (UP/PCP/DEI/TC/DP) (and pcp_profile) to PCP and DEI. These profiles let the\n\r"
    "  user configure up to 16 such mappings. Range: 0 - 15.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_ac info_set out_ac_ndx 0 max_level 0 is_trap_valid 0 pcp_profile 0\n\r"
    "  edit_profile 0 nof_tags 0 vlan_tags_index 0 dei 0 pcp 0 vid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(16)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_AC_INFO_SET_INFO_SET_AC_INFO_EDIT_INFO_EDIT_PROFILE_ID, 
    "edit_profile", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  ac_info.edit_info.edit_profile:\n\r"
    "  Profile according to which to edit the VLAN tags. See\n\r"
    "  soc_ppd_eg_vlan_edit_command_info_set(). According to tag-format which represents\n\r"
    "  the Tag structure of the packet and this edit-profile, the user may define an\n\r"
    "  Edit command to build the header of the outgoing packets. Range: 0 - 15.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_ac info_set out_ac_ndx 0 max_level 0 is_trap_valid 0 pcp_profile 0\n\r"
    "  edit_profile 0 nof_tags 0 vlan_tags_index 0 dei 0 pcp 0 vid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(16)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_AC_INFO_SET_INFO_SET_AC_INFO_EDIT_INFO_NOF_TAGS_ID, 
    "nof_tags", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  ac_info.edit_info.nof_tags:\n\r"
    "  Number of Vlan tags. Petra-B and T20E support 2 tags: vlan_tags[0] is used\n\r"
    "  for building the outer tag and vlan_tags[1] for building the inner tag.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_ac info_set out_ac_ndx 0 max_level 0 is_trap_valid 0 pcp_profile 0\n\r"
    "  edit_profile 0 nof_tags 0 vlan_tags_index 0 dei 0 pcp 0 vid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(16)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_AC_INFO_SET_INFO_SET_AC_INFO_EDIT_INFO_OAM_LIF_SET_ID, 
    "oam_lif_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  ac_info.edit_info.oam_lif_set:\n\r"
    "  Valid only for ARAD.\n\r"
    "  If set, then OAM LIF value is equal to the OutLIF index. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_ac info_set out_ac_ndx 0 max_level 0 is_trap_valid 0 pcp_profile 0\n\r"
    "  edit_profile 0 nof_tags 0 vlan_tags_index 0 dei 0 pcp 0 vid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(16)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_AC_INFO_SET_INFO_SET_AC_INFO_EDIT_INFO_OUTER_VLAN_TAGS_DEI_ID, 
    "outer_dei", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  ac_info.edit_info.vlan_tags[ prm_vlan_tags_index].dei:\n\r"
    "  Drop Eligibility Indicator.For C-tag, this is the CFI (Canonical Format\n\r"
    "  Indicator) and has to be 0.Range: 0 - 1.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_ac info_set out_ac_ndx 0 max_level 0 is_trap_valid 0 pcp_profile 0\n\r"
    "  edit_profile 0 nof_tags 0 vlan_tags_index 0 dei 0 pcp 0 vid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(16)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_AC_INFO_SET_INFO_SET_AC_INFO_EDIT_INFO_OUTER_VLAN_TAGS_PCP_ID, 
    "outer_pcp", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  ac_info.edit_info.vlan_tags[ prm_vlan_tags_index].pcp:\n\r"
    "  Priority Code Point. Refers to the IEEE 802.1p priority. For C-Tag it is the\n\r"
    "  User Priority. Range: 0 - 7.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_ac info_set out_ac_ndx 0 max_level 0 is_trap_valid 0 pcp_profile 0\n\r"
    "  edit_profile 0 nof_tags 0 vlan_tags_index 0 dei 0 pcp 0 vid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(16)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_AC_INFO_SET_INFO_SET_AC_INFO_EDIT_INFO_OUTER_VLAN_TAGS_VID_ID, 
    "outer_vid", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  ac_info.edit_info.vlan_tags[ prm_vlan_tags_index].vid:\n\r"
    "  VLAN ID.Range: 0 - 4095.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_ac info_set out_ac_ndx 0 max_level 0 is_trap_valid 0 pcp_profile 0\n\r"
    "  edit_profile 0 nof_tags 0 vlan_tags_index 0 dei 0 pcp 0 vid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(16)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_AC_INFO_SET_INFO_SET_AC_INFO_EDIT_INFO_INNER_VLAN_TAGS_DEI_ID, 
    "inner_dei", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  ac_info.edit_info.vlan_tags[ prm_vlan_tags_index].dei:\n\r"
    "  Drop Eligibility Indicator.For C-tag, this is the CFI (Canonical Format\n\r"
    "  Indicator) and has to be 0.Range: 0 - 1.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_ac info_set out_ac_ndx 0 max_level 0 is_trap_valid 0 pcp_profile 0\n\r"
    "  edit_profile 0 nof_tags 0 vlan_tags_index 0 dei 0 pcp 0 vid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(16)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_AC_INFO_SET_INFO_SET_AC_INFO_EDIT_INFO_INNER_VLAN_TAGS_PCP_ID, 
    "inner_pcp", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  ac_info.edit_info.vlan_tags[ prm_vlan_tags_index].pcp:\n\r"
    "  Priority Code Point. Refers to the IEEE 802.1p priority. For C-Tag it is the\n\r"
    "  User Priority. Range: 0 - 7.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_ac info_set out_ac_ndx 0 max_level 0 is_trap_valid 0 pcp_profile 0\n\r"
    "  edit_profile 0 nof_tags 0 vlan_tags_index 0 dei 0 pcp 0 vid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(16)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_AC_INFO_SET_INFO_SET_AC_INFO_EDIT_INFO_INNER_VLAN_TAGS_VID_ID, 
    "inner_vid", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  ac_info.edit_info.vlan_tags[ prm_vlan_tags_index].vid:\n\r"
    "  VLAN ID.Range: 0 - 4095.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_ac info_set out_ac_ndx 0 max_level 0 is_trap_valid 0 pcp_profile 0\n\r"
    "  edit_profile 0 nof_tags 0 vlan_tags_index 0 dei 0 pcp 0 vid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(16)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_AC_INFO_GET_INFO_GET_ID, 
    "out_ac_info_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Sets the editing and trap information for packets associated with AC.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_ac info_get out_ac_ndx 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(17)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_AC_INFO_GET_INFO_GET_OUT_AC_NDX_ID, 
    "out_ac_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  out_ac_ndx:\n\r"
    "  AC ID. Should be equal to the LIF ID in the incoming LIF module.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_ac info_get out_ac_ndx 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(17)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  }, 
  { 
    SOC_PARAM_PPD_EG_AC_MP_INFO_SET_MP_INFO_SET_ID, 
    "mp_info_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  This function is used to define a Maintenance Point (MP) on an outgoing\n\r"
    "  Attachment-Circuit (port x VSI) and MD-level, and to determine the action to\n\r"
    "  perform. If the MP is one of the 4K accelerated MEPs, the function configures\n\r"
    "  the related OAMP databases and associates the AC and MD-Level with a\n\r"
    "  user-provided handle. This handle is later used by user to access OAMP\n\r"
    "  database for this MEP.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_ac mp_info_set out_ac_ndx 0 is_valid 0 mp_level 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, BIT(5)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_AC_MP_INFO_SET_MP_INFO_SET_OUT_AC_NDX_ID, 
    "out_ac_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  out_ac_ndx:\n\r"
    "  AC ID. Should be equal to the LIF ID in the incoming LIF module.	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_ac mp_info_set out_ac_ndx 0 is_valid 0 mp_level 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, BIT(5)}, 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_AC_MP_INFO_SET_MP_INFO_SET_INFO_IS_VALID_ID, 
    "is_valid", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  info.is_valid:\n\r"
    "  If True, then enable MP for this ACF.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_ac mp_info_set out_ac_ndx 0 is_valid 0 mp_level 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, BIT(5)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_AC_MP_INFO_SET_MP_INFO_SET_INFO_MP_LEVEL_ID, 
    "mp_level", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  info.mp_level:\n\r"
    "  The level of the MEP. Range: 0 - 7.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_ac mp_info_set out_ac_ndx 0 is_valid 0 mp_level 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, BIT(5)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_AC_MP_INFO_GET_MP_INFO_GET_ID, 
    "mp_info_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  This function is used to define a Maintenance Point (MP) on an outgoing\n\r"
    "  Attachment-Circuit (port x VSI) and MD-level, and to determine the action to\n\r"
    "  perform. If the MP is one of the 4K accelerated MEPs, the function configures\n\r"
    "  the related OAMP databases and associates the AC and MD-Level with a\n\r"
    "  user-provided handle. This handle is later used by user to access OAMP\n\r"
    "  database for this MEP.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_ac mp_info_get out_ac_ndx 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, BIT(6)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_AC_MP_INFO_GET_MP_INFO_GET_OUT_AC_NDX_ID, 
    "out_ac_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  out_ac_ndx:\n\r"
    "  AC ID. Should be equal to the LIF ID in the incoming LIF module.	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_ac mp_info_get out_ac_ndx 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, BIT(6)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_AC_PORT_VSI_INFO_SET_PORT_VSI_INFO_SET_ID, 
    "port_vsi_info_add", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Sets the editing and trap information for packets NOT associated with AC and\n\r"
    "  to be transmitted from VBP port (not CEP port).\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_ac port_vsi_info_set out_ac_ndx 0 vsi 0 out_port 0 max_level 0\n\r"
    "  is_trap_valid 0 pcp_profile 0 edit_profile 0 nof_tags 0 vlan_tags_index 0 dei\n\r"
    "  0 pcp 0 vid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(18)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },
  { 
    SOC_PARAM_PPD_EG_AC_PORT_VSI_INFO_SET_PORT_VSI_INFO_SET_VBP_KEY_VSI_ID, 
    "vsi", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  vbp_key.vsi:\n\r"
    "  The VSI the packet is associated with. For Tunnel encapsulated packets, this\n\r"
    "  is the VSI from the Egress Encapsulation.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_ac port_vsi_info_set out_ac_ndx 0 vsi 0 out_port 0 max_level 0\n\r"
    "  is_trap_valid 0 pcp_profile 0 edit_profile 0 nof_tags 0 vlan_tags_index 0 dei\n\r"
    "  0 pcp 0 vid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(18)}, 
    4, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_AC_PORT_VSI_INFO_SET_PORT_VSI_INFO_SET_VBP_KEY_OUT_PORT_ID, 
    "out_vlan_domain", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  vbp_key.out_port:\n\r"
    "  Local Out port ID. Has to be of type VBP/CNP/PNP.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_ac port_vsi_info_set out_ac_ndx 0 vsi 0 out_port 0 max_level 0\n\r"
    "  is_trap_valid 0 pcp_profile 0 edit_profile 0 nof_tags 0 vlan_tags_index 0 dei\n\r"
    "  0 pcp 0 vid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(18)}, 
    5, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_AC_PORT_VSI_INFO_SET_PORT_VSI_INFO_SET_AC_INFO_EDIT_INFO_PCP_PROFILE_ID, 
    "pcp_profile", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  ac_info.edit_info.pcp_profile:\n\r"
    "  Profile to build the packet PCP-DEI/UP.See COS Mapping APIs in Egress Edit\n\r"
    "  Module:soc_ppd_eg_vlan_edit_pcp_map_stag_setppd_eg_vlan_edit_pcp_map_ctag_setppd_\n\r"
    "  g_vlan_edit_pcp_map_untagged_setThese APIs map COS parameters\n\r"
    "  (UP/PCP/DEI/TC/DP) (and pcp_profile) to PCP and DEI. These profiles let the\n\r"
    "  user configure up to 16 such mappings. Range: 0 - 15.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_ac port_vsi_info_set out_ac_ndx 0 vsi 0 out_port 0 max_level 0\n\r"
    "  is_trap_valid 0 pcp_profile 0 edit_profile 0 nof_tags 0 vlan_tags_index 0 dei\n\r"
    "  0 pcp 0 vid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(18)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_AC_PORT_VSI_INFO_SET_PORT_VSI_INFO_SET_AC_INFO_EDIT_INFO_EDIT_PROFILE_ID, 
    "edit_profile", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  ac_info.edit_info.edit_profile:\n\r"
    "  Profile according to which to edit the VLAN tags. See\n\r"
    "  soc_ppd_eg_vlan_edit_command_info_set(). According to tag-format which represents\n\r"
    "  the Tag structure of the packet and this edit-profile, the user may define an\n\r"
    "  Edit command to build the header of the outgoing packets. Range: 0 - 15.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_ac port_vsi_info_set out_ac_ndx 0 vsi 0 out_port 0 max_level 0\n\r"
    "  is_trap_valid 0 pcp_profile 0 edit_profile 0 nof_tags 0 vlan_tags_index 0 dei\n\r"
    "  0 pcp 0 vid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(18)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_AC_PORT_VSI_INFO_SET_PORT_VSI_INFO_SET_AC_INFO_EDIT_INFO_OAM_LIF_SET_ID, 
    "oam_lif_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  ac_info.edit_info.oam_lif_set:\n\r" 
    "  Valid only for ARAD.\n\r"
    "  If set, then OAM LIF value is equal to the OutLIF index. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_ac port_vsi_info_set out_ac_ndx 0 vsi 0 out_port 0 max_level 0\n\r"
    "  is_trap_valid 0 pcp_profile 0 edit_profile 0 nof_tags 0 vlan_tags_index 0 dei\n\r"
    "  0 pcp 0 vid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(18)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_AC_PORT_VSI_INFO_ADD_PORT_VSI_INFO_ADD_OUT_AC_NDX_ID, 
    "out_ac_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  ac_ndx:\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_ac port_vsi_info_set out_ac_ndx 0 vsi 0 out_port 0 max_level 0\n\r"
    "  is_trap_valid 0 pcp_profile 0 edit_profile 0 nof_tags 0 vlan_tags_index 0 dei\n\r"
    "  0 pcp 0 vid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(18)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_AC_PORT_VSI_INFO_SET_PORT_VSI_INFO_SET_AC_INFO_EDIT_INFO_VLAN_TAGS_OUTER_DEI_ID, 
    "outer_dei", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  ac_info.edit_info.vlan_tags[ prm_vlan_tags_index].dei:\n\r"
    "  Drop Eligibility Indicator.For C-tag, this is the CFI (Canonical Format\n\r"
    "  Indicator) and has to be 0.Range: 0 - 1.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_ac port_vsi_info_set out_ac_ndx 0 vsi 0 out_port 0 max_level 0\n\r"
    "  is_trap_valid 0 pcp_profile 0 edit_profile 0 nof_tags 0 vlan_tags_index 0 dei\n\r"
    "  0 pcp 0 vid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(18)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_AC_PORT_VSI_INFO_SET_PORT_VSI_INFO_SET_AC_INFO_EDIT_INFO_VLAN_TAGS_OUTER_PCP_ID, 
    "outer_pcp", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  ac_info.edit_info.vlan_tags[ prm_vlan_tags_index].pcp:\n\r"
    "  Priority Code Point. Refers to the IEEE 802.1p priority. For C-Tag it is the\n\r"
    "  User Priority. Range: 0 - 7.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_ac port_vsi_info_set out_ac_ndx 0 vsi 0 out_port 0 max_level 0\n\r"
    "  is_trap_valid 0 pcp_profile 0 edit_profile 0 nof_tags 0 vlan_tags_index 0 dei\n\r"
    "  0 pcp 0 vid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(18)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_AC_PORT_VSI_INFO_SET_PORT_VSI_INFO_SET_AC_INFO_EDIT_INFO_VLAN_TAGS_OUTER_VID_ID, 
    "outer_vid", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  ac_info.edit_info.vlan_tags[ prm_vlan_tags_index].vid:\n\r"
    "  VLAN ID.Range: 0 - 4095.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_ac port_vsi_info_set out_ac_ndx 0 vsi 0 out_port 0 max_level 0\n\r"
    "  is_trap_valid 0 pcp_profile 0 edit_profile 0 nof_tags 0 vlan_tags_index 0 dei\n\r"
    "  0 pcp 0 vid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(18)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },
  { 
    SOC_PARAM_PPD_EG_AC_PORT_VSI_INFO_SET_PORT_VSI_INFO_SET_AC_INFO_EDIT_INFO_VLAN_TAGS_INNER_DEI_ID, 
    "inner_dei", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  ac_info.edit_info.vlan_tags[ prm_vlan_tags_index].dei:\n\r"
    "  Drop Eligibility Indicator.For C-tag, this is the CFI (Canonical Format\n\r"
    "  Indicator) and has to be 0.Range: 0 - 1.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_ac port_vsi_info_set out_ac_ndx 0 vsi 0 out_port 0 max_level 0\n\r"
    "  is_trap_valid 0 pcp_profile 0 edit_profile 0 nof_tags 0 vlan_tags_index 0 dei\n\r"
    "  0 pcp 0 vid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(18)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_AC_PORT_VSI_INFO_SET_PORT_VSI_INFO_SET_AC_INFO_EDIT_INFO_VLAN_TAGS_INNER_PCP_ID, 
    "inner_pcp", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  ac_info.edit_info.vlan_tags[ prm_vlan_tags_index].pcp:\n\r"
    "  Priority Code Point. Refers to the IEEE 802.1p priority. For C-Tag it is the\n\r"
    "  User Priority. Range: 0 - 7.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_ac port_vsi_info_set out_ac_ndx 0 vsi 0 out_port 0 max_level 0\n\r"
    "  is_trap_valid 0 pcp_profile 0 edit_profile 0 nof_tags 0 vlan_tags_index 0 dei\n\r"
    "  0 pcp 0 vid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(18)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_AC_PORT_VSI_INFO_SET_PORT_VSI_INFO_SET_AC_INFO_EDIT_INFO_VLAN_TAGS_INNER_VID_ID, 
    "inner_vid", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  ac_info.edit_info.vlan_tags[ prm_vlan_tags_index].vid:\n\r"
    "  VLAN ID.Range: 0 - 4095.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_ac port_vsi_info_set out_ac_ndx 0 vsi 0 out_port 0 max_level 0\n\r"
    "  is_trap_valid 0 pcp_profile 0 edit_profile 0 nof_tags 0 vlan_tags_index 0 dei\n\r"
    "  0 pcp 0 vid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(18)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_AC_PORT_VSI_INFO_REMOVE_PORT_VSI_INFO_REMOVE_ID, 
    "port_vsi_info_remove", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Removes editing and trap information of packets NOT associated with AC and to\n\r"
    "  be transmitted from VBP port (not CEP port).\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_ac port_vsi_info_remove vsi 0 out_port 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(2)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_AC_PORT_VSI_INFO_REMOVE_PORT_VSI_INFO_REMOVE_VBP_KEY_VSI_ID, 
    "vsi", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  vbp_key.vsi:\n\r"
    "  The VSI the packet is associated with. For Tunnel encapsulated packets, this\n\r"
    "  is the VSI from the Egress Encapsulation.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_ac port_vsi_info_remove vsi 0 out_port 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(2)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_AC_PORT_VSI_INFO_REMOVE_PORT_VSI_INFO_REMOVE_VBP_KEY_OUT_PORT_ID, 
    "out_vlan_domain", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  vbp_key.out_port:\n\r"
    "  Local Out port ID. Has to be of type VBP/CNP/PNP.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_ac port_vsi_info_remove vsi 0 out_port 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(2)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_AC_PORT_VSI_INFO_GET_PORT_VSI_INFO_GET_ID, 
    "port_vsi_info_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Sets the editing and trap information for packets NOT associated with AC and\n\r"
    "  to be transmitted from VBP port (not CEP port).\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_ac port_vsi_info_get out_ac_ndx 0 vsi 0 out_port 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(19)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_AC_PORT_VSI_INFO_GET_PORT_VSI_INFO_GET_VBP_KEY_VSI_ID, 
    "vsi", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  vbp_key.vsi:\n\r"
    "  The VSI the packet is associated with. For Tunnel encapsulated packets, this\n\r"
    "  is the VSI from the Egress Encapsulation.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_ac port_vsi_info_get out_ac_ndx 0 vsi 0 out_port 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(19)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_AC_PORT_VSI_INFO_GET_PORT_VSI_INFO_GET_VBP_KEY_OUT_PORT_ID, 
    "out_vlan_domain", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  vbp_key.out_port:\n\r"
    "  Local Out port ID. Has to be of type VBP/CNP/PNP.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_ac port_vsi_info_get out_ac_ndx 0 vsi 0 out_port 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(19)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_AC_PORT_CVID_INFO_SET_PORT_CVID_INFO_SET_ID, 
    "port_cvid_info_add", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Sets the editing and trap information for packets NOT associated with AC and\n\r"
    "  to be transmitted from CEP port.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_ac port_cvid_info_set out_ac_ndx 0 pep_edit_profile 0 cvid 0\n\r"
    "  out_port 0 max_level 0 is_trap_valid 0 pcp_profile 0 edit_profile 0 nof_tags\n\r"
    "  0 vlan_tags_index 0 dei 0 pcp 0 vid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(20)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_AC_PORT_CVID_INFO_SET_PORT_CVID_INFO_SET_CEP_KEY_CVID_ID, 
    "cvid", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  cep_key.cvid:\n\r"
    "  The resolved C-VLAN ID. This is the C-VLAN ID on the packet (on VLAN tag\n\r"
    "  Header) or a C-VID set according to the PEP default (PEP-PVID).\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_ac port_cvid_info_set out_ac_ndx 0 pep_edit_profile 0 cvid 0\n\r"
    "  out_port 0 max_level 0 is_trap_valid 0 pcp_profile 0 edit_profile 0 nof_tags\n\r"
    "  0 vlan_tags_index 0 dei 0 pcp 0 vid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(20)}, 
    5, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_AC_PORT_CVID_INFO_SET_PORT_CVID_INFO_SET_CEP_KEY_OUT_PORT_ID, 
    "out_vlan_domain", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  cep_key.out_port:\n\r"
    "  Local Out port ID. Has to be of type CEP.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_ac port_cvid_info_set out_ac_ndx 0 pep_edit_profile 0 cvid 0\n\r"
    "  out_port 0 max_level 0 is_trap_valid 0 pcp_profile 0 edit_profile 0 nof_tags\n\r"
    "  0 vlan_tags_index 0 dei 0 pcp 0 vid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(20)}, 
    6, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_AC_PORT_CVID_INFO_ADD_PORT_CVID_INFO_ADD_OUT_AC_NDX_ID, 
    "out_ac", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  cep_key.out_ac:\n\r"
    "  Local Out port ID. Has to be of type CEP.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_ac port_cvid_info_set out_ac_ndx 0 pep_edit_profile 0 cvid 0\n\r"
    "  out_port 0 max_level 0 is_trap_valid 0 pcp_profile 0 edit_profile 0 nof_tags\n\r"
    "  0 vlan_tags_index 0 dei 0 pcp 0 vid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(20)}, 
    7, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_AC_PORT_CVID_INFO_SET_PORT_CVID_INFO_SET_AC_INFO_EDIT_INFO_PCP_PROFILE_ID, 
    "pcp_profile", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  ac_info.edit_info.pcp_profile:\n\r"
    "  Profile to build the packet PCP-DEI/UP.See COS Mapping APIs in Egress Edit\n\r"
    "  Module:soc_ppd_eg_vlan_edit_pcp_map_stag_setppd_eg_vlan_edit_pcp_map_ctag_setppd_\n\r"
    "  g_vlan_edit_pcp_map_untagged_setThese APIs map COS parameters\n\r"
    "  (UP/PCP/DEI/TC/DP) (and pcp_profile) to PCP and DEI. These profiles let the\n\r"
    "  user configure up to 16 such mappings. Range: 0 - 15.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_ac port_cvid_info_set out_ac_ndx 0 pep_edit_profile 0 cvid 0\n\r"
    "  out_port 0 max_level 0 is_trap_valid 0 pcp_profile 0 edit_profile 0 nof_tags\n\r"
    "  0 vlan_tags_index 0 dei 0 pcp 0 vid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(20)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_AC_PORT_CVID_INFO_SET_PORT_CVID_INFO_SET_AC_INFO_EDIT_INFO_EDIT_PROFILE_ID, 
    "edit_profile", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  ac_info.edit_info.edit_profile:\n\r"
    "  Profile according to which to edit the VLAN tags. See\n\r"
    "  soc_ppd_eg_vlan_edit_command_info_set(). According to tag-format which represents\n\r"
    "  the Tag structure of the packet and this edit-profile, the user may define an\n\r"
    "  Edit command to build the header of the outgoing packets. Range: 0 - 15.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_ac port_cvid_info_set out_ac_ndx 0 pep_edit_profile 0 cvid 0\n\r"
    "  out_port 0 max_level 0 is_trap_valid 0 pcp_profile 0 edit_profile 0 nof_tags\n\r"
    "  0 vlan_tags_index 0 dei 0 pcp 0 vid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(20)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_AC_PORT_CVID_INFO_SET_PORT_CVID_INFO_SET_AC_INFO_EDIT_INFO_NOF_TAGS_ID, 
    "nof_tags", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  ac_info.edit_info.nof_tags:\n\r"
    "  Number of Vlan tags. Petra-B and T20E support 2 tags: vlan_tags[0] is used\n\r"
    "  for building the outer tag and vlan_tags[1] for building the inner tag.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_ac port_cvid_info_set out_ac_ndx 0 pep_edit_profile 0 cvid 0\n\r"
    "  out_port 0 max_level 0 is_trap_valid 0 pcp_profile 0 edit_profile 0 nof_tags\n\r"
    "  0 vlan_tags_index 0 dei 0 pcp 0 vid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(20)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },
  { 
    SOC_PARAM_PPD_EG_AC_PORT_CVID_INFO_SET_PORT_CVID_INFO_SET_AC_INFO_EDIT_INFO_OAM_LIF_SET_ID, 
    "oam_lif_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  ac_info.edit_info.oam_lif_set:\n\r"
    "  Valid only for ARAD.\n\r"
    "  If set, then OAM LIF value is equal to the OutLIF index. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_ac port_cvid_info_set out_ac_ndx 0 pep_edit_profile 0 cvid 0\n\r"
    "  out_port 0 max_level 0 is_trap_valid 0 pcp_profile 0 edit_profile 0 nof_tags\n\r"
    "  0 vlan_tags_index 0 dei 0 pcp 0 vid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(20)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_AC_PORT_CVID_INFO_SET_PORT_CVID_INFO_SET_AC_INFO_EDIT_INFO_VLAN_TAGS_OUTER_DEI_ID, 
    "outer_dei", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  ac_info.edit_info.vlan_tags[ prm_vlan_tags_index].dei:\n\r"
    "  Drop Eligibility Indicator.For C-tag, this is the CFI (Canonical Format\n\r"
    "  Indicator) and has to be 0.Range: 0 - 1.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_ac port_cvid_info_set out_ac_ndx 0 pep_edit_profile 0 cvid 0\n\r"
    "  out_port 0 max_level 0 is_trap_valid 0 pcp_profile 0 edit_profile 0 nof_tags\n\r"
    "  0 vlan_tags_index 0 dei 0 pcp 0 vid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(20)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_AC_PORT_CVID_INFO_SET_PORT_CVID_INFO_SET_AC_INFO_EDIT_INFO_VLAN_TAGS_OUTER_PCP_ID, 
    "outer_pcp", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  ac_info.edit_info.vlan_tags[ prm_vlan_tags_index].pcp:\n\r"
    "  Priority Code Point. Refers to the IEEE 802.1p priority. For C-Tag it is the\n\r"
    "  User Priority. Range: 0 - 7.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_ac port_cvid_info_set out_ac_ndx 0 pep_edit_profile 0 cvid 0\n\r"
    "  out_port 0 max_level 0 is_trap_valid 0 pcp_profile 0 edit_profile 0 nof_tags\n\r"
    "  0 vlan_tags_index 0 dei 0 pcp 0 vid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(20)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_AC_PORT_CVID_INFO_SET_PORT_CVID_INFO_SET_AC_INFO_EDIT_INFO_VLAN_TAGS_OUTER_VID_ID, 
    "outer_vid", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  ac_info.edit_info.vlan_tags[ prm_vlan_tags_index].vid:\n\r"
    "  VLAN ID.Range: 0 - 4095.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_ac port_cvid_info_set out_ac_ndx 0 pep_edit_profile 0 cvid 0\n\r"
    "  out_port 0 max_level 0 is_trap_valid 0 pcp_profile 0 edit_profile 0 nof_tags\n\r"
    "  0 vlan_tags_index 0 dei 0 pcp 0 vid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(20)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },
  { 
    SOC_PARAM_PPD_EG_AC_PORT_CVID_INFO_SET_PORT_CVID_INFO_SET_AC_INFO_EDIT_INFO_VLAN_TAGS_INNER_DEI_ID, 
    "inner_dei", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  ac_info.edit_info.vlan_tags[ prm_vlan_tags_index].dei:\n\r"
    "  Drop Eligibility Indicator.For C-tag, this is the CFI (Canonical Format\n\r"
    "  Indicator) and has to be 0.Range: 0 - 1.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_ac port_cvid_info_set out_ac_ndx 0 pep_edit_profile 0 cvid 0\n\r"
    "  out_port 0 max_level 0 is_trap_valid 0 pcp_profile 0 edit_profile 0 nof_tags\n\r"
    "  0 vlan_tags_index 0 dei 0 pcp 0 vid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(20)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_AC_PORT_CVID_INFO_SET_PORT_CVID_INFO_SET_AC_INFO_EDIT_INFO_VLAN_TAGS_INNER_PCP_ID, 
    "inner_pcp", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  ac_info.edit_info.vlan_tags[ prm_vlan_tags_index].pcp:\n\r"
    "  Priority Code Point. Refers to the IEEE 802.1p priority. For C-Tag it is the\n\r"
    "  User Priority. Range: 0 - 7.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_ac port_cvid_info_set out_ac_ndx 0 pep_edit_profile 0 cvid 0\n\r"
    "  out_port 0 max_level 0 is_trap_valid 0 pcp_profile 0 edit_profile 0 nof_tags\n\r"
    "  0 vlan_tags_index 0 dei 0 pcp 0 vid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(20)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_AC_PORT_CVID_INFO_SET_PORT_CVID_INFO_SET_AC_INFO_EDIT_INFO_VLAN_TAGS_INNER_VID_ID, 
    "inner_vid", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  ac_info.edit_info.vlan_tags[ prm_vlan_tags_index].vid:\n\r"
    "  VLAN ID.Range: 0 - 4095.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_ac port_cvid_info_set out_ac_ndx 0 pep_edit_profile 0 cvid 0\n\r"
    "  out_port 0 max_level 0 is_trap_valid 0 pcp_profile 0 edit_profile 0 nof_tags\n\r"
    "  0 vlan_tags_index 0 dei 0 pcp 0 vid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(20)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_AC_PORT_CVID_INFO_REMOVE_PORT_CVID_INFO_REMOVE_ID, 
    "port_cvid_info_remove", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Removes editing and trap information of packets NOT associated with AC and to\n\r"
    "  be transmitted from CEP port (not VBP port).\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_ac port_cvid_info_remove pep_edit_profile 0 cvid 0 out_port 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(11)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_AC_PORT_CVID_INFO_REMOVE_PORT_CVID_INFO_REMOVE_CEP_KEY_PEP_EDIT_PROFILE_ID, 
    "pep_edit_profile", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  cep_key.pep_edit_profile:\n\r"
    "  Edit profile to enable different editing according to PEP. The edit profile\n\r"
    "  is set according to soc_ppd_eg_edit_pep_info_set(). Used to give different\n\r"
    "  treatment for packets in the same C-Component, depending to the PEP they pass\n\r"
    "  from. In Petra-B has to be 0.Range: 0 - 7.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_ac port_cvid_info_remove pep_edit_profile 0 cvid 0 out_port 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(11)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_AC_PORT_CVID_INFO_REMOVE_PORT_CVID_INFO_REMOVE_CEP_KEY_CVID_ID, 
    "cvid", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  cep_key.cvid:\n\r"
    "  The resolved C-VLAN ID. This is the C-VLAN ID on the packet (on VLAN tag\n\r"
    "  Header) or a C-VID set according to the PEP default (PEP-PVID).\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_ac port_cvid_info_remove pep_edit_profile 0 cvid 0 out_port 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(11)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_AC_PORT_CVID_INFO_REMOVE_PORT_CVID_INFO_REMOVE_CEP_KEY_OUT_PORT_ID, 
    "out_vlan_domain", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  cep_key.out_port:\n\r"
    "  Local Out port ID. Has to be of type CEP.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_ac port_cvid_info_remove pep_edit_profile 0 cvid 0 out_port 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(11)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_AC_PORT_CVID_INFO_GET_PORT_CVID_INFO_GET_ID, 
    "port_cvid_info_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Sets the editing and trap information for packets NOT associated with AC and\n\r"
    "  to be transmitted from CEP port.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_ac port_cvid_info_get out_ac_ndx 0 pep_edit_profile 0 cvid 0\n\r"
    "  out_port 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(21)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_AC_PORT_CVID_INFO_GET_PORT_CVID_INFO_GET_CEP_KEY_PEP_EDIT_PROFILE_ID, 
    "pep_edit_profile", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  cep_key.pep_edit_profile:\n\r"
    "  Edit profile to enable different editing according to PEP. The edit profile\n\r"
    "  is set according to soc_ppd_eg_edit_pep_info_set(). Used to give different\n\r"
    "  treatment for packets in the same C-Component, depending to the PEP they pass\n\r"
    "  from. In Petra-B has to be 0.Range: 0 - 7.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_ac port_cvid_info_get pep_edit_profile 0 cvid 0 out_port 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(21)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_AC_PORT_CVID_INFO_GET_PORT_CVID_INFO_GET_CEP_KEY_CVID_ID, 
    "cvid", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  cep_key.cvid:\n\r"
    "  The resolved C-VLAN ID. This is the C-VLAN ID on the packet (on VLAN tag\n\r"
    "  Header) or a C-VID set according to the PEP default (PEP-PVID).\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_ac port_cvid_info_get pep_edit_profile 0 cvid 0 out_port 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(21)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_AC_PORT_CVID_INFO_GET_PORT_CVID_INFO_GET_CEP_KEY_OUT_PORT_ID, 
    "out_vlan_domain", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  cep_key.out_port:\n\r"
    "  Local Out port ID. Has to be of type CEP.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_ac port_cvid_info_get pep_edit_profile 0 cvid 0 out_port 0\n\r"
    "  out_port 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(21)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_API_EG_AC_ID, 
    "eg_ac", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "",
    "", 
    "",
    {0, 0, 0, 0, 0, 0, BIT(5)|BIT(6), 0, 0, BIT(2)|BIT(11)|BIT(16)|BIT(17)|BIT(18)|BIT(19)|BIT(20)|BIT(21)}, 
    1, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
#endif /* } eg_ac*/
#ifdef UI_EG_VLAN_EDIT/* { eg_vlan_edit*/
  { 
    SOC_PARAM_PPD_EG_VLAN_EDIT_PEP_INFO_SET_PEP_INFO_SET_ID, 
    "pep_info_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Sets the editing information for PEP port.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_vlan_edit pep_info_set vsi 0 port 0 pep_edit_profile 0 up 0 pvid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(22)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_VLAN_EDIT_PEP_INFO_SET_PEP_INFO_SET_PEP_KEY_VSI_ID, 
    "vsi", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pep_key.vsi:\n\r"
    "  The VSI the packet associated with. For Link Layer encapsulated packets, this\n\r"
    "  is the VSI from the Egress Encapsulation.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_vlan_edit pep_info_set vsi 0 port 0 pep_edit_profile 0 up 0 pvid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(22)}, 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_VLAN_EDIT_PEP_INFO_SET_PEP_INFO_SET_PEP_KEY_PORT_ID, 
    "port", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pep_key.port:\n\r"
    "  Local port ID. Has to be of type CEP.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_vlan_edit pep_info_set vsi 0 port 0 pep_edit_profile 0 up 0 pvid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(22)}, 
    4, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_VLAN_EDIT_PEP_INFO_SET_PEP_INFO_SET_PEP_INFO_PEP_EDIT_PROFILE_ID, 
    "pep_edit_profile", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pep_info.pep_edit_profile:\n\r"
    "  Profile used with C-TAG for egress C-TAG editing. Used to give different\n\r"
    "  treatment for packets in the same C-Component, depending to the PEP they pass\n\r"
    "  from. Relevant only for: T20E.For Petra-B has to be zero.Range: 0 - 3.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_vlan_edit pep_info_set vsi 0 port 0 pep_edit_profile 0 up 0 pvid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(22)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_VLAN_EDIT_PEP_INFO_SET_PEP_INFO_SET_PEP_INFO_UP_ID, 
    "up", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pep_info.up:\n\r"
    "  User priority to set in the packet header. By\n\r"
    "  soc_ppd_eg_vlan_edit_command_info_set(), the user can set the UP/PCP of the\n\r"
    "  packet to this value, or to map it according to COS attributes (see\n\r"
    "  pcp_profile). Range: 0 - 7.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_vlan_edit pep_info_set vsi 0 port 0 pep_edit_profile 0 up 0 pvid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(22)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_VLAN_EDIT_PEP_INFO_SET_PEP_INFO_SET_PEP_INFO_PVID_ID, 
    "pvid", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pep_info.pvid:\n\r"
    "  PEP-PVID. C-VLAN ID to assign for untagged packet. Toward the\n\r"
    "  C-Component.Range: 0 - 4095.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_vlan_edit pep_info_set vsi 0 port 0 pep_edit_profile 0 up 0 pvid 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(22)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_VLAN_EDIT_PEP_INFO_GET_PEP_INFO_GET_ID, 
    "pep_info_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Sets the editing information for PEP port.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_vlan_edit pep_info_get vsi 0 port 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(23)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_VLAN_EDIT_PEP_INFO_GET_PEP_INFO_GET_PEP_KEY_VSI_ID, 
    "vsi", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pep_key.vsi:\n\r"
    "  The VSI the packet associated with. For Link Layer encapsulated packets, this\n\r"
    "  is the VSI from the Egress Encapsulation.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_vlan_edit pep_info_get vsi 0 port 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(23)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_VLAN_EDIT_PEP_INFO_GET_PEP_INFO_GET_PEP_KEY_PORT_ID, 
    "port", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pep_key.port:\n\r"
    "  Local port ID. Has to be of type CEP.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_vlan_edit pep_info_get vsi 0 port 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(23)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_VLAN_EDIT_COMMAND_INFO_SET_COMMAND_INFO_SET_ID, 
    "command_info_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set the Edit command to perform over packets according to VLAN tags format\n\r"
    "  and Edit profile.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_vlan_edit command_info_set edit_profile 0 tag_format 0 cep_editing\n\r"
    "  0 pcp_dei_source 0 vid_source 0 tpid_index 0 pcp_dei_source 0 vid_source 0\n\r"
    "  tpid_index 0 tags_to_remove 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(24)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_VLAN_EDIT_COMMAND_INFO_SET_COMMAND_INFO_SET_COMMAND_KEY_EDIT_PROFILE_ID, 
    "edit_profile", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  command_key.edit_profile:\n\r"
    "  Profile according to which to edit the VLAN tags. This profile is set\n\r"
    "  according to the port setting.Range: 0 - 15.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_vlan_edit command_info_set edit_profile 0 tag_format 0 cep_editing\n\r"
    "  0 pcp_dei_source 0 vid_source 0 tpid_index 0 pcp_dei_source 0 vid_source 0\n\r"
    "  tpid_index 0 tags_to_remove 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(24)}, 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_VLAN_EDIT_COMMAND_INFO_SET_COMMAND_INFO_SET_COMMAND_KEY_TAG_FORMAT_ID, 
    "tag_format", 
    (PARAM_VAL_RULES *)&SOC_PPD_SAND_PP_ETHERNET_FRAME_VLAN_FORMAT_rule[0], 
    (sizeof(SOC_PPD_SAND_PP_ETHERNET_FRAME_VLAN_FORMAT_rule) / sizeof(SOC_PPD_SAND_PP_ETHERNET_FRAME_VLAN_FORMAT_rule[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  command_key.tag_format:\n\r"
    "  Packet frame type (VLAN tags stack).If ingress editing was performed over the\n\r"
    "  packet, then this is the internal tag format (packet format after ingress\n\r"
    "  editing). Otherwise, this is the packet incoming tag Format.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_vlan_edit command_info_set edit_profile 0 tag_format 0 cep_editing\n\r"
    "  0 pcp_dei_source 0 vid_source 0 tpid_index 0 pcp_dei_source 0 vid_source 0\n\r"
    "  tpid_index 0 tags_to_remove 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(24)}, 
    4, 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_VLAN_EDIT_COMMAND_INFO_SET_COMMAND_INFO_SET_COMMAND_INFO_CEP_EDITING_ID, 
    "cep_editing", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  command_info.cep_editing:\n\r"
    "  T20E only. Whether this command is used to edit packets outgoing from CEP\n\r"
    "  port. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_vlan_edit command_info_set edit_profile 0 tag_format 0 cep_editing\n\r"
    "  0 pcp_dei_source 0 vid_source 0 tpid_index 0 pcp_dei_source 0 vid_source 0\n\r"
    "  tpid_index 0 tags_to_remove 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(24)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_VLAN_EDIT_COMMAND_INFO_SET_COMMAND_INFO_SET_COMMAND_INFO_OUTER_TAG_PCP_DEI_SOURCE_ID, 
    "outer_pcp_dei_source", 
    (PARAM_VAL_RULES *)&SOC_PPC_EG_VLAN_EDIT_TAG_PCP_DEI_SRC_rule[0], 
    (sizeof(SOC_PPC_EG_VLAN_EDIT_TAG_PCP_DEI_SRC_rule) / sizeof(SOC_PPC_EG_VLAN_EDIT_TAG_PCP_DEI_SRC_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  command_info.outer_tag.pcp_dei_source:\n\r"
    "  The source to get the PCP-DEI/UP value from. If vid_source is empty, then\n\r"
    "  this value is not relevant.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_vlan_edit command_info_set edit_profile 0 tag_format 0 cep_editing\n\r"
    "  0 pcp_dei_source 0 vid_source 0 tpid_index 0 pcp_dei_source 0 vid_source 0\n\r"
    "  tpid_index 0 tags_to_remove 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(24)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_VLAN_EDIT_COMMAND_INFO_SET_COMMAND_INFO_SET_COMMAND_INFO_OUTER_TAG_VID_SOURCE_ID, 
    "outer_vid_source", 
    (PARAM_VAL_RULES *)&SOC_PPC_EG_VLAN_EDIT_TAG_VID_SRC_rule[0], 
    (sizeof(SOC_PPC_EG_VLAN_EDIT_TAG_VID_SRC_rule) / sizeof(SOC_PPC_EG_VLAN_EDIT_TAG_VID_SRC_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  command_info.outer_tag.vid_source:\n\r"
    "  The source to get the VID value from. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_vlan_edit command_info_set edit_profile 0 tag_format 0 cep_editing\n\r"
    "  0 pcp_dei_source 0 vid_source 0 tpid_index 0 pcp_dei_source 0 vid_source 0\n\r"
    "  tpid_index 0 tags_to_remove 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(24)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_VLAN_EDIT_COMMAND_INFO_SET_COMMAND_INFO_SET_COMMAND_INFO_OUTER_TAG_TPID_INDEX_ID, 
    "outer_tpid_index", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  command_info.outer_tag.tpid_index:\n\r"
    "  Select one of the four global TPIDs configured by\n\r"
    "  soc_ppd_llp_parse_tpid_value_set() as the TPID of the tag of the packet (if\n\r"
    "  exists)\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_vlan_edit command_info_set edit_profile 0 tag_format 0 cep_editing\n\r"
    "  0 pcp_dei_source 0 vid_source 0 tpid_index 0 pcp_dei_source 0 vid_source 0\n\r"
    "  tpid_index 0 tags_to_remove 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(24)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_VLAN_EDIT_COMMAND_INFO_SET_COMMAND_INFO_SET_COMMAND_INFO_INNER_TAG_PCP_DEI_SOURCE_ID, 
    "inner_pcp_dei_source", 
    (PARAM_VAL_RULES *)&SOC_PPC_EG_VLAN_EDIT_TAG_PCP_DEI_SRC_rule[0], 
    (sizeof(SOC_PPC_EG_VLAN_EDIT_TAG_PCP_DEI_SRC_rule) / sizeof(SOC_PPC_EG_VLAN_EDIT_TAG_PCP_DEI_SRC_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  command_info.inner_tag.pcp_dei_source:\n\r"
    "  The source to get the PCP-DEI/UP value from. If vid_source is empty, then\n\r"
    "  this value is not relevant.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_vlan_edit command_info_set edit_profile 0 tag_format 0 cep_editing\n\r"
    "  0 pcp_dei_source 0 vid_source 0 tpid_index 0 pcp_dei_source 0 vid_source 0\n\r"
    "  tpid_index 0 tags_to_remove 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(24)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_VLAN_EDIT_COMMAND_INFO_SET_COMMAND_INFO_SET_COMMAND_INFO_INNER_TAG_VID_SOURCE_ID, 
    "inner_vid_source", 
    (PARAM_VAL_RULES *)&SOC_PPC_EG_VLAN_EDIT_TAG_VID_SRC_rule[0], 
    (sizeof(SOC_PPC_EG_VLAN_EDIT_TAG_VID_SRC_rule) / sizeof(SOC_PPC_EG_VLAN_EDIT_TAG_VID_SRC_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  command_info.inner_tag.vid_source:\n\r"
    "  The source to get the VID value from. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_vlan_edit command_info_set edit_profile 0 tag_format 0 cep_editing\n\r"
    "  0 pcp_dei_source 0 vid_source 0 tpid_index 0 pcp_dei_source 0 vid_source 0\n\r"
    "  tpid_index 0 tags_to_remove 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(24)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_VLAN_EDIT_COMMAND_INFO_SET_COMMAND_INFO_SET_COMMAND_INFO_INNER_TAG_TPID_INDEX_ID, 
    "inner_tpid_index", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  command_info.inner_tag.tpid_index:\n\r"
    "  Select one of the four global TPIDs configured by\n\r"
    "  soc_ppd_llp_parse_tpid_value_set() as the TPID of the tag of the packet (if\n\r"
    "  exists)\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_vlan_edit command_info_set edit_profile 0 tag_format 0 cep_editing\n\r"
    "  0 pcp_dei_source 0 vid_source 0 tpid_index 0 pcp_dei_source 0 vid_source 0\n\r"
    "  tpid_index 0 tags_to_remove 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(24)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_VLAN_EDIT_COMMAND_INFO_SET_COMMAND_INFO_SET_COMMAND_INFO_TAGS_TO_REMOVE_ID, 
    "tags_to_remove", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  command_info.tags_to_remove:\n\r"
    "  Number of VLAN tags to remove from the incoming packet (after the ingress\n\r"
    "  editing, if present)0 - none.1 - to remove outer tag.2 - to remove outer and\n\r"
    "  inner tags.In the editing process, first these tags are removed and then the\n\r"
    "  inner tag and outer tag are built according to the fields below. Range: 0 - 2.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_vlan_edit command_info_set edit_profile 0 tag_format 0 cep_editing\n\r"
    "  0 pcp_dei_source 0 vid_source 0 tpid_index 0 pcp_dei_source 0 vid_source 0\n\r"
    "  tpid_index 0 tags_to_remove 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(24)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_VLAN_EDIT_COMMAND_INFO_GET_COMMAND_INFO_GET_ID, 
    "command_info_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set the Edit command to perform over packets according to VLAN tags format\n\r"
    "  and Edit profile.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_vlan_edit command_info_get edit_profile 0 tag_format 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(25)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_VLAN_EDIT_COMMAND_INFO_GET_COMMAND_INFO_GET_COMMAND_KEY_EDIT_PROFILE_ID, 
    "edit_profile", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  command_key.edit_profile:\n\r"
    "  Profile according to which to edit the VLAN tags. This profile is set\n\r"
    "  according to the port setting.Range: 0 - 15.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_vlan_edit command_info_get edit_profile 0 tag_format 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(25)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_VLAN_EDIT_COMMAND_INFO_GET_COMMAND_INFO_GET_COMMAND_KEY_TAG_FORMAT_ID, 
    "tag_format", 
    (PARAM_VAL_RULES *)&SOC_PPD_SAND_PP_ETHERNET_FRAME_VLAN_FORMAT_rule[0], 
    (sizeof(SOC_PPD_SAND_PP_ETHERNET_FRAME_VLAN_FORMAT_rule) / sizeof(SOC_PPD_SAND_PP_ETHERNET_FRAME_VLAN_FORMAT_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  command_key.tag_format:\n\r"
    "  Packet frame type (VLAN tags stack).If ingress editing was performed over the\n\r"
    "  packet, then this is the internal tag format (packet format after ingress\n\r"
    "  editing). Otherwise, this is the packet incoming tag Format.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_vlan_edit command_info_get edit_profile 0 tag_format 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(25)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_VLAN_EDIT_PORT_VLAN_TRANSMIT_OUTER_TAG_SET_PORT_VLAN_TRANSMIT_OUTER_TAG_SET_ID, 
    "port_vlan_transmit_outer_tag_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  For port x vlan set whether to transmit packets from a specific port tagged\n\r"
    "  or not, according to the outer-tag VID.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_vlan_edit port_vlan_transmit_outer_tag_set local_port_ndx 0\n\r"
    "  vid_ndx 0 transmit_outer_tag 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(26)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_VLAN_EDIT_PORT_VLAN_TRANSMIT_OUTER_TAG_SET_PORT_VLAN_TRANSMIT_OUTER_TAG_SET_LOCAL_PORT_NDX_ID, 
    "local_port_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  local_port_ndx:\n\r"
    "  Local port ID.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_vlan_edit port_vlan_transmit_outer_tag_set local_port_ndx 0\n\r"
    "  vid_ndx 0 transmit_outer_tag 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(26)}, 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_VLAN_EDIT_PORT_VLAN_TRANSMIT_OUTER_TAG_SET_PORT_VLAN_TRANSMIT_OUTER_TAG_SET_VID_NDX_ID, 
    "vid_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  vid_ndx:\n\r"
    "  The outer VID.Range: 0 - 4095.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_vlan_edit port_vlan_transmit_outer_tag_set local_port_ndx 0\n\r"
    "  vid_ndx 0 transmit_outer_tag 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(26)}, 
    4, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_VLAN_EDIT_PORT_VLAN_TRANSMIT_OUTER_TAG_SET_PORT_VLAN_TRANSMIT_OUTER_TAG_SET_TRANSMIT_OUTER_TAG_ID, 
    "transmit_outer_tag", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  transmit_outer_tag:\n\r"
    "  If TRUE, then transmit a packet with outer-tag.If FALSE, remove the outer tag\n\r"
    "  from the packet header.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_vlan_edit port_vlan_transmit_outer_tag_set local_port_ndx 0\n\r"
    "  vid_ndx 0 transmit_outer_tag 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(26)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_VLAN_EDIT_PORT_VLAN_TRANSMIT_OUTER_TAG_GET_PORT_VLAN_TRANSMIT_OUTER_TAG_GET_ID, 
    "port_vlan_transmit_outer_tag_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  For port x vlan set whether to transmit packets from a specific port tagged\n\r"
    "  or not, according to the outer-tag VID.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_vlan_edit port_vlan_transmit_outer_tag_get local_port_ndx 0\n\r"
    "  vid_ndx 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(27)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_VLAN_EDIT_PORT_VLAN_TRANSMIT_OUTER_TAG_GET_PORT_VLAN_TRANSMIT_OUTER_TAG_GET_LOCAL_PORT_NDX_ID, 
    "local_port_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  local_port_ndx:\n\r"
    "  Local port ID.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_vlan_edit port_vlan_transmit_outer_tag_get local_port_ndx 0\n\r"
    "  vid_ndx 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(27)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_VLAN_EDIT_PORT_VLAN_TRANSMIT_OUTER_TAG_GET_PORT_VLAN_TRANSMIT_OUTER_TAG_GET_VID_NDX_ID, 
    "vid_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  vid_ndx:\n\r"
    "  The outer VID.Range: 0 - 4095.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_vlan_edit port_vlan_transmit_outer_tag_get local_port_ndx 0\n\r"
    "  vid_ndx 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(27)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_VLAN_EDIT_PCP_PROFILE_INFO_SET_PCP_PROFILE_SET_ID, 
    "pcp_profile_info_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  For PCP profile set the key used for mapping. When the Edit Command is set to\n\r"
    "  determine the PCP-DEI value according to mapping, then the key used for\n\r"
    "  mapping may be PCP-DEI, UP or DP and TC.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_vlan_edit pcp_profile_set pcp_profile_ndx 0 map_key 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(28)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_VLAN_EDIT_PCP_PROFILE_INFO_SET_PCP_PROFILE_SET_PCP_PROFILE_NDX_ID, 
    "pcp_profile_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pcp_profile_ndx:\n\r"
    "  The PCP profile is set according to Out-AC setting. Range: 0 - 7.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_vlan_edit pcp_profile_set pcp_profile_ndx 0 map_key 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(28)}, 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_VLAN_EDIT_PCP_PROFILE_INFO_SET_PCP_PROFILE_SET_MAP_KEY_ID, 
    "map_key", 
    (PARAM_VAL_RULES *)&SOC_PPC_EG_VLAN_EDIT_TAG_PCP_DEI_MAP_KEY_rule[0], 
    (sizeof(SOC_PPC_EG_VLAN_EDIT_TAG_PCP_DEI_MAP_KEY_rule) / sizeof(SOC_PPC_EG_VLAN_EDIT_TAG_PCP_DEI_MAP_KEY_rule[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  map_key:\n\r"
    "  How to build the key to be mapped for PCP-DEI.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_vlan_edit pcp_profile_set pcp_profile_ndx 0 map_key 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(28)}, 
    4, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_VLAN_EDIT_PCP_PROFILE_INFO_GET_PCP_PROFILE_GET_ID, 
    "pcp_profile_info_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  For PCP profile set the key used for mapping. When the Edit Command is set to\n\r"
    "  determine the PCP-DEI value according to mapping, then the key used for\n\r"
    "  mapping may be PCP-DEI, UP or DP and TC.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_vlan_edit pcp_profile_get pcp_profile_ndx 0 map_key 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(29)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_VLAN_EDIT_PCP_PROFILE_INFO_GET_PCP_PROFILE_GET_PCP_PROFILE_NDX_ID, 
    "pcp_profile_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pcp_profile_ndx:\n\r"
    "  The PCP profile is set according to Out-AC setting. Range: 0 - 7.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_vlan_edit pcp_profile_get pcp_profile_ndx 0 map_key 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(29)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_VLAN_EDIT_PCP_MAP_STAG_SET_PCP_MAP_STAG_SET_ID, 
    "pcp_map_stag_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set mapping from outer S-tag PCP and DEI to the PCP and DEI values to be set\n\r"
    "  in the transmitted packet's tag. This is the mapping to be used when the\n\r"
    "  incoming packet is S-tagged (outer Tag) and pcp profile set to use packet's\n\r"
    "  attribute. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_vlan_edit pcp_map_stag_set pcp_profile_ndx 0 tag_pcp_ndx 0\n\r"
    "  tag_dei_ndx 0 out_pcp 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(30)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_VLAN_EDIT_PCP_MAP_STAG_SET_PCP_MAP_STAG_SET_PCP_PROFILE_NDX_ID, 
    "pcp_profile_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pcp_profile_ndx:\n\r"
    "  The PCP profile is set according to OUT-AC setting. Range: 0 - 7.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_vlan_edit pcp_map_stag_set pcp_profile_ndx 0 tag_pcp_ndx 0\n\r"
    "  tag_dei_ndx 0 out_pcp 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(30)}, 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_VLAN_EDIT_PCP_MAP_STAG_SET_PCP_MAP_STAG_SET_TAG_PCP_NDX_ID, 
    "tag_pcp_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  tag_pcp_ndx:\n\r"
    "  The PCP appears in the outer S-Tag of the packet. Range: 0 - 7.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_vlan_edit pcp_map_stag_set pcp_profile_ndx 0 tag_pcp_ndx 0\n\r"
    "  tag_dei_ndx 0 out_pcp 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(30)}, 
    4, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_VLAN_EDIT_PCP_MAP_STAG_SET_PCP_MAP_STAG_SET_TAG_DEI_NDX_ID, 
    "tag_dei_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  tag_dei_ndx:\n\r"
    "  The DEI appears in the outer S-Tag of the packet. Range: 0 - 1.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_vlan_edit pcp_map_stag_set pcp_profile_ndx 0 tag_pcp_ndx 0\n\r"
    "  tag_dei_ndx 0 out_pcp 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(30)}, 
    5, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_VLAN_EDIT_PCP_MAP_STAG_SET_PCP_MAP_STAG_SET_OUT_PCP_ID, 
    "out_pcp", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  out_pcp:\n\r"
    "  The mapped PCP to set in the transmitted packet header. When the mapping used\n\r"
    "  to build C-tag, this value presents the UP to set in the packet tag.Range: 0\n\r"
    "  - 7.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_vlan_edit pcp_map_stag_set pcp_profile_ndx 0 tag_pcp_ndx 0\n\r"
    "  tag_dei_ndx 0 out_pcp 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(30)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_VLAN_EDIT_PCP_MAP_STAG_SET_PCP_MAP_STAG_SET_OUT_DEI_ID, 
    "out_dei", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  out_dei:\n\r"
    "  The mapped DEI to set in the transmitted packet header. This is relevant when\n\r"
    "  used for S-Tag. When the mapping used to build C tag, this value has to be\n\r"
    "  set to 0. Range: 0 - 1.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_vlan_edit pcp_map_stag_set pcp_profile_ndx 0 tag_pcp_ndx 0\n\r"
    "  tag_dei_ndx 0 out_pcp 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(30)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_VLAN_EDIT_PCP_MAP_STAG_GET_PCP_MAP_STAG_GET_ID, 
    "pcp_map_stag_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set mapping from outer S-tag PCP and DEI to the PCP and DEI values to be set\n\r"
    "  in the transmitted packet's tag. This is the mapping to be used when the\n\r"
    "  incoming packet is S-tagged (outer Tag) and pcp profile set to use packet's\n\r"
    "  attribute. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_vlan_edit pcp_map_stag_get pcp_profile_ndx 0 tag_pcp_ndx 0\n\r"
    "  tag_dei_ndx 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(31)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_VLAN_EDIT_PCP_MAP_STAG_GET_PCP_MAP_STAG_GET_PCP_PROFILE_NDX_ID, 
    "pcp_profile_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pcp_profile_ndx:\n\r"
    "  The PCP profile is set according to OUT-AC setting. Range: 0 - 7.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_vlan_edit pcp_map_stag_get pcp_profile_ndx 0 tag_pcp_ndx 0\n\r"
    "  tag_dei_ndx 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(31)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_VLAN_EDIT_PCP_MAP_STAG_GET_PCP_MAP_STAG_GET_TAG_PCP_NDX_ID, 
    "tag_pcp_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  tag_pcp_ndx:\n\r"
    "  The PCP appears in the outer S-Tag of the packet. Range: 0 - 7.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_vlan_edit pcp_map_stag_get pcp_profile_ndx 0 tag_pcp_ndx 0\n\r"
    "  tag_dei_ndx 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(31)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_VLAN_EDIT_PCP_MAP_STAG_GET_PCP_MAP_STAG_GET_TAG_DEI_NDX_ID, 
    "tag_dei_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  tag_dei_ndx:\n\r"
    "  The DEI appears in the outer S-Tag of the packet. Range: 0 - 1.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_vlan_edit pcp_map_stag_get pcp_profile_ndx 0 tag_pcp_ndx 0\n\r"
    "  tag_dei_ndx 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(31)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_VLAN_EDIT_PCP_MAP_CTAG_SET_PCP_MAP_CTAG_SET_ID, 
    "pcp_map_ctag_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set mapping from outer C-tag UP to the PCP and DEI values to be set in the\n\r"
    "  transmitted packet's tag. This is the mapping to be used when the incoming\n\r"
    "  packet is C-tagged (outer Tag) and pcp profile set to use packet's attribute. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_vlan_edit pcp_map_ctag_set pcp_profile_ndx 0 tag_up_ndx 0 out_pcp 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(0)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_VLAN_EDIT_PCP_MAP_CTAG_SET_PCP_MAP_CTAG_SET_PCP_PROFILE_NDX_ID, 
    "pcp_profile_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pcp_profile_ndx:\n\r"
    "  The PCP profile is set according to OUT-AC setting. Range: 0 - 7.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_vlan_edit pcp_map_ctag_set pcp_profile_ndx 0 tag_up_ndx 0 out_pcp 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(0)}, 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_VLAN_EDIT_PCP_MAP_CTAG_SET_PCP_MAP_CTAG_SET_TAG_UP_NDX_ID, 
    "tag_up_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  tag_up_ndx:\n\r"
    "  The UP appears in the outer C-Tag of the packet. Range: 0 - 7.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_vlan_edit pcp_map_ctag_set pcp_profile_ndx 0 tag_up_ndx 0 out_pcp 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(0)}, 
    4, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_VLAN_EDIT_PCP_MAP_CTAG_SET_PCP_MAP_CTAG_SET_OUT_PCP_ID, 
    "out_pcp", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  out_pcp:\n\r"
    "  The mapped PCP to set in the transmitted packet header. When the mapping used\n\r"
    "  to build C-tag, this value presents the UP to set in the packet tag.Range: 0\n\r"
    "  - 7.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_vlan_edit pcp_map_ctag_set pcp_profile_ndx 0 tag_up_ndx 0 out_pcp 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(0)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_VLAN_EDIT_PCP_MAP_CTAG_SET_PCP_MAP_CTAG_SET_OUT_DEI_ID, 
    "out_dei", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  out_dei:\n\r"
    "  The mapped DEI to set in the transmitted packet header. This is relevant when\n\r"
    "  used for S-Tag. When the mapping used to build C tag, this value has to be\n\r"
    "  set to 0. Range: 0 - 1.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_vlan_edit pcp_map_ctag_set pcp_profile_ndx 0 tag_up_ndx 0 out_pcp 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(0)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_VLAN_EDIT_PCP_MAP_CTAG_GET_PCP_MAP_CTAG_GET_ID, 
    "pcp_map_ctag_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set mapping from outer C-tag UP to the PCP and DEI values to be set in the\n\r"
    "  transmitted packet's tag. This is the mapping to be used when the incoming\n\r"
    "  packet is C-tagged (outer Tag) and pcp profile set to use packet's attribute. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_vlan_edit pcp_map_ctag_get pcp_profile_ndx 0 tag_up_ndx 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(1)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_VLAN_EDIT_PCP_MAP_CTAG_GET_PCP_MAP_CTAG_GET_PCP_PROFILE_NDX_ID, 
    "pcp_profile_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pcp_profile_ndx:\n\r"
    "  The PCP profile is set according to OUT-AC setting. Range: 0 - 7.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_vlan_edit pcp_map_ctag_get pcp_profile_ndx 0 tag_up_ndx 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(1)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_VLAN_EDIT_PCP_MAP_CTAG_GET_PCP_MAP_CTAG_GET_TAG_UP_NDX_ID, 
    "tag_up_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  tag_up_ndx:\n\r"
    "  The UP appears in the outer C-Tag of the packet. Range: 0 - 7.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_vlan_edit pcp_map_ctag_get pcp_profile_ndx 0 tag_up_ndx 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(1)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_VLAN_EDIT_PCP_MAP_UNTAGGED_SET_PCP_MAP_UNTAGGED_SET_ID, 
    "pcp_map_untagged_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set mapping from COS parameters (DP and TC) to the PCP and DEI values to be\n\r"
    "  set in the transmitted packet's tag. This is the mapping to be used when the\n\r"
    "  incoming packet has not tags or pcp profile set to use TC and DP for the\n\r"
    "  mapping.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_vlan_edit pcp_map_untagged_set pcp_profile_ndx 0 tc_ndx 0 dp_ndx 0\n\r"
    "  out_pcp 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(2)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_VLAN_EDIT_PCP_MAP_UNTAGGED_SET_PCP_MAP_UNTAGGED_SET_PCP_PROFILE_NDX_ID, 
    "pcp_profile_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pcp_profile_ndx:\n\r"
    "  The PCP profile is set according to OUT-AC setting. Range: 0 - 7.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_vlan_edit pcp_map_untagged_set pcp_profile_ndx 0 tc_ndx 0 dp_ndx 0\n\r"
    "  out_pcp 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(2)}, 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_VLAN_EDIT_PCP_MAP_UNTAGGED_SET_PCP_MAP_UNTAGGED_SET_TC_NDX_ID, 
    "tc_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  tc_ndx:\n\r"
    "  Traffic Class. Calculated at the ingress. See COS module. Range: 0 - 7.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_vlan_edit pcp_map_untagged_set pcp_profile_ndx 0 tc_ndx 0 dp_ndx 0\n\r"
    "  out_pcp 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(2)}, 
    4, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_VLAN_EDIT_PCP_MAP_UNTAGGED_SET_PCP_MAP_UNTAGGED_SET_DP_NDX_ID, 
    "dp_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  dp_ndx:\n\r"
    "  Drop Precedence. Calculated at the ingress. See COS module. Range: 0 - 3.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_vlan_edit pcp_map_untagged_set pcp_profile_ndx 0 tc_ndx 0 dp_ndx 0\n\r"
    "  out_pcp 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(2)}, 
    5, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_VLAN_EDIT_PCP_MAP_UNTAGGED_SET_PCP_MAP_UNTAGGED_SET_OUT_PCP_ID, 
    "out_pcp", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  out_pcp:\n\r"
    "  The mapped PCP to set in the transmitted packet header. When the mapping used\n\r"
    "  to build C-tag, this value represents the UP to set in the packet\n\r"
    "  C-tag.Range: 0 - 7.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_vlan_edit pcp_map_untagged_set pcp_profile_ndx 0 tc_ndx 0 dp_ndx 0\n\r"
    "  out_pcp 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(2)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_VLAN_EDIT_PCP_MAP_UNTAGGED_SET_PCP_MAP_UNTAGGED_SET_OUT_DEI_ID, 
    "out_dei", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  out_dei:\n\r"
    "  The mapped DEI to set in the transmitted packet header.\n\r"
    "  This is relevant when used for S-Tag. When the mapping used to build C tag,\n\r"
    "  this value has to be set to 0. Range: 0 - 1.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_vlan_edit pcp_map_untagged_set pcp_profile_ndx 0 tc_ndx 0 dp_ndx 0\n\r"
    "  out_pcp 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(2)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_VLAN_EDIT_PCP_MAP_UNTAGGED_GET_PCP_MAP_UNTAGGED_GET_ID, 
    "pcp_map_untagged_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set mapping from COS parameters (DP and TC) to the PCP and DEI values to be\n\r"
    "  set in the transmitted packet's tag. This is the mapping to be used when the\n\r"
    "  incoming packet has not tags or pcp profile set to use TC and DP for the\n\r"
    "  mapping.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_vlan_edit pcp_map_untagged_get pcp_profile_ndx 0 tc_ndx 0 dp_ndx 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(3)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_VLAN_EDIT_PCP_MAP_UNTAGGED_GET_PCP_MAP_UNTAGGED_GET_PCP_PROFILE_NDX_ID, 
    "pcp_profile_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pcp_profile_ndx:\n\r"
    "  The PCP profile is set according to OUT-AC setting. Range: 0 - 7.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_vlan_edit pcp_map_untagged_get pcp_profile_ndx 0 tc_ndx 0 dp_ndx 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(3)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_VLAN_EDIT_PCP_MAP_UNTAGGED_GET_PCP_MAP_UNTAGGED_GET_TC_NDX_ID, 
    "tc_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  tc_ndx:\n\r"
    "  Traffic Class. Calculated at the ingress. See COS module. Range: 0 - 7.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_vlan_edit pcp_map_untagged_get pcp_profile_ndx 0 tc_ndx 0 dp_ndx 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(3)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_VLAN_EDIT_PCP_MAP_UNTAGGED_GET_PCP_MAP_UNTAGGED_GET_DP_NDX_ID, 
    "dp_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  dp_ndx:\n\r"
    "  Drop Precedence. Calculated at the ingress. See COS module. Range: 0 - 3.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_vlan_edit pcp_map_untagged_get pcp_profile_ndx 0 tc_ndx 0 dp_ndx 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(3)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_VLAN_EDIT_PCP_MAP_DSCP_EXP_GET_PCP_MAP_DSCP_EXP_GET_ID, 
    "pcp_map_dscp_exp_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set mapping from COS parameters to the PCP and DEI values to be\n\r"
    "  set in the transmitted packet's tag. This is the mapping to be used when the\n\r"
    "  incoming packet has pcp profile set to use DSCP and EXP for the\n\r"
    "  mapping.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_vlan_edit pcp_map_dscp_exp_get pkt_type_ndx 0 dscp_exp_ndx \n\r" 
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(28)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_VLAN_EDIT_PCP_MAP_DSCP_EXP_GET_PCP_MAP_DSCP_EXP_GET_PKT_TYPE_NDX_ID,
    "pkt_type_ndx", 
    (PARAM_VAL_RULES *)&SOC_PPC_PKT_FRWRD_TYPE_rule[0], 
    (sizeof(SOC_PPC_PKT_FRWRD_TYPE_rule) / sizeof(SOC_PPC_PKT_FRWRD_TYPE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pkt_type_ndx:\n\r"
    "  The packet forward type. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_vlan_edit pcp_map_dscp_exp_get pkt_type_ndx 0 dscp_exp_ndx 0\n\r" 
#endif 
    "",
    "",
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(28)},  
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_VLAN_EDIT_PCP_MAP_DSCP_EXP_GET_PCP_MAP_DSCP_EXP_GET_DSCP_EXP_NDX_ID, 
    "dscp_exp_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  dscp_exp_ndx:\n\r"
    "  DSCP or EXP ndx. If TO_DSCP and header code is MPLS, Range: 0-7. \n\r"
    "  Otherwise, Range: 0-255. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_vlan_edit pcp_map_dscp_exp_get pkt_type_ndx 0 dscp_exp_ndx 0\n\r" 
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(28)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },
  { 
    SOC_PARAM_PPD_EG_VLAN_EDIT_PCP_MAP_DSCP_EXP_SET_PCP_MAP_DSCP_EXP_SET_ID, 
    "pcp_map_dscp_exp_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set mapping from COS parameters to the PCP and DEI values to be\n\r" 
    "  set in the transmitted packet's tag. This is the mapping to be used when the\n\r"
    "  incoming packet is set to use dscp and exp parameters for the mapping.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_vlan_edit pcp_map_dscp_exp_set pkt_type_ndx 0 dscp_exp_ndx 0 \n\r"
    "  out_pcp 0 out_dei 0 \n\r" 
    "",
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 0, 0, BIT(21)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_VLAN_EDIT_PCP_MAP_DSCP_EXP_SET_PCP_MAP_DSCP_EXP_SET_PKT_TYPE_NDX_ID, 
    "pkt_type_ndx", 
    (PARAM_VAL_RULES *)&SOC_PPC_PKT_FRWRD_TYPE_rule[0], 
    (sizeof(SOC_PPC_PKT_FRWRD_TYPE_rule) / sizeof(SOC_PPC_PKT_FRWRD_TYPE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pkt_type_ndx:\n\r"
    "  Packet forward type. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_vlan_edit pcp_map_dscp_exp_set pkt_type_ndx 0 dscp_exp_ndx 0 \n\r"
    "  out_pcp 0 out_dei 0 \n\r" 
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 0, 0, BIT(21)}, 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_VLAN_EDIT_PCP_MAP_DSCP_EXP_SET_PCP_MAP_DSCP_EXP_SET_DSCP_EXP_NDX_ID, 
    "dscp_exp_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  dscp_exp_ndx:\n\r"
    "  DSCP or EXP ndx. If TO_DSCP and header code is MPLS, Range: 0-7. \n\r"
    "  Otherwise, Range: 0-255. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_vlan_edit pcp_map_dscp_exp_set pkt_type_ndx 0 dscp_exp_ndx 0 \n\r"
    "  out_pcp 0 out_dei 0 \n\r" 
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 0, 0, BIT(21)}, 
    4, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_VLAN_EDIT_PCP_MAP_DSCP_EXP_SET_PCP_MAP_DSCP_EXP_SET_OUT_PCP_ID, 
    "out_pcp", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  out_pcp:\n\r"
    "  The mapped PCP to set in the transmitted packet header. When the mapping used\n\r"
    "  to build C-tag, this value represents the UP to set in the packet\n\r"
    "  C-tag.Range: 0 - 7.  \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_vlan_edit pcp_map_dscp_exp_set pkt_type_ndx 0 dscp_exp_ndx 0 \n\r"
    "  out_pcp 0 out_dei 0 \n\r" 
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 0, 0, BIT(21)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_VLAN_EDIT_PCP_MAP_DSCP_EXP_SET_PCP_MAP_DSCP_EXP_SET_OUT_DEI_ID, 
    "out_dei", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  out_dei:\n\r"
    "  The mapped DEI to set in the transmitted packet header.\n\r"
    "  This is relevant when used for S-Tag. When the mapping used to build C tag,\n\r"
    "  this value has to be set to 0. Range: 0 - 1.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_vlan_edit pcp_map_dscp_exp_set pkt_type_ndx 0 dscp_exp_ndx 0 \n\r"
    "  out_pcp 0 out_dei 0 \n\r" 
#endif 
    "",
    "",
   {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 0, 0, BIT(21)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_API_EG_VLAN_EDIT_ID, 
    "eg_vlan_edit", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "",
    "", 
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(22)|BIT(23)|BIT(24)|BIT(25)|BIT(26)|BIT(27)|BIT(28)|BIT(29)|BIT(30)|BIT(31), BIT(0)|BIT(1)|BIT(2)|BIT(3), 0, BIT(28), 0, BIT(21)}, 
    1, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
#endif /* } eg_vlan_edit*/
#ifdef UI_EG_MIRROR/* { eg_mirror*/
  { 
    SOC_PARAM_PPD_EG_MIRROR_PORT_VLAN_ADD_PORT_VLAN_ADD_ID, 
    "port_vlan_add", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set outbound mirroring for out-port and VLAN, so all outgoing packets leave\n\r"
    "  from the given port and with the given VID will be mirrored or not according\n\r"
    "  to 'enable_mirror'\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_mirror port_vlan_add out_port_ndx 0 vid_ndx 0 enable_mirror 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_EG_MIRROR_PORT_VLAN_ADD_PORT_VLAN_ADD_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_MIRROR_PORT_VLAN_ADD_PORT_VLAN_ADD_OUT_PORT_NDX_ID, 
    "out_port_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  out_port_ndx:\n\r"
    "  Local port ID.	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_mirror port_vlan_add out_port_ndx 0 vid_ndx 0 enable_mirror 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_EG_MIRROR_PORT_VLAN_ADD_PORT_VLAN_ADD_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_MIRROR_PORT_VLAN_ADD_PORT_VLAN_ADD_VID_NDX_ID, 
    "vid_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  vid_ndx:\n\r"
    "  VLAN ID. Range: 0 - 4095.	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_mirror port_vlan_add out_port_ndx 0 vid_ndx 0 enable_mirror 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_EG_MIRROR_PORT_VLAN_ADD_PORT_VLAN_ADD_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_MIRROR_PORT_VLAN_ADD_PORT_VLAN_ADD_ENABLE_MIRROR_ID, 
    "enable_mirror", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  enable_mirror:\n\r"
    "  TRUE packets will be mirrored. FALSE packet will not be mirrored	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_mirror port_vlan_add out_port_ndx 0 vid_ndx 0 enable_mirror 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_EG_MIRROR_PORT_VLAN_ADD_PORT_VLAN_ADD_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_MIRROR_PORT_VLAN_REMOVE_PORT_VLAN_REMOVE_ID, 
    "port_vlan_remove", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Remove a mirroring for port and VLAN, upon this packet transmitted out this\n\r"
    "  out_port_ndx and vid_ndx will be mirrored or not according to default\n\r"
    "  configuration for out_port_ndx. see soc_ppd_eg_mirror_port_dflt_set()\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_mirror port_vlan_remove out_port_ndx 0 vid_ndx 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_EG_MIRROR_PORT_VLAN_REMOVE_PORT_VLAN_REMOVE_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_MIRROR_PORT_VLAN_REMOVE_PORT_VLAN_REMOVE_OUT_PORT_NDX_ID, 
    "out_port_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  out_port_ndx:\n\r"
    "  Local port ID.	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_mirror port_vlan_remove out_port_ndx 0 vid_ndx 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_EG_MIRROR_PORT_VLAN_REMOVE_PORT_VLAN_REMOVE_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_MIRROR_PORT_VLAN_REMOVE_PORT_VLAN_REMOVE_VID_NDX_ID, 
    "vid_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  vid_ndx:\n\r"
    "  VLAN ID. Range: 0 - 4095.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_mirror port_vlan_remove out_port_ndx 0 vid_ndx 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_EG_MIRROR_PORT_VLAN_REMOVE_PORT_VLAN_REMOVE_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_MIRROR_PORT_VLAN_GET_PORT_VLAN_GET_ID, 
    "port_vlan_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Get the assigned mirroring profile for port and VLAN. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_mirror port_vlan_get out_port_ndx 0 vid_ndx 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_EG_MIRROR_PORT_VLAN_GET_PORT_VLAN_GET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_MIRROR_PORT_VLAN_GET_PORT_VLAN_GET_OUT_PORT_NDX_ID, 
    "out_port_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  out_port_ndx:\n\r"
    "  Local port ID.	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_mirror port_vlan_get out_port_ndx 0 vid_ndx 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_EG_MIRROR_PORT_VLAN_GET_PORT_VLAN_GET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_MIRROR_PORT_VLAN_GET_PORT_VLAN_GET_VID_NDX_ID, 
    "vid_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  vid_ndx:\n\r"
    "  VLAN ID. Range: 0 - 4095.	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_mirror port_vlan_get out_port_ndx 0 vid_ndx 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_EG_MIRROR_PORT_VLAN_GET_PORT_VLAN_GET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_MIRROR_PORT_DFLT_SET_PORT_DFLT_SET_ID, 
    "port_dflt_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set default mirroring profiles for port \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_mirror port_dflt_set local_port_ndx 0 enable_mirror 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_EG_MIRROR_PORT_DFLT_SET_PORT_DFLT_SET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_MIRROR_PORT_DFLT_SET_PORT_DFLT_SET_LOCAL_PORT_NDX_ID, 
    "local_port_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  local_port_ndx:\n\r"
    "  Local port ID.	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_mirror port_dflt_set local_port_ndx 0 enable_mirror 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_EG_MIRROR_PORT_DFLT_SET_PORT_DFLT_SET_ID), 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_MIRROR_PORT_DFLT_SET_PORT_DFLT_SET_DFLT_MIRRORING_INFO_ENABLE_MIRROR_ID, 
    "enable_mirror", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  dflt_mirroring_info.enable_mirror:\n\r"
    "  The default of the port to enable/disable mirroring\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_mirror port_dflt_set local_port_ndx 0 enable_mirror 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_EG_MIRROR_PORT_DFLT_SET_PORT_DFLT_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_MIRROR_PORT_DFLT_GET_PORT_DFLT_GET_ID, 
    "port_dflt_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set default mirroring profiles for port \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_mirror port_dflt_get local_port_ndx 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_EG_MIRROR_PORT_DFLT_GET_PORT_DFLT_GET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_MIRROR_PORT_DFLT_GET_PORT_DFLT_GET_LOCAL_PORT_NDX_ID, 
    "local_port_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  local_port_ndx:\n\r"
    "  Local port ID.	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_mirror port_dflt_get local_port_ndx 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_EG_MIRROR_PORT_DFLT_GET_PORT_DFLT_GET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_API_EG_MIRROR_ID, 
    "eg_mirror", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "",
    "", 
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(0)|BIT(24), BIT(17)|BIT(18)|BIT(27)}, 
    1, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
#endif /* } eg_mirror*/

#ifdef UI_PORT/* { port*/
  { 
    SOC_PARAM_PPD_PORT_INFO_SET_INFO_SET_ID, 
    "port_info_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set main attributes of the port. Generally, these attributes identify the\n\r"
    "  port and may have use in more than one module.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api port info_set local_port_ndx 0 mtu 0 not_authorized_802_1x 0\n\r"
    "  enable_outgoing_extend_p2p 0 enable_incoming_extend_p2p 0\n\r"
    "  ether_type_based_profile 0 orientation 0 is_learn_ac 0 enable_learning 0\n\r"
    "  is_pbp 0 snoop_action_strength 0 frwrd_action_strength 0\n\r"
    "  trap_code 0 port_type 0 vlan_domain 0 tpid_profile 0 port_profile 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_PORT_INFO_SET_INFO_SET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_PORT_INFO_SET_INFO_SET_LOCAL_PORT_NDX_ID, 
    "local_port_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  local_port_ndx:\n\r"
    "  Local port ID.	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api port info_set local_port_ndx 0 mtu 0 not_authorized_802_1x 0\n\r"
    "  enable_outgoing_extend_p2p 0 enable_incoming_extend_p2p 0\n\r"
    "  ether_type_based_profile 0 orientation 0 is_learn_ac 0 enable_learning 0\n\r"
    "  is_pbp 0 snoop_action_strength 0 frwrd_action_strength 0\n\r"
    "  trap_code 0 port_type 0 vlan_domain 0 tpid_profile 0 port_profile 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_PORT_INFO_SET_INFO_SET_ID), 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_PORT_INFO_SET_INFO_SET_PORT_INFO_MTU_ID, 
    "mtu", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  port_info.mtu:\n\r"
    "  Maximum Transmission Unit. Packets with size over this value will be\n\r"
    "  processed according to action profile assigned to this event. The Check of\n\r"
    "  the MTU is performed at the egress \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api port info_set local_port_ndx 0 mtu 0 not_authorized_802_1x 0\n\r"
    "  enable_outgoing_extend_p2p 0 enable_incoming_extend_p2p 0\n\r"
    "  ether_type_based_profile 0 orientation 0 is_learn_ac 0 enable_learning 0\n\r"
    "  is_pbp 0 snoop_action_strength 0 frwrd_action_strength 0\n\r"
    "  trap_code 0 port_type 0 vlan_domain 0 tpid_profile 0 port_profile 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_PORT_INFO_SET_INFO_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_PORT_INFO_SET_INFO_SET_PORT_INFO_NOT_AUTHORIZED_802_1X_ID, 
    "not_authorized_802_1x", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  port_info.not_authorized_802_1x:\n\r"
    "  If TRUE, then port operates in non-authorized 802.1x mode and only 802.1x\n\r"
    "  traffic (EAPOL packets) is allowed. (Ether-type=0x888e according to IEEE Std\n\r"
    "  802.1X-Port-based network access. May be changed by logical access.) If\n\r"
    "  FALSE, then the port is authorized and all traffic is allowed. EAPOL packets\n\r"
    "  in unauthorized port are forwarded Normally\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api port info_set local_port_ndx 0 mtu 0 not_authorized_802_1x 0\n\r"
    "  enable_outgoing_extend_p2p 0 enable_incoming_extend_p2p 0\n\r"
    "  ether_type_based_profile 0 orientation 0 is_learn_ac 0 enable_learning 0\n\r"
    "  is_pbp 0 snoop_action_strength 0 frwrd_action_strength 0\n\r"
    "  trap_code 0 port_type 0 vlan_domain 0 tpid_profile 0 port_profile 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_PORT_INFO_SET_INFO_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_PORT_INFO_SET_INFO_SET_PORT_INFO_EXTEND_P2P_INFO_ENABLE_OUTGOING_EXTEND_P2P_ID, 
    "enable_outgoing_extend_p2p", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  port_info.extend_p2p_info.enable_outgoing_extend_p2p:\n\r"
    "  Enable Extended P2P service for traffic outgoing from this port. When a\n\r"
    "  packet arrives at the egress port with no AC, then port x VSI lookup will be\n\r"
    "  performed only if this field is FALSE; otherwise, the VSI is global for all,\n\r"
    "  and extended P2P service and has no meaning in this context.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api port info_set local_port_ndx 0 mtu 0 not_authorized_802_1x 0\n\r"
    "  enable_outgoing_extend_p2p 0 enable_incoming_extend_p2p 0\n\r"
    "  ether_type_based_profile 0 orientation 0 is_learn_ac 0 enable_learning 0\n\r"
    "  is_pbp 0 snoop_action_strength 0 frwrd_action_strength 0\n\r"
    "  trap_code 0 port_type 0 vlan_domain 0 tpid_profile 0 port_profile 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_PORT_INFO_SET_INFO_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_PORT_INFO_SET_INFO_SET_PORT_INFO_EXTEND_P2P_INFO_ENABLE_INCOMING_EXTEND_P2P_ID, 
    "enable_incoming_extend_p2p", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
#ifdef COMPILER_STRING_CONST_LIMIT
    "  Full documentation cannot be displayed with -pendantic compiler\n\r",
#else
    "  port_info.extend_p2p_info.enable_incoming_extend_p2p:\n\r"
    "  Enable Extended P2P service for traffic enters from this port. When lookup in\n\r"
    "  the LIF table fails, then the behavior depends on this field:- If FALSE, then\n\r"
    "  the packet will be assigned a default AC (see soc_ppd_l2_lif_ac_add()) and the\n\r"
    "  further processing of the packet will be as if the lookup in the LIF table\n\r"
    "  succeeded.\n\r"
    "  - If TRUE, then the packet will be identified as part of Extended\n\r"
    "  P2P service, and identical lookup will be performed in the LEM. In T20E, has\n\r"
    "  to be FALSE.\n\r"
    "",
#endif /* COMPILER_STRING_CONST_LIMIT */
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api port info_set local_port_ndx 0 mtu 0 not_authorized_802_1x 0\n\r"
    "  enable_outgoing_extend_p2p 0 enable_incoming_extend_p2p 0\n\r"
    "  ether_type_based_profile 0 orientation 0 is_learn_ac 0 enable_learning 0\n\r"
    "  is_pbp 0 snoop_action_strength 0 frwrd_action_strength 0\n\r"
    "  trap_code 0 port_type 0 vlan_domain 0 tpid_profile 0 port_profile 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_PORT_INFO_SET_INFO_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_PORT_INFO_SET_INFO_SET_PORT_INFO_ETHER_TYPE_BASED_PROFILE_ID, 
    "ether_type_based_profile", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  port_info.ether_type_based_profile:\n\r"
    "  Port profile for l2-protocol-based VID and TC assignment.See\n\r"
    "  soc_ppd_llp_vid_assign_protocol_based_set() and\n\r"
    "  soc_ppd_llp_cos_protocol_based_se().Range: 0 - 7.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api port info_set local_port_ndx 0 mtu 0 not_authorized_802_1x 0\n\r"
    "  enable_outgoing_extend_p2p 0 enable_incoming_extend_p2p 0\n\r"
    "  ether_type_based_profile 0 orientation 0 is_learn_ac 0 enable_learning 0\n\r"
    "  is_pbp 0 snoop_action_strength 0 frwrd_action_strength 0\n\r"
    "  trap_code 0 port_type 0 vlan_domain 0 tpid_profile 0 port_profile 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_PORT_INFO_SET_INFO_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_PORT_INFO_SET_INFO_SET_PORT_INFO_ORIENTATION_ID, 
    "orientation", 
    (PARAM_VAL_RULES *)&SOC_PPD_SAND_PP_HUB_SPOKE_ORIENTATION_rule[0], 
    (sizeof(SOC_PPD_SAND_PP_HUB_SPOKE_ORIENTATION_rule) / sizeof(SOC_PPD_SAND_PP_HUB_SPOKE_ORIENTATION_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
#ifdef COMPILER_STRING_CONST_LIMIT
    "  Full documentation cannot be displayed with -pendantic compiler\n\r",
#else
    "  port_info.orientation:\n\r"
    "  Port orientation, HUB or Spoke. Packets forwarded from hub interface to hub\n\r"
    "  interface will be filtered. See also soc_ppd_l2_lif_pwe_set()/\n\r"
    "  soc_ppd_l2_lif_ac_set() to set in-LIF orientation, and\n\r"
    "  soc_ppd_eg_filter_split_horizon_out_ac_orientation_set()/\n\r"
    "  soc_ppd_eg_encap_mpls_encap_entry_add() to set out-LIF orientation. Port\n\r"
    "  orientation may have lowest priority, i.e., only at egress when out-AC is not\n\r"
    "  associated with the packet and packet is not transmitted by tunnel.Not\n\r"
    "  relevant for T20E and may be ignored.\n\r"
    "",
#endif /* COMPILER_STRING_CONST_LIMIT */
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api port info_set local_port_ndx 0 mtu 0 not_authorized_802_1x 0\n\r"
    "  enable_outgoing_extend_p2p 0 enable_incoming_extend_p2p 0\n\r"
    "  ether_type_based_profile 0 orientation 0 is_learn_ac 0 enable_learning 0\n\r"
    "  is_pbp 0 snoop_action_strength 0 frwrd_action_strength 0\n\r"
    "  trap_code 0 port_type 0 vlan_domain 0 tpid_profile 0 port_profile 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_PORT_INFO_SET_INFO_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  }, 
  { 
    SOC_PARAM_PPD_PORT_INFO_SET_INFO_SET_PORT_INFO_SAME_INTERFACE_FILTER_ENABLE_ID, 
    "same_interface_enable", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
#ifdef COMPILER_STRING_CONST_LIMIT
    "  Full documentation cannot be displayed with -pendantic compiler\n\r",
#else
    "  port_info.same_interface_enable:\n\r"
    "  Enable same-interface/hair-pin Filtering.\n\r"
    "  i.e. filter packets which incoming interface equal to outgoing\n\r"
    "  interface (Hair-Pin). \n\r"
    "  this enable filtering for both packets incomming and outgoing from\n\r"
    "  this port.\n\r"
    "  to change configuration only on egress side use soc_ppd_eg_filter_port_info_set\n\r"
    "  - if this filter occurs at ingress (For unicast packets) then \n\r"
    "    SOC_PPC_TRAP_CODE_SAME_INTERFACE trap code is raised\n\r"
    "  - if this filter occurs at egress (For unicast packets) then \n\r"
    "    SOC_PPC_TRAP_EG_TYPE_HAIR_PIN is raised\n\r"
    " get API returns port ingress status.\n\r"
    "",
#endif /* COMPILER_STRING_CONST_LIMIT */
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api port info_set local_port_ndx 0 mtu 0 not_authorized_802_1x 0\n\r"
    "  enable_outgoing_extend_p2p 0 enable_incoming_extend_p2p 0\n\r"
    "  ether_type_based_profile 0 orientation 0 is_learn_ac 0 enable_learning 0\n\r"
    "  is_pbp 0 snoop_action_strength 0 frwrd_action_strength 0\n\r"
    "  trap_code 0 port_type 0 vlan_domain 0 tpid_profile 0 port_profile 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_PORT_INFO_SET_INFO_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_PORT_INFO_SET_INFO_SET_PORT_INFO_IS_LEARN_AC_ID, 
    "is_learn_ac", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
#ifdef COMPILER_STRING_CONST_LIMIT
    "  Full documentation cannot be displayed with -pendantic compiler\n\r",
#else
    "  port_info.is_learn_ac:\n\r"
    "  TRUE: The AC is learnedFALSE: The AC is not learned.(only destination is\n\r"
    "  learnt: destination may be source-system-port, FEC or flow see\n\r"
    "  soc_ppd_l2_lif_pwe_add() and soc_ppd_l2_lif_ac_add().- When a packet is forwarded to\n\r"
    "  a learned-AC destination, the AC is used to point to the egress editing\n\r"
    "  database.- Otherwise, egress editing and processing is according to <outPort\n\r"
    "  x VSI>.- Setting this flag enables performing hairpin filter on the egress\n\r"
    "  port.- When the AC is learned, the AC ID is the LIF entry ID (lif_index).\n\r"
    "",
#endif /* COMPILER_STRING_CONST_LIMIT */
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api port info_set local_port_ndx 0 mtu 0 not_authorized_802_1x 0\n\r"
    "  enable_outgoing_extend_p2p 0 enable_incoming_extend_p2p 0\n\r"
    "  ether_type_based_profile 0 orientation 0 is_learn_ac 0 enable_learning 0\n\r"
    "  is_pbp 0 snoop_action_strength 0 frwrd_action_strength 0\n\r"
    "  trap_code 0 port_type 0 vlan_domain 0 tpid_profile 0 port_profile 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_PORT_INFO_SET_INFO_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_PORT_INFO_SET_INFO_SET_PORT_INFO_ENABLE_LEARNING_ID, 
    "enable_learning", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  port_info.enable_learning:\n\r"
    "  Whether SA learning is enabled for this port. In order to learn packets also\n\r"
    "  the LIF (AC/PWE) has to be configured to enable learning. i.e., this enable\n\r"
    "  is necessary but not sufficient to learn a packet's SA.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api port info_set local_port_ndx 0 mtu 0 not_authorized_802_1x 0\n\r"
    "  enable_outgoing_extend_p2p 0 enable_incoming_extend_p2p 0\n\r"
    "  ether_type_based_profile 0 orientation 0 is_learn_ac 0 enable_learning 0\n\r"
    "  is_pbp 0 snoop_action_strength 0 frwrd_action_strength 0\n\r"
    "  trap_code 0 port_type 0 vlan_domain 0 tpid_profile 0 port_profile 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_PORT_INFO_SET_INFO_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_PORT_INFO_SET_INFO_SET_PORT_INFO_IS_PBP_ID, 
    "is_pbp", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  port_info.is_pbp:\n\r"
    "  Is the port PBP Provider Backbone Port, i.e., the port is facing the backbone\n\r"
    "  in MAC-in-MAC application. If TRUE, then the EEI arriving to this port at the\n\r"
    "  egress will be decoded as ISID values. If this set to TRUE, then\n\r"
    "  enable_sa_lookup has to be TRUE also. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api port info_set local_port_ndx 0 mtu 0 not_authorized_802_1x 0\n\r"
    "  enable_outgoing_extend_p2p 0 enable_incoming_extend_p2p 0\n\r"
    "  ether_type_based_profile 0 orientation 0 is_learn_ac 0 enable_learning 0\n\r"
    "  is_pbp 0 snoop_action_strength 0 frwrd_action_strength 0\n\r"
    "  trap_code 0 port_type 0 vlan_domain 0 tpid_profile 0 port_profile 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_PORT_INFO_SET_INFO_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_PORT_INFO_SET_INFO_SET_PORT_INFO_VLAN_TRANSLATION_PROFILE_ID, 
    "vlan_translation_profile", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  port_info.vlan_translation_profile:\n\r"
    "  vlan translation profile in the context of:\n\r"
    "  AC map key, (port, portxVlan, PortxVlanxVlan)\n\r"
    "  soc_ppd_l2_lif_ac_map_key_set()Range: SOC_PPC_NOF_PORT_DEFINED_VT_PROFILES - 7. Used for user-define programs.\n\r"
    "  - AC lookup pre define programs, usages: \n\r"
    "  See SOC_PPC_PORT_DEFINED_VT_PROFILE_XXX programs. \n\r"
    "  Relevant for ARAD only."
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api port info_set local_port_ndx 0 mtu 0 not_authorized_802_1x 0\n\r"
    "  enable_outgoing_extend_p2p 0 enable_incoming_extend_p2p 0\n\r"
    "  ether_type_based_profile 0 orientation 0 is_learn_ac 0 enable_learning 0\n\r"
    "  is_pbp 0 snoop_action_strength 0 frwrd_action_strength 0\n\r"
    "  trap_code 0 port_type 0 vlan_domain 0 tpid_profile 0 port_profile 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_PORT_INFO_SET_INFO_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_PORT_INFO_SET_INFO_SET_PORT_INFO_TUNNEL_TERMINATION_PROFILE_ID, 
    "tunnel_termination_profile", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  port_info.tunnel_termination_profile:\n\r"
    "  tunnel termination profile in the context of:\n\r"
    "  - MPLS key, (FRR).\n\r"
    "  Range: SOC_PPC_NOF_PORT_DEFINED_TT_PROFILES - 7. Used for user-define programs.\n\r"
    "  - TT lookups pre define programs, usages:\n\r"
    "  See SOC_PPC_PORT_DEFINED_TT_PROFILE_XXX programs. \n\r"
    "  Relevant for ARAD only."
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api port info_set local_port_ndx 0 mtu 0 not_authorized_802_1x 0\n\r"
    "  enable_outgoing_extend_p2p 0 enable_incoming_extend_p2p 0\n\r"
    "  ether_type_based_profile 0 orientation 0 is_learn_ac 0 enable_learning 0\n\r"
    "  is_pbp 0 snoop_action_strength 0 frwrd_action_strength 0\n\r"
    "  trap_code 0 port_type 0 vlan_domain 0 tpid_profile 0 port_profile 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_PORT_INFO_SET_INFO_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  }, 
  { 
    SOC_PARAM_PPD_PORT_INFO_SET_INFO_SET_PORT_INFO_INITIAL_ACTION_PROFILE_SNOOP_ACTION_STRENGTH_ID, 
    "snoop_action_strength", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  port_info.initial_action_profile.snoop_action_strength:\n\r"
    "  Value that identifies the strength of the assignment of Snoop action to the\n\r"
    "  packet. Through the packet processing pipe, many snooping decisions may be\n\r"
    "  taken; yet one decision may overwrite a former decision only if it stronger,\n\r"
    "  i.e., its strength is higher than the last decision that was taken. Range\n\r"
    "  0-3. Relevant only for Petra-B.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api port info_set local_port_ndx 0 mtu 0 not_authorized_802_1x 0\n\r"
    "  enable_outgoing_extend_p2p 0 enable_incoming_extend_p2p 0\n\r"
    "  ether_type_based_profile 0 orientation 0 is_learn_ac 0 enable_learning 0\n\r"
    "  is_pbp 0 snoop_action_strength 0 frwrd_action_strength 0\n\r"
    "  trap_code 0 port_type 0 vlan_domain 0 tpid_profile 0 port_profile 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_PORT_INFO_SET_INFO_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_PORT_INFO_SET_INFO_SET_PORT_INFO_INITIAL_ACTION_PROFILE_FRWRD_ACTION_STRENGTH_ID, 
    "frwrd_action_strength", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  port_info.initial_action_profile.frwrd_action_strength:\n\r"
    "  Value that identifies the strength of the assignment of Forward action to the\n\r"
    "  packet. Through the packet processing pipe, many forwarding decisions may be\n\r"
    "  taken; yet one decision may overwrite a former decision only if it stronger,\n\r"
    "  i.e., its strength is higher than the last decision that was taken.\n\r"
    "  Range 0-7.Relevant only for Petra-B.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api port info_set local_port_ndx 0 mtu 0 not_authorized_802_1x 0\n\r"
    "  enable_outgoing_extend_p2p 0 enable_incoming_extend_p2p 0\n\r"
    "  ether_type_based_profile 0 orientation 0 is_learn_ac 0 enable_learning 0\n\r"
    "  is_pbp 0 snoop_action_strength 0 frwrd_action_strength 0\n\r"
    "  trap_code 0 port_type 0 vlan_domain 0 tpid_profile 0 port_profile 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_PORT_INFO_SET_INFO_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_PORT_INFO_SET_INFO_SET_PORT_INFO_INITIAL_ACTION_PROFILE_TRAP_CODE_LSB_ID, 
    "trap_code", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals/*SOC_PPC_TRAP_CODE_rule*/[0], 
    (sizeof(soc_ppd_api_free_vals/*SOC_PPC_TRAP_CODE_rule*/) / sizeof(soc_ppd_api_free_vals/*SOC_PPC_TRAP_CODE_rule*/[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
#ifdef COMPILER_STRING_CONST_LIMIT
    "  Full documentation cannot be displayed with -pendantic compiler\n\r",
#else
    "  port_info.initial_action_profile.trap_code:\n\r"
    "  Sets the LSB of the CPU code. For trapped packet the CPU code are associated\n\r"
    "  into the packet headers. The CPU code also used as index for the\n\r"
    "  forwarding/snooping actions. see to soc_ppd_trap_frwrd_profile_info_set(),\n\r"
    "  soc_ppd_trap_snoop_profile_info_set(). Range Petra-B: 0-255, T20E:0-63.To know\n\r"
    "  the legal range in specific use of this field, see the documentation in that\n\r"
    "  specific use.In Petra-B this field affects Both, the CPU code set on the\n\r"
    "  packets header and the index to access the forwarding and snooping tables, IN\n\r"
    "  T20E it's only affects the forwarding and snooping index. \n\r"
    "",
#endif /* COMPILER_STRING_CONST_LIMIT */
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api port info_set local_port_ndx 0 mtu 0 not_authorized_802_1x 0\n\r"
    "  enable_outgoing_extend_p2p 0 enable_incoming_extend_p2p 0\n\r"
    "  ether_type_based_profile 0 orientation 0 is_learn_ac 0 enable_learning 0\n\r"
    "  is_pbp 0 snoop_action_strength 0 frwrd_action_strength 0\n\r"
    "  trap_code 0 port_type 0 vlan_domain 0 tpid_profile 0 port_profile 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_PORT_INFO_SET_INFO_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_PORT_INFO_SET_INFO_SET_PORT_INFO_PORT_TYPE_ID, 
    "port_type", 
    (PARAM_VAL_RULES *)&SOC_PPD_SAND_PP_PORT_L2_TYPE_rule[0], 
    (sizeof(SOC_PPD_SAND_PP_PORT_L2_TYPE_rule) / sizeof(SOC_PPD_SAND_PP_PORT_L2_TYPE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  port_info.port_type:\n\r"
    "  L2 type (CEP, CNP, PNP, VBP). Only CEP and VBP is possible. Otherwise error\n\r"
    "  is returned.this configuration affects: - egress vlan editing (in case\n\r"
    "  forwarded packet is not associated with out-AC), in this case:if port type is\n\r"
    "  CEP and packet has C-tag then\n\r"
    "  lookup in Vlan Editing DB is according to out-VLAN-domain and CVID.Otherwise\n\r"
    "  (port type is VBP or packet has no C-tag) then lookup in VLAN editing DB is\n\r"
    "  according to out-VLAN-domain and VSI.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api port info_set local_port_ndx 0 mtu 0 not_authorized_802_1x 0\n\r"
    "  enable_outgoing_extend_p2p 0 enable_incoming_extend_p2p 0\n\r"
    "  ether_type_based_profile 0 orientation 0 is_learn_ac 0 enable_learning 0\n\r"
    "  is_pbp 0 snoop_action_strength 0 frwrd_action_strength 0\n\r"
    "  trap_code 0 port_type 0 vlan_domain 0 tpid_profile 0 port_profile 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_PORT_INFO_SET_INFO_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_PORT_INFO_SET_INFO_SET_PORT_INFO_VLAN_DOMAIN_ID, 
    "vlan_domain", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  port_info.vlan_domain:\n\r"
    "  VLAN Domain ID.The VLAN domain is either a port, or a group of ports that\n\r"
    "  share the same VLAN IDs space. In T20E has to be equal to local-port-id.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api port info_set local_port_ndx 0 mtu 0 not_authorized_802_1x 0\n\r"
    "  enable_outgoing_extend_p2p 0 enable_incoming_extend_p2p 0\n\r"
    "  ether_type_based_profile 0 orientation 0 is_learn_ac 0 enable_learning 0\n\r"
    "  is_pbp 0 snoop_action_strength 0 frwrd_action_strength 0\n\r"
    "  trap_code 0 port_type 0 vlan_domain 0 tpid_profile 0 port_profile 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_PORT_INFO_SET_INFO_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_PORT_INFO_SET_INFO_SET_PORT_INFO_TPID_PROFILE_ID, 
    "tpid_profile", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  port_info.tpid_profile:\n\r"
    "  Sets the TPID profile which includes selection of two TPIDs from the Global\n\r"
    "  TPIDs set by soc_ppd_llp_parse_tpid_values_set(). Range: 0 - 3.Petra-B only.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api port info_set local_port_ndx 0 mtu 0 not_authorized_802_1x 0\n\r"
    "  enable_outgoing_extend_p2p 0 enable_incoming_extend_p2p 0\n\r"
    "  ether_type_based_profile 0 orientation 0 is_learn_ac 0 enable_learning 0\n\r"
    "  is_pbp 0 snoop_action_strength 0 frwrd_action_strength 0\n\r"
    "  trap_code 0 port_type 0 vlan_domain 0 tpid_profile 0 port_profile 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_PORT_INFO_SET_INFO_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_PORT_INFO_SET_INFO_SET_PORT_INFO_DA_NOT_FOUND_PROFILE_ID, 
    "da_not_found_profile", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  port_info.da_not_found_profile:\n\r"
    "  Default Port forwarding decision to apply when there is no hit in the MAC table. The profile ID is part of the \n\r"
    "  default frwrd key. used by soc_ppd_l2_lif_default_frwrd_info_set. Range: 0 - 1.ARAD only.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api port info_set local_port_ndx 0 mtu 0 not_authorized_802_1x 0\n\r"
    "  enable_outgoing_extend_p2p 0 enable_incoming_extend_p2p 0\n\r"
    "  ether_type_based_profile 0 orientation 0 is_learn_ac 0 enable_learning 0\n\r"
    "  is_pbp 0 snoop_action_strength 0 frwrd_action_strength 0\n\r"
    "  trap_code 0 port_type 0 vlan_domain 0 tpid_profile 0 port_profile 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_PORT_INFO_SET_INFO_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_PORT_INFO_SET_INFO_SET_PORT_INFO_PORT_PROFILE_ID, 
    "port_profile", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  port_info.port_profile:\n\r"
    "  Port profile in the context of:- Acceptable frame types (VLAN Tag Structure).\n\r"
    "  See soc_ppd_llp_filter_ingress_acceptable_frames_set().- AC map key, (port,\n\r"
    "  portxVlan, PortxVlanxVlan). See soc_ppd_t20e_l2_lif_ac_map_key_set()Range: 0 - 7.for\n\r"
    "  T20E only also:- TPID selection see\n\r"
    "  soc_ppd_llp_parse_port_profile_to_tpid_profile_map_set()\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api port info_set local_port_ndx 0 mtu 0 not_authorized_802_1x 0\n\r"
    "  enable_outgoing_extend_p2p 0 enable_incoming_extend_p2p 0\n\r"
    "  ether_type_based_profile 0 orientation 0 is_learn_ac 0 enable_learning 0\n\r"
    "  is_pbp 0 snoop_action_strength 0 frwrd_action_strength 0\n\r"
    "  trap_code 0 port_type 0 vlan_domain 0 tpid_profile 0 port_profile 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_PORT_INFO_SET_INFO_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_PORT_INFO_GET_INFO_GET_ID, 
    "port_info_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set main attributes of the port. Generally, these attributes identify the\n\r"
    "  port and may have use in more than one module.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api port info_get local_port_ndx 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_PORT_INFO_GET_INFO_GET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_PORT_INFO_GET_INFO_GET_LOCAL_PORT_NDX_ID, 
    "local_port_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  local_port_ndx:\n\r"
    "  Local port ID.	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api port info_get local_port_ndx 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_PORT_INFO_GET_INFO_GET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_PORT_STP_STATE_SET_STP_STATE_SET_ID, 
    "stp_state_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Sets the STP state of a port in a specific topology ID.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api port stp_state_set local_port_ndx 0 topology_id_ndx 0 stp_state 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_PORT_STP_STATE_SET_STP_STATE_SET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_PORT_STP_STATE_SET_STP_STATE_SET_LOCAL_PORT_NDX_ID, 
    "local_port_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  local_port_ndx:\n\r"
    "  Local port ID.	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api port stp_state_set local_port_ndx 0 topology_id_ndx 0 stp_state 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_PORT_STP_STATE_SET_STP_STATE_SET_ID), 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_PORT_STP_STATE_SET_STP_STATE_SET_TOPOLOGY_ID_NDX_ID, 
    "topology_id_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  topology_id_ndx:\n\r"
    "  Topology ID. Set using soc_ppd_vsi_info_set(). Range: 0 - 63.	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api port stp_state_set local_port_ndx 0 topology_id_ndx 0 stp_state 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_PORT_STP_STATE_SET_STP_STATE_SET_ID), 
    4, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_PORT_STP_STATE_SET_STP_STATE_SET_STP_STATE_ID, 
    "stp_state", 
    (PARAM_VAL_RULES *)&SOC_PPC_PORT_STP_STATE_rule[0], 
    (sizeof(SOC_PPC_PORT_STP_STATE_rule) / sizeof(SOC_PPC_PORT_STP_STATE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  stp_state:\n\r"
    "  STP state of the port (discard/learn/forward)\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api port stp_state_set local_port_ndx 0 topology_id_ndx 0 stp_state 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_PORT_STP_STATE_SET_STP_STATE_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_PORT_STP_STATE_GET_STP_STATE_GET_ID, 
    "stp_state_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Sets the STP state of a port in a specific topology ID.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api port stp_state_get local_port_ndx 0 topology_id_ndx 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_PORT_STP_STATE_GET_STP_STATE_GET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_PORT_STP_STATE_GET_STP_STATE_GET_LOCAL_PORT_NDX_ID, 
    "local_port_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  local_port_ndx:\n\r"
    "  Local port ID.	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api port stp_state_get local_port_ndx 0 topology_id_ndx 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_PORT_STP_STATE_GET_STP_STATE_GET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_PORT_STP_STATE_GET_STP_STATE_GET_TOPOLOGY_ID_NDX_ID, 
    "topology_id_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  topology_id_ndx:\n\r"
    "  Topology ID. Set using soc_ppd_vsi_info_set(). Range: 0 - 63.	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api port stp_state_get local_port_ndx 0 topology_id_ndx 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_PORT_STP_STATE_GET_STP_STATE_GET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_PORT_LOCAL_PORT_TO_SYS_PHY_MAP_SET_LOCAL_PORT_TO_SYS_PHY_MAP_SET_ID, 
    "local_port_to_sys_phy_map_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Map Local port to System Physical Port.\n\r"
    "  The mapping is unique - single System Physical Port is mapped to a single\n\r"
    "  local port per specified device. This also performs the opposite mapping from\n\r"
    "  system port to local port.This configuration effects Learnt system port and\n\r"
    "  forwarding.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api port local_port_to_sys_phy_map_set local_port_ndx 0 sys_phy_port_id 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_PORT_LOCAL_PORT_TO_SYS_PHY_MAP_SET_LOCAL_PORT_TO_SYS_PHY_MAP_SET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_PORT_LOCAL_PORT_TO_SYS_PHY_MAP_SET_LOCAL_PORT_TO_SYS_PHY_MAP_SET_LOCAL_PORT_NDX_ID, 
    "local_port_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  local_port_ndx:\n\r"
    "  Local (per device) Port id. Range: Petra 0 - 79.Timna 0 - 31.	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api port local_port_to_sys_phy_map_set local_port_ndx 0 sys_phy_port_id 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_PORT_LOCAL_PORT_TO_SYS_PHY_MAP_SET_LOCAL_PORT_TO_SYS_PHY_MAP_SET_ID), 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_PORT_LOCAL_PORT_TO_SYS_PHY_MAP_SET_LOCAL_PORT_TO_SYS_PHY_MAP_SET_SYS_PHY_PORT_ID_ID, 
    "sys_phy_port_id", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  sys_phy_port_id:\n\r"
    "  The system physical port. Range: 0 - 4095.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api port local_port_to_sys_phy_map_set local_port_ndx 0 sys_phy_port_id 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_PORT_LOCAL_PORT_TO_SYS_PHY_MAP_SET_LOCAL_PORT_TO_SYS_PHY_MAP_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_PORT_LOCAL_PORT_TO_SYS_PHY_MAP_GET_LOCAL_PORT_TO_SYS_PHY_MAP_GET_ID, 
    "local_port_to_sys_phy_map_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Map Local port to System Physical Port.\n\r"
    "  The mapping is unique - single System Physical Port is mapped to a single\n\r"
    "  local port per specified device. This also performs the opposite mapping from\n\r"
    "  system port to local port.This configuration effects Learnt system port and\n\r"
    "  forwarding.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api port local_port_to_sys_phy_map_get local_port_ndx 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_PORT_LOCAL_PORT_TO_SYS_PHY_MAP_GET_LOCAL_PORT_TO_SYS_PHY_MAP_GET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_PORT_LOCAL_PORT_TO_SYS_PHY_MAP_GET_LOCAL_PORT_TO_SYS_PHY_MAP_GET_LOCAL_PORT_NDX_ID, 
    "local_port_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  local_port_ndx:\n\r"
    "  Local (per device) Port id. Range: Petra 0 - 79.Timna 0 - 31.	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api port local_port_to_sys_phy_map_get local_port_ndx 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_PORT_LOCAL_PORT_TO_SYS_PHY_MAP_GET_LOCAL_PORT_TO_SYS_PHY_MAP_GET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },     
  { 
    SOC_PARAM_PPD_API_PORT_ID, 
    "port", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "",
    "", 
    "",
    BIT_UI_16_RNG(SOC_FUN_PPD_API_PORT_FIRST_ID,SOC_FUN_PPD_API_PORT_LAST_ID), 
    1, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
#endif /* } port*/
#ifdef UI_LAG/* { lag*/
  { 
    SOC_PARAM_PPD_LAG_SET_SET_ID, 
    "set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Configure a LAG.A LAG is defined by a group of System Physical Ports that\n\r"
    "  compose it. This configuration affects\n\r"
    "  1. LAG resolution: when the destination of packet is LAG\n\r"
    "  2. Learning: when packet source port belongs to LAG, then the LAG is learnt.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lag set lag_ndx 0 lb_type 0 members_index 0 member_id 0 sys_port 0\n\r"
    "  nof_entries 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_LAG_SET_SET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LAG_SET_SET_LAG_NDX_ID, 
    "lag_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  lag_ndx:\n\r"
    "  LAG ID. Range: 0 - 255.	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lag set lag_ndx 0 lb_type 0 members_index 0 member_id 0 sys_port 0\n\r"
    "  nof_entries 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_LAG_SET_SET_ID), 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LAG_SET_SET_LAG_INFO_LB_TYPE_ID, 
    "lb_type", 
    (PARAM_VAL_RULES *)&SOC_PPC_LAG_LB_TYPE_rule[0], 
    (sizeof(SOC_PPC_LAG_LB_TYPE_rule) / sizeof(SOC_PPC_LAG_LB_TYPE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  lag_info.lb_type:\n\r"
    "  Load balance type. According to hash over the packet fields (see\n\r"
    "  soc_ppd_lag_hashing_lag_info_set ()) or round roubin between the members.In T20E\n\r"
    "  has to be by hashing.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lag set lag_ndx 0 lb_type 0 members_index 0 member_id 0 sys_port 0\n\r"
    "  nof_entries 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_LAG_SET_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },
  {
    SOC_PARAM_PPD_LAG_SET_SET_LAG_INFO_MEMBERS_INDEX_ID,
    "sys_ports",
    (PARAM_VAL_RULES *)&soc_petra_api_members_vals[0],
    (sizeof(soc_petra_api_members_vals) / sizeof(soc_petra_api_members_vals[0])) - 1,
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,
    0,0,0,0,0,0,0,
    "  info.lag_member_sys_ports[ prm_lag_member_sys_ports_index].sys_port:\r\n"
    "  System Physical Port indexes of the ports that are members of the specified\r\n"
    "  LAG.The index of the System Physical Port in the array is its lag membership\r\n"
    "  index (0 - 255).Range: 0 - 4095.\r\n"
    "",
#ifdef UI_PETRA_API_ADD_EXAMPLE
    "Examples:\n\r" 
    "  soc_ppd_api lag set lag_ndx 0 lb_type 0 members_index 0 member_id 0 sys_port 0\n\r"
    "  nof_entries 0\n\r"
#endif
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_LAG_SET_SET_ID), 
    LAST_ORDINAL,
      /*
       * Pointer to a function to call after symbolic parameter
       * has been accepted.
       */
    (VAL_PROC_PTR)NULL
  },
  {
    SOC_PARAM_PPD_LAG_SET_SET_LAG_INFO_MEMBERS_MEMBER_ID_ID,
    "members",
    (PARAM_VAL_RULES *)&soc_petra_api_members_vals[0],
    (sizeof(soc_petra_api_members_vals) / sizeof(soc_petra_api_members_vals[0])) - 1,
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,
    0,0,0,0,0,0,0,
    "  info.lag_member_sys_ports[ prm_lag_member_sys_ports_index].sys_port:\r\n"
    "  System Physical Port indexes of the ports that are members of the specified\r\n"
    "  LAG.The index of the System Physical Port in the array is its lag membership\r\n"
    "  index (0 - 255).Range: 0 - 4095.\r\n"
    "",
#ifdef UI_PETRA_API_ADD_EXAMPLE
    "Examples:\n\r" 
    "  soc_ppd_api lag set lag_ndx 0 lb_type 0 members_index 0 member_id 0 sys_port 0\n\r"
    "  nof_entries 0\n\r"
#endif
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_LAG_SET_SET_ID), 
    LAST_ORDINAL,
      /*
       * Pointer to a function to call after symbolic parameter
       * has been accepted.
       */
    (VAL_PROC_PTR)NULL
  },
  { 
    SOC_PARAM_PPD_LAG_GET_GET_ID, 
    "get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Configure a LAG.A LAG is defined by a group of System Physical Ports that\n\r"
    "  compose it. This configuration affects\n\r"
    "  1. LAG resolution: when the destination of packet is LAG\n\r"
    "  2. Learning: when packet source port belongs to LAG, then the LAG is learnt.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lag get lag_ndx 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_LAG_GET_GET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LAG_GET_GET_LAG_NDX_ID, 
    "lag_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  lag_ndx:\n\r"
    "  LAG ID. Range: 0 - 255.	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lag get lag_ndx 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_LAG_GET_GET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LAG_MEMBER_ADD_MEMBER_ADD_ID, 
    "member_add", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Add a system port as a member in LAG.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lag member_add lag_ndx 0 member_id 0 sys_port 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_LAG_MEMBER_ADD_MEMBER_ADD_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LAG_MEMBER_ADD_MEMBER_ADD_LAG_NDX_ID, 
    "lag_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  lag_ndx:\n\r"
    "  LAG ID. Range: 0 - 255.	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lag member_add lag_ndx 0 member_id 0 sys_port 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_LAG_MEMBER_ADD_MEMBER_ADD_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LAG_MEMBER_ADD_MEMBER_ADD_MEMBER_MEMBER_ID_ID, 
    "member_id", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  member.member_id:\n\r"
    "  The LAG member index. This index is not relevant for LAG-based pruning. It is\n\r"
    "  embedded in the FTMH (SRC_SYS_PORT field), and can be used by the CPU.Range:\n\r"
    "  0 - 15. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lag member_add lag_ndx 0 member_id 0 sys_port 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_LAG_MEMBER_ADD_MEMBER_ADD_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LAG_MEMBER_ADD_MEMBER_ADD_MEMBER_SYS_PORT_ID, 
    "sys_port", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  member.sys_port:\n\r"
    "  System Physical Port index of the port that is a member of the specified\n\r"
    "  LAG.Range: 0 - 4095.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lag member_add lag_ndx 0 member_id 0 sys_port 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_LAG_MEMBER_ADD_MEMBER_ADD_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LAG_MEMBER_REMOVE_MEMBER_REMOVE_ID, 
    "member_remove", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Remove a system port from a LAG.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lag member_remove lag_ndx 0 sys_port 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_LAG_MEMBER_REMOVE_MEMBER_REMOVE_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LAG_MEMBER_REMOVE_MEMBER_REMOVE_LAG_NDX_ID, 
    "lag_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  lag_ndx:\n\r"
    "  LAG ID. Range: 0 - 255.	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lag member_remove lag_ndx 0 sys_port 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_LAG_MEMBER_REMOVE_MEMBER_REMOVE_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LAG_MEMBER_REMOVE_MEMBER_REMOVE_SYS_PORT_ID, 
    "sys_port", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  sys_port:\n\r"
    "  System port to be removed as a member.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lag member_remove lag_ndx 0 sys_port 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_LAG_MEMBER_REMOVE_MEMBER_REMOVE_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LAG_HASHING_GLOBAL_INFO_SET_HASHING_GLOBAL_INFO_SET_ID, 
    "hashing_global_info_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set the LAG hashing global attributes\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lag hashing_global_info_set key_shift 0 hash_func_id 0\n\r"
    "  is_symmetric_key 0 seed 0 use_port_id 0 expect_cw 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_LAG_HASHING_GLOBAL_INFO_SET_HASHING_GLOBAL_INFO_SET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LAG_HASHING_GLOBAL_INFO_SET_HASHING_GLOBAL_INFO_SET_GLBL_HASH_INFO_KEY_SHIFT_ID, 
    "key_shift", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  glbl_hash_info.key_shift:\n\r"
    "  The load balancing key is barrel shifted by this value.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lag hashing_global_info_set key_shift 0 hash_func_id 0\n\r"
    "  is_symmetric_key 0 seed 0 use_port_id 0 expect_cw 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_LAG_HASHING_GLOBAL_INFO_SET_HASHING_GLOBAL_INFO_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LAG_HASHING_GLOBAL_INFO_SET_HASHING_GLOBAL_INFO_SET_GLBL_HASH_INFO_HASH_FUNC_ID_ID, 
    "hash_func_id", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  glbl_hash_info.hash_func_id:\n\r"
    "  Selects one of four options for the LB key generation:\n\r"
    "  2'd0 - Use CRC 8 with polynomial 0x14D\n\r"
    "  2'd1 - Use CRC 8 with polynomial 0x1C3\n\r"
    "  2'd2 - Use CRC 8 with polynomial 0x1CF\n\r"
    "  2'b3 - Use LB-Key-Packet-Data directly\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lag hashing_global_info_set key_shift 0 hash_func_id 0\n\r"
    "  is_symmetric_key 0 seed 0 use_port_id 0 expect_cw 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_LAG_HASHING_GLOBAL_INFO_SET_HASHING_GLOBAL_INFO_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LAG_HASHING_GLOBAL_INFO_SET_HASHING_GLOBAL_INFO_SET_GLBL_HASH_INFO_SEED_ID, 
    "seed", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  glbl_hash_info.seed:\n\r"
    "  Initial value for the LB key generation\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lag hashing_global_info_set key_shift 0 hash_func_id 0\n\r"
    "  is_symmetric_key 0 seed 0 use_port_id 0 expect_cw 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_LAG_HASHING_GLOBAL_INFO_SET_HASHING_GLOBAL_INFO_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LAG_HASHING_GLOBAL_INFO_SET_HASHING_GLOBAL_INFO_SET_GLBL_HASH_INFO_USE_PORT_ID_ID, 
    "use_port_id", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  glbl_hash_info.use_port_id:\n\r"
    "  If set the In-PP-Port is used in the CRC vectors\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lag hashing_global_info_set key_shift 0 hash_func_id 0\n\r"
    "  is_symmetric_key 0 seed 0 use_port_id 0 expect_cw 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_LAG_HASHING_GLOBAL_INFO_SET_HASHING_GLOBAL_INFO_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LAG_HASHING_GLOBAL_INFO_GET_HASHING_GLOBAL_INFO_GET_ID, 
    "hashing_global_info_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set the LAG hashing global attributes\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lag hashing_global_info_get\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_LAG_HASHING_GLOBAL_INFO_GET_HASHING_GLOBAL_INFO_GET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LAG_HASHING_PORT_INFO_SET_HASHING_PORT_INFO_SET_ID, 
    "hashing_port_info_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set the LAG hashing per-lag attributes\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lag hashing_port_info_set port_ndx 0 first_header_to_parse 0\n\r"
    "  nof_headers 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_LAG_HASHING_PORT_INFO_SET_HASHING_PORT_INFO_SET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LAG_HASHING_PORT_INFO_SET_HASHING_PORT_INFO_SET_PORT_NDX_ID, 
    "port_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  port_ndx:\n\r"
    "  In-PP Port ID	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lag hashing_port_info_set port_ndx 0 first_header_to_parse 0\n\r"
    "  nof_headers 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_LAG_HASHING_PORT_INFO_SET_HASHING_PORT_INFO_SET_ID), 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LAG_HASHING_PORT_INFO_SET_HASHING_PORT_INFO_SET_LAG_HASH_INFO_FIRST_HEADER_TO_PARSE_ID, 
    "first_header_to_parse", 
    (PARAM_VAL_RULES *)&SOC_PPC_LAG_HASH_FRST_HDR_rule[0], 
    (sizeof(SOC_PPC_LAG_HASH_FRST_HDR_rule) / sizeof(SOC_PPC_LAG_HASH_FRST_HDR_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  lag_hash_info.first_header_to_parse:\n\r"
    "  First header to parse. May be the forwarding header, or the last terminated\n\r"
    "  header. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lag hashing_port_info_set port_ndx 0 first_header_to_parse 0\n\r"
    "  nof_headers 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_LAG_HASHING_PORT_INFO_SET_HASHING_PORT_INFO_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LAG_HASHING_PORT_INFO_SET_HASHING_PORT_INFO_SET_LAG_HASH_INFO_NOF_HEADERS_ID, 
    "nof_headers", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  lag_hash_info.nof_headers:\n\r"
    "  Number of headers to parse.Range: 0-3\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lag hashing_port_info_set port_ndx 0 first_header_to_parse 0\n\r"
    "  nof_headers 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_LAG_HASHING_PORT_INFO_SET_HASHING_PORT_INFO_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LAG_HASHING_PORT_INFO_GET_HASHING_PORT_INFO_GET_ID, 
    "hashing_port_info_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set the LAG hashing per-lag attributes\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lag hashing_port_info_get port_ndx 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_LAG_HASHING_PORT_INFO_GET_HASHING_PORT_INFO_GET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LAG_HASHING_PORT_INFO_GET_HASHING_PORT_INFO_GET_PORT_NDX_ID, 
    "port_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  port_ndx:\n\r"
    "  In-PP Port ID	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lag hashing_port_info_get port_ndx 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_LAG_HASHING_PORT_INFO_GET_HASHING_PORT_INFO_GET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LAG_HASHING_MASK_SET_HASHING_MASK_SET_ID, 
    "hashing_mask_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Mask / unmask fields from the packet header.Masked fields are ignored by the\n\r"
    "  hashing function\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lag hashing_mask_set masks 0x1\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_LAG_HASHING_MASK_SET_HASHING_MASK_SET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LAG_HASHING_MASK_SET_HASHING_MASK_SET_MASKS_ID, 
    "fields_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
#ifdef COMPILER_STRING_CONST_LIMIT
    "  Full documentation cannot be displayed with -pendantic compiler\n\r",
#else
    "  masks:\n\r"
    "  Bitmap of packet header fields.Asserted bits are ignored by the hashing\n\r"
    "  function\n\r"
    "    MAC_SA = 0x1\n\r"
    "    MAC_DA = 0x2\n\r"
    "    VSI = 0x4\n\r"
    "    ETH_TYPE_CODE = 0x8\n\r"
    "    MPLS_LABEL_1 = 0x10\n\r"
    "    MPLS_LABEL_2 = 0x20\n\r"
    "    MPLS_LABEL_3 = 0x40\n\r"
    "    IPV4_SIP = 0x80\n\r"
    "    IPV4_DIP = 0x100\n\r"
    "    IPV4_PROTOCOL = 0x200\n\r"
    "    IPV6_SIP = 0x400\n\r"
    "    IPV6_DIP = 0x800\n\r"
    "    IPV6_PROTOCOL = 0x1000\n\r"
    "    L4_SRC_PORT = 0x2000\n\r"
    "    L4_DEST_PORT = 0x4000\n\r"
    "    FC_DEST_ID = 0x8000\n\r"
    "    FC_SRC_ID = 0x10000\n\r"
    "    FC_SEQ_ID = 0x20000\n\r"
    "    FC_ORG_EX_ID = 0x40000\n\r"
    "    FC_RES_EX_ID = 0x80000\n\r"
    "",
#endif /* COMPILER_STRING_CONST_LIMIT */
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lag hashing_mask_set masks 0x1\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_LAG_HASHING_MASK_SET_HASHING_MASK_SET_ID), 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LAG_HASHING_MASK_SET_HASHING_MASK_SET_MASK_INFO_EXPECT_CW_ID, 
    "expect_cw", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  mask_info.expect_cw:\n\r"
    "  For MPLS packetsIf set then a control word is searched for after an MPLS\n\r"
    "  label with a BOS indication.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lag hashing_mask_set expect_cw 0 is_symmetric_key 0 mask 0x1\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_LAG_HASHING_MASK_SET_HASHING_MASK_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LAG_HASHING_MASK_SET_HASHING_MASK_SET_MASK_INFO_IS_SYMMETRIC_KEY_ID, 
    "is_symmetric_key", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  mask_info.is_symmetric_key:\n\r"
    "  Enable using the same key for the two peers of the connection.The destination\n\r"
    "  and source addresses are XORed, and not taken as is.E.G: IPv4 Asymmetric key\n\r"
    "  is '{IPv4-Dst-IP, IPv4-Src-IP, Protocol}' and Symmetric key is '{32'b0,\n\r"
    "  (IPv4-Dst-IP XOR IPv4-Src-IP), Protocol}'.Note: symmetric key relevant only\n\r"
    "  for unmasked fileds.E.g for the above example both SIP and DIP has to be\n\r"
    "  unmasked to obtain actual symmetric key.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lag hashing_mask_set expect_cw 0 is_symmetric_key 0 mask 0x1\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_LAG_HASHING_MASK_SET_HASHING_MASK_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_LAG_HASHING_MASK_SET_HASHING_MASK_SET_MASKS_REMOVE_ID, 
    "field_remove", 
    (PARAM_VAL_RULES *)&SOC_PPC_HASH_MASKS_rule[0], 
    (sizeof(SOC_PPC_HASH_MASKS_rule) / sizeof(SOC_PPC_HASH_MASKS_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  masks:\n\r"
    "  Bitmap of packet header fields.Asserted bits are ignored by the hashing\n\r"
    "  function\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lag hashing_mask_set masks 0x1\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_LAG_HASHING_MASK_SET_HASHING_MASK_SET_ID), 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  }, 
  { 
    SOC_PARAM_PPD_LAG_HASHING_MASK_SET_HASHING_MASK_SET_MASKS_ADD_ID, 
    "field_add", 
    (PARAM_VAL_RULES *)&SOC_PPC_HASH_MASKS_rule[0], 
    (sizeof(SOC_PPC_HASH_MASKS_rule) / sizeof(SOC_PPC_HASH_MASKS_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  masks:\n\r"
    "  Bitmap of packet header fields.Asserted bits are ignored by the hashing\n\r"
    "  function\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lag hashing_mask_set masks 0x1\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_LAG_HASHING_MASK_SET_HASHING_MASK_SET_ID), 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  

  { 
    SOC_PARAM_PPD_LAG_HASHING_MASK_GET_HASHING_MASK_GET_ID, 
    "hashing_mask_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Mask / unmask fields from the packet header.Masked fields are ignored by the\n\r"
    "  hashing function\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api lag hashing_mask_get\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_LAG_HASHING_MASK_GET_HASHING_MASK_GET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
    
  { 
    SOC_PARAM_PPD_API_LAG_ID, 
    "lag", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "",
    "", 
    "",
    BIT_UI_16_RNG(SOC_FUN_PPD_API_LAG_FIRST_ID,SOC_FUN_PPD_API_LAG_LAST_ID), 
    1, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
#endif /* } lag*/

#ifdef UI_TRAP_MGMT/* { trap_mgmt*/
  { 
    SOC_PARAM_PPD_TRAP_FRWRD_PROFILE_INFO_SET_TRAP_FRWRD_PROFILE_INFO_SET_ID, 
    "frwrd_profile_info_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set forwarding action profile information.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api trap_mgmt trap_frwrd_profile_info_set profile_ndx 0\n\r"
    "  frwrd_offset_index 0 is_control 0 is_trap 0 enable_learning 0\n\r"
    "  ethernet_police_id 0 meter_command 0 meter_id 0 meter_select 0 counter_id 0\n\r"
    "  pointer_select 0 dp 0 tc 0 vsi_shift 0 add_vsi 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 is_oam_dest 0 bitmap_mask\n\r"
    "  0 strength 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(2)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_TRAP_FRWRD_PROFILE_INFO_SET_TRAP_FRWRD_PROFILE_INFO_SET_PROFILE_NDX_ID, 
    "trap_code_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals/*SOC_PPC_TRAP_CODE_rule*/[0], 
    (sizeof(soc_ppd_api_free_vals/*SOC_PPC_TRAP_CODE_rule*/) / sizeof(soc_ppd_api_free_vals/*SOC_PPC_TRAP_CODE_rule*/[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  trap_code_ndx:\n\r"
    "  Trap code. Range: 0 - 255. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api trap_mgmt trap_frwrd_profile_info_set profile_ndx 0\n\r"
    "  frwrd_offset_index 0 is_control 0 is_trap 0 enable_learning 0\n\r"
    "  ethernet_police_id 0 meter_command 0 meter_id 0 meter_select 0 counter_id 0\n\r"
    "  pointer_select 0 dp 0 tc 0 vsi_shift 0 add_vsi 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 is_oam_dest 0 bitmap_mask\n\r"
    "  0 strength 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(2)}, 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_TRAP_FRWRD_PROFILE_INFO_SET_TRAP_FRWRD_PROFILE_INFO_SET_PROFILE_INFO_PROCESSING_INFO_FRWRD_OFFSET_INDEX_ID, 
    "frwrd_offset_index", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  profile_info.processing_info.frwrd_offset_index:\n\r"
    "  Petra-B only. T20E has to be 0.Index in the packet header determines the\n\r"
    "  forwarding header of the packet. Range: 0 - 7.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api trap_mgmt trap_frwrd_profile_info_set profile_ndx 0\n\r"
    "  frwrd_offset_index 0 is_control 0 is_trap 0 enable_learning 0\n\r"
    "  ethernet_police_id 0 meter_command 0 meter_id 0 meter_select 0 counter_id 0\n\r"
    "  pointer_select 0 dp 0 tc 0 vsi_shift 0 add_vsi 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 is_oam_dest 0 bitmap_mask\n\r"
    "  0 strength 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(2)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_TRAP_FRWRD_PROFILE_INFO_SET_TRAP_FRWRD_PROFILE_INFO_SET_PROFILE_INFO_PROCESSING_INFO_IS_CONTROL_ID, 
    "is_control", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  profile_info.processing_info.is_control:\n\r"
    "  Indicates that packet is control packet. If TRUE, packet bypasses all filters\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api trap_mgmt trap_frwrd_profile_info_set profile_ndx 0\n\r"
    "  frwrd_offset_index 0 is_control 0 is_trap 0 enable_learning 0\n\r"
    "  ethernet_police_id 0 meter_command 0 meter_id 0 meter_select 0 counter_id 0\n\r"
    "  pointer_select 0 dp 0 tc 0 vsi_shift 0 add_vsi 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 is_oam_dest 0 bitmap_mask\n\r"
    "  0 strength 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(2)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_TRAP_FRWRD_PROFILE_INFO_SET_TRAP_FRWRD_PROFILE_INFO_SET_PROFILE_INFO_PROCESSING_INFO_IS_TRAP_ID, 
    "is_trap", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  profile_info.processing_info.is_trap:\n\r"
    "  Indicates whether the packet is trapped to CPU. If TRUE the CPU-Trap-Code and\n\r"
    "  the corresponding Cpu-Trap-Qualifier is inserted into the packet header.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api trap_mgmt trap_frwrd_profile_info_set profile_ndx 0\n\r"
    "  frwrd_offset_index 0 is_control 0 is_trap 0 enable_learning 0\n\r"
    "  ethernet_police_id 0 meter_command 0 meter_id 0 meter_select 0 counter_id 0\n\r"
    "  pointer_select 0 dp 0 tc 0 vsi_shift 0 add_vsi 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 is_oam_dest 0 bitmap_mask\n\r"
    "  0 strength 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(2)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_TRAP_FRWRD_PROFILE_INFO_SET_TRAP_FRWRD_PROFILE_INFO_SET_PROFILE_INFO_PROCESSING_INFO_ENABLE_LEARNING_ID, 
    "enable_learning", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  profile_info.processing_info.enable_learning:\n\r"
    "  Set to FALSE to disable learning for packets assigned with this action\n\r"
    "  profile. Set to TRUE will enable learning.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api trap_mgmt trap_frwrd_profile_info_set profile_ndx 0\n\r"
    "  frwrd_offset_index 0 is_control 0 is_trap 0 enable_learning 0\n\r"
    "  ethernet_police_id 0 meter_command 0 meter_id 0 meter_select 0 counter_id 0\n\r"
    "  pointer_select 0 dp 0 tc 0 vsi_shift 0 add_vsi 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 is_oam_dest 0 bitmap_mask\n\r"
    "  0 strength 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(2)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_TRAP_FRWRD_PROFILE_INFO_SET_TRAP_FRWRD_PROFILE_INFO_SET_PROFILE_INFO_POLICING_INFO_ETHERNET_POLICE_ID_ID, 
    "ethernet_police_id", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  profile_info.policing_info.ethernet_police_id:\n\r"
    "  Ethernet policer to associate with the packets. Range: 0 - 511.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api trap_mgmt trap_frwrd_profile_info_set profile_ndx 0\n\r"
    "  frwrd_offset_index 0 is_control 0 is_trap 0 enable_learning 0\n\r"
    "  ethernet_police_id 0 meter_command 0 meter_id 0 meter_select 0 counter_id 0\n\r"
    "  pointer_select 0 dp 0 tc 0 vsi_shift 0 add_vsi 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 is_oam_dest 0 bitmap_mask\n\r"
    "  0 strength 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(2)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_TRAP_FRWRD_PROFILE_INFO_SET_TRAP_FRWRD_PROFILE_INFO_SET_PROFILE_INFO_METER_INFO_METER_COMMAND_ID, 
    "meter_command", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  profile_info.meter_info.meter_command:\n\r"
    "  Identifies how to apply the meter result to the packet copy made with this\n\r"
    "  action. Used by the Traffic Manager Action. Range: 0 - 3.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api trap_mgmt trap_frwrd_profile_info_set profile_ndx 0\n\r"
    "  frwrd_offset_index 0 is_control 0 is_trap 0 enable_learning 0\n\r"
    "  ethernet_police_id 0 meter_command 0 meter_id 0 meter_select 0 counter_id 0\n\r"
    "  pointer_select 0 dp 0 tc 0 vsi_shift 0 add_vsi 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 is_oam_dest 0 bitmap_mask\n\r"
    "  0 strength 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(2)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_TRAP_FRWRD_PROFILE_INFO_SET_TRAP_FRWRD_PROFILE_INFO_SET_PROFILE_INFO_METER_INFO_METER_ID_ID, 
    "meter_id", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  profile_info.meter_info.meter_id:\n\r"
    "  The meter to associate with the packets. Range: 0 - 4095.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api trap_mgmt trap_frwrd_profile_info_set profile_ndx 0\n\r"
    "  frwrd_offset_index 0 is_control 0 is_trap 0 enable_learning 0\n\r"
    "  ethernet_police_id 0 meter_command 0 meter_id 0 meter_select 0 counter_id 0\n\r"
    "  pointer_select 0 dp 0 tc 0 vsi_shift 0 add_vsi 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 is_oam_dest 0 bitmap_mask\n\r"
    "  0 strength 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(2)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_TRAP_FRWRD_PROFILE_INFO_SET_TRAP_FRWRD_PROFILE_INFO_SET_PROFILE_INFO_METER_INFO_METER_SELECT_ID, 
    "meter_select", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  profile_info.meter_info.meter_select:\n\r"
    "  For each packet, up to two meters may be performed. Thus, two meter pointers\n\r"
    "  are associated with each packet-this selects one of these pointers.Range: 0 -\n\r"
    "  1.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api trap_mgmt trap_frwrd_profile_info_set profile_ndx 0\n\r"
    "  frwrd_offset_index 0 is_control 0 is_trap 0 enable_learning 0\n\r"
    "  ethernet_police_id 0 meter_command 0 meter_id 0 meter_select 0 counter_id 0\n\r"
    "  pointer_select 0 dp 0 tc 0 vsi_shift 0 add_vsi 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 is_oam_dest 0 bitmap_mask\n\r"
    "  0 strength 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(2)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_TRAP_FRWRD_PROFILE_INFO_SET_TRAP_FRWRD_PROFILE_INFO_SET_PROFILE_INFO_COUNT_INFO_COUNTER_ID_ID, 
    "counter_id", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  profile_info.count_info.counter_id:\n\r"
    "  The counter to associate with the packets. Range: 0 - 4095.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api trap_mgmt trap_frwrd_profile_info_set profile_ndx 0\n\r"
    "  frwrd_offset_index 0 is_control 0 is_trap 0 enable_learning 0\n\r"
    "  ethernet_police_id 0 meter_command 0 meter_id 0 meter_select 0 counter_id 0\n\r"
    "  pointer_select 0 dp 0 tc 0 vsi_shift 0 add_vsi 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 is_oam_dest 0 bitmap_mask\n\r"
    "  0 strength 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(2)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_TRAP_FRWRD_PROFILE_INFO_SET_TRAP_FRWRD_PROFILE_INFO_SET_PROFILE_INFO_COUNT_INFO_POINTER_SELECT_ID, 
    "pointer_select", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  profile_info.count_info.pointer_select:\n\r"
    "  For each packet, up to two countings may be performed. Thus, two counter\n\r"
    "  pointers are associated with each packet-this selects one of these\n\r"
    "  pointers.Range: 0 - 1.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api trap_mgmt trap_frwrd_profile_info_set profile_ndx 0\n\r"
    "  frwrd_offset_index 0 is_control 0 is_trap 0 enable_learning 0\n\r"
    "  ethernet_police_id 0 meter_command 0 meter_id 0 meter_select 0 counter_id 0\n\r"
    "  pointer_select 0 dp 0 tc 0 vsi_shift 0 add_vsi 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 is_oam_dest 0 bitmap_mask\n\r"
    "  0 strength 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(2)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_TRAP_FRWRD_PROFILE_INFO_SET_TRAP_FRWRD_PROFILE_INFO_SET_PROFILE_INFO_COS_INFO_DP_ID, 
    "dp", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  profile_info.cos_info.dp:\n\r"
    "  Drop Precedence. Range: 0 -3\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api trap_mgmt trap_frwrd_profile_info_set profile_ndx 0\n\r"
    "  frwrd_offset_index 0 is_control 0 is_trap 0 enable_learning 0\n\r"
    "  ethernet_police_id 0 meter_command 0 meter_id 0 meter_select 0 counter_id 0\n\r"
    "  pointer_select 0 dp 0 tc 0 vsi_shift 0 add_vsi 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 is_oam_dest 0 bitmap_mask\n\r"
    "  0 strength 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(2)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_TRAP_FRWRD_PROFILE_INFO_SET_TRAP_FRWRD_PROFILE_INFO_SET_PROFILE_INFO_COS_INFO_TC_ID, 
    "tc", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  profile_info.cos_info.tc:\n\r"
    "  Traffic Class. Range: 0 -7.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api trap_mgmt trap_frwrd_profile_info_set profile_ndx 0\n\r"
    "  frwrd_offset_index 0 is_control 0 is_trap 0 enable_learning 0\n\r"
    "  ethernet_police_id 0 meter_command 0 meter_id 0 meter_select 0 counter_id 0\n\r"
    "  pointer_select 0 dp 0 tc 0 vsi_shift 0 add_vsi 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 is_oam_dest 0 bitmap_mask\n\r"
    "  0 strength 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(2)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_TRAP_FRWRD_PROFILE_INFO_SET_TRAP_FRWRD_PROFILE_INFO_SET_PROFILE_INFO_DEST_INFO_VSI_SHIFT_ID, 
    "vsi_shift", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  profile_info.dest_info.vsi_shift:\n\r"
    "  When add_vsi is TRUE, the packets belonging to VSI v will be forwarded to\n\r"
    "  destination: dest + (v << vsi_shift).\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api trap_mgmt trap_frwrd_profile_info_set profile_ndx 0\n\r"
    "  frwrd_offset_index 0 is_control 0 is_trap 0 enable_learning 0\n\r"
    "  ethernet_police_id 0 meter_command 0 meter_id 0 meter_select 0 counter_id 0\n\r"
    "  pointer_select 0 dp 0 tc 0 vsi_shift 0 add_vsi 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 is_oam_dest 0 bitmap_mask\n\r"
    "  0 strength 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(2)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_TRAP_FRWRD_PROFILE_INFO_SET_TRAP_FRWRD_PROFILE_INFO_SET_PROFILE_INFO_DEST_INFO_ADD_VSI_ID, 
    "add_vsi",
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  profile_info.dest_info.add_vsi:\n\r"
    "  Indicates that the VSI value should be added to the Forward-Destination,\n\r"
    "  i.e., the Forward-Destination above is to be treated as a base value. This is\n\r"
    "  useful to define the default VSI forwarding.Note: This considers the local\n\r"
    "  VSI and not the system VSI. For Snoop action, this has to be FALSE.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api trap_mgmt trap_frwrd_profile_info_set profile_ndx 0\n\r"
    "  frwrd_offset_index 0 is_control 0 is_trap 0 enable_learning 0\n\r"
    "  ethernet_police_id 0 meter_command 0 meter_id 0 meter_select 0 counter_id 0\n\r"
    "  pointer_select 0 dp 0 tc 0 vsi_shift 0 add_vsi 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 is_oam_dest 0 bitmap_mask\n\r"
    "  0 strength 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(2)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_DECISION_FD_TRAP_CODE_ID, 
    "fd_trap_code", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals/*SOC_PPC_TRAP_CODE_rule*/[0], 
    (sizeof(soc_ppd_api_free_vals/*SOC_PPC_TRAP_CODE_rule*/) / sizeof(soc_ppd_api_free_vals/*SOC_PPC_TRAP_CODE_rule*/[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pwe_info.default_frwrd.default_forwarding.additional_info.trap_info.trap_acti\n\r"
    "  n_profile_id:\n\r"
    "  Trapping action profile ID.Range: 0-15.Points to a database that holds\n\r"
    "  trapping options. The profile ID selects the CPU to handle the trap; The CPU\n\r"
    "  port ID; the priority of the message; etc.The TRAP action profile is\n\r"
    "  configured via soc_ppd_trap_mgmt_frwrd_profile_info_set()\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api vsi info_set vsi_ndx 0 enable_ip_snooping 0 limit_profile_id 0\n\r"
    "  fid_profile_id 0 enable_my_mac 0 stp_topology_id 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(2)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_DECISION_FD_FWD_STRENGTH_ID, 
    "fd_frwrd_strength", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pwe_info.default_frwrd.default_forwarding.additional_info.trap_info.trap_qual\n\r"
    "  fier:\n\r"
    "  Trap qualifier to be associated with the packet to identify the trap. Range:\n\r"
    "  0-4K.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api vsi info_set vsi_ndx 0 enable_ip_snooping 0 limit_profile_id 0\n\r"
    "  fid_profile_id 0 enable_my_mac 0 stp_topology_id 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(2)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_DECISION_FD_SNOOP_STRENGTH_ID,
    "fd_snp_strength", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pwe_info.default_frwrd.default_forwarding.additional_info.outlif.val:\n\r"
    "  Out-LIF value, according to type. May be AC / EEP / VSI\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api vsi info_set vsi_ndx 0 enable_ip_snooping 0 limit_profile_id 0\n\r"
    "  fid_profile_id 0 enable_my_mac 0 stp_topology_id 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(2)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_DECISION_FD_AC_ID,
    "fd_ac_id", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pwe_info.default_frwrd.default_forwarding.additional_info.outlif.val:\n\r"
    "  Out-LIF value, according to type. May be AC / EEP / VSI\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api vsi info_set vsi_ndx 0 enable_ip_snooping 0 limit_profile_id 0\n\r"
    "  fid_profile_id 0 enable_my_mac 0 stp_topology_id 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(2)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_DECISION_FD_EEP_NDX_ID,
    "fd_eep_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pwe_info.default_frwrd.default_forwarding.additional_info.outlif.val:\n\r"
    "  Out-LIF value, according to type. May be AC / EEP / VSI\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api vsi info_set vsi_ndx 0 enable_ip_snooping 0 limit_profile_id 0\n\r"
    "  fid_profile_id 0 enable_my_mac 0 stp_topology_id 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(2)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_DECISION_FD_PUSH_PROFILE_ID, 
    "fd_push_profile", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pwe_info.default_frwrd.default_forwarding.additional_info.eei.val.mpls_comman\n\r"
    "  .push_profile:\n\r"
    "  If the command is push, this is the push profile used to construct the\n\r"
    "  label's TTL and EXP.Otherwise, this field is ignored.Range: 0 - 7.EEI may\n\r"
    "  include the MPLS command, but then the command cannot be Push with\n\r"
    "  push_profile 0. See SOC_PPC_EEI.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api vsi info_set vsi_ndx 0 enable_ip_snooping 0 limit_profile_id 0\n\r"
    "  fid_profile_id 0 enable_my_mac 0 stp_topology_id 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(2)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_DECISION_FD_LABEL_ID, 
    "fd_label", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pwe_info.default_frwrd.default_forwarding.additional_info.eei.val.mpls_comman\n\r"
    "  .label:\n\r"
    "  Label. Relevant if the command is push or swap.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api vsi info_set vsi_ndx 0 enable_ip_snooping 0 limit_profile_id 0\n\r"
    "  fid_profile_id 0 enable_my_mac 0 stp_topology_id 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(2)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_DECISION_FD_IS_LAG_ID, 
    "fd_is_lag", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pwe_info.default_frwrd.default_forwarding.additional_info.eei.val.trill_dest.\n\r"
    "  s_multicast:\n\r"
    "  Is the TRILL packet is sent as multicast (flooded in the Distribution Tree)\n\r"
    "  or sent as Unicast to Egress Nick.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api vsi info_set vsi_ndx 0 enable_ip_snooping 0 limit_profile_id 0\n\r"
    "  fid_profile_id 0 enable_my_mac 0 stp_topology_id 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(2)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_DECISION_FD_DEST_ID, 
    "fd_dest_id", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pwe_info.default_frwrd.default_forwarding.dest_id:\n\r"
    "  Destination ID, according to type.Multicast: MIDFEC:\n\r"
    "  FEC IDTrap:\n\r"
    "  IgnoredDrop:\n\r"
    "  IgnoredUnicast:\n\r"
    "  System port. When LAG, the user should\n\r"
    "  use SOC_PPD_LAG_ID(lag-id). When system\n\r"
    "  port is with allocated QoS resources the\n\r"
    "  user should use\n\r"
    "  SOC_PPD_DIRECT_FLOW_ID(flow-id)\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api vsi info_set vsi_ndx 0 enable_ip_snooping 0 limit_profile_id 0\n\r"
    "  fid_profile_id 0 enable_my_mac 0 stp_topology_id 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(2)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FRWRD_DECISION_FD_TYPE_ID, 
    "fd_type",
    (PARAM_VAL_RULES *)&SOC_PPD_FRWRD_DECISION_MACRO_TYPE_rule[0], 
    (sizeof(SOC_PPD_FRWRD_DECISION_MACRO_TYPE_rule) / sizeof(SOC_PPD_FRWRD_DECISION_MACRO_TYPE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pwe_info.default_frwrd.default_forwarding.type:\n\r"
    "  Forwarding decision type:Unicast without FEC; Multicast without FEC; FEC;\n\r"
    "  Drop or Trap\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api vsi info_set vsi_ndx 0 enable_ip_snooping 0 limit_profile_id 0\n\r"
    "  fid_profile_id 0 enable_my_mac 0 stp_topology_id 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(2)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_TRAP_FRWRD_PROFILE_INFO_SET_TRAP_FRWRD_PROFILE_INFO_SET_PROFILE_INFO_DEST_INFO_IS_OAM_DEST_ID, 
    "is_oam_dest", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  profile_info.dest_info.is_oam_dest:\n\r"
    "  is the packet designated to the OAM processor. T20E only.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api trap_mgmt trap_frwrd_profile_info_set profile_ndx 0\n\r"
    "  frwrd_offset_index 0 is_control 0 is_trap 0 enable_learning 0\n\r"
    "  ethernet_police_id 0 meter_command 0 meter_id 0 meter_select 0 counter_id 0\n\r"
    "  pointer_select 0 dp 0 tc 0 vsi_shift 0 add_vsi 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 is_oam_dest 0 bitmap_mask\n\r"
    "  0 strength 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(2)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_TRAP_FRWRD_PROFILE_INFO_SET_TRAP_FRWRD_PROFILE_INFO_SET_PROFILE_INFO_STRENGTH_ID, 
    "strength", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  profile_info.strength:\n\r"
    "  Value that identifies the strength of the assignment of Destination\n\r"
    "  parameters to the packet. Through the packet processing pipe, many forwarding\n\r"
    "  decisions may be taken; yet one decision may overwrite a former decision only\n\r"
    "  if it stronger, i.e., its strength is higher than the last decision that was\n\r"
    "  taken.\n\r"
    "  Range: 0 - 7.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api trap_mgmt trap_frwrd_profile_info_set profile_ndx 0\n\r"
    "  frwrd_offset_index 0 is_control 0 is_trap 0 enable_learning 0\n\r"
    "  ethernet_police_id 0 meter_command 0 meter_id 0 meter_select 0 counter_id 0\n\r"
    "  pointer_select 0 dp 0 tc 0 vsi_shift 0 add_vsi 0 trap_action_profile_id 0\n\r"
    "  trap_qualifier 0 val 0 type 0 isid 0 push_profile 0 label 0 command 0\n\r"
    "  dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0 is_oam_dest 0 bitmap_mask\n\r"
    "  0 strength 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(2)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_TRAP_FRWRD_PROFILE_INFO_GET_TRAP_FRWRD_PROFILE_INFO_GET_ID, 
    "frwrd_profile_info_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set forwarding action profile information.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api trap_mgmt trap_frwrd_profile_info_get profile_ndx 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(3)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_TRAP_FRWRD_PROFILE_INFO_GET_TRAP_FRWRD_PROFILE_INFO_GET_PROFILE_NDX_ID, 
    "trap_code_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals/*SOC_PPC_TRAP_CODE_rule*/[0], 
    (sizeof(soc_ppd_api_free_vals/*SOC_PPC_TRAP_CODE_rule*/) / sizeof(soc_ppd_api_free_vals/*SOC_PPC_TRAP_CODE_rule*/[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  trap_code_ndx:\n\r"
    "  Trap code. Range: 0 - 255. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api trap_mgmt trap_frwrd_profile_info_get profile_ndx 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(3)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_TRAP_SNOOP_PROFILE_INFO_SET_TRAP_SNOOP_PROFILE_INFO_SET_ID, 
    "snoop_profile_info_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set snoop action profile information.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api trap_mgmt trap_snoop_profile_info_set profile_ndx 0\n\r"
    "  sampling_probability 0 size 0 meter_command 0 meter_id 0 meter_select 0\n\r"
    "  counter_id 0 pointer_select 0 dp 0 tc 0 vsi_shift 0 add_vsi 0\n\r"
    "  trap_action_profile_id 0 trap_qualifier 0 val 0 type 0 isid 0 push_profile 0\n\r"
    "  label 0 command 0 dest_nick 0 is_multicast 0 type 0 dest_id 0 type 0\n\r"
    "  is_oam_dest 0 bitmap_mask 0 strength 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(4)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_TRAP_SNOOP_PROFILE_INFO_SET_TRAP_SNOOP_PROFILE_INFO_SET_PROFILE_NDX_ID, 
    "trap_code_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals/*SOC_PPC_TRAP_CODE_rule*/[0], 
    (sizeof(soc_ppd_api_free_vals/*SOC_PPC_TRAP_CODE_rule*/) / sizeof(soc_ppd_api_free_vals/*SOC_PPC_TRAP_CODE_rule*/[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  trap_code_ndx:\n\r"
    "  Trap code. Range: 0 - 255. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api trap_mgmt trap_snoop_profile_info_set profile_ndx 0\n\r"
    "  snoop_cmnd 0 strength 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(4)}, 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_TRAP_SNOOP_PROFILE_INFO_SET_TRAP_SNOOP_PROFILE_INFO_SET_PROFILE_INFO_SNOOP_CMND_ID, 
    "snoop_cmnd", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  profile_info.snoop_cmnd:\n\r"
    "  T20E only. Snoop command (2 bits) set in the system headers \n\r"
    "  and sent to Petra. The snooping is configured and performed by.\n\r"
    "  the Petra-TM. Snoop command zero means no Snooping, \n\r"
    "  to configure the snoop command use Petra-TM api, see Petra-TM UM\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api trap_mgmt trap_snoop_profile_info_set profile_ndx 0\n\r"
    "  snoop_cmnd 0 strength 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(4)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_TRAP_SNOOP_PROFILE_INFO_SET_TRAP_SNOOP_PROFILE_INFO_SET_PROFILE_INFO_STRENGTH_ID, 
    "strength", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  profile_info.strength:\n\r"
    "  Value that identifies the strength of the assignment of Destination\n\r"
    "  parameters to the packet. Through the packet processing pipe, many forwarding\n\r"
    "  decisions may be taken; yet one decision may overwrite a former decision only\n\r"
    "  if it stronger, i.e., its strength is higher than the last decision that was\n\r"
    "  taken.\n\r"
    "  Range: 0 - 7.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api trap_mgmt trap_snoop_profile_info_set profile_ndx 0\n\r"
    "  snoop_cmnd 0 strength 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(4)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_TRAP_SNOOP_PROFILE_INFO_GET_TRAP_SNOOP_PROFILE_INFO_GET_ID, 
    "snoop_profile_info_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set snoop action profile information.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api trap_mgmt trap_snoop_profile_info_get profile_ndx 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(5)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_TRAP_SNOOP_PROFILE_INFO_GET_TRAP_SNOOP_PROFILE_INFO_GET_PROFILE_NDX_ID, 
    "trap_code_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals/*SOC_PPC_TRAP_CODE_rule*/[0], 
    (sizeof(soc_ppd_api_free_vals/*SOC_PPC_TRAP_CODE_rule*/) / sizeof(soc_ppd_api_free_vals/*SOC_PPC_TRAP_CODE_rule*/[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  trap_code_ndx:\n\r"
    "  Trap code. Range: 0 - 255. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api trap_mgmt trap_snoop_profile_info_get profile_ndx 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(5)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_TRAP_MACT_EVENT_GET_TRAP_MACT_EVENT_GET_ID, 
    "mact_event_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Read MACT event from the events FIFO into buffer.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api trap_mgmt trap_mact_event_get\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(6)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_TRAP_MACT_EVENT_PARSE_TRAP_MACT_EVENT_PARSE_ID, 
    "mact_event_parse", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  The MACT may report different events using the event FIFO (e.g., learn, age,\n\r"
    "  transplant, and retrieve). This API Parses the event buffer into a meaningful\n\r"
    "  structure.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api trap_mgmt trap_mact_event_parse buff_index 0 buff 0 buff_len 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(7)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_TRAP_MACT_EVENT_PARSE_TRAP_MACT_EVENT_PARSE_BUFF_INDEX_ID, 
    "buff_index", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  buff_index:\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api trap_mgmt trap_mact_event_parse buff_index 0 buff 0 buff_len 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(7)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_TRAP_MACT_EVENT_PARSE_TRAP_MACT_EVENT_PARSE_BUFF_ID, 
    "buff", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  buff[ prm_buff_index]:\n\r"
    "  SOC_PPC_TRAP_EVENT_BUFF_MAX_SIZE]- 		Buffer includes MACT event	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api trap_mgmt trap_mact_event_parse buff_index 0 buff 0 buff_len 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(7)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_TRAP_MACT_EVENT_PARSE_TRAP_MACT_EVENT_PARSE_BUFF_LEN_ID, 
    "buff_len", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  buff_len:\n\r"
    "  the actual length of the given buffer (in bytes)	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api trap_mgmt trap_mact_event_parse buff_index 0 buff 0 buff_len 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(7)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_TRAP_PACKET_PARSE_TRAP_PACKET_PARSE_ID, 
    "packet_parse", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Parse a packet received as buffer, identifying the reason of trapping (if\n\r"
    "  any), the source system port, and pointer to the packet payload and\n\r"
    "  additional information. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api trap_mgmt trap_packet_parse buff 0 buff_len 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(8)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_TRAP_PACKET_PARSE_TRAP_PACKET_PARSE_BUFF_ID, 
    "print_packet", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  buff:\n\r"
    "  buffer includes the packet	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api trap_mgmt trap_packet_parse buff 0 buff_len 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(8)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_TRAP_PACKET_PARSE_TRAP_PACKET_PARSE_BUFF_LEN_ID, 
    "get_mode", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  buff_len:\n\r"
    "  The size of supplied 'buff' In bytes	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api trap_mgmt trap_packet_parse buff 0 buff_len 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(8)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },

  { 
    SOC_PARAM_PPD_TRAP_TO_EG_ACTION_MAP_SET_TRAP_TO_EG_ACTION_MAP_SET_ID, 
    "trap_to_eg_action_map_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Maps egress trap type to egress action profile.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api trap_mgmt trap_to_eg_action_map_set trap_type_ndx 0 eg_action_profile\n\r"
    "  0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(29)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_TRAP_TO_EG_ACTION_MAP_SET_TRAP_TO_EG_ACTION_MAP_SET_TRAP_TYPE_BITMAP_NDX_ID, 
    "trap_type_bitmap_ndx", 
    (PARAM_VAL_RULES *)&SOC_PPC_TRAP_EG_TYPE_rule[0], 
    (sizeof(SOC_PPC_TRAP_EG_TYPE_rule) / sizeof(SOC_PPC_TRAP_EG_TYPE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  trap_type_bitmap_ndx:\n\r"
    "  Trap Type bitmap, the cause for trapping/filtering the packets (for example\n\r"
    "  MTU). Use SOC_PB_PP_TRAP_EG_TYPE for bit offsets.	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api trap_mgmt trap_to_eg_action_map_set trap_type_bitmap_ndx 0\n\r"
    "  eg_action_profile 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(29)}, 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_TRAP_TO_EG_ACTION_MAP_SET_TRAP_TO_EG_ACTION_MAP_SET_EG_ACTION_PROFILE_ID, 
    "eg_action_profile", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  eg_action_profile:\n\r"
    "  Egress action profile, to process/forward the packet according. To set the\n\r"
    "  action pointed by this parameter use soc_ppd_trap_eg_profile_info_set(). Use\n\r"
    "  SOC_PPC_TRAP_EG_NO_ACTION in order to bypass this trapping and then the packet\n\r"
    "  will be processed/forwarded normal (as no trap was identified).\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api trap_mgmt trap_to_eg_action_map_set trap_type_ndx 0 eg_action_profile\n\r"
    "  0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(29)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_TRAP_TO_EG_ACTION_MAP_GET_TRAP_TO_EG_ACTION_MAP_GET_ID, 
    "trap_to_eg_action_map_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Maps egress trap type to egress action profile.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api trap_mgmt trap_to_eg_action_map_get trap_type_ndx 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(30)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_TRAP_TO_EG_ACTION_MAP_GET_TRAP_TO_EG_ACTION_MAP_GET_TRAP_TYPE_BITMAP_NDX_ID, 
    "trap_type_bitmap_ndx", 
    (PARAM_VAL_RULES *)&SOC_PPC_TRAP_EG_TYPE_rule[0], 
    (sizeof(SOC_PPC_TRAP_EG_TYPE_rule) / sizeof(SOC_PPC_TRAP_EG_TYPE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  trap_type_bitmap_ndx:\n\r"
    "  Trap Type bitmap, the cause for trapping/filtering the packets (for example\n\r"
    "  MTU). Use SOC_PB_PP_TRAP_EG_TYPE for bit offsets.	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api trap_mgmt trap_to_eg_action_map_get trap_type_ndx 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(30)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_TRAP_EG_PROFILE_INFO_SET_TRAP_EG_PROFILE_INFO_SET_ID, 
    "trap_eg_profile_info_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set egress action profile information.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api trap_mgmt trap_eg_profile_info_set profile_ndx 0 cud 0 dp 0 tc 0\n\r"
    "  out_tm_port 0 bitmap_mask 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(31)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_TRAP_EG_PROFILE_INFO_SET_TRAP_EG_PROFILE_INFO_SET_PROFILE_NDX_ID, 
    "profile_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  profile_ndx:\n\r"
    "  Egress action profile. Range: 0 - 8.	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api trap_mgmt trap_eg_profile_info_set profile_ndx 0 cud 0 dp 0 tc 0\n\r"
    "  out_tm_port 0 bitmap_mask 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(31)}, 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_TRAP_EG_PROFILE_INFO_SET_TRAP_EG_PROFILE_INFO_SET_PROFILE_INFO_CUD_ID, 
    "cud", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  profile_info.cud:\n\r"
    "  Copy unique data of the packet, Range: 0 - 0xFFFF.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api trap_mgmt trap_eg_profile_info_set profile_ndx 0 cud 0 dp 0 tc 0\n\r"
    "  out_tm_port 0 bitmap_mask 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(31)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_TRAP_EG_PROFILE_INFO_SET_TRAP_EG_PROFILE_INFO_SET_PROFILE_INFO_COS_INFO_DP_ID, 
    "dp", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  profile_info.cos_info.dp:\n\r"
    "  Drop Precedence. Range: 0 -3\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api trap_mgmt trap_eg_profile_info_set profile_ndx 0 cud 0 dp 0 tc 0\n\r"
    "  out_tm_port 0 bitmap_mask 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(31)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_TRAP_EG_PROFILE_INFO_SET_TRAP_EG_PROFILE_INFO_SET_PROFILE_INFO_COS_INFO_TC_ID, 
    "tc", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  profile_info.cos_info.tc:\n\r"
    "  Traffic Class. Range: 0 -7.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api trap_mgmt trap_eg_profile_info_set profile_ndx 0 cud 0 dp 0 tc 0\n\r"
    "  out_tm_port 0 bitmap_mask 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(31)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_TRAP_EG_PROFILE_INFO_SET_TRAP_EG_PROFILE_INFO_SET_PROFILE_INFO_OUT_TM_PORT_ID, 
    "out_tm_port", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  profile_info.out_tm_port:\n\r"
    "  The local TM port to send the packet out through. Set to\n\r"
    "  SOC_PPC_TRAP_ACTION_PKT_DISCARD_ID in order to discard packets.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api trap_mgmt trap_eg_profile_info_set profile_ndx 0 cud 0 dp 0 tc 0\n\r"
    "  out_tm_port 0 bitmap_mask 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(31)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_TRAP_EG_PROFILE_INFO_SET_TRAP_EG_PROFILE_INFO_SET_PROFILE_INFO_BITMAP_MASK_ID, 
    "bitmap_mask", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  profile_info.bitmap_mask:\n\r"
    "  Bitmap that indicates which of the fields to overwrite. If packet is assigned\n\r"
    "  to a profile action that is stronger than the previous one, then only masked\n\r"
    "  fields will be taken from this action. SOC_PPC_TRAP_ACTION_PROFILE_OVERWRITE\n\r"
    "  details what the meaning of each bit in the bitmap. For example to overwrite\n\r"
    "  destination and dp set bitmap_mask = SOC_PPC_TRAP_ACTION_PROFILE_OVERWRITE_DEST |\n\r"
    "  SOC_PPC_TRAP_ACTION_PROFILE_OVERWRITE_DP;\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api trap_mgmt trap_eg_profile_info_set profile_ndx 0 cud 0 dp 0 tc 0\n\r"
    "  out_tm_port 0 bitmap_mask 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(31)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_TRAP_EG_PROFILE_INFO_GET_TRAP_EG_PROFILE_INFO_GET_ID, 
    "trap_eg_profile_info_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set egress action profile information.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api trap_mgmt trap_eg_profile_info_get profile_ndx 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(0)}, 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_TRAP_EG_PROFILE_INFO_GET_TRAP_EG_PROFILE_INFO_GET_PROFILE_NDX_ID, 
    "profile_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  profile_ndx:\n\r"
    "  Egress action profile. Range: 0 - 8.	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api trap_mgmt trap_eg_profile_info_get profile_ndx 0\n\r"
#endif 
    "",
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(0)}, 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },

  { 
    SOC_PARAM_PPD_API_TRAP_MGMT_ID, 
    "trap_mgmt", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "",
    "", 
    "",
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIT(0)|BIT(2)|BIT(3)|BIT(4)|BIT(5)|BIT(6)|BIT(7)|BIT(8)|BIT(29)|BIT(30)|BIT(31)}, 
    1, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },

#endif /* } trap_mgmt*/
#ifdef UI_DIAG/* { diag*/
  { 
    SOC_PARAM_PPD_DIAG_SAMPLE_ENABLE_SET_SAMPLE_ENABLE_SET_ID, 
    "sample_enable_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Enable/disable diagnostic APIs.affects only APIs with type: need_sample\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api diag sample_enable_set enable 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_DIAG_SAMPLE_ENABLE_SET_SAMPLE_ENABLE_SET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_DIAG_SAMPLE_ENABLE_SET_SAMPLE_ENABLE_SET_ENABLE_ID, 
    "enable", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  enable:\n\r"
    "  TRUE: diag APIs are enabled, FALSE diag APIs are disabled.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api diag sample_enable_set enable 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_DIAG_SAMPLE_ENABLE_SET_SAMPLE_ENABLE_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_DIAG_SAMPLE_ENABLE_GET_SAMPLE_ENABLE_GET_ID, 
    "sample_enable_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Enable/disable diagnostic APIs.affects only APIs with type: need_sample\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api diag sample_enable_get\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_DIAG_SAMPLE_ENABLE_GET_SAMPLE_ENABLE_GET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_DIAG_MODE_INFO_SET_MODE_INFO_SET_ID, 
    "mode_info_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set the mode configuration for diag module, including diag-flavor\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api diag mode_info_set flavor 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_DIAG_MODE_INFO_SET_MODE_INFO_SET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_DIAG_MODE_INFO_SET_MODE_INFO_SET_MODE_INFO_FLAVOR_ID, 
    "flavor", 
    (PARAM_VAL_RULES *)&SOC_PPC_DIAG_FLAVOR_rule[0], 
    (sizeof(SOC_PPC_DIAG_FLAVOR_rule) / sizeof(SOC_PPC_DIAG_FLAVOR_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  mode_info.flavor:\n\r"
    "  Flavor indicates/affects the way the diagnostic APIs work.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api diag mode_info_set flavor 0x1\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_DIAG_MODE_INFO_SET_MODE_INFO_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_DIAG_MODE_INFO_GET_MODE_INFO_GET_ID, 
    "mode_info_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set the mode configuration for diag module, including diag-flavor\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api diag mode_info_get\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_DIAG_MODE_INFO_GET_MODE_INFO_GET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_DIAG_PKT_TRACE_CLEAR_PKT_TRACE_CLEAR_PKT_TRACE_ID, 
    "pkt_trace_clear", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Clear the trace of transmitted packet, so next trace info will relate to next\n\r"
    "  packets to transmit\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api diag pkt_trace_clear pkt_trace 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_DIAG_PKT_TRACE_CLEAR_PKT_TRACE_CLEAR_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_DIAG_PKT_TRACE_CLEAR_PKT_TRACE_CLEAR_ID, 
    "trace_type", 
    (PARAM_VAL_RULES *)&SOC_PPC_DIAG_PKT_TRACE_rule[0], 
    (sizeof(SOC_PPC_DIAG_PKT_TRACE_rule) / sizeof(SOC_PPC_DIAG_PKT_TRACE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pkt_trace:\n\r"
    "  Packet traces type as encoded by SOC_PPC_DIAG_PKT_TRACE.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api diag pkt_trace_clear pkt_trace 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_DIAG_PKT_TRACE_CLEAR_PKT_TRACE_CLEAR_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
 { 
    SOC_PARAM_PPD_DIAG_PKT_TRACE_CLEAR_PKT_TRACE_CORE_ID, 
    "core", 
     (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
     (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
     HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  core_id 0/1.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api diag pkt_trace_clear pkt_trace 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_DIAG_PKT_TRACE_CLEAR_PKT_TRACE_CLEAR_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_DIAG_RECEIVED_PACKET_INFO_GET_RECEIVED_PACKET_INFO_GET_ID, 
    "received_packet_info_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Returns the header of last received packet entered the device and the its\n\r"
    "  association to TM/system/PP ports.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api diag received_packet_info_get core 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_DIAG_RECEIVED_PACKET_INFO_GET_RECEIVED_PACKET_INFO_GET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },
  { 
    SOC_PARAM_PPD_DIAG_RECEIVED_PACKET_INFO_GET_CORE_ID, 
    "core", 
     (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
     (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
     HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  core_id 0/1.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
	  "Examples:\n\r" 
	  "  soc_ppd_api diag received_packet_info_get core 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_DIAG_RECEIVED_PACKET_INFO_GET_RECEIVED_PACKET_INFO_GET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },    
  { 
    SOC_PARAM_PPD_DIAG_PARSING_INFO_GET_PARSING_INFO_GET_ID, 
    "parsing_info_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Returns network headers qualified on packet upon parsing, including packet\n\r"
    "  format, L2 headers fields,...\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api diag parsing_info_get core 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_DIAG_PARSING_INFO_GET_PARSING_INFO_GET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_DIAG_RECEIVED_PACKET_INFO_GET_CORE_ID, 
    "core", 
     (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
     (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
     HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  core_id 0/1.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
	  "Examples:\n\r" 
	  "  soc_ppd_api diag parsing_info_get core 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_DIAG_PARSING_INFO_GET_PARSING_INFO_GET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },    
  { 
    SOC_PARAM_PPD_DIAG_TERMINATION_INFO_GET_TERMINATION_INFO_GET_ID, 
    "termination_info_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Returns information obtained by termination including terminated headers\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api diag termination_info_get core 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_DIAG_TERMINATION_INFO_GET_TERMINATION_INFO_GET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  }, 
  { 
    SOC_PARAM_PPD_DIAG_TERMINATION_INFO_GET_CORE_ID, 
    "core", 
     (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
     (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
     HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  core_id 0/1.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
	  "Examples:\n\r" 
	  "  soc_ppd_api diag termination_info_get core 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_DIAG_TERMINATION_INFO_GET_TERMINATION_INFO_GET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },     
  { 
    SOC_PARAM_PPD_DIAG_FRWRD_LKUP_INFO_GET_FRWRD_LKUP_INFO_GET_ID, 
    "frwrd_lkup_info_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Returns the forwarding lookup performed including: forwarding type (bridging,\n\r"
    "  routing, ILM, ...), the key used for the lookup and the result of the lookup\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api diag frwrd_lkup_info_get\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_DIAG_FRWRD_LKUP_INFO_GET_FRWRD_LKUP_INFO_GET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_DIAG_FRWRD_LPM_LKUP_GET_FRWRD_LPM_LKUP_GET_ID, 
    "frwrd_lpm_lkup_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Simulate IP lookup in the device tables and return FEC-pointer\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api diag frwrd_lpm_lkup_get prefix_len 0 ip_address 0 vrf 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_DIAG_FRWRD_LPM_LKUP_GET_FRWRD_LPM_LKUP_GET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_DIAG_FRWRD_LPM_LKUP_GET_FRWRD_LPM_LKUP_GET_LPM_KEY_KEY_SUBNET_PREFIX_LEN_ID, 
    "prefix_len", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  lpm_key.key.subnet.prefix_len:\n\r"
    "  Number of bits to consider in the IP address starting from the msb. Range: 0\n\r"
    "  - 32.Example for key ip_address 192.168.1.0 and prefix_len 24 would match any\n\r"
    "  IP Address of the form 192.168.1.x\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api diag frwrd_lpm_lkup_get prefix_len 0 ip_address 0 vrf 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_DIAG_FRWRD_LPM_LKUP_GET_FRWRD_LPM_LKUP_GET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_DIAG_FRWRD_LPM_LKUP_GET_FRWRD_LPM_LKUP_GET_LPM_KEY_KEY_SUBNET_IP_ADDRESS_ID, 
    "ip_address", 
    (PARAM_VAL_RULES *)&soc_ppd_api_ip_address_vals[0], 
    (sizeof(soc_ppd_api_ip_address_vals) / sizeof(soc_ppd_api_ip_address_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  lpm_key.key.subnet.ip_address:\n\r"
    "  Ipv4 address.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api diag frwrd_lpm_lkup_get prefix_len 0 ip_address 0 vrf 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_DIAG_FRWRD_LPM_LKUP_GET_FRWRD_LPM_LKUP_GET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_DIAG_FRWRD_LPM_LKUP_GET_FRWRD_LPM_LKUP_GET_LPM_KEY_VRF_ID, 
    "vrf", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  lpm_key.vrf:\n\r"
    "  VRF\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api diag frwrd_lpm_lkup_get prefix_len 0 ip_address 0 vrf 0 core 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_DIAG_FRWRD_LPM_LKUP_GET_FRWRD_LPM_LKUP_GET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
   { 
    SOC_PARAM_PPD_DIAG_FRWRD_LPM_LKUP_GET_FRWRD_LPM_LKUP_GET_LPM_CORE_ID, 
    "core", 
     (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
     (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
     HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  core_id 0/1.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
	   "Examples:\n\r" 
	   "  soc_ppd_api diag frwrd_lpm_lkup_get prefix_len 0 ip_address 0 vrf 0 core 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_DIAG_FRWRD_LPM_LKUP_GET_FRWRD_LPM_LKUP_GET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },    
  { 
    SOC_PARAM_PPD_DIAG_TRAPS_INFO_GET_TRAPS_INFO_GET_ID, 
    "traps_info_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Returns information regard packet trapping/snooping, including which\n\r"
    "  traps/snoops were fulfilled, which trap/snoop was committed, and whether\n\r"
    "  packet was forwarded/processed according to trap or according to normal\n\r"
    "  packet processing flow.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api diag traps_info_get core 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_DIAG_TRAPS_INFO_GET_TRAPS_INFO_GET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_DIAG_TRAPS_INFO_GET_CORE_ID, 
    "core", 
     (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
     (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
     HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  core_id 0/1.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
	  "Examples:\n\r" 
	  "  soc_ppd_api diag traps_info_get core 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_DIAG_TRAPS_INFO_GET_TRAPS_INFO_GET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },    
  { 
    SOC_PARAM_PPD_DIAG_TRAPPED_PACKET_INFO_GET_TRAPPED_PACKET_INFO_GET_ID, 
    "trapped_packet_info_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Returns packet trapped to CPU with additional information: identifying the\n\r"
    "  reason of trapping (if any), the source system port, and pointer to the\n\r"
    "  packet payload. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api diag trapped_packet_info_get max_size 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_DIAG_TRAPPED_PACKET_INFO_GET_TRAPPED_PACKET_INFO_GET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_DIAG_TRAPPED_PACKET_INFO_GET_TRAPPED_PACKET_INFO_GET_MAX_SIZE_ID, 
    "max_size", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  max_size:\n\r"
    "  Maximum number of bytes to read.	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api diag trapped_packet_info_get max_size 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_DIAG_TRAPPED_PACKET_INFO_GET_TRAPPED_PACKET_INFO_GET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_DIAG_TRAPS_ALL_TO_CPU_TRAPS_ALL_TO_CPU_ID, 
    "traps_all_to_cpu", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set the destination of all traps to be CPU, so trapped packet can be captured\n\r"
    "  and examined by CPU\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api diag traps_all_to_cpu cpu_dest 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_DIAG_TRAPS_ALL_TO_CPU_TRAPS_ALL_TO_CPU_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_DIAG_TRAPS_ALL_TO_CPU_TRAPS_ALL_TO_CPU_TRAP_INFO_CPU_DEST_ID, 
    "cpu_dest", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  trap_info.cpu_dest:\n\r"
    "  System port that designated to the CPU.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api diag traps_all_to_cpu cpu_dest 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_DIAG_TRAPS_ALL_TO_CPU_TRAPS_ALL_TO_CPU_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_DIAG_TRAPS_STAT_RESTORE_TRAPS_STAT_RESTORE_ID, 
    "traps_stat_restore", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Restore the configuration of all traps, to be as configured before last\n\r"
    "  calling for soc_ppd_diag_traps_all_to_cpu()\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api diag traps_stat_restore\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_DIAG_TRAPS_STAT_RESTORE_TRAPS_STAT_RESTORE_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_DIAG_FRWRD_DECISION_TRACE_GET_FRWRD_DECISION_TRACE_GET_ID, 
    "frwrd_decision_trace_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Return the trace (changes) for forwarding decision for last packet in several\n\r"
    "  phases in processing\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api diag frwrd_decision_trace_get core 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_DIAG_FRWRD_DECISION_TRACE_GET_FRWRD_DECISION_TRACE_GET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_DIAG_FRWRD_DECISION_TRACE_GET_CORE_ID, 
    "core", 
     (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
     (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
     HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  core_id 0/1.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
	  "Examples:\n\r" 
	  "  soc_ppd_api diag frwrd_decision_trace_get core 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_DIAG_FRWRD_DECISION_TRACE_GET_FRWRD_DECISION_TRACE_GET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },    
  { 
    SOC_PARAM_PPD_DIAG_LEARNING_INFO_GET_LEARNING_INFO_GET_ID, 
    "learning_info_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Get the information to be learned for the incoming packet.This is the\n\r"
    "  information that the processing determine to be learned, the MACT supposed to\n\r"
    "  learn this information.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api diag learning_info_get core 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_DIAG_LEARNING_INFO_GET_LEARNING_INFO_GET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_DIAG_LEARNING_INFO_GET_CORE_ID, 
    "core", 
     (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
     (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
     HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  core_id 0/1.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
	  "Examples:\n\r" 
	  "  soc_ppd_api diag learning_info_get core 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_DIAG_LEARNING_INFO_GET_LEARNING_INFO_GET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },    
  { 
    SOC_PARAM_PPD_DIAG_ING_VLAN_EDIT_INFO_GET_ING_VLAN_EDIT_INFO_GET_ID, 
    "ing_vlan_edit_info_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Get the result of ingress vlan editing,\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api diag ing_vlan_edit_info_get core 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_DIAG_ING_VLAN_EDIT_INFO_GET_ING_VLAN_EDIT_INFO_GET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  }, 
  { 
    SOC_PARAM_PPD_DIAG_ING_VLAN_EDIT_INFO_GET_CORE_ID, 
    "core", 
     (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
     (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
     HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  core_id 0/1.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
	  "Examples:\n\r" 
	  "  soc_ppd_api diag ing_vlan_edit_info_get core 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_DIAG_ING_VLAN_EDIT_INFO_GET_ING_VLAN_EDIT_INFO_GET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },     
  { 
    SOC_PARAM_PPD_DIAG_PKT_ASSOCIATED_TM_INFO_GET_PKT_ASSOCIATED_TM_INFO_GET_ID, 
    "pkt_associated_tm_info_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  The Traffic management information associated with the packet including\n\r"
    "  meter, DP, TC, etc...\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api diag pkt_associated_tm_info_get\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_DIAG_PKT_ASSOCIATED_TM_INFO_GET_PKT_ASSOCIATED_TM_INFO_GET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  }, 
  { 
    SOC_PARAM_PPD_DIAG_PKT_ASSOCIATED_TM_INFO_GET_CORE_ID, 
    "core", 
     (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
     (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
     HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  core_id 0/1.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
	  "Examples:\n\r" 
	  "  soc_ppd_api diag pkt_associated_tm_info_get\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_DIAG_PKT_ASSOCIATED_TM_INFO_GET_PKT_ASSOCIATED_TM_INFO_GET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },      
  { 
    SOC_PARAM_PPD_DIAG_ENCAP_INFO_GET_ENCAP_INFO_GET_ID, 
    "encap_info_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Get the encapsulation and editing information applied to last packet\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api diag encap_info_get\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_DIAG_ENCAP_INFO_GET_ENCAP_INFO_GET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  }, 
  { 
    SOC_PARAM_PPD_DIAG_ENCAP_INFO_GET_CORE_ID, 
    "core", 
     (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
     (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
     HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  core_id 0/1.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
	  "Examples:\n\r" 
	  "  soc_ppd_api diag encap_info_get\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_DIAG_ENCAP_INFO_GET_ENCAP_INFO_GET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },       
  { 
    SOC_PARAM_PPD_DIAG_EG_DROP_LOG_GET_EG_DROP_LOG_GET_ID, 
    "eg_drop_log_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Get the reason for packet discard\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api diag eg_drop_log_get\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_DIAG_EG_DROP_LOG_GET_EG_DROP_LOG_GET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_DIAG_DB_LIF_LKUP_INFO_GET_DB_LIF_LKUP_INFO_GET_ID, 
    "db_lif_lkup_info_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Returns the lookup key and result used in the LIF DB\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api diag db_lif_lkup_info_get lkup_num 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_DIAG_DB_LIF_LKUP_INFO_GET_DB_LIF_LKUP_INFO_GET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_DIAG_DB_LIF_LKUP_INFO_GET_DB_LIF_LKUP_INFO_GET_DB_INFO_LKUP_NUM_ID, 
    "lkup_num", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  db_info.lkup_num:\n\r"
    "  Lookup number, some DB has more than one lookup\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api diag db_lif_lkup_info_get lkup_num 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_DIAG_DB_LIF_LKUP_INFO_GET_DB_LIF_LKUP_INFO_GET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },
  { 
    SOC_PARAM_PPD_DIAG_DB_LIF_LKUP_INFO_GET_DB_LIF_LKUP_INFO_GET_DB_INFO_BANK_ID, 
    "bank_id", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  db_info.bank_id:\n\r"
    "  Bank number. For SEM: 0 (SEM-A), 1 (SEM-B). For LEM: has to be 0. ARAD only.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api diag db_lif_lkup_info_get lkup_num 0 bank_id 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_DIAG_DB_LIF_LKUP_INFO_GET_DB_LIF_LKUP_INFO_GET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  }, 
  { 
    SOC_PARAM_PPD_DIAG_DB_LIF_LKUP_INFO_GET_DB_LIF_LKUP_INFO_GET_DB_INFO_CORE_ID, 
    "core", 
     (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
     (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
     HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  core_id 0/1.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
	  "Examples:\n\r" 
	  "  soc_ppd_api diag db_lif_lkup_info_get lkup_num 0 bank_id 0 core 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_DIAG_DB_LIF_LKUP_INFO_GET_DB_LIF_LKUP_INFO_GET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },       
  { 
    SOC_PARAM_PPD_DIAG_DB_LEM_LKUP_INFO_GET_DB_LEM_LKUP_INFO_GET_ID, 
    "db_lem_lkup_info_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Returns the lookup key and result used in the LEM DB\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api diag db_lem_lkup_info_get lkup_num 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_DIAG_DB_LEM_LKUP_INFO_GET_DB_LEM_LKUP_INFO_GET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_DIAG_DB_LEM_LKUP_INFO_GET_DB_LEM_LKUP_INFO_GET_DB_INFO_LKUP_NUM_ID, 
    "lkup_num", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  db_info.lkup_num:\n\r"
    "  Lookup number, some DB has more than one lookup\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api diag db_lem_lkup_info_get lkup_num 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_DIAG_DB_LEM_LKUP_INFO_GET_DB_LEM_LKUP_INFO_GET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_DIAG_DB_LEM_LKUP_INFO_GET_CORE_ID, 
    "core", 
     (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
     (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
     HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  core_id 0/1.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
	  "Examples:\n\r" 
	  "  soc_ppd_api diag db_lem_lkup_info_get lkup_num 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_DIAG_DB_LEM_LKUP_INFO_GET_DB_LEM_LKUP_INFO_GET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },    
  { 
    SOC_PARAM_PPD_DIAG_DB_TCAM_LKUP_INFO_GET_DB_TCAM_LKUP_INFO_GET_ID, 
    "db_tcam_lkup_info_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Returns the lookup key and result used in the TCAM DB\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api diag db_tcam_lkup_info_get lkup_usage 0 lkup_num 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_DIAG_DB_TCAM_LKUP_INFO_GET_DB_TCAM_LKUP_INFO_GET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_DIAG_DB_TCAM_LKUP_INFO_GET_DB_TCAM_LKUP_INFO_GET_USE_INFO_LKUP_USAGE_ID, 
    "lkup_usage", 
    (PARAM_VAL_RULES *)&SOC_PPC_DIAG_TCAM_USAGE_rule[0], 
    (sizeof(SOC_PPC_DIAG_TCAM_USAGE_rule) / sizeof(SOC_PPC_DIAG_TCAM_USAGE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  use_info.lkup_usage:\n\r"
    "  The lookup usage for forwarding/PMF/Egress\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api diag db_tcam_lkup_info_get lkup_usage 0 lkup_num 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_DIAG_DB_TCAM_LKUP_INFO_GET_DB_TCAM_LKUP_INFO_GET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_DIAG_DB_TCAM_LKUP_INFO_GET_DB_TCAM_LKUP_INFO_GET_USE_INFO_LKUP_NUM_ID, 
    "lkup_num", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  use_info.lkup_num:\n\r"
    "  Lookup number, some DB has more than one lookup\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api diag db_tcam_lkup_info_get lkup_usage 0 lkup_num 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_DIAG_DB_TCAM_LKUP_INFO_GET_DB_TCAM_LKUP_INFO_GET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_DIAG_PKT_SEND_PKT_SEND_ID, 
    "pkt_send", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Inject packets from CPU port to device.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api diag pkt_send dei 0 pcp 0 vid 0 tpid 0 is_tagged 0 sa 0 da 0\n\r"
    "  ether_type 0 nof_packets 0 total_size 0 in_tm_port 0 type 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_DIAG_PKT_SEND_PKT_SEND_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_DIAG_PKT_SEND_PKT_SEND_PKT_INFO_ETHER_INFO_TAG_DEI_ID, 
    "ether_vlan_dei", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pkt_info.ether_info.tag.dei:\n\r"
    "  Drop Eligibility Indicator.For C-tag, this is the CFI (Canonical Format\n\r"
    "  Indicator) and has to be 0.Range: 0 - 1.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api diag pkt_send dei 0 pcp 0 vid 0 tpid 0 is_tagged 0 sa 0 da 0\n\r"
    "  ether_type 0 nof_packets 0 total_size 0 in_tm_port 0 type 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_DIAG_PKT_SEND_PKT_SEND_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_DIAG_PKT_SEND_PKT_SEND_PKT_INFO_ETHER_INFO_TAG_PCP_ID, 
    "ether_vlan_pcp", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pkt_info.ether_info.tag.pcp:\n\r"
    "  Priority Code Point. Refers to the IEEE 802.1p priority. For C-Tag it is the\n\r"
    "  User Priority. Range: 0 - 7.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api diag pkt_send dei 0 pcp 0 vid 0 tpid 0 is_tagged 0 sa 0 da 0\n\r"
    "  ether_type 0 nof_packets 0 total_size 0 in_tm_port 0 type 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_DIAG_PKT_SEND_PKT_SEND_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_DIAG_PKT_SEND_PKT_SEND_PKT_INFO_ETHER_INFO_TAG_VID_ID, 
    "ether_vlan_vid", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pkt_info.ether_info.tag.vid:\n\r"
    "  VLAN ID.Range: 0 - 4095.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api diag pkt_send dei 0 pcp 0 vid 0 tpid 0 is_tagged 0 sa 0 da 0\n\r"
    "  ether_type 0 nof_packets 0 total_size 0 in_tm_port 0 type 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_DIAG_PKT_SEND_PKT_SEND_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_DIAG_PKT_SEND_PKT_SEND_PKT_INFO_ETHER_INFO_TAG_TPID_ID, 
    "ether_vlan_tpid", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pkt_info.ether_info.tag.tpid:\n\r"
    "  Tag Protocol Identifier. Range: 0 - 0xffff.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api diag pkt_send dei 0 pcp 0 vid 0 tpid 0 is_tagged 0 sa 0 da 0\n\r"
    "  ether_type 0 nof_packets 0 total_size 0 in_tm_port 0 type 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_DIAG_PKT_SEND_PKT_SEND_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_DIAG_PKT_SEND_PKT_SEND_PKT_INFO_ETHER_INFO_IS_TAGGED_ID, 
    "ether_is_tagged", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pkt_info.ether_info.is_tagged:\n\r"
    "  Whether this the Ethernet header includes VLAN (IEEE 802.1Q tag based VLAN)\n\r"
    "  uses an extra tag in the header to identify the VLAN\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api diag pkt_send dei 0 pcp 0 vid 0 tpid 0 is_tagged 0 sa 0 da 0\n\r"
    "  ether_type 0 nof_packets 0 total_size 0 in_tm_port 0 type 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_DIAG_PKT_SEND_PKT_SEND_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_DIAG_PKT_SEND_PKT_SEND_PKT_INFO_ETHER_INFO_SA_ID, 
    "ether_sa", 
    (PARAM_VAL_RULES *)&soc_ppd_api_mac_addr_vals[0], 
    (sizeof(soc_ppd_api_mac_addr_vals) / sizeof(soc_ppd_api_mac_addr_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pkt_info.ether_info.sa:\n\r"
    "  Src MAC address\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api diag pkt_send dei 0 pcp 0 vid 0 tpid 0 is_tagged 0 sa 0 da 0\n\r"
    "  ether_type 0 nof_packets 0 total_size 0 in_tm_port 0 type 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_DIAG_PKT_SEND_PKT_SEND_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_DIAG_PKT_SEND_PKT_SEND_PKT_INFO_ETHER_INFO_DA_ID, 
    "ether_da", 
    (PARAM_VAL_RULES *)&soc_ppd_api_mac_addr_vals[0], 
    (sizeof(soc_ppd_api_mac_addr_vals) / sizeof(soc_ppd_api_mac_addr_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pkt_info.ether_info.da:\n\r"
    "  Destination MAC address\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api diag pkt_send dei 0 pcp 0 vid 0 tpid 0 is_tagged 0 sa 0 da 0\n\r"
    "  ether_type 0 nof_packets 0 total_size 0 in_tm_port 0 type 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_DIAG_PKT_SEND_PKT_SEND_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_DIAG_PKT_SEND_PKT_SEND_PKT_INFO_ETHER_INFO_ETHER_TYPE_ID, 
    "ether_type", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pkt_info.ether_info.ether_type:\n\r"
    "  Ethernet Type\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api diag pkt_send dei 0 pcp 0 vid 0 tpid 0 is_tagged 0 sa 0 da 0\n\r"
    "  ether_type 0 nof_packets 0 total_size 0 in_tm_port 0 type 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_DIAG_PKT_SEND_PKT_SEND_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_DIAG_PKT_SEND_PKT_SEND_PKT_INFO_NOF_PACKETS_ID, 
    "nof_packets", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pkt_info.nof_packets:\n\r"
    "  Number of packets to send.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api diag pkt_send dei 0 pcp 0 vid 0 tpid 0 is_tagged 0 sa 0 da 0\n\r"
    "  ether_type 0 nof_packets 0 total_size 0 in_tm_port 0 type 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_DIAG_PKT_SEND_PKT_SEND_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_DIAG_PKT_SEND_PKT_SEND_PKT_INFO_TOTAL_SIZE_ID, 
    "total_size", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pkt_info.total_size:\n\r"
    "  Total packet size in bytes.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api diag pkt_send dei 0 pcp 0 vid 0 tpid 0 is_tagged 0 sa 0 da 0\n\r"
    "  ether_type 0 nof_packets 0 total_size 0 in_tm_port 0 type 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_DIAG_PKT_SEND_PKT_SEND_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_DIAG_PKT_SEND_PKT_SEND_PKT_INFO_IN_TM_PORT_ID, 
    "in_tm_port", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pkt_info.in_tm_port:\n\r"
    "  The local TM port from which to emulate the packet was received from.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api diag pkt_send dei 0 pcp 0 vid 0 tpid 0 is_tagged 0 sa 0 da 0\n\r"
    "  ether_type 0 nof_packets 0 total_size 0 in_tm_port 0 type 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_DIAG_PKT_SEND_PKT_SEND_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_DIAG_PKT_SEND_PKT_SEND_PKT_INFO_TYPE_ID, 
    "pkt_type", 
    (PARAM_VAL_RULES *)&SOC_PPC_PKT_HDR_STK_TYPE_rule[0], 
    (sizeof(SOC_PPC_PKT_HDR_STK_TYPE_rule) / sizeof(SOC_PPC_PKT_HDR_STK_TYPE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pkt_info.type:\n\r"
    "  Packet stack type\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api diag pkt_send dei 0 pcp 0 vid 0 tpid 0 is_tagged 0 sa 0 da 0\n\r"
    "  ether_type 0 nof_packets 0 total_size 0 in_tm_port 0 type 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_DIAG_PKT_SEND_PKT_SEND_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  {
    SOC_PARAM_PPD_API_DIAG_ID, 
    "diag", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "",
    "", 
    "",
    BIT_UI_16_RNG(SOC_FUN_PPD_API_DIAG_FIRST_ID,SOC_FUN_PPD_API_DIAG_LAST_ID), 
    1, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
#endif /* } diag*/
#ifdef UI_EG_QOS/* { eg_qos*/ 
  { 
    SOC_PARAM_PPD_EG_QOS_PORT_INFO_SET_PORT_INFO_SET_ID, 
    "port_info_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Sets port information for egress QoS setting, including profiles used for QoS\n\r"
    "  remarking.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_qos port_info_set local_port_ndx 0 exp_map_profile 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_EG_QOS_PORT_INFO_SET_PORT_INFO_SET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_QOS_PORT_INFO_SET_PORT_INFO_SET_LOCAL_PORT_NDX_ID, 
    "local_port_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  local_port_ndx:\n\r"
    "  Out Local port ID.	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_qos port_info_set local_port_ndx 0 exp_map_profile 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_EG_QOS_PORT_INFO_SET_PORT_INFO_SET_ID), 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_QOS_PORT_INFO_SET_PORT_INFO_SET_PORT_QOS_INFO_EXP_MAP_PROFILE_ID, 
    "exp_map_profile", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  port_qos_info.exp_map_profile:\n\r"
    "  EXP map profile used to remark the qos parameter (mapping EXP to dscp/exp)\n\r"
    "  when PHP is performed. see soc_ppd_eg_qos_params_php_remark_set().Range: 0 - 3.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_qos port_info_set local_port_ndx 0 exp_map_profile 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_EG_QOS_PORT_INFO_SET_PORT_INFO_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_QOS_PORT_INFO_GET_PORT_INFO_GET_ID, 
    "port_info_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Sets port information for egress QoS setting, including profiles used for QoS\n\r"
    "  remarking.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_qos port_info_get local_port_ndx 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_EG_QOS_PORT_INFO_GET_PORT_INFO_GET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_QOS_PORT_INFO_GET_PORT_INFO_GET_LOCAL_PORT_NDX_ID, 
    "local_port_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  local_port_ndx:\n\r"
    "  Out Local port ID.	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_qos port_info_get local_port_ndx 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_EG_QOS_PORT_INFO_GET_PORT_INFO_GET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_QOS_PARAMS_PHP_REMARK_SET_PARAMS_PHP_REMARK_SET_ID, 
    "php_remark_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Sets how to remark QoS parameters upon PHP operation. When uniform pop\n\r"
    "  performed the dscp_exp value is remarked.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_qos params_php_remark_set exp 0 php_type 1 exp_map_profile 0\n\r"
    "  dscp_exp 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_EG_QOS_PARAMS_PHP_REMARK_SET_PARAMS_PHP_REMARK_SET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_QOS_PARAMS_PHP_REMARK_SET_PARAMS_PHP_REMARK_SET_PHP_KEY_EXP_ID, 
    "exp", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  php_key.exp:\n\r"
    "  EXP value. From the poped headerRange: 0-7. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_qos params_php_remark_set exp 0 php_type 1 exp_map_profile 0\n\r"
    "  dscp_exp 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_EG_QOS_PARAMS_PHP_REMARK_SET_PARAMS_PHP_REMARK_SET_ID), 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_QOS_PARAMS_PHP_REMARK_SET_PARAMS_PHP_REMARK_SET_PHP_KEY_PHP_TYPE_ID, 
    "php_type", 
    (PARAM_VAL_RULES *)&SOC_PPC_EG_QOS_UNIFORM_PHP_TYPE_rule[0], 
    (sizeof(SOC_PPC_EG_QOS_UNIFORM_PHP_TYPE_rule) / sizeof(SOC_PPC_EG_QOS_UNIFORM_PHP_TYPE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  php_key.php_type:\n\r"
    "  Php type pop into IPv4 or pop into IPv6\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_qos params_php_remark_set exp 0 php_type 1 exp_map_profile 0\n\r"
    "  dscp_exp 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_EG_QOS_PARAMS_PHP_REMARK_SET_PARAMS_PHP_REMARK_SET_ID), 
    4, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_QOS_PARAMS_PHP_REMARK_SET_PARAMS_PHP_REMARK_SET_PHP_KEY_EXP_MAP_PROFILE_ID, 
    "exp_map_profile", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  php_key.exp_map_profile:\n\r"
    "  EXP map profile set according to out-port, see\n\r"
    "  soc_ppd_eg_qos_port_info_set()Range: 0 - 3.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_qos params_php_remark_set exp 0 php_type 1 exp_map_profile 0\n\r"
    "  dscp_exp 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_EG_QOS_PARAMS_PHP_REMARK_SET_PARAMS_PHP_REMARK_SET_ID), 
    5, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_QOS_PARAMS_PHP_REMARK_SET_PARAMS_PHP_REMARK_SET_DSCP_EXP_ID, 
    "dscp_exp", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  dscp_exp:\n\r"
    "  The new value for dscp_exp, this overwrites the dscp_exp value calculated by\n\r"
    "  the ingress pipe. This value will be mapped and used for the QoS fileds in\n\r"
    "  the transmitted packet see soc_ppd_eg_qos_params_remark_set()\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_qos params_php_remark_set exp 0 php_type 1 exp_map_profile 0\n\r"
    "  dscp_exp 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_EG_QOS_PARAMS_PHP_REMARK_SET_PARAMS_PHP_REMARK_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_QOS_PARAMS_PHP_REMARK_GET_PARAMS_PHP_REMARK_GET_ID, 
    "php_remark_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Sets how to remark QoS parameters upon PHP operation. When uniform pop\n\r"
    "  performed the dscp_exp value is remarked.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_qos params_php_remark_get exp 0 php_type 1 exp_map_profile 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_EG_QOS_PARAMS_PHP_REMARK_GET_PARAMS_PHP_REMARK_GET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_QOS_PARAMS_PHP_REMARK_GET_PARAMS_PHP_REMARK_GET_PHP_KEY_EXP_ID, 
    "exp", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  php_key.exp:\n\r"
    "  EXP value. From the poped headerRange: 0-7. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_qos params_php_remark_get exp 0 php_type 1 exp_map_profile 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_EG_QOS_PARAMS_PHP_REMARK_GET_PARAMS_PHP_REMARK_GET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_QOS_PARAMS_PHP_REMARK_GET_PARAMS_PHP_REMARK_GET_PHP_KEY_PHP_TYPE_ID, 
    "php_type", 
    (PARAM_VAL_RULES *)&SOC_PPC_EG_QOS_UNIFORM_PHP_TYPE_rule[0], 
    (sizeof(SOC_PPC_EG_QOS_UNIFORM_PHP_TYPE_rule) / sizeof(SOC_PPC_EG_QOS_UNIFORM_PHP_TYPE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  php_key.php_type:\n\r"
    "  Php type pop into IPv4 or pop into IPv6\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_qos params_php_remark_get exp 0 php_type 1 exp_map_profile 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_EG_QOS_PARAMS_PHP_REMARK_GET_PARAMS_PHP_REMARK_GET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_QOS_PARAMS_PHP_REMARK_GET_PARAMS_PHP_REMARK_GET_PHP_KEY_EXP_MAP_PROFILE_ID, 
    "exp_map_profile", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  php_key.exp_map_profile:\n\r"
    "  EXP map profile set according to out-port, see\n\r"
    "  soc_ppd_eg_qos_port_info_set()Range: 0 - 3.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_qos params_php_remark_get exp 0 php_type 1 exp_map_profile 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_EG_QOS_PARAMS_PHP_REMARK_GET_PARAMS_PHP_REMARK_GET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_QOS_PARAMS_REMARK_SET_PARAMS_REMARK_SET_ID, 
    "remark_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Remark QoS parameters, i.e. map in-dscp/exp and DP to out-dscp/exp in order\n\r"
    "  to be set in outgoing packet headers.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_qos params_remark_set dp 0 in_dscp_exp 0 mpls_exp 0 ipv6_tc 0\n\r"
    "  ipv4_tos 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_EG_QOS_PARAMS_REMARK_SET_PARAMS_REMARK_SET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_QOS_PARAMS_REMARK_SET_PARAMS_REMARK_SET_IN_QOS_KEY_DP_ID, 
    "dp", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  in_qos_key.dp:\n\r"
    "  Drop precedence, calculated by ingress pipe.Range: 0 - 3.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_qos params_remark_set dp 0 in_dscp_exp 0 mpls_exp 0 ipv6_tc 0\n\r"
    "  ipv4_tos 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_EG_QOS_PARAMS_REMARK_SET_PARAMS_REMARK_SET_ID), 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_QOS_PARAMS_REMARK_SET_PARAMS_REMARK_SET_IN_QOS_KEY_IN_DSCP_EXP_ID, 
    "in_dscp_exp", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
#ifdef COMPILER_STRING_CONST_LIMIT
    "  Full documentation cannot be displayed with -pendantic compiler\n\r",
#else
    "  in_qos_key.in_dscp_exp:\n\r"
    "  The DSCP/EXP value\n\r"
    "  assigned by the ingress pipe as follows:- if packet forwarded according to IP\n\r"
    "  header then equal to packet's DSCP (IPv4: TOS field, in IPv6: TC field)- else\n\r"
    "  if packet forwarded according to MLPS label then equal to packet's EXP- else\n\r"
    "  if packet was terminated then equal to the Qos value of the terminated\n\r"
    "  packet.note that in_dscp_exp value may be updated by egress if PHP was\n\r"
    "  performed:- If pipe pop was performed then the in_dscp_exp equal to the qos\n\r"
    "  parameter of the internal header, (TC of IPv6, TOS of IPv4, EXP of MPLS\n\r"
    "  label).- If uniform pop was performed then the in_dscp_exp updated according\n\r"
    "  to the EXP of the poped MPLS label see soc_ppd_eg_qos_params_php_remark_set()\n\r"
    "",
#endif /* COMPILER_STRING_CONST_LIMIT */
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_qos params_remark_set dp 0 in_dscp_exp 0 mpls_exp 0 ipv6_tc 0\n\r"
    "  ipv4_tos 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_EG_QOS_PARAMS_REMARK_SET_PARAMS_REMARK_SET_ID), 
    4, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },
  { 
    SOC_PARAM_PPD_EG_QOS_PARAMS_REMARK_SET_PARAMS_REMARK_SET_IN_QOS_KEY_REMARK_PROFILE_ID, 
    "remark_profile", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  in_qos_key.remark_profile:\n\r"
    "  Valid only for ARAD. Range:0-15. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_qos params_remark_set dp 0 in_dscp_exp 0 remark_profile 0 mpls_exp 0 ipv6_tc 0\n\r"
    "  ipv4_tos 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_EG_QOS_PARAMS_REMARK_SET_PARAMS_REMARK_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },    
  { 
    SOC_PARAM_PPD_EG_QOS_PARAMS_REMARK_SET_PARAMS_REMARK_SET_OUT_QOS_PARAMS_MPLS_EXP_ID, 
    "mpls_exp", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  out_qos_params.mpls_exp:\n\r"
    "  MPLS exp. Range 0-7. This value is used when - packet is forwarded according\n\r"
    "  to MPLS label (LSR)\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_qos params_remark_set dp 0 in_dscp_exp 0 mpls_exp 0 ipv6_tc 0\n\r"
    "  ipv4_tos 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_EG_QOS_PARAMS_REMARK_SET_PARAMS_REMARK_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_QOS_PARAMS_REMARK_SET_PARAMS_REMARK_SET_OUT_QOS_PARAMS_IPV6_TC_ID, 
    "ipv6_tc", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  out_qos_params.ipv6_tc:\n\r"
    "  Ipv6 TC. Range 0-255. This value is used when - packet is forwarded according\n\r"
    "  to IPv6 header- or when packet is forwarded according to MPLS label (LSR),\n\r"
    "  and label was poped into ipv6. (in this case the in-DSCP-Exp is mapped from\n\r"
    "  the EXP field of the poped header)\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_qos params_remark_set dp 0 in_dscp_exp 0 mpls_exp 0 ipv6_tc 0\n\r"
    "  ipv4_tos 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_EG_QOS_PARAMS_REMARK_SET_PARAMS_REMARK_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_QOS_PARAMS_REMARK_SET_PARAMS_REMARK_SET_OUT_QOS_PARAMS_IPV4_TOS_ID, 
    "ipv4_tos", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  out_qos_params.ipv4_tos:\n\r"
    "  Ipv4 TOS. Range 0-255. This value is used when - packet is forwarded\n\r"
    "  according to IPv4 header- or when packet is forwarded according to MPLS label\n\r"
    "  (LSR), and label was poped into ipv4. (in this case the in-DSCP-Exp is mapped\n\r"
    "  from\n\r"
    "  the EXP field of the poped header)\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_qos params_remark_set dp 0 in_dscp_exp 0 mpls_exp 0 ipv6_tc 0\n\r"
    "  ipv4_tos 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_EG_QOS_PARAMS_REMARK_SET_PARAMS_REMARK_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_QOS_PARAMS_REMARK_GET_PARAMS_REMARK_GET_ID, 
    "remark_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Remark QoS parameters, i.e. map in-dscp/exp and DP to out-dscp/exp in order\n\r"
    "  to be set in outgoing packet headers.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_qos params_remark_get dp 0 in_dscp_exp 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_EG_QOS_PARAMS_REMARK_GET_PARAMS_REMARK_GET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_QOS_PARAMS_REMARK_GET_PARAMS_REMARK_GET_IN_QOS_KEY_DP_ID, 
    "dp", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  in_qos_key.dp:\n\r"
    "  Drop precedence, calculated by ingress pipe.Range: 0 - 3.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_qos params_remark_get dp 0 in_dscp_exp 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_EG_QOS_PARAMS_REMARK_GET_PARAMS_REMARK_GET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_QOS_PARAMS_REMARK_GET_PARAMS_REMARK_GET_IN_QOS_KEY_IN_DSCP_EXP_ID, 
    "in_dscp_exp", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
#ifdef COMPILER_STRING_CONST_LIMIT
    "  Full documentation cannot be displayed with -pendantic compiler\n\r",
#else
    "  in_qos_key.in_dscp_exp:\n\r"
    "  The DSCP/EXP value\n\r"
    "  assigned by the ingress pipe as follows:- if packet forwarded according to IP\n\r"
    "  header then equal to packet's DSCP (IPv4: TOS field, in IPv6: TC field)- else\n\r"
    "  if packet forwarded according to MLPS label then equal to packet's EXP- else\n\r"
    "  if packet was terminated then equal to the Qos value of the terminated\n\r"
    "  packet.note that in_dscp_exp value may be updated by egress if PHP was\n\r"
    "  performed:- If pipe pop was performed then the in_dscp_exp equal to the qos\n\r"
    "  parameter of the internal header, (TC of IPv6, TOS of IPv4, EXP of MPLS\n\r"
    "  label).- If uniform pop was performed then the in_dscp_exp updated according\n\r"
    "  to the EXP of the poped MPLS label see soc_ppd_eg_qos_params_php_remark_set()\n\r"
    "",
#endif /* COMPILER_STRING_CONST_LIMIT */
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_qos params_remark_get dp 0 in_dscp_exp 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_EG_QOS_PARAMS_REMARK_GET_PARAMS_REMARK_GET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },
  { 
    SOC_PARAM_PPD_EG_QOS_PARAMS_REMARK_GET_PARAMS_REMARK_GET_IN_QOS_KEY_REMARK_PROFILE_ID, 
    "remark_profile", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  in_qos_key.remark_profile :\n\r"
    "  Valid only for ARAD. Range:0-15. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_qos params_remark_get dp 0 in_dscp_exp 0 remark_profile 0 \n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_EG_QOS_PARAMS_REMARK_GET_PARAMS_REMARK_GET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },
  { 
    SOC_PARAM_PPD_EG_ENCAP_QOS_PARAMS_REMARK_SET_PARAMS_REMARK_SET_ID, 
    "encap_remark_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Encap Remark QoS parameters, i.e. map in-dscp/exp, remark-profile and pkt_hdr_type to out-dscp/exp in order\n\r"
    "  to be set in outgoing encapsulated packet headers.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_qos encap_params_remark_set in_dscp_exp 0 pkt_hdr_type ipv4 remark_profile 0"
    "  mpls_exp 0 ipv4_tos 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_EG_ENCAP_QOS_PARAMS_REMARK_SET_PARAMS_REMARK_SET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_ENCAP_QOS_PARAMS_REMARK_SET_PARAMS_REMARK_SET_IN_ENCAP_QOS_KEY_REMARK_PROFILE_ID, 
    "remark_profile", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  in_encap_qos_key.remark_profile: \n\r"
    "  Range: 0 - 15.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_qos encap_params_remark_set in_dscp_exp 0 pkt_hdr_type ipv4 remark_profile 0 \n\r"
    "  mpls_exp 0 ipv4_tos 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_EG_ENCAP_QOS_PARAMS_REMARK_SET_PARAMS_REMARK_SET_ID), 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_ENCAP_QOS_PARAMS_REMARK_SET_PARAMS_REMARK_SET_IN_ENCAP_QOS_KEY_IN_DSCP_EXP_ID, 
    "in_dscp_exp", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
#ifdef COMPILER_STRING_CONST_LIMIT
    "  Full documentation cannot be displayed with -pendantic compiler\n\r",
#else
    "  in_encap_qos_key.in_dscp_exp:\n\r"
    "  The DSCP/EXP value\n\r"
    "  assigned by the ingress pipe as follows:- if packet forwarded according to IP\n\r"
    "  header then equal to packet's DSCP (IPv4: TOS field, in IPv6: TC field)- else\n\r"
    "  if packet forwarded according to MLPS label then equal to packet's EXP- else\n\r"
    "  if packet was terminated then equal to the Qos value of the terminated\n\r"
    "  packet.note that in_dscp_exp value may be updated by egress if PHP was\n\r"
    "  performed:- If pipe pop was performed then the in_dscp_exp equal to the qos\n\r"
    "  parameter of the internal header, (TC of IPv6, TOS of IPv4, EXP of MPLS\n\r"
    "  label).- If uniform pop was performed then the in_dscp_exp updated according\n\r"
    "  to the EXP of the poped MPLS label see soc_ppd_eg_qos_params_php_remark_set()\n\r"
    "",
#endif /* COMPILER_STRING_CONST_LIMIT */
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_qos encap_params_remark_set in_dscp_exp 0 pkt_hdr_type ipv4 remark_profile 0 \n\r"
    "  mpls_exp 0 ipv4_tos 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_EG_ENCAP_QOS_PARAMS_REMARK_SET_PARAMS_REMARK_SET_ID), 
    4, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },
  { 
    SOC_PARAM_PPD_EG_ENCAP_QOS_PARAMS_REMARK_SET_PARAMS_REMARK_SET_IN_ENCAP_QOS_KEY_PKT_HDR_TYPE_ID, 
    "pkt_hdr_type", 
    (PARAM_VAL_RULES *)&SOC_PPC_PKT_HDR_TYPE_rule[0], 
    (sizeof(SOC_PPC_PKT_HDR_TYPE_rule) / sizeof(SOC_PPC_PKT_HDR_TYPE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  in_encap_qos_key.pkt_hdr_type:\n\r"
    " The incoming pkt header type. acceptable types: \n\r"
    " ipv4/ipv6/mpls. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_qos encap_params_remark_set in_dscp_exp 0 pkt_hdr_type ipv4 remark_profile 0 \n\r"
    "  mpls_exp 0 ipv4_tos 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_EG_ENCAP_QOS_PARAMS_REMARK_SET_PARAMS_REMARK_SET_ID), 
    5, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },    
  { 
    SOC_PARAM_PPD_EG_ENCAP_QOS_PARAMS_REMARK_SET_PARAMS_REMARK_SET_OUT_ENCAP_QOS_PARAMS_MPLS_EXP_ID, 
    "mpls_exp", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  out_encap_qos_params.mpls_exp:\n\r"
    "  MPLS exp. Range 0-7. This value is used when - packet is forwarded according\n\r"
    "  to MPLS label (LSR)\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_qos encap_params_remark_set in_dscp_exp 0 pkt_hdr_type ipv4 remark_profile 0 \n\r"
    "  mpls_exp 0 ipv4_tos 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_EG_ENCAP_QOS_PARAMS_REMARK_SET_PARAMS_REMARK_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_ENCAP_QOS_PARAMS_REMARK_SET_PARAMS_REMARK_SET_OUT_ENCAP_QOS_PARAMS_IPV4_TOS_ID, 
    "ip_dscp", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  out_encap_qos_params.ipv4_tos:\n\r"
    "  Ip dscp. Range 0-255. This value is used when - packet is forwarded\n\r"
    "  according to IPv4 header- or when packet is forwarded according to MPLS label\n\r"
    "  (LSR), and label was poped into ipv4. (in this case the in-DSCP-Exp is mapped\n\r"
    "  from\n\r"
    "  the EXP field of the poped header)\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_qos params_remark_set dp 0 in_dscp_exp 0 mpls_exp 0 ip_dscp 0 \n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_EG_ENCAP_QOS_PARAMS_REMARK_SET_PARAMS_REMARK_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_ENCAP_QOS_PARAMS_REMARK_GET_PARAMS_REMARK_GET_ID, 
    "encap_remark_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Encapsulated Remark QoS parameters, i.e. map in-dscp/exp and DP to out-dscp/exp in order \n\r"
    "  to be set in outgoing encapsulated packet headers.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_qos encap params_remark_get in_dscp_exp 0 remark_profile 0 pkt_hdr_type ipv4 \n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_EG_ENCAP_QOS_PARAMS_REMARK_GET_PARAMS_REMARK_GET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_EG_ENCAP_QOS_PARAMS_REMARK_GET_PARAMS_REMARK_GET_IN_ENCAP_QOS_KEY_REMARK_PROFILE_ID, 
    "remark_profile", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  in_encap_qos_key.remark_profile:\n\r"
    "  Range: 0 - 15.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_qos encap params_remark_get in_dscp_exp 0 remark_profile 0 pkt_hdr_type ipv4 \n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_EG_ENCAP_QOS_PARAMS_REMARK_GET_PARAMS_REMARK_GET_ID), 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },
  { 
    SOC_PARAM_PPD_EG_ENCAP_QOS_PARAMS_REMARK_GET_PARAMS_REMARK_GET_IN_ENCAP_QOS_KEY_PKT_HDR_TYPE_ID, 
    "pkt_hdr_type", 
    (PARAM_VAL_RULES *)&SOC_PPC_PKT_HDR_TYPE_rule[0], 
    (sizeof(SOC_PPC_PKT_HDR_TYPE_rule) / sizeof(SOC_PPC_PKT_HDR_TYPE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  in_encap_qos_key.pkt_hdr_type:\n\r"
    "  incoming pkt header type. acceptable types: .\n\r"
    "  ipv4/ipv6/mpls. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_qos encap params_remark_get in_dscp_exp 0 remark_profile 0 pkt_hdr_type ipv4 \n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_EG_ENCAP_QOS_PARAMS_REMARK_GET_PARAMS_REMARK_GET_ID), 
    4, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },
  { 
    SOC_PARAM_PPD_EG_ENCAP_QOS_PARAMS_REMARK_GET_PARAMS_REMARK_GET_IN_ENCAP_QOS_KEY_IN_DSCP_EXP_ID, 
    "in_dscp_exp", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
#ifdef COMPILER_STRING_CONST_LIMIT
    "  Full documentation cannot be displayed with -pendantic compiler\n\r",
#else
    "  in_qos_key.in_dscp_exp:\n\r"
    "  The DSCP/EXP value\n\r"
    "  assigned by the ingress pipe as follows:- if packet forwarded according to IP\n\r"
    "  header then equal to packet's DSCP (IPv4: TOS field, in IPv6: TC field)- else\n\r"
    "  if packet forwarded according to MLPS label then equal to packet's EXP- else\n\r"
    "  if packet was terminated then equal to the Qos value of the terminated\n\r"
    "  packet.note that in_dscp_exp value may be updated by egress if PHP was\n\r"
    "  performed:- If pipe pop was performed then the in_dscp_exp equal to the qos\n\r"
    "  parameter of the internal header, (TC of IPv6, TOS of IPv4, EXP of MPLS\n\r"
    "  label).- If uniform pop was performed then the in_dscp_exp updated according\n\r"
    "  to the EXP of the poped MPLS label see soc_ppd_eg_qos_params_php_remark_set()\n\r"
    "",
#endif /* COMPILER_STRING_CONST_LIMIT */
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api eg_qos params_remark_get dp 0 in_dscp_exp 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_EG_ENCAP_QOS_PARAMS_REMARK_GET_PARAMS_REMARK_GET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },
  { 
    SOC_PARAM_PPD_API_EG_QOS_ID, 
    "eg_qos", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "",
    "", 
    "",
    BIT_UI_16_RNG(SOC_FUN_PPD_API_EG_QOS_FIRST_ID,SOC_FUN_PPD_API_EG_QOS_LAST_ID), 
    1, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
#endif /* } eg_qos*/
#ifdef UI_ACL/* { acl*/
#endif /* } acl*/
#ifdef UI_FP/* { fp*/
  { 
    SOC_PARAM_PPD_FP_PACKET_DIAG_GET_PACKET_DIAG_GET_ID, 
    "packet_diag_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Get the Field Processing of the last packets.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api fp packet_diag_get\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FP_PACKET_DIAG_GET_PACKET_DIAG_GET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FP_PACKET_FORMAT_GROUP_SET_PACKET_FORMAT_GROUP_SET_ID, 
    "packet_format_group_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set a Packet Format Group (PFG). The packet format group defines the\n\r"
    "  supported Packet formats. The user must indicate for each Database which\n\r"
    "  Packet format(s) are associated with this Database.E.g.: A Packet Format\n\r"
    "  Group including only IPv6 packets can be defined to use Databases with IPv6\n\r"
    "  Destination-IP qualifiers.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api fp packet_format_group_set pfg_ndx 0 pp_ports_bmp 0\n\r"
    "  vlan_tag_structure_bmp 0 hdr_format_bmp 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FP_PACKET_FORMAT_GROUP_SET_PACKET_FORMAT_GROUP_SET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FP_PACKET_FORMAT_GROUP_SET_PACKET_FORMAT_GROUP_SET_PFG_NDX_ID, 
    "pfg_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pfg_ndx:\n\r"
    "  Packet Format Group index. Range: 0 - 4. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api fp packet_format_group_set pfg_ndx 0 pp_ports_bmp 0\n\r"
    "  vlan_tag_structure_bmp 0 hdr_format_bmp 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FP_PACKET_FORMAT_GROUP_SET_PACKET_FORMAT_GROUP_SET_ID), 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FP_PACKET_FORMAT_GROUP_SET_PACKET_FORMAT_GROUP_SET_INFO_PP_PORTS_BMP_ID, 
    "pp_ports_bmp", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  info.pp_ports_bmp:\n\r"
    "  Bitmap of the PP-Ports supporting this Packet Format Group. The PP-Port\n\r"
    "  configuration must be set previously (in Petra-B, via the soc_pb_port_pp_port_set\n\r"
    "  API).\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api fp packet_format_group_set pfg_ndx 0 pp_ports_bmp 0\n\r"
    "  vlan_tag_structure_bmp 0 hdr_format_bmp 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FP_PACKET_FORMAT_GROUP_SET_PACKET_FORMAT_GROUP_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FP_PACKET_FORMAT_GROUP_SET_PACKET_FORMAT_GROUP_SET_INFO_VLAN_TAG_STRUCTURE_BMP_ID, 
    "vlan_tag_structure_bmp", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  info.vlan_tag_structure_bmp:\n\r"
    "  VLAN Tag structure bitmap based on the SOC_SAND_PP_ETHERNET_FRAME_VLAN_FORMAT\n\r"
    "  values. Default value: 0xFFFF_FFFF (all VLAN format).\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api fp packet_format_group_set pfg_ndx 0 pp_ports_bmp 0\n\r"
    "  vlan_tag_structure_bmp 0 hdr_format_bmp 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FP_PACKET_FORMAT_GROUP_SET_PACKET_FORMAT_GROUP_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FP_PACKET_FORMAT_GROUP_SET_PACKET_FORMAT_GROUP_SET_INFO_HDR_FORMAT_BMP_ID, 
    "hdr_format_bmp", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  info.hdr_format_bmp:\n\r"
    "  Header Format bitmap (based on the SOC_PPC_FP_PKT_HDR_TYPE values) of the\n\r"
    "  supported formats for this Packet Format Group. Only the Ethernet-based\n\r"
    "  header formats are allowed. Default value: 0x0. (None)\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api fp packet_format_group_set pfg_ndx 0 pp_ports_bmp 0\n\r"
    "  vlan_tag_structure_bmp 0 hdr_format_bmp 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FP_PACKET_FORMAT_GROUP_SET_PACKET_FORMAT_GROUP_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FP_PACKET_FORMAT_GROUP_GET_PACKET_FORMAT_GROUP_GET_ID, 
    "packet_format_group_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set a Packet Format Group (PFG). The packet format group defines the\n\r"
    "  supported Packet formats. The user must indicate for each Database which\n\r"
    "  Packet format(s) are associated with this Database.E.g.: A Packet Format\n\r"
    "  Group including only IPv6 packets can be defined to use Databases with IPv6\n\r"
    "  Destination-IP qualifiers.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api fp packet_format_group_get pfg_ndx 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FP_PACKET_FORMAT_GROUP_GET_PACKET_FORMAT_GROUP_GET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FP_PACKET_FORMAT_GROUP_GET_PACKET_FORMAT_GROUP_GET_PFG_NDX_ID, 
    "pfg_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  pfg_ndx:\n\r"
    "  Packet Format Group index. Range: 0 - 4. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api fp packet_format_group_get pfg_ndx 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FP_PACKET_FORMAT_GROUP_GET_PACKET_FORMAT_GROUP_GET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FP_DATABASE_CREATE_DATABASE_CREATE_ID, 
    "database_create", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Create a database. Each database specifies the action types to perform and\n\r"
    "  the qualifier fields for this Database.Entries in the database specify the\n\r"
    "  specific actions to be taken upon specific values of the packet.E.g.: Policy\n\r"
    "  Based Routing database update the FEC value according to DSCP DIP and In-RIF.\n\r"
    "  An entry in the database may set the FEC of a packet with DIP 1.2.2.3, DSCP\n\r"
    "  value 7 and In-RIF 3 to be 9.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api fp database_create db_id_ndx 0 strength 0 action_types_index 0\n\r"
    "  action_types 0 qual_types_index 0 qual_types 0 supported_pfgs 0 db_type 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FP_DATABASE_CREATE_DATABASE_CREATE_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FP_DATABASE_CREATE_DATABASE_CREATE_DB_ID_NDX_ID, 
    "db_id_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  db_id_ndx:\n\r"
    "  Database-ID. Range: 0 - 127. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api fp database_create db_id_ndx 0 strength 0 action_types_index 0\n\r"
    "  action_types 0 qual_types_index 0 qual_types 0 supported_pfgs 0 db_type 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FP_DATABASE_CREATE_DATABASE_CREATE_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FP_DATABASE_CREATE_DATABASE_CREATE_INFO_STRENGTH_ID, 
    "strength", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  info.strength:\n\r"
    "  Database strength (i.e., priority compared to the other databases).When\n\r"
    "  several databases result in updating the same action, the database priority\n\r"
    "  selects the action to be committed. Highest priority: 0. Lowest priority: 127.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api fp database_create db_id_ndx 0 strength 0 action_types_index 0\n\r"
    "  action_types 0 qual_types_index 0 qual_types 0 supported_pfgs 0 db_type 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FP_DATABASE_CREATE_DATABASE_CREATE_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FP_DATABASE_CREATE_DATABASE_CREATE_INFO_ACTION_TYPE0_ID, 
    "action_type0", 
    (PARAM_VAL_RULES *)&SOC_PPC_FP_ACTION_TYPE_rule[0], 
    (sizeof(SOC_PPC_FP_ACTION_TYPE_rule) / sizeof(SOC_PPC_FP_ACTION_TYPE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  info.action_types[ prm_action_types_index]:\n\r"
    "  Action types applied by the database.Select the list of actions to be applied\n\r"
    "  to matching entries. For the Egress Database, the action type list can be set\n\r"
    "  using the macro SOC_PPD_FP_EGRESS_ACTION_TYPE_PRESET\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api fp database_create db_id_ndx 0 strength 0 action_types_index 0\n\r"
    "  action_types 0 qual_types_index 0 qual_types 0 supported_pfgs 0 db_type 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FP_DATABASE_CREATE_DATABASE_CREATE_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },
  { 
    SOC_PARAM_PPD_FP_DATABASE_CREATE_DATABASE_CREATE_INFO_ACTION_TYPE1_ID, 
    "action_type1", 
    (PARAM_VAL_RULES *)&SOC_PPC_FP_ACTION_TYPE_rule[0], 
    (sizeof(SOC_PPC_FP_ACTION_TYPE_rule) / sizeof(SOC_PPC_FP_ACTION_TYPE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  info.action_types[ prm_action_types_index]:\n\r"
    "  Action types applied by the database.Select the list of actions to be applied\n\r"
    "  to matching entries. For the Egress Database, the action type list can be set\n\r"
    "  using the macro SOC_PPD_FP_EGRESS_ACTION_TYPE_PRESET\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api fp database_create db_id_ndx 0 strength 0 action_types_index 0\n\r"
    "  action_types 0 qual_types_index 0 qual_types 0 supported_pfgs 0 db_type 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FP_DATABASE_CREATE_DATABASE_CREATE_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },
  { 
    SOC_PARAM_PPD_FP_DATABASE_CREATE_DATABASE_CREATE_INFO_ACTION_TYPE2_ID, 
    "action_type2", 
    (PARAM_VAL_RULES *)&SOC_PPC_FP_ACTION_TYPE_rule[0], 
    (sizeof(SOC_PPC_FP_ACTION_TYPE_rule) / sizeof(SOC_PPC_FP_ACTION_TYPE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  info.action_types[ prm_action_types_index]:\n\r"
    "  Action types applied by the database.Select the list of actions to be applied\n\r"
    "  to matching entries. For the Egress Database, the action type list can be set\n\r"
    "  using the macro SOC_PPD_FP_EGRESS_ACTION_TYPE_PRESET\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api fp database_create db_id_ndx 0 strength 0 action_types_index 0\n\r"
    "  action_types 0 qual_types_index 0 qual_types 0 supported_pfgs 0 db_type 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FP_DATABASE_CREATE_DATABASE_CREATE_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },
  { 
    SOC_PARAM_PPD_FP_DATABASE_CREATE_DATABASE_CREATE_INFO_ACTION_TYPE3_ID, 
    "action_type3", 
    (PARAM_VAL_RULES *)&SOC_PPC_FP_ACTION_TYPE_rule[0], 
    (sizeof(SOC_PPC_FP_ACTION_TYPE_rule) / sizeof(SOC_PPC_FP_ACTION_TYPE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  info.action_types[ prm_action_types_index]:\n\r"
    "  Action types applied by the database.Select the list of actions to be applied\n\r"
    "  to matching entries. For the Egress Database, the action type list can be set\n\r"
    "  using the macro SOC_PPD_FP_EGRESS_ACTION_TYPE_PRESET\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api fp database_create db_id_ndx 0 strength 0 action_types_index 0\n\r"
    "  action_types 0 qual_types_index 0 qual_types 0 supported_pfgs 0 db_type 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FP_DATABASE_CREATE_DATABASE_CREATE_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },
  { 
    SOC_PARAM_PPD_FP_DATABASE_CREATE_DATABASE_CREATE_INFO_QUAL_TYPE0_ID, 
    "qual_type0", 
    (PARAM_VAL_RULES *)&SOC_PPC_FP_QUAL_TYPE_rule[0], 
    (sizeof(SOC_PPC_FP_QUAL_TYPE_rule) / sizeof(SOC_PPC_FP_QUAL_TYPE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  info.qual_types[ prm_qual_types_index]:\n\r"
    "  Types of the Qualifier fields for this database.Selects the header /\n\r"
    "  processing attributes, to be searched in the database.For a Database of type\n\r"
    "  'Direct Table', the sum of the qualifier sizes must be inferior to 10\n\r"
    "  bits.For Databases using predefined ACL Keys (L2, L3 IPv4 or IPv6 or Egress),\n\r"
    "  use the SOC_PPC_FP_QUAL_TYPE_PRESET to define the qualifier types.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api fp database_create db_id_ndx 0 strength 0 action_types_index 0\n\r"
    "  action_types 0 qual_types_index 0 qual_types 0 supported_pfgs 0 db_type 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FP_DATABASE_CREATE_DATABASE_CREATE_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },
  { 
    SOC_PARAM_PPD_FP_DATABASE_CREATE_DATABASE_CREATE_INFO_QUAL_TYPE1_ID, 
    "qual_type1", 
    (PARAM_VAL_RULES *)&SOC_PPC_FP_QUAL_TYPE_rule[0], 
    (sizeof(SOC_PPC_FP_QUAL_TYPE_rule) / sizeof(SOC_PPC_FP_QUAL_TYPE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  info.qual_types[ prm_qual_types_index]:\n\r"
    "  Types of the Qualifier fields for this database.Selects the header /\n\r"
    "  processing attributes, to be searched in the database.For a Database of type\n\r"
    "  'Direct Table', the sum of the qualifier sizes must be inferior to 10\n\r"
    "  bits.For Databases using predefined ACL Keys (L2, L3 IPv4 or IPv6 or Egress),\n\r"
    "  use the SOC_PPC_FP_QUAL_TYPE_PRESET to define the qualifier types.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api fp database_create db_id_ndx 0 strength 0 action_types_index 0\n\r"
    "  action_types 0 qual_types_index 0 qual_types 0 supported_pfgs 0 db_type 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FP_DATABASE_CREATE_DATABASE_CREATE_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },
  { 
    SOC_PARAM_PPD_FP_DATABASE_CREATE_DATABASE_CREATE_INFO_QUAL_TYPE2_ID, 
    "qual_type2", 
    (PARAM_VAL_RULES *)&SOC_PPC_FP_QUAL_TYPE_rule[0], 
    (sizeof(SOC_PPC_FP_QUAL_TYPE_rule) / sizeof(SOC_PPC_FP_QUAL_TYPE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  info.qual_types[ prm_qual_types_index]:\n\r"
    "  Types of the Qualifier fields for this database.Selects the header /\n\r"
    "  processing attributes, to be searched in the database.For a Database of type\n\r"
    "  'Direct Table', the sum of the qualifier sizes must be inferior to 10\n\r"
    "  bits.For Databases using predefined ACL Keys (L2, L3 IPv4 or IPv6 or Egress),\n\r"
    "  use the SOC_PPC_FP_QUAL_TYPE_PRESET to define the qualifier types.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api fp database_create db_id_ndx 0 strength 0 action_types_index 0\n\r"
    "  action_types 0 qual_types_index 0 qual_types 0 supported_pfgs 0 db_type 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FP_DATABASE_CREATE_DATABASE_CREATE_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },
  { 
    SOC_PARAM_PPD_FP_DATABASE_CREATE_DATABASE_CREATE_INFO_QUAL_TYPE3_ID, 
    "qual_type3", 
    (PARAM_VAL_RULES *)&SOC_PPC_FP_QUAL_TYPE_rule[0], 
    (sizeof(SOC_PPC_FP_QUAL_TYPE_rule) / sizeof(SOC_PPC_FP_QUAL_TYPE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  info.qual_types[ prm_qual_types_index]:\n\r"
    "  Types of the Qualifier fields for this database.Selects the header /\n\r"
    "  processing attributes, to be searched in the database.For a Database of type\n\r"
    "  'Direct Table', the sum of the qualifier sizes must be inferior to 10\n\r"
    "  bits.For Databases using predefined ACL Keys (L2, L3 IPv4 or IPv6 or Egress),\n\r"
    "  use the SOC_PPC_FP_QUAL_TYPE_PRESET to define the qualifier types.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api fp database_create db_id_ndx 0 strength 0 action_types_index 0\n\r"
    "  action_types 0 qual_types_index 0 qual_types 0 supported_pfgs 0 db_type 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FP_DATABASE_CREATE_DATABASE_CREATE_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },
  { 
    SOC_PARAM_PPD_FP_DATABASE_CREATE_DATABASE_CREATE_INFO_SUPPORTED_PFGS_ID, 
    "supported_pfgs", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  info.supported_pfgs:\n\r"
    "  Packet Format Groups (PFGs) bitmap for which this Database-ID must be\n\r"
    "  performed. The PFGs are configured via the soc_ppd_fp_packet_format_group_set\n\r"
    "  API.Not relevant for Egress Database. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api fp database_create db_id_ndx 0 strength 0 action_types_index 0\n\r"
    "  action_types 0 qual_types_index 0 qual_types 0 supported_pfgs 0 db_type 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FP_DATABASE_CREATE_DATABASE_CREATE_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FP_DATABASE_CREATE_DATABASE_CREATE_INFO_DB_TYPE_ID, 
    "db_type", 
    (PARAM_VAL_RULES *)&SOC_PPC_FP_DATABASE_TYPE_rule[0], 
    (sizeof(SOC_PPC_FP_DATABASE_TYPE_rule) / sizeof(SOC_PPC_FP_DATABASE_TYPE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  info.db_type:\n\r"
    "  Database type: The database may be:TCAM, Direct Table, or Direct Extraction:\n\r"
    "  Enable using determining the action value, according to the qualifier value.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api fp database_create db_id_ndx 0 strength 0 action_types_index 0\n\r"
    "  action_types 0 qual_types_index 0 qual_types 0 supported_pfgs 0 db_type 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FP_DATABASE_CREATE_DATABASE_CREATE_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FP_DATABASE_GET_DATABASE_GET_ID, 
    "database_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Get the database parameters. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api fp database_get db_id_ndx 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FP_DATABASE_GET_DATABASE_GET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FP_DATABASE_GET_DATABASE_GET_DB_ID_NDX_ID, 
    "db_id_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  db_id_ndx:\n\r"
    "  Database-ID. Range: 0 - 127.	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api fp database_get db_id_ndx 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FP_DATABASE_GET_DATABASE_GET_ID), 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FP_DATABASE_DESTROY_DATABASE_DESTROY_ID, 
    "database_destroy", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Destroy the database: all its entries are suppressed and the Database-ID is\n\r"
    "  freed. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api fp database_destroy db_id_ndx 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FP_DATABASE_DESTROY_DATABASE_DESTROY_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FP_DATABASE_DESTROY_DATABASE_DESTROY_DB_ID_NDX_ID, 
    "db_id_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  db_id_ndx:\n\r"
    "  Database-ID. Range: 0 - 127.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api fp database_destroy db_id_ndx 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FP_DATABASE_DESTROY_DATABASE_DESTROY_ID), 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FP_ENTRY_ADD_ENTRY_ADD_ID, 
    "entry_add", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Add an entry to the Database. The database entry is selected if the entire\n\r"
    "  relevant packet field values are matched to the database entry qualifiers\n\r"
    "  values. When the packet is qualified to several entries, the entry with the\n\r"
    "  strongest priority is chosen.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api fp entry_add db_id_ndx 0 entry_id_ndx 0 priority 0 actions_index 0\n\r"
    "  val 0 type 0 qual_vals_index 0 is_valid 0 val 0 type 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FP_ENTRY_ADD_ENTRY_ADD_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FP_ENTRY_ADD_ENTRY_ADD_DB_ID_NDX_ID, 
    "db_id_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  db_id_ndx:\n\r"
    "  Database-ID. Range: 0 - 127.	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api fp entry_add db_id_ndx 0 entry_id_ndx 0 priority 0 actions_index 0\n\r"
    "  val 0 type 0 qual_vals_index 0 is_valid 0 val 0 type 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FP_ENTRY_ADD_ENTRY_ADD_ID), 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FP_ENTRY_ADD_ENTRY_ADD_ENTRY_ID_NDX_ID, 
    "entry_id_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  entry_id_ndx:\n\r"
    "  Entry handle ID.The entry index is a SW handle, to enable retrieving the\n\r"
    "  entry attributes by the soc_ppd_fp_entry_get() function, and remove it by the\n\r"
    "  soc_ppd_fp_entry_remove() function.The actual location of the entry in the\n\r"
    "  database is selected according to the entry's priority. Range: 0 - 4K-1.	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api fp entry_add db_id_ndx 0 entry_id_ndx 0 priority 0 actions_index 0\n\r"
    "  val 0 type 0 qual_vals_index 0 is_valid 0 val 0 type 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FP_ENTRY_ADD_ENTRY_ADD_ID), 
    4, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FP_ENTRY_ADD_ENTRY_ADD_INFO_PRIORITY_ID, 
    "priority", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  info.priority:\n\r"
    "  Entry priority inside the database. Highest priority: 0. Lowest priority:\n\r"
    "  16K-1.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api fp entry_add db_id_ndx 0 entry_id_ndx 0 priority 0 actions_index 0\n\r"
    "  val 0 type 0 qual_vals_index 0 is_valid 0 val 0 type 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FP_ENTRY_ADD_ENTRY_ADD_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },
  { 
    SOC_PARAM_PPD_FP_ENTRY_ADD_ENTRY_ADD_INFO_ACTIONS_VAL_ARR_ID, 
    "actions_val_arr", 
    (PARAM_VAL_RULES *)&SOC_PPD_CELL_LINKS_NUMBER_rule[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  info.qual_vals[ prm_qual_vals_index].is_valid:\n\r"
    "  Qualifier field mask value. Bitmap parameter of 64 bits. For each bit, if\n\r"
    "  set, then the respective bit value is significant. Otherwise, the bit value\n\r"
    "  of the rule value 'val' is ignored.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api fp entry_add db_id_ndx 0 entry_id_ndx 0 priority 0 actions_index 0\n\r"
    "  val 0 type 0 qual_vals_index 0 is_valid 0 val 0 type 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FP_ENTRY_ADD_ENTRY_ADD_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },
  { 
    SOC_PARAM_PPD_FP_ENTRY_ADD_ENTRY_ADD_INFO_QUAL_VALS_IS_VALID_LSB_ARR_ID, 
    "is_valid_lsb_arr", 
    (PARAM_VAL_RULES *)&SOC_PPD_CELL_LINKS_NUMBER_rule[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  info.qual_vals[ prm_qual_vals_index].is_valid:\n\r"
    "  Qualifier field mask value. Bitmap parameter of 64 bits. For each bit, if\n\r"
    "  set, then the respective bit value is significant. Otherwise, the bit value\n\r"
    "  of the rule value 'val' is ignored.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api fp entry_add db_id_ndx 0 entry_id_ndx 0 priority 0 actions_index 0\n\r"
    "  val 0 type 0 qual_vals_index 0 is_valid 0 val 0 type 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FP_ENTRY_ADD_ENTRY_ADD_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },
  { 
    SOC_PARAM_PPD_FP_ENTRY_ADD_ENTRY_ADD_INFO_QUAL_VALS_IS_VALID_MSB_ARR_ID, 
    "is_valid_msb_arr", 
    (PARAM_VAL_RULES *)&SOC_PPD_CELL_LINKS_NUMBER_rule[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  info.qual_vals[ prm_qual_vals_index].is_valid:\n\r"
    "  Qualifier field mask value. Bitmap parameter of 64 bits. For each bit, if\n\r"
    "  set, then the respective bit value is significant. Otherwise, the bit value\n\r"
    "  of the rule value 'val' is ignored.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api fp entry_add db_id_ndx 0 entry_id_ndx 0 priority 0 actions_index 0\n\r"
    "  val 0 type 0 qual_vals_index 0 is_valid 0 val 0 type 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FP_ENTRY_ADD_ENTRY_ADD_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },
  { 
    SOC_PARAM_PPD_FP_ENTRY_ADD_ENTRY_ADD_INFO_QUAL_VALS_VAL_LSB_ARR_ID, 
    "qual_vals_val_lsb_arr", 
    (PARAM_VAL_RULES *)&SOC_PPD_CELL_LINKS_NUMBER_rule[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  info.qual_vals[ prm_qual_vals_index].val:\n\r"
    "  Qualifier field rule value. The 'is_valid' parameter is used as a mask. A\n\r"
    "  Packet field value is qualified for this Qualifier Field type if the Packet\n\r"
    "  field value masked by 'is_valid' equals the Qualifier field value 'val'.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api fp entry_add db_id_ndx 0 entry_id_ndx 0 priority 0 actions_index 0\n\r"
    "  val 0 type 0 qual_vals_index 0 is_valid 0 val 0 type 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FP_ENTRY_ADD_ENTRY_ADD_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },
  { 
    SOC_PARAM_PPD_FP_ENTRY_ADD_ENTRY_ADD_INFO_QUAL_VALS_VAL_MSB_ARR_ID, 
    "qual_vals_val_msb_arr", 
    (PARAM_VAL_RULES *)&SOC_PPD_CELL_LINKS_NUMBER_rule[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  info.qual_vals[ prm_qual_vals_index].val:\n\r"
    "  Qualifier field rule value. The 'is_valid' parameter is used as a mask. A\n\r"
    "  Packet field value is qualified for this Qualifier Field type if the Packet\n\r"
    "  field value masked by 'is_valid' equals the Qualifier field value 'val'.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api fp entry_add db_id_ndx 0 entry_id_ndx 0 priority 0 actions_index 0\n\r"
    "  val 0 type 0 qual_vals_index 0 is_valid 0 val 0 type 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FP_ENTRY_ADD_ENTRY_ADD_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },
  { 
    SOC_PARAM_PPD_FP_ENTRY_GET_ENTRY_GET_ID, 
    "entry_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Get an entry from the Database. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api fp entry_get db_id_ndx 0 entry_id_ndx 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FP_ENTRY_GET_ENTRY_GET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FP_ENTRY_GET_ENTRY_GET_DB_ID_NDX_ID, 
    "db_id_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  db_id_ndx:\n\r"
    "  Database-ID. Range: 0 - 127.	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api fp entry_get db_id_ndx 0 entry_id_ndx 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FP_ENTRY_GET_ENTRY_GET_ID), 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FP_ENTRY_GET_ENTRY_GET_ENTRY_ID_NDX_ID, 
    "entry_id_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  entry_id_ndx:\n\r"
    "  Entry-ID. Range: 0 - 4K-1.	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api fp entry_get db_id_ndx 0 entry_id_ndx 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FP_ENTRY_GET_ENTRY_GET_ID), 
    4, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FP_ENTRY_REMOVE_ENTRY_REMOVE_ID, 
    "entry_remove", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Remove an entry from the Database. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api fp entry_remove db_id_ndx 0 entry_id_ndx 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FP_ENTRY_REMOVE_ENTRY_REMOVE_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FP_ENTRY_REMOVE_ENTRY_REMOVE_DB_ID_NDX_ID, 
    "db_id_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  db_id_ndx:\n\r"
    "  Database-ID. Range: 0 - 127.	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api fp entry_remove db_id_ndx 0 entry_id_ndx 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FP_ENTRY_REMOVE_ENTRY_REMOVE_ID), 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FP_ENTRY_REMOVE_ENTRY_REMOVE_ENTRY_ID_NDX_ID, 
    "entry_id_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  entry_id_ndx:\n\r"
    "  Entry-ID. Range: 0 - 4K-1.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api fp entry_remove db_id_ndx 0 entry_id_ndx 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FP_ENTRY_REMOVE_ENTRY_REMOVE_ID), 
    4, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FP_DATABASE_ENTRIES_GET_BLOCK_DATABASE_ENTRIES_GET_BLOCK_ID, 
    "database_entries_get_block", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Get the Database entries.The function returns list of entries that were added\n\r"
    "  to a database with database ID 'db_id_ndx'.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api fp database_entries_get_block db_id_ndx 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FP_DATABASE_ENTRIES_GET_BLOCK_DATABASE_ENTRIES_GET_BLOCK_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FP_DATABASE_ENTRIES_GET_BLOCK_DATABASE_ENTRIES_GET_BLOCK_DB_ID_NDX_ID, 
    "db_id_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  db_id_ndx:\n\r"
    "  Database-ID. Range: 0 - 127.	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api fp database_entries_get_block db_id_ndx 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FP_DATABASE_ENTRIES_GET_BLOCK_DATABASE_ENTRIES_GET_BLOCK_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FP_DIRECT_EXTRACTION_ENTRY_ADD_DIRECT_EXTRACTION_ENTRY_ADD_ID, 
    "de_entry_add", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Add an entry to the Database. The database entry is selected if all the\n\r"
    "  Packet Qualifier field values are in the Database entry range. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api fp direct_extraction_entry_add db_id_ndx 0 entry_id_ndx 0 priority 0\n\r"
    "  actions_index 0 base_val 0 nof_fields 0 fld_ext_index 0 nof_bits 0 cst_val 0\n\r"
    "  fld_lsb 0 type 0 type 0 qual_vals_index 0 is_valid 0 val 0 type 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FP_DIRECT_EXTRACTION_ENTRY_ADD_DIRECT_EXTRACTION_ENTRY_ADD_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FP_DIRECT_EXTRACTION_ENTRY_ADD_DIRECT_EXTRACTION_ENTRY_ADD_DB_ID_NDX_ID, 
    "db_id_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  db_id_ndx:\n\r"
    "  Database-ID. Range: 0 - 127.	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api fp direct_extraction_entry_add db_id_ndx 0 entry_id_ndx 0 priority 0\n\r"
    "  actions_index 0 base_val 0 nof_fields 0 fld_ext_index 0 nof_bits 0 fld_lsb 0\n\r"
    "  type 0 type 0 qual_vals_index 0 is_valid 0 val 0 type 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FP_DIRECT_EXTRACTION_ENTRY_ADD_DIRECT_EXTRACTION_ENTRY_ADD_ID), 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FP_DIRECT_EXTRACTION_ENTRY_ADD_DIRECT_EXTRACTION_ENTRY_ADD_ENTRY_ID_NDX_ID, 
    "entry_id_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  entry_id_ndx:\n\r"
    "  Entry-ID. Range: 0 - 15.	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api fp direct_extraction_entry_add db_id_ndx 0 entry_id_ndx 0 priority 0\n\r"
    "  actions_index 0 base_val 0 nof_fields 0 fld_ext_index 0 nof_bits 0 fld_lsb 0\n\r"
    "  type 0 type 0 qual_vals_index 0 is_valid 0 val 0 type 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FP_DIRECT_EXTRACTION_ENTRY_ADD_DIRECT_EXTRACTION_ENTRY_ADD_ID), 
    4, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FP_DIRECT_EXTRACTION_ENTRY_ADD_DIRECT_EXTRACTION_ENTRY_ADD_INFO_PRIORITY_ID, 
    "priority", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  info.priority:\n\r"
    "  Priorities entries inside the database. Highest priority: 0. Lowest priority:\n\r"
    "  7.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api fp direct_extraction_entry_add db_id_ndx 0 entry_id_ndx 0 priority 0\n\r"
    "  actions_index 0 base_val 0 nof_fields 0 fld_ext_index 0 nof_bits 0 fld_lsb 0\n\r"
    "  type 0 type 0 qual_vals_index 0 is_valid 0 val 0 type 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FP_DIRECT_EXTRACTION_ENTRY_ADD_DIRECT_EXTRACTION_ENTRY_ADD_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FP_DIRECT_EXTRACTION_ENTRY_ADD_DIRECT_EXTRACTION_ENTRY_ADD_INFO_ACTIONS_INDEX_ID, 
    "actions_index", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  actions_index:\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api fp direct_extraction_entry_add db_id_ndx 0 entry_id_ndx 0 priority 0\n\r"
    "  actions_index 0 base_val 0 nof_fields 0 fld_ext_index 0 nof_bits 0 fld_lsb 0\n\r"
    "  type 0 type 0 qual_vals_index 0 is_valid 0 val 0 type 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FP_DIRECT_EXTRACTION_ENTRY_ADD_DIRECT_EXTRACTION_ENTRY_ADD_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FP_DIRECT_EXTRACTION_ENTRY_ADD_DIRECT_EXTRACTION_ENTRY_ADD_INFO_ACTIONS_BASE_VAL_ID, 
    "action_base_val", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  info.actions[ prm_actions_index].base_val:\n\r"
    "  Base-value to add to the output field value.Range: 0 - 16K-1.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api fp direct_extraction_entry_add db_id_ndx 0 entry_id_ndx 0 priority 0\n\r"
    "  actions_index 0 base_val 0 nof_fields 0 fld_ext_index 0 nof_bits 0 fld_lsb 0\n\r"
    "  type 0 type 0 qual_vals_index 0 is_valid 0 val 0 type 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FP_DIRECT_EXTRACTION_ENTRY_ADD_DIRECT_EXTRACTION_ENTRY_ADD_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FP_DIRECT_EXTRACTION_ENTRY_ADD_DIRECT_EXTRACTION_ENTRY_ADD_INFO_ACTIONS_NOF_FIELDS_ID, 
    "action_val_nof_fields", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  info.actions[ prm_actions_index].nof_fields:\n\r"
    "  The number of valid entries in 'fld_ext'\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api fp direct_extraction_entry_add db_id_ndx 0 entry_id_ndx 0 priority 0\n\r"
    "  actions_index 0 base_val 0 nof_fields 0 fld_ext_index 0 nof_bits 0 fld_lsb 0\n\r"
    "  type 0 type 0 qual_vals_index 0 is_valid 0 val 0 type 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FP_DIRECT_EXTRACTION_ENTRY_ADD_DIRECT_EXTRACTION_ENTRY_ADD_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FP_DIRECT_EXTRACTION_ENTRY_ADD_DIRECT_EXTRACTION_ENTRY_ADD_INFO_ACTIONS_FLD_EXT_INDEX_ID, 
    "action_val_fld_ext_index", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  fld_ext_index:\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api fp direct_extraction_entry_add db_id_ndx 0 entry_id_ndx 0 priority 0\n\r"
    "  actions_index 0 base_val 0 nof_fields 0 fld_ext_index 0 nof_bits 0 fld_lsb 0\n\r"
    "  type 0 type 0 qual_vals_index 0 is_valid 0 val 0 type 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FP_DIRECT_EXTRACTION_ENTRY_ADD_DIRECT_EXTRACTION_ENTRY_ADD_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FP_DIRECT_EXTRACTION_ENTRY_ADD_DIRECT_EXTRACTION_ENTRY_ADD_INFO_ACTIONS_FLD_EXT_NOF_BITS_ID, 
    "action_val_fld_ext_nof_bits", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  info.actions[ prm_actions_index].fld_ext[ prm_fld_ext_index].nof_bits:\n\r"
    "  Number of bits to extract. Is ignored if the field type refers to an enum\n\r"
    "  (the effective number set corresponds to the minimum number of bits necessary\n\r"
    "  to encode all the field values, i.e. 4 values are encoded in 2 bits).Range: 0\n\r"
    "  - 17.The sum of all the extracted field size must be under the action size\n\r"
    "  (determined according to the action type).\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api fp direct_extraction_entry_add db_id_ndx 0 entry_id_ndx 0 priority 0\n\r"
    "  actions_index 0 base_val 0 nof_fields 0 fld_ext_index 0 nof_bits 0 cst_val 0\n\r"
    "  fld_lsb 0 type 0 type 0 qual_vals_index 0 is_valid 0 val 0 type 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FP_DIRECT_EXTRACTION_ENTRY_ADD_DIRECT_EXTRACTION_ENTRY_ADD_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FP_DIRECT_EXTRACTION_ENTRY_ADD_DIRECT_EXTRACTION_ENTRY_ADD_INFO_ACTIONS_FLD_EXT_CST_VAL_ID, 
    "cst_val", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  info.actions[ prm_actions_index].fld_ext[ prm_fld_ext_index].cst_val:\n\r"
    "  Constant value to insert. If set, this value is inserted instead of the\n\r"
    "  Qualifier of type 'type'. In this case, only 'nof_bits' must be set.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api fp direct_extraction_entry_add db_id_ndx 0 entry_id_ndx 0 priority 0\n\r"
    "  actions_index 0 base_val 0 nof_fields 0 fld_ext_index 0 nof_bits 0 cst_val 0\n\r"
    "  fld_lsb 0 type 0 type 0 qual_vals_index 0 is_valid 0 val 0 type 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FP_DIRECT_EXTRACTION_ENTRY_ADD_DIRECT_EXTRACTION_ENTRY_ADD_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FP_DIRECT_EXTRACTION_ENTRY_ADD_DIRECT_EXTRACTION_ENTRY_ADD_INFO_ACTIONS_FLD_EXT_FLD_LSB_ID, 
    "action_val_fld_ext_fld_lsb", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  info.actions[ prm_actions_index].fld_ext[ prm_fld_ext_index].fld_lsb:\n\r"
    "  LSB of the field where the value extraction starts.Is ignored and set to '0'\n\r"
    "  if the field type refers to an enum (the all field is extracted).\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api fp direct_extraction_entry_add db_id_ndx 0 entry_id_ndx 0 priority 0\n\r"
    "  actions_index 0 base_val 0 nof_fields 0 fld_ext_index 0 nof_bits 0 fld_lsb 0\n\r"
    "  type 0 type 0 qual_vals_index 0 is_valid 0 val 0 type 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FP_DIRECT_EXTRACTION_ENTRY_ADD_DIRECT_EXTRACTION_ENTRY_ADD_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FP_DIRECT_EXTRACTION_ENTRY_ADD_DIRECT_EXTRACTION_ENTRY_ADD_INFO_ACTIONS_FLD_EXT_TYPE_ID, 
    "action_val_fld_ext_qual_type", 
    (PARAM_VAL_RULES *)&SOC_PPC_FP_QUAL_TYPE_rule[0], 
    (sizeof(SOC_PPC_FP_QUAL_TYPE_rule) / sizeof(SOC_PPC_FP_QUAL_TYPE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  info.actions[ prm_actions_index].fld_ext[ prm_fld_ext_index].type:\n\r"
    "  Extracted Field type.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api fp direct_extraction_entry_add db_id_ndx 0 entry_id_ndx 0 priority 0\n\r"
    "  actions_index 0 base_val 0 nof_fields 0 fld_ext_index 0 nof_bits 0 fld_lsb 0\n\r"
    "  type 0 type 0 qual_vals_index 0 is_valid 0 val 0 type 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FP_DIRECT_EXTRACTION_ENTRY_ADD_DIRECT_EXTRACTION_ENTRY_ADD_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FP_DIRECT_EXTRACTION_ENTRY_ADD_DIRECT_EXTRACTION_ENTRY_ADD_INFO_ACTIONS_TYPE_ID, 
    "action_type", 
    (PARAM_VAL_RULES *)&SOC_PPC_FP_ACTION_TYPE_rule[0], 
    (sizeof(SOC_PPC_FP_ACTION_TYPE_rule) / sizeof(SOC_PPC_FP_ACTION_TYPE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  info.actions[ prm_actions_index].type:\n\r"
    "  Action type done by the entry.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api fp direct_extraction_entry_add db_id_ndx 0 entry_id_ndx 0 priority 0\n\r"
    "  actions_index 0 base_val 0 nof_fields 0 fld_ext_index 0 nof_bits 0 fld_lsb 0\n\r"
    "  type 0 type 0 qual_vals_index 0 is_valid 0 val 0 type 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FP_DIRECT_EXTRACTION_ENTRY_ADD_DIRECT_EXTRACTION_ENTRY_ADD_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FP_DIRECT_EXTRACTION_ENTRY_ADD_DIRECT_EXTRACTION_ENTRY_ADD_INFO_QUAL_VALS_INDEX_ID, 
    "qual_vals_index", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  qual_vals_index:\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api fp direct_extraction_entry_add db_id_ndx 0 entry_id_ndx 0 priority 0\n\r"
    "  actions_index 0 base_val 0 nof_fields 0 fld_ext_index 0 nof_bits 0 fld_lsb 0\n\r"
    "  type 0 type 0 qual_vals_index 0 is_valid 0 val 0 type 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FP_DIRECT_EXTRACTION_ENTRY_ADD_DIRECT_EXTRACTION_ENTRY_ADD_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FP_DIRECT_EXTRACTION_ENTRY_ADD_DIRECT_EXTRACTION_ENTRY_ADD_INFO_QUAL_VALS_IS_VALID_ID, 
    "qual_valid_bits", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  info.qual_vals[ prm_qual_vals_index].is_valid:\n\r"
    "  Qualifier field mask value. Bitmap parameter of 64 bits. For each bit, if\n\r"
    "  set, then the respective bit value is significant. Otherwise, the bit value\n\r"
    "  of the rule value 'val' is ignored.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api fp direct_extraction_entry_add db_id_ndx 0 entry_id_ndx 0 priority 0\n\r"
    "  actions_index 0 base_val 0 nof_fields 0 fld_ext_index 0 nof_bits 0 fld_lsb 0\n\r"
    "  type 0 type 0 qual_vals_index 0 is_valid 0 val 0 type 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FP_DIRECT_EXTRACTION_ENTRY_ADD_DIRECT_EXTRACTION_ENTRY_ADD_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FP_DIRECT_EXTRACTION_ENTRY_ADD_DIRECT_EXTRACTION_ENTRY_ADD_INFO_QUAL_VALS_VAL_ID, 
    "qual_valid_val", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  info.qual_vals[ prm_qual_vals_index].val:\n\r"
    "  Qualifier field rule value. The 'is_valid' parameter is used as a mask. A\n\r"
    "  Packet field value is qualified for this Qualifier Field type if the Packet\n\r"
    "  field value masked by 'is_valid' equals the Qualifier field value 'val'.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api fp direct_extraction_entry_add db_id_ndx 0 entry_id_ndx 0 priority 0\n\r"
    "  actions_index 0 base_val 0 nof_fields 0 fld_ext_index 0 nof_bits 0 fld_lsb 0\n\r"
    "  type 0 type 0 qual_vals_index 0 is_valid 0 val 0 type 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FP_DIRECT_EXTRACTION_ENTRY_ADD_DIRECT_EXTRACTION_ENTRY_ADD_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FP_DIRECT_EXTRACTION_ENTRY_ADD_DIRECT_EXTRACTION_ENTRY_ADD_INFO_QUAL_VALS_TYPE_ID, 
    "qual_type", 
    (PARAM_VAL_RULES *)&SOC_PPC_FP_QUAL_TYPE_rule[0], 
    (sizeof(SOC_PPC_FP_QUAL_TYPE_rule) / sizeof(SOC_PPC_FP_QUAL_TYPE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  info.qual_vals[ prm_qual_vals_index].type:\n\r"
    "  Qualifier Field type. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api fp direct_extraction_entry_add db_id_ndx 0 entry_id_ndx 0 priority 0\n\r"
    "  actions_index 0 base_val 0 nof_fields 0 fld_ext_index 0 nof_bits 0 fld_lsb 0\n\r"
    "  type 0 type 0 qual_vals_index 0 is_valid 0 val 0 type 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FP_DIRECT_EXTRACTION_ENTRY_ADD_DIRECT_EXTRACTION_ENTRY_ADD_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FP_DIRECT_EXTRACTION_ENTRY_GET_DIRECT_EXTRACTION_ENTRY_GET_ID, 
    "de_entry_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Get an entry from the Database. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api fp direct_extraction_entry_get db_id_ndx 0 entry_id_ndx 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FP_DIRECT_EXTRACTION_ENTRY_GET_DIRECT_EXTRACTION_ENTRY_GET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FP_DIRECT_EXTRACTION_ENTRY_GET_DIRECT_EXTRACTION_ENTRY_GET_DB_ID_NDX_ID, 
    "db_id_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  db_id_ndx:\n\r"
    "  Database-ID. Range: 0 - 127.	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api fp direct_extraction_entry_get db_id_ndx 0 entry_id_ndx 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FP_DIRECT_EXTRACTION_ENTRY_GET_DIRECT_EXTRACTION_ENTRY_GET_ID), 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FP_DIRECT_EXTRACTION_ENTRY_GET_DIRECT_EXTRACTION_ENTRY_GET_ENTRY_ID_NDX_ID, 
    "entry_id_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  entry_id_ndx:\n\r"
    "  Entry-ID. Range: 0 - 15.	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api fp direct_extraction_entry_get db_id_ndx 0 entry_id_ndx 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FP_DIRECT_EXTRACTION_ENTRY_GET_DIRECT_EXTRACTION_ENTRY_GET_ID), 
    4, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FP_DIRECT_EXTRACTION_ENTRY_REMOVE_DIRECT_EXTRACTION_ENTRY_REMOVE_ID, 
    "de_entry_remove", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Remove an entry from the Database. \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api fp direct_extraction_entry_remove db_id_ndx 0 entry_id_ndx 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FP_DIRECT_EXTRACTION_ENTRY_REMOVE_DIRECT_EXTRACTION_ENTRY_REMOVE_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FP_DIRECT_EXTRACTION_ENTRY_REMOVE_DIRECT_EXTRACTION_ENTRY_REMOVE_DB_ID_NDX_ID, 
    "db_id_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  db_id_ndx:\n\r"
    "  Database-ID. Range: 0 - 127.	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api fp direct_extraction_entry_remove db_id_ndx 0 entry_id_ndx 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FP_DIRECT_EXTRACTION_ENTRY_REMOVE_DIRECT_EXTRACTION_ENTRY_REMOVE_ID), 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FP_DIRECT_EXTRACTION_ENTRY_REMOVE_DIRECT_EXTRACTION_ENTRY_REMOVE_ENTRY_ID_NDX_ID, 
    "entry_id_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  entry_id_ndx:\n\r"
    "  Entry-ID. Range: 0 - 15.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api fp direct_extraction_entry_remove db_id_ndx 0 entry_id_ndx 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FP_DIRECT_EXTRACTION_ENTRY_REMOVE_DIRECT_EXTRACTION_ENTRY_REMOVE_ID), 
    4, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FP_DIRECT_EXTRACTION_DB_ENTRIES_GET_DIRECT_EXTRACTION_DB_ENTRIES_GET_ID, 
    "de_db_entries_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Get the Database entries.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api fp direct_extraction_db_entries_get db_id_ndx 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FP_DIRECT_EXTRACTION_DB_ENTRIES_GET_DIRECT_EXTRACTION_DB_ENTRIES_GET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FP_DIRECT_EXTRACTION_DB_ENTRIES_GET_DIRECT_EXTRACTION_DB_ENTRIES_GET_DB_ID_NDX_ID, 
    "db_id_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  db_id_ndx:\n\r"
    "  Database-ID. Range: 0 - 127.	\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api fp direct_extraction_db_entries_get db_id_ndx 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FP_DIRECT_EXTRACTION_DB_ENTRIES_GET_DIRECT_EXTRACTION_DB_ENTRIES_GET_ID), 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FP_CONTROL_SET_CONTROL_SET_ID, 
    "control_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set one of the control options.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api fp control_set rng 0 type 0 db_id 0 val_index 0 val 0 type 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FP_CONTROL_SET_CONTROL_SET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FP_CONTROL_SET_CONTROL_SET_CONTROL_NDX_VAL_NDX_ID, 
    "val_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  control_ndx.val_ndx:\n\r"
    "  Value index. Meaningful according to the 'type'.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api fp control_set val_ndx 0 type 0 db_id 0 val_index 0 val 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FP_CONTROL_SET_CONTROL_SET_ID), 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FP_CONTROL_SET_CONTROL_SET_CONTROL_NDX_TYPE_ID, 
    "type", 
    (PARAM_VAL_RULES *)&SOC_PPC_FP_CONTROL_TYPE_rule[0], 
    (sizeof(SOC_PPC_FP_CONTROL_TYPE_rule) / sizeof(SOC_PPC_FP_CONTROL_TYPE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  control_ndx.type:\n\r"
    "  Control type\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api fp control_set rng 0 type 0 db_id 0 val_index 0 val 0 type 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FP_CONTROL_SET_CONTROL_SET_ID), 
    4, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FP_CONTROL_SET_CONTROL_SET_CONTROL_NDX_DB_ID_ID, 
    "db_id", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  control_ndx.db_id:\n\r"
    "  Database index (if relevant). Range: 0 - 127.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api fp control_set rng 0 type 0 db_id 0 val_index 0 val 0 type 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FP_CONTROL_SET_CONTROL_SET_ID), 
    5, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FP_CONTROL_SET_CONTROL_SET_INFO_VAL0_ID, 
    "val0", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  info.val[ prm_val_index]:\n\r"
    "  Control Values. Their meaning depends on the control type \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api fp control_set rng 0 type 0 db_id 0 val_index 0 val 0 type 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FP_CONTROL_SET_CONTROL_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FP_CONTROL_SET_CONTROL_SET_INFO_VAL1_ID, 
    "val1", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  info.val[ prm_val_index]:\n\r"
    "  Control Values. Their meaning depends on the control type \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api fp control_set rng 0 type 0 db_id 0 val_index 0 val 0 type 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FP_CONTROL_SET_CONTROL_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
      { 
    SOC_PARAM_PPD_FP_CONTROL_SET_CONTROL_SET_INFO_VAL2_ID, 
    "val2", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  info.val[ prm_val_index]:\n\r"
    "  Control Values. Their meaning depends on the control type \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api fp control_set rng 0 type 0 db_id 0 val_index 0 val 0 type 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FP_CONTROL_SET_CONTROL_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
      { 
    SOC_PARAM_PPD_FP_CONTROL_SET_CONTROL_SET_INFO_VAL3_ID, 
    "val3", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  info.val[ prm_val_index]:\n\r"
    "  Control Values. Their meaning depends on the control type \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api fp control_set rng 0 type 0 db_id 0 val_index 0 val 0 type 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FP_CONTROL_SET_CONTROL_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
    { 
    SOC_PARAM_PPD_FP_CONTROL_GET_CONTROL_GET_ID, 
    "control_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set one of the control options.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api fp control_get rng 0 type 0 db_id 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FP_CONTROL_GET_CONTROL_GET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FP_CONTROL_GET_CONTROL_GET_CONTROL_NDX_VAL_NDX_ID, 
    "val_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  control_ndx.val_ndx:\n\r"
    "  Value index. Meaningful according to the 'type'.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api fp control_get val_ndx 0 type 0 db_id 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FP_CONTROL_GET_CONTROL_GET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FP_CONTROL_GET_CONTROL_GET_CONTROL_NDX_TYPE_ID, 
    "type", 
    (PARAM_VAL_RULES *)&SOC_PPC_FP_CONTROL_TYPE_rule[0], 
    (sizeof(SOC_PPC_FP_CONTROL_TYPE_rule) / sizeof(SOC_PPC_FP_CONTROL_TYPE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  control_ndx.type:\n\r"
    "  Control type\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api fp control_get rng 0 type 0 db_id 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FP_CONTROL_GET_CONTROL_GET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FP_CONTROL_GET_CONTROL_GET_CONTROL_NDX_DB_ID_ID, 
    "db_id", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  control_ndx.db_id:\n\r"
    "  Database index. Range: 0 - 127.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api fp control_get rng 0 type 0 db_id 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FP_CONTROL_GET_CONTROL_GET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FP_EGR_DB_MAP_SET_EGR_DB_MAP_SET_ID, 
    "egr_db_map_set", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set one of the control options.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api fp egr_db_map_set fwd_type_ndx 0 port_profile_ndx 0 db_id 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FP_EGR_DB_MAP_SET_EGR_DB_MAP_SET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FP_EGR_DB_MAP_SET_EGR_DB_MAP_SET_FWD_TYPE_NDX_ID, 
    "fwd_type_ndx", 
    (PARAM_VAL_RULES *)&SOC_PPC_FP_FWD_TYPE_rule[0], 
    (sizeof(SOC_PPC_FP_FWD_TYPE_rule) / sizeof(SOC_PPC_FP_FWD_TYPE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  fwd_type_ndx:\n\r"
    "  Packet forward type (excluding TM). \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api fp egr_db_map_set fwd_type_ndx 0 port_profile_ndx 0 db_id 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FP_EGR_DB_MAP_SET_EGR_DB_MAP_SET_ID), 
    3, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FP_EGR_DB_MAP_SET_EGR_DB_MAP_SET_PORT_PROFILE_NDX_ID, 
    "port_profile_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  port_profile_ndx:\n\r"
    "  PP-Port profile. Range: 0 - 3.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api fp egr_db_map_set fwd_type_ndx 0 port_profile_ndx 0 db_id 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FP_EGR_DB_MAP_SET_EGR_DB_MAP_SET_ID), 
    4, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FP_EGR_DB_MAP_SET_EGR_DB_MAP_SET_DB_ID_ID, 
    "db_id", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  db_id:\n\r"
    "  Database-Id to use for these packets. Range: 0 - 63.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api fp egr_db_map_set fwd_type_ndx 0 port_profile_ndx 0 db_id 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FP_EGR_DB_MAP_SET_EGR_DB_MAP_SET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FP_EGR_DB_MAP_GET_EGR_DB_MAP_GET_ID, 
    "egr_db_map_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  Set one of the control options.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api fp egr_db_map_get fwd_type_ndx 0 port_profile_ndx 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FP_EGR_DB_MAP_GET_EGR_DB_MAP_GET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FP_EGR_DB_MAP_GET_EGR_DB_MAP_GET_FWD_TYPE_NDX_ID, 
    "fwd_type_ndx", 
    (PARAM_VAL_RULES *)&SOC_PPC_FP_FWD_TYPE_rule[0], 
    (sizeof(SOC_PPC_FP_FWD_TYPE_rule) / sizeof(SOC_PPC_FP_FWD_TYPE_rule[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  fwd_type_ndx:\n\r"
    "  Packet forward type (excluding TM). \n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api fp egr_db_map_get fwd_type_ndx 0 port_profile_ndx 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FP_EGR_DB_MAP_GET_EGR_DB_MAP_GET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_FP_EGR_DB_MAP_GET_EGR_DB_MAP_GET_PORT_PROFILE_NDX_ID, 
    "port_profile_ndx", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "  port_profile_ndx:\n\r"
    "  PP-Port profile. Range: 0 - 3.\n\r"
    "",
#if UI_PPD_API_ADD_EXAMPLE 
    "Examples:\n\r" 
    "  soc_ppd_api fp egr_db_map_get fwd_type_ndx 0 port_profile_ndx 0\n\r"
#endif 
    "",
    "",
    BIT_UI_16(SOC_FUN_PPD_FP_EGR_DB_MAP_GET_EGR_DB_MAP_GET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_API_FP_ID, 
    "fp", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "",
    "", 
    "",
    BIT_UI_16_RNG(SOC_FUN_PPD_API_FP_FIRST_ID,SOC_FUN_PPD_API_FP_LAST_ID), 
    1, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  }, 
#endif /* } fp*/
#ifdef UI_ARAD_SIG_READ_ACC/* { UI_ARAD_SIG_READ_ACC*/
  { 
    SOC_PARAM_PPD_ARAD_REG_ACCESS_SIGNAL_ING_READ_ID, 
    "signal_get", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "",
    "", 
    "",
    BIT_UI_16(SOC_FUN_PPD_ARAD_REG_ACC_SIGNAL_GET_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_ARAD_REG_ACCESS_SIGNAL_ING_READ_BLOCK_ID, 
    "block_id", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "",
    "", 
    "",
    BIT_UI_16(SOC_FUN_PPD_ARAD_REG_ACC_SIGNAL_GET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_ARAD_REG_ACCESS_SIGNAL_ING_READ_CORE_ID, 
    "core_id", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "",
    "", 
    "",
    BIT_UI_16(SOC_FUN_PPD_ARAD_REG_ACC_SIGNAL_GET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_ARAD_REG_ACCESS_SIGNAL_ING_READ_ADDR_HIGH_ID, 
    "addr_high", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "",
    "", 
    "",
    BIT_UI_16(SOC_FUN_PPD_ARAD_REG_ACC_SIGNAL_GET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_ARAD_REG_ACCESS_SIGNAL_ING_READ_ADDR_LOW_ID, 
    "addr_low", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "",
    "", 
    "",
    BIT_UI_16(SOC_FUN_PPD_ARAD_REG_ACC_SIGNAL_GET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_ARAD_REG_ACCESS_SIGNAL_ING_READ_LSB_ID, 
    "lsb", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "",
    "",   
    "",
    BIT_UI_16(SOC_FUN_PPD_ARAD_REG_ACC_SIGNAL_GET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_ARAD_REG_ACCESS_SIGNAL_ING_READ_MSB_ID, 
    "msb", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "",
    "", 
    "",
    BIT_UI_16(SOC_FUN_PPD_ARAD_REG_ACC_SIGNAL_GET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_ARAD_REG_ACCESS_SIGNAL_ING_READ_BLOCK_ID_IS_EG, 
    "eg", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "",
    "", 
    "",
    BIT_UI_16(SOC_FUN_PPD_ARAD_REG_ACC_SIGNAL_GET_ID), 
    LAST_ORDINAL, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_ARAD_REG_ACCESS_SIGNALS_DUMP_ID, 
    "signals_dump", 
    (PARAM_VAL_RULES *)&soc_ppd_api_free_vals[0], 
    (sizeof(soc_ppd_api_free_vals) / sizeof(soc_ppd_api_free_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "",
    "", 
    "",
    BIT_UI_16(SOC_FUN_PPD_ARAD_REG_ACC_SIGNAL_DUMP_ID), 
    2, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
  { 
    SOC_PARAM_PPD_API_ARAD_REG_ACCESS_ID, 
    "reg_access_arad", 
    (PARAM_VAL_RULES *)&soc_ppd_api_empty_vals[0], 
    (sizeof(soc_ppd_api_empty_vals) / sizeof(soc_ppd_api_empty_vals[0])) - 1, 
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0, 
    0,0,0,0,0,0,0, 
    "",
    "", 
    "",
    BIT_UI_16_RNG(SOC_FUN_PPD_ARAD_REG_ACC_FIRST_ID,SOC_FUN_PPD_ARAD_REG_ACC_LAST_ID), 
    1, 
      /* 
       * Pointer to a function to call after symbolic parameter 
       * has been accepted. 
       */ 
    (VAL_PROC_PTR)NULL 
  },  
#endif /* } UI_PB_SIG_READ_ACC*/

/* 
 * Last element. Do not remove.
 */ 
  { 
    PARAM_END_OF_LIST 
  } 
} 
#endif  
;  
/* } */

#include <soc/dpp/SAND/Utils/sand_footer.h>

/* } __UI_ROM_DEFI_PPD_API_INCLUDED__*/
#endif
