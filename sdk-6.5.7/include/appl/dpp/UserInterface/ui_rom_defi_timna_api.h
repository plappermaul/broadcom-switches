/* $Id: ui_rom_defi_timna_api.h,v 1.3 Broadcom SDK $
 * $Copyright: (c) 2016 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
*/
#if LINK_TIMNA_LIBRARIES
                                                                    
#ifndef __UI_ROM_DEFI_TIMNA_API_INCLUDED__                       
/* { */                                                             
#define __UI_ROM_DEFI_TIMNA_API_INCLUDED__                       
                                                                    
#ifdef  __cplusplus                                                 
extern "C" {                                                      
#endif                                                              
                                                                    
#ifdef _MSC_VER                                                     
  /*                                                                
   * On MS-Windows platform this attribute is not defined.          
   */                                                               
  #define __ATTRIBUTE_PACKED__                                      
  #pragma pack(push)                                                
  #pragma pack(1)                                                   
                                                                    
#elif __GNUC__                                                      
    /*                                                              
     * GNUC packing attribute                                       
     */                                                             
     #define __ATTRIBUTE_PACKED__  __attribute__ ((packed))         
#else                                                               
     #error  "Add your system support for packed attribute."      
#endif                                                              
                                                                    
#include <appl/dpp/UserInterface/ui_pure_defi_timna_api.h>
#include <appl/dpp/UserInterface/ui_rom_defi_petra_pp_api.h>

#include <soc/dpp/Timna/timna_api_common.h>                                            

#include <soc/dpp/Timna/timna_api_vsid.h>
#include <soc/dpp/Timna/timna_api_policer.h>
#include <soc/dpp/SAND/SAND_FM/sand_pp_general.h>
#include <soc/dpp/timna/timna_api_common.h>                                                               
#include <soc/dpp/timna/timna_api_mac_lkup.h>                                                               
#include <soc/dpp/timna/timna_api_tpid.h>                                                               
#include <soc/dpp/timna/timna_api_ether_p2p.h>                                                               
#include <soc/dpp/timna/timna_api_bridging.h>                                                               
#include <soc/dpp/timna/timna_api_vid_res.h>                                                               
#include <soc/dpp/timna/timna_api_cos.h>                                                               
#include <soc/dpp/timna/timna_api_phy_port.h>                                                               
#include <soc/dpp/timna/timna_api_filter.h>                                                               
#include <soc/dpp/timna/timna_api_edit.h>                                                               
#include <soc/dpp/timna/timna_api_qinq.h>                                                               
#include <soc/dpp/timna/timna_api_trap.h>                                                               
#include <soc/dpp/timna/timna_api_vsid.h>                                                               
#include <soc/dpp/timna/timna_api_policer.h>                                                               
#include <soc/dpp/timna/timna_api_stp.h>                                                               
#include <soc/dpp/timna/timna_api_mngr.h>                                                               
#include <soc/dpp/timna/timna_api_parse.h>                                                               
#include <soc/dpp/timna/timna_api_trap.h>                                                               
#include <soc/dpp/timna/timna_api_vid_res.h>                                                               
#include <soc/dpp/timna/timna_api_cid_res.h>                                                               
#include <soc/dpp/timna/timna_api_mac_lkup.h>                                                               
#include <soc/dpp/timna/timna_api_stp.h>                                                               
#include <soc/dpp/timna/timna_api_filter.h>                                                               
#include <soc/dpp/timna/timna_api_edit.h>                                                               
#include <soc/dpp/timna/timna_api_mac_mngr.h>                                                               
#include <soc/dpp/timna/timna_api_policer.h>                                                               
#include <soc/dpp/timna/timna_api_diagnostics.h>                                                               
#include <soc/dpp/timna/timna_sweep_demo_app.h>                                                               
#include <soc/dpp/timna/timna_api_vsid.h>                                                               
#include <soc/dpp/timna/timna_api_policer.h>
#include <soc/dpp/timna/timna_api_acl.h>                                                               
#include <soc/dpp/timna/timna_api_ipv4_uc.h>                                                               
#include <soc/dpp/timna/timna_api_ipv4_uc_test.h>                                                               



 
 /* 
  * ENUM RULES 
  * {
  */
/********************************************************/        
/********************************************************/        
                                                                              
EXTERN CONST
   PARAM_VAL_RULES
     Timna_mac_addr_vals[]
#ifdef INIT
   =
{
  {
    VAL_TEXT,
    (char *)0,
    {
      {
          /*
           * Maximal number of characters.
           */
        12,
          /*
           * Casting added here just to keep the compiler silent.
           */
        (long)"    MAC address parameter. 12 hex digits. No 0 no 0x Prefix",
      }
    }
  },
/*
 * Last element. Do not remove.
 */
  {
    VAL_END_OF_LIST
  }
}
#endif
;  

/********************************************************
*NAME
*  subnet_ip
*TYPE: BUFFER
*FUNCTION:
*  ARRAY CONTAINING THE INITIAL LIST OF VALUES
*  RELATED TO THE PARAMETER "WRITE".
*ORGANIZATION:
*  ARRAY OF STRUCTURES OF TYPE 'PARAM_VAL':
*    int val_type -
*      Type of value. Can be:
*        VAL_END_OF_LIST 0
*        VAL_NUMERIC     1
*        VAL_SYMBOL      2
*        VAL_TEXT        3
*        VAL_IP          4
*      The first one is only to indicate the end of
*      this array. The others indicate what kind of
*      value this is.
*    VAL_DESCRIPTOR val_descriptor -
*      Union of structures (of types VAL_NUM_DESCRIPTOR,
*      VAL_TEXT_DESCRIPTOR, VAL_IP_DESCRIPTOR and
*      VAL_SYMB_DESCRIPTOR). Descriptor of value.
*      See details in file of definition. Note: Symbols
*      must be small letters only!
*USAGE:
*  SEE ORGANIZATION.
*REMARKS:
*  NONE.
*SEE ALSO:
*
********************************************************/
EXTERN CONST
   PARAM_VAL_RULES
     Subnet_ip_rule[]
#ifdef INIT
   =
{
  {
    VAL_IP,
    SYMB_NAME_IP,
    {
      {UI_DEMY_VAL
      }
    }
  },
/*
 * Last element. Do not remove.
 */
  {
    VAL_END_OF_LIST
  }
}
#endif
;

EXTERN CONST                                                                  
   PARAM_VAL_RULES                                                            
     SOC_SAND_PP_DEST_TYPE_rule[]                                                    
#ifdef INIT                                                                   
   =                                                                          
{                                                                             
  {                                                                           
    VAL_SYMBOL,                                                               
    "soc_sand_pp_dest_type_drop",                       
    {                                                                         
      {                                                                       
        SOC_SAND_PP_DEST_TYPE_DROP,                                             
          /*                                                                  
           * Casting added here just to keep the compiler silent.      
           */                                                                 
        (long)""                                                            
        "  SOC_SAND_PP_DEST_TYPE.SOC_SAND_PP_DEST_TYPE_DROP:\r\n"
        "  Drop destination\r\n"
        "",
          /*                                                                  
           * Pointer to a function to call after symbolic value               
           * has been accepted. Casting should be 'VAL_PROC_PTR'.             
           * Casting to 'long' added here just to keep the             
           * compiler silent.                                                 
           */                                                                 
        (long)NULL                                                            
      }                                                                       
    }                                                                         
  },                                                                          
  {                                                                           
    VAL_SYMBOL,                                                               
    "soc_sand_pp_dest_type_router",                       
    {                                                                         
      {                                                                       
        SOC_SAND_PP_DEST_TYPE_ROUTER,                                             
          /*                                                                  
           * Casting added here just to keep the compiler silent.      
           */                                                                 
        (long)""                                                            
        "  SOC_SAND_PP_DEST_TYPE.SOC_SAND_PP_DEST_TYPE_ROUTER:\r\n"
        "  Router destination\r\n"
        "",
          /*                                                                  
           * Pointer to a function to call after symbolic value               
           * has been accepted. Casting should be 'VAL_PROC_PTR'.             
           * Casting to 'long' added here just to keep the             
           * compiler silent.                                                 
           */                                                                 
        (long)NULL                                                            
      }                                                                       
    }                                                                         
  },                                                                          
  {                                                                           
    VAL_SYMBOL,                                                               
    "soc_sand_pp_dest_explicit_flow",                       
    {                                                                         
      {                                                                       
        SOC_SAND_PP_DEST_EXPLICIT_FLOW,                                             
          /*                                                                  
           * Casting added here just to keep the compiler silent.      
           */                                                                 
        (long)""                                                            
        "  SOC_SAND_PP_DEST_TYPE.SOC_SAND_PP_DEST_EXPLICIT_FLOW:\r\n"
        "  Single port\r\n"
        "",
          /*                                                                  
           * Pointer to a function to call after symbolic value               
           * has been accepted. Casting should be 'VAL_PROC_PTR'.             
           * Casting to 'long' added here just to keep the             
           * compiler silent.                                                 
           */                                                                 
        (long)NULL                                                            
      }                                                                       
    }                                                                         
  },                                                                          
  {                                                                           
    VAL_SYMBOL,                                                               
    "soc_sand_pp_dest_single_port",                       
    {                                                                         
      {                                                                       
        SOC_SAND_PP_DEST_SINGLE_PORT,                                             
          /*                                                                  
           * Casting added here just to keep the compiler silent.      
           */                                                                 
        (long)""                                                            
        "  SOC_SAND_PP_DEST_TYPE.SOC_SAND_PP_DEST_SINGLE_PORT:\r\n"
        "  Single port\r\n"
        "",
          /*                                                                  
           * Pointer to a function to call after symbolic value               
           * has been accepted. Casting should be 'VAL_PROC_PTR'.             
           * Casting to 'long' added here just to keep the             
           * compiler silent.                                                 
           */                                                                 
        (long)NULL                                                            
      }                                                                       
    }                                                                         
  },                                                                          
  {                                                                           
    VAL_SYMBOL,                                                               
    "soc_sand_pp_dest_lag",                       
    {                                                                         
      {                                                                       
        SOC_SAND_PP_DEST_LAG,                                             
          /*                                                                  
           * Casting added here just to keep the compiler silent.      
           */                                                                 
        (long)""                                                            
        "  SOC_SAND_PP_DEST_TYPE.SOC_SAND_PP_DEST_LAG:\r\n"
        "  GLAG\r\n"
        "",
          /*                                                                  
           * Pointer to a function to call after symbolic value               
           * has been accepted. Casting should be 'VAL_PROC_PTR'.             
           * Casting to 'long' added here just to keep the             
           * compiler silent.                                                 
           */                                                                 
        (long)NULL                                                            
      }                                                                       
    }                                                                         
  },                                                                          
  {                                                                           
    VAL_SYMBOL,                                                               
    "soc_sand_pp_dest_multicast",                       
    {                                                                         
      {                                                                       
        SOC_SAND_PP_DEST_MULTICAST,                                             
          /*                                                                  
           * Casting added here just to keep the compiler silent.      
           */                                                                 
        (long)""                                                            
        "  SOC_SAND_PP_DEST_TYPE.SOC_SAND_PP_DEST_MULTICAST:\r\n"
        "  LIF Group Destination\r\n"
        "",
          /*                                                                  
           * Pointer to a function to call after symbolic value               
           * has been accepted. Casting should be 'VAL_PROC_PTR'.             
           * Casting to 'long' added here just to keep the             
           * compiler silent.                                                 
           */                                                                 
        (long)NULL                                                            
      }                                                                       
    }                                                                         
  },                                                                          
  {                                                                           
    VAL_SYMBOL,                                                               
    "fec",                       
    {                                                                         
      {                                                                       
        SOC_SAND_PP_DEST_FEC,                                             
          /*                                                                  
           * Casting added here just to keep the compiler silent.      
           */                                                                 
        (long)""                                                            
        "  SOC_SAND_PP_DEST_TYPE.SOC_SAND_PP_DEST_FEC:\r\n"
        "  OUT LIF Destination. Relevant only if not plain bridging.\r\n"
        "",
          /*                                                                  
           * Pointer to a function to call after symbolic value               
           * has been accepted. Casting should be 'VAL_PROC_PTR'.             
           * Casting to 'long' added here just to keep the             
           * compiler silent.                                                 
           */                                                                 
        (long)NULL                                                            
      }                                                                       
    }                                                                         
  },                                                                          
/*                                                                            
 * Last element. Do not remove.                                               
 */                                                                           
  {                                                                           
    VAL_END_OF_LIST                                                           
  }                                                                           
}                                                                             
#endif                                                                        
;                                                                             

/*
EXTERN CONST                                                                  
PARAM_VAL_RULES                                                            
SOC_SAND_PP_SYS_PORT_TYPE_rule[]                                                    
#ifdef INIT                                                                   
=                                                                          
{                                                                             
  {                                                                           
    VAL_SYMBOL,                                                               
      "single_port",                       
    {                                                                         
      {                                                                       
        SOC_SAND_PP_DEST_SINGLE_PORT,                                             
          (long)""                                                            
          "  Single port\r\n"
          "",
          (long)NULL                                                            
      }                                                                       
    }                                                                         
  },                                                                          
  {                                                                           
    VAL_SYMBOL,                                                               
      "lag",                       
    {                                                                         
      {                                                                       
        SOC_SAND_PP_DEST_LAG,                                             
          (long)""                                                            
          "  LAG\r\n"
          "",
          (long)NULL                                                            
      }                                                                       
    }                                                                         
  },                                                                          
                                                                 
  {                                                                           
    VAL_END_OF_LIST                                                           
  }                                                                           
}                                                                             
#endif                                                                        
;                                                                             
*/
/********************************************************/        
/********************************************************/        
                                                                              
EXTERN CONST                                                                  
   PARAM_VAL_RULES                                                            
     SOC_SAND_PP_FRWRD_ACTION_TYPE_rule[]                                                    
#ifdef INIT                                                                   
   =                                                                          
{                                                                             
  {                                                                           
    VAL_SYMBOL,                                                               
    "none",                       
    {                                                                         
      {                                                                       
        SOC_SAND_PP_FRWRD_ACTION_TYPE_NONE,                                             
          /*                                                                  
           * Casting added here just to keep the compiler silent.      
           */                                                                 
        (long)""                                                            
        "  SOC_SAND_PP_FRWRD_ACTION_TYPE.SOC_SAND_PP_FRWRD_ACTION_TYPE_NONE:\r\n"
        "  No Forwarding Action\r\n"
        "",
          /*                                                                  
           * Pointer to a function to call after symbolic value               
           * has been accepted. Casting should be 'VAL_PROC_PTR'.             
           * Casting to 'long' added here just to keep the             
           * compiler silent.                                                 
           */                                                                 
        (long)NULL                                                            
      }                                                                       
    }                                                                         
  },                                                                          
  {                                                                           
    VAL_SYMBOL,                                                               
    "normal",                       
    {                                                                         
      {                                                                       
        SOC_SAND_PP_FRWRD_ACTION_TYPE_NORMAL,                                             
          /*                                                                  
           * Casting added here just to keep the compiler silent.      
           */                                                                 
        (long)""                                                            
        "  SOC_SAND_PP_FRWRD_ACTION_TYPE.SOC_SAND_PP_FRWRD_ACTION_TYPE_NORMAL:\r\n"
        "  The packet should be forwarded normally\r\n"
        "",
          /*                                                                  
           * Pointer to a function to call after symbolic value               
           * has been accepted. Casting should be 'VAL_PROC_PTR'.             
           * Casting to 'long' added here just to keep the             
           * compiler silent.                                                 
           */                                                                 
        (long)NULL                                                            
      }                                                                       
    }                                                                         
  },                                                                          
  {                                                                           
    VAL_SYMBOL,                                                               
    "intercept",                       
    {                                                                         
      {                                                                       
        SOC_SAND_PP_FRWRD_ACTION_TYPE_INTERCEPT,                                             
          /*                                                                  
           * Casting added here just to keep the compiler silent.      
           */                                                                 
        (long)""                                                            
        "  SOC_SAND_PP_FRWRD_ACTION_TYPE.SOC_SAND_PP_FRWRD_ACTION_TYPE_INTERCEPT:\r\n"
        "  The packet should be intercepted, usually to the CPU.\r\n"
        "",
          /*                                                                  
           * Pointer to a function to call after symbolic value               
           * has been accepted. Casting should be 'VAL_PROC_PTR'.             
           * Casting to 'long' added here just to keep the             
           * compiler silent.                                                 
           */                                                                 
        (long)NULL                                                            
      }                                                                       
    }                                                                         
  },                                                                          
  {                                                                           
    VAL_SYMBOL,                                                               
    "control",                       
    {                                                                         
      {                                                                       
        SOC_SAND_PP_FRWRD_ACTION_TYPE_CONTROL,                                             
          /*                                                                  
           * Casting added here just to keep the compiler silent.      
           */                                                                 
        (long)""                                                            
        "  SOC_SAND_PP_FRWRD_ACTION_TYPE.SOC_SAND_PP_FRWRD_ACTION_TYPE_CONTROL:\r\n"
        "  The packet is a control packet, usually destined to the CPU.\r\n"
        "",
          /*                                                                  
           * Pointer to a function to call after symbolic value               
           * has been accepted. Casting should be 'VAL_PROC_PTR'.             
           * Casting to 'long' added here just to keep the             
           * compiler silent.                                                 
           */                                                                 
        (long)NULL                                                            
      }                                                                       
    }                                                                         
  },                                                                          
/*                                                                            
 * Last element. Do not remove.                                               
 */                                                                           
  {                                                                           
    VAL_END_OF_LIST                                                           
  }                                                                           
}                                                                             
#endif                                                                        
;                                                                             

/********************************************************/        
/********************************************************/        
                                                                              
EXTERN CONST                                                                  
   PARAM_VAL_RULES                                                            
     SOC_SAND_PP_PORT_L2_TYPE_rule[]                                                    
#ifdef INIT                                                                   
   =                                                                          
{                                                                             
  {                                                                           
    VAL_SYMBOL,                                                               
    "vbp",                       
    {                                                                         
      {                                                                       
        SOC_SAND_PP_PORT_L2_TYPE_VBP,                                             
          /*                                                                  
           * Casting added here just to keep the compiler silent.      
           */                                                                 
        (long)""                                                            
        "  SOC_SAND_PP_PORT_L2_TYPE.SOC_SAND_PP_PORT_L2_TYPE_VBP\r\n"
        "",
          /*                                                                  
           * Pointer to a function to call after symbolic value               
           * has been accepted. Casting should be 'VAL_PROC_PTR'.             
           * Casting to 'long' added here just to keep the             
           * compiler silent.                                                 
           */                                                                 
        (long)NULL                                                            
      }                                                                       
    }                                                                         
  },                                                                          
  {                                                                           
    VAL_SYMBOL,                                                               
    "cnp",                       
    {                                                                         
      {                                                                       
        SOC_SAND_PP_PORT_L2_TYPE_CNP,                                             
          /*                                                                  
           * Casting added here just to keep the compiler silent.      
           */                                                                 
        (long)""                                                            
        "  SOC_SAND_PP_PORT_L2_TYPE.SOC_SAND_PP_PORT_L2_TYPE_CNP\r\n"
        "",
          /*                                                                  
           * Pointer to a function to call after symbolic value               
           * has been accepted. Casting should be 'VAL_PROC_PTR'.             
           * Casting to 'long' added here just to keep the             
           * compiler silent.                                                 
           */                                                                 
        (long)NULL                                                            
      }                                                                       
    }                                                                         
  },                                                                          
  {                                                                           
    VAL_SYMBOL,                                                               
    "cep",                       
    {                                                                         
      {                                                                       
        SOC_SAND_PP_PORT_L2_TYPE_CEP,                                             
          /*                                                                  
           * Casting added here just to keep the compiler silent.      
           */                                                                 
        (long)""                                                            
        "  SOC_SAND_PP_PORT_L2_TYPE.SOC_SAND_PP_PORT_L2_TYPE_CEP\r\n"
        "",
          /*                                                                  
           * Pointer to a function to call after symbolic value               
           * has been accepted. Casting should be 'VAL_PROC_PTR'.             
           * Casting to 'long' added here just to keep the             
           * compiler silent.                                                 
           */                                                                 
        (long)NULL                                                            
      }                                                                       
    }                                                                         
  },                                                                          
  {                                                                           
    VAL_SYMBOL,                                                               
    "pnp",                       
    {                                                                         
      {                                                                       
        SOC_SAND_PP_PORT_L2_TYPE_PNP,                                             
          /*                                                                  
           * Casting added here just to keep the compiler silent.      
           */                                                                 
        (long)""                                                            
        "  SOC_SAND_PP_PORT_L2_TYPE.SOC_SAND_PP_PORT_L2_TYPE_PNP\r\n"
        "",
          /*                                                                  
           * Pointer to a function to call after symbolic value               
           * has been accepted. Casting should be 'VAL_PROC_PTR'.             
           * Casting to 'long' added here just to keep the             
           * compiler silent.                                                 
           */                                                                 
        (long)NULL                                                            
      }                                                                       
    }                                                                         
  },                                                                          
/*                                                                            
 * Last element. Do not remove.                                               
 */                                                                           
  {                                                                           
    VAL_END_OF_LIST                                                           
  }                                                                           
}                                                                             
#endif                                                                        
;                                                                             

/********************************************************/        
/********************************************************/        
                                                                              
EXTERN CONST                                                                  
   PARAM_VAL_RULES                                                            
     SOC_SAND_PP_L4_PORT_TYPE_rule[]                                                    
#ifdef INIT                                                                   
   =                                                                          
{                                                                             
  {                                                                           
    VAL_SYMBOL,                                                               
    "udp",                       
    {                                                                         
      {                                                                       
        SOC_SAND_PP_L4_PORT_TYPE_UDP,                                             
          /*                                                                  
           * Casting added here just to keep the compiler silent.      
           */                                                                 
        (long)""                                                            
        "  SOC_SAND_PP_L4_PORT_TYPE.SOC_SAND_PP_L4_PORT_TYPE_UDP\r\n"
        "",
          /*                                                                  
           * Pointer to a function to call after symbolic value               
           * has been accepted. Casting should be 'VAL_PROC_PTR'.             
           * Casting to 'long' added here just to keep the             
           * compiler silent.                                                 
           */                                                                 
        (long)NULL                                                            
      }                                                                       
    }                                                                         
  },                                                                          
  {                                                                           
    VAL_SYMBOL,                                                               
    "tcp",                       
    {                                                                         
      {                                                                       
        SOC_SAND_PP_L4_PORT_TYPE_TCP,                                             
          /*                                                                  
           * Casting added here just to keep the compiler silent.      
           */                                                                 
        (long)""                                                            
        "  SOC_SAND_PP_L4_PORT_TYPE.SOC_SAND_PP_L4_PORT_TYPE_TCP\r\n"
        "",
          /*                                                                  
           * Pointer to a function to call after symbolic value               
           * has been accepted. Casting should be 'VAL_PROC_PTR'.             
           * Casting to 'long' added here just to keep the             
           * compiler silent.                                                 
           */                                                                 
        (long)NULL                                                            
      }                                                                       
    }                                                                         
  },                                                                          
/*                                                                            
 * Last element. Do not remove.                                               
 */                                                                           
  {                                                                           
    VAL_END_OF_LIST                                                           
  }                                                                           
}                                                                             
#endif                                                                        
;                                                                             

/********************************************************/        
/********************************************************/        
                                                                              
EXTERN CONST                                                                  
   PARAM_VAL_RULES                                                            
     TIMNA_MACT_AGE_STATUS_rule[]                                                    
#ifdef INIT                                                                   
   =                                                                          
{                                                                             
  {                                                                           
    VAL_SYMBOL,                                                               
    "status_0",                       
    {                                                                         
      {                                                                       
        TIMNA_MACT_AGE_STATUS_0,                                             
          /*                                                                  
           * Casting added here just to keep the compiler silent.      
           */                                                                 
        (long)""                                                            
        "  TIMNA_MACT_AGE_STATUS.TIMNA_MACT_AGE_STATUS_0:\r\n"
        "  This entry is not subject to Aging (static or invalid).\r\n"
        "",
          /*                                                                  
           * Pointer to a function to call after symbolic value               
           * has been accepted. Casting should be 'VAL_PROC_PTR'.             
           * Casting to 'long' added here just to keep the             
           * compiler silent.                                                 
           */                                                                 
        (long)NULL                                                            
      }                                                                       
    }                                                                         
  },                                                                          
  {                                                                           
    VAL_SYMBOL,                                                               
    "status_1",                       
    {                                                                         
      {                                                                       
        TIMNA_MACT_AGE_STATUS_1,                                             
          /*                                                                  
           * Casting added here just to keep the compiler silent.      
           */                                                                 
        (long)""                                                            
        "  TIMNA_MACT_AGE_STATUS.TIMNA_MACT_AGE_STATUS_1:\r\n"
        "  The age status was decremented twice.\r\n"
        "",
          /*                                                                  
           * Pointer to a function to call after symbolic value               
           * has been accepted. Casting should be 'VAL_PROC_PTR'.             
           * Casting to 'long' added here just to keep the             
           * compiler silent.                                                 
           */                                                                 
        (long)NULL                                                            
      }                                                                       
    }                                                                         
  },                                                                          
  {                                                                           
    VAL_SYMBOL,                                                               
    "status_2",                       
    {                                                                         
      {                                                                       
        TIMNA_MACT_AGE_STATUS_2,                                             
          /*                                                                  
           * Casting added here just to keep the compiler silent.      
           */                                                                 
        (long)""                                                            
        "  TIMNA_MACT_AGE_STATUS.TIMNA_MACT_AGE_STATUS_2:\r\n"
        "  The age status was decremented once.\r\n"
        "",
          /*                                                                  
           * Pointer to a function to call after symbolic value               
           * has been accepted. Casting should be 'VAL_PROC_PTR'.             
           * Casting to 'long' added here just to keep the             
           * compiler silent.                                                 
           */                                                                 
        (long)NULL                                                            
      }                                                                       
    }                                                                         
  },                                                                          
  {                                                                           
    VAL_SYMBOL,                                                               
    "status_3",                       
    {                                                                         
      {                                                                       
        TIMNA_MACT_AGE_STATUS_3,                                             
          /*                                                                  
           * Casting added here just to keep the compiler silent.      
           */                                                                 
        (long)""                                                            
        "  TIMNA_MACT_AGE_STATUS.TIMNA_MACT_AGE_STATUS_3:\r\n"
        "  The entry was refreshed or learned in the last cycle, and was not decremented\r\n"
        "  since then.\r\n"
        "",
          /*                                                                  
           * Pointer to a function to call after symbolic value               
           * has been accepted. Casting should be 'VAL_PROC_PTR'.             
           * Casting to 'long' added here just to keep the             
           * compiler silent.                                                 
           */                                                                 
        (long)NULL                                                            
      }                                                                       
    }                                                                         
  },                                                                          
/*                                                                            
 * Last element. Do not remove.                                               
 */                                                                           
  {                                                                           
    VAL_END_OF_LIST                                                           
  }                                                                           
}                                                                             
#endif                                                                        
;                                                                             

/********************************************************/        
/********************************************************/        
                                                                              
EXTERN CONST                                                                  
   PARAM_VAL_RULES                                                            
     TIMNA_MACT_FLUSH_MODE_rule[]                                                    
#ifdef INIT                                                                   
   =                                                                          
{                                                                             
  {                                                                           
    VAL_SYMBOL,                                                               
    "clear",                       
    {                                                                         
      {                                                                       
        TIMNA_MACT_FLUSH_MODE_CLEAR,                                             
          /*                                                                  
           * Casting added here just to keep the compiler silent.      
           */                                                                 
        (long)""                                                            
        "  TIMNA_MACT_FLUSH_MODE.TIMNA_MACT_FLUSH_MODE_CLEAR:\r\n"
        "  The MACT entry is deleted on match.\r\n"
        "",
          /*                                                                  
           * Pointer to a function to call after symbolic value               
           * has been accepted. Casting should be 'VAL_PROC_PTR'.             
           * Casting to 'long' added here just to keep the             
           * compiler silent.                                                 
           */                                                                 
        (long)NULL                                                            
      }                                                                       
    }                                                                         
  },                                                                          
  {                                                                           
    VAL_SYMBOL,                                                               
    "transplant",                       
    {                                                                         
      {                                                                       
        TIMNA_MACT_FLUSH_MODE_TRANSPLANT,                                             
          /*                                                                  
           * Casting added here just to keep the compiler silent.      
           */                                                                 
        (long)""                                                            
        "  TIMNA_MACT_FLUSH_MODE.TIMNA_MACT_FLUSH_MODE_TRANSPLANT:\r\n"
        "  The MACT entry is transplanted to a new destination on match.\r\n"
        "",
          /*                                                                  
           * Pointer to a function to call after symbolic value               
           * has been accepted. Casting should be 'VAL_PROC_PTR'.             
           * Casting to 'long' added here just to keep the             
           * compiler silent.                                                 
           */                                                                 
        (long)NULL                                                            
      }                                                                       
    }                                                                         
  },                                                                          
                                                                        
/*                                                                            
 * Last element. Do not remove.                                               
 */                                                                           
  {                                                                           
    VAL_END_OF_LIST                                                           
  }                                                                           
}                                                                             
#endif                                                                        
;                                                                             

/********************************************************/        
/********************************************************/        
                                                                              
EXTERN CONST                                                                  
   PARAM_VAL_RULES                                                            
     TIMNA_MACT_EVNET_LEARN_TYPE_rule[]                                                    
#ifdef INIT                                                                   
   =                                                                          
{                                                                             
  {                                                                           
    VAL_SYMBOL,                                                               
    "age_0",                       
    {                                                                         
      {                                                                       
        TIMNA_MACT_EVNET_LEARN_TYPE_AGE_0,                                             
          /*                                                                  
           * Casting added here just to keep the compiler silent.      
           */                                                                 
        (long)""                                                            
        "  TIMNA_MACT_EVNET_LEARN_TYPE.TIMNA_MACT_EVNET_LEARN_TYPE_AGE_0:\r\n"
        "  For age status equal 0\r\n"
        "",
          /*                                                                  
           * Pointer to a function to call after symbolic value               
           * has been accepted. Casting should be 'VAL_PROC_PTR'.             
           * Casting to 'long' added here just to keep the             
           * compiler silent.                                                 
           */                                                                 
        (long)NULL                                                            
      }                                                                       
    }                                                                         
  },                                                                          
  {                                                                           
    VAL_SYMBOL,                                                               
    "age_1",                       
    {                                                                         
      {                                                                       
        TIMNA_MACT_EVNET_LEARN_TYPE_AGE_1,                                             
          /*                                                                  
           * Casting added here just to keep the compiler silent.      
           */                                                                 
        (long)""                                                            
        "  TIMNA_MACT_EVNET_LEARN_TYPE.TIMNA_MACT_EVNET_LEARN_TYPE_AGE_1:\r\n"
        "  For age status equal 1\r\n"
        "",
          /*                                                                  
           * Pointer to a function to call after symbolic value               
           * has been accepted. Casting should be 'VAL_PROC_PTR'.             
           * Casting to 'long' added here just to keep the             
           * compiler silent.                                                 
           */                                                                 
        (long)NULL                                                            
      }                                                                       
    }                                                                         
  },                                                                          
  {                                                                           
    VAL_SYMBOL,                                                               
    "transplant",                       
    {                                                                         
      {                                                                       
        TIMNA_MACT_EVNET_LEARN_TYPE_TRANSPLANT,                                             
          /*                                                                  
           * Casting added here just to keep the compiler silent.      
           */                                                                 
        (long)""                                                            
        "  TIMNA_MACT_EVNET_LEARN_TYPE.TIMNA_MACT_EVNET_LEARN_TYPE_TRANSPLANT:\r\n"
        "  For change learned info (transplant)\r\n"
        "",
          /*                                                                  
           * Pointer to a function to call after symbolic value               
           * has been accepted. Casting should be 'VAL_PROC_PTR'.             
           * Casting to 'long' added here just to keep the             
           * compiler silent.                                                 
           */                                                                 
        (long)NULL                                                            
      }                                                                       
    }                                                                         
  },                                                                          
  {                                                                           
    VAL_SYMBOL,                                                               
    "not_exist",                       
    {                                                                         
      {                                                                       
        TIMNA_MACT_EVNET_LEARN_TYPE_NOT_EXIST,                                             
          /*                                                                  
           * Casting added here just to keep the compiler silent.      
           */                                                                 
        (long)""                                                            
        "  TIMNA_MACT_EVNET_LEARN_TYPE.TIMNA_MACT_EVNET_LEARN_TYPE_NOT_EXIST:\r\n"
        "  For entry do not exist\r\n"
        "",
          /*                                                                  
           * Pointer to a function to call after symbolic value               
           * has been accepted. Casting should be 'VAL_PROC_PTR'.             
           * Casting to 'long' added here just to keep the             
           * compiler silent.                                                 
           */                                                                 
        (long)NULL                                                            
      }                                                                       
    }                                                                         
  },                                                                          
/*                                                                            
 * Last element. Do not remove.                                               
 */                                                                           
  {                                                                           
    VAL_END_OF_LIST                                                           
  }                                                                           
}                                                                             
#endif                                                                        
;                                                                             

/********************************************************/        
/********************************************************/        
                                                                              
EXTERN CONST                                                                  
   PARAM_VAL_RULES                                                            
     TIMNA_MACT_EVENT_TYPE_rule[]                                                    
#ifdef INIT                                                                   
   =                                                                          
{                                                                             
  {                                                                           
    VAL_SYMBOL,                                                               
    "age_out",                       
    {                                                                         
      {                                                                       
        TIMNA_PP_MACT_EVENT_TYPE_AGE_OUT,                                             
          /*                                                                  
           * Casting added here just to keep the compiler silent.      
           */                                                                 
        (long)""                                                            
        "  TIMNA_MACT_EVENT_TYPE.TIMNA_PP_MACT_EVENT_TYPE_AGE_OUT:\r\n"
        "  Age out message.\r\n"
        "",
          /*                                                                  
           * Pointer to a function to call after symbolic value               
           * has been accepted. Casting should be 'VAL_PROC_PTR'.             
           * Casting to 'long' added here just to keep the             
           * compiler silent.                                                 
           */                                                                 
        (long)NULL                                                            
      }                                                                       
    }                                                                         
  },                                                                          
  {                                                                           
    VAL_SYMBOL,                                                               
    "learn",                       
    {                                                                         
      {                                                                       
        TIMNA_MACT_EVENT_TYPE_LEARN,                                             
          /*                                                                  
           * Casting added here just to keep the compiler silent.      
           */                                                                 
        (long)""                                                            
        "  TIMNA_MACT_EVENT_TYPE.TIMNA_MACT_EVENT_TYPE_LEARN:\r\n"
        "  Learn message.\r\n"
        "",
          /*                                                                  
           * Pointer to a function to call after symbolic value               
           * has been accepted. Casting should be 'VAL_PROC_PTR'.             
           * Casting to 'long' added here just to keep the             
           * compiler silent.                                                 
           */                                                                 
        (long)NULL                                                            
      }                                                                       
    }                                                                         
  },                                                                          
/*                                                                            
 * Last element. Do not remove.                                               
 */                                                                           
  {                                                                           
    VAL_END_OF_LIST                                                           
  }                                                                           
}                                                                             
#endif                                                                        
;                                                                             

/********************************************************/        
/********************************************************/        
                                                                              
EXTERN CONST                                                                  
   PARAM_VAL_RULES                                                            
     TIMNA_VID_ENCAP_TYPES_rule[]                                                    
#ifdef INIT                                                                   
   =                                                                          
{                                                                             
  {                                                                           
    VAL_SYMBOL,                                                               
    "llc",                       
    {                                                                         
      {                                                                       
        TIMNA_VID_ENCAP_TYPE_LLC,                                             
          /*                                                                  
           * Casting added here just to keep the compiler silent.      
           */                                                                 
        (long)""                                                            
        "  TIMNA_VID_ENCAP_TYPES.TIMNA_VID_ENCAP_TYPE_LLC:\r\n"
        "  Expecting DSAP-SSAP in encap_value\r\n"
        "",
          /*                                                                  
           * Pointer to a function to call after symbolic value               
           * has been accepted. Casting should be 'VAL_PROC_PTR'.             
           * Casting to 'long' added here just to keep the             
           * compiler silent.                                                 
           */                                                                 
        (long)NULL                                                            
      }                                                                       
    }                                                                         
  },                                                                          
  {                                                                           
    VAL_SYMBOL,                                                               
    "eth2_only",                       
    {                                                                         
      {                                                                       
        TIMNA_VID_ENCAP_TYPE_ETH2_ONLY,                                             
          /*                                                                  
           * Casting added here just to keep the compiler silent.      
           */                                                                 
        (long)""                                                            
        "  TIMNA_VID_ENCAP_TYPES.TIMNA_VID_ENCAP_TYPE_ETH2_ONLY:\r\n"
        "  Expecting Ethernet type in encap_value. The packet's type in the Ethernet II\r\n"
        "  type should be equal to encap_value\r\n"
        "",
          /*                                                                  
           * Pointer to a function to call after symbolic value               
           * has been accepted. Casting should be 'VAL_PROC_PTR'.             
           * Casting to 'long' added here just to keep the             
           * compiler silent.                                                 
           */                                                                 
        (long)NULL                                                            
      }                                                                       
    }                                                                         
  },                                                                          
  {                                                                           
    VAL_SYMBOL,                                                               
    "snap_only",                       
    {                                                                         
      {                                                                       
        TIMNA_VID_ENCAP_TYPE_SNAP_ONLY,                                             
          /*                                                                  
           * Casting added here just to keep the compiler silent.      
           */                                                                 
        (long)""                                                            
        "  TIMNA_VID_ENCAP_TYPES.TIMNA_VID_ENCAP_TYPE_SNAP_ONLY:\r\n"
        "  Expecting Ethernet type in encap_value. The packet's type in the SNAP type\r\n"
        "  should be equal to encap_value\r\n"
        "",
          /*                                                                  
           * Pointer to a function to call after symbolic value               
           * has been accepted. Casting should be 'VAL_PROC_PTR'.             
           * Casting to 'long' added here just to keep the             
           * compiler silent.                                                 
           */                                                                 
        (long)NULL                                                            
      }                                                                       
    }                                                                         
  },                                                                          
  {                                                                           
    VAL_SYMBOL,                                                               
    "snap_or_eth2",                       
    {                                                                         
      {                                                                       
        TIMNA_VID_ENCAP_TYPE_SNAP_OR_ETH2,                                             
          /*                                                                  
           * Casting added here just to keep the compiler silent.      
           */                                                                 
        (long)""                                                            
        "  TIMNA_VID_ENCAP_TYPES.TIMNA_VID_ENCAP_TYPE_SNAP_OR_ETH2:\r\n"
        "  Expecting Ethernet type in encap_value. The packet's type in the SNAP type OR\r\n"
        "  in the Ethernet II type should be equal to encap_value\r\n"
        "",
          /*                                                                  
           * Pointer to a function to call after symbolic value               
           * has been accepted. Casting should be 'VAL_PROC_PTR'.             
           * Casting to 'long' added here just to keep the             
           * compiler silent.                                                 
           */                                                                 
        (long)NULL                                                            
      }                                                                       
    }                                                                         
  },                                                                          
/*                                                                            
 * Last element. Do not remove.                                               
 */                                                                           
  {                                                                           
    VAL_END_OF_LIST                                                           
  }                                                                           
}                                                                             
#endif                                                                        
;                                                                             

/********************************************************/        
/********************************************************/        
                                                                              
EXTERN CONST                                                                  
   PARAM_VAL_RULES                                                            
     TIMNA_PORT_RLAG_TYPE_rule[]                                                    
#ifdef INIT                                                                   
   =                                                                          
{                                                                             
  {                                                                           
    VAL_SYMBOL,                                                               
    "rlag2",                       
    {                                                                         
      {                                                                       
        TIMNA_PORT_RLAG_TYPE_RLAG2,                                             
          /*                                                                  
           * Casting added here just to keep the compiler silent.      
           */                                                                 
        (long)""                                                            
        "  TIMNA_PORT_RLAG_TYPE.TIMNA_PORT_RLAG_TYPE_RLAG2:\r\n"
        "  2-port RLAG.\r\n"
        "",
          /*                                                                  
           * Pointer to a function to call after symbolic value               
           * has been accepted. Casting should be 'VAL_PROC_PTR'.             
           * Casting to 'long' added here just to keep the             
           * compiler silent.                                                 
           */                                                                 
        (long)NULL                                                            
      }                                                                       
    }                                                                         
  },                                                                          
  {                                                                           
    VAL_SYMBOL,                                                               
    "rlag4",                       
    {                                                                         
      {                                                                       
        TIMNA_PORT_RLAG_TYPE_RLAG4,                                             
          /*                                                                  
           * Casting added here just to keep the compiler silent.      
           */                                                                 
        (long)""                                                            
        "  TIMNA_PORT_RLAG_TYPE.TIMNA_PORT_RLAG_TYPE_RLAG4:\r\n"
        "  4-port RLAG.\r\n"
        "",
          /*                                                                  
           * Pointer to a function to call after symbolic value               
           * has been accepted. Casting should be 'VAL_PROC_PTR'.             
           * Casting to 'long' added here just to keep the             
           * compiler silent.                                                 
           */                                                                 
        (long)NULL                                                            
      }                                                                       
    }                                                                         
  },                                                                          
/*                                                                            
 * Last element. Do not remove.                                               
 */                                                                           
  {                                                                           
    VAL_END_OF_LIST                                                           
  }                                                                           
}                                                                             
#endif                                                                        
;                                                                             

/********************************************************/        
/********************************************************/        
                                                                              
EXTERN CONST                                                                  
   PARAM_VAL_RULES                                                            
     TIMNA_MTU_VIOLATION_ACTION_rule[]                                                    
#ifdef INIT                                                                   
   =                                                                          
{                                                                             
  {                                                                           
    VAL_SYMBOL,                                                               
    "forward",                       
    {                                                                         
      {                                                                       
        TIMNA_MTU_VIOLATION_ACTION_FORWARD,                                             
          /*                                                                  
           * Casting added here just to keep the compiler silent.      
           */                                                                 
        (long)""                                                            
        "  TIMNA_MTU_VIOLATION_ACTION.TIMNA_MTU_VIOLATION_ACTION_FORWARD\r\n"
        "",
          /*                                                                  
           * Pointer to a function to call after symbolic value               
           * has been accepted. Casting should be 'VAL_PROC_PTR'.             
           * Casting to 'long' added here just to keep the             
           * compiler silent.                                                 
           */                                                                 
        (long)NULL                                                            
      }                                                                       
    }                                                                         
  },                                                                          
  {                                                                           
    VAL_SYMBOL,                                                               
    "drop",                       
    {                                                                         
      {                                                                       
        TIMNA_MTU_VIOLATION_ACTION_DROP,                                             
          /*                                                                  
           * Casting added here just to keep the compiler silent.      
           */                                                                 
        (long)""                                                            
        "  TIMNA_MTU_VIOLATION_ACTION.TIMNA_MTU_VIOLATION_ACTION_DROP\r\n"
        "",
          /*                                                                  
           * Pointer to a function to call after symbolic value               
           * has been accepted. Casting should be 'VAL_PROC_PTR'.             
           * Casting to 'long' added here just to keep the             
           * compiler silent.                                                 
           */                                                                 
        (long)NULL                                                            
      }                                                                       
    }                                                                         
  },                                                                          
  {                                                                           
    VAL_SYMBOL,                                                               
    "trap",                       
    {                                                                         
      {                                                                       
        TIMNA_MTU_VIOLATION_ACTION_TRAP,                                             
          /*                                                                  
           * Casting added here just to keep the compiler silent.      
           */                                                                 
        (long)""                                                            
        "  TIMNA_MTU_VIOLATION_ACTION.TIMNA_MTU_VIOLATION_ACTION_TRAP\r\n"
        "",
          /*                                                                  
           * Pointer to a function to call after symbolic value               
           * has been accepted. Casting should be 'VAL_PROC_PTR'.             
           * Casting to 'long' added here just to keep the             
           * compiler silent.                                                 
           */                                                                 
        (long)NULL                                                            
      }                                                                       
    }                                                                         
  },                                                                          
/*                                                                            
 * Last element. Do not remove.                                               
 */                                                                           
  {                                                                           
    VAL_END_OF_LIST                                                           
  }                                                                           
}                                                                             
#endif                                                                        
;                                                                             
                                                                      

/********************************************************/        
/********************************************************/        
                                                                              
EXTERN CONST                                                                  
   PARAM_VAL_RULES                                                            
     TIMNA_FILTER_ACCEPT_FRAME_TYPE_rule[]                                                    
#ifdef INIT                                                                   
   =                                                                          
{                                                                             
  {                                                                           
    VAL_SYMBOL,                                                               
    "none",                       
    {                                                                         
      {                                                                       
        TIMNA_FILTER_ACCEPT_FRAME_TYPE_NONE,                                             
          /*                                                                  
           * Casting added here just to keep the compiler silent.      
           */                                                                 
        (long)""                                                            
        "  TIMNA_FILTER_ACCEPT_FRAME_TYPE.TIMNA_FILTER_ACCEPT_FRAME_TYPE_NONE:\r\n"
        "  No packets are accepted (, un and Priority-Tagged)\r\n"
        "",
          /*                                                                  
           * Pointer to a function to call after symbolic value               
           * has been accepted. Casting should be 'VAL_PROC_PTR'.             
           * Casting to 'long' added here just to keep the             
           * compiler silent.                                                 
           */                                                                 
        (long)NULL                                                            
      }                                                                       
    }                                                                         
  },                                                                          
  {                                                                           
    VAL_SYMBOL,                                                               
    "all",                       
    {                                                                         
      {                                                                       
        TIMNA_FILTER_ACCEPT_FRAME_TYPE_ALL,                                             
          /*                                                                  
           * Casting added here just to keep the compiler silent.      
           */                                                                 
        (long)""                                                            
        "  TIMNA_FILTER_ACCEPT_FRAME_TYPE.TIMNA_FILTER_ACCEPT_FRAME_TYPE_ALL:\r\n"
        "  All packets are accepted (, un and Priority-Tagged)\r\n"
        "",
          /*                                                                  
           * Pointer to a function to call after symbolic value               
           * has been accepted. Casting should be 'VAL_PROC_PTR'.             
           * Casting to 'long' added here just to keep the             
           * compiler silent.                                                 
           */                                                                 
        (long)NULL                                                            
      }                                                                       
    }                                                                         
  },                                                                          
  {                                                                           
    VAL_SYMBOL,                                                               
    "_only",                       
    {                                                                         
      {                                                                       
        TIMNA_FILTER_ACCEPT_FRAME_TYPE_TAGGED_ONLY,                                             
          /*                                                                  
           * Casting added here just to keep the compiler silent.      
           */                                                                 
        (long)""                                                            
        "  TIMNA_FILTER_ACCEPT_FRAME_TYPE.TIMNA_FILTER_ACCEPT_FRAME_TYPE_TAGGED_ONLY:\r\n"
        "  Tagged packets are accepted. Un and Priority-Tagged packets are filtered\r\n"
        "",
          /*                                                                  
           * Pointer to a function to call after symbolic value               
           * has been accepted. Casting should be 'VAL_PROC_PTR'.             
           * Casting to 'long' added here just to keep the             
           * compiler silent.                                                 
           */                                                                 
        (long)NULL                                                            
      }                                                                       
    }                                                                         
  },                                                                          
  {                                                                           
    VAL_SYMBOL,                                                               
    "un_and_priority_only",                       
    {                                                                         
      {                                                                       
        TIMNA_FILTER_ACCEPT_FRAME_TYPE_UNTAGGED_AND_PRIORITY_ONLY,                                             
          /*                                                                  
           * Casting added here just to keep the compiler silent.      
           */                                                                 
        (long)""                                                            
        "  TIMNA_FILTER_ACCEPT_FRAME_TYPE.TIMNA_FILTER_ACCEPT_FRAME_TYPE_UNTAGGED_AND_PR\r\n"
        "  ORITY_ONLY:\r\n"
        "  Un and Priority-Tagged packets are accepted. Tagged packets are filtered\r\n"
        "",
          /*                                                                  
           * Pointer to a function to call after symbolic value               
           * has been accepted. Casting should be 'VAL_PROC_PTR'.             
           * Casting to 'long' added here just to keep the             
           * compiler silent.                                                 
           */                                                                 
        (long)NULL                                                            
      }                                                                       
    }                                                                         
  },                                                                          
/*                                                                            
 * Last element. Do not remove.                                               
 */                                                                           
  {                                                                           
    VAL_END_OF_LIST                                                           
  }                                                                           
}                                                                             
#endif                                                                        
;                                                                             

/********************************************************/        
/********************************************************/        
                                                                              
EXTERN CONST                                                                  
   PARAM_VAL_RULES                                                            
     TIMNA_FILTER_ACCEPT_FRWRD_ACTION_TYPE_rule[]                                                    
#ifdef INIT                                                                   
   =                                                                          
{                                                                             
  {                                                                           
    VAL_SYMBOL,                                                               
    "none",                       
    {                                                                         
      {                                                                       
        TIMNA_FILTER_ACCEPT_FRWRD_ACTION_TYPE_NONE,                                             
          /*                                                                  
           * Casting added here just to keep the compiler silent.      
           */                                                                 
        (long)""                                                            
        "  TIMNA_FILTER_ACCEPT_FRWRD_ACTION_TYPE.TIMNA_FILTER_ACCEPT_FRWRD_ACTION_TYPE_N\r\n"
        "  NE:\r\n"
        "  Packet with any forwarding action is Not accepted (control, intercept or\r\n"
        "  snoop)\r\n"
        "",
          /*                                                                  
           * Pointer to a function to call after symbolic value               
           * has been accepted. Casting should be 'VAL_PROC_PTR'.             
           * Casting to 'long' added here just to keep the             
           * compiler silent.                                                 
           */                                                                 
        (long)NULL                                                            
      }                                                                       
    }                                                                         
  },                                                                          
  {                                                                           
    VAL_SYMBOL,                                                               
    "all",                       
    {                                                                         
      {                                                                       
        TIMNA_FILTER_ACCEPT_FRWRD_ACTION_TYPE_ALL,                                             
          /*                                                                  
           * Casting added here just to keep the compiler silent.      
           */                                                                 
        (long)""                                                            
        "  TIMNA_FILTER_ACCEPT_FRWRD_ACTION_TYPE.TIMNA_FILTER_ACCEPT_FRWRD_ACTION_TYPE_A\r\n"
        "  L:\r\n"
        "  Packet with any forwarding action is accepted (control, intercept or snoop)\r\n"
        "",
          /*                                                                  
           * Pointer to a function to call after symbolic value               
           * has been accepted. Casting should be 'VAL_PROC_PTR'.             
           * Casting to 'long' added here just to keep the             
           * compiler silent.                                                 
           */                                                                 
        (long)NULL                                                            
      }                                                                       
    }                                                                         
  },                                                                          
  {                                                                           
    VAL_SYMBOL,                                                               
    "control_only",                       
    {                                                                         
      {                                                                       
        TIMNA_FILTER_ACCEPT_FRWRD_ACTION_TYPE_CONTROL_ONLY,                                             
          /*                                                                  
           * Casting added here just to keep the compiler silent.      
           */                                                                 
        (long)""                                                            
        "  TIMNA_FILTER_ACCEPT_FRWRD_ACTION_TYPE.TIMNA_FILTER_ACCEPT_FRWRD_ACTION_TYPE_C\r\n"
        "  NTROL_ONLY:\r\n"
        "  Only Packets with control forwarding action are accepted, packets with\r\n"
        "  intercept or snoop forwarding actions are dropped.\r\n"
        "",
          /*                                                                  
           * Pointer to a function to call after symbolic value               
           * has been accepted. Casting should be 'VAL_PROC_PTR'.             
           * Casting to 'long' added here just to keep the             
           * compiler silent.                                                 
           */                                                                 
        (long)NULL                                                            
      }                                                                       
    }                                                                         
  },                                                                          
  {                                                                           
    VAL_SYMBOL,                                                               
    "intercept_snoop_only",                       
    {                                                                         
      {                                                                       
        TIMNA_FILTER_ACCEPT_FRWRD_ACTION_TYPE_INTERCEPT_SNOOP_ONLY,                                             
          /*                                                                  
           * Casting added here just to keep the compiler silent.      
           */                                                                 
        (long)""                                                            
        "  TIMNA_FILTER_ACCEPT_FRWRD_ACTION_TYPE.TIMNA_FILTER_ACCEPT_FRWRD_ACTION_TYPE_I\r\n"
        "  TERCEPT_SNOOP_ONLY:\r\n"
        "  Only Packets with intercept or snoop forwarding action are accepted, packets\r\n"
        "  with control forwarding actions are dropped.\r\n"
        "",
          /*                                                                  
           * Pointer to a function to call after symbolic value               
           * has been accepted. Casting should be 'VAL_PROC_PTR'.             
           * Casting to 'long' added here just to keep the             
           * compiler silent.                                                 
           */                                                                 
        (long)NULL                                                            
      }                                                                       
    }                                                                         
  },                                                                          
/*                                                                            
 * Last element. Do not remove.                                               
 */                                                                           
  {                                                                           
    VAL_END_OF_LIST                                                           
  }                                                                           
}                                                                             
#endif                                                                        
;                                                                             

/********************************************************/        
/********************************************************/        
                                                                              
EXTERN CONST                                                                  
   PARAM_VAL_RULES                                                            
     TIMNA_TRAP_PROTOCOL_rule[]                                                    
#ifdef INIT                                                                   
   =                                                                          
{                                                                             
  {                                                                           
    VAL_SYMBOL,                                                               
    "arp",                       
    {                                                                         
      {                                                                       
        TIMNA_TRAP_PROTOCOL_ARP,                                             
          /*                                                                  
           * Casting added here just to keep the compiler silent.      
           */                                                                 
        (long)""                                                            
        "  TIMNA_TRAP_PROTOCOL.TIMNA_TRAP_PROTOCOL_ARP:\r\n"
        "  ARP protocol \r\n"
        "",
          /*                                                                  
           * Pointer to a function to call after symbolic value               
           * has been accepted. Casting should be 'VAL_PROC_PTR'.             
           * Casting to 'long' added here just to keep the             
           * compiler silent.                                                 
           */                                                                 
        (long)NULL                                                            
      }                                                                       
    }                                                                         
  },                                                                          
  {                                                                           
    VAL_SYMBOL,                                                               
    "igmp_1",                       
    {                                                                         
      {                                                                       
        TIMNA_TRAP_PROTOCOL_IGMP_1,                                             
          /*                                                                  
           * Casting added here just to keep the compiler silent.      
           */                                                                 
        (long)""                                                            
        "  TIMNA_TRAP_PROTOCOL.TIMNA_TRAP_PROTOCOL_IGMP_1:\r\n"
        "  IGMP protocol, IGMP-Hdr.Type = 1\r\n"
        "",
          /*                                                                  
           * Pointer to a function to call after symbolic value               
           * has been accepted. Casting should be 'VAL_PROC_PTR'.             
           * Casting to 'long' added here just to keep the             
           * compiler silent.                                                 
           */                                                                 
        (long)NULL                                                            
      }                                                                       
    }                                                                         
  },                                                                          
  {                                                                           
    VAL_SYMBOL,                                                               
    "igmp_2",                       
    {                                                                         
      {                                                                       
        TIMNA_TRAP_PROTOCOL_IGMP_2,                                             
          /*                                                                  
           * Casting added here just to keep the compiler silent.      
           */                                                                 
        (long)""                                                            
        "  TIMNA_TRAP_PROTOCOL.TIMNA_TRAP_PROTOCOL_IGMP_2:\r\n"
        "  IGMP protocol, IGMP-Hdr.Type = 2\r\n"
        "",
          /*                                                                  
           * Pointer to a function to call after symbolic value               
           * has been accepted. Casting should be 'VAL_PROC_PTR'.             
           * Casting to 'long' added here just to keep the             
           * compiler silent.                                                 
           */                                                                 
        (long)NULL                                                            
      }                                                                       
    }                                                                         
  },                                                                          
  {                                                                           
    VAL_SYMBOL,                                                               
    "igmp_other",                       
    {                                                                         
      {                                                                       
        TIMNA_TRAP_PROTOCOL_IGMP_OTHER,                                             
          /*                                                                  
           * Casting added here just to keep the compiler silent.      
           */                                                                 
        (long)""                                                            
        "  TIMNA_TRAP_PROTOCOL.TIMNA_TRAP_PROTOCOL_IGMP_OTHER:\r\n"
        "  IGMP protocol, Rest IGMP-Hdr Types\r\n"
        "",
          /*                                                                  
           * Pointer to a function to call after symbolic value               
           * has been accepted. Casting should be 'VAL_PROC_PTR'.             
           * Casting to 'long' added here just to keep the             
           * compiler silent.                                                 
           */                                                                 
        (long)NULL                                                            
      }                                                                       
    }                                                                         
  },                                                                          
  {                                                                           
    VAL_SYMBOL,                                                               
    "vrrp",                       
    {                                                                         
      {                                                                       
        TIMNA_TRAP_PROTOCOL_VRRP,                                             
          /*                                                                  
           * Casting added here just to keep the compiler silent.      
           */                                                                 
        (long)""                                                            
        "  TIMNA_TRAP_PROTOCOL.TIMNA_TRAP_PROTOCOL_VRRP:\r\n"
        "  VRRP protocol\r\n"
        "",
          /*                                                                  
           * Pointer to a function to call after symbolic value               
           * has been accepted. Casting should be 'VAL_PROC_PTR'.             
           * Casting to 'long' added here just to keep the             
           * compiler silent.                                                 
           */                                                                 
        (long)NULL                                                            
      }                                                                       
    }                                                                         
  },                                                                          
  {                                                                           
    VAL_SYMBOL,                                                               
    "icmpv6",                       
    {                                                                         
      {                                                                       
        TIMNA_TRAP_PROTOCOL_ICMPV6,                                             
          /*                                                                  
           * Casting added here just to keep the compiler silent.      
           */                                                                 
        (long)""                                                            
        "  TIMNA_TRAP_PROTOCOL.TIMNA_TRAP_PROTOCOL_ICMPV6:\r\n"
        "  ICMPv6 protocol\r\n"
        "",
          /*                                                                  
           * Pointer to a function to call after symbolic value               
           * has been accepted. Casting should be 'VAL_PROC_PTR'.             
           * Casting to 'long' added here just to keep the             
           * compiler silent.                                                 
           */                                                                 
        (long)NULL                                                            
      }                                                                       
    }                                                                         
  },                                                                          
/*                                                                            
 * Last element. Do not remove.                                               
 */                                                                           
  {                                                                           
    VAL_END_OF_LIST                                                           
  }                                                                           
}                                                                             
#endif                                                                        
;                                                                             

/********************************************************/        
/********************************************************/        
                                                                              
EXTERN CONST                                                                  
   PARAM_VAL_RULES                                                            
     TIMNA_VSID_TABLE_SELECT_rule[]                                                    
#ifdef INIT                                                                   
   =                                                                          
{                                                                             
  {                                                                           
    VAL_SYMBOL,                                                               
    "ethernet_table",                       
    {                                                                         
      {                                                                       
        TIMNA_VSID_TABLE_SELECT_ETHERNET_TABLE,                                             
          /*                                                                  
           * Casting added here just to keep the compiler silent.      
           */                                                                 
        (long)""                                                            
        "  TIMNA_VSID_TABLE_SELECT.TIMNA_VSID_TABLE_SELECT_ETHERNET_TABLE:\r\n"
        "  selects the table of VC labels.\r\n"
        "",
          /*                                                                  
           * Pointer to a function to call after symbolic value               
           * has been accepted. Casting should be 'VAL_PROC_PTR'.             
           * Casting to 'long' added here just to keep the             
           * compiler silent.                                                 
           */                                                                 
        (long)NULL                                                            
      }                                                                       
    }                                                                         
  },                                                                          
  {                                                                           
    VAL_SYMBOL,                                                               
    "vc_table",                       
    {                                                                         
      {                                                                       
        TIMNA_VSID_TABLE_SELECT_VC_TABLE,                                             
          /*                                                                  
           * Casting added here just to keep the compiler silent.      
           */                                                                 
        (long)""                                                            
        "  TIMNA_VSID_TABLE_SELECT.TIMNA_VSID_TABLE_SELECT_VC_TABLE:\r\n"
        "  selects the table according to port and tags\r\n"
        "",
          /*                                                                  
           * Pointer to a function to call after symbolic value               
           * has been accepted. Casting should be 'VAL_PROC_PTR'.             
           * Casting to 'long' added here just to keep the             
           * compiler silent.                                                 
           */                                                                 
        (long)NULL                                                            
      }                                                                       
    }                                                                         
  },                                                                          
/*                                                                            
 * Last element. Do not remove.                                               
 */                                                                           
  {                                                                           
    VAL_END_OF_LIST                                                           
  }                                                                           
}                                                                             
#endif                                                                        
;                                                                             

/********************************************************/        
/********************************************************/        
                                                                              
EXTERN CONST                                                                  
   PARAM_VAL_RULES                                                            
     TIMNA_POLICER_RATE_MODE_rule[]                                                    
#ifdef INIT                                                                   
   =                                                                          
{                                                                             
  {                                                                           
    VAL_SYMBOL,                                                               
    "packets",                       
    {                                                                         
      {                                                                       
        TIMNA_POLICER_RATE_MODE_PACKETS,                                             
          /*                                                                  
           * Casting added here just to keep the compiler silent.      
           */                                                                 
        (long)""                                                            
        "  TIMNA_POLICER_RATE_MODE.TIMNA_POLICER_RATE_MODE_PACKETS:\r\n"
        "  policer is in packet mode. Every packet is considered to be 64 bytes.\r\n"
        "",
          /*                                                                  
           * Pointer to a function to call after symbolic value               
           * has been accepted. Casting should be 'VAL_PROC_PTR'.             
           * Casting to 'long' added here just to keep the             
           * compiler silent.                                                 
           */                                                                 
        (long)NULL                                                            
      }                                                                       
    }                                                                         
  },                                                                          
  {                                                                           
    VAL_SYMBOL,                                                               
    "bits",                       
    {                                                                         
      {                                                                       
        TIMNA_POLICER_RATE_MODE_BITS,                                             
          /*                                                                  
           * Casting added here just to keep the compiler silent.      
           */                                                                 
        (long)""                                                            
        "  TIMNA_POLICER_RATE_MODE.TIMNA_POLICER_RATE_MODE_BITS:\r\n"
        "  policer is in byte mode. Actual packet size is used. Including headers (after\r\n"
        "  Editing)\r\n"
        "",
          /*                                                                  
           * Pointer to a function to call after symbolic value               
           * has been accepted. Casting should be 'VAL_PROC_PTR'.             
           * Casting to 'long' added here just to keep the             
           * compiler silent.                                                 
           */                                                                 
        (long)NULL                                                            
      }                                                                       
    }                                                                         
  },                                                                          
/*                                                                            
 * Last element. Do not remove.                                               
 */                                                                           
  {                                                                           
    VAL_END_OF_LIST                                                           
  }                                                                           
}                                                                             
#endif                                                                        
;                                                                             

/********************************************************/        
/********************************************************/        
                                                                              
EXTERN CONST                                                                  
   PARAM_VAL_RULES                                                            
     TIMNA_STP_STATE_rule[]                                                    
#ifdef INIT                                                                   
   =                                                                          
{                                                                             
  {                                                                           
    VAL_SYMBOL,                                                               
    "discard",                       
    {                                                                         
      {                                                                       
        TIMNA_STP_STATE_DISCARD,                                             
          /*                                                                  
           * Casting added here just to keep the compiler silent.      
           */                                                                 
        (long)""                                                            
        "  TIMNA_STP_STATE.TIMNA_STP_STATE_DISCARD:\r\n"
        "  Packet is dropped. SA not learnt.\r\n"
        "",
          /*                                                                  
           * Pointer to a function to call after symbolic value               
           * has been accepted. Casting should be 'VAL_PROC_PTR'.             
           * Casting to 'long' added here just to keep the             
           * compiler silent.                                                 
           */                                                                 
        (long)NULL                                                            
      }                                                                       
    }                                                                         
  },                                                                          
  {                                                                           
    VAL_SYMBOL,                                                               
    "learn",                       
    {                                                                         
      {                                                                       
        TIMNA_STP_STATE_LEARN,                                             
          /*                                                                  
           * Casting added here just to keep the compiler silent.      
           */                                                                 
        (long)""                                                            
        "  TIMNA_STP_STATE.TIMNA_STP_STATE_LEARN:\r\n"
        "  Packet is dropped. SA learnt\r\n"
        "",
          /*                                                                  
           * Pointer to a function to call after symbolic value               
           * has been accepted. Casting should be 'VAL_PROC_PTR'.             
           * Casting to 'long' added here just to keep the             
           * compiler silent.                                                 
           */                                                                 
        (long)NULL                                                            
      }                                                                       
    }                                                                         
  },                                                                          
  {                                                                           
    VAL_SYMBOL,                                                               
    "forward",                       
    {                                                                         
      {                                                                       
        TIMNA_STP_STATE_FORWARD,                                             
          /*                                                                  
           * Casting added here just to keep the compiler silent.      
           */                                                                 
        (long)""                                                            
        "  TIMNA_STP_STATE.TIMNA_STP_STATE_FORWARD:\r\n"
        "  Packet is forwarded. SA learnt.\r\n"
        "",
          /*                                                                  
           * Pointer to a function to call after symbolic value               
           * has been accepted. Casting should be 'VAL_PROC_PTR'.             
           * Casting to 'long' added here just to keep the             
           * compiler silent.                                                 
           */                                                                 
        (long)NULL                                                            
      }                                                                       
    }                                                                         
  },                                                                          
/*                                                                            
 * Last element. Do not remove.                                               
 */                                                                           
  {                                                                           
    VAL_END_OF_LIST                                                           
  }                                                                           
}                                                                             
#endif                                                                        
;                                                                             
/********************************************************/        

EXTERN CONST                                                                  
PARAM_VAL_RULES                                                            
TIMNA_ACL_KEY_SELECT_rule[]                                                    
#ifdef INIT                                                                   
=                                                                          
{                                                                             
  {                                                                           
    VAL_SYMBOL,                                                               
      "local_port",                       
    {                                                                         
      {                                                                       
        TIMNA_ACL_KEY_SELECT_LOCAL_PORT,                                             
          /*                                                                  
          * Casting added here just to keep the compiler silent.      
          */                                                                 
          (long)""                                                            
          "  TIMNA_ACL_KEY_SELECT.TIMNA_ACL_KEY_SELECT_LOCAL_PORT:\r\n"
          "  The packets are examined according to local port (after LAG mapping). Size: 6\r\n"
          "  bits.\r\n"
          "",
          /*                                                                  
          * Pointer to a function to call after symbolic value               
          * has been accepted. Casting should be 'VAL_PROC_PTR'.             
          * Casting to 'long' added here just to keep the             
          * compiler silent.                                                 
          */                                                                 
          (long)NULL                                                            
      }                                                                       
    }                                                                         
  },                                                                          
  {                                                                           
    VAL_SYMBOL,                                                               
      "inlif",                       
    {                                                                         
      {                                                                       
        TIMNA_ACL_KEY_SELECT_INLIF,                                             
          /*                                                                  
          * Casting added here just to keep the compiler silent.      
          */                                                                 
          (long)""                                                            
          "  TIMNA_ACL_KEY_SELECT.TIMNA_ACL_KEY_SELECT_INLIF:\r\n"
          "  The packets are examined according to source ID of the packet. In 802.1AD and\r\n"
          "  802.1Q it is the system port ID. Size: 19 bits.\r\n"
          "",
          /*                                                                  
          * Pointer to a function to call after symbolic value               
          * has been accepted. Casting should be 'VAL_PROC_PTR'.             
          * Casting to 'long' added here just to keep the             
          * compiler silent.                                                 
          */                                                                 
          (long)NULL                                                            
      }                                                                       
    }                                                                         
  },                                                                          
  {                                                                           
    VAL_SYMBOL,                                                               
      "vsid",                       
    {                                                                         
      {                                                                       
        TIMNA_ACL_KEY_SELECT_VSID,                                             
          /*                                                                  
          * Casting added here just to keep the compiler silent.      
          */                                                                 
          (long)""                                                            
          "  TIMNA_ACL_KEY_SELECT.TIMNA_ACL_KEY_SELECT_VSID:\r\n"
          "  The packets are examined according to VSID the packets are associated to.\r\n"
          "  Size14 bits.\r\n"
          "",
          /*                                                                  
          * Pointer to a function to call after symbolic value               
          * has been accepted. Casting should be 'VAL_PROC_PTR'.             
          * Casting to 'long' added here just to keep the             
          * compiler silent.                                                 
          */                                                                 
          (long)NULL                                                            
      }                                                                       
    }                                                                         
  },                                                                          
  {                                                                           
    VAL_SYMBOL,                                                               
      "port_type",                       
    {                                                                         
      {                                                                       
        TIMNA_ACL_KEY_SELECT_PORT_TYPE,                                             
          /*                                                                  
          * Casting added here just to keep the compiler silent.      
          */                                                                 
          (long)""                                                            
          "  TIMNA_ACL_KEY_SELECT.TIMNA_ACL_KEY_SELECT_PORT_TYPE:\r\n"
          "  The packets are examined according to port type (VBP, CNP, CEP and PNP).\r\n"
          "  Size:2 bits.\r\n"
          "",
          /*                                                                  
          * Pointer to a function to call after symbolic value               
          * has been accepted. Casting should be 'VAL_PROC_PTR'.             
          * Casting to 'long' added here just to keep the             
          * compiler silent.                                                 
          */                                                                 
          (long)NULL                                                            
      }                                                                       
    }                                                                         
  },                                                                          
  {                                                                           
    VAL_SYMBOL,                                                               
      "svid",                       
    {                                                                         
      {                                                                       
        TIMNA_ACL_KEY_SELECT_SVID,                                             
          /*                                                                  
          * Casting added here just to keep the compiler silent.      
          */                                                                 
          (long)""                                                            
          "  TIMNA_ACL_KEY_SELECT.TIMNA_ACL_KEY_SELECT_SVID:\r\n"
          "  The packets are examined according to the VLAN ID of the S-TAG or the Tag\r\n"
          "  built in the parsing. zero if there is none. Size: 12 bits.\r\n"
          "",
          /*                                                                  
          * Pointer to a function to call after symbolic value               
          * has been accepted. Casting should be 'VAL_PROC_PTR'.             
          * Casting to 'long' added here just to keep the             
          * compiler silent.                                                 
          */                                                                 
          (long)NULL                                                            
      }                                                                       
    }                                                                         
  },                                                                          
  {                                                                           
    VAL_SYMBOL,                                                               
      "svid_exist",                       
    {                                                                         
      {                                                                       
        TIMNA_ACL_KEY_SELECT_SVID_EXIST,                                             
          /*                                                                  
          * Casting added here just to keep the compiler silent.      
          */                                                                 
          (long)""                                                            
          "  TIMNA_ACL_KEY_SELECT.TIMNA_ACL_KEY_SELECT_SVID_EXIST:\r\n"
          "  The packets are examined whether there is S-TAG in the packet. Size: 1 bits.\r\n"
          "",
          /*                                                                  
          * Pointer to a function to call after symbolic value               
          * has been accepted. Casting should be 'VAL_PROC_PTR'.             
          * Casting to 'long' added here just to keep the             
          * compiler silent.                                                 
          */                                                                 
          (long)NULL                                                            
      }                                                                       
    }                                                                         
  },                                                                          
  {                                                                           
    VAL_SYMBOL,                                                               
      "s_vlan_pcp",                       
    {                                                                         
      {                                                                       
        TIMNA_ACL_KEY_SELECT_S_VLAN_PCP,                                             
          /*                                                                  
          * Casting added here just to keep the compiler silent.      
          */                                                                 
          (long)""                                                            
          "  TIMNA_ACL_KEY_SELECT.TIMNA_ACL_KEY_SELECT_S_VLAN_PCP:\r\n"
          "  The packets are examined according to the PCP value returned in the Ethernet\r\n"
          "  Parsing (of the C-tag). Zero if there is none. Size: 3 bits.\r\n"
          "",
          /*                                                                  
          * Pointer to a function to call after symbolic value               
          * has been accepted. Casting should be 'VAL_PROC_PTR'.             
          * Casting to 'long' added here just to keep the             
          * compiler silent.                                                 
          */                                                                 
          (long)NULL                                                            
      }                                                                       
    }                                                                         
  },                                                                          
  {                                                                           
    VAL_SYMBOL,                                                               
      "s_vlan_dei",                       
    {                                                                         
      {                                                                       
        TIMNA_ACL_KEY_SELECT_S_VLAN_DEI,                                             
          /*                                                                  
          * Casting added here just to keep the compiler silent.      
          */                                                                 
          (long)""                                                            
          "  TIMNA_ACL_KEY_SELECT.TIMNA_ACL_KEY_SELECT_S_VLAN_DEI:\r\n"
          "  The packets are examined according to the DEI value returned in the Ethernet\r\n"
          "  Parsing (of the C-tag). Zero if there is none. Size: 1 bit.\r\n"
          "",
          /*                                                                  
          * Pointer to a function to call after symbolic value               
          * has been accepted. Casting should be 'VAL_PROC_PTR'.             
          * Casting to 'long' added here just to keep the             
          * compiler silent.                                                 
          */                                                                 
          (long)NULL                                                            
      }                                                                       
    }                                                                         
  },                                                                          
  {                                                                           
    VAL_SYMBOL,                                                               
      "cvid",                       
    {                                                                         
      {                                                                       
        TIMNA_ACL_KEY_SELECT_CVID,                                             
          /*                                                                  
          * Casting added here just to keep the compiler silent.      
          */                                                                 
          (long)""                                                            
          "  TIMNA_ACL_KEY_SELECT.TIMNA_ACL_KEY_SELECT_CVID:\r\n"
          "  The packets are examined according to the VLAN ID of the CTAG or the Tag\r\n"
          "  built in the parsing. zero if there is none. Size: 12 bits.\r\n"
          "",
          /*                                                                  
          * Pointer to a function to call after symbolic value               
          * has been accepted. Casting should be 'VAL_PROC_PTR'.             
          * Casting to 'long' added here just to keep the             
          * compiler silent.                                                 
          */                                                                 
          (long)NULL                                                            
      }                                                                       
    }                                                                         
  },                                                                          
  {                                                                           
    VAL_SYMBOL,                                                               
      "cvid_exist",                       
    {                                                                         
      {                                                                       
        TIMNA_ACL_KEY_SELECT_CVID_EXIST,                                             
          /*                                                                  
          * Casting added here just to keep the compiler silent.      
          */                                                                 
          (long)""                                                            
          "  TIMNA_ACL_KEY_SELECT.TIMNA_ACL_KEY_SELECT_CVID_EXIST:\r\n"
          "  The packets are examined whether there is CTAG in the packet. Size: 1 bits.\r\n"
          "",
          /*                                                                  
          * Pointer to a function to call after symbolic value               
          * has been accepted. Casting should be 'VAL_PROC_PTR'.             
          * Casting to 'long' added here just to keep the             
          * compiler silent.                                                 
          */                                                                 
          (long)NULL                                                            
      }                                                                       
    }                                                                         
  },                                                                          
  {                                                                           
    VAL_SYMBOL,                                                               
      "c_vlan_pcp",                       
    {                                                                         
      {                                                                       
        TIMNA_ACL_KEY_SELECT_C_VLAN_PCP,                                             
          /*                                                                  
          * Casting added here just to keep the compiler silent.      
          */                                                                 
          (long)""                                                            
          "  TIMNA_ACL_KEY_SELECT.TIMNA_ACL_KEY_SELECT_C_VLAN_PCP:\r\n"
          "  The packets are examined according to the PCP value returned in the Ethernet\r\n"
          "  Parsing. (of the C-tag) Zero if there is none. Size: 3 bits.\r\n"
          "",
          /*                                                                  
          * Pointer to a function to call after symbolic value               
          * has been accepted. Casting should be 'VAL_PROC_PTR'.             
          * Casting to 'long' added here just to keep the             
          * compiler silent.                                                 
          */                                                                 
          (long)NULL                                                            
      }                                                                       
    }                                                                         
  },                                                                          
  {                                                                           
    VAL_SYMBOL,                                                               
      "dest_mac",                       
    {                                                                         
      {                                                                       
        TIMNA_ACL_KEY_SELECT_DEST_MAC,                                             
          /*                                                                  
          * Casting added here just to keep the compiler silent.      
          */                                                                 
          (long)""                                                            
          "  TIMNA_ACL_KEY_SELECT.TIMNA_ACL_KEY_SELECT_DEST_MAC:\r\n"
          "  The packets are examined according to the Destination MAC Address. Size: 48\r\n"
          "  bits.\r\n"
          "",
          /*                                                                  
          * Pointer to a function to call after symbolic value               
          * has been accepted. Casting should be 'VAL_PROC_PTR'.             
          * Casting to 'long' added here just to keep the             
          * compiler silent.                                                 
          */                                                                 
          (long)NULL                                                            
      }                                                                       
    }                                                                         
  },                                                                          
  {                                                                           
    VAL_SYMBOL,                                                               
      "src_mac",                       
    {                                                                         
      {                                                                       
        TIMNA_ACL_KEY_SELECT_SRC_MAC,                                             
          /*                                                                  
          * Casting added here just to keep the compiler silent.      
          */                                                                 
          (long)""                                                            
          "  TIMNA_ACL_KEY_SELECT.TIMNA_ACL_KEY_SELECT_SRC_MAC:\r\n"
          "  The packets are examined according to the Source MAC Address. Size: 48 bits.\r\n"
          "",
          /*                                                                  
          * Pointer to a function to call after symbolic value               
          * has been accepted. Casting should be 'VAL_PROC_PTR'.             
          * Casting to 'long' added here just to keep the             
          * compiler silent.                                                 
          */                                                                 
          (long)NULL                                                            
      }                                                                       
    }                                                                         
  },                                                                          
  {                                                                           
    VAL_SYMBOL,                                                               
      "ether_type",                       
    {                                                                         
      {                                                                       
        TIMNA_ACL_KEY_SELECT_ETHER_TYPE,                                             
          /*                                                                  
          * Casting added here just to keep the compiler silent.      
          */                                                                 
          (long)""                                                            
          "  TIMNA_ACL_KEY_SELECT.TIMNA_ACL_KEY_SELECT_ETHER_TYPE:\r\n"
          "  The packets are examined according to the Ethernet Type. Size: 3 bits.\r\n"
          "",
          /*                                                                  
          * Pointer to a function to call after symbolic value               
          * has been accepted. Casting should be 'VAL_PROC_PTR'.             
          * Casting to 'long' added here just to keep the             
          * compiler silent.                                                 
          */                                                                 
          (long)NULL                                                            
      }                                                                       
    }                                                                         
  },                                                                          
  {                                                                           
    VAL_SYMBOL,                                                               
      "tos",                       
    {                                                                         
      {                                                                       
        TIMNA_ACL_KEY_SELECT_TOS,                                             
          /*                                                                  
          * Casting added here just to keep the compiler silent.      
          */                                                                 
          (long)""                                                            
          "  TIMNA_ACL_KEY_SELECT.TIMNA_ACL_KEY_SELECT_TOS:\r\n"
          "  The packets are examined according to TOS field from the Ipv4 header. Size: 8\r\n"
          "  bits.\r\n"
          "",
          /*                                                                  
          * Pointer to a function to call after symbolic value               
          * has been accepted. Casting should be 'VAL_PROC_PTR'.             
          * Casting to 'long' added here just to keep the             
          * compiler silent.                                                 
          */                                                                 
          (long)NULL                                                            
      }                                                                       
    }                                                                         
  },                                                                          
  {                                                                           
    VAL_SYMBOL,                                                               
      "protocol_code",                       
    {                                                                         
      {                                                                       
        TIMNA_ACL_KEY_SELECT_PROTOCOL_CODE,                                             
          /*                                                                  
          * Casting added here just to keep the compiler silent.      
          */                                                                 
          (long)""                                                            
          "  TIMNA_ACL_KEY_SELECT.TIMNA_ACL_KEY_SELECT_PROTOCOL_CODE:\r\n"
          "  The packets are examined according to the protocol code on the Ipv4 header.\r\n"
          "  Size: 4 bits.\r\n"
          "",
          /*                                                                  
          * Pointer to a function to call after symbolic value               
          * has been accepted. Casting should be 'VAL_PROC_PTR'.             
          * Casting to 'long' added here just to keep the             
          * compiler silent.                                                 
          */                                                                 
          (long)NULL                                                            
      }                                                                       
    }                                                                         
  },                                                                          
  {                                                                           
    VAL_SYMBOL,                                                               
      "src_ip",                       
    {                                                                         
      {                                                                       
        TIMNA_ACL_KEY_SELECT_SRC_IP,                                             
          /*                                                                  
          * Casting added here just to keep the compiler silent.      
          */                                                                 
          (long)""                                                            
          "  TIMNA_ACL_KEY_SELECT.TIMNA_ACL_KEY_SELECT_SRC_IP:\r\n"
          "  The packets are examined according to the Source IP Address (masking is\r\n"
          "  possible). Size: 32 bits.\r\n"
          "",
          /*                                                                  
          * Pointer to a function to call after symbolic value               
          * has been accepted. Casting should be 'VAL_PROC_PTR'.             
          * Casting to 'long' added here just to keep the             
          * compiler silent.                                                 
          */                                                                 
          (long)NULL                                                            
      }                                                                       
    }                                                                         
  },                                                                          
  {                                                                           
    VAL_SYMBOL,                                                               
      "dest_ip",                       
    {                                                                         
      {                                                                       
        TIMNA_ACL_KEY_SELECT_DEST_IP,                                             
          /*                                                                  
          * Casting added here just to keep the compiler silent.      
          */                                                                 
          (long)""                                                            
          "  TIMNA_ACL_KEY_SELECT.TIMNA_ACL_KEY_SELECT_DEST_IP:\r\n"
          "  The packets are examined according to the Destination IP Address (masking is\r\n"
          "  possible). Size: 32 bits.\r\n"
          "",
          /*                                                                  
          * Pointer to a function to call after symbolic value               
          * has been accepted. Casting should be 'VAL_PROC_PTR'.             
          * Casting to 'long' added here just to keep the             
          * compiler silent.                                                 
          */                                                                 
          (long)NULL                                                            
      }                                                                       
    }                                                                         
  },                                                                          
  {                                                                           
    VAL_SYMBOL,                                                               
      "l4_src_port",                       
    {                                                                         
      {                                                                       
        TIMNA_ACL_KEY_SELECT_L4_SRC_PORT,                                             
          /*                                                                  
          * Casting added here just to keep the compiler silent.      
          */                                                                 
          (long)""                                                            
          "  TIMNA_ACL_KEY_SELECT.TIMNA_ACL_KEY_SELECT_L4_SRC_PORT:\r\n"
          "  The packets are examined according to the Layer 4 Source Port, first 16b\r\n"
          "  after IPv4 header. Size: 16 bits.\r\n"
          "",
          /*                                                                  
          * Pointer to a function to call after symbolic value               
          * has been accepted. Casting should be 'VAL_PROC_PTR'.             
          * Casting to 'long' added here just to keep the             
          * compiler silent.                                                 
          */                                                                 
          (long)NULL                                                            
      }                                                                       
    }                                                                         
  },                                                                          
  {                                                                           
    VAL_SYMBOL,                                                               
      "l4_dest_port",                       
    {                                                                         
      {                                                                       
        TIMNA_ACL_KEY_SELECT_L4_DEST_PORT,                                             
          /*                                                                  
          * Casting added here just to keep the compiler silent.      
          */                                                                 
          (long)""                                                            
          "  TIMNA_ACL_KEY_SELECT.TIMNA_ACL_KEY_SELECT_L4_DEST_PORT:\r\n"
          "  The packets are examined according to the Layer 4 Destination Port, first 16b\r\n"
          "  after IPv4 header. Size: 16 bits.\r\n"
          "",
          /*                                                                  
          * Pointer to a function to call after symbolic value               
          * has been accepted. Casting should be 'VAL_PROC_PTR'.             
          * Casting to 'long' added here just to keep the             
          * compiler silent.                                                 
          */                                                                 
          (long)NULL                                                            
      }                                                                       
    }                                                                         
  },                                                                          
  {                                                                           
    VAL_SYMBOL,                                                               
      "l4options",                       
    {                                                                         
      {                                                                       
        TIMNA_ACL_KEY_SELECT_L4OPTIONS,                                             
          /*                                                                  
          * Casting added here just to keep the compiler silent.      
          */                                                                 
          (long)""                                                            
          "  TIMNA_ACL_KEY_SELECT.TIMNA_ACL_KEY_SELECT_L4OPTIONS:\r\n"
          "  The packets are examined according to ranges of the source destination ports.\r\n"
          "  Size:10 bits.\r\n"
          "",
          /*                                                                  
          * Pointer to a function to call after symbolic value               
          * has been accepted. Casting should be 'VAL_PROC_PTR'.             
          * Casting to 'long' added here just to keep the             
          * compiler silent.                                                 
          */                                                                 
          (long)NULL                                                            
      }                                                                       
    }                                                                         
  },                                                                          
    /*                                                                            
    * Last element. Do not remove.                                               
    */                                                                           
  {                                                                           
    VAL_END_OF_LIST                                                           
  }                                                                           
}                                                                             
#endif                                                                        
;                                                                             

/********************************************************/        
/********************************************************/        

EXTERN CONST                                                                  
PARAM_VAL_RULES                                                            
TIMNA_ACL_TRAFFIC_TYPE_rule[]                                                    
#ifdef INIT                                                                   
=                                                                          
{                                                                             
  {                                                                           
    VAL_SYMBOL,                                                               
      "no_term",                       
    {                                                                         
      {                                                                       
        TIMNA_ACL_TRAFFIC_TYPE_NO_TERM,                                             
          /*                                                                  
          * Casting added here just to keep the compiler silent.      
          */                                                                 
          (long)""                                                            
          "  TIMNA_ACL_TRAFFIC_TYPE.TIMNA_ACL_TRAFFIC_TYPE_NO_TERM:\r\n"
          "  The ACL to use when there is no Termination and the main processing is on the\r\n"
          "  outermost Ethernet header (Bridge)\r\n"
          "",
          /*                                                                  
          * Pointer to a function to call after symbolic value               
          * has been accepted. Casting should be 'VAL_PROC_PTR'.             
          * Casting to 'long' added here just to keep the             
          * compiler silent.                                                 
          */                                                                 
          (long)NULL                                                            
      }                                                                       
    }                                                                         
  },                                                                          
  {                                                                           
    VAL_SYMBOL,                                                               
      "eth_term",                       
    {                                                                         
      {                                                                       
        TIMNA_ACL_TRAFFIC_TYPE_ETH_TERM,                                             
          /*                                                                  
          * Casting added here just to keep the compiler silent.      
          */                                                                 
          (long)""                                                            
          "  TIMNA_ACL_TRAFFIC_TYPE.TIMNA_ACL_TRAFFIC_TYPE_ETH_TERM:\r\n"
          "  The ACL to use for Ethernet Termination.\r\n"
          "",
          /*                                                                  
          * Pointer to a function to call after symbolic value               
          * has been accepted. Casting should be 'VAL_PROC_PTR'.             
          * Casting to 'long' added here just to keep the             
          * compiler silent.                                                 
          */                                                                 
          (long)NULL                                                            
      }                                                                       
    }                                                                         
  },                                                                          
  {                                                                           
    VAL_SYMBOL,                                                               
      "eth_mpls_mpls_term",                       
    {                                                                         
      {                                                                       
        TIMNA_ACL_TRAFFIC_TYPE_ETH_MPLS_MPLS_TERM,                                             
          /*                                                                  
          * Casting added here just to keep the compiler silent.      
          */                                                                 
          (long)""                                                            
          "  TIMNA_ACL_TRAFFIC_TYPE.TIMNA_ACL_TRAFFIC_TYPE_ETH_MPLS_MPLS_TERM:\r\n"
          "  The ACL to use for Ethernet Termination, MPLS termination over MPLS\r\n"
          "  termination.\r\n"
          "",
          /*                                                                  
          * Pointer to a function to call after symbolic value               
          * has been accepted. Casting should be 'VAL_PROC_PTR'.             
          * Casting to 'long' added here just to keep the             
          * compiler silent.                                                 
          */                                                                 
          (long)NULL                                                            
      }                                                                       
    }                                                                         
  },                                                                          
  {                                                                           
    VAL_SYMBOL,                                                               
      "eth_engine",                       
    {                                                                         
      {                                                                       
        TIMNA_ACL_TRAFFIC_TYPE_ETH_ENGINE,                                             
          /*                                                                  
          * Casting added here just to keep the compiler silent.      
          */                                                                 
          (long)""                                                            
          "  TIMNA_ACL_TRAFFIC_TYPE.TIMNA_ACL_TRAFFIC_TYPE_ETH_ENGINE:\r\n"
          "  The ACL to use for Ethernet engine.\r\n"
          "",
          /*                                                                  
          * Pointer to a function to call after symbolic value               
          * has been accepted. Casting should be 'VAL_PROC_PTR'.             
          * Casting to 'long' added here just to keep the             
          * compiler silent.                                                 
          */                                                                 
          (long)NULL                                                            
      }                                                                       
    }                                                                         
  },                                                                          
  {                                                                           
    VAL_SYMBOL,                                                               
      "ipv4_engine",                       
    {                                                                         
      {                                                                       
        TIMNA_ACL_TRAFFIC_TYPE_IPV4_ENGINE,                                             
          /*                                                                  
          * Casting added here just to keep the compiler silent.      
          */                                                                 
          (long)""                                                            
          "  TIMNA_ACL_TRAFFIC_TYPE.TIMNA_ACL_TRAFFIC_TYPE_IPV4_ENGINE:\r\n"
          "  The ACL to use for Ipv4 engine.\r\n"
          "",
          /*                                                                  
          * Pointer to a function to call after symbolic value               
          * has been accepted. Casting should be 'VAL_PROC_PTR'.             
          * Casting to 'long' added here just to keep the             
          * compiler silent.                                                 
          */                                                                 
          (long)NULL                                                            
      }                                                                       
    }                                                                         
  },                                                                          
  {                                                                           
    VAL_SYMBOL,                                                               
      "mpls_engine",                       
    {                                                                         
      {                                                                       
        TIMNA_ACL_TRAFFIC_TYPE_MPLS_ENGINE,                                             
          /*                                                                  
          * Casting added here just to keep the compiler silent.      
          */                                                                 
          (long)""                                                            
          "  TIMNA_ACL_TRAFFIC_TYPE.TIMNA_ACL_TRAFFIC_TYPE_MPLS_ENGINE:\r\n"
          "  The ACL to use for MPLS engine.\r\n"
          "",
          /*                                                                  
          * Pointer to a function to call after symbolic value               
          * has been accepted. Casting should be 'VAL_PROC_PTR'.             
          * Casting to 'long' added here just to keep the             
          * compiler silent.                                                 
          */                                                                 
          (long)NULL                                                            
      }                                                                       
    }                                                                         
  },                                                                          
    /*                                                                            
    * Last element. Do not remove.                                               
    */                                                                           
  {                                                                           
    VAL_END_OF_LIST                                                           
  }                                                                           
}                                                                             
#endif                                                                        
;                                                                             

/********************************************************/        
/********************************************************/        

EXTERN CONST                                                                  
PARAM_VAL_RULES                                                            
TIMNA_ACL_ACTION_TYPE_rule[]                                                    
#ifdef INIT                                                                   
=                                                                          
{                                                                             
  {                                                                           
    VAL_SYMBOL,                                                               
      "nop",                       
    {                                                                         
      {                                                                       
        TIMNA_ACL_ACTION_TYPE_NOP,                                             
          /*                                                                  
          * Casting added here just to keep the compiler silent.      
          */                                                                 
          (long)""                                                            
          "  TIMNA_ACL_ACTION_TYPE.TIMNA_ACL_ACTION_TYPE_NOP:\r\n"
          "  Make no modification on the packet.\r\n"
          "",
          /*                                                                  
          * Pointer to a function to call after symbolic value               
          * has been accepted. Casting should be 'VAL_PROC_PTR'.             
          * Casting to 'long' added here just to keep the             
          * compiler silent.                                                 
          */                                                                 
          (long)NULL                                                            
      }                                                                       
    }                                                                         
  },                                                                          
  {                                                                           
    VAL_SYMBOL,                                                               
      "deny",                       
    {                                                                         
      {                                                                       
        TIMNA_ACL_ACTION_TYPE_DENY,                                             
          /*                                                                  
          * Casting added here just to keep the compiler silent.      
          */                                                                 
          (long)""                                                            
          "  TIMNA_ACL_ACTION_TYPE.TIMNA_ACL_ACTION_TYPE_DENY:\r\n"
          "  Drop the packet.\r\n"
          "",
          /*                                                                  
          * Pointer to a function to call after symbolic value               
          * has been accepted. Casting should be 'VAL_PROC_PTR'.             
          * Casting to 'long' added here just to keep the             
          * compiler silent.                                                 
          */                                                                 
          (long)NULL                                                            
      }                                                                       
    }                                                                         
  },                                                                          
  {                                                                           
    VAL_SYMBOL,                                                               
      "update_outlif",                       
    {                                                                         
      {                                                                       
        TIMNA_ACL_ACTION_TYPE_UPDATE_OUTLIF,                                             
          /*                                                                  
          * Casting added here just to keep the compiler silent.      
          */                                                                 
          (long)""                                                            
          "  TIMNA_ACL_ACTION_TYPE.TIMNA_ACL_ACTION_TYPE_UPDATE_OUTLIF:\r\n"
          "  Update the OutLIF of the packet with the given value.\r\n"
          "",
          /*                                                                  
          * Pointer to a function to call after symbolic value               
          * has been accepted. Casting should be 'VAL_PROC_PTR'.             
          * Casting to 'long' added here just to keep the             
          * compiler silent.                                                 
          */                                                                 
          (long)NULL                                                            
      }                                                                       
    }                                                                         
  },                                                                          
  {                                                                           
    VAL_SYMBOL,                                                               
      "update_policiing",                       
    {                                                                         
      {                                                                       
        TIMNA_ACL_ACTION_TYPE_UPDATE_POLICIING,                                             
          /*                                                                  
          * Casting added here just to keep the compiler silent.      
          */                                                                 
          (long)""                                                            
          "  TIMNA_ACL_ACTION_TYPE.TIMNA_ACL_ACTION_TYPE_UPDATE_POLICIING:\r\n"
          "  Update the ingress policing and policer control, so the packet will be\r\n"
          "  policed according to given policing information.\r\n"
          "",
          /*                                                                  
          * Pointer to a function to call after symbolic value               
          * has been accepted. Casting should be 'VAL_PROC_PTR'.             
          * Casting to 'long' added here just to keep the             
          * compiler silent.                                                 
          */                                                                 
          (long)NULL                                                            
      }                                                                       
    }                                                                         
  },                                                                          
  {                                                                           
    VAL_SYMBOL,                                                               
      "update_policiing_outlif",                       
    {                                                                         
      {                                                                       
        TIMNA_ACL_ACTION_TYPE_UPDATE_POLICIING_OUTLIF,                                             
          /*                                                                  
          * Casting added here just to keep the compiler silent.      
          */                                                                 
          (long)""                                                            
          "  TIMNA_ACL_ACTION_TYPE.TIMNA_ACL_ACTION_TYPE_UPDATE_POLICIING_OUTLIF:\r\n"
          "  Update ingress policing and OutLIF with the given values.\r\n"
          "",
          /*                                                                  
          * Pointer to a function to call after symbolic value               
          * has been accepted. Casting should be 'VAL_PROC_PTR'.             
          * Casting to 'long' added here just to keep the             
          * compiler silent.                                                 
          */                                                                 
          (long)NULL                                                            
      }                                                                       
    }                                                                         
  },                                                                          
  {                                                                           
    VAL_SYMBOL,                                                               
      "update_policiing_outlif_cos",                       
    {                                                                         
      {                                                                       
        TIMNA_ACL_ACTION_TYPE_UPDATE_POLICIING_OUTLIF_COS,                                             
          /*                                                                  
          * Casting added here just to keep the compiler silent.      
          */                                                                 
          (long)""                                                            
          "  TIMNA_ACL_ACTION_TYPE.TIMNA_ACL_ACTION_TYPE_UPDATE_POLICIING_OUTLIF_COS:\r\n"
          "  Update ingress policing, OutLIF and COS (TC, UP, DP) with the given values\r\n"
          "",
          /*                                                                  
          * Pointer to a function to call after symbolic value               
          * has been accepted. Casting should be 'VAL_PROC_PTR'.             
          * Casting to 'long' added here just to keep the             
          * compiler silent.                                                 
          */                                                                 
          (long)NULL                                                            
      }                                                                       
    }                                                                         
  },                                                                          
    /*                                                                            
    * Last element. Do not remove.                                               
    */                                                                           
  {                                                                           
    VAL_END_OF_LIST                                                           
  }                                                                           
}                                                                             
#endif                                                                        
;

/********************************************************/        
                                                                              
EXTERN CONST                                                                  
   PARAM_VAL_RULES                                                            
     TIMNA_ACL_KEY_TEMPLATE_rule[]                                                    
#ifdef INIT                                                                   
   =                                                                          
{                                                                             
  {                                                                           
    VAL_SYMBOL,                                                               
    "template_5_tuples",                       
    {                                                                         
      {                                                                       
        TIMNA_ACL_KEY_TEMPLATE_5_TUPLES,                                             
          /*                                                                  
           * Casting added here just to keep the compiler silent.      
           */                                                                 
        (long)""                                                            
        "  TIMNA_ACL_KEY_TEMPLATE.TIMNA_ACL_KEY_TEMPLATE_5_TUPLES:\r\n"
        "  The packets are examined according to 5 tuples that includes {protocol,\r\n"
        "  destination MAC address, source MAC address, destination l4 port, source l4\r\n"
        "  port}\r\n"
        "",
          /*                                                                  
           * Pointer to a function to call after symbolic value               
           * has been accepted. Casting should be 'VAL_PROC_PTR'.             
           * Casting to 'long' added here just to keep the             
           * compiler silent.                                                 
           */                                                                 
        (long)NULL                                                            
      }                                                                       
    }                                                                         
                                                                   
  },                                                                          
/*                                                                            
 * Last element. Do not remove.                                               
 */                                                                           
  {                                                                           
    VAL_END_OF_LIST                                                           
  }                                                                           
}                                                                             
#endif                                                                        
;                                                                             

/********************************************************/        

EXTERN CONST                                                                  
PARAM_VAL_RULES                                                            
SOC_SAND_PP_FEC_COMMAND_TYPE_rule[]                                                    
#ifdef INIT                                                                   
=                                                                          
{                                                                             
  {    
    VAL_SYMBOL,                                                               
      "soc_sand_pp_fec_command_type_drop",                       
    {                                                                         
      {                                                                       
        SOC_SAND_PP_FEC_COMMAND_TYPE_DROP,                                             
          /*                                                                  
          * Casting added here just to keep the compiler silent.      
          */                                                                 
          (long)""                                                            
          "  SOC_SAND_PP_FEC_COMMAND_TYPE.SOC_SAND_PP_FEC_COMMAND_TYPE_DROP:\r\n"
          "  Drop command; the packet is dropped,no further processing is done for the\r\n"
          "  packet.\r\n"
          "",
          /*                                                                  
          * Pointer to a function to call after symbolic value               
          * has been accepted. Casting should be 'VAL_PROC_PTR'.             
          * Casting to 'long' added here just to keep the             
          * compiler silent.                                                 
          */                                                                 
          (long)NULL                                                            
      }                                                                       
    }                                                                         
  },                                                                          
  {                                                                           
    VAL_SYMBOL,                                                               
      "soc_sand_pp_fec_command_type_route",                       
    {                                                                         
      {                                                                       
        SOC_SAND_PP_FEC_COMMAND_TYPE_ROUTE,                                             
          /*                                                                  
          * Casting added here just to keep the compiler silent.      
          */                                                                 
          (long)""                                                            
          "  SOC_SAND_PP_FEC_COMMAND_TYPE.SOC_SAND_PP_FEC_COMMAND_TYPE_ROUTE:\r\n"
          "  Route command, the packet is routed and sent to next destination.\r\n"
          "",
          /*                                                                  
          * Pointer to a function to call after symbolic value               
          * has been accepted. Casting should be 'VAL_PROC_PTR'.             
          * Casting to 'long' added here just to keep the             
          * compiler silent.                                                 
          */                                                                 
          (long)NULL                                                            
      }                                                                       
    }                                                                         
  },                                                                          
  {                                                                           
    VAL_SYMBOL,                                                               
      "soc_sand_pp_fec_command_type_trap",                       
    {                                                                         
      {                                                                       
        SOC_SAND_PP_FEC_COMMAND_TYPE_TRAP,                                             
          /*                                                                  
          * Casting added here just to keep the compiler silent.      
          */                                                                 
          (long)""                                                            
          "  SOC_SAND_PP_FEC_COMMAND_TYPE.SOC_SAND_PP_FEC_COMMAND_TYPE_TRAP:\r\n"
          "  Trap command, the packet is forwarded to the CPU with a 'cpu_code'.\r\n"
          "",
          /*                                                                  
          * Pointer to a function to call after symbolic value               
          * has been accepted. Casting should be 'VAL_PROC_PTR'.             
          * Casting to 'long' added here just to keep the             
          * compiler silent.                                                 
          */                                                                 
          (long)NULL                                                            
      }                                                                       
    }                                                                         
  },                                                                          
    /*                                                                            
    * Last element. Do not remove.                                               
    */                                                                           
  {                                                                           
    VAL_END_OF_LIST                                                           
  }                                                                           
}                                                                             
#endif                                                                        
;                                                                             

/********************************************************/        

/********************************************************/        
                                                                              
EXTERN CONST                                                                  
   PARAM_VAL_RULES                                                            
     TIMNA_L3_TABLE_ITER_TYPE_rule[]                                                    
#ifdef INIT                                                                   
   =                                                                          
{                                                                             
  {                                                                           
    VAL_SYMBOL,                                                               
    "fast",                       
    {                                                                         
      {                                                                       
        TIMNA_L3_TABLE_ITER_TYPE_FAST,                                             
          /*                                                                  
           * Casting added here just to keep the compiler silent.      
           */                                                                 
        (long)""                                                            
        "  TIMNA_L3_TABLE_ITER_TYPE.TIMNA_L3_TABLE_ITER_TYPE_FAST:\r\n"
        "  According to this type the iterator traverse the table unordered, but it\r\n"
        "  provides an efficient traverse of the table.\r\n"
        "",
          /*                                                                  
           * Pointer to a function to call after symbolic value               
           * has been accepted. Casting should be 'VAL_PROC_PTR'.             
           * Casting to 'long' added here just to keep the             
           * compiler silent.                                                 
           */                                                                 
        (long)NULL                                                            
      }                                                                       
    }                                                                         
  },                                                                          
  {                                                                           
    VAL_SYMBOL,                                                               
    "ip_prefix_ordered",                       
    {                                                                         
      {                                                                       
        TIMNA_L3_TABLE_ITER_TYPE_IP_PREFIX_ORDERED,                                             
          /*                                                                  
           * Casting added here just to keep the compiler silent.      
           */                                                                 
        (long)""                                                            
        "  TIMNA_L3_TABLE_ITER_TYPE.TIMNA_L3_TABLE_ITER_TYPE_IP_PREFIX_ORDERED:\r\n"
        "  According to this type the iterator traverse the table ordered according to\r\n"
        "  (IP, Prefix), it's slower than the fast type.\r\n"
        "",
          /*                                                                  
           * Pointer to a function to call after symbolic value               
           * has been accepted. Casting should be 'VAL_PROC_PTR'.             
           * Casting to 'long' added here just to keep the             
           * compiler silent.                                                 
           */                                                                 
        (long)NULL                                                            
      }                                                                       
    }                                                                         
  },                                                                          
  {                                                                           
    VAL_SYMBOL,                                                               
    "prefix_ip_ordered",                       
    {                                                                         
      {                                                                       
        TIMNA_L3_TABLE_ITER_TYPE_PREFIX_IP_ORDERED,                                             
          /*                                                                  
           * Casting added here just to keep the compiler silent.      
           */                                                                 
        (long)""                                                            
        "  TIMNA_L3_TABLE_ITER_TYPE.TIMNA_L3_TABLE_ITER_TYPE_PREFIX_IP_ORDERED:\r\n"
        "  According to this type the iterator traverse the table ordered according to\r\n"
        "  (Prefix, IP), it's slower than the previous types (fast and (IP, Prefix)).\r\n"
        "",
          /*                                                                  
           * Pointer to a function to call after symbolic value               
           * has been accepted. Casting should be 'VAL_PROC_PTR'.             
           * Casting to 'long' added here just to keep the             
           * compiler silent.                                                 
           */                                                                 
        (long)NULL                                                            
      }                                                                       
    }                                                                         
  },                                                                          
/*                                                                            
 * Last element. Do not remove.                                               
 */                                                                           
  {                                                                           
    VAL_END_OF_LIST                                                           
  }                                                                           
}                                                                             
#endif                                                                        
; 

/********************************************************/        
                                                                              
EXTERN CONST                                                                  
   PARAM_VAL_RULES                                                            
     TIMNA_IPV4_RANGE_TYPE_rule[]                                                    
#ifdef INIT                                                                   
   =                                                                          
{                                                                             
  {                                                                           
    VAL_SYMBOL,                                                               
    "random",                       
    {                                                                         
      {                                                                       
        TIMNA_IPV4_RANGE_TYPE_RANDOM,                                             
          /*                                                                  
           * Casting added here just to keep the compiler silent.      
           */                                                                 
        (long)""                                                            
        "  TIMNA_IPV4_RANGE_TYPE.TIMNA_IPV4_RANGE_TYPE_RANDOM:\r\n"
        "  Selects random ipv4 addresses from the given range.\r\n"
        "",
          /*                                                                  
           * Pointer to a function to call after symbolic value               
           * has been accepted. Casting should be 'VAL_PROC_PTR'.             
           * Casting to 'long' added here just to keep the             
           * compiler silent.                                                 
           */                                                                 
        (long)NULL                                                            
      }                                                                       
    }                                                                         
  },                                                                          
  {                                                                           
    VAL_SYMBOL,                                                               
    "inc",                       
    {                                                                         
      {                                                                       
        TIMNA_IPV4_RANGE_TYPE_INC,                                             
          /*                                                                  
           * Casting added here just to keep the compiler silent.      
           */                                                                 
        (long)""                                                            
        "  TIMNA_IPV4_RANGE_TYPE.TIMNA_IPV4_RANGE_TYPE_INC:\r\n"
        "  Selects ipv4 addresses incrementally from the given range.\r\n"
        "",
          /*                                                                  
           * Pointer to a function to call after symbolic value               
           * has been accepted. Casting should be 'VAL_PROC_PTR'.             
           * Casting to 'long' added here just to keep the             
           * compiler silent.                                                 
           */                                                                 
        (long)NULL                                                            
      }                                                                       
    }                                                                         
  },                                                                          
  {                                                                           
    VAL_SYMBOL,                                                               
    "dec",                       
    {                                                                         
      {                                                                       
        TIMNA_IPV4_RANGE_TYPE_DEC,                                             
          /*                                                                  
           * Casting added here just to keep the compiler silent.      
           */                                                                 
        (long)""                                                            
        "  TIMNA_IPV4_RANGE_TYPE.TIMNA_IPV4_RANGE_TYPE_DEC:\r\n"
        "  Selects decremented ipv4 addresses from the given range.\r\n"
        "",
          /*                                                                  
           * Pointer to a function to call after symbolic value               
           * has been accepted. Casting should be 'VAL_PROC_PTR'.             
           * Casting to 'long' added here just to keep the             
           * compiler silent.                                                 
           */                                                                 
        (long)NULL                                                            
      }                                                                       
    }                                                                         
  },                                                                          
/*                                                                            
 * Last element. Do not remove.                                               
 */                                                                           
  {                                                                           
    VAL_END_OF_LIST                                                           
  }                                                                           
}                                                                             
#endif                                                                        
;                                                                             

/********************************************************/        
/********************************************************/        
                                                                              
EXTERN CONST                                                                  
   PARAM_VAL_RULES                                                            
     TIMNA_IPV4_SYS_FEC_RANGE_TYPE_rule[]                                                    
#ifdef INIT                                                                   
   =                                                                          
{                                                                             
  {                                                                           
    VAL_SYMBOL,                                                               
    "one",                       
    {                                                                         
      {                                                                       
        TIMNA_IPV4_SYS_FEC_RANGE_TYPE_ONE,                                             
          /*                                                                  
           * Casting added here just to keep the compiler silent.      
           */                                                                 
        (long)""                                                            
        "  TIMNA_IPV4_SYS_FEC_RANGE_TYPE.TIMNA_IPV4_SYS_FEC_RANGE_TYPE_ONE:\r\n"
        "  Map all the IP addresses in the range to the same FEC ID.\r\n"
        "",
          /*                                                                  
           * Pointer to a function to call after symbolic value               
           * has been accepted. Casting should be 'VAL_PROC_PTR'.             
           * Casting to 'long' added here just to keep the             
           * compiler silent.                                                 
           */                                                                 
        (long)NULL                                                            
      }                                                                       
    }                                                                         
  },                                                                          
  {                                                                           
    VAL_SYMBOL,                                                               
    "inc",                       
    {                                                                         
      {                                                                       
        TIMNA_IPV4_SYS_FEC_RANGE_TYPE_INC,                                             
          /*                                                                  
           * Casting added here just to keep the compiler silent.      
           */                                                                 
        (long)""                                                            
        "  TIMNA_IPV4_SYS_FEC_RANGE_TYPE.TIMNA_IPV4_SYS_FEC_RANGE_TYPE_INC:\r\n"
        "  Map each IP addresses in the range to a FEC ID incrementally.\r\n"
        "",
          /*                                                                  
           * Pointer to a function to call after symbolic value               
           * has been accepted. Casting should be 'VAL_PROC_PTR'.             
           * Casting to 'long' added here just to keep the             
           * compiler silent.                                                 
           */                                                                 
        (long)NULL                                                            
      }                                                                       
    }                                                                         
  },                                                                          
/*                                                                            
 * Last element. Do not remove.                                               
 */                                                                           
  {                                                                           
    VAL_END_OF_LIST                                                           
  }                                                                           
}                                                                             
#endif                                                                        
;                                                                             


 /* 
  * } ENUM RULES 
  */
/********************************************************/  /********************************************************/        
EXTERN CONST                                                     
   PARAM_VAL_RULES                                               
     timna_api_free_vals[]                                 
#ifdef INIT                                                      
   =                                                             
{                                                                
  {                                                              
    VAL_NUMERIC,SYMB_NAME_NUMERIC,                               
    {                                                            
      {                                                          
        HAS_NO_MIN_VALUE | HAS_NO_MAX_VALUE,                     
        0,0,                                                     
          /*                                                     
           * Number of times this value can be repeated (i.e.,   
           * value is an array). Must be at least 1!             
           */                                                    
        1,                                                       
        (VAL_PROC_PTR)NULL                                       
      }                                                          
    }                                                            
  },                                                             
/*                                                               
 * Last element. Do not remove.                                  
 */                                                              
  {                                                              
    VAL_END_OF_LIST                                              
  }                                                              
}                                                                
#endif                                                           
;                                                                
EXTERN CONST                                                     
   PARAM_VAL_RULES                                               
     timna_api_empty_vals[]                                 
#ifdef INIT                                                      
   =                                                             
{                                                                
/*                                                               
 * Last element. Do not remove.                                  
 */                                                              
  {                                                              
    VAL_END_OF_LIST                                              
  }                                                              
}                                                                
#endif                                                           
;                                                                
/********************************************************/        
/********************************************************/        
EXTERN CONST                                                                               
   PARAM                                                                                   
     timna_api_params[]                                                   
#ifdef INIT                                                                                
   =                                                                                       
{                                                                                          
#ifdef UI_DEFAULT_SECTION/* { default_section*/
#endif /* } default_section*/
#ifdef UI_SAND_PP_GENERAL/* { soc_sand_pp_general*/
#endif /* } soc_sand_pp_general*/
#ifdef UI_COMMON/* { common*/
#endif /* } common*/
#ifdef UI_MAC_LKUP/* { mac_lkup*/
  {                                                                                        
    PARAM_TIMNA_TIMNA_MACT_ENTRY_INSERT_MACT_ENTRY_INSERT_ID,                                                            
    "insert",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Inserts an entry according to key. If in the MAC table there is already an\r\n"
    "  entry with this key, it is overwritten by this value.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mac_lkup insert key_is_fid 0 key_fid 0 key_mac 0\r\n"
    "  aging_rfrshd_by_mssg 0 aging_age_stts 0\r\n"
    "  sa_drp_whn_sa_is_knwn 0 sa_is_dynmc 0\r\n"
    "  da_dstntn_dst_val 0 da_dstntn_dst_typ 0\r\n"
    "  da_policer_pntr_slct 0 da_frwrd_typ 0\r\n"
    "",
    "",                                                                                  
    {BIT(0), 0, 0, 0},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MACT_ENTRY_INSERT_MACT_ENTRY_INSERT_KEY_IS_FID_ID,                                                            
    "key_is_fid",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  key.is_fid:\r\n"
    "  If TRUE then the ID is FID; otherwise it is VID.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mac_lkup insert key_is_fid 0 key_fid 0 key_mac 0\r\n"
    "  aging_rfrshd_by_mssg 0 aging_age_stts 0\r\n"
    "  sa_drp_whn_sa_is_knwn 0 sa_is_dynmc 0\r\n"
    "  da_dstntn_dst_val 0 da_dstntn_dst_typ 0\r\n"
    "  da_policer_pntr_slct 0 da_frwrd_typ 0\r\n"
    "",
    "",                                                                                  
    {BIT(0), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MACT_ENTRY_INSERT_MACT_ENTRY_INSERT_KEY_VID_ID,                                                            
    "key_fid",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  key.vid:\r\n"
    "  The ID. May be FID or VID.Range 0-4095\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mac_lkup insert key_is_fid 0 key_fid 0 key_mac 0\r\n"
    "  aging_rfrshd_by_mssg 0 aging_age_stts 0\r\n"
    "  sa_drp_whn_sa_is_knwn 0 sa_is_dynmc 0\r\n"
    "  da_dstntn_dst_val 0 da_dstntn_dst_typ 0\r\n"
    "  da_policer_pntr_slct 0 da_frwrd_typ 0\r\n"
    "",
    "",                                                                                  
    {BIT(0), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MACT_ENTRY_INSERT_MACT_ENTRY_INSERT_KEY_MAC_ID,                                                            
    "key_mac",                                                                       
    (PARAM_VAL_RULES *)&Timna_mac_addr_vals[0],
    (sizeof(Timna_mac_addr_vals) / sizeof(Timna_mac_addr_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  key.mac:\r\n"
    "  MAC address\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mac_lkup insert key_is_fid 0 key_fid 0 key_mac 0\r\n"
    "  aging_rfrshd_by_mssg 0 aging_age_stts 0\r\n"
    "  sa_drp_whn_sa_is_knwn 0 sa_is_dynmc 0\r\n"
    "  da_dstntn_dst_val 0 da_dstntn_dst_typ 0\r\n"
    "  da_policer_pntr_slct 0 da_frwrd_typ 0\r\n"
    "",
    "",                                                                                  
    {BIT(0), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },
  {                                                                                        
    PARAM_TIMNA_API_MAC_LKUP_UP_TO_MAC_TABLE_ADD_KEY_MAC_ID,                                                            
    "up_to_key_mac",                                                                       
    (PARAM_VAL_RULES *)&Timna_mac_addr_vals[0],                                            
    (sizeof(Timna_mac_addr_vals) / sizeof(Timna_mac_addr_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  key.mac:\r\n"
    "  MAC address\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mac_lkup insert key_is_fid 0 key_fid 0 key_mac 0\r\n"
    "  aging_rfrshd_by_mssg 0 aging_age_stts 0\r\n"
    "  sa_drp_whn_sa_is_knwn 0 sa_is_dynmc 0\r\n"
    "  da_dstntn_dst_val 0 da_dstntn_dst_typ 0\r\n"
    "  da_policer_pntr_slct 0 da_frwrd_typ 0\r\n"
    "",
    "",                                                                                  
    {BIT(0), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },    
  {                                                                                        
    PARAM_TIMNA_TIMNA_MACT_ENTRY_INSERT_MACT_ENTRY_INSERT_VALUE_AGING_INFO_REFRESHED_BY_MESSAGE_ID,                                                            
    "aging_rfrshd_by_mssg",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  value.aging_info.refreshed_by_message:\r\n"
    "  Is the reason for refreshing the entry is receiving a refresh message\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mac_lkup insert key_is_fid 0 key_fid 0 key_mac 0\r\n"
    "  aging_rfrshd_by_mssg 0 aging_age_stts 0\r\n"
    "  sa_drp_whn_sa_is_knwn 0 sa_is_dynmc 0\r\n"
    "  da_dstntn_dst_val 0 da_dstntn_dst_typ 0\r\n"
    "  da_policer_pntr_slct 0 da_frwrd_typ 0\r\n"
    "",
    "",                                                                                  
    {BIT(0), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MACT_ENTRY_INSERT_MACT_ENTRY_INSERT_VALUE_AGING_INFO_AGE_STATUS_ID,                                                            
    "aging_age_stts",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  value.aging_info.age_status:\r\n"
    "  Age Status of the Entry. Indicates how Fresh is the entry.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mac_lkup insert key_is_fid 0 key_fid 0 key_mac 0\r\n"
    "  aging_rfrshd_by_mssg 0 aging_age_stts 0\r\n"
    "  sa_drp_whn_sa_is_knwn 0 sa_is_dynmc 0\r\n"
    "  da_dstntn_dst_val 0 da_dstntn_dst_typ 0\r\n"
    "  da_policer_pntr_slct 0 da_frwrd_typ 0\r\n"
    "",
    "",                                                                                  
    {BIT(0), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MACT_ENTRY_INSERT_MACT_ENTRY_INSERT_VALUE_SA_INFO_DROP_WHEN_SA_IS_KNOWN_ID,                                                            
    "sa_drp_whn_sa_is_knwn",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  value.sa_info.drop_when_sa_is_known:\r\n"
    "  If TRUE - For an SA lookup match, then the packet is dropped with forwarding\r\n"
    "  action type change to type configured by timna_mact_sa_drop_frwd_info_set()\r\n"
    "  with destination drop. If FALSE - SA lookup match doesn't affect forwarding.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mac_lkup insert key_is_fid 0 key_fid 0 key_mac 0\r\n"
    "  aging_rfrshd_by_mssg 0 aging_age_stts 0\r\n"
    "  sa_drp_whn_sa_is_knwn 0 sa_is_dynmc 0\r\n"
    "  da_dstntn_dst_val 0 da_dstntn_dst_typ 0\r\n"
    "  da_policer_pntr_slct 0 da_frwrd_typ 0\r\n"
    "",
    "",                                                                                  
    {BIT(0), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MACT_ENTRY_INSERT_MACT_ENTRY_INSERT_VALUE_SA_INFO_IS_DYNAMIC_ID,                                                            
    "sa_is_dynmc",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  value.sa_info.is_dynamic:\r\n"
    "  Is the entry dynamic (i.e. isn't static) and participates in the aging\r\n"
    "  process.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mac_lkup insert key_is_fid 0 key_fid 0 key_mac 0\r\n"
    "  aging_rfrshd_by_mssg 0 aging_age_stts 0\r\n"
    "  sa_drp_whn_sa_is_knwn 0 sa_is_dynmc 0\r\n"
    "  da_dstntn_dst_val 0 da_dstntn_dst_typ 0\r\n"
    "  da_policer_pntr_slct 0 da_frwrd_typ 0\r\n"
    "",
    "",                                                                                  
    {BIT(0), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MACT_ENTRY_INSERT_MACT_ENTRY_INSERT_VALUE_DA_INFO_DESTINATION_DEST_VAL_ID,                                                            
    "da_dstntn_dst_val",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  value.da_info.destination.dest_val:\r\n"
    "  The destination value, according to the type (Single, RLAG or GLAG,LIF...)For\r\n"
    "  LAG the value is the group ID.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mac_lkup insert key_is_fid 0 key_fid 0 key_mac 0\r\n"
    "  aging_rfrshd_by_mssg 0 aging_age_stts 0\r\n"
    "  sa_drp_whn_sa_is_knwn 0 sa_is_dynmc 0\r\n"
    "  da_dstntn_dst_val 0 da_dstntn_dst_typ 0\r\n"
    "  da_policer_pntr_slct 0 da_frwrd_typ 0\r\n"
    "",
    "",                                                                                  
    {BIT(0), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MACT_ENTRY_INSERT_MACT_ENTRY_INSERT_VALUE_DA_INFO_DESTINATION_DEST_TYPE_ID,                                                            
    "da_dstntn_dst_typ",                                                                       
    (PARAM_VAL_RULES *)&SOC_SAND_PP_DEST_TYPE_rule[0],
    (sizeof(SOC_SAND_PP_DEST_TYPE_rule) / sizeof(SOC_SAND_PP_DEST_TYPE_rule[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  value.da_info.destination.dest_type:\r\n"
    "  The type of the following destination ID\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mac_lkup insert key_is_fid 0 key_fid 0 key_mac 0\r\n"
    "  aging_rfrshd_by_mssg 0 aging_age_stts 0\r\n"
    "  sa_drp_whn_sa_is_knwn 0 sa_is_dynmc 0\r\n"
    "  da_dstntn_dst_val 0 da_dstntn_dst_typ 0\r\n"
    "  da_policer_pntr_slct 0 da_frwrd_typ 0\r\n"
    "",
    "",                                                                                  
    {BIT(0), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MACT_ENTRY_INSERT_MACT_ENTRY_INSERT_VALUE_DA_INFO_POLICER_POINTER_SELECT_ID,                                                            
    "da_policer_pntr_slct",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  value.da_info.policer_pointer_select:\r\n"
    "  Specifies which pointer to choose for selecting the Ethernet policer to be\r\n"
    "  applied.Relevant if the forward_type is intercept or control. Where each has\r\n"
    "  separate mapping.Range 0-2 . refer to timna_bridging_frwrd_glbl_info_set\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mac_lkup insert key_is_fid 0 key_fid 0 key_mac 0\r\n"
    "  aging_rfrshd_by_mssg 0 aging_age_stts 0\r\n"
    "  sa_drp_whn_sa_is_knwn 0 sa_is_dynmc 0\r\n"
    "  da_dstntn_dst_val 0 da_dstntn_dst_typ 0\r\n"
    "  da_policer_pntr_slct 0 da_frwrd_typ 0\r\n"
    "",
    "",                                                                                  
    {BIT(0), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MACT_ENTRY_INSERT_MACT_ENTRY_INSERT_VALUE_DA_INFO_FORWARD_TYPE_ID,                                                            
    "da_frwrd_typ",                                                                       
    (PARAM_VAL_RULES *)&SOC_SAND_PP_FRWRD_ACTION_TYPE_rule[0],                                            
    (sizeof(SOC_SAND_PP_FRWRD_ACTION_TYPE_rule) / sizeof(SOC_SAND_PP_FRWRD_ACTION_TYPE_rule[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  value.da_info.forward_type:\r\n"
    "  The forwarding action Destination type\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mac_lkup insert key_is_fid 0 key_fid 0 key_mac 0\r\n"
    "  aging_rfrshd_by_mssg 0 aging_age_stts 0\r\n"
    "  sa_drp_whn_sa_is_knwn 0 sa_is_dynmc 0\r\n"
    "  da_dstntn_dst_val 0 da_dstntn_dst_typ 0\r\n"
    "  da_policer_pntr_slct 0 da_frwrd_typ 0\r\n"
    "",
    "",                                                                                  
    {BIT(0), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MACT_ENTRY_LEARN_MACT_ENTRY_LEARN_ID,                                                            
    "learn",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Learns an entry for given key and value. If in the MAC table there is already\r\n"
    "  an entry with this key, it is overwritten.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mac_lkup learn key_is_fid 0 key_fid 0 key_mac 0\r\n"
    "  aging_rfrshd_by_mssg 0 aging_age_stts 0\r\n"
    "  sa_drp_whn_sa_is_knwn 0 sa_is_dynmc 0\r\n"
    "  da_dstntn_dst_val 0 da_dstntn_dst_typ 0\r\n"
    "  da_policer_pntr_slct 0 da_frwrd_typ 0\r\n"
    "  key_is_fid 0 key_fid 0 key_mac 0\r\n"
    "",
    "",                                                                                  
    {BIT(1), 0, 0, 0},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MACT_ENTRY_LEARN_MACT_ENTRY_LEARN_KEY_IS_FID_ID,                                                            
    "key_is_fid",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  key.is_fid:\r\n"
    "  If TRUE then the ID is FID; otherwise it is VID.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mac_lkup learn key_is_fid 0 key_fid 0 key_mac 0\r\n"
    "  aging_rfrshd_by_mssg 0 aging_age_stts 0\r\n"
    "  sa_drp_whn_sa_is_knwn 0 sa_is_dynmc 0\r\n"
    "  da_dstntn_dst_val 0 da_dstntn_dst_typ 0\r\n"
    "  da_policer_pntr_slct 0 da_frwrd_typ 0\r\n"
    "  key_is_fid 0 key_fid 0 key_mac 0\r\n"
    "",
    "",                                                                                  
    {BIT(1), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MACT_ENTRY_LEARN_MACT_ENTRY_LEARN_KEY_VID_ID,                                                            
    "key_fid",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  key.vid:\r\n"
    "  The ID. May be FID or VID.Range 0-4095\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mac_lkup learn key_is_fid 0 key_fid 0 key_mac 0\r\n"
    "  aging_rfrshd_by_mssg 0 aging_age_stts 0\r\n"
    "  sa_drp_whn_sa_is_knwn 0 sa_is_dynmc 0\r\n"
    "  da_dstntn_dst_val 0 da_dstntn_dst_typ 0\r\n"
    "  da_policer_pntr_slct 0 da_frwrd_typ 0\r\n"
    "  key_is_fid 0 key_fid 0 key_mac 0\r\n"
    "",
    "",                                                                                  
    {BIT(1), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MACT_ENTRY_LEARN_MACT_ENTRY_LEARN_KEY_MAC_ID,                                                            
    "key_mac",                                                                       
    (PARAM_VAL_RULES *)&Timna_mac_addr_vals[0],
    (sizeof(Timna_mac_addr_vals) / sizeof(Timna_mac_addr_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  key.mac:\r\n"
    "  MAC address\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mac_lkup learn key_is_fid 0 key_fid 0 key_mac 0\r\n"
    "  aging_rfrshd_by_mssg 0 aging_age_stts 0\r\n"
    "  sa_drp_whn_sa_is_knwn 0 sa_is_dynmc 0\r\n"
    "  da_dstntn_dst_val 0 da_dstntn_dst_typ 0\r\n"
    "  da_policer_pntr_slct 0 da_frwrd_typ 0\r\n"
    "  key_is_fid 0 key_fid 0 key_mac 0\r\n"
    "",
    "",                                                                                  
    {BIT(1), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MACT_ENTRY_LEARN_MACT_ENTRY_LEARN_LEARN_INFO_VALUE_AGING_INFO_REFRESHED_BY_MESSAGE_ID,                                                            
    "aging_rfrshd_by_mssg",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  learn_info.value.aging_info.refreshed_by_message:\r\n"
    "  Is the reason for refreshing the entry is receiving a refresh message\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mac_lkup learn key_is_fid 0 key_fid 0 key_mac 0\r\n"
    "  aging_rfrshd_by_mssg 0 aging_age_stts 0\r\n"
    "  sa_drp_whn_sa_is_knwn 0 sa_is_dynmc 0\r\n"
    "  da_dstntn_dst_val 0 da_dstntn_dst_typ 0\r\n"
    "  da_policer_pntr_slct 0 da_frwrd_typ 0\r\n"
    "  key_is_fid 0 key_fid 0 key_mac 0\r\n"
    "",
    "",                                                                                  
    {BIT(1), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MACT_ENTRY_LEARN_MACT_ENTRY_LEARN_LEARN_INFO_VALUE_AGING_INFO_AGE_STATUS_ID,                                                            
    "aging_age_stts",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  learn_info.value.aging_info.age_status:\r\n"
    "  Age Status of the Entry. Indicates how Fresh is the entry.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mac_lkup learn key_is_fid 0 key_fid 0 key_mac 0\r\n"
    "  aging_rfrshd_by_mssg 0 aging_age_stts 0\r\n"
    "  sa_drp_whn_sa_is_knwn 0 sa_is_dynmc 0\r\n"
    "  da_dstntn_dst_val 0 da_dstntn_dst_typ 0\r\n"
    "  da_policer_pntr_slct 0 da_frwrd_typ 0\r\n"
    "  key_is_fid 0 key_fid 0 key_mac 0\r\n"
    "",
    "",                                                                                  
    {BIT(1), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MACT_ENTRY_LEARN_MACT_ENTRY_LEARN_LEARN_INFO_VALUE_SA_INFO_DROP_WHEN_SA_IS_KNOWN_ID,                                                            
    "sa_drp_whn_sa_is_knwn",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  learn_info.value.sa_info.drop_when_sa_is_known:\r\n"
    "  If TRUE - For an SA lookup match, then the packet is dropped with forwarding\r\n"
    "  action type change to type configured by timna_mact_sa_drop_frwd_info_set()\r\n"
    "  with destination drop. If FALSE - SA lookup match doesn't affect forwarding.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mac_lkup learn key_is_fid 0 key_fid 0 key_mac 0\r\n"
    "  aging_rfrshd_by_mssg 0 aging_age_stts 0\r\n"
    "  sa_drp_whn_sa_is_knwn 0 sa_is_dynmc 0\r\n"
    "  da_dstntn_dst_val 0 da_dstntn_dst_typ 0\r\n"
    "  da_policer_pntr_slct 0 da_frwrd_typ 0\r\n"
    "  key_is_fid 0 key_fid 0 key_mac 0\r\n"
    "",
    "",                                                                                  
    {BIT(1), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MACT_ENTRY_LEARN_MACT_ENTRY_LEARN_LEARN_INFO_VALUE_SA_INFO_IS_DYNAMIC_ID,                                                            
    "sa_is_dynmc",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  learn_info.value.sa_info.is_dynamic:\r\n"
    "  Is the entry dynamic (i.e. isn't static) and participates in the aging\r\n"
    "  process.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mac_lkup learn key_is_fid 0 key_fid 0 key_mac 0\r\n"
    "  aging_rfrshd_by_mssg 0 aging_age_stts 0\r\n"
    "  sa_drp_whn_sa_is_knwn 0 sa_is_dynmc 0\r\n"
    "  da_dstntn_dst_val 0 da_dstntn_dst_typ 0\r\n"
    "  da_policer_pntr_slct 0 da_frwrd_typ 0\r\n"
    "  key_is_fid 0 key_fid 0 key_mac 0\r\n"
    "",
    "",                                                                                  
    {BIT(1), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MACT_ENTRY_LEARN_MACT_ENTRY_LEARN_LEARN_INFO_VALUE_DA_INFO_DESTINATION_DEST_VAL_ID,                                                            
    "da_dstntn_dst_val",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  learn_info.value.da_info.destination.dest_val:\r\n"
    "  The destination value, according to the type (Single, RLAG or GLAG,LIF...)For\r\n"
    "  LAG the value is the group ID.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mac_lkup learn key_is_fid 0 key_fid 0 key_mac 0\r\n"
    "  aging_rfrshd_by_mssg 0 aging_age_stts 0\r\n"
    "  sa_drp_whn_sa_is_knwn 0 sa_is_dynmc 0\r\n"
    "  da_dstntn_dst_val 0 da_dstntn_dst_typ 0\r\n"
    "  da_policer_pntr_slct 0 da_frwrd_typ 0\r\n"
    "  key_is_fid 0 key_fid 0 key_mac 0\r\n"
    "",
    "",                                                                                  
    {BIT(1), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MACT_ENTRY_LEARN_MACT_ENTRY_LEARN_LEARN_INFO_VALUE_DA_INFO_DESTINATION_DEST_TYPE_ID,                                                            
    "da_dstntn_dst_typ",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  learn_info.value.da_info.destination.dest_type:\r\n"
    "  The type of the following destination ID\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mac_lkup learn key_is_fid 0 key_fid 0 key_mac 0\r\n"
    "  aging_rfrshd_by_mssg 0 aging_age_stts 0\r\n"
    "  sa_drp_whn_sa_is_knwn 0 sa_is_dynmc 0\r\n"
    "  da_dstntn_dst_val 0 da_dstntn_dst_typ 0\r\n"
    "  da_policer_pntr_slct 0 da_frwrd_typ 0\r\n"
    "  key_is_fid 0 key_fid 0 key_mac 0\r\n"
    "",
    "",                                                                                  
    {BIT(1), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MACT_ENTRY_LEARN_MACT_ENTRY_LEARN_LEARN_INFO_VALUE_DA_INFO_POLICER_POINTER_SELECT_ID,                                                            
    "da_policer_pntr_slct",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  learn_info.value.da_info.policer_pointer_select:\r\n"
    "  Specifies which pointer to choose for selecting the Ethernet policer to be\r\n"
    "  applied.Relevant if the forward_type is intercept or control. Where each has\r\n"
    "  separate mapping.Range 0-2 . refer to timna_bridging_frwrd_glbl_info_set\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mac_lkup learn key_is_fid 0 key_fid 0 key_mac 0\r\n"
    "  aging_rfrshd_by_mssg 0 aging_age_stts 0\r\n"
    "  sa_drp_whn_sa_is_knwn 0 sa_is_dynmc 0\r\n"
    "  da_dstntn_dst_val 0 da_dstntn_dst_typ 0\r\n"
    "  da_policer_pntr_slct 0 da_frwrd_typ 0\r\n"
    "  key_is_fid 0 key_fid 0 key_mac 0\r\n"
    "",
    "",                                                                                  
    {BIT(1), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MACT_ENTRY_LEARN_MACT_ENTRY_LEARN_LEARN_INFO_VALUE_DA_INFO_FORWARD_TYPE_ID,                                                            
    "da_frwrd_typ",                                                                       
    (PARAM_VAL_RULES *)&SOC_SAND_PP_FRWRD_ACTION_TYPE_rule[0],                                            
    (sizeof(SOC_SAND_PP_FRWRD_ACTION_TYPE_rule) / sizeof(SOC_SAND_PP_FRWRD_ACTION_TYPE_rule[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  learn_info.value.da_info.forward_type:\r\n"
    "  The forwarding action Destination type\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mac_lkup learn key_is_fid 0 key_fid 0 key_mac 0\r\n"
    "  aging_rfrshd_by_mssg 0 aging_age_stts 0\r\n"
    "  sa_drp_whn_sa_is_knwn 0 sa_is_dynmc 0\r\n"
    "  da_dstntn_dst_val 0 da_dstntn_dst_typ 0\r\n"
    "  da_policer_pntr_slct 0 da_frwrd_typ 0\r\n"
    "  key_is_fid 0 key_fid 0 key_mac 0\r\n"
    "",
    "",                                                                                  
    {BIT(1), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MACT_ENTRY_LEARN_MACT_ENTRY_LEARN_LEARN_INFO_KEY_IS_FID_ID,                                                            
    "key_is_fid",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  learn_info.key.is_fid:\r\n"
    "  If TRUE then the ID is FID; otherwise it is VID.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mac_lkup learn key_is_fid 0 key_fid 0 key_mac 0\r\n"
    "  aging_rfrshd_by_mssg 0 aging_age_stts 0\r\n"
    "  sa_drp_whn_sa_is_knwn 0 sa_is_dynmc 0\r\n"
    "  da_dstntn_dst_val 0 da_dstntn_dst_typ 0\r\n"
    "  da_policer_pntr_slct 0 da_frwrd_typ 0\r\n"
    "  key_is_fid 0 key_fid 0 key_mac 0\r\n"
    "",
    "",                                                                                  
    {BIT(1), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MACT_ENTRY_LEARN_MACT_ENTRY_LEARN_LEARN_INFO_KEY_VID_ID,                                                            
    "key_fid",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  learn_info.key.vid:\r\n"
    "  The ID. May be FID or VID.Range 0-4095\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mac_lkup learn key_is_fid 0 key_fid 0 key_mac 0\r\n"
    "  aging_rfrshd_by_mssg 0 aging_age_stts 0\r\n"
    "  sa_drp_whn_sa_is_knwn 0 sa_is_dynmc 0\r\n"
    "  da_dstntn_dst_val 0 da_dstntn_dst_typ 0\r\n"
    "  da_policer_pntr_slct 0 da_frwrd_typ 0\r\n"
    "  key_is_fid 0 key_fid 0 key_mac 0\r\n"
    "",
    "",                                                                                  
    {BIT(1), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MACT_ENTRY_LEARN_MACT_ENTRY_LEARN_LEARN_INFO_KEY_MAC_ID,                                                            
    "key_mac",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  learn_info.key.mac:\r\n"
    "  MAC address\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mac_lkup learn key_is_fid 0 key_fid 0 key_mac 0\r\n"
    "  aging_rfrshd_by_mssg 0 aging_age_stts 0\r\n"
    "  sa_drp_whn_sa_is_knwn 0 sa_is_dynmc 0\r\n"
    "  da_dstntn_dst_val 0 da_dstntn_dst_typ 0\r\n"
    "  da_policer_pntr_slct 0 da_frwrd_typ 0\r\n"
    "  key_is_fid 0 key_fid 0 key_mac 0\r\n"
    "",
    "",                                                                                  
    {BIT(1), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MACT_ENTRY_REFRESH_MACT_ENTRY_REFRESH_ID,                                                            
    "refresh",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Refresh an entry for a given key if in the MAC table there is already an\r\n"
    "  entry with this key. Otherwise an error returned. If the entry is static\r\n"
    "  error is returned.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mac_lkup refresh key_is_fid 0 key_fid 0 key_mac 0\r\n"
    "  rfrshd_by_mssg 0 age_stts 0\r\n"
    "",
    "",                                                                                  
    {BIT(2), 0, 0, 0},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MACT_ENTRY_REFRESH_MACT_ENTRY_REFRESH_KEY_IS_FID_ID,                                                            
    "key_is_fid",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  key.is_fid:\r\n"
    "  If TRUE then the ID is FID; otherwise it is VID.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mac_lkup refresh key_is_fid 0 key_fid 0 key_mac 0\r\n"
    "  rfrshd_by_mssg 0 age_stts 0\r\n"
    "",
    "",                                                                                  
    {BIT(2), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MACT_ENTRY_REFRESH_MACT_ENTRY_REFRESH_KEY_VID_ID,                                                            
    "key_fid",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  key.vid:\r\n"
    "  The ID. May be FID or VID.Range 0-4095\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mac_lkup refresh key_is_fid 0 key_fid 0 key_mac 0\r\n"
    "  rfrshd_by_mssg 0 age_stts 0\r\n"
    "",
    "",                                                                                  
    {BIT(2), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MACT_ENTRY_REFRESH_MACT_ENTRY_REFRESH_KEY_MAC_ID,                                                            
    "key_mac",                                                                       
    (PARAM_VAL_RULES *)&Timna_mac_addr_vals[0],
    (sizeof(Timna_mac_addr_vals) / sizeof(Timna_mac_addr_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  key.mac:\r\n"
    "  MAC address\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mac_lkup refresh key_is_fid 0 key_fid 0 key_mac 0\r\n"
    "  rfrshd_by_mssg 0 age_stts 0\r\n"
    "",
    "",                                                                                  
    {BIT(2), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MACT_ENTRY_REFRESH_MACT_ENTRY_REFRESH_AGING_INFO_REFRESHED_BY_MESSAGE_ID,                                                            
    "rfrshd_by_mssg",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  aging_info.refreshed_by_message:\r\n"
    "  Is the reason for refreshing the entry is receiving a refresh message\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mac_lkup refresh key_is_fid 0 key_fid 0 key_mac 0\r\n"
    "  rfrshd_by_mssg 0 age_stts 0\r\n"
    "",
    "",                                                                                  
    {BIT(2), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MACT_ENTRY_REFRESH_MACT_ENTRY_REFRESH_AGING_INFO_AGE_STATUS_ID,                                                            
    "age_stts",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  aging_info.age_status:\r\n"
    "  Age Status of the Entry. Indicates how Fresh is the entry.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mac_lkup refresh key_is_fid 0 key_fid 0 key_mac 0\r\n"
    "  rfrshd_by_mssg 0 age_stts 0\r\n"
    "",
    "",                                                                                  
    {BIT(2), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MACT_ENTRY_UPDATE_MACT_ENTRY_UPDATE_ID,                                                            
    "update",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Update subset of field of existing entry.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mac_lkup update aging_update 0 src_update 0\r\n"
    "  dest_update 0 aging_rfrshd_by_mssg 0\r\n"
    "  aging_age_stts 0 sa_drp_whn_sa_is_knwn 0\r\n"
    "  sa_is_dynmc 0 da_dstntn_dst_val 0\r\n"
    "  da_dstntn_dst_typ 0 da_policer_pntr_slct 0\r\n"
    "  da_frwrd_typ 0 key_is_fid 0 key_fid 0\r\n"
    "  key_mac 0\r\n"
    "",
    "",                                                                                  
    {BIT(3), 0, 0, 0},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MACT_ENTRY_UPDATE_MACT_ENTRY_UPDATE_UPDATE_FIELDS_AGING_INFO_ID,                                                            
    "aging_update",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  update_fields.aging_info:\r\n"
    "  Update aging status\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mac_lkup update aging_update 0 src_update 0\r\n"
    "  dest_update 0 aging_rfrshd_by_mssg 0\r\n"
    "  aging_age_stts 0 sa_drp_whn_sa_is_knwn 0\r\n"
    "  sa_is_dynmc 0 da_dstntn_dst_val 0\r\n"
    "  da_dstntn_dst_typ 0 da_policer_pntr_slct 0\r\n"
    "  da_frwrd_typ 0 key_is_fid 0 key_fid 0\r\n"
    "  key_mac 0\r\n"
    "",
    "",                                                                                  
    {BIT(3), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MACT_ENTRY_UPDATE_MACT_ENTRY_UPDATE_UPDATE_FIELDS_SRC_INFO_ID,                                                            
    "src_update",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  update_fields.src_info:\r\n"
    "  Update management information\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mac_lkup update aging_update 0 src_update 0\r\n"
    "  dest_update 0 aging_rfrshd_by_mssg 0\r\n"
    "  aging_age_stts 0 sa_drp_whn_sa_is_knwn 0\r\n"
    "  sa_is_dynmc 0 da_dstntn_dst_val 0\r\n"
    "  da_dstntn_dst_typ 0 da_policer_pntr_slct 0\r\n"
    "  da_frwrd_typ 0 key_is_fid 0 key_fid 0\r\n"
    "  key_mac 0\r\n"
    "",
    "",                                                                                  
    {BIT(3), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MACT_ENTRY_UPDATE_MACT_ENTRY_UPDATE_UPDATE_FIELDS_DEST_INFO_ID,                                                            
    "dest_update",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  update_fields.dest_info:\r\n"
    "  Update destination information\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mac_lkup update aging_update 0 src_update 0\r\n"
    "  dest_update 0 aging_rfrshd_by_mssg 0\r\n"
    "  aging_age_stts 0 sa_drp_whn_sa_is_knwn 0\r\n"
    "  sa_is_dynmc 0 da_dstntn_dst_val 0\r\n"
    "  da_dstntn_dst_typ 0 da_policer_pntr_slct 0\r\n"
    "  da_frwrd_typ 0 key_is_fid 0 key_fid 0\r\n"
    "  key_mac 0\r\n"
    "",
    "",                                                                                  
    {BIT(3), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MACT_ENTRY_UPDATE_MACT_ENTRY_UPDATE_ENTRY_INFO_VALUE_AGING_INFO_REFRESHED_BY_MESSAGE_ID,                                                            
    "aging_rfrshd_by_mssg",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  entry_info.value.aging_info.refreshed_by_message:\r\n"
    "  Is the reason for refreshing the entry is receiving a refresh message\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mac_lkup update aging_update 0 src_update 0\r\n"
    "  dest_update 0 aging_rfrshd_by_mssg 0\r\n"
    "  aging_age_stts 0 sa_drp_whn_sa_is_knwn 0\r\n"
    "  sa_is_dynmc 0 da_dstntn_dst_val 0\r\n"
    "  da_dstntn_dst_typ 0 da_policer_pntr_slct 0\r\n"
    "  da_frwrd_typ 0 key_is_fid 0 key_fid 0\r\n"
    "  key_mac 0\r\n"
    "",
    "",                                                                                  
    {BIT(3), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MACT_ENTRY_UPDATE_MACT_ENTRY_UPDATE_ENTRY_INFO_VALUE_AGING_INFO_AGE_STATUS_ID,                                                            
    "aging_age_stts",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  entry_info.value.aging_info.age_status:\r\n"
    "  Age Status of the Entry. Indicates how Fresh is the entry.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mac_lkup update aging_update 0 src_update 0\r\n"
    "  dest_update 0 aging_rfrshd_by_mssg 0\r\n"
    "  aging_age_stts 0 sa_drp_whn_sa_is_knwn 0\r\n"
    "  sa_is_dynmc 0 da_dstntn_dst_val 0\r\n"
    "  da_dstntn_dst_typ 0 da_policer_pntr_slct 0\r\n"
    "  da_frwrd_typ 0 key_is_fid 0 key_fid 0\r\n"
    "  key_mac 0\r\n"
    "",
    "",                                                                                  
    {BIT(3), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MACT_ENTRY_UPDATE_MACT_ENTRY_UPDATE_ENTRY_INFO_VALUE_SA_INFO_DROP_WHEN_SA_IS_KNOWN_ID,                                                            
    "sa_drp_whn_sa_is_knwn",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  entry_info.value.sa_info.drop_when_sa_is_known:\r\n"
    "  If TRUE - For an SA lookup match, then the packet is dropped with forwarding\r\n"
    "  action type change to type configured by timna_mact_sa_drop_frwd_info_set()\r\n"
    "  with destination drop. If FALSE - SA lookup match doesn't affect forwarding.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mac_lkup update aging_update 0 src_update 0\r\n"
    "  dest_update 0 aging_rfrshd_by_mssg 0\r\n"
    "  aging_age_stts 0 sa_drp_whn_sa_is_knwn 0\r\n"
    "  sa_is_dynmc 0 da_dstntn_dst_val 0\r\n"
    "  da_dstntn_dst_typ 0 da_policer_pntr_slct 0\r\n"
    "  da_frwrd_typ 0 key_is_fid 0 key_fid 0\r\n"
    "  key_mac 0\r\n"
    "",
    "",                                                                                  
    {BIT(3), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MACT_ENTRY_UPDATE_MACT_ENTRY_UPDATE_ENTRY_INFO_VALUE_SA_INFO_IS_DYNAMIC_ID,                                                            
    "sa_is_dynmc",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  entry_info.value.sa_info.is_dynamic:\r\n"
    "  Is the entry dynamic (i.e. isn't static) and participates in the aging\r\n"
    "  process.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mac_lkup update aging_update 0 src_update 0\r\n"
    "  dest_update 0 aging_rfrshd_by_mssg 0\r\n"
    "  aging_age_stts 0 sa_drp_whn_sa_is_knwn 0\r\n"
    "  sa_is_dynmc 0 da_dstntn_dst_val 0\r\n"
    "  da_dstntn_dst_typ 0 da_policer_pntr_slct 0\r\n"
    "  da_frwrd_typ 0 key_is_fid 0 key_fid 0\r\n"
    "  key_mac 0\r\n"
    "",
    "",                                                                                  
    {BIT(3), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MACT_ENTRY_UPDATE_MACT_ENTRY_UPDATE_ENTRY_INFO_VALUE_DA_INFO_DESTINATION_DEST_VAL_ID,                                                            
    "da_dstntn_dst_val",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  entry_info.value.da_info.destination.dest_val:\r\n"
    "  The destination value, according to the type (Single, RLAG or GLAG,LIF...)For\r\n"
    "  LAG the value is the group ID.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mac_lkup update aging_update 0 src_update 0\r\n"
    "  dest_update 0 aging_rfrshd_by_mssg 0\r\n"
    "  aging_age_stts 0 sa_drp_whn_sa_is_knwn 0\r\n"
    "  sa_is_dynmc 0 da_dstntn_dst_val 0\r\n"
    "  da_dstntn_dst_typ 0 da_policer_pntr_slct 0\r\n"
    "  da_frwrd_typ 0 key_is_fid 0 key_fid 0\r\n"
    "  key_mac 0\r\n"
    "",
    "",                                                                                  
    {BIT(3), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MACT_ENTRY_UPDATE_MACT_ENTRY_UPDATE_ENTRY_INFO_VALUE_DA_INFO_DESTINATION_DEST_TYPE_ID,                                                            
    "da_dstntn_dst_typ",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  entry_info.value.da_info.destination.dest_type:\r\n"
    "  The type of the following destination ID\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mac_lkup update aging_update 0 src_update 0\r\n"
    "  dest_update 0 aging_rfrshd_by_mssg 0\r\n"
    "  aging_age_stts 0 sa_drp_whn_sa_is_knwn 0\r\n"
    "  sa_is_dynmc 0 da_dstntn_dst_val 0\r\n"
    "  da_dstntn_dst_typ 0 da_policer_pntr_slct 0\r\n"
    "  da_frwrd_typ 0 key_is_fid 0 key_fid 0\r\n"
    "  key_mac 0\r\n"
    "",
    "",                                                                                  
    {BIT(3), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MACT_ENTRY_UPDATE_MACT_ENTRY_UPDATE_ENTRY_INFO_VALUE_DA_INFO_POLICER_POINTER_SELECT_ID,                                                            
    "da_policer_pntr_slct",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  entry_info.value.da_info.policer_pointer_select:\r\n"
    "  Specifies which pointer to choose for selecting the Ethernet policer to be\r\n"
    "  applied.Relevant if the forward_type is intercept or control. Where each has\r\n"
    "  separate mapping.Range 0-2 . refer to timna_bridging_frwrd_glbl_info_set\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mac_lkup update aging_update 0 src_update 0\r\n"
    "  dest_update 0 aging_rfrshd_by_mssg 0\r\n"
    "  aging_age_stts 0 sa_drp_whn_sa_is_knwn 0\r\n"
    "  sa_is_dynmc 0 da_dstntn_dst_val 0\r\n"
    "  da_dstntn_dst_typ 0 da_policer_pntr_slct 0\r\n"
    "  da_frwrd_typ 0 key_is_fid 0 key_fid 0\r\n"
    "  key_mac 0\r\n"
    "",
    "",                                                                                  
    {BIT(3), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MACT_ENTRY_UPDATE_MACT_ENTRY_UPDATE_ENTRY_INFO_VALUE_DA_INFO_FORWARD_TYPE_ID,                                                            
    "da_frwrd_typ",                                                                       
    (PARAM_VAL_RULES *)&SOC_SAND_PP_FRWRD_ACTION_TYPE_rule[0],                                            
    (sizeof(SOC_SAND_PP_FRWRD_ACTION_TYPE_rule) / sizeof(SOC_SAND_PP_FRWRD_ACTION_TYPE_rule[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  entry_info.value.da_info.forward_type:\r\n"
    "  The forwarding action Destination type\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mac_lkup update aging_update 0 src_update 0\r\n"
    "  dest_update 0 aging_rfrshd_by_mssg 0\r\n"
    "  aging_age_stts 0 sa_drp_whn_sa_is_knwn 0\r\n"
    "  sa_is_dynmc 0 da_dstntn_dst_val 0\r\n"
    "  da_dstntn_dst_typ 0 da_policer_pntr_slct 0\r\n"
    "  da_frwrd_typ 0 key_is_fid 0 key_fid 0\r\n"
    "  key_mac 0\r\n"
    "",
    "",                                                                                  
    {BIT(3), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MACT_ENTRY_UPDATE_MACT_ENTRY_UPDATE_ENTRY_INFO_KEY_IS_FID_ID,                                                            
    "key_is_fid",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  entry_info.key.is_fid:\r\n"
    "  If TRUE then the ID is FID; otherwise it is VID.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mac_lkup update aging_update 0 src_update 0\r\n"
    "  dest_update 0 aging_rfrshd_by_mssg 0\r\n"
    "  aging_age_stts 0 sa_drp_whn_sa_is_knwn 0\r\n"
    "  sa_is_dynmc 0 da_dstntn_dst_val 0\r\n"
    "  da_dstntn_dst_typ 0 da_policer_pntr_slct 0\r\n"
    "  da_frwrd_typ 0 key_is_fid 0 key_fid 0\r\n"
    "  key_mac 0\r\n"
    "",
    "",                                                                                  
    {BIT(3), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MACT_ENTRY_UPDATE_MACT_ENTRY_UPDATE_ENTRY_INFO_KEY_VID_ID,                                                            
    "key_fid",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  entry_info.key.vid:\r\n"
    "  The ID. May be FID or VID.Range 0-4095\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mac_lkup update aging_update 0 src_update 0\r\n"
    "  dest_update 0 aging_rfrshd_by_mssg 0\r\n"
    "  aging_age_stts 0 sa_drp_whn_sa_is_knwn 0\r\n"
    "  sa_is_dynmc 0 da_dstntn_dst_val 0\r\n"
    "  da_dstntn_dst_typ 0 da_policer_pntr_slct 0\r\n"
    "  da_frwrd_typ 0 key_is_fid 0 key_fid 0\r\n"
    "  key_mac 0\r\n"
    "",
    "",                                                                                  
    {BIT(3), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MACT_ENTRY_UPDATE_MACT_ENTRY_UPDATE_ENTRY_INFO_KEY_MAC_ID,                                                            
    "key_mac",                                                                       
    (PARAM_VAL_RULES *)&Timna_mac_addr_vals[0],
    (sizeof(Timna_mac_addr_vals) / sizeof(Timna_mac_addr_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  entry_info.key.mac:\r\n"
    "  MAC address\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mac_lkup update aging_update 0 src_update 0\r\n"
    "  dest_update 0 aging_rfrshd_by_mssg 0\r\n"
    "  aging_age_stts 0 sa_drp_whn_sa_is_knwn 0\r\n"
    "  sa_is_dynmc 0 da_dstntn_dst_val 0\r\n"
    "  da_dstntn_dst_typ 0 da_policer_pntr_slct 0\r\n"
    "  da_frwrd_typ 0 key_is_fid 0 key_fid 0\r\n"
    "  key_mac 0\r\n"
    "",
    "",                                                                                  
    {BIT(3), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MACT_ENTRY_DELETE_MACT_ENTRY_DELETE_ID,                                                            
    "delete",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Delete entry according to key.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mac_lkup delete key_is_fid 0 key_fid 0 key_mac 0\r\n"
    "",
    "",                                                                                  
    {BIT(4), 0, 0, 0},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MACT_ENTRY_DELETE_MACT_ENTRY_DELETE_KEY_IS_FID_ID,                                                            
    "key_is_fid",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  key.is_fid:\r\n"
    "  If TRUE then the ID is FID; otherwise it is VID.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mac_lkup delete key_is_fid 0 key_fid 0 key_mac 0\r\n"
    "",
    "",                                                                                  
    {BIT(4), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MACT_ENTRY_DELETE_MACT_ENTRY_DELETE_KEY_VID_ID,                                                            
    "key_fid",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  key.vid:\r\n"
    "  The ID. May be FID or VID.Range 0-4095\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mac_lkup delete key_is_fid 0 key_fid 0 key_mac 0\r\n"
    "",
    "",                                                                                  
    {BIT(4), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MACT_ENTRY_DELETE_MACT_ENTRY_DELETE_KEY_MAC_ID,                                                            
    "key_mac",                                                                       
    (PARAM_VAL_RULES *)&Timna_mac_addr_vals[0],
    (sizeof(Timna_mac_addr_vals) / sizeof(Timna_mac_addr_vals[0])) - 1,
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  key.mac:\r\n"
    "  MAC address\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mac_lkup delete key_is_fid 0 key_fid 0 key_mac 0\r\n"
    "",
    "",                                                                                  
    {BIT(4), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MACT_ENTRY_GET_MACT_ENTRY_GET_ID,                                                            
    "get_entry",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Get entry according to key (MAC address, FID or VID). \r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mac_lkup get_entry key_is_fid 0 key_fid 0 key_mac 0\r\n"
    "",
    "",                                                                                  
    {BIT(5), 0, 0, 0},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MACT_ENTRY_GET_MACT_ENTRY_GET_KEY_IS_FID_ID,                                                            
    "key_is_fid",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  key.is_fid:\r\n"
    "  If TRUE then the ID is FID; otherwise it is VID.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mac_lkup get_entry key_is_fid 0 key_fid 0 key_mac 0\r\n"
    "",
    "",                                                                                  
    {BIT(5), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MACT_ENTRY_GET_MACT_ENTRY_GET_KEY_VID_ID,                                                            
    "key_fid",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  key.vid:\r\n"
    "  The ID. May be FID or VID.Range 0-4095\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mac_lkup get_entry key_is_fid 0 key_fid 0 key_mac 0\r\n"
    "",
    "",                                                                                  
    {BIT(5), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MACT_ENTRY_GET_MACT_ENTRY_GET_KEY_MAC_ID,                                                            
    "key_mac",                                                                       
    (PARAM_VAL_RULES *)&Timna_mac_addr_vals[0],
    (sizeof(Timna_mac_addr_vals) / sizeof(Timna_mac_addr_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  key.mac:\r\n"
    "  MAC address\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mac_lkup get_entry key_is_fid 0 key_fid 0 key_mac 0\r\n"
    "",
    "",                                                                                  
    {BIT(5), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MACT_ENTRY_GET_BLOCK_MACT_ENTRY_GET_BLOCK_ID,                                                            
    "get_block",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Get block of entries from the MACT, starting from start_indx, till the first\r\n"
    "  of these is happened-\r\n"
    "  Reach End of the table.-\r\n"
    "  'entries_to_scan' entries are examined.-\r\n"
    "  'entries_to_act' entries are retrieved after matching the given rule. Only\r\n"
    "  valid entries are considered.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mac_lkup get_block frz_mct 0 rng_ntrs_to_act 0\r\n"
    "  rng_ntrs_to_scn 0 rng_strt_ndx 0 rul_ncludng_sttc 0 rul_ncludng_dynmc 0 rul_dst_dst_val 0\r\n"
    "  rul_dst_dst_typ 0 rul_cmpr_dst 0 rul_fid 0 rul_cmpr_fid 0\r\n"
    "",
    "",                                                                                  
    {BIT(6), 0, 0, 0},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MACT_ENTRY_GET_BLOCK_MACT_ENTRY_GET_BLOCK_FREEZE_MACT_ID,                                                            
    "frz_mct",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  freeze_mact:\r\n"
    "  If TRUE Before getting the block Stop the activity of the device on the MACT\r\n"
    "  so keeping the MACT unchanged. On completion the function restores the device\r\n"
    "  activity status as it was before calling this function.No supported, ignored.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mac_lkup get_block frz_mct 0 rng_ntrs_to_act 0\r\n"
    "  rng_ntrs_to_scn 0 rng_strt_ndx 0 rul_ncludng_sttc 0 rul_ncludng_dynmc 0 rul_dst_dst_val 0\r\n"
    "  rul_dst_dst_typ 0 rul_cmpr_dst 0 rul_fid 0 rul_cmpr_fid 0\r\n"
    "",
    "",                                                                                  
    {BIT(6), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MACT_ENTRY_GET_BLOCK_MACT_ENTRY_GET_BLOCK_RANGE_ENTRIES_TO_ACT_ID,                                                            
    "rng_ntrs_to_act",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  range.entries_to_act:\r\n"
    "  Number of entries to read/modify.Stop After retrieving this number of entries.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mac_lkup get_block frz_mct 0 rng_ntrs_to_act 0\r\n"
    "  rng_ntrs_to_scn 0 rng_strt_ndx 0 rul_ncludng_sttc 0 rul_ncludng_dynmc 0 rul_dst_dst_val 0\r\n"
    "  rul_dst_dst_typ 0 rul_cmpr_dst 0 rul_fid 0 rul_cmpr_fid 0\r\n"
    "",
    "",                                                                                  
    {BIT(6), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MACT_ENTRY_GET_BLOCK_MACT_ENTRY_GET_BLOCK_RANGE_ENTRIES_TO_SCAN_ID,                                                            
    "rng_ntrs_to_scn",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  range.entries_to_scan:\r\n"
    "  The number of entries to scan.Stop After scanning this number of entries.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mac_lkup get_block frz_mct 0 rng_ntrs_to_act 0\r\n"
    "  rng_ntrs_to_scn 0 rng_strt_ndx 0 rul_ncludng_sttc 0 rul_ncludng_dynmc 0 rul_dst_dst_val 0\r\n"
    "  rul_dst_dst_typ 0 rul_cmpr_dst 0 rul_fid 0 rul_cmpr_fid 0\r\n"
    "",
    "",                                                                                  
    {BIT(6), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MACT_ENTRY_GET_BLOCK_MACT_ENTRY_GET_BLOCK_RANGE_START_INDX_ID,                                                            
    "rng_strt_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  range.start_indx:\r\n"
    "  The index to start reading from in the MACT\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mac_lkup get_block frz_mct 0 rng_ntrs_to_act 0\r\n"
    "  rng_ntrs_to_scn 0 rng_strt_ndx 0 rul_ncludng_sttc 0 rul_ncludng_dynmc 0 rul_dst_dst_val 0\r\n"
    "  rul_dst_dst_typ 0 rul_cmpr_dst 0 rul_fid 0 rul_cmpr_fid 0\r\n"
    "",
    "",                                                                                  
    {BIT(6), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },
    {                                                                                        
    PARAM_TIMNA_TIMNA_MACT_ENTRY_GET_BLOCK_MACT_ENTRY_GET_BLOCK_RULE_FLUSH_STATIC_ID,                                                            
    "rul_ncludng_sttc",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  rule.flush_sttc:\r\n"
    "  If TRUE then static entries are in match" 
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mac_lkup get_block frz_mct 0 rng_ntrs_to_act 0\r\n"
    "  rng_ntrs_to_scn 0 rng_strt_ndx 0 rul_ncludng_sttc 0 rul_ncludng_dynmc 0 rul_dst_dst_val 0\r\n"
    "  rul_dst_dst_typ 0 rul_cmpr_dst 0 rul_fid 0 rul_cmpr_fid 0\r\n"
    "",
    "",                                                                                  
    {BIT(6), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  }, 
  {                                                                                        
    PARAM_TIMNA_TIMNA_MACT_ENTRY_GET_BLOCK_MACT_ENTRY_GET_BLOCK_RULE_FLUSH_DYNAMIC_ID,                                                            
    "rul_ncludng_dynmc",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  rule.flush_static:\r\n"
    "  If TRUE then dynamic entries are in match"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mac_lkup get_block frz_mct 0 rng_ntrs_to_act 0\r\n"
    "  rng_ntrs_to_scn 0 rng_strt_ndx 0 rul_ncludng_sttc 0 rul_ncludng_dynmc 0 rul_dst_dst_val 0\r\n"
    "  rul_dst_dst_typ 0 rul_cmpr_dst 0 rul_fid 0 rul_cmpr_fid 0\r\n"
    "",
    "",                                                                                  
    {BIT(6), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MACT_ENTRY_GET_BLOCK_MACT_ENTRY_GET_BLOCK_RULE_DEST_DEST_VAL_ID,                                                            
    "rul_dst_dst_val",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  rule.dest.dest_val:\r\n"
    "  The destination value, according to the type (Single, RLAG or GLAG,LIF...)For\r\n"
    "  LAG the value is the group ID.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mac_lkup get_block frz_mct 0 rng_ntrs_to_act 0\r\n"
    "  rng_ntrs_to_scn 0 rng_strt_ndx 0 rul_ncludng_sttc 0 rul_ncludng_dynmc 0 rul_dst_dst_val 0\r\n"
    "  rul_dst_dst_typ 0 rul_cmpr_dst 0 rul_fid 0 rul_cmpr_fid 0\r\n"
    "",
    "",                                                                                  
    {BIT(6), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MACT_ENTRY_GET_BLOCK_MACT_ENTRY_GET_BLOCK_RULE_DEST_DEST_TYPE_ID,                                                            
    "rul_dst_dst_typ",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  rule.dest.dest_type:\r\n"
    "  The type of the following destination ID\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mac_lkup get_block frz_mct 0 rng_ntrs_to_act 0\r\n"
    "  rng_ntrs_to_scn 0 rng_strt_ndx 0 rul_ncludng_sttc 0 rul_ncludng_dynmc 0 rul_dst_dst_val 0\r\n"
    "  rul_dst_dst_typ 0 rul_cmpr_dst 0 rul_fid 0 rul_cmpr_fid 0\r\n"
    "",
    "",                                                                                  
    {BIT(6), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MACT_ENTRY_GET_BLOCK_MACT_ENTRY_GET_BLOCK_RULE_COMPARE_DEST_ID,                                                            
    "rul_cmpr_dst",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  rule.compare_dest:\r\n"
    "  Should the destination in the MAC table be compared with the destination in\r\n"
    "  this structure.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mac_lkup get_block frz_mct 0 rng_ntrs_to_act 0\r\n"
    "  rng_ntrs_to_scn 0 rng_strt_ndx 0 rul_ncludng_sttc 0 rul_dst_dst_val 0\r\n"
    "  rul_dst_dst_typ 0 rul_cmpr_dst 0 rul_fid 0 rul_cmpr_fid 0\r\n"
    "",
    "",                                                                                  
    {BIT(6), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MACT_ENTRY_GET_BLOCK_MACT_ENTRY_GET_BLOCK_RULE_FID_ID,                                                            
    "rul_fid",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  rule.fid:\r\n"
    "  When 'compare_fid' is asserted, the FID in the MACT is compared with this\r\n"
    "  value. \r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mac_lkup get_block frz_mct 0 rng_ntrs_to_act 0\r\n"
    "  rng_ntrs_to_scn 0 rng_strt_ndx 0 rul_ncludng_sttc 0 rul_dst_dst_val 0\r\n"
    "  rul_dst_dst_typ 0 rul_cmpr_dst 0 rul_fid 0 rul_cmpr_fid 0\r\n"
    "",
    "",                                                                                  
    {BIT(6), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MACT_ENTRY_GET_BLOCK_MACT_ENTRY_GET_BLOCK_RULE_COMPARE_FID_ID,                                                            
    "rul_cmpr_fid",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  rule.compare_fid:\r\n"
    "  Should the FID in the MACT be compared with the FID in this structure\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mac_lkup get_block frz_mct 0 rng_ntrs_to_act 0\r\n"
    "  rng_ntrs_to_scn 0 rng_strt_ndx 0 rul_ncludng_sttc 0 rul_dst_dst_val 0\r\n"
    "  rul_dst_dst_typ 0 rul_cmpr_dst 0 rul_fid 0 rul_cmpr_fid 0\r\n"
    "",
    "",                                                                                  
    {BIT(6), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MACT_FLUSH_MACT_FLUSH_ID,                                                            
    "flush",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Performs Flush Action (clear or transplant) to entries that fulfill a Rule.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mac_lkup flush new_dst_dst_val 0\r\n"
    "  new_dst_dst_typ 0 rul_flsh_sttc 0 rul_flsh_dynmc 0 rul_dst_dst_val\r\n"
    "  0 rul_dst_dst_typ 0 rul_cmpr_dst 0 rul_fid 0\r\n"
    "  rul_cmpr_fid 0 mod 0\r\n"
    "",
    "",                                                                                  
    {BIT(7), 0, 0, 0},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MACT_FLUSH_MACT_FLUSH_FLUSH_INFO_NEW_DEST_DEST_VAL_ID,                                                            
    "new_dst_dst_val",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  flush_info.new_dest.dest_val:\r\n"
    "  The destination value, according to the type (Single, RLAG or GLAG,LIF...)For\r\n"
    "  LAG the value is the group ID.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mac_lkup flush new_dst_dst_val 0\r\n"
    "  new_dst_dst_typ 0 rul_flsh_sttc 0 rul_flsh_dynmc 0 rul_dst_dst_val\r\n"
    "  0 rul_dst_dst_typ 0 rul_cmpr_dst 0 rul_fid 0\r\n"
    "  rul_cmpr_fid 0 mod 0\r\n"
    "",
    "",                                                                                  
    {BIT(7), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MACT_FLUSH_MACT_FLUSH_FLUSH_INFO_NEW_DEST_DEST_TYPE_ID,                                                            
    "new_dst_dst_typ",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  flush_info.new_dest.dest_type:\r\n"
    "  The type of the following destination ID\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mac_lkup flush new_dst_dst_val 0\r\n"
    "  new_dst_dst_typ 0 rul_flsh_sttc 0 rul_flsh_dynmc 0 rul_dst_dst_val\r\n"
    "  0 rul_dst_dst_typ 0 rul_cmpr_dst 0 rul_fid 0\r\n"
    "  rul_cmpr_fid 0 mod 0\r\n"
    "",
    "",                                                                                  
    {BIT(7), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MACT_FLUSH_MACT_FLUSH_FLUSH_INFO_RULE_FLUSH_STATIC_ID,                                                            
    "rul_flsh_sttc",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  flush_info.rule.flush_static:\r\n"
    "  If TRUE then both static and dynamic entries match. If FALSE then only\r\n"
    "  dynamic entries are match.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mac_lkup flush new_dst_dst_val 0\r\n"
    "  new_dst_dst_typ 0 rul_flsh_sttc 0 rul_flsh_dynmc 0 rul_dst_dst_val\r\n"
    "  0 rul_dst_dst_typ 0 rul_cmpr_dst 0 rul_fid 0\r\n"
    "  rul_cmpr_fid 0 mod 0\r\n"
    "",
    "",                                                                                  
    {BIT(7), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MACT_FLUSH_MACT_FLUSH_FLUSH_INFO_RULE_FLUSH_STATIC_ID,                                                            
    "rul_flsh_sttc",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  flush_info.rule.flush_static:\r\n"
    "  If TRUE then statuc entries match.    ",
    "Ex:\r\n"                                                                    
    "  timna_api mac_lkup flush new_dst_dst_val 0\r\n"
    "  new_dst_dst_typ 0 rul_flsh_sttc 0 rul_flsh_dynmc 0 rul_dst_dst_val\r\n"
    "  0 rul_dst_dst_typ 0 rul_cmpr_dst 0 rul_fid 0\r\n"
    "  rul_cmpr_fid 0 mod 0\r\n"
    "",
    "",                                                                                  
    {BIT(7), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MACT_FLUSH_MACT_FLUSH_FLUSH_INFO_RULE_FLUSH_DYNAMIC_ID,                                                            
    "rul_flsh_dynmc",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  flush_info.rule.flush_static:\r\n"
    "  If TRUE then dynamic entries match." 
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mac_lkup flush new_dst_dst_val 0\r\n"
    "  new_dst_dst_typ 0 rul_flsh_sttc 0 rul_flsh_dynmc 0 rul_dst_dst_val\r\n"
    "  0 rul_dst_dst_typ 0 rul_cmpr_dst 0 rul_fid 0\r\n"
    "  rul_cmpr_fid 0 mod 0\r\n"
    "",
    "",                                                                                  
    {BIT(7), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MACT_FLUSH_MACT_FLUSH_FLUSH_INFO_RULE_DEST_DEST_VAL_ID,                                                            
    "rul_dst_dst_val",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  flush_info.rule.dest.dest_val:\r\n"
    "  The destination value, according to the type (Single, RLAG or GLAG,LIF...)For\r\n"
    "  LAG the value is the group ID.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mac_lkup flush new_dst_dst_val 0\r\n"
    "  new_dst_dst_typ 0 rul_flsh_sttc 0  rul_flsh_dynmc 0rul_dst_dst_val\r\n"
    "  0 rul_dst_dst_typ 0 rul_cmpr_dst 0 rul_fid 0\r\n"
    "  rul_cmpr_fid 0 mod 0\r\n"
    "",
    "",                                                                                  
    {BIT(7), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MACT_FLUSH_MACT_FLUSH_FLUSH_INFO_RULE_DEST_DEST_TYPE_ID,                                                            
    "rul_dst_dst_typ",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  flush_info.rule.dest.dest_type:\r\n"
    "  The type of the following destination ID\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mac_lkup flush new_dst_dst_val 0\r\n"
    "  new_dst_dst_typ 0 rul_flsh_sttc 0 rul_flsh_dynmc 0 rul_dst_dst_val\r\n"
    "  0 rul_dst_dst_typ 0 rul_cmpr_dst 0 rul_fid 0\r\n"
    "  rul_cmpr_fid 0 mod 0\r\n"
    "",
    "",                                                                                  
    {BIT(7), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MACT_FLUSH_MACT_FLUSH_FLUSH_INFO_RULE_COMPARE_DEST_ID,                                                            
    "rul_cmpr_dst",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  flush_info.rule.compare_dest:\r\n"
    "  Should the destination in the MAC table be compared with the destination in\r\n"
    "  this structure.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mac_lkup flush new_dst_dst_val 0\r\n"
    "  new_dst_dst_typ 0 rul_flsh_sttc 0 rul_flsh_dynmc 0 rul_dst_dst_val\r\n"
    "  0 rul_dst_dst_typ 0 rul_cmpr_dst 0 rul_fid 0\r\n"
    "  rul_cmpr_fid 0 mod 0\r\n"
    "",
    "",                                                                                  
    {BIT(7), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MACT_FLUSH_MACT_FLUSH_FLUSH_INFO_RULE_FID_ID,                                                            
    "rul_fid",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  flush_info.rule.fid:\r\n"
    "  When 'compare_fid' is asserted, the FID in the MACT is compared with this\r\n"
    "  value. \r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mac_lkup flush new_dst_dst_val 0\r\n"
    "  new_dst_dst_typ 0 rul_flsh_sttc 0 rul_flsh_dynmc 0 rul_dst_dst_val\r\n"
    "  0 rul_dst_dst_typ 0 rul_cmpr_dst 0 rul_fid 0\r\n"
    "  rul_cmpr_fid 0 mod 0\r\n"
    "",
    "",                                                                                  
    {BIT(7), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MACT_FLUSH_MACT_FLUSH_FLUSH_INFO_RULE_COMPARE_FID_ID,                                                            
    "rul_cmpr_fid",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  flush_info.rule.compare_fid:\r\n"
    "  Should the FID in the MACT be compared with the FID in this structure\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mac_lkup flush new_dst_dst_val 0\r\n"
    "  new_dst_dst_typ 0 rul_flsh_sttc 0 rul_flsh_dynmc 0 rul_dst_dst_val\r\n"
    "  0 rul_dst_dst_typ 0 rul_cmpr_dst 0 rul_fid 0\r\n"
    "  rul_cmpr_fid 0 mod 0\r\n"
    "",
    "",                                                                                  
    {BIT(7), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MACT_FLUSH_MACT_FLUSH_FLUSH_INFO_MODE_ID,                                                            
    "mod",                                                                       
    (PARAM_VAL_RULES *)&TIMNA_MACT_FLUSH_MODE_rule[0],                                            
    (sizeof(TIMNA_MACT_FLUSH_MODE_rule) / sizeof(TIMNA_MACT_FLUSH_MODE_rule[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           

    0,0,0,0,0,0,0,                                                                         
    "  flush_info.mode:\r\n"
    "  MACT flush mode, Clear, Transplant, Clear All, Transplant All.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mac_lkup flush new_dst_dst_val 0\r\n"
    "  new_dst_dst_typ 0 rul_flsh_sttc 0 rul_flsh_dynmc 0 rul_dst_dst_val\r\n"
    "  0 rul_dst_dst_typ 0 rul_cmpr_dst 0 rul_fid 0\r\n"
    "  rul_cmpr_fid 0 mod 0\r\n"
    "",
    "",                                                                                  
    {BIT(7), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MACT_FLUSH_BLOCK_MACT_FLUSH_BLOCK_ID,                                                            
    "flush_block",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Performs Flush Action (clear or transplant) to entries that fulfill a Rule.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mac_lkup flush_block rng_ntrs_to_act 0 rng_ntrs_to_scn 0\r\n"
    "  rng_strt_ndx 0 new_dst_dst_val 0 new_dst_dst_typ 0\r\n"
    "  rul_flsh_sttc 0 rul_flsh_dynmc 0 rul_dst_dst_val 0 rul_dst_dst_typ\r\n"
    "  0 rul_cmpr_dst 0 rul_fid 0 rul_cmpr_fid 0\r\n"
    "  mod 0\r\n"
    "",
    "",                                                                                  
    {BIT(8), 0, 0, 0},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MACT_FLUSH_BLOCK_MACT_FLUSH_BLOCK_RANGE_ENTRIES_TO_ACT_ID,                                                            
    "rng_ntrs_to_act",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  range.entries_to_act:\r\n"
    "  Number of entries to read/modify.Stop After retrieving this number of entries.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mac_lkup flush_block rng_ntrs_to_act 0 rng_ntrs_to_scn 0\r\n"
    "  rng_strt_ndx 0 new_dst_dst_val 0 new_dst_dst_typ 0\r\n"
    "  rul_flsh_sttc 0 rul_flsh_dynmc 0 rul_dst_dst_val 0 rul_dst_dst_typ\r\n"
    "  0 rul_cmpr_dst 0 rul_fid 0 rul_cmpr_fid 0\r\n"
    "  mod 0\r\n"
    "",
    "",                                                                                  
    {BIT(8), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MACT_FLUSH_BLOCK_MACT_FLUSH_BLOCK_RANGE_ENTRIES_TO_SCAN_ID,                                                            
    "rng_ntrs_to_scn",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  range.entries_to_scan:\r\n"
    "  The number of entries to scan.Stop After scanning this number of entries.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mac_lkup flush_block rng_ntrs_to_act 0 rng_ntrs_to_scn 0\r\n"
    "  rng_strt_ndx 0 new_dst_dst_val 0 new_dst_dst_typ 0\r\n"
    "  rul_flsh_sttc 0 rul_flsh_dynmc 0 rul_dst_dst_val 0 rul_dst_dst_typ\r\n"
    "  0 rul_cmpr_dst 0 rul_fid 0 rul_cmpr_fid 0\r\n"
    "  mod 0\r\n"
    "",
    "",                                                                                  
    {BIT(8), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MACT_FLUSH_BLOCK_MACT_FLUSH_BLOCK_RANGE_START_INDX_ID,                                                            
    "rng_strt_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  range.start_indx:\r\n"
    "  The index to start reading from in the MACT\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mac_lkup flush_block rng_ntrs_to_act 0 rng_ntrs_to_scn 0\r\n"
    "  rng_strt_ndx 0 new_dst_dst_val 0 new_dst_dst_typ 0\r\n"
    "  rul_flsh_sttc 0 rul_flsh_dynmc 0 rul_dst_dst_val 0 rul_dst_dst_typ\r\n"
    "  0 rul_cmpr_dst 0 rul_fid 0 rul_cmpr_fid 0\r\n"
    "  mod 0\r\n"
    "",
    "",                                                                                  
    {BIT(8), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MACT_FLUSH_BLOCK_MACT_FLUSH_BLOCK_FLUSH_INFO_NEW_DEST_DEST_VAL_ID,                                                            
    "new_dst_dst_val",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  flush_info.new_dest.dest_val:\r\n"
    "  The destination value, according to the type (Single, RLAG or GLAG,LIF...)For\r\n"
    "  LAG the value is the group ID.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mac_lkup flush_block rng_ntrs_to_act 0 rng_ntrs_to_scn 0\r\n"
    "  rng_strt_ndx 0 new_dst_dst_val 0 new_dst_dst_typ 0\r\n"
    "  rul_flsh_sttc 0 rul_flsh_dynmc 0 rul_dst_dst_val 0 rul_dst_dst_typ\r\n"
    "  0 rul_cmpr_dst 0 rul_fid 0 rul_cmpr_fid 0\r\n"
    "  mod 0\r\n"
    "",
    "",                                                                                  
    {BIT(8), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MACT_FLUSH_BLOCK_MACT_FLUSH_BLOCK_FLUSH_INFO_NEW_DEST_DEST_TYPE_ID,                                                            
    "new_dst_dst_typ",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  flush_info.new_dest.dest_type:\r\n"
    "  The type of the following destination ID\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mac_lkup flush_block rng_ntrs_to_act 0 rng_ntrs_to_scn 0\r\n"
    "  rng_strt_ndx 0 new_dst_dst_val 0 new_dst_dst_typ 0\r\n"
    "  rul_flsh_sttc 0 rul_flsh_dynmc 0 rul_dst_dst_val 0 rul_dst_dst_typ\r\n"
    "  0 rul_cmpr_dst 0 rul_fid 0 rul_cmpr_fid 0\r\n"
    "  mod 0\r\n"
    "",
    "",                                                                                  
    {BIT(8), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MACT_FLUSH_BLOCK_MACT_FLUSH_BLOCK_FLUSH_INFO_RULE_FLUSH_STATIC_ID,                                                            
    "rul_flsh_sttc",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  flush_info.rule.flush_static:\r\n"
    "  If TRUE then both static and dynamic entries match. If FALSE then only\r\n"
    "  dynamic entries are match.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mac_lkup flush_block rng_ntrs_to_act 0 rng_ntrs_to_scn 0\r\n"
    "  rng_strt_ndx 0 new_dst_dst_val 0 new_dst_dst_typ 0\r\n"
    "  rul_flsh_sttc 0 rul_flsh_dynmc 0 rul_dst_dst_val 0 rul_dst_dst_typ\r\n"
    "  0 rul_cmpr_dst 0 rul_fid 0 rul_cmpr_fid 0\r\n"
    "  mod 0\r\n"
    "",
    "",                                                                                  
    {BIT(8), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MACT_FLUSH_BLOCK_MACT_FLUSH_BLOCK_FLUSH_INFO_RULE_DEST_DEST_VAL_ID,                                                            
    "rul_dst_dst_val",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  flush_info.rule.dest.dest_val:\r\n"
    "  The destination value, according to the type (Single, RLAG or GLAG,LIF...)For\r\n"
    "  LAG the value is the group ID.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mac_lkup flush_block rng_ntrs_to_act 0 rng_ntrs_to_scn 0\r\n"
    "  rng_strt_ndx 0 new_dst_dst_val 0 new_dst_dst_typ 0\r\n"
    "  rul_flsh_sttc 0 rul_flsh_dynmc 0 rul_dst_dst_val 0 rul_dst_dst_typ\r\n"
    "  0 rul_cmpr_dst 0 rul_fid 0 rul_cmpr_fid 0\r\n"
    "  mod 0\r\n"
    "",
    "",                                                                                  
    {BIT(8), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MACT_FLUSH_BLOCK_MACT_FLUSH_BLOCK_FLUSH_INFO_RULE_DEST_DEST_TYPE_ID,                                                            
    "rul_dst_dst_typ",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  flush_info.rule.dest.dest_type:\r\n"
    "  The type of the following destination ID\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mac_lkup flush_block rng_ntrs_to_act 0 rng_ntrs_to_scn 0\r\n"
    "  rng_strt_ndx 0 new_dst_dst_val 0 new_dst_dst_typ 0\r\n"
    "  rul_flsh_sttc 0 rul_flsh_dynmc 0 rul_dst_dst_val 0 rul_dst_dst_typ\r\n"
    "  0 rul_cmpr_dst 0 rul_fid 0 rul_cmpr_fid 0\r\n"
    "  mod 0\r\n"
    "",
    "",                                                                                  
    {BIT(8), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MACT_FLUSH_BLOCK_MACT_FLUSH_BLOCK_FLUSH_INFO_RULE_COMPARE_DEST_ID,                                                            
    "rul_cmpr_dst",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  flush_info.rule.compare_dest:\r\n"
    "  Should the destination in the MAC table be compared with the destination in\r\n"
    "  this structure.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mac_lkup flush_block rng_ntrs_to_act 0 rng_ntrs_to_scn 0\r\n"
    "  rng_strt_ndx 0 new_dst_dst_val 0 new_dst_dst_typ 0\r\n"
    "  rul_flsh_sttc 0 rul_flsh_dynmc 0 rul_dst_dst_val 0 rul_dst_dst_typ\r\n"
    "  0 rul_cmpr_dst 0 rul_fid 0 rul_cmpr_fid 0\r\n"
    "  mod 0\r\n"
    "",
    "",                                                                                  
    {BIT(8), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MACT_FLUSH_BLOCK_MACT_FLUSH_BLOCK_FLUSH_INFO_RULE_FID_ID,                                                            
    "rul_fid",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  flush_info.rule.fid:\r\n"
    "  When 'compare_fid' is asserted, the FID in the MACT is compared with this\r\n"
    "  value. \r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mac_lkup flush_block rng_ntrs_to_act 0 rng_ntrs_to_scn 0\r\n"
    "  rng_strt_ndx 0 new_dst_dst_val 0 new_dst_dst_typ 0\r\n"
    "  rul_flsh_sttc 0 rul_flsh_dynmc 0 rul_dst_dst_val 0 rul_dst_dst_typ\r\n"
    "  0 rul_cmpr_dst 0 rul_fid 0 rul_cmpr_fid 0\r\n"
    "  mod 0\r\n"
    "",
    "",                                                                                  
    {BIT(8), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MACT_FLUSH_BLOCK_MACT_FLUSH_BLOCK_FLUSH_INFO_RULE_COMPARE_FID_ID,                                                            
    "rul_cmpr_fid",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  flush_info.rule.compare_fid:\r\n"
    "  Should the FID in the MACT be compared with the FID in this structure\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mac_lkup flush_block rng_ntrs_to_act 0 rng_ntrs_to_scn 0\r\n"
    "  rng_strt_ndx 0 new_dst_dst_val 0 new_dst_dst_typ 0\r\n"
    "  rul_flsh_sttc 0 rul_flsh_dynmc 0 rul_dst_dst_val 0 rul_dst_dst_typ\r\n"
    "  0 rul_cmpr_dst 0 rul_fid 0 rul_cmpr_fid 0\r\n"
    "  mod 0\r\n"
    "",
    "",                                                                                  
    {BIT(8), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MACT_FLUSH_BLOCK_MACT_FLUSH_BLOCK_FLUSH_INFO_MODE_ID,                                                            
    "mod",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  flush_info.mode:\r\n"
    "  MACT flush mode, Clear, Transplant, Clear All, Transplant All.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mac_lkup flush_block rng_ntrs_to_act 0 rng_ntrs_to_scn 0\r\n"
    "  rng_strt_ndx 0 new_dst_dst_val 0 new_dst_dst_typ 0\r\n"
    "  rul_flsh_sttc 0 rul_flsh_dynmc 0 rul_dst_dst_val 0 rul_dst_dst_typ\r\n"
    "  0 rul_cmpr_dst 0 rul_fid 0 rul_cmpr_fid 0\r\n"
    "  mod 0\r\n"
    "",
    "",                                                                                  
    {BIT(8), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MACT_AGING_INFO_SET_MACT_AGING_INFO_SET_ID,                                                            
    "aging_info_set",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Sets the aging info\r\n"
    "  - enable aging\r\n"
    "  - cycle, the time to start traverses the MACT entries for aging.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mac_lkup aging_info_set cycl_nno_sec 0\r\n"
    "  cycl_sec 0 nbl_gng 0\r\n"
    "",
    "",                                                                                  
    {BIT(9), 0, 0, 0},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MACT_AGING_INFO_SET_MACT_AGING_INFO_SET_AGING_INFO_CYCLE_NANO_SEC_ID,                                                            
    "cycl_nno_sec",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  aging_info.cycle.nano_sec:\r\n"
    "  nano-seconds.Range 0-999,999,999\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mac_lkup aging_info_set cycl_nno_sec 0\r\n"
    "  cycl_sec 0 nbl_gng 0\r\n"
    "",
    "",                                                                                  
    {BIT(9), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MACT_AGING_INFO_SET_MACT_AGING_INFO_SET_AGING_INFO_CYCLE_SEC_ID,                                                            
    "cycl_sec",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  aging_info.cycle.sec:\r\n"
    "  seconds\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mac_lkup aging_info_set cycl_nno_sec 0\r\n"
    "  cycl_sec 0 nbl_gng 0\r\n"
    "",
    "",                                                                                  
    {BIT(9), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MACT_AGING_INFO_SET_MACT_AGING_INFO_SET_AGING_INFO_ENABLE_AGING_ID,                                                            
    "nbl_gng",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  aging_info.enable_aging:\r\n"
    "  If TRUE then enable the aging process of the device (aging machine).\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mac_lkup aging_info_set cycl_nno_sec 0\r\n"
    "  cycl_sec 0 nbl_gng 0\r\n"
    "",
    "",                                                                                  
    {BIT(9), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MACT_AGING_INFO_GET_MACT_AGING_INFO_GET_ID,                                                            
    "aging_info_get",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Sets the aging info\r\n"
    "  - enable aging\r\n"
    "  - cycle, the time to start traverses the MACT entries for aging.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mac_lkup aging_info_get\r\n"
    "",
    "",                                                                                  
    {BIT(10), 0, 0, 0},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MACT_EVENT_BUFFER_GET_MACT_EVENT_BUFFER_GET_ID,                                                            
    "event_buffer_get",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Gets from the message FIFO, information regarding the last event in the FIFO\r\n"
    "  including event type and buffer that includes the event information. If the\r\n"
    "  FIFO is empty returns error.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mac_lkup event_buffer_get\r\n"
    "",
    "",                                                                                  
    {BIT(11), 0, 0, 0},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MACT_EVENT_BUFFER_LEARN_PARSE_MACT_EVENT_BUFFER_LEARN_PARSE_ID,                                                            
    "event_buffer_learn_parse",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Parse a buffer to TIMNA_MACT_EVENT_LEARN_INFO struct\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mac_lkup event_buffer_learn_parse bff_0 0\r\n"
    "",
    "",                                                                                  
    {BIT(12), 0, 0, 0},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MACT_EVENT_BUFFER_LEARN_PARSE_MACT_EVENT_BUFFER_LEARN_PARSE_BUFF_0_ID,                                                            
    "bff_0",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  buff[0]:\r\n"
    "  er[TIMNA_MACT_EVNET_BUFFER_SIZE] -\r\n"
    "  Buffer that includes the event information (including the type) \r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mac_lkup event_buffer_learn_parse bff_0 0\r\n"
    "",
    "",                                                                                  
    {BIT(12), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MACT_EVENT_BUFFER_AGE_PARSE_MACT_EVENT_BUFFER_AGE_PARSE_ID,                                                            
    "event_buffer_age_parse",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Parse a buffer to TIMNA_MACT_EVENT_LEARN struct\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mac_lkup event_buffer_age_parse bff_0 0\r\n"
    "",
    "",                                                                                  
    {BIT(13), 0, 0, 0},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MACT_EVENT_BUFFER_AGE_PARSE_MACT_EVENT_BUFFER_AGE_PARSE_BUFF_0_ID,                                                            
    "bff_0",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  buff[0]:\r\n"
    "  er[TIMNA_MACT_EVNET_BUFFER_SIZE] -\r\n"
    "  Buffer that includes the event information (including the type) \r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mac_lkup event_buffer_age_parse bff_0 0\r\n"
    "",
    "",                                                                                  
    {BIT(13), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_API_MAC_LKUP_ID,                                                            
    "mac_lkup",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "",
    "",
    "",                                                                                  
    {BIT(0)|BIT(1)|BIT(2)|BIT(3)|BIT(4)|BIT(5)|BIT(6)|BIT(7)|BIT(8)|BIT(9)|BIT(10)|BIT(11)|BIT(12)|BIT(13), BIT(6)|BIT(7), 0, 0},                                                                              
    1,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
#endif /* } mac_lkup*/
#ifdef UI_TPID/* { tpid*/
  {                                                                                        
    PARAM_TIMNA_TIMNA_TPID_GLOBAL_INFO_SET_GLOBAL_INFO_SET_ID,                                                            
    "global_info_set",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Set the expected TPID values if any for Tags to be used for parsing and\r\n"
    "  identifying these tags in the packet.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api tpid global_info_set glbl_prs_tpds_3 0 glbl_prs_tpds_2 0\r\n"
    "  glbl_prs_tpds_1 0 glbl_prs_tpds_0 0\r\n"
    "",
    "",                                                                                  
    {BIT(14), 0, 0, 0},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_TPID_GLOBAL_INFO_SET_GLOBAL_INFO_SET_GLBL_PARSE_TPIDS_3_ID,                                                            
    "glbl_prs_tpds_3",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  glbl_parse.tpids[3]:\r\n"
    "  Used to identify the presence of a VLAN tags in the Ethernet header.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api tpid global_info_set glbl_prs_tpds_3 0 glbl_prs_tpds_2 0\r\n"
    "  glbl_prs_tpds_1 0 glbl_prs_tpds_0 0\r\n"
    "",
    "",                                                                                  
    {BIT(14), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_TPID_GLOBAL_INFO_SET_GLOBAL_INFO_SET_GLBL_PARSE_TPIDS_2_ID,                                                            
    "glbl_prs_tpds_2",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  glbl_parse.tpids[2]:\r\n"
    "  Used to identify the presence of a VLAN tags in the Ethernet header.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api tpid global_info_set glbl_prs_tpds_3 0 glbl_prs_tpds_2 0\r\n"
    "  glbl_prs_tpds_1 0 glbl_prs_tpds_0 0\r\n"
    "",
    "",                                                                                  
    {BIT(14), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_TPID_GLOBAL_INFO_SET_GLOBAL_INFO_SET_GLBL_PARSE_TPIDS_1_ID,                                                            
    "glbl_prs_tpds_1",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  glbl_parse.tpids[1]:\r\n"
    "  Used to identify the presence of a VLAN tags in the Ethernet header.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api tpid global_info_set glbl_prs_tpds_3 0 glbl_prs_tpds_2 0\r\n"
    "  glbl_prs_tpds_1 0 glbl_prs_tpds_0 0\r\n"
    "",
    "",                                                                                  
    {BIT(14), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_TPID_GLOBAL_INFO_SET_GLOBAL_INFO_SET_GLBL_PARSE_TPIDS_0_ID,                                                            
    "glbl_prs_tpds_0",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  glbl_parse.tpids[0]:\r\n"
    "  Used to identify the presence of a VLAN tags in the Ethernet header.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api tpid global_info_set glbl_prs_tpds_3 0 glbl_prs_tpds_2 0\r\n"
    "  glbl_prs_tpds_1 0 glbl_prs_tpds_0 0\r\n"
    "",
    "",                                                                                  
    {BIT(14), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_TPID_GLOBAL_INFO_GET_GLOBAL_INFO_GET_ID,                                                            
    "global_info_get",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Set the expected TPID values if any for Tags to be used for parsing and\r\n"
    "  identifying these tags in the packet.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api tpid global_info_get\r\n"
    "",
    "",                                                                                  
    {BIT(15), 0, 0, 0},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_TPID_PORT_INFO_SET_PORT_INFO_SET_ID,                                                            
    "port_info_set",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Sets which Tags (are expected in these port.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api tpid port_info_set prt_c_ndx 0 prt_tpd_c_vld 0 prt_s_ndx 0 prt_tpd_s_vld 0 prt_tpd_ndx 0\r\n"
    "",
    "",                                                                                  
    {BIT(16), 0, 0, 0},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_TPID_PORT_INFO_SET_PORT_INFO_SET_PORT_NDX_ID,                                                            
    "prt_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  port_ndx:\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api tpid port_info_set prt_c_ndx 0 prt_tpd_c_vld 0 prt_s_ndx 0 prt_tpd_s_vld 0 prt_tpd_ndx 0\r\n"
    "",
    "",                                                                                  
    {BIT(16), 0, 0, 0},                                                                              
    3,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_TPID_PORT_INFO_SET_PORT_INFO_SET_PORT_TPID1_VALID_ID,                                                            
    "prt_c_tpd_vld",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  port.c_tpid_valid:\r\n"
    "  If TRUE, then the tpid_index is valix.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api tpid port_info_set prt_c_ndx 0 prt_tpd_c_vld 0 prt_s_ndx 0 prt_tpd_s_vld 0 prt_tpd_ndx 0\r\n"
    "",
    "",                                                                                  
    {BIT(16), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_TPID_PORT_INFO_SET_PORT_INFO_SET_PORT_TPID1_INDEX_ID,                                                            
    "prt_c_tpd_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  port.c_tpid_index:\r\n"
    "  The tpid that this port supports, points to one of the four tpids defined in\r\n"
    "  the global function. Range 0-3.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api tpid port_info_set prt_c_ndx 0 prt_tpd_c_vld 0 prt_s_ndx 0 prt_tpd_s_vld 0 prt_tpd_ndx 0\r\n"
    "",
    "",                                                                                  
    {BIT(16), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_TPID_PORT_INFO_SET_PORT_INFO_SET_PORT_TPID2_VALID_ID,                                                            
    "prt_s_tpd_vld",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  port.s_tpid_valid:\r\n"
    "  If TRUE, then the tpid_index is valix.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api tpid port_info_set prt_c_ndx 0 prt_tpd_c_vld 0 prt_s_ndx 0 prt_tpd_s_vld 0 prt_tpd_ndx 0\r\n"
    "",
    "",                                                                                  
    {BIT(16), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_TPID_PORT_INFO_SET_PORT_INFO_SET_PORT_TPID2_INDEX_ID,                                                            
    "prt_s_tpd_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  port.s_tpid_index:\r\n"
    "  The tpid that this port supports, points to one of the four tpids defined in\r\n"
    "  the global function. Range 0-3.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api tpid port_info_set prt_c_ndx 0 prt_tpd_c_vld 0 prt_s_ndx 0 prt_tpd_s_vld 0 prt_tpd_ndx 0\r\n"
    "",
    "",                                                                                  
    {BIT(16), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },   {                                                                                        
    PARAM_TIMNA_TIMNA_TPID_PORT_INFO_GET_PORT_INFO_GET_ID,                                                            
    "port_info_get",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Sets which Tags (are expected in these port.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api tpid port_info_get prt_ndx 0\r\n"
    "",
    "",                                                                                  
    {BIT(17), 0, 0, 0},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_TPID_PORT_INFO_GET_PORT_INFO_GET_PORT_NDX_ID,                                                            
    "prt_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  port_ndx:\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api tpid port_info_get prt_ndx 0\r\n"
    "",
    "",                                                                                  
    {BIT(17), 0, 0, 0},                                                                              
    3,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_API_TPID_ID,                                                            
    "tpid",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "",
    "",
    "",                                                                                  
    {BIT(14)|BIT(15)|BIT(16)|BIT(17), 0, 0, 0},                                                                              
    1,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
#endif /* } tpid*/
#ifdef UI_ETHER_P2P/* { ether_p2p*/
  {                                                                                        
    PARAM_TIMNA_TIMNA_ETHER_P2P_TERMINATION_ENTRY_ADD_ENTRY_ADD_ID,                                                            
    "entry_add",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Add an entry to the to the Ethernet termination table. Keys in this table\r\n"
    "  identify 'my-MAC'. Packet with matching FID and DA, then the Ethernet header\r\n"
    "  is terminated and the packet is processed according to the EtherType.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api ether_p2p entry_add trm_id_ndx 0 fid_vld 0\r\n"
    "  fid 0 mac 0\r\n"
    "",
    "",                                                                                  
    {BIT(18), 0, 0, 0},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ETHER_P2P_TERMINATION_ENTRY_ADD_ENTRY_ADD_TERM_ID_NDX_ID,                                                            
    "trm_id_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  term_id_ndx:\r\n"
    "  the identifier of the added 'My-MAC'.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api ether_p2p entry_add trm_id_ndx 0 fid_vld 0\r\n"
    "  fid 0 mac 0\r\n"
    "",
    "",                                                                                  
    {BIT(18), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ETHER_P2P_TERMINATION_ENTRY_ADD_ENTRY_ADD_TERM_INFO_FID_VALID_ID,                                                            
    "fid_vld",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  term_info.fid_valid:\r\n"
    "  If TRUE then the fid is valid and considered in the key, otherwise it is\r\n"
    "  masked.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api ether_p2p entry_add trm_id_ndx 0 fid_vld 0\r\n"
    "  fid 0 mac 0\r\n"
    "",
    "",                                                                                  
    {BIT(18), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ETHER_P2P_TERMINATION_ENTRY_ADD_ENTRY_ADD_TERM_INFO_FID_ID,                                                            
    "fid",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  term_info.fid:\r\n"
    "  Filtering ID.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api ether_p2p entry_add trm_id_ndx 0 fid_vld 0\r\n"
    "  fid 0 mac 0\r\n"
    "",
    "",                                                                                  
    {BIT(18), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ETHER_P2P_TERMINATION_ENTRY_ADD_ENTRY_ADD_TERM_INFO_MAC_ID,                                                            
    "mac",                                                                       
    (PARAM_VAL_RULES *)&Timna_mac_addr_vals[0],
    (sizeof(Timna_mac_addr_vals) / sizeof(Timna_mac_addr_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,  0,0,0,0,                                                                         
    "  term_info.mac:\r\n"
    "  MAC address\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api ether_p2p entry_add trm_id_ndx 0 fid_vld 0\r\n"
    "  fid 0 mac 0\r\n"
    "",
    "",                                                                                  
    {BIT(18), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ETHER_P2P_TERMINATION_ENTRY_REMOVE_ENTRY_REMOVE_ID,                                                            
    "entry_remove",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Add an entry to the to the Ethernet termination table. Keys in this table\r\n"
    "  identify 'my-MAC'. Packet with matching FID and DA, then the Ethernet header\r\n"
    "  is terminated and the packet is processed according to the EtherType.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api ether_p2p entry_remove trm_id_ndx 0\r\n"
    "",
    "",                                                                                  
    {BIT(19), 0, 0, 0},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ETHER_P2P_TERMINATION_ENTRY_REMOVE_ENTRY_REMOVE_TERM_ID_NDX_ID,                                                            
    "trm_id_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  term_id_ndx:\r\n"
    "  the identifier of the added 'My-MAC' to be removed.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api ether_p2p entry_remove trm_id_ndx 0\r\n"
    "",
    "",                                                                                  
    {BIT(19), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ETHER_P2P_TERMINATION_ENTRY_GET_ENTRY_GET_ID,                                                            
    "entry_get",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Add an entry to the to the Ethernet termination table. Keys in this table\r\n"
    "  identify 'my-MAC'. Packet with matching FID and DA, then the Ethernet header\r\n"
    "  is terminated and the packet is processed according to the EtherType.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api ether_p2p entry_get trm_id_ndx 0\r\n"
    "",
    "",                                                                                  
    {BIT(20), 0, 0, 0},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ETHER_P2P_TERMINATION_ENTRY_GET_ENTRY_GET_TERM_ID_NDX_ID,                                                            
    "trm_id_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  term_id_ndx:\r\n"
    "  the identifier of the 'My-MAC'.SOC_SAND_IN\r\n"
    "  TIMNA_ETHER_P2P_TERMINATION_INFO *term_info -\r\n"
    "  Includes the FID and MAC, to be associated with the given id. RETURN\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api ether_p2p entry_get trm_id_ndx 0\r\n"
    "",
    "",                                                                                  
    {BIT(20), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ETHER_P2P_TERMINATION_TABLE_GET_TABLE_GET_ID,                                                            
    "table_get",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Get the Ethernet termination table. \r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api ether_p2p table_get\r\n"
    "",
    "",                                                                                  
    {BIT(21), 0, 0, 0},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  }, 
  {                                                                                        
    PARAM_TIMNA_TIMNA_ETHER_P2P_EDIT_INFO_SET_EDIT_INFO_SET_ID,                                                            
    "edit_info_set",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Set the edit info (ARP,out-VID) for Ethernet p2p.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api ether_p2p edit_info_set ntry_ndx 0 tagged 0 user_priority\r\n"
    "  0 vid 0 mac 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, BIT(22)},
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ETHER_P2P_EDIT_INFO_SET_EDIT_INFO_SET_ENTRY_NDX_ID,                                                            
    "ntry_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  entry_ndx:\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api ether_p2p edit_info_set ntry_ndx 0 tagged 0 user_priority\r\n"
    "  0 vid 0 mac 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, BIT(22)},
    3,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ETHER_P2P_EDIT_INFO_SET_EDIT_INFO_SET_EDIT_INFO_TAGGED_ID,                                                            
    "tagged",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  edit_info.:\r\n"
    "  Whether to transmit the packet .\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api ether_p2p edit_info_set ntry_ndx 0 tagged 0 user_priority\r\n"
    "  0 vid 0 mac 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, BIT(22)},
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ETHER_P2P_EDIT_INFO_SET_EDIT_INFO_SET_EDIT_INFO_USER_PRIORITY_ID,                                                            
    "user_priority",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  edit_info.user_priority:\r\n"
    "  Vlan ID, to build the out vlan tag.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api ether_p2p edit_info_set ntry_ndx 0 tagged 0 user_priority\r\n"
    "  0 vid 0 mac 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, BIT(22)},
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ETHER_P2P_EDIT_INFO_SET_EDIT_INFO_SET_EDIT_INFO_VID_ID,                                                            
    "vid",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  edit_info.vid:\r\n"
    "  Vlan ID, to build the out vlan tag.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api ether_p2p edit_info_set ntry_ndx 0 tagged 0 user_priority\r\n"
    "  0 vid 0 mac 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, BIT(22)},
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ETHER_P2P_EDIT_INFO_SET_EDIT_INFO_SET_EDIT_INFO_MAC_ID,                                                            
    "mac",                                                                       
    (PARAM_VAL_RULES *)&Timna_mac_addr_vals[0],
    (sizeof(Timna_mac_addr_vals) / sizeof(Timna_mac_addr_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  edit_info.mac:\r\n"
    "  Mac address.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api ether_p2p edit_info_set ntry_ndx 0 tagged 0 user_priority\r\n"
    "  0 vid 0 mac 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, BIT(22)},
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ETHER_P2P_EDIT_INFO_GET_EDIT_INFO_GET_ID,                                                            
    "edit_info_get",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Set the edit info (ARP,out-VID) for Ethernet p2p.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api ether_p2p edit_info_get ntry_ndx 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, BIT(23)},
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ETHER_P2P_EDIT_INFO_GET_EDIT_INFO_GET_ENTRY_NDX_ID,                                                            
    "ntry_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  entry_ndx:\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api ether_p2p edit_info_get ntry_ndx 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, BIT(23)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },    
  {                                                                                        
    PARAM_TIMNA_API_ETHER_P2P_ID,                                                            
    "ether_p2p",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "",
    "",
    "",                                                                                  
    {BIT(18)|BIT(19)|BIT(20)|BIT(21), 0, 0, BIT(22)|BIT(23)},                                                                              
    1,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
#endif /* } ether_p2p*/

#ifdef UI_BRIDGING/* { bridging*/
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_ID,                                                            
    "frwrd_glbl_info_set",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Sets the global information for forwarding actions, to be performed on the\r\n"
    "  packets upon a lookup into the MAC Table. Specify what is the forwarding\r\n"
    "  action parameters of a packet that:\r\n"
    "  - Its SA not found and the forwarding action according to Port Info.\r\n"
    "  - Its DA not found and the forwarding action according to Port Info.\r\n"
    "  - Unicast and its DA not found and the forwarding action according to VSID\r\n"
    "  Info.\r\n"
    "  - Multicast and its DA not found and the forwarding action according to VSID\r\n"
    "  Info.\r\n"
    "  - Its SA was found and the forwarding action is drop.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set\r\n"
    "  da_found_ctrl_plcrs_map_0 0\r\n"
    "  da_found_ntrcpt_plcrs_map_0 0\r\n"
    "  da_found_cpu_cod 0 da_found_cos_prms_DP 0\r\n"
    "  da_found_cos_prms_TC 0 da_found_cos_prms_UP\r\n"
    "  0 da_found_cos_vrwrt 0 sa_found_frwrd_action 0\r\n"
    "  vsi_da_not_found_mc_0_add_vsd_lfg 0\r\n"
    "  vsi_da_not_found_mc_0_policer_ndx 0\r\n"
    "  vsi_da_not_found_mc_0_cpu_cod 0\r\n"
    "  vsi_da_not_found_mc_0_cos_prms_DP 0\r\n"
    "  vsi_da_not_found_mc_0_cos_prms_TC 0\r\n"
    "  vsi_da_not_found_mc_0_cos_prms_UP 0\r\n"
    "  vsi_da_not_found_mc_0_cos_vrwrt 0\r\n"
    "  vsi_da_not_found_mc_0_dst_dst_val 0\r\n"
    "  vsi_da_not_found_mc_0_dst_dst_typ 0\r\n"
    "  vsi_da_not_found_mc_0_frwrd_typ 0\r\n"
    "  vsi_da_not_found_uc_0_add_vsd_lfg ...0\r\n"
    "  port_da_not_found_0_add_vsd_lfg ...0\r\n"
    "  port_sa_not_found_0_add_vsd_lfg... 0\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_DA_FOUND_FRWRD_INFO_CTRL_POLICERS_MAP_2_ID,                                                            
    "da_found_ctrl_plcrs_map_2",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.da_found_frwrd_info.ctrl_policers_map[2]:\r\n"
    "  ctrl_policers_map[i] Specifies which policer should be applied to packet that\r\n"
    "  its DA was looked up and found with entry that the policer_index_ptr is i and\r\n"
    "  forward_type is control. Range 0-3.When zero means no policing.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set\r\n"
    "  da_found_ctrl_plcrs_map_0 0\r\n"
    "  da_found_ntrcpt_plcrs_map_0 0\r\n"
    "  da_found_cpu_cod 0 da_found_cos_prms_DP 0\r\n"
    "  da_found_cos_prms_TC 0 da_found_cos_prms_UP\r\n"
    "  0 da_found_cos_vrwrt 0 sa_found_frwrd_action 0\r\n"
    "  vsi_da_not_found_mc_0_add_vsd_lfg 0\r\n"
    "  vsi_da_not_found_mc_0_policer_ndx 0\r\n"
    "  vsi_da_not_found_mc_0_cpu_cod 0\r\n"
    "  vsi_da_not_found_mc_0_cos_prms_DP 0\r\n"
    "  vsi_da_not_found_mc_0_cos_prms_TC 0\r\n"
    "  vsi_da_not_found_mc_0_cos_prms_UP 0\r\n"
    "  vsi_da_not_found_mc_0_cos_vrwrt 0\r\n"
    "  vsi_da_not_found_mc_0_dst_dst_val 0\r\n"
    "  vsi_da_not_found_mc_0_dst_dst_typ 0\r\n"
    "  vsi_da_not_found_mc_0_frwrd_typ 0\r\n"
    "  vsi_da_not_found_uc_0_add_vsd_lfg ...0\r\n"
    "  port_da_not_found_0_add_vsd_lfg ...0\r\n"
    "  port_sa_not_found_0_add_vsd_lfg... 0\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_DA_FOUND_FRWRD_INFO_CTRL_POLICERS_MAP_1_ID,                                                            
    "da_found_ctrl_plcrs_map_1",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.da_found_frwrd_info.ctrl_policers_map[1]:\r\n"
    "  ctrl_policers_map[i] Specifies which policer should be applied to packet that\r\n"
    "  its DA was looked up and found with entry that the policer_index_ptr is i and\r\n"
    "  forward_type is control. Range 0-3.When zero means no policing.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set\r\n"
    "  da_found_ctrl_plcrs_map_0 0\r\n"
    "  da_found_ntrcpt_plcrs_map_0 0\r\n"
    "  da_found_cpu_cod 0 da_found_cos_prms_DP 0\r\n"
    "  da_found_cos_prms_TC 0 da_found_cos_prms_UP\r\n"
    "  0 da_found_cos_vrwrt 0 sa_found_frwrd_action 0\r\n"
    "  vsi_da_not_found_mc_0_add_vsd_lfg 0\r\n"
    "  vsi_da_not_found_mc_0_policer_ndx 0\r\n"
    "  vsi_da_not_found_mc_0_cpu_cod 0\r\n"
    "  vsi_da_not_found_mc_0_cos_prms_DP 0\r\n"
    "  vsi_da_not_found_mc_0_cos_prms_TC 0\r\n"
    "  vsi_da_not_found_mc_0_cos_prms_UP 0\r\n"
    "  vsi_da_not_found_mc_0_cos_vrwrt 0\r\n"
    "  vsi_da_not_found_mc_0_dst_dst_val 0\r\n"
    "  vsi_da_not_found_mc_0_dst_dst_typ 0\r\n"
    "  vsi_da_not_found_mc_0_frwrd_typ 0\r\n"
    "  vsi_da_not_found_uc_0_add_vsd_lfg ...0\r\n"
    "  port_da_not_found_0_add_vsd_lfg ...0\r\n"
    "  port_sa_not_found_0_add_vsd_lfg... 0\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_DA_FOUND_FRWRD_INFO_CTRL_POLICERS_MAP_0_ID,                                                            
    "da_found_ctrl_plcrs_map_0",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.da_found_frwrd_info.ctrl_policers_map[0]:\r\n"
    "  ctrl_policers_map[i] Specifies which policer should be applied to packet that\r\n"
    "  its DA was looked up and found with entry that the policer_index_ptr is i and\r\n"
    "  forward_type is control. Range 0-3.When zero means no policing.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_DA_FOUND_FRWRD_INFO_INTERCEPT_POLICERS_MAP_2_ID,                                                            
    "da_found_ntrcpt_plcrs_map_2",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.da_found_frwrd_info.intercept_policers_map[2]:\r\n"
    "  intercept_policers_map[i] Specifies which policer should be applied to packet\r\n"
    "  that its DA was looked up and found with entry that the policer_index_ptr is\r\n"
    "  i and forward_type is intercept. Range 0-3.When zero means no policing.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_DA_FOUND_FRWRD_INFO_INTERCEPT_POLICERS_MAP_1_ID,                                                            
    "da_found_ntrcpt_plcrs_map_1",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.da_found_frwrd_info.intercept_policers_map[1]:\r\n"
    "  intercept_policers_map[i] Specifies which policer should be applied to packet\r\n"
    "  that its DA was looked up and found with entry that the policer_index_ptr is\r\n"
    "  i and forward_type is intercept. Range 0-3.When zero means no policing.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },

  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_DA_FOUND_FRWRD_INFO_INTERCEPT_POLICERS_MAP_0_ID,                                                            
    "da_found_ntrcpt_plcrs_map_0",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.da_found_frwrd_info.intercept_policers_map[0]:\r\n"
    "  intercept_policers_map[i] Specifies which policer should be applied to packet\r\n"
    "  that its DA was looked up and found with entry that the policer_index_ptr is\r\n"
    "  i and forward_type is intercept. Range 0-3.When zero means no policing.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_DA_FOUND_FRWRD_INFO_CPU_CODE_ID,                                                            
    "da_found_cpu_cod",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.da_found_frwrd_info.cpu_code:\r\n"
    "  Forwarding CPU Code. Used in case a DA was found in the MAC Table.Range\r\n"
    "  0-1023.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_DA_FOUND_FRWRD_INFO_COS_PARAMS_DP_ID,                                                            
    "da_found_cos_prms_DP",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.da_found_frwrd_info.cos_params.DP:\r\n"
    "  Drop precedenceRange 0-3.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_DA_FOUND_FRWRD_INFO_COS_PARAMS_TC_ID,                                                            
    "da_found_cos_prms_TC",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.da_found_frwrd_info.cos_params.TC:\r\n"
    "  Traffic ClassRange 0-7.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_DA_FOUND_FRWRD_INFO_COS_PARAMS_UP_ID,                                                            
    "da_found_cos_prms_UP",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.da_found_frwrd_info.cos_params.UP:\r\n"
    "  User PriorityRange 0-7.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_DA_FOUND_FRWRD_INFO_COS_OVERWRITE_ID,                                                            
    "da_found_cos_vrwrt",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.da_found_frwrd_info.cos_overwrite:\r\n"
    "  If set then the CoS parameters should be replaced when this condition is\r\n"
    "  selected\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_SA_FOUND_FRWRD_INFO_FRWRD_ACTION_ID,                                                            
    "sa_found_frwrd_action",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.sa_found_frwrd_info.frwrd_action:\r\n"
    "  The forwarding action in case that a MAC source address was found in the MAC\r\n"
    "  table and the command to the entry was 'drop'. Since the destination is\r\n"
    "  'Drop-Destination' only the drop-strength is need to be configured\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  #ifdef UI_BRIDGING_FULL 
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_VSIDS_INFO_DA_NOT_FOUND_MC_3_ADD_VSID_LIFG_ID,                                                            
    "vsi_da_not_found_mc_3_add_vsd_lfg",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.vsids_info.da_not_found_mc[3].add_vsid_lifg:\r\n"
    "  If TRUE, the VSID lif group is added to the destination. In case it's TRUE\r\n"
    "  then the Destination of the forwarding action must be a multicast. \r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_VSIDS_INFO_DA_NOT_FOUND_MC_3_POLICER_INDEX_ID,                                                            
    "vsi_da_not_found_mc_3_policer_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.vsids_info.da_not_found_mc[3].policer_index:\r\n"
    "  Specifies which policer should be applied to this packet.(which may change\r\n"
    "  the packets drop precedence)0 - Means No policer should be applied to the\r\n"
    "  packetRange 0-3.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_VSIDS_INFO_DA_NOT_FOUND_MC_3_CPU_CODE_ID,                                                            
    "vsi_da_not_found_mc_3_cpu_cod",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.vsids_info.da_not_found_mc[3].cpu_code:\r\n"
    "  Forwarding CPU CodeRange 0-1023\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_VSIDS_INFO_DA_NOT_FOUND_MC_3_COS_PARAMS_DP_ID,                                                            
    "vsi_da_not_found_mc_3_cos_prms_DP",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.vsids_info.da_not_found_mc[3].cos_params.DP:\r\n"
    "  Drop precedenceRange 0-3.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_VSIDS_INFO_DA_NOT_FOUND_MC_3_COS_PARAMS_TC_ID,                                                            
    "vsi_da_not_found_mc_3_cos_prms_TC",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.vsids_info.da_not_found_mc[3].cos_params.TC:\r\n"
    "  Traffic ClassRange 0-7.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_VSIDS_INFO_DA_NOT_FOUND_MC_3_COS_PARAMS_UP_ID,                                                            
    "vsi_da_not_found_mc_3_cos_prms_UP",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.vsids_info.da_not_found_mc[3].cos_params.UP:\r\n"
    "  User PriorityRange 0-7.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_VSIDS_INFO_DA_NOT_FOUND_MC_3_COS_OVERWRITE_ID,                                                            
    "vsi_da_not_found_mc_3_cos_vrwrt",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.vsids_info.da_not_found_mc[3].cos_overwrite:\r\n"
    "  If set then the CoS parameters should be replaced when this condition is\r\n"
    "  selected\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_VSIDS_INFO_DA_NOT_FOUND_MC_3_DEST_DEST_VAL_ID,                                                            
    "vsi_da_not_found_mc_3_dst_dst_val",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.vsids_info.da_not_found_mc[3].dest.dest_val:\r\n"
    "  The destination value, according to the type (Single, RLAG or GLAG,LIF...)For\r\n"
    "  LAG the value is the group ID.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_VSIDS_INFO_DA_NOT_FOUND_MC_3_DEST_DEST_TYPE_ID,                                                            
    "vsi_da_not_found_mc_3_dst_dst_typ",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.vsids_info.da_not_found_mc[3].dest.dest_type:\r\n"
    "  The type of the following destination ID\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_VSIDS_INFO_DA_NOT_FOUND_MC_3_FORWARD_TYPE_ID,                                                            
    "vsi_da_not_found_mc_3_frwrd_typ",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.vsids_info.da_not_found_mc[3].forward_type:\r\n"
    "  The forwarding action type.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_VSIDS_INFO_DA_NOT_FOUND_MC_2_ADD_VSID_LIFG_ID,                                                            
    "vsi_da_not_found_mc_2_add_vsd_lfg",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.vsids_info.da_not_found_mc[2].add_vsid_lifg:\r\n"
    "  If TRUE, the VSID lif group is added to the destination. In case it's TRUE\r\n"
    "  then the Destination of the forwarding action must be a multicast. \r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_VSIDS_INFO_DA_NOT_FOUND_MC_2_POLICER_INDEX_ID,                                                            
    "vsi_da_not_found_mc_2_policer_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.vsids_info.da_not_found_mc[2].policer_index:\r\n"
    "  Specifies which policer should be applied to this packet.(which may change\r\n"
    "  the packets drop precedence)0 - Means No policer should be applied to the\r\n"
    "  packetRange 0-3.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_VSIDS_INFO_DA_NOT_FOUND_MC_2_CPU_CODE_ID,                                                            
    "vsi_da_not_found_mc_2_cpu_cod",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.vsids_info.da_not_found_mc[2].cpu_code:\r\n"
    "  Forwarding CPU CodeRange 0-1023\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_VSIDS_INFO_DA_NOT_FOUND_MC_2_COS_PARAMS_DP_ID,                                                            
    "vsi_da_not_found_mc_2_cos_prms_DP",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.vsids_info.da_not_found_mc[2].cos_params.DP:\r\n"
    "  Drop precedenceRange 0-3.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_VSIDS_INFO_DA_NOT_FOUND_MC_2_COS_PARAMS_TC_ID,                                                            
    "vsi_da_not_found_mc_2_cos_prms_TC",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.vsids_info.da_not_found_mc[2].cos_params.TC:\r\n"
    "  Traffic ClassRange 0-7.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_VSIDS_INFO_DA_NOT_FOUND_MC_2_COS_PARAMS_UP_ID,                                                            
    "vsi_da_not_found_mc_2_cos_prms_UP",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.vsids_info.da_not_found_mc[2].cos_params.UP:\r\n"
    "  User PriorityRange 0-7.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_VSIDS_INFO_DA_NOT_FOUND_MC_2_COS_OVERWRITE_ID,                                                            
    "vsi_da_not_found_mc_2_cos_vrwrt",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.vsids_info.da_not_found_mc[2].cos_overwrite:\r\n"
    "  If set then the CoS parameters should be replaced when this condition is\r\n"
    "  selected\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_VSIDS_INFO_DA_NOT_FOUND_MC_2_DEST_DEST_VAL_ID,                                                            
    "vsi_da_not_found_mc_2_dst_dst_val",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.vsids_info.da_not_found_mc[2].dest.dest_val:\r\n"
    "  The destination value, according to the type (Single, RLAG or GLAG,LIF...)For\r\n"
    "  LAG the value is the group ID.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_VSIDS_INFO_DA_NOT_FOUND_MC_2_DEST_DEST_TYPE_ID,                                                            
    "vsi_da_not_found_mc_2_dst_dst_typ",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.vsids_info.da_not_found_mc[2].dest.dest_type:\r\n"
    "  The type of the following destination ID\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_VSIDS_INFO_DA_NOT_FOUND_MC_2_FORWARD_TYPE_ID,                                                            
    "vsi_da_not_found_mc_2_frwrd_typ",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.vsids_info.da_not_found_mc[2].forward_type:\r\n"
    "  The forwarding action type.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_VSIDS_INFO_DA_NOT_FOUND_MC_1_ADD_VSID_LIFG_ID,                                                            
    "vsi_da_not_found_mc_1_add_vsd_lfg",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.vsids_info.da_not_found_mc[1].add_vsid_lifg:\r\n"
    "  If TRUE, the VSID lif group is added to the destination. In case it's TRUE\r\n"
    "  then the Destination of the forwarding action must be a multicast. \r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_VSIDS_INFO_DA_NOT_FOUND_MC_1_POLICER_INDEX_ID,                                                            
    "vsi_da_not_found_mc_1_policer_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.vsids_info.da_not_found_mc[1].policer_index:\r\n"
    "  Specifies which policer should be applied to this packet.(which may change\r\n"
    "  the packets drop precedence)0 - Means No policer should be applied to the\r\n"
    "  packetRange 0-3.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_VSIDS_INFO_DA_NOT_FOUND_MC_1_CPU_CODE_ID,                                                            
    "vsi_da_not_found_mc_1_cpu_cod",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.vsids_info.da_not_found_mc[1].cpu_code:\r\n"
    "  Forwarding CPU CodeRange 0-1023\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_VSIDS_INFO_DA_NOT_FOUND_MC_1_COS_PARAMS_DP_ID,                                                            
    "vsi_da_not_found_mc_1_cos_prms_DP",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.vsids_info.da_not_found_mc[1].cos_params.DP:\r\n"
    "  Drop precedenceRange 0-3.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_VSIDS_INFO_DA_NOT_FOUND_MC_1_COS_PARAMS_TC_ID,                                                            
    "vsi_da_not_found_mc_1_cos_prms_TC",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.vsids_info.da_not_found_mc[1].cos_params.TC:\r\n"
    "  Traffic ClassRange 0-7.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_VSIDS_INFO_DA_NOT_FOUND_MC_1_COS_PARAMS_UP_ID,                                                            
    "vsi_da_not_found_mc_1_cos_prms_UP",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.vsids_info.da_not_found_mc[1].cos_params.UP:\r\n"
    "  User PriorityRange 0-7.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_VSIDS_INFO_DA_NOT_FOUND_MC_1_COS_OVERWRITE_ID,                                                            
    "vsi_da_not_found_mc_1_cos_vrwrt",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.vsids_info.da_not_found_mc[1].cos_overwrite:\r\n"
    "  If set then the CoS parameters should be replaced when this condition is\r\n"
    "  selected\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_VSIDS_INFO_DA_NOT_FOUND_MC_1_DEST_DEST_VAL_ID,                                                            
    "vsi_da_not_found_mc_1_dst_dst_val",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.vsids_info.da_not_found_mc[1].dest.dest_val:\r\n"
    "  The destination value, according to the type (Single, RLAG or GLAG,LIF...)For\r\n"
    "  LAG the value is the group ID.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_VSIDS_INFO_DA_NOT_FOUND_MC_1_DEST_DEST_TYPE_ID,                                                            
    "vsi_da_not_found_mc_1_dst_dst_typ",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.vsids_info.da_not_found_mc[1].dest.dest_type:\r\n"
    "  The type of the following destination ID\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_VSIDS_INFO_DA_NOT_FOUND_MC_1_FORWARD_TYPE_ID,                                                            
    "vsi_da_not_found_mc_1_frwrd_typ",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.vsids_info.da_not_found_mc[1].forward_type:\r\n"
    "  The forwarding action type.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  

  #endif /*UI_BRIDGING_FULL */
   {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_VSIDS_INFO_DA_NOT_FOUND_MC_0_ADD_VSID_LIFG_ID,                                                            
    "vsi_da_not_found_mc_0_add_vsd_lfg",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.vsids_info.da_not_found_mc[0].add_vsid_lifg:\r\n"
    "  If TRUE, the VSID lif group is added to the destination. In case it's TRUE\r\n"
    "  then the Destination of the forwarding action must be a multicast. \r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_VSIDS_INFO_DA_NOT_FOUND_MC_0_POLICER_INDEX_ID,                                                            
    "vsi_da_not_found_mc_0_policer_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.vsids_info.da_not_found_mc[0].policer_index:\r\n"
    "  Specifies which policer should be applied to this packet.(which may change\r\n"
    "  the packets drop precedence)0 - Means No policer should be applied to the\r\n"
    "  packetRange 0-3.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_VSIDS_INFO_DA_NOT_FOUND_MC_0_CPU_CODE_ID,                                                            
    "vsi_da_not_found_mc_0_cpu_cod",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.vsids_info.da_not_found_mc[0].cpu_code:\r\n"
    "  Forwarding CPU CodeRange 0-1023\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_VSIDS_INFO_DA_NOT_FOUND_MC_0_COS_PARAMS_DP_ID,                                                            
    "vsi_da_not_found_mc_0_cos_prms_DP",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.vsids_info.da_not_found_mc[0].cos_params.DP:\r\n"
    "  Drop precedenceRange 0-3.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_VSIDS_INFO_DA_NOT_FOUND_MC_0_COS_PARAMS_TC_ID,                                                            
    "vsi_da_not_found_mc_0_cos_prms_TC",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.vsids_info.da_not_found_mc[0].cos_params.TC:\r\n"
    "  Traffic ClassRange 0-7.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_VSIDS_INFO_DA_NOT_FOUND_MC_0_COS_PARAMS_UP_ID,                                                            
    "vsi_da_not_found_mc_0_cos_prms_UP",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.vsids_info.da_not_found_mc[0].cos_params.UP:\r\n"
    "  User PriorityRange 0-7.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_VSIDS_INFO_DA_NOT_FOUND_MC_0_COS_OVERWRITE_ID,                                                            
    "vsi_da_not_found_mc_0_cos_vrwrt",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.vsids_info.da_not_found_mc[0].cos_overwrite:\r\n"
    "  If set then the CoS parameters should be replaced when this condition is\r\n"
    "  selected\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_VSIDS_INFO_DA_NOT_FOUND_MC_0_DEST_DEST_VAL_ID,                                                            
    "vsi_da_not_found_mc_0_dst_dst_val",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.vsids_info.da_not_found_mc[0].dest.dest_val:\r\n"
    "  The destination value, according to the type (Single, RLAG or GLAG,LIF...)For\r\n"
    "  LAG the value is the group ID.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_VSIDS_INFO_DA_NOT_FOUND_MC_0_DEST_DEST_TYPE_ID,                                                            
    "vsi_da_not_found_mc_0_dst_dst_typ",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.vsids_info.da_not_found_mc[0].dest.dest_type:\r\n"
    "  The type of the following destination ID\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_VSIDS_INFO_DA_NOT_FOUND_MC_0_FORWARD_TYPE_ID,                                                            
    "vsi_da_not_found_mc_0_frwrd_typ",                                                                       
    (PARAM_VAL_RULES *)&SOC_SAND_PP_FRWRD_ACTION_TYPE_rule[0],                                            
    (sizeof(SOC_SAND_PP_FRWRD_ACTION_TYPE_rule) / sizeof(SOC_SAND_PP_FRWRD_ACTION_TYPE_rule[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.vsids_info.da_not_found_mc[0].forward_type:\r\n"
    "  The forwarding action type.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  #ifdef UI_BRIDGING_FULL
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_VSIDS_INFO_DA_NOT_FOUND_UC_3_ADD_VSID_LIFG_ID,                                                            
    "vsi_da_not_found_uc_3_add_vsd_lfg",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.vsids_info.da_not_found_uc[3].add_vsid_lifg:\r\n"
    "  If TRUE, the VSID lif group is added to the destination. In case it's TRUE\r\n"
    "  then the Destination of the forwarding action must be a multicast. \r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_VSIDS_INFO_DA_NOT_FOUND_UC_3_POLICER_INDEX_ID,                                                            
    "vsi_da_not_found_uc_3_policer_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.vsids_info.da_not_found_uc[3].policer_index:\r\n"
    "  Specifies which policer should be applied to this packet.(which may change\r\n"
    "  the packets drop precedence)0 - Means No policer should be applied to the\r\n"
    "  packetRange 0-3.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_VSIDS_INFO_DA_NOT_FOUND_UC_3_CPU_CODE_ID,                                                            
    "vsi_da_not_found_uc_3_cpu_cod",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.vsids_info.da_not_found_uc[3].cpu_code:\r\n"
    "  Forwarding CPU CodeRange 0-1023\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_VSIDS_INFO_DA_NOT_FOUND_UC_3_COS_PARAMS_DP_ID,                                                            
    "vsi_da_not_found_uc_3_cos_prms_DP",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.vsids_info.da_not_found_uc[3].cos_params.DP:\r\n"
    "  Drop precedenceRange 0-3.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_VSIDS_INFO_DA_NOT_FOUND_UC_3_COS_PARAMS_TC_ID,                                                            
    "vsi_da_not_found_uc_3_cos_prms_TC",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.vsids_info.da_not_found_uc[3].cos_params.TC:\r\n"
    "  Traffic ClassRange 0-7.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_VSIDS_INFO_DA_NOT_FOUND_UC_3_COS_PARAMS_UP_ID,                                                            
    "vsi_da_not_found_uc_3_cos_prms_UP",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.vsids_info.da_not_found_uc[3].cos_params.UP:\r\n"
    "  User PriorityRange 0-7.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_VSIDS_INFO_DA_NOT_FOUND_UC_3_COS_OVERWRITE_ID,                                                            
    "vsi_da_not_found_uc_3_cos_vrwrt",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.vsids_info.da_not_found_uc[3].cos_overwrite:\r\n"
    "  If set then the CoS parameters should be replaced when this condition is\r\n"
    "  selected\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_VSIDS_INFO_DA_NOT_FOUND_UC_3_DEST_DEST_VAL_ID,                                                            
    "vsi_da_not_found_uc_3_dst_dst_val",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.vsids_info.da_not_found_uc[3].dest.dest_val:\r\n"
    "  The destination value, according to the type (Single, RLAG or GLAG,LIF...)For\r\n"
    "  LAG the value is the group ID.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_VSIDS_INFO_DA_NOT_FOUND_UC_3_DEST_DEST_TYPE_ID,                                                            
    "vsi_da_not_found_uc_3_dst_dst_typ",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.vsids_info.da_not_found_uc[3].dest.dest_type:\r\n"
    "  The type of the following destination ID\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_VSIDS_INFO_DA_NOT_FOUND_UC_3_FORWARD_TYPE_ID,                                                            
    "vsi_da_not_found_uc_3_frwrd_typ",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.vsids_info.da_not_found_uc[3].forward_type:\r\n"
    "  The forwarding action type.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_VSIDS_INFO_DA_NOT_FOUND_UC_2_ADD_VSID_LIFG_ID,                                                            
    "vsi_da_not_found_uc_2_add_vsd_lfg",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.vsids_info.da_not_found_uc[2].add_vsid_lifg:\r\n"
    "  If TRUE, the VSID lif group is added to the destination. In case it's TRUE\r\n"
    "  then the Destination of the forwarding action must be a multicast. \r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_VSIDS_INFO_DA_NOT_FOUND_UC_2_POLICER_INDEX_ID,                                                            
    "vsi_da_not_found_uc_2_policer_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.vsids_info.da_not_found_uc[2].policer_index:\r\n"
    "  Specifies which policer should be applied to this packet.(which may change\r\n"
    "  the packets drop precedence)0 - Means No policer should be applied to the\r\n"
    "  packetRange 0-3.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_VSIDS_INFO_DA_NOT_FOUND_UC_2_CPU_CODE_ID,                                                            
    "vsi_da_not_found_uc_2_cpu_cod",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.vsids_info.da_not_found_uc[2].cpu_code:\r\n"
    "  Forwarding CPU CodeRange 0-1023\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_VSIDS_INFO_DA_NOT_FOUND_UC_2_COS_PARAMS_DP_ID,                                                            
    "vsi_da_not_found_uc_2_cos_prms_DP",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.vsids_info.da_not_found_uc[2].cos_params.DP:\r\n"
    "  Drop precedenceRange 0-3.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_VSIDS_INFO_DA_NOT_FOUND_UC_2_COS_PARAMS_TC_ID,                                                            
    "vsi_da_not_found_uc_2_cos_prms_TC",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.vsids_info.da_not_found_uc[2].cos_params.TC:\r\n"
    "  Traffic ClassRange 0-7.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_VSIDS_INFO_DA_NOT_FOUND_UC_2_COS_PARAMS_UP_ID,                                                            
    "vsi_da_not_found_uc_2_cos_prms_UP",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.vsids_info.da_not_found_uc[2].cos_params.UP:\r\n"
    "  User PriorityRange 0-7.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_VSIDS_INFO_DA_NOT_FOUND_UC_2_COS_OVERWRITE_ID,                                                            
    "vsi_da_not_found_uc_2_cos_vrwrt",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.vsids_info.da_not_found_uc[2].cos_overwrite:\r\n"
    "  If set then the CoS parameters should be replaced when this condition is\r\n"
    "  selected\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_VSIDS_INFO_DA_NOT_FOUND_UC_2_DEST_DEST_VAL_ID,                                                            
    "vsi_da_not_found_uc_2_dst_dst_val",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.vsids_info.da_not_found_uc[2].dest.dest_val:\r\n"
    "  The destination value, according to the type (Single, RLAG or GLAG,LIF...)For\r\n"
    "  LAG the value is the group ID.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_VSIDS_INFO_DA_NOT_FOUND_UC_2_DEST_DEST_TYPE_ID,                                                            
    "vsi_da_not_found_uc_2_dst_dst_typ",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.vsids_info.da_not_found_uc[2].dest.dest_type:\r\n"
    "  The type of the following destination ID\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_VSIDS_INFO_DA_NOT_FOUND_UC_2_FORWARD_TYPE_ID,                                                            
    "vsi_da_not_found_uc_2_frwrd_typ",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.vsids_info.da_not_found_uc[2].forward_type:\r\n"
    "  The forwarding action type.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_VSIDS_INFO_DA_NOT_FOUND_UC_1_ADD_VSID_LIFG_ID,                                                            
    "vsi_da_not_found_uc_1_add_vsd_lfg",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.vsids_info.da_not_found_uc[1].add_vsid_lifg:\r\n"
    "  If TRUE, the VSID lif group is added to the destination. In case it's TRUE\r\n"
    "  then the Destination of the forwarding action must be a multicast. \r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_VSIDS_INFO_DA_NOT_FOUND_UC_1_POLICER_INDEX_ID,                                                            
    "vsi_da_not_found_uc_1_policer_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.vsids_info.da_not_found_uc[1].policer_index:\r\n"
    "  Specifies which policer should be applied to this packet.(which may change\r\n"
    "  the packets drop precedence)0 - Means No policer should be applied to the\r\n"
    "  packetRange 0-3.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_VSIDS_INFO_DA_NOT_FOUND_UC_1_CPU_CODE_ID,                                                            
    "vsi_da_not_found_uc_1_cpu_cod",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.vsids_info.da_not_found_uc[1].cpu_code:\r\n"
    "  Forwarding CPU CodeRange 0-1023\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_VSIDS_INFO_DA_NOT_FOUND_UC_1_COS_PARAMS_DP_ID,                                                            
    "vsi_da_not_found_uc_1_cos_prms_DP",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.vsids_info.da_not_found_uc[1].cos_params.DP:\r\n"
    "  Drop precedenceRange 0-3.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_VSIDS_INFO_DA_NOT_FOUND_UC_1_COS_PARAMS_TC_ID,                                                            
    "vsi_da_not_found_uc_1_cos_prms_TC",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.vsids_info.da_not_found_uc[1].cos_params.TC:\r\n"
    "  Traffic ClassRange 0-7.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_VSIDS_INFO_DA_NOT_FOUND_UC_1_COS_PARAMS_UP_ID,                                                            
    "vsi_da_not_found_uc_1_cos_prms_UP",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.vsids_info.da_not_found_uc[1].cos_params.UP:\r\n"
    "  User PriorityRange 0-7.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_VSIDS_INFO_DA_NOT_FOUND_UC_1_COS_OVERWRITE_ID,                                                            
    "vsi_da_not_found_uc_1_cos_vrwrt",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.vsids_info.da_not_found_uc[1].cos_overwrite:\r\n"
    "  If set then the CoS parameters should be replaced when this condition is\r\n"
    "  selected\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_VSIDS_INFO_DA_NOT_FOUND_UC_1_DEST_DEST_VAL_ID,                                                            
    "vsi_da_not_found_uc_1_dst_dst_val",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.vsids_info.da_not_found_uc[1].dest.dest_val:\r\n"
    "  The destination value, according to the type (Single, RLAG or GLAG,LIF...)For\r\n"
    "  LAG the value is the group ID.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_VSIDS_INFO_DA_NOT_FOUND_UC_1_DEST_DEST_TYPE_ID,                                                            
    "vsi_da_not_found_uc_1_dst_dst_typ",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.vsids_info.da_not_found_uc[1].dest.dest_type:\r\n"
    "  The type of the following destination ID\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_VSIDS_INFO_DA_NOT_FOUND_UC_1_FORWARD_TYPE_ID,                                                            
    "vsi_da_not_found_uc_1_frwrd_typ",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.vsids_info.da_not_found_uc[1].forward_type:\r\n"
    "  The forwarding action type.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
#endif /*UI_BRIDGING_FULL */
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_VSIDS_INFO_DA_NOT_FOUND_UC_0_ADD_VSID_LIFG_ID,                                                            
    "vsi_da_not_found_uc_0_add_vsd_lfg",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.vsids_info.da_not_found_uc[0].add_vsid_lifg:\r\n"
    "  If TRUE, the VSID lif group is added to the destination. In case it's TRUE\r\n"
    "  then the Destination of the forwarding action must be a multicast. \r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_VSIDS_INFO_DA_NOT_FOUND_UC_0_POLICER_INDEX_ID,                                                            
    "vsi_da_not_found_uc_0_policer_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.vsids_info.da_not_found_uc[0].policer_index:\r\n"
    "  Specifies which policer should be applied to this packet.(which may change\r\n"
    "  the packets drop precedence)0 - Means No policer should be applied to the\r\n"
    "  packetRange 0-3.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_VSIDS_INFO_DA_NOT_FOUND_UC_0_CPU_CODE_ID,                                                            
    "vsi_da_not_found_uc_0_cpu_cod",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.vsids_info.da_not_found_uc[0].cpu_code:\r\n"
    "  Forwarding CPU CodeRange 0-1023\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_VSIDS_INFO_DA_NOT_FOUND_UC_0_COS_PARAMS_DP_ID,                                                            
    "vsi_da_not_found_uc_0_cos_prms_DP",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.vsids_info.da_not_found_uc[0].cos_params.DP:\r\n"
    "  Drop precedenceRange 0-3.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_VSIDS_INFO_DA_NOT_FOUND_UC_0_COS_PARAMS_TC_ID,                                                            
    "vsi_da_not_found_uc_0_cos_prms_TC",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.vsids_info.da_not_found_uc[0].cos_params.TC:\r\n"
    "  Traffic ClassRange 0-7.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_VSIDS_INFO_DA_NOT_FOUND_UC_0_COS_PARAMS_UP_ID,                                                            
    "vsi_da_not_found_uc_0_cos_prms_UP",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.vsids_info.da_not_found_uc[0].cos_params.UP:\r\n"
    "  User PriorityRange 0-7.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_VSIDS_INFO_DA_NOT_FOUND_UC_0_COS_OVERWRITE_ID,                                                            
    "vsi_da_not_found_uc_0_cos_vrwrt",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.vsids_info.da_not_found_uc[0].cos_overwrite:\r\n"
    "  If set then the CoS parameters should be replaced when this condition is\r\n"
    "  selected\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_VSIDS_INFO_DA_NOT_FOUND_UC_0_DEST_DEST_VAL_ID,                                                            
    "vsi_da_not_found_uc_0_dst_dst_val",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.vsids_info.da_not_found_uc[0].dest.dest_val:\r\n"
    "  The destination value, according to the type (Single, RLAG or GLAG,LIF...)For\r\n"
    "  LAG the value is the group ID.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_VSIDS_INFO_DA_NOT_FOUND_UC_0_DEST_DEST_TYPE_ID,                                                            
    "vsi_da_not_found_uc_0_dst_dst_typ",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.vsids_info.da_not_found_uc[0].dest.dest_type:\r\n"
    "  The type of the following destination ID\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_VSIDS_INFO_DA_NOT_FOUND_UC_0_FORWARD_TYPE_ID,                                                            
    "vsi_da_not_found_uc_0_frwrd_typ",                                                                       
    (PARAM_VAL_RULES *)&SOC_SAND_PP_FRWRD_ACTION_TYPE_rule[0],                                            
    (sizeof(SOC_SAND_PP_FRWRD_ACTION_TYPE_rule) / sizeof(SOC_SAND_PP_FRWRD_ACTION_TYPE_rule[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.vsids_info.da_not_found_uc[0].forward_type:\r\n"
    "  The forwarding action type.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
#ifdef UI_BRIDGING_FULL 
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_PORTS_INFO_DA_NOT_FOUND_3_ADD_VSID_LIFG_ID,                                                            
    "ports_da_not_found_3_add_vsd_lfg",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.ports_info.da_not_found[3].add_vsid_lifg:\r\n"
    "  If TRUE, the VSID lif group is added to the destination. In case it's TRUE\r\n"
    "  then the Destination of the forwarding action must be a multicast. \r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_PORTS_INFO_DA_NOT_FOUND_3_POLICER_INDEX_ID,                                                            
    "ports_da_not_found_3_policer_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.ports_info.da_not_found[3].policer_index:\r\n"
    "  Specifies which policer should be applied to this packet.(which may change\r\n"
    "  the packets drop precedence)0 - Means No policer should be applied to the\r\n"
    "  packetRange 0-3.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_PORTS_INFO_DA_NOT_FOUND_3_CPU_CODE_ID,                                                            
    "ports_da_not_found_3_cpu_cod",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.ports_info.da_not_found[3].cpu_code:\r\n"
    "  Forwarding CPU CodeRange 0-1023\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_PORTS_INFO_DA_NOT_FOUND_3_COS_PARAMS_DP_ID,                                                            
    "ports_da_not_found_3_cos_prms_DP",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.ports_info.da_not_found[3].cos_params.DP:\r\n"
    "  Drop precedenceRange 0-3.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_PORTS_INFO_DA_NOT_FOUND_3_COS_PARAMS_TC_ID,                                                            
    "ports_da_not_found_3_cos_prms_TC",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.ports_info.da_not_found[3].cos_params.TC:\r\n"
    "  Traffic ClassRange 0-7.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_PORTS_INFO_DA_NOT_FOUND_3_COS_PARAMS_UP_ID,                                                            
    "ports_da_not_found_3_cos_prms_UP",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.ports_info.da_not_found[3].cos_params.UP:\r\n"
    "  User PriorityRange 0-7.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_PORTS_INFO_DA_NOT_FOUND_3_COS_OVERWRITE_ID,                                                            
    "ports_da_not_found_3_cos_vrwrt",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.ports_info.da_not_found[3].cos_overwrite:\r\n"
    "  If set then the CoS parameters should be replaced when this condition is\r\n"
    "  selected\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_PORTS_INFO_DA_NOT_FOUND_3_DEST_DEST_VAL_ID,                                                            
    "ports_da_not_found_3_dst_dst_val",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.ports_info.da_not_found[3].dest.dest_val:\r\n"
    "  The destination value, according to the type (Single, RLAG or GLAG,LIF...)For\r\n"
    "  LAG the value is the group ID.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_PORTS_INFO_DA_NOT_FOUND_3_DEST_DEST_TYPE_ID,                                                            
    "ports_da_not_found_3_dst_dst_typ",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.ports_info.da_not_found[3].dest.dest_type:\r\n"
    "  The type of the following destination ID\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_PORTS_INFO_DA_NOT_FOUND_3_FORWARD_TYPE_ID,                                                            
    "ports_da_not_found_3_frwrd_typ",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.ports_info.da_not_found[3].forward_type:\r\n"
    "  The forwarding action type.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_PORTS_INFO_DA_NOT_FOUND_2_ADD_VSID_LIFG_ID,                                                            
    "ports_da_not_found_2_add_vsd_lfg",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.ports_info.da_not_found[2].add_vsid_lifg:\r\n"
    "  If TRUE, the VSID lif group is added to the destination. In case it's TRUE\r\n"
    "  then the Destination of the forwarding action must be a multicast. \r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_PORTS_INFO_DA_NOT_FOUND_2_POLICER_INDEX_ID,                                                            
    "ports_da_not_found_2_policer_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.ports_info.da_not_found[2].policer_index:\r\n"
    "  Specifies which policer should be applied to this packet.(which may change\r\n"
    "  the packets drop precedence)0 - Means No policer should be applied to the\r\n"
    "  packetRange 0-3.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_PORTS_INFO_DA_NOT_FOUND_2_CPU_CODE_ID,                                                            
    "ports_da_not_found_2_cpu_cod",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.ports_info.da_not_found[2].cpu_code:\r\n"
    "  Forwarding CPU CodeRange 0-1023\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_PORTS_INFO_DA_NOT_FOUND_2_COS_PARAMS_DP_ID,                                                            
    "ports_da_not_found_2_cos_prms_DP",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.ports_info.da_not_found[2].cos_params.DP:\r\n"
    "  Drop precedenceRange 0-3.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_PORTS_INFO_DA_NOT_FOUND_2_COS_PARAMS_TC_ID,                                                            
    "ports_da_not_found_2_cos_prms_TC",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.ports_info.da_not_found[2].cos_params.TC:\r\n"
    "  Traffic ClassRange 0-7.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_PORTS_INFO_DA_NOT_FOUND_2_COS_PARAMS_UP_ID,                                                            
    "ports_da_not_found_2_cos_prms_UP",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.ports_info.da_not_found[2].cos_params.UP:\r\n"
    "  User PriorityRange 0-7.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_PORTS_INFO_DA_NOT_FOUND_2_COS_OVERWRITE_ID,                                                            
    "ports_da_not_found_2_cos_vrwrt",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.ports_info.da_not_found[2].cos_overwrite:\r\n"
    "  If set then the CoS parameters should be replaced when this condition is\r\n"
    "  selected\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_PORTS_INFO_DA_NOT_FOUND_2_DEST_DEST_VAL_ID,                                                            
    "ports_da_not_found_2_dst_dst_val",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.ports_info.da_not_found[2].dest.dest_val:\r\n"
    "  The destination value, according to the type (Single, RLAG or GLAG,LIF...)For\r\n"
    "  LAG the value is the group ID.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_PORTS_INFO_DA_NOT_FOUND_2_DEST_DEST_TYPE_ID,                                                            
    "ports_da_not_found_2_dst_dst_typ",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.ports_info.da_not_found[2].dest.dest_type:\r\n"
    "  The type of the following destination ID\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_PORTS_INFO_DA_NOT_FOUND_2_FORWARD_TYPE_ID,                                                            
    "ports_da_not_found_2_frwrd_typ",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.ports_info.da_not_found[2].forward_type:\r\n"
    "  The forwarding action type.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_PORTS_INFO_DA_NOT_FOUND_1_ADD_VSID_LIFG_ID,                                                            
    "ports_da_not_found_1_add_vsd_lfg",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.ports_info.da_not_found[1].add_vsid_lifg:\r\n"
    "  If TRUE, the VSID lif group is added to the destination. In case it's TRUE\r\n"
    "  then the Destination of the forwarding action must be a multicast. \r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_PORTS_INFO_DA_NOT_FOUND_1_POLICER_INDEX_ID,                                                            
    "ports_da_not_found_1_policer_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.ports_info.da_not_found[1].policer_index:\r\n"
    "  Specifies which policer should be applied to this packet.(which may change\r\n"
    "  the packets drop precedence)0 - Means No policer should be applied to the\r\n"
    "  packetRange 0-3.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_PORTS_INFO_DA_NOT_FOUND_1_CPU_CODE_ID,                                                            
    "ports_da_not_found_1_cpu_cod",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.ports_info.da_not_found[1].cpu_code:\r\n"
    "  Forwarding CPU CodeRange 0-1023\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_PORTS_INFO_DA_NOT_FOUND_1_COS_PARAMS_DP_ID,                                                            
    "ports_da_not_found_1_cos_prms_DP",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.ports_info.da_not_found[1].cos_params.DP:\r\n"
    "  Drop precedenceRange 0-3.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_PORTS_INFO_DA_NOT_FOUND_1_COS_PARAMS_TC_ID,                                                            
    "ports_da_not_found_1_cos_prms_TC",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.ports_info.da_not_found[1].cos_params.TC:\r\n"
    "  Traffic ClassRange 0-7.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_PORTS_INFO_DA_NOT_FOUND_1_COS_PARAMS_UP_ID,                                                            
    "ports_da_not_found_1_cos_prms_UP",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.ports_info.da_not_found[1].cos_params.UP:\r\n"
    "  User PriorityRange 0-7.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_PORTS_INFO_DA_NOT_FOUND_1_COS_OVERWRITE_ID,                                                            
    "ports_da_not_found_1_cos_vrwrt",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.ports_info.da_not_found[1].cos_overwrite:\r\n"
    "  If set then the CoS parameters should be replaced when this condition is\r\n"
    "  selected\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_PORTS_INFO_DA_NOT_FOUND_1_DEST_DEST_VAL_ID,                                                            
    "ports_da_not_found_1_dst_dst_val",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.ports_info.da_not_found[1].dest.dest_val:\r\n"
    "  The destination value, according to the type (Single, RLAG or GLAG,LIF...)For\r\n"
    "  LAG the value is the group ID.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_PORTS_INFO_DA_NOT_FOUND_1_DEST_DEST_TYPE_ID,                                                            
    "ports_da_not_found_1_dst_dst_typ",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.ports_info.da_not_found[1].dest.dest_type:\r\n"
    "  The type of the following destination ID\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_PORTS_INFO_DA_NOT_FOUND_1_FORWARD_TYPE_ID,                                                            
    "ports_da_not_found_1_frwrd_typ",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.ports_info.da_not_found[1].forward_type:\r\n"
    "  The forwarding action type.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
#endif /*UI_BRIDGING_FULL */
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_PORTS_INFO_DA_NOT_FOUND_0_ADD_VSID_LIFG_ID,                                                            
    "port_da_not_found_0_add_vsd_lfg",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.ports_info.da_not_found[0].add_vsid_lifg:\r\n"
    "  If TRUE, the VSID lif group is added to the destination. In case it's TRUE\r\n"
    "  then the Destination of the forwarding action must be a multicast. \r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_PORTS_INFO_DA_NOT_FOUND_0_POLICER_INDEX_ID,                                                            
    "port_da_not_found_0_policer_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.ports_info.da_not_found[0].policer_index:\r\n"
    "  Specifies which policer should be applied to this packet.(which may change\r\n"
    "  the packets drop precedence)0 - Means No policer should be applied to the\r\n"
    "  packetRange 0-3.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_PORTS_INFO_DA_NOT_FOUND_0_CPU_CODE_ID,                                                            
    "port_da_not_found_0_cpu_cod",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.ports_info.da_not_found[0].cpu_code:\r\n"
    "  Forwarding CPU CodeRange 0-1023\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_PORTS_INFO_DA_NOT_FOUND_0_COS_PARAMS_DP_ID,                                                            
    "port_da_not_found_0_cos_prms_DP",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.ports_info.da_not_found[0].cos_params.DP:\r\n"
    "  Drop precedenceRange 0-3.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_PORTS_INFO_DA_NOT_FOUND_0_COS_PARAMS_TC_ID,                                                            
    "port_da_not_found_0_cos_prms_TC",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.ports_info.da_not_found[0].cos_params.TC:\r\n"
    "  Traffic ClassRange 0-7.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_PORTS_INFO_DA_NOT_FOUND_0_COS_PARAMS_UP_ID,                                                            
    "port_da_not_found_0_cos_prms_UP",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.ports_info.da_not_found[0].cos_params.UP:\r\n"
    "  User PriorityRange 0-7.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_PORTS_INFO_DA_NOT_FOUND_0_COS_OVERWRITE_ID,                                                            
    "port_da_not_found_0_cos_vrwrt",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.ports_info.da_not_found[0].cos_overwrite:\r\n"
    "  If set then the CoS parameters should be replaced when this condition is\r\n"
    "  selected\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_PORTS_INFO_DA_NOT_FOUND_0_DEST_DEST_VAL_ID,                                                            
    "port_da_not_found_0_dst_dst_val",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.ports_info.da_not_found[0].dest.dest_val:\r\n"
    "  The destination value, according to the type (Single, RLAG or GLAG,LIF...)For\r\n"
    "  LAG the value is the group ID.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_PORTS_INFO_DA_NOT_FOUND_0_DEST_DEST_TYPE_ID,                                                            
    "port_da_not_found_0_dst_dst_typ",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.ports_info.da_not_found[0].dest.dest_type:\r\n"
    "  The type of the following destination ID\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_PORTS_INFO_DA_NOT_FOUND_0_FORWARD_TYPE_ID,                                                            
    "port_da_not_found_0_frwrd_typ",                                                                       
    (PARAM_VAL_RULES *)&SOC_SAND_PP_FRWRD_ACTION_TYPE_rule[0],                                            
    (sizeof(SOC_SAND_PP_FRWRD_ACTION_TYPE_rule) / sizeof(SOC_SAND_PP_FRWRD_ACTION_TYPE_rule[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.ports_info.da_not_found[0].forward_type:\r\n"
    "  The forwarding action type.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
#ifdef UI_BRIDGING_FULL 
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_PORTS_INFO_SA_NOT_FOUND_3_ADD_VSID_LIFG_ID,                                                            
    "ports_sa_not_found_3_add_vsd_lfg",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.ports_info.sa_not_found[3].add_vsid_lifg:\r\n"
    "  If TRUE, the VSID lif group is added to the destination. In case it's TRUE\r\n"
    "  then the Destination of the forwarding action must be a multicast. \r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },
  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_PORTS_INFO_SA_NOT_FOUND_3_POLICER_INDEX_ID,                                                            
    "ports_sa_not_found_3_policer_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.ports_info.sa_not_found[3].policer_index:\r\n"
    "  Specifies which policer should be applied to this packet.(which may change\r\n"
    "  the packets drop precedence)0 - Means No policer should be applied to the\r\n"
    "  packetRange 0-3.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_PORTS_INFO_SA_NOT_FOUND_3_CPU_CODE_ID,                                                            
    "ports_sa_not_found_3_cpu_cod",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.ports_info.sa_not_found[3].cpu_code:\r\n"
    "  Forwarding CPU CodeRange 0-1023\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_PORTS_INFO_SA_NOT_FOUND_3_COS_PARAMS_DP_ID,                                                            
    "ports_sa_not_found_3_cos_prms_DP",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.ports_info.sa_not_found[3].cos_params.DP:\r\n"
    "  Drop precedenceRange 0-3.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_PORTS_INFO_SA_NOT_FOUND_3_COS_PARAMS_TC_ID,                                                            
    "ports_sa_not_found_3_cos_prms_TC",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.ports_info.sa_not_found[3].cos_params.TC:\r\n"
    "  Traffic ClassRange 0-7.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_PORTS_INFO_SA_NOT_FOUND_3_COS_PARAMS_UP_ID,                                                            
    "ports_sa_not_found_3_cos_prms_UP",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.ports_info.sa_not_found[3].cos_params.UP:\r\n"
    "  User PriorityRange 0-7.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_PORTS_INFO_SA_NOT_FOUND_3_COS_OVERWRITE_ID,                                                            
    "ports_sa_not_found_3_cos_vrwrt",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.ports_info.sa_not_found[3].cos_overwrite:\r\n"
    "  If set then the CoS parameters should be replaced when this condition is\r\n"
    "  selected\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_PORTS_INFO_SA_NOT_FOUND_3_DEST_DEST_VAL_ID,                                                            
    "ports_sa_not_found_3_dst_dst_val",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.ports_info.sa_not_found[3].dest.dest_val:\r\n"
    "  The destination value, according to the type (Single, RLAG or GLAG,LIF...)For\r\n"
    "  LAG the value is the group ID.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_PORTS_INFO_SA_NOT_FOUND_3_DEST_DEST_TYPE_ID,                                                            
    "ports_sa_not_found_3_dst_dst_typ",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.ports_info.sa_not_found[3].dest.dest_type:\r\n"
    "  The type of the following destination ID\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_PORTS_INFO_SA_NOT_FOUND_3_FORWARD_TYPE_ID,                                                            
    "ports_sa_not_found_3_frwrd_typ",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.ports_info.sa_not_found[3].forward_type:\r\n"
    "  The forwarding action type.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_PORTS_INFO_SA_NOT_FOUND_2_ADD_VSID_LIFG_ID,                                                            
    "ports_sa_not_found_2_add_vsd_lfg",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.ports_info.sa_not_found[2].add_vsid_lifg:\r\n"
    "  If TRUE, the VSID lif group is added to the destination. In case it's TRUE\r\n"
    "  then the Destination of the forwarding action must be a multicast. \r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_PORTS_INFO_SA_NOT_FOUND_2_POLICER_INDEX_ID,                                                            
    "ports_sa_not_found_2_policer_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.ports_info.sa_not_found[2].policer_index:\r\n"
    "  Specifies which policer should be applied to this packet.(which may change\r\n"
    "  the packets drop precedence)0 - Means No policer should be applied to the\r\n"
    "  packetRange 0-3.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_PORTS_INFO_SA_NOT_FOUND_2_CPU_CODE_ID,                                                            
    "ports_sa_not_found_2_cpu_cod",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.ports_info.sa_not_found[2].cpu_code:\r\n"
    "  Forwarding CPU CodeRange 0-1023\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_PORTS_INFO_SA_NOT_FOUND_2_COS_PARAMS_DP_ID,                                                            
    "ports_sa_not_found_2_cos_prms_DP",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.ports_info.sa_not_found[2].cos_params.DP:\r\n"
    "  Drop precedenceRange 0-3.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_PORTS_INFO_SA_NOT_FOUND_2_COS_PARAMS_TC_ID,                                                            
    "ports_sa_not_found_2_cos_prms_TC",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.ports_info.sa_not_found[2].cos_params.TC:\r\n"
    "  Traffic ClassRange 0-7.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_PORTS_INFO_SA_NOT_FOUND_2_COS_PARAMS_UP_ID,                                                            
    "ports_sa_not_found_2_cos_prms_UP",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.ports_info.sa_not_found[2].cos_params.UP:\r\n"
    "  User PriorityRange 0-7.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_PORTS_INFO_SA_NOT_FOUND_2_COS_OVERWRITE_ID,                                                            
    "ports_sa_not_found_2_cos_vrwrt",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.ports_info.sa_not_found[2].cos_overwrite:\r\n"
    "  If set then the CoS parameters should be replaced when this condition is\r\n"
    "  selected\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_PORTS_INFO_SA_NOT_FOUND_2_DEST_DEST_VAL_ID,                                                            
    "ports_sa_not_found_2_dst_dst_val",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.ports_info.sa_not_found[2].dest.dest_val:\r\n"
    "  The destination value, according to the type (Single, RLAG or GLAG,LIF...)For\r\n"
    "  LAG the value is the group ID.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_PORTS_INFO_SA_NOT_FOUND_2_DEST_DEST_TYPE_ID,                                                            
    "ports_sa_not_found_2_dst_dst_typ",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.ports_info.sa_not_found[2].dest.dest_type:\r\n"
    "  The type of the following destination ID\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_PORTS_INFO_SA_NOT_FOUND_2_FORWARD_TYPE_ID,                                                            
    "ports_sa_not_found_2_frwrd_typ",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.ports_info.sa_not_found[2].forward_type:\r\n"
    "  The forwarding action type.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_PORTS_INFO_SA_NOT_FOUND_1_ADD_VSID_LIFG_ID,                                                            
    "ports_sa_not_found_1_add_vsd_lfg",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.ports_info.sa_not_found[1].add_vsid_lifg:\r\n"
    "  If TRUE, the VSID lif group is added to the destination. In case it's TRUE\r\n"
    "  then the Destination of the forwarding action must be a multicast. \r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_PORTS_INFO_SA_NOT_FOUND_1_POLICER_INDEX_ID,                                                            
    "ports_sa_not_found_1_policer_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.ports_info.sa_not_found[1].policer_index:\r\n"
    "  Specifies which policer should be applied to this packet.(which may change\r\n"
    "  the packets drop precedence)0 - Means No policer should be applied to the\r\n"
    "  packetRange 0-3.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_PORTS_INFO_SA_NOT_FOUND_1_CPU_CODE_ID,                                                            
    "ports_sa_not_found_1_cpu_cod",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.ports_info.sa_not_found[1].cpu_code:\r\n"
    "  Forwarding CPU CodeRange 0-1023\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_PORTS_INFO_SA_NOT_FOUND_1_COS_PARAMS_DP_ID,                                                            
    "ports_sa_not_found_1_cos_prms_DP",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.ports_info.sa_not_found[1].cos_params.DP:\r\n"
    "  Drop precedenceRange 0-3.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_PORTS_INFO_SA_NOT_FOUND_1_COS_PARAMS_TC_ID,                                                            
    "ports_sa_not_found_1_cos_prms_TC",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.ports_info.sa_not_found[1].cos_params.TC:\r\n"
    "  Traffic ClassRange 0-7.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_PORTS_INFO_SA_NOT_FOUND_1_COS_PARAMS_UP_ID,                                                            
    "ports_sa_not_found_1_cos_prms_UP",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.ports_info.sa_not_found[1].cos_params.UP:\r\n"
    "  User PriorityRange 0-7.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_PORTS_INFO_SA_NOT_FOUND_1_COS_OVERWRITE_ID,                                                            
    "ports_sa_not_found_1_cos_vrwrt",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.ports_info.sa_not_found[1].cos_overwrite:\r\n"
    "  If set then the CoS parameters should be replaced when this condition is\r\n"
    "  selected\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_PORTS_INFO_SA_NOT_FOUND_1_DEST_DEST_VAL_ID,                                                            
    "ports_sa_not_found_1_dst_dst_val",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.ports_info.sa_not_found[1].dest.dest_val:\r\n"
    "  The destination value, according to the type (Single, RLAG or GLAG,LIF...)For\r\n"
    "  LAG the value is the group ID.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_PORTS_INFO_SA_NOT_FOUND_1_DEST_DEST_TYPE_ID,                                                            
    "ports_sa_not_found_1_dst_dst_typ",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.ports_info.sa_not_found[1].dest.dest_type:\r\n"
    "  The type of the following destination ID\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_PORTS_INFO_SA_NOT_FOUND_1_FORWARD_TYPE_ID,                                                            
    "ports_sa_not_found_1_frwrd_typ",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.ports_info.sa_not_found[1].forward_type:\r\n"
    "  The forwarding action type.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
#endif /*UI_BRIDGING_FULL*/
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_PORTS_INFO_SA_NOT_FOUND_0_ADD_VSID_LIFG_ID,                                                            
    "port_sa_not_found_0_add_vsd_lfg",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.ports_info.sa_not_found[0].add_vsid_lifg:\r\n"
    "  If TRUE, the VSID lif group is added to the destination. In case it's TRUE\r\n"
    "  then the Destination of the forwarding action must be a multicast. \r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_PORTS_INFO_SA_NOT_FOUND_0_POLICER_INDEX_ID,                                                            
    "port_sa_not_found_0_policer_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.ports_info.sa_not_found[0].policer_index:\r\n"
    "  Specifies which policer should be applied to this packet.(which may change\r\n"
    "  the packets drop precedence)0 - Means No policer should be applied to the\r\n"
    "  packetRange 0-3.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_PORTS_INFO_SA_NOT_FOUND_0_CPU_CODE_ID,                                                            
    "port_sa_not_found_0_cpu_cod",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.ports_info.sa_not_found[0].cpu_code:\r\n"
    "  Forwarding CPU CodeRange 0-1023\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_PORTS_INFO_SA_NOT_FOUND_0_COS_PARAMS_DP_ID,                                                            
    "port_sa_not_found_0_cos_prms_DP",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.ports_info.sa_not_found[0].cos_params.DP:\r\n"
    "  Drop precedenceRange 0-3.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_PORTS_INFO_SA_NOT_FOUND_0_COS_PARAMS_TC_ID,                                                            
    "port_sa_not_found_0_cos_prms_TC",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.ports_info.sa_not_found[0].cos_params.TC:\r\n"
    "  Traffic ClassRange 0-7.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_PORTS_INFO_SA_NOT_FOUND_0_COS_PARAMS_UP_ID,                                                            
    "port_sa_not_found_0_cos_prms_UP",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.ports_info.sa_not_found[0].cos_params.UP:\r\n"
    "  User PriorityRange 0-7.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_PORTS_INFO_SA_NOT_FOUND_0_COS_OVERWRITE_ID,                                                            
    "port_sa_not_found_0_cos_vrwrt",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.ports_info.sa_not_found[0].cos_overwrite:\r\n"
    "  If set then the CoS parameters should be replaced when this condition is\r\n"
    "  selected\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_PORTS_INFO_SA_NOT_FOUND_0_DEST_DEST_VAL_ID,                                                            
    "port_sa_not_found_0_dst_dst_val",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.ports_info.sa_not_found[0].dest.dest_val:\r\n"
    "  The destination value, according to the type (Single, RLAG or GLAG,LIF...)For\r\n"
    "  LAG the value is the group ID.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_PORTS_INFO_SA_NOT_FOUND_0_DEST_DEST_TYPE_ID,                                                            
    "port_sa_not_found_0_dst_dst_typ",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.ports_info.sa_not_found[0].dest.dest_type:\r\n"
    "  The type of the following destination ID\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_SET_FRWRD_GLBL_INFO_SET_FRWD_INFO_PORTS_INFO_SA_NOT_FOUND_0_FORWARD_TYPE_ID,                                                            
    "port_sa_not_found_0_frwrd_typ",                                                                       
    (PARAM_VAL_RULES *)&SOC_SAND_PP_FRWRD_ACTION_TYPE_rule[0],                                            
    (sizeof(SOC_SAND_PP_FRWRD_ACTION_TYPE_rule) / sizeof(SOC_SAND_PP_FRWRD_ACTION_TYPE_rule[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frwd_info.ports_info.sa_not_found[0].forward_type:\r\n"
    "  The forwarding action type.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_set...\r\n"
    "",
    "",                                                                                  
    {BIT(22), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
      {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_GLBL_INFO_GET_FRWRD_GLBL_INFO_GET_ID,                                                            
    "frwrd_glbl_info_get",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Sets the global information for forwarding actions, to be performed on the\r\n"
    "  packets upon a lookup into the MAC Table. Specify what is the forwarding\r\n"
    "  action parameters of a packet that:\r\n"
    "  - Its SA not found and the forwarding action according to Port Info.\r\n"
    "  - Its DA not found and the forwarding action according to Port Info.\r\n"
    "  - Unicast and its DA not found and the forwarding action according to VSID\r\n"
    "  Info.\r\n"
    "  - Multicast and its DA not found and the forwarding action according to VSID\r\n"
    "  Info.\r\n"
    "  - Its SA was found and the forwarding action is drop.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_glbl_info_get\r\n"
    "",
    "",                                                                                  
    {BIT(23), 0, 0, 0},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_PORT_INFO_SET_FRWRD_PORT_INFO_SET_ID,                                                            
    "frwrd_port_info_set",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Sets the per-port forwarding action info.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_port_info_set prt_ndx 0 port_da_forward_action_pointer 0\r\n"
    "  port_sa_forward_action_pointer 0\r\n"
    "",
    "",                                                                                  
    {BIT(24), 0, 0, 0},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_PORT_INFO_SET_FRWRD_PORT_INFO_SET_PORT_NDX_ID,                                                            
    "prt_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  port_ndx:\r\n"
    "  Local port ID.\r\n"
    "  Range 0-79.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_port_info_set prt_ndx 0 port_da_forward_action_pointer 0\r\n"
    "  port_sa_forward_action_pointer 0\r\n"
    "",
    "",                                                                                  
    {BIT(24), 0, 0, 0},                                                                              
    3,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_PORT_INFO_SET_FRWRD_PORT_INFO_SET_PORT_INFO_DA_FWD_ACTION_PTR_ID,                                                            
    "port_da_forward_action_pointer",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  port_info.da_fwd_action_ptr:\r\n"
    "  Index in the global info, that was set by\r\n"
    "  timna_bridging_frwrd_glbl_info_set(). Forwarding action when the SA of a\r\n"
    "  packet not found upon lookup in the MAC table. Range 0-7\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_port_info_set prt_ndx 0 port_da_forward_action_pointer 0\r\n"
    "  port_sa_forward_action_pointer 0\r\n"
    "",
    "",                                                                                  
    {BIT(24), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_PORT_INFO_SET_FRWRD_PORT_INFO_SET_PORT_INFO_SA_FWD_ACTION_PTR_ID,                                                            
    "port_sa_forward_action_pointer",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  port_info.sa_fwd_action_ptr:\r\n"
    "  Index into the global info, that was set by\r\n"
    "  timna_bridging_frwrd_glbl_info_set(). Forwarding action when the SA of a\r\n"
    "  packet not found upon lookup in the MAC table Range 0-7.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_port_info_set prt_ndx 0 port_da_forward_action_pointer 0\r\n"
    "  port_sa_forward_action_pointer 0\r\n"
    "",
    "",                                                                                  
    {BIT(24), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_PORT_INFO_GET_FRWRD_PORT_INFO_GET_ID,                                                            
    "frwrd_port_info_get",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Sets the per-port forwarding action info.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_port_info_get prt_ndx 0\r\n"
    "",
    "",                                                                                  
    {BIT(25), 0, 0, 0},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_PORT_INFO_GET_FRWRD_PORT_INFO_GET_PORT_NDX_ID,                                                            
    "prt_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  port_ndx:\r\n"
    "  Local port ID.\r\n"
    "  Range 0-79.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_port_info_get prt_ndx 0\r\n"
    "",
    "",                                                                                  
    {BIT(25), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_VSID_INFO_SET_FRWRD_VSID_INFO_SET_ID,                                                            
    "frwrd_vsid_info_set",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Sets the per-VSID forwarding action info.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_vsid_info_set vsd_ndx 0 vsi_da_frwrd_action_mc_ptr 0\r\n"
    "  vsi_da_frwrd_action_uc_ptr 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, BIT(20)},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_VSID_INFO_SET_FRWRD_VSID_INFO_SET_VSID_NDX_ID,                                                            
    "vsd_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  vsid_ndx:\r\n"
    "  the vsid.\r\n"
    "  Range 0-4095.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_vsid_info_set vsd_ndx 0 vsi_da_frwrd_action_mc_ptr 0\r\n"
    "  vsi_da_frwrd_action_uc_ptr 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, BIT(20)},                                                                              
    3,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_VSID_INFO_SET_FRWRD_VSID_INFO_SET_VSID_INFO_DA_FWD_ACTION_MC_PTR_ID,                                                            
    "vsi_da_frwrd_action_mc_ptr",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  vsid_info.da_fwd_action_mc_ptr:\r\n"
    "  Index into the global info, that was set by\r\n"
    "  timna_bridging_frwrd_glbl_info_set().Forwarding action when the DA of\r\n"
    "  multicast packet was not found upon lookup in the MAC Table. Range 0-7.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_vsid_info_set vsd_ndx 0 vsi_da_frwrd_action_mc_ptr 0\r\n"
    "  vsi_da_frwrd_action_uc_ptr 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, BIT(20)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_VSID_INFO_SET_FRWRD_VSID_INFO_SET_VSID_INFO_DA_FWD_ACTION_UC_PTR_ID,                                                            
    "vsi_da_frwrd_action_uc_ptr",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  vsid_info.da_fwd_action_uc_ptr:\r\n"
    "  Index into the global info, that was set by\r\n"
    "  timna_bridging_frwrd_glbl_info_set(). Forwarding action when the DA of\r\n"
    "  unicast packet was not found upon lookup in the MAC Table. Range 0-7.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_vsid_info_set vsd_ndx 0 vsi_da_frwrd_action_mc_ptr 0\r\n"
    "  vsi_da_frwrd_action_uc_ptr 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, BIT(20)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_VSID_INFO_GET_FRWRD_VSID_INFO_GET_ID,                                                            
    "frwrd_vsid_info_get",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Sets the per-VSID forwarding action info.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_vsid_info_get vsd_ndx 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, BIT(21)},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_BRIDGING_FRWRD_VSID_INFO_GET_FRWRD_VSID_INFO_GET_VSID_NDX_ID,                                                            
    "vsd_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  vsid_ndx:\r\n"
    "  the vsid.\r\n"
    "  Range 0-4095.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api bridging frwrd_vsid_info_get vsd_ndx 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, BIT(21)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_API_BRIDGING_ID,                                                            
    "bridging",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "",
    "",
    "",                                                                                  
    {BIT(22)|BIT(23)|BIT(24)|BIT(25), 0, 0, BIT(20)|BIT(21)},                                                                              
    1,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
#endif /* } bridging*/


#ifdef UI_VID_RES/* { vid_res*/
  {                                                                                        
    PARAM_TIMNA_TIMNA_VID_PORT_INFO_SET_VID_PORT_INFO_SET_ID,                                                            
    "vid_port_info_set",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Set the port information (which vid resolution algorithms to perform for this\r\n"
    "  port and default pvid) for the VLAN ID resolution module.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vid_res vid_port_info_set prt_ndx 0 enable_prtcl 0\r\n"
    "  enable_sbnt_ip 0 pvid 0\r\n"
    "",
    "",                                                                                  
    {BIT(26), 0, 0, 0},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VID_PORT_INFO_SET_VID_PORT_INFO_SET_PORT_NDX_ID,                                                            
    "prt_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  port_ndx:\r\n"
    "  Local physical port ID. Range 0-31.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vid_res vid_port_info_set prt_ndx 0 enable_prtcl 0\r\n"
    "  enable_sbnt_ip 0 pvid 0\r\n"
    "",
    "",                                                                                  
    {BIT(26), 0, 0, 0},                                                                              
    3,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VID_PORT_INFO_SET_VID_PORT_INFO_SET_PORT_INFO_ENABLE_PROTOCOL_ID,                                                            
    "enable_prtcl",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  port_info.enable_protocol:\r\n"
    "  Enable VID resolution according to protocol parsing\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vid_res vid_port_info_set prt_ndx 0 enable_prtcl 0\r\n"
    "  enable_sbnt_ip 0 pvid 0\r\n"
    "",
    "",                                                                                  
    {BIT(26), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VID_PORT_INFO_SET_VID_PORT_INFO_SET_PORT_INFO_ENABLE_SUBNET_IP_ID,                                                            
    "enable_sbnt_ip",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  port_info.enable_subnet_ip:\r\n"
    "  Enable VID resolution according to subnet IP parsing\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vid_res vid_port_info_set prt_ndx 0 enable_prtcl 0\r\n"
    "  enable_sbnt_ip 0 pvid 0\r\n"
    "",
    "",                                                                                  
    {BIT(26), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VID_PORT_INFO_SET_VID_PORT_INFO_SET_PORT_INFO_PVID_ID,                                                            
    "pvid",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  port_info.pvid:\r\n"
    "  Port default VLAN IDRange 0-4095\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vid_res vid_port_info_set prt_ndx 0 enable_prtcl 0\r\n"
    "  enable_sbnt_ip 0 pvid 0\r\n"
    "",
    "",                                                                                  
    {BIT(26), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VID_PORT_INFO_GET_VID_PORT_INFO_GET_ID,                                                            
    "vid_port_info_get",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Set the port information (which vid resolution algorithms to perform for this\r\n"
    "  port and default pvid) for the VLAN ID resolution module.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vid_res vid_port_info_get prt_ndx 0\r\n"
    "",
    "",                                                                                  
    {BIT(27), 0, 0, 0},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VID_PORT_INFO_GET_VID_PORT_INFO_GET_PORT_NDX_ID,                                                            
    "prt_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  port_ndx:\r\n"
    "  Local physical port ID. Range 0-31.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vid_res vid_port_info_get prt_ndx 0\r\n"
    "",
    "",                                                                                  
    {BIT(27), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VID_COS_IP_SUBNET_INFO_SET_VID_COS_IP_SUBNET_INFO_SET_ID,                                                            
    "vid_cos_ip_subnet_info_set",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Set the per subnet IP information for the VLAN ID resolution module.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vid_res vid_cos_ip_subnet_info_set sbnt_ip_ndx 0\r\n"
    "  cvln_usr_prrty 0 trffc_clss 0 vid 0\r\n"
    "  sbnt_msk 0 ip_ddrss 0 is_ntry_vld 0\r\n"
    "",
    "",                                                                                  
    {BIT(28), 0, 0, 0},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VID_COS_IP_SUBNET_INFO_SET_VID_COS_IP_SUBNET_INFO_SET_SUBNET_IP_NDX_ID,                                                            
    "sbnt_ip_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  subnet_ip_ndx:\r\n"
    "  Index in the subnet IP mapping table.\r\n"
    "  Range 0-15 (the device support 16 different subnets)\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vid_res vid_cos_ip_subnet_info_set sbnt_ip_ndx 0\r\n"
    "  cvln_usr_prrty 0 trffc_clss 0 vid 0\r\n"
    "  sbnt_msk 0 ip_ddrss 0 is_ntry_vld 0\r\n"
    "",
    "",                                                                                  
    {BIT(28), 0, 0, 0},                                                                              
    3,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VID_COS_IP_SUBNET_INFO_SET_VID_COS_IP_SUBNET_INFO_SET_SUBNET_IP_INFO_CVLAN_USER_PRIORITY_ID,                                                            
    "cvln_usr_prrty",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  subnet_ip_info.cvlan_user_priority:\r\n"
    "  CVLAN User Priority.Relevant only for CEP ports according to 802.1ad standard\r\n"
    "  for a provider edge bridge and the packet arrives with two headers C-VLAN and\r\n"
    "  S-VLANRange 0-7\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vid_res vid_cos_ip_subnet_info_set sbnt_ip_ndx 0\r\n"
    "  cvln_usr_prrty 0 trffc_clss 0 vid 0\r\n"
    "  sbnt_msk 0 ip_ddrss 0 is_ntry_vld 0\r\n"
    "",
    "",                                                                                  
    {BIT(28), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VID_COS_IP_SUBNET_INFO_SET_VID_COS_IP_SUBNET_INFO_SET_SUBNET_IP_INFO_TRAFFIC_CLASS_ID,                                                            
    "trffc_clss",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  subnet_ip_info.traffic_class:\r\n"
    "  Traffic classRange 0-7.This used for COS resolution.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vid_res vid_cos_ip_subnet_info_set sbnt_ip_ndx 0\r\n"
    "  cvln_usr_prrty 0 trffc_clss 0 vid 0\r\n"
    "  sbnt_msk 0 ip_ddrss 0 is_ntry_vld 0\r\n"
    "",
    "",                                                                                  
    {BIT(28), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VID_COS_IP_SUBNET_INFO_SET_VID_COS_IP_SUBNET_INFO_SET_SUBNET_IP_INFO_VID_ID,                                                            
    "vid",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  subnet_ip_info.vid:\r\n"
    "  VLAN IDRange 0-4095\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vid_res vid_cos_ip_subnet_info_set sbnt_ip_ndx 0\r\n"
    "  cvln_usr_prrty 0 trffc_clss 0 vid 0\r\n"
    "  sbnt_msk 0 ip_ddrss 0 is_ntry_vld 0\r\n"
    "",
    "",                                                                                  
    {BIT(28), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VID_COS_IP_SUBNET_INFO_SET_VID_COS_IP_SUBNET_INFO_SET_SUBNET_IP_INFO_SUBNET_MASK_ID,                                                            
    "sbnt_msk",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  subnet_ip_info.subnet_mask:\r\n"
    "  The number of most significant bits from the IP-Address that should be\r\n"
    "  matched to IPv4-Hdr.SrcIP.Range 1-32.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vid_res vid_cos_ip_subnet_info_set sbnt_ip_ndx 0\r\n"
    "  cvln_usr_prrty 0 trffc_clss 0 vid 0\r\n"
    "  sbnt_msk 0 ip_ddrss 0 is_ntry_vld 0\r\n"
    "",
    "",                                                                                  
    {BIT(28), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VID_COS_IP_SUBNET_INFO_SET_VID_COS_IP_SUBNET_INFO_SET_SUBNET_IP_INFO_IP_ADDRESS_ID,                                                            
    "ip_ddrss",                                                                       
    (PARAM_VAL_RULES *)&Subnet_ip_rule[0],                                            
    (sizeof(Subnet_ip_rule) / sizeof(Subnet_ip_rule[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  subnet_ip_info.ip_address:\r\n"
    "  IP address\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vid_res vid_cos_ip_subnet_info_set sbnt_ip_ndx 0\r\n"
    "  cvln_usr_prrty 0 trffc_clss 0 vid 0\r\n"
    "  sbnt_msk 0 ip_ddrss 0 is_ntry_vld 0\r\n"
    "",
    "",                                                                                  
    {BIT(28), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VID_COS_IP_SUBNET_INFO_SET_VID_COS_IP_SUBNET_INFO_SET_SUBNET_IP_INFO_IS_ENTRY_VALID_ID,                                                            
    "is_ntry_vld",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  subnet_ip_info.is_entry_valid:\r\n"
    "  If set then this prefix should be considered.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vid_res vid_cos_ip_subnet_info_set sbnt_ip_ndx 0\r\n"
    "  cvln_usr_prrty 0 trffc_clss 0 vid 0\r\n"
    "  sbnt_msk 0 ip_ddrss 0 is_ntry_vld 0\r\n"
    "",
    "",                                                                                  
    {BIT(28), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VID_COS_IP_SUBNET_INFO_GET_VID_COS_IP_SUBNET_INFO_GET_ID,                                                            
    "vid_cos_ip_subnet_info_get",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Set the per subnet IP information for the VLAN ID resolution module.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vid_res vid_cos_ip_subnet_info_get sbnt_ip_ndx 0\r\n"
    "",
    "",                                                                                  
    {BIT(29), 0, 0, 0},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VID_COS_IP_SUBNET_INFO_GET_VID_COS_IP_SUBNET_INFO_GET_SUBNET_IP_NDX_ID,                                                            
    "sbnt_ip_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  subnet_ip_ndx:\r\n"
    "  Index in the subnet IP mapping table.\r\n"
    "  Range 0-15 (the device support 16 different subnets)\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vid_res vid_cos_ip_subnet_info_get sbnt_ip_ndx 0\r\n"
    "",
    "",                                                                                  
    {BIT(29), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VID_PROTOCOL_TYPE_SET_VID_PROTOCOL_TYPE_SET_ID,                                                            
    "vid_protocol_type_set",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Set The per protocol information, Ethernet type and value, for the VLAN ID\r\n"
    "  resolution protocol type based.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vid_res vid_protocol_type_set prtcl_typ_ndx 0 prtcl_typ_ncp_vlu 0\r\n"
    "  prtcl_typ_ncp_typ 0\r\n"
    "",
    "",                                                                                  
    {BIT(30), 0, 0, 0},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VID_PROTOCOL_TYPE_SET_VID_PROTOCOL_TYPE_SET_PRTCL_TYPE_NDX_ID,                                                            
    "prtcl_typ_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  prtcl_type_ndx:\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vid_res vid_protocol_type_set prtcl_typ_ndx 0 prtcl_typ_ncp_vlu 0\r\n"
    "  prtcl_typ_ncp_typ 0\r\n"
    "",
    "",                                                                                  
    {BIT(30), 0, 0, 0},                                                                              
    3,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VID_PROTOCOL_TYPE_SET_VID_PROTOCOL_TYPE_SET_PRTCL_TYPE_ENCAP_VALUE_ID,                                                            
    "prtcl_typ_ncp_vlu",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  prtcl_type.encap_value:\r\n"
    "  Should be the value of the EthType or DSAP-SSAP according to the value of\r\n"
    "  encap_type\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vid_res vid_protocol_type_set prtcl_typ_ndx 0 prtcl_typ_ncp_vlu 0\r\n"
    "  prtcl_typ_ncp_typ 0\r\n"
    "",
    "",                                                                                  
    {BIT(30), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VID_PROTOCOL_TYPE_SET_VID_PROTOCOL_TYPE_SET_PRTCL_TYPE_ENCAP_TYPE_ID,                                                            
    "prtcl_typ_ncp_typ",                                                                       
    (PARAM_VAL_RULES *)&TIMNA_VID_ENCAP_TYPES_rule[0],                                            
    (sizeof(TIMNA_VID_ENCAP_TYPES_rule) / sizeof(TIMNA_VID_ENCAP_TYPES_rule[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  prtcl_type.encap_type:\r\n"
    "  Determines if this entry to be matched to Ethernet-II or LLC with SNAP or\r\n"
    "  {DSAP, SSAP} (packet encapsulation LLC)\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vid_res vid_protocol_type_set prtcl_typ_ndx 0 prtcl_typ_ncp_vlu 0\r\n"
    "  prtcl_typ_ncp_typ 0\r\n"
    "",
    "",                                                                                  
    {BIT(30), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VID_PROTOCOL_TYPE_GET_VID_PROTOCOL_TYPE_GET_ID,                                                            
    "vid_protocol_type_get",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Set The per protocol information, Ethernet type and value, for the VLAN ID\r\n"
    "  resolution protocol type based.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vid_res vid_protocol_type_get prtcl_typ_ndx 0\r\n"
    "",
    "",                                                                                  
    {BIT(31), 0, 0, 0},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VID_PROTOCOL_TYPE_GET_VID_PROTOCOL_TYPE_GET_PRTCL_TYPE_NDX_ID,                                                            
    "prtcl_typ_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  prtcl_type_ndx:\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vid_res vid_protocol_type_get prtcl_typ_ndx 0\r\n"
    "",
    "",                                                                                  
    {BIT(31), 0, 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VID_PROTOCOL_VID_INFO_SET_VID_PROTOCOL_VID_INFO_SET_ID,                                                            
    "vid_protocol_vid_info_set",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Sets the VLAN ID for VID based protocol resolution per port.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vid_res vid_protocol_vid_info_set prt_ndx 0 prtcl_typ_ndx 0\r\n"
    "  c_vid_up 0 ntry_is_vld 0 vid 0\r\n"
    "",
    "",                                                                                  
    {0, BIT(0), 0, 0},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VID_PROTOCOL_VID_INFO_SET_VID_PROTOCOL_VID_INFO_SET_PORT_NDX_ID,                                                            
    "prt_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  port_ndx:\r\n"
    "  local oprt Id. Range 0-31.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vid_res vid_protocol_vid_info_set prt_ndx 0 prtcl_typ_ndx 0\r\n"
    "  c_vid_up 0 ntry_is_vld 0 vid 0\r\n"
    "",
    "",                                                                                  
    {0, BIT(0), 0, 0},                                                                              
    3,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VID_PROTOCOL_VID_INFO_SET_VID_PROTOCOL_VID_INFO_SET_PRTCL_TYPE_NDX_ID,                                                            
    "prtcl_typ_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  prtcl_type_ndx:\r\n"
    "  protocol index. Range 0-3.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vid_res vid_protocol_vid_info_set prt_ndx 0 prtcl_typ_ndx 0\r\n"
    "  c_vid_up 0 ntry_is_vld 0 vid 0\r\n"
    "",
    "",                                                                                  
    {0, BIT(0), 0, 0},                                                                              
    4,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VID_PROTOCOL_VID_INFO_SET_VID_PROTOCOL_VID_INFO_SET_VID_INFO_C_VID_UP_ID,                                                            
    "c_vid_up",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  vid_info.c_vid_up:\r\n"
    "  CVLAN User PriorityRelevant only for CEP ports according to 802.1ad standard\r\n"
    "  for a provider edge bridge and the packet arrives with two headers C-VLAN and\r\n"
    "  S-VLANRange 0-7\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vid_res vid_protocol_vid_info_set prt_ndx 0 prtcl_typ_ndx 0\r\n"
    "  c_vid_up 0 ntry_is_vld 0 vid 0\r\n"
    "",
    "",                                                                                  
    {0, BIT(0), 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VID_PROTOCOL_VID_INFO_SET_VID_PROTOCOL_VID_INFO_SET_VID_INFO_ENTRY_IS_VALID_ID,                                                            
    "ntry_is_vld",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  vid_info.entry_is_valid:\r\n"
    "  Is the vlan ID above valid\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vid_res vid_protocol_vid_info_set prt_ndx 0 prtcl_typ_ndx 0\r\n"
    "  c_vid_up 0 ntry_is_vld 0 vid 0\r\n"
    "",
    "",                                                                                  
    {0, BIT(0), 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VID_PROTOCOL_VID_INFO_SET_VID_PROTOCOL_VID_INFO_SET_VID_INFO_VID_ID,                                                            
    "vid",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  vid_info.vid:\r\n"
    "  12 bits of vlan ID \r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vid_res vid_protocol_vid_info_set prt_ndx 0 prtcl_typ_ndx 0\r\n"
    "  c_vid_up 0 ntry_is_vld 0 vid 0\r\n"
    "",
    "",                                                                                  
    {0, BIT(0), 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VID_PROTOCOL_VID_INFO_GET_VID_PROTOCOL_VID_INFO_GET_ID,                                                            
    "vid_protocol_vid_info_get",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Sets the VLAN ID for VID based protocol resolution per port.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vid_res vid_protocol_vid_info_get prt_ndx 0 prtcl_typ_ndx 0\r\n"
    "",
    "",                                                                                  
    {0, BIT(1), 0, 0},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VID_PROTOCOL_VID_INFO_GET_VID_PROTOCOL_VID_INFO_GET_PORT_NDX_ID,                                                            
    "prt_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  port_ndx:\r\n"
    "  local oprt Id. Range 0-31.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vid_res vid_protocol_vid_info_get prt_ndx 0 prtcl_typ_ndx 0\r\n"
    "",
    "",                                                                                  
    {0, BIT(1), 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VID_PROTOCOL_VID_INFO_GET_VID_PROTOCOL_VID_INFO_GET_PRTCL_TYPE_NDX_ID,                                                            
    "prtcl_typ_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  prtcl_type_ndx:\r\n"
    "  protocol index. Range 0-3.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vid_res vid_protocol_vid_info_get prt_ndx 0 prtcl_typ_ndx 0\r\n"
    "",
    "",                                                                                  
    {0, BIT(1), 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_API_VID_RES_ID,                                                            
    "vid_res",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "",
    "",
    "",                                                                                  
    {BIT(26)|BIT(27)|BIT(28)|BIT(29)|BIT(30)|BIT(31), BIT(0)|BIT(1), 0, 0},                                                                              
    1,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
#endif /* } vid_res*/
#ifdef UI_COS/* { cos*/
  {                                                                                        
    PARAM_TIMNA_TIMNA_COS_GLBL_INFO_SET_GLBL_INFO_SET_ID,                                                            
    "glbl_info_set",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Sets the global information of COS module mapping including:\r\n"
    "  - UP to TC\r\n"
    "  - TC to UP\r\n"
    "  - UP to DP\r\n"
    "  - DE to DP\r\n"
    "  - PCP Decoding (PCP to UP and DE)\r\n"
    "  - PCP Encoding (UP and DP (!= 0) to PCP)\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api cos glbl_info_set UP_and_DP_to_PCP_3 0\r\n"
    "  UP_and_DP_to_PCP_2 0 UP_and_DP_to_PCP_1 0\r\n"
    "  UP_and_DP_to_PCP_0 0 PCP_to_DE_3 0 PCP_to_DE_2 0\r\n"
    "  PCP_to_DE_1 0 PCP_to_DE_0 0 PCP_to_UP_3 0\r\n"
    "  PCP_to_UP_2 0 PCP_to_UP_1 0 PCP_to_UP_0 0\r\n"
    "  DE_to_DP_DE_1_DP_val 0 DE_to_DP_DE_0_DP_val 0\r\n"
    "  UP_to_DP_1 0 UP_to_DP_0 0 TC_to_UP 0\r\n"
    "  UP_to_TC_3 0 UP_to_TC_2 0 UP_to_TC_1 0\r\n"
    "  UP_to_TC_0 0\r\n"
    "",
    "",                                                                                  
    {0, BIT(2), 0, 0},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_COS_GLBL_INFO_SET_GLBL_INFO_SET_GLBL_INFO_UP_AND_DP_TO_PCP_3_ID,                                                            
    "UP_and_DP_to_PCP_3",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  glbl_info.UP_and_DP_to_PCP[3]:\r\n"
    "  + 1][2]  Mapping of PCP to DE. up_and_dp_to_pcp[t][x][y]=z maps UP 'y' and DP\r\n"
    "  x (0,rest) of table 't' to DP 'z'. Range 0-1\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api cos glbl_info_set UP_and_DP_to_PCP_3 0\r\n"
    "  UP_and_DP_to_PCP_2 0 UP_and_DP_to_PCP_1 0\r\n"
    "  UP_and_DP_to_PCP_0 0 PCP_to_DE_3 0 PCP_to_DE_2 0\r\n"
    "  PCP_to_DE_1 0 PCP_to_DE_0 0 PCP_to_UP_3 0\r\n"
    "  PCP_to_UP_2 0 PCP_to_UP_1 0 PCP_to_UP_0 0\r\n"
    "  DE_to_DP_DE_1_DP_val 0 DE_to_DP_DE_0_DP_val 0\r\n"
    "  UP_to_DP_1 0 UP_to_DP_0 0 TC_to_UP 0\r\n"
    "  UP_to_TC_3 0 UP_to_TC_2 0 UP_to_TC_1 0\r\n"
    "  UP_to_TC_0 0\r\n"
    "",
    "",                                                                                  
    {0, BIT(2), 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },
  {                                                                                        
    PARAM_TIMNA_TIMNA_COS_GLBL_INFO_SET_GLBL_INFO_SET_GLBL_INFO_GET_ID,                                                            
    "get_b4_set",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Get Before set:\r\n"
    "  + 1][2]  Mapping of PCP to DE. up_and_dp_to_pcp[t][x][y]=z maps UP 'y' and DP\r\n"
    "  x (0,rest) of table 't' to DP 'z'. Range 0-1\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api cos glbl_info_set UP_and_DP_to_PCP_3 0\r\n"
    "  UP_and_DP_to_PCP_2 0 UP_and_DP_to_PCP_1 0\r\n"
    "  UP_and_DP_to_PCP_0 0 PCP_to_DE_3 0 PCP_to_DE_2 0\r\n"
    "  PCP_to_DE_1 0 PCP_to_DE_0 0 PCP_to_UP_3 0\r\n"
    "  PCP_to_UP_2 0 PCP_to_UP_1 0 PCP_to_UP_0 0\r\n"
    "  DE_to_DP_DE_1_DP_val 0 DE_to_DP_DE_0_DP_val 0\r\n"
    "  UP_to_DP_1 0 UP_to_DP_0 0 TC_to_UP 0\r\n"
    "  UP_to_TC_3 0 UP_to_TC_2 0 UP_to_TC_1 0\r\n"
    "  UP_to_TC_0 0\r\n"
    "",
    "",                                                                                  
    {0, BIT(2), 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_COS_GLBL_INFO_SET_GLBL_INFO_SET_GLBL_INFO_UP_AND_DP_TO_PCP_1_ID,                                                            
    "UP_and_DP_to_PCP_1",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  glbl_info.UP_and_DP_to_PCP[1]:\r\n"
    "  + 1][2]  Mapping of PCP to DE. up_and_dp_to_pcp[t][x][y]=z maps UP 'y' and DP\r\n"
    "  x (0,rest) of table 't' to DP 'z'. Range 0-1\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api cos glbl_info_set UP_and_DP_to_PCP_3 0\r\n"
    "  UP_and_DP_to_PCP_2 0 UP_and_DP_to_PCP_1 0\r\n"
    "  UP_and_DP_to_PCP_0 0 PCP_to_DE_3 0 PCP_to_DE_2 0\r\n"
    "  PCP_to_DE_1 0 PCP_to_DE_0 0 PCP_to_UP_3 0\r\n"
    "  PCP_to_UP_2 0 PCP_to_UP_1 0 PCP_to_UP_0 0\r\n"
    "  DE_to_DP_DE_1_DP_val 0 DE_to_DP_DE_0_DP_val 0\r\n"
    "  UP_to_DP_1 0 UP_to_DP_0 0 TC_to_UP 0\r\n"
    "  UP_to_TC_3 0 UP_to_TC_2 0 UP_to_TC_1 0\r\n"
    "  UP_to_TC_0 0\r\n"
    "",
    "",                                                                                  
    {0, BIT(2), 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_COS_GLBL_INFO_SET_GLBL_INFO_SET_GLBL_INFO_UP_AND_DP_TO_PCP_0_ID,                                                            
    "UP_and_DP_to_PCP_0",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  glbl_info.UP_and_DP_to_PCP[0]:\r\n"
    "  + 1][2]  Mapping of PCP to DE. up_and_dp_to_pcp[t][x][y]=z maps UP 'y' and DP\r\n"
    "  x (0,rest) of table 't' to DP 'z'. Range 0-1\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api cos glbl_info_set UP_and_DP_to_PCP_3 0\r\n"
    "  UP_and_DP_to_PCP_2 0 UP_and_DP_to_PCP_1 0\r\n"
    "  UP_and_DP_to_PCP_0 0 PCP_to_DE_3 0 PCP_to_DE_2 0\r\n"
    "  PCP_to_DE_1 0 PCP_to_DE_0 0 PCP_to_UP_3 0\r\n"
    "  PCP_to_UP_2 0 PCP_to_UP_1 0 PCP_to_UP_0 0\r\n"
    "  DE_to_DP_DE_1_DP_val 0 DE_to_DP_DE_0_DP_val 0\r\n"
    "  UP_to_DP_1 0 UP_to_DP_0 0 TC_to_UP 0\r\n"
    "  UP_to_TC_3 0 UP_to_TC_2 0 UP_to_TC_1 0\r\n"
    "  UP_to_TC_0 0\r\n"
    "",
    "",                                                                                  
    {0, BIT(2), 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_COS_GLBL_INFO_SET_GLBL_INFO_SET_GLBL_INFO_PCP_TO_DE_3_ID,                                                            
    "PCP_to_DE_3",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  glbl_info.PCP_to_DE[3]:\r\n"
    "  + 1]  Mapping of PCP to DE. pcp_to_de[x][y]=z maps UP 'y' of table 'x' to DP\r\n"
    "  'z'. Range 0-1\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api cos glbl_info_set UP_and_DP_to_PCP_3 0\r\n"
    "  UP_and_DP_to_PCP_2 0 UP_and_DP_to_PCP_1 0\r\n"
    "  UP_and_DP_to_PCP_0 0 PCP_to_DE_3 0 PCP_to_DE_2 0\r\n"
    "  PCP_to_DE_1 0 PCP_to_DE_0 0 PCP_to_UP_3 0\r\n"
    "  PCP_to_UP_2 0 PCP_to_UP_1 0 PCP_to_UP_0 0\r\n"
    "  DE_to_DP_DE_1_DP_val 0 DE_to_DP_DE_0_DP_val 0\r\n"
    "  UP_to_DP_1 0 UP_to_DP_0 0 TC_to_UP 0\r\n"
    "  UP_to_TC_3 0 UP_to_TC_2 0 UP_to_TC_1 0\r\n"
    "  UP_to_TC_0 0\r\n"
    "",
    "",                                                                                  
    {0, BIT(2), 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_COS_GLBL_INFO_SET_GLBL_INFO_SET_GLBL_INFO_PCP_TO_DE_2_ID,                                                            
    "PCP_to_DE_2",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  glbl_info.PCP_to_DE[2]:\r\n"
    "  + 1]  Mapping of PCP to DE. pcp_to_de[x][y]=z maps UP 'y' of table 'x' to DP\r\n"
    "  'z'. Range 0-1\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api cos glbl_info_set UP_and_DP_to_PCP_3 0\r\n"
    "  UP_and_DP_to_PCP_2 0 UP_and_DP_to_PCP_1 0\r\n"
    "  UP_and_DP_to_PCP_0 0 PCP_to_DE_3 0 PCP_to_DE_2 0\r\n"
    "  PCP_to_DE_1 0 PCP_to_DE_0 0 PCP_to_UP_3 0\r\n"
    "  PCP_to_UP_2 0 PCP_to_UP_1 0 PCP_to_UP_0 0\r\n"
    "  DE_to_DP_DE_1_DP_val 0 DE_to_DP_DE_0_DP_val 0\r\n"
    "  UP_to_DP_1 0 UP_to_DP_0 0 TC_to_UP 0\r\n"
    "  UP_to_TC_3 0 UP_to_TC_2 0 UP_to_TC_1 0\r\n"
    "  UP_to_TC_0 0\r\n"
    "",
    "",                                                                                  
    {0, BIT(2), 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_COS_GLBL_INFO_SET_GLBL_INFO_SET_GLBL_INFO_PCP_TO_DE_1_ID,                                                            
    "PCP_to_DE_1",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  glbl_info.PCP_to_DE[1]:\r\n"
    "  + 1]  Mapping of PCP to DE. pcp_to_de[x][y]=z maps UP 'y' of table 'x' to DP\r\n"
    "  'z'. Range 0-1\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api cos glbl_info_set UP_and_DP_to_PCP_3 0\r\n"
    "  UP_and_DP_to_PCP_2 0 UP_and_DP_to_PCP_1 0\r\n"
    "  UP_and_DP_to_PCP_0 0 PCP_to_DE_3 0 PCP_to_DE_2 0\r\n"
    "  PCP_to_DE_1 0 PCP_to_DE_0 0 PCP_to_UP_3 0\r\n"
    "  PCP_to_UP_2 0 PCP_to_UP_1 0 PCP_to_UP_0 0\r\n"
    "  DE_to_DP_DE_1_DP_val 0 DE_to_DP_DE_0_DP_val 0\r\n"
    "  UP_to_DP_1 0 UP_to_DP_0 0 TC_to_UP 0\r\n"
    "  UP_to_TC_3 0 UP_to_TC_2 0 UP_to_TC_1 0\r\n"
    "  UP_to_TC_0 0\r\n"
    "",
    "",                                                                                  
    {0, BIT(2), 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_COS_GLBL_INFO_SET_GLBL_INFO_SET_GLBL_INFO_PCP_TO_DE_0_ID,                                                            
    "PCP_to_DE_0",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  glbl_info.PCP_to_DE[0]:\r\n"
    "  + 1]  Mapping of PCP to DE. pcp_to_de[x][y]=z maps UP 'y' of table 'x' to DP\r\n"
    "  'z'. Range 0-1\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api cos glbl_info_set UP_and_DP_to_PCP_3 0\r\n"
    "  UP_and_DP_to_PCP_2 0 UP_and_DP_to_PCP_1 0\r\n"
    "  UP_and_DP_to_PCP_0 0 PCP_to_DE_3 0 PCP_to_DE_2 0\r\n"
    "  PCP_to_DE_1 0 PCP_to_DE_0 0 PCP_to_UP_3 0\r\n"
    "  PCP_to_UP_2 0 PCP_to_UP_1 0 PCP_to_UP_0 0\r\n"
    "  DE_to_DP_DE_1_DP_val 0 DE_to_DP_DE_0_DP_val 0\r\n"
    "  UP_to_DP_1 0 UP_to_DP_0 0 TC_to_UP 0\r\n"
    "  UP_to_TC_3 0 UP_to_TC_2 0 UP_to_TC_1 0\r\n"
    "  UP_to_TC_0 0\r\n"
    "",
    "",                                                                                  
    {0, BIT(2), 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_COS_GLBL_INFO_SET_GLBL_INFO_SET_GLBL_INFO_PCP_TO_UP_3_ID,                                                            
    "PCP_to_UP_3",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  glbl_info.PCP_to_UP[3]:\r\n"
    "  + 1]  Mapping of PCP to UP. PCP_to_DP[x][y]=z maps PCP 'y' of table 'x' to UP\r\n"
    "  'z'. Range 0-7\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api cos glbl_info_set UP_and_DP_to_PCP_3 0\r\n"
    "  UP_and_DP_to_PCP_2 0 UP_and_DP_to_PCP_1 0\r\n"
    "  UP_and_DP_to_PCP_0 0 PCP_to_DE_3 0 PCP_to_DE_2 0\r\n"
    "  PCP_to_DE_1 0 PCP_to_DE_0 0 PCP_to_UP_3 0\r\n"
    "  PCP_to_UP_2 0 PCP_to_UP_1 0 PCP_to_UP_0 0\r\n"
    "  DE_to_DP_DE_1_DP_val 0 DE_to_DP_DE_0_DP_val 0\r\n"
    "  UP_to_DP_1 0 UP_to_DP_0 0 TC_to_UP 0\r\n"
    "  UP_to_TC_3 0 UP_to_TC_2 0 UP_to_TC_1 0\r\n"
    "  UP_to_TC_0 0\r\n"
    "",
    "",                                                                                  
    {0, BIT(2), 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_COS_GLBL_INFO_SET_GLBL_INFO_SET_GLBL_INFO_PCP_TO_UP_2_ID,                                                            
    "PCP_to_UP_2",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  glbl_info.PCP_to_UP[2]:\r\n"
    "  + 1]  Mapping of PCP to UP. PCP_to_DP[x][y]=z maps PCP 'y' of table 'x' to UP\r\n"
    "  'z'. Range 0-7\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api cos glbl_info_set UP_and_DP_to_PCP_3 0\r\n"
    "  UP_and_DP_to_PCP_2 0 UP_and_DP_to_PCP_1 0\r\n"
    "  UP_and_DP_to_PCP_0 0 PCP_to_DE_3 0 PCP_to_DE_2 0\r\n"
    "  PCP_to_DE_1 0 PCP_to_DE_0 0 PCP_to_UP_3 0\r\n"
    "  PCP_to_UP_2 0 PCP_to_UP_1 0 PCP_to_UP_0 0\r\n"
    "  DE_to_DP_DE_1_DP_val 0 DE_to_DP_DE_0_DP_val 0\r\n"
    "  UP_to_DP_1 0 UP_to_DP_0 0 TC_to_UP 0\r\n"
    "  UP_to_TC_3 0 UP_to_TC_2 0 UP_to_TC_1 0\r\n"
    "  UP_to_TC_0 0\r\n"
    "",
    "",                                                                                  
    {0, BIT(2), 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_COS_GLBL_INFO_SET_GLBL_INFO_SET_GLBL_INFO_PCP_TO_UP_1_ID,                                                            
    "PCP_to_UP_1",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  glbl_info.PCP_to_UP[1]:\r\n"
    "  + 1]  Mapping of PCP to UP. PCP_to_DP[x][y]=z maps PCP 'y' of table 'x' to UP\r\n"
    "  'z'. Range 0-7\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api cos glbl_info_set UP_and_DP_to_PCP_3 0\r\n"
    "  UP_and_DP_to_PCP_2 0 UP_and_DP_to_PCP_1 0\r\n"
    "  UP_and_DP_to_PCP_0 0 PCP_to_DE_3 0 PCP_to_DE_2 0\r\n"
    "  PCP_to_DE_1 0 PCP_to_DE_0 0 PCP_to_UP_3 0\r\n"
    "  PCP_to_UP_2 0 PCP_to_UP_1 0 PCP_to_UP_0 0\r\n"
    "  DE_to_DP_DE_1_DP_val 0 DE_to_DP_DE_0_DP_val 0\r\n"
    "  UP_to_DP_1 0 UP_to_DP_0 0 TC_to_UP 0\r\n"
    "  UP_to_TC_3 0 UP_to_TC_2 0 UP_to_TC_1 0\r\n"
    "  UP_to_TC_0 0\r\n"
    "",
    "",                                                                                  
    {0, BIT(2), 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_COS_GLBL_INFO_SET_GLBL_INFO_SET_GLBL_INFO_PCP_TO_UP_0_ID,                                                            
    "PCP_to_UP_0",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  glbl_info.PCP_to_UP[0]:\r\n"
    "  + 1]  Mapping of PCP to UP. PCP_to_DP[x][y]=z maps PCP 'y' of table 'x' to UP\r\n"
    "  'z'. Range 0-7\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api cos glbl_info_set UP_and_DP_to_PCP_3 0\r\n"
    "  UP_and_DP_to_PCP_2 0 UP_and_DP_to_PCP_1 0\r\n"
    "  UP_and_DP_to_PCP_0 0 PCP_to_DE_3 0 PCP_to_DE_2 0\r\n"
    "  PCP_to_DE_1 0 PCP_to_DE_0 0 PCP_to_UP_3 0\r\n"
    "  PCP_to_UP_2 0 PCP_to_UP_1 0 PCP_to_UP_0 0\r\n"
    "  DE_to_DP_DE_1_DP_val 0 DE_to_DP_DE_0_DP_val 0\r\n"
    "  UP_to_DP_1 0 UP_to_DP_0 0 TC_to_UP 0\r\n"
    "  UP_to_TC_3 0 UP_to_TC_2 0 UP_to_TC_1 0\r\n"
    "  UP_to_TC_0 0\r\n"
    "",
    "",                                                                                  
    {0, BIT(2), 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_COS_GLBL_INFO_SET_GLBL_INFO_SET_GLBL_INFO_DE_TO_DP_DE_1_DP_VAL_ID,                                                            
    "DE_to_DP_DE_1_DP_val",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  glbl_info.DE_to_DP.DE_1_DP_val:\r\n"
    "  The drop precedence parameter for drop eligible packets.Range 0-3.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api cos glbl_info_set UP_and_DP_to_PCP_3 0\r\n"
    "  UP_and_DP_to_PCP_2 0 UP_and_DP_to_PCP_1 0\r\n"
    "  UP_and_DP_to_PCP_0 0 PCP_to_DE_3 0 PCP_to_DE_2 0\r\n"
    "  PCP_to_DE_1 0 PCP_to_DE_0 0 PCP_to_UP_3 0\r\n"
    "  PCP_to_UP_2 0 PCP_to_UP_1 0 PCP_to_UP_0 0\r\n"
    "  DE_to_DP_DE_1_DP_val 0 DE_to_DP_DE_0_DP_val 0\r\n"
    "  UP_to_DP_1 0 UP_to_DP_0 0 TC_to_UP 0\r\n"
    "  UP_to_TC_3 0 UP_to_TC_2 0 UP_to_TC_1 0\r\n"
    "  UP_to_TC_0 0\r\n"
    "",
    "",                                                                                  
    {0, BIT(2), 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_COS_GLBL_INFO_SET_GLBL_INFO_SET_GLBL_INFO_DE_TO_DP_DE_0_DP_VAL_ID,                                                            
    "DE_to_DP_DE_0_DP_val",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  glbl_info.DE_to_DP.DE_0_DP_val:\r\n"
    "  The drop precedence parameter for non drop eligible packets.Range 0-3.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api cos glbl_info_set UP_and_DP_to_PCP_3 0\r\n"
    "  UP_and_DP_to_PCP_2 0 UP_and_DP_to_PCP_1 0\r\n"
    "  UP_and_DP_to_PCP_0 0 PCP_to_DE_3 0 PCP_to_DE_2 0\r\n"
    "  PCP_to_DE_1 0 PCP_to_DE_0 0 PCP_to_UP_3 0\r\n"
    "  PCP_to_UP_2 0 PCP_to_UP_1 0 PCP_to_UP_0 0\r\n"
    "  DE_to_DP_DE_1_DP_val 0 DE_to_DP_DE_0_DP_val 0\r\n"
    "  UP_to_DP_1 0 UP_to_DP_0 0 TC_to_UP 0\r\n"
    "  UP_to_TC_3 0 UP_to_TC_2 0 UP_to_TC_1 0\r\n"
    "  UP_to_TC_0 0\r\n"
    "",
    "",                                                                                  
    {0, BIT(2), 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_COS_GLBL_INFO_SET_GLBL_INFO_SET_GLBL_INFO_UP_TO_DP_1_ID,                                                            
    "UP_to_DP_1",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  glbl_info.UP_to_DP[1]:\r\n"
    "  + 1]  Mapping of UP to DP. up_to_dp[x][y]=z maps UP 'y' of table 'x' to DP 'z'.\r\n"
    "  Range 0-3\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api cos glbl_info_set UP_and_DP_to_PCP_3 0\r\n"
    "  UP_and_DP_to_PCP_2 0 UP_and_DP_to_PCP_1 0\r\n"
    "  UP_and_DP_to_PCP_0 0 PCP_to_DE_3 0 PCP_to_DE_2 0\r\n"
    "  PCP_to_DE_1 0 PCP_to_DE_0 0 PCP_to_UP_3 0\r\n"
    "  PCP_to_UP_2 0 PCP_to_UP_1 0 PCP_to_UP_0 0\r\n"
    "  DE_to_DP_DE_1_DP_val 0 DE_to_DP_DE_0_DP_val 0\r\n"
    "  UP_to_DP_1 0 UP_to_DP_0 0 TC_to_UP 0\r\n"
    "  UP_to_TC_3 0 UP_to_TC_2 0 UP_to_TC_1 0\r\n"
    "  UP_to_TC_0 0\r\n"
    "",
    "",                                                                                  
    {0, BIT(2), 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_COS_GLBL_INFO_SET_GLBL_INFO_SET_GLBL_INFO_UP_TO_DP_0_ID,                                                            
    "UP_to_DP_0",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  glbl_info.UP_to_DP[0]:\r\n"
    "  + 1]  Mapping of UP to DP. up_to_dp[x][y]=z maps UP 'y' of table 'x' to DP 'z'.\r\n"
    "  Range 0-3\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api cos glbl_info_set UP_and_DP_to_PCP_3 0\r\n"
    "  UP_and_DP_to_PCP_2 0 UP_and_DP_to_PCP_1 0\r\n"
    "  UP_and_DP_to_PCP_0 0 PCP_to_DE_3 0 PCP_to_DE_2 0\r\n"
    "  PCP_to_DE_1 0 PCP_to_DE_0 0 PCP_to_UP_3 0\r\n"
    "  PCP_to_UP_2 0 PCP_to_UP_1 0 PCP_to_UP_0 0\r\n"
    "  DE_to_DP_DE_1_DP_val 0 DE_to_DP_DE_0_DP_val 0\r\n"
    "  UP_to_DP_1 0 UP_to_DP_0 0 TC_to_UP 0\r\n"
    "  UP_to_TC_3 0 UP_to_TC_2 0 UP_to_TC_1 0\r\n"
    "  UP_to_TC_0 0\r\n"
    "",
    "",                                                                                  
    {0, BIT(2), 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_COS_GLBL_INFO_SET_GLBL_INFO_SET_GLBL_INFO_TC_TO_UP_ID,                                                            
    "TC_to_UP",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  glbl_info.TC_to_UP:\r\n"
    "  + 1]  Mapping of Traffic class to UP. tc_to_up[x]=y maps tc 'y' to UP 'z'.\r\n"
    "  Range 0-7\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api cos glbl_info_set UP_and_DP_to_PCP_3 0\r\n"
    "  UP_and_DP_to_PCP_2 0 UP_and_DP_to_PCP_1 0\r\n"
    "  UP_and_DP_to_PCP_0 0 PCP_to_DE_3 0 PCP_to_DE_2 0\r\n"
    "  PCP_to_DE_1 0 PCP_to_DE_0 0 PCP_to_UP_3 0\r\n"
    "  PCP_to_UP_2 0 PCP_to_UP_1 0 PCP_to_UP_0 0\r\n"
    "  DE_to_DP_DE_1_DP_val 0 DE_to_DP_DE_0_DP_val 0\r\n"
    "  UP_to_DP_1 0 UP_to_DP_0 0 TC_to_UP 0\r\n"
    "  UP_to_TC_3 0 UP_to_TC_2 0 UP_to_TC_1 0\r\n"
    "  UP_to_TC_0 0\r\n"
    "",
    "",                                                                                  
    {0, BIT(2), 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_COS_GLBL_INFO_SET_GLBL_INFO_SET_GLBL_INFO_UP_TO_TC_3_ID,                                                            
    "UP_to_TC_3",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  glbl_info.UP_to_TC[3]:\r\n"
    "  + 1]  Mapping of User Priority to Traffic class. up_to_tc[x][y]=z maps UP 'y'\r\n"
    "  of table 'x' to TC 'z'.Range 0-7\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api cos glbl_info_set UP_and_DP_to_PCP_3 0\r\n"
    "  UP_and_DP_to_PCP_2 0 UP_and_DP_to_PCP_1 0\r\n"
    "  UP_and_DP_to_PCP_0 0 PCP_to_DE_3 0 PCP_to_DE_2 0\r\n"
    "  PCP_to_DE_1 0 PCP_to_DE_0 0 PCP_to_UP_3 0\r\n"
    "  PCP_to_UP_2 0 PCP_to_UP_1 0 PCP_to_UP_0 0\r\n"
    "  DE_to_DP_DE_1_DP_val 0 DE_to_DP_DE_0_DP_val 0\r\n"
    "  UP_to_DP_1 0 UP_to_DP_0 0 TC_to_UP 0\r\n"
    "  UP_to_TC_3 0 UP_to_TC_2 0 UP_to_TC_1 0\r\n"
    "  UP_to_TC_0 0\r\n"
    "",
    "",                                                                                  
    {0, BIT(2), 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_COS_GLBL_INFO_SET_GLBL_INFO_SET_GLBL_INFO_UP_TO_TC_2_ID,                                                            
    "UP_to_TC_2",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  glbl_info.UP_to_TC[2]:\r\n"
    "  + 1]  Mapping of User Priority to Traffic class. up_to_tc[x][y]=z maps UP 'y'\r\n"
    "  of table 'x' to TC 'z'.Range 0-7\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api cos glbl_info_set UP_and_DP_to_PCP_3 0\r\n"
    "  UP_and_DP_to_PCP_2 0 UP_and_DP_to_PCP_1 0\r\n"
    "  UP_and_DP_to_PCP_0 0 PCP_to_DE_3 0 PCP_to_DE_2 0\r\n"
    "  PCP_to_DE_1 0 PCP_to_DE_0 0 PCP_to_UP_3 0\r\n"
    "  PCP_to_UP_2 0 PCP_to_UP_1 0 PCP_to_UP_0 0\r\n"
    "  DE_to_DP_DE_1_DP_val 0 DE_to_DP_DE_0_DP_val 0\r\n"
    "  UP_to_DP_1 0 UP_to_DP_0 0 TC_to_UP 0\r\n"
    "  UP_to_TC_3 0 UP_to_TC_2 0 UP_to_TC_1 0\r\n"
    "  UP_to_TC_0 0\r\n"
    "",
    "",                                                                                  
    {0, BIT(2), 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_COS_GLBL_INFO_SET_GLBL_INFO_SET_GLBL_INFO_UP_TO_TC_1_ID,                                                            
    "UP_to_TC_1",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  glbl_info.UP_to_TC[1]:\r\n"
    "  + 1]  Mapping of User Priority to Traffic class. up_to_tc[x][y]=z maps UP 'y'\r\n"
    "  of table 'x' to TC 'z'.Range 0-7\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api cos glbl_info_set UP_and_DP_to_PCP_3 0\r\n"
    "  UP_and_DP_to_PCP_2 0 UP_and_DP_to_PCP_1 0\r\n"
    "  UP_and_DP_to_PCP_0 0 PCP_to_DE_3 0 PCP_to_DE_2 0\r\n"
    "  PCP_to_DE_1 0 PCP_to_DE_0 0 PCP_to_UP_3 0\r\n"
    "  PCP_to_UP_2 0 PCP_to_UP_1 0 PCP_to_UP_0 0\r\n"
    "  DE_to_DP_DE_1_DP_val 0 DE_to_DP_DE_0_DP_val 0\r\n"
    "  UP_to_DP_1 0 UP_to_DP_0 0 TC_to_UP 0\r\n"
    "  UP_to_TC_3 0 UP_to_TC_2 0 UP_to_TC_1 0\r\n"
    "  UP_to_TC_0 0\r\n"
    "",
    "",                                                                                  
    {0, BIT(2), 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_COS_GLBL_INFO_SET_GLBL_INFO_SET_GLBL_INFO_UP_TO_TC_0_ID,                                                            
    "UP_to_TC_0",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  glbl_info.UP_to_TC[0]:\r\n"
    "  + 1]  Mapping of User Priority to Traffic class. up_to_tc[x][y]=z maps UP 'y'\r\n"
    "  of table 'x' to TC 'z'.Range 0-7\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api cos glbl_info_set UP_and_DP_to_PCP_3 0\r\n"
    "  UP_and_DP_to_PCP_2 0 UP_and_DP_to_PCP_1 0\r\n"
    "  UP_and_DP_to_PCP_0 0 PCP_to_DE_3 0 PCP_to_DE_2 0\r\n"
    "  PCP_to_DE_1 0 PCP_to_DE_0 0 PCP_to_UP_3 0\r\n"
    "  PCP_to_UP_2 0 PCP_to_UP_1 0 PCP_to_UP_0 0\r\n"
    "  DE_to_DP_DE_1_DP_val 0 DE_to_DP_DE_0_DP_val 0\r\n"
    "  UP_to_DP_1 0 UP_to_DP_0 0 TC_to_UP 0\r\n"
    "  UP_to_TC_3 0 UP_to_TC_2 0 UP_to_TC_1 0\r\n"
    "  UP_to_TC_0 0\r\n"
    "",
    "",                                                                                  
    {0, BIT(2), 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_COS_GLBL_INFO_GET_GLBL_INFO_GET_ID,                                                            
    "glbl_info_get",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Sets the global information of COS module mapping including:\r\n"
    "  - UP to TC\r\n"
    "  - TC to UP\r\n"
    "  - UP to DP\r\n"
    "  - DE to DP\r\n"
    "  - PCP Decoding (PCP to UP and DE)\r\n"
    "  - PCP Encoding (UP and DP (!= 0) to PCP)\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api cos glbl_info_get\r\n"
    "",
    "",                                                                                  
    {0, BIT(3), 0, 0},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_COS_PORT_INFO_SET_PORT_INFO_SET_ID,                                                            
    "port_info_set",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Set the CoS per port information.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api cos port_info_set prt_ndx 0 use_DEI 0\r\n"
    "  tbls_ndxs_UP_and_DP_to_PCP_ndx 0\r\n"
    "  tbls_ndxs_PCP_to_UP_and_DE_ndx 0 tbls_ndxs_UP_to_DP_ndx 0\r\n"
    "  tbls_ndxs_UP_to_TC_ndx 0 UP_use_is_vld_for_out_UP 0\r\n"
    "  UP_use_is_vld_for_TC 0\r\n"
    "",
    "",                                                                                  
    {0, BIT(4), 0, 0},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_COS_PORT_INFO_SET_PORT_INFO_SET_PORT_NDX_ID,                                                            
    "prt_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  port_ndx:\r\n"
    "  The Local port to configure. In VLAN bridge (802.1q) this is identical to the\r\n"
    "  local physical port id.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api cos port_info_set prt_ndx 0 use_DEI 0\r\n"
    "  tbls_ndxs_UP_and_DP_to_PCP_ndx 0\r\n"
    "  tbls_ndxs_PCP_to_UP_and_DE_ndx 0 tbls_ndxs_UP_to_DP_ndx 0\r\n"
    "  tbls_ndxs_UP_to_TC_ndx 0 UP_use_is_vld_for_out_UP 0\r\n"
    "  UP_use_is_vld_for_TC 0\r\n"
    "",
    "",                                                                                  
    {0, BIT(4), 0, 0},                                                                              
    3,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_COS_PORT_INFO_SET_PORT_INFO_SET_PORT_INFO_USE_DEI_ID,                                                            
    "Use_DEI",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  port_info.use_DEI:\r\n"
    "  If set, the port uses the DEI. Valid only for CNP and PNP ports\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api cos port_info_set prt_ndx 0 use_DEI 0\r\n"
    "  tbls_ndxs_UP_and_DP_to_PCP_ndx 0\r\n"
    "  tbls_ndxs_PCP_to_UP_and_DE_ndx 0 tbls_ndxs_UP_to_DP_ndx 0\r\n"
    "  tbls_ndxs_UP_to_TC_ndx 0 UP_use_is_vld_for_out_UP 0\r\n"
    "  UP_use_is_vld_for_TC 0\r\n"
    "",
    "",                                                                                  
    {0, BIT(4), 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_COS_PORT_INFO_SET_PORT_INFO_SET_PORT_INFO_TABLES_INDEXES_UP_AND_DP_TO_PCP_INDEX_ID,                                                            
    "tbls_ndxs_UP_and_DP_to_PCP_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  port_info.tables_indexes.UP_and_DP_to_PCP_index:\r\n"
    "  The index of the table that the port uses for mapping UP and DP (equal or\r\n"
    "  different than zero) to outcoming PCP.Should be called after\r\n"
    "  'TIMNA_cos_glb_info_set'Range 0-3\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api cos port_info_set prt_ndx 0 use_DEI 0\r\n"
    "  tbls_ndxs_UP_and_DP_to_PCP_ndx 0\r\n"
    "  tbls_ndxs_PCP_to_UP_and_DE_ndx 0 tbls_ndxs_UP_to_DP_ndx 0\r\n"
    "  tbls_ndxs_UP_to_TC_ndx 0 UP_use_is_vld_for_out_UP 0\r\n"
    "  UP_use_is_vld_for_TC 0\r\n"
    "",
    "",                                                                                  
    {0, BIT(4), 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_COS_PORT_INFO_SET_PORT_INFO_SET_PORT_INFO_TABLES_INDEXES_PCP_TO_UP_AND_DE_INDEX_ID,                                                            
    "tbls_ndxs_PCP_to_UP_and_DE_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  port_info.tables_indexes.PCP_to_UP_and_DE_index:\r\n"
    "  The index of the table that the port uses for mapping incoming PCP to UP and\r\n"
    "  DE.Should be called after 'TIMNA_cos_glb_info_set'Range 0-3\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api cos port_info_set prt_ndx 0 use_DEI 0\r\n"
    "  tbls_ndxs_UP_and_DP_to_PCP_ndx 0\r\n"
    "  tbls_ndxs_PCP_to_UP_and_DE_ndx 0 tbls_ndxs_UP_to_DP_ndx 0\r\n"
    "  tbls_ndxs_UP_to_TC_ndx 0 UP_use_is_vld_for_out_UP 0\r\n"
    "  UP_use_is_vld_for_TC 0\r\n"
    "",
    "",                                                                                  
    {0, BIT(4), 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_COS_PORT_INFO_SET_PORT_INFO_SET_PORT_INFO_TABLES_INDEXES_UP_TO_DP_INDEX_ID,                                                            
    "tbls_ndxs_UP_to_DP_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  port_info.tables_indexes.UP_to_DP_index:\r\n"
    "  The index of the table that the port uses for mapping incoming UP to\r\n"
    "  DP.Should be called after 'TIMNA_cos_glb_info_set'Range 0-1\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api cos port_info_set prt_ndx 0 use_DEI 0\r\n"
    "  tbls_ndxs_UP_and_DP_to_PCP_ndx 0\r\n"
    "  tbls_ndxs_PCP_to_UP_and_DE_ndx 0 tbls_ndxs_UP_to_DP_ndx 0\r\n"
    "  tbls_ndxs_UP_to_TC_ndx 0 UP_use_is_vld_for_out_UP 0\r\n"
    "  UP_use_is_vld_for_TC 0\r\n"
    "",
    "",                                                                                  
    {0, BIT(4), 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_COS_PORT_INFO_SET_PORT_INFO_SET_PORT_INFO_TABLES_INDEXES_UP_TO_TC_INDEX_ID,                                                            
    "tbls_ndxs_UP_to_TC_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  port_info.tables_indexes.UP_to_TC_index:\r\n"
    "  The index of the table that the port uses for mapping incoming UP to\r\n"
    "  TC.Should be called after 'TIMNA_cos_glb_info_set'Range 0-3\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api cos port_info_set prt_ndx 0 use_DEI 0\r\n"
    "  tbls_ndxs_UP_and_DP_to_PCP_ndx 0\r\n"
    "  tbls_ndxs_PCP_to_UP_and_DE_ndx 0 tbls_ndxs_UP_to_DP_ndx 0\r\n"
    "  tbls_ndxs_UP_to_TC_ndx 0 UP_use_is_vld_for_out_UP 0\r\n"
    "  UP_use_is_vld_for_TC 0\r\n"
    "",
    "",                                                                                  
    {0, BIT(4), 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_COS_PORT_INFO_SET_PORT_INFO_SET_PORT_INFO_UP_USE_IS_VALID_FOR_OUT_UP_ID,                                                            
    "UP_use_is_vld_for_out_UP",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  port_info.UP_use.is_valid_for_out_UP:\r\n"
    "  When valid, the incoming UP also affect the calculation of the UP to be sent\r\n"
    "  when leaving the bridge (router)Should only be valid when\r\n"
    "  'Is_in_up_valid_for_tc' is valid.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api cos port_info_set prt_ndx 0 use_DEI 0\r\n"
    "  tbls_ndxs_UP_and_DP_to_PCP_ndx 0\r\n"
    "  tbls_ndxs_PCP_to_UP_and_DE_ndx 0 tbls_ndxs_UP_to_DP_ndx 0\r\n"
    "  tbls_ndxs_UP_to_TC_ndx 0 UP_use_is_vld_for_out_UP 0\r\n"
    "  UP_use_is_vld_for_TC 0\r\n"
    "",
    "",                                                                                  
    {0, BIT(4), 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_COS_PORT_INFO_SET_PORT_INFO_SET_PORT_INFO_UP_USE_IS_VALID_FOR_TC_ID,                                                            
    "UP_use_is_vld_for_TC",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  port_info.UP_use.is_valid_for_TC:\r\n"
    "  Should the UP that arrived with the packet, take place in the calculation of\r\n"
    "  TC\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api cos port_info_set prt_ndx 0 use_DEI 0\r\n"
    "  tbls_ndxs_UP_and_DP_to_PCP_ndx 0\r\n"
    "  tbls_ndxs_PCP_to_UP_and_DE_ndx 0 tbls_ndxs_UP_to_DP_ndx 0\r\n"
    "  tbls_ndxs_UP_to_TC_ndx 0 UP_use_is_vld_for_out_UP 0\r\n"
    "  UP_use_is_vld_for_TC 0\r\n"
    "",
    "",                                                                                  
    {0, BIT(4), 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_COS_PORT_INFO_GET_PORT_INFO_GET_ID,                                                            
    "port_info_get",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Set the CoS per port information.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api cos port_info_get prt_ndx 0\r\n"
    "",
    "",                                                                                  
    {0, BIT(5), 0, 0},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_COS_PORT_INFO_GET_PORT_INFO_GET_PORT_NDX_ID,                                                            
    "prt_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  port_ndx:\r\n"
    "  The Local port to configure. In VLAN bridge (802.1q) this is identical to the\r\n"
    "  local physical port id.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api cos port_info_get prt_ndx 0\r\n"
    "",
    "",                                                                                  
    {0, BIT(5), 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_API_COS_ID,                                                            
    "cos",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "",
    "",
    "",                                                                                  
    {0, BIT(2)|BIT(3)|BIT(4)|BIT(5), 0, 0},                                                                              
    1,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
#endif /* } cos*/
#ifdef UI_PHY_PORT/* { phy_port*/
  {                                                                                        
    PARAM_TIMNA_TIMNA_PORT_PHYSICAL_INFO_SET_PORT_PHYSICAL_INFO_SET_ID,                                                            
    "port_physical_info_set",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Set the physical port parameters.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api phy_port port_physical_info_set prt_ndx 0 enable 0\r\n"
    "  prt_typ 0 mtu 0 mtu_vltn_ctn 0\r\n"
    "",
    "",                                                                                  
    {0, BIT(8), 0, 0},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_PORT_PHYSICAL_INFO_SET_PORT_PHYSICAL_INFO_SET_PORT_NDX_ID,                                                            
    "prt_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  port_ndx:\r\n"
    "  The local port ID. Range 0-31.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api phy_port port_physical_info_set prt_ndx 0 enable 0\r\n"
    "  prt_typ 0 mtu 0 mtu_vltn_ctn 0\r\n"
    "",
    "",                                                                                  
    {0, BIT(8), 0, 0},                                                                              
    3,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_PORT_PHYSICAL_INFO_SET_PORT_PHYSICAL_INFO_SET_PORT_INFO_ENABLE_ID,                                                            
    "enable",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  port_info.enable:\r\n"
    "  Enable / Disable port\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api phy_port port_physical_info_set prt_ndx 0 enable 0\r\n"
    "  prt_typ 0 mtu 0 mtu_vltn_ctn 0\r\n"
    "",
    "",                                                                                  
    {0, BIT(8), 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_PORT_PHYSICAL_INFO_SET_PORT_PHYSICAL_INFO_SET_PORT_INFO_PORT_TYPE_ID,                                                            
    "prt_typ",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  port_info.port_type:\r\n"
    "  Port type\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api phy_port port_physical_info_set prt_ndx 0 enable 0\r\n"
    "  prt_typ 0 mtu 0 mtu_vltn_ctn 0\r\n"
    "",
    "",                                                                                  
    {0, BIT(8), 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_PORT_PHYSICAL_INFO_SET_PORT_PHYSICAL_INFO_SET_PORT_INFO_MTU_ID,                                                            
    "mtu",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  port_info.mtu:\r\n"
    "  Maximum Transmission Unit. Maximum packet size in bytes. \r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api phy_port port_physical_info_set prt_ndx 0 enable 0\r\n"
    "  prt_typ 0 mtu 0 mtu_vltn_ctn 0\r\n"
    "",
    "",                                                                                  
    {0, BIT(8), 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_PORT_PHYSICAL_INFO_SET_PORT_PHYSICAL_INFO_SET_PORT_INFO_MTU_VIOLATION_ACTION_ID,                                                            
    "mtu_vltn_ctn",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  port_info.mtu_violation_action:\r\n"
    "  Forward, Drop, or Trap\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api phy_port port_physical_info_set prt_ndx 0 enable 0\r\n"
    "  prt_typ 0 mtu 0 mtu_vltn_ctn 0\r\n"
    "",
    "",                                                                                  
    {0, BIT(8), 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_PORT_PHYSICAL_INFO_GET_PORT_PHYSICAL_INFO_GET_ID,                                                            
    "port_physical_info_get",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Set the physical port parameters.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api phy_port port_physical_info_get prt_ndx 0\r\n"
    "",
    "",                                                                                  
    {0, BIT(9), 0, 0},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_PORT_PHYSICAL_INFO_GET_PORT_PHYSICAL_INFO_GET_PORT_NDX_ID,                                                            
    "prt_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  port_ndx:\r\n"
    "  The local port ID. Range 0-31.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api phy_port port_physical_info_get prt_ndx 0\r\n"
    "",
    "",                                                                                  
    {0, BIT(9), 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_LOCAL_PORT_L2_TYPE_SET_LOCAL_PORT_L2_TYPE_SET_ID,                                                            
    "local_port_l2_type_set",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Set the l2 type of the port.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api phy_port local_port_l2_type_set prt_ndx 0 prt_typ 0\r\n"
    "",
    "",                                                                                  
    {0, BIT(10), 0, 0},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_LOCAL_PORT_L2_TYPE_SET_LOCAL_PORT_L2_TYPE_SET_PORT_NDX_ID,                                                            
    "prt_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  port_ndx:\r\n"
    "  The local port ID. Range 0-31.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api phy_port local_port_l2_type_set prt_ndx 0 prt_typ 0\r\n"
    "",
    "",                                                                                  
    {0, BIT(10), 0, 0},                                                                              
    3,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_LOCAL_PORT_L2_TYPE_SET_LOCAL_PORT_L2_TYPE_SET_PORT_TYPE_ID,                                                            
    "prt_typ",                                                                       
    (PARAM_VAL_RULES *)&SOC_SAND_PP_PORT_L2_TYPE_rule[0],                                            
    (sizeof(SOC_SAND_PP_PORT_L2_TYPE_rule) / sizeof(SOC_SAND_PP_PORT_L2_TYPE_rule[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  port_type:\r\n"
    "  The port type.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api phy_port local_port_l2_type_set prt_ndx 0 prt_typ 0\r\n"
    "",
    "",                                                                                  
    {0, BIT(10), 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_LOCAL_PORT_L2_TYPE_GET_LOCAL_PORT_L2_TYPE_GET_ID,                                                            
    "local_port_l2_type_get",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Set the l2 type of the port.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api phy_port local_port_l2_type_get prt_ndx 0\r\n"
    "",
    "",                                                                                  
    {0, BIT(11), 0, 0},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_LOCAL_PORT_L2_TYPE_GET_LOCAL_PORT_L2_TYPE_GET_PORT_NDX_ID,                                                            
    "prt_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  port_ndx:\r\n"
    "  The local port ID. Range 0-31.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api phy_port local_port_l2_type_get prt_ndx 0\r\n"
    "",
    "",                                                                                  
    {0, BIT(11), 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_PORT_GLOBAL_LAG_INFO_SET_PORT_GLOBAL_LAG_INFO_SET_ID,                                                            
    "port_global_lag_info_set",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Set the global Link Aggregations ranges.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api phy_port port_global_lag_info_set\r\n"
    "  rlg_4_rng_lst_systm_prt_id 0\r\n"
    "  rlg_4_rng_frst_systm_prt_id 0\r\n"
    "  rlg_2_rng_lst_systm_prt_id 0\r\n"
    "  rlg_2_rng_frst_systm_prt_id 0\r\n"
    "",
    "",                                                                                  
    {0, BIT(12), 0, 0},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_PORT_GLOBAL_LAG_INFO_SET_PORT_GLOBAL_LAG_INFO_SET_GLBL_LAB_INFO_RLAG_4_RANGE_LAST_SYSTEM_PORT_ID_ID,                                                            
    "rlg_4_rng_lst_systm_prt_id",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  glbl_lab_info.rlag_4_range.last_system_port_id:\r\n"
    "  The last port ID that belong to the range\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api phy_port port_global_lag_info_set\r\n"
    "  rlg_4_rng_lst_systm_prt_id 0\r\n"
    "  rlg_4_rng_frst_systm_prt_id 0\r\n"
    "  rlg_2_rng_lst_systm_prt_id 0\r\n"
    "  rlg_2_rng_frst_systm_prt_id 0\r\n"
    "",
    "",                                                                                  
    {0, BIT(12), 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_PORT_GLOBAL_LAG_INFO_SET_PORT_GLOBAL_LAG_INFO_SET_GLBL_LAB_INFO_RLAG_4_RANGE_FIRST_SYSTEM_PORT_ID_ID,                                                            
    "rlg_4_rng_frst_systm_prt_id",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  glbl_lab_info.rlag_4_range.first_system_port_id:\r\n"
    "  The first port ID that belong to the range\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api phy_port port_global_lag_info_set\r\n"
    "  rlg_4_rng_lst_systm_prt_id 0\r\n"
    "  rlg_4_rng_frst_systm_prt_id 0\r\n"
    "  rlg_2_rng_lst_systm_prt_id 0\r\n"
    "  rlg_2_rng_frst_systm_prt_id 0\r\n"
    "",
    "",                                                                                  
    {0, BIT(12), 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_PORT_GLOBAL_LAG_INFO_SET_PORT_GLOBAL_LAG_INFO_SET_GLBL_LAB_INFO_RLAG_2_RANGE_LAST_SYSTEM_PORT_ID_ID,                                                            
    "rlg_2_rng_lst_systm_prt_id",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  glbl_lab_info.rlag_2_range.last_system_port_id:\r\n"
    "  The last port ID that belong to the range\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api phy_port port_global_lag_info_set\r\n"
    "  rlg_4_rng_lst_systm_prt_id 0\r\n"
    "  rlg_4_rng_frst_systm_prt_id 0\r\n"
    "  rlg_2_rng_lst_systm_prt_id 0\r\n"
    "  rlg_2_rng_frst_systm_prt_id 0\r\n"
    "",
    "",                                                                                  
    {0, BIT(12), 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_PORT_GLOBAL_LAG_INFO_SET_PORT_GLOBAL_LAG_INFO_SET_GLBL_LAB_INFO_RLAG_2_RANGE_FIRST_SYSTEM_PORT_ID_ID,                                                            
    "rlg_2_rng_frst_systm_prt_id",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  glbl_lab_info.rlag_2_range.first_system_port_id:\r\n"
    "  The first port ID that belong to the range\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api phy_port port_global_lag_info_set\r\n"
    "  rlg_4_rng_lst_systm_prt_id 0\r\n"
    "  rlg_4_rng_frst_systm_prt_id 0\r\n"
    "  rlg_2_rng_lst_systm_prt_id 0\r\n"
    "  rlg_2_rng_frst_systm_prt_id 0\r\n"
    "",
    "",                                                                                  
    {0, BIT(12), 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_PORT_GLOBAL_LAG_INFO_GET_PORT_GLOBAL_LAG_INFO_GET_ID,                                                            
    "port_global_lag_info_get",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Set the global Link Aggregations ranges.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api phy_port port_global_lag_info_get\r\n"
    "",
    "",                                                                                  
    {0, BIT(13), 0, 0},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_PORT_MAP_LOCAL_TO_SINGLE_SYSTEM_SET_PORT_MAP_LOCAL_TO_SINGLE_SYSTEM_SET_ID,                                                            
    "port_map_local_to_single_system_set",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Set mapping from local port id on the device to single system port.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api phy_port port_map_local_to_single_system_set prt_ndx 0 systm_prt_id\r\n"
    "  0\r\n"
    "",
    "",                                                                                  
    {0, BIT(14), 0, 0},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_PORT_MAP_LOCAL_TO_SINGLE_SYSTEM_SET_PORT_MAP_LOCAL_TO_SINGLE_SYSTEM_SET_PORT_NDX_ID,                                                            
    "prt_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  port_ndx:\r\n"
    "  The id of the local port in the device. Range 0-31.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api phy_port port_map_local_to_single_system_set prt_ndx 0 systm_prt_id\r\n"
    "  0\r\n"
    "",
    "",                                                                                  
    {0, BIT(14), 0, 0},                                                                              
    3,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_PORT_MAP_LOCAL_TO_SINGLE_SYSTEM_SET_PORT_MAP_LOCAL_TO_SINGLE_SYSTEM_SET_SYSTEM_PORT_ID_ID,                                                            
    "systm_prt_id",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  system_port_id:\r\n"
    "  The system port id. Range 0- 4095. \r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api phy_port port_map_local_to_single_system_set prt_ndx 0 systm_prt_id\r\n"
    "  0\r\n"
    "",
    "",                                                                                  
    {0, BIT(14), 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_PORT_MAP_LOCAL_TO_SINGLE_SYSTEM_GET_PORT_MAP_LOCAL_TO_SINGLE_SYSTEM_GET_ID,                                                            
    "port_map_local_to_system_get",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Get mapping from local port id on the device to system port.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api phy_port port_map_local_to_system_get prt_ndx 0\r\n"
    "",
    "",                                                                                  
    {0, BIT(15), 0, 0},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_PORT_MAP_LOCAL_TO_SINGLE_SYSTEM_GET_PORT_MAP_LOCAL_TO_SINGLE_SYSTEM_GET_PORT_NDX_ID,                                                            
    "prt_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  port_ndx:\r\n"
    "  The id of the local port in the device. Range 0-31.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api phy_port port_map_local_to_system_get prt_ndx 0\r\n"
    "",
    "",                                                                                  
    {0, BIT(15), 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_PORT_MAP_LOCAL_TO_GLAG_SET_PORT_MAP_LOCAL_TO_GLAG_SET_ID,                                                            
    "port_map_local_to_glag_set",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Set mapping from local port id on the device to system GLAG.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api phy_port port_map_local_to_glag_set prt_ndx 0 lag_id 0\r\n"
    "",
    "",                                                                                  
    {0, BIT(16), 0, 0},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_PORT_MAP_LOCAL_TO_GLAG_SET_PORT_MAP_LOCAL_TO_GLAG_SET_PORT_NDX_ID,                                                            
    "prt_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  port_ndx:\r\n"
    "  The id of the local port in the device.\r\n"
    "  Range 0-31.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api phy_port port_map_local_to_glag_set prt_ndx 0 lag_id 0\r\n"
    "",
    "",                                                                                  
    {0, BIT(16), 0, 0},                                                                              
    3,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_PORT_MAP_LOCAL_TO_GLAG_SET_PORT_MAP_LOCAL_TO_GLAG_SET_LAG_ID_ID,                                                            
    "lag_id",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  lag_id:\r\n"
    "  The group id.\r\n"
    "  Range 0-255.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api phy_port port_map_local_to_glag_set prt_ndx 0 lag_id 0\r\n"
    "",
    "",                                                                                  
    {0, BIT(16), 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_PORT_MAP_LOCAL_TO_GLAG_SET_PORT_MAP_LOCAL_TO_GLAG_SET_MEMBER_ID_ID,                                                            
    "mmbr_id",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  member_id:\r\n"
    "  The member id inside the lag. Range 0-15.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api phy_port port_map_local_to_glag_set prt_ndx 0 lag_id 0\r\n"
    "",
    "",                                                                                  
    {0, BIT(16), 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_PORT_MAP_LOCAL_TO_GLAG_GET_PORT_MAP_LOCAL_TO_GLAG_GET_ID,                                                            
    "port_map_local_to_glag_get",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Set mapping from local port id on the device to system GLAG.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api phy_port port_map_local_to_glag_get prt_ndx 0\r\n"
    "",
    "",                                                                                  
    {0, BIT(17), 0, 0},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_PORT_MAP_LOCAL_TO_GLAG_GET_PORT_MAP_LOCAL_TO_GLAG_GET_PORT_NDX_ID,                                                            
    "prt_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  port_ndx:\r\n"
    "  The id of the local port in the device.\r\n"
    "  Range 0-31.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api phy_port port_map_local_to_glag_get prt_ndx 0\r\n"
    "",
    "",                                                                                  
    {0, BIT(17), 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_PORT_MAP_LOCAL_TO_RLAG_SET_PORT_MAP_LOCAL_TO_RLAG_SET_ID,                                                            
    "port_map_local_to_rlag_set",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Set mapping from local port id on the device to system LAGs.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api phy_port port_map_local_to_rlag_set prt_ndx 0 lag_typ 2\r\n"
    "",
    "",                                                                                  
    {0, BIT(18), 0, 0},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_PORT_MAP_LOCAL_TO_RLAG_SET_PORT_MAP_LOCAL_TO_RLAG_SET_PORT_NDX_ID,                                                            
    "prt_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  port_ndx:\r\n"
    "  The id of the local port in the device.\r\n"
    "  Range 0-31.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api phy_port port_map_local_to_rlag_set prt_ndx 0 lag_typ 2\r\n"
    "",
    "",                                                                                  
    {0, BIT(18), 0, 0},                                                                              
    3,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_PORT_MAP_LOCAL_TO_RLAG_SET_PORT_MAP_LOCAL_TO_RLAG_SET_LAG_TYPE_ID,                                                            
    "lag_typ",                                                                       
    (PARAM_VAL_RULES *)&TIMNA_PORT_RLAG_TYPE_rule[0],                                            
    (sizeof(TIMNA_PORT_RLAG_TYPE_rule) / sizeof(TIMNA_PORT_RLAG_TYPE_rule[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  lag_type:\r\n"
    "  RLAG(2/4) in the system.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api phy_port port_map_local_to_rlag_set prt_ndx 0 lag_typ 2\r\n"
    "",
    "",                                                                                  
    {0, BIT(18), 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_PORT_MAP_LOCAL_TO_RLAG_SET_PORT_MAP_LOCAL_TO_RLAG_SET_RLAG_ID_ID,                                                            
    "rlg_id",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  rlag_id:\r\n"
    "  The group id.\r\n"
    "  Ranges as configured in timna_port_global_lag_info_set().\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api phy_port port_map_local_to_rlag_set prt_ndx 0 lag_typ 2\r\n"
    "",
    "",                                                                                  
    {0, BIT(18), 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_PORT_MAP_LOCAL_TO_RLAG_SET_PORT_MAP_LOCAL_TO_RLAG_SET_MEMBER_ID_ID,                                                            
    "mmbr_id",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  member_id:\r\n"
    "  The member id inside the lag.\r\n"
    "  Range:\r\n"
    "  For RLAG2 0-1.\r\n"
    "  For RLAG4 0-3.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api phy_port port_map_local_to_rlag_set prt_ndx 0 lag_typ 2\r\n"
    "",
    "",                                                                                  
    {0, BIT(18), 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_PORT_MAP_LOCAL_TO_RLAG_GET_PORT_MAP_LOCAL_TO_RLAG_GET_ID,                                                            
    "port_map_local_to_rlag_get",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Set mapping from local port id on the device to system LAGs.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api phy_port port_map_local_to_rlag_get prt_ndx 0\r\n"
    "",
    "",                                                                                  
    {0, BIT(19), 0, 0},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_PORT_MAP_LOCAL_TO_RLAG_GET_PORT_MAP_LOCAL_TO_RLAG_GET_PORT_NDX_ID,                                                            
    "prt_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  port_ndx:\r\n"
    "  The id of the local port in the device.\r\n"
    "  Range 0-31.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api phy_port port_map_local_to_rlag_get prt_ndx 0\r\n"
    "",
    "",                                                                                  
    {0, BIT(19), 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_GLAG_MEMBERS_SYS_PORTS_SET_GLAG_MEMBERS_SYS_PORTS_SET_ID,                                                            
    "glag_members_sys_ports_set",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Set the system ports that are members in a GLAG, this membership includes all\r\n"
    "  the ports in the system, and not only the ports in this device.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api phy_port glag_members_sys_ports_set glg_id 0\r\n"
    "",
    "",                                                                                  
    {0, BIT(20), 0, 0},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_GLAG_MEMBERS_SYS_PORTS_SET_GLAG_MEMBERS_SYS_PORTS_SET_GLAG_ID_ID,                                                            
    "glg_id",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  glag_id:\r\n"
    "  The group id. Range 0-255.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api phy_port glag_members_sys_ports_set glg_id 0\r\n"
    "  mmbrs_0 0 mmbrs_0 1.\r\n"
    "",
    "",                                                                                  
    {0, BIT(20), 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_GLAG_MEMBERS_SYS_PORTS_SET_GLAG_MEMBERS_SYS_PORTS_SET_MEMBERS_0_ID,                                                            
    "mmbrs_0",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  members:\r\n"
    "  List of the system ports members in this GLAG.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api phy_port glag_members_sys_ports_set glg_id 0\r\n"
    "",
    "",                                                                                  
    {0, BIT(20), 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_GLAG_MEMBERS_SYS_PORTS_SET_GLAG_MEMBERS_SYS_PORTS_SET_MEMBERS_1_ID,                                                            
    "mmbrs_1",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  members:\r\n"
    "  List of the system ports members in this GLAG.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api phy_port glag_members_sys_ports_set glg_id 0\r\n"
    "",
    "",                                                                                  
    {0, BIT(20), 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_GLAG_MEMBERS_SYS_PORTS_SET_GLAG_MEMBERS_SYS_PORTS_SET_NOF_MEMBERS_ID,                                                            
    "nof_mmbrs",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  nof_members:\r\n"
    "  Number of members in this GLAG.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api phy_port glag_members_sys_ports_set glg_id 0\r\n"
    "",
    "",                                                                                  
    {0, BIT(20), 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_GLAG_MEMBERS_SYS_PORTS_GET_GLAG_MEMBERS_SYS_PORTS_GET_ID,                                                            
    "glag_members_sys_ports_get",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Gets the system ports that are members in a GLAG, this membership includes all\r\n"
    "  the ports in the system, and not only the ports in this device.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api phy_port glag_members_sys_ports_get glag_id 0\r\n"
    "",
    "",                                                                                  
    {0, BIT(21), 0, 0},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_GLAG_MEMBERS_SYS_PORTS_SET_GLAG_MEMBERS_SYS_PORTS_GET_GLAG_ID_ID,                                                            
    "glg_id",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  glag_id:\r\n"
    "  The group id. Range 0-255.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api phy_port glag_members_sys_ports_get glg_id 0\r\n"
    "",
    "",                                                                                  
    {0, BIT(21), 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_GLAG_MEMBERS_SYS_PORTS_ADD_GLAG_MEMBERS_SYS_PORTS_ADD_ID,                                                            
    "glag_members_sys_ports_add",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  add sys_port as a member in the GLAG glag_id.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api phy_port glag_members_sys_ports_add glg_id 0 sys_prt 0\r\n"
    "",
    "",                                                                                  
    {0, BIT(22), 0, 0},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_GLAG_MEMBERS_SYS_PORTS_ADD_GLAG_MEMBERS_SYS_PORTS_ADD_GLAG_ID_ID,                                                            
    "glg_id",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  glag_id:\r\n"
    "  The group id. Range 0-255.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api phy_port glag_members_sys_ports_add glg_id 0 sys_prt 0\r\n"
    "",
    "",                                                                                  
    {0, BIT(22), 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_GLAG_MEMBERS_SYS_PORTS_ADD_GLAG_MEMBERS_SYS_PORTS_ADD_SYS_PORT_ID,                                                            
    "sys_prt",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  sys_port:\r\n"
    "  system ports to be added as a member in this GLAG.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api phy_port glag_members_sys_ports_add glg_id 0 sys_prt 0\r\n"
    "",
    "",                                                                                  
    {0, BIT(22), 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_GLAG_MEMBERS_SYS_PORTS_REMOVE_GLAG_MEMBERS_SYS_PORTS_REMOVE_ID,                                                            
    "glag_members_sys_ports_remove",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Remove sys_port as a member in the GLAG glag_id.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api phy_port glag_members_sys_ports_remove glg_id 0 sys_prt 0\r\n"
    "",
    "",                                                                                  
    {0, BIT(23), 0, 0},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_GLAG_MEMBERS_SYS_PORTS_REMOVE_GLAG_MEMBERS_SYS_PORTS_REMOVE_GLAG_ID_ID,                                                            
    "glg_id",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  glag_id:\r\n"
    "  The group id. Range 0-255.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api phy_port glag_members_sys_ports_remove glg_id 0 sys_prt 0\r\n"
    "",
    "",                                                                                  
    {0, BIT(23), 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_GLAG_MEMBERS_SYS_PORTS_REMOVE_GLAG_MEMBERS_SYS_PORTS_REMOVE_SYS_PORT_ID,                                                            
    "sys_prt",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  sys_port:\r\n"
    "  system ports to be removed as a member in this GLAG.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api phy_port glag_members_sys_ports_remove glg_id 0 sys_prt 0\r\n"
    "",
    "",                                                                                  
    {0, BIT(23), 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_API_PHY_PORT_ID,                                                            
    "phy_port",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "",
    "",
    "",                                                                                  
    {0, BIT(8)|BIT(9)|BIT(10)|BIT(11)|BIT(12)|BIT(13)|BIT(14)|BIT(15)|BIT(16)|BIT(17)|BIT(18)|BIT(19)|BIT(20)|BIT(21)|BIT(22)|BIT(23), 0, 0},                                                                              
    1,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
#endif /* } phy_port*/
#ifdef UI_FILTER/* { filter*/
 /* filter qinq moved to qinq module*/
 {                                                                                        
    PARAM_TIMNA_TIMNA_FILTER_PORT_INFO_SET_PORT_INFO_SET_ID,                                                            
    "port_info_set",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Set the per port filtering information.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api filter port_info_set prt_ndx 0 unknown_da_unknown_bc 0\r\n"
    "  unknown_da_unknown_mc 0 unknown_da_unknown_uc 0\r\n"
    "  not_authorized 0 egress_fltr 0 frwrd_action_typs 0\r\n"
    "  ccptd_frms 0\r\n"
    "",
    "",                                                                                  
    {0, BIT(26), 0, 0},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_FILTER_PORT_INFO_SET_PORT_INFO_SET_PORT_NDX_ID,                                                            
    "prt_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  port_ndx:\r\n"
    "  Local port ID. Range 0-31.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api filter port_info_set prt_ndx 0 unknown_da_unknown_bc 0\r\n"
    "  unknown_da_unknown_mc 0 unknown_da_unknown_uc 0\r\n"
    "  not_authorized 0 egress_fltr 0 frwrd_action_typs 0\r\n"
    "  ccptd_frms 0\r\n"
    "",
    "",                                                                                  
    {0, BIT(26), 0, 0},                                                                              
    3,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_FILTER_PORT_INFO_SET_PORT_INFO_SET_PORT_INFO_UNKNOWN_DA_UNKNOWN_BC_ID,                                                            
    "unknown_da_unknown_bc",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  port_info.unknown_da.unknown_bc:\r\n"
    "  If TRUE drop packets with unknown Broadcast destination address. \r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api filter port_info_set prt_ndx 0 unknown_da_unknown_bc 0\r\n"
    "  unknown_da_unknown_mc 0 unknown_da_unknown_uc 0\r\n"
    "  not_authorized 0 egress_fltr 0 frwrd_action_typs 0\r\n"
    "  ccptd_frms 0\r\n"
    "",
    "",                                                                                  
    {0, BIT(26), 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_FILTER_PORT_INFO_SET_PORT_INFO_SET_PORT_INFO_UNKNOWN_DA_UNKNOWN_MC_ID,                                                            
    "unknown_da_unknown_mc",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  port_info.unknown_da.unknown_mc:\r\n"
    "  If TRUE drop packets with unknown Multicast destination address. \r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api filter port_info_set prt_ndx 0 unknown_da_unknown_bc 0\r\n"
    "  unknown_da_unknown_mc 0 unknown_da_unknown_uc 0\r\n"
    "  not_authorized 0 egress_fltr 0 frwrd_action_typs 0\r\n"
    "  ccptd_frms 0\r\n"
    "",
    "",                                                                                  
    {0, BIT(26), 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_FILTER_PORT_INFO_SET_PORT_INFO_SET_PORT_INFO_UNKNOWN_DA_UNKNOWN_UC_ID,                                                            
    "unknown_da_unknown_uc",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  port_info.unknown_da.unknown_uc:\r\n"
    "  If TRUE drop packets with unknown Unicast destination address. \r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api filter port_info_set prt_ndx 0 unknown_da_unknown_bc 0\r\n"
    "  unknown_da_unknown_mc 0 unknown_da_unknown_uc 0\r\n"
    "  not_authorized 0 egress_fltr 0 frwrd_action_typs 0\r\n"
    "  ccptd_frms 0\r\n"
    "",
    "",                                                                                  
    {0, BIT(26), 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_FILTER_PORT_INFO_SET_PORT_INFO_SET_PORT_INFO_AUTHORIZATION_INFO_NOT_AUTHORIZED_ID,                                                            
    "not_authorized",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  port_info.authorization_info.not_authorized:\r\n"
    "  If TRUE, then port operates in non-authorized 802.1x mode and only 802.1x\r\n"
    "  traffic is allowed. (With Ethertype equal 0x888e according to IEEE Std 802.1X\r\n"
    "  - Port-based network access. May be changed by logical access.)If FALSE, then\r\n"
    "  the port is authorized and all traffic is allowed.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api filter port_info_set prt_ndx 0 unknown_da_unknown_bc 0\r\n"
    "  unknown_da_unknown_mc 0 unknown_da_unknown_uc 0\r\n"
    "  not_authorized 0 egress_fltr 0 frwrd_action_typs 0\r\n"
    "  ccptd_frms 0\r\n"
    "",
    "",                                                                                  
    {0, BIT(26), 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_FILTER_PORT_INFO_SET_PORT_INFO_SET_PORT_INFO_EGRESS_FILTER_ID,                                                            
    "egress_fltr",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  port_info.egress_filter:\r\n"
    "  Enable egress filtering.Confirms that the port is a member of the VID to\r\n"
    "  which the packet is classified.If not the packet is dropped\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api filter port_info_set prt_ndx 0 unknown_da_unknown_bc 0\r\n"
    "  unknown_da_unknown_mc 0 unknown_da_unknown_uc 0\r\n"
    "  not_authorized 0 egress_fltr 0 frwrd_action_typs 0\r\n"
    "  ccptd_frms 0\r\n"
    "",
    "",                                                                                  
    {0, BIT(26), 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_FILTER_PORT_INFO_SET_PORT_INFO_SET_PORT_INFO_FRWRD_ACTION_TYPES_ID,                                                            
    "frwrd_action_typs",                                                                       
    (PARAM_VAL_RULES *)&TIMNA_FILTER_ACCEPT_FRWRD_ACTION_TYPE_rule[0],                                            
    (sizeof(TIMNA_FILTER_ACCEPT_FRWRD_ACTION_TYPE_rule) / sizeof(TIMNA_FILTER_ACCEPT_FRWRD_ACTION_TYPE_rule[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  port_info.frwrd_action_types:\r\n"
    "  Determines which packets to filter according to their forwarding action type:\r\n"
    "  control or 'intercept or snoop'.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api filter port_info_set prt_ndx 0 unknown_da_unknown_bc 0\r\n"
    "  unknown_da_unknown_mc 0 unknown_da_unknown_uc 0\r\n"
    "  not_authorized 0 egress_fltr 0 frwrd_action_typs 0\r\n"
    "  ccptd_frms 0\r\n"
    "",
    "",                                                                                  
    {0, BIT(26), 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_FILTER_PORT_INFO_SET_PORT_INFO_SET_PORT_INFO_ACCEPTED_FRAMES_ID,                                                            
    "ccptd_frms",                                                                       
    (PARAM_VAL_RULES *)&TIMNA_FILTER_ACCEPT_FRAME_TYPE_rule[0],                                            
    (sizeof(TIMNA_FILTER_ACCEPT_FRAME_TYPE_rule) / sizeof(TIMNA_FILTER_ACCEPT_FRAME_TYPE_rule[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  port_info.accepted_frames:\r\n"
    "  Determines which frames are accepted and which are filtered (, un\r\n"
    "  and Priority-Tagged)\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api filter port_info_set prt_ndx 0 unknown_da_unknown_bc 0\r\n"
    "  unknown_da_unknown_mc 0 unknown_da_unknown_uc 0\r\n"
    "  not_authorized 0 egress_fltr 0 frwrd_action_typs 0\r\n"
    "  ccptd_frms 0\r\n"
    "",
    "",                                                                                  
    {0, BIT(26), 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_FILTER_PORT_INFO_GET_PORT_INFO_GET_ID,                                                            
    "port_info_get",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Set the per port filtering information.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api filter port_info_get prt_ndx 0\r\n"
    "",
    "",                                                                                  
    {0, BIT(27), 0, 0},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_FILTER_PORT_INFO_GET_PORT_INFO_GET_PORT_NDX_ID,                                                            
    "prt_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  port_ndx:\r\n"
    "  Local port ID. Range 0-31.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api filter port_info_get prt_ndx 0\r\n"
    "",
    "",                                                                                  
    {0, BIT(27), 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VLAN_MEMBERSHIP_PORTS_SET_VLAN_MEMBERSHIP_PORTS_SET_ID,                                                            
    "vsid_eg_membership_ports_set",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Sets the VSI membership; which local ports belong to the VSI.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api filter vsid_eg_membership_ports_set vsid_ndx 0 lcl_prts_0 0\r\n"
    "",
    "",                                                                                  
    {0, BIT(30), 0, 0},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VLAN_MEMBERSHIP_PORTS_SET_VLAN_MEMBERSHIP_PORTS_SET_VID_NDX_ID,                                                            
    "vsid_ndx ",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  vsid_ndx:\r\n"
    "  VSI to set the membership for. Range 0-4095.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api filter vsid_eg_membership_ports_set vsid_ndx  0 lcl_prts_0 0\r\n"
    "",
    "",                                                                                  
    {0, BIT(30), 0, 0},                                                                              
    3,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VLAN_MEMBERSHIP_PORTS_SET_VLAN_MEMBERSHIP_PORTS_SET_LOCAL_PORTS_0_ID,                                                            
    "lcl_prts_0",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  local_ports[0]:\r\n"
    "  i.e. the member ports of vsid_ndx to be set to\r\n"
    "  set to 1 to add the port 0 to the membership, 0 otherwise"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api filter vsid_eg_membership_ports_set vsid_ndx  0 lcl_prts_0 0\r\n"
    "",
    "",                                                                                  
    {0, BIT(30), 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VLAN_MEMBERSHIP_PORTS_SET_VLAN_MEMBERSHIP_PORTS_SET_LOCAL_PORTS_1_ID,                                                            
    "lcl_prts_1",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  local_ports[1]:\r\n"
    "  i.e. the member ports of vsid_ndx to be set to\r\n"
    "  set to 1 to add the port 1 to the membership, 0 otherwise"    
    "",
    "Ex:\r\n"                                                                    
    "  timna_api filter vsid_eg_membership_ports_set vsid_ndx  0 lcl_prts_0 0\r\n"
    "",
    "",                                                                                  
    {0, BIT(30), 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VLAN_MEMBERSHIP_PORTS_GET_VLAN_MEMBERSHIP_PORTS_GET_ID,                                                            
    "vsid_eg_membership_ports_get",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  gets the VSI membership; which local ports belong to the VSI.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api filter vsid_eg_membership_ports_get vsid_ndx  0\r\n"
    "",
    "",                                                                                  
    {0, BIT(31), 0, 0},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VLAN_MEMBERSHIP_PORTS_GET_VLAN_MEMBERSHIP_PORTS_GET_VID_NDX_ID,                                                            
    "vsid_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  vid_ndx:\r\n"
    "  VLAN ID to set the membership for. Range 0-4095.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api filter vsid_eg_membership_ports_get vsid_ndx  0\r\n"
    "",
    "",                                                                                  
    {0, BIT(31), 0, 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VLAN_MEMBERSHIP_PORT_ADD_VLAN_MEMBERSHIP_PORT_ADD_ID,                                                            
    "vsid_eg_membership_port_add",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Add a port as a member in a VSI.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api filter vsid_eg_membership_port_add vsid_ndx 0 lcl_prt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(0), 0},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VLAN_MEMBERSHIP_PORT_ADD_VLAN_MEMBERSHIP_PORT_ADD_VID_NDX_ID,                                                            
    "vsid_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  vsid_ndx:\r\n"
    "  VSI ID. Range 0-16383.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api filter vsid_eg_membership_port_add vsid_ndx 0 lcl_prt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(0), 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VLAN_MEMBERSHIP_PORT_ADD_VLAN_MEMBERSHIP_PORT_ADD_LOCAL_PORT_ID,                                                            
    "lcl_prt",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  local_port:\r\n"
    "  the local port to add to the VSI. Range 0-31.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api filter vsid_eg_membership_port_add vsid_ndx 0 lcl_prt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(0), 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VLAN_MEMBERSHIP_PORT_REMOVE_VLAN_MEMBERSHIP_PORT_REMOVE_ID,                                                            
    "timna_vsid_eg_membership_port_remove",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Remove a port from a VSI membership.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api filter timna_vsid_eg_membership_port_remove vsid_ndx 0 lcl_prt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(1), 0},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VLAN_MEMBERSHIP_PORT_REMOVE_VLAN_MEMBERSHIP_PORT_REMOVE_VID_NDX_ID,                                                            
    "vsid_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  vid_ndx:\r\n"
    "  VSID. Range 0-16383.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api filter timna_vsid_eg_membership_port_remove vsid_ndx 0 lcl_prt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(1), 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VLAN_MEMBERSHIP_PORT_REMOVE_VLAN_MEMBERSHIP_PORT_REMOVE_LOCAL_PORT_ID,                                                            
    "lcl_prt",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  local_port:\r\n"
    "  local_port:\r\n"
    "  the local port to remove from the VSI membership. Range 0-31.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api filter timna_vsid_eg_membership_port_remove vsid_ndx 0 lcl_prt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(1), 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_API_FILTER_ID,                                                            
    "filter",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "",
    "",
    "",                                                                                  
    {0, /* BIT(24)|BIT(25)|*/BIT(26)|BIT(27)|BIT(28)|BIT(29)|BIT(30)|BIT(31), BIT(0)|BIT(1), 0},                                                                              
    1,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
#endif /* } filter*/
#ifdef UI_EDIT/* { edit*/
  {                                                                                        
    PARAM_TIMNA_TIMNA_EDIT_QINQ_CEP_PORT_INFO_SET_QINQ_CEP_PORT_INFO_SET_ID,                                                            
    "qinq_cep_port_info_set",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Set the Editing information for CEP port and a VLAN.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api edit qinq_cep_port_info_set cep_id_ndx 0 vid_ndx 0 c_tggd 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(2), 0},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_EDIT_QINQ_CEP_PORT_INFO_SET_QINQ_CEP_PORT_INFO_SET_CEP_ID_NDX_ID,                                                            
    "cep_id_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  cep_id_ndx:\r\n"
    "  Local port ID. Range 0-31.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api edit qinq_cep_port_info_set cep_id_ndx 0 vid_ndx 0 c_tggd 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(2), 0},                                                                              
    3,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_EDIT_QINQ_CEP_PORT_INFO_SET_QINQ_CEP_PORT_INFO_SET_VID_NDX_ID,                                                            
    "vid_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  vid_ndx:\r\n"
    "  the VLAN ID. Range 0-4095.RETURN\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api edit qinq_cep_port_info_set cep_id_ndx 0 vid_ndx 0 c_tggd 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(2), 0},                                                                              
    3,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_EDIT_QINQ_CEP_PORT_INFO_SET_QINQ_CEP_PORT_INFO_SET_C_TAGGED_ID,                                                            
    "c_tggd",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  c_:\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api edit qinq_cep_port_info_set cep_id_ndx 0 vid_ndx 0 c_tggd 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(2), 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_EDIT_QINQ_CEP_PORT_INFO_GET_QINQ_CEP_PORT_INFO_GET_ID,                                                            
    "qinq_cep_port_info_get",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Set the Editing information for CEP port and a VLAN.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api edit qinq_cep_port_info_get cep_id_ndx 0 vid_ndx 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(3), 0},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_EDIT_QINQ_CEP_PORT_INFO_GET_QINQ_CEP_PORT_INFO_GET_CEP_ID_NDX_ID,                                                            
    "cep_id_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  cep_id_ndx:\r\n"
    "  Local port ID. Range 0-31.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api edit qinq_cep_port_info_get cep_id_ndx 0 vid_ndx 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(3), 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_EDIT_QINQ_CEP_PORT_INFO_GET_QINQ_CEP_PORT_INFO_GET_VID_NDX_ID,                                                            
    "vid_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  vid_ndx:\r\n"
    "  the VLAN ID. Range 0-4095.RETURN\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api edit qinq_cep_port_info_get cep_id_ndx 0 vid_ndx 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(3), 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_EDIT_QINQ_PEP_PORT_INFO_SET_QINQ_PEP_PORT_INFO_SET_ID,                                                            
    "qinq_pep_port_info_set",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Set the Editing information for PEP port.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api edit qinq_pep_port_info_set pep_id_ndx 0 dei 0\r\n"
    "  s_prrty_tggd 0 c_tggd 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(4), 0},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_EDIT_QINQ_PEP_PORT_INFO_SET_QINQ_PEP_PORT_INFO_SET_PEP_ID_NDX_ID,                                                            
    "pep_id_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  pep_id_ndx:\r\n"
    "  ID of the PEP port.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api edit qinq_pep_port_info_set pep_id_ndx 0 dei 0\r\n"
    "  s_prrty_tggd 0 c_tggd 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(4), 0},                                                                              
    3,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_EDIT_QINQ_PEP_PORT_INFO_SET_QINQ_PEP_PORT_INFO_SET_PORT_INFO_DEI_ID,                                                            
    "dei",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  port_info.dei:\r\n"
    "  If TRUE then the PEP sets the DEI bit when generating a priority tag for the\r\n"
    "  SVLAN component.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api edit qinq_pep_port_info_set pep_id_ndx 0 dei 0\r\n"
    "  s_prrty_tggd 0 c_tggd 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(4), 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_EDIT_QINQ_PEP_PORT_INFO_SET_QINQ_PEP_PORT_INFO_SET_PORT_INFO_S_PRIORITY_TAGGED_ID,                                                            
    "s_prrty_tggd",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  port_info.s_priority_:\r\n"
    "  If TRUE the PEP port sends packets with s-priority-tag.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api edit qinq_pep_port_info_set pep_id_ndx 0 dei 0\r\n"
    "  s_prrty_tggd 0 c_tggd 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(4), 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_EDIT_QINQ_PEP_PORT_INFO_SET_QINQ_PEP_PORT_INFO_SET_PORT_INFO_C_TAGGED_ID,                                                            
    "c_tggd",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  port_info.c_:\r\n"
    "  If TRUE the PEP port sends packets with C-tag.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api edit qinq_pep_port_info_set pep_id_ndx 0 dei 0\r\n"
    "  s_prrty_tggd 0 c_tggd 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(4), 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_EDIT_QINQ_PEP_PORT_INFO_GET_QINQ_PEP_PORT_INFO_GET_ID,                                                            
    "qinq_pep_port_info_get",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Set the Editing information for PEP port.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api edit qinq_pep_port_info_get pep_id_ndx 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(5), 0},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_EDIT_QINQ_PEP_PORT_INFO_GET_QINQ_PEP_PORT_INFO_GET_PEP_ID_NDX_ID,                                                            
    "pep_id_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  pep_id_ndx:\r\n"
    "  ID of the PEP port.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api edit qinq_pep_port_info_get pep_id_ndx 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(5), 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_EDIT_PORT_INFO_SET_PORT_INFO_SET_ID,                                                            
    "vsid_port_info_set",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Sets the Editing information for VBP port and a VLAN.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api edit vsid_port_info_set vsd_ndx 0 prt_ndx 0 tggd 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(6), 0},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_EDIT_PORT_INFO_SET_PORT_INFO_SET_PORT_NDX_ID,                                                            
    "prt_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  port_ndx:\r\n"
    "  Local port ID. Range 0-31.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api edit port_info_set prt_ndx 0 vsd_ndx 0 tggd 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(6), 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_EDIT_PORT_INFO_SET_PORT_INFO_SET_VSID_NDX_ID,                                                            
    "vsd_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  vsid_ndx:\r\n"
    "  the VLAN ID. Range 0-4095.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api edit vsid_port_info_set vsd_ndx 0 prt_ndx 0 tggd 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(6), 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_EDIT_PORT_INFO_SET_PORT_INFO_SET_TAGGED_ID,                                                            
    "tggd",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  :\r\n"
    "  If the port send the packets .\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api edit vsid_port_info_set vsd_ndx 0 prt_ndx 0 tggd 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(6), 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_EDIT_PORT_INFO_GET_PORT_INFO_GET_ID,                                                            
    "vsid_port_info_get",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Sets the Editing information for VBP port and a VLAN.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api edit vsid_port_info_set vsd_ndx 0 prt_ndx 0 tggd 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(7), 0},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_EDIT_PORT_INFO_GET_PORT_INFO_GET_PORT_NDX_ID,                                                            
    "prt_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  port_ndx:\r\n"
    "  Local port ID. Range 0-31.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api edit vsid_port_info_set vsd_ndx 0 prt_ndx 0 tggd 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(7), 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_EDIT_PORT_INFO_GET_PORT_INFO_GET_VSID_NDX_ID,                                                            
    "vsd_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  vsid_ndx:\r\n"
    "  the VLAN ID. Range 0-4095.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api edit vsid_port_info_set vsd_ndx 0 prt_ndx 0 tggd 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(7), 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_EDIT_VSID_TO_VID_SET_VSID_TO_VID_SET_ID,                                                            
    "vsid_to_vid_set",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Sets the Editing information; the vid to add to the packet.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api edit vsid_to_vid_set vsd_ndx 0 vid 0\r\n"
    "",
    "",                                                                                  
    {0, BIT(28), 0, 0},                                                                             
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_EDIT_VSID_TO_VID_SET_VSID_TO_VID_SET_VSID_NDX_ID,                                                            
    "vsd_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  vsid_ndx:\r\n"
    "  the VSID. Range 0-16383.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api edit vsid_to_vid_set vsd_ndx 0 vid 0\r\n"
    "",
    "",                                                                                  
    {0, BIT(28), 0, 0},                                                                             
    3,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_EDIT_VSID_TO_VID_SET_VSID_TO_VID_SET_VID_ID,                                                            
    "vid",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  vid:\r\n"
    "  the vlan id to edit packets with the given vsid. Range 0-4095\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api edit vsid_to_vid_set vsd_ndx 0 vid 0\r\n"
    "",
    "",                                                                                  
    {0, BIT(28), 0, 0},                                                                             
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_EDIT_VSID_TO_VID_SET_VSID_TO_VID_GET_ID,                                                            
    "vsid_to_vid_get",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Gets the Editing information; the vid to add to the packet.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api edit vsid_to_vid_get vsd_ndx 0 \r\n"
    "",
    "",                                                                                  
    {0, BIT(29), 0, 0},                                                                             
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_EDIT_VSID_TO_VID_SET_VSID_TO_VID_GET_VSID_NDX_ID,                                                            
    "vsd_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  vsid_ndx:\r\n"
    "  the VLAN ID. Range 0-16383.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api edit vsid_to_vid_get vsd_ndx 0 \r\n"
    "",
    "",                                                                                  
    {0, BIT(29), 0, 0},                                                                             
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },
  {                                                                                        
    PARAM_TIMNA_TIMNA_EDIT_ENCAP_INFO_SET_ENCAP_INFO_SET_ID,                                                            
    "encap_info_set",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Set the encapsulation informations, whether to add tunnel encapsulation or to\r\n"
    "  add ARP information to the packet header. \r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api edit encap_info_set ncp_ndx 0 arp_nfo_ptr 0\r\n"
    "  lbl_ttl_ptr 0 lbl_exp_qos 0 label_id 0\r\n"
    "  is_arp_nly 0 is_vld 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, BIT(25)},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_EDIT_ENCAP_INFO_SET_ENCAP_INFO_SET_ENCAP_NDX_ID,                                                            
    "ncp_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  encap_ndx:\r\n"
    "  Encapsulation id.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api edit encap_info_set ncp_ndx 0 arp_nfo_ptr 0\r\n"
    "  lbl_ttl_ptr 0 lbl_exp_qos 0 label_id 0\r\n"
    "  is_arp_nly 0 is_vld 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, BIT(25)},                                                                              
    3,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_EDIT_ENCAP_INFO_SET_ENCAP_INFO_SET_ENCAP_INFO_ARP_INFO_PTR_ID,                                                            
    "arp_nfo_ptr",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  encap_info.arp_info_ptr:\r\n"
    "  Pointer to entry that determine how to edit the outgoing packet. Should be\r\n"
    "  configured by timna_mpls_glbl_info_set()\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api edit encap_info_set ncp_ndx 0 arp_nfo_ptr 0\r\n"
    "  lbl_ttl_ptr 0 lbl_exp_qos 0 label_id 0\r\n"
    "  is_arp_nly 0 is_vld 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, BIT(25)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_EDIT_ENCAP_INFO_SET_ENCAP_INFO_SET_ENCAP_INFO_LABEL_TTL_PTR_ID,                                                            
    "lbl_ttl_ptr",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  encap_info.label.ttl_ptr:\r\n"
    "  Pointer to 4 configured TTL.Should be configured by\r\n"
    "  timna_mpls_glbl_info_set()When the packet is MPLS LSR packet, this setting is\r\n"
    "  ignored, and the TTL is inherited from the LSR label.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api edit encap_info_set ncp_ndx 0 arp_nfo_ptr 0\r\n"
    "  lbl_ttl_ptr 0 lbl_exp_qos 0 label_id 0\r\n"
    "  is_arp_nly 0 is_vld 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, BIT(25)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_EDIT_ENCAP_INFO_SET_ENCAP_INFO_SET_ENCAP_INFO_LABEL_EXP_QOS_ID,                                                            
    "lbl_exp_qos",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  encap_info.label.exp_qos:\r\n"
    "  Experimental bits outgoing traffic over this Tunnel.When the packet is MPLS\r\n"
    "  LSR packet, this setting is ignored, and the EXP is inherited from the LSR\r\n"
    "  label.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api edit encap_info_set ncp_ndx 0 arp_nfo_ptr 0\r\n"
    "  lbl_ttl_ptr 0 lbl_exp_qos 0 label_id 0\r\n"
    "  is_arp_nly 0 is_vld 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, BIT(25)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_EDIT_ENCAP_INFO_SET_ENCAP_INFO_SET_ENCAP_INFO_LABEL_LABEL_ID_ID,                                                            
    "label_id",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  encap_info.label.label_id:\r\n"
    "  Tunnel label\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api edit encap_info_set ncp_ndx 0 arp_nfo_ptr 0\r\n"
    "  lbl_ttl_ptr 0 lbl_exp_qos 0 label_id 0\r\n"
    "  is_arp_nly 0 is_vld 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, BIT(25)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_EDIT_ENCAP_INFO_SET_ENCAP_INFO_SET_ENCAP_INFO_IS_ARP_ONLY_ID,                                                            
    "is_arp_nly",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  encap_info.is_arp_only:\r\n"
    "  TRUE: There is no tunnel encapsulation. Only the arp_info_ptr is relevant for\r\n"
    "  arriving packets.FLASE: Packets are encapsulated with MPLS tunnel-id.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api edit encap_info_set ncp_ndx 0 arp_nfo_ptr 0\r\n"
    "  lbl_ttl_ptr 0 lbl_exp_qos 0 label_id 0\r\n"
    "  is_arp_nly 0 is_vld 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, BIT(25)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_EDIT_ENCAP_INFO_SET_ENCAP_INFO_SET_ENCAP_INFO_IS_VALID_ID,                                                            
    "is_vld",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  encap_info.is_valid:\r\n"
    "  TRUE: The entry is valid.FALSE: The entry is invalid. A packet that arrives\r\n"
    "  to this entry is dropped.Note: The bellow information is written when the\r\n"
    "  entry is set to invalid as well.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api edit encap_info_set ncp_ndx 0 arp_nfo_ptr 0\r\n"
    "  lbl_ttl_ptr 0 lbl_exp_qos 0 label_id 0\r\n"
    "  is_arp_nly 0 is_vld 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, BIT(25)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_EDIT_ENCAP_INFO_GET_ENCAP_INFO_GET_ID,                                                            
    "encap_info_get",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Set the encapsulation informations, whether to add tunnel encapsulation or to\r\n"
    "  add ARP information to the packet header. \r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api edit encap_info_get ncp_ndx 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, BIT(26)},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_EDIT_ENCAP_INFO_GET_ENCAP_INFO_GET_ENCAP_NDX_ID,                                                            
    "ncp_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  encap_ndx:\r\n"
    "  Encapsulation id.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api edit encap_info_get ncp_ndx 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, BIT(26)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_API_EDIT_ID,                                                            
    "edit",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "",
    "",
    "",                                                                                  
    {0, BIT(28)|BIT(29), BIT(2)|BIT(3)|BIT(4)|BIT(5)|BIT(6)|BIT(7), BIT(25)|BIT(26)},                                                                              
    1,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
#endif /* } edit*/
#ifdef UI_QINQ/* { qinq*/
  {                                                                                        
    PARAM_TIMNA_TIMNA_QINQ_C_VID_REGISTER_C_VID_REGISTER_ID,                                                            
    "c_vid_register",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  - Register the customer VLAN c_vid_ndx to the C-component\r\n"
    "  identified by port_ndx.\r\n"
    "  - Add the Provider Edge Port identified by (port_ndx,s_vid)\r\n"
    "  to the member set of the C-VLAN component identified by\r\n"
    "  port_ndx.\r\n"
    "  - Associate the Customer VLAN Identifier c_vid_ndx with Provider\r\n"
    "  Edge Port identified by (port_ndx,s_vid).\r\n"
    "  - Maps from a Customer VLAN Identifier c_vid_ndx to service\r\n"
    "  instance Represented by a service VLAN Identifier s_vid for the\r\n"
    "  C-component identified by port_ndx.\r\n"
    "  - Configure the PVID of the internal Customer Network Port on the\r\n"
    "  S-VLAN component to s_vid.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api qinq c_vid_register prt_ndx 0 c_vid_ndx 0 s_vid 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(8), 0},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_QINQ_C_VID_REGISTER_C_VID_REGISTER_PORT_NDX_ID,                                                            
    "prt_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  port_ndx:\r\n"
    "  local port, this port have to be CEP. Range 0-31.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api qinq c_vid_register prt_ndx 0 c_vid_ndx 0 s_vid 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(8), 0},                                                                              
    3,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_QINQ_C_VID_REGISTER_C_VID_REGISTER_C_VID_NDX_ID,                                                            
    "c_vid_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  c_vid_ndx:\r\n"
    "  The customer VID to register and associate with the PEP (port_ndx,s_vid).\r\n"
    "  Range 0-4095,TIMNA_QINQ_ALL_OTHERS_VLANS.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api qinq c_vid_register prt_ndx 0 c_vid_ndx 0 s_vid 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(8), 0},                                                                              
    4,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_QINQ_C_VID_REGISTER_C_VID_REGISTER_S_VID_ID,                                                            
    "s_vid",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  s_vid:\r\n"
    "  the service-VID that the c-vid mapped to in the C-component identified by\r\n"
    "  (port_ndx). Range 0-4095.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api qinq c_vid_register prt_ndx 0 c_vid_ndx 0 s_vid 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(8), 0},                                                                              
    5,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_QINQ_PEP_INFO_SET_PEP_INFO_SET_ID,                                                            
    "pep_info_set",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Sets general information (PVID, default user priority) for the PEP.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api qinq pep_info_set port 0 svid 0 ingress_s_dei 0\r\n"
    "  ingress_s_usr_prrty 0 ingress_c_tggd 0 egress_c_usr_prrty 0\r\n"
    "  pep_pvid 0 egress_ccptd_frms 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(9), 0},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_QINQ_PEP_INFO_SET_PEP_INFO_SET_PEP_PORT_ID_NDX_ID,                                                            
    "port",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  pep_id_ndx:\r\n"
    "  The port ID of the PEP.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api qinq pep_info_set port 0 svid 0 ingress_s_dei 0\r\n"
    "  ingress_s_usr_prrty 0 ingress_c_tggd 0 egress_c_usr_prrty 0\r\n"
    "  pep_pvid 0 egress_ccptd_frms 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(9), 0},                                                                              
    3,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_QINQ_PEP_INFO_SET_PEP_INFO_SET_PEP_SVID_NDX_ID,                                                            
    "svid",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  pep_id_ndx:\r\n"
    "  The svid of the PEP.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api qinq pep_info_set port 0 svid 0 ingress_s_dei 0\r\n"
    "  ingress_s_usr_prrty 0 ingress_c_tggd 0 egress_c_usr_prrty 0\r\n"
    "  pep_pvid 0 egress_ccptd_frms 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(9), 0},                                                                              
    4,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_QINQ_PEP_INFO_SET_PEP_INFO_SET_PEP_INFO_INGRESS_S_DEI_ID,                                                            
    "ingress_s_dei",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  pep_info.ingress.s_dei:\r\n"
    "  If TRUE then the PEP sets the DEI bit when generating S-tag for the SVLAN\r\n"
    "  component.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api qinq pep_info_set port 0 svid 0 ingress_s_dei 0\r\n"
    "  ingress_s_usr_prrty 0 ingress_c_tggd 0 egress_c_usr_prrty 0\r\n"
    "  pep_pvid 0 egress_ccptd_frms 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(9), 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_QINQ_PEP_INFO_SET_PEP_INFO_SET_PEP_INFO_INGRESS_S_USER_PRIORITY_ID,                                                            
    "ingress_s_usr_prrty",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  pep_info.ingress.s_user_priority:\r\n"
    "  The User Priority of S-Tag when generating S-tag for the SVLAN component.\r\n"
    "  Range 0-7.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api qinq pep_info_set port 0 svid 0 ingress_s_dei 0\r\n"
    "  ingress_s_usr_prrty 0 ingress_c_tggd 0 egress_c_usr_prrty 0\r\n"
    "  pep_pvid 0 egress_ccptd_frms 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(9), 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_QINQ_PEP_INFO_SET_PEP_INFO_SET_PEP_INFO_INGRESS_C_TAGGED_ID,                                                            
    "ingress_c_tggd",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  pep_info.ingress.c_:\r\n"
    "  If TRUE then the PEP port sends packets with C-tag toward the S-component. If\r\n"
    "  incoming packet is un then it assigned VID according to VLAN\r\n"
    "  classification configuration, and UP and CFI according to COS configuration.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api qinq pep_info_set port 0 svid 0 ingress_s_dei 0\r\n"
    "  ingress_s_usr_prrty 0 ingress_c_tggd 0 egress_c_usr_prrty 0\r\n"
    "  pep_pvid 0 egress_ccptd_frms 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(9), 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_QINQ_PEP_INFO_SET_PEP_INFO_SET_PEP_INFO_EGRESS_C_USER_PRIORITY_ID,                                                            
    "egress_c_usr_prrty",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  pep_info.egress.c_user_priority:\r\n"
    "  The User Priority of C-Tag when generating C-tag in the PEP port toward the\r\n"
    "  C-Component 0-7.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api qinq pep_info_set port 0 svid 0 ingress_s_dei 0\r\n"
    "  ingress_s_usr_prrty 0 ingress_c_tggd 0 egress_c_usr_prrty 0\r\n"
    "  pep_pvid 0 egress_ccptd_frms 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(9), 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_QINQ_PEP_INFO_SET_PEP_INFO_SET_PEP_INFO_EGRESS_C_VID_ID,                                                            
    "pep_pvid",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  pep_info.egress.c_vid:\r\n"
    "  The Vlan ID of C-Tag when generating C-tag in the PEP port toward the\r\n"
    "  C-Component 0-7.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api qinq pep_info_set port 0 svid 0 ingress_s_dei 0\r\n"
    "  ingress_s_usr_prrty 0 ingress_c_tggd 0 egress_c_usr_prrty 0\r\n"
    "  pep_pvid 0 egress_ccptd_frms 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(9), 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_QINQ_PEP_INFO_SET_PEP_INFO_SET_PEP_INFO_EGRESS_C_TAGGED_ID,                                                            
    "egress_c_tggd",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  pep_info.egress.c_:\r\n"
    "  If TRUE then the PEP port sends packets with C-tag toward the C-component. If\r\n"
    "  incoming packet is un then it assigned VID according with 'c_vid'.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api qinq pep_info_set port 0 svid 0 ingress_s_dei 0\r\n"
    "  ingress_s_usr_prrty 0 ingress_c_tggd 0 egress_c_usr_prrty 0\r\n"
    "  pep_pvid 0 egress_ccptd_frms 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(9), 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_QINQ_PEP_INFO_SET_PEP_INFO_SET_PEP_INFO_EGRESS_ACCEPTED_FRAMES_ID,                                                            
    "egress_ccptd_frms",                                                                       
    (PARAM_VAL_RULES *)&TIMNA_FILTER_ACCEPT_FRAME_TYPE_rule[0],                                            
    (sizeof(TIMNA_FILTER_ACCEPT_FRAME_TYPE_rule) / sizeof(TIMNA_FILTER_ACCEPT_FRAME_TYPE_rule[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  pep_info.egress.accepted_frames:\r\n"
    "  Determines which frames are accepted and which are filtered (, un\r\n"
    "  and Priority-Tagged)\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api qinq pep_info_set port 0 svid 0 ingress_s_dei 0\r\n"
    "  ingress_s_usr_prrty 0 ingress_c_tggd 0 egress_c_usr_prrty 0\r\n"
    "  pep_pvid 0 egress_ccptd_frms 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(9), 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_QINQ_PEP_INFO_GET_PEP_INFO_GET_ID,                                                            
    "pep_info_get",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Sets general information (PVID, default user priority) for the PEP.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api qinq pep_info_get pep_id_ndx 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(10), 0},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_QINQ_PEP_INFO_GET_PEP_INFO_GET_PORT_ID_NDX_ID,                                                            
    "port",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  port:\r\n"
    "  The port ID of the PEP.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api qinq pep_info_get port 0 s_vid 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(10), 0},                                                                              
    3,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
    {                                                                                        
    PARAM_TIMNA_TIMNA_QINQ_PEP_INFO_GET_PEP_INFO_GET_SVID_NDX_ID,                                                            
    "s_vid",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  s_vid:\r\n"
    "  The s_vid of the PEP.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api qinq pep_info_get port 0 s_vid 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(10), 0},                                                                              
    4,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_QINQ_CEP_INFO_SET_CEP_INFO_SET_ID,                                                            
    "cep_info_set",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Sets general information (PVID, default user priority) for the CEP.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api qinq cep_info_set cep_id_ndx 0 cvid 0 egress_c_tggd 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, 0, BIT(7)},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {   
    PARAM_TIMNA_TIMNA_QINQ_CEP_INFO_SET_CEP_INFO_SET_CEP_ID_NDX_ID,                                                            
    "cep_id_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  cep_id_ndx:\r\n"
    "  The ID of the PEP.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api qinq cep_info_set cep_id_ndx 0 cvid 0 egress_c_tggd 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, 0, BIT(7)},                                                                              
    3,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {   
    PARAM_TIMNA_TIMNA_QINQ_CEP_INFO_SET_CEP_INFO_SET_CEP_VLAN_ID_NDX_ID,                                                            
    "cvid",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  cep_id_ndx:\r\n"
    "  The cvid .\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api qinq cep_info_set cep_id_ndx 0 cvid 0 egress_c_tggd 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, 0, BIT(7)},                                                                              
    4,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                          
    PARAM_TIMNA_TIMNA_QINQ_CEP_INFO_SET_CEP_INFO_SET_CEP_INFO_ID_C_TAG_ID,
    "egress_c_tggd",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  cep_info.egress.c_:\r\n"
    "  If TRUE then the CEP port sends packets with C-tag toward the Customer. \r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api qinq cep_info_set cep_id_ndx 0 cvid 0 egress_c_tggd 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, 0, BIT(7)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_QINQ_CEP_INFO_GET_CEP_INFO_GET_ID,                                                            
    "cep_info_get",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Sets general information (PVID, default user priority) for the CEP.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api qinq cep_info_get cep_id_ndx 0 cvid 0 \r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, 0, BIT(8)},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_QINQ_CEP_INFO_GET_CEP_INFO_GET_ID_CEP_ID_NDX,                                                            
    "cep_id_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  cep_id_ndx:\r\n"
    "  The ID of the PEP.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api qinq cep_info_get cep_id_ndx 0 cvid 0 \r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, 0, BIT(8)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_QINQ_CEP_INFO_SET_CEP_INFO_SET_CEP_VLAN_ID_NDX_ID,                                                            
    "cvid",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  cvid:\r\n"
    "  the cvlan id .\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api qinq cep_info_get cep_id_ndx 0 cvid 0 \r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, 0, BIT(8)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_QINQ_C_VID_UNREGISTER_C_VID_UNREGISTER_ID,                                                            
    "c_vid_unregister",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  port_ndx:\r\n"
    "  local port, this port have to be CEP. Range 0-31.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api qinq c_vid_unregister prt_ndx 0 c_vid_ndx 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(11), 0},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_QINQ_C_VID_UNREGISTER_C_VID_UNREGISTER_PORT_NDX_ID,                                                            
    "prt_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  port_ndx:\r\n"
    "  local port, this port have to be CEP. Range 0-31.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api qinq c_vid_unregister prt_ndx 0 c_vid_ndx 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(11), 0},                                                                              
    3,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_QINQ_C_VID_UNREGISTER_C_VID_UNREGISTER_C_VID_NDX_ID,                                                            
    "c_vid_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  c_vid_ndx:\r\n"
    "  The customer VID that to be detached from the C-component\r\n"
    "  port_ndx and the proper PEP (port_ndx,s_vid). Range 0-4095.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api qinq c_vid_unregister prt_ndx 0 c_vid_ndx 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(11), 0},                                                                              
    4,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_QINQ_PEP_REGISTERATION_STATUS_GET_ID,                                                            
    "pep_registeration_status_get",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  - Gets the C-VIDs that are associated with the PEP\r\n"
    "  (port_ndx,s_vid).\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api qinq pep_registeration_status_get pep_id_ndx 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(12), 0},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_QINQ_PEP_REGISTERATION_STATUS_GET_PEP_PORT_ID_NDX_ID,                                                            
    "port",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  pep_id_ndx:\r\n"
    "  Pep port id.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api qinq pep_registeration_status_get port 0 s_vid 0 max_members 100 iter 5\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(12), 0},                                                                              
    3,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_QINQ_PEP_REGISTERATION_STATUS_GET_PEP_SVID_NDX_ID,                                                            
    "s_vid",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  s_vid:\r\n"
    "  Pep s_vid.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api qinq pep_registeration_status_get port 0 s_vid 0 max_members 100 iter 5\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(12), 0},                                                                              
    4,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  }, 
  {                                                                                        
    PARAM_TIMNA_TIMNA_QINQ_PEP_REGISTERATION_STATUS_GET_MAX_MEMBERS_ID,                                                            
    "max_members",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  max_members:\r\n"
    "  number of members to get.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api qinq pep_registeration_status_get port 0 s_vid 0 max_members 100 iter 5\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(12), 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  }, 
  {                                                                                        
    PARAM_TIMNA_TIMNA_QINQ_PEP_REGISTERATION_STATUS_GET_ITER_ID,                                                            
    "iter",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  iter:\r\n"
    "  from which member to start getting the members.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api qinq pep_registeration_status_get port 0 s_vid 0 max_members 100 iter 5\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(12), 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  }, 
  {                                                                                        
    PARAM_TIMNA_TIMNA_QINQ_C_VID_REGISTERATION_STATUS_GET_C_VID_REGISTERATION_STATUS_GET_ID,                                                            
    "c_vid_registeration_status_get",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  - Gets the service identifier (s_vid) that the Customer\r\n"
    "  VLAN(c_vid) mapped to. If c_vid_ndx is not registered in this C-\r\n"
    "  component then registered is FALSE and s_vid unaffected. \r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api qinq c_vid_registeration_status_get prt_ndx 0 c_vid_ndx 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(13), 0},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_QINQ_C_VID_REGISTERATION_STATUS_GET_C_VID_REGISTERATION_STATUS_GET_PORT_NDX_ID,                                                            
    "prt_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  port_ndx:\r\n"
    "  local port, this port have to be CEP. Range 0-31.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api qinq c_vid_registeration_status_get prt_ndx 0 c_vid_ndx 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(13), 0},                                                                              
    3,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_QINQ_C_VID_REGISTERATION_STATUS_GET_C_VID_REGISTERATION_STATUS_GET_C_VID_NDX_ID,                                                            
    "c_vid_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  c_vid_ndx:\r\n"
    "  The Customer VLAN ID. Range 0-4095.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api qinq c_vid_registeration_status_get prt_ndx 0 c_vid_ndx 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(13), 0},                                                                              
    4,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_API_QINQ_ID,                                                            
    "qinq",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "",
    "",
    "",                                                                                  
    {0, 0, BIT(8)|BIT(9)|BIT(10)|BIT(11)|BIT(12)|BIT(13), 0, 0, BIT(7) |BIT(8)},                                                                              
    1,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
#endif /* } qinq*/
#ifdef UI_TRAP/* { trap*/
  {                                                                                        
    PARAM_TIMNA_TIMNA_TRAP_GLBL_DESTS_INFO_SET_GLBL_DESTS_INFO_SET_ID,                                                            
    "glbl_dests_info_set",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Sets trap global information:\r\n"
    "  - Destination\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api trap glbl_dests_info_set \r\n"
    "  trp_trp_dstntns_3_val 0 trp_trp_dstntns_3_Typ 0\r\n"
    "  trp_trp_dstntns_2_val 0 trp_trp_dstntns_2_Typ 0\r\n"
    "  trp_trp_dstntns_1_val 0 trp_trp_dstntns_1_Typ 0\r\n"
    "  trp_trp_dstntns_0_val 0 trp_trp_dstntns_0_Typ 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(14), 0},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_TRAP_GLBL_DESTS_INFO_SET_GLBL_DESTS_INFO_SET_TRAP_GLBL_INFO_TRAP_DESTINATIONS_3_VAL_ID,                                                            
    "trp_trp_dstntns_3_val",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  trap_glbl_info.trap_destinations[2].val:\r\n"
    "  Traffic ClassRange 0-7.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api trap glbl_dests_info_set \r\n"
    "  trp_trp_dstntns_3_val 0 trp_trp_dstntns_3_Typ 0\r\n"
    "  trp_trp_dstntns_2_val 0 trp_trp_dstntns_2_Typ 0\r\n"
    "  trp_trp_dstntns_1_val 0 trp_trp_dstntns_1_Typ 0\r\n"
    "  trp_trp_dstntns_0_val 0 trp_trp_dstntns_0_Typ 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(14), 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_TRAP_GLBL_DESTS_INFO_SET_GLBL_DESTS_INFO_SET_TRAP_GLBL_INFO_TRAP_DESTINATIONS_3_TYPE_ID,                                                            
    "trp_trp_dstntns_2_Typ",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  trap_glbl_info.trap_destinations[2].Type:\r\n"
    "  User PriorityRange 0-7.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api trap glbl_dests_info_set \r\n"
    "  trp_trp_dstntns_3_val 0 trp_trp_dstntns_3_Typ 0\r\n"
    "  trp_trp_dstntns_2_val 0 trp_trp_dstntns_2_Typ 0\r\n"
    "  trp_trp_dstntns_1_val 0 trp_trp_dstntns_1_Typ 0\r\n"
    "  trp_trp_dstntns_0_val 0 trp_trp_dstntns_0_Typ 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(14), 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_TRAP_GLBL_DESTS_INFO_SET_GLBL_DESTS_INFO_SET_TRAP_GLBL_INFO_TRAP_DESTINATIONS_2_VAL_ID,                                                            
    "trp_trp_dstntns_2_val",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  trap_glbl_info.trap_destinations[2].val:\r\n"
    "  Traffic ClassRange 0-7.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api trap glbl_dests_info_set \r\n"
    "  trp_trp_dstntns_3_val 0 trp_trp_dstntns_3_Typ 0\r\n"
    "  trp_trp_dstntns_2_val 0 trp_trp_dstntns_2_Typ 0\r\n"
    "  trp_trp_dstntns_1_val 0 trp_trp_dstntns_1_Typ 0\r\n"
    "  trp_trp_dstntns_0_val 0 trp_trp_dstntns_0_Typ 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(14), 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_TRAP_GLBL_DESTS_INFO_SET_GLBL_DESTS_INFO_SET_TRAP_GLBL_INFO_TRAP_DESTINATIONS_2_TYPE_ID,                                                            
    "trp_trp_dstntns_2_Typ",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  trap_glbl_info.trap_destinations[2].Type:\r\n"
    "  User PriorityRange 0-7.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api trap glbl_dests_info_set \r\n"
    "  trp_trp_dstntns_3_val 0 trp_trp_dstntns_3_Typ 0\r\n"
    "  trp_trp_dstntns_2_val 0 trp_trp_dstntns_2_Typ 0\r\n"
    "  trp_trp_dstntns_1_val 0 trp_trp_dstntns_1_Typ 0\r\n"
    "  trp_trp_dstntns_0_val 0 trp_trp_dstntns_0_Typ 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(14), 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_TRAP_GLBL_DESTS_INFO_SET_GLBL_DESTS_INFO_SET_TRAP_GLBL_INFO_TRAP_DESTINATIONS_1_VAL_ID,                                                            
    "trp_trp_dstntns_1_val",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  trap_glbl_info.trap_destinations[1].val:\r\n"
    "  Traffic ClassRange 0-7.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api trap glbl_dests_info_set \r\n"
    "  trp_trp_dstntns_3_val 0 trp_trp_dstntns_3_Typ 0\r\n"
    "  trp_trp_dstntns_2_val 0 trp_trp_dstntns_2_Typ 0\r\n"
    "  trp_trp_dstntns_1_val 0 trp_trp_dstntns_1_Typ 0\r\n"
    "  trp_trp_dstntns_0_val 0 trp_trp_dstntns_0_Typ 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(14), 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_TRAP_GLBL_DESTS_INFO_SET_GLBL_DESTS_INFO_SET_TRAP_GLBL_INFO_TRAP_DESTINATIONS_1_TYPE_ID,                                                            
    "trp_trp_dstntns_1_Typ",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  trap_glbl_info.trap_destinations[1].Type:\r\n"
    "  User PriorityRange 0-7.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api trap glbl_dests_info_set \r\n"
    "  trp_trp_dstntns_3_val 0 trp_trp_dstntns_3_Typ 0\r\n"
    "  trp_trp_dstntns_2_val 0 trp_trp_dstntns_2_Typ 0\r\n"
    "  trp_trp_dstntns_1_val 0 trp_trp_dstntns_1_Typ 0\r\n"
    "  trp_trp_dstntns_0_val 0 trp_trp_dstntns_0_Typ 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(14), 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_TRAP_GLBL_DESTS_INFO_SET_GLBL_DESTS_INFO_SET_TRAP_GLBL_INFO_TRAP_DESTINATIONS_0_VAL_ID,                                                            
    "trp_trp_dstntns_0_val",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  trap_glbl_info.trap_destinations[0].val:\r\n"
    "  Traffic ClassRange 0-7.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api trap glbl_dests_info_set \r\n"
    "  trp_trp_dstntns_3_val 0 trp_trp_dstntns_3_Typ 0\r\n"
    "  trp_trp_dstntns_2_val 0 trp_trp_dstntns_2_Typ 0\r\n"
    "  trp_trp_dstntns_1_val 0 trp_trp_dstntns_1_Typ 0\r\n"
    "  trp_trp_dstntns_0_val 0 trp_trp_dstntns_0_Typ 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(14), 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_TRAP_GLBL_DESTS_INFO_SET_GLBL_DESTS_INFO_SET_TRAP_GLBL_INFO_TRAP_DESTINATIONS_0_TYPE_ID,                                                            
    "trp_trp_dstntns_0_Typ",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  trap_glbl_info.trap_destinations[0].Type:\r\n"
    "  User PriorityRange 0-7.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api trap glbl_dests_info_set \r\n"
    "  trp_trp_dstntns_3_val 0 trp_trp_dstntns_3_Typ 0\r\n"
    "  trp_trp_dstntns_2_val 0 trp_trp_dstntns_2_Typ 0\r\n"
    "  trp_trp_dstntns_1_val 0 trp_trp_dstntns_1_Typ 0\r\n"
    "  trp_trp_dstntns_0_val 0 trp_trp_dstntns_0_Typ 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(14), 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_TRAP_GLBL_DESTS_INFO_GET_GLBL_DESTS_INFO_GET_ID,                                                            
    "glbl_dests_info_get",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Sets trap global information:\r\n"
    "  - Destination\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api trap glbl_dests_info_get\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(15), 0},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_TRAP_PRTCL_INFO_SET_PRTCL_INFO_SET_ID,                                                            
    "prtcl_info_set",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Sets Trap information for protocols:-  Forwarding type-  Destination index\r\n"
    "  (index to the global destinations) -  COS Parameters (UP, TC, DP) -  COS\r\n"
    "  override-  CPU code.\r\n"
    "  Protocols can be trapped by this API are -  ARP-  IGMP 1/2 (other)\r\n"
    "  (IGMP-Hdr.Type =1/2/(other)) -  VRRP -  ICMv6\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api trap prtcl_info_set prtcl_ndx 0 policer_ndx 0 cpu_cod\r\n"
    "  0 cos_vrwrt 0 cos_prms_DP 0 cos_prms_TC 0\r\n"
    "  cos_prms_UP 0 dst_ndx 0 frwrd_typ 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(16), 0},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_TRAP_PRTCL_INFO_SET_PRTCL_INFO_SET_PRTCL_NDX_ID,                                                            
    "prtcl_ndx",                                                                       
    (PARAM_VAL_RULES *)&TIMNA_TRAP_PROTOCOL_rule[0],                                            
    (sizeof(TIMNA_TRAP_PROTOCOL_rule) / sizeof(TIMNA_TRAP_PROTOCOL_rule[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  prtcl_ndx:\r\n"
    "  One of the protocols that can be trapped.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api trap prtcl_info_set prtcl_ndx 0 policer_ndx 0 cpu_cod\r\n"
    "  0 cos_vrwrt 0 cos_prms_DP 0 cos_prms_TC 0\r\n"
    "  cos_prms_UP 0 dst_ndx 0 frwrd_typ 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(16), 0},                                                                              
    3,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_TRAP_PRTCL_INFO_SET_PRTCL_INFO_SET_TRAP_INFO_POLICER_INDEX_ID,                                                            
    "policer_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  trap_info.policer_index:\r\n"
    "  Specifies which policer should be applied to this packet.(which may change\r\n"
    "  the packets drop precedence)0 - Means No policer should be applied to the\r\n"
    "  packetRange 0-3.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api trap prtcl_info_set prtcl_ndx 0 policer_ndx 0 cpu_cod\r\n"
    "  0 cos_vrwrt 0 cos_prms_DP 0 cos_prms_TC 0\r\n"
    "  cos_prms_UP 0 dst_ndx 0 frwrd_typ 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(16), 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_TRAP_PRTCL_INFO_SET_PRTCL_INFO_SET_TRAP_INFO_CPU_CODE_ID,                                                            
    "cpu_cod",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  trap_info.cpu_code:\r\n"
    "  Forwarding CPU CodeRange 0-1023\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api trap prtcl_info_set prtcl_ndx 0 policer_ndx 0 cpu_cod\r\n"
    "  0 cos_vrwrt 0 cos_prms_DP 0 cos_prms_TC 0\r\n"
    "  cos_prms_UP 0 dst_ndx 0 frwrd_typ 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(16), 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_TRAP_PRTCL_INFO_SET_PRTCL_INFO_SET_TRAP_INFO_COS_OVERWRITE_ID,                                                            
    "cos_vrwrt",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  trap_info.cos_overwrite:\r\n"
    "  If set then the CoS parameters should be replaced when this condition is\r\n"
    "  selected\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api trap prtcl_info_set prtcl_ndx 0 policer_ndx 0 cpu_cod\r\n"
    "  0 cos_vrwrt 0 cos_prms_DP 0 cos_prms_TC 0\r\n"
    "  cos_prms_UP 0 dst_ndx 0 frwrd_typ 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(16), 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_TRAP_PRTCL_INFO_SET_PRTCL_INFO_SET_TRAP_INFO_COS_PARAMS_DP_ID,                                                            
    "cos_prms_DP",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  trap_info.cos_params.DP:\r\n"
    "  Drop precedenceRange 0-3.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api trap prtcl_info_set prtcl_ndx 0 policer_ndx 0 cpu_cod\r\n"
    "  0 cos_vrwrt 0 cos_prms_DP 0 cos_prms_TC 0\r\n"
    "  cos_prms_UP 0 dst_ndx 0 frwrd_typ 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(16), 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_TRAP_PRTCL_INFO_SET_PRTCL_INFO_SET_TRAP_INFO_COS_PARAMS_TC_ID,                                                            
    "cos_prms_TC",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  trap_info.cos_params.TC:\r\n"
    "  Traffic ClassRange 0-7.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api trap prtcl_info_set prtcl_ndx 0 policer_ndx 0 cpu_cod\r\n"
    "  0 cos_vrwrt 0 cos_prms_DP 0 cos_prms_TC 0\r\n"
    "  cos_prms_UP 0 dst_ndx 0 frwrd_typ 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(16), 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_TRAP_PRTCL_INFO_SET_PRTCL_INFO_SET_TRAP_INFO_COS_PARAMS_UP_ID,                                                            
    "cos_prms_UP",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  trap_info.cos_params.UP:\r\n"
    "  User PriorityRange 0-7.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api trap prtcl_info_set prtcl_ndx 0 policer_ndx 0 cpu_cod\r\n"
    "  0 cos_vrwrt 0 cos_prms_DP 0 cos_prms_TC 0\r\n"
    "  cos_prms_UP 0 dst_ndx 0 frwrd_typ 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(16), 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_TRAP_PRTCL_INFO_SET_PRTCL_INFO_SET_TRAP_INFO_DEST_INDEX_ID,                                                            
    "dst_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  trap_info.dest_index:\r\n"
    "  Index in the trap_destinations array, that was set by\r\n"
    "  TIMNA_eth_trap_glbl_info_set()Range 0-3\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api trap prtcl_info_set prtcl_ndx 0 policer_ndx 0 cpu_cod\r\n"
    "  0 cos_vrwrt 0 cos_prms_DP 0 cos_prms_TC 0\r\n"
    "  cos_prms_UP 0 dst_ndx 0 frwrd_typ 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(16), 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_TRAP_PRTCL_INFO_SET_PRTCL_INFO_SET_TRAP_INFO_FORWARD_TYPE_ID,                                                            
    "frwrd_typ",                                                                     
    (PARAM_VAL_RULES *)&SOC_SAND_PP_FRWRD_ACTION_TYPE_rule[0],                                            
    (sizeof(SOC_SAND_PP_FRWRD_ACTION_TYPE_rule) / sizeof(SOC_SAND_PP_FRWRD_ACTION_TYPE_rule[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  trap_info.forward_type:\r\n"
    "  The forwarding action type\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api trap prtcl_info_set prtcl_ndx 0 policer_ndx 0 cpu_cod\r\n"
    "  0 cos_vrwrt 0 cos_prms_DP 0 cos_prms_TC 0\r\n"
    "  cos_prms_UP 0 dst_ndx 0 frwrd_typ 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(16), 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_TRAP_PRTCL_INFO_GET_PRTCL_INFO_GET_ID,                                                            
    "prtcl_info_get",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Sets Trap information for protocols:-  Forwarding type-  Destination index\r\n"
    "  (index to the global destinations) -  COS Parameters (UP, TC, DP) -  COS\r\n"
    "  override-  CPU code.\r\n"
    "  Protocols can be trapped by this API are -  ARP-  IGMP 1/2 (other)\r\n"
    "  (IGMP-Hdr.Type =1/2/(other)) -  VRRP -  ICMv6\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api trap prtcl_info_get prtcl_ndx 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(17), 0},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_TRAP_PRTCL_INFO_GET_PRTCL_INFO_GET_PRTCL_NDX_ID,                                                            
    "prtcl_ndx",                                                                       
    (PARAM_VAL_RULES *)&TIMNA_TRAP_PROTOCOL_rule[0],                                            
    (sizeof(TIMNA_TRAP_PROTOCOL_rule) / sizeof(TIMNA_TRAP_PROTOCOL_rule[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  prtcl_ndx:\r\n"
    "  One of the protocols that can be trapped.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api trap prtcl_info_get prtcl_ndx 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(17), 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_TRAP_RESERVED_MULTICAST_INFO_SET_RESERVED_MULTICAST_INFO_SET_ID,                                                            
    "reserved_multicast_info_set",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Sets Trap information for IEEE reserved multicast-  Forwarding\r\n"
    "  type-  Destination index (index to the global destinations) -  COS Parameters\r\n"
    "  (UP, TC, DP) -  COS override-  CPU code. \r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api trap reserved_multicast_info_set prt_typ_ndx 0 da_ls_bits_ndx 0\r\n"
    "  policer_ndx 0 cpu_cod 0 cos_vrwrt 0 cos_prms_DP\r\n"
    "  0 cos_prms_TC 0 cos_prms_UP 0 dst_ndx 0\r\n"
    "  frwrd_typ 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(18), 0},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_TRAP_RESERVED_MULTICAST_INFO_SET_RESERVED_MULTICAST_INFO_SET_PORT_TYPE_NDX_ID,                                                            
    "prt_typ_ndx",                                                                       
    (PARAM_VAL_RULES *)&SOC_SAND_PP_PORT_L2_TYPE_rule[0],                                            
    (sizeof(SOC_SAND_PP_PORT_L2_TYPE_rule) / sizeof(SOC_SAND_PP_PORT_L2_TYPE_rule[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  port_type_ndx:\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api trap reserved_multicast_info_set prt_typ_ndx 0 da_ls_bits_ndx 0\r\n"
    "  policer_ndx 0 cpu_cod 0 cos_vrwrt 0 cos_prms_DP\r\n"
    "  0 cos_prms_TC 0 cos_prms_UP 0 dst_ndx 0\r\n"
    "  frwrd_typ 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(18), 0},                                                                              
    3,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_TRAP_RESERVED_MULTICAST_INFO_SET_RESERVED_MULTICAST_INFO_SET_PORT_MASK_NDX_ID,                                                            
    "da_ls_bits_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  da_ls_bits_ndx:\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api trap reserved_multicast_info_set prt_typ_ndx 0 da_ls_bits_ndx 0\r\n"
    "  policer_ndx 0 cpu_cod 0 cos_vrwrt 0 cos_prms_DP\r\n"
    "  0 cos_prms_TC 0 cos_prms_UP 0 dst_ndx 0\r\n"
    "  frwrd_typ 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(18), 0},                                                                              
    4,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_TRAP_RESERVED_MULTICAST_INFO_SET_RESERVED_MULTICAST_INFO_SET_TRAP_INFO_POLICER_INDEX_ID,                                                            
    "policer_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  trap_info.policer_index:\r\n"
    "  Specifies which policer should be applied to this packet.(which may change\r\n"
    "  the packets drop precedence)0 - Means No policer should be applied to the\r\n"
    "  packetRange 0-3.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api trap reserved_multicast_info_set prt_typ_ndx 0 da_ls_bits_ndx 0\r\n"
    "  policer_ndx 0 cpu_cod 0 cos_vrwrt 0 cos_prms_DP\r\n"
    "  0 cos_prms_TC 0 cos_prms_UP 0 dst_ndx 0\r\n"
    "  frwrd_typ 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(18), 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_TRAP_RESERVED_MULTICAST_INFO_SET_RESERVED_MULTICAST_INFO_SET_TRAP_INFO_CPU_CODE_ID,                                                            
    "cpu_cod",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  trap_info.cpu_code:\r\n"
    "  Forwarding CPU CodeRange 0-1023\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api trap reserved_multicast_info_set prt_typ_ndx 0 da_ls_bits_ndx 0\r\n"
    "  policer_ndx 0 cpu_cod 0 cos_vrwrt 0 cos_prms_DP\r\n"
    "  0 cos_prms_TC 0 cos_prms_UP 0 dst_ndx 0\r\n"
    "  frwrd_typ 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(18), 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_TRAP_RESERVED_MULTICAST_INFO_SET_RESERVED_MULTICAST_INFO_SET_TRAP_INFO_COS_OVERWRITE_ID,                                                            
    "cos_vrwrt",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  trap_info.cos_overwrite:\r\n"
    "  If set then the CoS parameters should be replaced when this condition is\r\n"
    "  selected\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api trap reserved_multicast_info_set prt_typ_ndx 0 da_ls_bits_ndx 0\r\n"
    "  policer_ndx 0 cpu_cod 0 cos_vrwrt 0 cos_prms_DP\r\n"
    "  0 cos_prms_TC 0 cos_prms_UP 0 dst_ndx 0\r\n"
    "  frwrd_typ 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(18), 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_TRAP_RESERVED_MULTICAST_INFO_SET_RESERVED_MULTICAST_INFO_SET_TRAP_INFO_COS_PARAMS_DP_ID,                                                            
    "cos_prms_DP",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  trap_info.cos_params.DP:\r\n"
    "  Drop precedenceRange 0-3.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api trap reserved_multicast_info_set prt_typ_ndx 0 da_ls_bits_ndx 0\r\n"
    "  policer_ndx 0 cpu_cod 0 cos_vrwrt 0 cos_prms_DP\r\n"
    "  0 cos_prms_TC 0 cos_prms_UP 0 dst_ndx 0\r\n"
    "  frwrd_typ 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(18), 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_TRAP_RESERVED_MULTICAST_INFO_SET_RESERVED_MULTICAST_INFO_SET_TRAP_INFO_COS_PARAMS_TC_ID,                                                            
    "cos_prms_TC",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  trap_info.cos_params.TC:\r\n"
    "  Traffic ClassRange 0-7.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api trap reserved_multicast_info_set prt_typ_ndx 0 da_ls_bits_ndx 0\r\n"
    "  policer_ndx 0 cpu_cod 0 cos_vrwrt 0 cos_prms_DP\r\n"
    "  0 cos_prms_TC 0 cos_prms_UP 0 dst_ndx 0\r\n"
    "  frwrd_typ 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(18), 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_TRAP_RESERVED_MULTICAST_INFO_SET_RESERVED_MULTICAST_INFO_SET_TRAP_INFO_COS_PARAMS_UP_ID,                                                            
    "cos_prms_UP",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  trap_info.cos_params.UP:\r\n"
    "  User PriorityRange 0-7.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api trap reserved_multicast_info_set prt_typ_ndx 0 da_ls_bits_ndx 0\r\n"
    "  policer_ndx 0 cpu_cod 0 cos_vrwrt 0 cos_prms_DP\r\n"
    "  0 cos_prms_TC 0 cos_prms_UP 0 dst_ndx 0\r\n"
    "  frwrd_typ 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(18), 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_TRAP_RESERVED_MULTICAST_INFO_SET_RESERVED_MULTICAST_INFO_SET_TRAP_INFO_DEST_INDEX_ID,                                                            
    "dst_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  trap_info.dest_index:\r\n"
    "  Index in the trap_destinations array, that was set by\r\n"
    "  TIMNA_eth_trap_glbl_info_set()Range 0-3\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api trap reserved_multicast_info_set prt_typ_ndx 0 da_ls_bits_ndx 0\r\n"
    "  policer_ndx 0 cpu_cod 0 cos_vrwrt 0 cos_prms_DP\r\n"
    "  0 cos_prms_TC 0 cos_prms_UP 0 dst_ndx 0\r\n"
    "  frwrd_typ 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(18), 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_TRAP_RESERVED_MULTICAST_INFO_SET_RESERVED_MULTICAST_INFO_SET_TRAP_INFO_FORWARD_TYPE_ID,                                                            
    "frwrd_typ",                                                                       
    (PARAM_VAL_RULES *)&SOC_SAND_PP_FRWRD_ACTION_TYPE_rule[0],                                            
    (sizeof(SOC_SAND_PP_FRWRD_ACTION_TYPE_rule) / sizeof(SOC_SAND_PP_FRWRD_ACTION_TYPE_rule[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  trap_info.forward_type:\r\n"
    "  The forwarding action type\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api trap reserved_multicast_info_set prt_typ_ndx 0 da_ls_bits_ndx 0\r\n"
    "  policer_ndx 0 cpu_cod 0 cos_vrwrt 0 cos_prms_DP\r\n"
    "  0 cos_prms_TC 0 cos_prms_UP 0 dst_ndx 0\r\n"
    "  frwrd_typ 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(18), 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_TRAP_RESERVED_MULTICAST_INFO_GET_RESERVED_MULTICAST_INFO_GET_ID,                                                            
    "reserved_multicast_info_get",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Sets Trap information for IEEE reserved multicast-  Forwarding\r\n"
    "  type-  Destination index (index to the global destinations) -  COS Parameters\r\n"
    "  (UP, TC, DP) -  COS override-  CPU code. \r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api trap reserved_multicast_info_get prt_typ_ndx 0 da_ls_bits_ndx 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(19), 0},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_TRAP_RESERVED_MULTICAST_INFO_GET_RESERVED_MULTICAST_INFO_GET_PORT_TYPE_NDX_ID,                                                            
    "prt_typ_ndx",                                                                       
    (PARAM_VAL_RULES *)&SOC_SAND_PP_PORT_L2_TYPE_rule[0],                                            
    (sizeof(SOC_SAND_PP_PORT_L2_TYPE_rule) / sizeof(SOC_SAND_PP_PORT_L2_TYPE_rule[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  port_type_ndx:\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api trap reserved_multicast_info_get prt_typ_ndx 0 da_ls_bits_ndx 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(19), 0},                                                                              
    3,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_TRAP_RESERVED_MULTICAST_INFO_GET_RESERVED_MULTICAST_INFO_GET_PORT_MASK_NDX_ID,                                                            
    "da_ls_bits_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  da_ls_bits_ndx:\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api trap reserved_multicast_info_get prt_typ_ndx 0 da_ls_bits_ndx 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(19), 0},                                                                              
    4,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },
  {                                                                                        
    PARAM_TIMNA_TIMNA_TRAP_SNOOP_INFO_SET_SNOOP_INFO_SET_ID,                                                            
    "snoop_info_set",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Selects one of 15 Snoop actions for one of the protocols:-  ARP-  IGMP\r\n"
    "  1/2/(other) (IGMP-Hdr.Type =1/2/other) -  VRRP -  ICMv6\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api trap snoop_info_set prtcl_ndx 0 snp_ptr 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(20), 0},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_TRAP_SNOOP_INFO_SET_SNOOP_INFO_SET_PRTCL_NDX_ID,                                                            
    "prtcl_ndx",                                                                       
    (PARAM_VAL_RULES *)&TIMNA_TRAP_PROTOCOL_rule[0],                                            
    (sizeof(TIMNA_TRAP_PROTOCOL_rule) / sizeof(TIMNA_TRAP_PROTOCOL_rule[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  prtcl_ndx:\r\n"
    "  One of the protocols that can be trapped.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api trap snoop_info_set prtcl_ndx 0 snp_ptr 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(20), 0},                                                                              
    3,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_TRAP_SNOOP_INFO_SET_SNOOP_INFO_SET_SNOOP_PTR_ID,                                                            
    "snp_ptr",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  snoop_ptr:\r\n"
    "  Snoop Action. Range 0-15.\r\n"
    "  0 Means no Snooping.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api trap snoop_info_set prtcl_ndx 0 snp_ptr 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(20), 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_TRAP_SNOOP_INFO_GET_SNOOP_INFO_GET_ID,                                                            
    "snoop_info_get",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Selects one of 15 Snoop actions for one of the protocols:-  ARP-  IGMP\r\n"
    "  1/2/(other) (IGMP-Hdr.Type =1/2/other) -  VRRP -  ICMv6\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api trap snoop_info_get prtcl_ndx 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(21), 0},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_TRAP_SNOOP_INFO_GET_SNOOP_INFO_GET_PRTCL_NDX_ID,                                                            
    "prtcl_ndx",                                                                       
    (PARAM_VAL_RULES *)&TIMNA_TRAP_PROTOCOL_rule[0],                                            
    (sizeof(TIMNA_TRAP_PROTOCOL_rule) / sizeof(TIMNA_TRAP_PROTOCOL_rule[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  prtcl_ndx:\r\n"
    "  One of the protocols that can be trapped.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api trap snoop_info_get prtcl_ndx 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(21), 0},                                                                              
    3,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_SNOOP_RESERVED_MULTICAST_INFO_SET_SNOOP_RESERVED_MULTICAST_INFO_SET_ID,                                                            
    "snoop_reserved_multicast_info_set",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Selects one of 15 Snoop actions to be applied to \r\n"
    "  reserved multicast packets that are designated to port\r\n"
    "  that:\r\n"
    "  - Its type is port_type and\r\n"
    "  - The 6-lsb of its number is equal to port_mask.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api trap snoop_reserved_multicast_info_set prt_typ_ndx 0\r\n"
    "  da_ls_bits_ndx 0 snp_ptr 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(22), 0},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_SNOOP_RESERVED_MULTICAST_INFO_SET_SNOOP_RESERVED_MULTICAST_INFO_SET_PORT_TYPE_NDX_ID,                                                            
    "prt_typ_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  port_type_ndx:\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api trap snoop_reserved_multicast_info_set prt_typ_ndx 0\r\n"
    "  da_ls_bits_ndx 0 snp_ptr 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(22), 0},                                                                              
    3,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_SNOOP_RESERVED_MULTICAST_INFO_SET_SNOOP_RESERVED_MULTICAST_INFO_SET_PORT_MASK_NDX_ID,                                                            
    "da_ls_bits_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  port_mask_ndx:\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api trap snoop_reserved_multicast_info_set prt_typ_ndx 0\r\n"
    "  da_ls_bits_ndx 0 snp_ptr 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(22), 0},                                                                              
    4,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_SNOOP_RESERVED_MULTICAST_INFO_SET_SNOOP_RESERVED_MULTICAST_INFO_SET_SNOOP_PTR_ID,                                                            
    "snp_ptr",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  snoop_ptr:\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api trap snoop_reserved_multicast_info_set prt_typ_ndx 0\r\n"
    "  da_ls_bits_ndx 0 snp_ptr 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(22), 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_SNOOP_RESERVED_MULTICAST_INFO_GET_SNOOP_RESERVED_MULTICAST_INFO_GET_ID,                                                            
    "snoop_reserved_multicast_info_get",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Selects one of 15 Snoop actions to be applied to \r\n"
    "  reserved multicast packets that are designated to port\r\n"
    "  that:\r\n"
    "  - Its type is port_type and\r\n"
    "  - The 6-lsb of its number is equal to port_mask.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api trap snoop_reserved_multicast_info_get prt_typ_ndx 0\r\n"
    "  da_ls_bits_ndx 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(23), 0},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_SNOOP_RESERVED_MULTICAST_INFO_GET_SNOOP_RESERVED_MULTICAST_INFO_GET_PORT_TYPE_NDX_ID,                                                            
    "prt_typ_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  port_type_ndx:\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api trap snoop_reserved_multicast_info_get prt_typ_ndx 0\r\n"
    "  da_ls_bits_ndx 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(23), 0},                                                                              
    3,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_SNOOP_RESERVED_MULTICAST_INFO_GET_SNOOP_RESERVED_MULTICAST_INFO_GET_PORT_MASK_NDX_ID,                                                            
    "da_ls_bits_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  port_mask_ndx:\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api trap snoop_reserved_multicast_info_get prt_typ_ndx 0\r\n"
    "  da_ls_bits_ndx 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(23), 0},                                                                              
    4,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_API_TRAP_ID,                                                            
    "trap",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "",
    "",
    "",                                                                                  
    {0, 0, BIT(14)|BIT(15)|BIT(16)|BIT(17)|BIT(18)|BIT(19)|BIT(20)|BIT(21)|BIT(22)|BIT(23), 0},                                                                              
    1,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
#endif /* } trap*/
#ifdef UI_VSID/* { vsid*/
  {                                                                                        
    PARAM_TIMNA_TIMNA_VSID_OPEN_OPEN_ID,                                                            
    "open",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Open VSI and set the information that determined uniquely by\r\n"
    "  this VSI. \r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vsid open vsd_ndx 0 frwrd_action_da_not_fnd_mc 0\r\n"
    "  frwrd_action_da_not_fnd_uc 0 trffc_clss_ndx 0 enable_learning 0\r\n"
    "  fld_lfg 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(24), 0},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VSID_OPEN_OPEN_VSID_NDX_ID,                                                            
    "vsd_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  vsid_ndx:\r\n"
    "  The id of the VSI. \r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vsid open vsd_ndx 0 frwrd_action_da_not_fnd_mc 0\r\n"
    "  frwrd_action_da_not_fnd_uc 0 trffc_clss_ndx 0 enable_learning 0\r\n"
    "  fld_lfg 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(24), 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VSID_OPEN_OPEN_VSID_INFO_FRWRD_ACTION_DA_NOT_FOUND_MC_ID,                                                            
    "frwrd_action_da_not_fnd_mc",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  vsid_info.frwrd_action_da_not_found_mc:\r\n"
    "  Selects one of two global Forwarding Actions. For Packets designated to MC\r\n"
    "  DA, and wasn't found in the MAC table lookup.Refer to:Range 0-1.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vsid open vsd_ndx 0 frwrd_action_da_not_fnd_mc 0\r\n"
    "  frwrd_action_da_not_fnd_uc 0 trffc_clss_ndx 0 enable_learning 0\r\n"
    "  fld_lfg 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(24), 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VSID_OPEN_OPEN_VSID_INFO_FRWRD_ACTION_DA_NOT_FOUND_UC_ID,                                                            
    "frwrd_action_da_not_fnd_uc",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  vsid_info.frwrd_action_da_not_found_uc:\r\n"
    "  Selects one of two global Forwarding Actions. For Packets designated to UC\r\n"
    "  DA, and wasn't found in the MAC table lookup.Refer to:Range 0-1.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vsid open vsd_ndx 0 frwrd_action_da_not_fnd_mc 0\r\n"
    "  frwrd_action_da_not_fnd_uc 0 trffc_clss_ndx 0 enable_learning 0\r\n"
    "  fld_lfg 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(24), 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VSID_OPEN_OPEN_VSID_INFO_TRAFFIC_CLASS_INDEX_ID,                                                            
    "trffc_clss_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  vsid_info.traffic_class_index:\r\n"
    "  one of four default traffic classes.Range 0-3.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vsid open vsd_ndx 0 frwrd_action_da_not_fnd_mc 0\r\n"
    "  frwrd_action_da_not_fnd_uc 0 trffc_clss_ndx 0 enable_learning 0\r\n"
    "  fld_lfg 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(24), 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VSID_OPEN_OPEN_VSID_INFO_ENABLE_LEARN_ID,                                                            
    "enable_learning",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  vsid_info.enable_learn:\r\n"
    "  Enables dynamic MAC learning for this VSID\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vsid open vsd_ndx 0 frwrd_action_da_not_fnd_mc 0\r\n"
    "  frwrd_action_da_not_fnd_uc 0 trffc_clss_ndx 0 enable_learning 0\r\n"
    "  fld_lfg 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(24), 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VSID_OPEN_OPEN_VSID_INFO_FLOOD_LIFG_ID,                                                            
    "fld_lfg",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  vsid_info.flood_lifg:\r\n"
    "  LIFG to flood unknown DA packets\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vsid open vsd_ndx 0 frwrd_action_da_not_fnd_mc 0\r\n"
    "  frwrd_action_da_not_fnd_uc 0 trffc_clss_ndx 0 enable_learning 0\r\n"
    "  fld_lfg 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(24), 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },
    {                                                                                        
    PARAM_TIMNA_TIMNA_VSID_UPDATE_UPDATE_ID,                                                            
    "update",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  UPDATE VSI and set the information that determined uniquely by\r\n"
    "  this VSI. \r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vsid update vsd_ndx 0 frwrd_action_da_not_fnd_mc 0\r\n"
    "  frwrd_action_da_not_fnd_uc 0 trffc_clss_ndx 0 enable_learning 0\r\n"
    "  fld_lfg 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, 0, BIT(9)},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VSID_UPDATE_UPDATE_VSID_NDX_ID,                                                            
    "vsd_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  vsid_ndx:\r\n"
    "  The id of the VSI. \r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vsid update vsd_ndx 0 frwrd_action_da_not_fnd_mc 0\r\n"
    "  frwrd_action_da_not_fnd_uc 0 trffc_clss_ndx 0 enable_learning 0\r\n"
    "  fld_lfg 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, 0, BIT(9)},                                                                              
    3,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VSID_UPDATE_UPDATE_VSID_INFO_FRWRD_ACTION_DA_NOT_FOUND_MC_ID,                                                            
    "frwrd_action_da_not_fnd_mc",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  vsid_info.frwrd_action_da_not_found_mc:\r\n"
    "  Selects one of two global Forwarding Actions. For Packets designated to MC\r\n"
    "  DA, and wasn't found in the MAC table lookup.Refer to:Range 0-1.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vsid update vsd_ndx 0 frwrd_action_da_not_fnd_mc 0\r\n"
    "  frwrd_action_da_not_fnd_uc 0 trffc_clss_ndx 0 enable_learning 0\r\n"
    "  fld_lfg 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, 0, BIT(9)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VSID_UPDATE_UPDATE_VSID_INFO_FRWRD_ACTION_DA_NOT_FOUND_UC_ID,                                                            
    "frwrd_action_da_not_fnd_uc",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  vsid_info.frwrd_action_da_not_found_uc:\r\n"
    "  Selects one of two global Forwarding Actions. For Packets designated to UC\r\n"
    "  DA, and wasn't found in the MAC table lookup.Refer to:Range 0-1.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vsid update vsd_ndx 0 frwrd_action_da_not_fnd_mc 0\r\n"
    "  frwrd_action_da_not_fnd_uc 0 trffc_clss_ndx 0 enable_learning 0\r\n"
    "  fld_lfg 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, 0, BIT(9)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VSID_UPDATE_UPDATE_VSID_INFO_TRAFFIC_CLASS_INDEX_ID,                                                            
    "trffc_clss_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  vsid_info.traffic_class_index:\r\n"
    "  one of four default traffic classes.Range 0-3.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vsid update vsd_ndx 0 frwrd_action_da_not_fnd_mc 0\r\n"
    "  frwrd_action_da_not_fnd_uc 0 trffc_clss_ndx 0 enable_learning 0\r\n"
    "  fld_lfg 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, 0, BIT(9)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VSID_UPDATE_UPDATE_VSID_INFO_ENABLE_LEARN_ID,                                                            
    "enable_learning",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  vsid_info.enable_learn:\r\n"
    "  Enables dynamic MAC learning for this VSID\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vsid update vsd_ndx 0 frwrd_action_da_not_fnd_mc 0\r\n"
    "  frwrd_action_da_not_fnd_uc 0 trffc_clss_ndx 0 enable_learning 0\r\n"
    "  fld_lfg 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, 0, BIT(9)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VSID_UPDATE_UPDATE_VSID_INFO_FLOOD_LIFG_ID,                                                            
    "fld_lfg",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  vsid_info.flood_lifg:\r\n"
    "  LIFG to flood unknown DA packets\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vsid update vsd_ndx 0 frwrd_action_da_not_fnd_mc 0\r\n"
    "  frwrd_action_da_not_fnd_uc 0 trffc_clss_ndx 0 enable_learning 0\r\n"
    "  fld_lfg 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, 0, BIT(9)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
 
  {                                                                                        
    PARAM_TIMNA_TIMNA_VSID_UPDATE_UPDATE_VSID_TABLE_INDX_ID,                                                            
    "tbl_ndx",                                                                       
    (PARAM_VAL_RULES *)&TIMNA_VSID_TABLE_SELECT_rule[0],                                            
    (sizeof(TIMNA_VSID_TABLE_SELECT_rule) / sizeof(TIMNA_VSID_TABLE_SELECT_rule[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  tbl_ndx:\r\n"
    "  update VC or ethernet VSIs. \r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vsid update vsd_ndx 0 frwrd_action_da_not_fnd_mc 0\r\n"
    "  frwrd_action_da_not_fnd_uc 0 trffc_clss_ndx 0 enable_learning 0\r\n"
    "  fld_lfg 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, 0, BIT(9)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VSID_INFO_GET_VSID_INFO_GET_ID,                                                            
    "vsid_info_get",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Get the VSI info. \r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api default_section vsid_info_get vsd_ndx 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, BIT(24)},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VSID_INFO_GET_VSID_INFO_GET_VSID_NDX_ID,                                                            
    "vsd_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  vsid_ndx:\r\n"
    "  The id of the VSI. Range 0-16382. \r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api default_section vsid_info_get vsd_ndx 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, BIT(24)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },    
  {                                                                                        
    PARAM_TIMNA_TIMNA_VSID_CLOSE_CLOSE_ID,                                                            
    "close",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Close VSI, \r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vsid close vsd_ndx 0 table_ndx 0 \r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(25), 0},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VSID_CLOSE_CLOSE_VSID_NDX_ID,                                                            
    "vsd_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  vsid_ndx:\r\n"
    "  The id of the VSI. \r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vsid close vsd_ndx 0 table_ndx 0 \r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(25), 0},                                                                              
    3,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VSID_MPLS_VC_IN_MAP_MPLS_VC_IN_MAP_ID,                                                            
    "mpls_vc_in_map",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  map incomming VC (MPLS Pseudo Wire) and associate it with vsid and inlif, so\r\n"
    "  MPLS packets with vc_label_ndx label accepted, and further processed by the\r\n"
    "  device. \r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vsid mpls_vc_in_map vc_lbl_ndx 0 nlf 0 vsd 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(26), 0},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VSID_MPLS_VC_IN_MAP_MPLS_VC_IN_MAP_VC_LABEL_NDX_ID,                                                            
    "vc_lbl_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  vc_label_ndx:\r\n"
    "  The label of the VC to open. \r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vsid mpls_vc_in_map vc_lbl_ndx 0 nlf 0 vsd 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(26), 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VSID_MPLS_VC_IN_MAP_MPLS_VC_IN_MAP_INLIF_ID,                                                            
    "nlf",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  inlif:\r\n"
    "  The inlif this VC associated to. \r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vsid mpls_vc_in_map vc_lbl_ndx 0 nlf 0 vsd 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(26), 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VSID_MPLS_VC_IN_MAP_MPLS_VC_IN_MAP_VSID_ID,                                                            
    "vsd",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  vsid:\r\n"
    "  The id of the VSI this label associated to. \r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vsid mpls_vc_in_map vc_lbl_ndx 0 nlf 0 vsd 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(26), 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VSID_MPLS_VC_IN_UNMAP_MPLS_VC_IN_UNMAP_ID,                                                            
    "mpls_vc_in_unmap",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  unmap VC label(MPLS Pseudo Wire) from an in_lif. \r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vsid mpls_vc_in_unmap vc_lbl_ndx 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(27), 0},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VSID_MPLS_VC_IN_UNMAP_MPLS_VC_IN_UNMAP_VC_LABEL_NDX_ID,                                                            
    "vc_lbl_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  vc_label_ndx:\r\n"
    "  The label of the VC to unmap. \r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vsid mpls_vc_in_unmap vc_lbl_ndx 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(27), 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VSID_PORT_VLAN_MAP_VLAN_MAP_ID,                                                            
    "vlan_map",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Map vlan (including member ports of this vlan) to vsid. \r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vsid vlan_map port_ndx 0 vid_ndx 0 c_vid_ndx 0  vsd 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(28), 0},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VSID_PORT_VLAN_MAP_VLAN_MAP_S_VID_NDX_ID,                                                            
    "vid_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  vid_ndx:\r\n"
    "  The S vlan id. \r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vsid vlan_map port_ndx 0 vid_ndx 0 c_vid_ndx 0  vsd 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(28), 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VSID_PORT_VLAN_MAP_VLAN_MAP_C_VID_NDX_ID,                                                            
    "c_vid_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  c_vid_ndx:\r\n"
    "  The C vlan id. \r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vsid vlan_map port_ndx 0 vid_ndx 0 c_vid_ndx 0  vsd 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(28), 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VSID_PORT_VLAN_MAP_VLAN_MAP_MEMBER_PORTS_0_ID,                                                            
    "port_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  port_ndx:\r\n"
    "  TIMNA_NOF_LOCAL_PORTS] - ports member in the VLAN. \r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vsid vlan_map port_ndx 0 vid_ndx 0 c_vid_ndx 0  vsd 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(28), 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
/*  {                                                                                        
    PARAM_TIMNA_TIMNA_VSID_PORT_VLAN_MAP_VLAN_MAP_MEMBER_PORTS_1_ID,                                                            
    "mmbr_prts_1",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  member_ports[1]:\r\n"
    "  TIMNA_NOF_LOCAL_PORTS] - ports member in the VLAN. \r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vsid vlan_map vid_ndx 0 c_vid_ndx 0 mmbr_prts_0 0 mmbr_prts_1 1 nof_mmbr_prts 0 vsd 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(28), 0},                                                                              
    LAST_ORDINAL,                                                                                     
  */    /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
/*    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VSID_PORT_VLAN_MAP_VLAN_MAP_NOF_MEMBER_PORTS_ID,                                                            
    "nof_mmbr_prts",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  nof_member_ports:\r\n"
    "  number of ports in the membership. \r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vsid vlan_map vid_ndx 0 c_vid_ndx 0 mmbr_prts_0 0 mmbr_prts_1 1 nof_mmbr_prts 0 vsd 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(28), 0},                                                                              
    LAST_ORDINAL,                                                                                     
    (VAL_PROC_PTR)NULL                                                                     
  },  
  */
  {                                                                                        
    PARAM_TIMNA_TIMNA_VSID_PORT_VLAN_MAP_VLAN_MAP_VSID_ID,                                                            
    "vsd",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  vsid:\r\n"
    "  The id of the VSI this vlan associated to. \r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vsid vlan_map port_ndx 0 vid_ndx 0 c_vid_ndx 0  vsd 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(28), 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VSID_PORT_VLAN_UNMAP_VLAN_UNMAP_ID,                                                            
    "vlan_unmap",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  unmap vlan from vsid.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vsid vlan_map port_ndx 0 vid_ndx 0 c_vid_ndx 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(29), 0},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VSID_PORT_VLAN_UNMAP_VLAN_UNMAP_S_VID_NDX_ID,                                                            
    "vid_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  vid_ndx:\r\n"
    "  The s vlan id. \r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vsid vlan_map port_ndx 0 vid_ndx 0 c_vid_ndx 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(29), 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VSID_PORT_VLAN_UNMAP_VLAN_UNMAP_C_VID_NDX_ID,                                                            
    "c_vid_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  vid_ndx:\r\n"
    "  The c vlan id. \r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vsid vlan_map port_ndx 0 vid_ndx 0 c_vid_ndx 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(29), 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VSID_PORT_VLAN_UNMAP_VLAN_UNMAP_PORT_NDX_ID,                                                            
    "port_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  port_ndx:\r\n"
    "  port id. \r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vsid vlan_map port_ndx 0 vid_ndx 0 c_vid_ndx 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(29), 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VSID_ASSOCIATE_POLICER_ASSOCIATE_POLICER_ID,                                                            
    "associate_policer",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Sets mapping from service according to rule to\r\n"
    "  to one of the 32K ingress policers and to a policing controller.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vsid associate_policer tbl_ndx 0 rul_c_vid 0 rul_c_vid_vld 0\r\n"
    "  rul_vid 0 rul_vid_vld 0 rul_prt_id 0 rul_prt_vld 0 rul_nlf_vlu 0\r\n"
    "  rul_nlf_vld 0 rul_vsd_vlu 0 rul_vsd_vld 0 rul_end 0 rul_strt 0 policer_id 0\r\n"
    "  cntrl_ptr 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(30), 0},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VSID_ASSOCIATE_POLICER_ASSOCIATE_POLICER_TABLE_NDX_ID,                                                            
    "tbl_ndx",                                                                       
    (PARAM_VAL_RULES *)&TIMNA_VSID_TABLE_SELECT_rule[0],                                            
    (sizeof(TIMNA_VSID_TABLE_SELECT_rule) / sizeof(TIMNA_VSID_TABLE_SELECT_rule[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  table_ndx:\r\n"
    "  choose which table, table of VC label, or Ethernet Table.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vsid associate_policer tbl_ndx 0 rul_c_vid 0 rul_c_vid_vld 0\r\n"
    "  rul_vid 0 rul_vid_vld 0 rul_prt_id 0 rul_prt_vld 0 rul_nlf_vlu 0\r\n"
    "  rul_nlf_vld 0 rul_vsd_vlu 0 rul_vsd_vld 0 rul_end 0 rul_strt 0 policer_id 0\r\n"
    "  cntrl_ptr 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(30), 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VSID_ASSOCIATE_POLICER_ASSOCIATE_POLICER_RULE_C_VID_ID,                                                            
    "rul_c_vid",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  rule.c_vid:\r\n"
    "  The vid of the c-tag (the internal tag).\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vsid associate_policer tbl_ndx 0 rul_c_vid 0 rul_c_vid_vld 0\r\n"
    "  rul_vid 0 rul_vid_vld 0 rul_prt_id 0 rul_prt_vld 0 rul_nlf_vlu 0\r\n"
    "  rul_nlf_vld 0 rul_vsd_vlu 0 rul_vsd_vld 0 rul_end 0 rul_strt 0 policer_id 0\r\n"
    "  cntrl_ptr 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(30), 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VSID_ASSOCIATE_POLICER_ASSOCIATE_POLICER_RULE_C_VID_VALID_ID,                                                            
    "rul_c_vid_vld",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  rule.c_vid_valid:\r\n"
    "  Whether to consider the c_vid.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vsid associate_policer tbl_ndx 0 rul_c_vid 0 rul_c_vid_vld 0\r\n"
    "  rul_vid 0 rul_vid_vld 0 rul_prt_id 0 rul_prt_vld 0 rul_nlf_vlu 0\r\n"
    "  rul_nlf_vld 0 rul_vsd_vlu 0 rul_vsd_vld 0 rul_end 0 rul_strt 0 policer_id 0\r\n"
    "  cntrl_ptr 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(30), 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VSID_ASSOCIATE_POLICER_ASSOCIATE_POLICER_RULE_S_VID_ID,                                                            
    "rul_vid",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  rule.vid:\r\n"
    "  The vid of the s-tag (the external tag).\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vsid associate_policer tbl_ndx 0 rul_c_vid 0 rul_c_vid_vld 0\r\n"
    "  rul_vid 0 rul_vid_vld 0 rul_prt_id 0 rul_prt_vld 0 rul_nlf_vlu 0\r\n"
    "  rul_nlf_vld 0 rul_vsd_vlu 0 rul_vsd_vld 0 rul_end 0 rul_strt 0 policer_id 0\r\n"
    "  cntrl_ptr 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(30), 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VSID_ASSOCIATE_POLICER_ASSOCIATE_POLICER_RULE_S_VID_VALID_ID,                                                            
    "rul_vid_vld",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  rule.vid_valid:\r\n"
    "  Whether to consider the vid.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vsid associate_policer tbl_ndx 0 rul_c_vid 0 rul_c_vid_vld 0\r\n"
    "  rul_vid 0 rul_vid_vld 0 rul_prt_id 0 rul_prt_vld 0 rul_nlf_vlu 0\r\n"
    "  rul_nlf_vld 0 rul_vsd_vlu 0 rul_vsd_vld 0 rul_end 0 rul_strt 0 policer_id 0\r\n"
    "  cntrl_ptr 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(30), 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VSID_ASSOCIATE_POLICER_ASSOCIATE_POLICER_RULE_PORT_ID_ID,                                                            
    "rul_prt_id",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  rule.port_id:\r\n"
    "  The local port id.Range 0-31.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vsid associate_policer tbl_ndx 0 rul_c_vid 0 rul_c_vid_vld 0\r\n"
    "  rul_vid 0 rul_vid_vld 0 rul_prt_id 0 rul_prt_vld 0 rul_nlf_vlu 0\r\n"
    "  rul_nlf_vld 0 rul_vsd_vlu 0 rul_vsd_vld 0 rul_end 0 rul_strt 0 policer_id 0\r\n"
    "  cntrl_ptr 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(30), 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VSID_ASSOCIATE_POLICER_ASSOCIATE_POLICER_RULE_PORT_VALID_ID,                                                            
    "rul_prt_vld",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  rule.port_valid:\r\n"
    "  Whether to consider the c_vid.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vsid associate_policer tbl_ndx 0 rul_c_vid 0 rul_c_vid_vld 0\r\n"
    "  rul_vid 0 rul_vid_vld 0 rul_prt_id 0 rul_prt_vld 0 rul_nlf_vlu 0\r\n"
    "  rul_nlf_vld 0 rul_vsd_vlu 0 rul_vsd_vld 0 rul_end 0 rul_strt 0 policer_id 0\r\n"
    "  cntrl_ptr 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(30), 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VSID_ASSOCIATE_POLICER_ASSOCIATE_POLICER_RULE_INLIF_VALUE_ID,                                                            
    "rul_nlf_vlu",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  rule.inlif_value:\r\n"
    "  The inlif value\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vsid associate_policer tbl_ndx 0 rul_c_vid 0 rul_c_vid_vld 0\r\n"
    "  rul_vid 0 rul_vid_vld 0 rul_prt_id 0 rul_prt_vld 0 rul_nlf_vlu 0\r\n"
    "  rul_nlf_vld 0 rul_vsd_vlu 0 rul_vsd_vld 0 rul_end 0 rul_strt 0 policer_id 0\r\n"
    "  cntrl_ptr 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(30), 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VSID_ASSOCIATE_POLICER_ASSOCIATE_POLICER_RULE_INLIF_VALID_ID,                                                            
    "rul_nlf_vld",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  rule.inlif_valid:\r\n"
    "  Whether to consider the inlif_value.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vsid associate_policer tbl_ndx 0 rul_c_vid 0 rul_c_vid_vld 0\r\n"
    "  rul_vid 0 rul_vid_vld 0 rul_prt_id 0 rul_prt_vld 0 rul_nlf_vlu 0\r\n"
    "  rul_nlf_vld 0 rul_vsd_vlu 0 rul_vsd_vld 0 rul_end 0 rul_strt 0 policer_id 0\r\n"
    "  cntrl_ptr 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(30), 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VSID_ASSOCIATE_POLICER_ASSOCIATE_POLICER_RULE_VSID_VALUE_ID,                                                            
    "rul_vsd_vlu",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  rule.vsid_value:\r\n"
    "  The vsid value\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vsid associate_policer tbl_ndx 0 rul_c_vid 0 rul_c_vid_vld 0\r\n"
    "  rul_vid 0 rul_vid_vld 0 rul_prt_id 0 rul_prt_vld 0 rul_nlf_vlu 0\r\n"
    "  rul_nlf_vld 0 rul_vsd_vlu 0 rul_vsd_vld 0 rul_end 0 rul_strt 0 policer_id 0\r\n"
    "  cntrl_ptr 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(30), 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VSID_ASSOCIATE_POLICER_ASSOCIATE_POLICER_RULE_VSID_VALID_ID,                                                            
    "rul_vsd_vld",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  rule.vsid_valid:\r\n"
    "  Whether to consider the vsid_value\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vsid associate_policer tbl_ndx 0 rul_c_vid 0 rul_c_vid_vld 0\r\n"
    "  rul_vid 0 rul_vid_vld 0 rul_prt_id 0 rul_prt_vld 0 rul_nlf_vlu 0\r\n"
    "  rul_nlf_vld 0 rul_vsd_vlu 0 rul_vsd_vld 0 rul_end 0 rul_strt 0 policer_id 0\r\n"
    "  cntrl_ptr 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(30), 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VSID_ASSOCIATE_POLICER_ASSOCIATE_POLICER_RULE_END_ID,                                                            
    "rul_end",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  rule.end:\r\n"
    "  Till which entryRange 0-TIMNA_NOF_VSID TODO\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vsid associate_policer tbl_ndx 0 rul_c_vid 0 rul_c_vid_vld 0\r\n"
    "  rul_vid 0 rul_vid_vld 0 rul_prt_id 0 rul_prt_vld 0 rul_nlf_vlu 0\r\n"
    "  rul_nlf_vld 0 rul_vsd_vlu 0 rul_vsd_vld 0 rul_end 0 rul_strt 0 policer_id 0\r\n"
    "  cntrl_ptr 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(30), 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VSID_ASSOCIATE_POLICER_ASSOCIATE_POLICER_RULE_START_ID,                                                            
    "rul_strt",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  rule.start:\r\n"
    "  Start from which entryRange 0-TIMNA_NOF_VSID TODO\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vsid associate_policer tbl_ndx 0 rul_c_vid 0 rul_c_vid_vld 0\r\n"
    "  rul_vid 0 rul_vid_vld 0 rul_prt_id 0 rul_prt_vld 0 rul_nlf_vlu 0\r\n"
    "  rul_nlf_vld 0 rul_vsd_vlu 0 rul_vsd_vld 0 rul_end 0 rul_strt 0 policer_id 0\r\n"
    "  cntrl_ptr 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(30), 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VSID_ASSOCIATE_POLICER_ASSOCIATE_POLICER_POLICER_ID_ID,                                                            
    "policer_id",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  policer_id:\r\n"
    "  Policer ID to be attached with the service. Range 1-32K. Zero indicates no\r\n"
    "  policing. \r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vsid associate_policer tbl_ndx 0 rul_c_vid 0 rul_c_vid_vld 0\r\n"
    "  rul_vid 0 rul_vid_vld 0 rul_prt_id 0 rul_prt_vld 0 rul_nlf_vlu 0\r\n"
    "  rul_nlf_vld 0 rul_vsd_vlu 0 rul_vsd_vld 0 rul_end 0 rul_strt 0 policer_id 0\r\n"
    "  cntrl_ptr 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(30), 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VSID_ASSOCIATE_POLICER_ASSOCIATE_POLICER_CONTROL_PTR_ID,                                                            
    "cntrl_ptr",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  control_ptr:\r\n"
    "  defines how to treat the policer results (the resulted color), there are 8\r\n"
    "  controllers that are hard coded (not configurable. Range 0-7.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vsid associate_policer tbl_ndx 0 rul_c_vid 0 rul_c_vid_vld 0\r\n"
    "  rul_vid 0 rul_vid_vld 0 rul_prt_id 0 rul_prt_vld 0 rul_nlf_vlu 0\r\n"
    "  rul_nlf_vld 0 rul_vsd_vlu 0 rul_vsd_vld 0 rul_end 0 rul_strt 0 policer_id 0\r\n"
    "  cntrl_ptr 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(30), 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VSID_IN_VC_ASSOCIATED_POLICER_GET_IN_VC_ASSOCIATED_POLICER_GET_ID,                                                            
    "in_vc_associated_policer_get",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Gets the policer that a VC label is policed according.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vsid in_vc_associated_policer_get vc_lbl_ndx 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(31), 0},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VSID_IN_VC_ASSOCIATED_POLICER_GET_IN_VC_ASSOCIATED_POLICER_GET_VC_LABEL_NDX_ID,                                                            
    "vc_lbl_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  vc_label_ndx:\r\n"
    "  the VC label.\r\n"
    "  SOC_SAND_IN uint32\r\n"
    "  *policer_id -\r\n"
    "  Policer ID to be attached with the VC label. Zero indicates no policing.\r\n"
    "  SOC_SAND_IN uint32\r\n"
    "  *control_ptr\r\n"
    "  defines how to treat the policer results (the resulted color), there are 8\r\n"
    "  controllers that are hard coded (not configurable. RETURN\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vsid in_vc_associated_policer_get vc_lbl_ndx 0\r\n"
    "",
    "",                                                                                  
    {0, 0, BIT(31), 0},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VSID_PORT_VLAN_ASSOCIATED_POLICER_GET_PORT_VLAN_ASSOCIATED_POLICER_GET_ID,                                                            
    "port_vlan_associated_policer_get",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Gets the policer that a (port,vlan) is policed according.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vsid port_vlan_associated_policer_get c_vid_vld 0\r\n"
    "  c_vid 0 vid 0 prt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, BIT(0)},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VSID_PORT_VLAN_ASSOCIATED_POLICER_GET_PORT_VLAN_ASSOCIATED_POLICER_GET_ETH_INFO_NDX_C_VID_VALID_ID,                                                            
    "c_vid_vld",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  eth_info_ndx.c_vid_valid:\r\n"
    "  Whether to consider the c_vid.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vsid port_vlan_associated_policer_get c_vid_vld 0\r\n"
    "  c_vid 0 vid 0 prt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, BIT(0)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VSID_PORT_VLAN_ASSOCIATED_POLICER_GET_PORT_VLAN_ASSOCIATED_POLICER_GET_ETH_INFO_NDX_C_VID_ID,                                                            
    "c_vid",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  eth_info_ndx.c_vid:\r\n"
    "  The vid of the c-tag (the external tag).\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vsid port_vlan_associated_policer_get c_vid_vld 0\r\n"
    "  c_vid 0 vid 0 prt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, BIT(0)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VSID_PORT_VLAN_ASSOCIATED_POLICER_GET_PORT_VLAN_ASSOCIATED_POLICER_GET_ETH_INFO_NDX_S_VID_ID,                                                            
    "vid",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  eth_info_ndx.vid:\r\n"
    "  The vid of the s-tag (the external tag).\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vsid port_vlan_associated_policer_get c_vid_vld 0\r\n"
    "  c_vid 0 vid 0 prt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, BIT(0)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VSID_PORT_VLAN_ASSOCIATED_POLICER_GET_PORT_VLAN_ASSOCIATED_POLICER_GET_ETH_INFO_NDX_PORT_ID,                                                            
    "prt",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  eth_info_ndx.port:\r\n"
    "  The local port id.Range 0-31.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vsid port_vlan_associated_policer_get c_vid_vld 0\r\n"
    "  c_vid 0 vid 0 prt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, BIT(0)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VSID_PORT_CONSIDER_DOUBLE_TAGS_INFO_SET_PORT_CONSIDER_DOUBLE_TAGS_INFO_SET_ID,                                                            
    "port_consider_double_tags_info_set",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Set for a local port whether to consider the c-tag in the mapping to VSID in\r\n"
    "  receiving double  packets. \r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vsid port_consider_double_tags_info_set prt_ndx 0 vsd_by_dbl_tgs 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, BIT(1)},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VSID_PORT_CONSIDER_DOUBLE_TAGS_INFO_SET_PORT_CONSIDER_DOUBLE_TAGS_INFO_SET_PORT_NDX_ID,                                                            
    "prt_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  port_ndx:\r\n"
    "  The ID of the local port. Range 0-31. \r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vsid port_consider_double_tags_info_set prt_ndx 0 vsd_by_dbl_tgs 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, BIT(1)},                                                                              
    3,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VSID_PORT_CONSIDER_DOUBLE_TAGS_INFO_SET_PORT_CONSIDER_DOUBLE_TAGS_INFO_SET_VSID_BY_DOUBLE_TAGS_ID,                                                            
    "vsd_by_dbl_tgs",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  vsid_by_double_tags:\r\n"
    "  To consider the c-tag or not, in the mapping from port and tags to VSID. \r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vsid port_consider_double_tags_info_set prt_ndx 0 vsd_by_dbl_tgs 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, BIT(1)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VSID_PORT_CONSIDER_DOUBLE_TAGS_INFO_GET_PORT_CONSIDER_DOUBLE_TAGS_INFO_GET_ID,                                                            
    "port_consider_double_tags_info_get",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Set for a local port whether to consider the c-tag in the mapping to VSID in\r\n"
    "  receiving double  packets. \r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vsid port_consider_double_tags_info_get prt_ndx 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, BIT(2)},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VSID_PORT_CONSIDER_DOUBLE_TAGS_INFO_GET_PORT_CONSIDER_DOUBLE_TAGS_INFO_GET_PORT_NDX_ID,                                                            
    "prt_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  port_ndx:\r\n"
    "  The ID of the local port. Range 0-31. \r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vsid port_consider_double_tags_info_get prt_ndx 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, BIT(2)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VSID_ASSOCIATED_IN_VC_LABELS_GET_ASSOCIATED_IN_VC_LABELS_GET_ID,                                                            
    "associated_in_vc_labels_get",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Returns a list of VC labels that are associated to a given VSID in a given\r\n"
    "  range.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vsid associated_in_vc_labels_get rng_ndx_ntrs_to_act 0\r\n"
    "  rng_ndx_ntrs_to_scn 0 rng_ndx_strt_ndx 0 vsd_ndx 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, BIT(3)},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VSID_ASSOCIATED_IN_VC_LABELS_GET_ASSOCIATED_IN_VC_LABELS_GET_RANGE_NDX_ENTRIES_TO_ACT_ID,                                                            
    "rng_ndx_ntrs_to_act",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  range_ndx.entries_to_act:\r\n"
    "  Number of entries to read/modify.Stop After retrieving this number of entries.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vsid associated_in_vc_labels_get rng_ndx_ntrs_to_act 0\r\n"
    "  rng_ndx_ntrs_to_scn 0 rng_ndx_strt_ndx 0 vsd_ndx 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, BIT(3)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VSID_ASSOCIATED_IN_VC_LABELS_GET_ASSOCIATED_IN_VC_LABELS_GET_RANGE_NDX_ENTRIES_TO_SCAN_ID,                                                            
    "rng_ndx_ntrs_to_scn",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  range_ndx.entries_to_scan:\r\n"
    "  The number of entries to scan.Stop After scanning this number of entries.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vsid associated_in_vc_labels_get rng_ndx_ntrs_to_act 0\r\n"
    "  rng_ndx_ntrs_to_scn 0 rng_ndx_strt_ndx 0 vsd_ndx 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, BIT(3)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VSID_ASSOCIATED_IN_VC_LABELS_GET_ASSOCIATED_IN_VC_LABELS_GET_RANGE_NDX_START_INDX_ID,                                                            
    "rng_ndx_strt_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  range_ndx.start_indx:\r\n"
    "  The index to start reading from in the VSID table.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vsid associated_in_vc_labels_get rng_ndx_ntrs_to_act 0\r\n"
    "  rng_ndx_ntrs_to_scn 0 rng_ndx_strt_ndx 0 vsd_ndx 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, BIT(3)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VSID_ASSOCIATED_IN_VC_LABELS_GET_ASSOCIATED_IN_VC_LABELS_GET_VSID_NDX_ID,                                                            
    "vsd_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  vsid_ndx:\r\n"
    "  The id of the VSI. \r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vsid associated_in_vc_labels_get rng_ndx_ntrs_to_act 0\r\n"
    "  rng_ndx_ntrs_to_scn 0 rng_ndx_strt_ndx 0 vsd_ndx 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, BIT(3)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VSID_ASSOCIATED_VLANS_GET_ASSOCIATED_VLANS_GET_ID,                                                            
    "associated_vlans_get",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Returns a list of (port, vid) that are associated to a given VSID in a given\r\n"
    "  range. \r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vsid associated_vlans_get rng_ndx_ntrs_to_act 0 rng_ndx_ntrs_to_scn\r\n"
    "  0 rng_ndx_strt_ndx 0 vsd_ndx 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, BIT(4)},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VSID_ASSOCIATED_VLANS_GET_ASSOCIATED_VLANS_GET_RANGE_NDX_ENTRIES_TO_ACT_ID,                                                            
    "rng_ndx_ntrs_to_act",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  range_ndx.entries_to_act:\r\n"
    "  Number of entries to read/modify.Stop After retrieving this number of entries.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vsid associated_vlans_get rng_ndx_ntrs_to_act 0 rng_ndx_ntrs_to_scn\r\n"
    "  0 rng_ndx_strt_ndx 0 vsd_ndx 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, BIT(4)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VSID_ASSOCIATED_VLANS_GET_ASSOCIATED_VLANS_GET_RANGE_NDX_ENTRIES_TO_SCAN_ID,                                                            
    "rng_ndx_ntrs_to_scn",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  range_ndx.entries_to_scan:\r\n"
    "  The number of entries to scan.Stop After scanning this number of entries.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vsid associated_vlans_get rng_ndx_ntrs_to_act 0 rng_ndx_ntrs_to_scn\r\n"
    "  0 rng_ndx_strt_ndx 0 vsd_ndx 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, BIT(4)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VSID_ASSOCIATED_VLANS_GET_ASSOCIATED_VLANS_GET_RANGE_NDX_START_INDX_ID,                                                            
    "rng_ndx_strt_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  range_ndx.start_indx:\r\n"
    "  The index to start reading from in the VSID table.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vsid associated_vlans_get rng_ndx_ntrs_to_act 0 rng_ndx_ntrs_to_scn\r\n"
    "  0 rng_ndx_strt_ndx 0 vsd_ndx 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, BIT(4)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VSID_ASSOCIATED_VLANS_GET_ASSOCIATED_VLANS_GET_VSID_NDX_ID,                                                            
    "vsd_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  vsid_ndx:\r\n"
    "  The id of the VSI.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vsid associated_vlans_get rng_ndx_ntrs_to_act 0 rng_ndx_ntrs_to_scn\r\n"
    "  0 rng_ndx_strt_ndx 0 vsd_ndx 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, BIT(4)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VSID_TO_FID_MAP_SET_TO_FID_MAP_SET_ID,                                                            
    "to_fid_map_set",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Map VSID to Filtering ID.\r\n"
    "  Implement shared VLAN learning.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vsid to_fid_map_set vsd_ndx 0 fid 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, BIT(5)},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VSID_TO_FID_MAP_SET_TO_FID_MAP_SET_VSID_NDX_ID,                                                            
    "vsd_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  vsid_ndx:\r\n"
    "  VSID index.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vsid to_fid_map_set vsd_ndx 0 fid 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, BIT(5)},                                                                              
    3,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VSID_TO_FID_MAP_SET_TO_FID_MAP_SET_FID_ID,                                                            
    "fid",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  fid:\r\n"
    "  Filtering ID, Range: either zero then it belongs to the shared learning\r\n"
    "  group, or the same value as the vsid_ndx which indicates individual learning.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vsid to_fid_map_set vsd_ndx 0 fid 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, BIT(5)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VSID_TO_FID_MAP_GET_TO_FID_MAP_GET_ID,                                                            
    "to_fid_map_get",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Map VSID to Filtering ID.\r\n"
    "  Implement shared VLAN learning.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vsid to_fid_map_get vsd_ndx 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, BIT(6)},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VSID_TO_FID_MAP_GET_TO_FID_MAP_GET_VSID_NDX_ID,                                                            
    "vsd_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  vsid_ndx:\r\n"
    "  VSID index.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vsid to_fid_map_get vsd_ndx 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, BIT(6)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_API_VSID_ID,                                                            
    "vsid",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "",
    "",
    "",                                                                                  
    {0, 0, BIT(24)|BIT(25)|BIT(26)|BIT(27)|BIT(28)|BIT(29)|BIT(30)|BIT(31), BIT(0)|BIT(1)|BIT(2)|BIT(3)|BIT(4)|BIT(5)|BIT(6)|BIT(24),0 ,BIT(9)},                                                                              
    1,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
#endif /* } vsid*/
#ifdef UI_POLICER/* { policer*/
  {                                                                                        
    PARAM_TIMNA_TIMNA_POLICER_GLBL_INFO_SET_GLBL_INFO_SET_ID,                                                            
    "glbl_info_set",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Sets the global information for policing. \r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api policer glbl_info_set policer_burst_vls_3 0\r\n"
    "  policer_burst_vls_2 0 policer_burst_vls_1 0 policer_burst_vls_0 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, BIT(7)},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_POLICER_GLBL_INFO_SET_GLBL_INFO_SET_POLICER_GLBL_INFO_EBS_VALS_3_ID,                                                            
    "policer_burst_value",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  policer_glbl_info.burst_vals[index]:\r\n"
    "  The global excessive burst size values. Each ingress policer may points to\r\n"
    "  one of these values.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api policer glbl_info_set policer_burst_vls_3 0\r\n"
    "  policer_burst_vls_2 0 policer_burst_vls_1 0 policer_burst_vls_0 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, BIT(7)},                                                                              
    4,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_POLICER_GLBL_INFO_SET_GLBL_INFO_SET_POLICER_GLBL_INFO_EBS_VALS_2_ID,                                                            
    "policer_burst_index",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  policer_glbl_info.burst_vals[index]:\r\n"
    "  The global excessive burst size values. Each ingress policer may points to\r\n"
    "  one of these values.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api policer glbl_info_set policer_burst_vls_3 0\r\n"
    "  policer_burst_vls_2 0 policer_burst_vls_1 0 policer_burst_vls_0 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, BIT(7)},                                                                              
    3,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_POLICER_GLBL_INFO_GET_GLBL_INFO_GET_ID,                                                            
    "glbl_info_get",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Sets the global information for policing. \r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api policer glbl_info_get\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, BIT(8)},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_POLICER_INGRESS_PARAMS_SET_INGRESS_PARAMS_SET_ID,                                                            
    "ingress_params_set",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Sets the policing attributes of an ingress policer.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api policer ingress_params_set policer_ndx 0 ebs 0\r\n"
    "  eir 0 cbs 0 cir 0\r\n"
    "  clr_wre 0 rte_mod 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, BIT(9)},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_POLICER_INGRESS_PARAMS_SET_INGRESS_PARAMS_SET_POLICER_NDX_ID,                                                            
    "policer_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  policer_ndx:\r\n"
    "  Policer ID. Range 1-64k. Zero is considered as no policing.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api policer ingress_params_set policer_ndx 0 ebs 0\r\n"
    "  eir 0 cbs 0 cir 0\r\n"
    "  clr_wre 0 rte_mod 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, BIT(9)},                                                                              
    3,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_POLICER_INGRESS_PARAMS_SET_INGRESS_PARAMS_SET_INGRESS_POLICER_PARAMS_EBS_ID,                                                            
    "ebs",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  ingress_policer_params.ebs:\r\n"
    "  Excess Burst Size (EBS)In Ingress Policer: this points to one of 32 global\r\n"
    "  ebs values. Range 0-31.In Ethernet Policer: Amount of credit that can be\r\n"
    "  accumulated and enable a burst of traffic in the line rate (which is usually\r\n"
    "  Bucket Rate) Packet mode: Number of packets in burst.Byte mode: Number of\r\n"
    "  bytes in burst. Range 0-131071 bytes.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api policer ingress_params_set policer_ndx 0 ebs 0\r\n"
    "  eir 0 cbs 0 cir 0\r\n"
    "  clr_wre 0 rte_mod 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, BIT(9)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_POLICER_INGRESS_PARAMS_SET_INGRESS_PARAMS_SET_INGRESS_POLICER_PARAMS_EIR_ID,                                                            
    "eir",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  ingress_policer_params.eir:\r\n"
    "  Excess Information Rate (EIR) Packet mode: traffic rate in packet per second\r\n"
    "  (Kpps).Byte mode: traffic rate in bits per second (Kbps).Range 1000K -\r\n"
    "  4,894,464K (packets/bits per second) with resolution of 1.56%.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api policer ingress_params_set policer_ndx 0 ebs 0\r\n"
    "  eir 0 cbs 0 cir 0\r\n"
    "  clr_wre 0 rte_mod 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, BIT(9)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_POLICER_INGRESS_PARAMS_SET_INGRESS_PARAMS_SET_INGRESS_POLICER_PARAMS_CBS_ID,                                                            
    "cbs",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  ingress_policer_params.cbs:\r\n"
    "  Committed Burst Size (CBS).In ingress policer this points to one of 32 global\r\n"
    "  cbs values. Range 0-31In Ethernet Policer: Amount of credit that can be\r\n"
    "  accumulated and enable a burst of traffic in the line rate (which is usually\r\n"
    "  Bucket Rate).Packet mode: Number of packets in burst.Byte mode: Number of\r\n"
    "  bytes in burst. Range 0-131071 bytes..\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api policer ingress_params_set policer_ndx 0 ebs 0\r\n"
    "  eir 0 cbs 0 cir 0\r\n"
    "  clr_wre 0 rte_mod 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, BIT(9)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_POLICER_INGRESS_PARAMS_SET_INGRESS_PARAMS_SET_INGRESS_POLICER_PARAMS_CIR_ID,                                                            
    "cir",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  ingress_policer_params.cir:\r\n"
    "  Committed Information Rate (CIR) Packet mode: traffic rate in packet per\r\n"
    "  second (Kpps).Byte mode: traffic rate in bits per second (Kbps).Range 1000K -\r\n"
    "  9,750,000K (packets/bits per second) with resolution of 1.56%.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api policer ingress_params_set policer_ndx 0 ebs 0\r\n"
    "  eir 0 cbs 0 cir 0\r\n"
    "  clr_wre 0 rte_mod 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, BIT(9)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_POLICER_INGRESS_PARAMS_SET_INGRESS_PARAMS_SET_INGRESS_POLICER_PARAMS_COLOR_AWARE_ID,                                                            
    "clr_wre",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  ingress_policer_params.color_aware:\r\n"
    "  Indicator.1 - policer is color aware.\r\n"
    "  In the color-aware operation, the incoming packet color (Green, Yellow, or\r\n"
    "  Red) is considered to the policing and marking algorithm; 0 - color-blind\r\n"
    "  mode assumes all incoming packets are Green colored.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api policer ingress_params_set policer_ndx 0 ebs 0\r\n"
    "  eir 0 cbs 0 cir 0\r\n"
    "  clr_wre 0 rte_mod 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, BIT(9)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_POLICER_INGRESS_PARAMS_SET_INGRESS_PARAMS_SET_INGRESS_POLICER_PARAMS_RATE_MODE_ID,                                                            
    "rte_mod",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  ingress_policer_params.rate_mode:\r\n"
    "  Packets mode or bits mode.Only bits mode is supported.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api policer ingress_params_set policer_ndx 0 ebs 0\r\n"
    "  eir 0 cbs 0 cir 0\r\n"
    "  clr_wre 0 rte_mod 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, BIT(9)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_POLICER_INGRESS_PARAMS_GET_INGRESS_PARAMS_GET_ID,                                                            
    "ingress_params_get",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Sets the policing attributes of an ingress policer.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api policer ingress_params_get policer_ndx 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, BIT(10)},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_POLICER_INGRESS_PARAMS_GET_INGRESS_PARAMS_GET_POLICER_NDX_ID,                                                            
    "policer_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  policer_ndx:\r\n"
    "  Policer ID. Range 1-64k. Zero is considered as no policing.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api policer ingress_params_get policer_ndx 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, BIT(10)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_POLICER_ETHERNET_PARAMS_SET_ETHERNET_PARAMS_SET_ID,                                                            
    "ethernet_params_set",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Sets the policing attributes of an ingress policer.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api policer ethernet_params_set policer_ndx 0 eth_policer_prms_ebs 0\r\n"
    "  eth_policer_prms_eir 0 eth_policer_prms_cbs 0 eth_policer_prms_cir 0\r\n"
    "  eth_policer_prms_clr_wre 0 eth_policer_prms_rte_mod 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, BIT(11)},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_POLICER_ETHERNET_PARAMS_SET_ETHERNET_PARAMS_SET_POLICER_NDX_ID,                                                            
    "policer_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  policer_ndx:\r\n"
    "  Policer ID. Range 1-3. Zero is considered as no policing.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api policer ethernet_params_set policer_ndx 0 eth_policer_prms_ebs 0\r\n"
    "  eth_policer_prms_eir 0 eth_policer_prms_cbs 0 eth_policer_prms_cir 0\r\n"
    "  eth_policer_prms_clr_wre 0 eth_policer_prms_rte_mod 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, BIT(11)},                                                                              
    3,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_POLICER_ETHERNET_PARAMS_SET_ETHERNET_PARAMS_SET_ETH_POLICER_PARAMS_EBS_ID,                                                            
    "eth_policer_prms_ebs",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  eth_policer_params.ebs:\r\n"
    "  Excess Burst Size (EBS)In Ingress Policer: this points to one of 32 global\r\n"
    "  ebs values. Range 0-31.In Ethernet Policer: Amount of credit that can be\r\n"
    "  accumulated and enable a burst of traffic in the line rate (which is usually\r\n"
    "  Bucket Rate) Packet mode: Number of packets in burst.Byte mode: Number of\r\n"
    "  bytes in burst. Range 0-131071 bytes.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api policer ethernet_params_set policer_ndx 0 eth_policer_prms_ebs 0\r\n"
    "  eth_policer_prms_eir 0 eth_policer_prms_cbs 0 eth_policer_prms_cir 0\r\n"
    "  eth_policer_prms_clr_wre 0 eth_policer_prms_rte_mod 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, BIT(11)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_POLICER_ETHERNET_PARAMS_SET_ETHERNET_PARAMS_SET_ETH_POLICER_PARAMS_EIR_ID,                                                            
    "eth_policer_prms_eir",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  eth_policer_params.eir:\r\n"
    "  Excess Information Rate (EIR) Packet mode: traffic rate in packet per second\r\n"
    "  (Kpps).Byte mode: traffic rate in bits per second (Kbps).Range 1000K -\r\n"
    "  4,894,464K (packets/bits per second) with resolution of 1.56%.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api policer ethernet_params_set policer_ndx 0 eth_policer_prms_ebs 0\r\n"
    "  eth_policer_prms_eir 0 eth_policer_prms_cbs 0 eth_policer_prms_cir 0\r\n"
    "  eth_policer_prms_clr_wre 0 eth_policer_prms_rte_mod 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, BIT(11)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_POLICER_ETHERNET_PARAMS_SET_ETHERNET_PARAMS_SET_ETH_POLICER_PARAMS_CBS_ID,                                                            
    "eth_policer_prms_cbs",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  eth_policer_params.cbs:\r\n"
    "  Committed Burst Size (CBS).In ingress policer this points to one of 32 global\r\n"
    "  cbs values. Range 0-31In Ethernet Policer: Amount of credit that can be\r\n"
    "  accumulated and enable a burst of traffic in the line rate (which is usually\r\n"
    "  Bucket Rate).Packet mode: Number of packets in burst.Byte mode: Number of\r\n"
    "  bytes in burst. Range 0-131071 bytes..\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api policer ethernet_params_set policer_ndx 0 eth_policer_prms_ebs 0\r\n"
    "  eth_policer_prms_eir 0 eth_policer_prms_cbs 0 eth_policer_prms_cir 0\r\n"
    "  eth_policer_prms_clr_wre 0 eth_policer_prms_rte_mod 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, BIT(11)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_POLICER_ETHERNET_PARAMS_SET_ETHERNET_PARAMS_SET_ETH_POLICER_PARAMS_CIR_ID,                                                            
    "eth_policer_prms_cir",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  eth_policer_params.cir:\r\n"
    "  Committed Information Rate (CIR) Packet mode: traffic rate in packet per\r\n"
    "  second (Kpps).Byte mode: traffic rate in bits per second (Kbps).Range 1000K -\r\n"
    "  9,750,000K (packets/bits per second) with resolution of 1.56%.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api policer ethernet_params_set policer_ndx 0 eth_policer_prms_ebs 0\r\n"
    "  eth_policer_prms_eir 0 eth_policer_prms_cbs 0 eth_policer_prms_cir 0\r\n"
    "  eth_policer_prms_clr_wre 0 eth_policer_prms_rte_mod 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, BIT(11)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_POLICER_ETHERNET_PARAMS_SET_ETHERNET_PARAMS_SET_ETH_POLICER_PARAMS_COLOR_AWARE_ID,                                                            
    "eth_policer_prms_clr_wre",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  eth_policer_params.color_aware:\r\n"
    "  Indicator.1 - policer is color aware.\r\n"
    "  In the color-aware operation, the incoming packet color (Green, Yellow, or\r\n"
    "  Red) is considered to the policing and marking algorithm; 0 - color-blind\r\n"
    "  mode assumes all incoming packets are Green colored.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api policer ethernet_params_set policer_ndx 0 eth_policer_prms_ebs 0\r\n"
    "  eth_policer_prms_eir 0 eth_policer_prms_cbs 0 eth_policer_prms_cir 0\r\n"
    "  eth_policer_prms_clr_wre 0 eth_policer_prms_rte_mod 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, BIT(11)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_POLICER_ETHERNET_PARAMS_SET_ETHERNET_PARAMS_SET_ETH_POLICER_PARAMS_RATE_MODE_ID,                                                            
    "eth_policer_prms_rte_mod",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  eth_policer_params.rate_mode:\r\n"
    "  Packets mode or bits mode.Only bits mode is supported.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api policer ethernet_params_set policer_ndx 0 eth_policer_prms_ebs 0\r\n"
    "  eth_policer_prms_eir 0 eth_policer_prms_cbs 0 eth_policer_prms_cir 0\r\n"
    "  eth_policer_prms_clr_wre 0 eth_policer_prms_rte_mod 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, BIT(11)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_POLICER_ETHERNET_PARAMS_GET_ETHERNET_PARAMS_GET_ID,                                                            
    "ethernet_params_get",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Sets the policing attributes of an ingress policer.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api policer ethernet_params_get policer_ndx 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, BIT(12)},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_POLICER_ETHERNET_PARAMS_GET_ETHERNET_PARAMS_GET_POLICER_NDX_ID,                                                            
    "policer_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  policer_ndx:\r\n"
    "  Policer ID. Range 1-3. Zero is considered as no policing.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api policer ethernet_params_get policer_ndx 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, BIT(12)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_API_POLICER_ID,                                                            
    "policer",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "",
    "",
    "",                                                                                  
    {0, 0, 0, BIT(7)|BIT(8)|BIT(9)|BIT(10)|BIT(11)|BIT(12)},                                                                              
    1,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
#endif /* } policer*/
#ifdef UI_STP/* { stp*/
  {                                                                                        
    PARAM_TIMNA_TIMNA_STP_VSID_TO_TOPOLOGY_ID_SET_VSID_TO_TOPOLOGY_ID_SET_ID,                                                            
    "vsid_to_topology_id_set",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Set a mapping from S-VID to topology ID.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api stp vsid_to_topology_id_set vsid_ndx 0 tplgy_id 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, BIT(13)},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_STP_VSID_TO_TOPOLOGY_ID_SET_VSID_TO_TOPOLOGY_ID_SET_S_VID_NDX_ID,                                                            
    "vsid_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  vsid_ndx:\r\n"
    "  VLAN ID. Range 0-16383.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api stp vsid_to_topology_id_set vsid_ndx 0 tplgy_id 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, BIT(13)},                                                                              
    3,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_STP_VSID_TO_TOPOLOGY_ID_SET_VSID_TO_TOPOLOGY_ID_SET_TOPOLOGY_ID_ID,                                                            
    "tplgy_id",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  topology_id:\r\n"
    "  STP topology ID. Range 0-255.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api stp vsid_to_topology_id_set vsid_ndx 0 tplgy_id 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, BIT(13)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_STP_VSID_TO_TOPOLOGY_ID_GET_VSID_TO_TOPOLOGY_ID_GET_ID,                                                            
    "vsid_to_topology_id_get",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Set a mapping from S-VID to topology ID.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api stp vsid_to_topology_id_get vsid_ndx 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, BIT(14)},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_STP_VSID_TO_TOPOLOGY_ID_GET_VSID_TO_TOPOLOGY_ID_GET_S_VID_NDX_ID,                                                            
    "vsid_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  vsid_ndx:\r\n"
    "  VLAN ID. Range 0-16383.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api stp vsid_to_topology_id_get vsid_ndx 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, BIT(14)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_STP_PORT_STATE_SET_PORT_STATE_SET_ID,                                                            
    "port_state_set",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Sets the ingress and egress STP state of a port for a topology ID.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api stp port_state_set prt_ndx 0 tplgy_ndx 0 negress_stt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, BIT(15)},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_STP_PORT_STATE_SET_PORT_STATE_SET_PORT_NDX_ID,                                                            
    "prt_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  port_ndx:\r\n"
    "  local port ID. Range: 0-31.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api stp port_state_set prt_ndx 0 tplgy_ndx 0 negress_stt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, BIT(15)},                                                                              
    3,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_STP_PORT_STATE_SET_PORT_STATE_SET_TOPOLOGY_NDX_ID,                                                            
    "tplgy_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  topology_ndx:\r\n"
    "  Topology ID. Range 0-255.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api stp port_state_set prt_ndx 0 tplgy_ndx 0 negress_stt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, BIT(15)},                                                                              
    4,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_STP_PORT_STATE_SET_PORT_STATE_SET_INGRESS_STATE_ID,                                                            
    "negress_stt",                                                                       
    (PARAM_VAL_RULES *)&TIMNA_STP_STATE_rule[0],                                            
    (sizeof(TIMNA_STP_STATE_rule) / sizeof(TIMNA_STP_STATE_rule[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  ingress_state:\r\n"
    "  Ingress STP state of the port (block/learn or forward)\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api stp port_state_set prt_ndx 0 tplgy_ndx 0 negress_stt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, BIT(15)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_STP_PORT_STATE_SET_PORT_STATE_SET_EGRESS_STATE_ID,                                                            
    "egress_stt",                                                                       
    (PARAM_VAL_RULES *)&TIMNA_STP_STATE_rule[0],                                            
    (sizeof(TIMNA_STP_STATE_rule) / sizeof(TIMNA_STP_STATE_rule[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  egress_state:\r\n"
    "  Egress STP state of the port (block or forward). Cannot be learn.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api stp port_state_set prt_ndx 0 tplgy_ndx 0 negress_stt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, BIT(15)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_STP_PORT_STATE_GET_PORT_STATE_GET_ID,                                                            
    "port_state_get",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Sets the ingress and egress STP state of a port for a topology ID.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api stp port_state_get prt_ndx 0 tplgy_ndx 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, BIT(16)},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_STP_PORT_STATE_GET_PORT_STATE_GET_PORT_NDX_ID,                                                            
    "prt_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  port_ndx:\r\n"
    "  local port ID. Range: 0-31.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api stp port_state_get prt_ndx 0 tplgy_ndx 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, BIT(16)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_STP_PORT_STATE_GET_PORT_STATE_GET_TOPOLOGY_NDX_ID,                                                            
    "tplgy_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  topology_ndx:\r\n"
    "  Topology ID. Range 0-255.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api stp port_state_get prt_ndx 0 tplgy_ndx 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, BIT(16)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_API_STP_ID,                                                            
    "stp",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "",
    "",
    "",                                                                                  
    {0, 0, 0, BIT(13)|BIT(14)|BIT(15)|BIT(16)},                                                                              
    1,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
#endif /* } stp*/

#ifdef UI_MNGR
  {                                                                                        
    PARAM_TIMNA_API_MNGR_FEATURE_LIST_SET_ID,                                                            
    "init",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Sets the feature list.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mngr init 0 nbl_mpls 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, BIT(19)},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_API_MNGR_FEATURE_LIST_SET_ENABLE_QINQ_ID,                                                            
    "nbl_qinq",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  nbl_qinq:\r\n"
    "  Enable Qinq. Range 0-1.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mngr nbl_qinq 0 nbl_mpls 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, BIT(19)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_API_MNGR_FEATURE_LIST_SET_ENABLE_MPLS_ID,                                                            
    "nbl_mpls",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  nbl_mpls:\r\n"
    "  Enable MPLS. Range 0-1.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mngr nbl_qinq 0 nbl_mpls 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, BIT(19)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  
  {                                                                                        
    PARAM_TIMNA_API_MNGR_ID,                                                            
    "mngr",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "",
    "",
    "",                                                                                  
    {0, 0, 0, BIT(19)},                                                                              
    1,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
#endif /* } mngr*/

#ifdef UI_VPLS/* { vpls*/
  {                                                                                        
    PARAM_TIMNA_TIMNA_VPLS_GLBL_INFO_SET_GLBL_INFO_SET_ID,                                                            
    "glbl_info_set",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Set the global VPLS information.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vpls glbl_info_set vc_rng_lst_lbl 0\r\n"
    "  vc_rng_frst_lbl 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, BIT(28)},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VPLS_GLBL_INFO_SET_GLBL_INFO_SET_VPLS_INFO_VC_RANGE_LAST_LABEL_ID,                                                            
    "vc_rng_lst_lbl",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  vpls_info.vc_range.last_label:\r\n"
    "  The last label in the range\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vpls glbl_info_set vc_rng_lst_lbl 0\r\n"
    "  vc_rng_frst_lbl 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, BIT(28)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VPLS_GLBL_INFO_SET_GLBL_INFO_SET_VPLS_INFO_VC_RANGE_FIRST_LABEL_ID,                                                            
    "vc_rng_frst_lbl",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  vpls_info.vc_range.first_label:\r\n"
    "  The First label in the range\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vpls glbl_info_set vc_rng_lst_lbl 0\r\n"
    "  vc_rng_frst_lbl 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, BIT(28)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VPLS_GLBL_INFO_GET_GLBL_INFO_GET_ID,                                                            
    "glbl_info_get",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Set the global VPLS information.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vpls glbl_info_get\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, BIT(29)},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VPLS_IN_VC_MAP_IN_VC_MAP_ID,                                                            
    "in_vc_map",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Add incoming VC (VPLS Pseudo Wire) and associate it with vsid and\r\n"
    "  inlif, so VPLS packets with vc_label_ndx label accepted, and associated with\r\n"
    "  the given vsid and inlif. \r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vpls in_vc_map vc_lbl_ndx 0 nlf 0 vsd 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, BIT(30)},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VPLS_IN_VC_MAP_IN_VC_MAP_VC_LABEL_NDX_ID,                                                            
    "vc_lbl_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  vc_label_ndx:\r\n"
    "  The label of the VC to add. \r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vpls in_vc_map vc_lbl_ndx 0 nlf 0 vsd 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, BIT(30)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VPLS_IN_VC_MAP_IN_VC_MAP_INLIF_ID,                                                            
    "nlf",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  inlif:\r\n"
    "  The inlif this VC associated to. \r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vpls in_vc_map vc_lbl_ndx 0 nlf 0 vsd 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, BIT(30)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VPLS_IN_VC_MAP_IN_VC_MAP_VSID_ID,                                                            
    "vsd",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  vsid:\r\n"
    "  The id of the VSI this label associated to. \r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vpls in_vc_map vc_lbl_ndx 0 nlf 0 vsd 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, BIT(30)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VPLS_IN_VC_UNMAP_IN_VC_UNMAP_ID,                                                            
    "in_vc_unmap",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Add incoming VC (VPLS Pseudo Wire) and associate it with vsid and inlif, so\r\n"
    "  VPLS packets with vc_label_ndx label accepted, and\r\n"
    "  urther processed by the device. \r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vpls in_vc_unmap vc_lbl_ndx 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, BIT(31)},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VPLS_IN_VC_UNMAP_IN_VC_UNMAP_VC_LABEL_NDX_ID,                                                            
    "vc_lbl_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  vc_label_ndx:\r\n"
    "  The label of the VC to remove.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vpls in_vc_unmap vc_lbl_ndx 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, BIT(31)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VPLS_OUTLIF_TO_OUT_VC_MAP_OUTLIF_TO_OUT_VC_MAP_ID,                                                            
    "outlif_to_out_vc_map",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Map outlif to this VC, so traffic designated to the given outlif will be sent\r\n"
    "  over the given VC, according to the given information.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vpls outlif_to_out_vc_map out_lif_ndx 0 tunnel_id 0\r\n"
    "  over_mpls 1 ttl_ptr 0 exp 0 lbl 0 out_vsd 0\r\n"
    "  vrwrt_vsd 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(0)},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VPLS_OUTLIF_TO_OUT_VC_MAP_OUTLIF_TO_OUT_VC_MAP_OUT_LIF_NDX_ID,                                                            
    "out_lif_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  out_lif_ndx:\r\n"
    "  outlif id.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vpls outlif_to_out_vc_map out_lif_ndx 0 tunnel_id 0\r\n"
    "  over_mpls 1 ttl_ptr 0 exp 0 lbl 0 out_vsd 0\r\n"
    "  vrwrt_vsd 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(0)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VPLS_OUTLIF_TO_OUT_VC_MAP_OUTLIF_TO_OUT_VC_MAP_VC_INFO_TUNNEL_ID_ID,                                                            
    "tunnel_id",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  vc_info.tunnel_id:\r\n"
    "  The Tunnel id this VC belongs to.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vpls outlif_to_out_vc_map out_lif_ndx 0 tunnel_id 0\r\n"
    "  over_mpls 1 ttl_ptr 0 exp 0 lbl 0 out_vsd 0\r\n"
    "  vrwrt_vsd 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(0)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VPLS_OUTLIF_TO_OUT_VC_MAP_OUTLIF_TO_OUT_VC_MAP_VC_INFO_VC_OVER_MPLS_ID,                                                            
    "over_mpls",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  vc_info.over_mpls:\r\n"
    "  Whether the vc over mpls tunnel or without.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vpls outlif_to_out_vc_map out_lif_ndx 0 tunnel_id 0\r\n"
    "  over_mpls 1 ttl_ptr 0 exp 0 lbl 0 out_vsd 0\r\n"
    "  vrwrt_vsd 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(0)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VPLS_OUTLIF_TO_OUT_VC_MAP_OUTLIF_TO_OUT_VC_MAP_VC_INFO_TTL_PTR_ID,                                                            
    "ttl_ptr",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  vc_info.ttl_ptr:\r\n"
    "  Pointer to 4 configured TTL.Should be configured by timna_mpls_glbl_info_set()\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vpls outlif_to_out_vc_map out_lif_ndx 0 tunnel_id 0\r\n"
    "  over_mpls 1 ttl_ptr 0 exp 0 lbl 0 out_vsd 0\r\n"
    "  vrwrt_vsd 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(0)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VPLS_OUTLIF_TO_OUT_VC_MAP_OUTLIF_TO_OUT_VC_MAP_VC_INFO_EXP_ID,                                                            
    "exp",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  vc_info.exp:\r\n"
    "  Experimental bits outgoing traffic over this wire.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vpls outlif_to_out_vc_map out_lif_ndx 0 tunnel_id 0\r\n"
    "  over_mpls 1 ttl_ptr 0 exp 0 lbl 0 out_vsd 0\r\n"
    "  vrwrt_vsd 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(0)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VPLS_OUTLIF_TO_OUT_VC_MAP_OUTLIF_TO_OUT_VC_MAP_VC_INFO_LABEL_ID,                                                            
    "lbl",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  vc_info.label:\r\n"
    "  VC label\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vpls outlif_to_out_vc_map out_lif_ndx 0 tunnel_id 0\r\n"
    "  over_mpls 1 ttl_ptr 0 exp 0 lbl 0 out_vsd 0\r\n"
    "  vrwrt_vsd 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(0)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VPLS_OUTLIF_TO_OUT_VC_MAP_OUTLIF_TO_OUT_VC_MAP_VSID_INFO_OUT_VSID_ID,                                                            
    "out_vsd",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  vsid_info.out_vsid:\r\n"
    "  Outgoing VSID\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vpls outlif_to_out_vc_map out_lif_ndx 0 tunnel_id 0\r\n"
    "  over_mpls 1 ttl_ptr 0 exp 0 lbl 0 out_vsd 0\r\n"
    "  vrwrt_vsd 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(0)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VPLS_OUTLIF_TO_OUT_VC_MAP_OUTLIF_TO_OUT_VC_MAP_VSID_INFO_OVERWRITE_VSID_ID,                                                            
    "vrwrt_vsd",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  vsid_info.overwrite_vsid:\r\n"
    "  Experimental bits outgoing traffic over this wire.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vpls outlif_to_out_vc_map out_lif_ndx 0 tunnel_id 0\r\n"
    "  over_mpls 1 ttl_ptr 0 exp 0 lbl 0 out_vsd 0\r\n"
    "  vrwrt_vsd 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(0)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VPLS_OUTLIF_TO_OUT_VC_UNMAP_OUTLIF_TO_OUT_VC_UNMAP_ID,                                                            
    "outlif_to_out_vc_unmap",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Map outlif to this VC, so traffic designated to the given outlif will be sent\r\n"
    "  over the given VC, according to the given information.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vpls outlif_to_out_vc_unmap out_lif_ndx 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(1)},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_VPLS_OUTLIF_TO_OUT_VC_UNMAP_OUTLIF_TO_OUT_VC_UNMAP_OUT_LIF_NDX_ID,                                                            
    "out_lif_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  out_lif_ndx:\r\n"
    "  outlif id. \r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vpls outlif_to_out_vc_unmap out_lif_ndx 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(1)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_API_VPLS_ID,                                                            
    "vpls",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "",
    "",
    "",                                                                                  
    {0, 0, 0, BIT(28)|BIT(29)|BIT(30)|BIT(31),BIT(0)|BIT(1),BIT(4)|BIT(5)},
    1,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
#endif /* } vpls*/

#ifdef UI_OUTLIF/* { OUTLIF*/
  {                                                                                        
    PARAM_TIMNA_TIMNA_OUTLIF_ING_TO_EGR_MAP_SET_ID,                                                            
    "ing_to_egr_map_set",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Map lif in the ingress to outlif and system port \r\n"
    "  to be used in the egress.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api  ing_to_egr_map_set lif_ndx 0\r\n"
    "  eg_outlif 0 sys_prt_dstntn_dst_val 0 sys_prt_dstntn_dst_typ 0 \r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(4)},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_OUTLIF_ING_TO_EGR_MAP_SET_LIF_ID,                                                            
      "lif_ndx",                                                                       
      (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
      (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
      HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
      0,0,0,0,0,0,0,                                                                         
      "  the LIF id to map.\r\n"
      "",
      "Ex:\r\n"                                                                    
      "  timna_api  ing_to_egr_map_set lif_ndx 0\r\n"
      "  eg_outlif 0 sys_prt_dstntn_dst_val 0 sys_prt_dstntn_dst_typ 0 \r\n"
      "",
      "",                                                                                  
    {0, 0, 0, 0,BIT(4)},  
    3,                                                                                     
    /*                                                                                   
     * Pointer to a function to call after symbolic parameter                            
     * has been accepted.                                                                
     */                                                                                  
  (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_OUTLIF_ING_TO_EGR_MAP_SET_SYS_PORT_DESTINATION_DEST_VAL_ID,                                                            
    "sys_prt_dstntn_dst_val",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Map lif in the ingress to outlif and system port \r\n"
    "  to be used in the egress.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api  ing_to_egr_map_set lif_ndx 0\r\n"
    "  eg_outlif 0 sys_prt_dstntn_dst_val 0 sys_prt_dstntn_dst_typ 0 \r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(4)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_OUTLIF_ING_TO_EGR_MAP_SET_SYS_PORT_DESTINATION_DEST_TYPE_ID,                                                            
    "sys_prt_dstntn_dst_typ",                                                                       
    (PARAM_VAL_RULES *)&SOC_SAND_PP_SYS_PORT_TYPE_rule[0],
    (sizeof(SOC_SAND_PP_SYS_PORT_TYPE_rule) / sizeof(SOC_SAND_PP_SYS_PORT_TYPE_rule[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  value.da_info.destination.dest_type:\r\n"
    "  The type of the following destination ID\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api  ing_to_egr_map_set lif_ndx 0\r\n"
    "  eg_outlif 0 sys_prt_dstntn_dst_val 0 sys_prt_dstntn_dst_typ 0 \r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(4)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  }, 
  {                                                                                        
    PARAM_TIMNA_TIMNA_OUTLIF_ING_TO_EGR_MAP_SET_OUT_LIF_ID,                                                            
    "eg_outlif",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  the outlif to be mapped to.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api  ing_to_egr_map_set lif_ndx 0\r\n"
    "  eg_outlif 0 sys_prt_dstntn_dst_val 0 sys_prt_dstntn_dst_typ 0 \r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(4)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_OUTLIF_ING_TO_EGR_MAP_GET_ID,                                                            
    "outlif_ing_to_egr_map_get",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Map lif in the ingress to outlif and system port \r\n"
    "  to be used in the egress.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api vpls outlif_ing_to_egr_map_get lif_ndx 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(5)},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_OUTLIF_ING_TO_EGR_MAP_GET_LIF_ID,                                                            
      "lif_ndx",                                                                       
      (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
      (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
      HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
      0,0,0,0,0,0,0,                                                                         
      "  the LIF id to map.\r\n"
      "",
      "Ex:\r\n"                                                                    
      "  timna_api vpls outlif_ing_to_egr_map_get lif_ndx 0\r\n"
      "",
      "",                                                                                  
    {0, 0, 0, 0,BIT(5)},  
    LAST_ORDINAL,                                                                                     
    /*                                                                                   
     * Pointer to a function to call after symbolic parameter                            
     * has been accepted.                                                                
     */                                                                                  
  (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_OUTLIF_ID,                                                            
    "outlif",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "",
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(4)|BIT(5)},
    1,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
#endif /* } outlif*/
/* } */                                                             


#ifdef UI_ACL/* { acl*/
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ADD_ADD_ID,                                                            
    "add",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Add ACL (Access Control List), and associate it with the given client, so\r\n"
    "  packets terminated or processed according to the given client will be matched\r\n"
    "  against the ACEs (Access Control Entries) of the given ACL.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl add tmplt_nof_flds 0 tmplt_key_flds 0\r\n"
    "  size 0 traffic_type 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(19)},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ADD_ADD_ACL_INFO_KEY_TEMPLATE_NOF_FIELDS_ID,                                                            
    "tmplt_nof_flds",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  acl_info.key_template.nof_fields:\r\n"
    "  Number of valid entires in key_fields.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl add tmplt_nof_flds 0 tmplt_key_flds 0\r\n"
    "  size 0 traffic_type 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(19)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ADD_ADD_ACL_INFO_KEY_TEMPLATE_KEY_FIELDS_0_ID,                                                            
    "tmplt_key_flds",                                                                       
    (PARAM_VAL_RULES *)&TIMNA_ACL_KEY_SELECT_rule[0],                                            
    (sizeof(TIMNA_ACL_KEY_SELECT_rule) / sizeof(TIMNA_ACL_KEY_SELECT_rule[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  acl_info.key_template.key_fields:\r\n"
    "  The fields which according packets are examined according to this key.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl add tmplt_nof_flds 0 tmplt_key_flds 0\r\n"
    "  size 0 traffic_type 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(19)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ADD_ADD_ACL_INFO_SIZE_ID,                                                            
    "size",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  acl_info.size:\r\n"
    "  Capacity of the ACL, maximum number of ACEs.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl add tmplt_nof_flds 0 tmplt_key_flds 0\r\n"
    "  size 0 traffic_type 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(19)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ADD_ADD_ACL_INFO_TRAFFIC_ID,                                                            
    "traffic_type",                                                                       
    (PARAM_VAL_RULES *)&TIMNA_ACL_TRAFFIC_TYPE_rule[0],                                            
    (sizeof(TIMNA_ACL_TRAFFIC_TYPE_rule) / sizeof(TIMNA_ACL_TRAFFIC_TYPE_rule[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  acl_info.traffic:\r\n"
    "  The type of the client of the ACL (termination (Ethernet...), or main engine\r\n"
    "  (Ethernet...) \r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl add tmplt_nof_flds 0 tmplt_key_flds 0\r\n"
    "  size 0 traffic_type 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(19)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_REMOVE_REMOVE_ID,                                                            
    "remove",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Remove ACL (Access Control List), and free all the resources used by this\r\n"
    "  ACL. \r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl remove acl_ndx 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(20)},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_REMOVE_REMOVE_ACL_NDX_ID,                                                            
    "acl_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  acl_ndx:\r\n"
    "  ACL ID to remove. Range 0-7.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl remove acl_ndx 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(20)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_STAT_GET_STAT_GET_ID,                                                            
    "stat_get",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Get the status of the ACL, including the number of entries in use.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl stat_get acl_ndx 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(21)},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_STAT_GET_STAT_GET_ACL_NDX_ID,                                                            
    "acl_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  acl_ndx:\r\n"
    "  ACL ID to get the status for. Range 0-7.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl stat_get acl_ndx 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(21)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACE_ADD_ACE_ADD_ID,                                                            
    "ace_add",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Add ACE (Access Control Entry) to the given ACL. On packet lookup, between\r\n"
    "  all the ACEs that match the key constructed from the packet, the ACE with the\r\n"
    "  lowest ace_ndx will be chosen. For example If 'ace-ndx-1' < 'ace-ndx-2', and\r\n"
    "  both match the given key then 'acea-priority-1' will be chosen.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl ace_add acl_ndx 0 ace_ndx 0 l4_prt_rng_max_prt 0\r\n"
    "  l4_prt_rng_min_prt 0 l4_prt_rng_is_src_prt 0\r\n"
    "  l4_dst_prt_msk 0 l4_dst_prt 0 l4_src_prt_msk 0\r\n"
    "  l4_src_prt 0 l3_dst_ip_address 0 l3_dst_ip_pref 0\r\n"
    "  l3_src_ip_address 0 l3_src_ip_pref 0\r\n"
    "  l3_prtcl_cod_vld 0 l3_prtcl_cod 0\r\n"
    "  l3_tos_msk 0 l3_tos 0 l2_dst_mac_vld 0\r\n"
    "  l2_dst_mac 0 l2_src_mac_vld 0 l2_src_mac 0\r\n"
    "  l2_s_tag_dei_vld 0 l2_s_tag_dei 0 l2_s_tag_pcp_vld 0\r\n"
    "  l2_s_tag_pcp 0 l2_s_tag_exist_vld 0\r\n"
    "  l2_s_tag_exist 0 l2_s_tag_vid_msk 0 l2_s_tag_vid 0\r\n"
    "  l2_c_tag_dei_vld 0 l2_c_tag_dei 0 l2_c_tag_pcp_vld 0\r\n"
    "  l2_c_tag_pcp 0 l2_c_tag_exist_vld 0\r\n"
    "  l2_c_tag_exist 0 l2_c_tag_vid_msk 0 l2_c_tag_vid 0\r\n"
    "  l2_prt_typ_vld 0 l2_prt_typ 0 l2_thr_typ_vld 0\r\n"
    "  l2_thr_typ 0 general_nlf_vld 0 general_nlf 0\r\n"
    "  general_vsd_vld 0 general_vsd 0 general_lcl_prt_vld 0\r\n"
    "  general_lcl_prt 0 action_cpu_cod 0 action_overwrite_cntrl 0\r\n"
    "  action_cos_prms_DP 0 action_cos_prms_TC 0 action_cos_prms_UP 0\r\n"
    "  action_policer_cntrllr 0 action_policer_pntr 0 action_tlf 0 action_typ 0 vrwrt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(22)},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACE_ADD_ACE_ADD_ACL_NDX_ID,                                                            
    "acl_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  acl_ndx:\r\n"
    "  ACL ID to add to. Range 0-7.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl ace_add acl_ndx 0 ace_ndx 0 l4_prt_rng_max_prt 0\r\n"
    "  l4_prt_rng_min_prt 0 l4_prt_rng_is_src_prt 0\r\n"
    "  l4_dst_prt_msk 0 l4_dst_prt 0 l4_src_prt_msk 0\r\n"
    "  l4_src_prt 0 l3_dst_ip_address 0 l3_dst_ip_pref 0\r\n"
    "  l3_src_ip_address 0 l3_src_ip_pref 0\r\n"
    "  l3_prtcl_cod_vld 0 l3_prtcl_cod 0\r\n"
    "  l3_tos_msk 0 l3_tos 0 l2_dst_mac_vld 0\r\n"
    "  l2_dst_mac 0 l2_src_mac_vld 0 l2_src_mac 0\r\n"
    "  l2_s_tag_dei_vld 0 l2_s_tag_dei 0 l2_s_tag_pcp_vld 0\r\n"
    "  l2_s_tag_pcp 0 l2_s_tag_exist_vld 0\r\n"
    "  l2_s_tag_exist 0 l2_s_tag_vid_msk 0 l2_s_tag_vid 0\r\n"
    "  l2_c_tag_dei_vld 0 l2_c_tag_dei 0 l2_c_tag_pcp_vld 0\r\n"
    "  l2_c_tag_pcp 0 l2_c_tag_exist_vld 0\r\n"
    "  l2_c_tag_exist 0 l2_c_tag_vid_msk 0 l2_c_tag_vid 0\r\n"
    "  l2_prt_typ_vld 0 l2_prt_typ 0 l2_thr_typ_vld 0\r\n"
    "  l2_thr_typ 0 general_nlf_vld 0 general_nlf 0\r\n"
    "  general_vsd_vld 0 general_vsd 0 general_lcl_prt_vld 0\r\n"
    "  general_lcl_prt 0 action_cpu_cod 0 action_overwrite_cntrl 0\r\n"
    "  action_cos_prms_DP 0 action_cos_prms_TC 0 action_cos_prms_UP 0\r\n"
    "  action_policer_cntrllr 0 action_policer_pntr 0 action_tlf 0 action_typ 0 vrwrt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(22)},                                                                              
    3,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACE_ADD_ACE_ADD_ACE_NDX_ID,                                                            
    "ace_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  ace_ndx:\r\n"
    "  The entry index to add the ACE to. The smaller the ace_ndx,\r\n"
    "  the higher will be the priority of the ACE. Range 0-(ACL size-\r\n"
    "  1).\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl ace_add acl_ndx 0 ace_ndx 0 l4_prt_rng_max_prt 0\r\n"
    "  l4_prt_rng_min_prt 0 l4_prt_rng_is_src_prt 0\r\n"
    "  l4_dst_prt_msk 0 l4_dst_prt 0 l4_src_prt_msk 0\r\n"
    "  l4_src_prt 0 l3_dst_ip_address 0 l3_dst_ip_pref 0\r\n"
    "  l3_src_ip_address 0 l3_src_ip_pref 0\r\n"
    "  l3_prtcl_cod_vld 0 l3_prtcl_cod 0\r\n"
    "  l3_tos_msk 0 l3_tos 0 l2_dst_mac_vld 0\r\n"
    "  l2_dst_mac 0 l2_src_mac_vld 0 l2_src_mac 0\r\n"
    "  l2_s_tag_dei_vld 0 l2_s_tag_dei 0 l2_s_tag_pcp_vld 0\r\n"
    "  l2_s_tag_pcp 0 l2_s_tag_exist_vld 0\r\n"
    "  l2_s_tag_exist 0 l2_s_tag_vid_msk 0 l2_s_tag_vid 0\r\n"
    "  l2_c_tag_dei_vld 0 l2_c_tag_dei 0 l2_c_tag_pcp_vld 0\r\n"
    "  l2_c_tag_pcp 0 l2_c_tag_exist_vld 0\r\n"
    "  l2_c_tag_exist 0 l2_c_tag_vid_msk 0 l2_c_tag_vid 0\r\n"
    "  l2_prt_typ_vld 0 l2_prt_typ 0 l2_thr_typ_vld 0\r\n"
    "  l2_thr_typ 0 general_nlf_vld 0 general_nlf 0\r\n"
    "  general_vsd_vld 0 general_vsd 0 general_lcl_prt_vld 0\r\n"
    "  general_lcl_prt 0 action_cpu_cod 0 action_overwrite_cntrl 0\r\n"
    "  action_cos_prms_DP 0 action_cos_prms_TC 0 action_cos_prms_UP 0\r\n"
    "  action_policer_cntrllr 0 action_policer_pntr 0 action_tlf 0 action_typ 0 vrwrt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(22)},                                                                              
    4,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACE_ADD_ACE_ADD_ACE_L4_INFO_PORT_RANGE_MAX_PORT_ID,                                                            
    "l4_prt_rng_max_prt",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  ace.l4_info.port_range.max_port:\r\n"
    "  The maximum port in the range. Size: 16 bits. Range 0-65535.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl ace_add acl_ndx 0 ace_ndx 0 l4_prt_rng_max_prt 0\r\n"
    "  l4_prt_rng_min_prt 0 l4_prt_rng_is_src_prt 0\r\n"
    "  l4_dst_prt_msk 0 l4_dst_prt 0 l4_src_prt_msk 0\r\n"
    "  l4_src_prt 0 l3_dst_ip_address 0 l3_dst_ip_pref 0\r\n"
    "  l3_src_ip_address 0 l3_src_ip_pref 0\r\n"
    "  l3_prtcl_cod_vld 0 l3_prtcl_cod 0\r\n"
    "  l3_tos_msk 0 l3_tos 0 l2_dst_mac_vld 0\r\n"
    "  l2_dst_mac 0 l2_src_mac_vld 0 l2_src_mac 0\r\n"
    "  l2_s_tag_dei_vld 0 l2_s_tag_dei 0 l2_s_tag_pcp_vld 0\r\n"
    "  l2_s_tag_pcp 0 l2_s_tag_exist_vld 0\r\n"
    "  l2_s_tag_exist 0 l2_s_tag_vid_msk 0 l2_s_tag_vid 0\r\n"
    "  l2_c_tag_dei_vld 0 l2_c_tag_dei 0 l2_c_tag_pcp_vld 0\r\n"
    "  l2_c_tag_pcp 0 l2_c_tag_exist_vld 0\r\n"
    "  l2_c_tag_exist 0 l2_c_tag_vid_msk 0 l2_c_tag_vid 0\r\n"
    "  l2_prt_typ_vld 0 l2_prt_typ 0 l2_thr_typ_vld 0\r\n"
    "  l2_thr_typ 0 general_nlf_vld 0 general_nlf 0\r\n"
    "  general_vsd_vld 0 general_vsd 0 general_lcl_prt_vld 0\r\n"
    "  general_lcl_prt 0 action_cpu_cod 0 action_overwrite_cntrl 0\r\n"
    "  action_cos_prms_DP 0 action_cos_prms_TC 0 action_cos_prms_UP 0\r\n"
    "  action_policer_cntrllr 0 action_policer_pntr 0 action_tlf 0 action_typ 0 vrwrt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(22)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACE_ADD_ACE_ADD_ACE_L4_INFO_PORT_RANGE_MIN_PORT_ID,                                                            
    "l4_prt_rng_min_prt",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  ace.l4_info.port_range.min_port:\r\n"
    "  The minimum port in the range. Size: 16 bits. Range 0-65535.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl ace_add acl_ndx 0 ace_ndx 0 l4_prt_rng_max_prt 0\r\n"
    "  l4_prt_rng_min_prt 0 l4_prt_rng_is_src_prt 0\r\n"
    "  l4_dst_prt_msk 0 l4_dst_prt 0 l4_src_prt_msk 0\r\n"
    "  l4_src_prt 0 l3_dst_ip_address 0 l3_dst_ip_pref 0\r\n"
    "  l3_src_ip_address 0 l3_src_ip_pref 0\r\n"
    "  l3_prtcl_cod_vld 0 l3_prtcl_cod 0\r\n"
    "  l3_tos_msk 0 l3_tos 0 l2_dst_mac_vld 0\r\n"
    "  l2_dst_mac 0 l2_src_mac_vld 0 l2_src_mac 0\r\n"
    "  l2_s_tag_dei_vld 0 l2_s_tag_dei 0 l2_s_tag_pcp_vld 0\r\n"
    "  l2_s_tag_pcp 0 l2_s_tag_exist_vld 0\r\n"
    "  l2_s_tag_exist 0 l2_s_tag_vid_msk 0 l2_s_tag_vid 0\r\n"
    "  l2_c_tag_dei_vld 0 l2_c_tag_dei 0 l2_c_tag_pcp_vld 0\r\n"
    "  l2_c_tag_pcp 0 l2_c_tag_exist_vld 0\r\n"
    "  l2_c_tag_exist 0 l2_c_tag_vid_msk 0 l2_c_tag_vid 0\r\n"
    "  l2_prt_typ_vld 0 l2_prt_typ 0 l2_thr_typ_vld 0\r\n"
    "  l2_thr_typ 0 general_nlf_vld 0 general_nlf 0\r\n"
    "  general_vsd_vld 0 general_vsd 0 general_lcl_prt_vld 0\r\n"
    "  general_lcl_prt 0 action_cpu_cod 0 action_overwrite_cntrl 0\r\n"
    "  action_cos_prms_DP 0 action_cos_prms_TC 0 action_cos_prms_UP 0\r\n"
    "  action_policer_cntrllr 0 action_policer_pntr 0 action_tlf 0 action_typ 0 vrwrt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(22)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACE_ADD_ACE_ADD_ACE_L4_INFO_PORT_RANGE_IS_SRC_PORT_ID,                                                            
    "l4_prt_rng_is_src_prt",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  ace.l4_info.port_range.is_src_port:\r\n"
    "  If TRUE then this define a source port range. Otherwise it defines a\r\n"
    "  destination l4 port range. Size: 10 bits.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl ace_add acl_ndx 0 ace_ndx 0 l4_prt_rng_max_prt 0\r\n"
    "  l4_prt_rng_min_prt 0 l4_prt_rng_is_src_prt 0\r\n"
    "  l4_dst_prt_msk 0 l4_dst_prt 0 l4_src_prt_msk 0\r\n"
    "  l4_src_prt 0 l3_dst_ip_address 0 l3_dst_ip_pref 0\r\n"
    "  l3_src_ip_address 0 l3_src_ip_pref 0\r\n"
    "  l3_prtcl_cod_vld 0 l3_prtcl_cod 0\r\n"
    "  l3_tos_msk 0 l3_tos 0 l2_dst_mac_vld 0\r\n"
    "  l2_dst_mac 0 l2_src_mac_vld 0 l2_src_mac 0\r\n"
    "  l2_s_tag_dei_vld 0 l2_s_tag_dei 0 l2_s_tag_pcp_vld 0\r\n"
    "  l2_s_tag_pcp 0 l2_s_tag_exist_vld 0\r\n"
    "  l2_s_tag_exist 0 l2_s_tag_vid_msk 0 l2_s_tag_vid 0\r\n"
    "  l2_c_tag_dei_vld 0 l2_c_tag_dei 0 l2_c_tag_pcp_vld 0\r\n"
    "  l2_c_tag_pcp 0 l2_c_tag_exist_vld 0\r\n"
    "  l2_c_tag_exist 0 l2_c_tag_vid_msk 0 l2_c_tag_vid 0\r\n"
    "  l2_prt_typ_vld 0 l2_prt_typ 0 l2_thr_typ_vld 0\r\n"
    "  l2_thr_typ 0 general_nlf_vld 0 general_nlf 0\r\n"
    "  general_vsd_vld 0 general_vsd 0 general_lcl_prt_vld 0\r\n"
    "  general_lcl_prt 0 action_cpu_cod 0 action_overwrite_cntrl 0\r\n"
    "  action_cos_prms_DP 0 action_cos_prms_TC 0 action_cos_prms_UP 0\r\n"
    "  action_policer_cntrllr 0 action_policer_pntr 0 action_tlf 0 action_typ 0 vrwrt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(22)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACE_ADD_ACE_ADD_ACE_L4_INFO_DEST_PORT_MASK_ID,                                                            
    "l4_dst_prt_msk",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  ace.l4_info.dest_port_mask:\r\n"
    "  A mask on the dest_port (bitmap) indicates which bits to consider and which\r\n"
    "  are masked. 0 indicates all bits are masked, 0Xffff indicates to consider all\r\n"
    "  the bits in the key.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl ace_add acl_ndx 0 ace_ndx 0 l4_prt_rng_max_prt 0\r\n"
    "  l4_prt_rng_min_prt 0 l4_prt_rng_is_src_prt 0\r\n"
    "  l4_dst_prt_msk 0 l4_dst_prt 0 l4_src_prt_msk 0\r\n"
    "  l4_src_prt 0 l3_dst_ip_address 0 l3_dst_ip_pref 0\r\n"
    "  l3_src_ip_address 0 l3_src_ip_pref 0\r\n"
    "  l3_prtcl_cod_vld 0 l3_prtcl_cod 0\r\n"
    "  l3_tos_msk 0 l3_tos 0 l2_dst_mac_vld 0\r\n"
    "  l2_dst_mac 0 l2_src_mac_vld 0 l2_src_mac 0\r\n"
    "  l2_s_tag_dei_vld 0 l2_s_tag_dei 0 l2_s_tag_pcp_vld 0\r\n"
    "  l2_s_tag_pcp 0 l2_s_tag_exist_vld 0\r\n"
    "  l2_s_tag_exist 0 l2_s_tag_vid_msk 0 l2_s_tag_vid 0\r\n"
    "  l2_c_tag_dei_vld 0 l2_c_tag_dei 0 l2_c_tag_pcp_vld 0\r\n"
    "  l2_c_tag_pcp 0 l2_c_tag_exist_vld 0\r\n"
    "  l2_c_tag_exist 0 l2_c_tag_vid_msk 0 l2_c_tag_vid 0\r\n"
    "  l2_prt_typ_vld 0 l2_prt_typ 0 l2_thr_typ_vld 0\r\n"
    "  l2_thr_typ 0 general_nlf_vld 0 general_nlf 0\r\n"
    "  general_vsd_vld 0 general_vsd 0 general_lcl_prt_vld 0\r\n"
    "  general_lcl_prt 0 action_cpu_cod 0 action_overwrite_cntrl 0\r\n"
    "  action_cos_prms_DP 0 action_cos_prms_TC 0 action_cos_prms_UP 0\r\n"
    "  action_policer_cntrllr 0 action_policer_pntr 0 action_tlf 0 action_typ 0 vrwrt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(22)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACE_ADD_ACE_ADD_ACE_L4_INFO_DEST_PORT_ID,                                                            
    "l4_dst_prt",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  ace.l4_info.dest_port:\r\n"
    "  Layer 4 Destination Port, second 16b after IPv4 header.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl ace_add acl_ndx 0 ace_ndx 0 l4_prt_rng_max_prt 0\r\n"
    "  l4_prt_rng_min_prt 0 l4_prt_rng_is_src_prt 0\r\n"
    "  l4_dst_prt_msk 0 l4_dst_prt 0 l4_src_prt_msk 0\r\n"
    "  l4_src_prt 0 l3_dst_ip_address 0 l3_dst_ip_pref 0\r\n"
    "  l3_src_ip_address 0 l3_src_ip_pref 0\r\n"
    "  l3_prtcl_cod_vld 0 l3_prtcl_cod 0\r\n"
    "  l3_tos_msk 0 l3_tos 0 l2_dst_mac_vld 0\r\n"
    "  l2_dst_mac 0 l2_src_mac_vld 0 l2_src_mac 0\r\n"
    "  l2_s_tag_dei_vld 0 l2_s_tag_dei 0 l2_s_tag_pcp_vld 0\r\n"
    "  l2_s_tag_pcp 0 l2_s_tag_exist_vld 0\r\n"
    "  l2_s_tag_exist 0 l2_s_tag_vid_msk 0 l2_s_tag_vid 0\r\n"
    "  l2_c_tag_dei_vld 0 l2_c_tag_dei 0 l2_c_tag_pcp_vld 0\r\n"
    "  l2_c_tag_pcp 0 l2_c_tag_exist_vld 0\r\n"
    "  l2_c_tag_exist 0 l2_c_tag_vid_msk 0 l2_c_tag_vid 0\r\n"
    "  l2_prt_typ_vld 0 l2_prt_typ 0 l2_thr_typ_vld 0\r\n"
    "  l2_thr_typ 0 general_nlf_vld 0 general_nlf 0\r\n"
    "  general_vsd_vld 0 general_vsd 0 general_lcl_prt_vld 0\r\n"
    "  general_lcl_prt 0 action_cpu_cod 0 action_overwrite_cntrl 0\r\n"
    "  action_cos_prms_DP 0 action_cos_prms_TC 0 action_cos_prms_UP 0\r\n"
    "  action_policer_cntrllr 0 action_policer_pntr 0 action_tlf 0 action_typ 0 vrwrt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(22)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACE_ADD_ACE_ADD_ACE_L4_INFO_SRC_PORT_MASK_ID,                                                            
    "l4_src_prt_msk",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  ace.l4_info.src_port_mask:\r\n"
    "  A mask on the src_port (bitmap) indicates which bits to consider and which\r\n"
    "  are masked. 0 indicates all bits are masked, 0Xffff indicates to consider all\r\n"
    "  the bits in the key.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl ace_add acl_ndx 0 ace_ndx 0 l4_prt_rng_max_prt 0\r\n"
    "  l4_prt_rng_min_prt 0 l4_prt_rng_is_src_prt 0\r\n"
    "  l4_dst_prt_msk 0 l4_dst_prt 0 l4_src_prt_msk 0\r\n"
    "  l4_src_prt 0 l3_dst_ip_address 0 l3_dst_ip_pref 0\r\n"
    "  l3_src_ip_address 0 l3_src_ip_pref 0\r\n"
    "  l3_prtcl_cod_vld 0 l3_prtcl_cod 0\r\n"
    "  l3_tos_msk 0 l3_tos 0 l2_dst_mac_vld 0\r\n"
    "  l2_dst_mac 0 l2_src_mac_vld 0 l2_src_mac 0\r\n"
    "  l2_s_tag_dei_vld 0 l2_s_tag_dei 0 l2_s_tag_pcp_vld 0\r\n"
    "  l2_s_tag_pcp 0 l2_s_tag_exist_vld 0\r\n"
    "  l2_s_tag_exist 0 l2_s_tag_vid_msk 0 l2_s_tag_vid 0\r\n"
    "  l2_c_tag_dei_vld 0 l2_c_tag_dei 0 l2_c_tag_pcp_vld 0\r\n"
    "  l2_c_tag_pcp 0 l2_c_tag_exist_vld 0\r\n"
    "  l2_c_tag_exist 0 l2_c_tag_vid_msk 0 l2_c_tag_vid 0\r\n"
    "  l2_prt_typ_vld 0 l2_prt_typ 0 l2_thr_typ_vld 0\r\n"
    "  l2_thr_typ 0 general_nlf_vld 0 general_nlf 0\r\n"
    "  general_vsd_vld 0 general_vsd 0 general_lcl_prt_vld 0\r\n"
    "  general_lcl_prt 0 action_cpu_cod 0 action_overwrite_cntrl 0\r\n"
    "  action_cos_prms_DP 0 action_cos_prms_TC 0 action_cos_prms_UP 0\r\n"
    "  action_policer_cntrllr 0 action_policer_pntr 0 action_tlf 0 action_typ 0 vrwrt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(22)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACE_ADD_ACE_ADD_ACE_L4_INFO_SRC_PORT_ID,                                                            
    "l4_src_prt",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  ace.l4_info.src_port:\r\n"
    "  Layer 4 Source Port, first 16b after IPv4 header.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl ace_add acl_ndx 0 ace_ndx 0 l4_prt_rng_max_prt 0\r\n"
    "  l4_prt_rng_min_prt 0 l4_prt_rng_is_src_prt 0\r\n"
    "  l4_dst_prt_msk 0 l4_dst_prt 0 l4_src_prt_msk 0\r\n"
    "  l4_src_prt 0 l3_dst_ip_address 0 l3_dst_ip_pref 0\r\n"
    "  l3_src_ip_address 0 l3_src_ip_pref 0\r\n"
    "  l3_prtcl_cod_vld 0 l3_prtcl_cod 0\r\n"
    "  l3_tos_msk 0 l3_tos 0 l2_dst_mac_vld 0\r\n"
    "  l2_dst_mac 0 l2_src_mac_vld 0 l2_src_mac 0\r\n"
    "  l2_s_tag_dei_vld 0 l2_s_tag_dei 0 l2_s_tag_pcp_vld 0\r\n"
    "  l2_s_tag_pcp 0 l2_s_tag_exist_vld 0\r\n"
    "  l2_s_tag_exist 0 l2_s_tag_vid_msk 0 l2_s_tag_vid 0\r\n"
    "  l2_c_tag_dei_vld 0 l2_c_tag_dei 0 l2_c_tag_pcp_vld 0\r\n"
    "  l2_c_tag_pcp 0 l2_c_tag_exist_vld 0\r\n"
    "  l2_c_tag_exist 0 l2_c_tag_vid_msk 0 l2_c_tag_vid 0\r\n"
    "  l2_prt_typ_vld 0 l2_prt_typ 0 l2_thr_typ_vld 0\r\n"
    "  l2_thr_typ 0 general_nlf_vld 0 general_nlf 0\r\n"
    "  general_vsd_vld 0 general_vsd 0 general_lcl_prt_vld 0\r\n"
    "  general_lcl_prt 0 action_cpu_cod 0 action_overwrite_cntrl 0\r\n"
    "  action_cos_prms_DP 0 action_cos_prms_TC 0 action_cos_prms_UP 0\r\n"
    "  action_policer_cntrllr 0 action_policer_pntr 0 action_tlf 0 action_typ 0 vrwrt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(22)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACE_ADD_ACE_ADD_ACE_L3_INFO_DEST_IP_ADD_ID,                                                            
    "l3_dst_ip_address",                                                                       
    (PARAM_VAL_RULES *)&Subnet_ip_rule[0],                                            
    (sizeof(Subnet_ip_rule) / sizeof(Subnet_ip_rule[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  ace.l3_info.dest_ip.address:\r\n"
    "  Ipv4 address.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl ace_add acl_ndx 0 ace_ndx 0 l4_prt_rng_max_prt 0\r\n"
    "  l4_prt_rng_min_prt 0 l4_prt_rng_is_src_prt 0\r\n"
    "  l4_dst_prt_msk 0 l4_dst_prt 0 l4_src_prt_msk 0\r\n"
    "  l4_src_prt 0 l3_dst_ip_address 0 l3_dst_ip_pref 0\r\n"
    "  l3_src_ip_address 0 l3_src_ip_pref 0\r\n"
    "  l3_prtcl_cod_vld 0 l3_prtcl_cod 0\r\n"
    "  l3_tos_msk 0 l3_tos 0 l2_dst_mac_vld 0\r\n"
    "  l2_dst_mac 0 l2_src_mac_vld 0 l2_src_mac 0\r\n"
    "  l2_s_tag_dei_vld 0 l2_s_tag_dei 0 l2_s_tag_pcp_vld 0\r\n"
    "  l2_s_tag_pcp 0 l2_s_tag_exist_vld 0\r\n"
    "  l2_s_tag_exist 0 l2_s_tag_vid_msk 0 l2_s_tag_vid 0\r\n"
    "  l2_c_tag_dei_vld 0 l2_c_tag_dei 0 l2_c_tag_pcp_vld 0\r\n"
    "  l2_c_tag_pcp 0 l2_c_tag_exist_vld 0\r\n"
    "  l2_c_tag_exist 0 l2_c_tag_vid_msk 0 l2_c_tag_vid 0\r\n"
    "  l2_prt_typ_vld 0 l2_prt_typ 0 l2_thr_typ_vld 0\r\n"
    "  l2_thr_typ 0 general_nlf_vld 0 general_nlf 0\r\n"
    "  general_vsd_vld 0 general_vsd 0 general_lcl_prt_vld 0\r\n"
    "  general_lcl_prt 0 action_cpu_cod 0 action_overwrite_cntrl 0\r\n"
    "  action_cos_prms_DP 0 action_cos_prms_TC 0 action_cos_prms_UP 0\r\n"
    "  action_policer_cntrllr 0 action_policer_pntr 0 action_tlf 0 action_typ 0 vrwrt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(22)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACE_ADD_ACE_ADD_ACE_L3_INFO_DEST_IP_PREFFIX_ID,                                                            
    "l3_dst_ip_pref",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  ace.l3_info.dest_ip.pref:\r\n"
    "  how many bits to consider from the ip, starting from the msb.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl ace_add acl_ndx 0 ace_ndx 0 l4_prt_rng_max_prt 0\r\n"
    "  l4_prt_rng_min_prt 0 l4_prt_rng_is_src_prt 0\r\n"
    "  l4_dst_prt_msk 0 l4_dst_prt 0 l4_src_prt_msk 0\r\n"
    "  l4_src_prt 0 l3_dst_ip_address 0 l3_dst_ip_pref 0\r\n"
    "  l3_src_ip_address 0 l3_src_ip_pref 0\r\n"
    "  l3_prtcl_cod_vld 0 l3_prtcl_cod 0\r\n"
    "  l3_tos_msk 0 l3_tos 0 l2_dst_mac_vld 0\r\n"
    "  l2_dst_mac 0 l2_src_mac_vld 0 l2_src_mac 0\r\n"
    "  l2_s_tag_dei_vld 0 l2_s_tag_dei 0 l2_s_tag_pcp_vld 0\r\n"
    "  l2_s_tag_pcp 0 l2_s_tag_exist_vld 0\r\n"
    "  l2_s_tag_exist 0 l2_s_tag_vid_msk 0 l2_s_tag_vid 0\r\n"
    "  l2_c_tag_dei_vld 0 l2_c_tag_dei 0 l2_c_tag_pcp_vld 0\r\n"
    "  l2_c_tag_pcp 0 l2_c_tag_exist_vld 0\r\n"
    "  l2_c_tag_exist 0 l2_c_tag_vid_msk 0 l2_c_tag_vid 0\r\n"
    "  l2_prt_typ_vld 0 l2_prt_typ 0 l2_thr_typ_vld 0\r\n"
    "  l2_thr_typ 0 general_nlf_vld 0 general_nlf 0\r\n"
    "  general_vsd_vld 0 general_vsd 0 general_lcl_prt_vld 0\r\n"
    "  general_lcl_prt 0 action_cpu_cod 0 action_overwrite_cntrl 0\r\n"
    "  action_cos_prms_DP 0 action_cos_prms_TC 0 action_cos_prms_UP 0\r\n"
    "  action_policer_cntrllr 0 action_policer_pntr 0 action_tlf 0 action_typ 0 vrwrt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(22)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACE_ADD_ACE_ADD_ACE_L3_INFO_SRC_IP_ADD_ID,                                                            
    "l3_src_ip_address",                                                                       
    (PARAM_VAL_RULES *)&Subnet_ip_rule[0],                                            
    (sizeof(Subnet_ip_rule) / sizeof(Subnet_ip_rule[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  ace.l3_info.src_ip.address:\r\n"
    "  IP address.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl ace_add acl_ndx 0 ace_ndx 0 l4_prt_rng_max_prt 0\r\n"
    "  l4_prt_rng_min_prt 0 l4_prt_rng_is_src_prt 0\r\n"
    "  l4_dst_prt_msk 0 l4_dst_prt 0 l4_src_prt_msk 0\r\n"
    "  l4_src_prt 0 l3_dst_ip_address 0 l3_dst_ip_pref 0\r\n"
    "  l3_src_ip_address 0 l3_src_ip_pref 0\r\n"
    "  l3_prtcl_cod_vld 0 l3_prtcl_cod 0\r\n"
    "  l3_tos_msk 0 l3_tos 0 l2_dst_mac_vld 0\r\n"
    "  l2_dst_mac 0 l2_src_mac_vld 0 l2_src_mac 0\r\n"
    "  l2_s_tag_dei_vld 0 l2_s_tag_dei 0 l2_s_tag_pcp_vld 0\r\n"
    "  l2_s_tag_pcp 0 l2_s_tag_exist_vld 0\r\n"
    "  l2_s_tag_exist 0 l2_s_tag_vid_msk 0 l2_s_tag_vid 0\r\n"
    "  l2_c_tag_dei_vld 0 l2_c_tag_dei 0 l2_c_tag_pcp_vld 0\r\n"
    "  l2_c_tag_pcp 0 l2_c_tag_exist_vld 0\r\n"
    "  l2_c_tag_exist 0 l2_c_tag_vid_msk 0 l2_c_tag_vid 0\r\n"
    "  l2_prt_typ_vld 0 l2_prt_typ 0 l2_thr_typ_vld 0\r\n"
    "  l2_thr_typ 0 general_nlf_vld 0 general_nlf 0\r\n"
    "  general_vsd_vld 0 general_vsd 0 general_lcl_prt_vld 0\r\n"
    "  general_lcl_prt 0 action_cpu_cod 0 action_overwrite_cntrl 0\r\n"
    "  action_cos_prms_DP 0 action_cos_prms_TC 0 action_cos_prms_UP 0\r\n"
    "  action_policer_cntrllr 0 action_policer_pntr 0 action_tlf 0 action_typ 0 vrwrt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(22)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACE_ADD_ACE_ADD_ACE_L3_INFO_SRC_IP_PREFFIX_ID,                                                            
    "l3_src_ip_pref",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  ace.l3_info.src_ip.pref:\r\n"
    "  how many bits to consider from the ip, starting from the msb.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl ace_add acl_ndx 0 ace_ndx 0 l4_prt_rng_max_prt 0\r\n"
    "  l4_prt_rng_min_prt 0 l4_prt_rng_is_src_prt 0\r\n"
    "  l4_dst_prt_msk 0 l4_dst_prt 0 l4_src_prt_msk 0\r\n"
    "  l4_src_prt 0 l3_dst_ip_address 0 l3_dst_ip_pref 0\r\n"
    "  l3_src_ip_address 0 l3_src_ip_pref 0\r\n"
    "  l3_prtcl_cod_vld 0 l3_prtcl_cod 0\r\n"
    "  l3_tos_msk 0 l3_tos 0 l2_dst_mac_vld 0\r\n"
    "  l2_dst_mac 0 l2_src_mac_vld 0 l2_src_mac 0\r\n"
    "  l2_s_tag_dei_vld 0 l2_s_tag_dei 0 l2_s_tag_pcp_vld 0\r\n"
    "  l2_s_tag_pcp 0 l2_s_tag_exist_vld 0\r\n"
    "  l2_s_tag_exist 0 l2_s_tag_vid_msk 0 l2_s_tag_vid 0\r\n"
    "  l2_c_tag_dei_vld 0 l2_c_tag_dei 0 l2_c_tag_pcp_vld 0\r\n"
    "  l2_c_tag_pcp 0 l2_c_tag_exist_vld 0\r\n"
    "  l2_c_tag_exist 0 l2_c_tag_vid_msk 0 l2_c_tag_vid 0\r\n"
    "  l2_prt_typ_vld 0 l2_prt_typ 0 l2_thr_typ_vld 0\r\n"
    "  l2_thr_typ 0 general_nlf_vld 0 general_nlf 0\r\n"
    "  general_vsd_vld 0 general_vsd 0 general_lcl_prt_vld 0\r\n"
    "  general_lcl_prt 0 action_cpu_cod 0 action_overwrite_cntrl 0\r\n"
    "  action_cos_prms_DP 0 action_cos_prms_TC 0 action_cos_prms_UP 0\r\n"
    "  action_policer_cntrllr 0 action_policer_pntr 0 action_tlf 0 action_typ 0 vrwrt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(22)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACE_ADD_ACE_ADD_ACE_L3_INFO_PROTOCOL_CODE_VALID_ID,                                                            
    "l3_prtcl_cod_vld",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  ace.l3_info.protocol_code_valid:\r\n"
    "  If TRUE then protocol code considered as part of the ACE. Otherwise it masked\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl ace_add acl_ndx 0 ace_ndx 0 l4_prt_rng_max_prt 0\r\n"
    "  l4_prt_rng_min_prt 0 l4_prt_rng_is_src_prt 0\r\n"
    "  l4_dst_prt_msk 0 l4_dst_prt 0 l4_src_prt_msk 0\r\n"
    "  l4_src_prt 0 l3_dst_ip_address 0 l3_dst_ip_pref 0\r\n"
    "  l3_src_ip_address 0 l3_src_ip_pref 0\r\n"
    "  l3_prtcl_cod_vld 0 l3_prtcl_cod 0\r\n"
    "  l3_tos_msk 0 l3_tos 0 l2_dst_mac_vld 0\r\n"
    "  l2_dst_mac 0 l2_src_mac_vld 0 l2_src_mac 0\r\n"
    "  l2_s_tag_dei_vld 0 l2_s_tag_dei 0 l2_s_tag_pcp_vld 0\r\n"
    "  l2_s_tag_pcp 0 l2_s_tag_exist_vld 0\r\n"
    "  l2_s_tag_exist 0 l2_s_tag_vid_msk 0 l2_s_tag_vid 0\r\n"
    "  l2_c_tag_dei_vld 0 l2_c_tag_dei 0 l2_c_tag_pcp_vld 0\r\n"
    "  l2_c_tag_pcp 0 l2_c_tag_exist_vld 0\r\n"
    "  l2_c_tag_exist 0 l2_c_tag_vid_msk 0 l2_c_tag_vid 0\r\n"
    "  l2_prt_typ_vld 0 l2_prt_typ 0 l2_thr_typ_vld 0\r\n"
    "  l2_thr_typ 0 general_nlf_vld 0 general_nlf 0\r\n"
    "  general_vsd_vld 0 general_vsd 0 general_lcl_prt_vld 0\r\n"
    "  general_lcl_prt 0 action_cpu_cod 0 action_overwrite_cntrl 0\r\n"
    "  action_cos_prms_DP 0 action_cos_prms_TC 0 action_cos_prms_UP 0\r\n"
    "  action_policer_cntrllr 0 action_policer_pntr 0 action_tlf 0 action_typ 0 vrwrt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(22)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACE_ADD_ACE_ADD_ACE_L3_INFO_PROTOCOL_CODE_ID,                                                            
    "l3_prtcl_cod",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  ace.l3_info.protocol_code:\r\n"
    "  The Protocol field from the Ipv4 header. Size: 8 bits. Range 0-255.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl ace_add acl_ndx 0 ace_ndx 0 l4_prt_rng_max_prt 0\r\n"
    "  l4_prt_rng_min_prt 0 l4_prt_rng_is_src_prt 0\r\n"
    "  l4_dst_prt_msk 0 l4_dst_prt 0 l4_src_prt_msk 0\r\n"
    "  l4_src_prt 0 l3_dst_ip_address 0 l3_dst_ip_pref 0\r\n"
    "  l3_src_ip_address 0 l3_src_ip_pref 0\r\n"
    "  l3_prtcl_cod_vld 0 l3_prtcl_cod 0\r\n"
    "  l3_tos_msk 0 l3_tos 0 l2_dst_mac_vld 0\r\n"
    "  l2_dst_mac 0 l2_src_mac_vld 0 l2_src_mac 0\r\n"
    "  l2_s_tag_dei_vld 0 l2_s_tag_dei 0 l2_s_tag_pcp_vld 0\r\n"
    "  l2_s_tag_pcp 0 l2_s_tag_exist_vld 0\r\n"
    "  l2_s_tag_exist 0 l2_s_tag_vid_msk 0 l2_s_tag_vid 0\r\n"
    "  l2_c_tag_dei_vld 0 l2_c_tag_dei 0 l2_c_tag_pcp_vld 0\r\n"
    "  l2_c_tag_pcp 0 l2_c_tag_exist_vld 0\r\n"
    "  l2_c_tag_exist 0 l2_c_tag_vid_msk 0 l2_c_tag_vid 0\r\n"
    "  l2_prt_typ_vld 0 l2_prt_typ 0 l2_thr_typ_vld 0\r\n"
    "  l2_thr_typ 0 general_nlf_vld 0 general_nlf 0\r\n"
    "  general_vsd_vld 0 general_vsd 0 general_lcl_prt_vld 0\r\n"
    "  general_lcl_prt 0 action_cpu_cod 0 action_overwrite_cntrl 0\r\n"
    "  action_cos_prms_DP 0 action_cos_prms_TC 0 action_cos_prms_UP 0\r\n"
    "  action_policer_cntrllr 0 action_policer_pntr 0 action_tlf 0 action_typ 0 vrwrt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(22)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACE_ADD_ACE_ADD_ACE_L3_INFO_TOS_MASK_ID,                                                            
    "l3_tos_msk",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  ace.l3_info.tos_mask:\r\n"
    "  A mask on the tos (bitmap) indicates which bits to consider and which are\r\n"
    "  masked. 0 indicates all bits are masked, 0Xff indicates to consider all the\r\n"
    "  bits in the key.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl ace_add acl_ndx 0 ace_ndx 0 l4_prt_rng_max_prt 0\r\n"
    "  l4_prt_rng_min_prt 0 l4_prt_rng_is_src_prt 0\r\n"
    "  l4_dst_prt_msk 0 l4_dst_prt 0 l4_src_prt_msk 0\r\n"
    "  l4_src_prt 0 l3_dst_ip_address 0 l3_dst_ip_pref 0\r\n"
    "  l3_src_ip_address 0 l3_src_ip_pref 0\r\n"
    "  l3_prtcl_cod_vld 0 l3_prtcl_cod 0\r\n"
    "  l3_tos_msk 0 l3_tos 0 l2_dst_mac_vld 0\r\n"
    "  l2_dst_mac 0 l2_src_mac_vld 0 l2_src_mac 0\r\n"
    "  l2_s_tag_dei_vld 0 l2_s_tag_dei 0 l2_s_tag_pcp_vld 0\r\n"
    "  l2_s_tag_pcp 0 l2_s_tag_exist_vld 0\r\n"
    "  l2_s_tag_exist 0 l2_s_tag_vid_msk 0 l2_s_tag_vid 0\r\n"
    "  l2_c_tag_dei_vld 0 l2_c_tag_dei 0 l2_c_tag_pcp_vld 0\r\n"
    "  l2_c_tag_pcp 0 l2_c_tag_exist_vld 0\r\n"
    "  l2_c_tag_exist 0 l2_c_tag_vid_msk 0 l2_c_tag_vid 0\r\n"
    "  l2_prt_typ_vld 0 l2_prt_typ 0 l2_thr_typ_vld 0\r\n"
    "  l2_thr_typ 0 general_nlf_vld 0 general_nlf 0\r\n"
    "  general_vsd_vld 0 general_vsd 0 general_lcl_prt_vld 0\r\n"
    "  general_lcl_prt 0 action_cpu_cod 0 action_overwrite_cntrl 0\r\n"
    "  action_cos_prms_DP 0 action_cos_prms_TC 0 action_cos_prms_UP 0\r\n"
    "  action_policer_cntrllr 0 action_policer_pntr 0 action_tlf 0 action_typ 0 vrwrt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(22)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACE_ADD_ACE_ADD_ACE_L3_INFO_TOS_ID,                                                            
    "l3_tos",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  ace.l3_info.tos:\r\n"
    "  The TOS field from the Ipv4 header. Size: 8 bits. Range 0-255.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl ace_add acl_ndx 0 ace_ndx 0 l4_prt_rng_max_prt 0\r\n"
    "  l4_prt_rng_min_prt 0 l4_prt_rng_is_src_prt 0\r\n"
    "  l4_dst_prt_msk 0 l4_dst_prt 0 l4_src_prt_msk 0\r\n"
    "  l4_src_prt 0 l3_dst_ip_address 0 l3_dst_ip_pref 0\r\n"
    "  l3_src_ip_address 0 l3_src_ip_pref 0\r\n"
    "  l3_prtcl_cod_vld 0 l3_prtcl_cod 0\r\n"
    "  l3_tos_msk 0 l3_tos 0 l2_dst_mac_vld 0\r\n"
    "  l2_dst_mac 0 l2_src_mac_vld 0 l2_src_mac 0\r\n"
    "  l2_s_tag_dei_vld 0 l2_s_tag_dei 0 l2_s_tag_pcp_vld 0\r\n"
    "  l2_s_tag_pcp 0 l2_s_tag_exist_vld 0\r\n"
    "  l2_s_tag_exist 0 l2_s_tag_vid_msk 0 l2_s_tag_vid 0\r\n"
    "  l2_c_tag_dei_vld 0 l2_c_tag_dei 0 l2_c_tag_pcp_vld 0\r\n"
    "  l2_c_tag_pcp 0 l2_c_tag_exist_vld 0\r\n"
    "  l2_c_tag_exist 0 l2_c_tag_vid_msk 0 l2_c_tag_vid 0\r\n"
    "  l2_prt_typ_vld 0 l2_prt_typ 0 l2_thr_typ_vld 0\r\n"
    "  l2_thr_typ 0 general_nlf_vld 0 general_nlf 0\r\n"
    "  general_vsd_vld 0 general_vsd 0 general_lcl_prt_vld 0\r\n"
    "  general_lcl_prt 0 action_cpu_cod 0 action_overwrite_cntrl 0\r\n"
    "  action_cos_prms_DP 0 action_cos_prms_TC 0 action_cos_prms_UP 0\r\n"
    "  action_policer_cntrllr 0 action_policer_pntr 0 action_tlf 0 action_typ 0 vrwrt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(22)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACE_ADD_ACE_ADD_ACE_L2_INFO_DEST_MAC_VALID_ID,                                                            
    "l2_dst_mac_vld",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  ace.l2_info.dest_mac_valid:\r\n"
    "  If TRUE then dest_mac considered as part of the ACE. Otherwise it masked. \r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl ace_add acl_ndx 0 ace_ndx 0 l4_prt_rng_max_prt 0\r\n"
    "  l4_prt_rng_min_prt 0 l4_prt_rng_is_src_prt 0\r\n"
    "  l4_dst_prt_msk 0 l4_dst_prt 0 l4_src_prt_msk 0\r\n"
    "  l4_src_prt 0 l3_dst_ip_address 0 l3_dst_ip_pref 0\r\n"
    "  l3_src_ip_address 0 l3_src_ip_pref 0\r\n"
    "  l3_prtcl_cod_vld 0 l3_prtcl_cod 0\r\n"
    "  l3_tos_msk 0 l3_tos 0 l2_dst_mac_vld 0\r\n"
    "  l2_dst_mac 0 l2_src_mac_vld 0 l2_src_mac 0\r\n"
    "  l2_s_tag_dei_vld 0 l2_s_tag_dei 0 l2_s_tag_pcp_vld 0\r\n"
    "  l2_s_tag_pcp 0 l2_s_tag_exist_vld 0\r\n"
    "  l2_s_tag_exist 0 l2_s_tag_vid_msk 0 l2_s_tag_vid 0\r\n"
    "  l2_c_tag_dei_vld 0 l2_c_tag_dei 0 l2_c_tag_pcp_vld 0\r\n"
    "  l2_c_tag_pcp 0 l2_c_tag_exist_vld 0\r\n"
    "  l2_c_tag_exist 0 l2_c_tag_vid_msk 0 l2_c_tag_vid 0\r\n"
    "  l2_prt_typ_vld 0 l2_prt_typ 0 l2_thr_typ_vld 0\r\n"
    "  l2_thr_typ 0 general_nlf_vld 0 general_nlf 0\r\n"
    "  general_vsd_vld 0 general_vsd 0 general_lcl_prt_vld 0\r\n"
    "  general_lcl_prt 0 action_cpu_cod 0 action_overwrite_cntrl 0\r\n"
    "  action_cos_prms_DP 0 action_cos_prms_TC 0 action_cos_prms_UP 0\r\n"
    "  action_policer_cntrllr 0 action_policer_pntr 0 action_tlf 0 action_typ 0 vrwrt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(22)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACE_ADD_ACE_ADD_ACE_L2_INFO_DEST_MAC_ID,                                                            
    "l2_dst_mac",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  ace.l2_info.dest_mac:\r\n"
    "  Destination MAC\r\n"
    "  Address. Size: 48 bits.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl ace_add acl_ndx 0 ace_ndx 0 l4_prt_rng_max_prt 0\r\n"
    "  l4_prt_rng_min_prt 0 l4_prt_rng_is_src_prt 0\r\n"
    "  l4_dst_prt_msk 0 l4_dst_prt 0 l4_src_prt_msk 0\r\n"
    "  l4_src_prt 0 l3_dst_ip_address 0 l3_dst_ip_pref 0\r\n"
    "  l3_src_ip_address 0 l3_src_ip_pref 0\r\n"
    "  l3_prtcl_cod_vld 0 l3_prtcl_cod 0\r\n"
    "  l3_tos_msk 0 l3_tos 0 l2_dst_mac_vld 0\r\n"
    "  l2_dst_mac 0 l2_src_mac_vld 0 l2_src_mac 0\r\n"
    "  l2_s_tag_dei_vld 0 l2_s_tag_dei 0 l2_s_tag_pcp_vld 0\r\n"
    "  l2_s_tag_pcp 0 l2_s_tag_exist_vld 0\r\n"
    "  l2_s_tag_exist 0 l2_s_tag_vid_msk 0 l2_s_tag_vid 0\r\n"
    "  l2_c_tag_dei_vld 0 l2_c_tag_dei 0 l2_c_tag_pcp_vld 0\r\n"
    "  l2_c_tag_pcp 0 l2_c_tag_exist_vld 0\r\n"
    "  l2_c_tag_exist 0 l2_c_tag_vid_msk 0 l2_c_tag_vid 0\r\n"
    "  l2_prt_typ_vld 0 l2_prt_typ 0 l2_thr_typ_vld 0\r\n"
    "  l2_thr_typ 0 general_nlf_vld 0 general_nlf 0\r\n"
    "  general_vsd_vld 0 general_vsd 0 general_lcl_prt_vld 0\r\n"
    "  general_lcl_prt 0 action_cpu_cod 0 action_overwrite_cntrl 0\r\n"
    "  action_cos_prms_DP 0 action_cos_prms_TC 0 action_cos_prms_UP 0\r\n"
    "  action_policer_cntrllr 0 action_policer_pntr 0 action_tlf 0 action_typ 0 vrwrt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(22)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACE_ADD_ACE_ADD_ACE_L2_INFO_SRC_MAC_VALID_ID,                                                            
    "l2_src_mac_vld",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  ace.l2_info.src_mac_valid:\r\n"
    "  If TRUE then src_mac considered as part of the ACE. Otherwise it masked. \r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl ace_add acl_ndx 0 ace_ndx 0 l4_prt_rng_max_prt 0\r\n"
    "  l4_prt_rng_min_prt 0 l4_prt_rng_is_src_prt 0\r\n"
    "  l4_dst_prt_msk 0 l4_dst_prt 0 l4_src_prt_msk 0\r\n"
    "  l4_src_prt 0 l3_dst_ip_address 0 l3_dst_ip_pref 0\r\n"
    "  l3_src_ip_address 0 l3_src_ip_pref 0\r\n"
    "  l3_prtcl_cod_vld 0 l3_prtcl_cod 0\r\n"
    "  l3_tos_msk 0 l3_tos 0 l2_dst_mac_vld 0\r\n"
    "  l2_dst_mac 0 l2_src_mac_vld 0 l2_src_mac 0\r\n"
    "  l2_s_tag_dei_vld 0 l2_s_tag_dei 0 l2_s_tag_pcp_vld 0\r\n"
    "  l2_s_tag_pcp 0 l2_s_tag_exist_vld 0\r\n"
    "  l2_s_tag_exist 0 l2_s_tag_vid_msk 0 l2_s_tag_vid 0\r\n"
    "  l2_c_tag_dei_vld 0 l2_c_tag_dei 0 l2_c_tag_pcp_vld 0\r\n"
    "  l2_c_tag_pcp 0 l2_c_tag_exist_vld 0\r\n"
    "  l2_c_tag_exist 0 l2_c_tag_vid_msk 0 l2_c_tag_vid 0\r\n"
    "  l2_prt_typ_vld 0 l2_prt_typ 0 l2_thr_typ_vld 0\r\n"
    "  l2_thr_typ 0 general_nlf_vld 0 general_nlf 0\r\n"
    "  general_vsd_vld 0 general_vsd 0 general_lcl_prt_vld 0\r\n"
    "  general_lcl_prt 0 action_cpu_cod 0 action_overwrite_cntrl 0\r\n"
    "  action_cos_prms_DP 0 action_cos_prms_TC 0 action_cos_prms_UP 0\r\n"
    "  action_policer_cntrllr 0 action_policer_pntr 0 action_tlf 0 action_typ 0 vrwrt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(22)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACE_ADD_ACE_ADD_ACE_L2_INFO_SRC_MAC_ID,                                                            
    "l2_src_mac",                                                                       
    (PARAM_VAL_RULES *)&Timna_mac_addr_vals[0],                                            
    (sizeof(Timna_mac_addr_vals) / sizeof(Timna_mac_addr_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  ace.l2_info.src_mac:\r\n"
    "  Source MAC Address. Size: 48 bits.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl ace_add acl_ndx 0 ace_ndx 0 l4_prt_rng_max_prt 0\r\n"
    "  l4_prt_rng_min_prt 0 l4_prt_rng_is_src_prt 0\r\n"
    "  l4_dst_prt_msk 0 l4_dst_prt 0 l4_src_prt_msk 0\r\n"
    "  l4_src_prt 0 l3_dst_ip_address 0 l3_dst_ip_pref 0\r\n"
    "  l3_src_ip_address 0 l3_src_ip_pref 0\r\n"
    "  l3_prtcl_cod_vld 0 l3_prtcl_cod 0\r\n"
    "  l3_tos_msk 0 l3_tos 0 l2_dst_mac_vld 0\r\n"
    "  l2_dst_mac 0 l2_src_mac_vld 0 l2_src_mac 0\r\n"
    "  l2_s_tag_dei_vld 0 l2_s_tag_dei 0 l2_s_tag_pcp_vld 0\r\n"
    "  l2_s_tag_pcp 0 l2_s_tag_exist_vld 0\r\n"
    "  l2_s_tag_exist 0 l2_s_tag_vid_msk 0 l2_s_tag_vid 0\r\n"
    "  l2_c_tag_dei_vld 0 l2_c_tag_dei 0 l2_c_tag_pcp_vld 0\r\n"
    "  l2_c_tag_pcp 0 l2_c_tag_exist_vld 0\r\n"
    "  l2_c_tag_exist 0 l2_c_tag_vid_msk 0 l2_c_tag_vid 0\r\n"
    "  l2_prt_typ_vld 0 l2_prt_typ 0 l2_thr_typ_vld 0\r\n"
    "  l2_thr_typ 0 general_nlf_vld 0 general_nlf 0\r\n"
    "  general_vsd_vld 0 general_vsd 0 general_lcl_prt_vld 0\r\n"
    "  general_lcl_prt 0 action_cpu_cod 0 action_overwrite_cntrl 0\r\n"
    "  action_cos_prms_DP 0 action_cos_prms_TC 0 action_cos_prms_UP 0\r\n"
    "  action_policer_cntrllr 0 action_policer_pntr 0 action_tlf 0 action_typ 0 vrwrt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(22)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACE_ADD_ACE_ADD_ACE_L2_INFO_S_TAG_DEI_VALID_ID,                                                            
    "l2_s_tag_dei_vld",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  ace.l2_info.s_tag.dei_valid:\r\n"
    "  If TRUE then dei considered as part of the ACE. Otherwise it masked. \r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl ace_add acl_ndx 0 ace_ndx 0 l4_prt_rng_max_prt 0\r\n"
    "  l4_prt_rng_min_prt 0 l4_prt_rng_is_src_prt 0\r\n"
    "  l4_dst_prt_msk 0 l4_dst_prt 0 l4_src_prt_msk 0\r\n"
    "  l4_src_prt 0 l3_dst_ip_address 0 l3_dst_ip_pref 0\r\n"
    "  l3_src_ip_address 0 l3_src_ip_pref 0\r\n"
    "  l3_prtcl_cod_vld 0 l3_prtcl_cod 0\r\n"
    "  l3_tos_msk 0 l3_tos 0 l2_dst_mac_vld 0\r\n"
    "  l2_dst_mac 0 l2_src_mac_vld 0 l2_src_mac 0\r\n"
    "  l2_s_tag_dei_vld 0 l2_s_tag_dei 0 l2_s_tag_pcp_vld 0\r\n"
    "  l2_s_tag_pcp 0 l2_s_tag_exist_vld 0\r\n"
    "  l2_s_tag_exist 0 l2_s_tag_vid_msk 0 l2_s_tag_vid 0\r\n"
    "  l2_c_tag_dei_vld 0 l2_c_tag_dei 0 l2_c_tag_pcp_vld 0\r\n"
    "  l2_c_tag_pcp 0 l2_c_tag_exist_vld 0\r\n"
    "  l2_c_tag_exist 0 l2_c_tag_vid_msk 0 l2_c_tag_vid 0\r\n"
    "  l2_prt_typ_vld 0 l2_prt_typ 0 l2_thr_typ_vld 0\r\n"
    "  l2_thr_typ 0 general_nlf_vld 0 general_nlf 0\r\n"
    "  general_vsd_vld 0 general_vsd 0 general_lcl_prt_vld 0\r\n"
    "  general_lcl_prt 0 action_cpu_cod 0 action_overwrite_cntrl 0\r\n"
    "  action_cos_prms_DP 0 action_cos_prms_TC 0 action_cos_prms_UP 0\r\n"
    "  action_policer_cntrllr 0 action_policer_pntr 0 action_tlf 0 action_typ 0 vrwrt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(22)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACE_ADD_ACE_ADD_ACE_L2_INFO_S_TAG_DEI_ID,                                                            
    "l2_s_tag_dei",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  ace.l2_info.s_tag.dei:\r\n"
    "  the value returned in the Ethernet Parsing of the DEI (drop eligibility\r\n"
    "  indicator). Size: 1 bit. Range 0-1. Relevant only for the S-TAG.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl ace_add acl_ndx 0 ace_ndx 0 l4_prt_rng_max_prt 0\r\n"
    "  l4_prt_rng_min_prt 0 l4_prt_rng_is_src_prt 0\r\n"
    "  l4_dst_prt_msk 0 l4_dst_prt 0 l4_src_prt_msk 0\r\n"
    "  l4_src_prt 0 l3_dst_ip_address 0 l3_dst_ip_pref 0\r\n"
    "  l3_src_ip_address 0 l3_src_ip_pref 0\r\n"
    "  l3_prtcl_cod_vld 0 l3_prtcl_cod 0\r\n"
    "  l3_tos_msk 0 l3_tos 0 l2_dst_mac_vld 0\r\n"
    "  l2_dst_mac 0 l2_src_mac_vld 0 l2_src_mac 0\r\n"
    "  l2_s_tag_dei_vld 0 l2_s_tag_dei 0 l2_s_tag_pcp_vld 0\r\n"
    "  l2_s_tag_pcp 0 l2_s_tag_exist_vld 0\r\n"
    "  l2_s_tag_exist 0 l2_s_tag_vid_msk 0 l2_s_tag_vid 0\r\n"
    "  l2_c_tag_dei_vld 0 l2_c_tag_dei 0 l2_c_tag_pcp_vld 0\r\n"
    "  l2_c_tag_pcp 0 l2_c_tag_exist_vld 0\r\n"
    "  l2_c_tag_exist 0 l2_c_tag_vid_msk 0 l2_c_tag_vid 0\r\n"
    "  l2_prt_typ_vld 0 l2_prt_typ 0 l2_thr_typ_vld 0\r\n"
    "  l2_thr_typ 0 general_nlf_vld 0 general_nlf 0\r\n"
    "  general_vsd_vld 0 general_vsd 0 general_lcl_prt_vld 0\r\n"
    "  general_lcl_prt 0 action_cpu_cod 0 action_overwrite_cntrl 0\r\n"
    "  action_cos_prms_DP 0 action_cos_prms_TC 0 action_cos_prms_UP 0\r\n"
    "  action_policer_cntrllr 0 action_policer_pntr 0 action_tlf 0 action_typ 0 vrwrt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(22)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACE_ADD_ACE_ADD_ACE_L2_INFO_S_TAG_PCP_VALID_ID,                                                            
    "l2_s_tag_pcp_vld",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  ace.l2_info.s_tag.pcp_valid:\r\n"
    "  If TRUE then pcp considered as part of the ACE. Otherwise it masked. \r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl ace_add acl_ndx 0 ace_ndx 0 l4_prt_rng_max_prt 0\r\n"
    "  l4_prt_rng_min_prt 0 l4_prt_rng_is_src_prt 0\r\n"
    "  l4_dst_prt_msk 0 l4_dst_prt 0 l4_src_prt_msk 0\r\n"
    "  l4_src_prt 0 l3_dst_ip_address 0 l3_dst_ip_pref 0\r\n"
    "  l3_src_ip_address 0 l3_src_ip_pref 0\r\n"
    "  l3_prtcl_cod_vld 0 l3_prtcl_cod 0\r\n"
    "  l3_tos_msk 0 l3_tos 0 l2_dst_mac_vld 0\r\n"
    "  l2_dst_mac 0 l2_src_mac_vld 0 l2_src_mac 0\r\n"
    "  l2_s_tag_dei_vld 0 l2_s_tag_dei 0 l2_s_tag_pcp_vld 0\r\n"
    "  l2_s_tag_pcp 0 l2_s_tag_exist_vld 0\r\n"
    "  l2_s_tag_exist 0 l2_s_tag_vid_msk 0 l2_s_tag_vid 0\r\n"
    "  l2_c_tag_dei_vld 0 l2_c_tag_dei 0 l2_c_tag_pcp_vld 0\r\n"
    "  l2_c_tag_pcp 0 l2_c_tag_exist_vld 0\r\n"
    "  l2_c_tag_exist 0 l2_c_tag_vid_msk 0 l2_c_tag_vid 0\r\n"
    "  l2_prt_typ_vld 0 l2_prt_typ 0 l2_thr_typ_vld 0\r\n"
    "  l2_thr_typ 0 general_nlf_vld 0 general_nlf 0\r\n"
    "  general_vsd_vld 0 general_vsd 0 general_lcl_prt_vld 0\r\n"
    "  general_lcl_prt 0 action_cpu_cod 0 action_overwrite_cntrl 0\r\n"
    "  action_cos_prms_DP 0 action_cos_prms_TC 0 action_cos_prms_UP 0\r\n"
    "  action_policer_cntrllr 0 action_policer_pntr 0 action_tlf 0 action_typ 0 vrwrt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(22)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACE_ADD_ACE_ADD_ACE_L2_INFO_S_TAG_PCP_ID,                                                            
    "l2_s_tag_pcp",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  ace.l2_info.s_tag.pcp:\r\n"
    "  the value returned in the Ethernet Parsing of the PCP (priority code point).\r\n"
    "  Size: 3 bits. Range 0-7.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl ace_add acl_ndx 0 ace_ndx 0 l4_prt_rng_max_prt 0\r\n"
    "  l4_prt_rng_min_prt 0 l4_prt_rng_is_src_prt 0\r\n"
    "  l4_dst_prt_msk 0 l4_dst_prt 0 l4_src_prt_msk 0\r\n"
    "  l4_src_prt 0 l3_dst_ip_address 0 l3_dst_ip_pref 0\r\n"
    "  l3_src_ip_address 0 l3_src_ip_pref 0\r\n"
    "  l3_prtcl_cod_vld 0 l3_prtcl_cod 0\r\n"
    "  l3_tos_msk 0 l3_tos 0 l2_dst_mac_vld 0\r\n"
    "  l2_dst_mac 0 l2_src_mac_vld 0 l2_src_mac 0\r\n"
    "  l2_s_tag_dei_vld 0 l2_s_tag_dei 0 l2_s_tag_pcp_vld 0\r\n"
    "  l2_s_tag_pcp 0 l2_s_tag_exist_vld 0\r\n"
    "  l2_s_tag_exist 0 l2_s_tag_vid_msk 0 l2_s_tag_vid 0\r\n"
    "  l2_c_tag_dei_vld 0 l2_c_tag_dei 0 l2_c_tag_pcp_vld 0\r\n"
    "  l2_c_tag_pcp 0 l2_c_tag_exist_vld 0\r\n"
    "  l2_c_tag_exist 0 l2_c_tag_vid_msk 0 l2_c_tag_vid 0\r\n"
    "  l2_prt_typ_vld 0 l2_prt_typ 0 l2_thr_typ_vld 0\r\n"
    "  l2_thr_typ 0 general_nlf_vld 0 general_nlf 0\r\n"
    "  general_vsd_vld 0 general_vsd 0 general_lcl_prt_vld 0\r\n"
    "  general_lcl_prt 0 action_cpu_cod 0 action_overwrite_cntrl 0\r\n"
    "  action_cos_prms_DP 0 action_cos_prms_TC 0 action_cos_prms_UP 0\r\n"
    "  action_policer_cntrllr 0 action_policer_pntr 0 action_tlf 0 action_typ 0 vrwrt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(22)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACE_ADD_ACE_ADD_ACE_L2_INFO_S_TAG_TAG_EXIST_VALID_ID,                                                            
    "l2_s_tag_exist_vld",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  ace.l2_info.s_tag.tag_exist_valid:\r\n"
    "  If TRUE then tag_exist considered as part of the ACE. Otherwise it masked. \r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl ace_add acl_ndx 0 ace_ndx 0 l4_prt_rng_max_prt 0\r\n"
    "  l4_prt_rng_min_prt 0 l4_prt_rng_is_src_prt 0\r\n"
    "  l4_dst_prt_msk 0 l4_dst_prt 0 l4_src_prt_msk 0\r\n"
    "  l4_src_prt 0 l3_dst_ip_address 0 l3_dst_ip_pref 0\r\n"
    "  l3_src_ip_address 0 l3_src_ip_pref 0\r\n"
    "  l3_prtcl_cod_vld 0 l3_prtcl_cod 0\r\n"
    "  l3_tos_msk 0 l3_tos 0 l2_dst_mac_vld 0\r\n"
    "  l2_dst_mac 0 l2_src_mac_vld 0 l2_src_mac 0\r\n"
    "  l2_s_tag_dei_vld 0 l2_s_tag_dei 0 l2_s_tag_pcp_vld 0\r\n"
    "  l2_s_tag_pcp 0 l2_s_tag_exist_vld 0\r\n"
    "  l2_s_tag_exist 0 l2_s_tag_vid_msk 0 l2_s_tag_vid 0\r\n"
    "  l2_c_tag_dei_vld 0 l2_c_tag_dei 0 l2_c_tag_pcp_vld 0\r\n"
    "  l2_c_tag_pcp 0 l2_c_tag_exist_vld 0\r\n"
    "  l2_c_tag_exist 0 l2_c_tag_vid_msk 0 l2_c_tag_vid 0\r\n"
    "  l2_prt_typ_vld 0 l2_prt_typ 0 l2_thr_typ_vld 0\r\n"
    "  l2_thr_typ 0 general_nlf_vld 0 general_nlf 0\r\n"
    "  general_vsd_vld 0 general_vsd 0 general_lcl_prt_vld 0\r\n"
    "  general_lcl_prt 0 action_cpu_cod 0 action_overwrite_cntrl 0\r\n"
    "  action_cos_prms_DP 0 action_cos_prms_TC 0 action_cos_prms_UP 0\r\n"
    "  action_policer_cntrllr 0 action_policer_pntr 0 action_tlf 0 action_typ 0 vrwrt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(22)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACE_ADD_ACE_ADD_ACE_L2_INFO_S_TAG_TAG_EXIST_ID,                                                            
    "l2_s_tag_exist",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  ace.l2_info.s_tag.tag_exist:\r\n"
    "  True if the Vlan tag is present in the packet. Size: 1 bit.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl ace_add acl_ndx 0 ace_ndx 0 l4_prt_rng_max_prt 0\r\n"
    "  l4_prt_rng_min_prt 0 l4_prt_rng_is_src_prt 0\r\n"
    "  l4_dst_prt_msk 0 l4_dst_prt 0 l4_src_prt_msk 0\r\n"
    "  l4_src_prt 0 l3_dst_ip_address 0 l3_dst_ip_pref 0\r\n"
    "  l3_src_ip_address 0 l3_src_ip_pref 0\r\n"
    "  l3_prtcl_cod_vld 0 l3_prtcl_cod 0\r\n"
    "  l3_tos_msk 0 l3_tos 0 l2_dst_mac_vld 0\r\n"
    "  l2_dst_mac 0 l2_src_mac_vld 0 l2_src_mac 0\r\n"
    "  l2_s_tag_dei_vld 0 l2_s_tag_dei 0 l2_s_tag_pcp_vld 0\r\n"
    "  l2_s_tag_pcp 0 l2_s_tag_exist_vld 0\r\n"
    "  l2_s_tag_exist 0 l2_s_tag_vid_msk 0 l2_s_tag_vid 0\r\n"
    "  l2_c_tag_dei_vld 0 l2_c_tag_dei 0 l2_c_tag_pcp_vld 0\r\n"
    "  l2_c_tag_pcp 0 l2_c_tag_exist_vld 0\r\n"
    "  l2_c_tag_exist 0 l2_c_tag_vid_msk 0 l2_c_tag_vid 0\r\n"
    "  l2_prt_typ_vld 0 l2_prt_typ 0 l2_thr_typ_vld 0\r\n"
    "  l2_thr_typ 0 general_nlf_vld 0 general_nlf 0\r\n"
    "  general_vsd_vld 0 general_vsd 0 general_lcl_prt_vld 0\r\n"
    "  general_lcl_prt 0 action_cpu_cod 0 action_overwrite_cntrl 0\r\n"
    "  action_cos_prms_DP 0 action_cos_prms_TC 0 action_cos_prms_UP 0\r\n"
    "  action_policer_cntrllr 0 action_policer_pntr 0 action_tlf 0 action_typ 0 vrwrt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(22)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACE_ADD_ACE_ADD_ACE_L2_INFO_S_TAG_VID_MASK_ID,                                                            
    "l2_s_tag_vid_msk",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  ace.l2_info.s_tag.vid_mask:\r\n"
    "  A mask on the vid (bitmap) indicates which bits to consider and which are\r\n"
    "  masked. 0 indicates all bits are masked, 0Xfff indicates to consider all the\r\n"
    "  bits in the key.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl ace_add acl_ndx 0 ace_ndx 0 l4_prt_rng_max_prt 0\r\n"
    "  l4_prt_rng_min_prt 0 l4_prt_rng_is_src_prt 0\r\n"
    "  l4_dst_prt_msk 0 l4_dst_prt 0 l4_src_prt_msk 0\r\n"
    "  l4_src_prt 0 l3_dst_ip_address 0 l3_dst_ip_pref 0\r\n"
    "  l3_src_ip_address 0 l3_src_ip_pref 0\r\n"
    "  l3_prtcl_cod_vld 0 l3_prtcl_cod 0\r\n"
    "  l3_tos_msk 0 l3_tos 0 l2_dst_mac_vld 0\r\n"
    "  l2_dst_mac 0 l2_src_mac_vld 0 l2_src_mac 0\r\n"
    "  l2_s_tag_dei_vld 0 l2_s_tag_dei 0 l2_s_tag_pcp_vld 0\r\n"
    "  l2_s_tag_pcp 0 l2_s_tag_exist_vld 0\r\n"
    "  l2_s_tag_exist 0 l2_s_tag_vid_msk 0 l2_s_tag_vid 0\r\n"
    "  l2_c_tag_dei_vld 0 l2_c_tag_dei 0 l2_c_tag_pcp_vld 0\r\n"
    "  l2_c_tag_pcp 0 l2_c_tag_exist_vld 0\r\n"
    "  l2_c_tag_exist 0 l2_c_tag_vid_msk 0 l2_c_tag_vid 0\r\n"
    "  l2_prt_typ_vld 0 l2_prt_typ 0 l2_thr_typ_vld 0\r\n"
    "  l2_thr_typ 0 general_nlf_vld 0 general_nlf 0\r\n"
    "  general_vsd_vld 0 general_vsd 0 general_lcl_prt_vld 0\r\n"
    "  general_lcl_prt 0 action_cpu_cod 0 action_overwrite_cntrl 0\r\n"
    "  action_cos_prms_DP 0 action_cos_prms_TC 0 action_cos_prms_UP 0\r\n"
    "  action_policer_cntrllr 0 action_policer_pntr 0 action_tlf 0 action_typ 0 vrwrt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(22)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACE_ADD_ACE_ADD_ACE_L2_INFO_S_TAG_VID_ID,                                                            
    "l2_s_tag_vid",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  ace.l2_info.s_tag.vid:\r\n"
    "  The Vlan Id. Size: 12 bits. Range 0-4095.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl ace_add acl_ndx 0 ace_ndx 0 l4_prt_rng_max_prt 0\r\n"
    "  l4_prt_rng_min_prt 0 l4_prt_rng_is_src_prt 0\r\n"
    "  l4_dst_prt_msk 0 l4_dst_prt 0 l4_src_prt_msk 0\r\n"
    "  l4_src_prt 0 l3_dst_ip_address 0 l3_dst_ip_pref 0\r\n"
    "  l3_src_ip_address 0 l3_src_ip_pref 0\r\n"
    "  l3_prtcl_cod_vld 0 l3_prtcl_cod 0\r\n"
    "  l3_tos_msk 0 l3_tos 0 l2_dst_mac_vld 0\r\n"
    "  l2_dst_mac 0 l2_src_mac_vld 0 l2_src_mac 0\r\n"
    "  l2_s_tag_dei_vld 0 l2_s_tag_dei 0 l2_s_tag_pcp_vld 0\r\n"
    "  l2_s_tag_pcp 0 l2_s_tag_exist_vld 0\r\n"
    "  l2_s_tag_exist 0 l2_s_tag_vid_msk 0 l2_s_tag_vid 0\r\n"
    "  l2_c_tag_dei_vld 0 l2_c_tag_dei 0 l2_c_tag_pcp_vld 0\r\n"
    "  l2_c_tag_pcp 0 l2_c_tag_exist_vld 0\r\n"
    "  l2_c_tag_exist 0 l2_c_tag_vid_msk 0 l2_c_tag_vid 0\r\n"
    "  l2_prt_typ_vld 0 l2_prt_typ 0 l2_thr_typ_vld 0\r\n"
    "  l2_thr_typ 0 general_nlf_vld 0 general_nlf 0\r\n"
    "  general_vsd_vld 0 general_vsd 0 general_lcl_prt_vld 0\r\n"
    "  general_lcl_prt 0 action_cpu_cod 0 action_overwrite_cntrl 0\r\n"
    "  action_cos_prms_DP 0 action_cos_prms_TC 0 action_cos_prms_UP 0\r\n"
    "  action_policer_cntrllr 0 action_policer_pntr 0 action_tlf 0 action_typ 0 vrwrt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(22)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACE_ADD_ACE_ADD_ACE_L2_INFO_C_TAG_DEI_VALID_ID,                                                            
    "l2_c_tag_dei_vld",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  ace.l2_info.c_tag.dei_valid:\r\n"
    "  If TRUE then dei considered as part of the ACE. Otherwise it masked. \r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl ace_add acl_ndx 0 ace_ndx 0 l4_prt_rng_max_prt 0\r\n"
    "  l4_prt_rng_min_prt 0 l4_prt_rng_is_src_prt 0\r\n"
    "  l4_dst_prt_msk 0 l4_dst_prt 0 l4_src_prt_msk 0\r\n"
    "  l4_src_prt 0 l3_dst_ip_address 0 l3_dst_ip_pref 0\r\n"
    "  l3_src_ip_address 0 l3_src_ip_pref 0\r\n"
    "  l3_prtcl_cod_vld 0 l3_prtcl_cod 0\r\n"
    "  l3_tos_msk 0 l3_tos 0 l2_dst_mac_vld 0\r\n"
    "  l2_dst_mac 0 l2_src_mac_vld 0 l2_src_mac 0\r\n"
    "  l2_s_tag_dei_vld 0 l2_s_tag_dei 0 l2_s_tag_pcp_vld 0\r\n"
    "  l2_s_tag_pcp 0 l2_s_tag_exist_vld 0\r\n"
    "  l2_s_tag_exist 0 l2_s_tag_vid_msk 0 l2_s_tag_vid 0\r\n"
    "  l2_c_tag_dei_vld 0 l2_c_tag_dei 0 l2_c_tag_pcp_vld 0\r\n"
    "  l2_c_tag_pcp 0 l2_c_tag_exist_vld 0\r\n"
    "  l2_c_tag_exist 0 l2_c_tag_vid_msk 0 l2_c_tag_vid 0\r\n"
    "  l2_prt_typ_vld 0 l2_prt_typ 0 l2_thr_typ_vld 0\r\n"
    "  l2_thr_typ 0 general_nlf_vld 0 general_nlf 0\r\n"
    "  general_vsd_vld 0 general_vsd 0 general_lcl_prt_vld 0\r\n"
    "  general_lcl_prt 0 action_cpu_cod 0 action_overwrite_cntrl 0\r\n"
    "  action_cos_prms_DP 0 action_cos_prms_TC 0 action_cos_prms_UP 0\r\n"
    "  action_policer_cntrllr 0 action_policer_pntr 0 action_tlf 0 action_typ 0 vrwrt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(22)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACE_ADD_ACE_ADD_ACE_L2_INFO_C_TAG_DEI_ID,                                                            
    "l2_c_tag_dei",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  ace.l2_info.c_tag.dei:\r\n"
    "  the value returned in the Ethernet Parsing of the DEI (drop eligibility\r\n"
    "  indicator). Size: 1 bit. Range 0-1. Relevant only for the S-TAG.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl ace_add acl_ndx 0 ace_ndx 0 l4_prt_rng_max_prt 0\r\n"
    "  l4_prt_rng_min_prt 0 l4_prt_rng_is_src_prt 0\r\n"
    "  l4_dst_prt_msk 0 l4_dst_prt 0 l4_src_prt_msk 0\r\n"
    "  l4_src_prt 0 l3_dst_ip_address 0 l3_dst_ip_pref 0\r\n"
    "  l3_src_ip_address 0 l3_src_ip_pref 0\r\n"
    "  l3_prtcl_cod_vld 0 l3_prtcl_cod 0\r\n"
    "  l3_tos_msk 0 l3_tos 0 l2_dst_mac_vld 0\r\n"
    "  l2_dst_mac 0 l2_src_mac_vld 0 l2_src_mac 0\r\n"
    "  l2_s_tag_dei_vld 0 l2_s_tag_dei 0 l2_s_tag_pcp_vld 0\r\n"
    "  l2_s_tag_pcp 0 l2_s_tag_exist_vld 0\r\n"
    "  l2_s_tag_exist 0 l2_s_tag_vid_msk 0 l2_s_tag_vid 0\r\n"
    "  l2_c_tag_dei_vld 0 l2_c_tag_dei 0 l2_c_tag_pcp_vld 0\r\n"
    "  l2_c_tag_pcp 0 l2_c_tag_exist_vld 0\r\n"
    "  l2_c_tag_exist 0 l2_c_tag_vid_msk 0 l2_c_tag_vid 0\r\n"
    "  l2_prt_typ_vld 0 l2_prt_typ 0 l2_thr_typ_vld 0\r\n"
    "  l2_thr_typ 0 general_nlf_vld 0 general_nlf 0\r\n"
    "  general_vsd_vld 0 general_vsd 0 general_lcl_prt_vld 0\r\n"
    "  general_lcl_prt 0 action_cpu_cod 0 action_overwrite_cntrl 0\r\n"
    "  action_cos_prms_DP 0 action_cos_prms_TC 0 action_cos_prms_UP 0\r\n"
    "  action_policer_cntrllr 0 action_policer_pntr 0 action_tlf 0 action_typ 0 vrwrt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(22)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACE_ADD_ACE_ADD_ACE_L2_INFO_C_TAG_PCP_VALID_ID,                                                            
    "l2_c_tag_pcp_vld",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  ace.l2_info.c_tag.pcp_valid:\r\n"
    "  If TRUE then pcp considered as part of the ACE. Otherwise it masked. \r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl ace_add acl_ndx 0 ace_ndx 0 l4_prt_rng_max_prt 0\r\n"
    "  l4_prt_rng_min_prt 0 l4_prt_rng_is_src_prt 0\r\n"
    "  l4_dst_prt_msk 0 l4_dst_prt 0 l4_src_prt_msk 0\r\n"
    "  l4_src_prt 0 l3_dst_ip_address 0 l3_dst_ip_pref 0\r\n"
    "  l3_src_ip_address 0 l3_src_ip_pref 0\r\n"
    "  l3_prtcl_cod_vld 0 l3_prtcl_cod 0\r\n"
    "  l3_tos_msk 0 l3_tos 0 l2_dst_mac_vld 0\r\n"
    "  l2_dst_mac 0 l2_src_mac_vld 0 l2_src_mac 0\r\n"
    "  l2_s_tag_dei_vld 0 l2_s_tag_dei 0 l2_s_tag_pcp_vld 0\r\n"
    "  l2_s_tag_pcp 0 l2_s_tag_exist_vld 0\r\n"
    "  l2_s_tag_exist 0 l2_s_tag_vid_msk 0 l2_s_tag_vid 0\r\n"
    "  l2_c_tag_dei_vld 0 l2_c_tag_dei 0 l2_c_tag_pcp_vld 0\r\n"
    "  l2_c_tag_pcp 0 l2_c_tag_exist_vld 0\r\n"
    "  l2_c_tag_exist 0 l2_c_tag_vid_msk 0 l2_c_tag_vid 0\r\n"
    "  l2_prt_typ_vld 0 l2_prt_typ 0 l2_thr_typ_vld 0\r\n"
    "  l2_thr_typ 0 general_nlf_vld 0 general_nlf 0\r\n"
    "  general_vsd_vld 0 general_vsd 0 general_lcl_prt_vld 0\r\n"
    "  general_lcl_prt 0 action_cpu_cod 0 action_overwrite_cntrl 0\r\n"
    "  action_cos_prms_DP 0 action_cos_prms_TC 0 action_cos_prms_UP 0\r\n"
    "  action_policer_cntrllr 0 action_policer_pntr 0 action_tlf 0 action_typ 0 vrwrt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(22)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACE_ADD_ACE_ADD_ACE_L2_INFO_C_TAG_PCP_ID,                                                            
    "l2_c_tag_pcp",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  ace.l2_info.c_tag.pcp:\r\n"
    "  the value returned in the Ethernet Parsing of the PCP (priority code point).\r\n"
    "  Size: 3 bits. Range 0-7.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl ace_add acl_ndx 0 ace_ndx 0 l4_prt_rng_max_prt 0\r\n"
    "  l4_prt_rng_min_prt 0 l4_prt_rng_is_src_prt 0\r\n"
    "  l4_dst_prt_msk 0 l4_dst_prt 0 l4_src_prt_msk 0\r\n"
    "  l4_src_prt 0 l3_dst_ip_address 0 l3_dst_ip_pref 0\r\n"
    "  l3_src_ip_address 0 l3_src_ip_pref 0\r\n"
    "  l3_prtcl_cod_vld 0 l3_prtcl_cod 0\r\n"
    "  l3_tos_msk 0 l3_tos 0 l2_dst_mac_vld 0\r\n"
    "  l2_dst_mac 0 l2_src_mac_vld 0 l2_src_mac 0\r\n"
    "  l2_s_tag_dei_vld 0 l2_s_tag_dei 0 l2_s_tag_pcp_vld 0\r\n"
    "  l2_s_tag_pcp 0 l2_s_tag_exist_vld 0\r\n"
    "  l2_s_tag_exist 0 l2_s_tag_vid_msk 0 l2_s_tag_vid 0\r\n"
    "  l2_c_tag_dei_vld 0 l2_c_tag_dei 0 l2_c_tag_pcp_vld 0\r\n"
    "  l2_c_tag_pcp 0 l2_c_tag_exist_vld 0\r\n"
    "  l2_c_tag_exist 0 l2_c_tag_vid_msk 0 l2_c_tag_vid 0\r\n"
    "  l2_prt_typ_vld 0 l2_prt_typ 0 l2_thr_typ_vld 0\r\n"
    "  l2_thr_typ 0 general_nlf_vld 0 general_nlf 0\r\n"
    "  general_vsd_vld 0 general_vsd 0 general_lcl_prt_vld 0\r\n"
    "  general_lcl_prt 0 action_cpu_cod 0 action_overwrite_cntrl 0\r\n"
    "  action_cos_prms_DP 0 action_cos_prms_TC 0 action_cos_prms_UP 0\r\n"
    "  action_policer_cntrllr 0 action_policer_pntr 0 action_tlf 0 action_typ 0 vrwrt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(22)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACE_ADD_ACE_ADD_ACE_L2_INFO_C_TAG_TAG_EXIST_VALID_ID,                                                            
    "l2_c_tag_exist_vld",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  ace.l2_info.c_tag.tag_exist_valid:\r\n"
    "  If TRUE then tag_exist considered as part of the ACE. Otherwise it masked. \r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl ace_add acl_ndx 0 ace_ndx 0 l4_prt_rng_max_prt 0\r\n"
    "  l4_prt_rng_min_prt 0 l4_prt_rng_is_src_prt 0\r\n"
    "  l4_dst_prt_msk 0 l4_dst_prt 0 l4_src_prt_msk 0\r\n"
    "  l4_src_prt 0 l3_dst_ip_address 0 l3_dst_ip_pref 0\r\n"
    "  l3_src_ip_address 0 l3_src_ip_pref 0\r\n"
    "  l3_prtcl_cod_vld 0 l3_prtcl_cod 0\r\n"
    "  l3_tos_msk 0 l3_tos 0 l2_dst_mac_vld 0\r\n"
    "  l2_dst_mac 0 l2_src_mac_vld 0 l2_src_mac 0\r\n"
    "  l2_s_tag_dei_vld 0 l2_s_tag_dei 0 l2_s_tag_pcp_vld 0\r\n"
    "  l2_s_tag_pcp 0 l2_s_tag_exist_vld 0\r\n"
    "  l2_s_tag_exist 0 l2_s_tag_vid_msk 0 l2_s_tag_vid 0\r\n"
    "  l2_c_tag_dei_vld 0 l2_c_tag_dei 0 l2_c_tag_pcp_vld 0\r\n"
    "  l2_c_tag_pcp 0 l2_c_tag_exist_vld 0\r\n"
    "  l2_c_tag_exist 0 l2_c_tag_vid_msk 0 l2_c_tag_vid 0\r\n"
    "  l2_prt_typ_vld 0 l2_prt_typ 0 l2_thr_typ_vld 0\r\n"
    "  l2_thr_typ 0 general_nlf_vld 0 general_nlf 0\r\n"
    "  general_vsd_vld 0 general_vsd 0 general_lcl_prt_vld 0\r\n"
    "  general_lcl_prt 0 action_cpu_cod 0 action_overwrite_cntrl 0\r\n"
    "  action_cos_prms_DP 0 action_cos_prms_TC 0 action_cos_prms_UP 0\r\n"
    "  action_policer_cntrllr 0 action_policer_pntr 0 action_tlf 0 action_typ 0 vrwrt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(22)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACE_ADD_ACE_ADD_ACE_L2_INFO_C_TAG_TAG_EXIST_ID,                                                            
    "l2_c_tag_exist",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  ace.l2_info.c_tag.tag_exist:\r\n"
    "  True if the Vlan tag is present in the packet. Size: 1 bit.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl ace_add acl_ndx 0 ace_ndx 0 l4_prt_rng_max_prt 0\r\n"
    "  l4_prt_rng_min_prt 0 l4_prt_rng_is_src_prt 0\r\n"
    "  l4_dst_prt_msk 0 l4_dst_prt 0 l4_src_prt_msk 0\r\n"
    "  l4_src_prt 0 l3_dst_ip_address 0 l3_dst_ip_pref 0\r\n"
    "  l3_src_ip_address 0 l3_src_ip_pref 0\r\n"
    "  l3_prtcl_cod_vld 0 l3_prtcl_cod 0\r\n"
    "  l3_tos_msk 0 l3_tos 0 l2_dst_mac_vld 0\r\n"
    "  l2_dst_mac 0 l2_src_mac_vld 0 l2_src_mac 0\r\n"
    "  l2_s_tag_dei_vld 0 l2_s_tag_dei 0 l2_s_tag_pcp_vld 0\r\n"
    "  l2_s_tag_pcp 0 l2_s_tag_exist_vld 0\r\n"
    "  l2_s_tag_exist 0 l2_s_tag_vid_msk 0 l2_s_tag_vid 0\r\n"
    "  l2_c_tag_dei_vld 0 l2_c_tag_dei 0 l2_c_tag_pcp_vld 0\r\n"
    "  l2_c_tag_pcp 0 l2_c_tag_exist_vld 0\r\n"
    "  l2_c_tag_exist 0 l2_c_tag_vid_msk 0 l2_c_tag_vid 0\r\n"
    "  l2_prt_typ_vld 0 l2_prt_typ 0 l2_thr_typ_vld 0\r\n"
    "  l2_thr_typ 0 general_nlf_vld 0 general_nlf 0\r\n"
    "  general_vsd_vld 0 general_vsd 0 general_lcl_prt_vld 0\r\n"
    "  general_lcl_prt 0 action_cpu_cod 0 action_overwrite_cntrl 0\r\n"
    "  action_cos_prms_DP 0 action_cos_prms_TC 0 action_cos_prms_UP 0\r\n"
    "  action_policer_cntrllr 0 action_policer_pntr 0 action_tlf 0 action_typ 0 vrwrt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(22)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACE_ADD_ACE_ADD_ACE_L2_INFO_C_TAG_VID_MASK_ID,                                                            
    "l2_c_tag_vid_msk",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  ace.l2_info.c_tag.vid_mask:\r\n"
    "  A mask on the vid (bitmap) indicates which bits to consider and which are\r\n"
    "  masked. 0 indicates all bits are masked, 0Xfff indicates to consider all the\r\n"
    "  bits in the key.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl ace_add acl_ndx 0 ace_ndx 0 l4_prt_rng_max_prt 0\r\n"
    "  l4_prt_rng_min_prt 0 l4_prt_rng_is_src_prt 0\r\n"
    "  l4_dst_prt_msk 0 l4_dst_prt 0 l4_src_prt_msk 0\r\n"
    "  l4_src_prt 0 l3_dst_ip_address 0 l3_dst_ip_pref 0\r\n"
    "  l3_src_ip_address 0 l3_src_ip_pref 0\r\n"
    "  l3_prtcl_cod_vld 0 l3_prtcl_cod 0\r\n"
    "  l3_tos_msk 0 l3_tos 0 l2_dst_mac_vld 0\r\n"
    "  l2_dst_mac 0 l2_src_mac_vld 0 l2_src_mac 0\r\n"
    "  l2_s_tag_dei_vld 0 l2_s_tag_dei 0 l2_s_tag_pcp_vld 0\r\n"
    "  l2_s_tag_pcp 0 l2_s_tag_exist_vld 0\r\n"
    "  l2_s_tag_exist 0 l2_s_tag_vid_msk 0 l2_s_tag_vid 0\r\n"
    "  l2_c_tag_dei_vld 0 l2_c_tag_dei 0 l2_c_tag_pcp_vld 0\r\n"
    "  l2_c_tag_pcp 0 l2_c_tag_exist_vld 0\r\n"
    "  l2_c_tag_exist 0 l2_c_tag_vid_msk 0 l2_c_tag_vid 0\r\n"
    "  l2_prt_typ_vld 0 l2_prt_typ 0 l2_thr_typ_vld 0\r\n"
    "  l2_thr_typ 0 general_nlf_vld 0 general_nlf 0\r\n"
    "  general_vsd_vld 0 general_vsd 0 general_lcl_prt_vld 0\r\n"
    "  general_lcl_prt 0 action_cpu_cod 0 action_overwrite_cntrl 0\r\n"
    "  action_cos_prms_DP 0 action_cos_prms_TC 0 action_cos_prms_UP 0\r\n"
    "  action_policer_cntrllr 0 action_policer_pntr 0 action_tlf 0 action_typ 0 vrwrt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(22)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACE_ADD_ACE_ADD_ACE_L2_INFO_C_TAG_VID_ID,                                                            
    "l2_c_tag_vid",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  ace.l2_info.c_tag.vid:\r\n"
    "  The Vlan Id. Size: 12 bits. Range 0-4095.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl ace_add acl_ndx 0 ace_ndx 0 l4_prt_rng_max_prt 0\r\n"
    "  l4_prt_rng_min_prt 0 l4_prt_rng_is_src_prt 0\r\n"
    "  l4_dst_prt_msk 0 l4_dst_prt 0 l4_src_prt_msk 0\r\n"
    "  l4_src_prt 0 l3_dst_ip_address 0 l3_dst_ip_pref 0\r\n"
    "  l3_src_ip_address 0 l3_src_ip_pref 0\r\n"
    "  l3_prtcl_cod_vld 0 l3_prtcl_cod 0\r\n"
    "  l3_tos_msk 0 l3_tos 0 l2_dst_mac_vld 0\r\n"
    "  l2_dst_mac 0 l2_src_mac_vld 0 l2_src_mac 0\r\n"
    "  l2_s_tag_dei_vld 0 l2_s_tag_dei 0 l2_s_tag_pcp_vld 0\r\n"
    "  l2_s_tag_pcp 0 l2_s_tag_exist_vld 0\r\n"
    "  l2_s_tag_exist 0 l2_s_tag_vid_msk 0 l2_s_tag_vid 0\r\n"
    "  l2_c_tag_dei_vld 0 l2_c_tag_dei 0 l2_c_tag_pcp_vld 0\r\n"
    "  l2_c_tag_pcp 0 l2_c_tag_exist_vld 0\r\n"
    "  l2_c_tag_exist 0 l2_c_tag_vid_msk 0 l2_c_tag_vid 0\r\n"
    "  l2_prt_typ_vld 0 l2_prt_typ 0 l2_thr_typ_vld 0\r\n"
    "  l2_thr_typ 0 general_nlf_vld 0 general_nlf 0\r\n"
    "  general_vsd_vld 0 general_vsd 0 general_lcl_prt_vld 0\r\n"
    "  general_lcl_prt 0 action_cpu_cod 0 action_overwrite_cntrl 0\r\n"
    "  action_cos_prms_DP 0 action_cos_prms_TC 0 action_cos_prms_UP 0\r\n"
    "  action_policer_cntrllr 0 action_policer_pntr 0 action_tlf 0 action_typ 0 vrwrt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(22)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACE_ADD_ACE_ADD_ACE_L2_INFO_PORT_TYPE_VALID_ID,                                                            
    "l2_prt_typ_vld",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  ace.l2_info.port_type_valid:\r\n"
    "  If TRUE then port_type considered as part of the ACE. Otherwise it masked. \r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl ace_add acl_ndx 0 ace_ndx 0 l4_prt_rng_max_prt 0\r\n"
    "  l4_prt_rng_min_prt 0 l4_prt_rng_is_src_prt 0\r\n"
    "  l4_dst_prt_msk 0 l4_dst_prt 0 l4_src_prt_msk 0\r\n"
    "  l4_src_prt 0 l3_dst_ip_address 0 l3_dst_ip_pref 0\r\n"
    "  l3_src_ip_address 0 l3_src_ip_pref 0\r\n"
    "  l3_prtcl_cod_vld 0 l3_prtcl_cod 0\r\n"
    "  l3_tos_msk 0 l3_tos 0 l2_dst_mac_vld 0\r\n"
    "  l2_dst_mac 0 l2_src_mac_vld 0 l2_src_mac 0\r\n"
    "  l2_s_tag_dei_vld 0 l2_s_tag_dei 0 l2_s_tag_pcp_vld 0\r\n"
    "  l2_s_tag_pcp 0 l2_s_tag_exist_vld 0\r\n"
    "  l2_s_tag_exist 0 l2_s_tag_vid_msk 0 l2_s_tag_vid 0\r\n"
    "  l2_c_tag_dei_vld 0 l2_c_tag_dei 0 l2_c_tag_pcp_vld 0\r\n"
    "  l2_c_tag_pcp 0 l2_c_tag_exist_vld 0\r\n"
    "  l2_c_tag_exist 0 l2_c_tag_vid_msk 0 l2_c_tag_vid 0\r\n"
    "  l2_prt_typ_vld 0 l2_prt_typ 0 l2_thr_typ_vld 0\r\n"
    "  l2_thr_typ 0 general_nlf_vld 0 general_nlf 0\r\n"
    "  general_vsd_vld 0 general_vsd 0 general_lcl_prt_vld 0\r\n"
    "  general_lcl_prt 0 action_cpu_cod 0 action_overwrite_cntrl 0\r\n"
    "  action_cos_prms_DP 0 action_cos_prms_TC 0 action_cos_prms_UP 0\r\n"
    "  action_policer_cntrllr 0 action_policer_pntr 0 action_tlf 0 action_typ 0 vrwrt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(22)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACE_ADD_ACE_ADD_ACE_L2_INFO_PORT_TYPE_ID,                                                            
    "l2_prt_typ",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  ace.l2_info.port_type:\r\n"
    "  The l2 port type (VBP,CEP,CNP,PNP). Size: 2 bits.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl ace_add acl_ndx 0 ace_ndx 0 l4_prt_rng_max_prt 0\r\n"
    "  l4_prt_rng_min_prt 0 l4_prt_rng_is_src_prt 0\r\n"
    "  l4_dst_prt_msk 0 l4_dst_prt 0 l4_src_prt_msk 0\r\n"
    "  l4_src_prt 0 l3_dst_ip_address 0 l3_dst_ip_pref 0\r\n"
    "  l3_src_ip_address 0 l3_src_ip_pref 0\r\n"
    "  l3_prtcl_cod_vld 0 l3_prtcl_cod 0\r\n"
    "  l3_tos_msk 0 l3_tos 0 l2_dst_mac_vld 0\r\n"
    "  l2_dst_mac 0 l2_src_mac_vld 0 l2_src_mac 0\r\n"
    "  l2_s_tag_dei_vld 0 l2_s_tag_dei 0 l2_s_tag_pcp_vld 0\r\n"
    "  l2_s_tag_pcp 0 l2_s_tag_exist_vld 0\r\n"
    "  l2_s_tag_exist 0 l2_s_tag_vid_msk 0 l2_s_tag_vid 0\r\n"
    "  l2_c_tag_dei_vld 0 l2_c_tag_dei 0 l2_c_tag_pcp_vld 0\r\n"
    "  l2_c_tag_pcp 0 l2_c_tag_exist_vld 0\r\n"
    "  l2_c_tag_exist 0 l2_c_tag_vid_msk 0 l2_c_tag_vid 0\r\n"
    "  l2_prt_typ_vld 0 l2_prt_typ 0 l2_thr_typ_vld 0\r\n"
    "  l2_thr_typ 0 general_nlf_vld 0 general_nlf 0\r\n"
    "  general_vsd_vld 0 general_vsd 0 general_lcl_prt_vld 0\r\n"
    "  general_lcl_prt 0 action_cpu_cod 0 action_overwrite_cntrl 0\r\n"
    "  action_cos_prms_DP 0 action_cos_prms_TC 0 action_cos_prms_UP 0\r\n"
    "  action_policer_cntrllr 0 action_policer_pntr 0 action_tlf 0 action_typ 0 vrwrt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(22)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACE_ADD_ACE_ADD_ACE_L2_INFO_ETHER_TYPE_VALID_ID,                                                            
    "l2_thr_typ_vld",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  ace.l2_info.ether_type_valid:\r\n"
    "  If TRUE then ether_type considered as part of the ACE. Otherwise it masked. \r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl ace_add acl_ndx 0 ace_ndx 0 l4_prt_rng_max_prt 0\r\n"
    "  l4_prt_rng_min_prt 0 l4_prt_rng_is_src_prt 0\r\n"
    "  l4_dst_prt_msk 0 l4_dst_prt 0 l4_src_prt_msk 0\r\n"
    "  l4_src_prt 0 l3_dst_ip_address 0 l3_dst_ip_pref 0\r\n"
    "  l3_src_ip_address 0 l3_src_ip_pref 0\r\n"
    "  l3_prtcl_cod_vld 0 l3_prtcl_cod 0\r\n"
    "  l3_tos_msk 0 l3_tos 0 l2_dst_mac_vld 0\r\n"
    "  l2_dst_mac 0 l2_src_mac_vld 0 l2_src_mac 0\r\n"
    "  l2_s_tag_dei_vld 0 l2_s_tag_dei 0 l2_s_tag_pcp_vld 0\r\n"
    "  l2_s_tag_pcp 0 l2_s_tag_exist_vld 0\r\n"
    "  l2_s_tag_exist 0 l2_s_tag_vid_msk 0 l2_s_tag_vid 0\r\n"
    "  l2_c_tag_dei_vld 0 l2_c_tag_dei 0 l2_c_tag_pcp_vld 0\r\n"
    "  l2_c_tag_pcp 0 l2_c_tag_exist_vld 0\r\n"
    "  l2_c_tag_exist 0 l2_c_tag_vid_msk 0 l2_c_tag_vid 0\r\n"
    "  l2_prt_typ_vld 0 l2_prt_typ 0 l2_thr_typ_vld 0\r\n"
    "  l2_thr_typ 0 general_nlf_vld 0 general_nlf 0\r\n"
    "  general_vsd_vld 0 general_vsd 0 general_lcl_prt_vld 0\r\n"
    "  general_lcl_prt 0 action_cpu_cod 0 action_overwrite_cntrl 0\r\n"
    "  action_cos_prms_DP 0 action_cos_prms_TC 0 action_cos_prms_UP 0\r\n"
    "  action_policer_cntrllr 0 action_policer_pntr 0 action_tlf 0 action_typ 0 vrwrt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(22)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACE_ADD_ACE_ADD_ACE_L2_INFO_ETHER_TYPE_ID,                                                            
    "l2_thr_typ",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  ace.l2_info.ether_type:\r\n"
    "  The EtherType field of the Ethernet header. Range: must be one of the values\r\n"
    "  set in the global information setting. Size: 3 bits.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl ace_add acl_ndx 0 ace_ndx 0 l4_prt_rng_max_prt 0\r\n"
    "  l4_prt_rng_min_prt 0 l4_prt_rng_is_src_prt 0\r\n"
    "  l4_dst_prt_msk 0 l4_dst_prt 0 l4_src_prt_msk 0\r\n"
    "  l4_src_prt 0 l3_dst_ip_address 0 l3_dst_ip_pref 0\r\n"
    "  l3_src_ip_address 0 l3_src_ip_pref 0\r\n"
    "  l3_prtcl_cod_vld 0 l3_prtcl_cod 0\r\n"
    "  l3_tos_msk 0 l3_tos 0 l2_dst_mac_vld 0\r\n"
    "  l2_dst_mac 0 l2_src_mac_vld 0 l2_src_mac 0\r\n"
    "  l2_s_tag_dei_vld 0 l2_s_tag_dei 0 l2_s_tag_pcp_vld 0\r\n"
    "  l2_s_tag_pcp 0 l2_s_tag_exist_vld 0\r\n"
    "  l2_s_tag_exist 0 l2_s_tag_vid_msk 0 l2_s_tag_vid 0\r\n"
    "  l2_c_tag_dei_vld 0 l2_c_tag_dei 0 l2_c_tag_pcp_vld 0\r\n"
    "  l2_c_tag_pcp 0 l2_c_tag_exist_vld 0\r\n"
    "  l2_c_tag_exist 0 l2_c_tag_vid_msk 0 l2_c_tag_vid 0\r\n"
    "  l2_prt_typ_vld 0 l2_prt_typ 0 l2_thr_typ_vld 0\r\n"
    "  l2_thr_typ 0 general_nlf_vld 0 general_nlf 0\r\n"
    "  general_vsd_vld 0 general_vsd 0 general_lcl_prt_vld 0\r\n"
    "  general_lcl_prt 0 action_cpu_cod 0 action_overwrite_cntrl 0\r\n"
    "  action_cos_prms_DP 0 action_cos_prms_TC 0 action_cos_prms_UP 0\r\n"
    "  action_policer_cntrllr 0 action_policer_pntr 0 action_tlf 0 action_typ 0 vrwrt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(22)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACE_ADD_ACE_ADD_ACE_GENERAL_INFO_INLIF_VALID_ID,                                                            
    "general_nlf_vld",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  ace.general_info.inlif_valid:\r\n"
    "  If TRUE then inlif considered as part of the ACE. Otherwise it masked. \r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl ace_add acl_ndx 0 ace_ndx 0 l4_prt_rng_max_prt 0\r\n"
    "  l4_prt_rng_min_prt 0 l4_prt_rng_is_src_prt 0\r\n"
    "  l4_dst_prt_msk 0 l4_dst_prt 0 l4_src_prt_msk 0\r\n"
    "  l4_src_prt 0 l3_dst_ip_address 0 l3_dst_ip_pref 0\r\n"
    "  l3_src_ip_address 0 l3_src_ip_pref 0\r\n"
    "  l3_prtcl_cod_vld 0 l3_prtcl_cod 0\r\n"
    "  l3_tos_msk 0 l3_tos 0 l2_dst_mac_vld 0\r\n"
    "  l2_dst_mac 0 l2_src_mac_vld 0 l2_src_mac 0\r\n"
    "  l2_s_tag_dei_vld 0 l2_s_tag_dei 0 l2_s_tag_pcp_vld 0\r\n"
    "  l2_s_tag_pcp 0 l2_s_tag_exist_vld 0\r\n"
    "  l2_s_tag_exist 0 l2_s_tag_vid_msk 0 l2_s_tag_vid 0\r\n"
    "  l2_c_tag_dei_vld 0 l2_c_tag_dei 0 l2_c_tag_pcp_vld 0\r\n"
    "  l2_c_tag_pcp 0 l2_c_tag_exist_vld 0\r\n"
    "  l2_c_tag_exist 0 l2_c_tag_vid_msk 0 l2_c_tag_vid 0\r\n"
    "  l2_prt_typ_vld 0 l2_prt_typ 0 l2_thr_typ_vld 0\r\n"
    "  l2_thr_typ 0 general_nlf_vld 0 general_nlf 0\r\n"
    "  general_vsd_vld 0 general_vsd 0 general_lcl_prt_vld 0\r\n"
    "  general_lcl_prt 0 action_cpu_cod 0 action_overwrite_cntrl 0\r\n"
    "  action_cos_prms_DP 0 action_cos_prms_TC 0 action_cos_prms_UP 0\r\n"
    "  action_policer_cntrllr 0 action_policer_pntr 0 action_tlf 0 action_typ 0 vrwrt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(22)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACE_ADD_ACE_ADD_ACE_GENERAL_INFO_INLIF_ID,                                                            
    "general_nlf",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  ace.general_info.inlif:\r\n"
    "  The source Id of the packet. In 802.1AD and 802.1Q it is the system port ID.\r\n"
    "  Size: 19 bits. Range 0-(16k-1). \r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl ace_add acl_ndx 0 ace_ndx 0 l4_prt_rng_max_prt 0\r\n"
    "  l4_prt_rng_min_prt 0 l4_prt_rng_is_src_prt 0\r\n"
    "  l4_dst_prt_msk 0 l4_dst_prt 0 l4_src_prt_msk 0\r\n"
    "  l4_src_prt 0 l3_dst_ip_address 0 l3_dst_ip_pref 0\r\n"
    "  l3_src_ip_address 0 l3_src_ip_pref 0\r\n"
    "  l3_prtcl_cod_vld 0 l3_prtcl_cod 0\r\n"
    "  l3_tos_msk 0 l3_tos 0 l2_dst_mac_vld 0\r\n"
    "  l2_dst_mac 0 l2_src_mac_vld 0 l2_src_mac 0\r\n"
    "  l2_s_tag_dei_vld 0 l2_s_tag_dei 0 l2_s_tag_pcp_vld 0\r\n"
    "  l2_s_tag_pcp 0 l2_s_tag_exist_vld 0\r\n"
    "  l2_s_tag_exist 0 l2_s_tag_vid_msk 0 l2_s_tag_vid 0\r\n"
    "  l2_c_tag_dei_vld 0 l2_c_tag_dei 0 l2_c_tag_pcp_vld 0\r\n"
    "  l2_c_tag_pcp 0 l2_c_tag_exist_vld 0\r\n"
    "  l2_c_tag_exist 0 l2_c_tag_vid_msk 0 l2_c_tag_vid 0\r\n"
    "  l2_prt_typ_vld 0 l2_prt_typ 0 l2_thr_typ_vld 0\r\n"
    "  l2_thr_typ 0 general_nlf_vld 0 general_nlf 0\r\n"
    "  general_vsd_vld 0 general_vsd 0 general_lcl_prt_vld 0\r\n"
    "  general_lcl_prt 0 action_cpu_cod 0 action_overwrite_cntrl 0\r\n"
    "  action_cos_prms_DP 0 action_cos_prms_TC 0 action_cos_prms_UP 0\r\n"
    "  action_policer_cntrllr 0 action_policer_pntr 0 action_tlf 0 action_typ 0 vrwrt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(22)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACE_ADD_ACE_ADD_ACE_GENERAL_INFO_VSID_VALID_ID,                                                            
    "general_vsd_vld",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  ace.general_info.vsid_valid:\r\n"
    "  If TRUE then vsid considered as part of the ACE. Otherwise it masked. \r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl ace_add acl_ndx 0 ace_ndx 0 l4_prt_rng_max_prt 0\r\n"
    "  l4_prt_rng_min_prt 0 l4_prt_rng_is_src_prt 0\r\n"
    "  l4_dst_prt_msk 0 l4_dst_prt 0 l4_src_prt_msk 0\r\n"
    "  l4_src_prt 0 l3_dst_ip_address 0 l3_dst_ip_pref 0\r\n"
    "  l3_src_ip_address 0 l3_src_ip_pref 0\r\n"
    "  l3_prtcl_cod_vld 0 l3_prtcl_cod 0\r\n"
    "  l3_tos_msk 0 l3_tos 0 l2_dst_mac_vld 0\r\n"
    "  l2_dst_mac 0 l2_src_mac_vld 0 l2_src_mac 0\r\n"
    "  l2_s_tag_dei_vld 0 l2_s_tag_dei 0 l2_s_tag_pcp_vld 0\r\n"
    "  l2_s_tag_pcp 0 l2_s_tag_exist_vld 0\r\n"
    "  l2_s_tag_exist 0 l2_s_tag_vid_msk 0 l2_s_tag_vid 0\r\n"
    "  l2_c_tag_dei_vld 0 l2_c_tag_dei 0 l2_c_tag_pcp_vld 0\r\n"
    "  l2_c_tag_pcp 0 l2_c_tag_exist_vld 0\r\n"
    "  l2_c_tag_exist 0 l2_c_tag_vid_msk 0 l2_c_tag_vid 0\r\n"
    "  l2_prt_typ_vld 0 l2_prt_typ 0 l2_thr_typ_vld 0\r\n"
    "  l2_thr_typ 0 general_nlf_vld 0 general_nlf 0\r\n"
    "  general_vsd_vld 0 general_vsd 0 general_lcl_prt_vld 0\r\n"
    "  general_lcl_prt 0 action_cpu_cod 0 action_overwrite_cntrl 0\r\n"
    "  action_cos_prms_DP 0 action_cos_prms_TC 0 action_cos_prms_UP 0\r\n"
    "  action_policer_cntrllr 0 action_policer_pntr 0 action_tlf 0 action_typ 0 vrwrt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(22)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACE_ADD_ACE_ADD_ACE_GENERAL_INFO_VSID_ID,                                                            
    "general_vsd",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  ace.general_info.vsid:\r\n"
    "  Virtual Switch ID. Size: 14 bits. Range 0-(16k-1).\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl ace_add acl_ndx 0 ace_ndx 0 l4_prt_rng_max_prt 0\r\n"
    "  l4_prt_rng_min_prt 0 l4_prt_rng_is_src_prt 0\r\n"
    "  l4_dst_prt_msk 0 l4_dst_prt 0 l4_src_prt_msk 0\r\n"
    "  l4_src_prt 0 l3_dst_ip_address 0 l3_dst_ip_pref 0\r\n"
    "  l3_src_ip_address 0 l3_src_ip_pref 0\r\n"
    "  l3_prtcl_cod_vld 0 l3_prtcl_cod 0\r\n"
    "  l3_tos_msk 0 l3_tos 0 l2_dst_mac_vld 0\r\n"
    "  l2_dst_mac 0 l2_src_mac_vld 0 l2_src_mac 0\r\n"
    "  l2_s_tag_dei_vld 0 l2_s_tag_dei 0 l2_s_tag_pcp_vld 0\r\n"
    "  l2_s_tag_pcp 0 l2_s_tag_exist_vld 0\r\n"
    "  l2_s_tag_exist 0 l2_s_tag_vid_msk 0 l2_s_tag_vid 0\r\n"
    "  l2_c_tag_dei_vld 0 l2_c_tag_dei 0 l2_c_tag_pcp_vld 0\r\n"
    "  l2_c_tag_pcp 0 l2_c_tag_exist_vld 0\r\n"
    "  l2_c_tag_exist 0 l2_c_tag_vid_msk 0 l2_c_tag_vid 0\r\n"
    "  l2_prt_typ_vld 0 l2_prt_typ 0 l2_thr_typ_vld 0\r\n"
    "  l2_thr_typ 0 general_nlf_vld 0 general_nlf 0\r\n"
    "  general_vsd_vld 0 general_vsd 0 general_lcl_prt_vld 0\r\n"
    "  general_lcl_prt 0 action_cpu_cod 0 action_overwrite_cntrl 0\r\n"
    "  action_cos_prms_DP 0 action_cos_prms_TC 0 action_cos_prms_UP 0\r\n"
    "  action_policer_cntrllr 0 action_policer_pntr 0 action_tlf 0 action_typ 0 vrwrt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(22)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACE_ADD_ACE_ADD_ACE_GENERAL_INFO_LOCAL_PORT_VALID_ID,                                                            
    "general_lcl_prt_vld",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  ace.general_info.local_port_valid:\r\n"
    "  If TRUE then local_port considered as part of the ACE. Otherwise it masked. \r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl ace_add acl_ndx 0 ace_ndx 0 l4_prt_rng_max_prt 0\r\n"
    "  l4_prt_rng_min_prt 0 l4_prt_rng_is_src_prt 0\r\n"
    "  l4_dst_prt_msk 0 l4_dst_prt 0 l4_src_prt_msk 0\r\n"
    "  l4_src_prt 0 l3_dst_ip_address 0 l3_dst_ip_pref 0\r\n"
    "  l3_src_ip_address 0 l3_src_ip_pref 0\r\n"
    "  l3_prtcl_cod_vld 0 l3_prtcl_cod 0\r\n"
    "  l3_tos_msk 0 l3_tos 0 l2_dst_mac_vld 0\r\n"
    "  l2_dst_mac 0 l2_src_mac_vld 0 l2_src_mac 0\r\n"
    "  l2_s_tag_dei_vld 0 l2_s_tag_dei 0 l2_s_tag_pcp_vld 0\r\n"
    "  l2_s_tag_pcp 0 l2_s_tag_exist_vld 0\r\n"
    "  l2_s_tag_exist 0 l2_s_tag_vid_msk 0 l2_s_tag_vid 0\r\n"
    "  l2_c_tag_dei_vld 0 l2_c_tag_dei 0 l2_c_tag_pcp_vld 0\r\n"
    "  l2_c_tag_pcp 0 l2_c_tag_exist_vld 0\r\n"
    "  l2_c_tag_exist 0 l2_c_tag_vid_msk 0 l2_c_tag_vid 0\r\n"
    "  l2_prt_typ_vld 0 l2_prt_typ 0 l2_thr_typ_vld 0\r\n"
    "  l2_thr_typ 0 general_nlf_vld 0 general_nlf 0\r\n"
    "  general_vsd_vld 0 general_vsd 0 general_lcl_prt_vld 0\r\n"
    "  general_lcl_prt 0 action_cpu_cod 0 action_overwrite_cntrl 0\r\n"
    "  action_cos_prms_DP 0 action_cos_prms_TC 0 action_cos_prms_UP 0\r\n"
    "  action_policer_cntrllr 0 action_policer_pntr 0 action_tlf 0 action_typ 0 vrwrt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(22)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACE_ADD_ACE_ADD_ACE_GENERAL_INFO_LOCAL_PORT_ID,                                                            
    "general_lcl_prt",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  ace.general_info.local_port:\r\n"
    "  Local port Id. Size: 6 bits. Range 0-31.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl ace_add acl_ndx 0 ace_ndx 0 l4_prt_rng_max_prt 0\r\n"
    "  l4_prt_rng_min_prt 0 l4_prt_rng_is_src_prt 0\r\n"
    "  l4_dst_prt_msk 0 l4_dst_prt 0 l4_src_prt_msk 0\r\n"
    "  l4_src_prt 0 l3_dst_ip_address 0 l3_dst_ip_pref 0\r\n"
    "  l3_src_ip_address 0 l3_src_ip_pref 0\r\n"
    "  l3_prtcl_cod_vld 0 l3_prtcl_cod 0\r\n"
    "  l3_tos_msk 0 l3_tos 0 l2_dst_mac_vld 0\r\n"
    "  l2_dst_mac 0 l2_src_mac_vld 0 l2_src_mac 0\r\n"
    "  l2_s_tag_dei_vld 0 l2_s_tag_dei 0 l2_s_tag_pcp_vld 0\r\n"
    "  l2_s_tag_pcp 0 l2_s_tag_exist_vld 0\r\n"
    "  l2_s_tag_exist 0 l2_s_tag_vid_msk 0 l2_s_tag_vid 0\r\n"
    "  l2_c_tag_dei_vld 0 l2_c_tag_dei 0 l2_c_tag_pcp_vld 0\r\n"
    "  l2_c_tag_pcp 0 l2_c_tag_exist_vld 0\r\n"
    "  l2_c_tag_exist 0 l2_c_tag_vid_msk 0 l2_c_tag_vid 0\r\n"
    "  l2_prt_typ_vld 0 l2_prt_typ 0 l2_thr_typ_vld 0\r\n"
    "  l2_thr_typ 0 general_nlf_vld 0 general_nlf 0\r\n"
    "  general_vsd_vld 0 general_vsd 0 general_lcl_prt_vld 0\r\n"
    "  general_lcl_prt 0 action_cpu_cod 0 action_overwrite_cntrl 0\r\n"
    "  action_cos_prms_DP 0 action_cos_prms_TC 0 action_cos_prms_UP 0\r\n"
    "  action_policer_cntrllr 0 action_policer_pntr 0 action_tlf 0 action_typ 0 vrwrt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(22)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACE_ADD_ACE_ADD_ACTION_INFO_CPU_CODE_ID,                                                            
    "action_cpu_cod",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  action_info.cpu_code:\r\n"
    "  Code to be sent in the packets header to the CPU. Relevant only if the ACL\r\n"
    "  action type includes OutLIF.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl ace_add acl_ndx 0 ace_ndx 0 l4_prt_rng_max_prt 0\r\n"
    "  l4_prt_rng_min_prt 0 l4_prt_rng_is_src_prt 0\r\n"
    "  l4_dst_prt_msk 0 l4_dst_prt 0 l4_src_prt_msk 0\r\n"
    "  l4_src_prt 0 l3_dst_ip_address 0 l3_dst_ip_pref 0\r\n"
    "  l3_src_ip_address 0 l3_src_ip_pref 0\r\n"
    "  l3_prtcl_cod_vld 0 l3_prtcl_cod 0\r\n"
    "  l3_tos_msk 0 l3_tos 0 l2_dst_mac_vld 0\r\n"
    "  l2_dst_mac 0 l2_src_mac_vld 0 l2_src_mac 0\r\n"
    "  l2_s_tag_dei_vld 0 l2_s_tag_dei 0 l2_s_tag_pcp_vld 0\r\n"
    "  l2_s_tag_pcp 0 l2_s_tag_exist_vld 0\r\n"
    "  l2_s_tag_exist 0 l2_s_tag_vid_msk 0 l2_s_tag_vid 0\r\n"
    "  l2_c_tag_dei_vld 0 l2_c_tag_dei 0 l2_c_tag_pcp_vld 0\r\n"
    "  l2_c_tag_pcp 0 l2_c_tag_exist_vld 0\r\n"
    "  l2_c_tag_exist 0 l2_c_tag_vid_msk 0 l2_c_tag_vid 0\r\n"
    "  l2_prt_typ_vld 0 l2_prt_typ 0 l2_thr_typ_vld 0\r\n"
    "  l2_thr_typ 0 general_nlf_vld 0 general_nlf 0\r\n"
    "  general_vsd_vld 0 general_vsd 0 general_lcl_prt_vld 0\r\n"
    "  general_lcl_prt 0 action_cpu_cod 0 action_overwrite_cntrl 0\r\n"
    "  action_cos_prms_DP 0 action_cos_prms_TC 0 action_cos_prms_UP 0\r\n"
    "  action_policer_cntrllr 0 action_policer_pntr 0 action_tlf 0 action_typ 0 vrwrt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(22)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACE_ADD_ACE_ADD_ACTION_INFO_OVERWRITE_CONTROL_ID,                                                            
    "action_overwrite_cntrl",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  action_info.overwrite_control:\r\n"
    "  IF TRUE then Ethernet bridged packet will be overwrite by the ACL result\r\n"
    "  regardless of the bridge Forwarding Type. If FALSE then if the bridge\r\n"
    "  forwarding type is control then the ACL rule will not overwrite by the ACL\r\n"
    "  action.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl ace_add acl_ndx 0 ace_ndx 0 l4_prt_rng_max_prt 0\r\n"
    "  l4_prt_rng_min_prt 0 l4_prt_rng_is_src_prt 0\r\n"
    "  l4_dst_prt_msk 0 l4_dst_prt 0 l4_src_prt_msk 0\r\n"
    "  l4_src_prt 0 l3_dst_ip_address 0 l3_dst_ip_pref 0\r\n"
    "  l3_src_ip_address 0 l3_src_ip_pref 0\r\n"
    "  l3_prtcl_cod_vld 0 l3_prtcl_cod 0\r\n"
    "  l3_tos_msk 0 l3_tos 0 l2_dst_mac_vld 0\r\n"
    "  l2_dst_mac 0 l2_src_mac_vld 0 l2_src_mac 0\r\n"
    "  l2_s_tag_dei_vld 0 l2_s_tag_dei 0 l2_s_tag_pcp_vld 0\r\n"
    "  l2_s_tag_pcp 0 l2_s_tag_exist_vld 0\r\n"
    "  l2_s_tag_exist 0 l2_s_tag_vid_msk 0 l2_s_tag_vid 0\r\n"
    "  l2_c_tag_dei_vld 0 l2_c_tag_dei 0 l2_c_tag_pcp_vld 0\r\n"
    "  l2_c_tag_pcp 0 l2_c_tag_exist_vld 0\r\n"
    "  l2_c_tag_exist 0 l2_c_tag_vid_msk 0 l2_c_tag_vid 0\r\n"
    "  l2_prt_typ_vld 0 l2_prt_typ 0 l2_thr_typ_vld 0\r\n"
    "  l2_thr_typ 0 general_nlf_vld 0 general_nlf 0\r\n"
    "  general_vsd_vld 0 general_vsd 0 general_lcl_prt_vld 0\r\n"
    "  general_lcl_prt 0 action_cpu_cod 0 action_overwrite_cntrl 0\r\n"
    "  action_cos_prms_DP 0 action_cos_prms_TC 0 action_cos_prms_UP 0\r\n"
    "  action_policer_cntrllr 0 action_policer_pntr 0 action_tlf 0 action_typ 0 vrwrt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(22)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACE_ADD_ACE_ADD_ACTION_INFO_COS_PARAMS_DP_ID,                                                            
    "action_cos_prms_DP",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  action_info.cos_params.DP:\r\n"
    "  Drop precedenceRange 0-3.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl ace_add acl_ndx 0 ace_ndx 0 l4_prt_rng_max_prt 0\r\n"
    "  l4_prt_rng_min_prt 0 l4_prt_rng_is_src_prt 0\r\n"
    "  l4_dst_prt_msk 0 l4_dst_prt 0 l4_src_prt_msk 0\r\n"
    "  l4_src_prt 0 l3_dst_ip_address 0 l3_dst_ip_pref 0\r\n"
    "  l3_src_ip_address 0 l3_src_ip_pref 0\r\n"
    "  l3_prtcl_cod_vld 0 l3_prtcl_cod 0\r\n"
    "  l3_tos_msk 0 l3_tos 0 l2_dst_mac_vld 0\r\n"
    "  l2_dst_mac 0 l2_src_mac_vld 0 l2_src_mac 0\r\n"
    "  l2_s_tag_dei_vld 0 l2_s_tag_dei 0 l2_s_tag_pcp_vld 0\r\n"
    "  l2_s_tag_pcp 0 l2_s_tag_exist_vld 0\r\n"
    "  l2_s_tag_exist 0 l2_s_tag_vid_msk 0 l2_s_tag_vid 0\r\n"
    "  l2_c_tag_dei_vld 0 l2_c_tag_dei 0 l2_c_tag_pcp_vld 0\r\n"
    "  l2_c_tag_pcp 0 l2_c_tag_exist_vld 0\r\n"
    "  l2_c_tag_exist 0 l2_c_tag_vid_msk 0 l2_c_tag_vid 0\r\n"
    "  l2_prt_typ_vld 0 l2_prt_typ 0 l2_thr_typ_vld 0\r\n"
    "  l2_thr_typ 0 general_nlf_vld 0 general_nlf 0\r\n"
    "  general_vsd_vld 0 general_vsd 0 general_lcl_prt_vld 0\r\n"
    "  general_lcl_prt 0 action_cpu_cod 0 action_overwrite_cntrl 0\r\n"
    "  action_cos_prms_DP 0 action_cos_prms_TC 0 action_cos_prms_UP 0\r\n"
    "  action_policer_cntrllr 0 action_policer_pntr 0 action_tlf 0 action_typ 0 vrwrt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(22)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACE_ADD_ACE_ADD_ACTION_INFO_COS_PARAMS_TC_ID,                                                            
    "action_cos_prms_TC",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  action_info.cos_params.TC:\r\n"
    "  Traffic ClassRange 0-7.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl ace_add acl_ndx 0 ace_ndx 0 l4_prt_rng_max_prt 0\r\n"
    "  l4_prt_rng_min_prt 0 l4_prt_rng_is_src_prt 0\r\n"
    "  l4_dst_prt_msk 0 l4_dst_prt 0 l4_src_prt_msk 0\r\n"
    "  l4_src_prt 0 l3_dst_ip_address 0 l3_dst_ip_pref 0\r\n"
    "  l3_src_ip_address 0 l3_src_ip_pref 0\r\n"
    "  l3_prtcl_cod_vld 0 l3_prtcl_cod 0\r\n"
    "  l3_tos_msk 0 l3_tos 0 l2_dst_mac_vld 0\r\n"
    "  l2_dst_mac 0 l2_src_mac_vld 0 l2_src_mac 0\r\n"
    "  l2_s_tag_dei_vld 0 l2_s_tag_dei 0 l2_s_tag_pcp_vld 0\r\n"
    "  l2_s_tag_pcp 0 l2_s_tag_exist_vld 0\r\n"
    "  l2_s_tag_exist 0 l2_s_tag_vid_msk 0 l2_s_tag_vid 0\r\n"
    "  l2_c_tag_dei_vld 0 l2_c_tag_dei 0 l2_c_tag_pcp_vld 0\r\n"
    "  l2_c_tag_pcp 0 l2_c_tag_exist_vld 0\r\n"
    "  l2_c_tag_exist 0 l2_c_tag_vid_msk 0 l2_c_tag_vid 0\r\n"
    "  l2_prt_typ_vld 0 l2_prt_typ 0 l2_thr_typ_vld 0\r\n"
    "  l2_thr_typ 0 general_nlf_vld 0 general_nlf 0\r\n"
    "  general_vsd_vld 0 general_vsd 0 general_lcl_prt_vld 0\r\n"
    "  general_lcl_prt 0 action_cpu_cod 0 action_overwrite_cntrl 0\r\n"
    "  action_cos_prms_DP 0 action_cos_prms_TC 0 action_cos_prms_UP 0\r\n"
    "  action_policer_cntrllr 0 action_policer_pntr 0 action_tlf 0 action_typ 0 vrwrt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(22)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACE_ADD_ACE_ADD_ACTION_INFO_COS_PARAMS_UP_ID,                                                            
    "action_cos_prms_UP",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  action_info.cos_params.UP:\r\n"
    "  User PriorityRange 0-7.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl ace_add acl_ndx 0 ace_ndx 0 l4_prt_rng_max_prt 0\r\n"
    "  l4_prt_rng_min_prt 0 l4_prt_rng_is_src_prt 0\r\n"
    "  l4_dst_prt_msk 0 l4_dst_prt 0 l4_src_prt_msk 0\r\n"
    "  l4_src_prt 0 l3_dst_ip_address 0 l3_dst_ip_pref 0\r\n"
    "  l3_src_ip_address 0 l3_src_ip_pref 0\r\n"
    "  l3_prtcl_cod_vld 0 l3_prtcl_cod 0\r\n"
    "  l3_tos_msk 0 l3_tos 0 l2_dst_mac_vld 0\r\n"
    "  l2_dst_mac 0 l2_src_mac_vld 0 l2_src_mac 0\r\n"
    "  l2_s_tag_dei_vld 0 l2_s_tag_dei 0 l2_s_tag_pcp_vld 0\r\n"
    "  l2_s_tag_pcp 0 l2_s_tag_exist_vld 0\r\n"
    "  l2_s_tag_exist 0 l2_s_tag_vid_msk 0 l2_s_tag_vid 0\r\n"
    "  l2_c_tag_dei_vld 0 l2_c_tag_dei 0 l2_c_tag_pcp_vld 0\r\n"
    "  l2_c_tag_pcp 0 l2_c_tag_exist_vld 0\r\n"
    "  l2_c_tag_exist 0 l2_c_tag_vid_msk 0 l2_c_tag_vid 0\r\n"
    "  l2_prt_typ_vld 0 l2_prt_typ 0 l2_thr_typ_vld 0\r\n"
    "  l2_thr_typ 0 general_nlf_vld 0 general_nlf 0\r\n"
    "  general_vsd_vld 0 general_vsd 0 general_lcl_prt_vld 0\r\n"
    "  general_lcl_prt 0 action_cpu_cod 0 action_overwrite_cntrl 0\r\n"
    "  action_cos_prms_DP 0 action_cos_prms_TC 0 action_cos_prms_UP 0\r\n"
    "  action_policer_cntrllr 0 action_policer_pntr 0 action_tlf 0 action_typ 0 vrwrt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(22)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACE_ADD_ACE_ADD_ACTION_INFO_POLICER_CONTROLLER_ID,                                                            
    "action_policer_cntrllr",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  action_info.policer_controller:\r\n"
    "  Select the policer controller (set of parameters to control the actions\r\n"
    "  related to the Policer) results. Range 0-8. Relevant only if the acl action\r\n"
    "  type includes Policing.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl ace_add acl_ndx 0 ace_ndx 0 l4_prt_rng_max_prt 0\r\n"
    "  l4_prt_rng_min_prt 0 l4_prt_rng_is_src_prt 0\r\n"
    "  l4_dst_prt_msk 0 l4_dst_prt 0 l4_src_prt_msk 0\r\n"
    "  l4_src_prt 0 l3_dst_ip_address 0 l3_dst_ip_pref 0\r\n"
    "  l3_src_ip_address 0 l3_src_ip_pref 0\r\n"
    "  l3_prtcl_cod_vld 0 l3_prtcl_cod 0\r\n"
    "  l3_tos_msk 0 l3_tos 0 l2_dst_mac_vld 0\r\n"
    "  l2_dst_mac 0 l2_src_mac_vld 0 l2_src_mac 0\r\n"
    "  l2_s_tag_dei_vld 0 l2_s_tag_dei 0 l2_s_tag_pcp_vld 0\r\n"
    "  l2_s_tag_pcp 0 l2_s_tag_exist_vld 0\r\n"
    "  l2_s_tag_exist 0 l2_s_tag_vid_msk 0 l2_s_tag_vid 0\r\n"
    "  l2_c_tag_dei_vld 0 l2_c_tag_dei 0 l2_c_tag_pcp_vld 0\r\n"
    "  l2_c_tag_pcp 0 l2_c_tag_exist_vld 0\r\n"
    "  l2_c_tag_exist 0 l2_c_tag_vid_msk 0 l2_c_tag_vid 0\r\n"
    "  l2_prt_typ_vld 0 l2_prt_typ 0 l2_thr_typ_vld 0\r\n"
    "  l2_thr_typ 0 general_nlf_vld 0 general_nlf 0\r\n"
    "  general_vsd_vld 0 general_vsd 0 general_lcl_prt_vld 0\r\n"
    "  general_lcl_prt 0 action_cpu_cod 0 action_overwrite_cntrl 0\r\n"
    "  action_cos_prms_DP 0 action_cos_prms_TC 0 action_cos_prms_UP 0\r\n"
    "  action_policer_cntrllr 0 action_policer_pntr 0 action_tlf 0 action_typ 0 vrwrt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(22)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACE_ADD_ACE_ADD_ACTION_INFO_POLICER_POINTER_ID,                                                            
    "action_policer_pntr",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  action_info.policer_pointer:\r\n"
    "  Select the policer to police the packets. Range 0-65535. Relevant only if the\r\n"
    "  acl action type includes Policing.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl ace_add acl_ndx 0 ace_ndx 0 l4_prt_rng_max_prt 0\r\n"
    "  l4_prt_rng_min_prt 0 l4_prt_rng_is_src_prt 0\r\n"
    "  l4_dst_prt_msk 0 l4_dst_prt 0 l4_src_prt_msk 0\r\n"
    "  l4_src_prt 0 l3_dst_ip_address 0 l3_dst_ip_pref 0\r\n"
    "  l3_src_ip_address 0 l3_src_ip_pref 0\r\n"
    "  l3_prtcl_cod_vld 0 l3_prtcl_cod 0\r\n"
    "  l3_tos_msk 0 l3_tos 0 l2_dst_mac_vld 0\r\n"
    "  l2_dst_mac 0 l2_src_mac_vld 0 l2_src_mac 0\r\n"
    "  l2_s_tag_dei_vld 0 l2_s_tag_dei 0 l2_s_tag_pcp_vld 0\r\n"
    "  l2_s_tag_pcp 0 l2_s_tag_exist_vld 0\r\n"
    "  l2_s_tag_exist 0 l2_s_tag_vid_msk 0 l2_s_tag_vid 0\r\n"
    "  l2_c_tag_dei_vld 0 l2_c_tag_dei 0 l2_c_tag_pcp_vld 0\r\n"
    "  l2_c_tag_pcp 0 l2_c_tag_exist_vld 0\r\n"
    "  l2_c_tag_exist 0 l2_c_tag_vid_msk 0 l2_c_tag_vid 0\r\n"
    "  l2_prt_typ_vld 0 l2_prt_typ 0 l2_thr_typ_vld 0\r\n"
    "  l2_thr_typ 0 general_nlf_vld 0 general_nlf 0\r\n"
    "  general_vsd_vld 0 general_vsd 0 general_lcl_prt_vld 0\r\n"
    "  general_lcl_prt 0 action_cpu_cod 0 action_overwrite_cntrl 0\r\n"
    "  action_cos_prms_DP 0 action_cos_prms_TC 0 action_cos_prms_UP 0\r\n"
    "  action_policer_cntrllr 0 action_policer_pntr 0 action_tlf 0 action_typ 0 vrwrt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(22)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACE_ADD_ACE_ADD_ACTION_INFO_OUTLIF_ID,                                                            
    "action_tlf",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  action_info.outlif:\r\n"
    "  OutLIF to overwrite the exist value. The destination of the packet. In 802.1q\r\n"
    "  and 802.1ad this is the system port. Range 0-524287. Relevant only if the acl\r\n"
    "  action type includes OutLIF.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl ace_add acl_ndx 0 ace_ndx 0 l4_prt_rng_max_prt 0\r\n"
    "  l4_prt_rng_min_prt 0 l4_prt_rng_is_src_prt 0\r\n"
    "  l4_dst_prt_msk 0 l4_dst_prt 0 l4_src_prt_msk 0\r\n"
    "  l4_src_prt 0 l3_dst_ip_address 0 l3_dst_ip_pref 0\r\n"
    "  l3_src_ip_address 0 l3_src_ip_pref 0\r\n"
    "  l3_prtcl_cod_vld 0 l3_prtcl_cod 0\r\n"
    "  l3_tos_msk 0 l3_tos 0 l2_dst_mac_vld 0\r\n"
    "  l2_dst_mac 0 l2_src_mac_vld 0 l2_src_mac 0\r\n"
    "  l2_s_tag_dei_vld 0 l2_s_tag_dei 0 l2_s_tag_pcp_vld 0\r\n"
    "  l2_s_tag_pcp 0 l2_s_tag_exist_vld 0\r\n"
    "  l2_s_tag_exist 0 l2_s_tag_vid_msk 0 l2_s_tag_vid 0\r\n"
    "  l2_c_tag_dei_vld 0 l2_c_tag_dei 0 l2_c_tag_pcp_vld 0\r\n"
    "  l2_c_tag_pcp 0 l2_c_tag_exist_vld 0\r\n"
    "  l2_c_tag_exist 0 l2_c_tag_vid_msk 0 l2_c_tag_vid 0\r\n"
    "  l2_prt_typ_vld 0 l2_prt_typ 0 l2_thr_typ_vld 0\r\n"
    "  l2_thr_typ 0 general_nlf_vld 0 general_nlf 0\r\n"
    "  general_vsd_vld 0 general_vsd 0 general_lcl_prt_vld 0\r\n"
    "  general_lcl_prt 0 action_cpu_cod 0 action_overwrite_cntrl 0\r\n"
    "  action_cos_prms_DP 0 action_cos_prms_TC 0 action_cos_prms_UP 0\r\n"
    "  action_policer_cntrllr 0 action_policer_pntr 0 action_tlf 0 action_typ 0 vrwrt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(22)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACE_ADD_ACE_ADD_ACTION_INFO_TYPE_ID,                                                            
    "action_typ",                                                                       
    (PARAM_VAL_RULES *)&TIMNA_ACL_ACTION_TYPE_rule[0],                                            
    (sizeof(TIMNA_ACL_ACTION_TYPE_rule) / sizeof(TIMNA_ACL_ACTION_TYPE_rule[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  action_info.type:\r\n"
    "  The type of the action, indicates which fields to modify. The rest of the\r\n"
    "  fields are considered / ignored according to this type. see\r\n"
    "  TIMNA_ACL_ACTION_TYPE. \r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl ace_add acl_ndx 0 ace_ndx 0 l4_prt_rng_max_prt 0\r\n"
    "  l4_prt_rng_min_prt 0 l4_prt_rng_is_src_prt 0\r\n"
    "  l4_dst_prt_msk 0 l4_dst_prt 0 l4_src_prt_msk 0\r\n"
    "  l4_src_prt 0 l3_dst_ip_address 0 l3_dst_ip_pref 0\r\n"
    "  l3_src_ip_address 0 l3_src_ip_pref 0\r\n"
    "  l3_prtcl_cod_vld 0 l3_prtcl_cod 0\r\n"
    "  l3_tos_msk 0 l3_tos 0 l2_dst_mac_vld 0\r\n"
    "  l2_dst_mac 0 l2_src_mac_vld 0 l2_src_mac 0\r\n"
    "  l2_s_tag_dei_vld 0 l2_s_tag_dei 0 l2_s_tag_pcp_vld 0\r\n"
    "  l2_s_tag_pcp 0 l2_s_tag_exist_vld 0\r\n"
    "  l2_s_tag_exist 0 l2_s_tag_vid_msk 0 l2_s_tag_vid 0\r\n"
    "  l2_c_tag_dei_vld 0 l2_c_tag_dei 0 l2_c_tag_pcp_vld 0\r\n"
    "  l2_c_tag_pcp 0 l2_c_tag_exist_vld 0\r\n"
    "  l2_c_tag_exist 0 l2_c_tag_vid_msk 0 l2_c_tag_vid 0\r\n"
    "  l2_prt_typ_vld 0 l2_prt_typ 0 l2_thr_typ_vld 0\r\n"
    "  l2_thr_typ 0 general_nlf_vld 0 general_nlf 0\r\n"
    "  general_vsd_vld 0 general_vsd 0 general_lcl_prt_vld 0\r\n"
    "  general_lcl_prt 0 action_cpu_cod 0 action_overwrite_cntrl 0\r\n"
    "  action_cos_prms_DP 0 action_cos_prms_TC 0 action_cos_prms_UP 0\r\n"
    "  action_policer_cntrllr 0 action_policer_pntr 0 action_tlf 0 action_typ 0 vrwrt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(22)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACE_ADD_ACE_ADD_OVERWRITE_ID,                                                            
    "vrwrt",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  overwrite:\r\n"
    "  whether to overwrite the exist ACE on the given ace_ndx,\r\n"
    "  if over_write is FALSE and there is already ACE on the given\r\n"
    "  index, then error is returned.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl ace_add acl_ndx 0 ace_ndx 0 l4_prt_rng_max_prt 0\r\n"
    "  l4_prt_rng_min_prt 0 l4_prt_rng_is_src_prt 0\r\n"
    "  l4_dst_prt_msk 0 l4_dst_prt 0 l4_src_prt_msk 0\r\n"
    "  l4_src_prt 0 l3_dst_ip_address 0 l3_dst_ip_pref 0\r\n"
    "  l3_src_ip_address 0 l3_src_ip_pref 0\r\n"
    "  l3_prtcl_cod_vld 0 l3_prtcl_cod 0\r\n"
    "  l3_tos_msk 0 l3_tos 0 l2_dst_mac_vld 0\r\n"
    "  l2_dst_mac 0 l2_src_mac_vld 0 l2_src_mac 0\r\n"
    "  l2_s_tag_dei_vld 0 l2_s_tag_dei 0 l2_s_tag_pcp_vld 0\r\n"
    "  l2_s_tag_pcp 0 l2_s_tag_exist_vld 0\r\n"
    "  l2_s_tag_exist 0 l2_s_tag_vid_msk 0 l2_s_tag_vid 0\r\n"
    "  l2_c_tag_dei_vld 0 l2_c_tag_dei 0 l2_c_tag_pcp_vld 0\r\n"
    "  l2_c_tag_pcp 0 l2_c_tag_exist_vld 0\r\n"
    "  l2_c_tag_exist 0 l2_c_tag_vid_msk 0 l2_c_tag_vid 0\r\n"
    "  l2_prt_typ_vld 0 l2_prt_typ 0 l2_thr_typ_vld 0\r\n"
    "  l2_thr_typ 0 general_nlf_vld 0 general_nlf 0\r\n"
    "  general_vsd_vld 0 general_vsd 0 general_lcl_prt_vld 0\r\n"
    "  general_lcl_prt 0 action_cpu_cod 0 action_overwrite_cntrl 0\r\n"
    "  action_cos_prms_DP 0 action_cos_prms_TC 0 action_cos_prms_UP 0\r\n"
    "  action_policer_cntrllr 0 action_policer_pntr 0 action_tlf 0 action_typ 0 vrwrt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(22)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACE_REMOVE_ACE_REMOVE_ID,                                                            
    "ace_remove",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Remove ACE (Access Control Entry) from the given ACL. \r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl ace_remove acl_ndx 0 ace_ndx 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(23)},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACE_REMOVE_ACE_REMOVE_ACL_NDX_ID,                                                            
    "acl_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  acl_ndx:\r\n"
    "  ACL ID to remove ACE from. Range 0-7.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl ace_remove acl_ndx 0 ace_ndx 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(23)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACE_REMOVE_ACE_REMOVE_ACE_NDX_ID,                                                            
    "ace_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  ace_ndx:\r\n"
    "  The entry index to add the ACE to. The smaller the ace_ndx,\r\n"
    "  the higher will be the priority of the ACE. Range 0-(ACL size-\r\n"
    "  1).\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl ace_remove acl_ndx 0 ace_ndx 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(23)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACE_GET_ACE_GET_ID,                                                            
    "ace_get",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Gets the ACE (Access Control Entry) with the ace_ndx in the given ACL. \r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl ace_get acl_ndx 0 ace_ndx 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(24)},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACE_GET_ACE_GET_ACL_NDX_ID,                                                            
    "acl_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  acl_ndx:\r\n"
    "  ACL ID to get the ACE from. Range 0-7.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl ace_get acl_ndx 0 ace_ndx 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(24)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACE_GET_ACE_GET_ACE_NDX_ID,                                                            
    "ace_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  ace_ndx:\r\n"
    "  The priority of the ACE to get. Range 0- (ACL size - 1).\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl ace_get acl_ndx 0 ace_ndx 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(24)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACE_GET_BLOCK_ACE_GET_BLOCK_ID,                                                            
    "ace_get_block",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Gets a block of ACEs (Access Control Entry) with the ace_ndx in the given ACL.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl ace_get_block acl_ndx 0 blck_rng_ntrs_to_act 0\r\n"
    "  blck_rng_ntrs_to_scn 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(25)},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACE_GET_BLOCK_ACE_GET_BLOCK_ACL_NDX_ID,                                                            
    "acl_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  acl_ndx:\r\n"
    "  ACL ID to get the ACEs from. Range 0-7.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl ace_get_block acl_ndx 0 blck_rng_ntrs_to_act 0\r\n"
    "  blck_rng_ntrs_to_scn 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(25)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACE_GET_BLOCK_ACE_GET_BLOCK_BLOCK_RANGE_ENTRIES_TO_ACT_ID,                                                            
    "blck_rng_ntrs_to_act",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  block_range.entries_to_act:\r\n"
    "  Number of valid ACEs to scan and act on in the ACL\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl ace_get_block acl_ndx 0 blck_rng_ntrs_to_act 0\r\n"
    "  blck_rng_ntrs_to_scn 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(25)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACE_GET_BLOCK_ACE_GET_BLOCK_BLOCK_RANGE_ENTRIES_TO_SCAN_ID,                                                            
    "blck_rng_ntrs_to_scn",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  block_range.entries_to_scan:\r\n"
    "  Number of ACEs to scan in the ACL.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl ace_get_block acl_ndx 0 blck_rng_ntrs_to_act 0\r\n"
    "  blck_rng_ntrs_to_scn 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(25)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACE_GET_BEST_MATCH_ACE_GET_BEST_MATCH_ID,                                                            
    "ace_get_best_match",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Gets the ACE index (Access Control Entry) that best (first) matches the given\r\n"
    "  ACE.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl ace_get_best_match acl_ndx 0 l4_prt_rng_max_prt 0\r\n"
    "  l4_prt_rng_min_prt 0 l4_prt_rng_is_src_prt 0\r\n"
    "  l4_dst_prt_msk 0 l4_dst_prt 0 l4_src_prt_msk 0\r\n"
    "  l4_src_prt 0 l3_dst_ip_address 0 l3_dst_ip_pref 0\r\n"
    "  l3_src_ip_address 0 l3_src_ip_pref 0\r\n"
    "  l3_prtcl_cod_vld 0 l3_prtcl_cod 0\r\n"
    "  l3_tos_msk 0 l3_tos 0 l2_dst_mac_vld 0\r\n"
    "  l2_dst_mac 0 l2_src_mac_vld 0 l2_src_mac 0\r\n"
    "  l2_s_tag_dei_vld 0 l2_s_tag_dei 0 l2_s_tag_pcp_vld 0\r\n"
    "  l2_s_tag_pcp 0 l2_s_tag_exist_vld 0\r\n"
    "  l2_s_tag_exist 0 l2_s_tag_vid_msk 0 l2_s_tag_vid 0\r\n"
    "  l2_c_tag_dei_vld 0 l2_c_tag_dei 0 l2_c_tag_pcp_vld 0\r\n"
    "  l2_c_tag_pcp 0 l2_c_tag_exist_vld 0\r\n"
    "  l2_c_tag_exist 0 l2_c_tag_vid_msk 0 l2_c_tag_vid 0\r\n"
    "  l2_prt_typ_vld 0 l2_prt_typ 0 l2_thr_typ_vld 0\r\n"
    "  l2_thr_typ 0 general_nlf_vld 0 general_nlf 0\r\n"
    "  general_vsd_vld 0 general_vsd 0 general_lcl_prt_vld 0\r\n"
    "  general_lcl_prt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(26)},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACE_GET_BEST_MATCH_ACE_GET_BEST_MATCH_ACL_NDX_ID,                                                            
    "acl_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  acl_ndx:\r\n"
    "  ACL ID to get the ACE from. Range 0-7.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl ace_get_best_match acl_ndx 0 l4_prt_rng_max_prt 0\r\n"
    "  l4_prt_rng_min_prt 0 l4_prt_rng_is_src_prt 0\r\n"
    "  l4_dst_prt_msk 0 l4_dst_prt 0 l4_src_prt_msk 0\r\n"
    "  l4_src_prt 0 l3_dst_ip_address 0 l3_dst_ip_pref 0\r\n"
    "  l3_src_ip_address 0 l3_src_ip_pref 0\r\n"
    "  l3_prtcl_cod_vld 0 l3_prtcl_cod 0\r\n"
    "  l3_tos_msk 0 l3_tos 0 l2_dst_mac_vld 0\r\n"
    "  l2_dst_mac 0 l2_src_mac_vld 0 l2_src_mac 0\r\n"
    "  l2_s_tag_dei_vld 0 l2_s_tag_dei 0 l2_s_tag_pcp_vld 0\r\n"
    "  l2_s_tag_pcp 0 l2_s_tag_exist_vld 0\r\n"
    "  l2_s_tag_exist 0 l2_s_tag_vid_msk 0 l2_s_tag_vid 0\r\n"
    "  l2_c_tag_dei_vld 0 l2_c_tag_dei 0 l2_c_tag_pcp_vld 0\r\n"
    "  l2_c_tag_pcp 0 l2_c_tag_exist_vld 0\r\n"
    "  l2_c_tag_exist 0 l2_c_tag_vid_msk 0 l2_c_tag_vid 0\r\n"
    "  l2_prt_typ_vld 0 l2_prt_typ 0 l2_thr_typ_vld 0\r\n"
    "  l2_thr_typ 0 general_nlf_vld 0 general_nlf 0\r\n"
    "  general_vsd_vld 0 general_vsd 0 general_lcl_prt_vld 0\r\n"
    "  general_lcl_prt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(26)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACE_GET_BEST_MATCH_ACE_GET_BEST_MATCH_ACE_L4_INFO_PORT_RANGE_MAX_PORT_ID,                                                            
    "l4_prt_rng_max_prt",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  ace.l4_info.port_range.max_port:\r\n"
    "  The maximum port in the range. Size: 16 bits. Range 0-65535.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl ace_get_best_match acl_ndx 0 l4_prt_rng_max_prt 0\r\n"
    "  l4_prt_rng_min_prt 0 l4_prt_rng_is_src_prt 0\r\n"
    "  l4_dst_prt_msk 0 l4_dst_prt 0 l4_src_prt_msk 0\r\n"
    "  l4_src_prt 0 l3_dst_ip_address 0 l3_dst_ip_pref 0\r\n"
    "  l3_src_ip_address 0 l3_src_ip_pref 0\r\n"
    "  l3_prtcl_cod_vld 0 l3_prtcl_cod 0\r\n"
    "  l3_tos_msk 0 l3_tos 0 l2_dst_mac_vld 0\r\n"
    "  l2_dst_mac 0 l2_src_mac_vld 0 l2_src_mac 0\r\n"
    "  l2_s_tag_dei_vld 0 l2_s_tag_dei 0 l2_s_tag_pcp_vld 0\r\n"
    "  l2_s_tag_pcp 0 l2_s_tag_exist_vld 0\r\n"
    "  l2_s_tag_exist 0 l2_s_tag_vid_msk 0 l2_s_tag_vid 0\r\n"
    "  l2_c_tag_dei_vld 0 l2_c_tag_dei 0 l2_c_tag_pcp_vld 0\r\n"
    "  l2_c_tag_pcp 0 l2_c_tag_exist_vld 0\r\n"
    "  l2_c_tag_exist 0 l2_c_tag_vid_msk 0 l2_c_tag_vid 0\r\n"
    "  l2_prt_typ_vld 0 l2_prt_typ 0 l2_thr_typ_vld 0\r\n"
    "  l2_thr_typ 0 general_nlf_vld 0 general_nlf 0\r\n"
    "  general_vsd_vld 0 general_vsd 0 general_lcl_prt_vld 0\r\n"
    "  general_lcl_prt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(26)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACE_GET_BEST_MATCH_ACE_GET_BEST_MATCH_ACE_L4_INFO_PORT_RANGE_MIN_PORT_ID,                                                            
    "l4_prt_rng_min_prt",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  ace.l4_info.port_range.min_port:\r\n"
    "  The minimum port in the range. Size: 16 bits. Range 0-65535.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl ace_get_best_match acl_ndx 0 l4_prt_rng_max_prt 0\r\n"
    "  l4_prt_rng_min_prt 0 l4_prt_rng_is_src_prt 0\r\n"
    "  l4_dst_prt_msk 0 l4_dst_prt 0 l4_src_prt_msk 0\r\n"
    "  l4_src_prt 0 l3_dst_ip_address 0 l3_dst_ip_pref 0\r\n"
    "  l3_src_ip_address 0 l3_src_ip_pref 0\r\n"
    "  l3_prtcl_cod_vld 0 l3_prtcl_cod 0\r\n"
    "  l3_tos_msk 0 l3_tos 0 l2_dst_mac_vld 0\r\n"
    "  l2_dst_mac 0 l2_src_mac_vld 0 l2_src_mac 0\r\n"
    "  l2_s_tag_dei_vld 0 l2_s_tag_dei 0 l2_s_tag_pcp_vld 0\r\n"
    "  l2_s_tag_pcp 0 l2_s_tag_exist_vld 0\r\n"
    "  l2_s_tag_exist 0 l2_s_tag_vid_msk 0 l2_s_tag_vid 0\r\n"
    "  l2_c_tag_dei_vld 0 l2_c_tag_dei 0 l2_c_tag_pcp_vld 0\r\n"
    "  l2_c_tag_pcp 0 l2_c_tag_exist_vld 0\r\n"
    "  l2_c_tag_exist 0 l2_c_tag_vid_msk 0 l2_c_tag_vid 0\r\n"
    "  l2_prt_typ_vld 0 l2_prt_typ 0 l2_thr_typ_vld 0\r\n"
    "  l2_thr_typ 0 general_nlf_vld 0 general_nlf 0\r\n"
    "  general_vsd_vld 0 general_vsd 0 general_lcl_prt_vld 0\r\n"
    "  general_lcl_prt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(26)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACE_GET_BEST_MATCH_ACE_GET_BEST_MATCH_ACE_L4_INFO_PORT_RANGE_IS_SRC_PORT_ID,                                                            
    "l4_prt_rng_is_src_prt",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  ace.l4_info.port_range.is_src_port:\r\n"
    "  If TRUE then this define a source port range. Otherwise it defines a\r\n"
    "  destination l4 port range. Size: 10 bits.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl ace_get_best_match acl_ndx 0 l4_prt_rng_max_prt 0\r\n"
    "  l4_prt_rng_min_prt 0 l4_prt_rng_is_src_prt 0\r\n"
    "  l4_dst_prt_msk 0 l4_dst_prt 0 l4_src_prt_msk 0\r\n"
    "  l4_src_prt 0 l3_dst_ip_address 0 l3_dst_ip_pref 0\r\n"
    "  l3_src_ip_address 0 l3_src_ip_pref 0\r\n"
    "  l3_prtcl_cod_vld 0 l3_prtcl_cod 0\r\n"
    "  l3_tos_msk 0 l3_tos 0 l2_dst_mac_vld 0\r\n"
    "  l2_dst_mac 0 l2_src_mac_vld 0 l2_src_mac 0\r\n"
    "  l2_s_tag_dei_vld 0 l2_s_tag_dei 0 l2_s_tag_pcp_vld 0\r\n"
    "  l2_s_tag_pcp 0 l2_s_tag_exist_vld 0\r\n"
    "  l2_s_tag_exist 0 l2_s_tag_vid_msk 0 l2_s_tag_vid 0\r\n"
    "  l2_c_tag_dei_vld 0 l2_c_tag_dei 0 l2_c_tag_pcp_vld 0\r\n"
    "  l2_c_tag_pcp 0 l2_c_tag_exist_vld 0\r\n"
    "  l2_c_tag_exist 0 l2_c_tag_vid_msk 0 l2_c_tag_vid 0\r\n"
    "  l2_prt_typ_vld 0 l2_prt_typ 0 l2_thr_typ_vld 0\r\n"
    "  l2_thr_typ 0 general_nlf_vld 0 general_nlf 0\r\n"
    "  general_vsd_vld 0 general_vsd 0 general_lcl_prt_vld 0\r\n"
    "  general_lcl_prt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(26)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACE_GET_BEST_MATCH_ACE_GET_BEST_MATCH_ACE_L4_INFO_DEST_PORT_MASK_ID,                                                            
    "l4_dst_prt_msk",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  ace.l4_info.dest_port_mask:\r\n"
    "  A mask on the dest_port (bitmap) indicates which bits to consider and which\r\n"
    "  are masked. 0 indicates all bits are masked, 0Xffff indicates to consider all\r\n"
    "  the bits in the key.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl ace_get_best_match acl_ndx 0 l4_prt_rng_max_prt 0\r\n"
    "  l4_prt_rng_min_prt 0 l4_prt_rng_is_src_prt 0\r\n"
    "  l4_dst_prt_msk 0 l4_dst_prt 0 l4_src_prt_msk 0\r\n"
    "  l4_src_prt 0 l3_dst_ip_address 0 l3_dst_ip_pref 0\r\n"
    "  l3_src_ip_address 0 l3_src_ip_pref 0\r\n"
    "  l3_prtcl_cod_vld 0 l3_prtcl_cod 0\r\n"
    "  l3_tos_msk 0 l3_tos 0 l2_dst_mac_vld 0\r\n"
    "  l2_dst_mac 0 l2_src_mac_vld 0 l2_src_mac 0\r\n"
    "  l2_s_tag_dei_vld 0 l2_s_tag_dei 0 l2_s_tag_pcp_vld 0\r\n"
    "  l2_s_tag_pcp 0 l2_s_tag_exist_vld 0\r\n"
    "  l2_s_tag_exist 0 l2_s_tag_vid_msk 0 l2_s_tag_vid 0\r\n"
    "  l2_c_tag_dei_vld 0 l2_c_tag_dei 0 l2_c_tag_pcp_vld 0\r\n"
    "  l2_c_tag_pcp 0 l2_c_tag_exist_vld 0\r\n"
    "  l2_c_tag_exist 0 l2_c_tag_vid_msk 0 l2_c_tag_vid 0\r\n"
    "  l2_prt_typ_vld 0 l2_prt_typ 0 l2_thr_typ_vld 0\r\n"
    "  l2_thr_typ 0 general_nlf_vld 0 general_nlf 0\r\n"
    "  general_vsd_vld 0 general_vsd 0 general_lcl_prt_vld 0\r\n"
    "  general_lcl_prt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(26)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACE_GET_BEST_MATCH_ACE_GET_BEST_MATCH_ACE_L4_INFO_DEST_PORT_ID,                                                            
    "l4_dst_prt",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  ace.l4_info.dest_port:\r\n"
    "  Layer 4 Destination Port, second 16b after IPv4 header.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl ace_get_best_match acl_ndx 0 l4_prt_rng_max_prt 0\r\n"
    "  l4_prt_rng_min_prt 0 l4_prt_rng_is_src_prt 0\r\n"
    "  l4_dst_prt_msk 0 l4_dst_prt 0 l4_src_prt_msk 0\r\n"
    "  l4_src_prt 0 l3_dst_ip_address 0 l3_dst_ip_pref 0\r\n"
    "  l3_src_ip_address 0 l3_src_ip_pref 0\r\n"
    "  l3_prtcl_cod_vld 0 l3_prtcl_cod 0\r\n"
    "  l3_tos_msk 0 l3_tos 0 l2_dst_mac_vld 0\r\n"
    "  l2_dst_mac 0 l2_src_mac_vld 0 l2_src_mac 0\r\n"
    "  l2_s_tag_dei_vld 0 l2_s_tag_dei 0 l2_s_tag_pcp_vld 0\r\n"
    "  l2_s_tag_pcp 0 l2_s_tag_exist_vld 0\r\n"
    "  l2_s_tag_exist 0 l2_s_tag_vid_msk 0 l2_s_tag_vid 0\r\n"
    "  l2_c_tag_dei_vld 0 l2_c_tag_dei 0 l2_c_tag_pcp_vld 0\r\n"
    "  l2_c_tag_pcp 0 l2_c_tag_exist_vld 0\r\n"
    "  l2_c_tag_exist 0 l2_c_tag_vid_msk 0 l2_c_tag_vid 0\r\n"
    "  l2_prt_typ_vld 0 l2_prt_typ 0 l2_thr_typ_vld 0\r\n"
    "  l2_thr_typ 0 general_nlf_vld 0 general_nlf 0\r\n"
    "  general_vsd_vld 0 general_vsd 0 general_lcl_prt_vld 0\r\n"
    "  general_lcl_prt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(26)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACE_GET_BEST_MATCH_ACE_GET_BEST_MATCH_ACE_L4_INFO_SRC_PORT_MASK_ID,                                                            
    "l4_src_prt_msk",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  ace.l4_info.src_port_mask:\r\n"
    "  A mask on the src_port (bitmap) indicates which bits to consider and which\r\n"
    "  are masked. 0 indicates all bits are masked, 0Xffff indicates to consider all\r\n"
    "  the bits in the key.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl ace_get_best_match acl_ndx 0 l4_prt_rng_max_prt 0\r\n"
    "  l4_prt_rng_min_prt 0 l4_prt_rng_is_src_prt 0\r\n"
    "  l4_dst_prt_msk 0 l4_dst_prt 0 l4_src_prt_msk 0\r\n"
    "  l4_src_prt 0 l3_dst_ip_address 0 l3_dst_ip_pref 0\r\n"
    "  l3_src_ip_address 0 l3_src_ip_pref 0\r\n"
    "  l3_prtcl_cod_vld 0 l3_prtcl_cod 0\r\n"
    "  l3_tos_msk 0 l3_tos 0 l2_dst_mac_vld 0\r\n"
    "  l2_dst_mac 0 l2_src_mac_vld 0 l2_src_mac 0\r\n"
    "  l2_s_tag_dei_vld 0 l2_s_tag_dei 0 l2_s_tag_pcp_vld 0\r\n"
    "  l2_s_tag_pcp 0 l2_s_tag_exist_vld 0\r\n"
    "  l2_s_tag_exist 0 l2_s_tag_vid_msk 0 l2_s_tag_vid 0\r\n"
    "  l2_c_tag_dei_vld 0 l2_c_tag_dei 0 l2_c_tag_pcp_vld 0\r\n"
    "  l2_c_tag_pcp 0 l2_c_tag_exist_vld 0\r\n"
    "  l2_c_tag_exist 0 l2_c_tag_vid_msk 0 l2_c_tag_vid 0\r\n"
    "  l2_prt_typ_vld 0 l2_prt_typ 0 l2_thr_typ_vld 0\r\n"
    "  l2_thr_typ 0 general_nlf_vld 0 general_nlf 0\r\n"
    "  general_vsd_vld 0 general_vsd 0 general_lcl_prt_vld 0\r\n"
    "  general_lcl_prt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(26)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACE_GET_BEST_MATCH_ACE_GET_BEST_MATCH_ACE_L4_INFO_SRC_PORT_ID,                                                            
    "l4_src_prt",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  ace.l4_info.src_port:\r\n"
    "  Layer 4 Source Port, first 16b after IPv4 header.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl ace_get_best_match acl_ndx 0 l4_prt_rng_max_prt 0\r\n"
    "  l4_prt_rng_min_prt 0 l4_prt_rng_is_src_prt 0\r\n"
    "  l4_dst_prt_msk 0 l4_dst_prt 0 l4_src_prt_msk 0\r\n"
    "  l4_src_prt 0 l3_dst_ip_address 0 l3_dst_ip_pref 0\r\n"
    "  l3_src_ip_address 0 l3_src_ip_pref 0\r\n"
    "  l3_prtcl_cod_vld 0 l3_prtcl_cod 0\r\n"
    "  l3_tos_msk 0 l3_tos 0 l2_dst_mac_vld 0\r\n"
    "  l2_dst_mac 0 l2_src_mac_vld 0 l2_src_mac 0\r\n"
    "  l2_s_tag_dei_vld 0 l2_s_tag_dei 0 l2_s_tag_pcp_vld 0\r\n"
    "  l2_s_tag_pcp 0 l2_s_tag_exist_vld 0\r\n"
    "  l2_s_tag_exist 0 l2_s_tag_vid_msk 0 l2_s_tag_vid 0\r\n"
    "  l2_c_tag_dei_vld 0 l2_c_tag_dei 0 l2_c_tag_pcp_vld 0\r\n"
    "  l2_c_tag_pcp 0 l2_c_tag_exist_vld 0\r\n"
    "  l2_c_tag_exist 0 l2_c_tag_vid_msk 0 l2_c_tag_vid 0\r\n"
    "  l2_prt_typ_vld 0 l2_prt_typ 0 l2_thr_typ_vld 0\r\n"
    "  l2_thr_typ 0 general_nlf_vld 0 general_nlf 0\r\n"
    "  general_vsd_vld 0 general_vsd 0 general_lcl_prt_vld 0\r\n"
    "  general_lcl_prt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(26)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACE_GET_BEST_MATCH_ACE_GET_BEST_MATCH_ACE_L3_INFO_DEST_IP_ADD_ID,                                                            
    "l3_dst_ip_address",                                                                       
    (PARAM_VAL_RULES *)&Subnet_ip_rule[0],                                            
    (sizeof(Subnet_ip_rule) / sizeof(Subnet_ip_rule[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  ace.l3_info.dest_ip.address:\r\n"
    "  Ipv4 address.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl ace_get_best_match acl_ndx 0 l4_prt_rng_max_prt 0\r\n"
    "  l4_prt_rng_min_prt 0 l4_prt_rng_is_src_prt 0\r\n"
    "  l4_dst_prt_msk 0 l4_dst_prt 0 l4_src_prt_msk 0\r\n"
    "  l4_src_prt 0 l3_dst_ip_address 0 l3_dst_ip_pref 0\r\n"
    "  l3_src_ip_address 0 l3_src_ip_pref 0\r\n"
    "  l3_prtcl_cod_vld 0 l3_prtcl_cod 0\r\n"
    "  l3_tos_msk 0 l3_tos 0 l2_dst_mac_vld 0\r\n"
    "  l2_dst_mac 0 l2_src_mac_vld 0 l2_src_mac 0\r\n"
    "  l2_s_tag_dei_vld 0 l2_s_tag_dei 0 l2_s_tag_pcp_vld 0\r\n"
    "  l2_s_tag_pcp 0 l2_s_tag_exist_vld 0\r\n"
    "  l2_s_tag_exist 0 l2_s_tag_vid_msk 0 l2_s_tag_vid 0\r\n"
    "  l2_c_tag_dei_vld 0 l2_c_tag_dei 0 l2_c_tag_pcp_vld 0\r\n"
    "  l2_c_tag_pcp 0 l2_c_tag_exist_vld 0\r\n"
    "  l2_c_tag_exist 0 l2_c_tag_vid_msk 0 l2_c_tag_vid 0\r\n"
    "  l2_prt_typ_vld 0 l2_prt_typ 0 l2_thr_typ_vld 0\r\n"
    "  l2_thr_typ 0 general_nlf_vld 0 general_nlf 0\r\n"
    "  general_vsd_vld 0 general_vsd 0 general_lcl_prt_vld 0\r\n"
    "  general_lcl_prt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(26)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACE_GET_BEST_MATCH_ACE_GET_BEST_MATCH_ACE_L3_INFO_DEST_IP_PREFFIX_ID,                                                            
    "l3_dst_ip_pref",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  ace.l3_info.dest_ip.pref:\r\n"
    "  how many bits to consider from the ip, starting from the msb.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl ace_get_best_match acl_ndx 0 l4_prt_rng_max_prt 0\r\n"
    "  l4_prt_rng_min_prt 0 l4_prt_rng_is_src_prt 0\r\n"
    "  l4_dst_prt_msk 0 l4_dst_prt 0 l4_src_prt_msk 0\r\n"
    "  l4_src_prt 0 l3_dst_ip_address 0 l3_dst_ip_pref 0\r\n"
    "  l3_src_ip_address 0 l3_src_ip_pref 0\r\n"
    "  l3_prtcl_cod_vld 0 l3_prtcl_cod 0\r\n"
    "  l3_tos_msk 0 l3_tos 0 l2_dst_mac_vld 0\r\n"
    "  l2_dst_mac 0 l2_src_mac_vld 0 l2_src_mac 0\r\n"
    "  l2_s_tag_dei_vld 0 l2_s_tag_dei 0 l2_s_tag_pcp_vld 0\r\n"
    "  l2_s_tag_pcp 0 l2_s_tag_exist_vld 0\r\n"
    "  l2_s_tag_exist 0 l2_s_tag_vid_msk 0 l2_s_tag_vid 0\r\n"
    "  l2_c_tag_dei_vld 0 l2_c_tag_dei 0 l2_c_tag_pcp_vld 0\r\n"
    "  l2_c_tag_pcp 0 l2_c_tag_exist_vld 0\r\n"
    "  l2_c_tag_exist 0 l2_c_tag_vid_msk 0 l2_c_tag_vid 0\r\n"
    "  l2_prt_typ_vld 0 l2_prt_typ 0 l2_thr_typ_vld 0\r\n"
    "  l2_thr_typ 0 general_nlf_vld 0 general_nlf 0\r\n"
    "  general_vsd_vld 0 general_vsd 0 general_lcl_prt_vld 0\r\n"
    "  general_lcl_prt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(26)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACE_GET_BEST_MATCH_ACE_GET_BEST_MATCH_ACE_L3_INFO_SRC_IP_ADD_ID,                                                            
    "l3_src_ip_address",                                                                       
    (PARAM_VAL_RULES *)&Subnet_ip_rule[0],                                            
    (sizeof(Subnet_ip_rule) / sizeof(Subnet_ip_rule[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  ace.l3_info.src_ip.DP:\r\n"
    "  IP address.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl ace_get_best_match acl_ndx 0 l4_prt_rng_max_prt 0\r\n"
    "  l4_prt_rng_min_prt 0 l4_prt_rng_is_src_prt 0\r\n"
    "  l4_dst_prt_msk 0 l4_dst_prt 0 l4_src_prt_msk 0\r\n"
    "  l4_src_prt 0 l3_dst_ip_address 0 l3_dst_ip_pref 0\r\n"
    "  l3_src_ip_address 0 l3_src_ip_pref 0\r\n"
    "  l3_prtcl_cod_vld 0 l3_prtcl_cod 0\r\n"
    "  l3_tos_msk 0 l3_tos 0 l2_dst_mac_vld 0\r\n"
    "  l2_dst_mac 0 l2_src_mac_vld 0 l2_src_mac 0\r\n"
    "  l2_s_tag_dei_vld 0 l2_s_tag_dei 0 l2_s_tag_pcp_vld 0\r\n"
    "  l2_s_tag_pcp 0 l2_s_tag_exist_vld 0\r\n"
    "  l2_s_tag_exist 0 l2_s_tag_vid_msk 0 l2_s_tag_vid 0\r\n"
    "  l2_c_tag_dei_vld 0 l2_c_tag_dei 0 l2_c_tag_pcp_vld 0\r\n"
    "  l2_c_tag_pcp 0 l2_c_tag_exist_vld 0\r\n"
    "  l2_c_tag_exist 0 l2_c_tag_vid_msk 0 l2_c_tag_vid 0\r\n"
    "  l2_prt_typ_vld 0 l2_prt_typ 0 l2_thr_typ_vld 0\r\n"
    "  l2_thr_typ 0 general_nlf_vld 0 general_nlf 0\r\n"
    "  general_vsd_vld 0 general_vsd 0 general_lcl_prt_vld 0\r\n"
    "  general_lcl_prt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(26)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACE_GET_BEST_MATCH_ACE_GET_BEST_MATCH_ACE_L3_INFO_SRC_IP_PREFFIX_ID,                                                            
    "l3_src_ip_pref",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  ace.l3_info.src_ip.pref:\r\n"
    "  how many bits to consider from the ip, starting from the msb.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl ace_get_best_match acl_ndx 0 l4_prt_rng_max_prt 0\r\n"
    "  l4_prt_rng_min_prt 0 l4_prt_rng_is_src_prt 0\r\n"
    "  l4_dst_prt_msk 0 l4_dst_prt 0 l4_src_prt_msk 0\r\n"
    "  l4_src_prt 0 l3_dst_ip_address 0 l3_dst_ip_pref 0\r\n"
    "  l3_src_ip_address 0 l3_src_ip_pref 0\r\n"
    "  l3_prtcl_cod_vld 0 l3_prtcl_cod 0\r\n"
    "  l3_tos_msk 0 l3_tos 0 l2_dst_mac_vld 0\r\n"
    "  l2_dst_mac 0 l2_src_mac_vld 0 l2_src_mac 0\r\n"
    "  l2_s_tag_dei_vld 0 l2_s_tag_dei 0 l2_s_tag_pcp_vld 0\r\n"
    "  l2_s_tag_pcp 0 l2_s_tag_exist_vld 0\r\n"
    "  l2_s_tag_exist 0 l2_s_tag_vid_msk 0 l2_s_tag_vid 0\r\n"
    "  l2_c_tag_dei_vld 0 l2_c_tag_dei 0 l2_c_tag_pcp_vld 0\r\n"
    "  l2_c_tag_pcp 0 l2_c_tag_exist_vld 0\r\n"
    "  l2_c_tag_exist 0 l2_c_tag_vid_msk 0 l2_c_tag_vid 0\r\n"
    "  l2_prt_typ_vld 0 l2_prt_typ 0 l2_thr_typ_vld 0\r\n"
    "  l2_thr_typ 0 general_nlf_vld 0 general_nlf 0\r\n"
    "  general_vsd_vld 0 general_vsd 0 general_lcl_prt_vld 0\r\n"
    "  general_lcl_prt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(26)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACE_GET_BEST_MATCH_ACE_GET_BEST_MATCH_ACE_L3_INFO_PROTOCOL_CODE_VALID_ID,                                                            
    "l3_prtcl_cod_vld",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  ace.l3_info.protocol_code_valid:\r\n"
    "  If TRUE then protocol code considered as part of the ACE. Otherwise it masked\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl ace_get_best_match acl_ndx 0 l4_prt_rng_max_prt 0\r\n"
    "  l4_prt_rng_min_prt 0 l4_prt_rng_is_src_prt 0\r\n"
    "  l4_dst_prt_msk 0 l4_dst_prt 0 l4_src_prt_msk 0\r\n"
    "  l4_src_prt 0 l3_dst_ip_address 0 l3_dst_ip_pref 0\r\n"
    "  l3_src_ip_address 0 l3_src_ip_pref 0\r\n"
    "  l3_prtcl_cod_vld 0 l3_prtcl_cod 0\r\n"
    "  l3_tos_msk 0 l3_tos 0 l2_dst_mac_vld 0\r\n"
    "  l2_dst_mac 0 l2_src_mac_vld 0 l2_src_mac 0\r\n"
    "  l2_s_tag_dei_vld 0 l2_s_tag_dei 0 l2_s_tag_pcp_vld 0\r\n"
    "  l2_s_tag_pcp 0 l2_s_tag_exist_vld 0\r\n"
    "  l2_s_tag_exist 0 l2_s_tag_vid_msk 0 l2_s_tag_vid 0\r\n"
    "  l2_c_tag_dei_vld 0 l2_c_tag_dei 0 l2_c_tag_pcp_vld 0\r\n"
    "  l2_c_tag_pcp 0 l2_c_tag_exist_vld 0\r\n"
    "  l2_c_tag_exist 0 l2_c_tag_vid_msk 0 l2_c_tag_vid 0\r\n"
    "  l2_prt_typ_vld 0 l2_prt_typ 0 l2_thr_typ_vld 0\r\n"
    "  l2_thr_typ 0 general_nlf_vld 0 general_nlf 0\r\n"
    "  general_vsd_vld 0 general_vsd 0 general_lcl_prt_vld 0\r\n"
    "  general_lcl_prt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(26)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACE_GET_BEST_MATCH_ACE_GET_BEST_MATCH_ACE_L3_INFO_PROTOCOL_CODE_ID,                                                            
    "l3_prtcl_cod",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  ace.l3_info.protocol_code:\r\n"
    "  The Protocol field from the Ipv4 header. Size: 8 bits. Range 0-255.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl ace_get_best_match acl_ndx 0 l4_prt_rng_max_prt 0\r\n"
    "  l4_prt_rng_min_prt 0 l4_prt_rng_is_src_prt 0\r\n"
    "  l4_dst_prt_msk 0 l4_dst_prt 0 l4_src_prt_msk 0\r\n"
    "  l4_src_prt 0 l3_dst_ip_address 0 l3_dst_ip_pref 0\r\n"
    "  l3_src_ip_address 0 l3_src_ip_pref 0\r\n"
    "  l3_prtcl_cod_vld 0 l3_prtcl_cod 0\r\n"
    "  l3_tos_msk 0 l3_tos 0 l2_dst_mac_vld 0\r\n"
    "  l2_dst_mac 0 l2_src_mac_vld 0 l2_src_mac 0\r\n"
    "  l2_s_tag_dei_vld 0 l2_s_tag_dei 0 l2_s_tag_pcp_vld 0\r\n"
    "  l2_s_tag_pcp 0 l2_s_tag_exist_vld 0\r\n"
    "  l2_s_tag_exist 0 l2_s_tag_vid_msk 0 l2_s_tag_vid 0\r\n"
    "  l2_c_tag_dei_vld 0 l2_c_tag_dei 0 l2_c_tag_pcp_vld 0\r\n"
    "  l2_c_tag_pcp 0 l2_c_tag_exist_vld 0\r\n"
    "  l2_c_tag_exist 0 l2_c_tag_vid_msk 0 l2_c_tag_vid 0\r\n"
    "  l2_prt_typ_vld 0 l2_prt_typ 0 l2_thr_typ_vld 0\r\n"
    "  l2_thr_typ 0 general_nlf_vld 0 general_nlf 0\r\n"
    "  general_vsd_vld 0 general_vsd 0 general_lcl_prt_vld 0\r\n"
    "  general_lcl_prt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(26)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACE_GET_BEST_MATCH_ACE_GET_BEST_MATCH_ACE_L3_INFO_TOS_MASK_ID,                                                            
    "l3_tos_msk",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  ace.l3_info.tos_mask:\r\n"
    "  A mask on the tos (bitmap) indicates which bits to consider and which are\r\n"
    "  masked. 0 indicates all bits are masked, 0Xff indicates to consider all the\r\n"
    "  bits in the key.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl ace_get_best_match acl_ndx 0 l4_prt_rng_max_prt 0\r\n"
    "  l4_prt_rng_min_prt 0 l4_prt_rng_is_src_prt 0\r\n"
    "  l4_dst_prt_msk 0 l4_dst_prt 0 l4_src_prt_msk 0\r\n"
    "  l4_src_prt 0 l3_dst_ip_address 0 l3_dst_ip_pref 0\r\n"
    "  l3_src_ip_address 0 l3_src_ip_pref 0\r\n"
    "  l3_prtcl_cod_vld 0 l3_prtcl_cod 0\r\n"
    "  l3_tos_msk 0 l3_tos 0 l2_dst_mac_vld 0\r\n"
    "  l2_dst_mac 0 l2_src_mac_vld 0 l2_src_mac 0\r\n"
    "  l2_s_tag_dei_vld 0 l2_s_tag_dei 0 l2_s_tag_pcp_vld 0\r\n"
    "  l2_s_tag_pcp 0 l2_s_tag_exist_vld 0\r\n"
    "  l2_s_tag_exist 0 l2_s_tag_vid_msk 0 l2_s_tag_vid 0\r\n"
    "  l2_c_tag_dei_vld 0 l2_c_tag_dei 0 l2_c_tag_pcp_vld 0\r\n"
    "  l2_c_tag_pcp 0 l2_c_tag_exist_vld 0\r\n"
    "  l2_c_tag_exist 0 l2_c_tag_vid_msk 0 l2_c_tag_vid 0\r\n"
    "  l2_prt_typ_vld 0 l2_prt_typ 0 l2_thr_typ_vld 0\r\n"
    "  l2_thr_typ 0 general_nlf_vld 0 general_nlf 0\r\n"
    "  general_vsd_vld 0 general_vsd 0 general_lcl_prt_vld 0\r\n"
    "  general_lcl_prt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(26)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACE_GET_BEST_MATCH_ACE_GET_BEST_MATCH_ACE_L3_INFO_TOS_ID,                                                            
    "l3_tos",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  ace.l3_info.tos:\r\n"
    "  The TOS field from the Ipv4 header. Size: 8 bits. Range 0-255.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl ace_get_best_match acl_ndx 0 l4_prt_rng_max_prt 0\r\n"
    "  l4_prt_rng_min_prt 0 l4_prt_rng_is_src_prt 0\r\n"
    "  l4_dst_prt_msk 0 l4_dst_prt 0 l4_src_prt_msk 0\r\n"
    "  l4_src_prt 0 l3_dst_ip_address 0 l3_dst_ip_pref 0\r\n"
    "  l3_src_ip_address 0 l3_src_ip_pref 0\r\n"
    "  l3_prtcl_cod_vld 0 l3_prtcl_cod 0\r\n"
    "  l3_tos_msk 0 l3_tos 0 l2_dst_mac_vld 0\r\n"
    "  l2_dst_mac 0 l2_src_mac_vld 0 l2_src_mac 0\r\n"
    "  l2_s_tag_dei_vld 0 l2_s_tag_dei 0 l2_s_tag_pcp_vld 0\r\n"
    "  l2_s_tag_pcp 0 l2_s_tag_exist_vld 0\r\n"
    "  l2_s_tag_exist 0 l2_s_tag_vid_msk 0 l2_s_tag_vid 0\r\n"
    "  l2_c_tag_dei_vld 0 l2_c_tag_dei 0 l2_c_tag_pcp_vld 0\r\n"
    "  l2_c_tag_pcp 0 l2_c_tag_exist_vld 0\r\n"
    "  l2_c_tag_exist 0 l2_c_tag_vid_msk 0 l2_c_tag_vid 0\r\n"
    "  l2_prt_typ_vld 0 l2_prt_typ 0 l2_thr_typ_vld 0\r\n"
    "  l2_thr_typ 0 general_nlf_vld 0 general_nlf 0\r\n"
    "  general_vsd_vld 0 general_vsd 0 general_lcl_prt_vld 0\r\n"
    "  general_lcl_prt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(26)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACE_GET_BEST_MATCH_ACE_GET_BEST_MATCH_ACE_L2_INFO_DEST_MAC_VALID_ID,                                                            
    "l2_dst_mac_vld",                                                                       
    (PARAM_VAL_RULES *)&Timna_mac_addr_vals[0],                                            
    (sizeof(Timna_mac_addr_vals) / sizeof(Timna_mac_addr_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  ace.l2_info.dest_mac_valid:\r\n"
    "  If TRUE then dest_mac considered as part of the ACE. Otherwise it masked. \r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl ace_get_best_match acl_ndx 0 l4_prt_rng_max_prt 0\r\n"
    "  l4_prt_rng_min_prt 0 l4_prt_rng_is_src_prt 0\r\n"
    "  l4_dst_prt_msk 0 l4_dst_prt 0 l4_src_prt_msk 0\r\n"
    "  l4_src_prt 0 l3_dst_ip_address 0 l3_dst_ip_pref 0\r\n"
    "  l3_src_ip_address 0 l3_src_ip_pref 0\r\n"
    "  l3_prtcl_cod_vld 0 l3_prtcl_cod 0\r\n"
    "  l3_tos_msk 0 l3_tos 0 l2_dst_mac_vld 0\r\n"
    "  l2_dst_mac 0 l2_src_mac_vld 0 l2_src_mac 0\r\n"
    "  l2_s_tag_dei_vld 0 l2_s_tag_dei 0 l2_s_tag_pcp_vld 0\r\n"
    "  l2_s_tag_pcp 0 l2_s_tag_exist_vld 0\r\n"
    "  l2_s_tag_exist 0 l2_s_tag_vid_msk 0 l2_s_tag_vid 0\r\n"
    "  l2_c_tag_dei_vld 0 l2_c_tag_dei 0 l2_c_tag_pcp_vld 0\r\n"
    "  l2_c_tag_pcp 0 l2_c_tag_exist_vld 0\r\n"
    "  l2_c_tag_exist 0 l2_c_tag_vid_msk 0 l2_c_tag_vid 0\r\n"
    "  l2_prt_typ_vld 0 l2_prt_typ 0 l2_thr_typ_vld 0\r\n"
    "  l2_thr_typ 0 general_nlf_vld 0 general_nlf 0\r\n"
    "  general_vsd_vld 0 general_vsd 0 general_lcl_prt_vld 0\r\n"
    "  general_lcl_prt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(26)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACE_GET_BEST_MATCH_ACE_GET_BEST_MATCH_ACE_L2_INFO_DEST_MAC_ID,                                                            
    "l2_dst_mac",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  ace.l2_info.dest_mac:\r\n"
    "  Destination MAC\r\n"
    "  Address. Size: 48 bits.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl ace_get_best_match acl_ndx 0 l4_prt_rng_max_prt 0\r\n"
    "  l4_prt_rng_min_prt 0 l4_prt_rng_is_src_prt 0\r\n"
    "  l4_dst_prt_msk 0 l4_dst_prt 0 l4_src_prt_msk 0\r\n"
    "  l4_src_prt 0 l3_dst_ip_address 0 l3_dst_ip_pref 0\r\n"
    "  l3_src_ip_address 0 l3_src_ip_pref 0\r\n"
    "  l3_prtcl_cod_vld 0 l3_prtcl_cod 0\r\n"
    "  l3_tos_msk 0 l3_tos 0 l2_dst_mac_vld 0\r\n"
    "  l2_dst_mac 0 l2_src_mac_vld 0 l2_src_mac 0\r\n"
    "  l2_s_tag_dei_vld 0 l2_s_tag_dei 0 l2_s_tag_pcp_vld 0\r\n"
    "  l2_s_tag_pcp 0 l2_s_tag_exist_vld 0\r\n"
    "  l2_s_tag_exist 0 l2_s_tag_vid_msk 0 l2_s_tag_vid 0\r\n"
    "  l2_c_tag_dei_vld 0 l2_c_tag_dei 0 l2_c_tag_pcp_vld 0\r\n"
    "  l2_c_tag_pcp 0 l2_c_tag_exist_vld 0\r\n"
    "  l2_c_tag_exist 0 l2_c_tag_vid_msk 0 l2_c_tag_vid 0\r\n"
    "  l2_prt_typ_vld 0 l2_prt_typ 0 l2_thr_typ_vld 0\r\n"
    "  l2_thr_typ 0 general_nlf_vld 0 general_nlf 0\r\n"
    "  general_vsd_vld 0 general_vsd 0 general_lcl_prt_vld 0\r\n"
    "  general_lcl_prt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(26)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACE_GET_BEST_MATCH_ACE_GET_BEST_MATCH_ACE_L2_INFO_SRC_MAC_VALID_ID,                                                            
    "l2_src_mac_vld",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  ace.l2_info.src_mac_valid:\r\n"
    "  If TRUE then src_mac considered as part of the ACE. Otherwise it masked. \r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl ace_get_best_match acl_ndx 0 l4_prt_rng_max_prt 0\r\n"
    "  l4_prt_rng_min_prt 0 l4_prt_rng_is_src_prt 0\r\n"
    "  l4_dst_prt_msk 0 l4_dst_prt 0 l4_src_prt_msk 0\r\n"
    "  l4_src_prt 0 l3_dst_ip_address 0 l3_dst_ip_pref 0\r\n"
    "  l3_src_ip_address 0 l3_src_ip_pref 0\r\n"
    "  l3_prtcl_cod_vld 0 l3_prtcl_cod 0\r\n"
    "  l3_tos_msk 0 l3_tos 0 l2_dst_mac_vld 0\r\n"
    "  l2_dst_mac 0 l2_src_mac_vld 0 l2_src_mac 0\r\n"
    "  l2_s_tag_dei_vld 0 l2_s_tag_dei 0 l2_s_tag_pcp_vld 0\r\n"
    "  l2_s_tag_pcp 0 l2_s_tag_exist_vld 0\r\n"
    "  l2_s_tag_exist 0 l2_s_tag_vid_msk 0 l2_s_tag_vid 0\r\n"
    "  l2_c_tag_dei_vld 0 l2_c_tag_dei 0 l2_c_tag_pcp_vld 0\r\n"
    "  l2_c_tag_pcp 0 l2_c_tag_exist_vld 0\r\n"
    "  l2_c_tag_exist 0 l2_c_tag_vid_msk 0 l2_c_tag_vid 0\r\n"
    "  l2_prt_typ_vld 0 l2_prt_typ 0 l2_thr_typ_vld 0\r\n"
    "  l2_thr_typ 0 general_nlf_vld 0 general_nlf 0\r\n"
    "  general_vsd_vld 0 general_vsd 0 general_lcl_prt_vld 0\r\n"
    "  general_lcl_prt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(26)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACE_GET_BEST_MATCH_ACE_GET_BEST_MATCH_ACE_L2_INFO_SRC_MAC_ID,                                                            
    "l2_src_mac",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  ace.l2_info.src_mac:\r\n"
    "  Source MAC Address. Size: 48 bits.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl ace_get_best_match acl_ndx 0 l4_prt_rng_max_prt 0\r\n"
    "  l4_prt_rng_min_prt 0 l4_prt_rng_is_src_prt 0\r\n"
    "  l4_dst_prt_msk 0 l4_dst_prt 0 l4_src_prt_msk 0\r\n"
    "  l4_src_prt 0 l3_dst_ip_address 0 l3_dst_ip_pref 0\r\n"
    "  l3_src_ip_address 0 l3_src_ip_pref 0\r\n"
    "  l3_prtcl_cod_vld 0 l3_prtcl_cod 0\r\n"
    "  l3_tos_msk 0 l3_tos 0 l2_dst_mac_vld 0\r\n"
    "  l2_dst_mac 0 l2_src_mac_vld 0 l2_src_mac 0\r\n"
    "  l2_s_tag_dei_vld 0 l2_s_tag_dei 0 l2_s_tag_pcp_vld 0\r\n"
    "  l2_s_tag_pcp 0 l2_s_tag_exist_vld 0\r\n"
    "  l2_s_tag_exist 0 l2_s_tag_vid_msk 0 l2_s_tag_vid 0\r\n"
    "  l2_c_tag_dei_vld 0 l2_c_tag_dei 0 l2_c_tag_pcp_vld 0\r\n"
    "  l2_c_tag_pcp 0 l2_c_tag_exist_vld 0\r\n"
    "  l2_c_tag_exist 0 l2_c_tag_vid_msk 0 l2_c_tag_vid 0\r\n"
    "  l2_prt_typ_vld 0 l2_prt_typ 0 l2_thr_typ_vld 0\r\n"
    "  l2_thr_typ 0 general_nlf_vld 0 general_nlf 0\r\n"
    "  general_vsd_vld 0 general_vsd 0 general_lcl_prt_vld 0\r\n"
    "  general_lcl_prt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(26)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACE_GET_BEST_MATCH_ACE_GET_BEST_MATCH_ACE_L2_INFO_S_TAG_DEI_VALID_ID,                                                            
    "l2_s_tag_dei_vld",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  ace.l2_info.s_tag.dei_valid:\r\n"
    "  If TRUE then dei considered as part of the ACE. Otherwise it masked. \r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl ace_get_best_match acl_ndx 0 l4_prt_rng_max_prt 0\r\n"
    "  l4_prt_rng_min_prt 0 l4_prt_rng_is_src_prt 0\r\n"
    "  l4_dst_prt_msk 0 l4_dst_prt 0 l4_src_prt_msk 0\r\n"
    "  l4_src_prt 0 l3_dst_ip_address 0 l3_dst_ip_pref 0\r\n"
    "  l3_src_ip_address 0 l3_src_ip_pref 0\r\n"
    "  l3_prtcl_cod_vld 0 l3_prtcl_cod 0\r\n"
    "  l3_tos_msk 0 l3_tos 0 l2_dst_mac_vld 0\r\n"
    "  l2_dst_mac 0 l2_src_mac_vld 0 l2_src_mac 0\r\n"
    "  l2_s_tag_dei_vld 0 l2_s_tag_dei 0 l2_s_tag_pcp_vld 0\r\n"
    "  l2_s_tag_pcp 0 l2_s_tag_exist_vld 0\r\n"
    "  l2_s_tag_exist 0 l2_s_tag_vid_msk 0 l2_s_tag_vid 0\r\n"
    "  l2_c_tag_dei_vld 0 l2_c_tag_dei 0 l2_c_tag_pcp_vld 0\r\n"
    "  l2_c_tag_pcp 0 l2_c_tag_exist_vld 0\r\n"
    "  l2_c_tag_exist 0 l2_c_tag_vid_msk 0 l2_c_tag_vid 0\r\n"
    "  l2_prt_typ_vld 0 l2_prt_typ 0 l2_thr_typ_vld 0\r\n"
    "  l2_thr_typ 0 general_nlf_vld 0 general_nlf 0\r\n"
    "  general_vsd_vld 0 general_vsd 0 general_lcl_prt_vld 0\r\n"
    "  general_lcl_prt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(26)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACE_GET_BEST_MATCH_ACE_GET_BEST_MATCH_ACE_L2_INFO_S_TAG_DEI_ID,                                                            
    "l2_s_tag_dei",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  ace.l2_info.s_tag.dei:\r\n"
    "  the value returned in the Ethernet Parsing of the DEI (drop eligibility\r\n"
    "  indicator). Size: 1 bit. Range 0-1. Relevant only for the S-TAG.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl ace_get_best_match acl_ndx 0 l4_prt_rng_max_prt 0\r\n"
    "  l4_prt_rng_min_prt 0 l4_prt_rng_is_src_prt 0\r\n"
    "  l4_dst_prt_msk 0 l4_dst_prt 0 l4_src_prt_msk 0\r\n"
    "  l4_src_prt 0 l3_dst_ip_address 0 l3_dst_ip_pref 0\r\n"
    "  l3_src_ip_address 0 l3_src_ip_pref 0\r\n"
    "  l3_prtcl_cod_vld 0 l3_prtcl_cod 0\r\n"
    "  l3_tos_msk 0 l3_tos 0 l2_dst_mac_vld 0\r\n"
    "  l2_dst_mac 0 l2_src_mac_vld 0 l2_src_mac 0\r\n"
    "  l2_s_tag_dei_vld 0 l2_s_tag_dei 0 l2_s_tag_pcp_vld 0\r\n"
    "  l2_s_tag_pcp 0 l2_s_tag_exist_vld 0\r\n"
    "  l2_s_tag_exist 0 l2_s_tag_vid_msk 0 l2_s_tag_vid 0\r\n"
    "  l2_c_tag_dei_vld 0 l2_c_tag_dei 0 l2_c_tag_pcp_vld 0\r\n"
    "  l2_c_tag_pcp 0 l2_c_tag_exist_vld 0\r\n"
    "  l2_c_tag_exist 0 l2_c_tag_vid_msk 0 l2_c_tag_vid 0\r\n"
    "  l2_prt_typ_vld 0 l2_prt_typ 0 l2_thr_typ_vld 0\r\n"
    "  l2_thr_typ 0 general_nlf_vld 0 general_nlf 0\r\n"
    "  general_vsd_vld 0 general_vsd 0 general_lcl_prt_vld 0\r\n"
    "  general_lcl_prt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(26)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACE_GET_BEST_MATCH_ACE_GET_BEST_MATCH_ACE_L2_INFO_S_TAG_PCP_VALID_ID,                                                            
    "l2_s_tag_pcp_vld",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  ace.l2_info.s_tag.pcp_valid:\r\n"
    "  If TRUE then pcp considered as part of the ACE. Otherwise it masked. \r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl ace_get_best_match acl_ndx 0 l4_prt_rng_max_prt 0\r\n"
    "  l4_prt_rng_min_prt 0 l4_prt_rng_is_src_prt 0\r\n"
    "  l4_dst_prt_msk 0 l4_dst_prt 0 l4_src_prt_msk 0\r\n"
    "  l4_src_prt 0 l3_dst_ip_address 0 l3_dst_ip_pref 0\r\n"
    "  l3_src_ip_address 0 l3_src_ip_pref 0\r\n"
    "  l3_prtcl_cod_vld 0 l3_prtcl_cod 0\r\n"
    "  l3_tos_msk 0 l3_tos 0 l2_dst_mac_vld 0\r\n"
    "  l2_dst_mac 0 l2_src_mac_vld 0 l2_src_mac 0\r\n"
    "  l2_s_tag_dei_vld 0 l2_s_tag_dei 0 l2_s_tag_pcp_vld 0\r\n"
    "  l2_s_tag_pcp 0 l2_s_tag_exist_vld 0\r\n"
    "  l2_s_tag_exist 0 l2_s_tag_vid_msk 0 l2_s_tag_vid 0\r\n"
    "  l2_c_tag_dei_vld 0 l2_c_tag_dei 0 l2_c_tag_pcp_vld 0\r\n"
    "  l2_c_tag_pcp 0 l2_c_tag_exist_vld 0\r\n"
    "  l2_c_tag_exist 0 l2_c_tag_vid_msk 0 l2_c_tag_vid 0\r\n"
    "  l2_prt_typ_vld 0 l2_prt_typ 0 l2_thr_typ_vld 0\r\n"
    "  l2_thr_typ 0 general_nlf_vld 0 general_nlf 0\r\n"
    "  general_vsd_vld 0 general_vsd 0 general_lcl_prt_vld 0\r\n"
    "  general_lcl_prt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(26)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACE_GET_BEST_MATCH_ACE_GET_BEST_MATCH_ACE_L2_INFO_S_TAG_PCP_ID,                                                            
    "l2_s_tag_pcp",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  ace.l2_info.s_tag.pcp:\r\n"
    "  the value returned in the Ethernet Parsing of the PCP (priority code point).\r\n"
    "  Size: 3 bits. Range 0-7.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl ace_get_best_match acl_ndx 0 l4_prt_rng_max_prt 0\r\n"
    "  l4_prt_rng_min_prt 0 l4_prt_rng_is_src_prt 0\r\n"
    "  l4_dst_prt_msk 0 l4_dst_prt 0 l4_src_prt_msk 0\r\n"
    "  l4_src_prt 0 l3_dst_ip_address 0 l3_dst_ip_pref 0\r\n"
    "  l3_src_ip_address 0 l3_src_ip_pref 0\r\n"
    "  l3_prtcl_cod_vld 0 l3_prtcl_cod 0\r\n"
    "  l3_tos_msk 0 l3_tos 0 l2_dst_mac_vld 0\r\n"
    "  l2_dst_mac 0 l2_src_mac_vld 0 l2_src_mac 0\r\n"
    "  l2_s_tag_dei_vld 0 l2_s_tag_dei 0 l2_s_tag_pcp_vld 0\r\n"
    "  l2_s_tag_pcp 0 l2_s_tag_exist_vld 0\r\n"
    "  l2_s_tag_exist 0 l2_s_tag_vid_msk 0 l2_s_tag_vid 0\r\n"
    "  l2_c_tag_dei_vld 0 l2_c_tag_dei 0 l2_c_tag_pcp_vld 0\r\n"
    "  l2_c_tag_pcp 0 l2_c_tag_exist_vld 0\r\n"
    "  l2_c_tag_exist 0 l2_c_tag_vid_msk 0 l2_c_tag_vid 0\r\n"
    "  l2_prt_typ_vld 0 l2_prt_typ 0 l2_thr_typ_vld 0\r\n"
    "  l2_thr_typ 0 general_nlf_vld 0 general_nlf 0\r\n"
    "  general_vsd_vld 0 general_vsd 0 general_lcl_prt_vld 0\r\n"
    "  general_lcl_prt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(26)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACE_GET_BEST_MATCH_ACE_GET_BEST_MATCH_ACE_L2_INFO_S_TAG_TAG_EXIST_VALID_ID,                                                            
    "l2_s_tag_exist_vld",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  ace.l2_info.s_tag.tag_exist_valid:\r\n"
    "  If TRUE then tag_exist considered as part of the ACE. Otherwise it masked. \r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl ace_get_best_match acl_ndx 0 l4_prt_rng_max_prt 0\r\n"
    "  l4_prt_rng_min_prt 0 l4_prt_rng_is_src_prt 0\r\n"
    "  l4_dst_prt_msk 0 l4_dst_prt 0 l4_src_prt_msk 0\r\n"
    "  l4_src_prt 0 l3_dst_ip_address 0 l3_dst_ip_pref 0\r\n"
    "  l3_src_ip_address 0 l3_src_ip_pref 0\r\n"
    "  l3_prtcl_cod_vld 0 l3_prtcl_cod 0\r\n"
    "  l3_tos_msk 0 l3_tos 0 l2_dst_mac_vld 0\r\n"
    "  l2_dst_mac 0 l2_src_mac_vld 0 l2_src_mac 0\r\n"
    "  l2_s_tag_dei_vld 0 l2_s_tag_dei 0 l2_s_tag_pcp_vld 0\r\n"
    "  l2_s_tag_pcp 0 l2_s_tag_exist_vld 0\r\n"
    "  l2_s_tag_exist 0 l2_s_tag_vid_msk 0 l2_s_tag_vid 0\r\n"
    "  l2_c_tag_dei_vld 0 l2_c_tag_dei 0 l2_c_tag_pcp_vld 0\r\n"
    "  l2_c_tag_pcp 0 l2_c_tag_exist_vld 0\r\n"
    "  l2_c_tag_exist 0 l2_c_tag_vid_msk 0 l2_c_tag_vid 0\r\n"
    "  l2_prt_typ_vld 0 l2_prt_typ 0 l2_thr_typ_vld 0\r\n"
    "  l2_thr_typ 0 general_nlf_vld 0 general_nlf 0\r\n"
    "  general_vsd_vld 0 general_vsd 0 general_lcl_prt_vld 0\r\n"
    "  general_lcl_prt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(26)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACE_GET_BEST_MATCH_ACE_GET_BEST_MATCH_ACE_L2_INFO_S_TAG_TAG_EXIST_ID,                                                            
    "l2_s_tag_exist",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  ace.l2_info.s_tag.tag_exist:\r\n"
    "  True if the Vlan tag is present in the packet. Size: 1 bit.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl ace_get_best_match acl_ndx 0 l4_prt_rng_max_prt 0\r\n"
    "  l4_prt_rng_min_prt 0 l4_prt_rng_is_src_prt 0\r\n"
    "  l4_dst_prt_msk 0 l4_dst_prt 0 l4_src_prt_msk 0\r\n"
    "  l4_src_prt 0 l3_dst_ip_address 0 l3_dst_ip_pref 0\r\n"
    "  l3_src_ip_address 0 l3_src_ip_pref 0\r\n"
    "  l3_prtcl_cod_vld 0 l3_prtcl_cod 0\r\n"
    "  l3_tos_msk 0 l3_tos 0 l2_dst_mac_vld 0\r\n"
    "  l2_dst_mac 0 l2_src_mac_vld 0 l2_src_mac 0\r\n"
    "  l2_s_tag_dei_vld 0 l2_s_tag_dei 0 l2_s_tag_pcp_vld 0\r\n"
    "  l2_s_tag_pcp 0 l2_s_tag_exist_vld 0\r\n"
    "  l2_s_tag_exist 0 l2_s_tag_vid_msk 0 l2_s_tag_vid 0\r\n"
    "  l2_c_tag_dei_vld 0 l2_c_tag_dei 0 l2_c_tag_pcp_vld 0\r\n"
    "  l2_c_tag_pcp 0 l2_c_tag_exist_vld 0\r\n"
    "  l2_c_tag_exist 0 l2_c_tag_vid_msk 0 l2_c_tag_vid 0\r\n"
    "  l2_prt_typ_vld 0 l2_prt_typ 0 l2_thr_typ_vld 0\r\n"
    "  l2_thr_typ 0 general_nlf_vld 0 general_nlf 0\r\n"
    "  general_vsd_vld 0 general_vsd 0 general_lcl_prt_vld 0\r\n"
    "  general_lcl_prt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(26)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACE_GET_BEST_MATCH_ACE_GET_BEST_MATCH_ACE_L2_INFO_S_TAG_VID_MASK_ID,                                                            
    "l2_s_tag_vid_msk",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  ace.l2_info.s_tag.vid_mask:\r\n"
    "  A mask on the vid (bitmap) indicates which bits to consider and which are\r\n"
    "  masked. 0 indicates all bits are masked, 0Xfff indicates to consider all the\r\n"
    "  bits in the key.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl ace_get_best_match acl_ndx 0 l4_prt_rng_max_prt 0\r\n"
    "  l4_prt_rng_min_prt 0 l4_prt_rng_is_src_prt 0\r\n"
    "  l4_dst_prt_msk 0 l4_dst_prt 0 l4_src_prt_msk 0\r\n"
    "  l4_src_prt 0 l3_dst_ip_address 0 l3_dst_ip_pref 0\r\n"
    "  l3_src_ip_address 0 l3_src_ip_pref 0\r\n"
    "  l3_prtcl_cod_vld 0 l3_prtcl_cod 0\r\n"
    "  l3_tos_msk 0 l3_tos 0 l2_dst_mac_vld 0\r\n"
    "  l2_dst_mac 0 l2_src_mac_vld 0 l2_src_mac 0\r\n"
    "  l2_s_tag_dei_vld 0 l2_s_tag_dei 0 l2_s_tag_pcp_vld 0\r\n"
    "  l2_s_tag_pcp 0 l2_s_tag_exist_vld 0\r\n"
    "  l2_s_tag_exist 0 l2_s_tag_vid_msk 0 l2_s_tag_vid 0\r\n"
    "  l2_c_tag_dei_vld 0 l2_c_tag_dei 0 l2_c_tag_pcp_vld 0\r\n"
    "  l2_c_tag_pcp 0 l2_c_tag_exist_vld 0\r\n"
    "  l2_c_tag_exist 0 l2_c_tag_vid_msk 0 l2_c_tag_vid 0\r\n"
    "  l2_prt_typ_vld 0 l2_prt_typ 0 l2_thr_typ_vld 0\r\n"
    "  l2_thr_typ 0 general_nlf_vld 0 general_nlf 0\r\n"
    "  general_vsd_vld 0 general_vsd 0 general_lcl_prt_vld 0\r\n"
    "  general_lcl_prt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(26)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACE_GET_BEST_MATCH_ACE_GET_BEST_MATCH_ACE_L2_INFO_S_TAG_VID_ID,                                                            
    "l2_s_tag_vid",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  ace.l2_info.s_tag.vid:\r\n"
    "  The Vlan Id. Size: 12 bits. Range 0-4095.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl ace_get_best_match acl_ndx 0 l4_prt_rng_max_prt 0\r\n"
    "  l4_prt_rng_min_prt 0 l4_prt_rng_is_src_prt 0\r\n"
    "  l4_dst_prt_msk 0 l4_dst_prt 0 l4_src_prt_msk 0\r\n"
    "  l4_src_prt 0 l3_dst_ip_address 0 l3_dst_ip_pref 0\r\n"
    "  l3_src_ip_address 0 l3_src_ip_pref 0\r\n"
    "  l3_prtcl_cod_vld 0 l3_prtcl_cod 0\r\n"
    "  l3_tos_msk 0 l3_tos 0 l2_dst_mac_vld 0\r\n"
    "  l2_dst_mac 0 l2_src_mac_vld 0 l2_src_mac 0\r\n"
    "  l2_s_tag_dei_vld 0 l2_s_tag_dei 0 l2_s_tag_pcp_vld 0\r\n"
    "  l2_s_tag_pcp 0 l2_s_tag_exist_vld 0\r\n"
    "  l2_s_tag_exist 0 l2_s_tag_vid_msk 0 l2_s_tag_vid 0\r\n"
    "  l2_c_tag_dei_vld 0 l2_c_tag_dei 0 l2_c_tag_pcp_vld 0\r\n"
    "  l2_c_tag_pcp 0 l2_c_tag_exist_vld 0\r\n"
    "  l2_c_tag_exist 0 l2_c_tag_vid_msk 0 l2_c_tag_vid 0\r\n"
    "  l2_prt_typ_vld 0 l2_prt_typ 0 l2_thr_typ_vld 0\r\n"
    "  l2_thr_typ 0 general_nlf_vld 0 general_nlf 0\r\n"
    "  general_vsd_vld 0 general_vsd 0 general_lcl_prt_vld 0\r\n"
    "  general_lcl_prt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(26)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACE_GET_BEST_MATCH_ACE_GET_BEST_MATCH_ACE_L2_INFO_C_TAG_DEI_VALID_ID,                                                            
    "l2_c_tag_dei_vld",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  ace.l2_info.c_tag.dei_valid:\r\n"
    "  If TRUE then dei considered as part of the ACE. Otherwise it masked. \r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl ace_get_best_match acl_ndx 0 l4_prt_rng_max_prt 0\r\n"
    "  l4_prt_rng_min_prt 0 l4_prt_rng_is_src_prt 0\r\n"
    "  l4_dst_prt_msk 0 l4_dst_prt 0 l4_src_prt_msk 0\r\n"
    "  l4_src_prt 0 l3_dst_ip_address 0 l3_dst_ip_pref 0\r\n"
    "  l3_src_ip_address 0 l3_src_ip_pref 0\r\n"
    "  l3_prtcl_cod_vld 0 l3_prtcl_cod 0\r\n"
    "  l3_tos_msk 0 l3_tos 0 l2_dst_mac_vld 0\r\n"
    "  l2_dst_mac 0 l2_src_mac_vld 0 l2_src_mac 0\r\n"
    "  l2_s_tag_dei_vld 0 l2_s_tag_dei 0 l2_s_tag_pcp_vld 0\r\n"
    "  l2_s_tag_pcp 0 l2_s_tag_exist_vld 0\r\n"
    "  l2_s_tag_exist 0 l2_s_tag_vid_msk 0 l2_s_tag_vid 0\r\n"
    "  l2_c_tag_dei_vld 0 l2_c_tag_dei 0 l2_c_tag_pcp_vld 0\r\n"
    "  l2_c_tag_pcp 0 l2_c_tag_exist_vld 0\r\n"
    "  l2_c_tag_exist 0 l2_c_tag_vid_msk 0 l2_c_tag_vid 0\r\n"
    "  l2_prt_typ_vld 0 l2_prt_typ 0 l2_thr_typ_vld 0\r\n"
    "  l2_thr_typ 0 general_nlf_vld 0 general_nlf 0\r\n"
    "  general_vsd_vld 0 general_vsd 0 general_lcl_prt_vld 0\r\n"
    "  general_lcl_prt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(26)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACE_GET_BEST_MATCH_ACE_GET_BEST_MATCH_ACE_L2_INFO_C_TAG_DEI_ID,                                                            
    "l2_c_tag_dei",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  ace.l2_info.c_tag.dei:\r\n"
    "  the value returned in the Ethernet Parsing of the DEI (drop eligibility\r\n"
    "  indicator). Size: 1 bit. Range 0-1. Relevant only for the S-TAG.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl ace_get_best_match acl_ndx 0 l4_prt_rng_max_prt 0\r\n"
    "  l4_prt_rng_min_prt 0 l4_prt_rng_is_src_prt 0\r\n"
    "  l4_dst_prt_msk 0 l4_dst_prt 0 l4_src_prt_msk 0\r\n"
    "  l4_src_prt 0 l3_dst_ip_address 0 l3_dst_ip_pref 0\r\n"
    "  l3_src_ip_address 0 l3_src_ip_pref 0\r\n"
    "  l3_prtcl_cod_vld 0 l3_prtcl_cod 0\r\n"
    "  l3_tos_msk 0 l3_tos 0 l2_dst_mac_vld 0\r\n"
    "  l2_dst_mac 0 l2_src_mac_vld 0 l2_src_mac 0\r\n"
    "  l2_s_tag_dei_vld 0 l2_s_tag_dei 0 l2_s_tag_pcp_vld 0\r\n"
    "  l2_s_tag_pcp 0 l2_s_tag_exist_vld 0\r\n"
    "  l2_s_tag_exist 0 l2_s_tag_vid_msk 0 l2_s_tag_vid 0\r\n"
    "  l2_c_tag_dei_vld 0 l2_c_tag_dei 0 l2_c_tag_pcp_vld 0\r\n"
    "  l2_c_tag_pcp 0 l2_c_tag_exist_vld 0\r\n"
    "  l2_c_tag_exist 0 l2_c_tag_vid_msk 0 l2_c_tag_vid 0\r\n"
    "  l2_prt_typ_vld 0 l2_prt_typ 0 l2_thr_typ_vld 0\r\n"
    "  l2_thr_typ 0 general_nlf_vld 0 general_nlf 0\r\n"
    "  general_vsd_vld 0 general_vsd 0 general_lcl_prt_vld 0\r\n"
    "  general_lcl_prt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(26)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACE_GET_BEST_MATCH_ACE_GET_BEST_MATCH_ACE_L2_INFO_C_TAG_PCP_VALID_ID,                                                            
    "l2_c_tag_pcp_vld",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  ace.l2_info.c_tag.pcp_valid:\r\n"
    "  If TRUE then pcp considered as part of the ACE. Otherwise it masked. \r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl ace_get_best_match acl_ndx 0 l4_prt_rng_max_prt 0\r\n"
    "  l4_prt_rng_min_prt 0 l4_prt_rng_is_src_prt 0\r\n"
    "  l4_dst_prt_msk 0 l4_dst_prt 0 l4_src_prt_msk 0\r\n"
    "  l4_src_prt 0 l3_dst_ip_address 0 l3_dst_ip_pref 0\r\n"
    "  l3_src_ip_address 0 l3_src_ip_pref 0\r\n"
    "  l3_prtcl_cod_vld 0 l3_prtcl_cod 0\r\n"
    "  l3_tos_msk 0 l3_tos 0 l2_dst_mac_vld 0\r\n"
    "  l2_dst_mac 0 l2_src_mac_vld 0 l2_src_mac 0\r\n"
    "  l2_s_tag_dei_vld 0 l2_s_tag_dei 0 l2_s_tag_pcp_vld 0\r\n"
    "  l2_s_tag_pcp 0 l2_s_tag_exist_vld 0\r\n"
    "  l2_s_tag_exist 0 l2_s_tag_vid_msk 0 l2_s_tag_vid 0\r\n"
    "  l2_c_tag_dei_vld 0 l2_c_tag_dei 0 l2_c_tag_pcp_vld 0\r\n"
    "  l2_c_tag_pcp 0 l2_c_tag_exist_vld 0\r\n"
    "  l2_c_tag_exist 0 l2_c_tag_vid_msk 0 l2_c_tag_vid 0\r\n"
    "  l2_prt_typ_vld 0 l2_prt_typ 0 l2_thr_typ_vld 0\r\n"
    "  l2_thr_typ 0 general_nlf_vld 0 general_nlf 0\r\n"
    "  general_vsd_vld 0 general_vsd 0 general_lcl_prt_vld 0\r\n"
    "  general_lcl_prt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(26)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACE_GET_BEST_MATCH_ACE_GET_BEST_MATCH_ACE_L2_INFO_C_TAG_PCP_ID,                                                            
    "l2_c_tag_pcp",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  ace.l2_info.c_tag.pcp:\r\n"
    "  the value returned in the Ethernet Parsing of the PCP (priority code point).\r\n"
    "  Size: 3 bits. Range 0-7.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl ace_get_best_match acl_ndx 0 l4_prt_rng_max_prt 0\r\n"
    "  l4_prt_rng_min_prt 0 l4_prt_rng_is_src_prt 0\r\n"
    "  l4_dst_prt_msk 0 l4_dst_prt 0 l4_src_prt_msk 0\r\n"
    "  l4_src_prt 0 l3_dst_ip_address 0 l3_dst_ip_pref 0\r\n"
    "  l3_src_ip_address 0 l3_src_ip_pref 0\r\n"
    "  l3_prtcl_cod_vld 0 l3_prtcl_cod 0\r\n"
    "  l3_tos_msk 0 l3_tos 0 l2_dst_mac_vld 0\r\n"
    "  l2_dst_mac 0 l2_src_mac_vld 0 l2_src_mac 0\r\n"
    "  l2_s_tag_dei_vld 0 l2_s_tag_dei 0 l2_s_tag_pcp_vld 0\r\n"
    "  l2_s_tag_pcp 0 l2_s_tag_exist_vld 0\r\n"
    "  l2_s_tag_exist 0 l2_s_tag_vid_msk 0 l2_s_tag_vid 0\r\n"
    "  l2_c_tag_dei_vld 0 l2_c_tag_dei 0 l2_c_tag_pcp_vld 0\r\n"
    "  l2_c_tag_pcp 0 l2_c_tag_exist_vld 0\r\n"
    "  l2_c_tag_exist 0 l2_c_tag_vid_msk 0 l2_c_tag_vid 0\r\n"
    "  l2_prt_typ_vld 0 l2_prt_typ 0 l2_thr_typ_vld 0\r\n"
    "  l2_thr_typ 0 general_nlf_vld 0 general_nlf 0\r\n"
    "  general_vsd_vld 0 general_vsd 0 general_lcl_prt_vld 0\r\n"
    "  general_lcl_prt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(26)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACE_GET_BEST_MATCH_ACE_GET_BEST_MATCH_ACE_L2_INFO_C_TAG_TAG_EXIST_VALID_ID,                                                            
    "l2_c_tag_exist_vld",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  ace.l2_info.c_tag.tag_exist_valid:\r\n"
    "  If TRUE then tag_exist considered as part of the ACE. Otherwise it masked. \r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl ace_get_best_match acl_ndx 0 l4_prt_rng_max_prt 0\r\n"
    "  l4_prt_rng_min_prt 0 l4_prt_rng_is_src_prt 0\r\n"
    "  l4_dst_prt_msk 0 l4_dst_prt 0 l4_src_prt_msk 0\r\n"
    "  l4_src_prt 0 l3_dst_ip_address 0 l3_dst_ip_pref 0\r\n"
    "  l3_src_ip_address 0 l3_src_ip_pref 0\r\n"
    "  l3_prtcl_cod_vld 0 l3_prtcl_cod 0\r\n"
    "  l3_tos_msk 0 l3_tos 0 l2_dst_mac_vld 0\r\n"
    "  l2_dst_mac 0 l2_src_mac_vld 0 l2_src_mac 0\r\n"
    "  l2_s_tag_dei_vld 0 l2_s_tag_dei 0 l2_s_tag_pcp_vld 0\r\n"
    "  l2_s_tag_pcp 0 l2_s_tag_exist_vld 0\r\n"
    "  l2_s_tag_exist 0 l2_s_tag_vid_msk 0 l2_s_tag_vid 0\r\n"
    "  l2_c_tag_dei_vld 0 l2_c_tag_dei 0 l2_c_tag_pcp_vld 0\r\n"
    "  l2_c_tag_pcp 0 l2_c_tag_exist_vld 0\r\n"
    "  l2_c_tag_exist 0 l2_c_tag_vid_msk 0 l2_c_tag_vid 0\r\n"
    "  l2_prt_typ_vld 0 l2_prt_typ 0 l2_thr_typ_vld 0\r\n"
    "  l2_thr_typ 0 general_nlf_vld 0 general_nlf 0\r\n"
    "  general_vsd_vld 0 general_vsd 0 general_lcl_prt_vld 0\r\n"
    "  general_lcl_prt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(26)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACE_GET_BEST_MATCH_ACE_GET_BEST_MATCH_ACE_L2_INFO_C_TAG_TAG_EXIST_ID,                                                            
    "l2_c_tag_exist",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  ace.l2_info.c_tag.tag_exist:\r\n"
    "  True if the Vlan tag is present in the packet. Size: 1 bit.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl ace_get_best_match acl_ndx 0 l4_prt_rng_max_prt 0\r\n"
    "  l4_prt_rng_min_prt 0 l4_prt_rng_is_src_prt 0\r\n"
    "  l4_dst_prt_msk 0 l4_dst_prt 0 l4_src_prt_msk 0\r\n"
    "  l4_src_prt 0 l3_dst_ip_address 0 l3_dst_ip_pref 0\r\n"
    "  l3_src_ip_address 0 l3_src_ip_pref 0\r\n"
    "  l3_prtcl_cod_vld 0 l3_prtcl_cod 0\r\n"
    "  l3_tos_msk 0 l3_tos 0 l2_dst_mac_vld 0\r\n"
    "  l2_dst_mac 0 l2_src_mac_vld 0 l2_src_mac 0\r\n"
    "  l2_s_tag_dei_vld 0 l2_s_tag_dei 0 l2_s_tag_pcp_vld 0\r\n"
    "  l2_s_tag_pcp 0 l2_s_tag_exist_vld 0\r\n"
    "  l2_s_tag_exist 0 l2_s_tag_vid_msk 0 l2_s_tag_vid 0\r\n"
    "  l2_c_tag_dei_vld 0 l2_c_tag_dei 0 l2_c_tag_pcp_vld 0\r\n"
    "  l2_c_tag_pcp 0 l2_c_tag_exist_vld 0\r\n"
    "  l2_c_tag_exist 0 l2_c_tag_vid_msk 0 l2_c_tag_vid 0\r\n"
    "  l2_prt_typ_vld 0 l2_prt_typ 0 l2_thr_typ_vld 0\r\n"
    "  l2_thr_typ 0 general_nlf_vld 0 general_nlf 0\r\n"
    "  general_vsd_vld 0 general_vsd 0 general_lcl_prt_vld 0\r\n"
    "  general_lcl_prt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(26)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACE_GET_BEST_MATCH_ACE_GET_BEST_MATCH_ACE_L2_INFO_C_TAG_VID_MASK_ID,                                                            
    "l2_c_tag_vid_msk",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  ace.l2_info.c_tag.vid_mask:\r\n"
    "  A mask on the vid (bitmap) indicates which bits to consider and which are\r\n"
    "  masked. 0 indicates all bits are masked, 0Xfff indicates to consider all the\r\n"
    "  bits in the key.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl ace_get_best_match acl_ndx 0 l4_prt_rng_max_prt 0\r\n"
    "  l4_prt_rng_min_prt 0 l4_prt_rng_is_src_prt 0\r\n"
    "  l4_dst_prt_msk 0 l4_dst_prt 0 l4_src_prt_msk 0\r\n"
    "  l4_src_prt 0 l3_dst_ip_address 0 l3_dst_ip_pref 0\r\n"
    "  l3_src_ip_address 0 l3_src_ip_pref 0\r\n"
    "  l3_prtcl_cod_vld 0 l3_prtcl_cod 0\r\n"
    "  l3_tos_msk 0 l3_tos 0 l2_dst_mac_vld 0\r\n"
    "  l2_dst_mac 0 l2_src_mac_vld 0 l2_src_mac 0\r\n"
    "  l2_s_tag_dei_vld 0 l2_s_tag_dei 0 l2_s_tag_pcp_vld 0\r\n"
    "  l2_s_tag_pcp 0 l2_s_tag_exist_vld 0\r\n"
    "  l2_s_tag_exist 0 l2_s_tag_vid_msk 0 l2_s_tag_vid 0\r\n"
    "  l2_c_tag_dei_vld 0 l2_c_tag_dei 0 l2_c_tag_pcp_vld 0\r\n"
    "  l2_c_tag_pcp 0 l2_c_tag_exist_vld 0\r\n"
    "  l2_c_tag_exist 0 l2_c_tag_vid_msk 0 l2_c_tag_vid 0\r\n"
    "  l2_prt_typ_vld 0 l2_prt_typ 0 l2_thr_typ_vld 0\r\n"
    "  l2_thr_typ 0 general_nlf_vld 0 general_nlf 0\r\n"
    "  general_vsd_vld 0 general_vsd 0 general_lcl_prt_vld 0\r\n"
    "  general_lcl_prt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(26)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACE_GET_BEST_MATCH_ACE_GET_BEST_MATCH_ACE_L2_INFO_C_TAG_VID_ID,                                                            
    "l2_c_tag_vid",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  ace.l2_info.c_tag.vid:\r\n"
    "  The Vlan Id. Size: 12 bits. Range 0-4095.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl ace_get_best_match acl_ndx 0 l4_prt_rng_max_prt 0\r\n"
    "  l4_prt_rng_min_prt 0 l4_prt_rng_is_src_prt 0\r\n"
    "  l4_dst_prt_msk 0 l4_dst_prt 0 l4_src_prt_msk 0\r\n"
    "  l4_src_prt 0 l3_dst_ip_address 0 l3_dst_ip_pref 0\r\n"
    "  l3_src_ip_address 0 l3_src_ip_pref 0\r\n"
    "  l3_prtcl_cod_vld 0 l3_prtcl_cod 0\r\n"
    "  l3_tos_msk 0 l3_tos 0 l2_dst_mac_vld 0\r\n"
    "  l2_dst_mac 0 l2_src_mac_vld 0 l2_src_mac 0\r\n"
    "  l2_s_tag_dei_vld 0 l2_s_tag_dei 0 l2_s_tag_pcp_vld 0\r\n"
    "  l2_s_tag_pcp 0 l2_s_tag_exist_vld 0\r\n"
    "  l2_s_tag_exist 0 l2_s_tag_vid_msk 0 l2_s_tag_vid 0\r\n"
    "  l2_c_tag_dei_vld 0 l2_c_tag_dei 0 l2_c_tag_pcp_vld 0\r\n"
    "  l2_c_tag_pcp 0 l2_c_tag_exist_vld 0\r\n"
    "  l2_c_tag_exist 0 l2_c_tag_vid_msk 0 l2_c_tag_vid 0\r\n"
    "  l2_prt_typ_vld 0 l2_prt_typ 0 l2_thr_typ_vld 0\r\n"
    "  l2_thr_typ 0 general_nlf_vld 0 general_nlf 0\r\n"
    "  general_vsd_vld 0 general_vsd 0 general_lcl_prt_vld 0\r\n"
    "  general_lcl_prt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(26)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACE_GET_BEST_MATCH_ACE_GET_BEST_MATCH_ACE_L2_INFO_PORT_TYPE_VALID_ID,                                                            
    "l2_prt_typ_vld",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  ace.l2_info.port_type_valid:\r\n"
    "  If TRUE then port_type considered as part of the ACE. Otherwise it masked. \r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl ace_get_best_match acl_ndx 0 l4_prt_rng_max_prt 0\r\n"
    "  l4_prt_rng_min_prt 0 l4_prt_rng_is_src_prt 0\r\n"
    "  l4_dst_prt_msk 0 l4_dst_prt 0 l4_src_prt_msk 0\r\n"
    "  l4_src_prt 0 l3_dst_ip_address 0 l3_dst_ip_pref 0\r\n"
    "  l3_src_ip_address 0 l3_src_ip_pref 0\r\n"
    "  l3_prtcl_cod_vld 0 l3_prtcl_cod 0\r\n"
    "  l3_tos_msk 0 l3_tos 0 l2_dst_mac_vld 0\r\n"
    "  l2_dst_mac 0 l2_src_mac_vld 0 l2_src_mac 0\r\n"
    "  l2_s_tag_dei_vld 0 l2_s_tag_dei 0 l2_s_tag_pcp_vld 0\r\n"
    "  l2_s_tag_pcp 0 l2_s_tag_exist_vld 0\r\n"
    "  l2_s_tag_exist 0 l2_s_tag_vid_msk 0 l2_s_tag_vid 0\r\n"
    "  l2_c_tag_dei_vld 0 l2_c_tag_dei 0 l2_c_tag_pcp_vld 0\r\n"
    "  l2_c_tag_pcp 0 l2_c_tag_exist_vld 0\r\n"
    "  l2_c_tag_exist 0 l2_c_tag_vid_msk 0 l2_c_tag_vid 0\r\n"
    "  l2_prt_typ_vld 0 l2_prt_typ 0 l2_thr_typ_vld 0\r\n"
    "  l2_thr_typ 0 general_nlf_vld 0 general_nlf 0\r\n"
    "  general_vsd_vld 0 general_vsd 0 general_lcl_prt_vld 0\r\n"
    "  general_lcl_prt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(26)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACE_GET_BEST_MATCH_ACE_GET_BEST_MATCH_ACE_L2_INFO_PORT_TYPE_ID,                                                            
    "l2_prt_typ",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  ace.l2_info.port_type:\r\n"
    "  The l2 port type (VBP,CEP,CNP,PNP). Size: 2 bits.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl ace_get_best_match acl_ndx 0 l4_prt_rng_max_prt 0\r\n"
    "  l4_prt_rng_min_prt 0 l4_prt_rng_is_src_prt 0\r\n"
    "  l4_dst_prt_msk 0 l4_dst_prt 0 l4_src_prt_msk 0\r\n"
    "  l4_src_prt 0 l3_dst_ip_address 0 l3_dst_ip_pref 0\r\n"
    "  l3_src_ip_address 0 l3_src_ip_pref 0\r\n"
    "  l3_prtcl_cod_vld 0 l3_prtcl_cod 0\r\n"
    "  l3_tos_msk 0 l3_tos 0 l2_dst_mac_vld 0\r\n"
    "  l2_dst_mac 0 l2_src_mac_vld 0 l2_src_mac 0\r\n"
    "  l2_s_tag_dei_vld 0 l2_s_tag_dei 0 l2_s_tag_pcp_vld 0\r\n"
    "  l2_s_tag_pcp 0 l2_s_tag_exist_vld 0\r\n"
    "  l2_s_tag_exist 0 l2_s_tag_vid_msk 0 l2_s_tag_vid 0\r\n"
    "  l2_c_tag_dei_vld 0 l2_c_tag_dei 0 l2_c_tag_pcp_vld 0\r\n"
    "  l2_c_tag_pcp 0 l2_c_tag_exist_vld 0\r\n"
    "  l2_c_tag_exist 0 l2_c_tag_vid_msk 0 l2_c_tag_vid 0\r\n"
    "  l2_prt_typ_vld 0 l2_prt_typ 0 l2_thr_typ_vld 0\r\n"
    "  l2_thr_typ 0 general_nlf_vld 0 general_nlf 0\r\n"
    "  general_vsd_vld 0 general_vsd 0 general_lcl_prt_vld 0\r\n"
    "  general_lcl_prt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(26)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACE_GET_BEST_MATCH_ACE_GET_BEST_MATCH_ACE_L2_INFO_ETHER_TYPE_VALID_ID,                                                            
    "l2_thr_typ_vld",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  ace.l2_info.ether_type_valid:\r\n"
    "  If TRUE then ether_type considered as part of the ACE. Otherwise it masked. \r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl ace_get_best_match acl_ndx 0 l4_prt_rng_max_prt 0\r\n"
    "  l4_prt_rng_min_prt 0 l4_prt_rng_is_src_prt 0\r\n"
    "  l4_dst_prt_msk 0 l4_dst_prt 0 l4_src_prt_msk 0\r\n"
    "  l4_src_prt 0 l3_dst_ip_address 0 l3_dst_ip_pref 0\r\n"
    "  l3_src_ip_address 0 l3_src_ip_pref 0\r\n"
    "  l3_prtcl_cod_vld 0 l3_prtcl_cod 0\r\n"
    "  l3_tos_msk 0 l3_tos 0 l2_dst_mac_vld 0\r\n"
    "  l2_dst_mac 0 l2_src_mac_vld 0 l2_src_mac 0\r\n"
    "  l2_s_tag_dei_vld 0 l2_s_tag_dei 0 l2_s_tag_pcp_vld 0\r\n"
    "  l2_s_tag_pcp 0 l2_s_tag_exist_vld 0\r\n"
    "  l2_s_tag_exist 0 l2_s_tag_vid_msk 0 l2_s_tag_vid 0\r\n"
    "  l2_c_tag_dei_vld 0 l2_c_tag_dei 0 l2_c_tag_pcp_vld 0\r\n"
    "  l2_c_tag_pcp 0 l2_c_tag_exist_vld 0\r\n"
    "  l2_c_tag_exist 0 l2_c_tag_vid_msk 0 l2_c_tag_vid 0\r\n"
    "  l2_prt_typ_vld 0 l2_prt_typ 0 l2_thr_typ_vld 0\r\n"
    "  l2_thr_typ 0 general_nlf_vld 0 general_nlf 0\r\n"
    "  general_vsd_vld 0 general_vsd 0 general_lcl_prt_vld 0\r\n"
    "  general_lcl_prt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(26)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACE_GET_BEST_MATCH_ACE_GET_BEST_MATCH_ACE_L2_INFO_ETHER_TYPE_ID,                                                            
    "l2_thr_typ",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  ace.l2_info.ether_type:\r\n"
    "  The EtherType field of the Ethernet header. Range: must be one of the values\r\n"
    "  set in the global information setting. Size: 3 bits.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl ace_get_best_match acl_ndx 0 l4_prt_rng_max_prt 0\r\n"
    "  l4_prt_rng_min_prt 0 l4_prt_rng_is_src_prt 0\r\n"
    "  l4_dst_prt_msk 0 l4_dst_prt 0 l4_src_prt_msk 0\r\n"
    "  l4_src_prt 0 l3_dst_ip_address 0 l3_dst_ip_pref 0\r\n"
    "  l3_src_ip_address 0 l3_src_ip_pref 0\r\n"
    "  l3_prtcl_cod_vld 0 l3_prtcl_cod 0\r\n"
    "  l3_tos_msk 0 l3_tos 0 l2_dst_mac_vld 0\r\n"
    "  l2_dst_mac 0 l2_src_mac_vld 0 l2_src_mac 0\r\n"
    "  l2_s_tag_dei_vld 0 l2_s_tag_dei 0 l2_s_tag_pcp_vld 0\r\n"
    "  l2_s_tag_pcp 0 l2_s_tag_exist_vld 0\r\n"
    "  l2_s_tag_exist 0 l2_s_tag_vid_msk 0 l2_s_tag_vid 0\r\n"
    "  l2_c_tag_dei_vld 0 l2_c_tag_dei 0 l2_c_tag_pcp_vld 0\r\n"
    "  l2_c_tag_pcp 0 l2_c_tag_exist_vld 0\r\n"
    "  l2_c_tag_exist 0 l2_c_tag_vid_msk 0 l2_c_tag_vid 0\r\n"
    "  l2_prt_typ_vld 0 l2_prt_typ 0 l2_thr_typ_vld 0\r\n"
    "  l2_thr_typ 0 general_nlf_vld 0 general_nlf 0\r\n"
    "  general_vsd_vld 0 general_vsd 0 general_lcl_prt_vld 0\r\n"
    "  general_lcl_prt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(26)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACE_GET_BEST_MATCH_ACE_GET_BEST_MATCH_ACE_GENERAL_INFO_INLIF_VALID_ID,                                                            
    "general_nlf_vld",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  ace.general_info.inlif_valid:\r\n"
    "  If TRUE then inlif considered as part of the ACE. Otherwise it masked. \r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl ace_get_best_match acl_ndx 0 l4_prt_rng_max_prt 0\r\n"
    "  l4_prt_rng_min_prt 0 l4_prt_rng_is_src_prt 0\r\n"
    "  l4_dst_prt_msk 0 l4_dst_prt 0 l4_src_prt_msk 0\r\n"
    "  l4_src_prt 0 l3_dst_ip_address 0 l3_dst_ip_pref 0\r\n"
    "  l3_src_ip_address 0 l3_src_ip_pref 0\r\n"
    "  l3_prtcl_cod_vld 0 l3_prtcl_cod 0\r\n"
    "  l3_tos_msk 0 l3_tos 0 l2_dst_mac_vld 0\r\n"
    "  l2_dst_mac 0 l2_src_mac_vld 0 l2_src_mac 0\r\n"
    "  l2_s_tag_dei_vld 0 l2_s_tag_dei 0 l2_s_tag_pcp_vld 0\r\n"
    "  l2_s_tag_pcp 0 l2_s_tag_exist_vld 0\r\n"
    "  l2_s_tag_exist 0 l2_s_tag_vid_msk 0 l2_s_tag_vid 0\r\n"
    "  l2_c_tag_dei_vld 0 l2_c_tag_dei 0 l2_c_tag_pcp_vld 0\r\n"
    "  l2_c_tag_pcp 0 l2_c_tag_exist_vld 0\r\n"
    "  l2_c_tag_exist 0 l2_c_tag_vid_msk 0 l2_c_tag_vid 0\r\n"
    "  l2_prt_typ_vld 0 l2_prt_typ 0 l2_thr_typ_vld 0\r\n"
    "  l2_thr_typ 0 general_nlf_vld 0 general_nlf 0\r\n"
    "  general_vsd_vld 0 general_vsd 0 general_lcl_prt_vld 0\r\n"
    "  general_lcl_prt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(26)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACE_GET_BEST_MATCH_ACE_GET_BEST_MATCH_ACE_GENERAL_INFO_INLIF_ID,                                                            
    "general_nlf",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  ace.general_info.inlif:\r\n"
    "  The source Id of the packet. In 802.1AD and 802.1Q it is the system port ID.\r\n"
    "  Size: 19 bits. Range 0-(16k-1). \r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl ace_get_best_match acl_ndx 0 l4_prt_rng_max_prt 0\r\n"
    "  l4_prt_rng_min_prt 0 l4_prt_rng_is_src_prt 0\r\n"
    "  l4_dst_prt_msk 0 l4_dst_prt 0 l4_src_prt_msk 0\r\n"
    "  l4_src_prt 0 l3_dst_ip_address 0 l3_dst_ip_pref 0\r\n"
    "  l3_src_ip_address 0 l3_src_ip_pref 0\r\n"
    "  l3_prtcl_cod_vld 0 l3_prtcl_cod 0\r\n"
    "  l3_tos_msk 0 l3_tos 0 l2_dst_mac_vld 0\r\n"
    "  l2_dst_mac 0 l2_src_mac_vld 0 l2_src_mac 0\r\n"
    "  l2_s_tag_dei_vld 0 l2_s_tag_dei 0 l2_s_tag_pcp_vld 0\r\n"
    "  l2_s_tag_pcp 0 l2_s_tag_exist_vld 0\r\n"
    "  l2_s_tag_exist 0 l2_s_tag_vid_msk 0 l2_s_tag_vid 0\r\n"
    "  l2_c_tag_dei_vld 0 l2_c_tag_dei 0 l2_c_tag_pcp_vld 0\r\n"
    "  l2_c_tag_pcp 0 l2_c_tag_exist_vld 0\r\n"
    "  l2_c_tag_exist 0 l2_c_tag_vid_msk 0 l2_c_tag_vid 0\r\n"
    "  l2_prt_typ_vld 0 l2_prt_typ 0 l2_thr_typ_vld 0\r\n"
    "  l2_thr_typ 0 general_nlf_vld 0 general_nlf 0\r\n"
    "  general_vsd_vld 0 general_vsd 0 general_lcl_prt_vld 0\r\n"
    "  general_lcl_prt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(26)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACE_GET_BEST_MATCH_ACE_GET_BEST_MATCH_ACE_GENERAL_INFO_VSID_VALID_ID,                                                            
    "general_vsd_vld",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  ace.general_info.vsid_valid:\r\n"
    "  If TRUE then vsid considered as part of the ACE. Otherwise it masked. \r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl ace_get_best_match acl_ndx 0 l4_prt_rng_max_prt 0\r\n"
    "  l4_prt_rng_min_prt 0 l4_prt_rng_is_src_prt 0\r\n"
    "  l4_dst_prt_msk 0 l4_dst_prt 0 l4_src_prt_msk 0\r\n"
    "  l4_src_prt 0 l3_dst_ip_address 0 l3_dst_ip_pref 0\r\n"
    "  l3_src_ip_address 0 l3_src_ip_pref 0\r\n"
    "  l3_prtcl_cod_vld 0 l3_prtcl_cod 0\r\n"
    "  l3_tos_msk 0 l3_tos 0 l2_dst_mac_vld 0\r\n"
    "  l2_dst_mac 0 l2_src_mac_vld 0 l2_src_mac 0\r\n"
    "  l2_s_tag_dei_vld 0 l2_s_tag_dei 0 l2_s_tag_pcp_vld 0\r\n"
    "  l2_s_tag_pcp 0 l2_s_tag_exist_vld 0\r\n"
    "  l2_s_tag_exist 0 l2_s_tag_vid_msk 0 l2_s_tag_vid 0\r\n"
    "  l2_c_tag_dei_vld 0 l2_c_tag_dei 0 l2_c_tag_pcp_vld 0\r\n"
    "  l2_c_tag_pcp 0 l2_c_tag_exist_vld 0\r\n"
    "  l2_c_tag_exist 0 l2_c_tag_vid_msk 0 l2_c_tag_vid 0\r\n"
    "  l2_prt_typ_vld 0 l2_prt_typ 0 l2_thr_typ_vld 0\r\n"
    "  l2_thr_typ 0 general_nlf_vld 0 general_nlf 0\r\n"
    "  general_vsd_vld 0 general_vsd 0 general_lcl_prt_vld 0\r\n"
    "  general_lcl_prt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(26)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACE_GET_BEST_MATCH_ACE_GET_BEST_MATCH_ACE_GENERAL_INFO_VSID_ID,                                                            
    "general_vsd",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  ace.general_info.vsid:\r\n"
    "  Virtual Switch ID. Size: 14 bits. Range 0-(16k-1).\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl ace_get_best_match acl_ndx 0 l4_prt_rng_max_prt 0\r\n"
    "  l4_prt_rng_min_prt 0 l4_prt_rng_is_src_prt 0\r\n"
    "  l4_dst_prt_msk 0 l4_dst_prt 0 l4_src_prt_msk 0\r\n"
    "  l4_src_prt 0 l3_dst_ip_address 0 l3_dst_ip_pref 0\r\n"
    "  l3_src_ip_address 0 l3_src_ip_pref 0\r\n"
    "  l3_prtcl_cod_vld 0 l3_prtcl_cod 0\r\n"
    "  l3_tos_msk 0 l3_tos 0 l2_dst_mac_vld 0\r\n"
    "  l2_dst_mac 0 l2_src_mac_vld 0 l2_src_mac 0\r\n"
    "  l2_s_tag_dei_vld 0 l2_s_tag_dei 0 l2_s_tag_pcp_vld 0\r\n"
    "  l2_s_tag_pcp 0 l2_s_tag_exist_vld 0\r\n"
    "  l2_s_tag_exist 0 l2_s_tag_vid_msk 0 l2_s_tag_vid 0\r\n"
    "  l2_c_tag_dei_vld 0 l2_c_tag_dei 0 l2_c_tag_pcp_vld 0\r\n"
    "  l2_c_tag_pcp 0 l2_c_tag_exist_vld 0\r\n"
    "  l2_c_tag_exist 0 l2_c_tag_vid_msk 0 l2_c_tag_vid 0\r\n"
    "  l2_prt_typ_vld 0 l2_prt_typ 0 l2_thr_typ_vld 0\r\n"
    "  l2_thr_typ 0 general_nlf_vld 0 general_nlf 0\r\n"
    "  general_vsd_vld 0 general_vsd 0 general_lcl_prt_vld 0\r\n"
    "  general_lcl_prt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(26)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACE_GET_BEST_MATCH_ACE_GET_BEST_MATCH_ACE_GENERAL_INFO_LOCAL_PORT_VALID_ID,                                                            
    "general_lcl_prt_vld",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  ace.general_info.local_port_valid:\r\n"
    "  If TRUE then local_port considered as part of the ACE. Otherwise it masked. \r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl ace_get_best_match acl_ndx 0 l4_prt_rng_max_prt 0\r\n"
    "  l4_prt_rng_min_prt 0 l4_prt_rng_is_src_prt 0\r\n"
    "  l4_dst_prt_msk 0 l4_dst_prt 0 l4_src_prt_msk 0\r\n"
    "  l4_src_prt 0 l3_dst_ip_address 0 l3_dst_ip_pref 0\r\n"
    "  l3_src_ip_address 0 l3_src_ip_pref 0\r\n"
    "  l3_prtcl_cod_vld 0 l3_prtcl_cod 0\r\n"
    "  l3_tos_msk 0 l3_tos 0 l2_dst_mac_vld 0\r\n"
    "  l2_dst_mac 0 l2_src_mac_vld 0 l2_src_mac 0\r\n"
    "  l2_s_tag_dei_vld 0 l2_s_tag_dei 0 l2_s_tag_pcp_vld 0\r\n"
    "  l2_s_tag_pcp 0 l2_s_tag_exist_vld 0\r\n"
    "  l2_s_tag_exist 0 l2_s_tag_vid_msk 0 l2_s_tag_vid 0\r\n"
    "  l2_c_tag_dei_vld 0 l2_c_tag_dei 0 l2_c_tag_pcp_vld 0\r\n"
    "  l2_c_tag_pcp 0 l2_c_tag_exist_vld 0\r\n"
    "  l2_c_tag_exist 0 l2_c_tag_vid_msk 0 l2_c_tag_vid 0\r\n"
    "  l2_prt_typ_vld 0 l2_prt_typ 0 l2_thr_typ_vld 0\r\n"
    "  l2_thr_typ 0 general_nlf_vld 0 general_nlf 0\r\n"
    "  general_vsd_vld 0 general_vsd 0 general_lcl_prt_vld 0\r\n"
    "  general_lcl_prt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(26)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACE_GET_BEST_MATCH_ACE_GET_BEST_MATCH_ACE_GENERAL_INFO_LOCAL_PORT_ID,                                                            
    "general_lcl_prt",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  ace.general_info.local_port:\r\n"
    "  Local port Id. Size: 6 bits. Range 0-31.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl ace_get_best_match acl_ndx 0 l4_prt_rng_max_prt 0\r\n"
    "  l4_prt_rng_min_prt 0 l4_prt_rng_is_src_prt 0\r\n"
    "  l4_dst_prt_msk 0 l4_dst_prt 0 l4_src_prt_msk 0\r\n"
    "  l4_src_prt 0 l3_dst_ip_address 0 l3_dst_ip_pref 0\r\n"
    "  l3_src_ip_address 0 l3_src_ip_pref 0\r\n"
    "  l3_prtcl_cod_vld 0 l3_prtcl_cod 0\r\n"
    "  l3_tos_msk 0 l3_tos 0 l2_dst_mac_vld 0\r\n"
    "  l2_dst_mac 0 l2_src_mac_vld 0 l2_src_mac 0\r\n"
    "  l2_s_tag_dei_vld 0 l2_s_tag_dei 0 l2_s_tag_pcp_vld 0\r\n"
    "  l2_s_tag_pcp 0 l2_s_tag_exist_vld 0\r\n"
    "  l2_s_tag_exist 0 l2_s_tag_vid_msk 0 l2_s_tag_vid 0\r\n"
    "  l2_c_tag_dei_vld 0 l2_c_tag_dei 0 l2_c_tag_pcp_vld 0\r\n"
    "  l2_c_tag_pcp 0 l2_c_tag_exist_vld 0\r\n"
    "  l2_c_tag_exist 0 l2_c_tag_vid_msk 0 l2_c_tag_vid 0\r\n"
    "  l2_prt_typ_vld 0 l2_prt_typ 0 l2_thr_typ_vld 0\r\n"
    "  l2_thr_typ 0 general_nlf_vld 0 general_nlf 0\r\n"
    "  general_vsd_vld 0 general_vsd 0 general_lcl_prt_vld 0\r\n"
    "  general_lcl_prt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(26)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACTION_SET_ACTION_SET_ID,                                                            
    "action_set",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Set the action info for the given id. Packets that their ACL lookups return\r\n"
    "  with this action id will be processed according to this action.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl action_set ctn_ndx 0 action_cpu_cod 0 action_overwrite_cntrl 0\r\n"
    "  action_cos_prms_DP 0 action_cos_prms_TC 0 action_cos_prms_UP 0\r\n"
    "  action_policer_cntrllr 0 action_policer_pntr 0 action_tlf 0 action_typ 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(27)},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACTION_SET_ACTION_SET_ACTION_NDX_ID,                                                            
    "ctn_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  action_ndx:\r\n"
    "  The ID of the action. Range 0-524287.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl action_set ctn_ndx 0 action_cpu_cod 0 action_overwrite_cntrl 0\r\n"
    "  action_cos_prms_DP 0 action_cos_prms_TC 0 action_cos_prms_UP 0\r\n"
    "  action_policer_cntrllr 0 action_policer_pntr 0 action_tlf 0 action_typ 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(27)},                                                                              
    3,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACTION_SET_ACTION_SET_ACTION_INFO_CPU_CODE_ID,                                                            
    "action_cpu_cod",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  action_info.cpu_code:\r\n"
    "  Code to be sent in the packets header to the CPU. Relevant only if the ACL\r\n"
    "  action type includes OutLIF.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl action_set ctn_ndx 0 action_cpu_cod 0 action_overwrite_cntrl 0\r\n"
    "  action_cos_prms_DP 0 action_cos_prms_TC 0 action_cos_prms_UP 0\r\n"
    "  action_policer_cntrllr 0 action_policer_pntr 0 action_tlf 0 action_typ 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(27)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACTION_SET_ACTION_SET_ACTION_INFO_OVERWRITE_CONTROL_ID,                                                            
    "action_overwrite_cntrl",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  action_info.overwrite_control:\r\n"
    "  IF TRUE then Ethernet bridged packet will be overwrite by the ACL result\r\n"
    "  regardless of the bridge Forwarding Type. If FALSE then if the bridge\r\n"
    "  forwarding type is control then the ACL rule will not overwrite by the ACL\r\n"
    "  action.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl action_set ctn_ndx 0 action_cpu_cod 0 action_overwrite_cntrl 0\r\n"
    "  action_cos_prms_DP 0 action_cos_prms_TC 0 action_cos_prms_UP 0\r\n"
    "  action_policer_cntrllr 0 action_policer_pntr 0 action_tlf 0 action_typ 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(27)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACTION_SET_ACTION_SET_ACTION_INFO_COS_PARAMS_DP_ID,                                                            
    "action_cos_prms_DP",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  action_info.cos_params.DP:\r\n"
    "  Drop precedenceRange 0-3.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl action_set ctn_ndx 0 action_cpu_cod 0 action_overwrite_cntrl 0\r\n"
    "  action_cos_prms_DP 0 action_cos_prms_TC 0 action_cos_prms_UP 0\r\n"
    "  action_policer_cntrllr 0 action_policer_pntr 0 action_tlf 0 action_typ 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(27)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACTION_SET_ACTION_SET_ACTION_INFO_COS_PARAMS_TC_ID,                                                            
    "action_cos_prms_TC",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  action_info.cos_params.TC:\r\n"
    "  Traffic ClassRange 0-7.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl action_set ctn_ndx 0 action_cpu_cod 0 action_overwrite_cntrl 0\r\n"
    "  action_cos_prms_DP 0 action_cos_prms_TC 0 action_cos_prms_UP 0\r\n"
    "  action_policer_cntrllr 0 action_policer_pntr 0 action_tlf 0 action_typ 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(27)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACTION_SET_ACTION_SET_ACTION_INFO_COS_PARAMS_UP_ID,                                                            
    "action_cos_prms_UP",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  action_info.cos_params.UP:\r\n"
    "  User PriorityRange 0-7.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl action_set ctn_ndx 0 action_cpu_cod 0 action_overwrite_cntrl 0\r\n"
    "  action_cos_prms_DP 0 action_cos_prms_TC 0 action_cos_prms_UP 0\r\n"
    "  action_policer_cntrllr 0 action_policer_pntr 0 action_tlf 0 action_typ 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(27)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACTION_SET_ACTION_SET_ACTION_INFO_POLICER_CONTROLLER_ID,                                                            
    "action_policer_cntrllr",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  action_info.policer_controller:\r\n"
    "  Select the policer controller (set of parameters to control the actions\r\n"
    "  related to the Policer) results. Range 0-8. Relevant only if the acl action\r\n"
    "  type includes Policing.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl action_set ctn_ndx 0 action_cpu_cod 0 action_overwrite_cntrl 0\r\n"
    "  action_cos_prms_DP 0 action_cos_prms_TC 0 action_cos_prms_UP 0\r\n"
    "  action_policer_cntrllr 0 action_policer_pntr 0 action_tlf 0 action_typ 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(27)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACTION_SET_ACTION_SET_ACTION_INFO_POLICER_POINTER_ID,                                                            
    "action_policer_pntr",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  action_info.policer_pointer:\r\n"
    "  Select the policer to police the packets. Range 0-65535. Relevant only if the\r\n"
    "  acl action type includes Policing.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl action_set ctn_ndx 0 action_cpu_cod 0 action_overwrite_cntrl 0\r\n"
    "  action_cos_prms_DP 0 action_cos_prms_TC 0 action_cos_prms_UP 0\r\n"
    "  action_policer_cntrllr 0 action_policer_pntr 0 action_tlf 0 action_typ 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(27)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACTION_SET_ACTION_SET_ACTION_INFO_OUTLIF_ID,                                                            
    "action_tlf",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  action_info.outlif:\r\n"
    "  OutLIF to overwrite the exist value. The destination of the packet. In 802.1q\r\n"
    "  and 802.1ad this is the system port. Range 0-524287. Relevant only if the acl\r\n"
    "  action type includes OutLIF.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl action_set ctn_ndx 0 action_cpu_cod 0 action_overwrite_cntrl 0\r\n"
    "  action_cos_prms_DP 0 action_cos_prms_TC 0 action_cos_prms_UP 0\r\n"
    "  action_policer_cntrllr 0 action_policer_pntr 0 action_tlf 0 action_typ 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(27)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACTION_SET_ACTION_SET_ACTION_INFO_TYPE_ID,                                                            
    "action_typ",                                                                       
    (PARAM_VAL_RULES *)&TIMNA_ACL_ACTION_TYPE_rule[0],                                            
    (sizeof(TIMNA_ACL_ACTION_TYPE_rule) / sizeof(TIMNA_ACL_ACTION_TYPE_rule[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  action_info.type:\r\n"
    "  The type of the action, indicates which fields to modify. The rest of the\r\n"
    "  fields are considered / ignored according to this type. see\r\n"
    "  TIMNA_ACL_ACTION_TYPE. \r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl action_set ctn_ndx 0 action_cpu_cod 0 action_overwrite_cntrl 0\r\n"
    "  action_cos_prms_DP 0 action_cos_prms_TC 0 action_cos_prms_UP 0\r\n"
    "  action_policer_cntrllr 0 action_policer_pntr 0 action_tlf 0 action_typ 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(27)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACTION_GET_ACTION_GET_ID,                                                            
    "action_get",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Set the action info for the given id. Packets that their ACL lookups return\r\n"
    "  with this action id will be processed according to this action.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl action_get ctn_ndx 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(28)},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACTION_GET_ACTION_GET_ACTION_NDX_ID,                                                            
    "ctn_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  action_ndx:\r\n"
    "  The ID of the action. Range 0-524287.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl action_get ctn_ndx 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(28)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACTION_GET_BLOCK_ACTION_GET_BLOCK_ID,                                                            
    "action_get_block",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Gets block of actions. Gets the entries from the place pointed by the\r\n"
    "  pos_handle and read entries until getting 'entries_to_act' entries or until\r\n"
    "  scanning 'entries_to_scan' entries.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl action_get_block blck_rng_ntrs_to_act 0 blck_rng_ntrs_to_scn 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(29)},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACTION_GET_BLOCK_ACTION_GET_BLOCK_BLOCK_RANGE_ENTRIES_TO_ACT_ID,                                                            
    "blck_rng_ntrs_to_act",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  block_range.entries_to_act:\r\n"
    "  Number of valid ACEs to scan and act on in the ACL\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl action_get_block blck_rng_ntrs_to_act 0 blck_rng_ntrs_to_scn 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(29)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ACTION_GET_BLOCK_ACTION_GET_BLOCK_BLOCK_RANGE_ENTRIES_TO_SCAN_ID,                                                            
    "blck_rng_ntrs_to_scn",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  block_range.entries_to_scan:\r\n"
    "  Number of ACEs to scan in the ACL.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl action_get_block blck_rng_ntrs_to_act 0 blck_rng_ntrs_to_scn 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(29)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ETHER_TYPE_SET_ETHER_TYPE_SET_ID,                                                            
    "ether_type_set",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Set the Ethernet type in the given place. if packet ether type (in Ethernet\r\n"
    "  header) matches this ether_type, then the entry_ndx will be set in the\r\n"
    "  corresponding field in the key.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl ether_type_set ntry_ndx 0 thr_typ 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(30)},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ETHER_TYPE_SET_ETHER_TYPE_SET_ENTRY_NDX_ID,                                                            
    "ntry_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  entry_ndx:\r\n"
    "  The entry number in the Ethernet type encoding table.\r\n"
    "  Range 1-7.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl ether_type_set ntry_ndx 0 thr_typ 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(30)},                                                                              
    3,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ETHER_TYPE_SET_ETHER_TYPE_SET_ETHER_TYPE_ID,                                                            
    "thr_typ",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  ether_type:\r\n"
    "  the Ethernet type.\r\n"
    "  If the type in the packet matches this\r\n"
    "  type then entry_ndx will be place in the key.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl ether_type_set ntry_ndx 0 thr_typ 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(30)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ETHER_TYPE_GET_ETHER_TYPE_GET_ID,                                                            
    "ether_type_get",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Set the Ethernet type in the given place. if packet ether type (in Ethernet\r\n"
    "  header) matches this ether_type, then the entry_ndx will be set in the\r\n"
    "  corresponding field in the key.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl ether_type_get ntry_ndx 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(31)},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_ETHER_TYPE_GET_ETHER_TYPE_GET_ENTRY_NDX_ID,                                                            
    "ntry_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  entry_ndx:\r\n"
    "  The entry number in the Ethernet type encoding table.\r\n"
    "  Range 1-7.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl ether_type_get ntry_ndx 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(31)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_PROTOCOL_CODE_SET_PROTOCOL_CODE_SET_ID,                                                            
    "protocol_code_set",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Set the protocol code in the given place, so packet if packet protocol code\r\n"
    "  (in ipv4 header) matches this protocol code, then the entry_ndx will be set\r\n"
    "  in the corresponding field in the key.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl protocol_code_set ntry_ndx 0 prtcl_cod 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, 0, BIT(0)},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_PROTOCOL_CODE_SET_PROTOCOL_CODE_SET_ENTRY_NDX_ID,                                                            
    "ntry_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  entry_ndx:\r\n"
    "  The entry number in the Ethernet type encoding table.\r\n"
    "  Range 1-15.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl protocol_code_set ntry_ndx 0 prtcl_cod 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, 0, BIT(0)},                                                                              
    3,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_PROTOCOL_CODE_SET_PROTOCOL_CODE_SET_PROTOCOL_CODE_ID,                                                            
    "prtcl_cod",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  protocol_code:\r\n"
    "  the Protocol code. If the protocol code in the Ipv4 header\r\n"
    "  matches this protocol code then entry_ndx will be place in the\r\n"
    "  key in the corresponding field.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl protocol_code_set ntry_ndx 0 prtcl_cod 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, 0, BIT(0)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_PROTOCOL_CODE_GET_PROTOCOL_CODE_GET_ID,                                                            
    "protocol_code_get",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Set the protocol code in the given place, so packet if packet protocol code\r\n"
    "  (in ipv4 header) matches this protocol code, then the entry_ndx will be set\r\n"
    "  in the corresponding field in the key.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl protocol_code_get ntry_ndx 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, 0, BIT(1)},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_PROTOCOL_CODE_GET_PROTOCOL_CODE_GET_ENTRY_NDX_ID,                                                            
    "ntry_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  entry_ndx:\r\n"
    "  The entry number in the Ethernet type encoding table.\r\n"
    "  Range 1-15.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl protocol_code_get ntry_ndx 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, 0, BIT(1)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_L4_PORT_RANGE_SET_L4_PORT_RANGE_SET_ID,                                                            
    "l4_port_range_set",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Set the l4 source/destination port ranges in the given place. If packet\r\n"
    "  sourced/designated to l4 port number in the given range, then the bit in the\r\n"
    "  entry_ndx place will be set in the corresponding field in the key.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl l4_port_range_set ntry_ndx 0 prts_rng_max_prt 0\r\n"
    "  prts_rng_min_prt 0 prts_rng_is_src_prt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, 0, BIT(2)},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_L4_PORT_RANGE_SET_L4_PORT_RANGE_SET_ENTRY_NDX_ID,                                                            
    "ntry_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  entry_ndx:\r\n"
    "  The entry number in the Ethernet type encoding table.\r\n"
    "  Range 1-15.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl l4_port_range_set ntry_ndx 0 prts_rng_max_prt 0\r\n"
    "  prts_rng_min_prt 0 prts_rng_is_src_prt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, 0, BIT(2)},                                                                              
    3,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_L4_PORT_RANGE_SET_L4_PORT_RANGE_SET_PORTS_RANGE_MAX_PORT_ID,                                                            
    "prts_rng_max_prt",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  ports_range.max_port:\r\n"
    "  The maximum port in the range. Size: 16 bits. Range 0-65535.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl l4_port_range_set ntry_ndx 0 prts_rng_max_prt 0\r\n"
    "  prts_rng_min_prt 0 prts_rng_is_src_prt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, 0, BIT(2)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_L4_PORT_RANGE_SET_L4_PORT_RANGE_SET_PORTS_RANGE_MIN_PORT_ID,                                                            
    "prts_rng_min_prt",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  ports_range.min_port:\r\n"
    "  The minimum port in the range. Size: 16 bits. Range 0-65535.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl l4_port_range_set ntry_ndx 0 prts_rng_max_prt 0\r\n"
    "  prts_rng_min_prt 0 prts_rng_is_src_prt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, 0, BIT(2)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_L4_PORT_RANGE_SET_L4_PORT_RANGE_SET_PORTS_RANGE_IS_SRC_PORT_ID,                                                            
    "prts_rng_is_src_prt",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  ports_range.is_src_port:\r\n"
    "  If TRUE then this define a source port range. Otherwise it defines a\r\n"
    "  destination l4 port range. Size: 10 bits.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl l4_port_range_set ntry_ndx 0 prts_rng_max_prt 0\r\n"
    "  prts_rng_min_prt 0 prts_rng_is_src_prt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, 0, BIT(2)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_L4_PORT_RANGE_GET_L4_PORT_RANGE_GET_ID,                                                            
    "l4_port_range_get",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Set the l4 source/destination port ranges in the given place. If packet\r\n"
    "  sourced/designated to l4 port number in the given range, then the bit in the\r\n"
    "  entry_ndx place will be set in the corresponding field in the key.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl l4_port_range_get ntry_ndx 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, 0, BIT(3)},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_L4_PORT_RANGE_GET_L4_PORT_RANGE_GET_ENTRY_NDX_ID,                                                            
    "ntry_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  entry_ndx:\r\n"
    "  The entry number in the Ethernet type encoding table.\r\n"
    "  Range 1-15.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl l4_port_range_get ntry_ndx 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, 0, BIT(3)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_TEMPLATE_ADD_TEMPLATE_ADD_ID,                                                            
    "template_add",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Add ACL (Access Control List) of predefined key templates, and associate it\r\n"
    "  with the given traffic type, so packets terminated or processed of this\r\n"
    "  traffic type will be matched against the ACEs (Access Control Entries) of the\r\n"
    "  given ACL.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl template_add predefined_tmplt 0 size 0 traffic_type\r\n"
    "  0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, 0, BIT(4)},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_TEMPLATE_ADD_TEMPLATE_ADD_ACL_INFO_PREDEFINED_TEMPLATE_ID,                                                            
    "predefined_tmplt",                                                                       
    (PARAM_VAL_RULES *)&TIMNA_ACL_KEY_TEMPLATE_rule[0],                                            
    (sizeof(TIMNA_ACL_KEY_TEMPLATE_rule) / sizeof(TIMNA_ACL_KEY_TEMPLATE_rule[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  acl_info.predefined_template:\r\n"
    "  Predefined templates that determine which fields of the packets to be\r\n"
    "  examined.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl template_add predefined_tmplt 0 size 0 traffic_type\r\n"
    "  0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, 0, BIT(4)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_TEMPLATE_ADD_TEMPLATE_ADD_ACL_INFO_SIZE_ID,                                                            
    "size",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  acl_info.size:\r\n"
    "  Capacity of the ACL, maximum number of ACEs.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl template_add predefined_tmplt 0 size 0 traffic_type\r\n"
    "  0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, 0, BIT(4)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_TEMPLATE_ADD_TEMPLATE_ADD_ACL_INFO_TRAFFIC_ID,                                                            
    "traffic_type",                                                                       
    (PARAM_VAL_RULES *)&TIMNA_ACL_TRAFFIC_TYPE_rule[0],                                            
    (sizeof(TIMNA_ACL_TRAFFIC_TYPE_rule) / sizeof(TIMNA_ACL_TRAFFIC_TYPE_rule[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  acl_info.traffic:\r\n"
    "  The type of the client of the ACL (termination (Ethernet...), or main engine\r\n"
    "  (Ethernet...) \r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl template_add predefined_tmplt 0 size 0 traffic_type\r\n"
    "  0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, 0, BIT(4)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_5_TUPLES_ACE_ADD_5_TUPLES_ACE_ADD_ID,                                                            
    "5_tuples_ace_add",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Add ACE of type 5-tuples (destination IP address, source IP address, protocol\r\n"
    "  number and source/destination transport numbers). (Access Control List), and\r\n"
    "  associate it with the given client, so packets terminated or processed\r\n"
    "  according to the given client will be matched against the ACEs (Access\r\n"
    "  Control Entries) of the given ACL.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl 5_tuples_ace_add acl_ndx 0 ace_ndx 0 general_nlf_vld 0\r\n"
    "  general_nlf 0 general_vsd_vld 0 general_vsd 0\r\n"
    "  general_lcl_prt_vld 0 general_lcl_prt 0 ace_fiv_tpls_prtcl_cod_vld\r\n"
    "  0 ace_fiv_tpls_prtcl_cod 0 ace_fiv_tpls_dst_prt_msk 0 ace_fiv_tpls_dst_prt 0\r\n"
    "  ace_fiv_tpls_src_prt_msk 0 ace_fiv_tpls_src_prt 0\r\n"
    "  ace_fiv_tpls_dst_ip_prfx_len 0 ace_fiv_tpls_dst_ip_ip_ddrss 0\r\n"
    "  ace_fiv_tpls_src_ip_prfx_len 0 ace_fiv_tpls_src_ip_ip_ddrss 0 action_cpu_cod\r\n"
    "  0 action_overwrite_cntrl 0 action_cos_prms_DP 0 action_cos_prms_TC 0\r\n"
    "  action_cos_prms_UP 0 action_policer_cntrllr 0 action_policer_pntr 0 action_tlf\r\n"
    "  0 action_typ 0 vrwrt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, 0, BIT(5)},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_5_TUPLES_ACE_ADD_5_TUPLES_ACE_ADD_ACL_NDX_ID,                                                            
    "acl_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  acl_ndx:\r\n"
    "  ACL ID to add to. Range 0-7.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl 5_tuples_ace_add acl_ndx 0 ace_ndx 0 general_nlf_vld 0\r\n"
    "  general_nlf 0 general_vsd_vld 0 general_vsd 0\r\n"
    "  general_lcl_prt_vld 0 general_lcl_prt 0 ace_fiv_tpls_prtcl_cod_vld\r\n"
    "  0 ace_fiv_tpls_prtcl_cod 0 ace_fiv_tpls_dst_prt_msk 0 ace_fiv_tpls_dst_prt 0\r\n"
    "  ace_fiv_tpls_src_prt_msk 0 ace_fiv_tpls_src_prt 0\r\n"
    "  ace_fiv_tpls_dst_ip_prfx_len 0 ace_fiv_tpls_dst_ip_ip_ddrss 0\r\n"
    "  ace_fiv_tpls_src_ip_prfx_len 0 ace_fiv_tpls_src_ip_ip_ddrss 0 action_cpu_cod\r\n"
    "  0 action_overwrite_cntrl 0 action_cos_prms_DP 0 action_cos_prms_TC 0\r\n"
    "  action_cos_prms_UP 0 action_policer_cntrllr 0 action_policer_pntr 0 action_tlf\r\n"
    "  0 action_typ 0 vrwrt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, 0, BIT(5)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_5_TUPLES_ACE_ADD_5_TUPLES_ACE_ADD_ACE_NDX_ID,                                                            
    "ace_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  ace_ndx:\r\n"
    "  The entry index to add the ACE to. The smaller the ace_ndx,\r\n"
    "  the higher will be the priority of the ACE. Range 0-(ACL size-\r\n"
    "  1).\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl 5_tuples_ace_add acl_ndx 0 ace_ndx 0 general_nlf_vld 0\r\n"
    "  general_nlf 0 general_vsd_vld 0 general_vsd 0\r\n"
    "  general_lcl_prt_vld 0 general_lcl_prt 0 ace_fiv_tpls_prtcl_cod_vld\r\n"
    "  0 ace_fiv_tpls_prtcl_cod 0 ace_fiv_tpls_dst_prt_msk 0 ace_fiv_tpls_dst_prt 0\r\n"
    "  ace_fiv_tpls_src_prt_msk 0 ace_fiv_tpls_src_prt 0\r\n"
    "  ace_fiv_tpls_dst_ip_prfx_len 0 ace_fiv_tpls_dst_ip_ip_ddrss 0\r\n"
    "  ace_fiv_tpls_src_ip_prfx_len 0 ace_fiv_tpls_src_ip_ip_ddrss 0 action_cpu_cod\r\n"
    "  0 action_overwrite_cntrl 0 action_cos_prms_DP 0 action_cos_prms_TC 0\r\n"
    "  action_cos_prms_UP 0 action_policer_cntrllr 0 action_policer_pntr 0 action_tlf\r\n"
    "  0 action_typ 0 vrwrt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, 0, BIT(5)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_5_TUPLES_ACE_ADD_5_TUPLES_ACE_ADD_ACE_GENERAL_INFO_INLIF_VALID_ID,                                                            
    "general_nlf_vld",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  ace.general_info.inlif_valid:\r\n"
    "  If TRUE then inlif considered as part of the ACE. Otherwise it masked. \r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl 5_tuples_ace_add acl_ndx 0 ace_ndx 0 general_nlf_vld 0\r\n"
    "  general_nlf 0 general_vsd_vld 0 general_vsd 0\r\n"
    "  general_lcl_prt_vld 0 general_lcl_prt 0 ace_fiv_tpls_prtcl_cod_vld\r\n"
    "  0 ace_fiv_tpls_prtcl_cod 0 ace_fiv_tpls_dst_prt_msk 0 ace_fiv_tpls_dst_prt 0\r\n"
    "  ace_fiv_tpls_src_prt_msk 0 ace_fiv_tpls_src_prt 0\r\n"
    "  ace_fiv_tpls_dst_ip_prfx_len 0 ace_fiv_tpls_dst_ip_ip_ddrss 0\r\n"
    "  ace_fiv_tpls_src_ip_prfx_len 0 ace_fiv_tpls_src_ip_ip_ddrss 0 action_cpu_cod\r\n"
    "  0 action_overwrite_cntrl 0 action_cos_prms_DP 0 action_cos_prms_TC 0\r\n"
    "  action_cos_prms_UP 0 action_policer_cntrllr 0 action_policer_pntr 0 action_tlf\r\n"
    "  0 action_typ 0 vrwrt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, 0, BIT(5)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_5_TUPLES_ACE_ADD_5_TUPLES_ACE_ADD_ACE_GENERAL_INFO_INLIF_ID,                                                            
    "general_nlf",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  ace.general_info.inlif:\r\n"
    "  The source Id of the packet. In 802.1AD and 802.1Q it is the system port ID.\r\n"
    "  Size: 19 bits. Range 0-(16k-1). \r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl 5_tuples_ace_add acl_ndx 0 ace_ndx 0 general_nlf_vld 0\r\n"
    "  general_nlf 0 general_vsd_vld 0 general_vsd 0\r\n"
    "  general_lcl_prt_vld 0 general_lcl_prt 0 ace_fiv_tpls_prtcl_cod_vld\r\n"
    "  0 ace_fiv_tpls_prtcl_cod 0 ace_fiv_tpls_dst_prt_msk 0 ace_fiv_tpls_dst_prt 0\r\n"
    "  ace_fiv_tpls_src_prt_msk 0 ace_fiv_tpls_src_prt 0\r\n"
    "  ace_fiv_tpls_dst_ip_prfx_len 0 ace_fiv_tpls_dst_ip_ip_ddrss 0\r\n"
    "  ace_fiv_tpls_src_ip_prfx_len 0 ace_fiv_tpls_src_ip_ip_ddrss 0 action_cpu_cod\r\n"
    "  0 action_overwrite_cntrl 0 action_cos_prms_DP 0 action_cos_prms_TC 0\r\n"
    "  action_cos_prms_UP 0 action_policer_cntrllr 0 action_policer_pntr 0 action_tlf\r\n"
    "  0 action_typ 0 vrwrt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, 0, BIT(5)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_5_TUPLES_ACE_ADD_5_TUPLES_ACE_ADD_ACE_GENERAL_INFO_VSID_VALID_ID,                                                            
    "general_vsd_vld",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  ace.general_info.vsid_valid:\r\n"
    "  If TRUE then vsid considered as part of the ACE. Otherwise it masked. \r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl 5_tuples_ace_add acl_ndx 0 ace_ndx 0 general_nlf_vld 0\r\n"
    "  general_nlf 0 general_vsd_vld 0 general_vsd 0\r\n"
    "  general_lcl_prt_vld 0 general_lcl_prt 0 ace_fiv_tpls_prtcl_cod_vld\r\n"
    "  0 ace_fiv_tpls_prtcl_cod 0 ace_fiv_tpls_dst_prt_msk 0 ace_fiv_tpls_dst_prt 0\r\n"
    "  ace_fiv_tpls_src_prt_msk 0 ace_fiv_tpls_src_prt 0\r\n"
    "  ace_fiv_tpls_dst_ip_prfx_len 0 ace_fiv_tpls_dst_ip_ip_ddrss 0\r\n"
    "  ace_fiv_tpls_src_ip_prfx_len 0 ace_fiv_tpls_src_ip_ip_ddrss 0 action_cpu_cod\r\n"
    "  0 action_overwrite_cntrl 0 action_cos_prms_DP 0 action_cos_prms_TC 0\r\n"
    "  action_cos_prms_UP 0 action_policer_cntrllr 0 action_policer_pntr 0 action_tlf\r\n"
    "  0 action_typ 0 vrwrt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, 0, BIT(5)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_5_TUPLES_ACE_ADD_5_TUPLES_ACE_ADD_ACE_GENERAL_INFO_VSID_ID,                                                            
    "general_vsd",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  ace.general_info.vsid:\r\n"
    "  Virtual Switch ID. Size: 14 bits. Range 0-(16k-1).\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl 5_tuples_ace_add acl_ndx 0 ace_ndx 0 general_nlf_vld 0\r\n"
    "  general_nlf 0 general_vsd_vld 0 general_vsd 0\r\n"
    "  general_lcl_prt_vld 0 general_lcl_prt 0 ace_fiv_tpls_prtcl_cod_vld\r\n"
    "  0 ace_fiv_tpls_prtcl_cod 0 ace_fiv_tpls_dst_prt_msk 0 ace_fiv_tpls_dst_prt 0\r\n"
    "  ace_fiv_tpls_src_prt_msk 0 ace_fiv_tpls_src_prt 0\r\n"
    "  ace_fiv_tpls_dst_ip_prfx_len 0 ace_fiv_tpls_dst_ip_ip_ddrss 0\r\n"
    "  ace_fiv_tpls_src_ip_prfx_len 0 ace_fiv_tpls_src_ip_ip_ddrss 0 action_cpu_cod\r\n"
    "  0 action_overwrite_cntrl 0 action_cos_prms_DP 0 action_cos_prms_TC 0\r\n"
    "  action_cos_prms_UP 0 action_policer_cntrllr 0 action_policer_pntr 0 action_tlf\r\n"
    "  0 action_typ 0 vrwrt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, 0, BIT(5)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_5_TUPLES_ACE_ADD_5_TUPLES_ACE_ADD_ACE_GENERAL_INFO_LOCAL_PORT_VALID_ID,                                                            
    "general_lcl_prt_vld",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  ace.general_info.local_port_valid:\r\n"
    "  If TRUE then local_port considered as part of the ACE. Otherwise it masked. \r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl 5_tuples_ace_add acl_ndx 0 ace_ndx 0 general_nlf_vld 0\r\n"
    "  general_nlf 0 general_vsd_vld 0 general_vsd 0\r\n"
    "  general_lcl_prt_vld 0 general_lcl_prt 0 ace_fiv_tpls_prtcl_cod_vld\r\n"
    "  0 ace_fiv_tpls_prtcl_cod 0 ace_fiv_tpls_dst_prt_msk 0 ace_fiv_tpls_dst_prt 0\r\n"
    "  ace_fiv_tpls_src_prt_msk 0 ace_fiv_tpls_src_prt 0\r\n"
    "  ace_fiv_tpls_dst_ip_prfx_len 0 ace_fiv_tpls_dst_ip_ip_ddrss 0\r\n"
    "  ace_fiv_tpls_src_ip_prfx_len 0 ace_fiv_tpls_src_ip_ip_ddrss 0 action_cpu_cod\r\n"
    "  0 action_overwrite_cntrl 0 action_cos_prms_DP 0 action_cos_prms_TC 0\r\n"
    "  action_cos_prms_UP 0 action_policer_cntrllr 0 action_policer_pntr 0 action_tlf\r\n"
    "  0 action_typ 0 vrwrt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, 0, BIT(5)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_5_TUPLES_ACE_ADD_5_TUPLES_ACE_ADD_ACE_GENERAL_INFO_LOCAL_PORT_ID,                                                            
    "general_lcl_prt",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  ace.general_info.local_port:\r\n"
    "  Local port Id. Size: 6 bits. Range 0-31.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl 5_tuples_ace_add acl_ndx 0 ace_ndx 0 general_nlf_vld 0\r\n"
    "  general_nlf 0 general_vsd_vld 0 general_vsd 0\r\n"
    "  general_lcl_prt_vld 0 general_lcl_prt 0 ace_fiv_tpls_prtcl_cod_vld\r\n"
    "  0 ace_fiv_tpls_prtcl_cod 0 ace_fiv_tpls_dst_prt_msk 0 ace_fiv_tpls_dst_prt 0\r\n"
    "  ace_fiv_tpls_src_prt_msk 0 ace_fiv_tpls_src_prt 0\r\n"
    "  ace_fiv_tpls_dst_ip_prfx_len 0 ace_fiv_tpls_dst_ip_ip_ddrss 0\r\n"
    "  ace_fiv_tpls_src_ip_prfx_len 0 ace_fiv_tpls_src_ip_ip_ddrss 0 action_cpu_cod\r\n"
    "  0 action_overwrite_cntrl 0 action_cos_prms_DP 0 action_cos_prms_TC 0\r\n"
    "  action_cos_prms_UP 0 action_policer_cntrllr 0 action_policer_pntr 0 action_tlf\r\n"
    "  0 action_typ 0 vrwrt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, 0, BIT(5)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_5_TUPLES_ACE_ADD_5_TUPLES_ACE_ADD_ACE_FIVE_TUPLES_PROTOCOL_CODE_VALID_ID,                                                            
    "ace_fiv_tpls_prtcl_cod_vld",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  ace.five_tuples.protocol_code_valid:\r\n"
    "  If TRUE then protocol code considered as part of the ACE. Otherwise it masked\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl 5_tuples_ace_add acl_ndx 0 ace_ndx 0 general_nlf_vld 0\r\n"
    "  general_nlf 0 general_vsd_vld 0 general_vsd 0\r\n"
    "  general_lcl_prt_vld 0 general_lcl_prt 0 ace_fiv_tpls_prtcl_cod_vld\r\n"
    "  0 ace_fiv_tpls_prtcl_cod 0 ace_fiv_tpls_dst_prt_msk 0 ace_fiv_tpls_dst_prt 0\r\n"
    "  ace_fiv_tpls_src_prt_msk 0 ace_fiv_tpls_src_prt 0\r\n"
    "  ace_fiv_tpls_dst_ip_prfx_len 0 ace_fiv_tpls_dst_ip_ip_ddrss 0\r\n"
    "  ace_fiv_tpls_src_ip_prfx_len 0 ace_fiv_tpls_src_ip_ip_ddrss 0 action_cpu_cod\r\n"
    "  0 action_overwrite_cntrl 0 action_cos_prms_DP 0 action_cos_prms_TC 0\r\n"
    "  action_cos_prms_UP 0 action_policer_cntrllr 0 action_policer_pntr 0 action_tlf\r\n"
    "  0 action_typ 0 vrwrt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, 0, BIT(5)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_5_TUPLES_ACE_ADD_5_TUPLES_ACE_ADD_ACE_FIVE_TUPLES_PROTOCOL_CODE_ID,                                                            
    "ace_fiv_tpls_prtcl_cod",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  ace.five_tuples.protocol_code:\r\n"
    "  The Protocol field from the Ipv4 header. Size: 8 bits. Range 0-255.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl 5_tuples_ace_add acl_ndx 0 ace_ndx 0 general_nlf_vld 0\r\n"
    "  general_nlf 0 general_vsd_vld 0 general_vsd 0\r\n"
    "  general_lcl_prt_vld 0 general_lcl_prt 0 ace_fiv_tpls_prtcl_cod_vld\r\n"
    "  0 ace_fiv_tpls_prtcl_cod 0 ace_fiv_tpls_dst_prt_msk 0 ace_fiv_tpls_dst_prt 0\r\n"
    "  ace_fiv_tpls_src_prt_msk 0 ace_fiv_tpls_src_prt 0\r\n"
    "  ace_fiv_tpls_dst_ip_prfx_len 0 ace_fiv_tpls_dst_ip_ip_ddrss 0\r\n"
    "  ace_fiv_tpls_src_ip_prfx_len 0 ace_fiv_tpls_src_ip_ip_ddrss 0 action_cpu_cod\r\n"
    "  0 action_overwrite_cntrl 0 action_cos_prms_DP 0 action_cos_prms_TC 0\r\n"
    "  action_cos_prms_UP 0 action_policer_cntrllr 0 action_policer_pntr 0 action_tlf\r\n"
    "  0 action_typ 0 vrwrt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, 0, BIT(5)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_5_TUPLES_ACE_ADD_5_TUPLES_ACE_ADD_ACE_FIVE_TUPLES_DEST_PORT_MASK_ID,                                                            
    "ace_fiv_tpls_dst_prt_msk",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  ace.five_tuples.dest_port_mask:\r\n"
    "  A mask on the dest_port (bitmap) indicates which bits to consider and which\r\n"
    "  are masked. 0 indicates all bits are masked, 0Xffff indicates to consider all\r\n"
    "  the bits in the key.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl 5_tuples_ace_add acl_ndx 0 ace_ndx 0 general_nlf_vld 0\r\n"
    "  general_nlf 0 general_vsd_vld 0 general_vsd 0\r\n"
    "  general_lcl_prt_vld 0 general_lcl_prt 0 ace_fiv_tpls_prtcl_cod_vld\r\n"
    "  0 ace_fiv_tpls_prtcl_cod 0 ace_fiv_tpls_dst_prt_msk 0 ace_fiv_tpls_dst_prt 0\r\n"
    "  ace_fiv_tpls_src_prt_msk 0 ace_fiv_tpls_src_prt 0\r\n"
    "  ace_fiv_tpls_dst_ip_prfx_len 0 ace_fiv_tpls_dst_ip_ip_ddrss 0\r\n"
    "  ace_fiv_tpls_src_ip_prfx_len 0 ace_fiv_tpls_src_ip_ip_ddrss 0 action_cpu_cod\r\n"
    "  0 action_overwrite_cntrl 0 action_cos_prms_DP 0 action_cos_prms_TC 0\r\n"
    "  action_cos_prms_UP 0 action_policer_cntrllr 0 action_policer_pntr 0 action_tlf\r\n"
    "  0 action_typ 0 vrwrt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, 0, BIT(5)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_5_TUPLES_ACE_ADD_5_TUPLES_ACE_ADD_ACE_FIVE_TUPLES_DEST_PORT_ID,                                                            
    "ace_fiv_tpls_dst_prt",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  ace.five_tuples.dest_port:\r\n"
    "  Layer 4 Destination Port, second 16b after IPv4 header.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl 5_tuples_ace_add acl_ndx 0 ace_ndx 0 general_nlf_vld 0\r\n"
    "  general_nlf 0 general_vsd_vld 0 general_vsd 0\r\n"
    "  general_lcl_prt_vld 0 general_lcl_prt 0 ace_fiv_tpls_prtcl_cod_vld\r\n"
    "  0 ace_fiv_tpls_prtcl_cod 0 ace_fiv_tpls_dst_prt_msk 0 ace_fiv_tpls_dst_prt 0\r\n"
    "  ace_fiv_tpls_src_prt_msk 0 ace_fiv_tpls_src_prt 0\r\n"
    "  ace_fiv_tpls_dst_ip_prfx_len 0 ace_fiv_tpls_dst_ip_ip_ddrss 0\r\n"
    "  ace_fiv_tpls_src_ip_prfx_len 0 ace_fiv_tpls_src_ip_ip_ddrss 0 action_cpu_cod\r\n"
    "  0 action_overwrite_cntrl 0 action_cos_prms_DP 0 action_cos_prms_TC 0\r\n"
    "  action_cos_prms_UP 0 action_policer_cntrllr 0 action_policer_pntr 0 action_tlf\r\n"
    "  0 action_typ 0 vrwrt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, 0, BIT(5)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_5_TUPLES_ACE_ADD_5_TUPLES_ACE_ADD_ACE_FIVE_TUPLES_SRC_PORT_MASK_ID,                                                            
    "ace_fiv_tpls_src_prt_msk",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  ace.five_tuples.src_port_mask:\r\n"
    "  A mask on the src_port (bitmap) indicates which bits to consider and which\r\n"
    "  are masked. 0 indicates all bits are masked, 0Xffff indicates to consider all\r\n"
    "  the bits in the key.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl 5_tuples_ace_add acl_ndx 0 ace_ndx 0 general_nlf_vld 0\r\n"
    "  general_nlf 0 general_vsd_vld 0 general_vsd 0\r\n"
    "  general_lcl_prt_vld 0 general_lcl_prt 0 ace_fiv_tpls_prtcl_cod_vld\r\n"
    "  0 ace_fiv_tpls_prtcl_cod 0 ace_fiv_tpls_dst_prt_msk 0 ace_fiv_tpls_dst_prt 0\r\n"
    "  ace_fiv_tpls_src_prt_msk 0 ace_fiv_tpls_src_prt 0\r\n"
    "  ace_fiv_tpls_dst_ip_prfx_len 0 ace_fiv_tpls_dst_ip_ip_ddrss 0\r\n"
    "  ace_fiv_tpls_src_ip_prfx_len 0 ace_fiv_tpls_src_ip_ip_ddrss 0 action_cpu_cod\r\n"
    "  0 action_overwrite_cntrl 0 action_cos_prms_DP 0 action_cos_prms_TC 0\r\n"
    "  action_cos_prms_UP 0 action_policer_cntrllr 0 action_policer_pntr 0 action_tlf\r\n"
    "  0 action_typ 0 vrwrt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, 0, BIT(5)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_5_TUPLES_ACE_ADD_5_TUPLES_ACE_ADD_ACE_FIVE_TUPLES_SRC_PORT_ID,                                                            
    "ace_fiv_tpls_src_prt",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  ace.five_tuples.src_port:\r\n"
    "  Layer 4 Source Port, first 16b after IPv4 header.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl 5_tuples_ace_add acl_ndx 0 ace_ndx 0 general_nlf_vld 0\r\n"
    "  general_nlf 0 general_vsd_vld 0 general_vsd 0\r\n"
    "  general_lcl_prt_vld 0 general_lcl_prt 0 ace_fiv_tpls_prtcl_cod_vld\r\n"
    "  0 ace_fiv_tpls_prtcl_cod 0 ace_fiv_tpls_dst_prt_msk 0 ace_fiv_tpls_dst_prt 0\r\n"
    "  ace_fiv_tpls_src_prt_msk 0 ace_fiv_tpls_src_prt 0\r\n"
    "  ace_fiv_tpls_dst_ip_prfx_len 0 ace_fiv_tpls_dst_ip_ip_ddrss 0\r\n"
    "  ace_fiv_tpls_src_ip_prfx_len 0 ace_fiv_tpls_src_ip_ip_ddrss 0 action_cpu_cod\r\n"
    "  0 action_overwrite_cntrl 0 action_cos_prms_DP 0 action_cos_prms_TC 0\r\n"
    "  action_cos_prms_UP 0 action_policer_cntrllr 0 action_policer_pntr 0 action_tlf\r\n"
    "  0 action_typ 0 vrwrt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, 0, BIT(5)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_5_TUPLES_ACE_ADD_5_TUPLES_ACE_ADD_ACE_FIVE_TUPLES_DEST_IP_PREFIX_LEN_ID,                                                            
    "ace_fiv_tpls_dst_ip_prfx_len",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  ace.five_tuples.dest_ip.prefix_len:\r\n"
    "  Number of bits to consider in the IP address starting from the msb. Range\r\n"
    "  0-32.Example for key ip_address 192.168.1.0 and prefix_len 24 would match any\r\n"
    "  IP Destination Address of the form 192.168.1.x \r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl 5_tuples_ace_add acl_ndx 0 ace_ndx 0 general_nlf_vld 0\r\n"
    "  general_nlf 0 general_vsd_vld 0 general_vsd 0\r\n"
    "  general_lcl_prt_vld 0 general_lcl_prt 0 ace_fiv_tpls_prtcl_cod_vld\r\n"
    "  0 ace_fiv_tpls_prtcl_cod 0 ace_fiv_tpls_dst_prt_msk 0 ace_fiv_tpls_dst_prt 0\r\n"
    "  ace_fiv_tpls_src_prt_msk 0 ace_fiv_tpls_src_prt 0\r\n"
    "  ace_fiv_tpls_dst_ip_prfx_len 0 ace_fiv_tpls_dst_ip_ip_ddrss 0\r\n"
    "  ace_fiv_tpls_src_ip_prfx_len 0 ace_fiv_tpls_src_ip_ip_ddrss 0 action_cpu_cod\r\n"
    "  0 action_overwrite_cntrl 0 action_cos_prms_DP 0 action_cos_prms_TC 0\r\n"
    "  action_cos_prms_UP 0 action_policer_cntrllr 0 action_policer_pntr 0 action_tlf\r\n"
    "  0 action_typ 0 vrwrt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, 0, BIT(5)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_5_TUPLES_ACE_ADD_5_TUPLES_ACE_ADD_ACE_FIVE_TUPLES_DEST_IP_IP_ADDRESS_ID,                                                            
    "ace_fiv_tpls_dst_ip_ip_ddrss",                                                                       
    (PARAM_VAL_RULES *)&Subnet_ip_rule[0],                                            
    (sizeof(Subnet_ip_rule) / sizeof(Subnet_ip_rule[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  ace.five_tuples.dest_ip.ip_address:\r\n"
    "  Ipv4 address.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl 5_tuples_ace_add acl_ndx 0 ace_ndx 0 general_nlf_vld 0\r\n"
    "  general_nlf 0 general_vsd_vld 0 general_vsd 0\r\n"
    "  general_lcl_prt_vld 0 general_lcl_prt 0 ace_fiv_tpls_prtcl_cod_vld\r\n"
    "  0 ace_fiv_tpls_prtcl_cod 0 ace_fiv_tpls_dst_prt_msk 0 ace_fiv_tpls_dst_prt 0\r\n"
    "  ace_fiv_tpls_src_prt_msk 0 ace_fiv_tpls_src_prt 0\r\n"
    "  ace_fiv_tpls_dst_ip_prfx_len 0 ace_fiv_tpls_dst_ip_ip_ddrss 0\r\n"
    "  ace_fiv_tpls_src_ip_prfx_len 0 ace_fiv_tpls_src_ip_ip_ddrss 0 action_cpu_cod\r\n"
    "  0 action_overwrite_cntrl 0 action_cos_prms_DP 0 action_cos_prms_TC 0\r\n"
    "  action_cos_prms_UP 0 action_policer_cntrllr 0 action_policer_pntr 0 action_tlf\r\n"
    "  0 action_typ 0 vrwrt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, 0, BIT(5)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_5_TUPLES_ACE_ADD_5_TUPLES_ACE_ADD_ACE_FIVE_TUPLES_SRC_IP_PREFIX_LEN_ID,                                                            
    "ace_fiv_tpls_src_ip_prfx_len",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  ace.five_tuples.src_ip.prefix_len:\r\n"
    "  Number of bits to consider in the IP address starting from the msb. Range\r\n"
    "  0-32.Example for key ip_address 192.168.1.0 and prefix_len 24 would match any\r\n"
    "  IP Destination Address of the form 192.168.1.x \r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl 5_tuples_ace_add acl_ndx 0 ace_ndx 0 general_nlf_vld 0\r\n"
    "  general_nlf 0 general_vsd_vld 0 general_vsd 0\r\n"
    "  general_lcl_prt_vld 0 general_lcl_prt 0 ace_fiv_tpls_prtcl_cod_vld\r\n"
    "  0 ace_fiv_tpls_prtcl_cod 0 ace_fiv_tpls_dst_prt_msk 0 ace_fiv_tpls_dst_prt 0\r\n"
    "  ace_fiv_tpls_src_prt_msk 0 ace_fiv_tpls_src_prt 0\r\n"
    "  ace_fiv_tpls_dst_ip_prfx_len 0 ace_fiv_tpls_dst_ip_ip_ddrss 0\r\n"
    "  ace_fiv_tpls_src_ip_prfx_len 0 ace_fiv_tpls_src_ip_ip_ddrss 0 action_cpu_cod\r\n"
    "  0 action_overwrite_cntrl 0 action_cos_prms_DP 0 action_cos_prms_TC 0\r\n"
    "  action_cos_prms_UP 0 action_policer_cntrllr 0 action_policer_pntr 0 action_tlf\r\n"
    "  0 action_typ 0 vrwrt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, 0, BIT(5)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_5_TUPLES_ACE_ADD_5_TUPLES_ACE_ADD_ACE_FIVE_TUPLES_SRC_IP_IP_ADDRESS_ID,                                                            
    "ace_fiv_tpls_src_ip_ip_ddrss",                                                                       
    (PARAM_VAL_RULES *)&Subnet_ip_rule[0],                                            
    (sizeof(Subnet_ip_rule) / sizeof(Subnet_ip_rule[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  ace.five_tuples.src_ip.ip_address:\r\n"
    "  Ipv4 address.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl 5_tuples_ace_add acl_ndx 0 ace_ndx 0 general_nlf_vld 0\r\n"
    "  general_nlf 0 general_vsd_vld 0 general_vsd 0\r\n"
    "  general_lcl_prt_vld 0 general_lcl_prt 0 ace_fiv_tpls_prtcl_cod_vld\r\n"
    "  0 ace_fiv_tpls_prtcl_cod 0 ace_fiv_tpls_dst_prt_msk 0 ace_fiv_tpls_dst_prt 0\r\n"
    "  ace_fiv_tpls_src_prt_msk 0 ace_fiv_tpls_src_prt 0\r\n"
    "  ace_fiv_tpls_dst_ip_prfx_len 0 ace_fiv_tpls_dst_ip_ip_ddrss 0\r\n"
    "  ace_fiv_tpls_src_ip_prfx_len 0 ace_fiv_tpls_src_ip_ip_ddrss 0 action_cpu_cod\r\n"
    "  0 action_overwrite_cntrl 0 action_cos_prms_DP 0 action_cos_prms_TC 0\r\n"
    "  action_cos_prms_UP 0 action_policer_cntrllr 0 action_policer_pntr 0 action_tlf\r\n"
    "  0 action_typ 0 vrwrt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, 0, BIT(5)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_5_TUPLES_ACE_ADD_5_TUPLES_ACE_ADD_ACTION_INFO_CPU_CODE_ID,                                                            
    "action_cpu_cod",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  action_info.cpu_code:\r\n"
    "  Code to be sent in the packets header to the CPU. Relevant only if the ACL\r\n"
    "  action type includes OutLIF.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl 5_tuples_ace_add acl_ndx 0 ace_ndx 0 general_nlf_vld 0\r\n"
    "  general_nlf 0 general_vsd_vld 0 general_vsd 0\r\n"
    "  general_lcl_prt_vld 0 general_lcl_prt 0 ace_fiv_tpls_prtcl_cod_vld\r\n"
    "  0 ace_fiv_tpls_prtcl_cod 0 ace_fiv_tpls_dst_prt_msk 0 ace_fiv_tpls_dst_prt 0\r\n"
    "  ace_fiv_tpls_src_prt_msk 0 ace_fiv_tpls_src_prt 0\r\n"
    "  ace_fiv_tpls_dst_ip_prfx_len 0 ace_fiv_tpls_dst_ip_ip_ddrss 0\r\n"
    "  ace_fiv_tpls_src_ip_prfx_len 0 ace_fiv_tpls_src_ip_ip_ddrss 0 action_cpu_cod\r\n"
    "  0 action_overwrite_cntrl 0 action_cos_prms_DP 0 action_cos_prms_TC 0\r\n"
    "  action_cos_prms_UP 0 action_policer_cntrllr 0 action_policer_pntr 0 action_tlf\r\n"
    "  0 action_typ 0 vrwrt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, 0, BIT(5)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_5_TUPLES_ACE_ADD_5_TUPLES_ACE_ADD_ACTION_INFO_OVERWRITE_CONTROL_ID,                                                            
    "action_overwrite_cntrl",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  action_info.overwrite_control:\r\n"
    "  IF TRUE then Ethernet bridged packet will be overwrite by the ACL result\r\n"
    "  regardless of the bridge Forwarding Type. If FALSE then if the bridge\r\n"
    "  forwarding type is control then the ACL rule will not overwrite by the ACL\r\n"
    "  action.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl 5_tuples_ace_add acl_ndx 0 ace_ndx 0 general_nlf_vld 0\r\n"
    "  general_nlf 0 general_vsd_vld 0 general_vsd 0\r\n"
    "  general_lcl_prt_vld 0 general_lcl_prt 0 ace_fiv_tpls_prtcl_cod_vld\r\n"
    "  0 ace_fiv_tpls_prtcl_cod 0 ace_fiv_tpls_dst_prt_msk 0 ace_fiv_tpls_dst_prt 0\r\n"
    "  ace_fiv_tpls_src_prt_msk 0 ace_fiv_tpls_src_prt 0\r\n"
    "  ace_fiv_tpls_dst_ip_prfx_len 0 ace_fiv_tpls_dst_ip_ip_ddrss 0\r\n"
    "  ace_fiv_tpls_src_ip_prfx_len 0 ace_fiv_tpls_src_ip_ip_ddrss 0 action_cpu_cod\r\n"
    "  0 action_overwrite_cntrl 0 action_cos_prms_DP 0 action_cos_prms_TC 0\r\n"
    "  action_cos_prms_UP 0 action_policer_cntrllr 0 action_policer_pntr 0 action_tlf\r\n"
    "  0 action_typ 0 vrwrt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, 0, BIT(5)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_5_TUPLES_ACE_ADD_5_TUPLES_ACE_ADD_ACTION_INFO_COS_PARAMS_DP_ID,                                                            
    "action_cos_prms_DP",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  action_info.cos_params.DP:\r\n"
    "  Drop precedenceRange 0-3.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl 5_tuples_ace_add acl_ndx 0 ace_ndx 0 general_nlf_vld 0\r\n"
    "  general_nlf 0 general_vsd_vld 0 general_vsd 0\r\n"
    "  general_lcl_prt_vld 0 general_lcl_prt 0 ace_fiv_tpls_prtcl_cod_vld\r\n"
    "  0 ace_fiv_tpls_prtcl_cod 0 ace_fiv_tpls_dst_prt_msk 0 ace_fiv_tpls_dst_prt 0\r\n"
    "  ace_fiv_tpls_src_prt_msk 0 ace_fiv_tpls_src_prt 0\r\n"
    "  ace_fiv_tpls_dst_ip_prfx_len 0 ace_fiv_tpls_dst_ip_ip_ddrss 0\r\n"
    "  ace_fiv_tpls_src_ip_prfx_len 0 ace_fiv_tpls_src_ip_ip_ddrss 0 action_cpu_cod\r\n"
    "  0 action_overwrite_cntrl 0 action_cos_prms_DP 0 action_cos_prms_TC 0\r\n"
    "  action_cos_prms_UP 0 action_policer_cntrllr 0 action_policer_pntr 0 action_tlf\r\n"
    "  0 action_typ 0 vrwrt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, 0, BIT(5)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_5_TUPLES_ACE_ADD_5_TUPLES_ACE_ADD_ACTION_INFO_COS_PARAMS_TC_ID,                                                            
    "action_cos_prms_TC",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  action_info.cos_params.TC:\r\n"
    "  Traffic ClassRange 0-7.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl 5_tuples_ace_add acl_ndx 0 ace_ndx 0 general_nlf_vld 0\r\n"
    "  general_nlf 0 general_vsd_vld 0 general_vsd 0\r\n"
    "  general_lcl_prt_vld 0 general_lcl_prt 0 ace_fiv_tpls_prtcl_cod_vld\r\n"
    "  0 ace_fiv_tpls_prtcl_cod 0 ace_fiv_tpls_dst_prt_msk 0 ace_fiv_tpls_dst_prt 0\r\n"
    "  ace_fiv_tpls_src_prt_msk 0 ace_fiv_tpls_src_prt 0\r\n"
    "  ace_fiv_tpls_dst_ip_prfx_len 0 ace_fiv_tpls_dst_ip_ip_ddrss 0\r\n"
    "  ace_fiv_tpls_src_ip_prfx_len 0 ace_fiv_tpls_src_ip_ip_ddrss 0 action_cpu_cod\r\n"
    "  0 action_overwrite_cntrl 0 action_cos_prms_DP 0 action_cos_prms_TC 0\r\n"
    "  action_cos_prms_UP 0 action_policer_cntrllr 0 action_policer_pntr 0 action_tlf\r\n"
    "  0 action_typ 0 vrwrt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, 0, BIT(5)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_5_TUPLES_ACE_ADD_5_TUPLES_ACE_ADD_ACTION_INFO_COS_PARAMS_UP_ID,                                                            
    "action_cos_prms_UP",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  action_info.cos_params.UP:\r\n"
    "  User PriorityRange 0-7.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl 5_tuples_ace_add acl_ndx 0 ace_ndx 0 general_nlf_vld 0\r\n"
    "  general_nlf 0 general_vsd_vld 0 general_vsd 0\r\n"
    "  general_lcl_prt_vld 0 general_lcl_prt 0 ace_fiv_tpls_prtcl_cod_vld\r\n"
    "  0 ace_fiv_tpls_prtcl_cod 0 ace_fiv_tpls_dst_prt_msk 0 ace_fiv_tpls_dst_prt 0\r\n"
    "  ace_fiv_tpls_src_prt_msk 0 ace_fiv_tpls_src_prt 0\r\n"
    "  ace_fiv_tpls_dst_ip_prfx_len 0 ace_fiv_tpls_dst_ip_ip_ddrss 0\r\n"
    "  ace_fiv_tpls_src_ip_prfx_len 0 ace_fiv_tpls_src_ip_ip_ddrss 0 action_cpu_cod\r\n"
    "  0 action_overwrite_cntrl 0 action_cos_prms_DP 0 action_cos_prms_TC 0\r\n"
    "  action_cos_prms_UP 0 action_policer_cntrllr 0 action_policer_pntr 0 action_tlf\r\n"
    "  0 action_typ 0 vrwrt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, 0, BIT(5)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_5_TUPLES_ACE_ADD_5_TUPLES_ACE_ADD_ACTION_INFO_POLICER_CONTROLLER_ID,                                                            
    "action_policer_cntrllr",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  action_info.policer_controller:\r\n"
    "  Select the policer controller (set of parameters to control the actions\r\n"
    "  related to the Policer) results. Range 0-8. Relevant only if the acl action\r\n"
    "  type includes Policing.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl 5_tuples_ace_add acl_ndx 0 ace_ndx 0 general_nlf_vld 0\r\n"
    "  general_nlf 0 general_vsd_vld 0 general_vsd 0\r\n"
    "  general_lcl_prt_vld 0 general_lcl_prt 0 ace_fiv_tpls_prtcl_cod_vld\r\n"
    "  0 ace_fiv_tpls_prtcl_cod 0 ace_fiv_tpls_dst_prt_msk 0 ace_fiv_tpls_dst_prt 0\r\n"
    "  ace_fiv_tpls_src_prt_msk 0 ace_fiv_tpls_src_prt 0\r\n"
    "  ace_fiv_tpls_dst_ip_prfx_len 0 ace_fiv_tpls_dst_ip_ip_ddrss 0\r\n"
    "  ace_fiv_tpls_src_ip_prfx_len 0 ace_fiv_tpls_src_ip_ip_ddrss 0 action_cpu_cod\r\n"
    "  0 action_overwrite_cntrl 0 action_cos_prms_DP 0 action_cos_prms_TC 0\r\n"
    "  action_cos_prms_UP 0 action_policer_cntrllr 0 action_policer_pntr 0 action_tlf\r\n"
    "  0 action_typ 0 vrwrt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, 0, BIT(5)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_5_TUPLES_ACE_ADD_5_TUPLES_ACE_ADD_ACTION_INFO_POLICER_POINTER_ID,                                                            
    "action_policer_pntr",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  action_info.policer_pointer:\r\n"
    "  Select the policer to police the packets. Range 0-65535. Relevant only if the\r\n"
    "  acl action type includes Policing.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl 5_tuples_ace_add acl_ndx 0 ace_ndx 0 general_nlf_vld 0\r\n"
    "  general_nlf 0 general_vsd_vld 0 general_vsd 0\r\n"
    "  general_lcl_prt_vld 0 general_lcl_prt 0 ace_fiv_tpls_prtcl_cod_vld\r\n"
    "  0 ace_fiv_tpls_prtcl_cod 0 ace_fiv_tpls_dst_prt_msk 0 ace_fiv_tpls_dst_prt 0\r\n"
    "  ace_fiv_tpls_src_prt_msk 0 ace_fiv_tpls_src_prt 0\r\n"
    "  ace_fiv_tpls_dst_ip_prfx_len 0 ace_fiv_tpls_dst_ip_ip_ddrss 0\r\n"
    "  ace_fiv_tpls_src_ip_prfx_len 0 ace_fiv_tpls_src_ip_ip_ddrss 0 action_cpu_cod\r\n"
    "  0 action_overwrite_cntrl 0 action_cos_prms_DP 0 action_cos_prms_TC 0\r\n"
    "  action_cos_prms_UP 0 action_policer_cntrllr 0 action_policer_pntr 0 action_tlf\r\n"
    "  0 action_typ 0 vrwrt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, 0, BIT(5)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_5_TUPLES_ACE_ADD_5_TUPLES_ACE_ADD_ACTION_INFO_OUTLIF_ID,                                                            
    "action_tlf",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  action_info.outlif:\r\n"
    "  OutLIF to overwrite the exist value. The destination of the packet. In 802.1q\r\n"
    "  and 802.1ad this is the system port. Range 0-524287. Relevant only if the acl\r\n"
    "  action type includes OutLIF.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl 5_tuples_ace_add acl_ndx 0 ace_ndx 0 general_nlf_vld 0\r\n"
    "  general_nlf 0 general_vsd_vld 0 general_vsd 0\r\n"
    "  general_lcl_prt_vld 0 general_lcl_prt 0 ace_fiv_tpls_prtcl_cod_vld\r\n"
    "  0 ace_fiv_tpls_prtcl_cod 0 ace_fiv_tpls_dst_prt_msk 0 ace_fiv_tpls_dst_prt 0\r\n"
    "  ace_fiv_tpls_src_prt_msk 0 ace_fiv_tpls_src_prt 0\r\n"
    "  ace_fiv_tpls_dst_ip_prfx_len 0 ace_fiv_tpls_dst_ip_ip_ddrss 0\r\n"
    "  ace_fiv_tpls_src_ip_prfx_len 0 ace_fiv_tpls_src_ip_ip_ddrss 0 action_cpu_cod\r\n"
    "  0 action_overwrite_cntrl 0 action_cos_prms_DP 0 action_cos_prms_TC 0\r\n"
    "  action_cos_prms_UP 0 action_policer_cntrllr 0 action_policer_pntr 0 action_tlf\r\n"
    "  0 action_typ 0 vrwrt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, 0, BIT(5)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_5_TUPLES_ACE_ADD_5_TUPLES_ACE_ADD_ACTION_INFO_TYPE_ID,                                                            
    "action_typ",                                                                       
    (PARAM_VAL_RULES *)&TIMNA_ACL_ACTION_TYPE_rule[0],                                            
    (sizeof(TIMNA_ACL_ACTION_TYPE_rule) / sizeof(TIMNA_ACL_ACTION_TYPE_rule[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  action_info.type:\r\n"
    "  The type of the action, indicates which fields to modify. The rest of the\r\n"
    "  fields are considered / ignored according to this type. see\r\n"
    "  TIMNA_ACL_ACTION_TYPE. \r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl 5_tuples_ace_add acl_ndx 0 ace_ndx 0 general_nlf_vld 0\r\n"
    "  general_nlf 0 general_vsd_vld 0 general_vsd 0\r\n"
    "  general_lcl_prt_vld 0 general_lcl_prt 0 ace_fiv_tpls_prtcl_cod_vld\r\n"
    "  0 ace_fiv_tpls_prtcl_cod 0 ace_fiv_tpls_dst_prt_msk 0 ace_fiv_tpls_dst_prt 0\r\n"
    "  ace_fiv_tpls_src_prt_msk 0 ace_fiv_tpls_src_prt 0\r\n"
    "  ace_fiv_tpls_dst_ip_prfx_len 0 ace_fiv_tpls_dst_ip_ip_ddrss 0\r\n"
    "  ace_fiv_tpls_src_ip_prfx_len 0 ace_fiv_tpls_src_ip_ip_ddrss 0 action_cpu_cod\r\n"
    "  0 action_overwrite_cntrl 0 action_cos_prms_DP 0 action_cos_prms_TC 0\r\n"
    "  action_cos_prms_UP 0 action_policer_cntrllr 0 action_policer_pntr 0 action_tlf\r\n"
    "  0 action_typ 0 vrwrt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, 0, BIT(5)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_5_TUPLES_ACE_ADD_5_TUPLES_ACE_ADD_OVERWRITE_ID,                                                            
    "vrwrt",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  overwrite:\r\n"
    "  whether to overwrite the exist ACE on the given ace_ndx,\r\n"
    "  if over_write is FALSE and there is already ACE on the given\r\n"
    "  index, then error is returned. \r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl 5_tuples_ace_add acl_ndx 0 ace_ndx 0 general_nlf_vld 0\r\n"
    "  general_nlf 0 general_vsd_vld 0 general_vsd 0\r\n"
    "  general_lcl_prt_vld 0 general_lcl_prt 0 ace_fiv_tpls_prtcl_cod_vld\r\n"
    "  0 ace_fiv_tpls_prtcl_cod 0 ace_fiv_tpls_dst_prt_msk 0 ace_fiv_tpls_dst_prt 0\r\n"
    "  ace_fiv_tpls_src_prt_msk 0 ace_fiv_tpls_src_prt 0\r\n"
    "  ace_fiv_tpls_dst_ip_prfx_len 0 ace_fiv_tpls_dst_ip_ip_ddrss 0\r\n"
    "  ace_fiv_tpls_src_ip_prfx_len 0 ace_fiv_tpls_src_ip_ip_ddrss 0 action_cpu_cod\r\n"
    "  0 action_overwrite_cntrl 0 action_cos_prms_DP 0 action_cos_prms_TC 0\r\n"
    "  action_cos_prms_UP 0 action_policer_cntrllr 0 action_policer_pntr 0 action_tlf\r\n"
    "  0 action_typ 0 vrwrt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, 0, BIT(5)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_5_TUPLES_ACE_GET_5_TUPLES_ACE_GET_ID,                                                            
    "5_tuples_ace_get",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Gets the ACE (Access Control Entry) with the ace_ndx in the given ACL. \r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl 5_tuples_ace_get acl_ndx 0 ace_ndx 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, 0, BIT(6)},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_5_TUPLES_ACE_GET_5_TUPLES_ACE_GET_ACL_NDX_ID,                                                            
    "acl_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  acl_ndx:\r\n"
    "  ACL ID to get the ACE from. Range 0-7.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl 5_tuples_ace_get acl_ndx 0 ace_ndx 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, 0, BIT(6)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_ACL_5_TUPLES_ACE_GET_5_TUPLES_ACE_GET_ACE_NDX_ID,                                                            
    "ace_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  ace_ndx:\r\n"
    "  The priority of the ACE to get. Range 0- (ACL size - 1).\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api acl 5_tuples_ace_get acl_ndx 0 ace_ndx 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, 0, BIT(6)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  

  {                                                                                        
    PARAM_TIMNA_API_ACL_ID,                                                            
    "acl",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "",
    "",
    "", 
    {0, 0, 0, 0, BIT(19)|BIT(20)|BIT(21)|BIT(22)|BIT(23)|BIT(24)|BIT(25)|BIT(26)|BIT(27)|BIT(28)|BIT(29)|BIT(30)|BIT(31),BIT(0)|BIT(1)|BIT(2)|BIT(3)|BIT(4)|BIT(5)|BIT(6)},                                                                              
    1,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
#endif /* } acl*/

#ifdef UI_IPV4_UC/* { ipv4_uc*/
  {                                                                                        
    PARAM_TIMNA_TIMNA_IPV4_UNICAST_GLBL_INFO_SET_IPV4_UNICAST_GLBL_INFO_SET_ID,                                                            
    "glbl_info_set",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Set the global IPv4 Unicast information.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api ipv4_uc glbl_info_set\r\n"
    "  ipv4_over_mpls_last_label 0 ipv4_over_mpls_first_label 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, BIT(6)},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_IPV4_UNICAST_GLBL_INFO_SET_IPV4_UNICAST_GLBL_INFO_SET_IPV4_UC_INFO_IPV4_OVER_MPLS_RANGE_LAST_LABEL_ID,                                                            
    "ipv4_over_mpls_last_label",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  ipv4_uc_info.ipv4_over_mpls_range.last_label:\r\n"
    "  The last label in the range\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api ipv4_uc glbl_info_set\r\n"
    "  ipv4_over_mpls_last_label 0 ipv4_over_mpls_first_label 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, BIT(6)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_IPV4_UNICAST_GLBL_INFO_SET_IPV4_UNICAST_GLBL_INFO_SET_IPV4_UC_INFO_IPV4_OVER_MPLS_RANGE_FIRST_LABEL_ID,                                                            
    "ipv4_over_mpls_first_label",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  ipv4_uc_info.ipv4_over_mpls_range.first_label:\r\n"
    "  The First label in the range\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api ipv4_uc glbl_info_set\r\n"
    "  ipv4_over_mpls_last_label 0 ipv4_over_mpls_first_label 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, BIT(6)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_IPV4_UNICAST_GLBL_INFO_GET_IPV4_UNICAST_GLBL_INFO_GET_ID,                                                            
    "glbl_info_get",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Set the global IPv4 Unicast information.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api ipv4_uc glbl_info_get\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, BIT(7)},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_IPV4_UNICAST_ROUTE_ADD_IPV4_UNICAST_ROUTE_ADD_ID,                                                            
    "add",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Binds between Ipv4 Unicast route key (IP-address/prefix) and a Unicast FEC\r\n"
    "  entry identified by the given sys_fec_id for a given virtual router. As a\r\n"
    "  result of this operation Unicast Ipv4 packets designated to IP address match\r\n"
    "  the given key (as long there is no more specific route key) will be routed\r\n"
    "  according to the information in the FEC entry identified by sys_fec_id.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api ipv4_uc add vrf_id 0 prfx_len 0\r\n"
    "  ip_ddrss 0 sys_fec_id 0 overwrite 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, BIT(8)},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_IPV4_UNICAST_ROUTE_ADD_IPV4_UNICAST_ROUTE_ADD_VRF_ID_ID,                                                            
    "vrf_id",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  vrf_id:\r\n"
    "  Virtual router id. Added for forward compatibility,\r\n"
    "  Range 0-0. Has to be zero, error is returned otherwise.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api ipv4_uc add vrf_id 0 prfx_len 0\r\n"
    "  ip_ddrss 0 sys_fec_id 0 overwrite 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, BIT(8)},                                                                              
    3,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_IPV4_UNICAST_ROUTE_ADD_IPV4_UNICAST_ROUTE_ADD_ROUTE_KEY_PREFIX_LEN_ID,                                                            
    "prfx_len",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  key.prefix_len:\r\n"
    "  Number of bits to consider in the IP address starting from the msb. Range\r\n"
    "  0-32.Example for key ip_address 192.168.1.0 and prefix_len 24\r\n"
    "  would match any IP Destination Address of the form 192.168.1.x\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api ipv4_uc add vrf_id 0 prfx_len 0\r\n"
    "  ip_ddrss 0 sys_fec_id 0 overwrite 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, BIT(8)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_IPV4_UNICAST_ROUTE_ADD_IPV4_UNICAST_ROUTE_ADD_ROUTE_KEY_IP_ADDRESS_ID,                                                            
    "ip_ddrss",                                                                       
    (PARAM_VAL_RULES *)&Subnet_ip_rule[0],                                            
    (sizeof(Subnet_ip_rule) / sizeof(Subnet_ip_rule[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  key.ip_address:\r\n"
    "  Ipv4 destination address.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api ipv4_uc add vrf_id 0 prfx_len 0\r\n"
    "  ip_ddrss 0 sys_fec_id 0 overwrite 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, BIT(8)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_IPV4_UNICAST_ROUTE_ADD_IPV4_UNICAST_ROUTE_ADD_SYS_FEC_ID_ID,                                                            
    "sys_fec_id",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  sys_fec_id:\r\n"
    "  system FEC id. Range 0- 4G\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api ipv4_uc add vrf_id 0 prfx_len 0\r\n"
    "  ip_ddrss 0 sys_fec_id 0 overwrite 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, BIT(8)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_IPV4_UNICAST_ROUTE_ADD_IPV4_UNICAST_ROUTE_ADD_OVERRIDE_ID,                                                            
    "overwrite",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  override:\r\n"
    "  whether to override the entry if it already exists, if this is\r\n"
    "  FALSE and the entry exist error is returned.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api ipv4_uc add vrf_id 0 prfx_len 0\r\n"
    "  ip_ddrss 0 sys_fec_id 0 overwrite 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, BIT(8)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_IPV4_UNICAST_ROUTE_GET_IPV4_UNICAST_ROUTE_GET_ID,                                                            
    "get",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Gets the system-FEC-id associated with the given key (IP-\r\n"
    "  address/prefix).\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api ipv4_uc get vrf_id 0 prfx_len 0\r\n"
    "  ip_ddrss 0 exact_match 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, BIT(9)},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_IPV4_UNICAST_ROUTE_GET_IPV4_UNICAST_ROUTE_GET_VRF_ID_ID,                                                            
    "vrf_id",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  vrf_id:\r\n"
    "  Virtual router id. Added for forward compatibility,\r\n"
    "  Range 0-0. Has to be zero, error is returned otherwise.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api ipv4_uc get vrf_id 0 prfx_len 0\r\n"
    "  ip_ddrss 0 exact_match 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, BIT(9)},                                                                              
    3,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_IPV4_UNICAST_ROUTE_GET_IPV4_UNICAST_ROUTE_GET_ROUTE_KEY_PREFIX_LEN_ID,                                                            
    "prfx_len",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  key.prefix_len:\r\n"
    "  Number of bits to consider in the IP address starting from the msb. Range\r\n"
    "  0-32.Example for key ip_address 192.168.1.0 and prefix_len 24\r\n"
    "  would match any IP Destination Address of the form 192.168.1.x\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api ipv4_uc get vrf_id 0 prfx_len 0\r\n"
    "  ip_ddrss 0 exact_match 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, BIT(9)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_IPV4_UNICAST_ROUTE_GET_IPV4_UNICAST_ROUTE_GET_ROUTE_KEY_IP_ADDRESS_ID,                                                            
    "ip_ddrss",                                                                       
    (PARAM_VAL_RULES *)&Subnet_ip_rule[0],                                            
    (sizeof(Subnet_ip_rule) / sizeof(Subnet_ip_rule[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  key.ip_address:\r\n"
    "  Ipv4 destination address.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api ipv4_uc get vrf_id 0 prfx_len 0\r\n"
    "  ip_ddrss 0 exact_match 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, BIT(9)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_IPV4_UNICAST_ROUTE_GET_IPV4_UNICAST_ROUTE_GET_EXACT_MATCH_ID,                                                            
    "exact_match",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  exact_match:\r\n"
    "  to find only exact match or best match.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api ipv4_uc get vrf_id 0 prfx_len 0\r\n"
    "  ip_ddrss 0 exact_match 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, BIT(9)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_IPV4_UNICAST_ROUTE_LPM_GET_IPV4_UNICAST_ROUTE_LPM_GET_ID,                                                            
    "lpm_get",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Get from the routing table a route key with the longest prefix\r\n"
    "  that matches the given key.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api ipv4_uc lpm_get vrf_id 0 prfx_len 0\r\n"
    "  ip_ddrss 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, BIT(10)},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_IPV4_UNICAST_ROUTE_LPM_GET_IPV4_UNICAST_ROUTE_LPM_GET_VRF_ID_ID,                                                            
    "vrf_id",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  vrf_id:\r\n"
    "  Virtual router id. Added for forward compatibility,\r\n"
    "  Range 0-0. Has to be zero, error is returned otherwise.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api ipv4_uc lpm_get vrf_id 0 prfx_len 0\r\n"
    "  ip_ddrss 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, BIT(10)},                                                                              
    3,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_IPV4_UNICAST_ROUTE_LPM_GET_IPV4_UNICAST_ROUTE_LPM_GET_ROUTE_KEY_PREFIX_LEN_ID,                                                            
    "prfx_len",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  key.prefix_len:\r\n"
    "  Number of bits to consider in the IP address starting from the msb. Range\r\n"
    "  0-32.Example for key ip_address 192.168.1.0 and prefix_len 24\r\n"
    "  would match any IP Destination Address of the form 192.168.1.x\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api ipv4_uc lpm_get vrf_id 0 prfx_len 0\r\n"
    "  ip_ddrss 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, BIT(10)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_IPV4_UNICAST_ROUTE_LPM_GET_IPV4_UNICAST_ROUTE_LPM_GET_ROUTE_KEY_IP_ADDRESS_ID,                                                            
    "ip_ddrss",                                                                       
    (PARAM_VAL_RULES *)&Subnet_ip_rule[0],                                            
    (sizeof(Subnet_ip_rule) / sizeof(Subnet_ip_rule[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  key.ip_address:\r\n"
    "  Ipv4 destination address.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api ipv4_uc lpm_get vrf_id 0 prfx_len 0\r\n"
    "  ip_ddrss 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, BIT(10)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_IPV4_UNICAST_ROUTE_GET_BLOCK_IPV4_UNICAST_ROUTE_GET_BLOCK_ID,                                                            
    "get_block",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Get block of entries from the routing table in a given range.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api ipv4_uc get_block vrf_id 0 ntrs_to_scn 0\r\n"
    "  ntrs_to_get 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, BIT(11)},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_IPV4_UNICAST_ROUTE_GET_BLOCK_IPV4_UNICAST_ROUTE_GET_BLOCK_VRF_ID_ID,                                                            
    "vrf_id",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  vrf_id:\r\n"
    "  Virtual router id. Added for forward compatibility,\r\n"
    "  Range 0-0. Has to be zero, error is returned otherwise.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api ipv4_uc get_block vrf_id 0 ntrs_to_scn 0\r\n"
    "  ntrs_to_get 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, BIT(11)},                                                                              
    3,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },
  {                                                                                        
    PARAM_TIMNA_TIMNA_IPV4_UNICAST_ROUTE_GET_BLOCK_IPV4_UNICAST_ROUTE_GET_BLOCK_ITER_TYPE_ID,                                                            
    "type",                                                                       
    (PARAM_VAL_RULES *)&TIMNA_L3_TABLE_ITER_TYPE_rule[0],                                            
    (sizeof(TIMNA_L3_TABLE_ITER_TYPE_rule) / sizeof(TIMNA_L3_TABLE_ITER_TYPE_rule[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  type:\r\n"
    "  the way to display the routing table,\r\n"
    "  Range 0-2. .\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api ipv4_uc get_block vrf_id 0 ntrs_to_scn 0\r\n"
    "  ntrs_to_get 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, BIT(11)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },

  {                                                                                        
    PARAM_TIMNA_TIMNA_IPV4_UNICAST_ROUTE_GET_BLOCK_IPV4_UNICAST_ROUTE_GET_BLOCK_ENTRIES_TO_SCAN_ID,                                                            
    "ntrs_to_scn",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  entries_to_scan:\r\n"
    "  Number of entries to scan in the routing table\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api ipv4_uc get_block vrf_id 0 ntrs_to_scn 0\r\n"
    "  ntrs_to_get 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, BIT(11)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_IPV4_UNICAST_ROUTE_GET_BLOCK_IPV4_UNICAST_ROUTE_GET_BLOCK_ENTRIES_TO_GET_ID,                                                            
    "ntrs_to_get",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  entries_to_get:\r\n"
    "  Number of entries to get from the routing table\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api ipv4_uc get_block vrf_id 0 ntrs_to_scn 0\r\n"
    "  ntrs_to_get 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, BIT(11)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_IPV4_UNICAST_ROUTE_REMOVE_IPV4_UNICAST_ROUTE_REMOVE_ID,                                                            
    "remove",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Remove the association of the IP-address to Unicast FEC.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api ipv4_uc remove vrf_id 0 prfx_len 0\r\n"
    "  ip_ddrss 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, BIT(12)},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_IPV4_UNICAST_ROUTE_REMOVE_IPV4_UNICAST_ROUTE_REMOVE_VRF_ID_ID,                                                            
    "vrf_id",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  vrf_id:\r\n"
    "  Virtual router id. Added for forward compatibility,\r\n"
    "  Range 0-0. Has to be zero, error is returned otherwise.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api ipv4_uc remove vrf_id 0 prfx_len 0\r\n"
    "  ip_ddrss 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, BIT(12)},                                                                              
    3,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_IPV4_UNICAST_ROUTE_REMOVE_IPV4_UNICAST_ROUTE_REMOVE_ROUTE_KEY_PREFIX_LEN_ID,                                                            
    "prfx_len",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  key.prefix_len:\r\n"
    "  Number of bits to consider in the IP address starting from the msb. Range\r\n"
    "  0-32.Example for key ip_address 192.168.1.0 and prefix_len 24\r\n"
    "  would match any IP Destination Address of the form 192.168.1.x\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api ipv4_uc remove vrf_id 0 prfx_len 0\r\n"
    "  ip_ddrss 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, BIT(12)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_IPV4_UNICAST_ROUTE_REMOVE_IPV4_UNICAST_ROUTE_REMOVE_ROUTE_KEY_IP_ADDRESS_ID,                                                            
    "ip_ddrss",                                                                       
    (PARAM_VAL_RULES *)&Subnet_ip_rule[0],                                            
    (sizeof(Subnet_ip_rule) / sizeof(Subnet_ip_rule[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  key.ip_address:\r\n"
    "  Ipv4 destination address.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api ipv4_uc remove vrf_id 0 prfx_len 0\r\n"
    "  ip_ddrss 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, BIT(12)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_IPV4_UNICAST_ROUTE_REMOVE_BLOCK_IPV4_UNICAST_ROUTE_REMOVE_BLOCK_ID,                                                            
    "remove_block",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Remove a block of entries from the routing table of virtual routing in a\r\n"
    "  given range.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api ipv4_uc remove_block vrf_id 0 ntrs_to_scn 0\r\n"
    "  ntrs_to_rmv 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, BIT(13)},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_IPV4_UNICAST_ROUTE_REMOVE_BLOCK_IPV4_UNICAST_ROUTE_REMOVE_BLOCK_VRF_ID_ID,                                                            
    "vrf_id",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  vrf_id:\r\n"
    "  Virtual router id. Added for forward compatibility,\r\n"
    "  Range 0-0. Has to be zero, error is returned otherwise.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api ipv4_uc remove_block vrf_id 0 ntrs_to_scn 0\r\n"
    "  ntrs_to_rmv 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, BIT(13)},                                                                              
    3,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_IPV4_UNICAST_ROUTE_REMOVE_BLOCK_IPV4_UNICAST_ROUTE_REMOVE_BLOCK_ENTRIES_TO_SCAN_ID,                                                            
    "ntrs_to_scn",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  entries_to_scan:\r\n"
    "  Number of entries to scan in the routing table\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api ipv4_uc remove_block vrf_id 0 ntrs_to_scn 0\r\n"
    "  ntrs_to_rmv 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, BIT(13)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_IPV4_UNICAST_ROUTE_REMOVE_BLOCK_IPV4_UNICAST_ROUTE_REMOVE_BLOCK_ENTRIES_TO_REMOVE_ID,                                                            
    "ntrs_to_rmv",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  entries_to_remove:\r\n"
    "  Number of entries to remove from the routing table\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api ipv4_uc remove_block vrf_id 0 ntrs_to_scn 0\r\n"
    "  ntrs_to_rmv 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, BIT(13)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_IPV4_UNICAST_ROUTE_REMOVE_ALL_IPV4_UNICAST_ROUTE_REMOVE_ALL_ID,                                                            
    "remove_all",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Remove all the entries in the route table of the given virtual router.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api ipv4_uc remove_all vrf_id 0 rmv_dflt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, BIT(14)},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_IPV4_UNICAST_ROUTE_REMOVE_ALL_IPV4_UNICAST_ROUTE_REMOVE_ALL_VRF_ID_ID,                                                            
    "vrf_id",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  vrf_id:\r\n"
    "  Virtual router id. Added for forward compatibility,\r\n"
    "  Range 0-0. Has to be zero, error is returned otherwise.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api ipv4_uc remove_all vrf_id 0 rmv_dflt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, BIT(14)},                                                                              
    3,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_IPV4_UNICAST_ROUTE_REMOVE_ALL_IPV4_UNICAST_ROUTE_REMOVE_ALL_REMOVE_DEFAULT_ID,                                                            
    "rmv_dflt",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  remove_default:\r\n"
    "  if TRUE then remove the default routing entry.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api ipv4_uc remove_all vrf_id 0 rmv_dflt 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, BIT(14)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_IPV4_UNICAST_ROUTE_TABLE_STATUS_IPV4_UNICAST_ROUTE_TABLE_STATUS_ID,                                                            
    "table_status",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Get the status of the Unicast route table, Including the number of allocated\r\n"
    "  unicast routes and number of free entries.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api ipv4_uc table_status vrf_id 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, BIT(15)},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_IPV4_UNICAST_ROUTE_TABLE_STATUS_IPV4_UNICAST_ROUTE_TABLE_STATUS_VRF_ID_ID,                                                            
    "vrf_id",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  vrf_id:\r\n"
    "  Virtual router id. Added for forward compatibility,\r\n"
    "  Range 0-0. Has to be zero, error is returned otherwise.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api ipv4_uc table_status vrf_id 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, BIT(15)},                                                                              
    3,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_IPV4_UNICAST_DEFRAGMENT_IPV4_UNICAST_DEFRAGMENT_ID,                                                            
    "defragment",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Defrag the ipv4 Unicast table. As a result of acting on the FEC table the\r\n"
    "  memory of the device could be fragmented. So the defrage operation will\r\n"
    "  rearrange memory division to get better utilization. \r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api ipv4_uc defragment rqstd_nof_stps 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, BIT(16)},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_IPV4_UNICAST_DEFRAGMENT_IPV4_UNICAST_DEFRAGMENT_REQUESTED_NOF_STEPS_ID,                                                            
    "rqstd_nof_stps",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  requested_nof_steps:\r\n"
    "  The maximal number of defragmentation steps that should be done on the table.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api ipv4_uc defragment rqstd_nof_stps 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, BIT(16)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },
  {                                                                                        
    PARAM_TIMNA_TIMNA_IPV4_UC_EDIT_INFO_SET_EDIT_INFO_SET_ID,                                                            
    "edit_info_set",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Set the outlif edit info for IPv4 UC.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api ipv4_uc edit_info_set out_lif_ndx 0 ecnap_ptr 0\r\n"
    "  lbl_ttl_ptr 0 lbl_exp_qos 0 label_id 0\r\n"
    "  vc_vld 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, BIT(17)},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_IPV4_UC_EDIT_INFO_SET_EDIT_INFO_SET_OUT_LIF_NDX_ID,                                                            
    "out_lif_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  out_lif_ndx:\r\n"
    "  outlif id.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api ipv4_uc edit_info_set out_lif_ndx 0 ecnap_ptr 0\r\n"
    "  lbl_ttl_ptr 0 lbl_exp_qos 0 label_id 0\r\n"
    "  vc_vld 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, BIT(17)},                                                                              
    3,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_IPV4_UC_EDIT_INFO_SET_EDIT_INFO_SET_EDIT_INFO_ENCAP_POINTER_ID,                                                            
    "ecnap_ptr",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  edit_info.encap_pointer:\r\n"
    "  Pointer for encapsulation entry to set whether to add tunnel label, and a\r\n"
    "  pointer to ARP entry.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api ipv4_uc edit_info_set out_lif_ndx 0 ecnap_ptr 0\r\n"
    "  lbl_ttl_ptr 0 lbl_exp_qos 0 label_id 0\r\n"
    "  vc_vld 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, BIT(17)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_IPV4_UC_EDIT_INFO_SET_EDIT_INFO_SET_EDIT_INFO_LABEL_TTL_PTR_ID,                                                            
    "lbl_ttl_ptr",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  edit_info.label.ttl_ptr:\r\n"
    "  Pointer to 4 configured TTL.Should be configured by\r\n"
    "  timna_mpls_glbl_info_set()When the packet is MPLS LSR packet, this setting is\r\n"
    "  ignored, and the TTL is inherited from the LSR label.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api ipv4_uc edit_info_set out_lif_ndx 0 ecnap_ptr 0\r\n"
    "  lbl_ttl_ptr 0 lbl_exp_qos 0 label_id 0\r\n"
    "  vc_vld 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, BIT(17)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_IPV4_UC_EDIT_INFO_SET_EDIT_INFO_SET_EDIT_INFO_LABEL_EXP_QOS_ID,                                                            
    "lbl_exp_qos",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  edit_info.label.exp_qos:\r\n"
    "  Experimental bits outgoing traffic over this Tunnel.When the packet is MPLS\r\n"
    "  LSR packet, this setting is ignored, and the EXP is inherited from the LSR\r\n"
    "  label.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api ipv4_uc edit_info_set out_lif_ndx 0 ecnap_ptr 0\r\n"
    "  lbl_ttl_ptr 0 lbl_exp_qos 0 label_id 0\r\n"
    "  vc_vld 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, BIT(17)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_IPV4_UC_EDIT_INFO_SET_EDIT_INFO_SET_EDIT_INFO_LABEL_LABEL_ID_ID,                                                            
    "label_id",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  edit_info.label.label_id:\r\n"
    "  Tunnel label\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api ipv4_uc edit_info_set out_lif_ndx 0 ecnap_ptr 0\r\n"
    "  lbl_ttl_ptr 0 lbl_exp_qos 0 label_id 0\r\n"
    "  vc_vld 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, BIT(17)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_IPV4_UC_EDIT_INFO_SET_EDIT_INFO_SET_EDIT_INFO_VC_VALID_ID,                                                            
    "vc_vld",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  edit_info.vc_valid:\r\n"
    "  If True then the Ipv4 packet is encapsulated with a VC label.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api ipv4_uc edit_info_set out_lif_ndx 0 ecnap_ptr 0\r\n"
    "  lbl_ttl_ptr 0 lbl_exp_qos 0 label_id 0\r\n"
    "  vc_vld 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, BIT(17)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_IPV4_UC_EDIT_INFO_GET_EDIT_INFO_GET_ID,                                                            
    "edit_info_get",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Set the outlif edit info for IPv4 UC.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api ipv4_uc edit_info_get out_lif_ndx 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, BIT(18)},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_IPV4_UC_EDIT_INFO_GET_EDIT_INFO_GET_OUT_LIF_NDX_ID,                                                            
    "outlif_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  out_lif_ndx:\r\n"
    "  outlif id.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api ipv4_uc edit_info_get out_lif_ndx 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, BIT(18)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  

  {                                                                                        
    PARAM_TIMNA_API_IPV4_UC_ID,                                                            
    "ipv4_uc",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "",
    "",
    "",                                                                                  
    {0, 0, 0, 0, BIT(6)|BIT(7)|BIT(8)|BIT(9)|BIT(10)|BIT(11)|BIT(12)|/*BIT(13)|*/BIT(14)|BIT(15)|/*BIT(16)|*/BIT(17)|BIT(18), 0, 0, 0},                                                                              
    1,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
#endif /* } ipv4_uc*/

#ifdef UI_IPV4_UC_TEST/* { ipv4_uc_test*/
  {                                                                                        
    PARAM_TIMNA_TIMNA_IPV4_UNICAST_TEST_RANGE_ADD_IPV4_UNICAST_TEST_RANGE_ADD_ID,                                                            
    "add",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Binds between Ipv4 Unicast route key (IP-address/prefix) and a Unicast FEC\r\n"
    "  entry identified by the given sys_fec_id for a given virtual router. As a\r\n"
    "  result of this operation Unicast Ipv4 packets designated to IP address match\r\n"
    "  the given key (as long there is no more specific route key) will be routed\r\n"
    "  according to the information in the FEC entry identified by sys_fec_id.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api ipv4_uc_test add frst_vrf_id 0 lst_vrf_id 0\r\n"
    "  step 0 count 0 prefix 0 from_ip 0 to_ip 0\r\n"
    "  range_type 0 fec_range_type 0 sys_fec_id 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, 0, BIT(10)},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_IPV4_UNICAST_TEST_RANGE_ADD_IPV4_UNICAST_TEST_RANGE_ADD_FIRST_VRF_ID_ID,                                                            
    "frst_vrf_id",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  first_vrf_id:\r\n"
    "  first Virtual router id to set.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api ipv4_uc_test add frst_vrf_id 0 lst_vrf_id 0\r\n"
    "  step 0 count 0 prefix 0 from_ip 0 to_ip 0\r\n"
    "  range_type 0 fec_range_type 0 sys_fec_id 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, 0, BIT(10)},                                                                              
    3,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_IPV4_UNICAST_TEST_RANGE_ADD_IPV4_UNICAST_TEST_RANGE_ADD_LAST_VRF_ID_ID,                                                            
    "lst_vrf_id",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  last_vrf_id:\r\n"
    "  last Virtual router id to set.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api ipv4_uc_test add frst_vrf_id 0 lst_vrf_id 0\r\n"
    "  step 0 count 0 prefix 0 from_ip 0 to_ip 0\r\n"
    "  range_type 0 fec_range_type 0 sys_fec_id 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, 0, BIT(10)},                                                                              
    4,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_IPV4_UNICAST_TEST_RANGE_ADD_IPV4_UNICAST_TEST_RANGE_ADD_RANGE_INFO_STEP_ID,                                                            
    "step",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  range_info.step:\r\n"
    "  Number of step between to consecutive IP addresses. Relevant only for\r\n"
    "  increment and decrement.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api ipv4_uc_test add frst_vrf_id 0 lst_vrf_id 0\r\n"
    "  step 0 count 0 prefix 0 from_ip 0 to_ip 0\r\n"
    "  range_type 0 fec_range_type 0 sys_fec_id 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, 0, BIT(10)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_IPV4_UNICAST_TEST_RANGE_ADD_IPV4_UNICAST_TEST_RANGE_ADD_RANGE_INFO_COUNT_ID,                                                            
    "count",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  range_info.count:\r\n"
    "  Number of IP addresses to add.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api ipv4_uc_test add frst_vrf_id 0 lst_vrf_id 0\r\n"
    "  step 0 count 0 prefix 0 from_ip 0 to_ip 0\r\n"
    "  range_type 0 fec_range_type 0 sys_fec_id 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, 0, BIT(10)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_IPV4_UNICAST_TEST_RANGE_ADD_IPV4_UNICAST_TEST_RANGE_ADD_RANGE_INFO_PREFIX_ID,                                                            
    "prefix",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  range_info.prefix:\r\n"
    "  Number of bits to consider in the IP address starting from the msb. Range\r\n"
    "  0-32.Example for key ip_address 192.168.1.0 and prefix_len 24\r\n"
    "  would match any IP Destination Address of the form 192.168.1.x\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api ipv4_uc_test add frst_vrf_id 0 lst_vrf_id 0\r\n"
    "  step 0 count 0 prefix 0 from_ip 0 to_ip 0\r\n"
    "  range_type 0 fec_range_type 0 sys_fec_id 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, 0, BIT(10)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_IPV4_UNICAST_TEST_RANGE_ADD_IPV4_UNICAST_TEST_RANGE_ADD_RANGE_INFO_TO_ID,                                                            
    "to_ip",                                                                       
    (PARAM_VAL_RULES *)&Subnet_ip_rule[0],                                            
    (sizeof(Subnet_ip_rule) / sizeof(Subnet_ip_rule[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  range_info.to:\r\n"
    "  IP address, range ends at this IP address. Relevant only for random. For\r\n"
    "  increment/decrement types the end of the range is determined according to the\r\n"
    "  count and step.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api ipv4_uc_test add frst_vrf_id 0 lst_vrf_id 0\r\n"
    "  step 0 count 0 prefix 0 from_ip 0 to_ip 0\r\n"
    "  range_type 0 fec_range_type 0 sys_fec_id 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, 0, BIT(10)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_IPV4_UNICAST_TEST_RANGE_ADD_IPV4_UNICAST_TEST_RANGE_ADD_RANGE_INFO_FROM_ID,                                                            
    "from_ip",                                                                       
    (PARAM_VAL_RULES *)&Subnet_ip_rule[0],                                            
    (sizeof(Subnet_ip_rule) / sizeof(Subnet_ip_rule[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  range_info.from:\r\n"
    "  IP address, range starts from this IP address.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api ipv4_uc_test add frst_vrf_id 0 lst_vrf_id 0\r\n"
    "  step 0 count 0 prefix 0 from_ip 0 to_ip 0\r\n"
    "  range_type 0 fec_range_type 0 sys_fec_id 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, 0, BIT(10)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_IPV4_UNICAST_TEST_RANGE_ADD_IPV4_UNICAST_TEST_RANGE_ADD_RANGE_INFO_TYPE_ID,                                                            
    "range_type",                                                                       
    (PARAM_VAL_RULES *)&TIMNA_IPV4_RANGE_TYPE_rule[0],                                            
    (sizeof(TIMNA_IPV4_RANGE_TYPE_rule) / sizeof(TIMNA_IPV4_RANGE_TYPE_rule[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  range_info.type:\r\n"
    "  How to pick up addresses from the given range randomly incrementally etc.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api ipv4_uc_test add frst_vrf_id 0 lst_vrf_id 0\r\n"
    "  step 0 count 0 prefix 0 from_ip 0 to_ip 0\r\n"
    "  range_type 0 fec_range_type 0 sys_fec_id 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, 0, BIT(10)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_IPV4_UNICAST_TEST_RANGE_ADD_IPV4_UNICAST_TEST_RANGE_ADD_FEC_RANGE_TYPE_ID,                                                            
    "fec_range_type",                                                                       
    (PARAM_VAL_RULES *)&TIMNA_IPV4_SYS_FEC_RANGE_TYPE_rule[0],                                            
    (sizeof(TIMNA_IPV4_SYS_FEC_RANGE_TYPE_rule) / sizeof(TIMNA_IPV4_SYS_FEC_RANGE_TYPE_rule[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  fec_range_type:\r\n"
    "  to which fec to map the IP range.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api ipv4_uc_test add frst_vrf_id 0 lst_vrf_id 0\r\n"
    "  step 0 count 0 prefix 0 from_ip 0 to_ip 0\r\n"
    "  range_type 0 fec_range_type 0 sys_fec_id 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, 0, BIT(10)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_IPV4_UNICAST_TEST_RANGE_ADD_IPV4_UNICAST_TEST_RANGE_ADD_SYS_FEC_ID_ID,                                                            
    "sys_fec_id",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  sys_fec_id:\r\n"
    "  system FEC id. Range 0-4G. if fec_range_type is incremental then\r\n"
    "  this is the first sys fec to start from.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api ipv4_uc_test add frst_vrf_id 0 lst_vrf_id 0\r\n"
    "  step 0 count 0 prefix 0 from_ip 0 to_ip 0\r\n"
    "  range_type 0 fec_range_type 0 sys_fec_id 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, 0, BIT(10)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },
  {                                                                                        
    PARAM_TIMNA_TIMNA_IPV4_UNICAST_TEST_RANGE_REMOVE_IPV4_UNICAST_TEST_RANGE_REMOVE_ID,                                                            
    "remove",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Remove Ipv4 Unicast route keys (IP-removeress/prefix) Range from the routing table.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api ipv4_uc_test remove frst_vrf_id 0 lst_vrf_id 0\r\n"
    "  step 0 count 0 prefix 0 from_ip 0 to_ip 0\r\n"
    "  range_type 0 \r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, 0, BIT(13)},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_IPV4_UNICAST_TEST_RANGE_REMOVE_IPV4_UNICAST_TEST_RANGE_REMOVE_FIRST_VRF_ID_ID,                                                            
    "frst_vrf_id",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  first_vrf_id:\r\n"
    "  first Virtual router id to set.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api ipv4_uc_test remove frst_vrf_id 0 lst_vrf_id 0\r\n"
    "  step 0 count 0 prefix 0 from_ip 0 to_ip 0\r\n"
    "  range_type 0 \r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, 0, BIT(13)},                                                                              
    3,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_IPV4_UNICAST_TEST_RANGE_REMOVE_IPV4_UNICAST_TEST_RANGE_REMOVE_LAST_VRF_ID_ID,                                                            
    "lst_vrf_id",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  last_vrf_id:\r\n"
    "  last Virtual router id to set.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api ipv4_uc_test remove frst_vrf_id 0 lst_vrf_id 0\r\n"
    "  step 0 count 0 prefix 0 from_ip 0 to_ip 0\r\n"
    "  range_type 0 \r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, 0, BIT(13)},                                                                              
    4,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_IPV4_UNICAST_TEST_RANGE_REMOVE_IPV4_UNICAST_TEST_RANGE_REMOVE_RANGE_INFO_STEP_ID,                                                            
    "step",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  range_info.step:\r\n"
    "  Number of step between to consecutive IP removeresses. Relevant only for\r\n"
    "  increment and decrement.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api ipv4_uc_test remove frst_vrf_id 0 lst_vrf_id 0\r\n"
    "  step 0 count 0 prefix 0 from_ip 0 to_ip 0\r\n"
    "  range_type 0 \r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, 0, BIT(13)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_IPV4_UNICAST_TEST_RANGE_REMOVE_IPV4_UNICAST_TEST_RANGE_REMOVE_RANGE_INFO_COUNT_ID,                                                            
    "count",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  range_info.count:\r\n"
    "  Number of IP removeresses to remove.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api ipv4_uc_test remove frst_vrf_id 0 lst_vrf_id 0\r\n"
    "  step 0 count 0 prefix 0 from_ip 0 to_ip 0\r\n"
    "  range_type 0 \r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, 0, BIT(13)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_IPV4_UNICAST_TEST_RANGE_REMOVE_IPV4_UNICAST_TEST_RANGE_REMOVE_RANGE_INFO_PREFIX_ID,                                                            
    "prefix",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  range_info.prefix:\r\n"
    "  Number of bits to consider in the IP removeress starting from the msb. Range\r\n"
    "  0-32.Example for key ip_removeress 192.168.1.0 and prefix_len 24\r\n"
    "  would match any IP Destination REMOVEress of the form 192.168.1.x\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api ipv4_uc_test remove frst_vrf_id 0 lst_vrf_id 0\r\n"
    "  step 0 count 0 prefix 0 from_ip 0 to_ip 0\r\n"
    "  range_type 0 \r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, 0, BIT(13)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_IPV4_UNICAST_TEST_RANGE_REMOVE_IPV4_UNICAST_TEST_RANGE_REMOVE_RANGE_INFO_TO_ID,                                                            
    "to_ip",                                                                       
    (PARAM_VAL_RULES *)&Subnet_ip_rule[0],                                            
    (sizeof(Subnet_ip_rule) / sizeof(Subnet_ip_rule[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  range_info.to:\r\n"
    "  IP removeress, range ends at this IP removeress. Relevant only for random. For\r\n"
    "  increment/decrement types the end of the range is determined according to the\r\n"
    "  count and step.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api ipv4_uc_test remove frst_vrf_id 0 lst_vrf_id 0\r\n"
    "  step 0 count 0 prefix 0 from_ip 0 to_ip 0\r\n"
    "  range_type 0 \r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, 0, BIT(13)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_IPV4_UNICAST_TEST_RANGE_REMOVE_IPV4_UNICAST_TEST_RANGE_REMOVE_RANGE_INFO_FROM_ID,                                                            
    "from_ip",                                                                       
    (PARAM_VAL_RULES *)&Subnet_ip_rule[0],                                            
    (sizeof(Subnet_ip_rule) / sizeof(Subnet_ip_rule[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  range_info.from:\r\n"
    "  IP removeress, range starts from this IP removeress.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api ipv4_uc_test remove frst_vrf_id 0 lst_vrf_id 0\r\n"
    "  step 0 count 0 prefix 0 from_ip 0 to_ip 0\r\n"
    "  range_type 0 \r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, 0, BIT(13)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_IPV4_UNICAST_TEST_RANGE_REMOVE_IPV4_UNICAST_TEST_RANGE_REMOVE_RANGE_INFO_TYPE_ID,                                                            
    "range_type",                                                                       
    (PARAM_VAL_RULES *)&TIMNA_IPV4_RANGE_TYPE_rule[0],                                            
    (sizeof(TIMNA_IPV4_RANGE_TYPE_rule) / sizeof(TIMNA_IPV4_RANGE_TYPE_rule[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  range_info.type:\r\n"
    "  How to pick up removeresses from the given range randomly incrementally etc.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api ipv4_uc_test remove frst_vrf_id 0 lst_vrf_id 0\r\n"
    "  step 0 count 0 prefix 0 from_ip 0 to_ip 0\r\n"
    "  range_type 0 \r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, 0, BIT(13)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_IPV4_UNICAST_TEST_EDIT_RANGE_SET_IPV4_UNICAST_TEST_EDIT_RANGE_SET_ID,                                                            
    "edit_range_set",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,      
    "  Set Range of outlif for ipv4 unicast routing editing, if the packet\r\n"
    "  encapsulated with VC label, then there is possibility to bind the packets\r\n"
    "  incrementally with VC labels.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api ipv4_uc_test edit_range_set first_fec 10 last_fec 20 \r\n"
    "  vc_label_id 8 sys_port_id 17 range_inc_eep 1 range_inc_vc_lbl 1 encap_ptr 18\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, 0, BIT(11)},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_IPV4_UNICAST_TEST_EDIT_RANGE_SET_IPV4_UNICAST_TEST_EDIT_RANGE_SET_FIRST_OUTLIF_ID,                                                            
    "first_fec",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  first_outlif:\r\n"
    "  first outlif to set.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api ipv4_uc_test edit_range_set first_fec 10 last_fec 20 \r\n"
    "  vc_label_id 8 sys_port_id 17 range_inc_eep 1 range_inc_vc_lbl 1 encap_ptr 18\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, 0, BIT(11)},                                                                              
    3,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_IPV4_UNICAST_TEST_EDIT_RANGE_SET_IPV4_UNICAST_TEST_EDIT_RANGE_SET_LAST_OUTLIF_ID,                                                            
    "last_fec",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  last_outlif:\r\n"
    "  last outlif to set.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api ipv4_uc_test edit_range_set first_fec 10 last_fec 20 \r\n"
    "  vc_label_id 8 sys_port_id 17 range_inc_eep 1 range_inc_vc_lbl 1 encap_ptr 18\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, 0, BIT(11)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_IPV4_UNICAST_TEST_EDIT_RANGE_SET_IPV4_UNICAST_TEST_EDIT_RANGE_SET_EDIT_INFO_ENCAP_POINTER_ID,                                                            
    "encap_ptr",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  edit_info.encap_pointer:\r\n"
    "  Pointer for encapsulation entry to set whether to add tunnel label, and a\r\n"
    "  pointer to ARP entry.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api ipv4_uc_test edit_range_set first_fec 10 last_fec 20 \r\n"
    "  vc_label_id 8 sys_port_id 17 range_inc_eep 1 range_inc_vc_lbl 1 encap_ptr 18\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, 0, BIT(11)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_IPV4_UNICAST_TEST_EDIT_RANGE_SET_IPV4_UNICAST_TEST_EDIT_RANGE_SET_EDIT_INFO_LABEL_TTL_PTR_ID,                                                            
    "vc_lbl_ttl_ptr",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  edit_info.label.ttl_ptr:\r\n"
    "  Pointer to 4 configured TTL.Should be configured by\r\n"
    "  timna_mpls_glbl_info_set()When the packet is MPLS LSR packet, this setting is\r\n"
    "  ignored, and the TTL is inherited from the LSR label.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api ipv4_uc_test edit_range_set first_fec 10 last_fec 20 \r\n"
    "  vc_label_id 8 sys_port_id 17 range_inc_eep 1 range_inc_vc_lbl 1 encap_ptr 18\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, 0, BIT(11)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_IPV4_UNICAST_TEST_EDIT_RANGE_SET_IPV4_UNICAST_TEST_EDIT_RANGE_SET_EDIT_INFO_LABEL_EXP_QOS_ID,                                                            
    "vc_lbl_exp_qos",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  edit_info.label.exp_qos:\r\n"
    "  Experimental bits outgoing traffic over this Tunnel.When the packet is MPLS\r\n"
    "  LSR packet, this setting is ignored, and the EXP is inherited from the LSR\r\n"
    "  label.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api ipv4_uc_test edit_range_set first_fec 10 last_fec 20 \r\n"
    "  vc_label_id 8 sys_port_id 17 range_inc_eep 1 range_inc_vc_lbl 1 encap_ptr 18\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, 0, BIT(11)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_IPV4_UNICAST_TEST_EDIT_RANGE_SET_IPV4_UNICAST_TEST_EDIT_RANGE_SET_EDIT_INFO_LABEL_LABEL_ID_ID,                                                            
    "vc_label_id",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  edit_info.label.label_id:\r\n"
    "  Tunnel label\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api ipv4_uc_test edit_range_set first_fec 10 last_fec 20 \r\n"
    "  vc_label_id 8 sys_port_id 17 range_inc_eep 1 range_inc_vc_lbl 1 encap_ptr 18\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, 0, BIT(11)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_IPV4_UNICAST_TEST_EDIT_RANGE_SET_IPV4_UNICAST_TEST_EDIT_RANGE_SET_EDIT_INFO_VC_VALID_ID,                                                            
    "vc_label_vld",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  edit_info.vc_valid:\r\n"
    "  If True then the Ipv4 packet is encapsulated with a VC label. L3VPN\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api ipv4_uc_test edit_range_set first_fec 10 last_fec 20 \r\n"
    "  vc_label_id 8 sys_port_id 17 range_inc_eep 1 range_inc_vc_lbl 1 encap_ptr 18\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, 0, BIT(11)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_IPV4_UNICAST_TEST_EDIT_RANGE_SET_IPV4_UNICAST_TEST_EDIT_RANGE_SET_INC_VC_LABEL_ID,                                                            
    "range_inc_vc_lbl",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  inc_vc_label:\r\n"
    "  whether to increment the VC label.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api ipv4_uc_test edit_range_set first_fec 10 last_fec 20 \r\n"
    "  vc_label_id 8 sys_port_id 17 range_inc_eep 1 range_inc_vc_lbl 1 encap_ptr 18\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, 0, BIT(11)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_IPV4_UNICAST_TEST_EDIT_RANGE_SET_IPV4_UNICAST_TEST_EDIT_RANGE_SET_INC_EEP_ID,                                                            
    "range_inc_eep",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  inc_vc_label:\r\n"
    "  whether to increment the EEP pointer.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api ipv4_uc_test edit_range_set first_fec 10 last_fec 20 \r\n"
    "  vc_label_id 8 sys_port_id 17 range_inc_eep 1 range_inc_vc_lbl 1 encap_ptr 18\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, 0, BIT(11)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_IPV4_UNICAST_TEST_EDIT_RANGE_SET_IPV4_UNICAST_TEST_EDIT_RANGE_SET_SYS_PORT_ID,                                                            
    "sys_port_id",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  sys_port_id:\r\n"
    "  System port id to forwared packet to.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api ipv4_uc_test edit_range_set first_fec 10 last_fec 20 \r\n"
    "  vc_label_id 8 sys_port_id 17 range_inc_eep 1 range_inc_vc_lbl 1 encap_ptr 18\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, 0, BIT(11)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_IPV4_UNICAST_TEST_EDIT_RANGE_GET_IPV4_UNICAST_TEST_EDIT_RANGE_GET_ID,                                                            
    "edit_range_get",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Set Range of outlif for ipv4 unicast routing editing, if the packet\r\n"
    "  encapsulated with VC label, then there is possibility to bind the packets\r\n"
    "  incrementally with VC labels.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api ipv4_uc_test edit_range_set first_fec 10 last_fec 20 \r\n"
    "  vc_label_id 8 sys_port_id 17 range_inc_eep 1 range_inc_vc_lbl 1 encap_ptr 18\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, 0, BIT(12)},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_API_IPV4_UC_TEST_ID,                                                            
    "ipv4_uc_test",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "",
    "",
    "",                                                                                  
    {0, 0, 0, 0, 0, BIT(10)|BIT(11)|BIT(12)|BIT(13)},                                                                              
    1,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
#endif /* } ipv4_uc_test*/


#ifdef UI_SWEEP_DEMO_APP/* { sweep_demo_app*/
  {                                                                                        
    PARAM_TIMNA_TIMNA_SWEEP_DEMO_VSIDS_SET_SWEEP_DEMO_VSIDS_SET_ID,                                                            
    "sweep_demo_vsids_set",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  set VSIDs with default values.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api sweep_demo_app sweep_demo_vsids_set frst_ndx 0 lst_ndx 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, BIT(6)},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_SWEEP_DEMO_VSIDS_SET_SWEEP_DEMO_VSIDS_SET_FIRST_NDX_ID,                                                            
    "frst_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  first_ndx:\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api sweep_demo_app sweep_demo_vsids_set frst_ndx 0 lst_ndx 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, BIT(6)},                                                                              
    3,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_SWEEP_DEMO_VSIDS_SET_SWEEP_DEMO_VSIDS_SET_LAST_NDX_ID,                                                            
    "lst_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  last_ndx:\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api sweep_demo_app sweep_demo_vsids_set frst_ndx 0 lst_ndx 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, BIT(6)},                                                                              
    4,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_SWEEP_DEMO_VSIDS_GET_SWEEP_DEMO_VSIDS_GET_ID,                                                            
    "sweep_demo_vsids_get",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  set VSIDs with default values.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api sweep_demo_app sweep_demo_vsids_get frst_ndx 0 lst_ndx 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, BIT(7)},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_SWEEP_DEMO_VSIDS_GET_SWEEP_DEMO_VSIDS_GET_FIRST_NDX_ID,                                                            
    "frst_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  first_ndx:\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api sweep_demo_app sweep_demo_vsids_get frst_ndx 0 lst_ndx 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, BIT(7)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_SWEEP_DEMO_VSIDS_GET_SWEEP_DEMO_VSIDS_GET_LAST_NDX_ID,                                                            
    "lst_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  last_ndx:\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api sweep_demo_app sweep_demo_vsids_get frst_ndx 0 lst_ndx 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, BIT(7)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_SWEEP_DEMO_VC_TO_VSID_SET_SWEEP_DEMO_VC_TO_VSID_SET_ID,                                                            
    "sweep_demo_vc_to_vsid_set",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  set vc to vsid. one to one mapping vc(i)--> vsid(i)lif is set same for all\r\n"
    "  entries.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api sweep_demo_app sweep_demo_vc_to_vsid_set frst_ndx 0 lst_ndx 0 vsid 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, BIT(8)},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_SWEEP_DEMO_VC_TO_VSID_SET_SWEEP_DEMO_VC_TO_VSID_SET_FIRST_NDX_ID,                                                            
    "frst_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  first_ndx:\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api sweep_demo_app sweep_demo_vc_to_vsid_set frst_ndx 0 lst_ndx 0 vsid 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, BIT(8)},                                                                              
    3,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_SWEEP_DEMO_VC_TO_VSID_SET_SWEEP_DEMO_VC_TO_VSID_SET_LAST_NDX_ID,                                                            
    "lst_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  last_ndx:\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api sweep_demo_app sweep_demo_vc_to_vsid_set frst_ndx 0 lst_ndx 0 vsid 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, BIT(8)},                                                                              
    4,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_SWEEP_DEMO_VC_TO_VSID_SET_SWEEP_DEMO_VC_TO_VSID_SET_VSID_ID,                                                            
    "vsid",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  vsid:\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api sweep_demo_app sweep_demo_vc_to_vsid_set frst_ndx 0 lst_ndx 0 vsid 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, BIT(8)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_SWEEP_DEMO_VC_TO_VSID_GET_SWEEP_DEMO_VC_TO_VSID_GET_ID,                                                            
    "sweep_demo_vc_to_vsid_get",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  set vc to vsid. one to one mapping vc(i)--> vsid(i)lif is set same for all\r\n"
    "  entries.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api sweep_demo_app sweep_demo_vc_to_vsid_get frst_ndx 0 lst_ndx 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, BIT(9)},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_SWEEP_DEMO_VC_TO_VSID_GET_SWEEP_DEMO_VC_TO_VSID_GET_FIRST_NDX_ID,                                                            
    "frst_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  first_ndx:\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api sweep_demo_app sweep_demo_vc_to_vsid_get frst_ndx 0 lst_ndx 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, BIT(9)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_SWEEP_DEMO_VC_TO_VSID_GET_SWEEP_DEMO_VC_TO_VSID_GET_LAST_NDX_ID,                                                            
    "lst_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  last_ndx:\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api sweep_demo_app sweep_demo_vc_to_vsid_get frst_ndx 0 lst_ndx 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, BIT(9)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_SWEEP_DEMO_POLICERS_SET_SWEEP_DEMO_POLICERS_SET_ID,                                                            
    "sweep_demo_policers_set",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  set policers with default values.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api sweep_demo_app sweep_demo_policers_set frst_ndx 0 lst_ndx 0 cir_vlu\r\n"
    "  0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, BIT(10)},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_SWEEP_DEMO_POLICERS_SET_SWEEP_DEMO_POLICERS_SET_FIRST_NDX_ID,                                                            
    "frst_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  first_ndx:\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api sweep_demo_app sweep_demo_policers_set frst_ndx 0 lst_ndx 0 cir_vlu\r\n"
    "  0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, BIT(10)},                                                                              
    3,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_SWEEP_DEMO_POLICERS_SET_SWEEP_DEMO_POLICERS_SET_LAST_NDX_ID,                                                            
    "lst_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  last_ndx:\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api sweep_demo_app sweep_demo_policers_set frst_ndx 0 lst_ndx 0 cir_vlu\r\n"
    "  0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, BIT(10)},                                                                              
    4,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_SWEEP_DEMO_POLICERS_SET_SWEEP_DEMO_POLICERS_SET_CIR_VALUE_ID,                                                            
    "cir_vlu",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  cir_value:\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api sweep_demo_app sweep_demo_policers_set frst_ndx 0 lst_ndx 0 cir_vlu\r\n"
    "  0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, BIT(10)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_SWEEP_DEMO_POLICERS_GET_SWEEP_DEMO_POLICERS_GET_ID,                                                            
    "sweep_demo_policers_get",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  set policers with default values.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api sweep_demo_app sweep_demo_policers_get frst_ndx 0 lst_ndx 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, BIT(11)},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_SWEEP_DEMO_POLICERS_GET_SWEEP_DEMO_POLICERS_GET_FIRST_NDX_ID,                                                            
    "frst_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  first_ndx:\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api sweep_demo_app sweep_demo_policers_get frst_ndx 0 lst_ndx 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, BIT(11)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_SWEEP_DEMO_POLICERS_GET_SWEEP_DEMO_POLICERS_GET_LAST_NDX_ID,                                                            
    "lst_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  last_ndx:\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api sweep_demo_app sweep_demo_policers_get frst_ndx 0 lst_ndx 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, BIT(11)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_SWEEP_DEMO_VC_TO_POLICER_SET_SWEEP_DEMO_VC_TO_POLICER_SET_ID,                                                            
    "sweep_demo_vc_to_policer_set",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  set vc to policer. one to one mapping vc(i)--> policer(i)policer_ptr is set\r\n"
    "  for all policers and vcs in the range.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api sweep_demo_app sweep_demo_vc_to_policer_set frst_ndx 0 lst_ndx 0\r\n"
    "  policer_ptr 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, BIT(12)},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_SWEEP_DEMO_VC_TO_POLICER_SET_SWEEP_DEMO_VC_TO_POLICER_SET_FIRST_NDX_ID,                                                            
    "frst_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  first_ndx:\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api sweep_demo_app sweep_demo_vc_to_policer_set frst_ndx 0 lst_ndx 0\r\n"
    "  policer_ptr 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, BIT(12)},                                                                              
    3,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_SWEEP_DEMO_VC_TO_POLICER_SET_SWEEP_DEMO_VC_TO_POLICER_SET_LAST_NDX_ID,                                                            
    "lst_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  last_ndx:\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api sweep_demo_app sweep_demo_vc_to_policer_set frst_ndx 0 lst_ndx 0\r\n"
    "  policer_ptr 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, BIT(12)},                                                                              
    4,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_SWEEP_DEMO_VC_TO_POLICER_SET_SWEEP_DEMO_VC_TO_POLICER_SET_CTRL_PTR_ID,                                                            
    "policer_ptr",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  policer_ptr:\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api sweep_demo_app sweep_demo_vc_to_policer_set frst_ndx 0 lst_ndx 0\r\n"
    "  policer_ptr 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, BIT(12)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_SWEEP_DEMO_VC_TO_POLICER_GET_SWEEP_DEMO_VC_TO_POLICER_GET_ID,                                                            
    "sweep_demo_vc_to_policer_get",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  set vc to policer. one to one mapping vc(i)--> policeripolicer_ptr is set\r\n"
    "  for all policers and vcs in the range.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api sweep_demo_app sweep_demo_vc_to_policer_get frst_ndx 0 lst_ndx 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, BIT(13)},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_SWEEP_DEMO_VC_TO_POLICER_GET_SWEEP_DEMO_VC_TO_POLICER_GET_FIRST_NDX_ID,                                                            
    "frst_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  first_ndx:\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api sweep_demo_app sweep_demo_vc_to_policer_get frst_ndx 0 lst_ndx 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, BIT(13)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_SWEEP_DEMO_VC_TO_POLICER_GET_SWEEP_DEMO_VC_TO_POLICER_GET_LAST_NDX_ID,                                                            
    "lst_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  last_ndx:\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api sweep_demo_app sweep_demo_vc_to_policer_get frst_ndx 0 lst_ndx 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, BIT(13)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_SWEEP_DEMO_VSID_TO_POLICER_SET_SWEEP_DEMO_VSID_TO_POLICER_SET_ID,                                                            
    "sweep_demo_vsid_to_policer_set",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  set vsid to policer. one to one mapping vsid(i)--> policer(i)\r\n"
    "  set policers with default values.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api sweep_demo_app sweep_demo_vsid_to_policer_set tbl_ndx 0 frst_ndx 0\r\n"
    "  lst_ndx 0 vsd_ndx 0 policer_ptr 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, BIT(14)},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  }, 

  {                                                                                        
    PARAM_TIMNA_TIMNA_SWEEP_DEMO_VSID_TO_POLICER_SET_SWEEP_DEMO_VSID_TO_POLICER_SET_TABLE_NDX_ID,                                                            
    "tbl_ndx",                                                                       
    (PARAM_VAL_RULES *)&TIMNA_VSID_TABLE_SELECT_rule[0],                                            
    (sizeof(TIMNA_VSID_TABLE_SELECT_rule) / sizeof(TIMNA_VSID_TABLE_SELECT_rule[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  table_ndx:\r\n"
    "  choose which table, table of VC label, or Ethernet Table.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api sweep_demo_app sweep_demo_vsid_to_policer_set tbl_ndx 0 frst_ndx 0\r\n"
    "  lst_ndx 0 vsd_ndx 0 policer_ptr 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, BIT(14)},                                                                              
    3,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_SWEEP_DEMO_VSID_TO_POLICER_SET_SWEEP_DEMO_VSID_TO_POLICER_SET_FIRST_NDX_ID,                                                            
    "frst_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  first_ndx:\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api sweep_demo_app sweep_demo_vsid_to_policer_set tbl_ndx 0 frst_ndx 0\r\n"
    "  lst_ndx 0 vsd_ndx 0 policer_ptr 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, BIT(14)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_SWEEP_DEMO_VSID_TO_POLICER_SET_SWEEP_DEMO_VSID_TO_POLICER_SET_LAST_NDX_ID,                                                            
    "lst_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  last_ndx:\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api sweep_demo_app sweep_demo_vsid_to_policer_set tbl_ndx 0 frst_ndx 0\r\n"
    " lst_ndx 0  vsd_ndx 0 policer_ptr 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, BIT(14)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },
  {                                                                                        
    PARAM_TIMNA_TIMNA_SWEEP_DEMO_VSID_TO_POLICER_SET_SWEEP_DEMO_VSID_TO_POLICER_SET_VSID_NDX_ID,                                                            
    "vsd_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  vsid_ndx:\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api sweep_demo_app sweep_demo_vsid_to_policer_set tbl_ndx 0 frst_ndx 0\r\n"
    "  lst_ndx 0 vsd_ndx 0 policer_ptr 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, BIT(14)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  }, 
  {                                                                                        
    PARAM_TIMNA_TIMNA_SWEEP_DEMO_VSID_TO_POLICER_SET_SWEEP_DEMO_VSID_TO_POLICER_SET_CTRL_PTR_ID,                                                            
    "policer_ptr",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  policer_ptr:\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api sweep_demo_app sweep_demo_vsid_to_policer_set tbl_ndx 0 frst_ndx 0\r\n"
    "  lst_ndx 0 vsd_ndx 0 policer_ptr 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, BIT(14)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_SWEEP_DEMO_VSID_TO_POLICER_GET_SWEEP_DEMO_VSID_TO_POLICER_GET_ID,                                                            
    "sweep_demo_vsid_to_policer_get",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  set vsid to policer. one to one mapping vsid(i)--> policeri\r\n"
    "  set policers with default values.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api sweep_demo_app sweep_demo_vsid_to_policer_get tbl_ndx 0 frst_ndx 0\r\n"
    "  lst_ndx 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, BIT(15)},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_SWEEP_DEMO_VSID_TO_POLICER_GET_SWEEP_DEMO_VSID_TO_POLICER_GET_TABLE_NDX_ID,                                                            
    "tbl_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  table_ndx:\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api sweep_demo_app sweep_demo_vsid_to_policer_get tbl_ndx 0 frst_ndx 0\r\n"
    "  lst_ndx 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, BIT(15)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_SWEEP_DEMO_VSID_TO_POLICER_GET_SWEEP_DEMO_VSID_TO_POLICER_GET_FIRST_NDX_ID,                                                            
    "frst_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  first_ndx:\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api sweep_demo_app sweep_demo_vsid_to_policer_get tbl_ndx 0 frst_ndx 0\r\n"
    "  lst_ndx 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, BIT(15)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_SWEEP_DEMO_VSID_TO_POLICER_GET_SWEEP_DEMO_VSID_TO_POLICER_GET_LAST_NDX_ID,                                                            
    "lst_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  last_ndx:\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api sweep_demo_app sweep_demo_vsid_to_policer_get tbl_ndx 0 frst_ndx 0\r\n"
    "  lst_ndx 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, BIT(15)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_SWEEP_DEMO_TBLS_DFLTS_SET_SWEEP_DEMO_TBLS_DFLTS_SET_ID,                                                            
    "sweep_demo_tbls_dflts_set",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  consider only info related to vsids in this range. set the tables defaults\r\n"
    "  with default values.sets\r\n"
    "  dflt values for tables. And global values for policers.cbs in bytes.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api sweep_demo_app sweep_demo_tbls_dflts_set frst_ndx 0 lst_ndx 0 cbs 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, BIT(16)},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_SWEEP_DEMO_TBLS_DFLTS_SET_SWEEP_DEMO_TBLS_DFLTS_SET_FIRST_NDX_ID,
    "frst_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  frst_ndx:\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api sweep_demo_app sweep_demo_tbls_dflts_set frst_ndx 0 lst_ndx 0 cbs 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, BIT(16)},                                                                              
    3,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_SWEEP_DEMO_TBLS_DFLTS_SET_SWEEP_DEMO_TBLS_DFLTS_SET_LAST_NDX_ID,                                                            
    "lst_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  lst_ndx:\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api sweep_demo_app sweep_demo_tbls_dflts_set frst_ndx 0 lst_ndx 0 cbs 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, BIT(16)},                                                                              
    4,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_SWEEP_DEMO_TBLS_DFLTS_SET_SWEEP_DEMO_TBLS_DFLTS_SET_CBS_ID,                                                            
    "cbs",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  cbs:\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api sweep_demo_app sweep_demo_tbls_dflts_set frst_ndx 0 lst_ndx 0 cbs 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, BIT(16)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_SWEEP_DEMO_RUN_SWEEP_DEMO_RUN_ID,                                                            
    "sweep_demo_run",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  run demo with all defaults.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api sweep_demo_app sweep_demo_run\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, BIT(17)},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },
  {                                                                                        
    PARAM_TIMNA_TIMNA_SWEEP_DEMO_VSIDS_TO_FID_SET_SWEEP_DEMO_VSIDS_TO_FID_SET_ID,                                                            
    "sweep_demo_vsids_to_fid_set",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  set the mapping from VSID to FID, for block of vsids. \r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api sweep_demo_app sweep_demo_vsids_to_fid_set frst_ndx 0 lst_ndx 0 fid\r\n"
    "  0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, BIT(18)},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_SWEEP_DEMO_VSIDS_TO_FID_SET_SWEEP_DEMO_VSIDS_TO_FID_SET_FIRST_NDX_ID,                                                            
    "frst_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  first_ndx:\r\n"
    "  start from vsid with this id.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api sweep_demo_app sweep_demo_vsids_to_fid_set frst_ndx 0 lst_ndx 0 fid\r\n"
    "  0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, BIT(18)},                                                                              
    3,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_SWEEP_DEMO_VSIDS_TO_FID_SET_SWEEP_DEMO_VSIDS_TO_FID_SET_LAST_NDX_ID,                                                            
    "lst_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  last_ndx:\r\n"
    "  to vsid with this id.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api sweep_demo_app sweep_demo_vsids_to_fid_set frst_ndx 0 lst_ndx 0 fid\r\n"
    "  0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, BIT(18)},                                                                              
    4,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_SWEEP_DEMO_VSIDS_TO_FID_SET_SWEEP_DEMO_VSIDS_TO_FID_SET_FID_ID,                                                            
    "fid",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  fid:\r\n"
    "  fid to set for these vsids.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api sweep_demo_app sweep_demo_vsids_to_fid_set frst_ndx 0 lst_ndx 0 fid\r\n"
    "  0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, BIT(18)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_SWEEP_DEMO_VSIDS_TO_FID_SET_SWEEP_DEMO_VSIDS_TO_FID_SET_ONE_TO_ONE_MAP_ID,                                                            
    "one_to_one_map",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  one_to_one_map:\r\n"
    "  if set to TRUE then the given fid is ignored and the mapping from vsid to fid\r\n"
    "  is one to one.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api sweep_demo_app sweep_demo_vsids_to_fid_set frst_ndx 0 lst_ndx 0 fid\r\n"
    "  0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, BIT(18)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_API_SWEEP_DEMO_APP_ID,                                                            
    "sweep_demo_app",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "",
    "",
    "",                                                                                  
    {0, 0, 0, 0, BIT(6)|BIT(7)|BIT(8)|BIT(9)|BIT(10)|BIT(11)|BIT(12)|BIT(13)|BIT(14)|BIT(15)|BIT(16)|BIT(17)|BIT(18)},
    1,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
#endif /* } sweep_demo_app*/
 
  {                                                                                        
    PARAM_TIMNA_DIAG_ID,                                                            
    "diag",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "",
    "",
    "",                                                                                  
    {0, 0, 0, BIT(17), BIT(2)|BIT(3) },                                                                              
    1,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },
  {                                                                                        
    PARAM_TIMNA_DIAG_REGS_DUMP_DIAG_REGS_DUMP_START_ID,                                                            
    "start",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "",
    "Ex:\r\n"                                                                    
    "  timna_api diag diag_regs_dump\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, BIT(17)},
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_DIAG_REGS_DUMP_DIAG_REGS_DUMP_END_ID,                                                            
    "end",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                          
    "",
    "Ex:\r\n"                                                                    
    "  timna_api diag diag_regs_dump\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, BIT(17)},
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_DIAG_REGS_DUMP_DIAG_REGS_DUMP_ID,                                                            
    "regs_dump",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "",
    "Ex:\r\n"                                                                    
    "  timna_api diag regs_dump\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, BIT(17)},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_DIAG_TBLS_DUMP_DIAG_TBLS_DUMP_PRINT_ZERO_ID,                                                            
    "prnt_zro",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  print_zero:\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api diag diag_tbls_dump prnt_zro 0 max_nof_enties 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, BIT(2)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_DIAG_TBLS_DUMP_DIAG_TBLS_DUMP_MAX_NOF_ENTRIES_ID,                                                            
    "max_nof_enties",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  max_nof_enties:\r\n"
    "  maximum number of entriws entries to print from each table.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api diag diag_tbls_dump prnt_zro 0 max_nof_enties 0\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, BIT(2)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_DIAG_TBLS_DUMP_DIAG_TBLS_DUMP_ID,                                                            
    "tbls_dump",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "",
    "Ex:\r\n"                                                                    
    "  timna_api diag tbls_dump\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0, BIT(2)},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
   {                                                                                        
    PARAM_TIMNA_DIAG_TBLS_DUMP_DIAG_PRINT_ERRORS,                                                            
    "print_errors",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "",
    "Ex:\r\n"                                                                    
    "  timna_api diag print_errors\r\n"
    "",
    "",                                                                                  
    {0, 0, 0, 0,BIT(3)},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_DEBUG_ID,                                                            
    "debug",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "",
    "",
    "",                                                                                  
    {0, 0, 0, BIT(18)},                                                                              
    1,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_DEBUG_PRNT_LVL_ID,                                                            
    "print_level",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Level of printing: 0-2\r\n",
    "Ex:\r\n"                                                                    
    "  timna_api debug print_level 2\r\n"
    "  Sets the highest printing level"
    "",
    "",                                                                                  
    {0, 0, 0, BIT(18)},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_DEBUG_TEMP_1_ID,                                                            
    "dont_delete_when_aging",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  When dont_delete_when_aging != 0, will not delete on CPU aging messages\r\n",
    "",
    "",                                                                                  
    {0, 0, 0, BIT(18)},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  }, 
#ifdef UI_MPLS/* { mpls*/
  {                                                                                        
    PARAM_TIMNA_TIMNA_MPLS_GLBL_INFO_SET_GLBL_INFO_SET_ID,                                                            
    "glbl_info_set",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Set the global MPLS information.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mpls glbl_info_set [TIMNA_MPLS_TUNNEL_NOF_TTL 0\r\n"
    "  mpls_rng_lst_lbl 0 mpls_rng_frst_lbl 0\r\n"
    "",
    "",                                                                                  
    {0,0,0,0,0,0,BIT(0)},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MPLS_GLBL_INFO_SET_GLBL_INFO_SET_MPLS_INFO_TTL_ARRAY_0_ID,                                                            
      "TTL_rry_0",                                                                       
      (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
      (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
      HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
      0,0,0,0,0,0,0,                                                                         
      "  mpls_info.TTL_array[0]:\r\n"
      "  TTLs each tunnel encapsulation point to one of these TTLs\r\n"
      "",
      "Ex:\r\n"                                                                    
      "  timna_api mpls glbl_info_set TTL_rry_0..3 0 mpls_rng_lst_lbl 0\r\n"
      "  mpls_rng_frst_lbl 0\r\n"
      "",
      "",                                                                                  
    {0,0,0,0,0,0,BIT(0)},                                                                              
    LAST_ORDINAL,                                                                                     
    /*                                                                                   
    * Pointer to a function to call after symbolic parameter                            
    * has been accepted.                                                                
    */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MPLS_GLBL_INFO_SET_GLBL_INFO_SET_MPLS_INFO_TTL_ARRAY_1_ID,                                                            
      "TTL_rry_1",                                                                       
      (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
      (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
      HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
      0,0,0,0,0,0,0,                                                                         
      "  mpls_info.TTL_array[0]:\r\n"
      "  TTLs each tunnel encapsulation point to one of these TTLs\r\n"
      "",
      "Ex:\r\n"                                                                    
      "  timna_api mpls glbl_info_set TTL_rry_0..3 0 mpls_rng_lst_lbl 0\r\n"
      "  mpls_rng_frst_lbl 0\r\n"
      "",
      "",                                                                                  
    {0,0,0,0,0,0,BIT(0)},                                                                              
    LAST_ORDINAL,                                                                                     
    /*                                                                                   
    * Pointer to a function to call after symbolic parameter                            
    * has been accepted.                                                                
    */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
    },  
    {                                                                                        
      PARAM_TIMNA_TIMNA_MPLS_GLBL_INFO_SET_GLBL_INFO_SET_MPLS_INFO_TTL_ARRAY_2_ID,                                                            
        "TTL_rry_2",                                                                       
        (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
        (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
        HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
        0,0,0,0,0,0,0,                                                                         
        "  mpls_info.TTL_array[0]:\r\n"
        "  TTLs each tunnel encapsulation point to one of these TTLs\r\n"
        "",
        "Ex:\r\n"                                                                    
        "  timna_api mpls glbl_info_set TTL_rry_0..3 0 mpls_rng_lst_lbl 0\r\n"
        "  mpls_rng_frst_lbl 0\r\n"
        "",
        "",                                                                           
      {0,0,0,0,0,0,BIT(0)},                                                                              
      LAST_ORDINAL,                                                                                     
      /*                                                                                   
      * Pointer to a function to call after symbolic parameter                            
      * has been accepted.                                                                
      */                                                                                  
      (VAL_PROC_PTR)NULL                                                                     
    },  
    {                                                                                        
      PARAM_TIMNA_TIMNA_MPLS_GLBL_INFO_SET_GLBL_INFO_SET_MPLS_INFO_TTL_ARRAY_3_ID,                                                            
        "TTL_rry_3",                                                                       
        (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
        (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
        HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
        0,0,0,0,0,0,0,                                                                         
        "  mpls_info.TTL_array[0]:\r\n"
        "  TTLs each tunnel encapsulation point to one of these TTLs\r\n"
        "",
        "Ex:\r\n"                                                                    
        "  timna_api mpls glbl_info_set TTL_rry_0..3 0 mpls_rng_lst_lbl 0\r\n"
        "  mpls_rng_frst_lbl 0\r\n"
        "",
        "",                                                                                  
      {0,0,0,0,0,0,BIT(0)},                                                                              
      LAST_ORDINAL,                                                                                     
      /*                                                                                   
      * Pointer to a function to call after symbolic parameter                            
      * has been accepted.                                                                
      */                                                                                  
      (VAL_PROC_PTR)NULL                                                                     
    },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MPLS_GLBL_INFO_SET_GLBL_INFO_SET_MPLS_INFO_MPLS_RANGE_LAST_LABEL_ID,                                                            
    "mpls_rng_lst_lbl",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  mpls_info.mpls_range.last_label:\r\n"
    "  The last label in the range\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mpls glbl_info_set [TIMNA_MPLS_TUNNEL_NOF_TTL 0\r\n"
    "  mpls_rng_lst_lbl 0 mpls_rng_frst_lbl 0\r\n"
    "",
    "",                                                                                  
    {0,0,0,0,0,0,BIT(0)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MPLS_GLBL_INFO_SET_GLBL_INFO_SET_MPLS_INFO_MPLS_RANGE_FIRST_LABEL_ID,                                                            
    "mpls_rng_frst_lbl",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  mpls_info.mpls_range.first_label:\r\n"
    "  The First label in the range\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mpls glbl_info_set [TIMNA_MPLS_TUNNEL_NOF_TTL 0\r\n"
    "  mpls_rng_lst_lbl 0 mpls_rng_frst_lbl 0\r\n"
    "",
    "",                                                                                  
    {0,0,0,0,0,0,BIT(0)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MPLS_GLBL_INFO_GET_GLBL_INFO_GET_ID,                                                            
    "glbl_info_get",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Set the global MPLS information.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mpls glbl_info_get\r\n"
    "",
    "",                                                                                  
    {0,0,0,0,0,0,BIT(1)},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MPLS_TUNNEL_SET_TUNNEL_SET_ID,                                                            
    "tunnel_set",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Add Mpls Tunnel, with id 'My-MAC' the given info (label,exp bits,\r\n"
    "  TTL, etc..)\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mpls tunnel_set tnnl_ndx 0 ptr 0 ttl_ptr\r\n"
    "  0 exp 0 lbl_id 0 is_arp_nly 0 is_vld 0\r\n"
    "",
    "",                                                                                  
    {0,0,0,0,0,0,BIT(2)},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MPLS_TUNNEL_SET_TUNNEL_SET_TUNNEL_NDX_ID,                                                            
    "tnnl_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  tunnel_ndx:\r\n"
    "  Tunnel id.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mpls tunnel_set tnnl_ndx 0 ptr 0 ttl_ptr\r\n"
    "  0 exp 0 lbl_id 0 is_arp_nly 0 is_vld 0\r\n"
    "",
    "",                                                                                  
    {0,0,0,0,0,0,BIT(2)},                                                                              
    3,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MPLS_TUNNEL_SET_TUNNEL_SET_TUNNEL_INFO_ARP_INFO_PTR_ID,                                                            
    "ptr",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  tunnel_info.arp_info_ptr:\r\n"
    "  Pointer to entry that determine how to edit the outgoing packet. Should be\r\n"
    "  configured by timna_mpls_glbl_info_set()\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mpls tunnel_set tnnl_ndx 0 ptr 0 ttl_ptr\r\n"
    "  0 exp 0 lbl_id 0 is_arp_nly 0 is_vld 0\r\n"
    "",
    "",                                                                                  
    {0,0,0,0,0,0,BIT(2)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MPLS_TUNNEL_SET_TUNNEL_SET_TUNNEL_INFO_TTL_PTR_ID,                                                            
    "ttl_ptr",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  tunnel_info.ttl_ptr:\r\n"
    "  Pointer to 4 configured TTL.Should be configured by\r\n"
    "  timna_mpls_glbl_info_set()When the packet is MPLS LSR packet, this setting is\r\n"
    "  ignored, and the TTL is inherited from the LSR label.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mpls tunnel_set tnnl_ndx 0 ptr 0 ttl_ptr\r\n"
    "  0 exp 0 lbl_id 0 is_arp_nly 0 is_vld 0\r\n"
    "",
    "",                                                                                  
    {0,0,0,0,0,0,BIT(2)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MPLS_TUNNEL_SET_TUNNEL_SET_TUNNEL_INFO_EXP_ID,                                                            
    "exp",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  tunnel_info.exp:\r\n"
    "  Experimental bits outgoing traffic over this Tunnel.When the packet is MPLS\r\n"
    "  LSR packet, this setting is ignored, and the EXP is inherited from the LSR\r\n"
    "  label.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mpls tunnel_set tnnl_ndx 0 ptr 0 ttl_ptr\r\n"
    "  0 exp 0 lbl_id 0 is_arp_nly 0 is_vld 0\r\n"
    "",
    "",                                                                                  
    {0,0,0,0,0,0,BIT(2)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MPLS_TUNNEL_SET_TUNNEL_SET_TUNNEL_INFO_LABEL_ID_ID,                                                            
    "lbl_id",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  tunnel_info.label_id:\r\n"
    "  Tunnel label\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mpls tunnel_set tnnl_ndx 0 ptr 0 ttl_ptr\r\n"
    "  0 exp 0 lbl_id 0 is_arp_nly 0 is_vld 0\r\n"
    "",
    "",                                                                                  
    {0,0,0,0,0,0,BIT(2)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MPLS_TUNNEL_SET_TUNNEL_SET_TUNNEL_INFO_IS_ARP_ONLY_ID,                                                            
    "is_arp_nly",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  tunnel_info.is_arp_only:\r\n"
    "  TRUE: There is no tunnel encapsulation. Only the arp_info_ptr is relevant for\r\n"
    "  arriving packets.FLASE: Packets are encapsulated with MPLS tunnel-id.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mpls tunnel_set tnnl_ndx 0 ptr 0 ttl_ptr\r\n"
    "  0 exp 0 lbl_id 0 is_arp_nly 0 is_vld 0\r\n"
    "",
    "",                                                                                  
    {0,0,0,0,0,0,BIT(2)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MPLS_TUNNEL_SET_TUNNEL_SET_TUNNEL_INFO_IS_VALID_ID,                                                            
    "is_vld",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  tunnel_info.is_valid:\r\n"
    "  TRUE: The entry is valid.FALSE: The entry is invalid. A packet that arrives\r\n"
    "  to this entry is dropped.Note: The bellow information is written when the\r\n"
    "  entry is set to invalid as well.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mpls tunnel_set tnnl_ndx 0 ptr 0 ttl_ptr\r\n"
    "  0 exp 0 lbl_id 0 is_arp_nly 0 is_vld 0\r\n"
    "",
    "",                                                                                  
    {0,0,0,0,0,0,BIT(2)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MPLS_TUNNEL_GET_TUNNEL_GET_ID,                                                            
    "tunnel_get",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Add Mpls Tunnel, with id 'My-MAC' the given info (label,exp bits,\r\n"
    "  TTL, etc..)\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mpls tunnel_get tnnl_ndx 0\r\n"
    "",
    "",                                                                                  
    {0,0,0,0,0,0,BIT(3)},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MPLS_TUNNEL_GET_TUNNEL_GET_TUNNEL_NDX_ID,                                                            
    "tnnl_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  tunnel_ndx:\r\n"
    "  Tunnel id.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mpls tunnel_get tnnl_ndx 0\r\n"
    "",
    "",                                                                                  
    {0,0,0,0,0,0,BIT(3)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MPLS_LSR_ILM_SET_LSR_ILM_SET_ID,                                                            
    "lsr_ilm_set",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Ingress Label Mapping of MPLS label to destination OutLif,\r\n"
    "  for MPLS LSR forwarding.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mpls lsr_ilm_set in_lbl_ndx 0 tlf_id 0\r\n"
    "",
    "",                                                                                  
    {0,0,0,0,0,0,BIT(4)},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MPLS_LSR_ILM_SET_LSR_ILM_SET_IN_LABEL_NDX_ID,                                                            
    "in_lbl_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  in_label_ndx:\r\n"
    "  The MPLS In Label to be mapped \r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mpls lsr_ilm_set in_lbl_ndx 0 tlf_id 0\r\n"
    "",
    "",                                                                                  
    {0,0,0,0,0,0,BIT(4)},                                                                              
    3,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MPLS_LSR_ILM_SET_LSR_ILM_SET_OUTLIF_ID_ID,                                                            
    "tlf_id",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  outlif_id:\r\n"
    "  Out Lif ID. Range 32K to (256K-1), or '0' for invalid\r\n"
    "  OutLIF.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mpls lsr_ilm_set in_lbl_ndx 0 tlf_id 0\r\n"
    "",
    "",                                                                                  
    {0,0,0,0,0,0,BIT(4)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MPLS_LSR_ILM_GET_LSR_ILM_GET_ID,                                                            
    "lsr_ilm_get",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Ingress Label Mapping of MPLS label to destination OutLif,\r\n"
    "  for MPLS LSR forwarding.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mpls lsr_ilm_get in_lbl_ndx 0\r\n"
    "",
    "",                                                                                  
    {0,0,0,0,0,0,BIT(5)},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MPLS_LSR_ILM_GET_LSR_ILM_GET_IN_LABEL_NDX_ID,                                                            
    "in_lbl_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  in_label_ndx:\r\n"
    "  The MPLS In Label to be mapped \r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mpls lsr_ilm_get in_lbl_ndx 0\r\n"
    "",
    "",                                                                                  
    {0,0,0,0,0,0,BIT(5)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MPLS_LSR_EDIT_INFO_SET_LSR_EDIT_INFO_SET_ID,                                                            
    "lsr_edit_info_set",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Set the editing information for packets that arrives to the\r\n"
    "  egress with the specified OutLif.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mpls lsr_edit_info_set tlf_ndx 0 tnnl_ncp_id 0\r\n"
    "  is_php 0 out_lbl 0 is_vld 0\r\n"
    "",
    "",                                                                                  
    {0,0,0,0,0,0,BIT(6)},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MPLS_LSR_EDIT_INFO_SET_LSR_EDIT_INFO_SET_OUTLIF_NDX_ID,                                                            
    "tlf_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  outlif_ndx:\r\n"
    "  The Out LIF index attached to the packet. \r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mpls lsr_edit_info_set tlf_ndx 0 tnnl_ncp_id 0\r\n"
    "  is_php 0 out_lbl 0 is_vld 0\r\n"
    "",
    "",                                                                                  
    {0,0,0,0,0,0,BIT(6)},                                                                              
    3,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MPLS_LSR_EDIT_INFO_SET_LSR_EDIT_INFO_SET_EDIT_INFO_TUNNEL_ENCAP_ID_ID,                                                            
    "tnnl_ncp_id",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  edit_info.tunnel_encap_id:\r\n"
    "  Range: 0-256KTunnel encapsulation ID. Point to the tunnel information.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mpls lsr_edit_info_set tlf_ndx 0 tnnl_ncp_id 0\r\n"
    "  is_php 0 out_lbl 0 is_vld 0\r\n"
    "",
    "",                                                                                  
    {0,0,0,0,0,0,BIT(6)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MPLS_LSR_EDIT_INFO_SET_LSR_EDIT_INFO_SET_EDIT_INFO_IS_PHP_ID,                                                            
    "is_php",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  edit_info.is_php:\r\n"
    "  Penultimate Hop Popping.When asserted, the out-label is not appended to the\r\n"
    "  packet, and therefore the 'out_label' field is ignored.The feature is\r\n"
    "  applicable when the next hop lack the capability of label termination.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mpls lsr_edit_info_set tlf_ndx 0 tnnl_ncp_id 0\r\n"
    "  is_php 0 out_lbl 0 is_vld 0\r\n"
    "",
    "",                                                                                  
    {0,0,0,0,0,0,BIT(6)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MPLS_LSR_EDIT_INFO_SET_LSR_EDIT_INFO_SET_EDIT_INFO_OUT_LABEL_ID,                                                            
    "out_lbl",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  edit_info.out_label:\r\n"
    "  The Out Label ID.Not relevant if 'is_php' is asserted.Range: 0-(256K-1).\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mpls lsr_edit_info_set tlf_ndx 0 tnnl_ncp_id 0\r\n"
    "  is_php 0 out_lbl 0 is_vld 0\r\n"
    "",
    "",                                                                                  
    {0,0,0,0,0,0,BIT(6)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MPLS_LSR_EDIT_INFO_SET_LSR_EDIT_INFO_SET_EDIT_INFO_IS_VALID_ID,                                                            
    "is_vld",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  edit_info.is_valid:\r\n"
    "  TRUE: The OutLif is valid for MPLS LSRFALSE: The OutLif is invalid for MPLS\r\n"
    "  LSR, and packets that get with this OutLif are dropped.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mpls lsr_edit_info_set tlf_ndx 0 tnnl_ncp_id 0\r\n"
    "  is_php 0 out_lbl 0 is_vld 0\r\n"
    "",
    "",                                                                                  
    {0,0,0,0,0,0,BIT(6)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MPLS_LSR_EDIT_INFO_GET_LSR_EDIT_INFO_GET_ID,                                                            
    "lsr_edit_info_get",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  Set the editing information for packets that arrives to the\r\n"
    "  egress with the specified OutLif.\r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mpls lsr_edit_info_get tlf_ndx 0\r\n"
    "",
    "",                                                                                  
    {0,0,0,0,0,0,BIT(7)},                                                                              
    2,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_TIMNA_MPLS_LSR_EDIT_INFO_GET_LSR_EDIT_INFO_GET_OUTLIF_NDX_ID,                                                            
    "tlf_ndx",                                                                       
    (PARAM_VAL_RULES *)&timna_api_free_vals[0],                                            
    (sizeof(timna_api_free_vals) / sizeof(timna_api_free_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MAY_NOT_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "  outlif_ndx:\r\n"
    "  The Out LIF index attached to the packet. \r\n"
    "",
    "Ex:\r\n"                                                                    
    "  timna_api mpls lsr_edit_info_get tlf_ndx 0\r\n"
    "",
    "",                                                                                  
    {0,0,0,0,0,0,BIT(7)},                                                                              
    LAST_ORDINAL,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
  {                                                                                        
    PARAM_TIMNA_API_MPLS_ID,                                                            
    "mpls",                                                                       
    (PARAM_VAL_RULES *)&timna_api_empty_vals[0],                                            
    (sizeof(timna_api_empty_vals) / sizeof(timna_api_empty_vals[0])) - 1,                    
    HAS_NO_DEFAULT | MUST_APPEAR,(PARAM_VAL *)0,                                           
    0,0,0,0,0,0,0,                                                                         
    "",
    "",
    "",                                                                                  
    {0,0,0,0,0,0,BIT(0)|BIT(1)|BIT(2)|BIT(3)|BIT(4)|BIT(5)|BIT(6)|BIT(7)},                                                                              
    1,                                                                                     
      /*                                                                                   
       * Pointer to a function to call after symbolic parameter                            
       * has been accepted.                                                                
       */                                                                                  
    (VAL_PROC_PTR)NULL                                                                     
  },  
#endif /* } mpls*/

/*                                                                                         
 * Last element. Do not remove.                                                            
 */                                                                                        
  {                                                                                        
    PARAM_END_OF_LIST                                                                      
  }                                                                                        
}                                                                                          
#endif                                                                                     
;  


                                                                    
/* } */                                                             
                                                                    
                                                                    
#ifdef _MSC_VER                                                     
  #pragma pack(pop)                                                 
#endif                                                              
                                                                    
#ifdef  __cplusplus                                                 
}                                                                   
#endif                                                              
                                                                    
                                                                    
/* } __UI_ROM_DEFI_TIMNA_API_INCLUDED__*/                        
#endif                                                              

#endif /*#if LINK_TIMNA_LIBRARIES*/
