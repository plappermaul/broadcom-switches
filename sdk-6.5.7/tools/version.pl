#!/usr/bin/perl
#
# Build a version.c
#
# $Id: version.pl,v 1.2 Broadcom SDK $
#
# $Copyright: (c) 2016 Broadcom.
# Broadcom Proprietary and Confidential. All rights reserved.$
# 

($prog = $0) =~ s/.*\///;

use Config;
use Sys::Hostname;
use Time::localtime;
use Cwd;

# if $SDK env var is set, read release file directly
# if not set, search back from current working directory
if ($ENV{'SDK'}) {
	$TREE = $ENV{'SDK'};
	if (open(F, "$TREE/RELEASE")) {
		chop($RELEASE = <F>);
		close F;
	} else {
		$RELEASE = "unknown_release";
	}
} else {
	$dir = cwd();
	do {
		if (open(F, "$dir/RELEASE")) {
			chop($RELEASE = <F>);
			close F;
			($TREE = $dir) =~ s@/[^/]*$@@;
		} else {
			$dir =~ s@/[^/]*$@@;
		}
	} while (!defined $RELEASE && $dir ne "");
	$RELEASE = "unknown_release" unless defined $RELEASE;
	$TREE = "unknown_tree" unless defined $TREE;
}

$USER = getlogin() || getpwuid($<) || "unknown_user";
$HOST = hostname() || "unknown_host";
$OS = $Config{'osname'} || "unknown_os";
$ARCH = $Config{'archname'} || "unknown_arch";
$ARCH =~ s/-.*$//;
$DATE = ctime() || "unknown_date";
$DATESTAMP = sprintf "%04d%02d%02d",
	localtime->year()+1900,
	localtime->mon+1,
	localtime->mday;

if ($ARGV[0] eq "-release") {
	print $RELEASE, "\n";
} elsif ($ARGV[0] eq "-tree") {
	print $TREE, "\n";
} elsif ($ARGV[0] eq "-user") {
	print $USER, "\n";
} elsif ($ARGV[0] eq "-host") {
	print $HOST, "\n";
} elsif ($ARGV[0] eq "-date") {
	print $DATE, "\n";
} elsif ($ARGV[0] eq "-datestamp") {
	print $DATESTAMP, "\n";
} elsif ($ARGV[0] eq "-arch") {
	print $ARCH, "\n";
} elsif ($ARGV[0] eq "-os") {
	print $OS, "\n";
} elsif ($ARGV[0] eq "-(help" || $ARGV[0] eq "-?") {
	print "$prog [-release|-tree|-user|-host|-date|-datestamp|-arch|-os|-help]\n";
	exit 1;
} else {

print <<"EOT";
/*
 * This file is automatically generated by $prog. DO NOT EDIT!
 */

char	*_build_release =	"$RELEASE";
char	*_build_tree =		"$TREE";
char	*_build_user =		"$USER";
char	*_build_host =		"$HOST";
char	*_build_date =		"$DATE";
char	*_build_datestamp =	"$DATESTAMP";
char	*_build_arch =		"$ARCH";
char	*_build_os =		"$OS";
EOT

}
