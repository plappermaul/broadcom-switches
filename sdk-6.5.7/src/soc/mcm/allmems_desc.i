/*
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated from the registers file.
 * Edits to this file will be lost when it is regenerated.
 *
 * $Id: $
 * $Copyright: (c) 2016 Broadcom.
 * Broadcom Proprietary and Confidential. All rights reserved.$
 *
 * File:        allmems_desc.i
 * Purpose:     Memory descriptions.
 */

    /* AGER_EVENT                */ "Ager event database for queue index 31 to 0",
    /* AGER_FLAGS                */ "Ager flags database for queue index 31 to 0",
    /* AGER_THRESHOLD            */ "Ager threshold database for queue index 31 to 0",
    /* AGER_TS_0_HI              */ "Ager queue empty status and timestamp database for queue index 31 to 16, lower 2K",
    /* AGER_TS_0_LO              */ "Ager queue empty status and timestamp database for queue index 15 to 0, lower 2K",
    /* AGER_TS_1_HI              */ "Ager queue empty status and timestamp database for queue index 31 to 16, upper 2K",
    /* AGER_TS_1_LO              */ "Ager queue empty status and timestamp database for queue index 15 to 0, upper 2K",
    /* AGING_CTR_MEM             */ "Aging Counter RAM",
    /* AGING_EXP_MEM             */ "Aging Expiration Status RAM",
    /* AGM_MONITOR_TABLE         */ "Aggregation Group Monitor Table.",
    /* ALLOCBUFFSCNT             */ "This database holds the number of buffers currently allocated to queue",
    /* ALTERNATE_EMIRROR_BITMAP  */ "Source Modid based blocking mask table",
    /* AM_TOP_MEM_1              */ "mem1",
    /* AM_TOP_MEM_2              */ "mem2",
    /* ARB_TDM_TABLE             */ "Arbiter TDM Table",
    /* ARB_TDM_TABLE_0           */ "MMU to EPIPE Arbiter TDM Table, PIPE 0",
    /* ARB_TDM_TABLE_1           */ "MMU to EPIPE Arbiter TDM Table, PIPE 1",
    /* AXP_CH_NLF_INPUT_COUNTER_TABLE */ "Byte and Packet counts for data flow into each NLF.  NLF Number is used as index.",
    /* AXP_CH_NLF_OUTPUT_COUNTER_TABLE */ "Byte and Packet counts for data flow into each NLF. NLF number used as index.",
    /* AXP_SM_CHAR_REMAP0        */ "Character Remap Table for data to Regex Engine 0.",
    /* AXP_SM_CHAR_REMAP1        */ "Character Remap Table for data to Regex Engine 1.",
    /* AXP_SM_CHAR_REMAP2        */ "Character Remap Table for data to Regex Engine 2.",
    /* AXP_SM_CHAR_REMAP3        */ "Character Remap Table for data to Regex Engine 3.",
    /* AXP_SM_CHAR_REMAP4        */ "Character Remap Table for data to Regex Engine 4.",
    /* AXP_SM_CHAR_REMAP5        */ "Character Remap Table for data to Regex Engine 5.",
    /* AXP_SM_CHAR_REMAP6        */ "Character Remap Table for data to Regex Engine 6.",
    /* AXP_SM_CHAR_REMAP7        */ "Character Remap Table for data to Regex Engine 7.",
    /* AXP_SM_CHAR_REMAP8        */ "Character Remap Table for data to Regex Engine 8.",
    /* AXP_SM_CHAR_REMAP9        */ "Character Remap Table for data to Regex Engine 9.",
    /* AXP_SM_CHAR_REMAP10       */ "Character Remap Table for data to Regex Engine 10.",
    /* AXP_SM_CHAR_REMAP11       */ "Character Remap Table for data to Regex Engine 11.",
    /* AXP_SM_CHAR_REMAP12       */ "Character Remap Table for data to Regex Engine 12.",
    /* AXP_SM_CHAR_REMAP13       */ "Character Remap Table for data to Regex Engine 13.",
    /* AXP_SM_CHAR_REMAP14       */ "Character Remap Table for data to Regex Engine 14.",
    /* AXP_SM_CHAR_REMAP15       */ "Character Remap Table for data to Regex Engine 15.",
    /* AXP_SM_CHAR_REMAP16       */ "Character Remap Table for data to Regex Engine 16.",
    /* AXP_SM_CHAR_REMAP17       */ "Character Remap Table for data to Regex Engine 17.",
    /* AXP_SM_CHAR_REMAP18       */ "Character Remap Table for data to Regex Engine 18.",
    /* AXP_SM_CHAR_REMAP19       */ "Character Remap Table for data to Regex Engine 19.",
    /* AXP_SM_CHAR_REMAP20       */ "Character Remap Table for data to Regex Engine 20.",
    /* AXP_SM_CHAR_REMAP21       */ "Character Remap Table for data to Regex Engine 21.",
    /* AXP_SM_CHAR_REMAP22       */ "Character Remap Table for data to Regex Engine 22.",
    /* AXP_SM_CHAR_REMAP23       */ "Character Remap Table for data to Regex Engine 23.",
    /* AXP_SM_CHAR_REMAP24       */ "Character Remap Table for data to Regex Engine 24.",
    /* AXP_SM_CHAR_REMAP25       */ "Character Remap Table for data to Regex Engine 25.",
    /* AXP_SM_CHAR_REMAP26       */ "Character Remap Table for data to Regex Engine 26.",
    /* AXP_SM_CHAR_REMAP27       */ "Character Remap Table for data to Regex Engine 27.",
    /* AXP_SM_CHAR_REMAP28       */ "Character Remap Table for data to Regex Engine 28.",
    /* AXP_SM_CHAR_REMAP29       */ "Character Remap Table for data to Regex Engine 29.",
    /* AXP_SM_CHAR_REMAP30       */ "Character Remap Table for data to Regex Engine 30.",
    /* AXP_SM_CHAR_REMAP31       */ "Character Remap Table for data to Regex Engine 31.",
    /* AXP_SM_FLOW_TABLE_BULK_MATCH_DATA */ "Flow Table Bulk Clear Data registers.",
    /* AXP_SM_FLOW_TABLE_BULK_MATCH_MASK */ "Flow Table Bulk Clear Mask Control registers.",
    /* AXP_SM_FLOW_TABLE_BULK_REPLACE_DATA */ "Flow Table Bulk Clear Data registers.",
    /* AXP_SM_FLOW_TABLE_BULK_REPLACE_MASK */ "Flow Table Bulk Clear Mask Control registers.",
    /* AXP_SM_FLOW_TABLE_MEM     */ "Signature Match Flow Table Memory (one entry per flow)",
    /* AXP_SM_MATCH_COUNTERS_MEM0 */ "Match Counters 0 (one set of counters per rule)",
    /* AXP_SM_MATCH_COUNTERS_MEM1 */ "Match Counters 1 (one set of counters per rule)",
    /* AXP_SM_MATCH_COUNTERS_MEM2 */ "Match Counters 2 (one set of counters per rule)",
    /* AXP_SM_MATCH_COUNTERS_MEM3 */ "Match Counters 3 (one set of counters per rule)",
    /* AXP_SM_MATCH_TABLE_BULK_MATCH_DATA */ "Match Table Bulk Clear Data registers.",
    /* AXP_SM_MATCH_TABLE_BULK_MATCH_MASK */ "Match Table Bulk Clear Mask Control registers.",
    /* AXP_SM_MATCH_TABLE_BULK_REPLACE_DATA */ "Match Table Bulk Clear Data registers.",
    /* AXP_SM_MATCH_TABLE_BULK_REPLACE_MASK */ "Match Table Bulk Clear Mask Control registers.",
    /* AXP_SM_MATCH_TABLE_MEM0   */ "Match Table Memory 0 (one entry per rule ID)",
    /* AXP_SM_MATCH_TABLE_MEM1   */ "Match Table Memory 1 (one entry per rule ID)",
    /* AXP_SM_MATCH_TABLE_MEM2   */ "Match Table Memory 2 (one entry per rule ID)",
    /* AXP_SM_MATCH_TABLE_MEM3   */ "Match Table Memory 3 (one entry per rule ID)",
    /* AXP_SM_PACKET_BUFFER_MEM  */ "Packet Buffer Memory",
    /* AXP_SM_STATE_TABLE_BULK_MATCH_DATA */ "State Table Bulk Clear Data registers.",
    /* AXP_SM_STATE_TABLE_BULK_MATCH_MASK */ "State Table Bulk Clear Mask Control registers.",
    /* AXP_SM_STATE_TABLE_BULK_REPLACE_DATA */ "State Table Bulk Clear Data registers.",
    /* AXP_SM_STATE_TABLE_BULK_REPLACE_MASK */ "State Table Bulk Clear Mask Control registers.",
    /* AXP_SM_STATE_TABLE_MEM0   */ "State Table Memory 0",
    /* AXP_SM_STATE_TABLE_MEM1   */ "State Table Memory 1",
    /* AXP_SM_STATE_TABLE_MEM2   */ "State Table Memory 2",
    /* AXP_SM_STATE_TABLE_MEM3   */ "State Table Memory 3",
    /* AXP_SM_STATE_TABLE_MEM4   */ "State Table Memory 4",
    /* AXP_SM_STATE_TABLE_MEM5   */ "State Table Memory 5",
    /* AXP_SM_STATE_TABLE_MEM6   */ "State Table Memory 6",
    /* AXP_SM_STATE_TABLE_MEM7   */ "State Table Memory 7",
    /* AXP_WLAN_COS_MAP          */ "Final Output Port[5:0], INT_PRI",
    /* AXP_WRX_SVP_ASSIGNMENT    */ "WLAN SVP Assignment Table",
    /* AXP_WRX_WCD               */ "Wireless Client Database Table",
    /* AXP_WTX_DSCP_MAP          */ "MAP the PRI/CFI bits for tunnel outer vlan",
    /* AXP_WTX_DVP_PROFILE       */ "DVP Based properties for WLAN TX",
    /* AXP_WTX_FRAG_ID           */ "Tunnel ID used for CAPWAP FRAG ID and IPv4 ID",
    /* AXP_WTX_PRI_MAP           */ "MAP the PRI/CFI bits for tunnel outer vlan",
    /* AXP_WTX_TRUNK_BLOCK_MASK  */ "Contains trunk nonunicast blockmask",
    /* AXP_WTX_TRUNK_GROUP_BITMAP */ "Contains trunk group bitmap",
    /* AXP_WTX_TUNNEL            */ "DVP Based properties for WLAN TX",
    /* BAA_BUCKET_0              */ "Database for BAA working credit",
    /* BAA_BUCKET_1              */ "Database for BAA working credit",
    /* BAA_BUCKET_2              */ "Database for BAA working credit",
    /* BAA_BUCKET_3              */ "Database for BAA working credit",
    /* BAA_EVENT                 */ "BAA change soon status",
    /* BAA_LEAK_A0               */ "Bank A Data base to define BAA leak rates in bits per clock cycle",
    /* BAA_LEAK_A1               */ "Bank A Data base to define BAA leak rates in bits per clock cycle",
    /* BAA_LEAK_A2               */ "Bank A Data base to define BAA leak rates in bits per clock cycle",
    /* BAA_LEAK_A3               */ "Bank A Data base to define BAA leak rates in bits per clock cycle",
    /* BAA_LEAK_B0               */ "Bank B Data base to define BAA leak rates in bits per clock cycle",
    /* BAA_LEAK_B1               */ "Bank B Data base to define BAA leak rates in bits per clock cycle",
    /* BAA_LEAK_B2               */ "Bank B Data base to define BAA leak rates in bits per clock cycle",
    /* BAA_LEAK_B3               */ "Bank B Data base to define BAA leak rates in bits per clock cycle",
    /* BAA_STATE_HUNGRY          */ "BAA hungry flags for 128 queues",
    /* BAA_STATE_STARVING        */ "BAA starving flags for 128 queues",
    /* BCAST_BLOCK_MASK          */ "Broadcast Block Mask, FeatureSpecific-Ethernet.",
    /* BDM_BDM                   */ "Bundle descriptor memory for DQM-BDM.\n 16 descriptors per entry.",
    /* BDM_BDM_FPC               */ "Free pointer memory for DQM-BDM.",
    /* BLH_FSRD_WL_EXT_MEM       */ "SerDes PRAM interface.",
    /* BRDC_CCH_CHF              */ "",
    /* BRDC_CCH_CLF              */ "",
    /* BRDC_CCH_QUERY_DATA_FIFO  */ "",
    /* BRDC_CCH_REACH_FIFO       */ "",
    /* BRDC_DCML_AUTO_DOC_NAME_50 */ "INTERNAL",
    /* BRDC_DCML_AUTO_DOC_NAME_51 */ "INTERNAL",
    /* BRDC_DCML_AUTO_DOC_NAME_52 */ "INTERNAL",
    /* BRDC_DCML_AUTO_DOC_NAME_53 */ "INTERNAL",
    /* BRDC_DCML_AUTO_DOC_NAME_54 */ "INTERNAL",
    /* BRDC_DCML_AUTO_DOC_NAME_55 */ "INTERNAL",
    /* BRDC_DCML_CDM_FIFOS_MEM   */ "25 fifos (24 dest. + 1 Gsync) x 36 entries X 122 bit per entry",
    /* BRDC_FSRD_FSRD_PROM_MEM   */ "SerDes PRAM interface.",
    /* BRDC_FSRD_FSRD_WL_EXT_MEM */ "WarpLite 8051 memory interface.",
    /* BRDC_LCM_AUTO_DOC_NAME_15 */ "INTERNAL",
    /* BRDC_LCM_AUTO_DOC_NAME_16 */ "INTERNAL",
    /* BRDC_LCM_AUTO_DOC_NAME_17 */ "INTERNAL",
    /* BRDC_LCM_AUTO_DOC_NAME_18 */ "INTERNAL",
    /* BRDC_LCM_AUTO_DOC_NAME_19 */ "INTERNAL",
    /* BRDC_QRH_CUCT             */ "2Kx192 CRH unicast routing and distribution table. Provides direct access to table.",
    /* BRDC_QRH_DLLU             */ "192x10x4 DRH last link used table. Information is kept per link bundle.",
    /* BRDC_QRH_DUCT             */ "2Kx192 DRH unicast routing and distribution table. Provides direct access to table.",
    /* BRDC_QRH_FFLB             */ "Fault FAPS load balancing. Maps each FAP to load balancing context.  There are total 4 contexts. By default all FAPs maps to context 0. Address is bits 10:4 of FAP ID. Data for each FAP contaion 2 bits. 4 LSBs of FAP ID is offset in units of 2 bits. For example in address 15, bits 1:0 are FAP 240, bits 3:2 are FAP 241, up to bits 31:30 which are FAP 255.",
    /* BRDC_QRH_MCLBT            */ "192x192 DRH multicast load balancing table. Provides direct access to table . All tables should be written with the same values for proper operation.",
    /* BRDC_QRH_MCSFF            */ "MultiCase Source Fap Filter - filtering out replication which were originated in the same FAP Address: List of FAPS  - FAP-ID List Of Links - group-ID (similar to MCLBT index). Data itself is as following: Bit 11:       enable (if set  enables this feature for this link-group ID) Bit 10:0:   FAP-ID connected to this link group Note  this works only in FE2 single stage and FE3",
    /* BRDC_QRH_MNOL             */ "Minimum number of link",
    /* BRDC_QRH_RESERVED_21      */ "INTERNAL",
    /* BRDC_QRH_RESERVED_22      */ "INTERNAL",
    /* BRDC_QRH_RESERVED_23      */ "INTERNAL",
    /* BSAFE_CMD_DATA_IN         */ "Command Data Out Register",
    /* BSAFE_CMD_DATA_OUT        */ "Command Data Out Register",
    /* BUFFER_AGE                */ "This database holds current buffer age fields.",
    /* BUFFER_LIST               */ "This database is the Buffer next memory used to form queue/free pool link lists",
    /* BURST_SIZE_PER_ESET       */ "Burst Size Per Eset for Multicasts",
    /* BURST_SIZE_PER_NODE       */ "Burst size per node",
    /* CALENDAR                  */ "NOT USED",
    /* CALENDAR0                 */ "Timeslot calendar background engine database : bank 0",
    /* CALENDAR1                 */ "Timeslot calendar background engine database : bank 1",
    /* CBLOCK_MOD_LOOKUP         */ "This Lookup contains cblock divide by num CIs results (div and mod).",
    /* CCH_CHF                   */ "",
    /* CCH_CLF                   */ "",
    /* CCH_QUERY_DATA_FIFO       */ "",
    /* CCH_REACH_FIFO            */ "",
    /* CCP_MEM                   */ "Copy Count Pool RAM",
    /* CCS_CDM_FIFOS_MEM         */ "37 fifos (36 dest. + 1 Gsync) x 36 entries X 122 bit per entry",
    /* CCS_QUERY_DATA_FIFO       */ "",
    /* CCS_REACH_FIFO            */ "",
    /* CDUM_INSTRUMENTATION_STATS_MEM_PFC_MEMA */ "instrumentation statistics mem. Per port pfc0 and pfc1 - 0 to 1 transactions , max interval duration, and duty cycle.",
    /* CDUM_INSTRUMENTATION_STATS_MEM_PFC_MEMB */ "instrumentation statistics mem. Per port pfc2 and pfc3 - 0 to 1 transactions , max interval duration, and duty cycle.",
    /* CDUM_INSTRUMENTATION_STATS_MEM_PFC_MEMC */ "instrumentation statistics mem. Per port pfc4 and pfc5 - 0 to 1 transactions , max interval duration, and duty cycle.",
    /* CDUM_INSTRUMENTATION_STATS_MEM_PFC_MEMD */ "instrumentation statistics mem. Per port pfc6 and pfc7 - 0 to 1 transactions , max interval duration, and duty cycle.",
    /* CDUM_INSTRUMENTATION_STATS_MEM_TRAFFIC_MEMA */ "instrumentation statistics mem. Per port - rx pkt/byte 64 bit counters",
    /* CDUM_INSTRUMENTATION_STATS_MEM_TRAFFIC_MEMB */ "instrumentation statistics mem. Per port - rx pkt/byte 64 bit counters",
    /* CDUM_RX_DATA_ASYNC_ALIGNER */ "rx data aligning from pm interface at tsc_clk to core_clk",
    /* CDUM_RX_MEMA_CTRL         */ "rx ctrl memory a",
    /* CDUM_RX_MEMA_DATA         */ "rx data memory a",
    /* CDUM_RX_MEMB_CTRL         */ "rx ctrl memory a",
    /* CDUM_RX_MEMB_DATA         */ "rx data memory b",
    /* CDUM_RX_MEMC_CTRL         */ "rx ctrl memory a",
    /* CDUM_RX_MEMC_DATA         */ "rx data memory c",
    /* CDUM_RX_MEMD_CTRL         */ "rx ctrl memory a",
    /* CDUM_RX_MEMD_DATA         */ "rx data memory d",
    /* CDUM_RX_MEME_CTRL         */ "rx ctrl memory e",
    /* CDUM_RX_MEME_DATA         */ "rx data memory e",
    /* CDUM_RX_MEMF_CTRL         */ "rx ctrl memory f",
    /* CDUM_RX_MEMF_DATA         */ "rx data memory f",
    /* CDUM_RX_MEMG_CTRL         */ "rx ctrl memory g",
    /* CDUM_RX_MEMG_DATA         */ "rx data memory g",
    /* CDUM_RX_MEMH_CTRL         */ "rx ctrl memory h",
    /* CDUM_RX_MEMH_DATA         */ "rx data memory h",
    /* CDUM_RX_MEMI_CTRL         */ "rx ctrl memory i",
    /* CDUM_RX_MEMI_DATA         */ "rx data memory i",
    /* CDUM_RX_MEMJ_CTRL         */ "rx ctrl memory j",
    /* CDUM_RX_MEMJ_DATA         */ "rx data memory j",
    /* CDUM_RX_MEMK_CTRL         */ "rx ctrl memory k",
    /* CDUM_RX_MEMK_DATA         */ "rx data memory k",
    /* CDUM_RX_MEML_CTRL         */ "rx ctrl memory l",
    /* CDUM_RX_MEML_DATA         */ "rx data memory l",
    /* CDUM_RX_MEMM_CTRL         */ "rx ctrl memory m",
    /* CDUM_RX_MEMM_DATA         */ "rx data memory m",
    /* CDUM_RX_MEMN_CTRL         */ "rx ctrl memory n",
    /* CDUM_RX_MEMN_DATA         */ "rx data memory n",
    /* CDUM_RX_MEMO_CTRL         */ "rx ctrl memory o",
    /* CDUM_RX_MEMO_DATA         */ "rx data memory o",
    /* CDUM_RX_MEMP_CTRL         */ "rx ctrl memory p",
    /* CDUM_RX_MEMP_DATA         */ "rx data memory p",
    /* CDUM_TX_MEMA              */ "tx DATA memory for CDU ports (400G port , 50G SerDes)",
    /* CDUM_TX_MEMA_CTRL         */ "tx CTRL memory for CDU ports (400G port , 50G SerDes)",
    /* CDUM_TX_MEMB              */ "tx DATA memory for CDU ports (400G port , 50G SerDes)",
    /* CDUM_TX_MEMB_CTRL         */ "tx CTRL memory for CDU ports (400G port , 50G SerDes)",
    /* CDUM_TX_MEMC              */ "tx DATA memory for CDU ports (400G port , 50G SerDes)",
    /* CDUM_TX_MEMC_CTRL         */ "tx CTRL memory for CDU ports (400G port , 50G SerDes)",
    /* CDUM_TX_MEMD              */ "tx DATA memory for CDU ports (400G port , 50G SerDes)",
    /* CDUM_TX_MEMD_CTRL         */ "tx CTRL memory for CDU ports (400G port , 50G SerDes)",
    /* CDUM_TX_MEME              */ "tx DATA memory for CDU ports (400G port , 50G SerDes)",
    /* CDUM_TX_MEME_CTRL         */ "tx CTRL memory for CDU ports (400G port , 50G SerDes)",
    /* CDUM_TX_MEMF              */ "tx DATA memory for CDU ports (400G port , 50G SerDes)",
    /* CDUM_TX_MEMF_CTRL         */ "tx CTRL memory for CDU ports (400G port , 50G SerDes)",
    /* CDUM_TX_MEMG              */ "tx DATA memory for CDU ports (400G port , 50G SerDes)",
    /* CDUM_TX_MEMG_CTRL         */ "tx CTRL memory for CDU ports (400G port , 50G SerDes)",
    /* CDUM_TX_MEMH              */ "tx DATA memory for CDU ports (400G port , 50G SerDes)",
    /* CDUM_TX_MEMH_CTRL         */ "tx CTRL memory for CDU ports (400G port , 50G SerDes)",
    /* CDUM_TX_MEMI              */ "tx DATA memory for CDU ports (400G port , 50G SerDes)",
    /* CDUM_TX_MEMI_CTRL         */ "tx CTRL memory for CDU ports (400G port , 50G SerDes)",
    /* CDUM_TX_MEMJ              */ "tx DATA memory for CDU ports (400G port , 50G SerDes)",
    /* CDUM_TX_MEMJ_CTRL         */ "tx CTRL memory for CDU ports (400G port , 50G SerDes)",
    /* CDU_INSTRUMENTATION_STATS_MEM_PFC_MEMA */ "instrumentation statistics mem. Per port pfc0 and pfc1 - 0 to 1 transactions , max interval duration, and duty cycle.",
    /* CDU_INSTRUMENTATION_STATS_MEM_PFC_MEMB */ "instrumentation statistics mem. Per port pfc2 and pfc3 - 0 to 1 transactions , max interval duration, and duty cycle.",
    /* CDU_INSTRUMENTATION_STATS_MEM_PFC_MEMC */ "instrumentation statistics mem. Per port pfc4 and pfc5 - 0 to 1 transactions , max interval duration, and duty cycle.",
    /* CDU_INSTRUMENTATION_STATS_MEM_PFC_MEMD */ "instrumentation statistics mem. Per port pfc6 and pfc7 - 0 to 1 transactions , max interval duration, and duty cycle.",
    /* CDU_INSTRUMENTATION_STATS_MEM_TRAFFIC_MEMA */ "instrumentation statistics mem. Per port - rx pkt/byte 64 bit counters",
    /* CDU_INSTRUMENTATION_STATS_MEM_TRAFFIC_MEMB */ "instrumentation statistics mem. Per port - rx pkt/byte 64 bit counters",
    /* CDU_RX_DATA_ASYNC_ALIGNER */ "rx data aligning from pm interface at tsc_clk to core_clk",
    /* CDU_RX_MEMA_CTRL          */ "rx ctrl memory a",
    /* CDU_RX_MEMA_DATA          */ "rx data memory a",
    /* CDU_RX_MEMB_CTRL          */ "rx ctrl memory a",
    /* CDU_RX_MEMB_DATA          */ "rx data memory b",
    /* CDU_RX_MEMC_CTRL          */ "rx ctrl memory a",
    /* CDU_RX_MEMC_DATA          */ "rx data memory c",
    /* CDU_RX_MEMD_CTRL          */ "rx ctrl memory a",
    /* CDU_RX_MEMD_DATA          */ "rx data memory d",
    /* CDU_RX_MEME_CTRL          */ "rx ctrl memory e",
    /* CDU_RX_MEME_DATA          */ "rx data memory e",
    /* CDU_RX_MEMF_CTRL          */ "rx ctrl memory f",
    /* CDU_RX_MEMF_DATA          */ "rx data memory f",
    /* CDU_RX_MEMG_CTRL          */ "rx ctrl memory g",
    /* CDU_RX_MEMG_DATA          */ "rx data memory g",
    /* CDU_RX_MEMH_CTRL          */ "rx ctrl memory h",
    /* CDU_RX_MEMH_DATA          */ "rx data memory h",
    /* CDU_RX_MEMI_CTRL          */ "rx ctrl memory i",
    /* CDU_RX_MEMI_DATA          */ "rx data memory i",
    /* CDU_RX_MEMJ_CTRL          */ "rx ctrl memory j",
    /* CDU_RX_MEMJ_DATA          */ "rx data memory j",
    /* CDU_RX_MEMK_CTRL          */ "rx ctrl memory k",
    /* CDU_RX_MEMK_DATA          */ "rx data memory k",
    /* CDU_RX_MEML_CTRL          */ "rx ctrl memory l",
    /* CDU_RX_MEML_DATA          */ "rx data memory l",
    /* CDU_RX_MEMM_CTRL          */ "rx ctrl memory m",
    /* CDU_RX_MEMM_DATA          */ "rx data memory m",
    /* CDU_RX_MEMN_CTRL          */ "rx ctrl memory n",
    /* CDU_RX_MEMN_DATA          */ "rx data memory n",
    /* CDU_RX_MEMO_CTRL          */ "rx ctrl memory o",
    /* CDU_RX_MEMO_DATA          */ "rx data memory o",
    /* CDU_RX_MEMP_CTRL          */ "rx ctrl memory p",
    /* CDU_RX_MEMP_DATA          */ "rx data memory p",
    /* CDU_TX_MEMA               */ "tx DATA memory for CDU ports (400G port , 50G SerDes)",
    /* CDU_TX_MEMA_CTRL          */ "tx CTRL memory for CDU ports (400G port , 50G SerDes)",
    /* CDU_TX_MEMB               */ "tx DATA memory for CDU ports (400G port , 50G SerDes)",
    /* CDU_TX_MEMB_CTRL          */ "tx CTRL memory for CDU ports (400G port , 50G SerDes)",
    /* CDU_TX_MEMC               */ "tx DATA memory for CDU ports (400G port , 50G SerDes)",
    /* CDU_TX_MEMC_CTRL          */ "tx CTRL memory for CDU ports (400G port , 50G SerDes)",
    /* CDU_TX_MEMD               */ "tx DATA memory for CDU ports (400G port , 50G SerDes)",
    /* CDU_TX_MEMD_CTRL          */ "tx CTRL memory for CDU ports (400G port , 50G SerDes)",
    /* CDU_TX_MEME               */ "tx DATA memory for CDU ports (400G port , 50G SerDes)",
    /* CDU_TX_MEME_CTRL          */ "tx CTRL memory for CDU ports (400G port , 50G SerDes)",
    /* CDU_TX_MEMF               */ "tx DATA memory for CDU ports (400G port , 50G SerDes)",
    /* CDU_TX_MEMF_CTRL          */ "tx CTRL memory for CDU ports (400G port , 50G SerDes)",
    /* CDU_TX_MEMG               */ "tx DATA memory for CDU ports (400G port , 50G SerDes)",
    /* CDU_TX_MEMG_CTRL          */ "tx CTRL memory for CDU ports (400G port , 50G SerDes)",
    /* CDU_TX_MEMH               */ "tx DATA memory for CDU ports (400G port , 50G SerDes)",
    /* CDU_TX_MEMH_CTRL          */ "tx CTRL memory for CDU ports (400G port , 50G SerDes)",
    /* CDU_TX_MEMI               */ "tx DATA memory for CDU ports (400G port , 50G SerDes)",
    /* CDU_TX_MEMI_CTRL          */ "tx CTRL memory for CDU ports (400G port , 50G SerDes)",
    /* CDU_TX_MEMJ               */ "tx DATA memory for CDU ports (400G port , 50G SerDes)",
    /* CDU_TX_MEMJ_CTRL          */ "tx CTRL memory for CDU ports (400G port , 50G SerDes)",
    /* CELL_BUFFER0              */ "Isw2 cell buffer0. This is a logical memory 256 bits wide protected by a 10 bit ECC. Physically, the data is actually interleaved across 4 RAM arrays. Functionally, this is a read only memory, it reads out bits [255:0] of the addressed cell data.",
    /* CELL_BUFFER1              */ "Isw2 cell buffer1. This is a logical memory 256 bits wide protected by a 10 bit ECC. Physically, the data is actually interleaved across 4 RAM arrays. Functionally, this is a read only memory, it reads out bits [511:256] of the addressed cell data.",
    /* CELL_BUFFER2              */ "Isw2 cell buffer2. This is a logical memory 256 bits wide protected by a 10 bit ECC. Physically, the data is actually interleaved across 4 RAM arrays. Functionally, this is a read only memory, it reads out bits [767:512] of the addressed cell data.",
    /* CELL_BUFFER3              */ "Isw2 cell buffer3. This is a logical memory 256 bits wide protected by a 10 bit ECC. Physically, the data is actually interleaved across 4 RAM arrays. Functionally, this is a read only memory, it reads out bits [1023:768] of the addressed cell data.",
    /* CELL_CHK_MEM              */ "CELL DATA ECCP RAM",
    /* CELL_DATA0_MEM            */ "CELL DATA 0 RAM",
    /* CELL_DATA10_MEM           */ "CELL DATA 10 RAM",
    /* CELL_DATA11_MEM           */ "CELL DATA 11 RAM",
    /* CELL_DATA12_MEM           */ "CELL DATA 12 RAM",
    /* CELL_DATA13_MEM           */ "CELL DATA 13 RAM",
    /* CELL_DATA14_MEM           */ "CELL DATA 14 RAM",
    /* CELL_DATA15_MEM           */ "CELL DATA 15 RAM",
    /* CELL_DATA1_MEM            */ "CELL DATA 1 RAM",
    /* CELL_DATA2_MEM            */ "CELL DATA 2 RAM",
    /* CELL_DATA3_MEM            */ "CELL DATA 3 RAM",
    /* CELL_DATA4_MEM            */ "CELL DATA 4 RAM",
    /* CELL_DATA5_MEM            */ "CELL DATA 5 RAM",
    /* CELL_DATA6_MEM            */ "CELL DATA 6 RAM",
    /* CELL_DATA7_MEM            */ "CELL DATA 7 RAM",
    /* CELL_DATA8_MEM            */ "CELL DATA 8 RAM",
    /* CELL_DATA9_MEM            */ "CELL DATA 9 RAM",
    /* CELL_HDR_MEM              */ "Cell Header RAM",
    /* CENTRAL_CTR_EVICTION_FIFO */ "Central Counter eviction fifo",
    /* CFAP_MEM                  */ "Cell Free Address Pool RAM",
    /* CFC_CAT_2_TC_CGM_MAP_HCFC */ "Mapping configuration of category2 and TC VSQs (24-31) to 512 HCFC bitmap.",
    /* CFC_CAT_2_TC_CGM_MAP_NIF  */ "Mapping configuration of category2 and TC VSQs (24-31) to 576 PFC bitmap presented to the NIF.\n                   Notes:\n                   * Bitmap is presented to the NIF only if Cat2TcMapEna is set of the corresponding VSQ.\n                   * If flow control is set, all bitmap set bits will be set. Else, all bitmap bits will be reset with no considuration for previous decision.",
    /* CFC_CAT_2_TC_IQM_0_MAP_HCFC */ "Mapping configuration of category2 and TC VSQs (24-31) to 512 HCFC bitmap.",
    /* CFC_CAT_2_TC_IQM_0_MAP_NIF */ "Mapping configuration of category2 and TC VSQs (24-31) to 576 PFC bitmap presented to the NIF.\n                   Notes:\n                   * Bitmap is presented to the NIF only if Cat2TcMapEna is set of the corresponding VSQ.\n                   * If flow control is set, all bitmap set bits will be set. Else, all bitmap bits will be reset with no considuration for previous decision.",
    /* CFC_CAT_2_TC_IQM_1_MAP_HCFC */ "Mapping configuration of category2 and TC VSQs (24-31) to 512 HCFC bitmap.",
    /* CFC_CAT_2_TC_IQM_1_MAP_NIF */ "Mapping configuration of category2 and TC VSQs (56-63) to 576 PFC bitmap presented to the NIF.\n                   Notes:\n                   * Bitmap is presented to the NIF only if Cat2TcMapEna is set of the corresponding VSQ.\n                   * If flow control is set, all bitmap set bits will be set. Else, all bitmap bits will be reset with no considuration for previous decision.",
    /* CFC_CAT_2_TC_MAP_HCFC     */ "Mapping configuration of category2 and TC VSQs (20-27) to 256 HCFC bitmap.",
    /* CFC_CAT_2_TC_MAP_NIF      */ "Mapping configuration of category2 and TC VSQs (20-27) to 256 PFC bitmap presented to the NIF.\n                   Notes:\n                   * Bitmap is presented to the NIF only if Cat2TcMapEna is set of the corresponding VSQ.\n                   * If flow control is set, all bitmap set bits will be set. Else, all bitmap bits will be reset with no considuration for previous decision.",
    /* CFC_GENERIC_BITMAP_IQM_0_MAP */ "Mapping configuration of generic bitmap",
    /* CFC_GENERIC_BITMAP_IQM_1_MAP */ "Mapping configuration of generic bitmap",
    /* CFC_GENERIC_BITMAP_NIF_0_MAP */ "Mapping configuration of generic bitmap",
    /* CFC_GENERIC_BITMAP_NIF_1_MAP */ "Mapping configuration of generic bitmap",
    /* CFC_GENERIC_BITMAP_NIF_2_MAP */ "Mapping configuration of generic bitmap",
    /* CFC_GENERIC_BITMAP_NIF_3_MAP */ "Mapping configuration of generic bitmap",
    /* CFC_GENERIC_BITMAP_NIF_4_MAP */ "Mapping configuration of generic bitmap",
    /* CFC_GENERIC_BITMAP_NIF_5_MAP */ "Mapping configuration of generic bitmap",
    /* CFC_GENERIC_BITMAP_NIF_6_MAP */ "Mapping configuration of generic bitmap",
    /* CFC_GENERIC_BITMAP_NIF_7_MAP */ "Mapping configuration of generic bitmap",
    /* CFC_GLB_RSC_CGM_MAP       */ "Mapping configuration of IQM0 global resources indication to 512 PFC/128 LLFC bitmap",
    /* CFC_GLB_RSC_IQM_0_MAP     */ "Mapping configuration of IQM0 global resources indication to 512 PFC/128 LLFC bitmap",
    /* CFC_GLB_RSC_IQM_1_MAP     */ "Mapping configuration of IQM1 global resources indication to 512 PFC/128 LLFC bitmap",
    /* CFC_ILKN_INB_RX_0_CAL     */ "Mapping of the ILKN-Inb-RX-0 received FC status frames\n                   Note:\n                   PP / Ilkn inband according to IlknInbRx0Sel",
    /* CFC_ILKN_INB_RX_1_CAL     */ "Mapping of the ILKN-Inb-RX-1 received FC status frames\n                   Note:\n                   PP / Ilkn inband according to IlknInbRx1Sel",
    /* CFC_ILKN_INB_RX_2_CAL     */ "Mapping of the ILKN-Inb-RX-2 received FC status frames\n                   Note:\n                   PP / Ilkn inband according to IlknInbRx2Sel",
    /* CFC_ILKN_INB_RX_3_CAL     */ "Mapping of the ILKN-Inb-RX-3 received FC status frames\n                   Note:\n                   PP / Ilkn inband according to IlknInbRx3Sel",
    /* CFC_ILKN_INB_RX_4_CAL     */ "Mapping of the ILKN-Inb-RX-4 received FC status frames\n                   Note:\n                   PP / Ilkn inband according to IlknInbRx4Sel",
    /* CFC_ILKN_INB_RX_5_CAL     */ "Mapping of the ILKN-Inb-RX-5 received FC status frames\n                   Note:\n                   PP / Ilkn inband according to IlknInbRx5Sel",
    /* CFC_ILKN_INB_TX_0_CAL     */ "Mapping of the ILKN-Inb-TX-0 calendar channels to the possible generated FC indications.",
    /* CFC_ILKN_INB_TX_1_CAL     */ "Mapping of the ILKN-TX-1 calendar channels to the possible generated FC indications.",
    /* CFC_ILKN_INB_TX_2_CAL     */ "Mapping of the ILKN-TX-2 calendar channels to the possible generated FC indications.",
    /* CFC_ILKN_INB_TX_3_CAL     */ "Mapping of the ILKN-TX-3 calendar channels to the possible generated FC indications.",
    /* CFC_ILKN_INB_TX_4_CAL     */ "Mapping of the ILKN-TX-4 calendar channels to the possible generated FC indications.",
    /* CFC_ILKN_INB_TX_5_CAL     */ "Mapping of the ILKN-TX-5 calendar channels to the possible generated FC indications.",
    /* CFC_ILKN_PP_RX_4_CAL      */ "Mapping of the PP-RX received FC status frames",
    /* CFC_ILKN_RX_0_CAL         */ "Mapping of the ILKN-RX-0 received FC status frames\n                   Note:\n                   - In-Band / OOB according to IlknRx0Sel",
    /* CFC_ILKN_RX_1_CAL         */ "Mapping of the ILKN-RX-1 received FC status frames\n                   Note:\n                   - In-Band / OOB according to IlknRx1Sel",
    /* CFC_ILKN_TX_0_CAL         */ "Mapping of the ILKN-TX-0 calendar channels to the possible generated FC indications.\n                   Note:\n                   - In-Band / OOB according to IlknTx0Sel",
    /* CFC_ILKN_TX_1_CAL         */ "Mapping of the ILKN-TX-1 calendar channels to the possible generated FC indications.\n                   Note:\n                   - In-Band / OOB according to IlknTx1Sel",
    /* CFC_NIF_PFC_MAP           */ "Maping the 256 NIF PFC signals.\n                   Four FC indications are handled in each clock. Each entry refers to 4 consecutive PFC indications.",
    /* CFC_NIF_SHR_MAP           */ "Maping the 256 NIF FCV signals towards the Scheduler HR interface.\n                   Four FC indications are handled in each clock. Each entry refers to 4 consecutive FCV indications. (this mapping works same as NifPfcMap and share some design resources with it)",
    /* CFC_OOB_RX_0_CAL          */ "Mapping of the SPI/HCFC/ILKN-OOB-RX-0 received FC status frames\n                   Note:\n                   - OOB-RX-0 uses only RX interface 0 in the PADS.",
    /* CFC_OOB_RX_1_CAL          */ "Mapping of the SPI/HCFC/ILKN-OOB-RX-1 received FC status frames\n                   Note:\n                   - OOB-RX-1 uses only RX interface 1 in the PADS.",
    /* CFC_OOB_RX_CAL            */ "Mapping of the SPI/HCFC/ILKN-OOB-RX-0 received FC status frames\n                   Note:\n                   - OOB-RX-0 uses only RX interface 0 in the PADS.",
    /* CFC_OOB_TX_0_CAL          */ "Mapping of the SPI/HCFC/ILKN-OOB-TX-0 calendar channels to the possible generated FC indications.\n                   Note:\n                   - OOB-TX-0 uses only TX interface 0 in the PADS.",
    /* CFC_OOB_TX_1_CAL          */ "Mapping of the SPI/HCFC/ILKN-OOB-TX-1 calendar channels to the possible generated FC indications.\n                   Note:\n                   - SPI-OOB-TX-1 uses only TX interface 1 in the PADS.",
    /* CFC_OOB_TX_CAL            */ "Mapping of the SPI/HCFC/ILKN-OOB-TX-0 calendar channels to the possible generated FC indications.\n                   Note:\n                   - OOB-TX-0 uses only TX interface 0 in the PADS.",
    /* CFC_PP_RX_4_CAL           */ "Mapping of the PP-RX received FC status frames",
    /* CFC_QPAIR_HR_MAP          */ "Map each EGQ-Qpair (EGQ-PFC) to a corresponding SCH-HR (SCH-PFC). For NON-LAG flow control, the mapping is 1:1. Access this table with qp_index/4. Each entry has 4 HR indexes.",
    /* CFC_RCL_VSQ_CGM_MAP       */ "Recycle VSQ To Egress PFC mapping.",
    /* CFC_RCL_VSQ_IQM_0_MAP     */ "Recycle VSQ To PFC mapping.",
    /* CFC_RCL_VSQ_IQM_1_MAP     */ "Recycle VSQ To PFC mapping.",
    /* CFC_RCL_VSQ_MAP           */ "Recycle VSQ To PFC mapping.",
    /* CFC_SPI_OOB_RX_0_CAL      */ "Mapping of the SPI-OOB-RX-0 received FC status frames\n                   Note:\n                   - SPI-OOB-RX-0 uses only RX interface 0 in the PADS.",
    /* CFC_SPI_OOB_RX_1_CAL      */ "Mapping of the SPI-OOB-RX-1 received FC status frames\n                   Note:\n                   - SPI-OOB-RX-1 uses only RX interface 1 in the PADS.",
    /* CFC_SPI_OOB_TX_0_CAL      */ "Mapping of the SPI-OOB-TX-0 calendar channels to the possible generated FC indications.\n                   Note:\n                   - SPI-OOB-TX-0 uses only TX interface 0 in the PADS.",
    /* CFC_SPI_OOB_TX_1_CAL      */ "Mapping of the SPI-OOB-TX-1 calendar channels to the possible generated FC indications.\n                   Note:\n                   - SPI-OOB-TX-1 uses only TX interface 1 in the PADS.",
    /* CGM_CNI_PRMS              */ "CNI (Congestion Notification Indication) reject parameters.\n Access usign VOQ.Rate-Class.",
    /* CGM_CNI_STATUS            */ "VOQ CNI status.\n Holds for each VOQ its current CNI status.\n\n Each entry hold 32 statuses for 32 VOQs\n Access to the table using VOQ14:5",
    /* CGM_DESTINATION_TABLE     */ "This memory maps a system port ID to a queue number and a traffic class profile",
    /* CGM_DP_MAPPING            */ "Maps dp-meter-cmd, incoming dp, Ethernet-meter-dp and meter-processor-dp to ingress-DP and egress-DP.\n Egress-DP is stamped to the FTMH and ingress-DP is forward to IQM.\n key to the table:\n dp-meter-cmd, incoming-dp, Ethernet-meter-dp, mrps-dp",
    /* CGM_DRAM_RPRT_RX          */ "DRAM report RX FIFO.\n\n Access to this FIFO is forbidden.",
    /* CGM_DROP_REASON_RJCT_MASK */ "Drop-Reason reject mask table.\n Defines for 8 drop-reasons its relevant admission tests.\n\n Each entry holds masks for a single drop reason.",
    /* CGM_DTF_TX_RPRT_PEND_FIFO */ "",
    /* CGM_ETH_MTR_PTR_MAP       */ "Access to this table using pointers from PP that calculated according to:\n  (In-PP-Port)*5+Packet-Type-Value.\n\n Packet-Type-Value:\n 0x0 - Unknown Unicast\n 0x1 - Known Unicast\n 0x2 - Unknown MC\n 0c3 - Known MC\n 0x4 - BC (Broadcast)\n\n In-PP-Port value is 0-255, the",
    /* CGM_FLOW_AGR_MAP          */ "Flow-Aggregate mapping table\n Map Flow-Aggregate-ID12:0 to Flow-Quartet and Lag-Group.",
    /* CGM_FLOW_ATTRIBUTES       */ "Flow profile per Folw.\n There are 16K flows. Profile per 4 flows.\n Access this table with flow14:4 and pick profile from the entry using flow3:2",
    /* CGM_GLBL_FR_DRAM_DP_RJCT_TH */ "Global free DRAM resources reject thresholds\n\n Access using DP",
    /* CGM_GLBL_FR_DRAM_RJCT_TH  */ "Global free DRAM resources reject thresholds",
    /* CGM_GLBL_FR_DRAM_TC_RJCT_TH */ "Global free DRAM resources reject thresholds\n\n Access using TC",
    /* CGM_GLBL_FR_SRAM_DP_RJCT_TH */ "Global free SRAM resources reject thresholds\n\n Access using Sram-Only, DP",
    /* CGM_GLBL_FR_SRAM_RJCT_TH  */ "Global free SRAM resources reject thresholds",
    /* CGM_GLBL_FR_SRAM_TC_RJCT_TH */ "Global free SRAM resources reject thresholds\n\n Access using Sram-Only, TC",
    /* CGM_HAPM                  */ "Header-Append-Pointer mapping table\n\n Access to this table using Header-Append-Pointer",
    /* CGM_INSTRUMENTATION_MEMORY */ "",
    /* CGM_INSTRUMENTATION_MEMORY_0 */ "",
    /* CGM_INSTRUMENTATION_MEMORY_1 */ "",
    /* CGM_INSTRUMENTATION_MEMORY_2 */ "",
    /* CGM_INSTRUMENTATION_MEMORY_3 */ "",
    /* CGM_INT_TM_STAT_PTR_MAP   */ "",
    /* CGM_IPPPM                 */ "In-PP-Port to mapping table\n Maps Incoming PP-Port to PB-VSQs indexes (LLFC & PG).\n\n Access to this table using In-PP-Port\n\n VSQ-E (LLFC)  = NIF-Port\n VSQ-F (PG)     = PG-Base + VsqPgTcBitmapTcBitmapIndex, TC",
    /* CGM_IPP_HCP               */ "In-PP-Port Header-Compensation-Profile table.\n\n Access to this table using In-PP-Port",
    /* CGM_IPP_HEADER_COMPENSATION */ "In-PP-Port Header-Compensation-Profile table.\n\n Access to this table using In-PP-Port",
    /* CGM_IPP_MAP               */ "In-PP-Port to mapping table\n Maps Incoming PP-Port to PB-VSQs indexes (LLFC & PG).\n\n Access to this table using In-PP-Port\n\n VSQ-E (LLFC)  = NIF-Port\n VSQ-F (PG)     = PG-Base + VsqPgTcBitmapTcBitmapIndex, TC",
    /* CGM_IRPP_CTR_CPM          */ "IRPP header compenstaion - Header-Compensation-Profile mapping.\n (Map Header-Compensation-Profile to header delta)",
    /* CGM_IRPP_CTR_HCM          */ "IRPP header compenstaion - Header-Compensation mask table.\n Access using IRPP-Counter-Pointer-A/B MSBs\n\n Note:\n  - Entries 0 to 31 are assinged to Counter-A logic\n  - Entries 32 to 53 are assinged to Counter-B logic",
    /* CGM_IS_ING_MC             */ "Define for the lower 64k Multicast-ID whether they are Ingress-MC or Fabric/Egress-MC.\n\n Each entry holds 32b for 32 MC-IDs.\n Access to this table using MC-ID15:5.\n MC-ID4:0 selects the relevant bit in the entry.",
    /* CGM_LAG_ATTRIBUTES        */ "LAG range memory table.\n Specifies for each LAG its range",
    /* CGM_LAG_GROUP_PROFILE     */ "LAG range memory table.\n Specifies for each LAG its range",
    /* CGM_LAG_MAPPING           */ "LAG mapping table.\n Given the LAG and its member specifies the destination.\n Entry into table is LAG, LAG-member.",
    /* CGM_LAG_MEMBER_TABLE      */ "LAG range memory table.\n Specifies for each LAG its range",
    /* CGM_LAG_STAT_ATTRIBUTES   */ "LAG range memory table.\n Specifies for each LAG its range",
    /* CGM_MEM_100000            */ "INTERNAL",
    /* CGM_MEM_200000            */ "INTERNAL",
    /* CGM_MEM_300000            */ "INTERNAL",
    /* CGM_MEM_1000000           */ "INTERNAL",
    /* CGM_MEM_1010000           */ "INTERNAL",
    /* CGM_MEM_1020000           */ "INTERNAL",
    /* CGM_MEM_1030000           */ "INTERNAL",
    /* CGM_MEM_1040000           */ "INTERNAL",
    /* CGM_MEM_1080000           */ "INTERNAL",
    /* CGM_MEM_B30000            */ "INTERNAL",
    /* CGM_MEM_B50000            */ "INTERNAL",
    /* CGM_MEM_B70000            */ "INTERNAL",
    /* CGM_MEM_B90000            */ "INTERNAL",
    /* CGM_MEM_BB0000            */ "INTERNAL",
    /* CGM_MEM_FD0000            */ "INTERNAL",
    /* CGM_MEM_FE0000            */ "INTERNAL",
    /* CGM_MEM_FF0000            */ "INTERNAL",
    /* CGM_MICRO_BURST_STATUS    */ "Packet descriptor memory for SQM-PDM",
    /* CGM_MRPS_IN_DP_MAPPING    */ "Maps dp-meter-cmd, incoming dp, Ethernet-meter-dp and Ethernet-meter-invalid to MRPS in-DP and in-Drop.\n key to the table:\n dp-meter-cmd, incoming-dp, Ethernet-meter-dp, Ethernet-meter-invalid",
    /* CGM_PB_VSQ_POOL_FC_TH     */ "PB-VSQ flow control.\n Access to this table using Priority, Pool",
    /* CGM_PB_VSQ_PRMS           */ "PB-VSQ (Port-Base VSQs) parameters table\n\n Access to this table using PG (VSQ-F) Index",
    /* CGM_PB_VSQ_RJCT_MASK      */ "PB-VSQ reject mask table.\n Mask admission tests based on PB-VSQ parameters.\n\n Access to this table using:\n 3 - PG.Is-Lossless\n 2:0 - PG.Admit-Profile",
    /* CGM_PB_VSQ_SRAM_BUFFERS_RJCT_MAP */ "PB-VSQ SRAM-Buffers reject mapping table.\n Map all current admission reject statuses into single reject bit.\n\n Address to this table is:\n 2:0 - PG.Admit-Profile\n 3 - Total-Free-Shared-Resource-Status\n 4 - Port-PG-Shared-Resource-Status\n 5 - Headroom-Extension-Reject-Status\n 6 - Total-Free-Headroom-Resource-Status\n 7 - Port-Headroom-Resource-Status\n 8 - PG-Headroom-Nominal-Resource-Status\n 9 - VOQ-Grntd-Status\n 11:10 - VSQ-Grntd-Status\n\n Each entry holds 384 reject statuses for every PG.Admit-Pro ...",
    /* CGM_PB_VSQ_SRAM_PDS_RJCT_MAP */ "PB-VSQ SRAM-PDs reject mapping table.\n Map all current admission reject statuses into single reject bit.\n\n Address to this table is:\n 2:0 - PG.Admit-Profile\n 3 - Total-Free-Shared-Resource-Status\n 4 - Port-PG-Shared-Resource-Status\n 5 - Headroom-Extension-Reject-Status\n 6 - Total-Free-Headroom-Resource-Status\n 7 - Port-Headroom-Resource-Status\n 8 - PG-Headroom-Nominal-Resource-Status\n 9 - VOQ-Grntd-Status\n 11:10 - VSQ-Grntd-Status\n\n Each entry holds 384 reject statuses for every PG.Admit-Profile ...",
    /* CGM_PB_VSQ_TC_BITMAP      */ "VSQ PG TC bitmap table.\n Maps In-PP-Port.TcBitmapIndex, TC to PG-Offset.\n\n Access to this table using TC.\n Each entry holds 16 PG-Offsets(8) for 16 In-PP-Port.TcBitmapIndex.\n\n VSQ-E (LLFC)  = NIF-Port\n VSQ-F (PG)     = PG-Base + VsqPgTcBitmapTcBitmapIndex, TC",
    /* CGM_PB_VSQ_WORDS_RJCT_MAP */ "PB-VSQ Words reject mapping table.\n Map all current admission reject statuses into single reject bit.\n\n Address to this table is:\n 2:0 - PG.Admit-Profile\n 3 - Total-Free-Shared-Resource-Reject-Status\n 4 - Port-PG-Shared-Resource-Reject-Status\n 5 - Total-Free-Headroom-Resource-Reject-Status\n 6 - Port-PG-Headroom-Resource-Reject-Status\n 7 - VOQ-Grntd-Status\n 9:8 - VSQ-Grntd-Status\n\n Each entry holds 96 reject statuses for every PG.Admit-Profile.",
    /* CGM_PCM                   */ "Packet-Constructor memory.\n Hold packet data waiting for TAR processing completion.\n\n Access to this is forbidden.",
    /* CGM_PP_RJCT_MASK          */ "PP reject mask table.\n Mask admission tests based on Admit-Profile generated by the PP.\n Access to this table using PP.Admit-Profile(3)",
    /* CGM_QSPM                  */ "VOQ to System-Port mapping table.\n Access with VOQ14:2 (Every quartet is assigned to System-Port).\n\n Used for System-RED admission logic",
    /* CGM_REP_CMD_FIFO_OCCUPANCY_RJCT_TH */ "TAR descriptors FIFO reject threshold based on FIFO occupancy\n\n Access to this table using FIFO-ID(2), Packet-Type(2), DP(2)\n\n Packet-Type: 0 - FWD, 1 - SNIF-0, 2 - SNIF-1, 3 - SNIF-2\n FIFO-ID: 0 - UC, 1 - MCH, 2 - MCL",
    /* CGM_REP_CMD_FIFO_SRAM_RSRC_RJCT_TH */ "TAR descriptors FIFO reject threshold\n\n Access to this table using FIFO-ID(2), Packet-Type(2)\n\n Packet-Type: 0 - FWD, 1 - SNIF-0, 2 - SNIF-1, 3 - SNIF-2\n FIFO-ID: 0 - UC, 1 - MCH, 2 - MCL",
    /* CGM_SCH_CPM               */ "Credit (SCH) header compenstaion - Header-Compensation-Profile mapping.\n (Map Header-Compensation-Profile to header delta)",
    /* CGM_SCH_HCM               */ "Credit (SCH) header compenstaion - Header-Compensation mask table.\n Access using VOQ.Credit-Class",
    /* CGM_SMOOTH_DIVISION       */ "Smooth division is used in lag resolution in case LagAttributes.Mode == 2.\n Maps lag-range (from LagAttributes) and Lag-Lb-Key to Member.\n Access this table with lag-range, lag-lb-key7:1",
    /* CGM_SNIF_ACTION_TABLE     */ "Snoop and Mirror table. This memory maps the incoming snoop command or mirror command to a replication. The first half is for mirror; the second half is for snoop.\n This table is split into two parts.",
    /* CGM_SNIF_TM_TABLE         */ "Snoop-Mirror TM table.\n Allows overwrite fields from the TM command per TM/Snoop-Command\n\n Note:\n  - Entries 0 to 15 are assinged to SNIF-0 copies (access with SNIF-Command)\n  - Entries 16 to 31 are assinged to SNIF-1 copies (access with SNIF-Command)\n  - Entries 32 to 47 are assinged to SNIF2 copies (access with SNIF-Command)",
    /* CGM_SNP_MRR_RJCT_TABLE    */ "Snoop-Mirror reject table.\n\n Note:\n  - Entries 0 to 15 are assinged to Snoop copies (access with Snoop-Command)\n  - Entries 16 to 32 are assinged to Mirror copies (access with Mirror-Command)",
    /* CGM_SNP_MRR_TM_TABLE      */ "Snoop-Mirror TM table.\n Allows overwrite fields from the TM command per TM/Snoop-Command\n\n Note:\n  - Entries 0 to 15 are assinged to Snoop copies (access with Snoop-Command)\n  - Entries 16 to 32 are assinged to Mirror copies (access with Mirror-Command)",
    /* CGM_SRAM_ENQ_PD_FIFO      */ "VOQ-Sizes table.\n Table hold all instantaneous VOQ sizes.\n Access to this table using VOQ.",
    /* CGM_STACK_FEC_RESOLVE     */ "Access if UseStackResolve is set and destination is system port and resolved-queue16:6 == 11'h7ff.\n Access with resolved-queue5:0 lag-lb-key7:4\n The resolved StackLag is used to access StackTrunkResolve.",
    /* CGM_STACK_TRUNK_RESOLVE   */ "Access if UseStackResolve is set and destination is system port and resolved-queue16:6 == 11'h7ff.\n Access with StackLag, lag-lb-key5:0.\n Resolved queue = BaseQueue + Traffic-Class",
    /* CGM_STAT_CPM              */ "Statistics header compenstaion - Header-Compensation-Profile mapping.\n (Map Header-Compensation-Profile to header delta)",
    /* CGM_STAT_HCM              */ "Statistics header compenstaion - Header-Compensation mask table.\n Access using Statistics-Pointer MSBs",
    /* CGM_STAT_SCRB_TH          */ "Scrubber buffer thresholds (Static)\n Each entry include buffer thresholds to be compared to occupied or free buffer counters, this defines the Global-Buffer-Consumption field in the scrubber statistics report (used in Qsize statistics report mode).\n The thresholds define 16 ranges of buffer occupancy.\n Each line coresponds to another level of thresholds.\n The IQM will present the worst result of the 3 buffers types.\n The reference is either to free-buffer or occupied-buffer counters, as defined  ...",
    /* CGM_STD_UPDT_PEND_FIFO    */ "",
    /* CGM_ST_PORT_DATA          */ "Statistics-Port data FIFO.\n\n Access to this FIFO is forbidden.",
    /* CGM_SYS_RED_QSIZE         */ "System-RED size table\n Holds for each System-Port the maximal size.\n Access using System-Port.\n\n Used for for System-RED admission logic",
    /* CGM_SYS_RED_QSIZE_RANGES  */ "Source Q size range thresholds.\n Defines 16 ranges of the instantaneous VOQ words size that define the 4-bit System-RED-VOQ size value.\n\n VOQ-Words-Size below RangeThN is defined with Source-VOQ-Size N.\n\n Note:\n  - Units of Words (16B)\n  - Maximal Value allowed is 2^28 - any value above will disable this TH",
    /* CGM_SYS_RED_RJCT_PRMS     */ "System RED reject parameters.\n Access using VOQ.Rate-Class, DP",
    /* CGM_SYS_RED_SIZE          */ "System-RED size table\n Holds for each System-Port the maximal size.\n Access using System-Port.\n\n Used for for System-RED admission logic",
    /* CGM_TAR_FIFO              */ "TAR descriptors FIFO.\n Holds descriptor of UC/MCH/MCL ready for process by TAR.\n\n Access to this table is forbidden.",
    /* CGM_TAR_FIFO_RJCT_TH      */ "TAR descriptors FIFO reject threshold\n\n Access to this table using FIFO-ID, DP\n FIFO-ID: 0x0 - UC, 0x1 - MCH, 0x2 - MCL",
    /* CGM_TELEMETRY_QSIZE_RANGES */ "",
    /* CGM_TM_CTR_CPM            */ "TM header compenstaion - Header-Compensation-Profile mapping.\n (Map Header-Compensation-Profile to header delta)",
    /* CGM_TM_CTR_HCM            */ "TM header compenstaion - Header-Compensation mask table.\n Access using TM-Counter-Pointer-A/B MSBs\n\n Note:\n  - Entries 0 to 31 are assinged to Counter-A logic\n  - Entries 32 to 53 are assinged to Counter-B logic",
    /* CGM_TRAFFIC_CLASS_MAPPING */ "The traffic class is mapped according to packet's source and destination.\n Table is accessed with the following key key_msb,orig_tc, where:\n * key_msb (4 bits):\n   - 2'b00,TC-Mapping-Profile if Destination is System-Port-ID\n   - 2'b01,Flow-Profile if Destination is Flow\n   - 2'b10,2'b00 if Destination is fabric or egress multicast\n * ingress_shape (1 bit) is '0' before ingress shaping, and '1' after ingress shaping\n * orig_tc (3 bits) is the original traffic class",
    /* CGM_TX_CMD_UPDT_PEND_FIFO */ "",
    /* CGM_VOQ_AVRG_PRMS         */ "VOQ Average parameters table.\n\n Access using VOQ.Rate-Class\n\n Average-Size = (Average-Size - (Average-Size >>AvrgWeight) +\n                                               (VSQ-Words-Size >>AvrgWeight))",
    /* CGM_VOQ_CNI_PRMS          */ "CNI (Congestion Notification Indication) reject parameters.\n Access usign VOQ.Rate-Class.",
    /* CGM_VOQ_CNI_STATUS        */ "VOQ-Sizes table.\n Table hold all instantaneous VOQ sizes.\n Access to this table using VOQ.",
    /* CGM_VOQ_DRAM_BLOCK_STATE  */ "VOQ DRAM block state.\n Define for each VOQ its DRAM block state.\n This is dynamic memory -> access for debug purpose only.\n\n Each entry holds 16 states for 16 VOQs.\n Access to this table using VOQ14:4.\n VOQ3:0 selects the relevant VOQ state in the entry.",
    /* CGM_VOQ_DRAM_BOUND_PRMS   */ "VOQ DRAM bound parameters.\n Holds parameters for defining thresholds according which VOQ will be indicated to move traffic from SRAM to DRAM.\n\n Access using VOQ.Rate-Class",
    /* CGM_VOQ_DRAM_BOUND_STATE  */ "VOQ DRAM Bound state.\n Holds one of the following DRAM-Bound state (2) per VOQ:\n 0x0 - Sram-To-Fabric\n 0x1 - Congested\n 0x2 - Recovery\n\n Each entry holds 16 states for 16 VOQs.\n Address to the table using VOQ14:4",
    /* CGM_VOQ_DRAM_RECOVERY_PRMS */ "VOQ DRAM bound parameters.\n Holds parameters for defining thresholds according which VOQ will be indicated to move traffic from SRAM to DRAM.\n\n Access using VOQ.Rate-Class",
    /* CGM_VOQ_GRNTD_PRMS        */ "VOQ Guaranteed parameters table\n Table holds static threshold for guaranteed space allocation per VOQ.\n Allocation is seperated for each resource: Words, SRAM-Words and SRAM-PDs.\n\n Access to this table is by VOQ.Rate-Class.",
    /* CGM_VOQ_GRNTD_RJCT_MASK   */ "VOQ Guaranteed reject mask table.\n Mask admission tests based on VOQ state in guaranteed.\n\n Access to this table using:\n 2 - VOQ-Words-In-Guranteed\n 1 - VOQ-SRAM-Words-In-Guranteed\n 0 - VOQ-SRAM-PDs-In-Guranteed",
    /* CGM_VOQ_HCP               */ "VOQ Header-Compensation-Profile table.\n\n Access to this table using VOQ.Credit-Class\n Note: only first 32 entries are used.",
    /* CGM_VOQ_HEADER_COMPENSATION */ "VOQ Header-Compensation-Profile table.\n\n Access to this table using VOQ.Credit-Class",
    /* CGM_VOQ_PROFILES          */ "VOQ-Profiles table.\n Table hold all profiles required for ENQ/DEQ process.\n Access to this table using VOQ13:2.\n Entry holds 4 sets of profiles for 4 VOQs (selecting between sets using VOQ1:0.",
    /* CGM_VOQ_SHRD_FR_RJCT_TH   */ "VOQ shared occupancy reject thresholds.\n Access to this table using VOQ.Sram-Only, DP.",
    /* CGM_VOQ_SHRD_OC_RJCT_TH   */ "VOQ shared occupancy reject thresholds.\n Access to this table using DP.",
    /* CGM_VOQ_SIZE              */ "VOQ-Sizes table.\n Table hold all instantaneous VOQ sizes.\n Access to this table using VOQ.",
    /* CGM_VOQ_SRAM_BUFFERS_FC_PRMS */ "VOQ SRAM-Words reject parameters\n Table holds set of parameters for FADT (Fair-Adaptive-Dynamic-Th) admission logic (on VOQ SRAM-Words size)\n\n Access to the table using VOQ.Rate-Class, DP\n\n Note:\n  - Max value is 2^18",
    /* CGM_VOQ_SRAM_BUFFERS_RJCT_PRMS */ "VOQ SRAM-Words reject parameters\n Table holds set of parameters for FADT (Fair-Adaptive-Dynamic-Th) admission logic (on VOQ SRAM-Words size)\n\n Access to the table using VOQ.Rate-Class, DP\n\n Note:\n  - Max value is 2^18",
    /* CGM_VOQ_SRAM_DRAM_ONLY_MODE */ "VOQ SRAM-DRAM only mode.\n Define for VOQ.Rate-Class its SRAM-DRAM operation mode.",
    /* CGM_VOQ_SRAM_PDS_FC_PRMS  */ "VOQ SRAM-PDs reject parameters\n Table holds set of parameters for FADT (Fair-Adaptive-Dynamic-Th) admission logic (on VOQ SRAM-Words size)\n\n Access to the table using VOQ.Rate-Class, DP\n\n Note:\n  - Max value is 2^15",
    /* CGM_VOQ_SRAM_PDS_RJCT_PRMS */ "VOQ SRAM-PDs reject parameters\n Table holds set of parameters for FADT (Fair-Adaptive-Dynamic-Th) admission logic (on VOQ SRAM-Words size)\n\n Access to the table using VOQ.Rate-Class, DP\n\n Note:\n  - Max value is 2^15",
    /* CGM_VOQ_SRAM_WORDS_RJCT_PRMS */ "VOQ SRAM-Words reject parameters\n Table holds set of parameters for FADT (Fair-Adaptive-Dynamic-Th) admission logic (on VOQ SRAM-Words size)\n\n Access to the table using VOQ.Rate-Class, DP\n\n Note:\n  - Max value is 2^18",
    /* CGM_VOQ_VSQS_PRMS         */ "VOQ - VSQ parameters.\n This table hold for each VOQ its VSQ parameters (for QB-VSQs).\n\n Each entry holds 4 sets of parameters for 4 VOQs.\n Access to this table using VOQ14:2.\n VOQ1:0 selects the relevant set in the entry.",
    /* CGM_VOQ_WORDS_AVRG_PRMS   */ "VOQ Average parameters table.\n\n Access using VOQ.Rate-Class\n\n Average-Size = (Average-Size - (Average-Size >>AvrgWeight) +\n                                               (VSQ-Words-Size >>AvrgWeight))",
    /* CGM_VOQ_WORDS_FC_PRMS     */ "VOQ Words Flow-Controls parameters\n\n Access to the table using VOQ.Rate-Class",
    /* CGM_VOQ_WORDS_RJCT_PRMS   */ "VOQ Words reject parameters\n Table holds set of parameters for FADT (Fair-Adaptive-Dynamic-Th) admission logic (on VOQ Words size)\n\n Access to the table using VOQ.Rate-Class, DP\n\n Note:\n  - Max value is 2^28",
    /* CGM_VSQA_AVRG_PRMS        */ "VSQ - Group A - Average parameters table.\n\n Access using VSQ.Rate-Class\n\n Average-Size = (Average-Size - (Average-Size >>AvrgWeight) +\n                                               (VSQ-Words-Size >>AvrgWeight))",
    /* CGM_VSQA_FC_PRMS          */ "VSQ - Group A - Flow-Control parameters table\n\n Access to the table using VSQ.Rate-Class",
    /* CGM_VSQA_MAX_SIZE         */ "VSQ - Group A - Max size tracking memory",
    /* CGM_VSQA_MAX_SIZE_MEM     */ "VSQ - Group A - Max size tracking memory",
    /* CGM_VSQA_PRMS             */ "VSQ (Virtual Statistics Queue) - Group A (Categoty) parameters.\n Access table using VSQ-A-Index.",
    /* CGM_VSQA_RJCT_PRMS        */ "VSQ - Group A - reject parameters table\n Access to the table using VSQ.Rate-Class, DP",
    /* CGM_VSQA_SRAM_BUFFERS_FC_PRMS */ "VSQ - Group A - Flow-Control SRAM-Buffers parameters table\n\n Access to the table using VSQ.Rate-Class",
    /* CGM_VSQA_SRAM_BUFFERS_RJCT_PRMS */ "VSQ - Group A - SRAM-Buffers-Size reject parameters table\n\n Each entry hold statis threshold per DP.\n Access to the table using VSQ.Rate-Class",
    /* CGM_VSQA_SRAM_BUFFERS_SIZE */ "Instantaneous VSQ-A SRAM-Buffers Size memory.\n Access to this table (for debug purpose only) using VSQ-A Index",
    /* CGM_VSQA_SRAM_BUFFERS_STATE */ "Instantaneous VSQ-A SRAM-Buffers Size memory.\n Access to this table (for debug purpose only) using VSQ-A Index",
    /* CGM_VSQA_SRAM_PDS_FC_PRMS */ "VSQ - Group A - Flow-Control SRAM-PDs parameters table\n\n Access to the table using VSQ.Rate-Class",
    /* CGM_VSQA_SRAM_PDS_RJCT_PRMS */ "VSQ - Group A - SRAM-PDs-Size reject parameters table\n\n Each entry hold statis threshold per DP.\n Access to the table using VSQ.Rate-Class",
    /* CGM_VSQA_SRAM_PDS_SIZE    */ "Instantaneous VSQ-A SRAM-PDs Size memory.\n Access to this table (for debug purpose only) using VSQ-A Index",
    /* CGM_VSQA_SRAM_PDS_STATE   */ "Instantaneous VSQ-A SRAM-PDs Size memory.\n Access to this table (for debug purpose only) using VSQ-A Index",
    /* CGM_VSQA_WORDS_AVRG_PRMS  */ "VSQ - Group A - Average parameters table.\n\n Access using VSQ.Rate-Class\n\n Average-Size = (Average-Size - (Average-Size >>AvrgWeight) +\n                                               (VSQ-Words-Size >>AvrgWeight))",
    /* CGM_VSQA_WORDS_FC_PRMS    */ "VSQ - Group A - Flow-Control Words parameters table\n\n Access to the table using VSQ.Rate-Class",
    /* CGM_VSQA_WORDS_RJCT_PRMS  */ "VSQ - Group A - Words-Size reject parameters table\n\n Each entry hold statis threshold per DP.\n Access to the table using VSQ.Rate-Class",
    /* CGM_VSQA_WORDS_SIZE       */ "Instantaneous VSQ-A Words Size memory.\n Access to this table (for debug purpose only) using VSQ-A Index",
    /* CGM_VSQA_WORDS_STATE      */ "Instantaneous VSQ-A Words Size memory.\n Access to this table (for debug purpose only) using VSQ-A Index",
    /* CGM_VSQA_WRED_RJCT_PRMS   */ "VSQ - Group A - WRED asmission test parameters table\n\n Access using VSQ.Rate-Class, DP",
    /* CGM_VSQB_AVRG_PRMS        */ "VSQ - Group B - Average parameters table.\n\n Access using VSQ.Rate-Class\n\n Average-Size = (Average-Size - (Average-Size >>AvrgWeight) +\n                                               (VSQ-Words-Size >>AvrgWeight))",
    /* CGM_VSQB_FC_PRMS          */ "VSQ - Group B - Flow-Control parameters table\n\n Access to the table using VSQ.Rate-Class",
    /* CGM_VSQB_MAX_SIZE         */ "VSQ - Group B - Max size tracking memory",
    /* CGM_VSQB_MAX_SIZE_MEM     */ "VSQ - Group B - Max size tracking memory",
    /* CGM_VSQB_PRMS             */ "VSQ (Virtual Statistics Queue) - Group B (Categoty x VOQ.TC) parameters.\n Access table using VSQ-B-Index.",
    /* CGM_VSQB_RJCT_PRMS        */ "VSQ - Group B - reject parameters table\n Access using VSQ.Rate-Class, DP",
    /* CGM_VSQB_SRAM_BUFFERS_FC_PRMS */ "VSQ - Group B - Flow-Control SRAM-Buffers parameters table\n\n Access to the table using VSQ.Rate-Class",
    /* CGM_VSQB_SRAM_BUFFERS_RJCT_PRMS */ "VSQ - Group B - SRAM-Buffers-Size reject parameters table\n\n Each entry hold statis threshold per DP.\n Access to the table using VSQ.Rate-Class",
    /* CGM_VSQB_SRAM_BUFFERS_SIZE */ "Instantaneous VSQ-B SRAM-Buffers Size memory.\n Access to this table (for debug purpose only) using VSQ-B Index",
    /* CGM_VSQB_SRAM_BUFFERS_STATE */ "Instantaneous VSQ-B SRAM-Buffers Size memory.\n Access to this table (for debug purpose only) using VSQ-B Index",
    /* CGM_VSQB_SRAM_PDS_FC_PRMS */ "VSQ - Group B - Flow-Control SRAM-PDs parameters table\n\n Access to the table using VSQ.Rate-Class",
    /* CGM_VSQB_SRAM_PDS_RJCT_PRMS */ "VSQ - Group B - SRAM-PDs-Size reject parameters table\n\n Each entry hold statis threshold per DP.\n Access to the table using VSQ.Rate-Class",
    /* CGM_VSQB_SRAM_PDS_SIZE    */ "Instantaneous VSQ-A SRAM-PDs Size memory.\n Access to this table (for debug purpose only) using VSQ-B Index",
    /* CGM_VSQB_SRAM_PDS_STATE   */ "Instantaneous VSQ-A SRAM-PDs Size memory.\n Access to this table (for debug purpose only) using VSQ-B Index",
    /* CGM_VSQB_WORDS_AVRG_PRMS  */ "VSQ - Group B - Average parameters table.\n\n Access using VSQ.Rate-Class\n\n Average-Size = (Average-Size - (Average-Size >>AvrgWeight) +\n                                               (VSQ-Words-Size >>AvrgWeight))",
    /* CGM_VSQB_WORDS_FC_PRMS    */ "VSQ - Group B - Flow-Control Words parameters table\n\n Access to the table using VSQ.Rate-Class",
    /* CGM_VSQB_WORDS_RJCT_PRMS  */ "VSQ - Group B - Words-Size reject parameters table\n\n Each entry hold statis threshold per DP.\n Access to the table using VSQ.Rate-Class",
    /* CGM_VSQB_WORDS_SIZE       */ "Instantaneous VSQ-B Words Size memory.\n Access to this table (for debug purpose only) using VSQ-B Index",
    /* CGM_VSQB_WORDS_STATE      */ "Instantaneous VSQ-B Words Size memory.\n Access to this table (for debug purpose only) using VSQ-B Index",
    /* CGM_VSQB_WRED_RJCT_PRMS   */ "VSQ - Group B - WRED asmission test parameters table\n\n Access using VSQ.Rate-Class, DP",
    /* CGM_VSQC_AVRG_PRMS        */ "VSQ - Group C - Average parameters table.\n\n Access using VSQ.Rate-Class\n\n Average-Size = (Average-Size - (Average-Size >>AvrgWeight) +\n                                               (VSQ-Words-Size >>AvrgWeight))",
    /* CGM_VSQC_FC_PRMS          */ "VSQ - Group C - Flow-Control parameters table\n\n Access to the table using VSQ.Rate-Class",
    /* CGM_VSQC_MAX_SIZE         */ "VSQ - Group C - Max size tracking memory",
    /* CGM_VSQC_MAX_SIZE_MEM     */ "VSQ - Group C - Max size tracking memory",
    /* CGM_VSQC_PRMS             */ "VSQ (Virtual Statistics Queue) - Group B (Categoty x VOQ.Connection-Class) parameters.\n Access table using VSQ-C-Index.",
    /* CGM_VSQC_RJCT_PRMS        */ "VSQ - Group C - reject parameters table\n Access using VSQ.Rate-Class, DP",
    /* CGM_VSQC_SRAM_BUFFERS_FC_PRMS */ "VSQ - Group C - Flow-Control SRAM-Buffers parameters table\n\n Access to the table using VSQ.Rate-Class",
    /* CGM_VSQC_SRAM_BUFFERS_RJCT_PRMS */ "VSQ - Group C - SRAM-Buffers-Size reject parameters table\n\n Each entry hold statis threshold per DP.\n Access to the table using VSQ.Rate-Class",
    /* CGM_VSQC_SRAM_BUFFERS_SIZE */ "Instantaneous VSQ-C SRAM-Buffers Size memory.\n Access to this table (for debug purpose only) using VSQ-C Index",
    /* CGM_VSQC_SRAM_BUFFERS_STATE */ "Instantaneous VSQ-C SRAM-Buffers Size memory.\n Access to this table (for debug purpose only) using VSQ-C Index",
    /* CGM_VSQC_SRAM_PDS_FC_PRMS */ "VSQ - Group C - Flow-Control SRAM-PDs parameters table\n\n Access to the table using VSQ.Rate-Class",
    /* CGM_VSQC_SRAM_PDS_RJCT_PRMS */ "VSQ - Group C - SRAM-PDs-Size reject parameters table\n\n Each entry hold statis threshold per DP.\n Access to the table using VSQ.Rate-Class",
    /* CGM_VSQC_SRAM_PDS_SIZE    */ "Instantaneous VSQ-C SRAM-PDs Size memory.\n Access to this table (for debug purpose only) using VSQ-D Index",
    /* CGM_VSQC_SRAM_PDS_STATE   */ "Instantaneous VSQ-C SRAM-PDs Size memory.\n Access to this table (for debug purpose only) using VSQ-D Index",
    /* CGM_VSQC_WORDS_AVRG_PRMS  */ "VSQ - Group C - Average parameters table.\n\n Access using VSQ.Rate-Class\n\n Average-Size = (Average-Size - (Average-Size >>AvrgWeight) +\n                                               (VSQ-Words-Size >>AvrgWeight))",
    /* CGM_VSQC_WORDS_FC_PRMS    */ "VSQ - Group C - Flow-Control Words parameters table\n\n Access to the table using VSQ.Rate-Class",
    /* CGM_VSQC_WORDS_RJCT_PRMS  */ "VSQ - Group C - Words-Size reject parameters table\n\n Each entry hold statis threshold per DP.\n Access to the table using VSQ.Rate-Class",
    /* CGM_VSQC_WORDS_SIZE       */ "Instantaneous VSQ-C Words Size memory.\n Access to this table (for debug purpose only) using VSQ-C Index",
    /* CGM_VSQC_WORDS_STATE      */ "Instantaneous VSQ-C Words Size memory.\n Access to this table (for debug purpose only) using VSQ-C Index",
    /* CGM_VSQC_WRED_RJCT_PRMS   */ "VSQ - Group C - WRED asmission test parameters table\n\n Access using VSQ.Rate-Class, DP",
    /* CGM_VSQD_AVRG_PRMS        */ "VSQ - Group D - Average parameters table.\n\n Access using VSQ.Rate-Class\n\n Average-Size = (Average-Size - (Average-Size >>AvrgWeight) +\n                                               (VSQ-Words-Size >>AvrgWeight))",
    /* CGM_VSQD_FC_PRMS          */ "VSQ - Group D - Flow-Control parameters table\n\n Access to the table using VSQ.Rate-Class",
    /* CGM_VSQD_MAX_SIZE         */ "VSQ - Group D - Max size tracking memory",
    /* CGM_VSQD_MAX_SIZE_MEM     */ "VSQ - Group D - Max size tracking memory",
    /* CGM_VSQD_PRMS             */ "VSQ (Virtual Statistics Queue) - Group B (Statistics-VSQ-Ptr) parameters.\n Access table using VSQ-D-Index.",
    /* CGM_VSQD_RJCT_PRMS        */ "VSQ - Group D - reject parameters table\n Access using VSQ.Rate-Class, DP",
    /* CGM_VSQD_SRAM_BUFFERS_FC_PRMS */ "VSQ - Group D - Flow-Control SRAM-Buffers parameters table\n\n Access to the table using VSQ.Rate-Class",
    /* CGM_VSQD_SRAM_BUFFERS_RJCT_PRMS */ "VSQ - Group D - SRAM-Buffers-Size reject parameters table\n\n Each entry hold statis threshold per DP.\n Access to the table using VSQ.Rate-Class",
    /* CGM_VSQD_SRAM_BUFFERS_SIZE */ "Instantaneous VSQ-D SRAM-Buffers Size memory.\n Access to this table (for debug purpose only) using VSQ-D Index",
    /* CGM_VSQD_SRAM_BUFFERS_STATE */ "Instantaneous VSQ-D SRAM-Buffers Size memory.\n Access to this table (for debug purpose only) using VSQ-D Index",
    /* CGM_VSQD_SRAM_PDS_FC_PRMS */ "VSQ - Group D - Flow-Control SRAM-PDs parameters table\n\n Access to the table using VSQ.Rate-Class",
    /* CGM_VSQD_SRAM_PDS_RJCT_PRMS */ "VSQ - Group D - SRAM-PDs-Size reject parameters table\n\n Each entry hold statis threshold per DP.\n Access to the table using VSQ.Rate-Class",
    /* CGM_VSQD_SRAM_PDS_SIZE    */ "Instantaneous VSQ-D SRAM-PDs Size memory.\n Access to this table (for debug purpose only) using VSQ-E Index",
    /* CGM_VSQD_SRAM_PDS_STATE   */ "Instantaneous VSQ-D SRAM-PDs Size memory.\n Access to this table (for debug purpose only) using VSQ-E Index",
    /* CGM_VSQD_WORDS_AVRG_PRMS  */ "VSQ - Group D - Average parameters table.\n\n Access using VSQ.Rate-Class\n\n Average-Size = (Average-Size - (Average-Size >>AvrgWeight) +\n                                               (VSQ-Words-Size >>AvrgWeight))",
    /* CGM_VSQD_WORDS_FC_PRMS    */ "VSQ - Group D - Flow-Control Words parameters table\n\n Access to the table using VSQ.Rate-Class",
    /* CGM_VSQD_WORDS_RJCT_PRMS  */ "VSQ - Group D - Words-Size reject parameters table\n\n Each entry hold statis threshold per DP.\n Access to the table using VSQ.Rate-Class",
    /* CGM_VSQD_WORDS_SIZE       */ "Instantaneous VSQ-D Words Size memory.\n Access to this table (for debug purpose only) using VSQ-D Index",
    /* CGM_VSQD_WORDS_STATE      */ "Instantaneous VSQ-D Words Size memory.\n Access to this table (for debug purpose only) using VSQ-D Index",
    /* CGM_VSQD_WRED_RJCT_PRMS   */ "VSQ - Group D - WRED asmission test parameters table\n\n Access using VSQ.Rate-Class, DP",
    /* CGM_VSQE_AVRG_PRMS        */ "VSQ - Group E - Average parameters table.\n\n Access using VSQ.Rate-Class\n\n Average-Size = (Average-Size - (Average-Size >>AvrgWeight) +\n                                               (VSQ-Words-Size >>AvrgWeight))",
    /* CGM_VSQE_FC_PRMS          */ "VSQ - Group E - Flow-Control parameters table\n\n Access to the table using PG.Pool-ID, VSQ.Rate-Class",
    /* CGM_VSQE_MAX_SIZE         */ "VSQ - Group E - Max size tracking memory",
    /* CGM_VSQE_MAX_SIZE_MEM     */ "VSQ - Group E - Max size tracking memory",
    /* CGM_VSQE_PRMS             */ "VSQ (Virtual Statistics Queue) - Group E (LLFC) parameters.\n Access table using VSQ-E-Index.",
    /* CGM_VSQE_RJCT_PRMS        */ "VSQ - Group E - reject parameters table\n Access to the table using Pool-ID, VSQ.Rate-Class, DP",
    /* CGM_VSQE_SRAM_BUFFERS_FC_PRMS */ "VSQ - Group E - Flow-Control SRAM-Buffers parameters table\n\n Access to the table using PG.Pool-ID, VSQ.Rate-Class",
    /* CGM_VSQE_SRAM_BUFFERS_RJCT_PRMS */ "VSQ - Group E - SRAM-Buffers-Size reject parameters table\n\n Each entry hold statis threshold per DP.\n Access to the table using Pool-ID, VSQ.Rate-Class",
    /* CGM_VSQE_SRAM_BUFFERS_SIZE */ "Instantaneous VSQ-E (LLFC) SRAM-Buffers Size memory.\n Access to this table (for debug purpose only) using VSQ-E Index",
    /* CGM_VSQE_SRAM_BUFFERS_STATE */ "Instantaneous VSQ-E (LLFC) SRAM-Buffers Size memory.\n Access to this table (for debug purpose only) using VSQ-E Index",
    /* CGM_VSQE_SRAM_PDS_FC_PRMS */ "VSQ - Group E - Flow-Control SRAM-PDs parameters table\n\n Access to the table using PG.Pool-ID, VSQ.Rate-Class",
    /* CGM_VSQE_SRAM_PDS_RJCT_PRMS */ "VSQ - Group E - SRAM-PDs-Size reject parameters table\n\n Each entry hold statis threshold per DP.\n Access to the table using Pool-ID, VSQ.Rate-Class",
    /* CGM_VSQE_SRAM_PDS_SIZE    */ "Instantaneous VSQ-E (LLFC) SRAM-PDs Size memory.\n Access to this table (for debug purpose only) using VSQ-A Index",
    /* CGM_VSQE_SRAM_PDS_STATE   */ "Instantaneous VSQ-E (LLFC) SRAM-PDs Size memory.\n Access to this table (for debug purpose only) using VSQ-A Index",
    /* CGM_VSQE_WORDS_AVRG_PRMS  */ "VSQ - Group E - Average parameters table.\n\n Access using VSQ.Rate-Class\n\n Average-Size = (Average-Size - (Average-Size >>AvrgWeight) +\n                                               (VSQ-Words-Size >>AvrgWeight))",
    /* CGM_VSQE_WORDS_FC_PRMS    */ "VSQ - Group E - Flow-Control Words parameters table\n\n Access to the table using PG.Pool-ID, VSQ.Rate-Class",
    /* CGM_VSQE_WORDS_RJCT_PRMS  */ "VSQ - Group E - Words-Size reject parameters table\n\n Each entry hold statis threshold per DP.\n Access to the table using Pool-ID, VSQ.Rate-Class",
    /* CGM_VSQE_WORDS_SIZE       */ "Instantaneous VSQ-E (LLFC) Words Size memory.\n Access to this table (for debug purpose only) using VSQ-E Index",
    /* CGM_VSQE_WORDS_STATE      */ "Instantaneous VSQ-E (LLFC) Words Size memory.\n Access to this table (for debug purpose only) using VSQ-E Index",
    /* CGM_VSQE_WRED_RJCT_PRMS   */ "VSQ - Group E - WRED asmission test parameters table\n\n Access using VSQ.Rate-Class, DP",
    /* CGM_VSQF_AVRG_PRMS        */ "VSQ - Group F - Average parameters table.\n\n Access using VSQ.Rate-Class\n\n Average-Size = (Average-Size - (Average-Size >>AvrgWeight) +\n                                               (VSQ-Words-Size >>AvrgWeight))",
    /* CGM_VSQF_FC_PRMS          */ "VSQ - Group F - Flow-Control Words parameters table\n\n Access to the table using VSQ.Rate-Class",
    /* CGM_VSQF_MAX_SIZE         */ "VSQ - Group F - Max size tracking memory",
    /* CGM_VSQF_MAX_SIZE_MEM     */ "VSQ - Group F - Max size tracking memory",
    /* CGM_VSQF_PRMS             */ "VSQ (Virtual Statistics Queue) - Group F (PFC/PG) parameters.\n Access table using VSQ-F-Index.",
    /* CGM_VSQF_RJCT_PRMS        */ "VSQ - Group F - reject parameters table\n Access using VSQ.Rate-Class, DP",
    /* CGM_VSQF_SRAM_BUFFERS_FC_PRMS */ "VSQ - Group F - Flow-Control SRAM-Buffers parameters table\n\n Access to the table using VSQ.Rate-Class",
    /* CGM_VSQF_SRAM_BUFFERS_RJCT_PRMS */ "VSQ - Group F - SRAM-Buffers-Size reject parameters table\n\n Each entry hold statis threshold per DP.\n Access to the table using Pool-ID, VSQ.Rate-Class",
    /* CGM_VSQF_SRAM_BUFFERS_SIZE */ "Instantaneous VSQ-F (PFC/PG) SRAM-Buffers Size memory.\n Access to this table (for debug purpose only) using VSQ-F Index",
    /* CGM_VSQF_SRAM_BUFFERS_STATE */ "Instantaneous VSQ-F (PFC/PG) SRAM-Buffers Size memory.\n Access to this table (for debug purpose only) using VSQ-F Index",
    /* CGM_VSQF_SRAM_PDS_FC_PRMS */ "VSQ - Group F - Flow-Control SRAM-PDs parameters table\n\n Access to the table using VSQ.Rate-Class",
    /* CGM_VSQF_SRAM_PDS_RJCT_PRMS */ "VSQ - Group F - SRAM-PDs-Size reject parameters table\n\n Each entry hold statis threshold per DP.\n Access to the table using VSQ.Rate-Class",
    /* CGM_VSQF_SRAM_PDS_SIZE    */ "Instantaneous VSQ-F (PFC/PG) SRAM-PDs Size memory.\n Access to this table (for debug purpose only) using VSQ-F Index",
    /* CGM_VSQF_SRAM_PDS_STATE   */ "Instantaneous VSQ-F (PFC/PG) SRAM-PDs Size memory.\n Access to this table (for debug purpose only) using VSQ-F Index",
    /* CGM_VSQF_WORDS_AVRG_PRMS  */ "VSQ - Group F - Average parameters table.\n\n Access using VSQ.Rate-Class\n\n Average-Size = (Average-Size - (Average-Size >>AvrgWeight) +\n                                               (VSQ-Words-Size >>AvrgWeight))",
    /* CGM_VSQF_WORDS_FC_PRMS    */ "VSQ - Group F - Flow-Control Words parameters table\n\n Access to the table using VSQ.Rate-Class",
    /* CGM_VSQF_WORDS_RJCT_PRMS  */ "VSQ - Group F - Words-Size reject parameters table\n\n Each entry hold statis threshold per DP.\n Access to the table using Pool-ID, VSQ.Rate-Class",
    /* CGM_VSQF_WORDS_SIZE       */ "Instantaneous VSQ-F (PFC/PG) Words Size memory.\n Access to this table (for debug purpose only) using VSQ-F Index",
    /* CGM_VSQF_WORDS_STATE      */ "Instantaneous VSQ-F (PFC/PG) Words Size memory.\n Access to this table (for debug purpose only) using VSQ-F Index",
    /* CGM_VSQF_WRED_RJCT_PRMS   */ "VSQ - Group F - WRED asmission test parameters table\n\n Access using VSQ.Rate-Class, DP",
    /* CGM_VSQ_GRNTD_RJCT_MASK   */ "VSQ Guaranteed reject mask table.\n Mask admission tests based on VSQ state in guaranteed.\n\n Access to this table using:\n 2 - VSQ-Words-In-Guranteed\n 1 - VSQ-SRAM-Buffers-In-Guranteed\n 0 - VSQ-SRAM-PDs-In-Guranteed",
    /* CGM_VSQ_PG_TC_BITMAP      */ "VSQ PG TC bitmap table.\n Maps In-PP-Port.TcBitmapIndex, TC to PG-Offset.\n\n Access to this table using TC.\n Each entry holds 16 PG-Offsets(8) for 16 In-PP-Port.TcBitmapIndex.\n\n VSQ-E (LLFC)  = NIF-Port\n VSQ-F (PG)     = PG-Base + VsqPgTcBitmapTcBitmapIndex, TC",
    /* CGM_VSQ_SHRD_FR_RJCT_TH   */ "VSQ shared occupancy reject thresholds.\n Access to this table using PG.Pool-ID, DP.",
    /* CGM_VSQ_SHRD_OC_RJCT_TH   */ "VSQ shared occupancy reject thresholds.\n Access to this table using DP.",
    /* CHANNEL_MAP_TABLE         */ "Configuration Map for all the Channels",
    /* CHANNEL_SHAPER_TABLE      */ "Parameters for the Min and Max Shapers used to shape the channels",
    /* CHANNEL_WERR_TABLE        */ "WERR parameters for for all the Channels",
    /* CLPORT_WC_UCMEM_DATA      */ "",
    /* CM_EJECTION_FIFO          */ "Ejection FIFO. Read only. This is a single entry table which holds the head of the ejection FIFO.  Each read to this table will pop an entry off the head of the ejection FIFO and return the results. This table is provided for debug access to the ejection FIFO which, in normal functional mode, is read via the cmic FIFO POP DMA engine.  The control bit INTERRUPT_STATUS.EJECTION_FIFO_READY signals that the ejection FIFO is non-empty and can be read.  If the EJECTION_FIFO is read when empty, zero da ...",
    /* CNG_MAP                   */ "CNG Mapping MEMORY",
    /* COS_MAP_SEL               */ "Select one of four sections of COS_MAP table.",
    /* CO_COHERENT_TABLE_CMD     */ "COP coherent table cmd definition, for command injection purpose only",
    /* CO_COHERENT_TABLE_RSP     */ "COP coherent table response definition, for command injection purpose only",
    /* CO_COHERENT_TABLE_STATE   */ "",
    /* CO_METER_CMD              */ "COP meter command definition",
    /* CO_METER_MONITOR_COUNTER  */ "Meter Monitor Counter Memory",
    /* CO_METER_PROFILE          */ "Meter Profile Memory",
    /* CO_METER_RSP              */ "COP meter command response definition",
    /* CO_METER_STATE            */ "COP meter state definition",
    /* CO_SEQUENCE_CHECKER_CMD   */ "COP sequence number cmd definition, for command injection purpose only",
    /* CO_SEQUENCE_CHECKER_RSP   */ "COP sequence number command response definition",
    /* CO_SEQUENCE_CHECKER_STATE */ "",
    /* CO_WATCHDOG_TIMER_CMD     */ "COP watchdog timer cmd definition",
    /* CO_WATCHDOG_TIMER_EXPIRED_FIFO */ "Watchdog Timer Expired FIFO. Read only. This is a single entry table which holds the head of the Watchdogt Timer Expired FIFO.  Each read to this table will pop an entry off the head of the FIFO and return the results. This table is provided for debug access to the FIFO which, in normal functional mode, is read via the cmic FIFO POP DMA engine.  The control bit CO_WATCHDOG_TIMER_EXPIRED_FIFO_STATUS.NONEMPTY. signals that the ejection FIFO is non-empty and can be read.  If the FIFO is read when e ...",
    /* CO_WATCHDOG_TIMER_RSP     */ "COP watchdog timer command response definition",
    /* CO_WATCHDOG_TIMER_STATE   */ "COP watchdog timer state definition",
    /* CPU_COS_MAP               */ "index by COPYTO_CPU reasons code and internal priorities",
    /* CPU_COS_MAP_DATA_ONLY     */ "CPU_COS_MAP Data SRAM for CPU_COS_MAP TCAM",
    /* CPU_COS_MAP_ONLY          */ "CPU_COS_MAP TCAM only view",
    /* CPU_PBM                   */ "Specifies the port(s) that is (are) CPU.",
    /* CPU_PBM_2                 */ "Specifies the port(s) that is (are) CPU.",
    /* CPU_TS_MAP                */ "vlan range match table",
    /* CRPS_CRPS_0_CNTS_MEM      */ "CounterProcessor - counters memory.\n                   This memory holds all 32k counters pairs of Crps0. Each entry in the memory holds 2 counters: packets and bytes (octets).\n                   Accroding to the congiration in Crps0CountMode each entry may behave as a single wide counter.",
    /* CRPS_CRPS_0_OVTH_MEM      */ "CounterProcessor - over the threshold memory.\n                   This memory holds an indication per each entry in Crps0CntsMem whether one of the counters in the entry's counters pair is over the threshold (thresholds are configured in CrpsThresholdsCfg0).\n                   This memory is used by the scanner module to search counters that are over the threshold and should be read first (LR(T)).",
    /* CRPS_CRPS_0_PRE_READ_MEM  */ "INTERNAL",
    /* CRPS_CRPS_0_TO_3_PRE_READ_MEM */ "INTERNAL",
    /* CRPS_CRPS_10_CNTS_MEM     */ "CounterProcessor - counters memory.\n                   This memory holds all 16k counters pairs of Crps10. Each entry in the memory holds 2 counters: packets and bytes (octets) as described below, or 2 counters of 32 bits each according to configuration in Crps10CountMode\n                   Accroding to CrpsCntSrcMode each entry may behave as a single wide counter.",
    /* CRPS_CRPS_10_OVTH_MEM     */ "CounterProcessor - over the threshold memory.\n                   This memory holds an indication per each entry in Crps10CntsMem whether one of the counters in the entry's counters pair is over the threshold (thresholds are configured in CrpsThresholdsCfg10).\n                   This memory is used by the scanner module to search counters that are over the threshold and should be read first (LR(T)).",
    /* CRPS_CRPS_10_PRE_READ_MEM */ "INTERNAL",
    /* CRPS_CRPS_11_CNTS_MEM     */ "CounterProcessor - counters memory.\n                   This memory holds all 16k counters pairs of Crps11. Each entry in the memory holds 2 counters: packets and bytes (octets) as described below, or 2 counters of 32 bits each according to configuration in Crps11CountMode\n                   Accroding to CrpsCntSrcMode each entry may behave as a single wide counter.",
    /* CRPS_CRPS_11_OVTH_MEM     */ "CounterProcessor - over the threshold memory.\n                   This memory holds an indication per each entry in Crps1CntsMem whether one of the counters in the entry's counters pair is over the threshold (thresholds are configured in CrpsThresholdsCfg11).\n                   This memory is used by the scanner module to search counters that are over the threshold and should be read first (LR(T)).",
    /* CRPS_CRPS_11_PRE_READ_MEM */ "INTERNAL",
    /* CRPS_CRPS_12_CNTS_MEM     */ "CounterProcessor - counters memory.\n                   This memory holds all 16k counters pairs of Crps12. Each entry in the memory holds 2 counters: packets and bytes (octets) as described below, or 2 counters of 32 bits each according to configuration in Crps12CountMode\n                   Accroding to CrpsCntSrcMode each entry may behave as a single wide counter.",
    /* CRPS_CRPS_12_OVTH_MEM     */ "CounterProcessor - over the threshold memory.\n                   This memory holds an indication per each entry in Crps12CntsMem whether one of the counters in the entry's counters pair is over the threshold (thresholds are configured in CrpsThresholdsCfg12).\n                   This memory is used by the scanner module to search counters that are over the threshold and should be read first (LR(T)).",
    /* CRPS_CRPS_12_PRE_READ_MEM */ "INTERNAL",
    /* CRPS_CRPS_12_TO_16_PRE_READ_MEM */ "INTERNAL",
    /* CRPS_CRPS_12_TO_17_PRE_READ_MEM */ "INTERNAL",
    /* CRPS_CRPS_13_CNTS_MEM     */ "CounterProcessor - counters memory.\n                   This memory holds all 16k counters pairs of Crps13. Each entry in the memory holds 2 counters: packets and bytes (octets) as described below, or 2 counters of 32 bits each according to configuration in Crps13CountMode\n                   Accroding to CrpsCntSrcMode each entry may behave as a single wide counter.",
    /* CRPS_CRPS_13_OVTH_MEM     */ "CounterProcessor - over the threshold memory.\n                   This memory holds an indication per each entry in Crps13CntsMem whether one of the counters in the entry's counters pair is over the threshold (thresholds are configured in CrpsThresholdsCfg13).\n                   This memory is used by the scanner module to search counters that are over the threshold and should be read first (LR(T)).",
    /* CRPS_CRPS_13_PRE_READ_MEM */ "INTERNAL",
    /* CRPS_CRPS_14_CNTS_MEM     */ "CounterProcessor - counters memory.\n                   This memory holds all 16k counters pairs of Crps14. Each entry in the memory holds 2 counters: packets and bytes (octets) as described below, or 2 counters of 32 bits each according to configuration in Crps14CountMode\n                   Accroding to CrpsCntSrcMode each entry may behave as a single wide counter.",
    /* CRPS_CRPS_14_OVTH_MEM     */ "CounterProcessor - over the threshold memory.\n                   This memory holds an indication per each entry in Crps14CntsMem whether one of the counters in the entry's counters pair is over the threshold (thresholds are configured in CrpsThresholdsCfg14).\n                   This memory is used by the scanner module to search counters that are over the threshold and should be read first (LR(T)).",
    /* CRPS_CRPS_14_PRE_READ_MEM */ "INTERNAL",
    /* CRPS_CRPS_15_CNTS_MEM     */ "CounterProcessor - counters memory.\n                   This memory holds all 16k counters pairs of Crps15. Each entry in the memory holds 2 counters: packets and bytes (octets) as described below, or 2 counters of 32 bits each according to configuration in Crps15CountMode\n                   Accroding to CrpsCntSrcMode each entry may behave as a single wide counter.",
    /* CRPS_CRPS_15_OVTH_MEM     */ "CounterProcessor - over the threshold memory.\n                   This memory holds an indication per each entry in Crps15CntsMem whether one of the counters in the entry's counters pair is over the threshold (thresholds are configured in CrpsThresholdsCfg15).\n                   This memory is used by the scanner module to search counters that are over the threshold and should be read first (LR(T)).",
    /* CRPS_CRPS_15_PRE_READ_MEM */ "INTERNAL",
    /* CRPS_CRPS_16_CNTS_MEM     */ "CounterProcessor TM - counters memory.\n                   This memory holds all 4k counters pairs of CrpsTM0. Each entry in the memory holds 2 counters: packets and bytes (octets) as described below, or 2 counters of 32 bits each according to configuration in Crps16CountMode\n                   Accroding to CrpsCntSrcMode each entry may behave as a single wide counter.",
    /* CRPS_CRPS_16_OVTH_MEM     */ "CounterProcessor - over the threshold memory.\n                   This memory holds an indication per each entry in CrpsTm0CntsMem whether one of the counters in the entry's counters pair is over the threshold (thresholds are configured in CrpsThresholdsCfg16).\n                   This memory is used by the scanner module to search counters that are over the threshold and should be read first (LR(T)).",
    /* CRPS_CRPS_16_PRE_READ_MEM */ "INTERNAL",
    /* CRPS_CRPS_17_CNTS_MEM     */ "CounterProcessor TM - counters memory.\n                   This memory holds all 4k counters pairs of CrpsTM1. Each entry in the memory holds 2 counters: packets and bytes (octets) as described below, or 2 counters of 32 bits each according to configuration in Crps17CountMode\n                   Accroding to CrpsCntSrcMode each entry may behave as a single wide counter.",
    /* CRPS_CRPS_17_OVTH_MEM     */ "CounterProcessor - over the threshold memory.\n                   This memory holds an indication per each entry in CrpsTm1CntsMem whether one of the counters in the entry's counters pair is over the threshold (thresholds are configured in CrpsThresholdsCfg17).\n                   This memory is used by the scanner module to search counters that are over the threshold and should be read first (LR(T)).",
    /* CRPS_CRPS_17_PRE_READ_MEM */ "INTERNAL",
    /* CRPS_CRPS_1_CNTS_MEM      */ "CounterProcessor - counters memory.\n                   This memory holds all 32k counters pairs of Crps1. Each entry in the memory holds 2 counters: packets and bytes (octets).\n                   Accroding to the congiration in Crps1CountMode each entry may behave as a single wide counter.",
    /* CRPS_CRPS_1_OVTH_MEM      */ "CounterProcessor - over the threshold memory.\n                   This memory holds an indication per each entry in Crps1CntsMem whether one of the counters in the entry's counters pair is over the threshold (thresholds are configured in CrpsThresholdsCfg1).\n                   This memory is used by the scanner module to search counters that are over the threshold and should be read first (LR(T)).",
    /* CRPS_CRPS_1_PRE_READ_MEM  */ "INTERNAL",
    /* CRPS_CRPS_2_CNTS_MEM      */ "CounterProcessor - counters memory.\n                   This memory holds all 32k counters pairs of Crps2. Each entry in the memory holds 2 counters: packets and bytes (octets).\n                   Accroding to the congiration in Crps2CountMode each entry may behave as a single wide counter.",
    /* CRPS_CRPS_2_OVTH_MEM      */ "CounterProcessor - over the threshold memory.\n                   This memory holds an indication per each entry in Crps2CntsMem whether one of the counters in the entry's counters pair is over the threshold (thresholds are configured in CrpsThresholdsCfg2).\n                   This memory is used by the scanner module to search counters that are over the threshold and should be read first (LR(T)).",
    /* CRPS_CRPS_2_PRE_READ_MEM  */ "INTERNAL",
    /* CRPS_CRPS_3_CNTS_MEM      */ "CounterProcessor - counters memory.\n                   This memory holds all 32k counters pairs of Crps3. Each entry in the memory holds 2 counters: packets and bytes (octets).\n                   Accroding to the congiration in Crps3CountMode each entry may behave as a single wide counter.",
    /* CRPS_CRPS_3_OVTH_MEM      */ "CounterProcessor - over the threshold memory.\n                   This memory holds an indication per each entry in Crps3CntsMem whether one of the counters in the entry's counters pair is over the threshold (thresholds are configured in CrpsThresholdsCfg3).\n                   This memory is used by the scanner module to search counters that are over the threshold and should be read first (LR(T)).",
    /* CRPS_CRPS_3_PRE_READ_MEM  */ "INTERNAL",
    /* CRPS_CRPS_4_CNTS_MEM      */ "CounterProcessor - counters memory.\n                   This memory holds all 16k counters pairs of Crps4. Each entry in the memory holds 2 counters: packets and bytes (octets) as described below, or 2 counters of 32 bits each according to configuration in Crps4CountMode\n                   Accroding to CrpsCntSrcMode each entry may behave as a single wide counter.",
    /* CRPS_CRPS_4_OVTH_MEM      */ "CounterProcessor - over the threshold memory.\n                   This memory holds an indication per each entry in Crps4CntsMem whether one of the counters in the entry's counters pair is over the threshold (thresholds are configured in CrpsThresholdsCfg4).\n                   This memory is used by the scanner module to search counters that are over the threshold and should be read first (LR(T)).",
    /* CRPS_CRPS_4_PRE_READ_MEM  */ "INTERNAL",
    /* CRPS_CRPS_4_TO_7_PRE_READ_MEM */ "INTERNAL",
    /* CRPS_CRPS_5_CNTS_MEM      */ "CounterProcessor - counters memory.\n                   This memory holds all 16k counters pairs of Crps5. Each entry in the memory holds 2 counters: packets and bytes (octets) as described below, or 2 counters of 32 bits each according to configuration in Crps5CountMode\n                   Accroding to CrpsCntSrcMode each entry may behave as a single wide counter.",
    /* CRPS_CRPS_5_OVTH_MEM      */ "CounterProcessor - over the threshold memory.\n                   This memory holds an indication per each entry in Crps5CntsMem whether one of the counters in the entry's counters pair is over the threshold (thresholds are configured in CrpsThresholdsCfg5).\n                   This memory is used by the scanner module to search counters that are over the threshold and should be read first (LR(T)).",
    /* CRPS_CRPS_5_PRE_READ_MEM  */ "INTERNAL",
    /* CRPS_CRPS_6_CNTS_MEM      */ "CounterProcessor - counters memory.\n                   This memory holds all 16k counters pairs of Crps6. Each entry in the memory holds 2 counters: packets and bytes (octets) as described below, or 2 counters of 32 bits each according to configuration in Crps6CountMode\n                   Accroding to CrpsCntSrcMode each entry may behave as a single wide counter.",
    /* CRPS_CRPS_6_OVTH_MEM      */ "CounterProcessor - over the threshold memory.\n                   This memory holds an indication per each entry in Crps6CntsMem whether one of the counters in the entry's counters pair is over the threshold (thresholds are configured in CrpsThresholdsCfg6).\n                   This memory is used by the scanner module to search counters that are over the threshold and should be read first (LR(T)).",
    /* CRPS_CRPS_6_PRE_READ_MEM  */ "INTERNAL",
    /* CRPS_CRPS_7_CNTS_MEM      */ "CounterProcessor - counters memory.\n                   This memory holds all 16k counters pairs of Crps7. Each entry in the memory holds 2 counters: packets and bytes (octets) as described below, or 2 counters of 32 bits each according to configuration in Crps7CountMode\n                   Accroding to CrpsCntSrcMode each entry may behave as a single wide counter.",
    /* CRPS_CRPS_7_OVTH_MEM      */ "CounterProcessor - over the threshold memory.\n                   This memory holds an indication per each entry in Crps7CntsMem whether one of the counters in the entry's counters pair is over the threshold (thresholds are configured in CrpsThresholdsCfg7).\n                   This memory is used by the scanner module to search counters that are over the threshold and should be read first (LR(T)).",
    /* CRPS_CRPS_7_PRE_READ_MEM  */ "INTERNAL",
    /* CRPS_CRPS_8_CNTS_MEM      */ "CounterProcessor - counters memory.\n                   This memory holds all 16k counters pairs of Crps8. Each entry in the memory holds 2 counters: packets and bytes (octets) as described below, or 2 counters of 32 bits each according to configuration in Crps8CountMode\n                   Accroding to CrpsCntSrcMode each entry may behave as a single wide counter.",
    /* CRPS_CRPS_8_OVTH_MEM      */ "CounterProcessor - over the threshold memory.\n                   This memory holds an indication per each entry in Crps1CntsMem whether one of the counters in the entry's counters pair is over the threshold (thresholds are configured in CrpsThresholdsCfg8).\n                   This memory is used by the scanner module to search counters that are over the threshold and should be read first (LR(T)).",
    /* CRPS_CRPS_8_PRE_READ_MEM  */ "INTERNAL",
    /* CRPS_CRPS_8_TO_11_PRE_READ_MEM */ "INTERNAL",
    /* CRPS_CRPS_9_CNTS_MEM      */ "CounterProcessor - counters memory.\n                   This memory holds all 16k counters pairs of Crps9. Each entry in the memory holds 2 counters: packets and bytes (octets) as described below, or 2 counters of 32 bits each according to configuration in Crps9CountMode\n                   Accroding to CrpsCntSrcMode each entry may behave as a single wide counter.",
    /* CRPS_CRPS_9_OVTH_MEM      */ "CounterProcessor - over the threshold memory.\n                   This memory holds an indication per each entry in Crps9CntsMem whether one of the counters in the entry's counters pair is over the threshold (thresholds are configured in CrpsThresholdsCfg9).\n                   This memory is used by the scanner module to search counters that are over the threshold and should be read first (LR(T)).",
    /* CRPS_CRPS_9_PRE_READ_MEM  */ "INTERNAL",
    /* CRPS_CRPS_CNTS_MEM        */ "CounterProcessor - counters memory.\n Each memory holds all 16k counters pairs of Crps0-16. Each entry in the memory holds 2 counters: packets and bytes (octets) as described below, or 2 counters of 32 bits each according to configuration in Crps0-16CountMode\n Accroding to CrpsCntSrcMode each entry may behave as a single wide counter.",
    /* CRPS_CRPS_DMA_PRE_READ_MEM */ "INTERNAL",
    /* CRPS_CRPS_EXPANSION_MAP_A_MEM */ "INTERNAL",
    /* CRPS_CRPS_EXPANSION_MAP_B_MEM */ "INTERNAL",
    /* CRPS_CRPS_EXPANSION_MAP_C_MEM */ "INTERNAL",
    /* CRPS_CRPS_OVTH_MEM        */ "CounterProcessor - over the threshold memory.\n Each memory holds an indication per each entry in Crps0-16CntsMem whether one of the counters in the entry's counters pair is over the threshold (thresholds are configured in CrpsThresholdsCfg0-16).\n This memory is used by the scanner module to search counters that are over the threshold and should be read first (LR(T)).",
    /* CRPS_CRPS_OVTH_MEM_A      */ "CounterProcessor - over the threshold memory. Each memory holds an indication per each entry in Crps0-7 CntsMem whether one of the counters in the entry's counters pair is over the threshold (thresholds are configured in CrpsThresholdsCfg0-7). This memory is used by the scanner module to search counters that are over the threshold and should be read first.",
    /* CRPS_CRPS_OVTH_MEM_B      */ "CounterProcessor - over the threshold memory. Each memory holds an indication per each entry in Crps8-15 CntsMem whether one of the counters in the entry's counters pair is over the threshold (thresholds are configured in CrpsThresholdsCfg8-15). This memory is used by the scanner module to search counters that are over the threshold and should be read first.",
    /* CRPS_CRPS_OVTH_MEM_C      */ "CounterProcessor - over the threshold memory. Each memory holds an indication per each entry in Crps16-21 CntsMem whether one of the counters in the entry's counters pair is over the threshold (thresholds are configured in CrpsThresholdsCfg16-21). This memory is used by the scanner module to search counters that are over the threshold and should be read first.",
    /* CRPS_CRPS_PRE_READ_MEM    */ "INTERNAL",
    /* CRPS_CRPS_TYPE_MAP_MEM    */ "CounterProcessor - crps type mapping to address jump",
    /* CRPS_EGQ_0_CNTCMD_HDR_CMP_PROFILE_MAPPING_TABLE */ "EGQ0 Header-Compensation calculation, to be added to incoming packet size:\n                   In-PP-Port-Profile(4) -> Cntcmd-Header-Compensation",
    /* CRPS_EGQ_1_CNTCMD_HDR_CMP_PROFILE_MAPPING_TABLE */ "EGQ1 Header-Compensation calculation, to be added to incoming packet size:\n                   In-PP-Port-Profile(4) -> Cntcmd-Header-Compensation",
    /* CRPS_EGQ_OFFSET_BMAP      */ "Counter Processor - group size offset bitmap configuration - each line is for a Crps group size: 1, 2(REJ), 2(dp), 4, 5.\n                   This mapping is used to determine the counter pair's offset within the group. The group number is determined by the counter ID given in the interface from the Egq multiplied by the group size that is configured in EgqGroupSize.\n                   The offset is determined differently per each group size.",
    /* CRPS_EGQ_TM_CNTCMD_HDR_CMP_PROFILE_MAPPING_TABLE */ "EGQ-TM Header-Compensation calculation, to be added to incoming packet size:\n                   In-PP-Port-Profile(4) -> Cntcmd-Header-Compensation",
    /* CRPS_EPNI_0_CNTCMD_HDR_CMP_PROFILE_MAPPING_TABLE */ "EPNI0 Header-Compensation calculation, to be added to incoming packet size:\n                   In-PP-Port-Profile(4) -> Cntcmd-Header-Compensation",
    /* CRPS_EPNI_1_CNTCMD_HDR_CMP_PROFILE_MAPPING_TABLE */ "EPNI1 Header-Compensation calculation, to be added to incoming packet size:\n                   In-PP-Port-Profile(4) -> Cntcmd-Header-Compensation",
    /* CRPS_EPNI_OFFSET_BMAP_A   */ "Counter Processor - group size offset bitmap configuration - each line is for a Crps group size: 1, 2(REJ), 2(dp), 4, 5.\n                   This mapping is used to determine the counter pair's offset within the group. The group number is determined by the counter ID given in the interface from the EpniA multiplied by the group size that is configured in EpniAGroupSize.\n                   The offset is determined differently per each group size.",
    /* CRPS_EPNI_OFFSET_BMAP_B   */ "Counter Processor - group size offset bitmap configuration - each line is for a Crps group size: 1, 2(REJ), 2(dp), 4, 5.\n                   This mapping is used to determine the counter pair's offset within the group. The group number is determined by the counter ID given in the interface from the EpniB multiplied by the group size that is configured in EpniBGroupSize.\n                   The offset is determined differently per each group size.",
    /* CRPS_HEADER_APPEND_PTR_TO_EGQ_0_CNTCMD_HDR_CMP_MAPPING_TABLE */ "EGQ0 Header-Compensation calculation, to be added to incoming packet size:\n                   Header-Append-Ptr -> Header-Append-Ptr-Compensation",
    /* CRPS_HEADER_APPEND_PTR_TO_EGQ_1_CNTCMD_HDR_CMP_MAPPING_TABLE */ "EGQ1 Header-Compensation calculation, to be added to incoming packet size:\n                   Header-Append-Ptr -> Header-Append-Ptr-Compensation",
    /* CRPS_HEADER_APPEND_PTR_TO_EGQ_TM_CNTCMD_HDR_CMP_MAPPING_TABLE */ "EGQ1 Header-Compensation calculation, to be added to incoming packet size:\n                   Header-Append-Ptr -> Header-Append-Ptr-Compensation",
    /* CRPS_HEADER_APPEND_PTR_TO_EPNI_0_CNTCMD_HDR_CMP_MAPPING_TABLE */ "EPNI0 Header-Compensation calculation, to be added to incoming packet size:\n                   Header-Append-Ptr -> Header-Append-Ptr-Compensation",
    /* CRPS_HEADER_APPEND_PTR_TO_EPNI_1_CNTCMD_HDR_CMP_MAPPING_TABLE */ "EPNI1 Header-Compensation calculation, to be added to incoming packet size:\n                   Header-Append-Ptr -> Header-Append-Ptr-Compensation",
    /* CRPS_IN_PP_PORT_TO_EGQ_0_CNTCMD_HDR_CMP_PROFILE_TABLE */ "EGQ0 Header-Compensation calculation, to be added to incoming packet size:\n                   In-PP-Port -> Cntcmd-Hdr-Cmp-Profile table",
    /* CRPS_IN_PP_PORT_TO_EGQ_1_CNTCMD_HDR_CMP_PROFILE_TABLE */ "EGQ1 Header-Compensation calculation, to be added to incoming packet size:\n                   In-PP-Port -> Cntcmd-Hdr-Cmp-Profile table",
    /* CRPS_IN_PP_PORT_TO_EGQ_TM_CNTCMD_HDR_CMP_PROFILE_TABLE */ "EGQ-TM Header-Compensation calculation, to be added to incoming packet size:\n                   In-PP-Port -> Cntcmd-Hdr-Cmp-Profile table",
    /* CRPS_IN_PP_PORT_TO_EPNI_0_CNTCMD_HDR_CMP_PROFILE_TABLE */ "EPNI0 Header-Compensation calculation, to be added to incoming packet size:\n                   In-PP-Port -> Cntcmd-Hdr-Cmp-Profile table",
    /* CRPS_IN_PP_PORT_TO_EPNI_1_CNTCMD_HDR_CMP_PROFILE_TABLE */ "EPNI1 Header-Compensation calculation, to be added to incoming packet size:\n                   In-PP-Port -> Cntcmd-Hdr-Cmp-Profile table",
    /* CRPS_IQM_OFFSET_BMAP_A    */ "Counter Processor - group size offset bitmap configuration - each line is for a Crps group size: 1, 2(REJ), 2(dp), 4, 5.\n                   This mapping is used to determine the counter pair's offset within the group. The group number is determined by the counter ID given in the interface from the IqmA multiplied by the group size that is configured in IqmAGroupSize.\n                   The offset is determined differently per each group size.",
    /* CRPS_IQM_OFFSET_BMAP_B    */ "Counter Processor - group size offset bitmap configuration - each line is for a Crps group size: 1, 2(REJ), 2(dp), 4, 5.\n                   This mapping is used to determine the counter pair's offset within the group. The group number is determined by the counter ID given in the interface from the IqmB multiplied by the group size that is configured in IqmBGroupSize.\n                   The offset is determined differently per each group size.",
    /* CRPS_IQM_OFFSET_BMAP_C    */ "Counter Processor - group size offset bitmap configuration - each line is for a Crps group size: 1, 2(REJ), 2(dp), 4, 5.\n                   This mapping is used to determine the counter pair's offset within the group. The group number is determined by the counter ID given in the interface from the IqmC multiplied by the group size that is configured in IqmCGroupSize.\n                   The offset is determined differently per each group size.",
    /* CRPS_IQM_OFFSET_BMAP_D    */ "Counter Processor - group size offset bitmap configuration - each line is for a Crps group size: 1, 2(REJ), 2(dp), 4, 5.\n                   This mapping is used to determine the counter pair's offset within the group. The group number is determined by the counter ID given in the interface from the IqmD multiplied by the group size that is configured in IqmDGroupSize.\n                   The offset is determined differently per each group size.",
    /* CRPS_IRPP_OFFSET_BMAP_A   */ "Counter Processor - group size offset bitmap configuration - each line is for a Crps group size: 1, 2(REJ), 2(dp), 4, 5.\n                   This mapping is used to determine the counter pair's offset within the group. The group number is determined by the counter ID given in the interface from the IrppA multiplied by the group size that is configured in IrppAGroupSize.\n                   The offset is determined differently per each group size.",
    /* CRPS_IRPP_OFFSET_BMAP_B   */ "Counter Processor - group size offset bitmap configuration - each line is for a Crps group size: 1, 2(REJ), 2(dp), 4, 5.\n                   This mapping is used to determine the counter pair's offset within the group. The group number is determined by the counter ID given in the interface from the IrppB multiplied by the group size that is configured in IrppBGroupSize.\n                   The offset is determined differently per each group size.",
    /* CRPS_MEM_0080000          */ "INTERNAL",
    /* CRPS_MEM_0090000          */ "INTERNAL",
    /* CRPS_MEM_0100000          */ "INTERNAL",
    /* CRPS_MEM_0110000          */ "INTERNAL",
    /* CRPS_MEM_0120000          */ "INTERNAL",
    /* CRPS_MEM_0130000          */ "INTERNAL",
    /* CRPS_MEM_0140000          */ "INTERNAL",
    /* CRPS_MEM_00A0000          */ "INTERNAL",
    /* CRPS_MEM_00B0000          */ "INTERNAL",
    /* CRPS_MEM_00C0000          */ "INTERNAL",
    /* CRPS_MEM_00D0000          */ "INTERNAL",
    /* CRPS_MEM_00E0000          */ "INTERNAL",
    /* CRPS_MEM_00F0000          */ "INTERNAL",
    /* CS_BRICK_CONFIG_TABLE     */ "CS Brick Configuration. Bricks use 4 consecutive entries",
    /* CS_EJECTION_MESSAGE_TABLE */ "CS Ejection Message",
    /* CTR_DEQ_STATUS_MEM        */ "",
    /* CTR_FLEX_COUNT_0          */ "",
    /* CTR_FLEX_COUNT_1          */ "",
    /* CTR_FLEX_COUNT_2          */ "",
    /* CTR_FLEX_COUNT_3          */ "",
    /* CTR_FLEX_COUNT_4          */ "",
    /* CTR_FLEX_COUNT_5          */ "",
    /* CTR_FLEX_COUNT_6          */ "",
    /* CTR_FLEX_COUNT_7          */ "",
    /* CTR_FLEX_COUNT_8          */ "",
    /* CTR_FLEX_COUNT_9          */ "",
    /* CTR_FLEX_COUNT_10         */ "",
    /* CTR_FLEX_COUNT_11         */ "",
    /* CTR_MEM                   */ "Counter Memory - refer to CTR spec for addresses of different counters",
    /* CUSTOM_HEADER_MATCH       */ "TCAM FOR CUSTOM HEADER",
    /* CUSTOM_HEADER_POLICY_TABLE */ "POLICY TABLE FOR DETERMINING ACTIONS IN THE VFP",
    /* CUT_THROUGH_ATTRIBUTE     */ "Cut-Through attribution table: Indexed by {Priority (1bit), Flow_id/Circuit_id (12 bits)}",
    /* CXXPORT_WC_UCMEM_DATA0    */ "Warpcore External Memory Interface to program micro-controller memory of TSC_4_E_0",
    /* CXXPORT_WC_UCMEM_DATA1    */ "Warpcore External Memory Interface to program micro-controller memory of TSC_4_E_1",
    /* CXXPORT_WC_UCMEM_DATA2    */ "Warpcore External Memory Interface to program micro-controller memory of TSC_4_E_2",
    /* CXX_CXXPORT_WC_UCMEM_DATA_0 */ "",
    /* CXX_CXXPORT_WC_UCMEM_DATA_1 */ "",
    /* CXX_CXXPORT_WC_UCMEM_DATA_2 */ "",
    /* CX_DEBUG_MEM              */ "",
    /* DCH_AUTO_DOC_NAME_50      */ "INTERNAL",
    /* DCH_AUTO_DOC_NAME_51      */ "INTERNAL",
    /* DCH_AUTO_DOC_NAME_52      */ "INTERNAL",
    /* DCH_AUTO_DOC_NAME_53      */ "INTERNAL",
    /* DCH_AUTO_DOC_NAME_54      */ "INTERNAL",
    /* DCH_AUTO_DOC_NAME_55      */ "INTERNAL",
    /* DCH_AUTO_DOC_NAME_56      */ "INTERNAL",
    /* DCH_AUTO_DOC_NAME_57      */ "INTERNAL",
    /* DCH_AUTO_DOC_NAME_58      */ "INTERNAL",
    /* DCH_AUTO_DOC_NAME_59      */ "INTERNAL",
    /* DCH_AUTO_DOC_NAME_60      */ "INTERNAL",
    /* DCH_AUTO_DOC_NAME_61      */ "INTERNAL",
    /* DCH_DDP_REPLY_FIFO_P      */ "",
    /* DCH_DDP_TAG_FIFO_P        */ "",
    /* DCH_ITMAA_P               */ "",
    /* DCH_ITMAB_P               */ "",
    /* DCH_ITMBA_P               */ "",
    /* DCH_ITMBB_P               */ "",
    /* DCH_ITMCA_P               */ "",
    /* DCH_ITMCB_P               */ "",
    /* DCH_ITMD_P                */ "",
    /* DCH_ITM_0_P               */ "",
    /* DCH_ITM_1_P               */ "",
    /* DCH_ITM_2_P               */ "",
    /* DCH_ITM_3_P               */ "",
    /* DCH_ITM_4_P               */ "",
    /* DCH_ITM_5_P               */ "",
    /* DCH_MEM_400000            */ "INTERNAL",
    /* DCH_MEM_00500000          */ "INTERNAL",
    /* DCH_MEM_00600000          */ "INTERNAL",
    /* DCH_MEM_00700000          */ "INTERNAL",
    /* DCH_MEM_00800000          */ "INTERNAL",
    /* DCH_MEM_00900000          */ "INTERNAL",
    /* DCH_MEM_01000000          */ "INTERNAL",
    /* DCH_MEM_01100000          */ "INTERNAL",
    /* DCH_MEM_00A00000          */ "INTERNAL",
    /* DCH_MEM_00B00000          */ "INTERNAL",
    /* DCH_MEM_00C00000          */ "INTERNAL",
    /* DCH_MEM_00D00000          */ "INTERNAL",
    /* DCH_MEM_00E00000          */ "INTERNAL",
    /* DCH_MEM_00F00000          */ "INTERNAL",
    /* DCL_CHF                   */ "",
    /* DCL_CLF                   */ "",
    /* DCL_CPU_H                 */ "cpu fifo high memory.\n                   For reading a cpu cell from fifo read first address of this memory. Fifo pop is then done internally. Two sbus reads from the same address are needed for reading an entry, since memory is wide.",
    /* DCL_CPU_L                 */ "cpu fifo low memory.\n                   Reading from this memory is done by reading cpu_h first memory address.",
    /* DCL_MEM_01200000          */ "INTERNAL",
    /* DCL_MEM_01300000          */ "INTERNAL",
    /* DCL_MEM_01400000          */ "INTERNAL",
    /* DCL_MEM_01500000          */ "INTERNAL",
    /* DCL_MEM_01600000          */ "INTERNAL",
    /* DCL_MEM_01700000          */ "INTERNAL",
    /* DCL_MEM_01800000          */ "INTERNAL",
    /* DCL_MEM_01900000          */ "INTERNAL",
    /* DCL_MEM_02000000          */ "INTERNAL",
    /* DCL_MEM_02100000          */ "INTERNAL",
    /* DCL_MEM_02200000          */ "INTERNAL",
    /* DCL_MEM_01A00000          */ "INTERNAL",
    /* DCL_MEM_01B00000          */ "INTERNAL",
    /* DCL_MEM_01C00000          */ "INTERNAL",
    /* DCL_MEM_01D00000          */ "INTERNAL",
    /* DCL_MEM_01E00000          */ "INTERNAL",
    /* DCL_MEM_01F00000          */ "INTERNAL",
    /* DCML_AUTO_DOC_NAME_50     */ "INTERNAL",
    /* DCML_AUTO_DOC_NAME_51     */ "INTERNAL",
    /* DCML_AUTO_DOC_NAME_52     */ "INTERNAL",
    /* DCML_AUTO_DOC_NAME_53     */ "INTERNAL",
    /* DCML_AUTO_DOC_NAME_54     */ "INTERNAL",
    /* DCML_AUTO_DOC_NAME_55     */ "INTERNAL",
    /* DCML_CDM_FIFOS_MEM        */ "25 fifos (24 dest. + 1 Gsync) x 36 entries X 122 bit per entry",
    /* DCM_MEM_01000000          */ "INTERNAL",
    /* DCM_MEM_01100000          */ "INTERNAL",
    /* DCM_MEM_01200000          */ "INTERNAL",
    /* DCM_MEM_01300000          */ "INTERNAL",
    /* DCM_MEM_00D00000          */ "INTERNAL",
    /* DCM_MEM_00E00000          */ "INTERNAL",
    /* DCM_MEM_00F00000          */ "INTERNAL",
    /* DCM_MEM_C00000            */ "INTERNAL",
    /* DCM_MTMA_P                */ "",
    /* DCM_MTMB_P                */ "",
    /* DCM_MTMC_P                */ "",
    /* DCM_MTMD_P                */ "",
    /* DC_MEM                    */ "Domain Counter Table to hold the 264 unicast domain counters and 2 multicast domain counters. This table is indexed by Domain Number[7:0].",
    /* DDHA_MACRO_0_ABK_BANK     */ "",
    /* DDHA_MACRO_0_CLUSTER_FMT_ATR */ "per cluster configurations, Addressed with key format, with below attributes:\n EM120 - compare-bitmap(30b), EM-Key-type(2b)\n EM240(even cluster) - compare-mask-bitmap(30b), EM-Key-type-lsb(2b)\n EM240(odd cluster) - compare-mask-bitmap(30b), 1'b0, EM-Key-type-msb(1b)\n LPM - LPM-key-type(4b)\n TCAM - TCAM-key-type(2b)\n DIRECT - entry-bitmap(4b)\n DIRECT240 - offset(1b), entry-bitmap(4b)",
    /* DDHA_MACRO_0_ENTRY_BANK   */ "",
    /* DDHA_MACRO_0_PHYSICAL_ABK_BANK */ "",
    /* DDHA_MACRO_0_PHYSICAL_ENTRY_BANK */ "",
    /* DDHA_MACRO_1_ABK_BANK     */ "",
    /* DDHA_MACRO_1_CLUSTER_FMT_ATR */ "per cluster configurations, Addressed with key format, with below attributes:\n EM120 - compare-bitmap(30b), EM-Key-type(2b)\n EM240(even cluster) - compare-mask-bitmap(30b), EM-Key-type-lsb(2b)\n EM240(odd cluster) - compare-mask-bitmap(30b), 1'b0, EM-Key-type-msb(1b)\n LPM - LPM-key-type(4b)\n TCAM - TCAM-key-type(2b)\n DIRECT - entry-bitmap(4b)\n DIRECT240 - offset(1b), entry-bitmap(4b)",
    /* DDHA_MACRO_1_ENTRY_BANK   */ "",
    /* DDHA_MACRO_1_PHYSICAL_ABK_BANK */ "",
    /* DDHA_MACRO_1_PHYSICAL_ENTRY_BANK */ "",
    /* DDHB_MACRO_0_ABK_BANK     */ "",
    /* DDHB_MACRO_0_CLUSTER_FMT_ATR */ "per cluster configurations, Addressed with key format, with below attributes:\n EM120 - compare-bitmap(30b), EM-Key-type(2b)\n EM240(even cluster) - compare-mask-bitmap(30b), EM-Key-type-lsb(2b)\n EM240(odd cluster) - compare-mask-bitmap(30b), 1'b0, EM-Key-type-msb(1b)\n LPM - LPM-key-type(4b)\n TCAM - TCAM-key-type(2b)\n DIRECT - entry-bitmap(4b)\n DIRECT240 - offset(1b), entry-bitmap(4b)",
    /* DDHB_MACRO_0_ENTRY_BANK   */ "",
    /* DDHB_MACRO_0_PHYSICAL_ABK_BANK */ "",
    /* DDHB_MACRO_0_PHYSICAL_ENTRY_BANK */ "",
    /* DDHB_MACRO_1_ABK_BANK     */ "",
    /* DDHB_MACRO_1_CLUSTER_FMT_ATR */ "per cluster configurations, Addressed with key format, with below attributes:\n EM120 - compare-bitmap(30b), EM-Key-type(2b)\n EM240(even cluster) - compare-mask-bitmap(30b), EM-Key-type-lsb(2b)\n EM240(odd cluster) - compare-mask-bitmap(30b), 1'b0, EM-Key-type-msb(1b)\n LPM - LPM-key-type(4b)\n TCAM - TCAM-key-type(2b)\n DIRECT - entry-bitmap(4b)\n DIRECT240 - offset(1b), entry-bitmap(4b)",
    /* DDHB_MACRO_1_ENTRY_BANK   */ "",
    /* DDHB_MACRO_1_PHYSICAL_ABK_BANK */ "",
    /* DDHB_MACRO_1_PHYSICAL_ENTRY_BANK */ "",
    /* DDP_BEC_WAIT_FIF          */ "FIFO of data waiting for buffer pointers",
    /* DDP_BTC_IPT_RXI           */ "Tx cmd rxi",
    /* DDP_BTC_MMU_RXI_MEM       */ "Btc mmu rxi memory",
    /* DDP_DBDF                  */ "Dequeue Bundle Descriptor FIFO",
    /* DDP_DBLF                  */ "Dequeue Buffer List FIFO",
    /* DDP_FBC                   */ "Free Buffer Cache",
    /* DDP_ITE_DRAM_PEF          */ "Packet Edit FIFO",
    /* DDP_ITE_DRAM_WDF          */ "Word Data FIFO",
    /* DDP_MAX_LATENCY           */ "The MLM measures latency from the packet OAM-TS extension.\n In this memory the 8 maximal latency's are kept, with the pointer associated with them",
    /* DDP_PKP_RX_CFIF           */ "Packet Packing RXI Control FIFO",
    /* DDP_PKP_RX_DFIF           */ "Packet Packing RXI Data FIFO,\n store up to 2 Jambo (20kB) + 100 cycles = 260",
    /* DDP_PKUP_RX_DFIF          */ "Packet Un-Packing RXI Data FIFO",
    /* DEBUG_CAPTURE             */ "Isw2 debug capture buffer",
    /* DEST_MOD_PROXY_TABLE      */ "DEST MODID table for WLAN proxy status .",
    /* DEST_TRUNK_BITMAP         */ "Destination Trunk Bitmap Table.",
    /* DEVICE_LOOPBACK_PORTS_BITMAP */ "Defines set of device loopback ports.",
    /* DEVICE_STREAM_ID_TO_PP_PORT_MAP */ "Port Table, FeatureSpecific-Ethernet.",
    /* DHC_MACRO_ABK_BANK        */ "",
    /* DHC_MACRO_CLUSTER_FMT_ATR */ "per cluster configurations, Addressed with key format, with below attributes:\n EM120 - compare-bitmap(30b), EM-Key-type(2b)\n EM240(even cluster) - compare-mask-bitmap(30b), EM-Key-type-lsb(2b)\n EM240(odd cluster) - compare-mask-bitmap(30b), 1'b0, EM-Key-type-msb(1b)\n LPM - LPM-key-type(4b)\n TCAM - TCAM-key-type(2b)\n DIRECT - entry-bitmap(4b)\n DIRECT240 - offset(1b), entry-bitmap(4b)",
    /* DHC_MACRO_ENTRY_BANK      */ "",
    /* DHC_MACRO_PHYSICAL_ABK_BANK */ "",
    /* DHC_MACRO_PHYSICAL_ENTRY_BANK */ "",
    /* DISCARD_COUNTER_TAB       */ "Domain Discard Counter to keep track of traffic that is discarded in FR as a result of exceeding threshold.",
    /* DLB_ECMP_EEM_CONFIGURATION */ "EtherType eligibility configuration",
    /* DLB_ECMP_ETHERTYPE_ELIGIBILITY_MAP */ "Ethernet Type Eligiblity table",
    /* DLB_ECMP_FINAL_MEMBERS_QUALITY_MEASURE */ "Final Member Quality Measure.",
    /* DLB_ECMP_FINAL_MEMBERS_QUALITY_MEASURE_PIPE0 */ "Final Member Quality Measure.",
    /* DLB_ECMP_FINAL_MEMBERS_QUALITY_MEASURE_PIPE1 */ "Final Member Quality Measure.",
    /* DLB_ECMP_FINAL_MEMBERS_QUALITY_MEASURE_PIPE2 */ "Final Member Quality Measure.",
    /* DLB_ECMP_FINAL_MEMBERS_QUALITY_MEASURE_PIPE3 */ "Final Member Quality Measure.",
    /* DLB_ECMP_FLOWSET          */ "DLB_ECMP Flow Set Timestamp and Member Information. This table is indexed by a hash of the packet flow. CPU access is for debug purpose only.",
    /* DLB_ECMP_FLOWSET_MEMBER   */ "DLB_ECMP Flow Set Assigned ECMP Member.",
    /* DLB_ECMP_FLOWSET_MEMBER_PIPE0 */ "DLB_ECMP Flow Set Assigned ECMP Member.",
    /* DLB_ECMP_FLOWSET_MEMBER_PIPE1 */ "DLB_ECMP Flow Set Assigned ECMP Member.",
    /* DLB_ECMP_FLOWSET_MEMBER_PIPE2 */ "DLB_ECMP Flow Set Assigned ECMP Member.",
    /* DLB_ECMP_FLOWSET_MEMBER_PIPE3 */ "DLB_ECMP Flow Set Assigned ECMP Member.",
    /* DLB_ECMP_FLOWSET_PIPE0    */ "DLB_ECMP Flow Set Assigned Port Member.",
    /* DLB_ECMP_FLOWSET_PIPE1    */ "DLB_ECMP Flow Set Assigned Port Member.",
    /* DLB_ECMP_FLOWSET_PIPE2    */ "DLB_ECMP Flow Set Assigned Port Member.",
    /* DLB_ECMP_FLOWSET_PIPE3    */ "DLB_ECMP Flow Set Assigned Port Member.",
    /* DLB_ECMP_FLOWSET_TIMESTAMP_PAGE */ "DLB_ECMP Flow Set Page. This table is indexed by a hash of the packet flow. CPU access is for debug purpose only.",
    /* DLB_ECMP_FLOWSET_TIMESTAMP_PAGE_PIPE0 */ "DLB_ECMP Flow Set Page-Number table.",
    /* DLB_ECMP_FLOWSET_TIMESTAMP_PAGE_PIPE1 */ "DLB_ECMP Flow Set Page-Number table.",
    /* DLB_ECMP_FLOWSET_TIMESTAMP_PAGE_PIPE2 */ "DLB_ECMP Flow Set Page-Number table.",
    /* DLB_ECMP_FLOWSET_TIMESTAMP_PAGE_PIPE3 */ "DLB_ECMP Flow Set Page-Number table.",
    /* DLB_ECMP_GLB_QUANTIZE_THRESHOLD */ "DLB_ECMP Quantization Thresholds table.",
    /* DLB_ECMP_GROUP_CONTROL    */ "ECMP DLB Group Control configuration. Indexed by L3_ECMP_GROUP.DLB_ID.",
    /* DLB_ECMP_GROUP_MEMBERSHIP */ "DLB_ECMP Group Membership for each group. Indexed by L3_ECMP_GROUP.DLB_ID.",
    /* DLB_ECMP_GROUP_PORT_TO_MEMBER */ "Member Hardware Link Status",
    /* DLB_ECMP_GROUP_STATS      */ "DLB_ECMP Statistics for each group.",
    /* DLB_ECMP_GROUP_STATS_PIPE0 */ "DLB_ECMP Group Member Statistic.",
    /* DLB_ECMP_GROUP_STATS_PIPE1 */ "DLB_ECMP Group Member Statistic.",
    /* DLB_ECMP_GROUP_STATS_PIPE2 */ "DLB_ECMP Group Member Statistic.",
    /* DLB_ECMP_GROUP_STATS_PIPE3 */ "DLB_ECMP Group Member Statistic.",
    /* DLB_ECMP_HIST_GROUP_LOAD  */ "DLB_ECMP Historical Group loading, CPU access is for debug purpose only.",
    /* DLB_ECMP_HIST_LOAD        */ "DLB_ECMP Historical Loading for each member, CPU access is for debug purpose only. Even read can be a problem, disable DLB_ECMP_QUALITY_CONTROL.ENABLE_AVG_CALC first.",
    /* DLB_ECMP_HIST_QSIZE       */ "DLB_ECMP Historical QSize for each member, CPU access is for debug purpose only.",
    /* DLB_ECMP_INST_GROUP_LOAD  */ "DLB_ECMP Instant Group Loading, CPU access is for debug purpose only.",
    /* DLB_ECMP_INST_LOAD        */ "DLB_ECMP Instant Load for each member, CPU access is for debug purpose only.",
    /* DLB_ECMP_INST_QSIZE       */ "DLB_ECMP Instant Qsize for each member, CPU access is for debug purpose only.",
    /* DLB_ECMP_LINK_CONTROL     */ "Link Status Control.",
    /* DLB_ECMP_MEMBERSHIP_REVERSE_MAP */ "DLB_ECMP Member Group Map",
    /* DLB_ECMP_MEMBER_ATTRIBUTE */ "DLB_ECMP Member Attributes table for next hop. Indexed by DLB_ECMP_FLOWSET.MEMBER_ID.",
    /* DLB_ECMP_MEMBER_STATUS    */ "DLB_ECMP Mmeber Status for each member. CPU access is for debug purpose only.",
    /* DLB_ECMP_MEMBER_SW_STATE  */ "DLB_ECMP SW per member up/down configuration.",
    /* DLB_ECMP_OPTIMAL_CANDIDATE */ "DLB_ECMP Optimal Candidate selection result, CPU access is for debug purpose only.",
    /* DLB_ECMP_OPTIMAL_CANDIDATE_PIPE0 */ "DLB_ECMP Optimal Candidate table.",
    /* DLB_ECMP_OPTIMAL_CANDIDATE_PIPE1 */ "DLB_ECMP Optimal Candidate table.",
    /* DLB_ECMP_OPTIMAL_CANDIDATE_PIPE2 */ "DLB_ECMP Optimal Candidate table.",
    /* DLB_ECMP_OPTIMAL_CANDIDATE_PIPE3 */ "DLB_ECMP Optimal Candidate table.",
    /* DLB_ECMP_PLA_QUANTIZE_THRESHOLD */ "DLB_ECMP Physical Link Accounting Quality Threshold",
    /* DLB_ECMP_PORT_AVG_QUALITY_MEASURE */ "Configuration for averaged load calculation used in ECMP feature.",
    /* DLB_ECMP_PORT_AVG_QUALITY_MEASURE_PIPE0 */ "Configuration for averaged load calculation used in ECMP feature.",
    /* DLB_ECMP_PORT_AVG_QUALITY_MEASURE_PIPE1 */ "Configuration for averaged load calculation used in ECMP feature.",
    /* DLB_ECMP_PORT_AVG_QUALITY_MEASURE_PIPE2 */ "Configuration for averaged load calculation used in ECMP feature.",
    /* DLB_ECMP_PORT_AVG_QUALITY_MEASURE_PIPE3 */ "Configuration for averaged load calculation used in ECMP feature.",
    /* DLB_ECMP_PORT_INST_QUALITY_MEASURE */ "Configuration for instant load calculation used in ECMP feature.",
    /* DLB_ECMP_PORT_INST_QUALITY_MEASURE_PIPE0 */ "Configuration for instant load calculation used in ECMP feature.",
    /* DLB_ECMP_PORT_INST_QUALITY_MEASURE_PIPE1 */ "Configuration for instant load calculation used in ECMP feature.",
    /* DLB_ECMP_PORT_INST_QUALITY_MEASURE_PIPE2 */ "Configuration for instant load calculation used in ECMP feature.",
    /* DLB_ECMP_PORT_INST_QUALITY_MEASURE_PIPE3 */ "Configuration for instant load calculation used in ECMP feature.",
    /* DLB_ECMP_PORT_QUALITY_MAPPING */ "DLB_ECMP Quality Mapping.",
    /* DLB_ECMP_PORT_QUALITY_UPDATE_MEASURE_CONTROL */ "DLB Port Quality Update Measure Control.",
    /* DLB_ECMP_PORT_QUALITY_UPDATE_MEASURE_CONTROL_PIPE0 */ "DLB Port Quality Update Measure Control.",
    /* DLB_ECMP_PORT_QUALITY_UPDATE_MEASURE_CONTROL_PIPE1 */ "DLB Port Quality Update Measure Control.",
    /* DLB_ECMP_PORT_QUALITY_UPDATE_MEASURE_CONTROL_PIPE2 */ "DLB Port Quality Update Measure Control.",
    /* DLB_ECMP_PORT_QUALITY_UPDATE_MEASURE_CONTROL_PIPE3 */ "DLB Port Quality Update Measure Control.",
    /* DLB_ECMP_PORT_STATE       */ "Member Hardware Link Status",
    /* DLB_ECMP_QUALITY_CONTROL  */ "DLB_ECMP Quality Control Configuration. Indexed by Member_ID.",
    /* DLB_ECMP_QUALITY_MAPPING  */ "DLB_ECMP Quality Mapping table.",
    /* DLB_ECMP_QUALITY_RESULT   */ "DLB_ECMP Quality Result for each member. CPU access is for debug purpose only.",
    /* DLB_ECMP_QUANTIZED_AVG_QUALITY_MEASURE */ "DLB Flow Set Page.",
    /* DLB_ECMP_QUANTIZED_AVG_QUALITY_MEASURE_PIPE0 */ "DLB Flow Set Page.",
    /* DLB_ECMP_QUANTIZED_AVG_QUALITY_MEASURE_PIPE1 */ "DLB Flow Set Page.",
    /* DLB_ECMP_QUANTIZED_AVG_QUALITY_MEASURE_PIPE2 */ "DLB Flow Set Page.",
    /* DLB_ECMP_QUANTIZED_AVG_QUALITY_MEASURE_PIPE3 */ "DLB Flow Set Page.",
    /* DLB_ECMP_QUANTIZE_CONTROL */ "Configuration for Credit metric quantization calculation. Software access to this register is only possible when QUALITY_CONTROL.AVERAGE_CALCULATION_ENABLE is cleared.",
    /* DLB_ECMP_VLA_EXPECTED_LOADING_THRESHOLD */ "Virtual link accounting expected loading threshold",
    /* DLB_ECMP_VLA_MEMBER_IMBALANCE_THRESHOLD */ "DLB_ECMP Virtual Link Accounting Profile",
    /* DLB_ECMP_VLA_QUALITY_MEASURE_CONTROL */ "Virtual link accounting configuration table",
    /* DLB_HGT_ETHERTYPE_ELIGIBILITY_MAP */ "Ethernet Type Eligiblity table",
    /* DLB_HGT_FLOWSET           */ "DLB_HGT Flow Set Timestamp and Member Information. This table is indexed by a hash of the packet flow. CPU access is for debug purpose only.",
    /* DLB_HGT_FLOWSET_PORT      */ "DLB_HGT Flow Set Assigned Member.",
    /* DLB_HGT_FLOWSET_PORT_X    */ "DLB_HGT Flow Set Assigned Member.",
    /* DLB_HGT_FLOWSET_PORT_Y    */ "DLB_HGT Flow Set Assigned Member.",
    /* DLB_HGT_FLOWSET_TIMESTAMP */ "DLB_HGT Flow Set Observation Timestamp.",
    /* DLB_HGT_FLOWSET_TIMESTAMP_PAGE */ "DLB_HGT Flow Set Page-Number table.",
    /* DLB_HGT_FLOWSET_TIMESTAMP_PAGE_X */ "DLB_HGT Flow Set Page-Number table.",
    /* DLB_HGT_FLOWSET_TIMESTAMP_PAGE_Y */ "DLB_HGT Flow Set Page-Number table.",
    /* DLB_HGT_FLOWSET_TIMESTAMP_X */ "DLB_HGT Flow Set Observation Timestamp.",
    /* DLB_HGT_FLOWSET_TIMESTAMP_Y */ "DLB_HGT Flow Set Observation Timestamp.",
    /* DLB_HGT_FLOWSET_X         */ "DLB_HGT Flow Set Assigned Member.",
    /* DLB_HGT_FLOWSET_Y         */ "DLB_HGT Flow Set Assigned Member.",
    /* DLB_HGT_GLB_QUANTIZE_THRESHOLDS */ "DLB_HGT Quantization Thresholds table.",
    /* DLB_HGT_GROUP_CONTROL     */ "DLB_HGT Group Parameters.",
    /* DLB_HGT_GROUP_CONTROL_X   */ "DLB_HGT Group Parameters.",
    /* DLB_HGT_GROUP_CONTROL_Y   */ "DLB_HGT Group Parameters.",
    /* DLB_HGT_GROUP_MEMBERSHIP  */ "DLB_HGT Group Member Bitmap.",
    /* DLB_HGT_GROUP_STATS       */ "DLB_HGT Group Member Bitmap.",
    /* DLB_HGT_GROUP_STATS_X     */ "DLB_HGT Group Member Bitmap.",
    /* DLB_HGT_GROUP_STATS_Y     */ "DLB_HGT Group Member Bitmap.",
    /* DLB_HGT_HIST_LOAD         */ "DLB_HGT Historical Load for each member, CPU access is for debug purpose only.",
    /* DLB_HGT_INST_LOAD         */ "DLB HGT Instant Load for each member, contains the queue size and byte_count. CPU access is for debug purpose only.",
    /* DLB_HGT_LAG_EEM_CONFIGURATION */ "EtherType eligibility configuration",
    /* DLB_HGT_LAG_ETHERTYPE_ELIGIBILITY_MAP */ "EtherType based DLB Eligibility Configuration",
    /* DLB_HGT_LAG_FINAL_MEMBERS_QUALITY_MEASURE */ "Final Member Quality Measure.",
    /* DLB_HGT_LAG_FINAL_MEMBERS_QUALITY_MEASURE_PIPE0 */ "Final Member Quality Measure.",
    /* DLB_HGT_LAG_FINAL_MEMBERS_QUALITY_MEASURE_PIPE1 */ "Final Member Quality Measure.",
    /* DLB_HGT_LAG_FINAL_MEMBERS_QUALITY_MEASURE_PIPE2 */ "Final Member Quality Measure.",
    /* DLB_HGT_LAG_FINAL_MEMBERS_QUALITY_MEASURE_PIPE3 */ "Final Member Quality Measure.",
    /* DLB_HGT_LAG_FLOWSET       */ "DLB Flow Set Assigned Port Member.",
    /* DLB_HGT_LAG_FLOWSET_PIPE0 */ "DLB Flow Set Assigned Port Member.",
    /* DLB_HGT_LAG_FLOWSET_PIPE1 */ "DLB Flow Set Assigned Port Member.",
    /* DLB_HGT_LAG_FLOWSET_PIPE2 */ "DLB Flow Set Assigned Port Member.",
    /* DLB_HGT_LAG_FLOWSET_PIPE3 */ "DLB Flow Set Assigned Port Member.",
    /* DLB_HGT_LAG_FLOWSET_TIMESTAMP_PAGE */ "DLB Flow Set Page-Number table.",
    /* DLB_HGT_LAG_FLOWSET_TIMESTAMP_PAGE_PIPE0 */ "DLB Flow Set Page-Number table.",
    /* DLB_HGT_LAG_FLOWSET_TIMESTAMP_PAGE_PIPE1 */ "DLB Flow Set Page-Number table.",
    /* DLB_HGT_LAG_FLOWSET_TIMESTAMP_PAGE_PIPE2 */ "DLB Flow Set Page-Number table.",
    /* DLB_HGT_LAG_FLOWSET_TIMESTAMP_PAGE_PIPE3 */ "DLB Flow Set Page-Number table.",
    /* DLB_HGT_LAG_GLB_QUANTIZE_THRESHOLD */ "DLB Quantization Thresholds table.",
    /* DLB_HGT_LAG_GROUP_CONTROL */ "DLB Group Parameters.",
    /* DLB_HGT_LAG_GROUP_MEMBERSHIP */ "DLB Group Member Bitmap.",
    /* DLB_HGT_LAG_GROUP_STATS   */ "DLB Group Member Statistic.",
    /* DLB_HGT_LAG_GROUP_STATS_PIPE0 */ "DLB Group Member Statistic.",
    /* DLB_HGT_LAG_GROUP_STATS_PIPE1 */ "DLB Group Member Statistic.",
    /* DLB_HGT_LAG_GROUP_STATS_PIPE2 */ "DLB Group Member Statistic.",
    /* DLB_HGT_LAG_GROUP_STATS_PIPE3 */ "DLB Group Member Statistic.",
    /* DLB_HGT_LAG_LINK_CONTROL  */ "Link Status Control.",
    /* DLB_HGT_LAG_OPTIMAL_CANDIDATE */ "DLB Optimal Candidate table.",
    /* DLB_HGT_LAG_OPTIMAL_CANDIDATE_PIPE0 */ "DLB Optimal Candidate table.",
    /* DLB_HGT_LAG_OPTIMAL_CANDIDATE_PIPE1 */ "DLB Optimal Candidate table.",
    /* DLB_HGT_LAG_OPTIMAL_CANDIDATE_PIPE2 */ "DLB Optimal Candidate table.",
    /* DLB_HGT_LAG_OPTIMAL_CANDIDATE_PIPE3 */ "DLB Optimal Candidate table.",
    /* DLB_HGT_LAG_PORT_AVG_QUALITY_MEASURE */ "Configuration for averaged load calculation.",
    /* DLB_HGT_LAG_PORT_AVG_QUALITY_MEASURE_PIPE0 */ "Configuration for averaged load calculation.",
    /* DLB_HGT_LAG_PORT_AVG_QUALITY_MEASURE_PIPE1 */ "Configuration for averaged load calculation.",
    /* DLB_HGT_LAG_PORT_AVG_QUALITY_MEASURE_PIPE2 */ "Configuration for averaged load calculation.",
    /* DLB_HGT_LAG_PORT_AVG_QUALITY_MEASURE_PIPE3 */ "Configuration for averaged load calculation.",
    /* DLB_HGT_LAG_PORT_INST_QUALITY_MEASURE */ "Configuration for instant load calculation.",
    /* DLB_HGT_LAG_PORT_INST_QUALITY_MEASURE_PIPE0 */ "Configuration for instant load calculation.",
    /* DLB_HGT_LAG_PORT_INST_QUALITY_MEASURE_PIPE1 */ "Configuration for instant load calculation.",
    /* DLB_HGT_LAG_PORT_INST_QUALITY_MEASURE_PIPE2 */ "Configuration for instant load calculation.",
    /* DLB_HGT_LAG_PORT_INST_QUALITY_MEASURE_PIPE3 */ "Configuration for instant load calculation.",
    /* DLB_HGT_LAG_PORT_QUALITY_MAPPING */ "DLB Members Quality Mapping.",
    /* DLB_HGT_LAG_PORT_QUALITY_UPDATE_MEASURE_CONTROL */ "DLB Port Quality Update Measure Control.",
    /* DLB_HGT_LAG_PORT_QUALITY_UPDATE_MEASURE_CONTROL_PIPE0 */ "DLB Port Quality Update Measure Control.",
    /* DLB_HGT_LAG_PORT_QUALITY_UPDATE_MEASURE_CONTROL_PIPE1 */ "DLB Port Quality Update Measure Control.",
    /* DLB_HGT_LAG_PORT_QUALITY_UPDATE_MEASURE_CONTROL_PIPE2 */ "DLB Port Quality Update Measure Control.",
    /* DLB_HGT_LAG_PORT_QUALITY_UPDATE_MEASURE_CONTROL_PIPE3 */ "DLB Port Quality Update Measure Control.",
    /* DLB_HGT_LAG_PORT_STATE    */ "Member Hardware Link Status",
    /* DLB_HGT_LAG_QUANTIZED_AVG_QUALITY_MEASURE */ "DLB Flow Set Page.",
    /* DLB_HGT_LAG_QUANTIZED_AVG_QUALITY_MEASURE_PIPE0 */ "DLB Flow Set Page.",
    /* DLB_HGT_LAG_QUANTIZED_AVG_QUALITY_MEASURE_PIPE1 */ "DLB Flow Set Page.",
    /* DLB_HGT_LAG_QUANTIZED_AVG_QUALITY_MEASURE_PIPE2 */ "DLB Flow Set Page.",
    /* DLB_HGT_LAG_QUANTIZED_AVG_QUALITY_MEASURE_PIPE3 */ "DLB Flow Set Page.",
    /* DLB_HGT_LAG_QUANTIZE_CONTROL */ "Configuration for Credit metric quantization calculation. Software access to this register is only possible when QUALITY_CONTROL.AVERAGE_CALCULATION_ENABLE is cleared.",
    /* DLB_HGT_LINK_CONTROL      */ "DLB_HGT Software Link Status Control.",
    /* DLB_HGT_MEMBER_ATTRIBUTE  */ "DLB_HGT Member Attribute table for port number. Indexed by DLB_HGT_FLOWSET.MEMBER_ID.",
    /* DLB_HGT_MEMBER_HW_STATE   */ "Member Hardware Link Status",
    /* DLB_HGT_MEMBER_STATUS     */ "DLB_HGT Member Status for each member. CPU access is for debug purpose only.",
    /* DLB_HGT_MEMBER_SW_STATE   */ "DLB_HGT SW per member up/down configuration.",
    /* DLB_HGT_OPTIMAL_CANDIDATE */ "DLB_HGT Optimal Candidate table.",
    /* DLB_HGT_OPTIMAL_CANDIDATE_X */ "DLB_HGT Optimal Candidate table.",
    /* DLB_HGT_OPTIMAL_CANDIDATE_Y */ "DLB_HGT Optimal Candidate table.",
    /* DLB_HGT_PLA_QUANTIZE_THRESHOLD */ "DLB_HGT Quantization Thresholds table.",
    /* DLB_HGT_PORT_MEMBER_MAP   */ "DLB_HGT Port number to Member ID mapping table.",
    /* DLB_HGT_PORT_QUALITY_MAPPING */ "DLB_HGT Quality Mapping.",
    /* DLB_HGT_PORT_STATE        */ "DLB_HGT Hardware Link State.",
    /* DLB_HGT_QUALITY_CONTROL   */ "DLB_HGT Per member configuration. Indexed by Member_ID.",
    /* DLB_HGT_QUALITY_MAPPING   */ "DLB_HGT Quality Mapping table. Contains member quality for each member profile.",
    /* DLB_HGT_QUALITY_RESULT    */ "DLB_HGT Quality Result for each member. CPU access is for debug purpose only.",
    /* DLB_HGT_QUANTIZE_THRESHOLD */ "DLB_HGT Quantization Thresholds table.",
    /* DLB_HGT_RR_SELECTION_POINTER */ "Indicates the most recent selected member for each DLB group.",
    /* DLB_LAG_ETHERTYPE_ELIGIBILITY_MAP */ "Ethernet Type Eligiblity table",
    /* DLB_LAG_FLOWSET           */ "DLB_LAG Flow Set Timestamp and Member Information. This table is indexed by a hash of the packet flow. CPU access is for debug purpose only.",
    /* DLB_LAG_FLOWSET_TIMESTAMP_PAGE */ "DLB_LAG Flow Set Page. This table is indexed by a hash of the packet flow. CPU access is for debug purpose only.",
    /* DLB_LAG_GROUP_CONTROL     */ "LAG DLB Group Control configuration.",
    /* DLB_LAG_GROUP_MEMBERSHIP  */ "DLB_LAG Group Membership for each group.",
    /* DLB_LAG_GROUP_STATS       */ "DLB_LAG Statistics for each group.",
    /* DLB_LAG_HIST_GROUP_LOAD   */ "DLB_LAG Historical Group Load, CPU access is for debug purpose only.",
    /* DLB_LAG_HIST_LOAD         */ "DLB_LAG Historical Load for each member, CPU access is for debug purpose only. Even read can be a problem, disable DLB_LAG_QUALITY_CONTROL.ENABLE_AVG_CALC first.",
    /* DLB_LAG_HIST_QSIZE        */ "DLB_LAG Historical QSIZE for each member, CPU access is for debug purpose only.",
    /* DLB_LAG_INST_GROUP_LOAD   */ "DLB_LAG Instant Group Load, CPU access is for debug purpose only.",
    /* DLB_LAG_INST_LOAD         */ "DLB_LAG Instant Load for each member, CPU access is for debug purpose only.",
    /* DLB_LAG_INST_QSIZE        */ "DLB_LAG Instant Queue Size for each member, CPU access is for debug purpose only.",
    /* DLB_LAG_MEMBERSHIP_REVERSE_MAP */ "DLB_LAG Member Group Map.",
    /* DLB_LAG_MEMBER_ATTRIBUTE  */ "DLB_LAG Member Attribute table for modid, portid. Indexed by DLB_LAG_FLOWSET.MEMBER_ID.",
    /* DLB_LAG_MEMBER_STATUS     */ "DLB_LAG Member Status for each member. CPU access is for debug purpose only.",
    /* DLB_LAG_MEMBER_SW_STATE   */ "DLB_LAG SW per member up/down configuration.",
    /* DLB_LAG_OPTIMAL_CANDIDATE */ "DLB_LAG Optimal Candidate selection result, CPU access is for debug purpose only.",
    /* DLB_LAG_PLA_QUANTIZE_THRESHOLD */ "DLB_LAG Physical Link Accounting Quality Threshold",
    /* DLB_LAG_QUALITY_CONTROL   */ "DLB_LAG Quality Control. Indexed by Member_ID.",
    /* DLB_LAG_QUALITY_MAPPING   */ "DLB_LAG Quality mapping table.",
    /* DLB_LAG_QUALITY_RESULT    */ "DLB_LAG Quality Result for each member. CPU access is for debug purpose only.",
    /* DLB_LAG_VLA_EXPECTED_LOADING_THRESHOLD */ "Virtual link accounting expected loading threshold",
    /* DLB_LAG_VLA_MEMBER_IMBALANCE_THRESHOLD */ "DLB_LAG Virtual Link Accounting Threshold Profile .",
    /* DLB_LAG_VLA_QUALITY_MEASURE_CONTROL */ "Virtual link accounting configuration table",
    /* DMT_MEM                   */ "Domain number lookup for unicast packets used in flow control module. This table is init to all zeros by hw init.",
    /* DQM_BD                    */ "Bundle descriptor memory for DQM-BDM.",
    /* DQM_BDB_LINK_LIST         */ "BDBLL - BDB link list",
    /* DQM_BUNDLE_DESCRIPTOR_MEMORY */ "Full Multicast User Count\n Number of duplications of the FullMulticast Dbuffs (UserCnt+1).",
    /* DQM_DEQ_READ_WEIGHT       */ "DEQ Read Weight\n\n Access using VOQ.Queue-Type",
    /* DQM_MEM_100000            */ "INTERNAL",
    /* DQM_MEM_200000            */ "INTERNAL",
    /* DQM_MEM_300000            */ "INTERNAL",
    /* DQM_MEM_800000            */ "INTERNAL",
    /* DQM_MEM_C00000            */ "INTERNAL",
    /* DQM_QUEUE_DATA_MEMORY     */ "QDM",
    /* DQM_TX_BUNDLE_BUFFER_FIFOS_MEMORY */ "INTERNAL",
    /* DQM_TX_BUNDLE_DESCRIPTOR_FIFOS_MEMORY */ "INTERNAL",
    /* DRCA_DWF                  */ "Data write FIFO",
    /* DRCA_READ_DATA_FIFO       */ "DRC Read data  Memory",
    /* DRCA_RXI_MEM              */ "DRC RXI Memory",
    /* DRCA_WR_CRC_FIFO          */ "write CRC FIFO",
    /* DRCB_DWF                  */ "Data write FIFO",
    /* DRCB_READ_DATA_FIFO       */ "DRC Read data  Memory",
    /* DRCB_RXI_MEM              */ "DRC RXI Memory",
    /* DRCB_WR_CRC_FIFO          */ "write CRC FIFO",
    /* DRCC_DWF                  */ "Data write FIFO",
    /* DRCC_READ_DATA_FIFO       */ "DRC Read data  Memory",
    /* DRCC_RXI_MEM              */ "DRC RXI Memory",
    /* DRCC_WR_CRC_FIFO          */ "write CRC FIFO",
    /* DRCD_DWF                  */ "Data write FIFO",
    /* DRCD_RXI_MEM              */ "DRC RXI Memory",
    /* DRCD_WR_CRC_FIFO          */ "write CRC FIFO",
    /* DRCE_DWF                  */ "Data write FIFO",
    /* DRCE_RXI_MEM              */ "DRC RXI Memory",
    /* DRCE_WR_CRC_FIFO          */ "write CRC FIFO",
    /* DRCF_DWF                  */ "Data write FIFO",
    /* DRCF_RXI_MEM              */ "DRC RXI Memory",
    /* DRCF_WR_CRC_FIFO          */ "write CRC FIFO",
    /* DRCG_DWF                  */ "Data write FIFO",
    /* DRCG_RXI_MEM              */ "DRC RXI Memory",
    /* DRCG_WR_CRC_FIFO          */ "write CRC FIFO",
    /* DRCH_DWF                  */ "Data write FIFO",
    /* DRCH_RXI_MEM              */ "DRC RXI Memory",
    /* DRCH_WR_CRC_FIFO          */ "write CRC FIFO",
    /* DROP_VECTOR_MASK          */ "This is used to compress drop reasons into a 8-bit drop status indicator for IFP.",
    /* DSCP_TABLE                */ "Diff Serv Code Point Table",
    /* DST_COMPRESSION           */ "Compresses the IPv6 SIPs. Remaps IPv4 SIPs.",
    /* DST_COMPRESSION_DATA_ONLY */ "Compresses the IPv6 SIPs. Remaps IPv4 SIPs.",
    /* DST_COMPRESSION_DATA_ONLY_PIPE0 */ "Compresses the IPv6 SIPs. Remaps IPv4 SIPs.",
    /* DST_COMPRESSION_DATA_ONLY_PIPE1 */ "Compresses the IPv6 SIPs. Remaps IPv4 SIPs.",
    /* DST_COMPRESSION_DATA_ONLY_PIPE2 */ "Compresses the IPv6 SIPs. Remaps IPv4 SIPs.",
    /* DST_COMPRESSION_DATA_ONLY_PIPE3 */ "Compresses the IPv6 SIPs. Remaps IPv4 SIPs.",
    /* DST_COMPRESSION_PIPE0     */ "Compresses the IPv6 SIPs. Remaps IPv4 SIPs.",
    /* DST_COMPRESSION_PIPE1     */ "Compresses the IPv6 SIPs. Remaps IPv4 SIPs.",
    /* DST_COMPRESSION_PIPE2     */ "Compresses the IPv6 SIPs. Remaps IPv4 SIPs.",
    /* DST_COMPRESSION_PIPE3     */ "Compresses the IPv6 SIPs. Remaps IPv4 SIPs.",
    /* DST_COMPRESSION_TCAM_ONLY */ "Compresses the IPv6 SIPs. Remaps IPv4 SIPs.",
    /* DST_COMPRESSION_TCAM_ONLY_PIPE0 */ "Compresses the IPv6 SIPs. Remaps IPv4 SIPs.",
    /* DST_COMPRESSION_TCAM_ONLY_PIPE1 */ "Compresses the IPv6 SIPs. Remaps IPv4 SIPs.",
    /* DST_COMPRESSION_TCAM_ONLY_PIPE2 */ "Compresses the IPv6 SIPs. Remaps IPv4 SIPs.",
    /* DST_COMPRESSION_TCAM_ONLY_PIPE3 */ "Compresses the IPv6 SIPs. Remaps IPv4 SIPs.",
    /* DT_MEM                    */ "Domain Thresholds Table to hold the threshold values associated with the 264 unicast domain counters and 2 multicast domain counters. Every domain number in double mode uses up 2 entries in this table. Only even domain number can be configured to be in double mode. This table is indexed by Domain Number[7:1]. Domain Number[0] and method bit are used to determine which thresholds to apply.",
    /* E2E_HOL_STATUS            */ "Remote Module End-to-End HOL Status Table",
    /* E2E_HOL_STATUS_1          */ "Remote Module End-to-End HOL Status Table",
    /* ECGM_FDCM                 */ "Packet descriptors per Interface",
    /* ECGM_FDCMAX               */ "DCM-MAX  - maximum packet descriptors per Interface.",
    /* ECGM_FDCT_TABLE           */ "PD's and DB's thresholds per interface table. The index to this table is INTERFACE-PROFILE(3),PRIORITY(1). The result is set of thresholds corresponding to per interface resources.",
    /* ECGM_FQSM                 */ "FQSM  - DB'S per Interface Memory.",
    /* ECGM_FQSMAX               */ "FQSM-MAX  -  maximum data buffers per interface Memory.",
    /* ECGM_PDCM                 */ "Unicast and Multicast packet descriptors counters per OTM-Port Memory.",
    /* ECGM_PDCMAX               */ "PDCM-MAX  - maximum unicast and multicast packet descriptors per OTM-Port Memory.",
    /* ECGM_PDCT_TABLE           */ "This memory defines per OTM-Port-Profile the thresholds related to packet descriptors tests in CGM.",
    /* ECGM_PQSM                 */ "Unicast and Multicast consumed data buffers counters per OTM-Port.",
    /* ECGM_PQSMAX               */ "PQSM-MAX  - maximum unicast and multicast DB's per OTM-Port Memory.",
    /* ECGM_PQST_TABLE           */ "Data buffers thresholds per Otm-Port-Profile table.\n This memory defines per OTM-Port-Profile the thresholds related to data buffers tests per OTM-Port in CGM.",
    /* ECGM_QDCM                 */ "Packet descriptors per queue Memory.",
    /* ECGM_QDCMAX               */ "DCM-MAX  - maximum packet descriptors per queue Memory.",
    /* ECGM_QDCT_TABLE           */ "PD's thresholds per queue table. The index to this table is CGM-PORT-PROFILE(4),Egress-Tc(3). The result is set of thresholds corresponding to per queue resources.",
    /* ECGM_QQSM                 */ "QQSM  - DB'S per Queue Memory.",
    /* ECGM_QQSMAX               */ "QQSM-MAX  -  maximum data buffers per queue Memory.",
    /* ECGM_QQST_TABLE           */ "Data buffers thresholds per queue table.",
    /* ECI_AUTO_DOC_NAME_48      */ "INTERNAL",
    /* ECI_CMDMEM                */ "",
    /* ECI_DATA_MEM              */ "",
    /* ECI_EGR_MCT               */ "Multicast table",
    /* ECI_EGR_PORT_MAP          */ "Mappoing of FTMH output port to channel ID and framer interface number.",
    /* ECI_MBU_MEM               */ "INTERNAL",
    /* ECI_MEM_0                 */ "",
    /* ECI_MEM_1                 */ "",
    /* ECI_MEM_2                 */ "",
    /* ECI_MEM_3                 */ "",
    /* ECI_MEM_4                 */ "",
    /* ECI_MEM_00010000          */ "INTERNAL",
    /* ECI_MEM_00020000          */ "INTERNAL",
    /* ECI_MEM_00030000          */ "INTERNAL",
    /* ECI_MEM_00040000          */ "INTERNAL",
    /* ECI_MEM_00050000          */ "INTERNAL",
    /* ECI_MEM_00060000          */ "INTERNAL",
    /* ECI_MEM_00070000          */ "INTERNAL",
    /* ECI_MEM_0_SHDW            */ "",
    /* ECI_MEM_1_SHDW            */ "",
    /* ECI_MEM_2_SHDW            */ "",
    /* ECI_MEM_B0000             */ "INTERNAL",
    /* ECI_MEM_C0000             */ "INTERNAL",
    /* ECI_TDM_CONFIG            */ "TDM configuration for each TDM context.\n                   The index to this table is 80xframerNdx + channel_ID",
    /* ECI_ZIKARON_MBU           */ "INTERNAL",
    /* ECMP_DLB_CONTROL          */ "DLB Enables for ECMP.",
    /* ECONTEXT_ALLOCBUFFSCNT    */ "This is the Enqueue Context Working ALLOCBUFFSCNT database",
    /* ECONTEXT_INFLIGHTBUFFCNT  */ "This is the Enqueue Context Working INFLIGHTBUFFCNT database",
    /* ECONTEXT_TAIL_LLA         */ "This is the Enqueue Context Working TAIL_LLA database",
    /* EDB_1DBG_B                */ "FORCE SAF control",
    /* EDB_AC_ENTRY_WITH_DATA_FORMAT */ "Encapsulation-Stack AC Format",
    /* EDB_AC_HALF_ENTRY_FORMAT  */ "Encapsulation-Stack AC Format",
    /* EDB_DATA_FORMAT           */ "Encapsulation-Stack Data Format",
    /* EDB_DBF                   */ "Data Buffers EGQ",
    /* EDB_DBF_0                 */ "Data Buffers EGQ0",
    /* EDB_DBF_1                 */ "Data Buffers EGQ1, used in EGQ0 in clear channel mode",
    /* EDB_EEDB_BANK             */ "The encapsulation data is maintained in an Egress Encapsulation Database (EEDB)that is specific per egress device. This database contains tunneling and link layer information.\n                   The EEDB is built from 16 banks, each of them of 2K entries. Each entry if pointed by an Out-LIF or EEI.  Every address (tables row) may include one or two entries.",
    /* EDB_EEDB_MAP_TO_PROTECTION_PTR */ "Specify per bank (one of 22 lower banks) if it supports protection pointer functionality. Maps each bank to where its protection pointer is located & holds enable for this feature for the specified bank.",
    /* EDB_EEDB_TOP_BANK         */ "The top 8 banks of the EEDB have 1k entries each.\n                   TopBank3..0 - are equivalent to Bank22\n                   TopBank7..4 - are equivalent to Bank23",
    /* EDB_ESEM_0_ACDT_AUX       */ "INTERNAL",
    /* EDB_ESEM_0_ACDT_H         */ "INTERNAL",
    /* EDB_ESEM_0_KEYT_AUX       */ "INTERNAL",
    /* EDB_ESEM_0_KEYT_PLDT_H    */ "INTERNAL",
    /* EDB_ESEM_0_MAA_CAM        */ "INTERNAL",
    /* EDB_ESEM_0_MAA_CAM_PAYLOAD */ "INTERNAL",
    /* EDB_ESEM_0_MANAGEMENT_MEMORY_H */ "INTERNAL",
    /* EDB_ESEM_0_MANAGEMENT_REQUEST */ "Management requests",
    /* EDB_ESEM_0_PLDT_AUX       */ "INTERNAL",
    /* EDB_ESEM_0_STEP_TABLE     */ "Step Table\n                   (The Item bit ordering matches must emc_include.v)",
    /* EDB_ESEM_1_ACDT_AUX       */ "INTERNAL",
    /* EDB_ESEM_1_ACDT_H         */ "INTERNAL",
    /* EDB_ESEM_1_KEYT_AUX       */ "INTERNAL",
    /* EDB_ESEM_1_KEYT_PLDT_H    */ "INTERNAL",
    /* EDB_ESEM_1_MAA_CAM        */ "INTERNAL",
    /* EDB_ESEM_1_MAA_CAM_PAYLOAD */ "INTERNAL",
    /* EDB_ESEM_1_MANAGEMENT_MEMORY_H */ "INTERNAL",
    /* EDB_ESEM_1_MANAGEMENT_REQUEST */ "Management requests",
    /* EDB_ESEM_1_PLDT_AUX       */ "INTERNAL",
    /* EDB_ESEM_1_STEP_TABLE     */ "Step Table\n                   (The Item bit ordering matches must emc_include.v)",
    /* EDB_ESEM_ACDT_AUX         */ "INTERNAL",
    /* EDB_ESEM_ACDT_H           */ "INTERNAL",
    /* EDB_ESEM_KEYT_AUX         */ "INTERNAL",
    /* EDB_ESEM_KEYT_PLDT_H      */ "INTERNAL",
    /* EDB_ESEM_MAA_CAM          */ "INTERNAL",
    /* EDB_ESEM_MAA_CAM_PAYLOAD  */ "INTERNAL",
    /* EDB_ESEM_MANAGEMENT_MEMORY_H */ "INTERNAL",
    /* EDB_ESEM_MANAGEMENT_REQUEST */ "Management requests",
    /* EDB_ESEM_PLDT_AUX         */ "INTERNAL",
    /* EDB_ESEM_STEP_TABLE       */ "Step Table\n                   (The Item bit ordering matches must emc_include.v)",
    /* EDB_FBM                   */ "Represents the dynamic status of each bacnk of the EGQ 1K Buffers. Each entry represents a bitmap of 32 buffers indicating, per buffer, whether it is free or occupied.",
    /* EDB_GLEM_ACDT_AUX         */ "INTERNAL",
    /* EDB_GLEM_ACDT_H           */ "INTERNAL",
    /* EDB_GLEM_ACDT_MASTER_H    */ "INTERNAL",
    /* EDB_GLEM_ACDT_SLAVE_H     */ "INTERNAL",
    /* EDB_GLEM_KEYT_AUX         */ "INTERNAL",
    /* EDB_GLEM_KEYT_PLDT_H      */ "INTERNAL",
    /* EDB_GLEM_MAA_CAM          */ "INTERNAL",
    /* EDB_GLEM_MAA_CAM_PAYLOAD  */ "INTERNAL",
    /* EDB_GLEM_MANAGEMENT_MEMORY_H */ "INTERNAL",
    /* EDB_GLEM_MANAGEMENT_REQUEST */ "Management requests",
    /* EDB_GLEM_PLDT_AUX         */ "INTERNAL",
    /* EDB_GLEM_STEP_TABLE       */ "Step Table\n                   (The Item bit ordering matches must emc_include.v)",
    /* EDB_IPV4_TUNNEL_FORMAT    */ "Encapsulation-Stack IPv4 Tunnel Format",
    /* EDB_LINK_LAYER_OR_ARP_FORMAT */ "Encapsulation-Stack Link Layer or ARP Format",
    /* EDB_LINK_LAYER_OR_ARP_NEW_FORMAT */ "Encapsulation-Stack Link Layer or New ARP Format",
    /* EDB_MAP_OUTLIF_TO_DSP     */ "Egress Replication Database Entry Formats 6 and 7, generate up to three copies, each with unique OutLIF. The PP-DSP is generated by mapping the OutLIF through this table.\n                   The index to the table is OutLif (18 bits) and the result is PP-DSP corresponding to the OutLif.",
    /* EDB_MPLS_POP_FORMAT       */ "Encapsulation-Stack MPLS Pop Format",
    /* EDB_MPLS_PUSH_FORMAT      */ "Encapsulation-Stack MPLS Push Format",
    /* EDB_MPLS_SWAP_FORMAT      */ "Encapsulation-Stack MPLS Swap Format",
    /* EDB_OUTRIF_TABLE          */ "This table holds the outrif information instead of keeping it in the eedb.\n The data that was omitted is: Drop  outlif-profile  oam-lif-set  vsi  arp-pointer-valid  arp-pointer.\n Instead we use RifProfileTable (index taken from this table) to establish: drop (1)  outlif-profile (6)  oam-lif-set (1).\n VSI = 0,RIF14:0 and ARP-pointer is never valid.\n The system can support upto 32k outrifs, in a resolution of 4k (4k, 8k, 12k...).\n Each row in the table holds 8 outrif-entries. an outrif-entry holds ...",
    /* EDB_OUT_RIF_FORMAT        */ "Encapsulation-Stack Out-RIF Format",
    /* EDB_PROTECTION_ENTRY      */ "EEDB format when used to hold 15 bits protection pointers to the ProtectionPtrTable. There are 4 Pointers per row, the relevant one is selected according to outlif2:1.\n                   For (Coupled mode & wide ees entry, i.e the outlif pointed to mpls or ip): bit14 in the protection pointer must be equal to the data in ProtectionPtrTable1'b0, protection-ptr13:0 in order to PASS the packet.\n                   For (Coupled mode + half entry) OR* De-Coupled mode + full entry): all 15 bits are the ...",
    /* EDB_RIF_PROFILE_TABLE     */ "RifProfileTable (index taken from OutrifTable) to establish: drop (1)  outlif-profile (6)  oam-lif-set (1).",
    /* EDB_TRILL_FORMAT_FULL_ENTRY */ "Encapsulation-Stack TRILL Full Entry Format",
    /* EDB_TRILL_FORMAT_HALF_ENTRY */ "Encapsulation-Stack TRILL Half Entry Format",
    /* EDC_LOOKUP                */ "This database contains the EDC Lookup Table.",
    /* EFFECTIVE_PHB_SELECT      */ "Provides PHB select",
    /* EFP_COUNTER_TABLE         */ "COUNTER TABLE FOR THE EFP",
    /* EFP_COUNTER_TABLE_PIPE0   */ "Counter Table for the EFP. It will count the number of packets and bytes for those packets when directed to do so by an EFP action.",
    /* EFP_COUNTER_TABLE_PIPE1   */ "Counter Table for the EFP. It will count the number of packets and bytes for those packets when directed to do so by an EFP action.",
    /* EFP_COUNTER_TABLE_PIPE2   */ "Counter Table for the EFP. It will count the number of packets and bytes for those packets when directed to do so by an EFP action.",
    /* EFP_COUNTER_TABLE_PIPE3   */ "Counter Table for the EFP. It will count the number of packets and bytes for those packets when directed to do so by an EFP action.",
    /* EFP_COUNTER_TABLE_X       */ "COUNTER TABLE FOR THE EFP",
    /* EFP_COUNTER_TABLE_Y       */ "COUNTER TABLE FOR THE EFP",
    /* EFP_METER_TABLE           */ "METER TABLE STRUCTURES FOR THE EFP",
    /* EFP_METER_TABLE_PIPE0     */ "Meter Table Structures for the EFP.",
    /* EFP_METER_TABLE_PIPE1     */ "Meter Table Structures for the EFP.",
    /* EFP_METER_TABLE_PIPE2     */ "Meter Table Structures for the EFP.",
    /* EFP_METER_TABLE_PIPE3     */ "Meter Table Structures for the EFP.",
    /* EFP_METER_TABLE_X         */ "METER TABLE STRUCTURES FOR THE EFP",
    /* EFP_METER_TABLE_Y         */ "METER TABLE STRUCTURES FOR THE EFP",
    /* EFP_POLICY_TABLE          */ "POLICY TABLE FOR DETERMINING ACTIONS IN THE EFP",
    /* EFP_POLICY_TABLE_PIPE0    */ "Policy Table for determining actions in the EFP.  This table will give the associated EFP action for the associated matching EFP_TCAM entry.",
    /* EFP_POLICY_TABLE_PIPE1    */ "Policy Table for determining actions in the EFP.  This table will give the associated EFP action for the associated matching EFP_TCAM entry.",
    /* EFP_POLICY_TABLE_PIPE2    */ "Policy Table for determining actions in the EFP.  This table will give the associated EFP action for the associated matching EFP_TCAM entry.",
    /* EFP_POLICY_TABLE_PIPE3    */ "Policy Table for determining actions in the EFP.  This table will give the associated EFP action for the associated matching EFP_TCAM entry.",
    /* EFP_TCAM                  */ "TCAM FOR EFP",
    /* EFP_TCAM_PIPE0            */ "TCAM for EFP.  This will match the EFP keys based on packet fields and will determine the highest matching entry.  The individual key bits can be masked using the MASK field to determine a match.  This table works in conjunction with the EFP_POLICY_TABLE.",
    /* EFP_TCAM_PIPE1            */ "TCAM for EFP.  This will match the EFP keys based on packet fields and will determine the highest matching entry.  The individual key bits can be masked using the MASK field to determine a match.  This table works in conjunction with the EFP_POLICY_TABLE.",
    /* EFP_TCAM_PIPE2            */ "TCAM for EFP.  This will match the EFP keys based on packet fields and will determine the highest matching entry.  The individual key bits can be masked using the MASK field to determine a match.  This table works in conjunction with the EFP_POLICY_TABLE.",
    /* EFP_TCAM_PIPE3            */ "TCAM for EFP.  This will match the EFP keys based on packet fields and will determine the highest matching entry.  The individual key bits can be masked using the MASK field to determine a match.  This table works in conjunction with the EFP_POLICY_TABLE.",
    /* EGQ_ACTION_PROFILE_TABLE  */ "Action profile table, used to configure per action profile its properties.\n                   Every address in this table corresponds with an action profile. Table has 8 entries.",
    /* EGQ_AUX_TABLE             */ "The auxiliary data table is used in various stages of the PP for different applications. It is a 64K bit table. Its functionality is determined by Fallback For Bridge VLAN Commands register field AuxiliaryDataTableMode as follows:\n                    In Split-Horizon mode the table is used by the ERPP to determine for each AC the orientation (Hub or scope). In this mode table size is 64K x 1.\n                    In PBB mode the table is used by the ETPP to determine for the first 8K source syste ...",
    /* EGQ_BUF_LINK              */ "Buffers link memory",
    /* EGQ_CBM                   */ "Credit Balance Memory. This memory holds the credit balance of the OFP.",
    /* EGQ_CCM                   */ "Calendars select sequence configuration memory",
    /* EGQ_CH_0_SCM              */ "Channelize Interface 0 Shaper Calendar Memory",
    /* EGQ_CH_1_SCM              */ "Channelize Interface 1 Shaper Calendar Memory",
    /* EGQ_CH_2_SCM              */ "Channelize Interface 2 Shaper Calendar Memory",
    /* EGQ_CH_3_SCM              */ "Channelize Interface 3 Shaper Calendar Memory",
    /* EGQ_CH_4_SCM              */ "Channelize Interface 4 Shaper Calendar Memory",
    /* EGQ_CH_5_SCM              */ "Channelize Interface 5 Shaper Calendar Memory",
    /* EGQ_CH_6_SCM              */ "Channelize Interface 6 Shaper Calendar Memory",
    /* EGQ_CH_7_SCM              */ "Channelize Interface 7 Shaper Calendar Memory",
    /* EGQ_CH_8_SCM              */ "Channelize Interface 8 Shaper Calendar Memory",
    /* EGQ_CH_9_SCM              */ "Channelize Interface 9 Shaper Calendar Memory",
    /* EGQ_CH_SCM_0              */ "Shaper Calendar Memory for channelized interfaces 0",
    /* EGQ_CH_SCM_1              */ "Shaper Calendar Memory for channelized interface 1",
    /* EGQ_CH_SCM_2              */ "Shaper Calendar Memory for channelized interface 2",
    /* EGQ_CH_SCM_3              */ "Shaper Calendar Memory for channelized interface 3",
    /* EGQ_CH_SCM_4              */ "Shaper Calendar Memories for channelized interfaces 4 to 31.",
    /* EGQ_CH_SCM_5              */ "Shaper Calendar Memories for channelized interfaces 4 to 31.",
    /* EGQ_CH_SCM_6              */ "Shaper Calendar Memories for channelized interfaces 4 to 31.",
    /* EGQ_CH_SCM_7              */ "Shaper Calendar Memories for channelized interfaces 4 to 31.",
    /* EGQ_CH_SCM_8              */ "Shaper Calendar Memories for channelized interfaces 4 to 31.",
    /* EGQ_CH_SCM_9              */ "Shaper Calendar Memories for channelized interfaces 4 to 31.",
    /* EGQ_CH_SCM_10             */ "Shaper Calendar Memories for channelized interfaces 4 to 31.",
    /* EGQ_CH_SCM_11             */ "Shaper Calendar Memories for channelized interfaces 4 to 31.",
    /* EGQ_CH_SCM_12             */ "Shaper Calendar Memories for channelized interfaces 4 to 31.",
    /* EGQ_CH_SCM_13             */ "Shaper Calendar Memories for channelized interfaces 4 to 31.",
    /* EGQ_CH_SCM_14             */ "Shaper Calendar Memories for channelized interfaces 4 to 31.",
    /* EGQ_CH_SCM_15             */ "Shaper Calendar Memories for channelized interfaces 4 to 31.",
    /* EGQ_CH_SCM_16             */ "Shaper Calendar Memories for channelized interfaces 4 to 31.",
    /* EGQ_CH_SCM_17             */ "Shaper Calendar Memories for channelized interfaces 4 to 31.",
    /* EGQ_CH_SCM_18             */ "Shaper Calendar Memories for channelized interfaces 4 to 31.",
    /* EGQ_CH_SCM_19             */ "Shaper Calendar Memories for channelized interfaces 4 to 31.",
    /* EGQ_CH_SCM_20             */ "Shaper Calendar Memories for channelized interfaces 4 to 31.",
    /* EGQ_CH_SCM_21             */ "Shaper Calendar Memories for channelized interfaces 4 to 31.",
    /* EGQ_CH_SCM_22             */ "Shaper Calendar Memories for channelized interfaces 4 to 31.",
    /* EGQ_CH_SCM_23             */ "Shaper Calendar Memories for channelized interfaces 4 to 31.",
    /* EGQ_CH_SCM_24             */ "Shaper Calendar Memories for channelized interfaces 4 to 31.",
    /* EGQ_CH_SCM_25             */ "Shaper Calendar Memories for channelized interfaces 4 to 31.",
    /* EGQ_CH_SCM_26             */ "Shaper Calendar Memories for channelized interfaces 4 to 31.",
    /* EGQ_CH_SCM_27             */ "Shaper Calendar Memories for channelized interfaces 4 to 31.",
    /* EGQ_CH_SCM_28             */ "Shaper Calendar Memories for channelized interfaces 4 to 31.",
    /* EGQ_CH_SCM_29             */ "Shaper Calendar Memories for channelized interfaces 4 to 31.",
    /* EGQ_CH_SCM_30             */ "Shaper Calendar Memories for channelized interfaces 4 to 31.",
    /* EGQ_CH_SCM_31             */ "Shaper Calendar Memories for channelized interfaces 4 to 31.",
    /* EGQ_CNM_QUANTA_TO_FC_MAP  */ "CnmQuantaToFcMap",
    /* EGQ_CRM                   */ "CRC16 Reminder Memory",
    /* EGQ_DCM                   */ "This table contains the number of descriptors stored in each queue in PQP. In dex to the table is queue number in range 0 to 511.",
    /* EGQ_DFM                   */ "Delete Queue FIFO",
    /* EGQ_DPM                   */ "TC- Cast WFQ scheduler counters memory.",
    /* EGQ_DPM_8P                */ "EIR WFQ scheduler counters memory.",
    /* EGQ_DSP_PTR_MAP           */ "The PP-DSP parameter for unicast packet is received from FTMH header, while for Egress multicast copy its generated by the multicast replication machine.\n                   This table maps the PP-DSP field to the following parameters:\n                    Out-TM-Port\n                    Out-PP-Port\n                    Destination-System-Port",
    /* EGQ_DWM                   */ "The table contains 256 entries, one entry per Q-Pair. Each entry defines the weights of the UC and MC queues connected to this Q-Pair. Weight of 0 for one queue indicates that this qyeye has SP over the other. When both have equal weights, this implies simple RR. Maximum weight difference is 255:1.\n                   Rate Calculation:\n                   UC rate = (Q-Pair rate) * (MC weight) / (UC weight + MC weight)\n                   MC rate = (Q-Pair rate) * (UC weight) / (UC weight + MC weigh ...",
    /* EGQ_DWM_8P                */ "The table consist from 32 entries, one entry per Port Scheduler (group of 8 Q-Pairs). Defines the weights of the 8 traffic class groups (TCG) connected to this scheduler. Enables WFQ and SP relation between the 8 TCGs. Weight of 0 for a class indicates that this class has SP over the other classes. When all have equal weights, this implies simple RR. Maximum weight difference is 255:1. the lower the rate the higher the bandwidth.\n                   Rate Calculation:\n                   TCG(i) rat ...",
    /* EGQ_EGRESS_SHAPER_CONFIGURATION */ "Egress Shaper Confgiuration.\n                   Entries 0-31 refer to Shaper Calendars 0-31.\n                   Entry 32 refers to Non-chanelized Shaper Calendar Memory.\n                   Entry 33 refers to Q-Pairs Shaper Calendar Memory.\n                   Entry 34 refers to TCGs Shaper Calendar Memory.",
    /* EGQ_EOPM                  */ "RCM EOP master counter",
    /* EGQ_EOPS                  */ "RCM EOP slave counter",
    /* EGQ_EPS_PRIO_MAP          */ "Mapping each priority (Q-pair) to TCG.\n                   This table contains 32 entries. One entry per Port Scheduler (a queue group of 8 Q-Pairs).\n                   Each queue group is configured by PsMode register as either:\n                    One Eight-Priority ETM-Port (8P-Port)\n                    Four Two-Priority ETM-Ports (2P-Port)\n                    Eight One-Priority ETM-Ports (1P-Port)\n                   This register is relevant only when the corresponding queue group is working  ...",
    /* EGQ_FBM                   */ "Represents the dynamic status of the EGQ 12K Buffers. Each entry represents a bitmap of 64 buffers indicating, per buffer, whether it is free or occupied.",
    /* EGQ_FCM                   */ "RCM Free Context Memory",
    /* EGQ_FDCM                  */ "Packet descriptors per Interface",
    /* EGQ_FDCMAX                */ "DCM-MAX  - maximum packet descriptors per Interface.",
    /* EGQ_FDM                   */ "Represents the dynamic status of the EGQ 32K Descriptors. Each entry represents a bitmap of 128 packet descriptors indicating, per descriptor, whether it is free or occupied.",
    /* EGQ_FQP_NIF_PORT_MUX      */ "Round robin for NIF ports in NIF ports scheduler.",
    /* EGQ_FQSM                  */ "FQSM  - DBS per Interface Memory.",
    /* EGQ_FQSMAX                */ "FQSM-MAX  -  maximum data buffers per interface Memory.",
    /* EGQ_FRM                   */ "FDA RXI Memory",
    /* EGQ_HEADER_MAP            */ "This table is used when the system works in Petra FTMH system header format mode.\n                   The table is used to select the source of the parser records fields from different location in packet system header.",
    /* EGQ_IVEC_TABLE            */ "Ingress VLAN editing command.\n                   This table has 64 entries. It is pointed by FHEI.Ingress-VLAN-Edit-Command",
    /* EGQ_LRM                   */ "Local interafce (TXQ) RXI Memory",
    /* EGQ_MAP_OUTLIF_TO_DSP     */ "Egress Replication Database Entry Formats 6 and 7, generate up to three copies, each with unique OutLIF. The PP-DSP is generated by mapping the OutLIF through this table.\n                   The index to the table is OutLif (16 bits) and the result is PP-DSP corresponding to the OutLif.",
    /* EGQ_MAP_PS_TO_IFC         */ "Mapping for each Egress interface the Port Schedulers (queue group of 8 Q-Pairs) which belong to it.\n                   The index to this table is the egress intercae number according to the following encoding:\n                   0-27 - NIF ports 0-27, 28- Cmic, 29 - OLP, 30 - OAM and 31 - RCY.\n                   The result is 32 bits bitamp represnts the Port Schedulers which mapped to the corresponding interface.",
    /* EGQ_MC_1_FIFO             */ "Multicast Class 1 FIFO descriptors",
    /* EGQ_MC_2_FIFO             */ "Multicast Class 2 FIFO descriptors",
    /* EGQ_MC_BITMAP_MAPPING     */ "Mapping Bitmap location to DSP-PTR(8).",
    /* EGQ_MC_ENQ_FIFO           */ "Multicast Copies Enqueue FIFO of descriptors.",
    /* EGQ_MC_SP_TC_MAP          */ "RQP should drop MC packets based on data buffers consumption. The decision whether to drop a packet or forward it is resolved by the CGM block that passes the indication to the RQP. The RQP map SYS-TC2:0SYS-DP1:0 to CGM-SP(1),CGM-SE(2),CGM-TC(3) and forward them to the CGM.",
    /* EGQ_NONCH_SCM             */ "Non-chanelized Shaper Calendar Memory",
    /* EGQ_PCM                   */ "Packed Cell Memory",
    /* EGQ_PCP_DEI_DP_MAPPING_TABLE */ "PCP-DEI Mapping Table for IVE, maps DP+INLIF_Profile+Selected_PCP_DEI to new PCP-DEI",
    /* EGQ_PCT                   */ "Per Port Configuration Table. This table contains 256 entries. The address to this table is Q-Pair number.\n                   If SpecialFlowControl is set, then the address is as following:\n                   1. Entries 0-7 corresponding to OTM-Port 0 UC queues.\n                   2. Entries 8-15 corresponding to OTM-Port 8 UC queues.\n                   3. Entries 16-23 correspoinding to OTM-Port 0 MC queues.\n                   4. Entries 24-31 corresponding to OTM-Port 8 MC queues.\n             ...",
    /* EGQ_PDCM                  */ "Unicast and Multicast packet descriptors counters per OTM-Port Memory.",
    /* EGQ_PDCMAX                */ "PDCM-MAX  - maximum unicast and multicast packet descriptors per OTM-Port Memory.",
    /* EGQ_PDCT_TABLE            */ "This memory defines per OTM-Port-Profile the thresholds related to packet descriptors tests in CGM.",
    /* EGQ_PDM                   */ "packet descriptors memory",
    /* EGQ_PER_IFC_CFG           */ "Per EGQ interface configuration in FQP. The FQP (Transmit queues) block maintains a queue per interface  (124 NIF ports, Cmic, OLP, OAM and RCY).",
    /* EGQ_PER_PORT_LB_RANGE     */ "Second Load-Blanace range for each OTM-Port. The first range is defines in PPCT table.",
    /* EGQ_PLM                   */ "packet link memory",
    /* EGQ_PMC                   */ "Per Port Maxmimum Credits Balance.\n                   Each entry holds the maximum credit balance that the OFP can accumulate, indicating the burst size of the OFP. Each entry associated with OFP.",
    /* EGQ_PMF_KEY_GEN_LSB       */ "Program Instruction Table per program for all 4 keys LSB for instructions 5-7",
    /* EGQ_PMF_KEY_GEN_MSB       */ "Program Instruction Table per program for all 4 keys MSB for instructions 1-4",
    /* EGQ_PMF_PROGRAM_SELECTION_CAM */ "Value: 150h0 Mask: 150h0",
    /* EGQ_PMF_P_7_FIFO          */ "Pipe-FIFO",
    /* EGQ_PPCT                  */ "Per OTM-Port Configuration Table, allowing configuring port-related features for each one of the 256 ports. Each address corresponds with a port, with identical fields definitions per entry.",
    /* EGQ_PP_PPCT               */ "Per PP-Port packet processing configuration table, allowing configuring port-related PP features for each one of the 256 ports. Each address corresponds with a port, with identical fields definitions per entry.",
    /* EGQ_PQP_NIF_PORT_MUX      */ "Round robin for egress interfaces in interface selection scheduler in EPS",
    /* EGQ_PQSM                  */ "Unicast and Multicast consumed data buffers counters per OTM-Port.",
    /* EGQ_PQSMAX                */ "PQSM-MAX  - maximum unicast and multicast DBs per OTM-Port Memory.",
    /* EGQ_PQST_TABLE            */ "Data buffers thresholds per Otm-Port-Profile table.\n                   This memory defines per OTM-Port-Profile the thresholds related to data buffers tests per OTM-Port in CGM.",
    /* EGQ_QDCM                  */ "Packet descriptors per queue Memory.",
    /* EGQ_QDCMAX                */ "DCM-MAX  - maximum packet descriptors per queue Memory.",
    /* EGQ_QDCT_TABLE            */ "PDs thresholds per queue table. The index to this table is CGM-PORT-PROFILE(4),Egress-Tc(3). The result is set of thresholds corresponding to per queue resources.",
    /* EGQ_QM_0                  */ "OFPs Queue FIFOs memory used for buffering the FQP descriptors.",
    /* EGQ_QM_1                  */ "OFPs Queue FIFOs memory used for buffering the FQP descriptors.",
    /* EGQ_QM_2                  */ "OFPs Queue FIFOs memory used for buffering the FQP descriptors.",
    /* EGQ_QM_3                  */ "OFPs Queue FIFOs memory used for buffering the FQP descriptors.",
    /* EGQ_QP_CBM                */ "Credit Balance Memory. This memory holds the credit balance per Q-Pair.",
    /* EGQ_QP_PMC                */ "Per Q-Pair Maxmimum Credits Balance.\n                   Each entry holds the maximum credit balance that the Q-Pair can accumulate, indicating the burst size of the Q-Pair. Each entry associated with Q-Pair.",
    /* EGQ_QP_SCM                */ "Q-Pairs Shaper Calendar Memory.",
    /* EGQ_QQSM                  */ "QQSM  - DBS per Queue Memory.",
    /* EGQ_QQSMAX                */ "QQSM-MAX  -  maximum data buffers per queue Memory.",
    /* EGQ_QQST_TABLE            */ "Data buffers thresholds per queue table.",
    /* EGQ_RCM                   */ "Reassembly contexts memory allocation used for fabric primary pipe traffic. Index to this memory is FAB_PIPE_ID1:0 & FAP ID10:0\n                   The reassembly contexts allocation mode in the Fabric primary interface, may be one from the following options, according to RcmPrimaryMode register:\n                   0 - Static allocation mode, in this mode reassembly context is feagured from the FAP_ID9:0 and context mask + base address.\n                   1 - Semi-dynamic allocation mode, RQP con ...",
    /* EGQ_RCMMC                 */ "Reassembly contexts memory allocation used for fabric secondary pipe traffic. Index to this memory is FAP ID10:0\n                   The reassembly contexts allocation mode in the Fabric secondary interface, may be one from the following options, according to RcmSecondaryMode register:\n                   0 - Static allocation mode, in this mode reassembly context equals to FAP_ID7:0. in this mode, this memory is not in use.\n                   1 - Semi-dynamic allocation mode, RQP context is detrm ...",
    /* EGQ_RCMUC                 */ "Reassembly contexts memory allocation used for fabric primary pipe traffic. Index to this memory is FAP ID10:0\n                   The reassembly contexts allocation mode in the Fabric primary interface, may be one from the following options, according to RcmPrimaryMode register:\n                   0 - Static allocation mode, in this mode reassembly context equals to FAP_ID7:0/8:0. in this mode, this memory is not in use.\n                   1 - Semi-dynamic allocation mode, RQP context is detrmin ...",
    /* EGQ_RCNT                  */ "Read Counter Memory",
    /* EGQ_RDM                   */ "read desc memory",
    /* EGQ_RDMMC                 */ "RQP segment reassembly descriptors used for VSC256 Secondary pipe traffic.\n                   Index is reassembly context.",
    /* EGQ_RDMUC                 */ "RQP segment reassembly descriptors used for VSC256 Primary pipe traffic.\n                   Index is reassembly context.",
    /* EGQ_RPDM                  */ "RQP Packet reassembly descriptors (PRP)",
    /* EGQ_RPDMHDR               */ "Packet reassembly descriptors for packet header(PRP)",
    /* EGQ_RRDM                  */ "RQP Segment reassembly descriptors (FSR) used for VSC128 traffic",
    /* EGQ_RSM                   */ "Cell Unpack Reassembly Memory (state)",
    /* EGQ_SEGM                  */ "Segment Memory for EGQ0.",
    /* EGQ_SOPM                  */ "RCM SOP master counter + context",
    /* EGQ_SOPS                  */ "RCM SOP slave counter",
    /* EGQ_TCG_CBM               */ "Credit Balance Memory. This memory holds the credit balance per TCG.",
    /* EGQ_TCG_PMC               */ "Per TCG Maxmimum Credits Balance.\n                   Each entry holds the maximum credit balance that the TCG can accumulate, indicating the burst size of the TCG. Each entry associated with TCG.",
    /* EGQ_TCG_SCM               */ "TCG Shaper Calendar Memory.",
    /* EGQ_TC_DP_MAP             */ "Lookup table used to map Port-COS-Map-Profile(3), Egress-MC(1), SYS-TC(3),SYS-DP(2) to the following parameters: Egress-TC(3) and CGM-MC-DP(2).\n                   The Egress-TC + Base-Queue-Num determines the final queue number the packet will be enqueued to it.",
    /* EGQ_TSM                   */ "TDM (in PRP) Segment Memory",
    /* EGQ_TTL_SCOPE             */ "For each packet, a range of allowed TTL values is defined. There are eight such TTL values, each of them 8b, and this table attaches each VSI with the allowed TTL scope values.\n                   The eight TTL scope values are defined in Ttl Scope.Each entry in this table configures eight consecutive VSI entries.",
    /* EGQ_UCFIFO                */ "EHP Unicast FIFO Descriptors",
    /* EGQ_USM                   */ "Unpacked Segment Memory",
    /* EGQ_USMFTMH               */ "Unpacked Segment Memory",
    /* EGQ_VLAN_TABLE            */ "Vlan Membership Table. This table contains 8K entries. Used in egress multicast in bitmap mode.",
    /* EGQ_VSI_MEMBERSHIP        */ "VSI membership table configuration table, correlating each OTM port with a VSI. Each address corresponds with a VSI (0 through 4095), with identical fields definitions per entry.",
    /* EGQ_VSI_PROFILE           */ "This table sets for each VSI an action profile. There are four such profiles. Each entry in this table configures sixteen consecutive VSI profile entries.",
    /* EGQ_WDM                   */ "write desc memory",
    /* EGR_1588_SA               */ "1588 Protocol Control table",
    /* EGR_AXP_PORT_PROPERTY     */ "Indexed by the Loopback Type",
    /* EGR_COS_MAP               */ "Egress COS MAP Table for the Redirect COS queue",
    /* EGR_COUNTER_CONTROL       */ "Specifies control fields Egress for the MMU Counters and Meters.",
    /* EGR_CPU_COS_MAP           */ "Egress CPU COS MAP Table for the Redirect COS queue",
    /* EGR_DGPP_TO_NHI           */ "Maps DGPP to a next hop index.",
    /* EGR_DGPP_TO_NHI_MODBASE   */ "Modid-based pointer to EGR_DGPP_TO_NHI table.",
    /* EGR_DNX_HEADER            */ "This table provides a 30-Byte default value for DNX Header Initialization. Some fields which vary with session can be overridden (captured in SAT Header Map document).",
    /* EGR_DSCP_ECN_MAP          */ "Egress DSCP Table to select the new dscp for outer tunnel header packets.",
    /* EGR_DSCP_TABLE            */ "Egress DSCP Table to select the new dscp for outer tunnel header packets.",
    /* EGR_DVP_ATTRIBUTE         */ "Egress DVP Attribute Table, FeatureSpecific-Ethernet.",
    /* EGR_DVP_ATTRIBUTE_1       */ "Egress DVP Attribute_1 Table, FeatureSpecific-Ethernet.",
    /* EGR_ECN_COUNTER           */ "Number of packets transmitted from this port with ECN error.",
    /* EGR_EDB_XMIT_CTRL         */ "Egress transmission control",
    /* EGR_EFFECTIVE_PHB_SELECT  */ "This table is used to select 3x Effective PHB & CNG that is fed to Flex Counter as Packet Attribute and is used as Flex Counter Offset",
    /* EGR_EHG_QOS_MAPPING_TABLE */ "Maps internal priority / CFI to DSCP and VLAN priority/CFI",
    /* EGR_EM_MTP_INDEX          */ "Mirror to Port Table.\nIndex is constructed using pbe.mtp_index[6:0] field.\nWe use {pbe.mtp_index[5:4],pbe.mtp_index[2:0]} as index into this table.",
    /* EGR_ENABLE                */ "Egress Enable (per physical port)",
    /* EGR_EP_REDIRECT_EM_MTP_INDEX */ "Mirror to Port Table.\nIndex is constructed using pbe.mtp_index[6:0] field.\nWe use {pbe.mtp_index[5:4],pbe.mtp_index[2:0]} as index into this table.",
    /* EGR_ERSPAN                */ "Contains the ERSPAN header for each MTP (first 4 for IM_MTPs, second 4 entries for EM_MTPs; address::: for IM copy: {0, IM_MTP_INDEX[4:3]} for EM copy: {1, EM_MTP_INDEX[4:3]}. Note: ERSPAN is not supported in Draco Mirror mode.",
    /* EGR_ETAG_PCP_MAPPING      */ "Mapping table for Internal Priority and CNG to ETAG PCP/DE.",
    /* EGR_EXP_TO_INT_CN_MAPPING_TABLE */ "Map MPLS EXP to INT_CN. Used at ingress chip of MPLS encapsulations.",
    /* EGR_FCOE_CONTROL_1        */ "Per-chip control.",
    /* EGR_FC_HEADER_TYPE        */ "FCoE Header Type.",
    /* EGR_FLEX_CTR_COS_MAP      */ "This table is used to map packet MMU_COS and UNICAST_QUEUING bit to compressed values to count using flex counter.",
    /* EGR_FLEX_CTR_COUNTER_TABLE_0 */ "Counter Table for flexible counter updates",
    /* EGR_FLEX_CTR_COUNTER_TABLE_1 */ "Counter Table for flexible counter updates",
    /* EGR_FLEX_CTR_COUNTER_TABLE_2 */ "Counter Table for flexible counter updates",
    /* EGR_FLEX_CTR_COUNTER_TABLE_3 */ "Counter Table for flexible counter updates",
    /* EGR_FLEX_CTR_COUNTER_TABLE_4 */ "Counter Table for flexible counter updates",
    /* EGR_FLEX_CTR_COUNTER_TABLE_5 */ "Counter Table for flexible counter updates",
    /* EGR_FLEX_CTR_COUNTER_TABLE_6 */ "Counter Table for flexible counter updates",
    /* EGR_FLEX_CTR_COUNTER_TABLE_7 */ "Counter Table for flexible counter updates",
    /* EGR_FLEX_CTR_COUNTER_TABLE_0_PIPE0 */ "Counter Table for flexible counter updates",
    /* EGR_FLEX_CTR_COUNTER_TABLE_0_PIPE1 */ "Counter Table for flexible counter updates",
    /* EGR_FLEX_CTR_COUNTER_TABLE_0_PIPE2 */ "Counter Table for flexible counter updates",
    /* EGR_FLEX_CTR_COUNTER_TABLE_0_PIPE3 */ "Counter Table for flexible counter updates",
    /* EGR_FLEX_CTR_COUNTER_TABLE_0_X */ "Counter Table for flexible counter updates",
    /* EGR_FLEX_CTR_COUNTER_TABLE_0_Y */ "Counter Table for flexible counter updates",
    /* EGR_FLEX_CTR_COUNTER_TABLE_1_PIPE0 */ "Counter Table for flexible counter updates",
    /* EGR_FLEX_CTR_COUNTER_TABLE_1_PIPE1 */ "Counter Table for flexible counter updates",
    /* EGR_FLEX_CTR_COUNTER_TABLE_1_PIPE2 */ "Counter Table for flexible counter updates",
    /* EGR_FLEX_CTR_COUNTER_TABLE_1_PIPE3 */ "Counter Table for flexible counter updates",
    /* EGR_FLEX_CTR_COUNTER_TABLE_1_X */ "Counter Table for flexible counter updates",
    /* EGR_FLEX_CTR_COUNTER_TABLE_1_Y */ "Counter Table for flexible counter updates",
    /* EGR_FLEX_CTR_COUNTER_TABLE_2_PIPE0 */ "Counter Table for flexible counter updates",
    /* EGR_FLEX_CTR_COUNTER_TABLE_2_PIPE1 */ "Counter Table for flexible counter updates",
    /* EGR_FLEX_CTR_COUNTER_TABLE_2_PIPE2 */ "Counter Table for flexible counter updates",
    /* EGR_FLEX_CTR_COUNTER_TABLE_2_PIPE3 */ "Counter Table for flexible counter updates",
    /* EGR_FLEX_CTR_COUNTER_TABLE_2_X */ "Counter Table for flexible counter updates",
    /* EGR_FLEX_CTR_COUNTER_TABLE_2_Y */ "Counter Table for flexible counter updates",
    /* EGR_FLEX_CTR_COUNTER_TABLE_3_PIPE0 */ "Counter Table for flexible counter updates",
    /* EGR_FLEX_CTR_COUNTER_TABLE_3_PIPE1 */ "Counter Table for flexible counter updates",
    /* EGR_FLEX_CTR_COUNTER_TABLE_3_PIPE2 */ "Counter Table for flexible counter updates",
    /* EGR_FLEX_CTR_COUNTER_TABLE_3_PIPE3 */ "Counter Table for flexible counter updates",
    /* EGR_FLEX_CTR_COUNTER_TABLE_3_X */ "Counter Table for flexible counter updates",
    /* EGR_FLEX_CTR_COUNTER_TABLE_3_Y */ "Counter Table for flexible counter updates",
    /* EGR_FLEX_CTR_OFFSET_TABLE_0 */ "The actual offset used to index the counter table in the first counter pool is stored in this table",
    /* EGR_FLEX_CTR_OFFSET_TABLE_1 */ "The actual offset used to index the counter table in the first counter pool is stored in this table",
    /* EGR_FLEX_CTR_OFFSET_TABLE_2 */ "The actual offset used to index the counter table in the first counter pool is stored in this table",
    /* EGR_FLEX_CTR_OFFSET_TABLE_3 */ "The actual offset used to index the counter table in the first counter pool is stored in this table",
    /* EGR_FLEX_CTR_OFFSET_TABLE_4 */ "The actual offset used to index the counter table in the first counter pool is stored in this table",
    /* EGR_FLEX_CTR_OFFSET_TABLE_5 */ "The actual offset used to index the counter table in the first counter pool is stored in this table",
    /* EGR_FLEX_CTR_OFFSET_TABLE_6 */ "The actual offset used to index the counter table in the first counter pool is stored in this table",
    /* EGR_FLEX_CTR_OFFSET_TABLE_7 */ "The actual offset used to index the counter table in the first counter pool is stored in this table",
    /* EGR_FLEX_CTR_PKT_PRI_MAP  */ "PKT_PRI_MAP",
    /* EGR_FLEX_CTR_PKT_RES_MAP  */ "PKT_RES_MAP",
    /* EGR_FLEX_CTR_PORT_MAP     */ "PORT_MAP",
    /* EGR_FLEX_CTR_PRI_CNG_MAP  */ "PRI_CNG_MAP",
    /* EGR_FLEX_CTR_TOS_MAP      */ "TOS_MAP",
    /* EGR_FORCE_REGEN_CRC_DST   */ "Force regen CRC per logical destination port",
    /* EGR_FORCE_REGEN_CRC_SRC   */ "Force regen CRC per logical source port",
    /* EGR_FRAGMENT_ID_TABLE     */ "IPv4 / CAPWAP Tunnel Fragment ID Table",
    /* EGR_FRAGMENT_ID_TABLE_PIPE0 */ "IPv4 Tunnel Fragment ID Table.",
    /* EGR_FRAGMENT_ID_TABLE_PIPE1 */ "IPv4 Tunnel Fragment ID Table.",
    /* EGR_FRAGMENT_ID_TABLE_PIPE2 */ "IPv4 Tunnel Fragment ID Table.",
    /* EGR_FRAGMENT_ID_TABLE_PIPE3 */ "IPv4 Tunnel Fragment ID Table.",
    /* EGR_FRAGMENT_ID_TABLE_X   */ "IPv4 Tunnel Fragment ID Table.",
    /* EGR_FRAGMENT_ID_TABLE_Y   */ "IPv4 Tunnel Fragment ID Table.",
    /* EGR_GPP_ATTRIBUTES        */ "Per-GPP attributes table, PORT view.",
    /* EGR_GPP_ATTRIBUTES_MODBASE */ "Per-GPP attributes MODBASE table.",
    /* EGR_HEADER_ENCAP_DATA     */ "Engress header encap data, index by PBE.HEADER_ENCAP_INDEX.",
    /* EGR_IFP_MOD_FIELDS        */ "L2 Modifications needed due to the IFP",
    /* EGR_IL_CHANNEL_MAP        */ "Maps Port/Cos to Interlaken Channel Number",
    /* EGR_IM_MTP_INDEX          */ "Mirror to Port Table to be used for IM tagged packets.\nIndex is constructed using pbe.mtp_index[6:0] field.\nWe use {pbe.mtp_index[4:3],pbe.mtp_index[2:0]} as index into this table.",
    /* EGR_ING_PORT              */ "Configuration Register for Ingress Port. This is different for each GE, 10GE port. FeatureSpecific-Ethernet.",
    /* EGR_INT_CN_TO_EXP_MAPPING_TABLE */ "Map INT_CN to MPLS EXP. Used in MPLS encapsulation.",
    /* EGR_INT_CN_TO_IP_MAPPING  */ "Egress Internal CN update table",
    /* EGR_INT_CN_UPDATE         */ "Egress Internal CN update table",
    /* EGR_IPFIX_DSCP_XLATE_TABLE */ "IPFIX DSCP Translation Table -- Address = {IP_DSCP_PROFILE[1:0], pkt_dscp[5:0]}",
    /* EGR_IPFIX_EOP_BUFFER      */ "IPFIX EOP BUFFER - to save info per-port from SOP cells to EOP cells.",
    /* EGR_IPFIX_EXPORT_FIFO     */ "Egress IPFIX Export FIFO",
    /* EGR_IPFIX_IPV4_MASK_SET_A */ "IPFIX IPv4 Address Masks",
    /* EGR_IPFIX_IPV6_MASK_SET_A */ "IPFIX IPv6 Address Masks",
    /* EGR_IPFIX_PROFILE         */ "Egress IPFIX Per-Port Profile Pointers",
    /* EGR_IPFIX_SESSION_TABLE   */ "Egress IPFIX Session Table",
    /* EGR_IPMC                  */ "Per IPMC group attributes needed in EP, FeatureSpecific-Ethernet",
    /* EGR_IPMC_CFG2             */ "Configuration Register for IPMC related modifications.",
    /* EGR_IP_CUT_THRU_CLASS     */ "To select the cut-through class based on ingress port number",
    /* EGR_IP_ECN_TO_EXP_MAPPING_TABLE */ "Map IP ECN to MPLS EXP. Used in MPLS encapulation.",
    /* EGR_IP_TO_INT_CN_MAPPING  */ "IP ECN to INT_CN Mapping for IPinIP tunnels",
    /* EGR_IP_TUNNEL             */ "Egress IP Tunnel Table. Used to Make new Tunnel Header.",
    /* EGR_IP_TUNNEL_IPV6        */ "IPV6 view of the Egress IP Tunnel Table. Used to make new IPV6 Tunnel Header. FeatureSpecific-Ethernet",
    /* EGR_IP_TUNNEL_MPLS        */ "MPLS view of the Egress IP Tunnel Table. Used to make new MPLS Tunnel Header. Note there are 4 entries per location. FeatureSpecific-Ethernet",
    /* EGR_L3_INTF               */ "L3 Interface Table",
    /* EGR_L3_NEXT_HOP           */ "Next Hop Table",
    /* EGR_L3_NEXT_HOP_1         */ "Inidividual protection state for each tunnel.",
    /* EGR_LINK_LOCAL_MAC_ADDRESS */ "Egress LINK_LOCAL_MAC_ADDRESS register.",
    /* EGR_LM_COUNTER_CONTROL    */ "Per opcode OAM LM packets counter control.",
    /* EGR_LPORT_PROFILE         */ "LPORT Profile table for packets destined to subtending ports",
    /* EGR_MACDA_OUI_PROFILE     */ "Derive MAC DA from the Profile Index from l3uc_ext view in ingress pipeline.",
    /* EGR_MAC_DA_PROFILE        */ "MAC-DA values for use when doing MPLS packet mods, FeatureSpecific-Ethernet",
    /* EGR_MAP_MH                */ "Used for mapping incoming PBE MH_PRIORITY into a new MH_PRIORITY/TC For Higig+/Higig2 header, on a per-egress-port basis.",
    /* EGR_MASK                  */ "Egress Mask Table",
    /* EGR_MASK_MODBASE          */ "Specifies the port(s) that is (are) CPU.",
    /* EGR_MAX_USED_ENTRIES      */ "This register contains the cell requests asserted by TP for individual ports to MMU.\nMeaning of cell request is 1664 bits data. All it shows is the number of times cell_request signal\nwas asserted by TP to MMU for each port.",
    /* EGR_MAX_USED_ENTRIES_X    */ "This register contains the cell requests asserted by TP for individual ports to MMU.\nMeaning of cell request is 1664 bits data. All it shows is the number of times cell_request signal\nwas asserted by TP to MMU for each port.",
    /* EGR_MAX_USED_ENTRIES_Y    */ "This register contains the cell requests asserted by TP for individual ports to MMU.\nMeaning of cell request is 1664 bits data. All it shows is the number of times cell_request signal\nwas asserted by TP to MMU for each port.",
    /* EGR_MA_INDEX              */ ".",
    /* EGR_MFRAME_COUNTER        */ "Counter for the egress port preemptable packets",
    /* EGR_MIRROR_ENCAP_CONTROL  */ "Contains the Mirror Encap controls for each of the 8 Mirror Encap Indices.",
    /* EGR_MIRROR_ENCAP_DATA_1   */ "Contains the Base Header portion of Mirror Encap Data for each of the 8 Mirror Encap Indices.",
    /* EGR_MIRROR_ENCAP_DATA_2   */ "Contains the Optional Header portion of Mirror Encap Data for each of the 8 Mirror Encap Indices.",
    /* EGR_MMU_CELL_CREDIT       */ "Set the maximum cell credit sent to MMU for each lane. Index by phyiscal port num",
    /* EGR_MMU_CREDIT_LIMIT      */ "This one is to limit the register counts to the MMU even with the large buffer. It needs to be programmed before putting the egr_enable to see it's taking effect.\nWhen disable, ep_to_mmu_cell_req will be sending to MMU based on the buffer size.\nWhen enable,  ep_to_mmu_cell_req will be only be issued when the EGR_MMU_REQUESTS smaller or equal to the EGR_MMU_CREDIT_LIMIT.",
    /* EGR_MMU_CREDIT_LIMIT_X    */ "This one is to limit the register counts to the MMU even with the large buffer. It needs to be programmed before putting the egr_enable to see it's taking effect.\nWhen disable, ep_to_mmu_cell_req will be sending to MMU based on the buffer size.\nWhen enable,  ep_to_mmu_cell_req will be only be issued when the EGR_MMU_REQUESTS smaller or equal to the EGR_MMU_CREDIT_LIMIT.",
    /* EGR_MMU_CREDIT_LIMIT_Y    */ "This one is to limit the register counts to the MMU even with the large buffer. It needs to be programmed before putting the egr_enable to see it's taking effect.\nWhen disable, ep_to_mmu_cell_req will be sending to MMU based on the buffer size.\nWhen enable,  ep_to_mmu_cell_req will be only be issued when the EGR_MMU_REQUESTS smaller or equal to the EGR_MMU_CREDIT_LIMIT.",
    /* EGR_MMU_REQUESTS          */ "This register contains the cell requests asserted by TP for individual ports to MMU.\nMeaning of cell request is 1664 bits data. All it shows is the number of times cell_request signal\nwas asserted by TP to MMU for each port.",
    /* EGR_MMU_REQUESTS_X        */ "This register contains the cell requests asserted by TP for individual ports to MMU.\nMeaning of cell request is 1664 bits data. All it shows is the number of times cell_request signal\nwas asserted by TP to MMU for each port.",
    /* EGR_MMU_REQUESTS_Y        */ "This register contains the cell requests asserted by TP for individual ports to MMU.\nMeaning of cell request is 1664 bits data. All it shows is the number of times cell_request signal\nwas asserted by TP to MMU for each port.",
    /* EGR_MOD_MAP_TABLE         */ "Egress Module Remapping Table",
    /* EGR_MPLS_EXP_MAPPING_1    */ "Mapping table for Internal Priority and CNG to MPLS labels EXP. Address = {VC_AND_SWAP_LABEL.MPLS_EXP_MAPPING_PTR, int_PRI, CNG}. FeatureSpecific-MPLS",
    /* EGR_MPLS_EXP_MAPPING_2    */ "Mapping table for Internal Priority and CNG to MPLS labels EXP. Address = {EGR_IP_TUNNEL_MPLS.MPLS_EXP_MAPPING_PTR, int_PRI, CNG} FeatureSpecific-MPLS",
    /* EGR_MPLS_EXP_MAPPING_3    */ "This table provides the Effective PHB & CNG for each label",
    /* EGR_MPLS_EXP_PRI_MAPPING  */ "Mapping table for EXP to .1p/cfi. Address = {MPLS_EXP_MAPPING_PTR, new_exp} FeatureSpecific-MPLS",
    /* EGR_MPLS_PRI_MAPPING      */ "Mapping table for Internal Priority and CNG to MPLS labels EXP. Address = {MPLS_EXP_MAPPING_PTR, int_PRI, CNG} FeatureSpecific-MPLS",
    /* EGR_MPLS_VC_AND_SWAP_LABEL_TABLE */ "MPLS VC and SWAP Label Table, FeatureSpecific-MPLS",
    /* EGR_MP_GROUP              */ ".",
    /* EGR_MTU                   */ "Egress MTU Register.",
    /* EGR_MTU_CHECK             */ "Egress MTU check mapping table.",
    /* EGR_MTU_PROFILE           */ "MTU check table, Indexed by MTU_PROFILE_INDEX (5 bits)",
    /* EGR_MULTICAST_MAC_ADDR    */ "My STATION",
    /* EGR_NAT_PACKET_EDIT_INFO  */ "Per-chip control.",
    /* EGR_NETWORK_PRUNE_CONTROL */ "Per DVP_NETWORK_GROUP Prune enable for multipe Split Horizon Groups",
    /* EGR_OAM_DGLP_PROFILE      */ "EGR_OAM_DGLP_PROFILE",
    /* EGR_OAM_FLEXIBLE_DOMAIN_CONTROL */ "index:{PRE VXLT IVID VALID,PRE VXLT OVID VALID,POST VXLT IVID VALID,POST VXLT OVID VALID,DVP VALID}",
    /* EGR_OAM_LM_COUNTERS_0     */ "Packet counter for OAM Loss Measurement pool 0",
    /* EGR_OAM_LM_COUNTERS_1     */ "Packet counter for OAM Loss Measurement pool 1",
    /* EGR_OAM_LM_COUNTERS_2     */ "Packet counter for OAM Loss Measurement pool 0",
    /* EGR_OAM_MAC_ADDRESS       */ "loopback reply message construction requires per port MACDA value",
    /* EGR_OAM_OPCODE_CONTROL_PROFILE */ ".",
    /* EGR_OAM_OPCODE_GROUP      */ ".",
    /* EGR_OLP_CONFIG            */ "Contains OLP-HDR related items",
    /* EGR_OLP_CONFIG_1          */ "Contains OLP-HDR related items",
    /* EGR_OLP_CONFIG_2          */ "Contains OLP-HDR related items",
    /* EGR_OLP_DGPP_CONFIG       */ "Contains OLP-HDR related items",
    /* EGR_OLP_DGPP_CONFIG_1     */ "Contains OLP-HDR related items",
    /* EGR_OLP_HEADER_TYPE_MAPPING */ "This Table provides a flexible mapping between OLP_HDR_COMPRESSED to the\nactual OLP_HDR_TYPE and OLP_HDR_SUBTYPE.\nINDEX (4bits): {MEP_TYPE(1b), OLP_HDR_TYPE_COMPRESSED(3b)}\nMEP_TYPE: 0 = Down-MEP/IFP, 1= UP-MEP\n#To be Updated later\n#MEP_TYPE      COMPRESSED_HDR_TYPE       HDR_TYPE          HDR_SUBTYPE\n#==========================================================================\n# Downmep/IFP      3'b000                8'd1(L2_HDR)      8'd0(NULL)\n# Downmep/IFP      3'b001                8'd0(OAM_H ...",
    /* EGR_OLP_HEADER_TYPE_MAPPING_1 */ "This Table provides a flexible mapping between OLP_HDR_COMPRESSED to the\nactual OLP_HDR_TYPE and OLP_HDR_SUBTYPE.\nINDEX (4bits): {MEP_TYPE(1b), OLP_HDR_TYPE_COMPRESSED(3b)}\nMEP_TYPE: 0 = Down-MEP/IFP, 1= UP-MEP\n#FIXME: currently just copied from KT2. Need to check for TD2+\n#MEP_TYPE      COMPRESSED_HDR_TYPE       HDR_TYPE          HDR_SUBTYPE\n#==========================================================================\n# Downmep/IFP      3'b000                8'd1(L2_HDR)      8'd0(NULL)\n# Downmep ...",
    /* EGR_OUTER_PRI_CFI_MAPPING_FOR_BYPASS */ "Egress VLAN Tag Action Profile Table for Low Latency EP Path.",
    /* EGR_PCP_DE_MAPPING        */ "Mapping table for Internal Priority and CNG to LLTAG/ETAG PCP,DE. Address = {LLTAG/ETAG PCP DE MAPPING PTR[3:0],int_PRI, CNG} FeatureSpecific-PON n/w",
    /* EGR_PERQ_XMT_COUNTERS     */ "Per-port Per-queue transmit counters (48 per port, 54 ports)",
    /* EGR_PERQ_XMT_COUNTERS_BASE_ADDR */ "Per-port Per-queue transmit counters Base Address.",
    /* EGR_PERQ_XMT_COUNTERS_PIPE0 */ "Per-port Per-queue Transmit Counters.\n            Use fix scheme, per pipe, 34 ports,\n            48 (for cpu) + 34*20 (for loopback, management and front panel port)\n\n            index = if (device_port_num == CPU_port)\n                        COS from MMU\n                    else\n                        48 + (device_port_num%34)*20 + COS from MMU + !UNICAST*10\n            e.g. device port 68,\n            unicast cos 5 = 48+ (68%34)*20+5+0*10=93\n            unicast cos 6 = 48+ (68%34)*20+6+0*10 ...",
    /* EGR_PERQ_XMT_COUNTERS_PIPE1 */ "Per-port Per-queue Transmit Counters.\n            Use fix scheme, per pipe, 34 ports,\n            48 (for cpu) + 34*20 (for loopback, management and front panel port)\n\n            index = if (device_port_num == CPU_port)\n                        COS from MMU\n                    else\n                        48 + (device_port_num%34)*20 + COS from MMU + !UNICAST*10\n            e.g. device port 68,\n            unicast cos 5 = 48+ (68%34)*20+5+0*10=93\n            unicast cos 6 = 48+ (68%34)*20+6+0*10 ...",
    /* EGR_PERQ_XMT_COUNTERS_PIPE2 */ "Per-port Per-queue Transmit Counters.\n            Use fix scheme, per pipe, 34 ports,\n            48 (for cpu) + 34*20 (for loopback, management and front panel port)\n\n            index = if (device_port_num == CPU_port)\n                        COS from MMU\n                    else\n                        48 + (device_port_num%34)*20 + COS from MMU + !UNICAST*10\n            e.g. device port 68,\n            unicast cos 5 = 48+ (68%34)*20+5+0*10=93\n            unicast cos 6 = 48+ (68%34)*20+6+0*10 ...",
    /* EGR_PERQ_XMT_COUNTERS_PIPE3 */ "Per-port Per-queue Transmit Counters.\n            Use fix scheme, per pipe, 34 ports,\n            48 (for cpu) + 34*20 (for loopback, management and front panel port)\n\n            index = if (device_port_num == CPU_port)\n                        COS from MMU\n                    else\n                        48 + (device_port_num%34)*20 + COS from MMU + !UNICAST*10\n            e.g. device port 68,\n            unicast cos 5 = 48+ (68%34)*20+5+0*10=93\n            unicast cos 6 = 48+ (68%34)*20+6+0*10 ...",
    /* EGR_PERQ_XMT_COUNTERS_X   */ "Per-port Per-queue transmit counters.",
    /* EGR_PERQ_XMT_COUNTERS_Y   */ "Per-port Per-queue transmit counters.",
    /* EGR_PER_PORT_BUFFER_OVERFLOW */ "Egress port buffer overflow status indicator",
    /* EGR_PER_PORT_BUFFER_SFT_RESET */ "Egress port buffer reset (per port)",
    /* EGR_PER_Q_ECN_MARKED      */ "Error counters for ECN enhancement feature",
    /* EGR_PFC_CONTROL           */ "control the PFC (Priority Flow Control) feature of the egress. It should be only used for the XLPORT.",
    /* EGR_PHYSICAL_PORT         */ "Configuration Register for Ingress Port. This is different for each GE, 10GE port. FeatureSpecific-Ethernet.",
    /* EGR_PORT                  */ "Configuration Register for a Port. This is different for each GE, 10GE port. FeatureSpecific-Ethernet.",
    /* EGR_PORT_1                */ "Another per-port configuration Register for Egress port.",
    /* EGR_PORT_CREDIT_RESET     */ "To clear the port credit(per physical port",
    /* EGR_PORT_PKT_SOP_ENABLE   */ "Egress DOP Enable (per physical port).\n[0]=CPU,[1-12]=Front-Panel,[13]=LPBK",
    /* EGR_PORT_REQUESTS         */ "This table contains the cell requests asserted by individual port blocks (XLPORT's and CMIC).\nMeaning of cell request is different for different ports, but this register has no\nunderstanding of those meanings. All it shows is the number of times cell_request signal\nwas asserted by each port to TP.",
    /* EGR_PORT_REQUESTS_X       */ "This table contains the cell requests asserted by individual port blocks (XLPORT's and CMIC).\nMeaning of cell request is different for different ports, but this register has no\nunderstanding of those meanings. All it shows is the number of times cell_request signal\nwas asserted by each port to TP.",
    /* EGR_PORT_REQUESTS_Y       */ "This table contains the cell requests asserted by individual port blocks (XLPORT's and CMIC).\nMeaning of cell request is different for different ports, but this register has no\nunderstanding of those meanings. All it shows is the number of times cell_request signal\nwas asserted by each port to TP.",
    /* EGR_PP_PORT_GPP_TRANSLATION_1 */ "PP Port to GPP Translation Table",
    /* EGR_PP_PORT_GPP_TRANSLATION_2 */ "PP Port to GPP Translation Table",
    /* EGR_PRI_CNG_MAP           */ "Per port egress priority/CFI mapping table",
    /* EGR_PW_INIT_COUNTERS      */ "L2 MPLS Pseudo-wire Initiation Pkt/byte counters with SEQNUM overlay-- indexed by PW number",
    /* EGR_PW_INIT_COUNTERS_PIPE0 */ "L2 MPLS Pseudo-wire Initiation SEQNUM Table -- indexed by PW number.",
    /* EGR_PW_INIT_COUNTERS_PIPE1 */ "L2 MPLS Pseudo-wire Initiation SEQNUM Table -- indexed by PW number.",
    /* EGR_PW_INIT_COUNTERS_PIPE2 */ "L2 MPLS Pseudo-wire Initiation SEQNUM Table -- indexed by PW number.",
    /* EGR_PW_INIT_COUNTERS_PIPE3 */ "L2 MPLS Pseudo-wire Initiation SEQNUM Table -- indexed by PW number.",
    /* EGR_PW_INIT_COUNTERS_X    */ "L2 MPLS Pseudo-wire Initiation SEQNUM Table -- indexed by PW number.",
    /* EGR_PW_INIT_COUNTERS_Y    */ "L2 MPLS Pseudo-wire Initiation SEQNUM Table -- indexed by PW number.",
    /* EGR_QCN_CNM_CONTROL_TABLE */ "QCN CNM Control table.",
    /* EGR_QUEUE_TO_PP_PORT_MAP  */ "Queue To DGPP Map Table, FeatureSpecific-Ethernet.",
    /* EGR_SAT_CONFIG_MAC_SA     */ "This table is indexed using destination PP port to obtain MAC-SA for a multicast packet looped back using SAT-LLB function.",
    /* EGR_SAT_SAMP_DATA         */ "Service Activation Detection ACTION-DATA for UPMEPs",
    /* EGR_SAT_SAMP_DATA_1       */ "Contains OLP-HDR related items for SAT-UPSAMP processing.This is a shadow table of the original EGR_SAT_SAMP_DATA table and stores only a subset of fields.Looked up only in Pass-B",
    /* EGR_SAT_SAMP_TCAM         */ "Service Activation Detection TCAM for UPMEPs",
    /* EGR_SCI_TABLE             */ "Egress SCI Table to lookup security attributes for MACSEC SecTag contruction.",
    /* EGR_SERVICE_COUNTER_TABLE */ "Egress Virtual Port / Interface Counters",
    /* EGR_SERVICE_COUNTER_TABLE_X */ "Egress Virtual Port / Interface Counters.",
    /* EGR_SERVICE_COUNTER_TABLE_Y */ "Egress Virtual Port / Interface Counters.",
    /* EGR_SERVICE_PRI_MAP       */ "Egress Class of Service instance priority value to OAM LM counter offset mapping table",
    /* EGR_SERVICE_PRI_MAP_0     */ "Ingress Class of Service instance priority value to OAM LM counter offset mapping table",
    /* EGR_SERVICE_PRI_MAP_1     */ "Ingress Class of Service instance priority value to OAM LM counter offset mapping table",
    /* EGR_SERVICE_PRI_MAP_2     */ "Ingress Class of Service instance priority value to OAM LM counter offset mapping table",
    /* EGR_SER_FIFO              */ "EGR SER FIFO",
    /* EGR_SER_FIFO_PIPE0        */ "EGR SER FIFO",
    /* EGR_SER_FIFO_PIPE1        */ "EGR SER FIFO",
    /* EGR_SER_FIFO_PIPE2        */ "EGR SER FIFO",
    /* EGR_SER_FIFO_PIPE3        */ "EGR SER FIFO",
    /* EGR_SER_FIFO_X            */ "EGR SER FIFO",
    /* EGR_SER_FIFO_Y            */ "EGR SER FIFO",
    /* EGR_SHAPING_CONTROL       */ "Specifies control fields Egress for the MMU Shaping Bus.",
    /* EGR_SR_ETHERTYPES         */ "Egress SR Ether type setting regsiter.",
    /* EGR_SR_FLOW_COUNT_POOL0   */ "Counts number over this flow.",
    /* EGR_SR_FLOW_COUNT_POOL1   */ "Counts number over this flow.",
    /* EGR_STU_CHECK             */ "Egress STU check mapping table.",
    /* EGR_STU_PROFILE           */ "STU check table, Indexed by STU_PROFILE_INDEX (5 bits)",
    /* EGR_SUBPORT_TAG_DOT1P_MAP */ "PHB to Outgoing SubPort Tag's PCP, DE mapping table",
    /* EGR_TDM_PORT_MAP          */ "To enable the physical port map",
    /* EGR_TRILL_PARSE_CONTROL   */ "Trill parse control.",
    /* EGR_TRILL_PARSE_CONTROL_2 */ "Trill parse control (second copy).",
    /* EGR_TRILL_RBRIDGE_NICKNAMES */ "Table that defines the TRILL RBridge nickname to use when sending out a packet. The index is derived from the ingress VLAN table.",
    /* EGR_TRILL_TREE_PROFILE    */ "Trill Tree profile table.",
    /* EGR_TS_ING_PORT_MAP       */ "Source identifier to be put on the TS SHIM header.",
    /* EGR_TS_UTC_CONVERSION     */ "This one-entry table stores 1588 ToD values (UTC time) as computed by the time synchronization algorithm on the ARM core. The entry is to be updated once per second.",
    /* EGR_TUNNEL_ECN_ENCAP      */ "Egress Internal CN Update Table",
    /* EGR_TUNNEL_ECN_ENCAP_2    */ "Egress Internal CN Update Table for no-IP payload packets",
    /* EGR_TX_PROT_GROUP_TABLE   */ "Protection Switching Drop Enable.",
    /* EGR_VFI                   */ "Egress WLAN Destination Virtual Port Table, FeatureSpecific-Wireless",
    /* EGR_VFT_FIELDS_PROFILE    */ "A profile table to generate static fields of the VFT header",
    /* EGR_VFT_PRI_MAP           */ "It contains the VFT pri for FCOE.",
    /* EGR_VINTF_COUNTER_TABLE   */ "Egress Virtual Port / Interface Counters",
    /* EGR_VINTF_COUNTER_TABLE_X */ "Egress Virtual Port / Interface Counters.",
    /* EGR_VINTF_COUNTER_TABLE_Y */ "Egress Virtual Port / Interface Counters.",
    /* EGR_VLAN                  */ "Vlan Membership Table for Egress",
    /* EGR_VLAN_CONTROL_1        */ "Controls Vlan Translate and VLAN membership related functions.",
    /* EGR_VLAN_CONTROL_2        */ "Controls Vlan Translate and VLAN membership related functions.",
    /* EGR_VLAN_CONTROL_3        */ "Controls Vlan Translate and VLAN membership related functions.",
    /* EGR_VLAN_COUNTER_PRI_COS_MAP */ "VLAN_COUNTER PRI_COS mapping.",
    /* EGR_VLAN_COUNTER_TABLE    */ "EGR_VLAN action counter.",
    /* EGR_VLAN_STG              */ "Egress Spanning Tree Stage Table",
    /* EGR_VLAN_TAG_ACTION_PROFILE */ "Egress VLAN Tag Action Profile Table.",
    /* EGR_VLAN_VFI_MEMBERSHIP   */ "Egress VLAN VFI member table",
    /* EGR_VLAN_X                */ "Vlan Membership Table for Egress.",
    /* EGR_VLAN_XLATE            */ "Egress Vlan Translate CAM-RAM Combined View.",
    /* EGR_VLAN_XLATE_DATA_ONLY  */ "Egress Vlan Translate Data Table only",
    /* EGR_VLAN_XLATE_ECC        */ "Egress VLAN Translate Lookup Table.",
    /* EGR_VLAN_XLATE_LP         */ "EGR_VLAN_XLATE LP Control Table.",
    /* EGR_VLAN_XLATE_MASK       */ "Egress Vlan Translate CAM-RAM Combined View with mask for ports 0-9. FeatureSpecific-Ethernet",
    /* EGR_VLAN_XLATE_ONLY       */ "Egress Vlan Translate CAM only.",
    /* EGR_VLAN_XLATE_OVERFLOW   */ "Overflow for Egress Vlan Translate Lookup Table. FeatureSpecific-Ethernet.",
    /* EGR_VLAN_XLATE_SCRATCH    */ "Egress Vlan Translate Scratch Table. FeatureSpecific-Ethernet - Useful for software to keep temproary entries.",
    /* EGR_VLAN_Y                */ "Vlan Membership Table for Egress.",
    /* EGR_VNTAG_ETAG_PROFILE    */ "VNTAG or ETAG Profile Pointer.",
    /* EGR_VPLAG_GROUP           */ "Egress VP group table.",
    /* EGR_VPLAG_MEMBER          */ "Egress VP member table.",
    /* EGR_VP_VLAN_MEMBERSHIP    */ "Egress VP VLAN member table.",
    /* EGR_VP_VLAN_MEMBERSHIP_ACTION_A */ "Action of whether to prepend/append data from remap table to the key into hash A of EGR_VP_VLAN_MEMBERSHIP table.",
    /* EGR_VP_VLAN_MEMBERSHIP_ACTION_B */ "Action of whether to prepend/append data from remap table to the key into hash B of EGR_VP_VLAN_MEMBERSHIP table.",
    /* EGR_VP_VLAN_MEMBERSHIP_ECC */ "ECC Table for Egress VP VLAN Member Table.",
    /* EGR_VP_VLAN_MEMBERSHIP_REMAP_A */ "Remapping table for hash key into hash A of EGR_VP_VLAN_MEMBERSHIP table.",
    /* EGR_VP_VLAN_MEMBERSHIP_REMAP_B */ "Remapping table for hash key into hash B of EGR_VP_VLAN_MEMBERSHIP table.",
    /* EGR_VSAN_INTPRI_MAP       */ "Indexed by 3b IPRI + 2b COLOR + 3b FCOE_VSAN_PRI_MAPPING_PROFILE.",
    /* EGR_VXLAN_HEADER          */ "Direct index table, provides VXLAN header fields:  Flags & Reserved fields. Used during ENCAP.",
    /* EGR_VXLT_ACTION_TABLE_A   */ "Remapping Table for Ingress VXLT Hash (key+1).",
    /* EGR_VXLT_ACTION_TABLE_B   */ "Remapping Table for Ingress VXLT Hash (key+1).",
    /* EGR_VXLT_REMAP_TABLE_A    */ "Remapping Table for Ingress VXLT Hash (key+1).",
    /* EGR_VXLT_REMAP_TABLE_B    */ "Remapping Table for Ingress VXLT Hash (key+1).",
    /* EGR_WLAN_ATTRIBUTES       */ "Used for mapping incoming PBE MH_PRIORITY into a new MH_PRIORITY/TC For Higig+/Higig2 header, on a per-egress-port basis.",
    /* EGR_WLAN_DVP              */ "Egress WLAN Destination Virtual Port Table, FeatureSpecific-Wireless",
    /* EGR_XMIT_START_COUNT      */ "Determine the transmit start count threshold for cut-through and SAF mode",
    /* EGR_XMIT_START_COUNT_PIPE0 */ "Determine the transmit start count threshold for cut-through and SAF mode",
    /* EGR_XMIT_START_COUNT_PIPE1 */ "Determine the transmit start count threshold for cut-through and SAF mode",
    /* EGR_XMIT_START_COUNT_PIPE2 */ "Determine the transmit start count threshold for cut-through and SAF mode",
    /* EGR_XMIT_START_COUNT_PIPE3 */ "Determine the transmit start count threshold for cut-through and SAF mode",
    /* EG_FDM_PORT_REGS          */ "FDM Port Registers for Source Knockout",
    /* EG_FD_FCT                 */ "FD FCT Memory",
    /* EG_FD_FIFO_COUNT          */ "Admission Control FIFO Counter",
    /* EG_FD_FIFO_THRESH         */ "Admission Control FIFO Threshold",
    /* EG_FD_FIFO_THRESH_OFFSET_RED */ "Admission Control FIFO Threshold Color Red Offset",
    /* EG_FD_FIFO_THRESH_OFFSET_YELLOW */ "Admission Control FIFO Threshold Color Red Offset",
    /* EG_FD_FIFO_THRESH_RESET_OFFSET */ "Admission Control FIFO Reset offset value",
    /* EG_FD_GMT                 */ "FD GMT Memory",
    /* EG_FD_MDB                 */ "FD MDB Memory",
    /* EG_FD_PER_PORT_DROP_COUNT1 */ "Per port drop counter set 1 (out of 2)",
    /* EG_FD_PER_PORT_DROP_COUNT2 */ "Per port drop counter set 2 (out of 2)",
    /* EG_FD_SVT                 */ "FD SVT Memory",
    /* EH_MASK_PROFILE           */ "EH Tag Mask Profile. Used in conjunction with the HG_EH_TAG_MODIFY action",
    /* EH_MASK_PROFILE_PIPE0     */ "EH Tag Mask Profile. Used in conjunction with the HG_EH_TAG_MODIFY action",
    /* EH_MASK_PROFILE_PIPE1     */ "EH Tag Mask Profile. Used in conjunction with the HG_EH_TAG_MODIFY action",
    /* EH_MASK_PROFILE_PIPE2     */ "EH Tag Mask Profile. Used in conjunction with the HG_EH_TAG_MODIFY action",
    /* EH_MASK_PROFILE_PIPE3     */ "EH Tag Mask Profile. Used in conjunction with the HG_EH_TAG_MODIFY action",
    /* EMIRROR_CONTROL           */ "Egress mirror bitmap register, FeatureSpecific-Ethernet.",
    /* EMIRROR_CONTROL1          */ "Egress mirror bitmap register, FeatureSpecific-Ethernet.",
    /* EMIRROR_CONTROL2          */ "Egress mirror bitmap register, FeatureSpecific-Ethernet.",
    /* EMIRROR_CONTROL3          */ "Egress mirror bitmap register, FeatureSpecific-Ethernet.",
    /* EM_MTP_INDEX              */ "Egress Mirror to Port Table",
    /* ENDPOINT_COS_MAP          */ "Provides a mapped cos offset value to be added to the final uc queue value. index by {ENDPOINT_COS_MAP_PROFILE_INDEX, INT_PRI}",
    /* ENDPOINT_QUEUE_MAP        */ "Endpoint Queue Map table.",
    /* EPC_LINK_BMAP             */ "Link status register under software control.",
    /* EPNI_ACE_TABLE            */ "The ACE table maps ACE-pointer to a program selection and variable. The table contains 4K entries, each entry contains 2-bit program selection variable and 8-bit program variable. The index to each entry in the table is ACE-pointer11:0 with ACE-pointer11:1 setting the register address and ACE-pointer0 selects one of two entries in that register.",
    /* EPNI_ACE_TO_FHEI          */ "The ACE to Forwarding Header Editing Information (FHEI) table contains 512 entries, each entry maps an ACE-pointer to an FHEI information. Every register includes a single entry with information about the FHEI.",
    /* EPNI_ACE_TO_OUT_LIF       */ "The ACE to Out-LIF table contains 1K entries, each entry maps an ACE-pointer to an Out-LIF. Every register  includes two 16-bit entries, thus ACE-Pointer9:1 sets the register address in the table, and ACE-Pointer0 set the entry number within the field.",
    /* EPNI_ACE_TO_OUT_PP_PORT   */ "The ACE to Out-PP-Port table contains 4K entries, each entry maps an ACE-pointer to an Out-PP-Port. Every register includes four 8-bit entries, thus ACE-Pointer11:2 sets the register address in the table, and ACE-Pointer1:0 set the entry number within the field.",
    /* EPNI_ACM                  */ "Context Memory for packet alignment control",
    /* EPNI_AC_ENTRY_WITH_DATA_FORMAT */ "Encapsulation-Stack AC Format",
    /* EPNI_AC_FORMAT            */ "Encapsulation-Stack AC Format",
    /* EPNI_AC_FORMAT_WITH_DATA  */ "Encapsulation-Stack AC Format",
    /* EPNI_AC_HALF_ENTRY_FORMAT */ "Encapsulation-Stack AC Format",
    /* EPNI_ALIGNER_MIRR_QP_TO_CHANNEL_MAP */ "Map Mirror QP to output channel (8 bits)",
    /* EPNI_ALIGNER_QP_TO_CHANNEL_MAP */ "Map QP to output channel (8 bits)",
    /* EPNI_ALIGNER_QP_TO_CMIC_MAP */ "Map QP to cpu cos and source port.\n Relevant for traffic for Cmic only",
    /* EPNI_APPLET_MEMORY        */ "Holds all the packets that will be injected in this applet transaction",
    /* EPNI_ASM                  */ "Context Memory for packet alignment data (remind segment)",
    /* EPNI_CFG_ETHER_TYPE_INDEX */ "Used for ROO application; holds the ether_type, tpid_0, tpid_1 for the native Eth. Accessed with Ether-Type-Index (4bits) field which is a part of the new ARP-LL entry format.",
    /* EPNI_CFG_MAPPING_TO_OAM_PCP */ "This table maps the TC2:0oam-lif-profile1:0 to oam-pcp. There are 32 possible values. (Jericho-BF15)",
    /* EPNI_COS_PROFILE_TABLE    */ "This table is used to map each cos-profile (16 profiles) recieved from the PMF to TC  DP parameters.",
    /* EPNI_COUNTER_SOURCE_MAP   */ "Counter pointer source configuration table. The table maps counter mode and LIF range to the source of a counter pointer, for both counters 0 and 1. The table contains 256 entries, each entry is addressed by Counter-0-Mode is LIF, Counter-1-Mode is LIF, LIF-0-Range , LIF-1-Range, LIF-2-Range. The two msb of an address, Counter-0-Mode is LIF, Counter-1-Mode is LIF check if Counter 0/1-Mode are equal to LIF. If so, the corresponding bit is set. Otherwise  it is zero. A counter source may be either ...",
    /* EPNI_CPM                  */ "CPU FIFO SEG DATA Memory",
    /* EPNI_DATA_FORMAT          */ "Encapsulation-Stack Data Format",
    /* EPNI_DSCP_EXP_TO_PCP_DEI  */ "The DSCP to PCP-DEI table contains 4K entries, each entry maps DSCP-EXP to PCP-DEI. Every register contains 8 entries.A table index is set by Header-Code, Out-DSCP-EXP7:3. Out-DSCP-EXP2:0 sets the entry number in a register.",
    /* EPNI_DSCP_REMARK          */ "When handling the forwarding header and the packets header code is IPv4 or IPv6, this mapping table is used to map the 8-bit value to Out-DSCP-EXP field.\n                   o The entry address is set by IPv4|6 ,Drop-Precedence, Profile , In-DSCP-EXP 7:2\n                   , and the entry number within the address is set by In-Dscp-Exp1:0. Meaning, there are 8K rows in the table, each with four 8-bit entries.",
    /* EPNI_DSP_PTR_MAP          */ "The PP-DSP parameter for unicast packet is received from FTMH header, while for Egress multicast copy its generated by the multicast replication machine.\n                   This table maps the PP-DSP field to the following parameters:\n                    Out-TM-Port\n                    Out-PP-Port\n                    Destination-System-Port",
    /* EPNI_EEDB_BANK            */ "The encapsulation data is maintained in an Egress Encapsulation Database (EEDB)that is specific per egress device. This database contains tunneling and link layer information.\n                   The EEDB is built from 16 banks, each of them of 2K entries. Each entry if pointed by an Out-LIF or EEI.  Every address (tables row) may include one or two entries.",
    /* EPNI_EGRESS_MEMBERSHIP    */ "Egress membership table configuration table, correlating each OTM port with a VLAN or VSI. Each address corresponds with a VLAN/VSI (0 through 4095), with identical fields definitions per entry.",
    /* EPNI_ESEM_MANAGEMENT_REQUEST */ "Management requests",
    /* EPNI_ESEM_STEP_TABLE      */ "Step Table\n                   (The Item bit ordering matches must emc_include.v)",
    /* EPNI_ETH_OAM_OPCODE_MAP   */ "This table is used for mapping OAM-Header.Opcode to internal opcode used in the device.\n                   The index to the table is OAM-Header.Opcode7:0 and the result is 4 bits oam-opcode. The oam-opcode is used in accessing OAM-Trap-Engine by ETPP.",
    /* EPNI_ETPP_BYPASS          */ "ETPP Bypass Memory",
    /* EPNI_ETPP_BYPASS_LSB      */ "ETPP Bypass Memory of 128B LSB.",
    /* EPNI_EVEC_TABLE           */ "The Packet-Is-MEF-L2CP (1), Incoming-Tag-Format (4), VLAN-Edit-Profile (4) to Egress VLAN Editing Command (EVEC) table contains 512 entries, each entry maps an Packet-Is-MEF-L2CP (1), Incoming-Tag-Format (4), VLAN-Edit-Profile (4) o an egress VLAN editing command. Every register includes two entries with information about the command. Each entry includes 7 fields as described below.",
    /* EPNI_EVENTORM             */ "Eventor FIFO SEG DATA Memory",
    /* EPNI_EXP_REMARK           */ "When handling the forwarding header and the packets header code is MPLS, this mapping table is used to map the 8-bit value to Out-DSCP-EXP field.\n                   The entry address is set by  Drop-Precedence, Remark-Profile, In-Dscp-Exp2, and the entry number within the address is set by In-Dscp-Exp1:0. Meaning, there are 128 rows in the table, each with four 8-bit entries.",
    /* EPNI_HEADER_MAP           */ "This table is used when the system works in Petra FTMH system header format mode.\n                   The table is used to select the source of the parser records fields from different location in packet system header.",
    /* EPNI_IFC_2_NIF_PORT_MAP   */ "Map EGQ/EPNI internal interface number to NIF port number 1.  pm_num(4),\n 2. pm_internal_port(4),\n 3. bicast_valid(1),\n 4. bicast_pm_num(4),\n 5. bicast_pm_internal_port(4)\n 6. nif_port(7)",
    /* EPNI_IPSEC_SEG            */ "IPSEC FIFO SEG DATA Memory",
    /* EPNI_IPV4_TUNNEL_FORMAT   */ "Encapsulation-Stack IPv4 Tunnel Format",
    /* EPNI_IP_TOS_MARKING       */ "This table is used in etpp_forwarding, it holds TOS and Exp Marking and it is relevant for IP or MPLS packets when the in-lif profile enables it (see register EnableDscpMarking).  The access (address) to this table is FTMH.TC(3), DP*(1), FHEI.In-LIF-Profile(2), Out-PP-Port.Marking-Profile(2)",
    /* EPNI_IP_TOS_MARKING_TABLE */ "This table is used in etpp_forwarding, it holds TOS and Exp Marking and it is relevant for IP or MPLS packets when the in-lif profile enables it (see register EnableDscpMarking).  The access (address) to this table is: when DP-Mapping enabled- FTMH.TC(3), DP*(1), FHEI.In-LIF-Profile(2), OutLIF.ReMark-Profile(4), when DP-Mapping disabled-  FTMH.TC(3), DP(2), FHEI.In-LIF-Profile(2), OutLIF.ReMark-Profile(3)",
    /* EPNI_ISID_TABLE           */ "When a packets encapsulation mode is GRE-4B or GRE-8B, then a GRE header is constructed and added to packet-header. Part of it is a mapping of a key that is a concatenation of VSI.I-SID , LB-Key. The value of VSI.I-SID is given by this table, which maps VSI to I-SID value. This value is also used during link layer construction when out-PP port is PBP where I-SID is set to the value given in this table.\n                   Each entry in this table maps one VSI value to I-SID.",
    /* EPNI_IVEC_TABLE           */ "Ingress VLAN editing command.\n                   This table has 64 entries. It is pointed by FHEI.Ingress-VLAN-Edit-Command",
    /* EPNI_LBG                  */ "LBG FIFO memory",
    /* EPNI_LBG_CALENDAR         */ "LBG arbitration calendar table",
    /* EPNI_LBG_FIFO_CONFIG      */ "The Index of the memory is the LBG FIFO number.\n There are 6 link bonding groups. For each LBG there are  two FIFOs. All FIFOs share the same 384 entries memory. This table contains the Link Bonding FIFOs configuration.\n The FIFOs corresponding to LBG0 are FIFO 0 and 1, the FIFOs corresponding to LBG1 are FIFO 2 and 3, and so on.",
    /* EPNI_LBG_MAPPING          */ "Per LBG group bitmap mapping of modems",
    /* EPNI_LBG_MODEM_CONFIG     */ "Per LBG Modem Configuration memory",
    /* EPNI_LBG_REM              */ "LBG Remainder  memory",
    /* EPNI_LFEM_FIELD_SELECT_MAP */ "LFEM field selct map",
    /* EPNI_LINK_LAYER_OR_ARP_FORMAT */ "Encapsulation-Stack Link Layer or ARP Format",
    /* EPNI_LINK_LAYER_VLAN_PROCESSING_LLVP */ "The Link Layer VLAN Processing (LLVP) table contains 256 entries, each entry maps a concatenation of Out-PP-Port.LLVP-Profile(3) , Packet-Tag-Format(5) to VLAN edit command parameters. Each field in this table represents such a parameter.",
    /* EPNI_LINK_P_16_FIFO       */ "LinkP16Fifo",
    /* EPNI_LINK_P_22_FIFO       */ "LinkP22Fifo",
    /* EPNI_LINK_P_9_FIFO        */ "LinkP9Fifo",
    /* EPNI_LLVP_TABLE           */ "The Link Layer VLAN Processing (LLVP) table contains 256 entries, each entry maps a concatenation of Out-PP-Port.LLVP-Profile(3) , Packet-Tag-Format(5) to VLAN edit command parameters. Each field in this table represents such a parameter.",
    /* EPNI_MAP_HEADER_CODE_TO_MPLS_LABEL */ "Map header code to mpls label. Use the label from this table when ReservedMplsProfileTable.LabelType == 2",
    /* EPNI_MAX_LATENCY_TRACK    */ "The ETPP measures latency from the packet OAM-TS extension.\n In this memory the 8 maximal latency's are kept, with the pointer associated with them",
    /* EPNI_MEM_520000           */ "INTERNAL",
    /* EPNI_MEM_600000           */ "INTERNAL",
    /* EPNI_MEM_610000           */ "INTERNAL",
    /* EPNI_MEM_620000           */ "INTERNAL",
    /* EPNI_MEM_630000           */ "INTERNAL",
    /* EPNI_MEM_640000           */ "INTERNAL",
    /* EPNI_MEM_650000           */ "INTERNAL",
    /* EPNI_MEM_660000           */ "INTERNAL",
    /* EPNI_MEM_670000           */ "INTERNAL",
    /* EPNI_MEM_760000           */ "INTERNAL",
    /* EPNI_MEM_770000           */ "INTERNAL",
    /* EPNI_MEM_7000000          */ "INTERNAL",
    /* EPNI_MEM_5A0000           */ "INTERNAL",
    /* EPNI_MEM_5B0000           */ "INTERNAL",
    /* EPNI_MEM_5D0000           */ "INTERNAL",
    /* EPNI_MEM_6C0000           */ "INTERNAL",
    /* EPNI_MEM_6D0000           */ "INTERNAL",
    /* EPNI_MIRROR_PROFILE_MAP   */ "Mirroring-Profile Mapping Table.\n                   This table is used to map each mirror-profile (16 profiles) to Mirror-Command and Forward-Disable bit. Note that if Mirror-Profile = 0, no mirroring is done. The entry corresponding to Mirror-Profile = 0, should be configured to zero.",
    /* EPNI_MIRROR_PROFILE_TABLE */ "The mirror profile table maps VID index and Out-PP port to a program a mirror profile. The table contains 2K entries, each entry contains 4-bit mirror profile. The index to each register is out-PP-port, with VID-index selecting one of eight entries in that register.",
    /* EPNI_MPLS_CMD_PROFILE     */ "The MPLS command decode table is used to decode each of the MPLS commands. Each entry corresponds to an MPLS command.",
    /* EPNI_MPLS_POP_FORMAT      */ "Encapsulation-Stack MPLS Pop Format",
    /* EPNI_MPLS_PUSH_FORMAT     */ "Encapsulation-Stack MPLS Push Format",
    /* EPNI_MPLS_SWAP_FORMAT     */ "Encapsulation-Stack MPLS Swap Format",
    /* EPNI_MY_CFM_MAC_TABLE     */ "My-CFM-MAC table. The table maps My-CFM-MAC address to OAM trap engine. The table contains 256 entries, one entry per PP port.\n                   The purpose of the register to decide if to trap a packet to the OAM engine. The field  MacLsbsBitmap is a bitmap, with every bit corresponding to MAC DA7:0. If the bit corresponding with MAC DA7:0 is set and MacMsbs field in the the table is equal to MAC DA47:8 then OAM-My-CFM-MAC is set.",
    /* EPNI_NATIVE_DSCP_EXP_TO_PCP_DEI */ "The DSCP to PCP-DEI table contains 4K entries, each entry maps DSCP-EXP to PCP-DEI. Every register contains 8 entries.A table index is set by Header-Code, Out-DSCP-EXP7:3. Out-DSCP-EXP2:0 sets the entry number in a register.",
    /* EPNI_NATIVE_EVEC_TABLE    */ "The Packet-Is-MEF-L2CP (1), Incoming-Tag-Format (4), VLAN-Edit-Profile (5) to Egress VLAN Editing Command (EVEC) table contains 512 entries, each entry maps an Packet-Is-MEF-L2CP (1), Incoming-Tag-Format (4), VLAN-Edit-Profile (5) o an egress VLAN editing command. Every register includes two entries with information about the command. Each entry includes 7 fields as described below.",
    /* EPNI_NATIVE_LINK_P_16_FIFO */ "NativeLinkP16Fifo",
    /* EPNI_NATIVE_LINK_P_9_FIFO */ "NativeLinkP9Fifo",
    /* EPNI_NATIVE_PCP_DEI_MAP   */ "The PCP-DEI table contains 1024 entries, each entry maps PCP-DEI profile and PCP-DEI map key to primary VLAN bits15:12. Every register contains 8 entries.A table index is set by PCP-DEI-Profile, PCP-DEI-Map-Key 5:3. PCP-DEI-Map-Key2:0 sets the entry number in a register.",
    /* EPNI_NATIVE_PCP_DEI_TABLE */ "The PCP-DEI table contains 1024 entries, each entry maps PCP-DEI profile and PCP-DEI map key to primary VLAN bits15:12. Every register contains 8 entries.A table index is set by PCP-DEI-Profile, PCP-DEI-Map-Key 5:3. PCP-DEI-Map-Key2:0 sets the entry number in a register.",
    /* EPNI_OAM                  */ "OAM FIFO SEG DATA Memory",
    /* EPNI_OAMM                 */ "OAM FIFO SEG DATA Memory",
    /* EPNI_OLM                  */ "OLP FIFO SEG DATA Memory",
    /* EPNI_OLPM                 */ "OLP FIFO SEG DATA Memory",
    /* EPNI_OUTLIF_PROFILE_TO_PRGE_DATA */ "Map Outlif-Profile fields to a 6 bit Value for PRGE Resolved Data",
    /* EPNI_OUTLIF_PROFILE_TO_PRGE_PROGRAM */ "Map Outlif-Profile fields to a 6 bit Value for PRGE Program selection",
    /* EPNI_OUTLIF_TO_OAM_LIF_PROFILE_MAP */ "This table maps the outlif-profile (6) from the eedb entry to oam-profile (2). The oam-profile is used to resolve oam-pcp in etpp_term. There are 64 oam-profiles. (Jericho-BF15)",
    /* EPNI_OUT_RIF_FORMAT       */ "Encapsulation-Stack Out-RIF Format",
    /* EPNI_PACKETPROCESSING_PORT_CONFIGURATION_TABLE */ "Per port packet processing configuration table, allowing configuring port-related PP features for each one of the 256 ports. Each address corresponds with a port, with identical fields definitions per entry.",
    /* EPNI_PACKET_PROCESSING_PORT_CONFIGURATION_TABLE_PP_PCT */ "Per port packet processing configuration table, allowing configuring port-related PP features for each one of the 256 ports. Each address corresponds with a port, with identical fields definitions per entry.",
    /* EPNI_PARSERA_FIFO         */ "FFC instructions and enable",
    /* EPNI_PARSERA_LOAD_CHUNK_SELECTION */ "Load chunk selection instructions",
    /* EPNI_PARSERA_LOAD_SELECT_ARRAY_ENTRY_BY_VAR_INDEX */ "Load chunk selection instructions",
    /* EPNI_PARSERA_LOAD_SELECT_CHUNK_LITERARY */ "Load chunk selection instructions",
    /* EPNI_PARSERA_LOAD_SELECT_HEADER_BY_CONST_INDEX */ "Load chunk selection instructions",
    /* EPNI_PARSERA_LOAD_SELECT_HEADER_BY_VAR_INDEX */ "Load chunk selection instructions",
    /* EPNI_PARSERA_UPDATE_INSTRUCTIONS */ "update instructions\n instructions 0-4 are accessed from p0 and instructions 5-9 are accessed from p1",
    /* EPNI_PARSER_FIFO          */ "ParserFifo",
    /* EPNI_PARSER_PEM_CAM       */ "Parser Pem Cam is used to override the pem-context. It is located at the PRP. Is there is a match and (context-valid == 1) and the packet (is_applet==0) than the prp needs to override the context value received from the applet with the context value recived from the CAM.",
    /* EPNI_PCP_DEI_DP_MAPPING_TABLE */ "PCP-DEI Mapping Table for IVE, maps DP+INLIF_Profile+Selected_PCP_DEI to new PCP-DEI",
    /* EPNI_PCP_DEI_MAP          */ "The PCP-DEI table contains 1024 entries, each entry maps PCP-DEI profile and PCP-DEI map key to primary VLAN bits15:12. Every register contains 8 entries.A table index is set by PCP-DEI-Profile, PCP-DEI-Map-Key 5:3. PCP-DEI-Map-Key2:0 sets the entry number in a register.",
    /* EPNI_PCP_DEI_TABLE        */ "The PCP-DEI table contains 1024 entries, each entry maps PCP-DEI profile and PCP-DEI map key to primary VLAN bits15:12. Every register contains 8 entries.A table index is set by PCP-DEI-Profile, PCP-DEI-Map-Key 5:3. PCP-DEI-Map-Key2:0 sets the entry number in a register.",
    /* EPNI_PMF_MIRROR_PROFILE_TABLE */ "This table is used to map each mirror-profile (16 profiles) recieved from the PMF to Trap parameters. Each profile defines the following parameters: Mirror command(4), mirror enable(1), forward enable (1), mirror strength (2), forward strength (2)",
    /* EPNI_PMM                  */ "Mirroring FIFO SEG DATA Memory",
    /* EPNI_PP_COUNTER_TABLE     */ "Per port counter configuration table, allowing configuring counter features for each one of the 256 ports. Each address corresponds with a port, with identical fields definitions per entry.",
    /* EPNI_PP_PCT               */ "Per port packet processing configuration table, allowing configuring port-related PP features for each one of the 256 ports. Each address corresponds with a port, with identical fields definitions per entry.",
    /* EPNI_PP_REMARK_PROFILE    */ "This table defines the remark-profile per port. It is used in etpp_forwarding to determine new ToSxp for IPMPLS headers",
    /* EPNI_PRGEA_FIFO           */ "FFC instructions and enable",
    /* EPNI_PRGEA_LOAD_CHUNK_SELECTION */ "Load chunk selection instructions",
    /* EPNI_PRGEA_LOAD_SELECT_ARRAY_ENTRY_BY_VAR_INDEX */ "Load chunk selection instructions",
    /* EPNI_PRGEA_LOAD_SELECT_CHUNK_LITERARY */ "Load chunk selection instructions",
    /* EPNI_PRGEA_LOAD_SELECT_HEADER_BY_CONST_INDEX */ "Load chunk selection instructions",
    /* EPNI_PRGEA_LOAD_SELECT_HEADER_BY_VAR_INDEX */ "Load chunk selection instructions",
    /* EPNI_PRGEA_UPDATE_INSTRUCTIONS */ "update instructions\n instructions 0-4 are accessed from p0 and instructions 5-9 are accessed from p1",
    /* EPNI_PRGE_DATA            */ "Programmable editor data",
    /* EPNI_PRGE_INSTRUCTION_0   */ "Programmable Editor (PRGE) instruction 0",
    /* EPNI_PRGE_INSTRUCTION_1   */ "Programmable Editor (PRGE) instructions 1 through 11",
    /* EPNI_PRGE_INSTRUCTION_2   */ "Programmable Editor (PRGE) instructions 1 through 11",
    /* EPNI_PRGE_INSTRUCTION_3   */ "Programmable Editor (PRGE) instructions 1 through 11",
    /* EPNI_PRGE_INSTRUCTION_4   */ "Programmable Editor (PRGE) instructions 1 through 11",
    /* EPNI_PRGE_INSTRUCTION_5   */ "Programmable Editor (PRGE) instructions 1 through 11",
    /* EPNI_PRGE_INSTRUCTION_6   */ "Programmable Editor (PRGE) instructions 1 through 11",
    /* EPNI_PRGE_INSTRUCTION_7   */ "Programmable Editor (PRGE) instructions 1 through 11",
    /* EPNI_PRGE_INSTRUCTION_8   */ "Programmable Editor (PRGE) instructions 1 through 11",
    /* EPNI_PRGE_INSTRUCTION_9   */ "Programmable Editor (PRGE) instructions 1 through 11",
    /* EPNI_PRGE_INSTRUCTION_10  */ "Programmable Editor (PRGE) instructions 1 through 11",
    /* EPNI_PRGE_INSTRUCTION_11  */ "Programmable Editor (PRGE) instructions 1 through 11",
    /* EPNI_PRGE_INSTRUCTION_12  */ "Programmable Editor (PRGE) instructions 1 through 13",
    /* EPNI_PRGE_INSTRUCTION_13  */ "Programmable Editor (PRGE) instructions 1 through 13",
    /* EPNI_PRGE_PROGRAM         */ "Programmable editor program",
    /* EPNI_PRGE_PROGRAM_SELECTION_CAM */ "Programmable Editor (PRGE) program selection CAM. The CAM has 24 entries, representing 24 rules, which map the CAM entry to one of 16 programs. Each CAM entry creates such a program key.",
    /* EPNI_PRM                  */ "RCY FIFO Memory",
    /* EPNI_PROTECTION_PTR_TABLE */ "Specify tunnel state per protection pointer. The Pointer is read from the EEDB for banks that support this feature.\n                   Bits 14:6 in the address are used to select the row, bits5:0 select the tunnel state.",
    /* EPNI_PRP_P_10_FIFO        */ "PrpP10Fifo",
    /* EPNI_PRP_P_12_FIFO        */ "PrpP12Fifo",
    /* EPNI_PRP_P_6_FIFO         */ "",
    /* EPNI_PRP_P_9_FIFO         */ "",
    /* EPNI_PTM                  */ "Trap FIFO SEG DATA Memory",
    /* EPNI_REC_CMD_CONF         */ "Per recycle command configuration",
    /* EPNI_REMARK_IPV4_TO_DSCP  */ "Map Ipv4 ramek key to Dscp (8)\n                   Encapsulation-Editor\n                   Note: 4 values per entry",
    /* EPNI_REMARK_IPV4_TO_EXP   */ "Map Ipv4 ramek key to Exp(3)\n                   Encapsulation-Editor\n                   Note: 8 values per entry",
    /* EPNI_REMARK_IPV6_TO_DSCP  */ "Map Ipv6 ramek key to Dscp (8)\n                   Encapsulation-Editor\n                   Note: 4 values per entry",
    /* EPNI_REMARK_IPV6_TO_EXP   */ "Map Ipv4 ramek key to Exp(3)\n                   Encapsulation-Editor\n                   Note: 8 values per entry",
    /* EPNI_REMARK_MPLS_TO_DSCP  */ "Map MPLS remark key to DSCP (8)",
    /* EPNI_REMARK_MPLS_TO_EXP   */ "Map MPLS remark key to EXP (3)",
    /* EPNI_RESERVED_MPLS_PROFILE_TABLE */ "This table maps mpls ReservedMplsProfile from MplsCmdProfile table to parameters used to build a single reserved mpls label. The reserved labels can be built when the action processed by the encapsulation module is MPLS-Push and the ReservedMplsProfile points to a valid entry in this table. The type of the reserved label is determined by the LabelType.",
    /* EPNI_ROO_VSI              */ "This table is used to resolve the number of tags on the native Eth in Routing-Over-Overlay packets. The number of tags is defined per VSI.\n                   There are 8 values in each row, corresponding to 8 VSIs.\n                   VSI14:3 - pointer to mem, VSI2:0 - bit select.",
    /* EPNI_SATM                 */ "SAT FIFO SEG DATA Memory",
    /* EPNI_SAT_SEG              */ "SAT FIFO SEG DATA Memory",
    /* EPNI_SPANNING_TREE_PROTOCOL_STATE_MEMORY_STP */ "The topology ID to Spanning Tree protocol state table contains 64 entries, each entry maps a topology ID, retrieved from Ingress topology-ID table to per PP-Port STP state. Every register is a bitmap, each bit corresponding to an out-PP port. The regier address is pointed by topology ID.",
    /* EPNI_STP                  */ "The topology ID to Spanning Tree protocol state table contains 64 entries, each entry maps a topology ID, retrieved from Ingress topology-ID table to per PP-Port STP state. Every register is a bitmap, each bit corresponding to an out-PP port. The regier address is pointed by topology ID.",
    /* EPNI_TRILL_FORMAT         */ "Encapsulation-Stack TRILL Format",
    /* EPNI_TRILL_FORMAT_B_0     */ "Encapsulation-Stack TRILL Format",
    /* EPNI_TX_TAG_TABLE         */ "The Outer-VID to VLAN tag manipulation table contains 4K entries, each entry maps an Outer-VID to VLAN tag manipulation. The manipulation manifests as a selection if to transmit the outer-VID or not. Every register is a bitmap, each bit corresponding to an out-PP port. The regier address is pointed by the Outer-VID.",
    /* EPRE_CPUM                 */ "CPU FIFO SEG DATA Memory",
    /* EPRE_HPMM                 */ "High priority Mirroring FIFO SEG DATA Memory",
    /* EPRE_HPM_SEG_SIZE_A       */ "HP Mirroring FIFO SEG SIZE A DATA Memory",
    /* EPRE_HPM_SEG_SIZE_B       */ "HP Mirroring FIFO SEG SIZE B DATA Memory",
    /* EPRE_LMM                  */ "Lossless Mirroring FIFO SEG DATA Memory",
    /* EPRE_LMM_SEG_SIZE_A       */ "Lossless Mirroring FIFO SEG SIZE A DATA Memory",
    /* EPRE_LMM_SEG_SIZE_B       */ "Lossless Mirroring FIFO SEG SIZE B DATA Memory",
    /* EPRE_LPMM                 */ "Low priority Mirroring FIFO SEG DATA Memory",
    /* EPRE_LPM_SEG_SIZE_A       */ "LP Mirroring FIFO SEG SIZE A DATA Memory",
    /* EPRE_LPM_SEG_SIZE_B       */ "LP Mirroring FIFO SEG SIZE B DATA Memory",
    /* EPRE_RCYM                 */ "RCY FIFO Memory",
    /* EPS_CAL_CAL_INDX_MUX      */ "Calendar of calendar shaper.",
    /* EPS_DPM                   */ "TC- Cast WFQ scheduler counters memory.",
    /* EPS_DPM_8P_DEQ            */ "EIR WFQ scheduler counters memory. Read in DEQ pipe",
    /* EPS_DPM_8P_SCH            */ "EIR WFQ scheduler counters memory. Read in EPS port scheduler pipe",
    /* EPS_DWM                   */ "The table contains 512 entries, one entry per Q-Pair. Each entry defines the weights of the UC and MC queues connected to this Q-Pair. Weight of 0 for one queue indicates that this qyeye has SP over the other. When both have equal weights, this implies simple RR. Maximum weight difference is 255:1.\n Rate Calculation:\n UC rate = (Q-Pair rate) * (MC weight) / (UC weight + MC weight)\n MC rate = (Q-Pair rate) * (UC weight) / (UC weight + MC weight)",
    /* EPS_DWM_8P                */ "The table consist from 64 entries, one entry per Port Scheduler (group of 8 Q-Pairs). Defines the weights of the 8 traffic class groups (TCG) connected to this scheduler. Enables WFQ and SP relation between the 8 TCGs. Weight of 0 for a class indicates that this class has SP over the other classes. When all have equal weights, this implies simple RR. Maximum weight difference is 255:1. the lower the rate the higher the bandwidth.\n Rate Calculation:\n TCG(i) rate = (WFQ Total Rate) / (TCG(i) weigh ...",
    /* EPS_EPS_PRIO_MAP          */ "Mapping each priority (Q-pair) to TCG.\n This table contains 64 entries. One entry per Port Scheduler (a queue group of 8 Q-Pairs).\n Each queue group is configured by PsMode register as either:\n  One Eight-Priority ETM-Port (8P-Port)\n  Two Four-Priority ETM-Port (4P-Port)\n  Four Two-Priority ETM-Ports (2P-Port)\n  Eight One-Priority ETM-Ports (1P-Port)\n This register is relevant only when the corresponding queue group is working in 8P-Port or 4P-Port mode. In this mode, this register defines for e ...",
    /* EPS_HEADR_CMPNS_CAL_HP_CBM */ "Header Cmpnsensation Credit Balance Memory. This memory holds the credit balance per calendar.",
    /* EPS_HEADR_CMPNS_CAL_LP_CBM */ "Header Cmpnsensation Credit Balance Memory. This memory holds the credit balance per calendar.",
    /* EPS_HEADR_CMPNS_OTM_HIGH_CBM */ "Header Cmpnsensation Credit Balance Memory. This memory holds the credit balance per QP base high priority",
    /* EPS_HEADR_CMPNS_OTM_LOW_CBM */ "Header Cmpnsensation Credit Balance Memory. This memory holds the credit balance per QP base low priority",
    /* EPS_HEADR_CMPNS_QP_CBM    */ "Header Cmpnsensation Credit Balance Memory. This memory holds the credit balance per QP",
    /* EPS_HEADR_CMPNS_TCG_CBM   */ "Header Cmpnsensation Credit Balance Memory. This memory holds the credit balance per TCG.",
    /* EPS_HEADR_CMPNS_WFQ_CAST_CBM */ "Header Cmpnsensation Credit Balance Memory. This memory holds the credit balance per Cast counter.",
    /* EPS_HEADR_CMPNS_WFQ_TCG_CBM */ "Header Cmpnsensation Credit Balance Memory. This memory holds the credit balance per TCG counter.",
    /* EPS_IFC_CFG               */ "Configuration per IFC port (0-31)",
    /* EPS_IFC_CFG_2             */ "Configuration per IFC port (32-63)",
    /* EPS_OTM_CALENDAR_CRDT_TABLE */ "OTM Calendar credit table",
    /* EPS_OTM_CFG               */ "Configuration per OTM port (0-255)",
    /* EPS_OTM_CFG_2             */ "Configuration per OTM port (256-511)",
    /* EPS_OTM_HIGH_CAL_CRDT_BALANCE */ "Credit Balance Memory for calendar of High priority ports. This memory holds the credit balance of the OTM calendar shapers",
    /* EPS_OTM_HIGH_CRDT_BALANCE */ "Credit Balance Memory for High peiority ports. This memory holds the credit balance of the OTM shapers",
    /* EPS_OTM_HP_CRDT_TABLE     */ "OTM HP  credit table",
    /* EPS_OTM_HP_PPC_DB         */ "Hold the data base (current mask and current index) of the high priority OTM schedular PPC",
    /* EPS_OTM_LOW_CAL_CRDT_BALANCE */ "Credit Balance Memory for calendar of Low priority ports. This memory holds the credit balance of the OTM calendar shapers",
    /* EPS_OTM_LOW_CRDT_BALANCE  */ "Credit Balance Memory for Low peiority ports. This memory holds the credit balance of the OTM shapers",
    /* EPS_OTM_LP_CRDT_TABLE     */ "OTM LP credit table.\n Mist be configured same as OtmHpCrdtTable !!!!",
    /* EPS_OTM_LP_PPC_DB         */ "Hold the data base (current mask and current index) of the low priority OTM schedular PPC",
    /* EPS_OTM_SHAPER_LENGTH     */ "Egress Shaper Confgiuration.",
    /* EPS_OTM_TOTAL_CRDT_BALANCE */ "Credit Balance Memory for ports. This memory holds the credit balance of the OTM shapers",
    /* EPS_PQP_NIF_PORT_MUX      */ "Round robin for egress interfaces in interface selection scheduler in EPS",
    /* EPS_QP_CBM                */ "Credit Balance Memory. This memory holds the credit balance per Q-Pair.",
    /* EPS_QP_CFG                */ "Configuration per Q pair (0-255)",
    /* EPS_QP_CFG_2              */ "Configuration per Q pair (256-511)",
    /* EPS_QP_CREDIT_TABLE       */ "Q-Pairs Shaper credit table",
    /* EPS_TCG_CBM               */ "Credit Balance Memory. This memory holds the credit balance per TCG.",
    /* EPS_TCG_CFG               */ "Configuration per TCG port (0-255)",
    /* EPS_TCG_CFG_2             */ "Configuration per TCG port (256-511)",
    /* EPS_TCG_CREDIT_TABLE      */ "TCG Shaper credit table",
    /* EP_CLASS_RESOLUTION       */ "per packet drop counter",
    /* EP_CTC_RES_TABLE          */ "TCAM FOR EFPMOD.",
    /* EP_DEST_PORT_MAP          */ "EP_DEST_PORT_MAP",
    /* EP_HDR_PARSING_CTRL       */ "EP_HDR_PARSING_CTRL",
    /* EP_LENGTH_ADJ_MAP         */ "EP_LENGTH_ADJ_MAP",
    /* EP_OI2QB_MAP              */ "EP_OI2QB_MAP",
    /* EP_PREDICTIVE_RANGING     */ "table to predict the frame classification",
    /* EP_REDIRECT_EM_MTP_INDEX  */ "Egress Mirror to Port Table",
    /* EP_STATS_CTRL             */ "ep_stats_ctrl",
    /* EP_VLAN_XLATE_1           */ "",
    /* EP_VLAN_XLATE_1_HIT_ONLY  */ "Egress Vlan Translate Lookup Table. FeatureSpecific-Ethernet.",
    /* ERPP_ACCEPTABLE_FRAME_TYPE_TABLE */ "Acceptable Frame Type Table used to configure per tag format (2 tags without the priority bit) and per PP-PPCT. Acceptable-Frame-Type-Profile",
    /* ERPP_APPLET_MEMORY        */ "Holds all the packets that will be injected in this applet transaction",
    /* ERPP_CFG_ENABLE_FILTER_PER_FWD_CONTEXT */ "Each filter can be enable/disable per forwarding context.",
    /* ERPP_CFG_ENABLE_FILTER_PER_OUTLIF_PROFILE */ "Each filter can be enable/disable per outlif_profile.\n The outlif profile arrives from the GLEM result or (in case GLEM trap is required) from the per_port_table.",
    /* ERPP_CFG_ENABLE_FILTER_PER_PORT_TABLE */ "Each filter can be enable/disable per Port (DSP pointer).",
    /* ERPP_CFG_FHEI_UPPER_LAYER_TYPE_MAP */ "Mapping J-Mode Fhei-Upper-Layer-Protocol(4),Fhei-Cw(1) to J2 Fhei-Upper-Layer-Type(5)",
    /* ERPP_CFG_INLIF_DP_PROFILE_MAP */ "DP INLIF Profile for Inner and Outer PCP-DEI mapping in IVE, according to IN-LIF Profile from FHEI. 4 sets of INLIF_DP_Profile_outer,INLIF_DP_Profile_inner for 256 IN-LIF Profiles",
    /* ERPP_CFG_INLIF_PROFILE_MAPPED_IN_JERICHO_MODE */ "Backwards compatibility (for J-Mode):\n Inlif_profile = F(Updated-Forward-Code.In-LIF-Profile-Map(1), FHEI.In-LIF-Profile(2),PPH.In-LIF-Orientation(2), PPH.Reserved(2))",
    /* ERPP_CFG_INLIF_SELECTED   */ "This table gets the address (valid bits: IP-MC, J-Mode and UC/MC) and his outputs are the decisions for ILIF0-1 (2bits for each OutLIF)",
    /* ERPP_CFG_MAPPING_FWD_CONTEXT */ "Forward Context Mapping - it maps the the fwd_context(5) to:\n same_if_filter(2)\n mtu_profile(3)",
    /* ERPP_CFG_MAPPING_INLIF_PROFILE */ "Inlif Orientation - it maps the the inlif profile to incoming orientation",
    /* ERPP_CFG_MAPPING_OUTLIF_PROFILE */ "Outlif Mapping - it maps the the outlif profile to specific filters uses",
    /* ERPP_CFG_MTU              */ "Set MTU size for each profile. MTU may be up to 16KB.\n MTU is set by default to 16KB.\n Mapping the MTU Profile to MTU(14):\n MTU(14) = Map IF-MTU-Profile(3),UFC-MTU-Profile(2)",
    /* ERPP_CFG_OUTLIF_SELECTED  */ "This table gets the address (valid bits from the JOutRIF&CUD&EEI&LifExt resolutions) and his outputs are the decisions for OutLIF0-3 (1bit for Outlif0 and 2bits for the rest).",
    /* ERPP_CFG_SAME_INTERFACE_FILTER */ "The following memory is used for Source Equal Destination filter, the mem default value should filters the following cases:\n ((ports are equal) AND (both interfaces are ports)) OR ((Ports are equal) and (both interfaces are not ports) and (interfaces are equal)).\n The address to the memory is:same_interface_filter_mapped_by_inlif_profile(2), sys_port_equal(1), inlif_is_port(1), outlif_is_port(1)\n And the location of the relevant data is mapped by: lifs_equal(1), same_interface_filter_mapped_by_o ...",
    /* ERPP_COUNTER_0_TYPE_TABLE */ "Counter profile to counter type table.\n Every address in this table corresponds with counter profile 0 for counter type. Table has 8 entries.",
    /* ERPP_COUNTER_1_TYPE_TABLE */ "Counter profile to counter type table.\n Every address in this table corresponds with counter profile 1 for counter type. Table has 8 entries.",
    /* ERPP_DBG_LAST_FES         */ "Holds for each FES the last inputs and outputs",
    /* ERPP_DSP_IN_LAG_TABLE     */ "The table maps the Lag-LB-Key(8) and the Lag.Group-ID(6) to a dsp_ptr(8).\n The address for the table is the LB-Key(8),Group-ID.MSBs(4) and the 8bits data is taken by the Group-ID.LSBs(2).",
    /* ERPP_EFES_ACTION_MASK     */ "Program Instruction Table per program for all 8 keys",
    /* ERPP_EGRESS_MCDB_FORMAT_CFG */ "A configuration table for the ARR, where each line represents a specific input format.\n Each line includes the configurartion data for each field in the incoming data.\n A general look of each line:\n  f_1.size , f_1.position , f_1.prefix , f_2.size , f_2.position , f_2.prefix , ... , f_n.size , f_n.position , f_n.prefix",
    /* ERPP_EPMFCS_ACTION        */ "",
    /* ERPP_EPMFCS_TCAM_BANK     */ "This table provides access to the TCAM banks through read and write commands.\n every entry refering to a TCAM bank.",
    /* ERPP_EPMFCS_TCAM_BANK_COMMAND */ "TCAM command:\n The command can be write/read/compare. In case of write and compare the Din is needed",
    /* ERPP_EPMFCS_TCAM_BANK_REPLY */ "TCAM reply. The reply is based on the command entered before.",
    /* ERPP_EPMFCS_TCAM_ENTRY_PROTECTION */ "This table holds the ECC bits for each entry in the TCAM. The table is built from 12 tables,\n Each of them with 2K entries. Each table represents ECC bits for one corressponding TCAM.\n Note:  If the addresss lsb is clear (even address)  the entry is a key. If the addresss lsb is set (odd address)  the entry is a mask.",
    /* ERPP_EPMFCS_TCAM_HIT_INDICATION */ "",
    /* ERPP_ERPP_DEBUG_COLLECTOR_FIFO */ "ErppDebugCollectorFifo - Debug purposes",
    /* ERPP_FES_2ND_INSTRUCTION  */ "Program Instruction Table per program for all 8 keys",
    /* ERPP_FHEI_MPLS_UPPER_LAYER_PROTOCOL_TO_PES_MAPPING_TABLE */ "Mapping FHEI Upper Layer Protocol(5b) to PES Access1 parsing context (5b). Table has 32 entries.",
    /* ERPP_FIFO_DSP_1           */ "FIFO for Control sample",
    /* ERPP_FIFO_EXEM            */ "FIFO for lem lookup result",
    /* ERPP_FIFO_TCAM_PASS_1     */ "FIFO for tcam 1st pass lookup result",
    /* ERPP_FORWARD_ACTION_PROFILE_TABLE */ "Action profile table, used to configure per action profile its properties.\n Every address in this table corresponds with an action profile. Table has 8 entries.",
    /* ERPP_FORWARD_CONTEXT_METADATA_TABLE */ "Forward context metadata table.\n Every address in this table corresponds with forward context metadata, used for the counter expansion i/f. Table has 32 entries.",
    /* ERPP_FWD_CONTEXT_SELECTION_CAM */ "Fwd Context Selection - maps pph_forwarding_layer_additional_info(4), fwd_layer_type(5), ftmh_tm_action_type(2), fwd_code_port_profile(2), is_tdm(1), is_applet(1) to new fwd_Context",
    /* ERPP_INITIAL_ACTIONS_FIFO */ "FIFO for holding fields of initial key",
    /* ERPP_IVEC_TABLE           */ "Ingress VLAN editing command.\n This table has 128 entries. It is pointed by FHEI.Ingress-VLAN-Edit-Command",
    /* ERPP_LIF_EXTENSION_FORMAT_CFG */ "A configuration table for the ARR, where each line represents a specific input format.\n Each line includes the configurartion data for each field in the incoming data.\n A general look of each line:\n  f_1.size , f_1.position , f_1.prefix , f_2.size , f_2.position , f_2.prefix , ... , f_n.size , f_n.position , f_n.prefix",
    /* ERPP_L_4_OPS              */ "Used to calculate L4Ops. The relevant bit of the L4Ops is set to '1' if:\n (source_port       >= source_port_min ) &\n (source_port       <= source_port_max ) &\n (destination_port >= destination_port_min ) &\n (destination_port <= destination_port_max )\n Reset Value:\n Value: 64'h0 Mask: 64'h0",
    /* ERPP_MCDB_RESULT_FIFO     */ "Pipe the following signals:\n mcdb_recrd 110b",
    /* ERPP_NETWORK_HEADERS_FIFO */ "",
    /* ERPP_OUTLIF_PROFILE_TO_COUNTER_PROFILE_TABLE */ "Outlif profile to counter profile table, may be used as counter profile for crps.\n Every address in this table corresponds with counter profiles (0,1) for an outlif profile. Table has 8 entries.",
    /* ERPP_PARSING_START_TYPE_MAPPING_TABLE */ "Parsing start type to PES protocol type mapping table , used for mapping the (ftmh) parsing start type to Network headers PES protocol type. Table has 32 entries.",
    /* ERPP_PCP_DEI_DP_MAPPING_TABLE */ "PCP-DEI Mapping Table for IVE, maps DP+INLIF_Profile+Selected_PCP_DEI to new PCP-DEI",
    /* ERPP_PER_PORT_TABLE       */ "The PP-PER_PORT parameter for unicast packet is received from FTMH header, while for Egress multicast copy its generated by the multicast replication machine.\n Per OTM-Port Configuration Table, allowing configuring port-related features for each one of the 256 ports. Each address corresponds with a port, with identical fields definitions per entry.\n Per PP-Port packet processing configuration table, allowing configuring port-related PP features for each one of the 256 ports. Each address corresp ...",
    /* ERPP_PES_PRSE_HEADER_SIZE_MAP */ "HeaderSizeMap",
    /* ERPP_PES_PRSE_PROGRAM     */ "PesPrseProgram0..7",
    /* ERPP_PES_PRSE_TCAM        */ "PrseTcam",
    /* ERPP_PES_PRSE_TCAM_AD_A   */ "PesPrseTcamAdA0..7",
    /* ERPP_PES_PRSE_TCAM_AD_B   */ "PesPrseTcamAdB0..7",
    /* ERPP_PMF_FES_PROGRAM      */ "This table holds the Program and Key-Select for Field-Extraction-Macros.\n lines 0-31 : for FESs 0-15\n lines 32-63 : for instructions 16-31",
    /* ERPP_PMF_KBR_PASS         */ "Program Instruction Table per program for all 8 keys",
    /* ERPP_PMF_PASS_KEY_GEN     */ "Program Instruction Table per program for all 8 keys",
    /* ERPP_PP_DSP_PTR_TABLE     */ "The PP-DSP parameter for unicast packet is received from FTMH header, while for Egress multicast copy its generated by the multicast replication machine.\n This table maps the PP-DSP field to the following parameters:\n  Out-TM-Port\n  Out-PP-Port\n  Destination-System-Port",
    /* ERPP_PRP_SAVE_NETWORK_HEADER_FIFO */ "Pipe-FIFO - When getting the network header, waiting for all pipe ready.\n Wait for the data from the GLEM.\n The Depth will be 40 lines because:\n time_to_get_data_from_glem -(network_header_delay - read_req_to_glem)\n 64-(32-5)=37 so the depth will be 40 for any case that the time to the info from GLEM will be longer then 64.",
    /* ERPP_PRP_WAIT_FOR_GLEM_FIFO */ "Pipe-FIFO - Before GLEM results.\n When waiting for local OufLIF from GLEM need to delay all the Sys-Hdr data,\n The data is sent to the pipe only when the system_header arrives.",
    /* ERPP_PSG_PRSE_HEADER_SIZE_MAP */ "HeaderSizeMap",
    /* ERPP_PSG_PRSE_PROGRAM     */ "PsgPrseProgram0..3",
    /* ERPP_PSG_PRSE_TCAM        */ "PrseTcam",
    /* ERPP_PSG_PRSE_TCAM_AD_A   */ "PsgPrseTcamAdA0..3",
    /* ERPP_PSG_PRSE_TCAM_AD_B   */ "PsgPrseTcamAdB0..3",
    /* ERPP_SYSTEM_HEADERS_CONTAINER_FIFO */ "",
    /* ERPP_TM_DATA_BYPASS_FIFO  */ "Holds ERPP TM data bypass",
    /* ERPP_TM_FIELDS_FIFO       */ "Pipe the following signals:\n ERPP:\n         4'd0,\n         p0_first_packet,            //width = 1\n         p0_tc_map_profile,          //width = 4\n         p0_mc_pp_dsp,               //width = 9\n         p0_discard,                 //width = 1\n         p0_cud_outlif_or_mcdb_ptr   //width = 22\n         p0_pem_is_applet,           //width = 1\n         p0_ser                      //width = 1\n ETPP:\n         p0_sniff_profile,          //width = 4\n         p0_cos_profile,            //width = 4\n    ...",
    /* ESBS_PORT_TO_PIPE_MAPPING */ "ESBS Port to Pipe Mapping table.",
    /* ESEC_PKT_HEADER_CAPTURE_BUFFER */ "Store the first 256 bytes of a packet that is captured by the packet header capture logic. Each entry contains 16 bytes of a packet data along with the associated information such as sop, eop. This table is partitioned into four sections, with each section dedicated to one port and capable of holding up to 256-byte of a packet from that port. SOP always starts at the frist entry of each partition ( entry 0, 16, 32, or 48 )",
    /* ESEC_SA_KEY_TABLE         */ "SA Key table",
    /* ESEC_SA_TABLE             */ "SA attribute Table",
    /* ESEC_SC_TABLE             */ "ESEC SC Index (SCI) Table",
    /* ESET_TO_NODE_TYPE         */ "Burst Size Per Eset for Multicasts, 2 bits per eset, 32 field per location",
    /* ESET_TYPE_TAB             */ "2 bits eset type lookup by eset[9:0] field (overlayed with dest_sys_port_id[9:0]) in TS header for MC packlets.",
    /* ESM_ACL_ACTION_CONTROL    */ "Table used to control ESM ACL actions.",
    /* ESM_ACL_PROFILE           */ "Table used to profile ESM ACL actions.",
    /* ESM_HWTL_OBSERVED_ET_RSP  */ "Observed ext_tcam_rsp from ETU",
    /* ESM_KEY_ID_TO_FIELD_MAPPER */ "Fields Mapper for ESM Key Generator.",
    /* ESM_L3_PROTOCOL_FN        */ "ESM L3 Protocol Function table. Indexed by l3_protocol field generated in IMPLS/IPARS stage.",
    /* ESM_PKT_TYPE_ID           */ "TCAM for generating Packet Type IDs to be used in ESM Key Generation. It's recommended to have a default entry with all bits masked, say entry 255, which will match in case no other entry matches. This will give a facility of programming the default packet_type value. In case of a miss from the TCAM though, hardware will take packet_type value as zero.",
    /* ESM_PKT_TYPE_ID_DATA_ONLY */ "TCAM for generating Packet Type IDs to be used in ESM Key Generation.",
    /* ESM_PKT_TYPE_ID_ONLY      */ "TCAM for generating Packet Type IDs to be used in ESM Key Generation.",
    /* ESM_RANGE_CHECK           */ "RANGE CHECK VALUES FOR ESM Key Generation logic",
    /* ESM_SEARCH_PROFILE        */ "It is looked up with {PACKET_TYPE_ID(5),ESM_SEARCH_PROFILE_INDEX(6)} and gives out index to ESM_KEY_ID_TO_FIELD_MAPPER TABLE.",
    /* ES_ARB_TDM_TABLE          */ "MMU to EPIPE Arbiter TDM Table",
    /* ES_PIPE0_LLS_L0_CHILD_STATE1 */ "ES PIPE 0 L0 Child Status 1 Database",
    /* ES_PIPE0_LLS_L0_CHILD_WEIGHT_CFG */ "ES PIPE 0 L0 Child Weight Config Database",
    /* ES_PIPE0_LLS_L0_CHILD_WEIGHT_WORKING */ "ES PIPE 0 L0 Child Working Weight and Count Database",
    /* ES_PIPE0_LLS_L0_ERROR     */ "ES PIPE 0 L0 Error database containing difference between expected scheduling amount and actual scheduling amount",
    /* ES_PIPE0_LLS_L0_HEADS_TAILS */ "ES PIPE 0 L0 Heads and Tails Database",
    /* ES_PIPE0_LLS_L0_MEMA_CONFIG */ "ES PIPE 0 L0 Configuration Database. NOTE : This is a replicated database whose contents must match ES_PIPE0_LLS_L0_MEMB_CONFIG",
    /* ES_PIPE0_LLS_L0_MEMB_CONFIG */ "ES PIPE 0 L0 Configuration Database NOTE : This is a replicated database whose contents must match ES_PIPE0_LLS_L0_MEMA_CONFIG",
    /* ES_PIPE0_LLS_L0_MIN_NEXT  */ "ES PIPE 0 L0 Child Min Linked List Next Database",
    /* ES_PIPE0_LLS_L0_PARENT    */ "ES PIPE 0 L0 Parent Database",
    /* ES_PIPE0_LLS_L0_PARENT_STATE */ "ES PIPE 0 L0 Parent State Database",
    /* ES_PIPE0_LLS_L0_WERR_MAX_SC */ "ES PIPE 0 L0 Max Surplus Count Database",
    /* ES_PIPE0_LLS_L0_WERR_NEXT */ "ES PIPE 0 L0 Child WERR Linked List Next Database",
    /* ES_PIPE0_LLS_L0_XOFF      */ "ES PIPE 0 L0 XOFF Database",
    /* ES_PIPE0_LLS_L1_CHILD_STATE1 */ "ES PIPE 0 L1 Child Status 1 Database",
    /* ES_PIPE0_LLS_L1_CHILD_WEIGHT_CFG */ "ES PIPE 0 L1 Child Weight Config Database",
    /* ES_PIPE0_LLS_L1_CHILD_WEIGHT_WORKING */ "ES PIPE 0 L1 Child Working Weight and Count Database",
    /* ES_PIPE0_LLS_L1_ERROR     */ "ES PIPE 0 L1 Error database containing difference between expected scheduling amount and actual scheduling amount",
    /* ES_PIPE0_LLS_L1_HEADS_TAILS */ "ES PIPE 0 L1 Heads Tails Database",
    /* ES_PIPE0_LLS_L1_MEMA_CONFIG */ "ES PIPE 0 L1 Configuration Database NOTE : This is a replicated database whose contents must match ES_PIPE0_LLS_L1_MEMB_CONFIG",
    /* ES_PIPE0_LLS_L1_MEMB_CONFIG */ "ES PIPE 0 L1 Configuration Database NOTE : This is a replicated database whose contents must match ES_PIPE0_LLS_L1_MEMA_CONFIG",
    /* ES_PIPE0_LLS_L1_MIN_NEXT  */ "ES PIPE 0 L1 Child Min Linked List Next Database",
    /* ES_PIPE0_LLS_L1_PARENT    */ "ES PIPE 0 L1 Parent Database",
    /* ES_PIPE0_LLS_L1_PARENT_STATE */ "ES PIPE 0 L1 Parent State Database",
    /* ES_PIPE0_LLS_L1_WERR_MAX_SC */ "ES PIPE 0 L1 Max Surplus Count Database",
    /* ES_PIPE0_LLS_L1_WERR_NEXT */ "ES PIPE 0 L1 Child WERR Linked List Next Database",
    /* ES_PIPE0_LLS_L1_XOFF      */ "ES PIPE 0 Port XOFF Database",
    /* ES_PIPE0_LLS_L2_CHILD_STATE1 */ "ES PIPE 0 L2 Child state database",
    /* ES_PIPE0_LLS_L2_CHILD_WEIGHT_CFG */ "ES PIPE 0 L2 Child Weight Config and count Database",
    /* ES_PIPE0_LLS_L2_CHILD_WEIGHT_WORKING */ "ES PIPE 0 L2 Child Working Weight and count Database",
    /* ES_PIPE0_LLS_L2_ERROR     */ "ES PIPE 0 L2 Error database containing difference between expected scheduling amount and actual scheduling amount",
    /* ES_PIPE0_LLS_L2_MIN_NEXT  */ "ES PIPE 0 L2 Child MIN Linked List Next Database 4 entries per word",
    /* ES_PIPE0_LLS_L2_PARENT    */ "ES PIPE 0 L2 Parent Database",
    /* ES_PIPE0_LLS_L2_WERR_NEXT */ "ES PIPE 0 L2 Child WERR Linked List Next Database 4 entries per word",
    /* ES_PIPE0_LLS_L2_XOFF      */ "ES PIPE 0 L2 XOFF Database",
    /* ES_PIPE0_LLS_PORT_HEADS_TAILS */ "ES PIPE 0 Port Heads Tails Database",
    /* ES_PIPE0_LLS_PORT_MEMA_CONFIG */ "ES PIPE 0 Port Configuration Database. NOTE : This is a replicated database, so contents must match ES_PIPE0_LLS_PORT_MEMB_CONFIG",
    /* ES_PIPE0_LLS_PORT_MEMB_CONFIG */ "ES PIPE 0 Port Configuration Database. NOTE : This is a replicated database, so contents must match ES_PIPE0_LLS_PORT_MEMA_CONFIG",
    /* ES_PIPE0_LLS_PORT_PARENT_STATE */ "ES PIPE 0 Port Parent State Database",
    /* ES_PIPE0_LLS_PORT_WERR_MAX_SC */ "ES PIPE 0 Port Max Surplus Count Database",
    /* ES_PIPE0_TDM_TABLE_0      */ "MMU to EPIPE Arbiter TDM Table 0, PIPE X",
    /* ES_PIPE0_TDM_TABLE_1      */ "MMU to EPIPE Arbiter TDM Table 1 (shadow table), PIPE X",
    /* ES_PIPE1_LLS_L0_CHILD_STATE1 */ "ES PIPE 1 L0 Child Status 1 Database",
    /* ES_PIPE1_LLS_L0_CHILD_WEIGHT_CFG */ "ES PIPE 1 L0 Child Weight Config Database",
    /* ES_PIPE1_LLS_L0_CHILD_WEIGHT_WORKING */ "ES PIPE 1 L0 Child Working Weight and Count Database",
    /* ES_PIPE1_LLS_L0_ERROR     */ "ES PIPE 1 L0 Error database containing difference between expected scheduling amount and actual scheduling amount",
    /* ES_PIPE1_LLS_L0_HEADS_TAILS */ "ES PIPE 1 L0 Heads and Tails Database",
    /* ES_PIPE1_LLS_L0_MEMA_CONFIG */ "ES PIPE 1 L0 Configuration Database NOTE : This is a replicated database whose contents must match ES_PIPE1_LLS_L0_MEMB_CONFIG",
    /* ES_PIPE1_LLS_L0_MEMB_CONFIG */ "ES PIPE 1 L0 Configuration Database NOTE : This is a replicated database whose contents must match ES_PIPE1_LLS_L0_MEMA_CONFIG",
    /* ES_PIPE1_LLS_L0_MIN_NEXT  */ "ES PIPE 1 L0 Child Min Linked List Next Database",
    /* ES_PIPE1_LLS_L0_PARENT    */ "ES PIPE 1 L0 Parent Database",
    /* ES_PIPE1_LLS_L0_PARENT_STATE */ "ES PIPE 1 L0 Parent State Database",
    /* ES_PIPE1_LLS_L0_WERR_MAX_SC */ "ES PIPE 1 L0 Max Surplus Count Database",
    /* ES_PIPE1_LLS_L0_WERR_NEXT */ "ES PIPE 1 L0 Child WERR Linked List Next Database",
    /* ES_PIPE1_LLS_L0_XOFF      */ "ES PIPE 1 L0 XOFF Database",
    /* ES_PIPE1_LLS_L1_CHILD_STATE1 */ "ES PIPE 1 L1 Child Status 1 Database",
    /* ES_PIPE1_LLS_L1_CHILD_WEIGHT_CFG */ "ES PIPE 1 L1 Child Weight Config Database",
    /* ES_PIPE1_LLS_L1_CHILD_WEIGHT_WORKING */ "ES PIPE 1 L1 Child Working Weight and Count Database",
    /* ES_PIPE1_LLS_L1_ERROR     */ "ES PIPE 1 L1 Error database containing difference between expected scheduling amount and actual scheduling amount",
    /* ES_PIPE1_LLS_L1_HEADS_TAILS */ "ES PIPE 1 L1 Heads Tails Database",
    /* ES_PIPE1_LLS_L1_MEMA_CONFIG */ "ES PIPE 1 L1 Configuration Database. NOTE : This is a replicated database whose contents must match ES_PIPE1_LLS_L1_MEMB_CONFIG",
    /* ES_PIPE1_LLS_L1_MEMB_CONFIG */ "ES PIPE 1 L1 Configuration Database. NOTE : This is a replicated database whose contents must match ES_PIPE1_LLS_L1_MEMA_CONFIG",
    /* ES_PIPE1_LLS_L1_MIN_NEXT  */ "ES PIPE 1 L1 Child Min Linked List Next Database",
    /* ES_PIPE1_LLS_L1_PARENT    */ "ES PIPE 1 L1 Parent Database",
    /* ES_PIPE1_LLS_L1_PARENT_STATE */ "ES PIPE 1 L1 Parent State Database",
    /* ES_PIPE1_LLS_L1_WERR_MAX_SC */ "ES PIPE 1 L1 Max Surplus Count Database",
    /* ES_PIPE1_LLS_L1_WERR_NEXT */ "ES PIPE 1 L1 Child WERR Linked List Next Database",
    /* ES_PIPE1_LLS_L1_XOFF      */ "ES PIPE 1 Port XOFF Database",
    /* ES_PIPE1_LLS_L2_CHILD_STATE1 */ "ES PIPE 1 L2 Child state database",
    /* ES_PIPE1_LLS_L2_CHILD_WEIGHT_CFG */ "ES PIPE 1 L2 Child Weight Config and count Database",
    /* ES_PIPE1_LLS_L2_CHILD_WEIGHT_WORKING */ "ES PIPE 1 L2 Child Working Weight and count Database",
    /* ES_PIPE1_LLS_L2_ERROR     */ "ES PIPE 1 L2 Error database containing difference between expected scheduling amount and actual scheduling amount",
    /* ES_PIPE1_LLS_L2_MIN_NEXT  */ "ES PIPE 1 L2 Child MIN Linked List Next Database 4 entries per word",
    /* ES_PIPE1_LLS_L2_PARENT    */ "ES PIPE 1 L2 Parent Database",
    /* ES_PIPE1_LLS_L2_WERR_NEXT */ "ES PIPE 1 L2 Child WERR Linked List Next Database 4 entries per word",
    /* ES_PIPE1_LLS_L2_XOFF      */ "ES PIPE 1 L2 XOFF Database",
    /* ES_PIPE1_LLS_PORT_HEADS_TAILS */ "ES PIPE 1 Port Heads Tails Database",
    /* ES_PIPE1_LLS_PORT_MEMA_CONFIG */ "ES PIPE 1 Port Configuration Database. NOTE : This is a replicated database, so contents must match ES_PIPE1_LLS_PORT_MEMB_CONFIG",
    /* ES_PIPE1_LLS_PORT_MEMB_CONFIG */ "ES PIPE 1 Port Configuration Database. NOTE : This is a replicated database, so contents must match ES_PIPE1_LLS_PORT_MEMA_CONFIG",
    /* ES_PIPE1_LLS_PORT_PARENT_STATE */ "ES PIPE 1 Port Parent State Database",
    /* ES_PIPE1_LLS_PORT_WERR_MAX_SC */ "ES PIPE 1 Port Max Surplus Count Database",
    /* ES_PIPE1_TDM_TABLE_0      */ "MMU to EPIPE Arbiter TDM Table 0, PIPE X",
    /* ES_PIPE1_TDM_TABLE_1      */ "MMU to EPIPE Arbiter TDM Table 1 (shadow table), PIPE X",
    /* ETPPA_ACCEPTABLE_FRAME_TYPE_TABLE */ "Acceptable Frame Type Table used to configure per tag format (3 tags without the priority bit) and per PP-PPCT. Acceptable-Frame-Type-Profile",
    /* ETPPA_APPLET_MEMORY       */ "Holds all the packets that will be injected in this applet transaction",
    /* ETPPA_CFG_FHEI_UPPER_LAYER_TYPE_MAP */ "Mapping J-Mode Fhei-Upper-Layer-Protocol(4),Fhei-Cw(1) to J2 Fhei-Upper-Layer-Type(5)",
    /* ETPPA_CFG_INLIF_DP_PROFILE_MAP */ "DP INLIF Profile for Inner and Outer PCP-DEI mapping in IVE, according to IN-LIF Profile from FHEI. 4 sets of INLIF_DP_Profile_outer,INLIF_DP_Profile_inner for 256 IN-LIF Profiles",
    /* ETPPA_CFG_INLIF_PROFILE_MAPPED_IN_JERICHO_MODE */ "Backwards compatibility (for J-Mode):\n Inlif_profile = F(Updated-Forward-Code.In-LIF-Profile-Map(1), FHEI.In-LIF-Profile(2),PPH.In-LIF-Orientation(2), PPH.Reserved(2))",
    /* ETPPA_CFG_MAP_INGRESS_REMARK_PROFILE */ "Mapping InlifProfile(8) to IngressRemarkProfile(3)",
    /* ETPPA_DSP_DATA_TABLE      */ "ETPP DSP mapping Table",
    /* ETPPA_EEI_MPLS_PUSH_2_EES_MAP */ "Mapping the EEI Type (3) to eei_mpls_push.Type(6),Data(94)",
    /* ETPPA_ETPPA_DEBUG_COLLECTOR_FIFO */ "Debug Collector FIFO",
    /* ETPPA_ETPP_BYPASS_CTRL    */ "ETPP Bypass Control Memory",
    /* ETPPA_ETPP_BYPASS_DATA    */ "ETPP Bypass Data Memory",
    /* ETPPA_FHEI_MPLS_UPPER_LAYER_PROTOCOL_TO_PES_MAPPING_TABLE */ "Mapping FHEI Upper Layer Protocol(5b) to PES Access1 parsing context (5b). Table has 32 entries.",
    /* ETPPA_INITIAL_NWK_QOS_SELECT_TABLE */ "Initial NWK_QOS Selection table",
    /* ETPPA_INITIAL_NWK_QOS_SELECT_TABLE_PLUS_1 */ "Initial NWK_QOS Selection table Plus1",
    /* ETPPA_IVEC_TABLE          */ "Ingress VLAN editing command.\n This table has 128 entries. It is pointed by FHEI.Ingress-VLAN-Edit-Command",
    /* ETPPA_JERICHO_INGRESS_NWK_QOS_TABLE */ "Jericho Mode Ingress Network QOS Mapping Table",
    /* ETPPA_LAYER_NWK_QOS_TABLE */ "Layer Network QOS Mapping Table",
    /* ETPPA_LIF_EXTENSION_FORMAT_CFG */ "A configuration table for the ARR, where each line represents a specific input format.\n Each line includes the configurartion data for each field in the incoming data.\n A general look of each line:\n  f_1.size , f_1.position , f_1.prefix , f_2.size , f_2.position , f_2.prefix , ... , f_n.size , f_n.position , f_n.prefix",
    /* ETPPA_MCDB_RESULT_FIFO    */ "Pipe the following signals:\n mcdb_recrd 110b",
    /* ETPPA_MEM_220000          */ "INTERNAL",
    /* ETPPA_MEM_230000          */ "INTERNAL",
    /* ETPPA_MEM_240000          */ "INTERNAL",
    /* ETPPA_NETWORK_HEADERS_FIFO */ "",
    /* ETPPA_PARSING_START_TYPE_MAPPING_TABLE */ "Parsing start type to PES protocol type mapping table , used for mapping the (ftmh) parsing start type to Network headers PES protocol type. Table has 32 entries.",
    /* ETPPA_PCP_DEI_DP_MAPPING_TABLE */ "PCP-DEI Mapping Table for IVE, maps DP+INLIF_Profile+Selected_PCP_DEI to new PCP-DEI",
    /* ETPPA_PER_PORT_TABLE      */ "ETPP Per Port Attributes",
    /* ETPPA_PES_PRSE_HEADER_SIZE_MAP */ "HeaderSizeMap",
    /* ETPPA_PES_PRSE_PROGRAM    */ "PesPrseProgram0..7",
    /* ETPPA_PES_PRSE_TCAM       */ "PrseTcam",
    /* ETPPA_PES_PRSE_TCAM_AD_A  */ "PesPrseTcamAdA0..7",
    /* ETPPA_PES_PRSE_TCAM_AD_B  */ "PesPrseTcamAdB0..7",
    /* ETPPA_PRP_EES_ARR_CONFIGURATION */ "ETPP PRP EES ARR Format Configuration",
    /* ETPPA_PRP_EES_ARR_PREFIX_TABLE */ "ETPP PRP EES ARR Prefix Table",
    /* ETPPA_PRP_FES_MASK_BITS_TABLE */ "Fes Mask Bits\n Each field of the FES outputs as a mask bits (two option of mask bits for each entry(field)).",
    /* ETPPA_PRP_FES_PROGRAM_TABLE */ "Program Instruction Table per program for all 8 keys (all 8 FES)\n The number of lines of the memory is derived as a result of the type (there are 6bits type)\n All the 8 FES use this memory in the relevant fields (0-7)",
    /* ETPPA_PRP_FWD_CODE_CAM    */ "ETPPA PRP Forward Code Selection CAM",
    /* ETPPA_PRP_NETWORK_HEADER_FIFO */ "Pipe-FIFO - Before MDB results.\n The FIFO will wait to the data from the EEDB (if cfg_eedb_enabled valid)",
    /* ETPPA_PRP_PEM_CAM         */ "ETPP PRP PEM Context Selection CAM",
    /* ETPPA_PRP_SYSTEM_HEADER_FIFO */ "Pipe-FIFO - Before MDB results.\n The FIFO will wait to the data from the EEDB (if cfg_eedb_enabled valid) or the network_header(if the cfg_eedb_enabled is not valid)",
    /* ETPPA_PSG_PRSE_HEADER_SIZE_MAP */ "HeaderSizeMap",
    /* ETPPA_PSG_PRSE_PROGRAM    */ "PsgPrseProgram0..3",
    /* ETPPA_PSG_PRSE_TCAM       */ "PrseTcam",
    /* ETPPA_PSG_PRSE_TCAM_AD_A  */ "PsgPrseTcamAdA0..3",
    /* ETPPA_PSG_PRSE_TCAM_AD_B  */ "PsgPrseTcamAdB0..3",
    /* ETPPA_SYSTEM_HEADERS_CONTAINER_FIFO */ "",
    /* ETPPA_TERMINATION_CONTEXT_SELECTION_CAM */ "Termination Context Selection - maps several fields to termination context(6).\n Rows 0-31",
    /* ETPPA_TERMINATION_CONTEXT_SELECTION_CAM_2 */ "Termination Context Selection - maps several fields to termination context(6)\n Rows 32-63",
    /* ETPPA_TM_FIELDS_FIFO      */ "Pipe the following signals:\n ERPP:\n         4'd0,\n         p0_first_packet,            //width = 1\n         p0_tc_map_profile,          //width = 4\n         p0_mc_pp_dsp,               //width = 9\n         p0_discard,                 //width = 1\n         p0_cud_outlif_or_mcdb_ptr   //width = 22\n         p0_pem_is_applet,           //width = 1\n         p0_ser                      //width = 1\n ETPP:\n         p0_sniff_profile,          //width = 4\n         p0_cos_profile,            //width = 4\n    ...",
    /* ETPPB_ADDITIONAL_HEADERS_MAP_TABLE_0 */ "Address = Additional_Headers_Profile(5b)\n\n Contains data for the first (outermost) additional headers builder",
    /* ETPPB_ADDITIONAL_HEADERS_MAP_TABLE_1 */ "Address = Additional_Headers_Profile(5b)\n\n Contains data for the second additional headers builder",
    /* ETPPB_ADDITIONAL_HEADERS_MAP_TABLE_2 */ "Address = Additional_Headers_Profile(5b)\n\n Contains data for the third (innermost) additional headers builder",
    /* ETPPB_ADDITIONAL_HEADERS_PROFILE_MAP */ "Address = LIF_Additional_Headers_Profile(5b), ContextInfoTablecontext.Additional_Headers_Profile(4b)",
    /* ETPPB_BIT_CRUNCHER_DOUBLE_INSTRUCTION */ "Double-instruction-and-candidate-header-select-format",
    /* ETPPB_BIT_CRUNCHER_INSTRUCTION */ "Single Bit Cruncher Instructions structure",
    /* ETPPB_CFG_ENC_MAP_PROTOCOL_QOS */ "Protocol QOS Mapping Table\n MapQoS-VAR-Map(5), Type(3) to Protocol-QoS-Map(5), OuLIF-RemarkOrKeep(1)",
    /* ETPPB_CURRENT_NEXT_PROTOCOL_MAP */ "Address = Current_Next_Protocol_Namespace(3b), Current_Protocol-Type(5b)",
    /* ETPPB_EGRESS_MEMBERSHIP   */ "Per VLAN/VSI Port membership",
    /* ETPPB_ENCAPSULATION_2_CONTEXT_ENABLERS */ "Per Context variables",
    /* ETPPB_ENCAPSULATION_2_DATA_FIFO */ "Per Context variables",
    /* ETPPB_ENCAPSULATION_3_CONTEXT_ENABLERS */ "Per Context variables",
    /* ETPPB_ENCAPSULATION_3_CONTEXT_SELECTION_CAM */ "ETPP Encapsulation3 Stage Context Selection CAM",
    /* ETPPB_ENCAPSULATION_3_DATA_FIFO */ "Per Context variables",
    /* ETPPB_ENCAPSULATION_4_CONTEXT_ENABLERS */ "Per Context variables",
    /* ETPPB_ENCAPSULATION_4_CONTEXT_SELECTION_CAM */ "ETPP Encapsulation4 Stage Context Selection CAM",
    /* ETPPB_ENCAPSULATION_4_DATA_FIFO */ "Per Context variables",
    /* ETPPB_ENCAPSULATION_5_CONTEXT_ENABLERS */ "Per Context variables",
    /* ETPPB_ENCAPSULATION_5_CONTEXT_SELECTION_CAM */ "ETPP Encapsulation5 Stage Context Selection CAM",
    /* ETPPB_ENCAPSULATION_5_DATA_FIFO */ "Per Context variables",
    /* ETPPB_ENC_1_BIT_CRUNCHER_PROGRAM */ "Memory of bit cruncher instructions per candidate header. Mem line per context. 8 double instructions.",
    /* ETPPB_ENC_1_CANDIDATE_HDR_FIFO */ "Encapsulation1 Candidate Header FIFO",
    /* ETPPB_ENC_1_CONTEXT_FIFO  */ "Encapsulation1 Context FIFO",
    /* ETPPB_ENC_2_ARR_0_FORMAT_CONFIGURATION_TABLE */ "A configuration table for the ARR, where each line represents a specific input format.\n Each line includes the configurartion data for each field in the incoming data.\n A general look of each line:\n  f_1.size , f_1.position , f_1.prefix , f_2.size , f_2.position , f_2.prefix , ... , f_n.size , f_n.position , f_n.prefix",
    /* ETPPB_ENC_2_BIT_CRUNCHER_PROGRAM */ "Memory of bit cruncher instructions per candidate header. Mem line per context. 8 double instructions.",
    /* ETPPB_ENC_2_CANDIDATE_HDR_FIFO */ "Encapsulation2 Candidate Header FIFO",
    /* ETPPB_ENC_2_CONSTANT_TABLE */ "32 bit Constant value Per BitCrunch Context",
    /* ETPPB_ENC_2_CONTEXT_FIFO  */ "Encapsulation2 Context FIFO",
    /* ETPPB_ENC_2_PREFIX_INDEX_TABLE */ "A list of prefixes, each line is a possible prefix.",
    /* ETPPB_ENC_3_ARR_0_FORMAT_CONFIGURATION_TABLE */ "A configuration table for the ARR, where each line represents a specific input format.\n Each line includes the configurartion data for each field in the incoming data.\n A general look of each line:\n  f_1.size , f_1.position , f_1.prefix , f_2.size , f_2.position , f_2.prefix , ... , f_n.size , f_n.position , f_n.prefix",
    /* ETPPB_ENC_3_BIT_CRUNCHER_PROGRAM */ "Memory of bit cruncher instructions per candidate header. Mem line per context. 8 double instructions.",
    /* ETPPB_ENC_3_CANDIDATE_HDR_FIFO */ "Encapsulation3 Candidate Header FIFO",
    /* ETPPB_ENC_3_CONSTANT_TABLE */ "32 bit Constant value Per BitCrunch Context",
    /* ETPPB_ENC_3_CONTEXT_FIFO  */ "Encapsulation3 Context FIFO",
    /* ETPPB_ENC_3_CONTEXT_SELECTION_PER_PORT_PROFILE */ "Address = Out-PP-Port\n Output - 2 bit per port profile for next stage context selection",
    /* ETPPB_ENC_3_PREFIX_INDEX_TABLE */ "A list of prefixes, each line is a possible prefix.",
    /* ETPPB_ENC_4_ARR_0_FORMAT_CONFIGURATION_TABLE */ "A configuration table for the ARR, where each line represents a specific input format.\n Each line includes the configurartion data for each field in the incoming data.\n A general look of each line:\n  f_1.size , f_1.position , f_1.prefix , f_2.size , f_2.position , f_2.prefix , ... , f_n.size , f_n.position , f_n.prefix",
    /* ETPPB_ENC_4_BIT_CRUNCHER_PROGRAM */ "Memory of bit cruncher instructions per candidate header. Mem line per context. 8 double instructions.",
    /* ETPPB_ENC_4_CANDIDATE_HDR_FIFO */ "Encapsulation4 Candidate Header FIFO",
    /* ETPPB_ENC_4_CONSTANT_TABLE */ "32 bit Constant value Per BitCrunch Context",
    /* ETPPB_ENC_4_CONTEXT_FIFO  */ "Encapsulation4 Context FIFO",
    /* ETPPB_ENC_4_CONTEXT_SELECTION_PER_PORT_PROFILE */ "Address = Out-PP-Port\n Output - 2 bit per port profile for next stage context selection",
    /* ETPPB_ENC_4_PREFIX_INDEX_TABLE */ "A list of prefixes, each line is a possible prefix.",
    /* ETPPB_ENC_5_ARR_0_FORMAT_CONFIGURATION_TABLE */ "A configuration table for the ARR, where each line represents a specific input format.\n Each line includes the configurartion data for each field in the incoming data.\n A general look of each line:\n  f_1.size , f_1.position , f_1.prefix , f_2.size , f_2.position , f_2.prefix , ... , f_n.size , f_n.position , f_n.prefix",
    /* ETPPB_ENC_5_BIT_CRUNCHER_PROGRAM */ "Memory of bit cruncher instructions per candidate header. Mem line per context. 8 double instructions.",
    /* ETPPB_ENC_5_CANDIDATE_HDR_FIFO */ "Encapsulation5 Candidate Header FIFO",
    /* ETPPB_ENC_5_CONSTANT_TABLE */ "32 bit Constant value Per BitCrunch Context",
    /* ETPPB_ENC_5_CONTEXT_FIFO  */ "Encapsulation5 Context FIFO",
    /* ETPPB_ENC_5_CONTEXT_SELECTION_PER_PORT_PROFILE */ "Address = Out-PP-Port\n Output - 2 bit per port profile for next stage context selection",
    /* ETPPB_ENC_5_PREFIX_INDEX_TABLE */ "A list of prefixes, each line is a possible prefix.",
    /* ETPPB_ENC_FORMAT_CONFIGURATION_TABLE */ "A configuration table for the ARR, where each line represents a specific input format.\n Each line includes the configurartion data for each field in the incoming data.\n A general look of each line:\n  f_1.size , f_1.position , f_1.prefix , f_2.size , f_2.position , f_2.prefix , ... , f_n.size , f_n.position , f_n.prefix",
    /* ETPPB_FWD_BIT_CRUNCHER_PROGRAM */ "Memory of bit cruncher instructions per candidate header. Mem line per context. 8 double instructions.",
    /* ETPPB_FWD_CANDIDATE_HDR_FIFO */ "Forwarding Candidate Header FIFO",
    /* ETPPB_FWD_CONTEXT_FIFO    */ "Forwarding Context FIFO",
    /* ETPPB_MAIN_HEADER_MAP_TABLE */ "Address = Additional_Headers_Profile(5b)\n\n Contains data for main header",
    /* ETPPB_MEM_500000          */ "INTERNAL",
    /* ETPPB_MEM_510000          */ "INTERNAL",
    /* ETPPB_MEM_520000          */ "INTERNAL",
    /* ETPPB_MEM_600000          */ "INTERNAL",
    /* ETPPB_MEM_610000          */ "INTERNAL",
    /* ETPPB_MEM_620000          */ "INTERNAL",
    /* ETPPB_MEM_700000          */ "INTERNAL",
    /* ETPPB_MEM_710000          */ "INTERNAL",
    /* ETPPB_MEM_720000          */ "INTERNAL",
    /* ETPPB_MEM_800000          */ "INTERNAL",
    /* ETPPB_MEM_810000          */ "INTERNAL",
    /* ETPPB_MEM_820000          */ "INTERNAL",
    /* ETPPB_MEM_1500000         */ "INTERNAL",
    /* ETPPB_MEM_1510000         */ "INTERNAL",
    /* ETPPB_MEM_1520000         */ "INTERNAL",
    /* ETPPB_MTU_MAP_TABLE       */ "Used For MTU-Filter in FWD&ENC\n address5:0 = mtu_profile(3b), protocol_type_compressed(3b)",
    /* ETPPB_NEW_QOS_MAP         */ "New QOS Mapping Table\n Map Protocol-QoS-Map(5), QoS&DP(10) to New-QoS-VAR(8)\n Table is accessed with Address14:4 where:\n Address = Protocol-QoS-Map(5), QoS&DP(10)",
    /* ETPPB_NWK_QOS_IDX_MAP     */ "Map Nwk-QoS-Idx(5b) to Pipe-Mapped-QoS&DP(10b), Pipe-Nwk-QoS-Var-O2(8b)",
    /* ETPPB_PROTOCOL_TYPE_COMPRESSED_MAP */ "Per Context variables",
    /* ETPPB_QOS_DP_MAP          */ "New QOS and DP Mapping Table\n Map Remark-Profile.Nwk-Qos-Map(5), QoS&DP(10) to New-QoS&DP(10)\n Table is accessed with Address14:4 where:\n Address = Remark-Profile.Nwk-Qos-Map(5), QoS&DP(10)",
    /* ETPPB_SIT_PROFILE_MAP_TABLE */ "Address = SIT_Profile(3b)",
    /* ETPPB_SOURCE_ADRS_MAP     */ "Source_Address(128b), mapped by Source_Idx7:2 (6b)",
    /* ETPPB_STP_STATE           */ "Per Topology ID Port STP State",
    /* ETPPB_TERM_BIT_CRUNCHER_PROGRAM */ "Memory of bit cruncher instructions per candidate header. Mem line per context. 16 double instructions.",
    /* ETPPB_TERM_CANDIDATE_HDR_FIFO */ "Termination Candidate Header FIFO",
    /* ETPPB_TERM_CONTEXT_FIFO   */ "Termination Context FIFO",
    /* ETPPB_TRAP_BIT_CRUNCHER_PROGRAM */ "Memory of bit cruncher instructions per candidate header. Mem line per context. 12 double instructions.",
    /* ETPPB_TRAP_BYPASS_FIFO    */ "Collecting Bypassed Data from FWD Stage, Bypassing the ENC stages",
    /* ETPPB_TRAP_CANDIDATE_HDR_FIFO */ "Trap Candidate Header FIFO",
    /* ETPPB_TRAP_CONSTANT_TABLE */ "Per Context 32 bit Constant",
    /* ETPPB_TRAP_CONTEXT_ENABLERS */ "Trap Forward Action Table - Forwarding information is retrieved from this Table - The trap_context is mapped to Forwarding information.",
    /* ETPPB_TRAP_CONTEXT_FIFO   */ "Trap Context FIFO",
    /* ETPPB_TRAP_CONTEXT_SELECTION_CAM */ "ETPP Trap Stage Context Selection CAM",
    /* ETPPB_TRAP_CONTEXT_SELECTION_PER_PORT_PROFILE */ "Address = Out-PP-Port\n Output - 2 bit per port profile for next stage context selection",
    /* ETPPB_TRAP_ORIGINAL_FTMH_FIFO */ "Collecting original FTMH from the RQP",
    /* ETPPB_TRAP_OUTCOME_FIFO   */ "Trap Additional Data FIFO",
    /* ETPPB_TRAP_PER_PP_PORT_TABLE */ "ETPP Trap Per Port Attributes",
    /* ETPPB_VID_MIRROR_PROFILE_TABLE */ "OutPortMirrorProfile is mapped by vid_index(3),Out_pp_port(8)",
    /* ETPPB_VLAN_EDIT_PROFILE_MAP_TABLE */ "Address = VLAN_Edit_Profile(6b)",
    /* ETPPC_ADDITIONAL_HEADERS_MAP_TABLE_0 */ "Address = Additional_Headers_Profile(5b)\n\n Contains data for the first (outermost) additional headers builder",
    /* ETPPC_ADDITIONAL_HEADERS_MAP_TABLE_1 */ "Address = Additional_Headers_Profile(5b)\n\n Contains data for the second additional headers builder",
    /* ETPPC_ADDITIONAL_HEADERS_MAP_TABLE_2 */ "Address = Additional_Headers_Profile(5b)\n\n Contains data for the third (innermost) additional headers builder",
    /* ETPPC_ADDITIONAL_HEADERS_PROFILE_MAP */ "Address = LIF_Additional_Headers_Profile(5b), ContextInfoTablecontext.Additional_Headers_Profile(4b)",
    /* ETPPC_BIER_BIT_MASK_FIFO  */ "FIFO all over the pipe (PRP, TERM) to be read in FWD stage. Assuming 512 CC.",
    /* ETPPC_CFG_EM_ACCESS_CMD   */ "ESEM Access Command Table",
    /* ETPPC_CFG_ENC_MAP_PROTOCOL_QOS */ "Protocol QOS Mapping Table for ENC Stage\n MapQoS-VAR-Map(5), Type(3) to Protocol-QoS-Map(5), OuLIF-RemarkOrKeep(1).",
    /* ETPPC_CFG_FWD_MAP_PROTOCOL_QOS */ "Protocol QOS Mapping Table for FWD Stage\n MapQoS-VAR-Map(5), Type(3) to Protocol-QoS-Map(5), OuLIF-RemarkOrKeep(1).",
    /* ETPPC_CFG_INLIF_DP_PROFILE_MAP */ "DP INLIF Profile for Inner and Outer PCP-DEI mapping in IVE, according to IN-LIF Profile from FHEI. 4 sets of INLIF_DP_Profile_outer,INLIF_DP_Profile_inner for 256 IN-LIF Profiles",
    /* ETPPC_CFG_TERM_MAP_PROTOCOL_QOS */ "Protocol QOS Mapping Table for Termination Stage\n MapQoS-VAR-Map(5), Type(3) to Protocol-QoS-Map(5), OuLIF-RemarkOrKeep(1).",
    /* ETPPC_CURRENT_NEXT_PROTOCOL_MAP */ "Address = Current_Next_Protocol_Namespace(3b), Current_Protocol-Type(5b)",
    /* ETPPC_EDITING_PER_PORT_TABLE */ "Editing Per Port Table (Address = out_pp_port(8b))",
    /* ETPPC_ENCAPSULATION_1_CONTEXT_ENABLERS */ "Per Context variables",
    /* ETPPC_ENCAPSULATION_1_CONTEXT_SELECTION_CAM */ "ETPP Encapsulation1 Stage Context Selection CAM",
    /* ETPPC_ENCAPSULATION_1_DATA_FIFO */ "Per Context variables",
    /* ETPPC_ENCAPSULATION_2_CONTEXT_SELECTION_CAM */ "ETPP Encapsulation2 Stage Context Selection CAM",
    /* ETPPC_ENC_1_ARR_0_FORMAT_CONFIGURATION_TABLE */ "A configuration table for the ARR, where each line represents a specific input format.\n Each line includes the configurartion data for each field in the incoming data.\n A general look of each line:\n  f_1.size , f_1.position , f_1.prefix , f_2.size , f_2.position , f_2.prefix , ... , f_n.size , f_n.position , f_n.prefix",
    /* ETPPC_ENC_1_CONSTANT_TABLE */ "32 bit Constant value Per BitCrunch Context",
    /* ETPPC_ENC_1_CONTEXT_SELECTION_PER_PORT_PROFILE */ "Address = Out-PP-Port\n Output - 2 bit per port profile for next stage context selection",
    /* ETPPC_ENC_1_PREFIX_INDEX_TABLE */ "A list of prefixes, each line is a possible prefix.",
    /* ETPPC_ENC_2_CONTEXT_SELECTION_PER_PORT_PROFILE */ "Address = Out-PP-Port\n Output - 2 bit per port profile for next stage context selection",
    /* ETPPC_ENC_FORMAT_CONFIGURATION_TABLE */ "A configuration table for the ARR, where each line represents a specific input format.\n Each line includes the configurartion data for each field in the incoming data.\n A general look of each line:\n  f_1.size , f_1.position , f_1.prefix , f_2.size , f_2.position , f_2.prefix , ... , f_n.size , f_n.position , f_n.prefix",
    /* ETPPC_ESEM_DEFAULT_RESULT_TABLE */ "ETPP Termination EES ARR Format Configuration",
    /* ETPPC_ESEM_RESULT_FIFO    */ "ESEM1 & 2 Results FIFO",
    /* ETPPC_ETH_OAM_OPCODE_MAP  */ "This table is used for mapping OAM-Header.Opcode to internal opcode used in the device.\n The index to the table is OAM-Header.Opcode7:0 and the result is 4 bits oam-opcode. The oam-opcode is used in accessing OAM-Trap-Engine by ETPP.",
    /* ETPPC_ETPPC_DEBUG_COLLECTOR_FIFO */ "Debug Collector FIFO",
    /* ETPPC_EXEM_RESULT_FIFO    */ "EXEM Result FIFO",
    /* ETPPC_FORWARDING_CONTEXT_ENABLERS */ "Enable Context Table for FWD Stage",
    /* ETPPC_FORWARDING_CONTEXT_SELECTION_CAM */ "ETPP Forwarding Stage Context Selection CAM",
    /* ETPPC_FORWARDING_FORMAT_CONFIGURATION_TABLE_0 */ "A configuration table for the ARR, where each line represents a specific input format.\n Each line includes the configurartion data for each field in the incoming data.\n A general look of each line:\n  f_1.size , f_1.position , f_1.prefix , f_2.size , f_2.position , f_2.prefix , ... , f_n.size , f_n.position , f_n.prefix",
    /* ETPPC_FORWARDING_FORMAT_CONFIGURATION_TABLE_1 */ "A configuration table for the ARR, where each line represents a specific input format.\n Each line includes the configurartion data for each field in the incoming data.\n A general look of each line:\n  f_1.size , f_1.position , f_1.prefix , f_2.size , f_2.position , f_2.prefix , ... , f_n.size , f_n.position , f_n.prefix",
    /* ETPPC_FORWARDING_PREFIX_INDEX_TABLE */ "A list of prefixes, each line is a possible prefix.",
    /* ETPPC_FWD_BYPASS_FIFO     */ "FIFO For Bypass",
    /* ETPPC_FWD_CONSTANT_TABLE  */ "Constant bits to be sent to the bit cruncher",
    /* ETPPC_FWD_MAP_EGRESS_VLAN_EDITING_TABLE */ "The table contains EVE command configurations.\n Address: packet_is_mef_l2cp(1b), ive_incoming_tag_structure(5b), egrss_vlan_edit_profile(6b)",
    /* ETPPC_FWD_MAP_EGRESS_VLAN_EDIT_COMMAND_TABLE */ "EVE (Egress Vlan Edit) configurations.\n Address: egress_vlan_edit_command(7b)",
    /* ETPPC_FWD_PLUS_1_REMARKING_TABLE */ "Forward Plus1 remarking configuration table.\n Accessed with: Fwd_Plus1_Lyr_Protocol(2), FWD_Plus1_Remark_Profile(2), ftmh_ECN_Enable(1), FWD_Plus1_Explicit_Remark_Profile(2)",
    /* ETPPC_INLIF_ORIENTATION_MAPPING */ "Inlif Profile to orientaion mapping",
    /* ETPPC_IVEC_TABLE          */ "Ingress VLAN editing command.\n This table has 128 entries. It is pointed by FHEI.Ingress-VLAN-Edit-Command",
    /* ETPPC_LATENCY_PROFILE_TABLE */ "Latency Profile Table",
    /* ETPPC_LAYER_NWK_QOS_TABLE */ "Layer Network QOS Mapping Table",
    /* ETPPC_LLVP_TABLE          */ "The Link Layer VLAN Processing (LLVP) table contains 1024 entries, each entry maps a concatenation of Out-PP-Port.LLVP-Profile(3) , IVE-Packet-Tag-Format(7) to VLAN edit command parameters. Each field in this table represents such a parameter.",
    /* ETPPC_MAIN_HEADER_MAP_TABLE */ "Address = Additional_Headers_Profile(5b)\n\n Contains data for main header",
    /* ETPPC_MAP_FWD_QOS_DP_TO_TYPE_FWD */ "Configurations for QoS and DP calculations. Mapping QoS and DP into various properties to be used in procedures.\n Address: forward_code(6b), ftmh_ecn_enable(1b)",
    /* ETPPC_MAX_LATENCY_TRACK   */ "The ETPP measures latency from the packet OAM-TS extension.\n In this memory the 8 maximal latency's are kept, with the pointer associated with them",
    /* ETPPC_MEM_0               */ "INTERNAL",
    /* ETPPC_MEM_10000           */ "INTERNAL",
    /* ETPPC_MEM_20000           */ "INTERNAL",
    /* ETPPC_MEM_140000          */ "INTERNAL",
    /* ETPPC_MEM_150000          */ "INTERNAL",
    /* ETPPC_MEM_160000          */ "INTERNAL",
    /* ETPPC_MEM_180000          */ "INTERNAL",
    /* ETPPC_MEM_190000          */ "INTERNAL",
    /* ETPPC_MEM_1A0000          */ "INTERNAL",
    /* ETPPC_MTU_MAP_TABLE       */ "Used For MTU-Filter in FWD&ENC\n address5:0 = mtu_profile(3b, protocol_type_compressed(3b)",
    /* ETPPC_MY_CFM_MAC_TABLE    */ "My-CFM-MAC table. The table maps My-CFM-MAC address to OAM trap engine. The table contains 256 entries, one entry per PP port.\n The purpose of the register to decide if to trap a packet to the OAM engine. The field  MacLsbsBitmap is a bitmap, with every bit corresponding to MAC DA7:0. If the bit corresponding with MAC DA7:0 is set and MacMsbs field in the the table is equal to MAC DA47:8 then OAM-My-CFM-MAC is set.",
    /* ETPPC_NEW_QOS_MAP         */ "New QOS Mapping Table\n Map Protocol-QoS-Map(5), QoS&DP(10) to New-QoS-VAR(8)\n Table is accessed with Address14:4 where:\n Address = Protocol-QoS-Map(5), QoS&DP(10)",
    /* ETPPC_NWK_QOS_IDX_MAP     */ "Map Nwk-QoS-Idx(5b) to Pipe-Mapped-QoS&DP(10b), Pipe-Nwk-QoS-Var-O2(8b)",
    /* ETPPC_OAMA                */ "Map Inject(1), OAM-Opcode (4), My-CFM-MAC(1), OAM-LIF 1 MP-Profile (4),DA-IS-MC(1)",
    /* ETPPC_OAMB                */ "Map Inject(1), My-CFM-MAC (1),  OAM-Opcode (4), OAM-ACC-MEP-MP-Prof (4),DA-IS-MC(1)",
    /* ETPPC_OAM_COUNTER_DISABLE_MAP */ "enable the counter per counter interface. A bitmap with a selector nof_valid_lm_lifs(2),oamb_dis_cnt(1),in_lif_valid_for_lm(1), mp_type(4)",
    /* ETPPC_OAM_KEY_TABLE       */ "OAM Key configuration table.\n Accessed with:\n packet_is_oam,oam_ctr_ptr_vld,nof_valid_lm_lifs(2),oam_injection",
    /* ETPPC_OAM_MP_TYPE_MAP     */ "MP Type Map used in MP type calculation oam_is_bfd(1),nof_mep_below_mdl(3),mdl_mp_type(2),nof_above_mdl(3)",
    /* ETPPC_OEM_RESULT_FIFO     */ "OEM Results FIFO - OEM1 (MEP DB), OEM2/3/4 (LIF DB)",
    /* ETPPC_PCP_DEI_DP_MAPPING_TABLE */ "PCP-DEI Mapping Table for IVE, maps DP+INLIF_Profile+Selected_PCP_DEI to new PCP-DEI",
    /* ETPPC_PROTECTION_TABLE    */ "Prtoection Data Base for Egress Protection.\n Table is accessed using ProtectionPointer17:5",
    /* ETPPC_PROTOCOL_TYPE_COMPRESSED_MAP */ "Per Context variables",
    /* ETPPC_QOS_DP_MAP          */ "New QOS and DP Mapping Table\n Map Remark-Profile.Nwk-Qos-Map(5), QoS&DP(10) to New-QoS&DP(10)\n Table is accessed with Address14:4 where:\n Address = Remark-Profile.Nwk-Qos-Map(5), QoS&DP(10)",
    /* ETPPC_SIT_PROFILE_MAP_TABLE */ "Address = SIT_Profile(3b)",
    /* ETPPC_SOURCE_ADRS_MAP     */ "Source_Address(128b), mapped by Source_Idx7:2 (6b)",
    /* ETPPC_TERMINATION_CONTEXT_ENABLERS */ "Per Context Enablers",
    /* ETPPC_TERM_CONSTANT_TABLE */ "Per Context Constant value for Candidate header Control BUS",
    /* ETPPC_TERM_ETPS_ARR_1_CONFIGURATION */ "ETPP Termination EES ARR1 Format Configuration",
    /* ETPPC_TERM_ETPS_ARR_2_CONFIGURATION */ "ETPP Termination EES ARR2 Format Configuration",
    /* ETPPC_TERM_ETPS_ARR_PREFIX_TABLE */ "ETPP Termination ETPS ARR Prefix Table",
    /* ETPPC_TERM_PIPE_FIFO_1    */ "Termination Pipe FIFO (first).\n Holds Data while accessing the MDB (ESEM and OAM)",
    /* ETPPC_TERM_PIPE_FIFO_2    */ "Termination Pipe FIFO (first).\n Holds Data while accessing the MRPS and CRPS",
    /* ETPPC_VLAN_EDIT_PROFILE_MAP_TABLE */ "Address = VLAN_Edit_Profile(6b)",
    /* ETPPC_VSD_RESULT_FIFO     */ "VSD 1 & 2 Results FIFO",
    /* ETU_CP_FIFO               */ "tx fifo for queuing sbus db_wr, db_rd",
    /* ETU_DBG_CP_FIFO_RSP       */ "Response for raw request",
    /* ETU_DBG_REQ_REUSE_FREE_ENTRY */ "Request for reuse of free tcam entry",
    /* ETU_DBG_RX_LAST_RSP       */ "The last response send back from TCAM",
    /* ETU_DBG_RX_RAW_RSP        */ "Response for raw request",
    /* ETU_TX_RAW_REQ_DATA_WORD  */ "ETU TX FIFO RAW_REQ access DATA WORD Portion",
    /* ET_INST_OPC_TABLE         */ "Stores opcodes of Instructions used by ESMIF stage for searching databases in ext_tcam",
    /* ET_PA_XLAT                */ "Defines mapping of 20bit ext_tcam_phy_adr to associated data entry adr in ext_sram, and also to on-chip hit bits.\n It is indexed by 6 msbs (bits 19:14) of ext_tcam_phy_adr[19:0]",
    /* ET_PA_XLAT_DEBUG          */ "External tcam physical address translation table. All entries of the identical 256 deep PD memories can be read/write",
    /* ET_UINST_MEM              */ "Each entry specifies a double micro-instruction that can be driven to ext_tcam.\n Mechanism if uinst_mem is intended to be used for INVALIDATing, SEARCHing entries in tables for which these commands are not supported.\n Also note that uinst_mem mechanism affects only the TCAM portion of entry. Associated Data is NOT altered - that must be done separately",
    /* EVNT_BINNING_TABLE        */ "this table will contain the binning information",
    /* EVNT_CMIC_ENG_PROPERTIES  */ "context properties (BD_addr in cmic, etc..)",
    /* EVNT_CONTEXT_PROPERTIES   */ "context properties (BD_addr in cmic, etc..).\n 0 - RX\n 1 - TX",
    /* EVNT_DATA_BUFFER_RX       */ "RX data buffer",
    /* EVNT_DATA_BUFFER_TX       */ "TX data buffer",
    /* EVNT_EVENTS_MAIN_MEM      */ "this table represents the main memory. The memory devided into banks as follow, this row is used for the defines of the all memory",
    /* EVNT_EVENTS_MAIN_MEM_BANK */ "tx events mem - contain Buffer descriptors and events data.\n Memory contains both Tx and Rx buffer descriptors and events data",
    /* EVNT_PROFILE_TABLE        */ "events profiles table",
    /* EVNT_SPACE_REGIONS        */ "Space Regions.\n RX - 0\n TX - 1",
    /* EVNT_TRANSACTION_ENGINE_BIT_MAPPING */ "Transaction Engine Mapping mem - mapping the event ID to transaction engine(s)",
    /* EVNT_TX_EVENT_ID_TO_CONTEXT_ID_MAP */ "mapping event ID to context ID",
    /* EXACT_MATCH_2             */ "ISS Table view for supporting 2 Exact Match Keys of width 128b or 160b.",
    /* EXACT_MATCH_4             */ "Table view when the ISS is in the 320b Search Mode for Exact Match searches.",
    /* EXACT_MATCH_2_ENTRY_ONLY  */ "DATA ONLY View of the ISS table when supporting 2 search ekys(128b and 160b).",
    /* EXACT_MATCH_2_ENTRY_ONLY_PIPE0 */ "DATA ONLY View of the ISS table when supporting 2 search ekys(128b and 160b).",
    /* EXACT_MATCH_2_ENTRY_ONLY_PIPE1 */ "DATA ONLY View of the ISS table when supporting 2 search ekys(128b and 160b).",
    /* EXACT_MATCH_2_ENTRY_ONLY_PIPE2 */ "DATA ONLY View of the ISS table when supporting 2 search ekys(128b and 160b).",
    /* EXACT_MATCH_2_ENTRY_ONLY_PIPE3 */ "DATA ONLY View of the ISS table when supporting 2 search ekys(128b and 160b).",
    /* EXACT_MATCH_2_PIPE0       */ "ISS Table view for supporting 2 Exact Match Keys of width 128b or 160b.",
    /* EXACT_MATCH_2_PIPE1       */ "ISS Table view for supporting 2 Exact Match Keys of width 128b or 160b.",
    /* EXACT_MATCH_2_PIPE2       */ "ISS Table view for supporting 2 Exact Match Keys of width 128b or 160b.",
    /* EXACT_MATCH_2_PIPE3       */ "ISS Table view for supporting 2 Exact Match Keys of width 128b or 160b.",
    /* EXACT_MATCH_4_ENTRY_ONLY  */ "Data ONLY view for the ISS table in 320b Search Mode for Exact Match Searches.",
    /* EXACT_MATCH_4_ENTRY_ONLY_PIPE0 */ "Data ONLY view for the ISS table in 320b Search Mode for Exact Match Searches.",
    /* EXACT_MATCH_4_ENTRY_ONLY_PIPE1 */ "Data ONLY view for the ISS table in 320b Search Mode for Exact Match Searches.",
    /* EXACT_MATCH_4_ENTRY_ONLY_PIPE2 */ "Data ONLY view for the ISS table in 320b Search Mode for Exact Match Searches.",
    /* EXACT_MATCH_4_ENTRY_ONLY_PIPE3 */ "Data ONLY view for the ISS table in 320b Search Mode for Exact Match Searches.",
    /* EXACT_MATCH_4_PIPE0       */ "Table view when the ISS is in the 320b Search Mode for Exact Match searches.",
    /* EXACT_MATCH_4_PIPE1       */ "Table view when the ISS is in the 320b Search Mode for Exact Match searches.",
    /* EXACT_MATCH_4_PIPE2       */ "Table view when the ISS is in the 320b Search Mode for Exact Match searches.",
    /* EXACT_MATCH_4_PIPE3       */ "Table view when the ISS is in the 320b Search Mode for Exact Match searches.",
    /* EXACT_MATCH_ACTION_PROFILE */ "Action Set Bitmap for first EM Lookup Data",
    /* EXACT_MATCH_ACTION_PROFILE_PIPE0 */ "Action Set Bitmap for first EM Lookup Data",
    /* EXACT_MATCH_ACTION_PROFILE_PIPE1 */ "Action Set Bitmap for first EM Lookup Data",
    /* EXACT_MATCH_ACTION_PROFILE_PIPE2 */ "Action Set Bitmap for first EM Lookup Data",
    /* EXACT_MATCH_ACTION_PROFILE_PIPE3 */ "Action Set Bitmap for first EM Lookup Data",
    /* EXACT_MATCH_DEFAULT_POLICY */ "This Data Structure provides the default policy to be used if there is a miss in the EM Lookups.A packet can have 2 parallel lookups in this table.",
    /* EXACT_MATCH_DEFAULT_POLICY_PIPE0 */ "This Data Structure provides the default policy to be used if there is a miss in the EM Lookups.A packet can have 2 parallel lookups in this table.",
    /* EXACT_MATCH_DEFAULT_POLICY_PIPE1 */ "This Data Structure provides the default policy to be used if there is a miss in the EM Lookups.A packet can have 2 parallel lookups in this table.",
    /* EXACT_MATCH_DEFAULT_POLICY_PIPE2 */ "This Data Structure provides the default policy to be used if there is a miss in the EM Lookups.A packet can have 2 parallel lookups in this table.",
    /* EXACT_MATCH_DEFAULT_POLICY_PIPE3 */ "This Data Structure provides the default policy to be used if there is a miss in the EM Lookups.A packet can have 2 parallel lookups in this table.",
    /* EXACT_MATCH_HIT_ONLY      */ "FP Exact Match Hit Bit Table",
    /* EXACT_MATCH_KEY_GEN_MASK  */ "This data structure stores a per logical table mask for the Exact Match Keys.",
    /* EXACT_MATCH_KEY_GEN_MASK_PIPE0 */ "This data structure stores a per logical table mask for the Exact Match Keys.",
    /* EXACT_MATCH_KEY_GEN_MASK_PIPE1 */ "This data structure stores a per logical table mask for the Exact Match Keys.",
    /* EXACT_MATCH_KEY_GEN_MASK_PIPE2 */ "This data structure stores a per logical table mask for the Exact Match Keys.",
    /* EXACT_MATCH_KEY_GEN_MASK_PIPE3 */ "This data structure stores a per logical table mask for the Exact Match Keys.",
    /* EXACT_MATCH_KEY_GEN_PROGRAM_PROFILE */ "Key Generator Profile Table that provides instructions for Key Generation",
    /* EXACT_MATCH_KEY_GEN_PROGRAM_PROFILE_PIPE0 */ "Key Generator Profile Table that provides instructions for Key Generation",
    /* EXACT_MATCH_KEY_GEN_PROGRAM_PROFILE_PIPE1 */ "Key Generator Profile Table that provides instructions for Key Generation",
    /* EXACT_MATCH_KEY_GEN_PROGRAM_PROFILE_PIPE2 */ "Key Generator Profile Table that provides instructions for Key Generation",
    /* EXACT_MATCH_KEY_GEN_PROGRAM_PROFILE_PIPE3 */ "Key Generator Profile Table that provides instructions for Key Generation",
    /* EXACT_MATCH_LOGICAL_TABLE_SELECT */ "TCAM used to select the Key Generation Profile for the 2 EM lookups.",
    /* EXACT_MATCH_LOGICAL_TABLE_SELECT_DATA_ONLY */ "TCAM used to select the Key Generation Profile for the 2 EM lookups.",
    /* EXACT_MATCH_LOGICAL_TABLE_SELECT_DATA_ONLY_PIPE0 */ "TCAM used to select the Key Generation Profile for the 2 EM lookups.",
    /* EXACT_MATCH_LOGICAL_TABLE_SELECT_DATA_ONLY_PIPE1 */ "TCAM used to select the Key Generation Profile for the 2 EM lookups.",
    /* EXACT_MATCH_LOGICAL_TABLE_SELECT_DATA_ONLY_PIPE2 */ "TCAM used to select the Key Generation Profile for the 2 EM lookups.",
    /* EXACT_MATCH_LOGICAL_TABLE_SELECT_DATA_ONLY_PIPE3 */ "TCAM used to select the Key Generation Profile for the 2 EM lookups.",
    /* EXACT_MATCH_LOGICAL_TABLE_SELECT_PIPE0 */ "TCAM used to select the Key Generation Profile for the 2 EM lookups.",
    /* EXACT_MATCH_LOGICAL_TABLE_SELECT_PIPE1 */ "TCAM used to select the Key Generation Profile for the 2 EM lookups.",
    /* EXACT_MATCH_LOGICAL_TABLE_SELECT_PIPE2 */ "TCAM used to select the Key Generation Profile for the 2 EM lookups.",
    /* EXACT_MATCH_LOGICAL_TABLE_SELECT_PIPE3 */ "TCAM used to select the Key Generation Profile for the 2 EM lookups.",
    /* EXACT_MATCH_LOGICAL_TABLE_SELECT_TCAM_ONLY */ "TCAM used to select the Key Generation Profile for the 2 EM lookups.",
    /* EXACT_MATCH_LOGICAL_TABLE_SELECT_TCAM_ONLY_PIPE0 */ "TCAM used to select the Key Generation Profile for the 2 EM lookups.",
    /* EXACT_MATCH_LOGICAL_TABLE_SELECT_TCAM_ONLY_PIPE1 */ "TCAM used to select the Key Generation Profile for the 2 EM lookups.",
    /* EXACT_MATCH_LOGICAL_TABLE_SELECT_TCAM_ONLY_PIPE2 */ "TCAM used to select the Key Generation Profile for the 2 EM lookups.",
    /* EXACT_MATCH_LOGICAL_TABLE_SELECT_TCAM_ONLY_PIPE3 */ "TCAM used to select the Key Generation Profile for the 2 EM lookups.",
    /* EXACT_MATCH_QOS_ACTIONS_PROFILE */ "QoS Actions Profile Table for EM Lookup 0",
    /* EXACT_MATCH_QOS_ACTIONS_PROFILE_PIPE0 */ "QoS Actions Profile Table for EM Lookup 0",
    /* EXACT_MATCH_QOS_ACTIONS_PROFILE_PIPE1 */ "QoS Actions Profile Table for EM Lookup 0",
    /* EXACT_MATCH_QOS_ACTIONS_PROFILE_PIPE2 */ "QoS Actions Profile Table for EM Lookup 0",
    /* EXACT_MATCH_QOS_ACTIONS_PROFILE_PIPE3 */ "QoS Actions Profile Table for EM Lookup 0",
    /* EXP_TABLE                 */ "Exp Table. Indexed by {scr_port[4:0], mpls_exp[2:0]}",
    /* EXT_ACL144_TCAM           */ "This view supports only READ, WRITE operations.",
    /* EXT_ACL144_TCAM_IPV4      */ "ACL144_IPV4 Software overlay of EXT_ACL144_TCAM",
    /* EXT_ACL144_TCAM_IPV6      */ "ACL144_IPV6 Software overlay of EXT_ACL144_TCAM",
    /* EXT_ACL144_TCAM_L2        */ "ACL144_L2 Software overlay of EXT_ACL144_TCAM",
    /* EXT_ACL160_FP_POLICY_1X   */ "ACL160 policy software overlay of EXT_FP_POLICY_1X",
    /* EXT_ACL160_FP_POLICY_2X   */ "ACL160 policy software overlay of EXT_FP_POLICY_2X",
    /* EXT_ACL160_FP_POLICY_3X   */ "ACL160 policy software overlay of EXT_FP_POLICY_3X",
    /* EXT_ACL160_FP_POLICY_4X   */ "ACL160 policy software overlay of EXT_FP_POLICY_4X",
    /* EXT_ACL160_FP_POLICY_6X   */ "ACL160 policy software overlay of EXT_FP_POLICY_6X",
    /* EXT_ACL160_TCAM           */ "POLICY TABLE FOR DETERMINING ACTIONS IN THE FP, FeatureSpecific-FP.",
    /* EXT_ACL288_TCAM           */ "This view supports only READ, WRITE operations.",
    /* EXT_ACL288_TCAM_IPV4      */ "ACL288_IPV4 Software overlay of EXT_ACL288_TCAM",
    /* EXT_ACL288_TCAM_L2        */ "ACL288_L2 Software overlay of EXT_ACL288_TCAM",
    /* EXT_ACL320_FP_POLICY_1X   */ "ACL320 policy software overlay of EXT_FP_POLICY_1X",
    /* EXT_ACL320_FP_POLICY_2X   */ "ACL320 policy software overlay of EXT_FP_POLICY_2X",
    /* EXT_ACL320_FP_POLICY_3X   */ "ACL320 policy software overlay of EXT_FP_POLICY_3X",
    /* EXT_ACL320_FP_POLICY_4X   */ "ACL320 policy software overlay of EXT_FP_POLICY_4X",
    /* EXT_ACL320_FP_POLICY_6X   */ "ACL320 policy software overlay of EXT_FP_POLICY_6X",
    /* EXT_ACL320_TCAM           */ "POLICY TABLE FOR DETERMINING ACTIONS IN THE FP, FeatureSpecific-FP.",
    /* EXT_ACL360_TCAM_DATA      */ "This view supports only READ, WRITE operations.\n For READs, this view returns only the data portion of entry, mask portion of entry read from ext_tcam is stored in onchip_mask_mem. For WRITEs, this view ASSUMES that mask partion of the entry was CORRECTLY PRELOADED earlier into onchip_mask_mem",
    /* EXT_ACL360_TCAM_DATA_IPV6_SHORT */ "ACL360_IPV6_SHORT Software overlay of EXT_ACL360_TCAM_DATA",
    /* EXT_ACL360_TCAM_MASK      */ "This view supports only READ, WRITE operations.\n Note: This is an on-chip memory so Response Word will NOT be returned.\n Note: READ, WRITE to this view DOES NOT RESULT in any accesses to ext_tcam.\n WRITE operation allows preloading of mask word into onchip_mask_mem, READ operation causes the contents of onchip_mask_mem to be returned",
    /* EXT_ACL360_TCAM_MASK_IPV6_SHORT */ "ACL360_TCAM_MASK Software overlay of EXT_ACL480_TCAM_MASK",
    /* EXT_ACL432_TCAM_DATA      */ "This view supports only READ, WRITE operations.\n For READs, this view returns only the data portion of entry, mask portion of entry read from ext_tcam is stored in onchip_mask_mem. For WRITEs, this view ASSUMES that mask partion of the entry was CORRECTLY PRELOADED earlier into onchip_mask_mem",
    /* EXT_ACL432_TCAM_DATA_IPV6_LONG */ "ACL432_IPV6_LONG Software overlay of EXT_ACL432_TCAM_DATA",
    /* EXT_ACL432_TCAM_DATA_L2_IPV4 */ "ACL432_L2_IPV4 Software overlay of EXT_ACL432_TCAM_DATA",
    /* EXT_ACL432_TCAM_DATA_L2_IPV6 */ "ACL432_L2_IPV6 Software overlay of EXT_ACL432_TCAM_DATA",
    /* EXT_ACL432_TCAM_MASK      */ "This view supports only READ, WRITE operations.\n Note: This is an on-chip memory so Response Word will NOT be returned.\n Note: READ, WRITE to this view DOES NOT RESULT in any accesses to ext_tcam.\n WRITE operation allows preloading of mask word into onchip_mask_mem, READ operation causes the contents of onchip_mask_mem to be returned",
    /* EXT_ACL432_TCAM_MASK_IPV6_LONG */ "ACL432_TCAM_MASK Software overlay of EXT_ACL480_TCAM_MASK",
    /* EXT_ACL432_TCAM_MASK_L2_IPV6 */ "ACL432_TCAM_MASK Software overlay of EXT_ACL480_TCAM_MASK",
    /* EXT_ACL480_FP_POLICY_1X   */ "ACL480 policy software overlay of EXT_FP_POLICY_1X",
    /* EXT_ACL480_FP_POLICY_2X   */ "ACL480 policy software overlay of EXT_FP_POLICY_2X",
    /* EXT_ACL480_FP_POLICY_3X   */ "ACL480 policy software overlay of EXT_FP_POLICY_3X",
    /* EXT_ACL480_FP_POLICY_4X   */ "ACL480 policy software overlay of EXT_FP_POLICY_4X",
    /* EXT_ACL480_FP_POLICY_6X   */ "ACL480 policy software overlay of EXT_FP_POLICY_6X",
    /* EXT_ACL480_TCAM_DATA      */ "POLICY TABLE FOR DETERMINING ACTIONS IN THE FP, FeatureSpecific-FP.",
    /* EXT_ACL480_TCAM_MASK      */ "POLICY TABLE FOR DETERMINING ACTIONS IN THE FP, FeatureSpecific-FP.",
    /* EXT_ACL80_FP_POLICY_1X    */ "ACL80 policy software overlay of EXT_FP_POLICY_1X",
    /* EXT_ACL80_FP_POLICY_2X    */ "ACL80 policy software overlay of EXT_FP_POLICY_2X",
    /* EXT_ACL80_FP_POLICY_3X    */ "ACL80 policy software overlay of EXT_FP_POLICY_3X",
    /* EXT_ACL80_FP_POLICY_4X    */ "ACL80 policy software overlay of EXT_FP_POLICY_4X",
    /* EXT_ACL80_FP_POLICY_6X    */ "ACL80 policy software overlay of EXT_FP_POLICY_6X",
    /* EXT_ACL80_TCAM            */ "POLICY TABLE FOR DETERMINING ACTIONS IN THE FP, FeatureSpecific-FP.",
    /* EXT_DEFIP_DATA            */ "This view supports only READ, WRITE operations.",
    /* EXT_DEFIP_DATA_IPV4       */ "EXT_DEFIP_DATA_IPV4 Software overlay of EXT_DEFIP_DATA",
    /* EXT_DEFIP_DATA_IPV6_64    */ "EXT_DEFIP_DATA_IPV6_64 Software overlay of EXT_DEFIP_DATA",
    /* EXT_DEFIP_DATA_IPV6_128   */ "EXT_DEFIP_DATA_IPV6_128 Software overlay of EXT_DEFIP_DATA",
    /* EXT_DST_HBITS             */ "HW managed EXT_DST_HBITS table.",
    /* EXT_DST_HIT_BITS          */ "On-chip dst_hit bits for ext tables.\n Note: this view requires ext_tcam_phy_adr\n Note: this view does not take into account HBIT_EN in ET_PA_XLAT table",
    /* EXT_DST_HIT_BITS_IPV4     */ "EXT_DST_HIT_BITS_IPV4 Software overlay of EXT_DST_HIT_BITS",
    /* EXT_DST_HIT_BITS_IPV4_UCAST */ "EXT_DST_HIT_BITS_IPV4_UCAST Software overlay of EXT_DST_HIT_BITS",
    /* EXT_DST_HIT_BITS_IPV4_UCAST_WIDE */ "EXT_DST_HIT_BITS_IPV4_UCAST_WIDE Software overlay of EXT_DST_HIT_BITS",
    /* EXT_DST_HIT_BITS_IPV6_64  */ "EXT_DST_HIT_BITS_IPV6_64 Software overlay of EXT_DST_HIT_BITS",
    /* EXT_DST_HIT_BITS_IPV6_128 */ "EXT_DST_HIT_BITS_IPV6_128 Software overlay of EXT_DST_HIT_BITS",
    /* EXT_DST_HIT_BITS_IPV6_128_UCAST */ "EXT_DST_HIT_BITS_IPV6_128_UCAST Software overlay of EXT_DST_HIT_BITS",
    /* EXT_DST_HIT_BITS_IPV6_128_UCAST_WIDE */ "EXT_DST_HIT_BITS_IPV6_128_UCAST_WIDE Software overlay of EXT_DST_HIT_BITS",
    /* EXT_DST_HIT_BITS_L2       */ "EXT_DST_HIT_BITS_L2 Software overlay of EXT_DST_HIT_BITS",
    /* EXT_DST_HIT_BITS_L2_WIDE  */ "EXT_DST_HIT_BITS_L2_WIDE Software overlay of EXT_DST_HIT_BITS",
    /* EXT_FP_CNTR               */ "This view supports only READ, WRITE operations.",
    /* EXT_FP_CNTR8              */ "READ, WRITE to this view provides access to 8 consecutive ext_fp_counters\n If resultant counter address in ext_sram does not fall on boundary of 8 x 72bits, the reads will wrap-around in a block of 8 counters",
    /* EXT_FP_CNTR8_ACL144_IPV4  */ "EXT_FP_CNTR8_ACL144_IPV4 Software overlay of EXT_FP_CNTR8",
    /* EXT_FP_CNTR8_ACL144_IPV6  */ "EXT_FP_CNTR8_ACL144_IPV6 Software overlay of EXT_FP_CNTR8",
    /* EXT_FP_CNTR8_ACL144_L2    */ "EXT_FP_CNTR8_ACL144_L2 Software overlay of EXT_FP_CNTR",
    /* EXT_FP_CNTR8_ACL288_IPV4  */ "EXT_FP_CNTR8_ACL288_IPV4 Software overlay of EXT_FP_CNTR8",
    /* EXT_FP_CNTR8_ACL288_L2    */ "EXT_FP_CNTR8_ACL288_L2 Software overlay of EXT_FP_CNTR8",
    /* EXT_FP_CNTR8_ACL360_IPV6_SHORT */ "EXT_FP_CNTR8_ACL360_IPV6_SHORT Software overlay of EXT_FP_CNTR8",
    /* EXT_FP_CNTR8_ACL432_IPV6_LONG */ "EXT_FP_CNTR8_ACL432_IPV6_LONG Software overlay of EXT_FP_CNTR8",
    /* EXT_FP_CNTR8_ACL432_L2_IPV4 */ "EXT_FP_CNTR8_ACL432_L2_IPV4 Software overlay of EXT_FP_CNTR8",
    /* EXT_FP_CNTR8_ACL432_L2_IPV6 */ "EXT_FP_CNTR8_ACL432_L2_IPV6 Software overlay of EXT_FP_CNTR8",
    /* EXT_FP_CNTR_ACL144_IPV4   */ "EXT_FP_CNTR_ACL144_IPV4 Software overlay of EXT_FP_CNTR",
    /* EXT_FP_CNTR_ACL144_IPV6   */ "EXT_FP_CNTR_ACL144_IPV6 Software overlay of EXT_FP_CNTR",
    /* EXT_FP_CNTR_ACL144_L2     */ "EXT_FP_CNTR_ACL144_L2 Software overlay of EXT_FP_CNTR",
    /* EXT_FP_CNTR_ACL288_IPV4   */ "EXT_FP_CNTR_ACL288_IPV4 Software overlay of EXT_FP_CNTR",
    /* EXT_FP_CNTR_ACL288_L2     */ "EXT_FP_CNTR_ACL288_L2 Software overlay of EXT_FP_CNTR",
    /* EXT_FP_CNTR_ACL360_IPV6_SHORT */ "EXT_FP_CNTR_ACL360_IPV6_SHORT Software overlay of EXT_FP_CNTR",
    /* EXT_FP_CNTR_ACL432_IPV6_LONG */ "EXT_FP_CNTR_ACL432_IPV6_LONG Software overlay of EXT_FP_CNTR",
    /* EXT_FP_CNTR_ACL432_L2_IPV4 */ "EXT_FP_CNTR_ACL432_L2_IPV4 Software overlay of EXT_FP_CNTR",
    /* EXT_FP_CNTR_ACL432_L2_IPV6 */ "EXT_FP_CNTR_ACL432_L2_IPV6 Software overlay of EXT_FP_CNTR",
    /* EXT_FP_POLICY             */ "This view supports only READ, WRITE operations.",
    /* EXT_FP_POLICY_1X          */ "External FP Policy. 35 bit.",
    /* EXT_FP_POLICY_2X          */ "External FP Policy, 70 bits data",
    /* EXT_FP_POLICY_3X          */ "External FP Policy. 105 bit data",
    /* EXT_FP_POLICY_4X          */ "External FP Policy, 140 bit data",
    /* EXT_FP_POLICY_6X          */ "External FP Policy, 210 bit data",
    /* EXT_FP_POLICY_ACL144_IPV4 */ "EXT_FP_POLICY_ACL144_IPV4 Software overlay of EXT_FP_POLICY",
    /* EXT_FP_POLICY_ACL144_IPV6 */ "EXT_FP_POLICY_ACL144_IPV6 Software overlay of EXT_FP_POLICY",
    /* EXT_FP_POLICY_ACL144_IPV4_1X */ "EXT_FP_POLICY_ACL144_IPV4 Software overlay of EXT_FP_POLICY_1X",
    /* EXT_FP_POLICY_ACL144_IPV4_2X */ "EXT_FP_POLICY_ACL144_IPV4 Software overlay of EXT_FP_POLICY_2X",
    /* EXT_FP_POLICY_ACL144_IPV4_3X */ "EXT_FP_POLICY_ACL144_IPV4 Software overlay of EXT_FP_POLICY_3X",
    /* EXT_FP_POLICY_ACL144_IPV4_4X */ "EXT_FP_POLICY_ACL144_IPV4 Software overlay of EXT_FP_POLICY_4X",
    /* EXT_FP_POLICY_ACL144_IPV4_6X */ "EXT_FP_POLICY_ACL144_IPV4 Software overlay of EXT_FP_POLICY_6X",
    /* EXT_FP_POLICY_ACL144_IPV6_1X */ "EXT_FP_POLICY_ACL144_IPV6_1X Software overlay of EXT_FP_POLICY_1X",
    /* EXT_FP_POLICY_ACL144_IPV6_2X */ "EXT_FP_POLICY_ACL144_IPV6_2X Software overlay of EXT_FP_POLICY_2X",
    /* EXT_FP_POLICY_ACL144_IPV6_3X */ "EXT_FP_POLICY_ACL144_IPV6_3X Software overlay of EXT_FP_POLICY_3X",
    /* EXT_FP_POLICY_ACL144_IPV6_4X */ "EXT_FP_POLICY_ACL144_IPV6_4X Software overlay of EXT_FP_POLICY_4X",
    /* EXT_FP_POLICY_ACL144_IPV6_6X */ "EXT_FP_POLICY_ACL144_IPV6_6X Software overlay of EXT_FP_POLICY_6X",
    /* EXT_FP_POLICY_ACL144_L2   */ "EXT_FP_POLICY_ACL144_L2 Software overlay of EXT_FP_POLICY",
    /* EXT_FP_POLICY_ACL144_L2_1X */ "EXT_FP_POLICY_ACL144_L2_1X Software overlay of EXT_FP_POLICY_1X",
    /* EXT_FP_POLICY_ACL144_L2_2X */ "EXT_FP_POLICY_ACL144_L2_2X Software overlay of EXT_FP_POLICY_2X",
    /* EXT_FP_POLICY_ACL144_L2_3X */ "EXT_FP_POLICY_ACL144_L2_3X Software overlay of EXT_FP_POLICY_3X",
    /* EXT_FP_POLICY_ACL144_L2_4X */ "EXT_FP_POLICY_ACL144_L2_4X Software overlay of EXT_FP_POLICY_4X",
    /* EXT_FP_POLICY_ACL144_L2_6X */ "EXT_FP_POLICY_ACL144_L2_6X Software overlay of EXT_FP_POLICY_6X",
    /* EXT_FP_POLICY_ACL288_IPV4 */ "EXT_FP_POLICY_ACL288_IPV4 Software overlay of EXT_FP_POLICY",
    /* EXT_FP_POLICY_ACL288_IPV4_1X */ "EXT_FP_POLICY_ACL288_IPV4_1X Software overlay of EXT_FP_POLICY_1X",
    /* EXT_FP_POLICY_ACL288_IPV4_2X */ "EXT_FP_POLICY_ACL288_IPV4_2X Software overlay of EXT_FP_POLICY_2X",
    /* EXT_FP_POLICY_ACL288_IPV4_3X */ "EXT_FP_POLICY_ACL288_IPV4_3X Software overlay of EXT_FP_POLICY_3X",
    /* EXT_FP_POLICY_ACL288_IPV4_4X */ "EXT_FP_POLICY_ACL288_IPV4_4X Software overlay of EXT_FP_POLICY_4X",
    /* EXT_FP_POLICY_ACL288_IPV4_6X */ "EXT_FP_POLICY_ACL288_IPV4_6X Software overlay of EXT_FP_POLICY_6X",
    /* EXT_FP_POLICY_ACL288_L2   */ "EXT_FP_POLICY_ACL288_L2 Software overlay of EXT_FP_POLICY",
    /* EXT_FP_POLICY_ACL288_L2_1X */ "EXT_FP_POLICY_ACL288_L2_1X Software overlay of EXT_FP_POLICY_1X",
    /* EXT_FP_POLICY_ACL288_L2_2X */ "EXT_FP_POLICY_ACL288_L2_2X Software overlay of EXT_FP_POLICY_2X",
    /* EXT_FP_POLICY_ACL288_L2_3X */ "EXT_FP_POLICY_ACL288_L2_3X Software overlay of EXT_FP_POLICY_3X",
    /* EXT_FP_POLICY_ACL288_L2_4X */ "EXT_FP_POLICY_ACL288_L2_4X Software overlay of EXT_FP_POLICY_4X",
    /* EXT_FP_POLICY_ACL288_L2_6X */ "EXT_FP_POLICY_ACL288_L2_6X Software overlay of EXT_FP_POLICY_6X",
    /* EXT_FP_POLICY_ACL360_IPV6_SHORT */ "EXT_FP_POLICY_ACL360_IPV6_SHORT Software overlay of EXT_FP_POLICY",
    /* EXT_FP_POLICY_ACL360_IPV6_SHORT_1X */ "EXT_FP_POLICY_ACL360_IPV6_SHORT_1X Software overlay of EXT_FP_POLICY_1X",
    /* EXT_FP_POLICY_ACL360_IPV6_SHORT_2X */ "EXT_FP_POLICY_ACL360_IPV6_SHORT_2X Software overlay of EXT_FP_POLICY_2X",
    /* EXT_FP_POLICY_ACL360_IPV6_SHORT_3X */ "EXT_FP_POLICY_ACL360_IPV6_SHORT_3X Software overlay of EXT_FP_POLICY_3X",
    /* EXT_FP_POLICY_ACL360_IPV6_SHORT_4X */ "EXT_FP_POLICY_ACL360_IPV6_SHORT_4X Software overlay of EXT_FP_POLICY_4X",
    /* EXT_FP_POLICY_ACL360_IPV6_SHORT_6X */ "EXT_FP_POLICY_ACL360_IPV6_SHORT_6X Software overlay of EXT_FP_POLICY_6X",
    /* EXT_FP_POLICY_ACL432_IPV6_LONG */ "EXT_FP_POLICY_ACL432_IPV6_LONG Software overlay of EXT_FP_POLICY",
    /* EXT_FP_POLICY_ACL432_IPV6_LONG_1X */ "EXT_FP_POLICY_ACL432_IPV6_LONG_1X Software overlay of EXT_FP_POLICY_1X",
    /* EXT_FP_POLICY_ACL432_IPV6_LONG_2X */ "EXT_FP_POLICY_ACL432_IPV6_LONG_2X Software overlay of EXT_FP_POLICY_2X",
    /* EXT_FP_POLICY_ACL432_IPV6_LONG_3X */ "EXT_FP_POLICY_ACL432_IPV6_LONG_3X Software overlay of EXT_FP_POLICY_3X",
    /* EXT_FP_POLICY_ACL432_IPV6_LONG_4X */ "EXT_FP_POLICY_ACL432_IPV6_LONG_4X Software overlay of EXT_FP_POLICY_4X",
    /* EXT_FP_POLICY_ACL432_IPV6_LONG_6X */ "EXT_FP_POLICY_ACL432_IPV6_LONG_6X Software overlay of EXT_FP_POLICY_6X",
    /* EXT_FP_POLICY_ACL432_L2_IPV4 */ "EXT_FP_POLICY_ACL432_L2_IPV4 Software overlay of EXT_FP_POLICY",
    /* EXT_FP_POLICY_ACL432_L2_IPV6 */ "EXT_FP_POLICY_ACL432_L2_IPV6 Software overlay of EXT_FP_POLICY",
    /* EXT_FP_POLICY_ACL432_L2_IPV4_1X */ "EXT_FP_POLICY_ACL432_L2_IPV4_1X Software overlay of EXT_FP_POLICY_1X",
    /* EXT_FP_POLICY_ACL432_L2_IPV4_2X */ "EXT_FP_POLICY_ACL432_L2_IPV4_2X Software overlay of EXT_FP_POLICY_2X",
    /* EXT_FP_POLICY_ACL432_L2_IPV4_3X */ "EXT_FP_POLICY_ACL432_L2_IPV4_3X Software overlay of EXT_FP_POLICY_3X",
    /* EXT_FP_POLICY_ACL432_L2_IPV4_4X */ "EXT_FP_POLICY_ACL432_L2_IPV4_4X Software overlay of EXT_FP_POLICY_4X",
    /* EXT_FP_POLICY_ACL432_L2_IPV4_6X */ "EXT_FP_POLICY_ACL432_L2_IPV4_6X Software overlay of EXT_FP_POLICY_6X",
    /* EXT_FP_POLICY_ACL432_L2_IPV6_1X */ "EXT_FP_POLICY_ACL432_L2_IPV6_1X Software overlay of EXT_FP_POLICY_1X",
    /* EXT_FP_POLICY_ACL432_L2_IPV6_2X */ "EXT_FP_POLICY_ACL432_L2_IPV6_2X Software overlay of EXT_FP_POLICY_2X",
    /* EXT_FP_POLICY_ACL432_L2_IPV6_3X */ "EXT_FP_POLICY_ACL432_L2_IPV6_3X Software overlay of EXT_FP_POLICY_3X",
    /* EXT_FP_POLICY_ACL432_L2_IPV6_4X */ "EXT_FP_POLICY_ACL432_L2_IPV6_4X Software overlay of EXT_FP_POLICY_4X",
    /* EXT_FP_POLICY_ACL432_L2_IPV6_6X */ "EXT_FP_POLICY_ACL432_L2_IPV6_6X Software overlay of EXT_FP_POLICY_6X",
    /* EXT_IFP_ACTION_PROFILE    */ "This table expands a 7-bit pointer from the external ACL lookup into the profiled actions described in the fields of this table. These actions are then resolved along with the internal IFP actions. FeatureSpecific-Ethernet",
    /* EXT_IPV4_DEFIP            */ "This view supports only READ, WRITE operations.",
    /* EXT_IPV4_DEFIP_TCAM       */ "This view supports only READ, WRITE operations.",
    /* EXT_IPV4_TCAM             */ "TCAM only view for EXT_IPV4_UCAST, EXT_IPV4_UCAST_WIDE, EXT_IPV4_DEFIP",
    /* EXT_IPV4_UCAST            */ "Unified view with EXT_L3_UCAST_DATA and EXT_IPV4_TCAM",
    /* EXT_IPV4_UCAST_TCAM       */ "EXT_IPV4_UCAST_TCAM Software overlay of EXT_IPV4_TCAM",
    /* EXT_IPV4_UCAST_WIDE       */ "Unified view with EXT_L3_UCAST_DATA_WIDE and EXT_IPV4_TCAM",
    /* EXT_IPV4_UCAST_WIDE_TCAM  */ "EXT_IPV4_UCAST_WIDE_TCAM Software overlay of EXT_IPV4_TCAM",
    /* EXT_IPV6_128_DEFIP        */ "This view supports only READ, WRITE operations.",
    /* EXT_IPV6_128_DEFIP_TCAM   */ "This view supports only READ, WRITE operations.",
    /* EXT_IPV6_128_TCAM         */ "TCAM view for EXT_IPV6_128_UCAST, EXT_IPV6_128_UCAST_WIDE and EXT_IPV6_128_DEFIP",
    /* EXT_IPV6_128_UCAST        */ "Unified view with EXT_L3_UCAST_DATA and EXT_IPV6_128_TCAM",
    /* EXT_IPV6_128_UCAST_TCAM   */ "EXT_IPV6_128_UCAST_TCAM Software overlay of EXT_IPV6_128_TCAM",
    /* EXT_IPV6_128_UCAST_WIDE   */ "Unified view with EXT_L3_UCAST_DATA_WIDE and EXT_IPV6_128_TCAM",
    /* EXT_IPV6_128_UCAST_WIDE_TCAM */ "EXT_IPV6_128_UCAST_WIDE_TCAM Software overlay of EXT_IPV6_128_TCAM",
    /* EXT_IPV6_64_DEFIP         */ "This view supports only READ, WRITE operations.",
    /* EXT_IPV6_64_DEFIP_TCAM    */ "This view supports only READ, WRITE operations.",
    /* EXT_IPV6_64_TCAM          */ "TCAM only view for EXT_IPV6_64_DEFIP",
    /* EXT_L2_ENTRY              */ "This view supports only INSERT, DELETE, LOOKUP operations. 72b Local Mask field in TCAM is implicitly {11'h7FF, 61'h0}.\n Note: DELETE operation for this table only results in the entry being marked FREE and not to be INVALIDATED",
    /* EXT_L2_ENTRY_1            */ "EXT_L2_ENTRY_1, Single base entry views. FeatureSpecific-Ethernet.",
    /* EXT_L2_ENTRY_2            */ "EXT_L2_ENTRY_2, Single base entry views. FeatureSpecific-Ethernet.",
    /* EXT_L2_ENTRY_DATA         */ "This view supports only READ, WRITE operations and is intended for debug purposes.",
    /* EXT_L2_ENTRY_DATA_ONLY    */ "EXT_L2_ENTRY_DATA_ONLY.",
    /* EXT_L2_ENTRY_DATA_ONLY_WIDE */ "EXT_L2_ENTRY_DATA_ONLY_WIDE.",
    /* EXT_L2_ENTRY_TCAM         */ "This view supports only READ, WRITE operations and is intended for debug purposes.",
    /* EXT_L2_ENTRY_TCAM_WIDE    */ "EXT_L2_ENTRY_TCAM_WIDE Software overlay of EXT_L2_ENTRY_TCAM",
    /* EXT_L2_MOD_FIFO           */ "Format of entry in ext_L2MODFIFO\n This table supports FIFO_POP command. FIFO_PUSH, MEM_RD, MEM_WR are supported for debug only. The format of entry here is also the format of sbus_rsp for LOOKUP, INSERT, DELETE directed to EXT_L2_ENTRY table",
    /* EXT_L3_UCAST_DATA         */ "Unicast data for IPV4, IPV6",
    /* EXT_L3_UCAST_DATA_IPV4    */ "EXT_L3_UCAST_DATA_IPV4 Software overlay of EXT_L3_UCAST_DATA",
    /* EXT_L3_UCAST_DATA_IPV6_128 */ "EXT_L3_UCAST_DATA_IPV6_128 Software overlay of EXT_L3_UCAST_DATA",
    /* EXT_L3_UCAST_DATA_WIDE    */ "Unicast data for IPV4, IPV6",
    /* EXT_L3_UCAST_DATA_WIDE_IPV4 */ "EXT_L3_UCAST_DATA_WIDE_IPV4 Software overlay of EXT_L3_UCAST_DATA_WIDE",
    /* EXT_L3_UCAST_DATA_WIDE_IPV6_128 */ "EXT_L3_UCAST_DATA_WIDE_IPV6_128 Software overlay of EXT_L3_UCAST_DATA_WIDE",
    /* EXT_LOC_SRC_HBITS         */ "HW managed EXT_LOC_SRC_HBITS table.",
    /* EXT_LOC_SRC_HIT_BITS_L2   */ "EXT_LOC_SRC_HIT_BITS_L2 Software overlay of EXT_LOC_SRC_HBITS",
    /* EXT_LOC_SRC_HIT_BITS_L2_WIDE */ "EXT_LOC_SRC_HIT_BITS_L2_WIDE Software overlay of EXT_LOC_SRC_HBITS",
    /* EXT_SRC_HBITS             */ "HW managed EXT_SRC_HBITS table.",
    /* EXT_SRC_HIT_BITS          */ "On-chip src_hit bits for ext tables.\n Note: this view requires ext_tcam_phy_adr\n Note: this view does not take into account HBIT_EN in ET_PA_XLAT table",
    /* EXT_SRC_HIT_BITS_IPV4     */ "EXT_SRC_HIT_BITS_IPV4 Software overlay of EXT_SRC_HIT_BITS",
    /* EXT_SRC_HIT_BITS_IPV4_UCAST */ "EXT_SRC_HIT_BITS_IPV4_UCAST Software overlay of EXT_SRC_HIT_BITS",
    /* EXT_SRC_HIT_BITS_IPV4_UCAST_WIDE */ "EXT_SRC_HIT_BITS_IPV4_UCAST_WIDE Software overlay of EXT_SRC_HIT_BITS",
    /* EXT_SRC_HIT_BITS_IPV6_64  */ "EXT_SRC_HIT_BITS_IPV6_64 Software overlay of EXT_SRC_HIT_BITS",
    /* EXT_SRC_HIT_BITS_IPV6_128 */ "EXT_SRC_HIT_BITS_IPV6_128 Software overlay of EXT_SRC_HIT_BITS",
    /* EXT_SRC_HIT_BITS_IPV6_128_UCAST */ "EXT_SRC_HIT_BITS_IPV6_128_UCAST Software overlay of EXT_SRC_HIT_BITS",
    /* EXT_SRC_HIT_BITS_IPV6_128_UCAST_WIDE */ "EXT_SRC_HIT_BITS_IPV6_128_UCAST_WIDE Software overlay of EXT_SRC_HIT_BITS",
    /* EXT_SRC_HIT_BITS_L2       */ "EXT_SRC_HIT_BITS_L2 Software overlay of EXT_SRC_HIT_BITS",
    /* EXT_SRC_HIT_BITS_L2_WIDE  */ "EXT_SRC_HIT_BITS_L2_WIDE Software overlay of EXT_SRC_HIT_BITS",
    /* EXT_TCAM_VBIT             */ "ext_tcam Vbit view",
    /* EXT_TCAM_VBIT_ACL80       */ "EXT_TCAM_VBIT_ACL80 Software overlay of EXT_TCAM_VBIT",
    /* EXT_TCAM_VBIT_ACL160      */ "EXT_TCAM_VBIT_ACL160 Software overlay of EXT_TCAM_VBIT",
    /* EXT_TCAM_VBIT_ACL320      */ "EXT_TCAM_VBIT_ACL320 Software overlay of EXT_TCAM_VBIT",
    /* EXT_TCAM_VBIT_ACL480      */ "EXT_TCAM_VBIT_ACL480 Software overlay of EXT_TCAM_VBIT",
    /* EXT_TCAM_VBIT_DEFIP_IPV4  */ "EXT_TCAM_VBIT_DEFIP_IPV4 Software overlay of EXT_TCAM_VBIT",
    /* EXT_TCAM_VBIT_DEFIP_IPV6_64 */ "EXT_TCAM_VBIT_DEFIP_IPV6_64 Software overlay of EXT_TCAM_VBIT",
    /* EXT_TCAM_VBIT_DEFIP_IPV6_128 */ "EXT_TCAM_VBIT_DEFIP_IPV6_128 Software overlay of EXT_TCAM_VBIT",
    /* EXT_TCAM_VBIT_IPV4_UCAST  */ "EXT_TCAM_VBIT_IPV4_UCAST Software overlay of EXT_TCAM_VBIT",
    /* EXT_TCAM_VBIT_IPV4_UCAST_WIDE */ "EXT_TCAM_VBIT_IPV4_UCAST_WIDE Software overlay of EXT_TCAM_VBIT",
    /* EXT_TCAM_VBIT_IPV6_128_UCAST */ "EXT_TCAM_VBIT_IPV6_128_UCAST Software overlay of EXT_TCAM_VBIT",
    /* EXT_TCAM_VBIT_IPV6_128_UCAST_WIDE */ "EXT_TCAM_VBIT_IPV6_128_UCAST_WIDE Software overlay of EXT_TCAM_VBIT",
    /* EXT_TCAM_VBIT_L2_ENTRY_1  */ "EXT_TCAM_VBIT_L2_ENTRY_1 Software overlay of EXT_TCAM_VBIT",
    /* EXT_TCAM_VBIT_L2_ENTRY_2  */ "EXT_TCAM_VBIT_L2_ENTRY_2 Software overlay of EXT_TCAM_VBIT",
    /* EXT_TM_MANAGED_PORT       */ "contains a port bitmap indicating all local ports managed by Arad",
    /* FAST_TRUNK_GROUP          */ "Contains the members in each FAST LAG group.",
    /* FCOE_HOP_COUNT_FN         */ "FCOE hop count to FN mapping table",
    /* FCR_EFMSM                 */ "",
    /* FCR_EFMS_SOURCE_PIPE      */ "Address is bits 10:3 of the source device id. Each line represents 8 source devices.\n                   If bit is set, flow-status cell with the relevant source device will bypass the EFMS.",
    /* FCR_FCR_CRM_0             */ "Flow-status, credit and reachability cells FIFOs for links 0-15.\n Width  110 data bits(control cell). 8 bits for ECC.",
    /* FCR_FCR_CRM_1             */ "Flow-status, credit and reachability cells FIFOs for links 16-31\n Width  110 data bits(control cell). 8 bits for ECC.",
    /* FCR_FCR_CRM_2             */ "Flow-status, credit and reachability cells FIFOs for links 32-47 number).\n Width  110 data bits(control cell). 8 bits for ECC.",
    /* FCR_FCR_CRM_3             */ "Flow-status, credit and reachability cells FIFOs for links 48-63\n Width  110 data bits(control cell). 8 bits for ECC.",
    /* FCR_FCR_CRM_4             */ "Flow-status, credit and reachability cells FIFOs for links 64-71.\n Width  110 data bits(control cell). 8 bits for ECC.",
    /* FCR_FCR_CRM_5             */ "Flow-status, credit and reachability cells FIFOs for links 64-71.\n Width  110 data bits(control cell). 8 bits for ECC.",
    /* FCR_FCR_CRM_6             */ "Flow-status, credit and reachability cells FIFOs for links 64-71.\n Width  110 data bits(control cell). 8 bits for ECC.",
    /* FCR_FCR_CRM_A             */ "",
    /* FCR_FCR_CRM_B             */ "",
    /* FCR_LOCAL_FIFOS           */ "Flow-status cells fifo for local inter face towards core0",
    /* FCT_FCT_REACH_OUT         */ "Reachability out FIFO",
    /* FC_CREDITS                */ "This table contains credits for each FIFO in the FC.",
    /* FC_HEADER_TYPE            */ "FCoE Header Type.",
    /* FC_MAP_PROFILE            */ "FC MAP",
    /* FDA_FDA_MC                */ "For each mc_id:\n                   bit mc_id * 2 + 0 indicates ceill is replicated to egq0\n                   bit mc_id * 2 + 1 indicates cell is replicated to egq1\n                   Each row contains 32 mc_ids",
    /* FDA_MEM_1002000           */ "INTERNAL",
    /* FDA_MEM_1003000           */ "INTERNAL",
    /* FDA_MEM_1004000           */ "INTERNAL",
    /* FDA_MEM_1005000           */ "INTERNAL",
    /* FDA_MEM_1006000           */ "INTERNAL",
    /* FDA_MEM_1007000           */ "INTERNAL",
    /* FDA_MEM_1008000           */ "INTERNAL",
    /* FDA_MEM_1009000           */ "INTERNAL",
    /* FDA_MEM_1010000           */ "INTERNAL",
    /* FDA_MEM_1011000           */ "INTERNAL",
    /* FDA_MEM_100A000           */ "INTERNAL",
    /* FDA_MEM_100C000           */ "INTERNAL",
    /* FDA_MEM_100E000           */ "INTERNAL",
    /* FDR_FDR_MC                */ "For each mc_id:\n bit mc_id * 2 + 0 indicates cell is replicated to egq0\n bit mc_id * 2 + 1 indicates cell is replicated to egq1\n Each row contains 64 mc_ids",
    /* FDR_MEM_100000            */ "INTERNAL",
    /* FDR_MEM_200000            */ "INTERNAL",
    /* FDR_MEM_300000            */ "INTERNAL",
    /* FDR_MEM_400000            */ "INTERNAL",
    /* FDR_MEM_500000            */ "INTERNAL",
    /* FDR_MEM_600000            */ "INTERNAL",
    /* FDR_MEM_700000            */ "INTERNAL",
    /* FDR_MEM_800000            */ "INTERNAL",
    /* FDR_MEM_900000            */ "INTERNAL",
    /* FDR_MEM_1300000           */ "INTERNAL",
    /* FDR_MEM_1400000           */ "INTERNAL",
    /* FDR_MEM_1500000           */ "INTERNAL",
    /* FDR_MEM_A00000            */ "INTERNAL",
    /* FDR_MEM_B00000            */ "INTERNAL",
    /* FDR_MEM_C00000            */ "INTERNAL",
    /* FDTL_MCT_PAYLOAD          */ "FDT fabric output pipe: 14Macs X 2Cores X 4(1024b entries) = 112instances\n Depth = 8Links X 12Cells = 96",
    /* FDT_IN_BAND_MEM           */ "InBand topology table. Each row represent one potential replication of the InBand cell.",
    /* FDT_IPT_CTRL_FIFO         */ "hold the IPT descriptor with the RTP bitmap",
    /* FDT_IPT_DESC              */ "Input pipe IPT descriptors fifo",
    /* FDT_IPT_MESH_MC           */ "In mesh mode: IPT MC replication. Address is bits 15:5 of MCID.\n                   In fabric mode: Packing control and minimum number of links. Address is destination device.",
    /* FDT_IPT_PAYLOAD           */ "Input pipe IPT payload fifo",
    /* FDT_IPT_PAYLOAD_FIFO      */ "Holds the IPT Payload fifo",
    /* FDT_IRE_DESC              */ "Input pipe IRE descriptors fifo",
    /* FDT_IRE_PAYLOAD           */ "Input pipe IRE descriptors fifo",
    /* FDT_IRE_TDM_FIFO          */ "hold the IPT descriptor with the RTP bitmap",
    /* FDT_IRE_TDM_MASKS         */ "36 masks used to select the available links used by IRE TDM packets.\n                   Index by pointer configured by the IRE.",
    /* FDT_MEM_100000            */ "INTERNAL",
    /* FDT_MESH_MC               */ "In mesh mode: IPT MC replication. Address is bits 15:5 of MCID.\n In fabric mode: Destinaion FAP looad balancing context  and minimum number of links. Address is destination device.",
    /* FDT_WFD                   */ "Weighted Fabric Distribution\n memload_balancing_ctx =  112  link_thr\n Each row represents a load balancing context. Width = 112Links X 7bits thr.\n Thr/127 is the probablity to select the link.",
    /* FF_FC_CONFIG              */ "contains the base and limit and en for each fifo",
    /* FF_FC_MEM_CONFIG          */ "contains per memory info",
    /* FIFO_GROUP_MAP_TABLE      */ "Configuration Map for Groups of Four FIFOs",
    /* FIFO_MAP_TABLE            */ "Configuration Map for all the FIFOs",
    /* FIFO_SHAPER_TABLE_0       */ "Parameters for the Min and Max Shapers used to shape the FIFOs 0-131",
    /* FIFO_SHAPER_TABLE_1       */ "Parameters for the Min and Max Shapers used to shape the FIFOs 132-263",
    /* FIFO_SHAPER_TABLE_2       */ "Parameters for the Min and Max Shapers used to shape the FIFOs 264-395",
    /* FIFO_SHAPER_TABLE_3       */ "Parameters for the Min and Max Shapers used to shape the FIFOs 396-527",
    /* FIFO_WERR_TABLE           */ "WERR parameters for for all the FIFOs",
    /* FILTERMATCHCOUNT          */ "Number of Pre-Crypto Filter Match Hits for each Rule",
    /* FLOOD_LEARN_MATCH_VLANS_PORT_A */ "VLAN Membership bitmap for PORT_A for FLOOD_LEARN.",
    /* FLOOD_LEARN_MATCH_VLANS_PORT_B */ "VLAN Membership bitmap for PORT_B for FLOOD_LEARN.",
    /* FLOW_CONTROL_BASE_TABLE   */ "Flow Control Base Table",
    /* FLOW_CONTROL_MAP_TABLE    */ "Flow Control Map Table",
    /* FLOW_CONTROL_STATE_TABLE  */ "Flow Control State Table",
    /* FLOW_CONTROL_TRANSLATE_TABLE */ "Flow Control Translate Table",
    /* FLUSH_PENDING             */ "This database contains the flush_pending state bit for each queue. Address = Queue[15:4], Bit = Queue[3:0]",
    /* FMAC_RX_FEC_BUFFER_0      */ "",
    /* FMAC_RX_FEC_BUFFER_1      */ "",
    /* FMAC_RX_RRR_CTRL          */ "",
    /* FMAC_RX_RRR_DATA          */ "",
    /* FMAC_RX_RRR_HEADER        */ "",
    /* FMAC_TX_TRR_DATA_HEADER   */ "",
    /* FMAC_TX_TRR_DATA_PAYLOAD  */ "",
    /* FPEM_ECC                  */ "FPEM ECC Table",
    /* FPEM_ECC_PIPE0            */ "FPEM ECC Table",
    /* FPEM_ECC_PIPE1            */ "FPEM ECC Table",
    /* FPEM_ECC_PIPE2            */ "FPEM ECC Table",
    /* FPEM_ECC_PIPE3            */ "FPEM ECC Table",
    /* FPEM_LP                   */ "FPEM LP Control Table.",
    /* FP_COUNTER_TABLE          */ "COUNTER TABLE FOR THE FP",
    /* FP_COUNTER_TABLE_X        */ "COUNTER TABLE FOR THE FP in IPX. FeatureSpecific-FP",
    /* FP_COUNTER_TABLE_Y        */ "COUNTER TABLE FOR THE FP in IPY. FeatureSpecific-FP",
    /* FP_FLEX_KEY_SELECTOR      */ "Controls classid selection into HG header.",
    /* FP_GLOBAL_MASK_TCAM       */ "PORT BITMAP TCAM ENTRY FOR EACH IFP_TCAM ENTRY.",
    /* FP_GLOBAL_MASK_TCAM_X     */ "IPB view of the IFP_TCAM.",
    /* FP_GLOBAL_MASK_TCAM_Y     */ "IPB view of the IFP_TCAM.",
    /* FP_GM_FIELDS              */ "Fields view of IFP_GM TCAM.",
    /* FP_GM_FIELDS_X            */ "Fields view of IFP_GM TCAM.",
    /* FP_GM_FIELDS_Y            */ "Fields view of IFP_GM TCAM.",
    /* FP_HG_CLASSID_SELECT      */ "Controls classid selection into HG header.",
    /* FP_I2E_CLASSID_SELECT     */ "Selects one classid from IP tables to be passed to EP.",
    /* FP_METER_CONTROL          */ "Extra number of bytes that can be added(IFP, preamble) to achieve actual Ethernet throughput",
    /* FP_METER_TABLE            */ "METER TABLE STRUCTURES FOR THE FP",
    /* FP_METER_TABLE_X          */ "METER TABLE STRUCTURES FOR THE FP in IPX. FeatureSpecific-FP",
    /* FP_METER_TABLE_Y          */ "METER TABLE STRUCTURES FOR THE FP in IPY. FeatureSpecific-FP",
    /* FP_POLICY_TABLE           */ "POLICY TABLE FOR DETERMINING ACTIONS IN THE FP",
    /* FP_PORT_FIELD_SEL         */ "FIELD SELECT VALUE FOR EACH SLICE IN THE FP",
    /* FP_PORT_METER_MAP         */ "FP_PORT_METER_MAP TABLE STRUCTURES FOR THE FP, FeatureSpecific-FP",
    /* FP_RANGE_CHECK            */ "RANGE CHECK VALUES FOR FP",
    /* FP_SC_BCAST_METER_TABLE   */ "SC METER TABLE STRUCTURES FOR THE FP. Indexed using ingress port number.",
    /* FP_SC_DLF_METER_TABLE     */ "SC METER TABLE STRUCTURES FOR THE FP. Indexed using ingress port number.",
    /* FP_SC_MCAST_METER_TABLE   */ "SC METER TABLE STRUCTURES FOR THE FP. Indexed using ingress port number.",
    /* FP_SC_METER_TABLE         */ "SC METER TABLE STRUCTURES FOR THE FP",
    /* FP_SLICE_ENTRY_PORT_SEL   */ "ENTRIES ENABLED FOR EACH SOURCE PORT FOR EACH SLICE. The index for this table is created by concatenating {Ingress Port(6bits) and Slice Number(3bits)}.",
    /* FP_SLICE_KEY_CONTROL      */ "SLICE KEY GENERATION CONTROLS FOR IFP, FeatureSpecific-FP",
    /* FP_SLICE_MAP              */ "SLICE MAPPING CONTROLS FOR IFP",
    /* FP_STORM_CONTROL_METERS   */ "STORM CONTROL METER TABLE STRUCTURES FOR THE FP, FeatureSpecific-FP",
    /* FP_STORM_CONTROL_METERS_X */ "STORM CONTROL METER TABLE STRUCTURES FOR THE FP, FeatureSpecific-FP.",
    /* FP_STORM_CONTROL_METERS_Y */ "STORM CONTROL METER TABLE STRUCTURES FOR THE FP, FeatureSpecific-FP.",
    /* FP_TCAM                   */ "TCAM FOR FP",
    /* FP_TCAM_PLUS_POLICY       */ "TCAM AND POLICY TABLE VIEW FOR FP",
    /* FP_TCAM_X                 */ "FP TCAM in IPX",
    /* FP_TCAM_Y                 */ "FP TCAM in IPY",
    /* FP_UDF_OFFSET             */ "FP UDF offset table",
    /* FP_UDF_OFFSET_PIPE0       */ "FP UDF Offset Table.",
    /* FP_UDF_OFFSET_PIPE1       */ "FP UDF Offset Table.",
    /* FP_UDF_OFFSET_PIPE2       */ "FP UDF Offset Table.",
    /* FP_UDF_OFFSET_PIPE3       */ "FP UDF Offset Table.",
    /* FP_UDF_TCAM               */ "FP UDF tcam table, FeatureSpecific-FP",
    /* FP_UDF_TCAM_PIPE0         */ "FP UDF TCAM Table.",
    /* FP_UDF_TCAM_PIPE1         */ "FP UDF TCAM Table.",
    /* FP_UDF_TCAM_PIPE2         */ "FP UDF TCAM Table.",
    /* FP_UDF_TCAM_PIPE3         */ "FP UDF TCAM Table.",
    /* FQP_BUF_LINK              */ "Buffers link memory",
    /* FQP_DBF_PIPE_FIFO         */ "DBF pipe FIFO for data pending for DBF data to return",
    /* FQP_ETS_CRDT_TABLE        */ "ETS credit table",
    /* FQP_FQP_NIF_PORT_MUX      */ "Round robin for NIF ports in NIF ports scheduler.",
    /* FQP_OTM_METER_CRDT_BALANCE */ "Credit Balance Memory for OTM metering",
    /* FQP_OTM_METER_NIF_DC      */ "DC compensation for IPG and CRC\n entry per 9 bits OTM",
    /* FQP_OTM_METER_TABLE       */ "ETS credit table",
    /* FQP_PER_IFC_CFG           */ "Per EGQ interface configuration in FQP. The FQP (Transmit queues) block maintains a queue per interface  (124 NIF ports, Cmic, OLP, OAM and RCY).",
    /* FQP_PHANTOM_QS_CFG        */ "Per OTM port Phantom Qs configuration",
    /* FQP_RCNT                  */ "Read Counter Memory",
    /* FQP_TXQ                   */ "Transmit Queue FIFOs memory used for buffering the FQP descriptors.\n Contain all fields that are used in ETS pipe",
    /* FQP_TXQ_NO_BUF            */ "Transmit Queue FIFOs memory used for buffering the FQP descriptors.\n Contain all fields that are not used in ETS pipe",
    /* FRAME_PARSING             */ "This database contains the frame parsing records.",
    /* FSRD_FSRD_PROM_MEM        */ "SerDes PRAM interface.",
    /* FSRD_FSRD_WL_EXT_MEM      */ "WarpLite 8051 memory interface.",
    /* FSRD_MAC_OUTPUT_BUFFER    */ "Shared output buffer memory",
    /* FT_AGE_PROFILE            */ "DPI Flow Tracker. Age profile for inactivity timeout",
    /* FT_DST_LAG_CONFIG         */ "DPI Flow Tracker L4 destination lag enable",
    /* FT_DST_PORT_CONFIG        */ "DPI Flow Tracker L4 destination port enable",
    /* FT_EOP_TBL                */ "DPI Flow Tracker. stores data between sop/eop cells",
    /* FT_EXPORT_CNTR_ONLY       */ "DPI Flow Tracker Export Fifo counters",
    /* FT_EXPORT_DATA_ONLY       */ "Flow tracker export fifo.",
    /* FT_EXPORT_FIFO            */ "DPI Flow Tracker Export Fifo",
    /* FT_L4PORT                 */ "DPI Flow Tracker L4 Port filtering",
    /* FT_POLICY                 */ "Flow tracker policy table.",
    /* FT_SESSION                */ "DPI Flow Tracker Session Table",
    /* FT_SESSION_IPV6           */ "DPI Flow Tracker Session Table",
    /* GLOBAL_STATS              */ "This database contain the QM global counters. General address format = { DEQ | ENQ,  CNTRID, DP }",
    /* GPORT_EHG_RX_TUNNEL_DATA  */ "Embedded Higig Rx tunnel data memory",
    /* GPORT_EHG_RX_TUNNEL_MASK  */ "Embedded Higig Rx tunnel data memory",
    /* GPORT_EHG_TX_TUNNEL_DATA  */ "Embedded Higig Rx tunnel data memory",
    /* GPORT_WC_UCMEM_DATA       */ "Warpcore External Memory Interface to program micro-controller memory",
    /* GROUP_MAX_SHAPER_TABLE    */ "The entries in this table are the parameters for the Group Max Shaper",
    /* GROUP_MEMBER_TABLE        */ "Group member Information for FIFOs",
    /* GTP_PORT_TABLE            */ "GTP_PORT_TABLE.",
    /* HBC_HBM_PHY_CH_REGISTER_ACCESS */ "",
    /* HBC_RDR_CHUNK_STORAGE     */ "Reassembly memory - Number of lines is the maximum number of banks.",
    /* HBC_RDR_INFO_FIFO         */ "Read info fifo from QSM",
    /* HBC_READ_DATA_ASYNC_FIFO  */ "Read data async fifo",
    /* HBC_READ_DATA_REORDER     */ "Read data reorder memory",
    /* HBC_READ_PER_BANK_QUEUES  */ "memory holding per bank read request queues",
    /* HBC_WRITE_DATA_ASYNC_FIFO */ "Write data async fifo",
    /* HBC_WRITE_DATA_BUFFER     */ "Holds the data for write requests currently in the PBQ",
    /* HBC_WRITE_PER_BANK_QUEUES */ "memory holding per bank write request queues",
    /* HBMC_HBM_PHY_CHM_REGISTER_ACCESS */ "",
    /* HEAD_LLA                  */ "This database contains the queue head pointers",
    /* HGT_DLB_CONTROL           */ "HG-Trunk DLB Control.",
    /* HG_TRUNK_BITMAP           */ "HiGig Trunk [0-31] Membership Bitmap.",
    /* HG_TRUNK_FAILOVER_ENABLE  */ "HiGig Trunk Failover Enable Register.",
    /* HG_TRUNK_FAILOVER_SET     */ "Higig Trunk Failover Set Table",
    /* HG_TRUNK_GROUP            */ "HG Trunk group table.",
    /* HG_TRUNK_MEMBER           */ "Contains the list of all HG Trunk members.",
    /* HG_TRUNK_MODE             */ "HiGig Trunk Group Load Balancing Mode.",
    /* HG_TRUNK_RR_CNT           */ "HiGig Trunk Group Round Robin Count.",
    /* HG_TRUNK_RR_CNT_PIPE0     */ "HiGig Trunk Group Round Robin Count.",
    /* HG_TRUNK_RR_CNT_PIPE1     */ "HiGig Trunk Group Round Robin Count.",
    /* HG_TRUNK_RR_CNT_PIPE2     */ "HiGig Trunk Group Round Robin Count.",
    /* HG_TRUNK_RR_CNT_PIPE3     */ "HiGig Trunk Group Round Robin Count.",
    /* HIGIG_TRUNK_CONTROL       */ "HiGig Trunk Control Register.",
    /* HPTE_DQUEUE_LOOKUP        */ "This is the HPTE DQUEUE lookup table for Header Record Assembly",
    /* HPTE_EG_DEQ_RESPONSE      */ "This is the HPTE Egress Deq Response FIFO",
    /* HPTE_EG_PREFETCH_FIFO     */ "This is the HPTE Egress Prefetch FIFO",
    /* HPTE_IG_DEQ_RESPONSE      */ "This is the HPTE PB Response FIFO",
    /* HPTE_IG_PREFETCH_FIFO     */ "This is the HPTE Ingress Prefetch FIFO",
    /* HPTE_QUEUE_CONTEXT        */ "This is the HPTE Queue Context Memory to support replication",
    /* HPTE_WDRR_CREDIT_CFG      */ "This is the HPTE WDRR Credit Configuration Database",
    /* HPTE_WDRR_STATE           */ "This is the HPTE WDRR Working Credit State Database",
    /* HSP_SCHED_L0_ACCUM_COMP_MEM_0 */ "Hardware internal working memory in pipe X",
    /* HSP_SCHED_L0_ACCUM_COMP_MEM_1 */ "Hardware internal working memory in pipe Y",
    /* HSP_SCHED_L0_CREDIT_MEM_0 */ "Hardware internal working memory in pipe X",
    /* HSP_SCHED_L0_CREDIT_MEM_1 */ "Hardware internal working memory in pipe Y",
    /* HSP_SCHED_L1_ACCUM_COMP_MEM_0 */ "Hardware internal working memory in pipe X",
    /* HSP_SCHED_L1_ACCUM_COMP_MEM_1 */ "Hardware internal working memory in pipe Y",
    /* HSP_SCHED_L1_CREDIT_MEM_0 */ "Hardware internal working memory in pipe X",
    /* HSP_SCHED_L1_CREDIT_MEM_1 */ "Hardware internal working memory in pipe Y",
    /* HSP_SCHED_L2_ACCUM_COMP_MEM_0 */ "Hardware internal working memory in pipe X",
    /* HSP_SCHED_L2_ACCUM_COMP_MEM_1 */ "Hardware internal working memory in pipe Y",
    /* HSP_SCHED_L2_CREDIT_MEM_0 */ "Hardware internal working memory in pipe X",
    /* HSP_SCHED_L2_CREDIT_MEM_1 */ "Hardware internal working memory in pipe Y",
    /* HSP_UCQ_FREE              */ "HSP UCQ Structure Free List and Next Pointer Memory",
    /* HSP_UCQ_UCQE              */ "HSP Unicast QEntry memory. Contains FIFO block linked lists for each HSP UC queue",
    /* IARB_ING_PHYSICAL_PORT    */ "Per Physical port OLP Enable Control",
    /* IARB_ING_PORT_TABLE       */ "Per ingress port OLP Enable Control",
    /* IARB_MAIN_TDM             */ "TDM TABLE configuration, Set to 0, select port_group5. Set to 1, select port_group4. Set to 2, select extra slot.",
    /* IARB_MAIN_TDM_X           */ "TDM TABLE configuration, Set to 0, select PGW0. Set to 1, select PGW1. Set to 2, select extra slot.",
    /* IARB_MAIN_TDM_Y           */ "TDM TABLE configuration, Set to 0, select PGW0. Set to 1, select PGW1. Set to 2, select extra slot.",
    /* IARB_TDM_TABLE            */ "Arbiter TDM Table",
    /* IARB_TDM_TABLE_1          */ "Arbiter TDM Table - 1",
    /* IBOD_MOOSE_CLP0_CTRL_MEM  */ "moose imem data",
    /* IBOD_MOOSE_CLP0_DATA_MEM_0 */ "moose dmem data",
    /* IBOD_MOOSE_CLP0_DATA_MEM_1 */ "moose dmem data",
    /* IBOD_MOOSE_CLP1_CTRL_MEM  */ "moose imem data",
    /* IBOD_MOOSE_CLP1_DATA_MEM_0 */ "moose dmem data",
    /* IBOD_MOOSE_CLP1_DATA_MEM_1 */ "moose dmem data",
    /* IBOD_MOOSE_CLP2_CTRL_MEM  */ "moose imem data",
    /* IBOD_MOOSE_CLP2_DATA_MEM_0 */ "moose dmem data",
    /* IBOD_MOOSE_CLP2_DATA_MEM_1 */ "moose dmem data",
    /* IBOD_MOOSE_XLP0_CTRL_MEM  */ "moose imem data",
    /* IBOD_MOOSE_XLP0_DATA_MEM  */ "moose dmem data",
    /* IBOD_MOOSE_XLP1_CTRL_MEM  */ "moose imem data",
    /* IBOD_MOOSE_XLP1_DATA_MEM  */ "moose dmem data",
    /* IBOD_MOOSE_XTP0_CTRL_MEM  */ "moose imem data",
    /* IBOD_MOOSE_XTP0_DATA_MEM  */ "moose dmem data",
    /* IBOD_MOOSE_XTP1_CTRL_MEM  */ "moose imem data",
    /* IBOD_MOOSE_XTP1_DATA_MEM  */ "moose dmem data",
    /* IBOD_MOOSE_XTP2_CTRL_MEM  */ "moose imem data",
    /* IBOD_MOOSE_XTP2_DATA_MEM  */ "moose dmem data",
    /* IBOD_MOOSE_XTP3_CTRL_MEM  */ "moose imem data",
    /* IBOD_MOOSE_XTP3_DATA_MEM  */ "moose dmem data",
    /* ICONTROL_OPCODE_BITMAP    */ "Higig control packet's switching bitmap register.",
    /* IDB_DBM_12K               */ "Data Buffer Memory",
    /* IDB_DBM_1K                */ "Data Buffer Memoryn 1k each, shared with ILB",
    /* IDB_DBM_8K                */ "Data Buffer Memory",
    /* IDB_OBM0_DSCP_MAP_PORT0   */ "Priority table based on DSCP.",
    /* IDB_OBM0_DSCP_MAP_PORT1   */ "Priority table based on DSCP.",
    /* IDB_OBM0_DSCP_MAP_PORT2   */ "Priority table based on DSCP.",
    /* IDB_OBM0_DSCP_MAP_PORT3   */ "Priority table based on DSCP.",
    /* IDB_OBM0_DSCP_MAP_PORT0_PIPE0 */ "Priority table based on DSCP.",
    /* IDB_OBM0_DSCP_MAP_PORT0_PIPE1 */ "Priority table based on DSCP.",
    /* IDB_OBM0_DSCP_MAP_PORT0_PIPE2 */ "Priority table based on DSCP.",
    /* IDB_OBM0_DSCP_MAP_PORT0_PIPE3 */ "Priority table based on DSCP.",
    /* IDB_OBM0_DSCP_MAP_PORT1_PIPE0 */ "Priority table based on DSCP.",
    /* IDB_OBM0_DSCP_MAP_PORT1_PIPE1 */ "Priority table based on DSCP.",
    /* IDB_OBM0_DSCP_MAP_PORT1_PIPE2 */ "Priority table based on DSCP.",
    /* IDB_OBM0_DSCP_MAP_PORT1_PIPE3 */ "Priority table based on DSCP.",
    /* IDB_OBM0_DSCP_MAP_PORT2_PIPE0 */ "Priority table based on DSCP.",
    /* IDB_OBM0_DSCP_MAP_PORT2_PIPE1 */ "Priority table based on DSCP.",
    /* IDB_OBM0_DSCP_MAP_PORT2_PIPE2 */ "Priority table based on DSCP.",
    /* IDB_OBM0_DSCP_MAP_PORT2_PIPE3 */ "Priority table based on DSCP.",
    /* IDB_OBM0_DSCP_MAP_PORT3_PIPE0 */ "Priority table based on DSCP.",
    /* IDB_OBM0_DSCP_MAP_PORT3_PIPE1 */ "Priority table based on DSCP.",
    /* IDB_OBM0_DSCP_MAP_PORT3_PIPE2 */ "Priority table based on DSCP.",
    /* IDB_OBM0_DSCP_MAP_PORT3_PIPE3 */ "Priority table based on DSCP.",
    /* IDB_OBM0_ETAG_MAP_PORT0   */ "Priority table based on ETAG PCP.",
    /* IDB_OBM0_ETAG_MAP_PORT1   */ "Priority table based on ETAG PCP.",
    /* IDB_OBM0_ETAG_MAP_PORT2   */ "Priority table based on ETAG PCP.",
    /* IDB_OBM0_ETAG_MAP_PORT3   */ "Priority table based on ETAG PCP.",
    /* IDB_OBM0_ETAG_MAP_PORT0_PIPE0 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM0_ETAG_MAP_PORT0_PIPE1 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM0_ETAG_MAP_PORT0_PIPE2 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM0_ETAG_MAP_PORT0_PIPE3 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM0_ETAG_MAP_PORT1_PIPE0 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM0_ETAG_MAP_PORT1_PIPE1 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM0_ETAG_MAP_PORT1_PIPE2 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM0_ETAG_MAP_PORT1_PIPE3 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM0_ETAG_MAP_PORT2_PIPE0 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM0_ETAG_MAP_PORT2_PIPE1 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM0_ETAG_MAP_PORT2_PIPE2 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM0_ETAG_MAP_PORT2_PIPE3 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM0_ETAG_MAP_PORT3_PIPE0 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM0_ETAG_MAP_PORT3_PIPE1 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM0_ETAG_MAP_PORT3_PIPE2 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM0_ETAG_MAP_PORT3_PIPE3 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM0_PRI_MAP_PORT0    */ "Priority table based on PCP or TC.",
    /* IDB_OBM0_PRI_MAP_PORT1    */ "Priority table based on PCP or TC.",
    /* IDB_OBM0_PRI_MAP_PORT2    */ "Priority table based on PCP or TC.",
    /* IDB_OBM0_PRI_MAP_PORT3    */ "Priority table based on PCP or TC.",
    /* IDB_OBM0_PRI_MAP_PORT0_PIPE0 */ "Priority table based on PCP or TC.",
    /* IDB_OBM0_PRI_MAP_PORT0_PIPE1 */ "Priority table based on PCP or TC.",
    /* IDB_OBM0_PRI_MAP_PORT0_PIPE2 */ "Priority table based on PCP or TC.",
    /* IDB_OBM0_PRI_MAP_PORT0_PIPE3 */ "Priority table based on PCP or TC.",
    /* IDB_OBM0_PRI_MAP_PORT1_PIPE0 */ "Priority table based on PCP or TC.",
    /* IDB_OBM0_PRI_MAP_PORT1_PIPE1 */ "Priority table based on PCP or TC.",
    /* IDB_OBM0_PRI_MAP_PORT1_PIPE2 */ "Priority table based on PCP or TC.",
    /* IDB_OBM0_PRI_MAP_PORT1_PIPE3 */ "Priority table based on PCP or TC.",
    /* IDB_OBM0_PRI_MAP_PORT2_PIPE0 */ "Priority table based on PCP or TC.",
    /* IDB_OBM0_PRI_MAP_PORT2_PIPE1 */ "Priority table based on PCP or TC.",
    /* IDB_OBM0_PRI_MAP_PORT2_PIPE2 */ "Priority table based on PCP or TC.",
    /* IDB_OBM0_PRI_MAP_PORT2_PIPE3 */ "Priority table based on PCP or TC.",
    /* IDB_OBM0_PRI_MAP_PORT3_PIPE0 */ "Priority table based on PCP or TC.",
    /* IDB_OBM0_PRI_MAP_PORT3_PIPE1 */ "Priority table based on PCP or TC.",
    /* IDB_OBM0_PRI_MAP_PORT3_PIPE2 */ "Priority table based on PCP or TC.",
    /* IDB_OBM0_PRI_MAP_PORT3_PIPE3 */ "Priority table based on PCP or TC.",
    /* IDB_OBM10_DSCP_MAP_PORT0  */ "Priority table based on DSCP.",
    /* IDB_OBM10_DSCP_MAP_PORT1  */ "Priority table based on DSCP.",
    /* IDB_OBM10_DSCP_MAP_PORT2  */ "Priority table based on DSCP.",
    /* IDB_OBM10_DSCP_MAP_PORT3  */ "Priority table based on DSCP.",
    /* IDB_OBM10_DSCP_MAP_PORT0_PIPE0 */ "Priority table based on DSCP.",
    /* IDB_OBM10_DSCP_MAP_PORT0_PIPE1 */ "Priority table based on DSCP.",
    /* IDB_OBM10_DSCP_MAP_PORT0_PIPE2 */ "Priority table based on DSCP.",
    /* IDB_OBM10_DSCP_MAP_PORT0_PIPE3 */ "Priority table based on DSCP.",
    /* IDB_OBM10_DSCP_MAP_PORT1_PIPE0 */ "Priority table based on DSCP.",
    /* IDB_OBM10_DSCP_MAP_PORT1_PIPE1 */ "Priority table based on DSCP.",
    /* IDB_OBM10_DSCP_MAP_PORT1_PIPE2 */ "Priority table based on DSCP.",
    /* IDB_OBM10_DSCP_MAP_PORT1_PIPE3 */ "Priority table based on DSCP.",
    /* IDB_OBM10_DSCP_MAP_PORT2_PIPE0 */ "Priority table based on DSCP.",
    /* IDB_OBM10_DSCP_MAP_PORT2_PIPE1 */ "Priority table based on DSCP.",
    /* IDB_OBM10_DSCP_MAP_PORT2_PIPE2 */ "Priority table based on DSCP.",
    /* IDB_OBM10_DSCP_MAP_PORT2_PIPE3 */ "Priority table based on DSCP.",
    /* IDB_OBM10_DSCP_MAP_PORT3_PIPE0 */ "Priority table based on DSCP.",
    /* IDB_OBM10_DSCP_MAP_PORT3_PIPE1 */ "Priority table based on DSCP.",
    /* IDB_OBM10_DSCP_MAP_PORT3_PIPE2 */ "Priority table based on DSCP.",
    /* IDB_OBM10_DSCP_MAP_PORT3_PIPE3 */ "Priority table based on DSCP.",
    /* IDB_OBM10_ETAG_MAP_PORT0  */ "Priority table based on ETAG PCP.",
    /* IDB_OBM10_ETAG_MAP_PORT1  */ "Priority table based on ETAG PCP.",
    /* IDB_OBM10_ETAG_MAP_PORT2  */ "Priority table based on ETAG PCP.",
    /* IDB_OBM10_ETAG_MAP_PORT3  */ "Priority table based on ETAG PCP.",
    /* IDB_OBM10_ETAG_MAP_PORT0_PIPE0 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM10_ETAG_MAP_PORT0_PIPE1 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM10_ETAG_MAP_PORT0_PIPE2 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM10_ETAG_MAP_PORT0_PIPE3 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM10_ETAG_MAP_PORT1_PIPE0 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM10_ETAG_MAP_PORT1_PIPE1 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM10_ETAG_MAP_PORT1_PIPE2 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM10_ETAG_MAP_PORT1_PIPE3 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM10_ETAG_MAP_PORT2_PIPE0 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM10_ETAG_MAP_PORT2_PIPE1 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM10_ETAG_MAP_PORT2_PIPE2 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM10_ETAG_MAP_PORT2_PIPE3 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM10_ETAG_MAP_PORT3_PIPE0 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM10_ETAG_MAP_PORT3_PIPE1 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM10_ETAG_MAP_PORT3_PIPE2 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM10_ETAG_MAP_PORT3_PIPE3 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM10_PRI_MAP_PORT0   */ "Priority table based on PCP or TC.",
    /* IDB_OBM10_PRI_MAP_PORT1   */ "Priority table based on PCP or TC.",
    /* IDB_OBM10_PRI_MAP_PORT2   */ "Priority table based on PCP or TC.",
    /* IDB_OBM10_PRI_MAP_PORT3   */ "Priority table based on PCP or TC.",
    /* IDB_OBM10_PRI_MAP_PORT0_PIPE0 */ "Priority table based on PCP or TC.",
    /* IDB_OBM10_PRI_MAP_PORT0_PIPE1 */ "Priority table based on PCP or TC.",
    /* IDB_OBM10_PRI_MAP_PORT0_PIPE2 */ "Priority table based on PCP or TC.",
    /* IDB_OBM10_PRI_MAP_PORT0_PIPE3 */ "Priority table based on PCP or TC.",
    /* IDB_OBM10_PRI_MAP_PORT1_PIPE0 */ "Priority table based on PCP or TC.",
    /* IDB_OBM10_PRI_MAP_PORT1_PIPE1 */ "Priority table based on PCP or TC.",
    /* IDB_OBM10_PRI_MAP_PORT1_PIPE2 */ "Priority table based on PCP or TC.",
    /* IDB_OBM10_PRI_MAP_PORT1_PIPE3 */ "Priority table based on PCP or TC.",
    /* IDB_OBM10_PRI_MAP_PORT2_PIPE0 */ "Priority table based on PCP or TC.",
    /* IDB_OBM10_PRI_MAP_PORT2_PIPE1 */ "Priority table based on PCP or TC.",
    /* IDB_OBM10_PRI_MAP_PORT2_PIPE2 */ "Priority table based on PCP or TC.",
    /* IDB_OBM10_PRI_MAP_PORT2_PIPE3 */ "Priority table based on PCP or TC.",
    /* IDB_OBM10_PRI_MAP_PORT3_PIPE0 */ "Priority table based on PCP or TC.",
    /* IDB_OBM10_PRI_MAP_PORT3_PIPE1 */ "Priority table based on PCP or TC.",
    /* IDB_OBM10_PRI_MAP_PORT3_PIPE2 */ "Priority table based on PCP or TC.",
    /* IDB_OBM10_PRI_MAP_PORT3_PIPE3 */ "Priority table based on PCP or TC.",
    /* IDB_OBM11_DSCP_MAP_PORT0  */ "Priority table based on DSCP.",
    /* IDB_OBM11_DSCP_MAP_PORT1  */ "Priority table based on DSCP.",
    /* IDB_OBM11_DSCP_MAP_PORT2  */ "Priority table based on DSCP.",
    /* IDB_OBM11_DSCP_MAP_PORT3  */ "Priority table based on DSCP.",
    /* IDB_OBM11_DSCP_MAP_PORT0_PIPE0 */ "Priority table based on DSCP.",
    /* IDB_OBM11_DSCP_MAP_PORT0_PIPE1 */ "Priority table based on DSCP.",
    /* IDB_OBM11_DSCP_MAP_PORT0_PIPE2 */ "Priority table based on DSCP.",
    /* IDB_OBM11_DSCP_MAP_PORT0_PIPE3 */ "Priority table based on DSCP.",
    /* IDB_OBM11_DSCP_MAP_PORT1_PIPE0 */ "Priority table based on DSCP.",
    /* IDB_OBM11_DSCP_MAP_PORT1_PIPE1 */ "Priority table based on DSCP.",
    /* IDB_OBM11_DSCP_MAP_PORT1_PIPE2 */ "Priority table based on DSCP.",
    /* IDB_OBM11_DSCP_MAP_PORT1_PIPE3 */ "Priority table based on DSCP.",
    /* IDB_OBM11_DSCP_MAP_PORT2_PIPE0 */ "Priority table based on DSCP.",
    /* IDB_OBM11_DSCP_MAP_PORT2_PIPE1 */ "Priority table based on DSCP.",
    /* IDB_OBM11_DSCP_MAP_PORT2_PIPE2 */ "Priority table based on DSCP.",
    /* IDB_OBM11_DSCP_MAP_PORT2_PIPE3 */ "Priority table based on DSCP.",
    /* IDB_OBM11_DSCP_MAP_PORT3_PIPE0 */ "Priority table based on DSCP.",
    /* IDB_OBM11_DSCP_MAP_PORT3_PIPE1 */ "Priority table based on DSCP.",
    /* IDB_OBM11_DSCP_MAP_PORT3_PIPE2 */ "Priority table based on DSCP.",
    /* IDB_OBM11_DSCP_MAP_PORT3_PIPE3 */ "Priority table based on DSCP.",
    /* IDB_OBM11_ETAG_MAP_PORT0  */ "Priority table based on ETAG PCP.",
    /* IDB_OBM11_ETAG_MAP_PORT1  */ "Priority table based on ETAG PCP.",
    /* IDB_OBM11_ETAG_MAP_PORT2  */ "Priority table based on ETAG PCP.",
    /* IDB_OBM11_ETAG_MAP_PORT3  */ "Priority table based on ETAG PCP.",
    /* IDB_OBM11_ETAG_MAP_PORT0_PIPE0 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM11_ETAG_MAP_PORT0_PIPE1 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM11_ETAG_MAP_PORT0_PIPE2 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM11_ETAG_MAP_PORT0_PIPE3 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM11_ETAG_MAP_PORT1_PIPE0 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM11_ETAG_MAP_PORT1_PIPE1 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM11_ETAG_MAP_PORT1_PIPE2 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM11_ETAG_MAP_PORT1_PIPE3 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM11_ETAG_MAP_PORT2_PIPE0 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM11_ETAG_MAP_PORT2_PIPE1 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM11_ETAG_MAP_PORT2_PIPE2 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM11_ETAG_MAP_PORT2_PIPE3 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM11_ETAG_MAP_PORT3_PIPE0 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM11_ETAG_MAP_PORT3_PIPE1 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM11_ETAG_MAP_PORT3_PIPE2 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM11_ETAG_MAP_PORT3_PIPE3 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM11_PRI_MAP_PORT0   */ "Priority table based on PCP or TC.",
    /* IDB_OBM11_PRI_MAP_PORT1   */ "Priority table based on PCP or TC.",
    /* IDB_OBM11_PRI_MAP_PORT2   */ "Priority table based on PCP or TC.",
    /* IDB_OBM11_PRI_MAP_PORT3   */ "Priority table based on PCP or TC.",
    /* IDB_OBM11_PRI_MAP_PORT0_PIPE0 */ "Priority table based on PCP or TC.",
    /* IDB_OBM11_PRI_MAP_PORT0_PIPE1 */ "Priority table based on PCP or TC.",
    /* IDB_OBM11_PRI_MAP_PORT0_PIPE2 */ "Priority table based on PCP or TC.",
    /* IDB_OBM11_PRI_MAP_PORT0_PIPE3 */ "Priority table based on PCP or TC.",
    /* IDB_OBM11_PRI_MAP_PORT1_PIPE0 */ "Priority table based on PCP or TC.",
    /* IDB_OBM11_PRI_MAP_PORT1_PIPE1 */ "Priority table based on PCP or TC.",
    /* IDB_OBM11_PRI_MAP_PORT1_PIPE2 */ "Priority table based on PCP or TC.",
    /* IDB_OBM11_PRI_MAP_PORT1_PIPE3 */ "Priority table based on PCP or TC.",
    /* IDB_OBM11_PRI_MAP_PORT2_PIPE0 */ "Priority table based on PCP or TC.",
    /* IDB_OBM11_PRI_MAP_PORT2_PIPE1 */ "Priority table based on PCP or TC.",
    /* IDB_OBM11_PRI_MAP_PORT2_PIPE2 */ "Priority table based on PCP or TC.",
    /* IDB_OBM11_PRI_MAP_PORT2_PIPE3 */ "Priority table based on PCP or TC.",
    /* IDB_OBM11_PRI_MAP_PORT3_PIPE0 */ "Priority table based on PCP or TC.",
    /* IDB_OBM11_PRI_MAP_PORT3_PIPE1 */ "Priority table based on PCP or TC.",
    /* IDB_OBM11_PRI_MAP_PORT3_PIPE2 */ "Priority table based on PCP or TC.",
    /* IDB_OBM11_PRI_MAP_PORT3_PIPE3 */ "Priority table based on PCP or TC.",
    /* IDB_OBM12_DSCP_MAP_PORT0  */ "Priority table based on DSCP.",
    /* IDB_OBM12_DSCP_MAP_PORT1  */ "Priority table based on DSCP.",
    /* IDB_OBM12_DSCP_MAP_PORT2  */ "Priority table based on DSCP.",
    /* IDB_OBM12_DSCP_MAP_PORT3  */ "Priority table based on DSCP.",
    /* IDB_OBM12_DSCP_MAP_PORT0_PIPE0 */ "Priority table based on DSCP.",
    /* IDB_OBM12_DSCP_MAP_PORT0_PIPE1 */ "Priority table based on DSCP.",
    /* IDB_OBM12_DSCP_MAP_PORT0_PIPE2 */ "Priority table based on DSCP.",
    /* IDB_OBM12_DSCP_MAP_PORT0_PIPE3 */ "Priority table based on DSCP.",
    /* IDB_OBM12_DSCP_MAP_PORT1_PIPE0 */ "Priority table based on DSCP.",
    /* IDB_OBM12_DSCP_MAP_PORT1_PIPE1 */ "Priority table based on DSCP.",
    /* IDB_OBM12_DSCP_MAP_PORT1_PIPE2 */ "Priority table based on DSCP.",
    /* IDB_OBM12_DSCP_MAP_PORT1_PIPE3 */ "Priority table based on DSCP.",
    /* IDB_OBM12_DSCP_MAP_PORT2_PIPE0 */ "Priority table based on DSCP.",
    /* IDB_OBM12_DSCP_MAP_PORT2_PIPE1 */ "Priority table based on DSCP.",
    /* IDB_OBM12_DSCP_MAP_PORT2_PIPE2 */ "Priority table based on DSCP.",
    /* IDB_OBM12_DSCP_MAP_PORT2_PIPE3 */ "Priority table based on DSCP.",
    /* IDB_OBM12_DSCP_MAP_PORT3_PIPE0 */ "Priority table based on DSCP.",
    /* IDB_OBM12_DSCP_MAP_PORT3_PIPE1 */ "Priority table based on DSCP.",
    /* IDB_OBM12_DSCP_MAP_PORT3_PIPE2 */ "Priority table based on DSCP.",
    /* IDB_OBM12_DSCP_MAP_PORT3_PIPE3 */ "Priority table based on DSCP.",
    /* IDB_OBM12_ETAG_MAP_PORT0  */ "Priority table based on ETAG PCP.",
    /* IDB_OBM12_ETAG_MAP_PORT1  */ "Priority table based on ETAG PCP.",
    /* IDB_OBM12_ETAG_MAP_PORT2  */ "Priority table based on ETAG PCP.",
    /* IDB_OBM12_ETAG_MAP_PORT3  */ "Priority table based on ETAG PCP.",
    /* IDB_OBM12_ETAG_MAP_PORT0_PIPE0 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM12_ETAG_MAP_PORT0_PIPE1 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM12_ETAG_MAP_PORT0_PIPE2 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM12_ETAG_MAP_PORT0_PIPE3 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM12_ETAG_MAP_PORT1_PIPE0 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM12_ETAG_MAP_PORT1_PIPE1 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM12_ETAG_MAP_PORT1_PIPE2 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM12_ETAG_MAP_PORT1_PIPE3 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM12_ETAG_MAP_PORT2_PIPE0 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM12_ETAG_MAP_PORT2_PIPE1 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM12_ETAG_MAP_PORT2_PIPE2 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM12_ETAG_MAP_PORT2_PIPE3 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM12_ETAG_MAP_PORT3_PIPE0 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM12_ETAG_MAP_PORT3_PIPE1 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM12_ETAG_MAP_PORT3_PIPE2 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM12_ETAG_MAP_PORT3_PIPE3 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM12_PRI_MAP_PORT0   */ "Priority table based on PCP or TC.",
    /* IDB_OBM12_PRI_MAP_PORT1   */ "Priority table based on PCP or TC.",
    /* IDB_OBM12_PRI_MAP_PORT2   */ "Priority table based on PCP or TC.",
    /* IDB_OBM12_PRI_MAP_PORT3   */ "Priority table based on PCP or TC.",
    /* IDB_OBM12_PRI_MAP_PORT0_PIPE0 */ "Priority table based on PCP or TC.",
    /* IDB_OBM12_PRI_MAP_PORT0_PIPE1 */ "Priority table based on PCP or TC.",
    /* IDB_OBM12_PRI_MAP_PORT0_PIPE2 */ "Priority table based on PCP or TC.",
    /* IDB_OBM12_PRI_MAP_PORT0_PIPE3 */ "Priority table based on PCP or TC.",
    /* IDB_OBM12_PRI_MAP_PORT1_PIPE0 */ "Priority table based on PCP or TC.",
    /* IDB_OBM12_PRI_MAP_PORT1_PIPE1 */ "Priority table based on PCP or TC.",
    /* IDB_OBM12_PRI_MAP_PORT1_PIPE2 */ "Priority table based on PCP or TC.",
    /* IDB_OBM12_PRI_MAP_PORT1_PIPE3 */ "Priority table based on PCP or TC.",
    /* IDB_OBM12_PRI_MAP_PORT2_PIPE0 */ "Priority table based on PCP or TC.",
    /* IDB_OBM12_PRI_MAP_PORT2_PIPE1 */ "Priority table based on PCP or TC.",
    /* IDB_OBM12_PRI_MAP_PORT2_PIPE2 */ "Priority table based on PCP or TC.",
    /* IDB_OBM12_PRI_MAP_PORT2_PIPE3 */ "Priority table based on PCP or TC.",
    /* IDB_OBM12_PRI_MAP_PORT3_PIPE0 */ "Priority table based on PCP or TC.",
    /* IDB_OBM12_PRI_MAP_PORT3_PIPE1 */ "Priority table based on PCP or TC.",
    /* IDB_OBM12_PRI_MAP_PORT3_PIPE2 */ "Priority table based on PCP or TC.",
    /* IDB_OBM12_PRI_MAP_PORT3_PIPE3 */ "Priority table based on PCP or TC.",
    /* IDB_OBM13_DSCP_MAP_PORT0  */ "Priority table based on DSCP.",
    /* IDB_OBM13_DSCP_MAP_PORT1  */ "Priority table based on DSCP.",
    /* IDB_OBM13_DSCP_MAP_PORT2  */ "Priority table based on DSCP.",
    /* IDB_OBM13_DSCP_MAP_PORT3  */ "Priority table based on DSCP.",
    /* IDB_OBM13_DSCP_MAP_PORT0_PIPE0 */ "Priority table based on DSCP.",
    /* IDB_OBM13_DSCP_MAP_PORT0_PIPE1 */ "Priority table based on DSCP.",
    /* IDB_OBM13_DSCP_MAP_PORT0_PIPE2 */ "Priority table based on DSCP.",
    /* IDB_OBM13_DSCP_MAP_PORT0_PIPE3 */ "Priority table based on DSCP.",
    /* IDB_OBM13_DSCP_MAP_PORT1_PIPE0 */ "Priority table based on DSCP.",
    /* IDB_OBM13_DSCP_MAP_PORT1_PIPE1 */ "Priority table based on DSCP.",
    /* IDB_OBM13_DSCP_MAP_PORT1_PIPE2 */ "Priority table based on DSCP.",
    /* IDB_OBM13_DSCP_MAP_PORT1_PIPE3 */ "Priority table based on DSCP.",
    /* IDB_OBM13_DSCP_MAP_PORT2_PIPE0 */ "Priority table based on DSCP.",
    /* IDB_OBM13_DSCP_MAP_PORT2_PIPE1 */ "Priority table based on DSCP.",
    /* IDB_OBM13_DSCP_MAP_PORT2_PIPE2 */ "Priority table based on DSCP.",
    /* IDB_OBM13_DSCP_MAP_PORT2_PIPE3 */ "Priority table based on DSCP.",
    /* IDB_OBM13_DSCP_MAP_PORT3_PIPE0 */ "Priority table based on DSCP.",
    /* IDB_OBM13_DSCP_MAP_PORT3_PIPE1 */ "Priority table based on DSCP.",
    /* IDB_OBM13_DSCP_MAP_PORT3_PIPE2 */ "Priority table based on DSCP.",
    /* IDB_OBM13_DSCP_MAP_PORT3_PIPE3 */ "Priority table based on DSCP.",
    /* IDB_OBM13_ETAG_MAP_PORT0  */ "Priority table based on ETAG PCP.",
    /* IDB_OBM13_ETAG_MAP_PORT1  */ "Priority table based on ETAG PCP.",
    /* IDB_OBM13_ETAG_MAP_PORT2  */ "Priority table based on ETAG PCP.",
    /* IDB_OBM13_ETAG_MAP_PORT3  */ "Priority table based on ETAG PCP.",
    /* IDB_OBM13_ETAG_MAP_PORT0_PIPE0 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM13_ETAG_MAP_PORT0_PIPE1 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM13_ETAG_MAP_PORT0_PIPE2 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM13_ETAG_MAP_PORT0_PIPE3 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM13_ETAG_MAP_PORT1_PIPE0 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM13_ETAG_MAP_PORT1_PIPE1 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM13_ETAG_MAP_PORT1_PIPE2 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM13_ETAG_MAP_PORT1_PIPE3 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM13_ETAG_MAP_PORT2_PIPE0 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM13_ETAG_MAP_PORT2_PIPE1 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM13_ETAG_MAP_PORT2_PIPE2 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM13_ETAG_MAP_PORT2_PIPE3 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM13_ETAG_MAP_PORT3_PIPE0 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM13_ETAG_MAP_PORT3_PIPE1 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM13_ETAG_MAP_PORT3_PIPE2 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM13_ETAG_MAP_PORT3_PIPE3 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM13_PRI_MAP_PORT0   */ "Priority table based on PCP or TC.",
    /* IDB_OBM13_PRI_MAP_PORT1   */ "Priority table based on PCP or TC.",
    /* IDB_OBM13_PRI_MAP_PORT2   */ "Priority table based on PCP or TC.",
    /* IDB_OBM13_PRI_MAP_PORT3   */ "Priority table based on PCP or TC.",
    /* IDB_OBM13_PRI_MAP_PORT0_PIPE0 */ "Priority table based on PCP or TC.",
    /* IDB_OBM13_PRI_MAP_PORT0_PIPE1 */ "Priority table based on PCP or TC.",
    /* IDB_OBM13_PRI_MAP_PORT0_PIPE2 */ "Priority table based on PCP or TC.",
    /* IDB_OBM13_PRI_MAP_PORT0_PIPE3 */ "Priority table based on PCP or TC.",
    /* IDB_OBM13_PRI_MAP_PORT1_PIPE0 */ "Priority table based on PCP or TC.",
    /* IDB_OBM13_PRI_MAP_PORT1_PIPE1 */ "Priority table based on PCP or TC.",
    /* IDB_OBM13_PRI_MAP_PORT1_PIPE2 */ "Priority table based on PCP or TC.",
    /* IDB_OBM13_PRI_MAP_PORT1_PIPE3 */ "Priority table based on PCP or TC.",
    /* IDB_OBM13_PRI_MAP_PORT2_PIPE0 */ "Priority table based on PCP or TC.",
    /* IDB_OBM13_PRI_MAP_PORT2_PIPE1 */ "Priority table based on PCP or TC.",
    /* IDB_OBM13_PRI_MAP_PORT2_PIPE2 */ "Priority table based on PCP or TC.",
    /* IDB_OBM13_PRI_MAP_PORT2_PIPE3 */ "Priority table based on PCP or TC.",
    /* IDB_OBM13_PRI_MAP_PORT3_PIPE0 */ "Priority table based on PCP or TC.",
    /* IDB_OBM13_PRI_MAP_PORT3_PIPE1 */ "Priority table based on PCP or TC.",
    /* IDB_OBM13_PRI_MAP_PORT3_PIPE2 */ "Priority table based on PCP or TC.",
    /* IDB_OBM13_PRI_MAP_PORT3_PIPE3 */ "Priority table based on PCP or TC.",
    /* IDB_OBM14_DSCP_MAP_PORT0  */ "Priority table based on DSCP.",
    /* IDB_OBM14_DSCP_MAP_PORT1  */ "Priority table based on DSCP.",
    /* IDB_OBM14_DSCP_MAP_PORT2  */ "Priority table based on DSCP.",
    /* IDB_OBM14_DSCP_MAP_PORT3  */ "Priority table based on DSCP.",
    /* IDB_OBM14_DSCP_MAP_PORT0_PIPE0 */ "Priority table based on DSCP.",
    /* IDB_OBM14_DSCP_MAP_PORT0_PIPE1 */ "Priority table based on DSCP.",
    /* IDB_OBM14_DSCP_MAP_PORT0_PIPE2 */ "Priority table based on DSCP.",
    /* IDB_OBM14_DSCP_MAP_PORT0_PIPE3 */ "Priority table based on DSCP.",
    /* IDB_OBM14_DSCP_MAP_PORT1_PIPE0 */ "Priority table based on DSCP.",
    /* IDB_OBM14_DSCP_MAP_PORT1_PIPE1 */ "Priority table based on DSCP.",
    /* IDB_OBM14_DSCP_MAP_PORT1_PIPE2 */ "Priority table based on DSCP.",
    /* IDB_OBM14_DSCP_MAP_PORT1_PIPE3 */ "Priority table based on DSCP.",
    /* IDB_OBM14_DSCP_MAP_PORT2_PIPE0 */ "Priority table based on DSCP.",
    /* IDB_OBM14_DSCP_MAP_PORT2_PIPE1 */ "Priority table based on DSCP.",
    /* IDB_OBM14_DSCP_MAP_PORT2_PIPE2 */ "Priority table based on DSCP.",
    /* IDB_OBM14_DSCP_MAP_PORT2_PIPE3 */ "Priority table based on DSCP.",
    /* IDB_OBM14_DSCP_MAP_PORT3_PIPE0 */ "Priority table based on DSCP.",
    /* IDB_OBM14_DSCP_MAP_PORT3_PIPE1 */ "Priority table based on DSCP.",
    /* IDB_OBM14_DSCP_MAP_PORT3_PIPE2 */ "Priority table based on DSCP.",
    /* IDB_OBM14_DSCP_MAP_PORT3_PIPE3 */ "Priority table based on DSCP.",
    /* IDB_OBM14_ETAG_MAP_PORT0  */ "Priority table based on ETAG PCP.",
    /* IDB_OBM14_ETAG_MAP_PORT1  */ "Priority table based on ETAG PCP.",
    /* IDB_OBM14_ETAG_MAP_PORT2  */ "Priority table based on ETAG PCP.",
    /* IDB_OBM14_ETAG_MAP_PORT3  */ "Priority table based on ETAG PCP.",
    /* IDB_OBM14_ETAG_MAP_PORT0_PIPE0 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM14_ETAG_MAP_PORT0_PIPE1 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM14_ETAG_MAP_PORT0_PIPE2 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM14_ETAG_MAP_PORT0_PIPE3 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM14_ETAG_MAP_PORT1_PIPE0 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM14_ETAG_MAP_PORT1_PIPE1 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM14_ETAG_MAP_PORT1_PIPE2 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM14_ETAG_MAP_PORT1_PIPE3 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM14_ETAG_MAP_PORT2_PIPE0 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM14_ETAG_MAP_PORT2_PIPE1 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM14_ETAG_MAP_PORT2_PIPE2 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM14_ETAG_MAP_PORT2_PIPE3 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM14_ETAG_MAP_PORT3_PIPE0 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM14_ETAG_MAP_PORT3_PIPE1 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM14_ETAG_MAP_PORT3_PIPE2 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM14_ETAG_MAP_PORT3_PIPE3 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM14_PRI_MAP_PORT0   */ "Priority table based on PCP or TC.",
    /* IDB_OBM14_PRI_MAP_PORT1   */ "Priority table based on PCP or TC.",
    /* IDB_OBM14_PRI_MAP_PORT2   */ "Priority table based on PCP or TC.",
    /* IDB_OBM14_PRI_MAP_PORT3   */ "Priority table based on PCP or TC.",
    /* IDB_OBM14_PRI_MAP_PORT0_PIPE0 */ "Priority table based on PCP or TC.",
    /* IDB_OBM14_PRI_MAP_PORT0_PIPE1 */ "Priority table based on PCP or TC.",
    /* IDB_OBM14_PRI_MAP_PORT0_PIPE2 */ "Priority table based on PCP or TC.",
    /* IDB_OBM14_PRI_MAP_PORT0_PIPE3 */ "Priority table based on PCP or TC.",
    /* IDB_OBM14_PRI_MAP_PORT1_PIPE0 */ "Priority table based on PCP or TC.",
    /* IDB_OBM14_PRI_MAP_PORT1_PIPE1 */ "Priority table based on PCP or TC.",
    /* IDB_OBM14_PRI_MAP_PORT1_PIPE2 */ "Priority table based on PCP or TC.",
    /* IDB_OBM14_PRI_MAP_PORT1_PIPE3 */ "Priority table based on PCP or TC.",
    /* IDB_OBM14_PRI_MAP_PORT2_PIPE0 */ "Priority table based on PCP or TC.",
    /* IDB_OBM14_PRI_MAP_PORT2_PIPE1 */ "Priority table based on PCP or TC.",
    /* IDB_OBM14_PRI_MAP_PORT2_PIPE2 */ "Priority table based on PCP or TC.",
    /* IDB_OBM14_PRI_MAP_PORT2_PIPE3 */ "Priority table based on PCP or TC.",
    /* IDB_OBM14_PRI_MAP_PORT3_PIPE0 */ "Priority table based on PCP or TC.",
    /* IDB_OBM14_PRI_MAP_PORT3_PIPE1 */ "Priority table based on PCP or TC.",
    /* IDB_OBM14_PRI_MAP_PORT3_PIPE2 */ "Priority table based on PCP or TC.",
    /* IDB_OBM14_PRI_MAP_PORT3_PIPE3 */ "Priority table based on PCP or TC.",
    /* IDB_OBM15_DSCP_MAP_PORT0  */ "Priority table based on DSCP.",
    /* IDB_OBM15_DSCP_MAP_PORT1  */ "Priority table based on DSCP.",
    /* IDB_OBM15_DSCP_MAP_PORT2  */ "Priority table based on DSCP.",
    /* IDB_OBM15_DSCP_MAP_PORT3  */ "Priority table based on DSCP.",
    /* IDB_OBM15_DSCP_MAP_PORT0_PIPE0 */ "Priority table based on DSCP.",
    /* IDB_OBM15_DSCP_MAP_PORT0_PIPE1 */ "Priority table based on DSCP.",
    /* IDB_OBM15_DSCP_MAP_PORT0_PIPE2 */ "Priority table based on DSCP.",
    /* IDB_OBM15_DSCP_MAP_PORT0_PIPE3 */ "Priority table based on DSCP.",
    /* IDB_OBM15_DSCP_MAP_PORT1_PIPE0 */ "Priority table based on DSCP.",
    /* IDB_OBM15_DSCP_MAP_PORT1_PIPE1 */ "Priority table based on DSCP.",
    /* IDB_OBM15_DSCP_MAP_PORT1_PIPE2 */ "Priority table based on DSCP.",
    /* IDB_OBM15_DSCP_MAP_PORT1_PIPE3 */ "Priority table based on DSCP.",
    /* IDB_OBM15_DSCP_MAP_PORT2_PIPE0 */ "Priority table based on DSCP.",
    /* IDB_OBM15_DSCP_MAP_PORT2_PIPE1 */ "Priority table based on DSCP.",
    /* IDB_OBM15_DSCP_MAP_PORT2_PIPE2 */ "Priority table based on DSCP.",
    /* IDB_OBM15_DSCP_MAP_PORT2_PIPE3 */ "Priority table based on DSCP.",
    /* IDB_OBM15_DSCP_MAP_PORT3_PIPE0 */ "Priority table based on DSCP.",
    /* IDB_OBM15_DSCP_MAP_PORT3_PIPE1 */ "Priority table based on DSCP.",
    /* IDB_OBM15_DSCP_MAP_PORT3_PIPE2 */ "Priority table based on DSCP.",
    /* IDB_OBM15_DSCP_MAP_PORT3_PIPE3 */ "Priority table based on DSCP.",
    /* IDB_OBM15_ETAG_MAP_PORT0  */ "Priority table based on ETAG PCP.",
    /* IDB_OBM15_ETAG_MAP_PORT1  */ "Priority table based on ETAG PCP.",
    /* IDB_OBM15_ETAG_MAP_PORT2  */ "Priority table based on ETAG PCP.",
    /* IDB_OBM15_ETAG_MAP_PORT3  */ "Priority table based on ETAG PCP.",
    /* IDB_OBM15_ETAG_MAP_PORT0_PIPE0 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM15_ETAG_MAP_PORT0_PIPE1 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM15_ETAG_MAP_PORT0_PIPE2 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM15_ETAG_MAP_PORT0_PIPE3 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM15_ETAG_MAP_PORT1_PIPE0 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM15_ETAG_MAP_PORT1_PIPE1 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM15_ETAG_MAP_PORT1_PIPE2 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM15_ETAG_MAP_PORT1_PIPE3 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM15_ETAG_MAP_PORT2_PIPE0 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM15_ETAG_MAP_PORT2_PIPE1 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM15_ETAG_MAP_PORT2_PIPE2 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM15_ETAG_MAP_PORT2_PIPE3 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM15_ETAG_MAP_PORT3_PIPE0 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM15_ETAG_MAP_PORT3_PIPE1 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM15_ETAG_MAP_PORT3_PIPE2 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM15_ETAG_MAP_PORT3_PIPE3 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM15_PRI_MAP_PORT0   */ "Priority table based on PCP or TC.",
    /* IDB_OBM15_PRI_MAP_PORT1   */ "Priority table based on PCP or TC.",
    /* IDB_OBM15_PRI_MAP_PORT2   */ "Priority table based on PCP or TC.",
    /* IDB_OBM15_PRI_MAP_PORT3   */ "Priority table based on PCP or TC.",
    /* IDB_OBM15_PRI_MAP_PORT0_PIPE0 */ "Priority table based on PCP or TC.",
    /* IDB_OBM15_PRI_MAP_PORT0_PIPE1 */ "Priority table based on PCP or TC.",
    /* IDB_OBM15_PRI_MAP_PORT0_PIPE2 */ "Priority table based on PCP or TC.",
    /* IDB_OBM15_PRI_MAP_PORT0_PIPE3 */ "Priority table based on PCP or TC.",
    /* IDB_OBM15_PRI_MAP_PORT1_PIPE0 */ "Priority table based on PCP or TC.",
    /* IDB_OBM15_PRI_MAP_PORT1_PIPE1 */ "Priority table based on PCP or TC.",
    /* IDB_OBM15_PRI_MAP_PORT1_PIPE2 */ "Priority table based on PCP or TC.",
    /* IDB_OBM15_PRI_MAP_PORT1_PIPE3 */ "Priority table based on PCP or TC.",
    /* IDB_OBM15_PRI_MAP_PORT2_PIPE0 */ "Priority table based on PCP or TC.",
    /* IDB_OBM15_PRI_MAP_PORT2_PIPE1 */ "Priority table based on PCP or TC.",
    /* IDB_OBM15_PRI_MAP_PORT2_PIPE2 */ "Priority table based on PCP or TC.",
    /* IDB_OBM15_PRI_MAP_PORT2_PIPE3 */ "Priority table based on PCP or TC.",
    /* IDB_OBM15_PRI_MAP_PORT3_PIPE0 */ "Priority table based on PCP or TC.",
    /* IDB_OBM15_PRI_MAP_PORT3_PIPE1 */ "Priority table based on PCP or TC.",
    /* IDB_OBM15_PRI_MAP_PORT3_PIPE2 */ "Priority table based on PCP or TC.",
    /* IDB_OBM15_PRI_MAP_PORT3_PIPE3 */ "Priority table based on PCP or TC.",
    /* IDB_OBM1_DSCP_MAP_PORT0   */ "Priority table based on DSCP.",
    /* IDB_OBM1_DSCP_MAP_PORT1   */ "Priority table based on DSCP.",
    /* IDB_OBM1_DSCP_MAP_PORT2   */ "Priority table based on DSCP.",
    /* IDB_OBM1_DSCP_MAP_PORT3   */ "Priority table based on DSCP.",
    /* IDB_OBM1_DSCP_MAP_PORT0_PIPE0 */ "Priority table based on DSCP.",
    /* IDB_OBM1_DSCP_MAP_PORT0_PIPE1 */ "Priority table based on DSCP.",
    /* IDB_OBM1_DSCP_MAP_PORT0_PIPE2 */ "Priority table based on DSCP.",
    /* IDB_OBM1_DSCP_MAP_PORT0_PIPE3 */ "Priority table based on DSCP.",
    /* IDB_OBM1_DSCP_MAP_PORT1_PIPE0 */ "Priority table based on DSCP.",
    /* IDB_OBM1_DSCP_MAP_PORT1_PIPE1 */ "Priority table based on DSCP.",
    /* IDB_OBM1_DSCP_MAP_PORT1_PIPE2 */ "Priority table based on DSCP.",
    /* IDB_OBM1_DSCP_MAP_PORT1_PIPE3 */ "Priority table based on DSCP.",
    /* IDB_OBM1_DSCP_MAP_PORT2_PIPE0 */ "Priority table based on DSCP.",
    /* IDB_OBM1_DSCP_MAP_PORT2_PIPE1 */ "Priority table based on DSCP.",
    /* IDB_OBM1_DSCP_MAP_PORT2_PIPE2 */ "Priority table based on DSCP.",
    /* IDB_OBM1_DSCP_MAP_PORT2_PIPE3 */ "Priority table based on DSCP.",
    /* IDB_OBM1_DSCP_MAP_PORT3_PIPE0 */ "Priority table based on DSCP.",
    /* IDB_OBM1_DSCP_MAP_PORT3_PIPE1 */ "Priority table based on DSCP.",
    /* IDB_OBM1_DSCP_MAP_PORT3_PIPE2 */ "Priority table based on DSCP.",
    /* IDB_OBM1_DSCP_MAP_PORT3_PIPE3 */ "Priority table based on DSCP.",
    /* IDB_OBM1_ETAG_MAP_PORT0   */ "Priority table based on ETAG PCP.",
    /* IDB_OBM1_ETAG_MAP_PORT1   */ "Priority table based on ETAG PCP.",
    /* IDB_OBM1_ETAG_MAP_PORT2   */ "Priority table based on ETAG PCP.",
    /* IDB_OBM1_ETAG_MAP_PORT3   */ "Priority table based on ETAG PCP.",
    /* IDB_OBM1_ETAG_MAP_PORT0_PIPE0 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM1_ETAG_MAP_PORT0_PIPE1 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM1_ETAG_MAP_PORT0_PIPE2 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM1_ETAG_MAP_PORT0_PIPE3 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM1_ETAG_MAP_PORT1_PIPE0 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM1_ETAG_MAP_PORT1_PIPE1 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM1_ETAG_MAP_PORT1_PIPE2 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM1_ETAG_MAP_PORT1_PIPE3 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM1_ETAG_MAP_PORT2_PIPE0 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM1_ETAG_MAP_PORT2_PIPE1 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM1_ETAG_MAP_PORT2_PIPE2 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM1_ETAG_MAP_PORT2_PIPE3 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM1_ETAG_MAP_PORT3_PIPE0 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM1_ETAG_MAP_PORT3_PIPE1 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM1_ETAG_MAP_PORT3_PIPE2 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM1_ETAG_MAP_PORT3_PIPE3 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM1_PRI_MAP_PORT0    */ "Priority table based on PCP or TC.",
    /* IDB_OBM1_PRI_MAP_PORT1    */ "Priority table based on PCP or TC.",
    /* IDB_OBM1_PRI_MAP_PORT2    */ "Priority table based on PCP or TC.",
    /* IDB_OBM1_PRI_MAP_PORT3    */ "Priority table based on PCP or TC.",
    /* IDB_OBM1_PRI_MAP_PORT0_PIPE0 */ "Priority table based on PCP or TC.",
    /* IDB_OBM1_PRI_MAP_PORT0_PIPE1 */ "Priority table based on PCP or TC.",
    /* IDB_OBM1_PRI_MAP_PORT0_PIPE2 */ "Priority table based on PCP or TC.",
    /* IDB_OBM1_PRI_MAP_PORT0_PIPE3 */ "Priority table based on PCP or TC.",
    /* IDB_OBM1_PRI_MAP_PORT1_PIPE0 */ "Priority table based on PCP or TC.",
    /* IDB_OBM1_PRI_MAP_PORT1_PIPE1 */ "Priority table based on PCP or TC.",
    /* IDB_OBM1_PRI_MAP_PORT1_PIPE2 */ "Priority table based on PCP or TC.",
    /* IDB_OBM1_PRI_MAP_PORT1_PIPE3 */ "Priority table based on PCP or TC.",
    /* IDB_OBM1_PRI_MAP_PORT2_PIPE0 */ "Priority table based on PCP or TC.",
    /* IDB_OBM1_PRI_MAP_PORT2_PIPE1 */ "Priority table based on PCP or TC.",
    /* IDB_OBM1_PRI_MAP_PORT2_PIPE2 */ "Priority table based on PCP or TC.",
    /* IDB_OBM1_PRI_MAP_PORT2_PIPE3 */ "Priority table based on PCP or TC.",
    /* IDB_OBM1_PRI_MAP_PORT3_PIPE0 */ "Priority table based on PCP or TC.",
    /* IDB_OBM1_PRI_MAP_PORT3_PIPE1 */ "Priority table based on PCP or TC.",
    /* IDB_OBM1_PRI_MAP_PORT3_PIPE2 */ "Priority table based on PCP or TC.",
    /* IDB_OBM1_PRI_MAP_PORT3_PIPE3 */ "Priority table based on PCP or TC.",
    /* IDB_OBM2_DSCP_MAP_PORT0   */ "Priority table based on DSCP.",
    /* IDB_OBM2_DSCP_MAP_PORT1   */ "Priority table based on DSCP.",
    /* IDB_OBM2_DSCP_MAP_PORT2   */ "Priority table based on DSCP.",
    /* IDB_OBM2_DSCP_MAP_PORT3   */ "Priority table based on DSCP.",
    /* IDB_OBM2_DSCP_MAP_PORT0_PIPE0 */ "Priority table based on DSCP.",
    /* IDB_OBM2_DSCP_MAP_PORT0_PIPE1 */ "Priority table based on DSCP.",
    /* IDB_OBM2_DSCP_MAP_PORT0_PIPE2 */ "Priority table based on DSCP.",
    /* IDB_OBM2_DSCP_MAP_PORT0_PIPE3 */ "Priority table based on DSCP.",
    /* IDB_OBM2_DSCP_MAP_PORT1_PIPE0 */ "Priority table based on DSCP.",
    /* IDB_OBM2_DSCP_MAP_PORT1_PIPE1 */ "Priority table based on DSCP.",
    /* IDB_OBM2_DSCP_MAP_PORT1_PIPE2 */ "Priority table based on DSCP.",
    /* IDB_OBM2_DSCP_MAP_PORT1_PIPE3 */ "Priority table based on DSCP.",
    /* IDB_OBM2_DSCP_MAP_PORT2_PIPE0 */ "Priority table based on DSCP.",
    /* IDB_OBM2_DSCP_MAP_PORT2_PIPE1 */ "Priority table based on DSCP.",
    /* IDB_OBM2_DSCP_MAP_PORT2_PIPE2 */ "Priority table based on DSCP.",
    /* IDB_OBM2_DSCP_MAP_PORT2_PIPE3 */ "Priority table based on DSCP.",
    /* IDB_OBM2_DSCP_MAP_PORT3_PIPE0 */ "Priority table based on DSCP.",
    /* IDB_OBM2_DSCP_MAP_PORT3_PIPE1 */ "Priority table based on DSCP.",
    /* IDB_OBM2_DSCP_MAP_PORT3_PIPE2 */ "Priority table based on DSCP.",
    /* IDB_OBM2_DSCP_MAP_PORT3_PIPE3 */ "Priority table based on DSCP.",
    /* IDB_OBM2_ETAG_MAP_PORT0   */ "Priority table based on ETAG PCP.",
    /* IDB_OBM2_ETAG_MAP_PORT1   */ "Priority table based on ETAG PCP.",
    /* IDB_OBM2_ETAG_MAP_PORT2   */ "Priority table based on ETAG PCP.",
    /* IDB_OBM2_ETAG_MAP_PORT3   */ "Priority table based on ETAG PCP.",
    /* IDB_OBM2_ETAG_MAP_PORT0_PIPE0 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM2_ETAG_MAP_PORT0_PIPE1 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM2_ETAG_MAP_PORT0_PIPE2 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM2_ETAG_MAP_PORT0_PIPE3 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM2_ETAG_MAP_PORT1_PIPE0 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM2_ETAG_MAP_PORT1_PIPE1 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM2_ETAG_MAP_PORT1_PIPE2 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM2_ETAG_MAP_PORT1_PIPE3 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM2_ETAG_MAP_PORT2_PIPE0 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM2_ETAG_MAP_PORT2_PIPE1 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM2_ETAG_MAP_PORT2_PIPE2 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM2_ETAG_MAP_PORT2_PIPE3 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM2_ETAG_MAP_PORT3_PIPE0 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM2_ETAG_MAP_PORT3_PIPE1 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM2_ETAG_MAP_PORT3_PIPE2 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM2_ETAG_MAP_PORT3_PIPE3 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM2_PRI_MAP_PORT0    */ "Priority table based on PCP or TC.",
    /* IDB_OBM2_PRI_MAP_PORT1    */ "Priority table based on PCP or TC.",
    /* IDB_OBM2_PRI_MAP_PORT2    */ "Priority table based on PCP or TC.",
    /* IDB_OBM2_PRI_MAP_PORT3    */ "Priority table based on PCP or TC.",
    /* IDB_OBM2_PRI_MAP_PORT0_PIPE0 */ "Priority table based on PCP or TC.",
    /* IDB_OBM2_PRI_MAP_PORT0_PIPE1 */ "Priority table based on PCP or TC.",
    /* IDB_OBM2_PRI_MAP_PORT0_PIPE2 */ "Priority table based on PCP or TC.",
    /* IDB_OBM2_PRI_MAP_PORT0_PIPE3 */ "Priority table based on PCP or TC.",
    /* IDB_OBM2_PRI_MAP_PORT1_PIPE0 */ "Priority table based on PCP or TC.",
    /* IDB_OBM2_PRI_MAP_PORT1_PIPE1 */ "Priority table based on PCP or TC.",
    /* IDB_OBM2_PRI_MAP_PORT1_PIPE2 */ "Priority table based on PCP or TC.",
    /* IDB_OBM2_PRI_MAP_PORT1_PIPE3 */ "Priority table based on PCP or TC.",
    /* IDB_OBM2_PRI_MAP_PORT2_PIPE0 */ "Priority table based on PCP or TC.",
    /* IDB_OBM2_PRI_MAP_PORT2_PIPE1 */ "Priority table based on PCP or TC.",
    /* IDB_OBM2_PRI_MAP_PORT2_PIPE2 */ "Priority table based on PCP or TC.",
    /* IDB_OBM2_PRI_MAP_PORT2_PIPE3 */ "Priority table based on PCP or TC.",
    /* IDB_OBM2_PRI_MAP_PORT3_PIPE0 */ "Priority table based on PCP or TC.",
    /* IDB_OBM2_PRI_MAP_PORT3_PIPE1 */ "Priority table based on PCP or TC.",
    /* IDB_OBM2_PRI_MAP_PORT3_PIPE2 */ "Priority table based on PCP or TC.",
    /* IDB_OBM2_PRI_MAP_PORT3_PIPE3 */ "Priority table based on PCP or TC.",
    /* IDB_OBM3_DSCP_MAP_PORT0   */ "Priority table based on DSCP.",
    /* IDB_OBM3_DSCP_MAP_PORT1   */ "Priority table based on DSCP.",
    /* IDB_OBM3_DSCP_MAP_PORT2   */ "Priority table based on DSCP.",
    /* IDB_OBM3_DSCP_MAP_PORT3   */ "Priority table based on DSCP.",
    /* IDB_OBM3_DSCP_MAP_PORT0_PIPE0 */ "Priority table based on DSCP.",
    /* IDB_OBM3_DSCP_MAP_PORT0_PIPE1 */ "Priority table based on DSCP.",
    /* IDB_OBM3_DSCP_MAP_PORT0_PIPE2 */ "Priority table based on DSCP.",
    /* IDB_OBM3_DSCP_MAP_PORT0_PIPE3 */ "Priority table based on DSCP.",
    /* IDB_OBM3_DSCP_MAP_PORT1_PIPE0 */ "Priority table based on DSCP.",
    /* IDB_OBM3_DSCP_MAP_PORT1_PIPE1 */ "Priority table based on DSCP.",
    /* IDB_OBM3_DSCP_MAP_PORT1_PIPE2 */ "Priority table based on DSCP.",
    /* IDB_OBM3_DSCP_MAP_PORT1_PIPE3 */ "Priority table based on DSCP.",
    /* IDB_OBM3_DSCP_MAP_PORT2_PIPE0 */ "Priority table based on DSCP.",
    /* IDB_OBM3_DSCP_MAP_PORT2_PIPE1 */ "Priority table based on DSCP.",
    /* IDB_OBM3_DSCP_MAP_PORT2_PIPE2 */ "Priority table based on DSCP.",
    /* IDB_OBM3_DSCP_MAP_PORT2_PIPE3 */ "Priority table based on DSCP.",
    /* IDB_OBM3_DSCP_MAP_PORT3_PIPE0 */ "Priority table based on DSCP.",
    /* IDB_OBM3_DSCP_MAP_PORT3_PIPE1 */ "Priority table based on DSCP.",
    /* IDB_OBM3_DSCP_MAP_PORT3_PIPE2 */ "Priority table based on DSCP.",
    /* IDB_OBM3_DSCP_MAP_PORT3_PIPE3 */ "Priority table based on DSCP.",
    /* IDB_OBM3_ETAG_MAP_PORT0   */ "Priority table based on ETAG PCP.",
    /* IDB_OBM3_ETAG_MAP_PORT1   */ "Priority table based on ETAG PCP.",
    /* IDB_OBM3_ETAG_MAP_PORT2   */ "Priority table based on ETAG PCP.",
    /* IDB_OBM3_ETAG_MAP_PORT3   */ "Priority table based on ETAG PCP.",
    /* IDB_OBM3_ETAG_MAP_PORT0_PIPE0 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM3_ETAG_MAP_PORT0_PIPE1 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM3_ETAG_MAP_PORT0_PIPE2 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM3_ETAG_MAP_PORT0_PIPE3 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM3_ETAG_MAP_PORT1_PIPE0 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM3_ETAG_MAP_PORT1_PIPE1 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM3_ETAG_MAP_PORT1_PIPE2 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM3_ETAG_MAP_PORT1_PIPE3 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM3_ETAG_MAP_PORT2_PIPE0 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM3_ETAG_MAP_PORT2_PIPE1 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM3_ETAG_MAP_PORT2_PIPE2 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM3_ETAG_MAP_PORT2_PIPE3 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM3_ETAG_MAP_PORT3_PIPE0 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM3_ETAG_MAP_PORT3_PIPE1 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM3_ETAG_MAP_PORT3_PIPE2 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM3_ETAG_MAP_PORT3_PIPE3 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM3_PRI_MAP_PORT0    */ "Priority table based on PCP or TC.",
    /* IDB_OBM3_PRI_MAP_PORT1    */ "Priority table based on PCP or TC.",
    /* IDB_OBM3_PRI_MAP_PORT2    */ "Priority table based on PCP or TC.",
    /* IDB_OBM3_PRI_MAP_PORT3    */ "Priority table based on PCP or TC.",
    /* IDB_OBM3_PRI_MAP_PORT0_PIPE0 */ "Priority table based on PCP or TC.",
    /* IDB_OBM3_PRI_MAP_PORT0_PIPE1 */ "Priority table based on PCP or TC.",
    /* IDB_OBM3_PRI_MAP_PORT0_PIPE2 */ "Priority table based on PCP or TC.",
    /* IDB_OBM3_PRI_MAP_PORT0_PIPE3 */ "Priority table based on PCP or TC.",
    /* IDB_OBM3_PRI_MAP_PORT1_PIPE0 */ "Priority table based on PCP or TC.",
    /* IDB_OBM3_PRI_MAP_PORT1_PIPE1 */ "Priority table based on PCP or TC.",
    /* IDB_OBM3_PRI_MAP_PORT1_PIPE2 */ "Priority table based on PCP or TC.",
    /* IDB_OBM3_PRI_MAP_PORT1_PIPE3 */ "Priority table based on PCP or TC.",
    /* IDB_OBM3_PRI_MAP_PORT2_PIPE0 */ "Priority table based on PCP or TC.",
    /* IDB_OBM3_PRI_MAP_PORT2_PIPE1 */ "Priority table based on PCP or TC.",
    /* IDB_OBM3_PRI_MAP_PORT2_PIPE2 */ "Priority table based on PCP or TC.",
    /* IDB_OBM3_PRI_MAP_PORT2_PIPE3 */ "Priority table based on PCP or TC.",
    /* IDB_OBM3_PRI_MAP_PORT3_PIPE0 */ "Priority table based on PCP or TC.",
    /* IDB_OBM3_PRI_MAP_PORT3_PIPE1 */ "Priority table based on PCP or TC.",
    /* IDB_OBM3_PRI_MAP_PORT3_PIPE2 */ "Priority table based on PCP or TC.",
    /* IDB_OBM3_PRI_MAP_PORT3_PIPE3 */ "Priority table based on PCP or TC.",
    /* IDB_OBM4_DSCP_MAP_PORT0   */ "Priority table based on DSCP.",
    /* IDB_OBM4_DSCP_MAP_PORT1   */ "Priority table based on DSCP.",
    /* IDB_OBM4_DSCP_MAP_PORT2   */ "Priority table based on DSCP.",
    /* IDB_OBM4_DSCP_MAP_PORT3   */ "Priority table based on DSCP.",
    /* IDB_OBM4_DSCP_MAP_PORT0_PIPE0 */ "Priority table based on DSCP.",
    /* IDB_OBM4_DSCP_MAP_PORT0_PIPE1 */ "Priority table based on DSCP.",
    /* IDB_OBM4_DSCP_MAP_PORT0_PIPE2 */ "Priority table based on DSCP.",
    /* IDB_OBM4_DSCP_MAP_PORT0_PIPE3 */ "Priority table based on DSCP.",
    /* IDB_OBM4_DSCP_MAP_PORT1_PIPE0 */ "Priority table based on DSCP.",
    /* IDB_OBM4_DSCP_MAP_PORT1_PIPE1 */ "Priority table based on DSCP.",
    /* IDB_OBM4_DSCP_MAP_PORT1_PIPE2 */ "Priority table based on DSCP.",
    /* IDB_OBM4_DSCP_MAP_PORT1_PIPE3 */ "Priority table based on DSCP.",
    /* IDB_OBM4_DSCP_MAP_PORT2_PIPE0 */ "Priority table based on DSCP.",
    /* IDB_OBM4_DSCP_MAP_PORT2_PIPE1 */ "Priority table based on DSCP.",
    /* IDB_OBM4_DSCP_MAP_PORT2_PIPE2 */ "Priority table based on DSCP.",
    /* IDB_OBM4_DSCP_MAP_PORT2_PIPE3 */ "Priority table based on DSCP.",
    /* IDB_OBM4_DSCP_MAP_PORT3_PIPE0 */ "Priority table based on DSCP.",
    /* IDB_OBM4_DSCP_MAP_PORT3_PIPE1 */ "Priority table based on DSCP.",
    /* IDB_OBM4_DSCP_MAP_PORT3_PIPE2 */ "Priority table based on DSCP.",
    /* IDB_OBM4_DSCP_MAP_PORT3_PIPE3 */ "Priority table based on DSCP.",
    /* IDB_OBM4_ETAG_MAP_PORT0   */ "Priority table based on ETAG PCP.",
    /* IDB_OBM4_ETAG_MAP_PORT1   */ "Priority table based on ETAG PCP.",
    /* IDB_OBM4_ETAG_MAP_PORT2   */ "Priority table based on ETAG PCP.",
    /* IDB_OBM4_ETAG_MAP_PORT3   */ "Priority table based on ETAG PCP.",
    /* IDB_OBM4_ETAG_MAP_PORT0_PIPE0 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM4_ETAG_MAP_PORT0_PIPE1 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM4_ETAG_MAP_PORT0_PIPE2 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM4_ETAG_MAP_PORT0_PIPE3 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM4_ETAG_MAP_PORT1_PIPE0 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM4_ETAG_MAP_PORT1_PIPE1 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM4_ETAG_MAP_PORT1_PIPE2 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM4_ETAG_MAP_PORT1_PIPE3 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM4_ETAG_MAP_PORT2_PIPE0 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM4_ETAG_MAP_PORT2_PIPE1 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM4_ETAG_MAP_PORT2_PIPE2 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM4_ETAG_MAP_PORT2_PIPE3 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM4_ETAG_MAP_PORT3_PIPE0 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM4_ETAG_MAP_PORT3_PIPE1 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM4_ETAG_MAP_PORT3_PIPE2 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM4_ETAG_MAP_PORT3_PIPE3 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM4_PRI_MAP_PORT0    */ "Priority table based on PCP or TC.",
    /* IDB_OBM4_PRI_MAP_PORT1    */ "Priority table based on PCP or TC.",
    /* IDB_OBM4_PRI_MAP_PORT2    */ "Priority table based on PCP or TC.",
    /* IDB_OBM4_PRI_MAP_PORT3    */ "Priority table based on PCP or TC.",
    /* IDB_OBM4_PRI_MAP_PORT0_PIPE0 */ "Priority table based on PCP or TC.",
    /* IDB_OBM4_PRI_MAP_PORT0_PIPE1 */ "Priority table based on PCP or TC.",
    /* IDB_OBM4_PRI_MAP_PORT0_PIPE2 */ "Priority table based on PCP or TC.",
    /* IDB_OBM4_PRI_MAP_PORT0_PIPE3 */ "Priority table based on PCP or TC.",
    /* IDB_OBM4_PRI_MAP_PORT1_PIPE0 */ "Priority table based on PCP or TC.",
    /* IDB_OBM4_PRI_MAP_PORT1_PIPE1 */ "Priority table based on PCP or TC.",
    /* IDB_OBM4_PRI_MAP_PORT1_PIPE2 */ "Priority table based on PCP or TC.",
    /* IDB_OBM4_PRI_MAP_PORT1_PIPE3 */ "Priority table based on PCP or TC.",
    /* IDB_OBM4_PRI_MAP_PORT2_PIPE0 */ "Priority table based on PCP or TC.",
    /* IDB_OBM4_PRI_MAP_PORT2_PIPE1 */ "Priority table based on PCP or TC.",
    /* IDB_OBM4_PRI_MAP_PORT2_PIPE2 */ "Priority table based on PCP or TC.",
    /* IDB_OBM4_PRI_MAP_PORT2_PIPE3 */ "Priority table based on PCP or TC.",
    /* IDB_OBM4_PRI_MAP_PORT3_PIPE0 */ "Priority table based on PCP or TC.",
    /* IDB_OBM4_PRI_MAP_PORT3_PIPE1 */ "Priority table based on PCP or TC.",
    /* IDB_OBM4_PRI_MAP_PORT3_PIPE2 */ "Priority table based on PCP or TC.",
    /* IDB_OBM4_PRI_MAP_PORT3_PIPE3 */ "Priority table based on PCP or TC.",
    /* IDB_OBM5_DSCP_MAP_PORT0   */ "Priority table based on DSCP.",
    /* IDB_OBM5_DSCP_MAP_PORT1   */ "Priority table based on DSCP.",
    /* IDB_OBM5_DSCP_MAP_PORT2   */ "Priority table based on DSCP.",
    /* IDB_OBM5_DSCP_MAP_PORT3   */ "Priority table based on DSCP.",
    /* IDB_OBM5_DSCP_MAP_PORT0_PIPE0 */ "Priority table based on DSCP.",
    /* IDB_OBM5_DSCP_MAP_PORT0_PIPE1 */ "Priority table based on DSCP.",
    /* IDB_OBM5_DSCP_MAP_PORT0_PIPE2 */ "Priority table based on DSCP.",
    /* IDB_OBM5_DSCP_MAP_PORT0_PIPE3 */ "Priority table based on DSCP.",
    /* IDB_OBM5_DSCP_MAP_PORT1_PIPE0 */ "Priority table based on DSCP.",
    /* IDB_OBM5_DSCP_MAP_PORT1_PIPE1 */ "Priority table based on DSCP.",
    /* IDB_OBM5_DSCP_MAP_PORT1_PIPE2 */ "Priority table based on DSCP.",
    /* IDB_OBM5_DSCP_MAP_PORT1_PIPE3 */ "Priority table based on DSCP.",
    /* IDB_OBM5_DSCP_MAP_PORT2_PIPE0 */ "Priority table based on DSCP.",
    /* IDB_OBM5_DSCP_MAP_PORT2_PIPE1 */ "Priority table based on DSCP.",
    /* IDB_OBM5_DSCP_MAP_PORT2_PIPE2 */ "Priority table based on DSCP.",
    /* IDB_OBM5_DSCP_MAP_PORT2_PIPE3 */ "Priority table based on DSCP.",
    /* IDB_OBM5_DSCP_MAP_PORT3_PIPE0 */ "Priority table based on DSCP.",
    /* IDB_OBM5_DSCP_MAP_PORT3_PIPE1 */ "Priority table based on DSCP.",
    /* IDB_OBM5_DSCP_MAP_PORT3_PIPE2 */ "Priority table based on DSCP.",
    /* IDB_OBM5_DSCP_MAP_PORT3_PIPE3 */ "Priority table based on DSCP.",
    /* IDB_OBM5_ETAG_MAP_PORT0   */ "Priority table based on ETAG PCP.",
    /* IDB_OBM5_ETAG_MAP_PORT1   */ "Priority table based on ETAG PCP.",
    /* IDB_OBM5_ETAG_MAP_PORT2   */ "Priority table based on ETAG PCP.",
    /* IDB_OBM5_ETAG_MAP_PORT3   */ "Priority table based on ETAG PCP.",
    /* IDB_OBM5_ETAG_MAP_PORT0_PIPE0 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM5_ETAG_MAP_PORT0_PIPE1 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM5_ETAG_MAP_PORT0_PIPE2 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM5_ETAG_MAP_PORT0_PIPE3 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM5_ETAG_MAP_PORT1_PIPE0 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM5_ETAG_MAP_PORT1_PIPE1 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM5_ETAG_MAP_PORT1_PIPE2 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM5_ETAG_MAP_PORT1_PIPE3 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM5_ETAG_MAP_PORT2_PIPE0 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM5_ETAG_MAP_PORT2_PIPE1 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM5_ETAG_MAP_PORT2_PIPE2 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM5_ETAG_MAP_PORT2_PIPE3 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM5_ETAG_MAP_PORT3_PIPE0 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM5_ETAG_MAP_PORT3_PIPE1 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM5_ETAG_MAP_PORT3_PIPE2 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM5_ETAG_MAP_PORT3_PIPE3 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM5_PRI_MAP_PORT0    */ "Priority table based on PCP or TC.",
    /* IDB_OBM5_PRI_MAP_PORT1    */ "Priority table based on PCP or TC.",
    /* IDB_OBM5_PRI_MAP_PORT2    */ "Priority table based on PCP or TC.",
    /* IDB_OBM5_PRI_MAP_PORT3    */ "Priority table based on PCP or TC.",
    /* IDB_OBM5_PRI_MAP_PORT0_PIPE0 */ "Priority table based on PCP or TC.",
    /* IDB_OBM5_PRI_MAP_PORT0_PIPE1 */ "Priority table based on PCP or TC.",
    /* IDB_OBM5_PRI_MAP_PORT0_PIPE2 */ "Priority table based on PCP or TC.",
    /* IDB_OBM5_PRI_MAP_PORT0_PIPE3 */ "Priority table based on PCP or TC.",
    /* IDB_OBM5_PRI_MAP_PORT1_PIPE0 */ "Priority table based on PCP or TC.",
    /* IDB_OBM5_PRI_MAP_PORT1_PIPE1 */ "Priority table based on PCP or TC.",
    /* IDB_OBM5_PRI_MAP_PORT1_PIPE2 */ "Priority table based on PCP or TC.",
    /* IDB_OBM5_PRI_MAP_PORT1_PIPE3 */ "Priority table based on PCP or TC.",
    /* IDB_OBM5_PRI_MAP_PORT2_PIPE0 */ "Priority table based on PCP or TC.",
    /* IDB_OBM5_PRI_MAP_PORT2_PIPE1 */ "Priority table based on PCP or TC.",
    /* IDB_OBM5_PRI_MAP_PORT2_PIPE2 */ "Priority table based on PCP or TC.",
    /* IDB_OBM5_PRI_MAP_PORT2_PIPE3 */ "Priority table based on PCP or TC.",
    /* IDB_OBM5_PRI_MAP_PORT3_PIPE0 */ "Priority table based on PCP or TC.",
    /* IDB_OBM5_PRI_MAP_PORT3_PIPE1 */ "Priority table based on PCP or TC.",
    /* IDB_OBM5_PRI_MAP_PORT3_PIPE2 */ "Priority table based on PCP or TC.",
    /* IDB_OBM5_PRI_MAP_PORT3_PIPE3 */ "Priority table based on PCP or TC.",
    /* IDB_OBM6_DSCP_MAP_PORT0   */ "Priority table based on DSCP.",
    /* IDB_OBM6_DSCP_MAP_PORT1   */ "Priority table based on DSCP.",
    /* IDB_OBM6_DSCP_MAP_PORT2   */ "Priority table based on DSCP.",
    /* IDB_OBM6_DSCP_MAP_PORT3   */ "Priority table based on DSCP.",
    /* IDB_OBM6_DSCP_MAP_PORT0_PIPE0 */ "Priority table based on DSCP.",
    /* IDB_OBM6_DSCP_MAP_PORT0_PIPE1 */ "Priority table based on DSCP.",
    /* IDB_OBM6_DSCP_MAP_PORT0_PIPE2 */ "Priority table based on DSCP.",
    /* IDB_OBM6_DSCP_MAP_PORT0_PIPE3 */ "Priority table based on DSCP.",
    /* IDB_OBM6_DSCP_MAP_PORT1_PIPE0 */ "Priority table based on DSCP.",
    /* IDB_OBM6_DSCP_MAP_PORT1_PIPE1 */ "Priority table based on DSCP.",
    /* IDB_OBM6_DSCP_MAP_PORT1_PIPE2 */ "Priority table based on DSCP.",
    /* IDB_OBM6_DSCP_MAP_PORT1_PIPE3 */ "Priority table based on DSCP.",
    /* IDB_OBM6_DSCP_MAP_PORT2_PIPE0 */ "Priority table based on DSCP.",
    /* IDB_OBM6_DSCP_MAP_PORT2_PIPE1 */ "Priority table based on DSCP.",
    /* IDB_OBM6_DSCP_MAP_PORT2_PIPE2 */ "Priority table based on DSCP.",
    /* IDB_OBM6_DSCP_MAP_PORT2_PIPE3 */ "Priority table based on DSCP.",
    /* IDB_OBM6_DSCP_MAP_PORT3_PIPE0 */ "Priority table based on DSCP.",
    /* IDB_OBM6_DSCP_MAP_PORT3_PIPE1 */ "Priority table based on DSCP.",
    /* IDB_OBM6_DSCP_MAP_PORT3_PIPE2 */ "Priority table based on DSCP.",
    /* IDB_OBM6_DSCP_MAP_PORT3_PIPE3 */ "Priority table based on DSCP.",
    /* IDB_OBM6_ETAG_MAP_PORT0   */ "Priority table based on ETAG PCP.",
    /* IDB_OBM6_ETAG_MAP_PORT1   */ "Priority table based on ETAG PCP.",
    /* IDB_OBM6_ETAG_MAP_PORT2   */ "Priority table based on ETAG PCP.",
    /* IDB_OBM6_ETAG_MAP_PORT3   */ "Priority table based on ETAG PCP.",
    /* IDB_OBM6_ETAG_MAP_PORT0_PIPE0 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM6_ETAG_MAP_PORT0_PIPE1 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM6_ETAG_MAP_PORT0_PIPE2 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM6_ETAG_MAP_PORT0_PIPE3 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM6_ETAG_MAP_PORT1_PIPE0 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM6_ETAG_MAP_PORT1_PIPE1 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM6_ETAG_MAP_PORT1_PIPE2 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM6_ETAG_MAP_PORT1_PIPE3 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM6_ETAG_MAP_PORT2_PIPE0 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM6_ETAG_MAP_PORT2_PIPE1 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM6_ETAG_MAP_PORT2_PIPE2 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM6_ETAG_MAP_PORT2_PIPE3 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM6_ETAG_MAP_PORT3_PIPE0 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM6_ETAG_MAP_PORT3_PIPE1 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM6_ETAG_MAP_PORT3_PIPE2 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM6_ETAG_MAP_PORT3_PIPE3 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM6_PRI_MAP_PORT0    */ "Priority table based on PCP or TC.",
    /* IDB_OBM6_PRI_MAP_PORT1    */ "Priority table based on PCP or TC.",
    /* IDB_OBM6_PRI_MAP_PORT2    */ "Priority table based on PCP or TC.",
    /* IDB_OBM6_PRI_MAP_PORT3    */ "Priority table based on PCP or TC.",
    /* IDB_OBM6_PRI_MAP_PORT0_PIPE0 */ "Priority table based on PCP or TC.",
    /* IDB_OBM6_PRI_MAP_PORT0_PIPE1 */ "Priority table based on PCP or TC.",
    /* IDB_OBM6_PRI_MAP_PORT0_PIPE2 */ "Priority table based on PCP or TC.",
    /* IDB_OBM6_PRI_MAP_PORT0_PIPE3 */ "Priority table based on PCP or TC.",
    /* IDB_OBM6_PRI_MAP_PORT1_PIPE0 */ "Priority table based on PCP or TC.",
    /* IDB_OBM6_PRI_MAP_PORT1_PIPE1 */ "Priority table based on PCP or TC.",
    /* IDB_OBM6_PRI_MAP_PORT1_PIPE2 */ "Priority table based on PCP or TC.",
    /* IDB_OBM6_PRI_MAP_PORT1_PIPE3 */ "Priority table based on PCP or TC.",
    /* IDB_OBM6_PRI_MAP_PORT2_PIPE0 */ "Priority table based on PCP or TC.",
    /* IDB_OBM6_PRI_MAP_PORT2_PIPE1 */ "Priority table based on PCP or TC.",
    /* IDB_OBM6_PRI_MAP_PORT2_PIPE2 */ "Priority table based on PCP or TC.",
    /* IDB_OBM6_PRI_MAP_PORT2_PIPE3 */ "Priority table based on PCP or TC.",
    /* IDB_OBM6_PRI_MAP_PORT3_PIPE0 */ "Priority table based on PCP or TC.",
    /* IDB_OBM6_PRI_MAP_PORT3_PIPE1 */ "Priority table based on PCP or TC.",
    /* IDB_OBM6_PRI_MAP_PORT3_PIPE2 */ "Priority table based on PCP or TC.",
    /* IDB_OBM6_PRI_MAP_PORT3_PIPE3 */ "Priority table based on PCP or TC.",
    /* IDB_OBM7_DSCP_MAP_PORT0   */ "Priority table based on DSCP.",
    /* IDB_OBM7_DSCP_MAP_PORT1   */ "Priority table based on DSCP.",
    /* IDB_OBM7_DSCP_MAP_PORT2   */ "Priority table based on DSCP.",
    /* IDB_OBM7_DSCP_MAP_PORT3   */ "Priority table based on DSCP.",
    /* IDB_OBM7_DSCP_MAP_PORT0_PIPE0 */ "Priority table based on DSCP.",
    /* IDB_OBM7_DSCP_MAP_PORT0_PIPE1 */ "Priority table based on DSCP.",
    /* IDB_OBM7_DSCP_MAP_PORT0_PIPE2 */ "Priority table based on DSCP.",
    /* IDB_OBM7_DSCP_MAP_PORT0_PIPE3 */ "Priority table based on DSCP.",
    /* IDB_OBM7_DSCP_MAP_PORT1_PIPE0 */ "Priority table based on DSCP.",
    /* IDB_OBM7_DSCP_MAP_PORT1_PIPE1 */ "Priority table based on DSCP.",
    /* IDB_OBM7_DSCP_MAP_PORT1_PIPE2 */ "Priority table based on DSCP.",
    /* IDB_OBM7_DSCP_MAP_PORT1_PIPE3 */ "Priority table based on DSCP.",
    /* IDB_OBM7_DSCP_MAP_PORT2_PIPE0 */ "Priority table based on DSCP.",
    /* IDB_OBM7_DSCP_MAP_PORT2_PIPE1 */ "Priority table based on DSCP.",
    /* IDB_OBM7_DSCP_MAP_PORT2_PIPE2 */ "Priority table based on DSCP.",
    /* IDB_OBM7_DSCP_MAP_PORT2_PIPE3 */ "Priority table based on DSCP.",
    /* IDB_OBM7_DSCP_MAP_PORT3_PIPE0 */ "Priority table based on DSCP.",
    /* IDB_OBM7_DSCP_MAP_PORT3_PIPE1 */ "Priority table based on DSCP.",
    /* IDB_OBM7_DSCP_MAP_PORT3_PIPE2 */ "Priority table based on DSCP.",
    /* IDB_OBM7_DSCP_MAP_PORT3_PIPE3 */ "Priority table based on DSCP.",
    /* IDB_OBM7_ETAG_MAP_PORT0   */ "Priority table based on ETAG PCP.",
    /* IDB_OBM7_ETAG_MAP_PORT1   */ "Priority table based on ETAG PCP.",
    /* IDB_OBM7_ETAG_MAP_PORT2   */ "Priority table based on ETAG PCP.",
    /* IDB_OBM7_ETAG_MAP_PORT3   */ "Priority table based on ETAG PCP.",
    /* IDB_OBM7_ETAG_MAP_PORT0_PIPE0 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM7_ETAG_MAP_PORT0_PIPE1 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM7_ETAG_MAP_PORT0_PIPE2 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM7_ETAG_MAP_PORT0_PIPE3 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM7_ETAG_MAP_PORT1_PIPE0 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM7_ETAG_MAP_PORT1_PIPE1 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM7_ETAG_MAP_PORT1_PIPE2 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM7_ETAG_MAP_PORT1_PIPE3 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM7_ETAG_MAP_PORT2_PIPE0 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM7_ETAG_MAP_PORT2_PIPE1 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM7_ETAG_MAP_PORT2_PIPE2 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM7_ETAG_MAP_PORT2_PIPE3 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM7_ETAG_MAP_PORT3_PIPE0 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM7_ETAG_MAP_PORT3_PIPE1 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM7_ETAG_MAP_PORT3_PIPE2 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM7_ETAG_MAP_PORT3_PIPE3 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM7_PRI_MAP_PORT0    */ "Priority table based on PCP or TC.",
    /* IDB_OBM7_PRI_MAP_PORT1    */ "Priority table based on PCP or TC.",
    /* IDB_OBM7_PRI_MAP_PORT2    */ "Priority table based on PCP or TC.",
    /* IDB_OBM7_PRI_MAP_PORT3    */ "Priority table based on PCP or TC.",
    /* IDB_OBM7_PRI_MAP_PORT0_PIPE0 */ "Priority table based on PCP or TC.",
    /* IDB_OBM7_PRI_MAP_PORT0_PIPE1 */ "Priority table based on PCP or TC.",
    /* IDB_OBM7_PRI_MAP_PORT0_PIPE2 */ "Priority table based on PCP or TC.",
    /* IDB_OBM7_PRI_MAP_PORT0_PIPE3 */ "Priority table based on PCP or TC.",
    /* IDB_OBM7_PRI_MAP_PORT1_PIPE0 */ "Priority table based on PCP or TC.",
    /* IDB_OBM7_PRI_MAP_PORT1_PIPE1 */ "Priority table based on PCP or TC.",
    /* IDB_OBM7_PRI_MAP_PORT1_PIPE2 */ "Priority table based on PCP or TC.",
    /* IDB_OBM7_PRI_MAP_PORT1_PIPE3 */ "Priority table based on PCP or TC.",
    /* IDB_OBM7_PRI_MAP_PORT2_PIPE0 */ "Priority table based on PCP or TC.",
    /* IDB_OBM7_PRI_MAP_PORT2_PIPE1 */ "Priority table based on PCP or TC.",
    /* IDB_OBM7_PRI_MAP_PORT2_PIPE2 */ "Priority table based on PCP or TC.",
    /* IDB_OBM7_PRI_MAP_PORT2_PIPE3 */ "Priority table based on PCP or TC.",
    /* IDB_OBM7_PRI_MAP_PORT3_PIPE0 */ "Priority table based on PCP or TC.",
    /* IDB_OBM7_PRI_MAP_PORT3_PIPE1 */ "Priority table based on PCP or TC.",
    /* IDB_OBM7_PRI_MAP_PORT3_PIPE2 */ "Priority table based on PCP or TC.",
    /* IDB_OBM7_PRI_MAP_PORT3_PIPE3 */ "Priority table based on PCP or TC.",
    /* IDB_OBM8_DSCP_MAP_PORT0   */ "Priority table based on DSCP.",
    /* IDB_OBM8_DSCP_MAP_PORT1   */ "Priority table based on DSCP.",
    /* IDB_OBM8_DSCP_MAP_PORT2   */ "Priority table based on DSCP.",
    /* IDB_OBM8_DSCP_MAP_PORT3   */ "Priority table based on DSCP.",
    /* IDB_OBM8_DSCP_MAP_PORT0_PIPE0 */ "Priority table based on DSCP.",
    /* IDB_OBM8_DSCP_MAP_PORT0_PIPE1 */ "Priority table based on DSCP.",
    /* IDB_OBM8_DSCP_MAP_PORT0_PIPE2 */ "Priority table based on DSCP.",
    /* IDB_OBM8_DSCP_MAP_PORT0_PIPE3 */ "Priority table based on DSCP.",
    /* IDB_OBM8_DSCP_MAP_PORT1_PIPE0 */ "Priority table based on DSCP.",
    /* IDB_OBM8_DSCP_MAP_PORT1_PIPE1 */ "Priority table based on DSCP.",
    /* IDB_OBM8_DSCP_MAP_PORT1_PIPE2 */ "Priority table based on DSCP.",
    /* IDB_OBM8_DSCP_MAP_PORT1_PIPE3 */ "Priority table based on DSCP.",
    /* IDB_OBM8_DSCP_MAP_PORT2_PIPE0 */ "Priority table based on DSCP.",
    /* IDB_OBM8_DSCP_MAP_PORT2_PIPE1 */ "Priority table based on DSCP.",
    /* IDB_OBM8_DSCP_MAP_PORT2_PIPE2 */ "Priority table based on DSCP.",
    /* IDB_OBM8_DSCP_MAP_PORT2_PIPE3 */ "Priority table based on DSCP.",
    /* IDB_OBM8_DSCP_MAP_PORT3_PIPE0 */ "Priority table based on DSCP.",
    /* IDB_OBM8_DSCP_MAP_PORT3_PIPE1 */ "Priority table based on DSCP.",
    /* IDB_OBM8_DSCP_MAP_PORT3_PIPE2 */ "Priority table based on DSCP.",
    /* IDB_OBM8_DSCP_MAP_PORT3_PIPE3 */ "Priority table based on DSCP.",
    /* IDB_OBM8_ETAG_MAP_PORT0   */ "Priority table based on ETAG PCP.",
    /* IDB_OBM8_ETAG_MAP_PORT1   */ "Priority table based on ETAG PCP.",
    /* IDB_OBM8_ETAG_MAP_PORT2   */ "Priority table based on ETAG PCP.",
    /* IDB_OBM8_ETAG_MAP_PORT3   */ "Priority table based on ETAG PCP.",
    /* IDB_OBM8_ETAG_MAP_PORT0_PIPE0 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM8_ETAG_MAP_PORT0_PIPE1 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM8_ETAG_MAP_PORT0_PIPE2 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM8_ETAG_MAP_PORT0_PIPE3 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM8_ETAG_MAP_PORT1_PIPE0 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM8_ETAG_MAP_PORT1_PIPE1 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM8_ETAG_MAP_PORT1_PIPE2 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM8_ETAG_MAP_PORT1_PIPE3 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM8_ETAG_MAP_PORT2_PIPE0 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM8_ETAG_MAP_PORT2_PIPE1 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM8_ETAG_MAP_PORT2_PIPE2 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM8_ETAG_MAP_PORT2_PIPE3 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM8_ETAG_MAP_PORT3_PIPE0 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM8_ETAG_MAP_PORT3_PIPE1 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM8_ETAG_MAP_PORT3_PIPE2 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM8_ETAG_MAP_PORT3_PIPE3 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM8_PRI_MAP_PORT0    */ "Priority table based on PCP or TC.",
    /* IDB_OBM8_PRI_MAP_PORT1    */ "Priority table based on PCP or TC.",
    /* IDB_OBM8_PRI_MAP_PORT2    */ "Priority table based on PCP or TC.",
    /* IDB_OBM8_PRI_MAP_PORT3    */ "Priority table based on PCP or TC.",
    /* IDB_OBM8_PRI_MAP_PORT0_PIPE0 */ "Priority table based on PCP or TC.",
    /* IDB_OBM8_PRI_MAP_PORT0_PIPE1 */ "Priority table based on PCP or TC.",
    /* IDB_OBM8_PRI_MAP_PORT0_PIPE2 */ "Priority table based on PCP or TC.",
    /* IDB_OBM8_PRI_MAP_PORT0_PIPE3 */ "Priority table based on PCP or TC.",
    /* IDB_OBM8_PRI_MAP_PORT1_PIPE0 */ "Priority table based on PCP or TC.",
    /* IDB_OBM8_PRI_MAP_PORT1_PIPE1 */ "Priority table based on PCP or TC.",
    /* IDB_OBM8_PRI_MAP_PORT1_PIPE2 */ "Priority table based on PCP or TC.",
    /* IDB_OBM8_PRI_MAP_PORT1_PIPE3 */ "Priority table based on PCP or TC.",
    /* IDB_OBM8_PRI_MAP_PORT2_PIPE0 */ "Priority table based on PCP or TC.",
    /* IDB_OBM8_PRI_MAP_PORT2_PIPE1 */ "Priority table based on PCP or TC.",
    /* IDB_OBM8_PRI_MAP_PORT2_PIPE2 */ "Priority table based on PCP or TC.",
    /* IDB_OBM8_PRI_MAP_PORT2_PIPE3 */ "Priority table based on PCP or TC.",
    /* IDB_OBM8_PRI_MAP_PORT3_PIPE0 */ "Priority table based on PCP or TC.",
    /* IDB_OBM8_PRI_MAP_PORT3_PIPE1 */ "Priority table based on PCP or TC.",
    /* IDB_OBM8_PRI_MAP_PORT3_PIPE2 */ "Priority table based on PCP or TC.",
    /* IDB_OBM8_PRI_MAP_PORT3_PIPE3 */ "Priority table based on PCP or TC.",
    /* IDB_OBM9_DSCP_MAP_PORT0   */ "Priority table based on DSCP.",
    /* IDB_OBM9_DSCP_MAP_PORT1   */ "Priority table based on DSCP.",
    /* IDB_OBM9_DSCP_MAP_PORT2   */ "Priority table based on DSCP.",
    /* IDB_OBM9_DSCP_MAP_PORT3   */ "Priority table based on DSCP.",
    /* IDB_OBM9_DSCP_MAP_PORT0_PIPE0 */ "Priority table based on DSCP.",
    /* IDB_OBM9_DSCP_MAP_PORT0_PIPE1 */ "Priority table based on DSCP.",
    /* IDB_OBM9_DSCP_MAP_PORT0_PIPE2 */ "Priority table based on DSCP.",
    /* IDB_OBM9_DSCP_MAP_PORT0_PIPE3 */ "Priority table based on DSCP.",
    /* IDB_OBM9_DSCP_MAP_PORT1_PIPE0 */ "Priority table based on DSCP.",
    /* IDB_OBM9_DSCP_MAP_PORT1_PIPE1 */ "Priority table based on DSCP.",
    /* IDB_OBM9_DSCP_MAP_PORT1_PIPE2 */ "Priority table based on DSCP.",
    /* IDB_OBM9_DSCP_MAP_PORT1_PIPE3 */ "Priority table based on DSCP.",
    /* IDB_OBM9_DSCP_MAP_PORT2_PIPE0 */ "Priority table based on DSCP.",
    /* IDB_OBM9_DSCP_MAP_PORT2_PIPE1 */ "Priority table based on DSCP.",
    /* IDB_OBM9_DSCP_MAP_PORT2_PIPE2 */ "Priority table based on DSCP.",
    /* IDB_OBM9_DSCP_MAP_PORT2_PIPE3 */ "Priority table based on DSCP.",
    /* IDB_OBM9_DSCP_MAP_PORT3_PIPE0 */ "Priority table based on DSCP.",
    /* IDB_OBM9_DSCP_MAP_PORT3_PIPE1 */ "Priority table based on DSCP.",
    /* IDB_OBM9_DSCP_MAP_PORT3_PIPE2 */ "Priority table based on DSCP.",
    /* IDB_OBM9_DSCP_MAP_PORT3_PIPE3 */ "Priority table based on DSCP.",
    /* IDB_OBM9_ETAG_MAP_PORT0   */ "Priority table based on ETAG PCP.",
    /* IDB_OBM9_ETAG_MAP_PORT1   */ "Priority table based on ETAG PCP.",
    /* IDB_OBM9_ETAG_MAP_PORT2   */ "Priority table based on ETAG PCP.",
    /* IDB_OBM9_ETAG_MAP_PORT3   */ "Priority table based on ETAG PCP.",
    /* IDB_OBM9_ETAG_MAP_PORT0_PIPE0 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM9_ETAG_MAP_PORT0_PIPE1 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM9_ETAG_MAP_PORT0_PIPE2 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM9_ETAG_MAP_PORT0_PIPE3 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM9_ETAG_MAP_PORT1_PIPE0 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM9_ETAG_MAP_PORT1_PIPE1 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM9_ETAG_MAP_PORT1_PIPE2 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM9_ETAG_MAP_PORT1_PIPE3 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM9_ETAG_MAP_PORT2_PIPE0 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM9_ETAG_MAP_PORT2_PIPE1 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM9_ETAG_MAP_PORT2_PIPE2 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM9_ETAG_MAP_PORT2_PIPE3 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM9_ETAG_MAP_PORT3_PIPE0 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM9_ETAG_MAP_PORT3_PIPE1 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM9_ETAG_MAP_PORT3_PIPE2 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM9_ETAG_MAP_PORT3_PIPE3 */ "Priority table based on ETAG PCP.",
    /* IDB_OBM9_PRI_MAP_PORT0    */ "Priority table based on PCP or TC.",
    /* IDB_OBM9_PRI_MAP_PORT1    */ "Priority table based on PCP or TC.",
    /* IDB_OBM9_PRI_MAP_PORT2    */ "Priority table based on PCP or TC.",
    /* IDB_OBM9_PRI_MAP_PORT3    */ "Priority table based on PCP or TC.",
    /* IDB_OBM9_PRI_MAP_PORT0_PIPE0 */ "Priority table based on PCP or TC.",
    /* IDB_OBM9_PRI_MAP_PORT0_PIPE1 */ "Priority table based on PCP or TC.",
    /* IDB_OBM9_PRI_MAP_PORT0_PIPE2 */ "Priority table based on PCP or TC.",
    /* IDB_OBM9_PRI_MAP_PORT0_PIPE3 */ "Priority table based on PCP or TC.",
    /* IDB_OBM9_PRI_MAP_PORT1_PIPE0 */ "Priority table based on PCP or TC.",
    /* IDB_OBM9_PRI_MAP_PORT1_PIPE1 */ "Priority table based on PCP or TC.",
    /* IDB_OBM9_PRI_MAP_PORT1_PIPE2 */ "Priority table based on PCP or TC.",
    /* IDB_OBM9_PRI_MAP_PORT1_PIPE3 */ "Priority table based on PCP or TC.",
    /* IDB_OBM9_PRI_MAP_PORT2_PIPE0 */ "Priority table based on PCP or TC.",
    /* IDB_OBM9_PRI_MAP_PORT2_PIPE1 */ "Priority table based on PCP or TC.",
    /* IDB_OBM9_PRI_MAP_PORT2_PIPE2 */ "Priority table based on PCP or TC.",
    /* IDB_OBM9_PRI_MAP_PORT2_PIPE3 */ "Priority table based on PCP or TC.",
    /* IDB_OBM9_PRI_MAP_PORT3_PIPE0 */ "Priority table based on PCP or TC.",
    /* IDB_OBM9_PRI_MAP_PORT3_PIPE1 */ "Priority table based on PCP or TC.",
    /* IDB_OBM9_PRI_MAP_PORT3_PIPE2 */ "Priority table based on PCP or TC.",
    /* IDB_OBM9_PRI_MAP_PORT3_PIPE3 */ "Priority table based on PCP or TC.",
    /* IDP0_DFIFO_0              */ "This database contains the IDP 0 Data FIFO 0.",
    /* IDP0_DFIFO_1              */ "This database contains the IDP 0 Data FIFO 1.",
    /* IDP0_EREQFIFO             */ "This database contains the IDP 0 ENQ REQ FIFO.",
    /* IDP0_ERESPFIFO            */ "This database contains the IDP 0 ENQ RESP FIFO. Please note the fields below are for every 4th word in FIFO - see RB Spec 5.1.4.4",
    /* IDP1_DFIFO_0              */ "This database contains the IDP 0 Data FIFO 0.",
    /* IDP1_DFIFO_1              */ "This database contains the IDP 0 Data FIFO 1.",
    /* IDP1_EREQFIFO             */ "This database contains the IDP 1 ENQ REQ FIFO.",
    /* IDP1_ERESPFIFO            */ "This database contains the IDP 1 ENQ RESP FIFO. Please note the fields below are for every 4th word in FIFO - see RB Spec 5.1.4.4",
    /* IDR_COMPLETE_PC           */ "Complete PC list. Interface is for debug only.",
    /* IDR_CONTEXT_COLOR         */ "Color memory per context",
    /* IDR_CONTEXT_MRU           */ "Maximum reception size for each reassembly context. Access this memory with Reassemblt-context",
    /* IDR_CONTEXT_SIZE          */ "Packet size memory per context",
    /* IDR_COUNTERS              */ "Counters per reassembly context.",
    /* IDR_DRAM_BUFFER_TYPE      */ "Stores the DRAM-buffer-type to be taken (Mini-Multicast buffer or Full-Multicast buffer).\n                   The table is access with:\n                   fwd, snoop, mirror\n                   - fwd (2 bits):\n                       - 0- no fwd\n                       - 1- Unicast or Fabric-Multicast\n                       - 2- Ingress-MC <=8 copies\n                       - 3- Ingress-MC >8 copies\n                   - snoop/mirror (2 bits each):\n                       - 0-no snoop/mirror\n           ...",
    /* IDR_DROP_PRECEDENCE_MAPPING */ "Maps dp-meter-cmd, incoming dp and meter-processor-dp to ingress-DP and egress-DP.\n                   Egress-DP is stamped to the FTMH and ingress-DP is forward to IQM.\n                   key to the table:\n                   dp-meter-cmd, incoming-dp, resolved-dp",
    /* IDR_ETHERNET_METER_CONFIG */ "Access to this table using pointers from PP that calculated according to:\n                    (PP port)*5+packet_type_value.\n\n                   Packet_type_value =\n                   Unknown Unicast = 0x0.\n                   Known Unicast=0x1.\n                   Unknown MC=0x2.\n                   Known MC=0x3.\n                   BC=0x4.\n\n                   Table size is 1300 entries.\n                   PP port value is 0-255, the maximal value can be reached by the calculation is 1280/\n         ...",
    /* IDR_ETHERNET_METER_PROFILES */ "Each entry holds an Ethernet meter profile.\n                   Access to this table is according to profile number selected at Meter Configuration Table.\n                   Table size is 32 entries.\n                   Packets associated with this Meter profile might be marked as Red (drop precedence = 3) if the rate or the burst size exceeds the configured values.\n                   Calculations:\n\n                   BurstSize = (BurstMantissa)*2^BurstExp\n\n                   Rate = (RateMantissa) ...",
    /* IDR_GLOBAL_METER_PROFILES */ "Each entry holds a Global meter profile.\n                   Access to this table is according to profile number selected at Meter Configuration Table.\n                   Table size is 8 entries.\n                   Packets associated with this Meter profile might be marked as Red (drop precedence = 3) if the rate or the burst size exceeds the configured values.\n                   Calculations:\n                   BurstSize = (BurstMantissa)*2^BurstExp\n\n                   Rate = (RateMantissa)*2^Ra ...",
    /* IDR_GLOBAL_METER_STATUS   */ "Stores the global meters status",
    /* IDR_IRDB                  */ "Ingress Replication Database.\n                   For each Multicast ID, this table indicates whether ingress replication is required and whether to use uc buffer for mc packet. If the mc is not ingress mc, the queue resolution is derived from the class field, and the packet is queued to one of the spatial multicast queues.\n                   Each line in the database holds the indication for 16 multicast IDs.",
    /* IDR_IRE_RXI_MEM_DATA      */ "Fifo that holds the data received from IRE.",
    /* IDR_MCDA_DYNAMIC          */ "MRPS - MCD-A - dynamic data\n                   Notes:\n                   - Each entry map 4 meters to profiles which are processed simoultanouisly.\n                   - Table0 for meter indexes 0 - 16k-1, Table1 for meter indexes 16k - 32k-1",
    /* IDR_MCDA_PCUC             */ "Update color memory per context",
    /* IDR_MCDA_PRFCFG_0         */ "MRPS - MCD-A - profile configuration.",
    /* IDR_MCDA_PRFCFG_FORMAT_0  */ "MRPS - MCD-A - profile configuration.\n                   This table define the profile config memory fields when the profile ShraingFlag is set.",
    /* IDR_MCDA_PRFCFG_FORMAT_1  */ "MRPS - MCD-A - profile configuration.\n                   This table define the profile config memory fields when the profile ShraingFlag is reset.",
    /* IDR_MCDA_PRFSEL           */ "MRPS - MCD-A - index to profile mapping.\n                   Notes:\n                   - Each entry map 4 meters to profiles which are processed simoultanouisly.\n                   - Table0 for meter indexes 0 - 16k-1, Table1 for meter indexes 16k - 32k-1",
    /* IDR_MCDB_DYNAMIC          */ "MRPS - MCD-B - dynamic data\n                   Notes:\n                   - Each entry map 4 meters to profiles which are processed simoultanouisly.\n                   - Table0 for meter indexes 0 - 16k-1, Table1 for meter indexes 16k - 32k-1",
    /* IDR_MCDB_PCUC             */ "Update color memory per context",
    /* IDR_MCDB_PRFCFG_0         */ "MRPS - MCD-B - profile configuration.",
    /* IDR_MCDB_PRFSEL           */ "MRPS - MCD-B - index to profile mapping.\n                   Notes:\n                   - Each entry map 4 meters to profiles which are processed simoultanouisly.\n                   - Table0 for meter indexes 0 - 16k-1, Table1 for meter indexes 16k - 32k-1",
    /* IDR_MEM_00000             */ "INTERNAL",
    /* IDR_MEM_10000             */ "INTERNAL",
    /* IDR_MEM_30000             */ "INTERNAL",
    /* IDR_MEM_40000             */ "INTERNAL",
    /* IDR_MEM_50000             */ "INTERNAL",
    /* IDR_MEM_60000             */ "INTERNAL",
    /* IDR_MEM_100000            */ "INTERNAL",
    /* IDR_MEM_110000            */ "INTERNAL",
    /* IDR_MEM_120000            */ "INTERNAL",
    /* IDR_MEM_140000            */ "INTERNAL",
    /* IDR_MEM_180000            */ "INTERNAL",
    /* IDR_MEM_10_INTERNAL       */ "INTERNAL",
    /* IDR_MEM_11_INTERNAL       */ "INTERNAL",
    /* IDR_MEM_12_INTERNAL       */ "INTERNAL",
    /* IDR_MEM_13_INTERNAL       */ "INTERNAL",
    /* IDR_MEM_1B0000            */ "INTERNAL",
    /* IDR_MEM_1F0000            */ "INTERNAL",
    /* IDR_MEM_1_INTERNAL        */ "INTERNAL",
    /* IDR_MEM_2_INTERNAL        */ "INTERNAL",
    /* IDR_MEM_3_INTERNAL        */ "INTERNAL",
    /* IDR_MEM_4_INTERNAL        */ "INTERNAL",
    /* IDR_MEM_5_INTERNAL        */ "INTERNAL",
    /* IDR_MEM_6_INTERNAL        */ "INTERNAL",
    /* IDR_MEM_7_INTERNAL        */ "INTERNAL",
    /* IDR_MEM_8_INTERNAL        */ "INTERNAL",
    /* IDR_MEM_9_INTERNAL        */ "INTERNAL",
    /* IDR_MRPS_0_IN_DP_MAPPING  */ "Maps dp-meter-cmd, incoming dp, Ethernet-meter-dp and Ethernet-meter-invalid to MRPS in-DP and in-Drop.\n                   key to the table:\n                   dp-meter-cmd, incoming-dp, Ethernet-meter-dp, Ethernet-meter-invalid",
    /* IDR_MRPS_1_IN_DP_MAPPING  */ "Maps dp-meter-cmd, incoming dp, Ethernet-meter-dp and Ethernet-meter-invalid to MRPS in-DP and in-Drop.\n                   key to the table:\n                   dp-meter-cmd, incoming-dp, Ethernet-meter-dp, Ethernet-meter-invalid",
    /* IDR_OCB_BUFFER_TYPE       */ "Stores the ocb-buffer-type to be taken (unicast multicast buffer).\n                   The table is access with:\n                   fwd, snoop, mirror, queue-eligiblity, mcid-in-range\n                   fwd (3bits) - 0 - no fwd, 1 - UC, 2 - FMC, 3  Ing-MC 1 copy, 4  Ing-MC n copies\n                   snoop/mirror (2 bits each) - 0 - no snoop/mirror 1 - UC/FMC 2 - Ing-MC\n                   queue-eligibility (1 bit) is set if the queue is eligible\n                   mcid-in-range (1 bits) is set if ...",
    /* IDR_PCD_MAP               */ "MRPS - MCD-B - parallel color decision mapping table (64 entries x 4)\n                   Address (6) to this table is:\n                   - bits 5:4 - MCD-B color decision\n                   - bits 3 - MCD-B other bucket has credits\n                   - bits 2:1 - MCD-A color decision\n                   - bits 0 - MCD-A other bucket has credits\n                   Notes:\n                   - If color decision is yellow -> other bucket is based on the CBL. Otherwise EBL.\n                   - This  ...",
    /* IDR_QUEUE_IS_DRAM_ELIGIBLE */ "Stores1 bit per queue number (96k queues) which indicates if the queue is eligible for DRAM buffer.\n                   The two bits per queue QueueIsDramEligible,QueueIsOcbEligible are encoded as following:\n                   0x3 - Queue is eligible for OCB\n                   0x2 - Queue is eligible for DRAM\n                   0x1 - Queue is dropping DRAM packets colored yellow/red (Partial Drop)\n                   0x0 - Queue is dropping all DRAM packets (Full Drop)",
    /* IDR_QUEUE_IS_OCB_ELIGIBLE */ "Stores1 bit per queue number (96k queues) which indicates if the queue is eligible for OCB buffer.\n                   The two bits per queue QueueIsDramEligible,QueueIsOcbEligible are encoded as following:\n                   0x3 - Queue is eligible for OCB\n                   0x2 - Queue is eligible for DRAM\n                   0x1 - Queue is dropping DRAM packets colored yellow/red (Partial Drop)\n                   0x0 - Queue is dropping all DRAM packets (Full Drop)",
    /* IDR_WORDS                 */ "Word memory.",
    /* IEP_CONTEXT_COLOR         */ "Color memory per context",
    /* IEP_CONTEXT_SIZE_HIGH     */ "Packet size memory per context.\n Higher 138 values\n (total of 330 contexts in Jericho)",
    /* IEP_CONTEXT_SIZE_LOW      */ "Packet size memory per context.\n Lower 192 values",
    /* IEP_MCDA_DYNAMIC          */ "MCD-A - dynamic data\n Notes:\n - Each entry map 4 meters to profiles which are processed simultaneously.\n - Indexes 0 - (1280-1)",
    /* IEP_MCDA_HEADER_APPEND_SIZE_PTR_MAP */ "MCDA - Mapping Header Append Size Ptr (Out LIF Adjust Profile).\n Value = -128, +127\n Notes:\n - Each entry has 4 mappings\n - Indexes 0 - 256-1",
    /* IEP_MCDA_IN_PP_PORT_MAP   */ "MCDA - Mapping In-PP-Port(8) into In-PP-Port-Profile(3)\n Notes:\n - Each entry has 4 mappings\n - Indexes 0 - 256-1",
    /* IEP_MCDA_IN_PP_PORT_MAP_AND_MTR_PRF_MAP */ "MCDA - Mapping In-PP-Port-Profile(6) into In-PP-Port-Size-Delta(8)\n Values = -128, +127\n Notes:\n - Each entry has 4 mappings\n - Indexes 0 - 256-1",
    /* IEP_MCDA_PCUC             */ "MCDA - Update color memory per context.\n Holds the LB (color) that was updated on SOP.",
    /* IEP_MCDA_PRFCFG_0         */ "MCD-A - profile configuration.\n First copy\n Both copies should be initialized the same",
    /* IEP_MCDA_PRFCFG_1         */ "MCD-A - profile configuration.\n Second copy\n Both copies should be initialized the same",
    /* IEP_MCDA_PRFCFG_SHARING_DIS */ "MCD-A - profile configuration.\n This table defines the profile config memory fields when the profile SharingFlag is reset.",
    /* IEP_MCDA_PRFCFG_SHARING_EN */ "MCD-A - profile configuration.\n This table defines the profile config memory fields when the profile SharingFlag is set.",
    /* IEP_MCDA_PRFSEL           */ "MCD-A - index to profile mapping.\n Notes:\n - Each entry map 4 meters to profiles which are processed simultaneously.\n - Indexes 0 - (1280-1)",
    /* IEP_MCDB_DYNAMIC          */ "MCD-B - dynamic data\n Notes:\n - Each entry map 4 meters to profiles which are processed simultaneously.\n - Indexes 0 - (8-1)",
    /* IEP_MCDB_HEADER_APPEND_SIZE_PTR_MAP */ "MCDB - Mapping Header Append Size Ptr (Out LIF Adjust Profile).\n Value = -128, +127\n Notes:\n - Each entry has 4 mappings\n - Indexes 0 - 256-1",
    /* IEP_MCDB_IN_PP_PORT_MAP   */ "MCDB - Mapping In-PP-Port(8) into In-PP-Port-Profile(3)\n Notes:\n - Each entry has 4 mappings\n - Indexes 0 - 256-1",
    /* IEP_MCDB_IN_PP_PORT_MAP_AND_MTR_PRF_MAP */ "MCDB- Mapping In-PP-Port-Profile(6) into In-PP-Port-Size-Delta(8)\n Values = -128, +127\n Notes:\n - Each entry has 4 mappings\n - Indexes 0 - 256-1",
    /* IEP_MCDB_PCUC             */ "MCDB - Update color memory per context.\n Holds the LB (color) that was updated on SOP.",
    /* IEP_MCDB_PRFCFG_0         */ "MCD-B - profile configuration.\n First copy\n Both copies should be initialized the same",
    /* IEP_MCDB_PRFCFG_1         */ "MCD-B - profile configuration.\n Second copy\n Both copies should be initialized the same",
    /* IEP_MCDB_PRFCFG_SHARING_DIS */ "MCD-B - profile configuration.\n This table defines the profile config memory fields when the profile SharingFlag is reset.",
    /* IEP_MCDB_PRFCFG_SHARING_EN */ "MCD-B - profile configuration.\n This table defines the profile config memory fields when the profile SharingFlag is set.",
    /* IEP_MCDB_PRFSEL           */ "MCD-B - index to profile mapping.\n Notes:\n - Each entry map 4 meters to profiles which are processed simultaneously.\n - Indexes 0 - (8-1)",
    /* IEP_PCD_MAP               */ "Parallel color decision mapping table (64 entries x 4)\n Address (6) to this table is:\n On Dual mode:\n - bits 5:4 - MCD-B color decision\n - bits 3 - MCD-B other bucket has credits\n - bits 2:1 - MCD-A color decision\n - bits 0 - MCD-A other bucket has credits\n Notes:\n - If color decision is yellow -> other bucket is based on the CBL. Otherwise EBL.\n - This table is used in all configurations (parallel / serial) except for when both ptrs are invalid (=bypass)",
    /* IFP_COS_MAP               */ "index by IFP__PROFILE_IDX(from IFP policy table), INT_PRI",
    /* IFP_HG_CLASSID_SELECT     */ "Controls classid selection into HG header.",
    /* IFP_I2E_CLASSID_SELECT    */ "Selects one classid from IP tables to be passed to EP.",
    /* IFP_KEY_GEN_PROGRAM_PROFILE */ "Key Generator Profile Table that provides instructions for Key Generation",
    /* IFP_KEY_GEN_PROGRAM_PROFILE2 */ "Key Generator Profile Table that provides post muxing instructions for Key Generation.",
    /* IFP_KEY_GEN_PROGRAM_PROFILE2_PIPE0 */ "Key Generator Profile Table that provides post muxing instructions for Key Generation.",
    /* IFP_KEY_GEN_PROGRAM_PROFILE2_PIPE1 */ "Key Generator Profile Table that provides post muxing instructions for Key Generation.",
    /* IFP_KEY_GEN_PROGRAM_PROFILE2_PIPE2 */ "Key Generator Profile Table that provides post muxing instructions for Key Generation.",
    /* IFP_KEY_GEN_PROGRAM_PROFILE2_PIPE3 */ "Key Generator Profile Table that provides post muxing instructions for Key Generation.",
    /* IFP_KEY_GEN_PROGRAM_PROFILE_PIPE0 */ "Key Generator Profile Table that provides instructions for Key Generation",
    /* IFP_KEY_GEN_PROGRAM_PROFILE_PIPE1 */ "Key Generator Profile Table that provides instructions for Key Generation",
    /* IFP_KEY_GEN_PROGRAM_PROFILE_PIPE2 */ "Key Generator Profile Table that provides instructions for Key Generation",
    /* IFP_KEY_GEN_PROGRAM_PROFILE_PIPE3 */ "Key Generator Profile Table that provides instructions for Key Generation",
    /* IFP_LOGICAL_TABLE_ACTION_PRIORITY */ "Action Priority associated with each logical table.",
    /* IFP_LOGICAL_TABLE_ACTION_PRIORITY_PIPE0 */ "Action Priority associated with each logical table.",
    /* IFP_LOGICAL_TABLE_ACTION_PRIORITY_PIPE1 */ "Action Priority associated with each logical table.",
    /* IFP_LOGICAL_TABLE_ACTION_PRIORITY_PIPE2 */ "Action Priority associated with each logical table.",
    /* IFP_LOGICAL_TABLE_ACTION_PRIORITY_PIPE3 */ "Action Priority associated with each logical table.",
    /* IFP_LOGICAL_TABLE_SELECT  */ "TCAM used to select the Key Generation Profile for the 12 IFP lookups.32 entries are used per slice. It is legal to program only entries 0 to 383 in this TCAM.",
    /* IFP_LOGICAL_TABLE_SELECT_DATA_ONLY */ "Data ONLY view of IFP_LOGICAL_TABLE_SELECT",
    /* IFP_LOGICAL_TABLE_SELECT_DATA_ONLY_PIPE0 */ "Data ONLY view of IFP_LOGICAL_TABLE_SELECT",
    /* IFP_LOGICAL_TABLE_SELECT_DATA_ONLY_PIPE1 */ "Data ONLY view of IFP_LOGICAL_TABLE_SELECT",
    /* IFP_LOGICAL_TABLE_SELECT_DATA_ONLY_PIPE2 */ "Data ONLY view of IFP_LOGICAL_TABLE_SELECT",
    /* IFP_LOGICAL_TABLE_SELECT_DATA_ONLY_PIPE3 */ "Data ONLY view of IFP_LOGICAL_TABLE_SELECT",
    /* IFP_LOGICAL_TABLE_SELECT_PIPE0 */ "TCAM used to select the Key Generation Profile for the 12 IFP lookups.32 entries are used per slice. It is legal to program only entries 0 to 383 in this TCAM.",
    /* IFP_LOGICAL_TABLE_SELECT_PIPE1 */ "TCAM used to select the Key Generation Profile for the 12 IFP lookups.32 entries are used per slice. It is legal to program only entries 0 to 383 in this TCAM.",
    /* IFP_LOGICAL_TABLE_SELECT_PIPE2 */ "TCAM used to select the Key Generation Profile for the 12 IFP lookups.32 entries are used per slice. It is legal to program only entries 0 to 383 in this TCAM.",
    /* IFP_LOGICAL_TABLE_SELECT_PIPE3 */ "TCAM used to select the Key Generation Profile for the 12 IFP lookups.32 entries are used per slice. It is legal to program only entries 0 to 383 in this TCAM.",
    /* IFP_LOGICAL_TABLE_SELECT_TCAM_ONLY */ "TCAM used to select the Key Generation Profile for the 12 IFP lookups.",
    /* IFP_LOGICAL_TABLE_SELECT_TCAM_ONLY_PIPE0 */ "TCAM used to select the Key Generation Profile for the 12 IFP lookups.",
    /* IFP_LOGICAL_TABLE_SELECT_TCAM_ONLY_PIPE1 */ "TCAM used to select the Key Generation Profile for the 12 IFP lookups.",
    /* IFP_LOGICAL_TABLE_SELECT_TCAM_ONLY_PIPE2 */ "TCAM used to select the Key Generation Profile for the 12 IFP lookups.",
    /* IFP_LOGICAL_TABLE_SELECT_TCAM_ONLY_PIPE3 */ "TCAM used to select the Key Generation Profile for the 12 IFP lookups.",
    /* IFP_METER_TABLE           */ "METER TABLE STRUCTURES FOR THE FP.",
    /* IFP_METER_TABLE_PIPE0     */ "METER TABLE STRUCTURES FOR THE FP.",
    /* IFP_METER_TABLE_PIPE1     */ "METER TABLE STRUCTURES FOR THE FP.",
    /* IFP_METER_TABLE_PIPE2     */ "METER TABLE STRUCTURES FOR THE FP.",
    /* IFP_METER_TABLE_PIPE3     */ "METER TABLE STRUCTURES FOR THE FP.",
    /* IFP_POLICY_TABLE          */ "POLICY TABLE FOR DETERMINING ACTION_SETS IN THE IFP.",
    /* IFP_POLICY_TABLE_PIPE0    */ "POLICY TABLE FOR DETERMINING ACTION_SETS IN THE IFP.",
    /* IFP_POLICY_TABLE_PIPE1    */ "POLICY TABLE FOR DETERMINING ACTION_SETS IN THE IFP.",
    /* IFP_POLICY_TABLE_PIPE2    */ "POLICY TABLE FOR DETERMINING ACTION_SETS IN THE IFP.",
    /* IFP_POLICY_TABLE_PIPE3    */ "POLICY TABLE FOR DETERMINING ACTION_SETS IN THE IFP.",
    /* IFP_PORT_FIELD_SEL        */ "FIELD SELECT VALUE FOR EACH SLICE IN THE FP",
    /* IFP_PORT_METER_MAP        */ "Per port meter enabled setting.",
    /* IFP_RANGE_CHECK           */ "RANGE CHECK VALUES FOR Fields used as a part of the FP key.",
    /* IFP_RANGE_CHECK_PIPE0     */ "RANGE CHECK VALUES FOR Fields used as a part of the FP key.",
    /* IFP_RANGE_CHECK_PIPE1     */ "RANGE CHECK VALUES FOR Fields used as a part of the FP key.",
    /* IFP_RANGE_CHECK_PIPE2     */ "RANGE CHECK VALUES FOR Fields used as a part of the FP key.",
    /* IFP_RANGE_CHECK_PIPE3     */ "RANGE CHECK VALUES FOR Fields used as a part of the FP key.",
    /* IFP_REDIRECTION_PROFILE   */ "Contains the number of members in each ECMP group.  Used with ECMP_POINTER to calulate index to L3_ECMP table",
    /* IFP_STORM_CONTROL_METERS  */ "STORM CONTROL METER TABLE STRUCTURES FOR THE FP.",
    /* IFP_TCAM                  */ "TCAM FOR FP in the Narrow mode.",
    /* IFP_TCAM_PIPE0            */ "TCAM FOR FP in the Narrow mode.",
    /* IFP_TCAM_PIPE1            */ "TCAM FOR FP in the Narrow mode.",
    /* IFP_TCAM_PIPE2            */ "TCAM FOR FP in the Narrow mode.",
    /* IFP_TCAM_PIPE3            */ "TCAM FOR FP in the Narrow mode.",
    /* IFP_TCAM_WIDE             */ "IFP TCAM in the 160b Search Mode.",
    /* IFP_TCAM_WIDE_PIPE0       */ "IFP TCAM in the 160b Search Mode.",
    /* IFP_TCAM_WIDE_PIPE1       */ "IFP TCAM in the 160b Search Mode.",
    /* IFP_TCAM_WIDE_PIPE2       */ "IFP TCAM in the 160b Search Mode.",
    /* IFP_TCAM_WIDE_PIPE3       */ "IFP TCAM in the 160b Search Mode.",
    /* IHB_COE_CHANNEL_ID        */ "CoE Map PTC,VID to channel-id",
    /* IHB_CONSISTENT_HASHING_PROGRAM_SEL_TCAM */ "TCAM table for consistent hashing program selection. The following configurations also represent the key to search. If no rules match, program 0 will be selected as the default.",
    /* IHB_CONSISTENT_HASHING_PROGRAM_VARIABLES */ "this memory gather several valirables per consistent hashing program",
    /* IHB_CPU_TRAP_CODE_CTR     */ "This table maps CPU trap code to a corresponding. The table has 256 entries, with the index being the CPU trap code, and the entrys value being its counters value.",
    /* IHB_DBG_LAST_FEM          */ "Holds for each FEM the last inputs and outputs",
    /* IHB_DBG_LAST_FES          */ "Holds for each FES the last inputs and outputs",
    /* IHB_DESTINATION_STATUS    */ "This table holds a valid bit for eachsystem-port.",
    /* IHB_DSCP_EXP_MAP          */ "This table is used to define a DSCP-EXP field based on routing protocol, terminated protocol and terminated DSCP-EXP. The table has 3K entries, with the index being Routing-Protocol, Terminated-Protocol , Terminted-DSCP-EXP. The routing protocol is encoded as follows:\n                   0x0  IPv4\n                   0x1  IPv6\n                   0x2  MPLS\n                   Each entry contains a new temporary DSCP-EXP value.",
    /* IHB_DSCP_EXP_REMARK       */ "This table is used to define a DSCP-EXP Remark field based on routing protocol, DSCP-EXP value before remark and CoS profile. The table has 8K entries, with the index being Routing-Protocol, In-DSCP-EXP-Before-Remark, CoS-Profile3:0. The routing protocol is encoded as follows:\n                   0x0  IPv4\n                   0x1  IPv6\n                   0x2  MPLS\n                   Each entry contains a new DSCP-EXP Remark value.",
    /* IHB_ELK_PAYLOAD_FORMAT    */ "per FLP program, sets ELK result payload format",
    /* IHB_ETHERNET_OAM_OPCODE_MAP */ "This table maps Y1731-Header opcode to an OAM opcode and offset configuration. The table has 256 entries, with the index being Y1731-Headers 8-bit Opcode. The value in each entry includes an 4-bit OAM opcode and an OAM offset, used to indicate OAM stamp location in the header.",
    /* IHB_FEC_ECMP              */ "The FEC ECMP table contains ECMP information for the first 1K FECs.  The table has 1K entries, with the index being the FEC pointer. Each entry has information on the corresponding FEC.",
    /* IHB_FEC_ECMP_IS_STATEFUL  */ "The FEC ECMP is stateful table contains  information for the first 1K FECs.  This table has 256 entries and 4 bits per entry. Each bit is correspanding to an FEC ECMP.",
    /* IHB_FEC_ENTRY             */ "The FEC entry table is accessed with a FEC pointer. The table has 16K entries, and it is divided to two identical tables, for FEC Entry0 and Entry1. The entry format is dependent on the application. The following registers (from FEC Entry General to FEC Entry Format C) describe the table format per application.",
    /* IHB_FEC_ENTRY_ACCESSED    */ "This table maps a FEC entry to a Flag indicating if the entry was accessed. The table has 16K entries for FEC Entry 0 and 16K entries for FEC Entry 1. The index to the table is the FEC entry number, with every eight entries being stored in a single register line, meaning the register address is set by FEC number 13:3 and entry number in the register by FEC number 2:0. Each entry indicates if the entry was accessed and its content was used for forwarding the packet.",
    /* IHB_FEC_ENTRY_FORMAT_A    */ "FEC entry tables Format A entry values, for the table described in FEC Entry register.\n                   This is a description of the fields used for unicast routing (IP or MPLS) into a link layer interface. In this scenario:\n                    Out-LIF = 4'h0, OutLif\n                    EEI = ARP-Ptr-Prefix, ArpPtr\n                    Expected-In-RIF = OutLif11:0",
    /* IHB_FEC_ENTRY_FORMAT_B    */ "FEC entry tables Format B entry values, for the table described in FEC Entry register.\n                   Format B is used when the link layer interface is a composite object (in a composite object the Out-LIF points to an entry in the EEDB of type Out-RIF; which points in turn to a link layer entry) or when routing into a tunnel. This is a description of the fields used for Format B. In this scenario:\n                    Out-Lif = OutLif\n                    EEI = NULL\n                    Expect ...",
    /* IHB_FEC_ENTRY_FORMAT_C    */ "FEC entry tables Format C entry values, for the table described in FEC Entry register.\n                   This is a description of the fields used for bridging into a TRILL tunnel. In this scenario:\n                    Out-Lif = NULL\n                    EEI = Eei\n                    Expected-In-RIF = NULL",
    /* IHB_FEC_ENTRY_FORMAT_NULL */ "FEC entry tables NULL entry values, for the table described in FEC Entry register.\n                   This is a description of the fields  of a NULL entry. In this scenario:\n                    Out-LIF = NULL\n                    EEI = NULL\n                    Expected-In-RIF = NULL",
    /* IHB_FEC_ENTRY_GENERAL     */ "FEC entry tables general entry values, for the table described in FEC Entry register.\n                   This is a description of the general fields that are commong to all FEC entry formats.",
    /* IHB_FEC_PATH_SELECT       */ "This table maps a FEC entry to a protection path selection. The table has 64K . The index to the table is the FEC entry number, with every eight entries being stored in a single register line, meaning the register address is set by FEC number 16:4 and entry number in the register by FEC number 3:1. Each entry indicates if an odd or even protection path should be taken (in case of protection)",
    /* IHB_FEC_RPF_ECMP          */ "The FEC ECMP table contains ECMP RPF information for the first 4K FECs.  The table has 4K entries, with the index being the RPF FEC pointer. Each entry has information on the corresponding FEC.",
    /* IHB_FEC_SUPER_ENTRY       */ "The FEC super entry table maps FEC pointer to protection pointer.  The table has 8K entries, with the index being the FEC pointer13:1. Each entry holds a pointer to the protection path.",
    /* IHB_FEM_0_4B_MAP_TABLE    */ "This table defines the action type and how to build the action.\n                   Table Address: MapIndex",
    /* IHB_FEM_10_16B_MAP_TABLE  */ "Same as Fem2_16bMapTable",
    /* IHB_FEM_10_19B_MAP_TABLE  */ "Same as Fem2_16bMapTable",
    /* IHB_FEM_11_16B_MAP_TABLE  */ "Same as Fem2_16bMapTable",
    /* IHB_FEM_11_19B_MAP_TABLE  */ "Same as Fem2_16bMapTable",
    /* IHB_FEM_12_16B_MAP_TABLE  */ "Same as Fem2_16bMapTable",
    /* IHB_FEM_12_19B_MAP_TABLE  */ "Same as Fem2_16bMapTable",
    /* IHB_FEM_13_19B_MAP_TABLE  */ "Same as Fem5_19bMapTable",
    /* IHB_FEM_14_19B_MAP_TABLE  */ "Same as Fem5_19bMapTable",
    /* IHB_FEM_14_24B_MAP_TABLE  */ "Same as Fem5_19bMapTable",
    /* IHB_FEM_15_19B_MAP_TABLE  */ "Same as Fem5_19bMapTable",
    /* IHB_FEM_15_24B_MAP_TABLE  */ "Same as Fem5_19bMapTable",
    /* IHB_FEM_1_4B_MAP_TABLE    */ "Same as Fem0MapTable",
    /* IHB_FEM_2_16B_MAP_TABLE   */ "For details, see Fem0_4bMapTable.",
    /* IHB_FEM_2_19B_MAP_TABLE   */ "For details, see Fem0_4bMapTable.",
    /* IHB_FEM_3_16B_MAP_TABLE   */ "Same as Fem2_16bMapTable",
    /* IHB_FEM_3_19B_MAP_TABLE   */ "Same as Fem2_16bMapTable",
    /* IHB_FEM_4_16B_MAP_TABLE   */ "Same as Fem2_16bMapTable",
    /* IHB_FEM_4_19B_MAP_TABLE   */ "Same as Fem2_16bMapTable",
    /* IHB_FEM_5_19B_MAP_TABLE   */ "For details, see Fem0_4bMapTable.",
    /* IHB_FEM_6_19B_MAP_TABLE   */ "Same as Fem5_19bMapTable",
    /* IHB_FEM_6_24B_MAP_TABLE   */ "Same as Fem5_19bMapTable",
    /* IHB_FEM_7_19B_MAP_TABLE   */ "Same as Fem5_19bMapTable",
    /* IHB_FEM_7_24B_MAP_TABLE   */ "Same as Fem5_19bMapTable",
    /* IHB_FEM_8_4B_MAP_TABLE    */ "Same as Fem0_4bMapTable",
    /* IHB_FEM_9_4B_MAP_TABLE    */ "Same as Fem0_4bMapTable",
    /* IHB_FEM_BIT_SELECT        */ "This table holds the 4bits to be taken from the key, which are used to address MapIndexTable.\n                   Table Address: According to the FEM-Program",
    /* IHB_FEM_MAP_INDEX_TABLE   */ "This table holds the FEM's Map-Data and Map-Index, which are used as an address to the Fem0..15MapTable.\n                   Table Address: FEM-Program(2b), Key-Selected-Bits(4b)",
    /* IHB_FERA_FIFO             */ "FFC instructions and enable",
    /* IHB_FERA_LOAD_CHUNK_SELECTION */ "Load chunk selection instructions",
    /* IHB_FERA_LOAD_SELECT_ARRAY_ENTRY_BY_VAR_INDEX */ "Load chunk selection instructions",
    /* IHB_FERA_LOAD_SELECT_CHUNK_LITERARY */ "Load chunk selection instructions",
    /* IHB_FERA_LOAD_SELECT_HEADER_BY_CONST_INDEX */ "Load chunk selection instructions",
    /* IHB_FERA_LOAD_SELECT_HEADER_BY_VAR_INDEX */ "Load chunk selection instructions",
    /* IHB_FERA_UPDATE_INSTRUCTIONS */ "update instructions\n instructions 0-4 are accessed from p0 and instructions 5-9 are accessed from p1",
    /* IHB_FER_PEM_PROGRAM_SELECTION_TCAM */ "Fer Pem Program Selection Tcam",
    /* IHB_FIFO_DSP              */ "FIFO for data sample",
    /* IHB_FIFO_DSP_1            */ "FIFO for data sample",
    /* IHB_FIFO_DSP_2            */ "FIFO for data sample",
    /* IHB_FIFO_ELK_RX           */ "FIFO for the elk results",
    /* IHB_FIFO_ELK_TX           */ "FIFO for the elk requests",
    /* IHB_FIFO_FCR_PIPE_7       */ "FER pipe at clk7  (FEC entry pass1)",
    /* IHB_FIFO_FCR_PIPE_9       */ "FER pipe at clk9 (FEC entry pass2)",
    /* IHB_FIFO_KAPS_PASS_1      */ "FIFO for lpm 1st lookup result",
    /* IHB_FIFO_KAPS_PASS_2      */ "FIFO for lpm 2nd lookup result",
    /* IHB_FIFO_LEM              */ "FIFO for lem lookup result",
    /* IHB_FIFO_OAMP_PASS_1      */ "FIFO for oamp 1st lookup result",
    /* IHB_FIFO_OAMP_PASS_2      */ "FIFO for oamp 2nd lookup result",
    /* IHB_FIFO_PARTIAL_LB       */ "FER partial LB keys",
    /* IHB_FIFO_PIPE_40_TO_48    */ "FER pipe at clk40 to clk48 (DSP->FCR, LBP eq)",
    /* IHB_FIFO_PIPE_40_TO_50    */ "FER pipe at clk40 to clk50 (DSP->LBP eq2)",
    /* IHB_FIFO_PIPE_44_TO_50    */ "FER pipe at clk44 to clk50 (DSP -> LBP eq2)",
    /* IHB_FIFO_PIPE_8_TO_40     */ "FER pipe at clk8 to clk40 (DSP->DSP)",
    /* IHB_FIFO_TCAM_PASS_1      */ "FIFO for tcam 1st pass lookup result",
    /* IHB_FIFO_TCAM_PASS_2      */ "FIFO for tcam 2nd pass lookup result",
    /* IHB_FLP_CONSISTENT_HASHING_KEY_GEN */ "Program Instruction Table per program\n                   lines 0-7 : for instructions 0-7\n                   lines 8-15 : for instructions 8-15",
    /* IHB_FLP_KEY_CONSTRUCTION  */ "Program Instruction Table\n                   lines 0-23 : for instructions 0-5\n                   lines 24-47 : for instructions 6-11",
    /* IHB_FLP_LOOKUPS           */ "This table includes per Forwarding Lookup (FLP) Program, an instructions list. The table has 24 entries, with every entry corresponding to an FLP program. The values in each entry define the program operations.",
    /* IHB_FLP_PROCESS           */ "This table includes per Forwarding Lookup (FLP) Program, an instructions list. The table has 24 entries, with every entry corresponding to an FLP program. The values in each entry define the program operations. The values of ResultA are used for forwarding-decision, while the values of ResultB are used for SA-Lookup and RPF.",
    /* IHB_FLP_PROGRAM_KEY_GEN_VAR */ "This table providers per program a general variable that can be used in the programmable keys. The tablehas 24 entries, one per Forwarding Lookup (FLP) program, with the value being the general valiable",
    /* IHB_FLP_PROGRAM_SELECTION_CAM */ "TCAM table for program-selection in Forwarding Lookup (FLP) unit. The following configurations also represent the key to search. If no rules match, program 0 will be selected as the default.",
    /* IHB_FLP_PTC_PROGRAM_SELECT */ "This table maps Port Termination Context (PTC, formerly known as TM port), to Forwarding Lookup profile and Tunnel Termination profile. The table contains 256 entries, one per PTC. Each register contains 8 entries, thus there are 32 configuration registers. Each entry contains the Forwarding Lookup profile used by this PTC.",
    /* IHB_FWD_ACT_PROFILE       */ "This table defines the actions that need to be taken per forwarding action profile. Throughout the PP, various functions assign a forwarding action profile, while the actions of this profile are defined in this table. The table has 256 entries, with the index being the forwarding action profile, and the entrys value being the required actions",
    /* IHB_HEADER_PROFILE        */ "Maps each of 16 possible Header profile table",
    /* IHB_IEEE_1588_ACTION      */ "Accessed with IEEE-1588-Encapsulation (1), IEEE-1588-Address (2), IEEE-1588-Header.Message-Type (4), IEEE-1588-Header.Flag-Field9 In-PP-Port.IEEE-1588-Profile (2)",
    /* IHB_IEEE_1588_IDENTIFICATION_CAM */ "This table is used for IEEE1588-protocol identification.\n                   The table is searched for rules matching, and if all rules don't match then default values will be selected and PacketIsIeee1588 will be set to zero (non IEEE-1588 packet)",
    /* IHB_IN_PORT_KEY_GEN_VAR   */ "This table provides per port a general variable that can be used in the programmable keys. The table has 256 entries, one per In-port, and the entrys value is the general variable.",
    /* IHB_IPP_LAG_TO_LAG_RANGE  */ "LAG range memory table.\n                   Specifies for each LAG group its range and if it is stateful",
    /* IHB_ISEM_ACDT_AUX         */ "INTERNAL",
    /* IHB_ISEM_ACDT_MASTER_H    */ "INTERNAL",
    /* IHB_ISEM_ACDT_SLAVE_H     */ "INTERNAL",
    /* IHB_ISEM_KEYT_AUX         */ "INTERNAL",
    /* IHB_ISEM_KEYT_PLDT_H      */ "INTERNAL",
    /* IHB_ISEM_MAA_CAM          */ "INTERNAL",
    /* IHB_ISEM_MAA_CAM_PAYLOAD  */ "INTERNAL",
    /* IHB_ISEM_MANAGEMENT_MEMORY_H */ "INTERNAL",
    /* IHB_ISEM_MANAGEMENT_REQUEST */ "Management requests",
    /* IHB_ISEM_PLDT_AUX         */ "INTERNAL",
    /* IHB_ISEM_STEP_TABLE       */ "Step Table\n                   (The Item bit ordering matches must emc_include.v)",
    /* IHB_LB_PFC_PROFILE        */ "This table provides Load Balancing (LB) Packet Format Code (PFC) profiles. The table has 256 entries, with the index to each entry being In-Port.Lb-Profile , Parser-Leaf-Context. LB-Profile, Packet-Format-Code . Each entry includes five load balancing vector profiles, one per header.",
    /* IHB_LB_VECTOR_PROGRAM_MAP */ "The Load Balancing (LB) vector may be configured either as 192-bit or 96-bit. It is built from from 24 chunks of 4-bit or 8-bit, with the value of each chunk being configured by the 2-bit entries in this table. The table has 15 lines, each for a different protocol type. Each line has 24 entries of 2-bit, configuring the contents of each corresponding chunk.\n                   The 15 lines are arranged as follows:\n                   Line 0x0: Value: 49'h0_0000_0000_0000 Mask: 49'h1_FFFF_FFFF_FFFF ...",
    /* IHB_LPM                   */ "Longest Prefix Match (LPM) level 1. This table defines the settings of LPM level 1.\n                   The table has 16K entries, with every entry defining a FEC pointer and related comparison configurations.\n                   The LPM algorithm uses 6 levels, each of them configured separately. This table defines level 1.",
    /* IHB_LPM_2                 */ "Longest Prefix Match (LPM) level 2. This table defines the settings of LPM level 2.\n                   The table has 32K entries, with every entry defining a FEC pointer and related comparison configurations.\n                   The LPM algorithm uses 6 levels, each of them configured separately. This table defines level 2.",
    /* IHB_LPM_3                 */ "Longest Prefix Match (LPM) level 3. This table defines the settings of LPM level 3.\n                   The table has 32K entries, with every entry defining a FEC pointer and related comparison configurations.\n                   The LPM algorithm uses 6 levels, each of them configured separately. This table defines level 3.",
    /* IHB_LPM_4                 */ "Longest Prefix Match (LPM) level 4. This table defines the settings of LPM level 4.\n                   The table has 32K entries, with every entry defining a FEC pointer and related comparison configurations.\n                   The LPM algorithm uses 6 levels, each of them configured separately. This table defines level 4.",
    /* IHB_LPM_5                 */ "1.8.2.771.7.2.64 Longest Prefix Match 5\n                   Longest Prefix Match (LPM) level 5. This table defines the settings of LPM level 5.\n                   The table has 32K entries, with every entry defining a FEC pointer and related comparison configurations.\n                   The LPM algorithm uses 6 levels, each of them configured separately. This table defines level 5.",
    /* IHB_LPM_6                 */ "Longest Prefix Match (LPM) level 6. This table defines the settings of LPM level 6.\n                   The table has 32K entries, with every entry defining a FEC pointer and related comparison configurations.\n                   The LPM algorithm uses 6 levels, each of them configured separately. This table defines level 6.",
    /* IHB_L_4_OPS               */ "Used to calculate L4Ops. The relevant bit of the L4Ops is set to '1' if:\n                   (source_port       >= source_port_min ) &\n                   (source_port       <= source_port_max ) &\n                   (destination_port >= destination_port_min ) &\n                   (destination_port <= destination_port_max )\n                   Reset Value:\n                   Value: 64'h0 Mask: 64'h0",
    /* IHB_MEM_230000            */ "INTERNAL",
    /* IHB_MEM_250000            */ "INTERNAL",
    /* IHB_MEM_260000            */ "INTERNAL",
    /* IHB_MEM_270000            */ "INTERNAL",
    /* IHB_MEM_1000000           */ "INTERNAL",
    /* IHB_MEM_1010000           */ "INTERNAL",
    /* IHB_MEM_1020000           */ "INTERNAL",
    /* IHB_MEM_1040000           */ "INTERNAL",
    /* IHB_MEM_1050000           */ "INTERNAL",
    /* IHB_MEM_1520000           */ "INTERNAL",
    /* IHB_MEM_1530000           */ "INTERNAL",
    /* IHB_MEM_1640000           */ "INTERNAL",
    /* IHB_MEM_1650000           */ "INTERNAL",
    /* IHB_MEM_10E0000           */ "INTERNAL",
    /* IHB_MEM_10F0000           */ "INTERNAL",
    /* IHB_MEM_14A0000           */ "INTERNAL",
    /* IHB_MEM_15B0000           */ "INTERNAL",
    /* IHB_MEM_15C0000           */ "INTERNAL",
    /* IHB_MEM_16E0000           */ "INTERNAL",
    /* IHB_MEM_16F0000           */ "INTERNAL",
    /* IHB_MEM_AD0000            */ "INTERNAL",
    /* IHB_MEM_AE0000            */ "INTERNAL",
    /* IHB_MEM_AF0000            */ "INTERNAL",
    /* IHB_MEM_B00000            */ "INTERNAL",
    /* IHB_MEM_B10000            */ "INTERNAL",
    /* IHB_MEM_B20000            */ "INTERNAL",
    /* IHB_MEM_B30000            */ "INTERNAL",
    /* IHB_MEM_B40000            */ "INTERNAL",
    /* IHB_MEM_E00000            */ "INTERNAL",
    /* IHB_MEM_E10000            */ "INTERNAL",
    /* IHB_MEM_EA0000            */ "INTERNAL",
    /* IHB_MEM_F20000            */ "INTERNAL",
    /* IHB_MEM_F30000            */ "INTERNAL",
    /* IHB_MEM_FB0000            */ "INTERNAL",
    /* IHB_MEM_FC0000            */ "INTERNAL",
    /* IHB_MRR_ACT_PROFILE       */ "",
    /* IHB_MY_BFD_DIP            */ "This table contains 16 IPv6-Destination-IPs. These IP addresses are compared to incoming destination IP to identify Multi-Hop BFD over IP.\n                   For IPv4 format, use default IPv4 extension: 0::FFFF:IPv4-DIP",
    /* IHB_OAMA                  */ "Map Inject(1), OAM-is-BFD (1), OAM-Opcode (4), Direction(1), MIP-MP-Type (2), MEP-MP-Type (2), My-CFM-MAC(1), OAM-1-Acc-MEP-Profile (2)",
    /* IHB_OAMB                  */ "Map Inject(1), My-CFM-MAC (1), OAM-is-BFD (1), OAM-Opcode (4), Direction(1), OAM-2-Prof (4)",
    /* IHB_OAM_CHANNEL_TYPE      */ "This table is used to map  Control-Words Channel-Type to OAM-Format. The table contains 16 entries, with the index being a control words channel type. The value in each entry contain sthe OAM format, including format type, format opcode and the result of OAM channel type lookup in the CAM.",
    /* IHB_OAM_COUNTER_FIFO      */ "Fifo that samples the OAM Counter Value from the FLP and holds it until the relevant packet has arrived.",
    /* IHB_OAM_MY_CFM_MAC        */ "My-CFM-MAC table. The table maps My-CFM-MAC address to OAM trap engine. The table contains 256 entries, one entry per PP port.\n                   The purpose of the register to decide if to trap a packet to the OAM engine. The field  MacLsbsBitmap is a bitmap, with every bit corresponding to MAC DA7:0. If the bit corresponding with MAC DA7:0 is set and MacMsbs field in the the table is equal to MAC DA47:8 then OAM-My-CFM-MAC is set.",
    /* IHB_OEMA_MANAGEMENT_REQUEST */ "Management requests",
    /* IHB_OEMA_STEP_TABLE       */ "Step Table\n                   (The Item bit ordering matches must emc_include.v)",
    /* IHB_OEMB_MANAGEMENT_REQUEST */ "Management requests",
    /* IHB_OEMB_STEP_TABLE       */ "Step Table\n                   (The Item bit ordering matches must emc_include.v)",
    /* IHB_OPCODE_MAP_RX         */ "opcode -> size, type",
    /* IHB_OPCODE_MAP_TX         */ "opcode -> size, type",
    /* IHB_PATH_SELECT           */ "This table maps a FEC entry to a protection path selection. The table has 16K . The index to the table is the FEC entry number, with every eight entries being stored in a single register line, meaning the register address is set by FEC number 13:3 and entry number in the register by FEC number 2:0. Each entry indicates if an odd or even protection path should be taken (in case of protection).",
    /* IHB_PFC_INFO              */ "This table maps packet-format-code",
    /* IHB_PINFO_COUNTERS        */ "This table maps In-Port to counters base address. The table has 256 entries, one per In-Port. Every entry contains the counters base address configuration.",
    /* IHB_PINFO_FER             */ "This table provides port info for FEC Resolution (FER). The table has 256 entries, one per PP port, with the index being the port number. Every entry contains information used for FER decisions by the ingress packet processor.",
    /* IHB_PINFO_FLP             */ "This table provides port info for the Forwarding Lookup (FLP) unit. The table has 256 entries, one per PP port, with the index being the port number. Every entry contains information used for forwarding loopup decisions by the ingress packet processor.",
    /* IHB_PINFO_LBP             */ "General configuration per pp port.",
    /* IHB_PINFO_PMF             */ "This table provides Port Termination Context (PTC, formerly known as TM port), info for Programmable Mapping and Filtering (PMF) unit. The table has 256 entries, one per PTC port, with the index being the port number. Every entry contains information used for PMF decisions by the ingress packet processor.",
    /* IHB_PMF_FEM_PROGRAM       */ "This table contains the Programmable Mapping and Filtering (PMF) Field Extraction Macros (FES) program. The table has 64 entries, the first 32 entries dedicated to FEM 0-7, and the last 32 entries dedicated to FEM 8-15. Each entry contains a program and key selection for the FEM.",
    /* IHB_PMF_FES_PROGRAM       */ "This table holds the Program and Key-Select for Field-Extraction-Macros.\n                   lines 0-31 : for FESs 0-15\n                   lines 32-63 : for instructions 16-31",
    /* IHB_PMF_INITIAL_KEY_2ND_PASS */ "This table maps program to initial key for the 2nd PMF pass. The table has 32 entries, one per program. Every entry contains the initial key to be used for the 2nd PMF pass.\n                   Used in conjunction with the previous PMF Pass Key Gen and PMF Pass lookup tables.",
    /* IHB_PMF_PASS_1_KEY_GEN_LSB */ "Program Instruction Table per program for all 4 keys LSB\n                   lines 0-31 : for instructions 0-7\n                   lines 32-63 : for instructions 8-15",
    /* IHB_PMF_PASS_1_KEY_GEN_MSB */ "Program Instruction Table per program for all 4 keys MSB\n                   lines 0-31 : for instructions 0-7\n                   lines 32-63 : for instructions 8-15",
    /* IHB_PMF_PASS_1_LOOKUP     */ "This table maps program to program instruction. The table has 32 entries, one per program, and there are two tables: for first and second PMF lookup. Every entry contains a TCAM action profile per each one of four keys.",
    /* IHB_PMF_PASS_2_KEY_GEN_LSB */ "Program Instruction Table per program for all 4 keys LSB\n                   lines 0-31 : for instructions 0-7\n                   lines 32-63 : for instructions 8-15",
    /* IHB_PMF_PASS_2_KEY_GEN_MSB */ "Program Instruction Table per program for all 4 keys MSB\n                   lines 0-31 : for instructions 0-7\n                   lines 32-63 : for instructions 8-15",
    /* IHB_PMF_PASS_2_KEY_UPDATE */ "Updating the keys for the second pass lookup. At this stage only the second pass keys are available",
    /* IHB_PMF_PASS_2_LOOKUP     */ "This table maps program to program instruction. The table has 32 entries, one per program, and there are two tables: for first and second PMF lookup. Every entry contains a TCAM action profile per each one of four keys.",
    /* IHB_PMF_PASS_2_PROGRAM_SELECTION_CAM */ "TCAM table for program-selection in Programmable Mapping and Filtering (PMF) unit. The table has 48 entries, with the 32 programs",
    /* IHB_PMF_PROGRAM_COUNTERS  */ "This table maps program to counters. The table has 32 entries, one per program. Every entry contains the counters configuration.",
    /* IHB_PMF_PROGRAM_GENERAL   */ "This table provides default values for PMF programs. The table has 32 entries, one per program. Every entry default values for this program.",
    /* IHB_PMF_PROGRAM_SELECTION_CAM */ "TCAM table for program-selection in Programmable Mapping and Filtering (PMF) unit. The table has 48 entries, with the 32 programs",
    /* IHB_PMF_UPDATE_KEY_GEN_LSB */ "Program Instruction Table per program for all 4 keys LSB\n lines 0-31 : for instructions 0-7\n lines 32-63 : for instructions 8-15",
    /* IHB_PMF_UPDATE_KEY_GEN_MSB */ "Program Instruction Table per program for all 4 keys LSB\n lines 0-31 : for instructions 0-7\n lines 32-63 : for instructions 8-15",
    /* IHB_PROGRAM_KEY_GEN_VAR   */ "This table provides per PMF program a general variable that can be used in the programmable keys. The table has 32 entries, one per program, and the entrys value is the general variable.",
    /* IHB_PTC_INFO_PMF          */ "Port-Termination-Context info",
    /* IHB_PTC_KEY_GEN_VAR       */ "This table provides per Port Termination Context (PTC) a general variable that can be used in the programmable keys. The table has 256 entries, one per PTC, and the entrys value is the general variable.",
    /* IHB_SNOOP_ACTION          */ "This table maps snoop command to a snoop action. The table has 256 entries, with the index being the snoop command, and the entrys value being the required snoop action.",
    /* IHB_SNP_ACT_PROFILE       */ "",
    /* IHB_TCAM_ACCESS_PROFILE   */ "This table maps TCAM query DB-profile to an access profile. The table has 48 entries, with the index being DB-profile. Each entry defines the access profile, including the memory to access, key size, access type (direct / lookup) and action on the prefix bits.",
    /* IHB_TCAM_ACTION           */ "This table provides access to the TCAM Action banks. Each TCAM bank is associated with two 20-bit TCAM action memories, provided in this table. Each action table has 1K entries, and there are 24 such tables.\n                   The TCAM action table is valid for PP units ERPP, PMF, FLP and VTT.",
    /* IHB_TCAM_ACTION_24        */ "This table provides access to the small TCAM Action banks. Each small TCAM bank is associated with two 20-bit small TCAM action memories, provided in this table. Each action table has 128 entries.\n                   The TCAM action table is valid for PP units ERPP, PMF, FLP and VTT.\n                   TcamAction24 belongs to TCAM BANK 12",
    /* IHB_TCAM_ACTION_25        */ "This table provides access to the small TCAM Action banks. Each small TCAM bank is associated with two 20-bit small TCAM action memories, provided in this table. Each action table has 128 entries.\n                   The TCAM action table is valid for PP units ERPP, PMF, FLP and VTT.\n                   TcamAction25 belongs to TCAM BANK 12",
    /* IHB_TCAM_ACTION_26        */ "This table provides access to the small TCAM Action banks. Each small TCAM bank is associated with two 20-bit small TCAM action memories, provided in this table. Each action table has 128 entries.\n                   The TCAM action table is valid for PP units ERPP, PMF, FLP and VTT.\n                   TcamAction26 belongs to TCAM BANK 13",
    /* IHB_TCAM_ACTION_27        */ "This table provides access to the small TCAM Action banks. Each small TCAM bank is associated with two 20-bit small TCAM action memories, provided in this table. Each action table has 128 entries.\n                   The TCAM action table is valid for PP units ERPP, PMF, FLP and VTT.\n                   TcamAction27 belongs to TCAM BANK 13",
    /* IHB_TCAM_ACTION_HIT_INDICATION */ "This table provides a hit indication for each entry in each TCAM Action bank. Each TCAM bank is associated with two 20-bit TCAM action memories, for which the hit indication is provided. Each action table has 1K entries, divided to 128 register lines of 8-bit, and there are 12x2 such tables.",
    /* IHB_TCAM_ACTION_HIT_INDICATION_24 */ "This table provides a hit indication for each entry in each small TCAM Action bank. Each small TCAM bank is associated with two 20-bit TCAM action memories, for which the hit indication is provided. Each action table has 128K entries, divided to 16 register lines of 8-bit, and there are 4 such tables.\n                   This table belongs to TcamAction24",
    /* IHB_TCAM_ACTION_HIT_INDICATION_25 */ "This table provides a hit indication for each entry in each small TCAM Action bank. Each small TCAM bank is associated with two 20-bit TCAM action memories, for which the hit indication is provided. Each action table has 128K entries, divided to 16 register lines of 8-bit, and there are 4 such tables.\n                   This table belongs to TcamAction25",
    /* IHB_TCAM_ACTION_HIT_INDICATION_26 */ "This table provides a hit indication for each entry in each small TCAM Action bank. Each small TCAM bank is associated with two 20-bit TCAM action memories, for which the hit indication is provided. Each action table has 128K entries, divided to 16 register lines of 8-bit, and there are 4 such tables.\n                   This table belongs to TcamAction26",
    /* IHB_TCAM_ACTION_HIT_INDICATION_27 */ "This table provides a hit indication for each entry in each small TCAM Action bank. Each small TCAM bank is associated with two 20-bit TCAM action memories, for which the hit indication is provided. Each action table has 128K entries, divided to 16 register lines of 8-bit, and there are 4 such tables.\n                   This table belongs to TcamAction27",
    /* IHB_TCAM_BANK             */ "This table provides access to the TCAM banks through read and write commands.\n                   The table has 12*2K + 2*256 entries, with every entry refering to a TCAM bank.\n                   First 2K entries belongs to TCAM BANK 0 and so on till BANK 11.\n                   The bottom 2*256 entries belongs to TCAM Bank 12 and 13.\n                   Note:  The bank address is 11 bits. If the lsb is clear (even address)  the entry is a key. If the lsb is set (odd address)  the entry is a mask\n  ...",
    /* IHB_TCAM_BANK_COMMAND     */ "TCAM command:\n                   he command can be write/read/compare. In case of write and compare the Din is needed",
    /* IHB_TCAM_BANK_REPLY       */ "TCAM reply. The reply is based on the command entered before",
    /* IHB_TCAM_ENTRY_PARITY     */ "This table holds the parity bits for each 32-bit in the TCAM. The table is built from 12 tables,\n                   each of them with 2K entries. Each table represents Parity bits for one corressponding TCAM.\n                   Note:  If the addresss lsb is clear (even address)  the entry is a key. If the addresss lsb is set (odd address)  the entry is a mask.",
    /* IHB_TCAM_ENTRY_PARITY_12  */ "This table holds the parity bits for each 32-bit in the TCAM.\n                   The table is with 2K entries, each entry contain the parity bits for the matched entry in TCAM-12.\n                   Note:  If the addresss lsb is clear (even address)  the entry is a key. If the addresss lsb is set (odd address)  the entry is a mask.",
    /* IHB_TCAM_ENTRY_PARITY_13  */ "This table holds the parity bits for each 32-bit in the TCAM.\n                   The table is with 2K entries, each entry contain the parity bits for the matched entry in TCAM-13.\n                   Note:  If the addresss lsb is clear (even address)  the entry is a key. If the addresss lsb is set (odd address)  the entry is a mask.",
    /* IHB_TCAM_PD_PROFILE       */ "TCAM Priority Decoder profile.\n                   This table maps TCAM query DB-profile to a priority decoder profile. The table has 48 entries, with the index being DB-profile. Each entry defines the priority decoder profile through a bitmap selecting which TCAM banks action results will participate in the priority decoder.",
    /* IHB_TIME_STAMP_FIFO       */ "Fifo that samples the Time stamp from the Parser and holds it until the relevant packet has arrived.",
    /* IHB_UNKNOWN_DA_MAP        */ "This table is used to map an unknown Destination Address (DA) action profile to a destination address. The table has 24 entries, with the index being DA-Type0..2 In-LIF-DA-Not-Found-Profile, In-PP-Port.DA-Not-Found-Profile and the value being the default destination to use.\n                   DA-Type is defined as follows:\n                   0x0 - Multicast\n                   0x1: Broadcast\n                   0x2: Unicast\n                   The reset Value for all lines is 0x0 with a mask value  ...",
    /* IHB_VRF_CONFIG            */ "This table is used to maps VRFto a Default-Destination. The table has 4K entries, with the index being 10-bit VRF, and the entry value being a default destination for IPv4 Unicast and Multicast.",
    /* IHP_ACTION_PROFILE_MPLS_VALUE */ "Action profile configuration for default MPLS label actions.",
    /* IHP_APPLET_MEMORY         */ "Holds all the packets that will be injected in this applet transaction",
    /* IHP_BVD_CFG               */ "This table assigns an In-LIF profile and a destination per B-VID, in case DA is not found. The table includes 4K entries, pointed by the B-VID. Each entry contains a Destination to be used if Destination Address is not found and an In-LIF profile to be used by the B-VID. This block is used by IRPP.",
    /* IHP_BVD_FID_CLASS         */ "This table assigns an FID-Class per B-VID. The table includes 4K entries, pointed by the B-VID. Each entry contains an FID-Class to be used by the B-VID. Each register line contains four entries, matching four B-VID values. This block is used by several blocks in the IRPP.",
    /* IHP_BVD_TOPOLOGY_ID       */ "This table assigns a topology ID per B-VID. The table includes 4K entries, pointed by the B-VID. Each entry contains a topology ID to be used by the B-VID. Each register line contains eight entries, matching eight B-VID values. Note that the entry sets the 4 lsb of the topology ID, and the upper 2-bit are set to zero. This block is used both by IRPP and ERPP.",
    /* IHP_CONSISTENT_HASHING_PROGRAM_SEL_TCAM */ "TCAM table for consistent hashing program selection. The following configurations also represent the key to search. If no rules match, program 0 will be selected as the default.",
    /* IHP_DEFAULT_COUNTER_SOURCE */ "each of the 4 LIFs is mapped to a 2b value according to range:\n                   2'b00 - lif invalid\n                   2'b01 - lif not in range\n                   2'b10 - lif in range 0\n                   2'b11 - lif in range 1\n                   8b conactanted value of all LIFs is constrcuted, ordered according to usage order, MSB to LSB (bits 7:6 are always VT0 LIF).\n                   table is acccessed with the upper 5b. the lower 3b is used to select CounterSource pair from a line.",
    /* IHP_DESIGNATED_VLAN_TABLE */ "This table hold 8 designated VLANs, per pp-port designated-vlan index.",
    /* IHP_DSCP_EXP_MAP          */ "This table is used to define a DSCP-EXP field based on routing protocol, terminated protocol and terminated DSCP-EXP. The table has 3K entries, with the index being Routing-Protocol, Terminated-Protocol , Terminted-DSCP-EXP. The routing protocol is encoded as follows:\n                   0x0  IPv4\n                   0x1  IPv6\n                   0x2  MPLS\n                   Each entry contains a new temporary DSCP-EXP value.",
    /* IHP_DSCP_EXP_REMARK       */ "This table is used to define a DSCP-EXP Remark field based on routing protocol, DSCP-EXP value before remark and CoS profile. The table has 8K entries, with the index being Routing-Protocol, In-DSCP-EXP-Before-Remark, CoS-Profile3:0. The routing protocol is encoded as follows:\n                   0x0  IPv4\n                   0x1  IPv6\n                   0x2  MPLS\n                   Each entry contains a new DSCP-EXP Remark value.",
    /* IHP_ELK_PAYLOAD_FORMAT    */ "per FLP program, sets ELK result payload format",
    /* IHP_ETHERNET_OAM_OPCODE_MAP */ "This table maps Y1731-Header opcode to an OAM opcode and offset configuration. The table has 256 entries, with the index being Y1731-Headers 8-bit Opcode. The value in each entry includes an 4-bit OAM opcode and an OAM offset, used to indicate OAM stamp location in the header.",
    /* IHP_FID_CLASS_2_FID       */ "This table maps FID-Class to a 15bit Forwarding ID (FID). The table has seven entries, each pointed by an FID-Class. Each entry contains the FID value to be matched with the index FID-Class.",
    /* IHP_FIFO_10_TO_41         */ "FIFO for packet data waiting for the ELK results\n                   From pipe-clk 10 to pipe-clk 41",
    /* IHP_FIFO_8_TO_41          */ "FIFO for packet data waiting for the ELK results\n                   From pipe-clk 8 to pipe-clk 41",
    /* IHP_FIFO_LEM_1            */ "FIFO for lem 1st lookup result",
    /* IHP_FIFO_LEM_2            */ "FIFO for lem 2nd lookup result",
    /* IHP_FIFO_LPM_1            */ "FIFO for lpm 1st lookup result",
    /* IHP_FIFO_LPM_2            */ "FIFO for lpm 2nd lookup result",
    /* IHP_FIFO_LPM_PUBLIC_1     */ "FIFO for lpm public 1st lookup result",
    /* IHP_FIFO_LPM_PUBLIC_2     */ "FIFO for lpm public 2nd lookup result",
    /* IHP_FIFO_OAM              */ "FIFO for oam trap engine results",
    /* IHP_FIFO_OID_1            */ "FIFO for oam identification",
    /* IHP_FIFO_OID_2            */ "FIFO for oam identification",
    /* IHP_FIFO_PROGRAM_ATTRIBUTES */ "FIFO for packet data waiting for the ELK results\n                   From pipe-clk 12",
    /* IHP_FIFO_TCAM             */ "FIFO for tcam lookup result",
    /* IHP_FLPA_FIFO             */ "FFC instructions and enable",
    /* IHP_FLPA_LOAD_CHUNK_SELECTION */ "Load chunk selection instructions",
    /* IHP_FLPA_LOAD_SELECT_ARRAY_ENTRY_BY_VAR_INDEX */ "Load chunk selection instructions",
    /* IHP_FLPA_LOAD_SELECT_CHUNK_LITERARY */ "Load chunk selection instructions",
    /* IHP_FLPA_LOAD_SELECT_HEADER_BY_CONST_INDEX */ "Load chunk selection instructions",
    /* IHP_FLPA_LOAD_SELECT_HEADER_BY_VAR_INDEX */ "Load chunk selection instructions",
    /* IHP_FLPA_UPDATE_INSTRUCTIONS */ "update instructions\n instructions 0-4 are accessed from p0 and instructions 5-9 are accessed from p1",
    /* IHP_FLP_CONSISTENT_HASHING_KEY_GEN */ "Program Instruction Table per program\n                   lines 0-7 : for instructions 0-7\n                   lines 8-15 : for instructions 8-15",
    /* IHP_FLP_KEY_CONSTRUCTION_LSB */ "Program Instruction Table for keys LSB\n                   lines 0-31 : for instructions 0-7\n                   lines 32-63 : for instructions 8-15",
    /* IHP_FLP_KEY_CONSTRUCTION_MSB */ "Program Instruction Table for keys MSB\n                   lines 0-31 : for instructions 0-7\n                   lines 32-63 : for instructions 8-15",
    /* IHP_FLP_LOOKUPS           */ "This table includes per Forwarding Lookup (FLP) Program, an instructions list. The table has 24 entries, with every entry corresponding to an FLP program. The values in each entry define the program operations.",
    /* IHP_FLP_PP_PORT_PROGRAM_SELECT */ "This table maps In PP Port to Forwarding Lookup profile",
    /* IHP_FLP_PROCESS           */ "This table includes per Forwarding Lookup (FLP) Program, an instructions list. The table has 24 entries, with every entry corresponding to an FLP program. The values in each entry define the program operations. The values of ResultA are used for forwarding-decision, while the values of ResultB are used for SA-Lookup and RPF.",
    /* IHP_FLP_PROGRAM_KEY_GEN_VAR */ "This table providers per program a general variable that can be used in the programmable keys. The tablehas 24 entries, one per Forwarding Lookup (FLP) program, with the value being the general valiable",
    /* IHP_FLP_PROGRAM_SELECTION_CAM */ "TCAM table for program-selection in Forwarding Lookup (FLP) unit. The following configurations also represent the key to search. If no rules match, program 0 will be selected as the default.",
    /* IHP_FLP_PTC_PROGRAM_SELECT */ "This table maps Port Termination Context (PTC, formerly known as TM port), to Forwarding Lookup profile and Tunnel Termination profile. The table contains 256 entries, one per PTC. Each register contains 8 entries, thus there are 32 configuration registers. Each entry contains the Forwarding Lookup profile used by this PTC.",
    /* IHP_IEEE_1588_ACTION      */ "Accessed with IEEE-1588-Encapsulation (1), IEEE-1588-Address (2), IEEE-1588-Header.Message-Type (4), IEEE-1588-Header.Flag-Field9 In-PP-Port.IEEE-1588-Profile (2)",
    /* IHP_IEEE_1588_IDENTIFICATION_CAM */ "This table is used for IEEE1588-protocol identification.\n                   The table is searched for rules matching, and if all rules don't match then default values will be selected and PacketIsIeee1588 will be set to zero (non IEEE-1588 packet)",
    /* IHP_INGRESS_VLAN_EDIT_COMMAND_TABLE */ "accessed with Packet-Is-MEF-L2CP(1), LLVP-Incoming-Tag-Structure (4), AC-VLAN-Edit-Profile (3)",
    /* IHP_IN_RIF_CONFIG_TABLE   */ "In-Rif configuration table",
    /* IHP_ISA_MANAGEMENT_REQUEST */ "Management requests",
    /* IHP_ISA_STEP_TABLE        */ "Step Table\n                   (The Item bit ordering matches must emc_include.v)",
    /* IHP_ISB_MANAGEMENT_REQUEST */ "Management requests",
    /* IHP_ISB_STEP_TABLE        */ "Step Table\n                   (The Item bit ordering matches must emc_include.v)",
    /* IHP_LIF_0_ACCESSED        */ "bit per SEM result table entry, if set, SEM result (LIF) accessed, holds VT0/TT0",
    /* IHP_LIF_1_ACCESSED        */ "bit per SEM result table entry, if set, SEM result (LIF) accessed, holds VT1/TT1",
    /* IHP_LIF_ACCESSED          */ "bit per SEM result tale entry, if set, SEM result (LIF) accessed.",
    /* IHP_LIF_TABLE             */ "The Small-EM result table is accessed with the SEM-Index which is a result of the Small-EM lookup. The entry format is dependent on the key into the Small-EM and the application. The table contains 16K entries.",
    /* IHP_LIF_TABLE_AC_2_EEI    */ "This is the format of a P2P AC that is connected to a PWE.",
    /* IHP_LIF_TABLE_AC_2_OUT_LIF */ "This is the format of a P2P AC that is connected to an AC.",
    /* IHP_LIF_TABLE_AC_MP       */ "This is the format of a multipoint AC.",
    /* IHP_LIF_TABLE_AC_P2P_TO_AC */ "This is the format of a P2P AC that is connected to an AC.",
    /* IHP_LIF_TABLE_AC_P2P_TO_PBB */ "This is the format of a P2P AC that is connected to a PBP.",
    /* IHP_LIF_TABLE_AC_P2P_TO_PWE */ "This is the format of a P2P AC that is connected to a PWE.",
    /* IHP_LIF_TABLE_DOUBLE_DATA */ "Double Data Entry",
    /* IHP_LIF_TABLE_IP_TT       */ "IP tunnels are terminated according to this entry.",
    /* IHP_LIF_TABLE_ISID_MP     */ "This is the format of a PBP with a multipoint service.",
    /* IHP_LIF_TABLE_ISID_P2P    */ "This is the format of a PBP with a P2P service.",
    /* IHP_LIF_TABLE_LABEL_PROTOCOL_OR_LSP */ "MPLS labels with an IP header above ther are terminated according to this entry.",
    /* IHP_LIF_TABLE_LABEL_PWE_MP */ "Multipoint service MPLS labels are terminated according to this entry.",
    /* IHP_LIF_TABLE_LABEL_PWE_P2P */ "P2P service MPLS labels are terminated according to this entry.",
    /* IHP_LIF_TABLE_TRILL       */ "TRILL encapsulated packets are terminated according to this entry.",
    /* IHP_LLR_FIFO_P_14_PIPE    */ "Store pipe after SA-Lookup in the LEM",
    /* IHP_LLR_LLVP              */ "Link layer VLAN processing table. This table has 256 entries, and the index  into the table is VLAN-Classification-Profile Outer-Tag, Outer-Tag-Is-Priority, Inner-Tag .\n                   Each entry includes information on the matcing VLAN tag and how it should be processed.",
    /* IHP_LL_MIRROR_PROFILE     */ "Link layer Mirror profile table. This table has 2K entries, and the index  into the table is VID-Index, In-PP-Port.Each entry contains the link layer mirror profile matching its index.",
    /* IHP_MACT_AGING_CONFIGURATION_TABLE */ "",
    /* IHP_MACT_FID_COUNTER_DB   */ "Design Behaviour for Err: Countinue",
    /* IHP_MACT_FID_COUNTER_PROFILE_DB */ "",
    /* IHP_MACT_FID_PROFILE_DB   */ "Design Behaviour for Err: Countinue",
    /* IHP_MACT_FLUSH_DB         */ "Flush DB",
    /* IHP_MACT_FORMAT_1         */ "Large-EM Entry  Format I  B-MACT data (i.e. PBP)",
    /* IHP_MACT_FORMAT_2         */ "",
    /* IHP_MACT_FORMAT_0_TYPE_0  */ "The LargeEM has several formats. Format1 is used by the forwarding lookups block and its encoding is determined by the application. All encodings have the base format indicated here. Each application is elaborated in the subsequent sections.",
    /* IHP_MACT_FORMAT_0_TYPE_1  */ "Large-EM Entry  Format I  Transparent P2P data (applicable for AC and I-SID)",
    /* IHP_MACT_FORMAT_0_TYPE_2  */ "Large-EM Entry  Format I  B-MACT data (i.e. PBP)",
    /* IHP_MACT_FORMAT_3_TYPE_0  */ "",
    /* IHP_MACT_FORMAT_3_TYPE_1  */ "",
    /* IHP_MACT_PORT_MINE_TABLE_LAG_PORT */ "If set, Lag Port has at least one member this Device\n                   Design Behaviour for Err: Countinue (might result in deletion of entry an age-cycle earlier/later)",
    /* IHP_MACT_PORT_MINE_TABLE_PHYSICAL_PORT */ "If set, Physical Port is local to this Device,\n                   Each address contains 32 entries\n                   Design Behaviour for Err: Countinue (might result in deletion of entry an age-cycle earlier/later)",
    /* IHP_MACT_STEP_TABLE       */ "Step Table\n                   (The Item bit ordering matches must emc_include.v)",
    /* IHP_MAP_RIF_PROFILE_TO_ROUTING_ENABLE */ "This table is accessed with the In-Rif-Profile. Each line holds bitmap vector which map Ethernet.Qualifier-Next-Protocol,IP-Qualifier.Is-Mc to enable bit.",
    /* IHP_MEM_300000            */ "INTERNAL",
    /* IHP_MEM_380000            */ "INTERNAL",
    /* IHP_MEM_420000            */ "INTERNAL",
    /* IHP_MEM_430000            */ "INTERNAL",
    /* IHP_MEM_500000            */ "INTERNAL",
    /* IHP_MEM_580000            */ "INTERNAL",
    /* IHP_MEM_590000            */ "INTERNAL",
    /* IHP_MEM_610000            */ "INTERNAL",
    /* IHP_MEM_620000            */ "INTERNAL",
    /* IHP_MEM_740000            */ "INTERNAL",
    /* IHP_MEM_750000            */ "INTERNAL",
    /* IHP_MEM_820000            */ "INTERNAL",
    /* IHP_MEM_830000            */ "INTERNAL",
    /* IHP_MEM_940000            */ "INTERNAL",
    /* IHP_MEM_950000            */ "INTERNAL",
    /* IHP_MEM_7000000           */ "INTERNAL",
    /* IHP_MEM_7100000           */ "INTERNAL",
    /* IHP_MEM_7110000           */ "INTERNAL",
    /* IHP_MEM_7120000           */ "INTERNAL",
    /* IHP_MEM_7200000           */ "INTERNAL",
    /* IHP_MEM_7210000           */ "INTERNAL",
    /* IHP_MEM_7220000           */ "INTERNAL",
    /* IHP_MEM_1F0000            */ "INTERNAL",
    /* IHP_MEM_6A0000            */ "INTERNAL",
    /* IHP_MEM_6B0000            */ "INTERNAL",
    /* IHP_MEM_7A0000            */ "INTERNAL",
    /* IHP_MEM_8B0000            */ "INTERNAL",
    /* IHP_MEM_8C0000            */ "INTERNAL",
    /* IHP_MEM_9E0000            */ "INTERNAL",
    /* IHP_MEM_9F0000            */ "INTERNAL",
    /* IHP_MEM_A10000            */ "INTERNAL",
    /* IHP_MEM_A90000            */ "INTERNAL",
    /* IHP_MEM_AA0000            */ "INTERNAL",
    /* IHP_MEM_B20000            */ "INTERNAL",
    /* IHP_MEM_B30000            */ "INTERNAL",
    /* IHP_MEM_BB0000            */ "INTERNAL",
    /* IHP_MEM_BC0000            */ "INTERNAL",
    /* IHP_MEM_C50000            */ "INTERNAL",
    /* IHP_MEM_C60000            */ "INTERNAL",
    /* IHP_MY_BFD_DIP            */ "This table contains 16 IPv6-Destination-IPs. These IP addresses are compared to incoming destination IP to identify Multi-Hop BFD over IP.\n                   For IPv4 format, use default IPv4 extension: 0::FFFF:IPv4-DIP",
    /* IHP_OAMA                  */ "Map Inject(1), OAM-is-BFD (1), OAM-Opcode (4), Direction(1), MIP-MP-Type (2), MEP-MP-Type (2), My-CFM-MAC(1), OAM-1-Acc-MEP-Profile (2)",
    /* IHP_OAMB                  */ "Map Inject(1), My-CFM-MAC (1), OAM-is-BFD (1), OAM-Opcode (4), Direction(1), OAM-2-Prof (4)",
    /* IHP_OAM_CHANNEL_TYPE      */ "This table is used to map  Control-Words Channel-Type to OAM-Format. The table contains 16 entries, with the index being a control words channel type. The value in each entry contain sthe OAM format, including format type, format opcode and the result of OAM channel type lookup in the CAM.",
    /* IHP_OAM_MY_CFM_MAC        */ "My-CFM-MAC table. The table maps My-CFM-MAC address to OAM trap engine. The table contains 256 entries, one entry per PP port.\n                   The purpose of the register to decide if to trap a packet to the OAM engine. The field  MacLsbsBitmap is a bitmap, with every bit corresponding to MAC DA7:0. If the bit corresponding with MAC DA7:0 is set and MacMsbs field in the the table is equal to MAC DA47:8 then OAM-My-CFM-MAC is set.",
    /* IHP_PACKET_FORMAT_TABLE   */ "This table maps the Parser-End-Leaf to Packet-Format-Code value, and Parser-Leaf-Context.",
    /* IHP_PARSER_CUSTOM_MACRO_PARAMETERS */ "Parser custom macro configuration parameters, 0-3 are for set 0, 4-7 are for set 1",
    /* IHP_PARSER_CUSTOM_MACRO_PROTOCOLS */ "Parser custom macro protocols. 15 shared by all macros",
    /* IHP_PARSER_CUSTOM_MACRO_WORD_MAP */ "Custom macro word map.",
    /* IHP_PARSER_ETH_PROTOCOLS  */ "The parser identifies these Ethernet -Type and DSAP/SSAP values",
    /* IHP_PARSER_IPV4_NEXT_PROTOCOL_SIZE */ "Per IPv4 Next-protocol value, add up to 7B to header size.",
    /* IHP_PARSER_IPV6_NEXT_PROTOCOL_SIZE */ "Per IPv6 Next-protocol value, add up to 7B to header size.",
    /* IHP_PARSER_IP_PROTOCOLS   */ "The parser identifes these IP protocol values",
    /* IHP_PARSER_MPLS_NEXT_PROTOCOL_SPECULATE_MAP */ "Maps of first nibble after MPLS BOS label to next protocol value.",
    /* IHP_PARSER_PEM_PROGRAM_SELECTION_TCAM */ "Fer Pem Program Selection Tcam",
    /* IHP_PARSER_PROGRAM        */ "Parser program memory",
    /* IHP_PARSER_PROGRAM_POINTER_FEM_BIT_SELECT_TABLE */ "",
    /* IHP_PARSER_PROGRAM_POINTER_FEM_FIELD_SELECT_MAP */ "",
    /* IHP_PARSER_PROGRAM_POINTER_FEM_MAP_INDEX_TABLE */ "",
    /* IHP_PCP_MAP_TABLE         */ "PCP map table.\n Accessed with Cos-Profile, Cos-Profile-Map-Key-Lsb, each line holds 4 values",
    /* IHP_PFQ_0_FEM_BIT_SELECT_TABLE */ "",
    /* IHP_PFQ_0_FEM_FIELD_SELECT_MAP */ "",
    /* IHP_PFQ_0_FEM_MAP_INDEX_TABLE */ "",
    /* IHP_PINFO_FLP_0           */ "This table provides port info for the Forwarding Lookup (FLP) unit. The table has 256 entries, one per PP port, with the index being the port number. Every entry contains information used for forwarding lookup decisions by the ingress packet processor.",
    /* IHP_PINFO_FLP_1           */ "This table provides port info for the Forwarding Lookup (FLP) unit. The table has 256 entries, one per PP port, with the index being the port number. Every entry contains information used for forwarding loopup decisions by the ingress packet processor.",
    /* IHP_PINFO_LLR             */ "This register includes port information settings of the IHP link layer block. This table has 256 entries, one per port.",
    /* IHP_PORT_PROTOCOL         */ "This table is used for port-protocol based Traffic-Class and Initial-VID resolution.\n                   It has 128 entries, and the index into the table is Ethernet-Type-Code, In-PP-Port.Port-Profile. Each entry contains the VLAN ID and Traffic Class matching its index.",
    /* IHP_PP_PORT_INFO          */ "PP-Port parameters table.",
    /* IHP_PRSRA_FIFO            */ "FFC instructions and enable",
    /* IHP_PRSRA_LOAD_CHUNK_SELECTION */ "Load chunk selection instructions",
    /* IHP_PRSRA_LOAD_SELECT_ARRAY_ENTRY_BY_VAR_INDEX */ "Load chunk selection instructions",
    /* IHP_PRSRA_LOAD_SELECT_CHUNK_LITERARY */ "Load chunk selection instructions",
    /* IHP_PRSRA_LOAD_SELECT_HEADER_BY_CONST_INDEX */ "Load chunk selection instructions",
    /* IHP_PRSRA_LOAD_SELECT_HEADER_BY_VAR_INDEX */ "Load chunk selection instructions",
    /* IHP_PRSRA_UPDATE_INSTRUCTIONS */ "update instructions\n instructions 0-4 are accessed from p0 and instructions 5-9 are accessed from p1",
    /* IHP_PTC_INFO              */ "Port-Termination-Context parameters.",
    /* IHP_PTC_PARSER_PROGRAM_POINTER_CONFIG */ "Values for Parser-Program-Pointer resolution. The FEM instruction is Profile. The FEM key is selected by Value-to-Use as follows:\n                   00: Header-DataOffset, Header-DataValue5:0\n                   01: Header-DataOffset, Value\n                   10: Header-DataOffset In-PP-Port.Default-Parser-Program-Pointer",
    /* IHP_PTC_PFQ_0_CONFIG      */ "Values for Packet-Format-Qualifier-0 resolution. The FEM instruction is Profile. The FEM key is selected by Value-to-Use as follows:\n                   00: Header-DataOffset, Header-DataValue5:0\n                   01: Header-DataOffset, Value\n                   10: Header-DataOffset In-PP-Port.Default-PFQ0",
    /* IHP_PTC_SYS_PORT_CONFIG   */ "Values for Src-System-Port-ID resolution. The FEM instruction is Profile. The FEM key is selected by Value-to-Use as follows:\n                   00: Header-DataOffset, Header-DataValue5:0\n                   01: Header-DataOffset, Value\n                   10: Header-DataOffset Virtual-Port.Src-System-Port",
    /* IHP_PTC_VIRTUAL_PORT_CONFIG */ "Values for Virtual-Port resolution. The FEM instruction is Profile. The FEM key is selected by Value-to-Use as follows:\n                   0: Header-DataOffset, Header-DataValue5:0\n                   1: Header-DataOffset 2b0, Value",
    /* IHP_RECYCLE_COMMAND       */ "RecycleCommand to CPU-Trap, Snoop and Mirror mapping table. This table has 32 entries, each entry pointed by a recycle command. Each entry contains a CPU trap code, forwading and snoop strength and a mirror profile, for the specific recycle command.",
    /* IHP_RESERVED_MC           */ "This table is used to map PP-Port trap profile and DA to IEEE reserved multicast trap code.\n                   It has 256 entries, and the index into the table is In-PP-Port.Trap-Profile, DA5:0.\n                   Each entry contains the forwarding and snooping action strength and CPU trap code matching its index",
    /* IHP_SRC_SYSTEM_PORT_FEM_BIT_SELECT_TABLE */ "This table holds the bit select configuration for the Src-System-Port field extraction macro",
    /* IHP_SRC_SYSTEM_PORT_FEM_FIELD_SELECT_MAP */ "This table holds the field select configuration for the Src-System-Port field extraction macro. It contains all 4 maps.",
    /* IHP_SRC_SYSTEM_PORT_FEM_MAP_INDEX_TABLE */ "This table holds the action index configuration for the Src-System-Port field extraction macro",
    /* IHP_STP_TABLE             */ "This table is accessed with the PP-Port. Each line holds the STP state per topology-ID.",
    /* IHP_SUBNET_CLASSIFY       */ "Subnet based VLAN classification configuration. This table has 16 entries, and the index into the table is taken from port-property. The IPv4 source IP is compared to these values for subnet classification purposes.\n                   The reset value for all lines  is 0x0 with a mask value of 0x20000000000000",
    /* IHP_TC_DP_MAP_TABLE       */ "Traffic class and drop precedence map table.\n                   Accessed with Cos-Profile, Cos-Profile-Map-Key-Lsb, each line holds 4 values",
    /* IHP_TERMINATION_PROFILE_TABLE */ "",
    /* IHP_TOS_2_COS             */ "This table is used to map TOS to Traffic Class and Drop Precedence.\n                   It has 1K entries, and the index into the table is IP-header.TOS. Each entry contains the Traffic Class and Drop Precedence matching its index.",
    /* IHP_UNKNOWN_DA_MAP        */ "This table is used to map an unknown Destination Address (DA) action profile to a destination address. The table has 24 entries, with the index being DA-Type0..2 In-LIF-DA-Not-Found-Profile, In-PP-Port.DA-Not-Found-Profile and the value being the default destination to use.\n                   DA-Type is defined as follows:\n                   0x0 - Multicast\n                   0x1: Broadcast\n                   0x2: Unicast\n                   The reset Value for all lines is 0x0 with a mask value  ...",
    /* IHP_VIRTUAL_PORT_FEM_BIT_SELECT_TABLE */ "This table holds the bit select configuration for the PP-Port field extraction macro",
    /* IHP_VIRTUAL_PORT_FEM_FIELD_SELECT_MAP */ "This table holds the field select configuration for the PP-Port field extraction macro.",
    /* IHP_VIRTUAL_PORT_FEM_MAP_INDEX_TABLE */ "This table holds the action index configuration for the PP-Port field extraction macro",
    /* IHP_VIRTUAL_PORT_TABLE    */ "Maps the Virtual-Port to an In-PP-Port and Src-System-Port-ID.",
    /* IHP_VLAN_EDIT_PCP_DEI_MAP */ "Accessed by VLAN-Edit-PCP-DEI-Profile, PCP-DEI-Map-Key.",
    /* IHP_VLAN_PORT_MEMBERSHIP_TABLE */ "This table holds a bit per Initial-VID, PP-Port for the VLAN-Port membership. Table is accessed with Initial-VID, and each line holds one bit per pp-port.",
    /* IHP_VLAN_RANGE_COMPRESSION_TABLE */ "32 VLAN compression ranges",
    /* IHP_VRID_MY_MAC_CAM       */ "CAM interface for vrid based my-mac.",
    /* IHP_VRID_MY_MAC_MAP       */ "Usage determined by VridMyMacMode.",
    /* IHP_VRID_MY_MAC_TCAM      */ "TCAM interface for vrid based my-mac.",
    /* IHP_VRID_TO_VRF_MAP       */ "",
    /* IHP_VSI_HIGH_CFG          */ "This table assigns ProfileIndex and DaNotFoundDestination for high 16K VSIs - used by IRPP",
    /* IHP_VSI_HIGH_DA_NOT_FOUND_DESTINATION */ "This table assigns a destination per VSI, in case DA is not found, for VSIs above 4K. The table includes 28K entries, pointed by the high VSI. Each entry contains a Destination to be used if Destination Address is not found. This block is used by IRPP.",
    /* IHP_VSI_HIGH_MY_MAC       */ "This table assigns My-MAC-Valid and In-RIF-Valid per VSI, for VSIs above 4K. The table includes 28K entries, pointed by the high VSI. Each entry contains a valid indication for My-MAC and In-RIF, with each line covering 8 High-VSI values. This block is used both by IRPP and ERPP.",
    /* IHP_VSI_HIGH_PROFILE      */ "This table assigns My-MAC-Index per VSI, for VSIs above 4K. The table includes 28K entries, pointed by the high VSI. Each entry contains My-MAC index for High VSI (above 4K), which is used to map a My-MAC value to that VSI from the HighVsiMyMac table. This block is used by IRPP.",
    /* IHP_VSI_LOW_CFG_1         */ "his table assigns Topology-ID and My-MAC per VSI, for the low 4K VSIs. The table includes 4K entries, pointed by the low 4K VSI. Each entry contains the matching topology ID and My-MAC (the MAC address of this device). This block is used both by IRPP and ERPP.",
    /* IHP_VSI_LOW_CFG_2         */ "Contains VSI-Profile, FID-Class and DaNotFoundDestination for (VSI < 4K)\n                   Used by FLP",
    /* IHP_VSI_MY_MAC_VALID      */ "This table assigns MyMacValid, accessed by VSI14:3 - used by IRPP",
    /* IHP_VSI_PORT_MEMBERSHIP   */ "This table holds a bit per Initial-VID, PP-Port for the VLAN-Port membership. Table is accessed with Initial-VID, and each line holds one bit per pp-port.",
    /* IHP_VTT_1ST_KEY_PROG_SEL_TCAM */ "TCAM interface for 1st key program select.",
    /* IHP_VTT_1ST_LOOKUP_PROGRAM_0 */ "",
    /* IHP_VTT_1ST_LOOKUP_PROGRAM_1 */ "",
    /* IHP_VTT_2ND_KEY_PROG_SEL_TCAM */ "TCAM interface for 2nd key program select.",
    /* IHP_VTT_2ND_LOOKUP_PROGRAM_0 */ "",
    /* IHP_VTT_2ND_LOOKUP_PROGRAM_1 */ "",
    /* IHP_VTT_ETH_PACKET_FORMAT_ATTRIBUTES_TABLE */ "This table is accessed with inner Ethernet-Qualifer.Next-protocol\n                   and the result is Packet-format-code, Packet leaf-context and Next-protcol-size",
    /* IHP_VTT_FIFO_P_25_PIPE    */ "FIFO for  for Liftable lookup in the vlan translation stage",
    /* IHP_VTT_FIFO_P_40_P_50_PIPE */ "FIFO for packet data waiting for the DBs results\n                   From pipe-clk 40 to pipe-clk 50",
    /* IHP_VTT_FIFO_P_56_PIPE    */ "FIFO for  for Liftable lookup in the vlan translation stage",
    /* IHP_VTT_FIFO_P_8_P_18_PIPE */ "FIFO for packet data waiting for the DBs results\n                   From pipe-clk 8 to pipe-clk 18",
    /* IHP_VTT_FIFO_TT_ISA_RESULT */ "FIFO for  for the results from ISA in tunnel termination stage",
    /* IHP_VTT_FIFO_TT_ISB_RESULT */ "FIFO for  for the results from ISB intunnel termination stage",
    /* IHP_VTT_FIFO_TT_TCAM_RESULT */ "FIFO for  for the results from TCAM in tunnel termination stage",
    /* IHP_VTT_FIFO_VT_ISA_RESULT */ "FIFO for  for the results from ISA in vlan translation stage",
    /* IHP_VTT_FIFO_VT_ISB_RESULT */ "FIFO for  for the results from ISB in vlan translation stage",
    /* IHP_VTT_FIFO_VT_TCAM_RESULT */ "FIFO for  for the results from TCAM in vlan translation stage",
    /* IHP_VTT_IN_PP_PORT_CONFIG */ "This table holds VLAN translation and tunnel termination In-PP-Port configurations.",
    /* IHP_VTT_IN_PP_PORT_VLAN_CONFIG */ "This table hold the VLAN range compression selection per port.",
    /* IHP_VTT_IP_PACKET_FORMAT_ATTRIBUTES_TABLE */ "This table is accessed with Is-IPv4, inner IP-Qualifer.Next-protocol\n                   and the result is Packet-format-code, Packet leaf-context and Next-protcol-size",
    /* IHP_VTT_LLVP              */ "VTT VLAN processing table. Entry into table is  Parser-Leaf-Context (4), VLAN-Classification-Profile (3b), Packet-Format-Qualifier1.Ethernet-Tag-Format (5))",
    /* IHP_VTT_MPLS_LABEL_RANGE_TABLE */ "This table hold 8 Mpls Labels ranges and the range attributes.",
    /* IHP_VTT_MPLS_LABEL_TCAM   */ "MPLS Label Type TCAM\n                   This is the register array which is used by all 13 MPLS-Hdr-Parser for label matching",
    /* IHP_VTT_PATH_SELECT       */ "This table maps a  In-LIF.Protection-Pointer and  In-LIF.Protection-Path to a protection path selection. The table has 4K entries. The index to the table is the In-LIF.Protection-Pointer and  In-LIF.Protection-Path, with every eight entries being stored in a single register line, meaning the register address is set by  In-LIF.Protection-Pointer and  In-LIF.Protection-Path, and entry number in the register by  In-LIF.Protection-Pointer and  In-LIF.Protection-Path 2:0. Each entry indicates if an o ...",
    /* IHP_VTT_PP_PORT_TT_KEY_VAR */ "Per port tunnel termiantion key variable",
    /* IHP_VTT_PP_PORT_VSI_PROFILES */ "",
    /* IHP_VTT_PP_PORT_VT_KEY_VAR */ "Per port Vlan translation key variable",
    /* IHP_VTT_PS_PACKET_FORMAT_CODE_MAP_TABLE */ "This table is accessed with packet-format-code\n                   and the result is a new Packet-format-code which used in Vlan translation and tunnel termination program selection stage",
    /* IHP_VTT_PTC_CONFIG        */ "each line holds the values for 8 Port-Termination-Contexts.",
    /* ILB_BUFF_EXTEND           */ "Shared memory to store extra data",
    /* ILB_FPC_MEM               */ "Free Pointer Controller Memory",
    /* ILB_LBG_OUTPUT_FIFO       */ "Fall through output FIFO for LBG traffic",
    /* ILB_MEM_20000             */ "INTERNAL",
    /* ILB_MODEMS_FIFO           */ "Shared memory for all modems FIFOs",
    /* ILB_MODEMS_FIFO_LLM       */ "Shared memory for all modems FIFOs pointers (LLM)",
    /* ILB_NIF_RXI_MEM           */ "Fifo that holds the data received from NIF",
    /* ILB_PORT_CONFIG_TABLE     */ "Per port configuration table for LBG traffic.\n Map NIF traffic to ILB logic or bypass, according to the LbType.",
    /* ILB_VLAN_CONFIG_TABLE     */ "Map incoming Port and VLAN id to modems.\n Access this table using concatenation of the port with the 4 least significant bits of the VLAN id.\n Every entry packs 8 modems, to save on ECC bits",
    /* ILE_CORE_TX_FIFO_MEM      */ "ILKN Tx data FIFO memory for core data segment n.",
    /* ILE_ILKN_CORE_RX_DESKEW_MEM */ "ILKN CORE - replacing flops with mems. For RX deskew per lane memory.",
    /* ILE_ILKN_CORE_RX_RT_MEM   */ "ILKN CORE - replacing flops with mems. For RX Retransmit feature - per segment",
    /* ILE_PORT_0_CPU_ACCESS     */ "This is NOT A MEMORY!!!\n This is the CPU access bus to ILKN port0 (the registers are implemented inside the core).",
    /* ILE_PORT_1_CPU_ACCESS     */ "This is NOT A MEMORY!!!\n This is the CPU access bus to ILKN port1 (the registers are implemented inside the core).",
    /* ILE_RX_STATS_MEM_0        */ "Statistics memory for the ILKN RX port n. Entry per channel. Each entry includes bytes, packets and errors counter. The read must be done via the ILKN core, because some of the bits are held in FF in the code (1b MSB and lower lsbs).",
    /* ILE_TX_ELK_RXI            */ "tx elk RXI memory",
    /* ILE_TX_STATS_MEM_0        */ "Statistics memory for the ILKN TX portn. Entry per channel. Each entry includes bytes, packets and errors counter. The read must be done via the ILKN core, because some of the bits are held in FF in the code (1b MSB and lower lsbs).",
    /* ILKN_PMH_CORE_TX_FIFO_MEM */ "ILKN Tx data FIFO memory for core data segment n.",
    /* ILKN_PMH_PORT_0_CPU_ACCESS */ "This is NOT A MEMORY!!!\n                   This is the CPU access bus to ILKN port0 (the registers are implemented inside the core).",
    /* ILKN_PMH_PORT_1_CPU_ACCESS */ "This is NOT A MEMORY!!!\n                   This is the CPU access bus to ILKN port1 (the registers are implemented inside the core).",
    /* ILKN_PMH_RX_STATS_MEM     */ "Statistics memory for the ILKN RX port n. Entry per channel. Each entry includes bytes, packets and errors counter. The read must be done via the ILKN core, because some of the bits are held in FF in the code (1b MSB and lower lsbs).",
    /* ILKN_PMH_TX_STATS_MEM     */ "Statistics memory for the ILKN TX portn. Entry per channel. Each entry includes bytes, packets and errors counter. The read must be done via the ILKN core, because some of the bits are held in FF in the code (1b MSB and lower lsbs).",
    /* ILKN_PML_CORE_TX_FIFO_MEM */ "ILKN Tx data FIFO memory for core data segment n.",
    /* ILKN_PML_PORT_0_CPU_ACCESS */ "This is NOT A MEMORY!!!\n                   This is the CPU access bus to ILKN port0 (the registers are implemented inside the core).",
    /* ILKN_PML_PORT_1_CPU_ACCESS */ "This is NOT A MEMORY!!!\n                   This is the CPU access bus to ILKN port1 (the registers are implemented inside the core).",
    /* ILKN_PML_RX_STATS_MEM     */ "Statistics memory for the ILKN RX port n. Entry per channel. Each entry includes bytes, packets and errors counter. The read must be done via the ILKN core, because some of the bits are held in FF in the code (1b MSB and lower lsbs).",
    /* ILKN_PML_TX_STATS_MEM     */ "Statistics memory for the ILKN TX portn. Entry per channel. Each entry includes bytes, packets and errors counter. The read must be done via the ILKN core, because some of the bits are held in FF in the code (1b MSB and lower lsbs).",
    /* IL_CHANNEL_REMAP0         */ "Maps Interlaken channels to source port IDs",
    /* IL_CHANNEL_REMAP1         */ "Maps Interlaken channels to source port IDs",
    /* IL_STAT_MEM_0             */ "RX Stat Mem0",
    /* IL_STAT_MEM_1             */ "RX Stat Mem1",
    /* IL_STAT_MEM_2             */ "RX Stat Mem 2",
    /* IL_STAT_MEM_3             */ "TX Stat Mem3",
    /* IL_STAT_MEM_4             */ "TX Stat Mem 4",
    /* IMEM                      */ "Instruction Memory",
    /* IMEM_PMEM_DMA             */ "Provides a single table to access IMEM and PMEM[0-23]",
    /* IMIRROR_BITMAP            */ "Alternate Bitmap/path to MTP for Mirroring, FeatureSpecific-Ethernet.",
    /* IMP_CONTEXT_COLOR         */ "Color memory per context",
    /* IMP_CONTEXT_SIZE_HIGH     */ "Packet size memory per context.\n Higher 138 values\n (total of 330 contexts in Jericho)",
    /* IMP_CONTEXT_SIZE_LOW      */ "Packet size memory per context.\n Lower 192 values",
    /* IMP_MCDA_DYNAMIC          */ "MCD-A - dynamic data\n Notes:\n - Each entry map 4 meters to profiles which are processed simultaneously.\n - Indexes 0 - 32k-1",
    /* IMP_MCDA_HEADER_APPEND_SIZE_PTR_MAP */ "MCDA - Mapping Header Append Size Ptr (Out LIF Adjust Profile).\n Value = -128, +127\n Notes:\n - Each entry has 4 mappings\n - Indexes 0 - 256-1",
    /* IMP_MCDA_IN_PP_PORT_MAP   */ "MCDA - Mapping In-PP-Port(8) into In-PP-Port-Profile(3)\n Notes:\n - Each entry has 4 mappings\n - Indexes 0 - 256-1",
    /* IMP_MCDA_IN_PP_PORT_MAP_AND_MTR_PRF_MAP */ "MCDA - Mapping In-PP-Port-Profile(6) into In-PP-Port-Size-Delta(8)\n Values = -128, +127\n Notes:\n - Each entry has 4 mappings\n - Indexes 0 - 256-1",
    /* IMP_MCDA_PCUC             */ "MCDA - Update color memory per context.\n Holds the LB (color) that was updated on SOP.",
    /* IMP_MCDA_PRFCFG_0         */ "MCD-A - profile configuration.\n First copy\n Both copies should be initialized the same",
    /* IMP_MCDA_PRFCFG_1         */ "MCD-A - profile configuration.\n Second copy\n Both copies should be initialized the same",
    /* IMP_MCDA_PRFCFG_SHARING_DIS */ "MCD-A - profile configuration.\n This table defines the profile config memory fields when the profile Sharing Flag is reset.",
    /* IMP_MCDA_PRFCFG_SHARING_EN */ "MCD-A - profile configuration.\n This table defines the profile config memory fields when the profile SharingFlag is set.",
    /* IMP_MCDA_PRFSEL           */ "MCD-A - index to profile mapping.\n Notes:\n - Each entry map 4 meters to profiles which are processed simultaneously.\n - Indexes 0 - 32k-1",
    /* IMP_MCDB_DYNAMIC          */ "MCD-B - dynamic data\n Notes:\n - Each entry map 4 meters to profiles which are processed simultaneously.\n - Indexes 0 - 32k-1",
    /* IMP_MCDB_HEADER_APPEND_SIZE_PTR_MAP */ "MCDB - Mapping Header Append Size Ptr (Out LIF Adjust Profile).\n Value = -128, +127\n Notes:\n - Each entry has 4 mappings\n - Indexes 0 - 256-1",
    /* IMP_MCDB_IN_PP_PORT_MAP   */ "MCDB - Mapping In-PP-Port(8) into In-PP-Port-Profile(3)\n Notes:\n - Each entry has 4 mappings\n - Indexes 0 - 256-1",
    /* IMP_MCDB_IN_PP_PORT_MAP_AND_MTR_PRF_MAP */ "MCDB- Mapping In-PP-Port-Profile(6) into In-PP-Port-Size-Delta(8)\n Values = -128, +127\n Notes:\n - Each entry has 4 mappings\n - Indexes 0 - 256-1",
    /* IMP_MCDB_PCUC             */ "MCDB - Update color memory per context.\n Holds the LB (color) that was updated on SOP.",
    /* IMP_MCDB_PRFCFG_0         */ "MCD-B - profile configuration.\n First copy\n Both copies should be initialized the same",
    /* IMP_MCDB_PRFCFG_1         */ "MCD-B - profile configuration.\n Second copy\n Both copies should be initialized the same",
    /* IMP_MCDB_PRFCFG_SHARING_DIS */ "MCD-B - profile configuration.\n This table defines the profile config memory fields when the profile Sharing Flag is reset.",
    /* IMP_MCDB_PRFCFG_SHARING_EN */ "MCD-B - profile configuration.\n This table defines the profile config memory fields when the profile SharingFlag is set.",
    /* IMP_MCDB_PRFSEL           */ "MCD-B - index to profile mapping.\n Notes:\n - Each entry map 4 meters to profiles which are processed simultaneously.\n - Indexes 0 - 32k-1",
    /* IMP_PCD_MAP               */ "Parallel color decision mapping table (64 entries x 4)\n Address (6) to this table is:\n On Dual mode:\n - bits 5:4 - MCD-B color decision\n - bits 3 - MCD-B other bucket has credits\n - bits 2:1 - MCD-A color decision\n - bits 0 - MCD-A other bucket has credits\n Notes:\n - If color decision is yellow -> other bucket is based on the CBL. Otherwise EBL.\n - This table is used in all configurations (parallel / serial) except for when both ptrs are invalid (=bypass)",
    /* IM_MTP_INDEX              */ "Ingress Mirror to Port Table",
    /* INCTRLBCASTPKTS           */ "Receive Broadcast Frame Counter - Implemented in RxPacketType Memory",
    /* INCTRLBYT                 */ "Receive Frame Octet Counter",
    /* INCTRLDISCPKTS            */ "Receive Discarded Frame Counter - Implemented in isec_RxErrDscrdsPkts",
    /* INCTRLERRPKTS             */ "Receive Error Frame Counter - Implemented in isec_RxErrDscrdsPkts",
    /* INCTRLMCASTPKTS           */ "Receive Multicast Frame Counter - Implemented in RxPacketType Memory",
    /* INCTRLUCASTPKTS           */ "Receive Unicast Frame Counter - Implemented in RxPacketType Memory",
    /* INGRESS_OAM_OPCODE_GROUP  */ ".",
    /* ING_1588_INGRESS_CTRL     */ "ING_1588_INGRESS_CTRL. Indicates various 1588 status messages for each ingress port.",
    /* ING_1588_TS_DISPOSITION_PROFILE_TABLE */ "",
    /* ING_ACTIVE_L3_IIF_PROFILE */ "Ingress Active L3_IIF Profile table.",
    /* ING_DEST_PORT_ENABLE      */ "A last-stage master switch which can block packets from any traffic source including SOBMH. Works for all egress ports (including CPU port)",
    /* ING_DNAT_ADDRESS_TYPE     */ "Ingress DNAT Address Type table.",
    /* ING_DNAT_ADDRESS_TYPE_ECC */ "ECC Table for Ingress DNAT Address Type Table.",
    /* ING_DVP_2_TABLE           */ "Used to generate an ECMP_Group/NHI from the DVP value and other DVP properties.",
    /* ING_DVP_TABLE             */ "Used to generte a NHI from the DVP value and other DVP properties.",
    /* ING_EGRMSKBMAP            */ "Ingress Block Mask, FeatureSpecific-Ethernet.",
    /* ING_EN_EFILTER_BITMAP     */ "Ingress Enable EFilter Bitmap Register.",
    /* ING_ETAG_PCP_MAPPING      */ "Mapping table for Internal Priority and CNG to ETAG PCP/DE.",
    /* ING_EXP_TO_IP_ECN_MAPPING */ "Map MPLS EXP to IP ECN. Used in MPLS tunnel termination flows.",
    /* ING_FC_HEADER_TYPE        */ "FCoE Header Type.",
    /* ING_FLEX_CTR_COUNTER_TABLE_0 */ "Counter Table for flexible counter updates",
    /* ING_FLEX_CTR_COUNTER_TABLE_1 */ "Counter Table for flexible counter updates",
    /* ING_FLEX_CTR_COUNTER_TABLE_2 */ "Counter Table for flexible counter updates",
    /* ING_FLEX_CTR_COUNTER_TABLE_3 */ "Counter Table for flexible counter updates",
    /* ING_FLEX_CTR_COUNTER_TABLE_4 */ "Counter Table for flexible counter updates",
    /* ING_FLEX_CTR_COUNTER_TABLE_5 */ "Counter Table for flexible counter updates",
    /* ING_FLEX_CTR_COUNTER_TABLE_6 */ "Counter Table for flexible counter updates",
    /* ING_FLEX_CTR_COUNTER_TABLE_7 */ "Counter Table for flexible counter updates",
    /* ING_FLEX_CTR_COUNTER_TABLE_8 */ "Counter Table for flexible counter updates",
    /* ING_FLEX_CTR_COUNTER_TABLE_9 */ "Counter Table for flexible counter updates",
    /* ING_FLEX_CTR_COUNTER_TABLE_10 */ "Counter Table for flexible counter updates",
    /* ING_FLEX_CTR_COUNTER_TABLE_11 */ "Counter Table for flexible counter updates",
    /* ING_FLEX_CTR_COUNTER_TABLE_12 */ "Counter Table for flexible counter updates",
    /* ING_FLEX_CTR_COUNTER_TABLE_13 */ "Counter Table for flexible counter updates",
    /* ING_FLEX_CTR_COUNTER_TABLE_14 */ "Counter Table for flexible counter updates",
    /* ING_FLEX_CTR_COUNTER_TABLE_15 */ "Counter Table for flexible counter updates",
    /* ING_FLEX_CTR_COUNTER_TABLE_16 */ "Counter Table for flexible counter updates. These tables are dedicated for IFP Updates.",
    /* ING_FLEX_CTR_COUNTER_TABLE_17 */ "Counter Table for flexible counter updates. These tables are dedicated for IFP Updates.",
    /* ING_FLEX_CTR_COUNTER_TABLE_18 */ "Counter Table for flexible counter updates. These tables are dedicated for IFP Updates.",
    /* ING_FLEX_CTR_COUNTER_TABLE_19 */ "Counter Table for flexible counter updates. These tables are dedicated for IFP Updates.",
    /* ING_FLEX_CTR_COUNTER_TABLE_0_PIPE0 */ "Counter Table for flexible counter updates. All sources in the Ingress Pipeline including the IFP can update these counters.",
    /* ING_FLEX_CTR_COUNTER_TABLE_0_PIPE1 */ "Counter Table for flexible counter updates. All sources in the Ingress Pipeline including the IFP can update these counters.",
    /* ING_FLEX_CTR_COUNTER_TABLE_0_PIPE2 */ "Counter Table for flexible counter updates. All sources in the Ingress Pipeline including the IFP can update these counters.",
    /* ING_FLEX_CTR_COUNTER_TABLE_0_PIPE3 */ "Counter Table for flexible counter updates. All sources in the Ingress Pipeline including the IFP can update these counters.",
    /* ING_FLEX_CTR_COUNTER_TABLE_0_X */ "Counter Table for flexible counter updates",
    /* ING_FLEX_CTR_COUNTER_TABLE_0_Y */ "Counter Table for flexible counter updates",
    /* ING_FLEX_CTR_COUNTER_TABLE_10_PIPE0 */ "Counter Table for flexible counter updates. All sources in the Ingress Pipeline including the IFP can update these counters.",
    /* ING_FLEX_CTR_COUNTER_TABLE_10_PIPE1 */ "Counter Table for flexible counter updates. All sources in the Ingress Pipeline including the IFP can update these counters.",
    /* ING_FLEX_CTR_COUNTER_TABLE_10_PIPE2 */ "Counter Table for flexible counter updates. All sources in the Ingress Pipeline including the IFP can update these counters.",
    /* ING_FLEX_CTR_COUNTER_TABLE_10_PIPE3 */ "Counter Table for flexible counter updates. All sources in the Ingress Pipeline including the IFP can update these counters.",
    /* ING_FLEX_CTR_COUNTER_TABLE_11_PIPE0 */ "Counter Table for flexible counter updates. All sources in the Ingress Pipeline including the IFP can update these counters.",
    /* ING_FLEX_CTR_COUNTER_TABLE_11_PIPE1 */ "Counter Table for flexible counter updates. All sources in the Ingress Pipeline including the IFP can update these counters.",
    /* ING_FLEX_CTR_COUNTER_TABLE_11_PIPE2 */ "Counter Table for flexible counter updates. All sources in the Ingress Pipeline including the IFP can update these counters.",
    /* ING_FLEX_CTR_COUNTER_TABLE_11_PIPE3 */ "Counter Table for flexible counter updates. All sources in the Ingress Pipeline including the IFP can update these counters.",
    /* ING_FLEX_CTR_COUNTER_TABLE_12_PIPE0 */ "Counter Table for flexible counter updates. These tables are dedicated for IFP Updates.",
    /* ING_FLEX_CTR_COUNTER_TABLE_12_PIPE1 */ "Counter Table for flexible counter updates. These tables are dedicated for IFP Updates.",
    /* ING_FLEX_CTR_COUNTER_TABLE_12_PIPE2 */ "Counter Table for flexible counter updates. These tables are dedicated for IFP Updates.",
    /* ING_FLEX_CTR_COUNTER_TABLE_12_PIPE3 */ "Counter Table for flexible counter updates. These tables are dedicated for IFP Updates.",
    /* ING_FLEX_CTR_COUNTER_TABLE_13_PIPE0 */ "Counter Table for flexible counter updates. These tables are dedicated for IFP Updates.",
    /* ING_FLEX_CTR_COUNTER_TABLE_13_PIPE1 */ "Counter Table for flexible counter updates. These tables are dedicated for IFP Updates.",
    /* ING_FLEX_CTR_COUNTER_TABLE_13_PIPE2 */ "Counter Table for flexible counter updates. These tables are dedicated for IFP Updates.",
    /* ING_FLEX_CTR_COUNTER_TABLE_13_PIPE3 */ "Counter Table for flexible counter updates. These tables are dedicated for IFP Updates.",
    /* ING_FLEX_CTR_COUNTER_TABLE_14_PIPE0 */ "Counter Table for flexible counter updates. These tables are dedicated for IFP Updates.",
    /* ING_FLEX_CTR_COUNTER_TABLE_14_PIPE1 */ "Counter Table for flexible counter updates. These tables are dedicated for IFP Updates.",
    /* ING_FLEX_CTR_COUNTER_TABLE_14_PIPE2 */ "Counter Table for flexible counter updates. These tables are dedicated for IFP Updates.",
    /* ING_FLEX_CTR_COUNTER_TABLE_14_PIPE3 */ "Counter Table for flexible counter updates. These tables are dedicated for IFP Updates.",
    /* ING_FLEX_CTR_COUNTER_TABLE_15_PIPE0 */ "Counter Table for flexible counter updates. These tables are dedicated for IFP Updates.",
    /* ING_FLEX_CTR_COUNTER_TABLE_15_PIPE1 */ "Counter Table for flexible counter updates. These tables are dedicated for IFP Updates.",
    /* ING_FLEX_CTR_COUNTER_TABLE_15_PIPE2 */ "Counter Table for flexible counter updates. These tables are dedicated for IFP Updates.",
    /* ING_FLEX_CTR_COUNTER_TABLE_15_PIPE3 */ "Counter Table for flexible counter updates. These tables are dedicated for IFP Updates.",
    /* ING_FLEX_CTR_COUNTER_TABLE_16_PIPE0 */ "Counter Table for flexible counter updates. These tables are dedicated for IFP Updates.",
    /* ING_FLEX_CTR_COUNTER_TABLE_16_PIPE1 */ "Counter Table for flexible counter updates. These tables are dedicated for IFP Updates.",
    /* ING_FLEX_CTR_COUNTER_TABLE_16_PIPE2 */ "Counter Table for flexible counter updates. These tables are dedicated for IFP Updates.",
    /* ING_FLEX_CTR_COUNTER_TABLE_16_PIPE3 */ "Counter Table for flexible counter updates. These tables are dedicated for IFP Updates.",
    /* ING_FLEX_CTR_COUNTER_TABLE_17_PIPE0 */ "Counter Table for flexible counter updates. These tables are dedicated for IFP Updates.",
    /* ING_FLEX_CTR_COUNTER_TABLE_17_PIPE1 */ "Counter Table for flexible counter updates. These tables are dedicated for IFP Updates.",
    /* ING_FLEX_CTR_COUNTER_TABLE_17_PIPE2 */ "Counter Table for flexible counter updates. These tables are dedicated for IFP Updates.",
    /* ING_FLEX_CTR_COUNTER_TABLE_17_PIPE3 */ "Counter Table for flexible counter updates. These tables are dedicated for IFP Updates.",
    /* ING_FLEX_CTR_COUNTER_TABLE_18_PIPE0 */ "Counter Table for flexible counter updates. These tables are dedicated for IFP Updates.",
    /* ING_FLEX_CTR_COUNTER_TABLE_18_PIPE1 */ "Counter Table for flexible counter updates. These tables are dedicated for IFP Updates.",
    /* ING_FLEX_CTR_COUNTER_TABLE_18_PIPE2 */ "Counter Table for flexible counter updates. These tables are dedicated for IFP Updates.",
    /* ING_FLEX_CTR_COUNTER_TABLE_18_PIPE3 */ "Counter Table for flexible counter updates. These tables are dedicated for IFP Updates.",
    /* ING_FLEX_CTR_COUNTER_TABLE_19_PIPE0 */ "Counter Table for flexible counter updates. These tables are dedicated for IFP Updates.",
    /* ING_FLEX_CTR_COUNTER_TABLE_19_PIPE1 */ "Counter Table for flexible counter updates. These tables are dedicated for IFP Updates.",
    /* ING_FLEX_CTR_COUNTER_TABLE_19_PIPE2 */ "Counter Table for flexible counter updates. These tables are dedicated for IFP Updates.",
    /* ING_FLEX_CTR_COUNTER_TABLE_19_PIPE3 */ "Counter Table for flexible counter updates. These tables are dedicated for IFP Updates.",
    /* ING_FLEX_CTR_COUNTER_TABLE_1_PIPE0 */ "Counter Table for flexible counter updates. All sources in the Ingress Pipeline including the IFP can update these counters.",
    /* ING_FLEX_CTR_COUNTER_TABLE_1_PIPE1 */ "Counter Table for flexible counter updates. All sources in the Ingress Pipeline including the IFP can update these counters.",
    /* ING_FLEX_CTR_COUNTER_TABLE_1_PIPE2 */ "Counter Table for flexible counter updates. All sources in the Ingress Pipeline including the IFP can update these counters.",
    /* ING_FLEX_CTR_COUNTER_TABLE_1_PIPE3 */ "Counter Table for flexible counter updates. All sources in the Ingress Pipeline including the IFP can update these counters.",
    /* ING_FLEX_CTR_COUNTER_TABLE_1_X */ "Counter Table for flexible counter updates",
    /* ING_FLEX_CTR_COUNTER_TABLE_1_Y */ "Counter Table for flexible counter updates",
    /* ING_FLEX_CTR_COUNTER_TABLE_2_PIPE0 */ "Counter Table for flexible counter updates. All sources in the Ingress Pipeline including the IFP can update these counters.",
    /* ING_FLEX_CTR_COUNTER_TABLE_2_PIPE1 */ "Counter Table for flexible counter updates. All sources in the Ingress Pipeline including the IFP can update these counters.",
    /* ING_FLEX_CTR_COUNTER_TABLE_2_PIPE2 */ "Counter Table for flexible counter updates. All sources in the Ingress Pipeline including the IFP can update these counters.",
    /* ING_FLEX_CTR_COUNTER_TABLE_2_PIPE3 */ "Counter Table for flexible counter updates. All sources in the Ingress Pipeline including the IFP can update these counters.",
    /* ING_FLEX_CTR_COUNTER_TABLE_2_X */ "Counter Table for flexible counter updates",
    /* ING_FLEX_CTR_COUNTER_TABLE_2_Y */ "Counter Table for flexible counter updates",
    /* ING_FLEX_CTR_COUNTER_TABLE_3_PIPE0 */ "Counter Table for flexible counter updates. All sources in the Ingress Pipeline including the IFP can update these counters.",
    /* ING_FLEX_CTR_COUNTER_TABLE_3_PIPE1 */ "Counter Table for flexible counter updates. All sources in the Ingress Pipeline including the IFP can update these counters.",
    /* ING_FLEX_CTR_COUNTER_TABLE_3_PIPE2 */ "Counter Table for flexible counter updates. All sources in the Ingress Pipeline including the IFP can update these counters.",
    /* ING_FLEX_CTR_COUNTER_TABLE_3_PIPE3 */ "Counter Table for flexible counter updates. All sources in the Ingress Pipeline including the IFP can update these counters.",
    /* ING_FLEX_CTR_COUNTER_TABLE_3_X */ "Counter Table for flexible counter updates",
    /* ING_FLEX_CTR_COUNTER_TABLE_3_Y */ "Counter Table for flexible counter updates",
    /* ING_FLEX_CTR_COUNTER_TABLE_4_PIPE0 */ "Counter Table for flexible counter updates. All sources in the Ingress Pipeline including the IFP can update these counters.",
    /* ING_FLEX_CTR_COUNTER_TABLE_4_PIPE1 */ "Counter Table for flexible counter updates. All sources in the Ingress Pipeline including the IFP can update these counters.",
    /* ING_FLEX_CTR_COUNTER_TABLE_4_PIPE2 */ "Counter Table for flexible counter updates. All sources in the Ingress Pipeline including the IFP can update these counters.",
    /* ING_FLEX_CTR_COUNTER_TABLE_4_PIPE3 */ "Counter Table for flexible counter updates. All sources in the Ingress Pipeline including the IFP can update these counters.",
    /* ING_FLEX_CTR_COUNTER_TABLE_4_X */ "Counter Table for flexible counter updates",
    /* ING_FLEX_CTR_COUNTER_TABLE_4_Y */ "Counter Table for flexible counter updates",
    /* ING_FLEX_CTR_COUNTER_TABLE_5_PIPE0 */ "Counter Table for flexible counter updates. All sources in the Ingress Pipeline including the IFP can update these counters.",
    /* ING_FLEX_CTR_COUNTER_TABLE_5_PIPE1 */ "Counter Table for flexible counter updates. All sources in the Ingress Pipeline including the IFP can update these counters.",
    /* ING_FLEX_CTR_COUNTER_TABLE_5_PIPE2 */ "Counter Table for flexible counter updates. All sources in the Ingress Pipeline including the IFP can update these counters.",
    /* ING_FLEX_CTR_COUNTER_TABLE_5_PIPE3 */ "Counter Table for flexible counter updates. All sources in the Ingress Pipeline including the IFP can update these counters.",
    /* ING_FLEX_CTR_COUNTER_TABLE_5_X */ "Counter Table for flexible counter updates",
    /* ING_FLEX_CTR_COUNTER_TABLE_5_Y */ "Counter Table for flexible counter updates",
    /* ING_FLEX_CTR_COUNTER_TABLE_6_PIPE0 */ "Counter Table for flexible counter updates. All sources in the Ingress Pipeline including the IFP can update these counters.",
    /* ING_FLEX_CTR_COUNTER_TABLE_6_PIPE1 */ "Counter Table for flexible counter updates. All sources in the Ingress Pipeline including the IFP can update these counters.",
    /* ING_FLEX_CTR_COUNTER_TABLE_6_PIPE2 */ "Counter Table for flexible counter updates. All sources in the Ingress Pipeline including the IFP can update these counters.",
    /* ING_FLEX_CTR_COUNTER_TABLE_6_PIPE3 */ "Counter Table for flexible counter updates. All sources in the Ingress Pipeline including the IFP can update these counters.",
    /* ING_FLEX_CTR_COUNTER_TABLE_6_X */ "Counter Table for flexible counter updates",
    /* ING_FLEX_CTR_COUNTER_TABLE_6_Y */ "Counter Table for flexible counter updates",
    /* ING_FLEX_CTR_COUNTER_TABLE_7_PIPE0 */ "Counter Table for flexible counter updates. All sources in the Ingress Pipeline including the IFP can update these counters.",
    /* ING_FLEX_CTR_COUNTER_TABLE_7_PIPE1 */ "Counter Table for flexible counter updates. All sources in the Ingress Pipeline including the IFP can update these counters.",
    /* ING_FLEX_CTR_COUNTER_TABLE_7_PIPE2 */ "Counter Table for flexible counter updates. All sources in the Ingress Pipeline including the IFP can update these counters.",
    /* ING_FLEX_CTR_COUNTER_TABLE_7_PIPE3 */ "Counter Table for flexible counter updates. All sources in the Ingress Pipeline including the IFP can update these counters.",
    /* ING_FLEX_CTR_COUNTER_TABLE_7_X */ "Counter Table for flexible counter updates",
    /* ING_FLEX_CTR_COUNTER_TABLE_7_Y */ "Counter Table for flexible counter updates",
    /* ING_FLEX_CTR_COUNTER_TABLE_8_PIPE0 */ "Counter Table for flexible counter updates. All sources in the Ingress Pipeline including the IFP can update these counters.",
    /* ING_FLEX_CTR_COUNTER_TABLE_8_PIPE1 */ "Counter Table for flexible counter updates. All sources in the Ingress Pipeline including the IFP can update these counters.",
    /* ING_FLEX_CTR_COUNTER_TABLE_8_PIPE2 */ "Counter Table for flexible counter updates. All sources in the Ingress Pipeline including the IFP can update these counters.",
    /* ING_FLEX_CTR_COUNTER_TABLE_8_PIPE3 */ "Counter Table for flexible counter updates. All sources in the Ingress Pipeline including the IFP can update these counters.",
    /* ING_FLEX_CTR_COUNTER_TABLE_9_PIPE0 */ "Counter Table for flexible counter updates. All sources in the Ingress Pipeline including the IFP can update these counters.",
    /* ING_FLEX_CTR_COUNTER_TABLE_9_PIPE1 */ "Counter Table for flexible counter updates. All sources in the Ingress Pipeline including the IFP can update these counters.",
    /* ING_FLEX_CTR_COUNTER_TABLE_9_PIPE2 */ "Counter Table for flexible counter updates. All sources in the Ingress Pipeline including the IFP can update these counters.",
    /* ING_FLEX_CTR_COUNTER_TABLE_9_PIPE3 */ "Counter Table for flexible counter updates. All sources in the Ingress Pipeline including the IFP can update these counters.",
    /* ING_FLEX_CTR_OFFSET_TABLE_0 */ "The actual offset used to index the counter table in the first counter pool is stored in this table",
    /* ING_FLEX_CTR_OFFSET_TABLE_1 */ "The actual offset used to index the counter table in the first counter pool is stored in this table",
    /* ING_FLEX_CTR_OFFSET_TABLE_2 */ "The actual offset used to index the counter table in the first counter pool is stored in this table",
    /* ING_FLEX_CTR_OFFSET_TABLE_3 */ "The actual offset used to index the counter table in the first counter pool is stored in this table",
    /* ING_FLEX_CTR_OFFSET_TABLE_4 */ "The actual offset used to index the counter table in the first counter pool is stored in this table",
    /* ING_FLEX_CTR_OFFSET_TABLE_5 */ "The actual offset used to index the counter table in the first counter pool is stored in this table",
    /* ING_FLEX_CTR_OFFSET_TABLE_6 */ "The actual offset used to index the counter table in the first counter pool is stored in this table",
    /* ING_FLEX_CTR_OFFSET_TABLE_7 */ "The actual offset used to index the counter table in the first counter pool is stored in this table",
    /* ING_FLEX_CTR_OFFSET_TABLE_8 */ "The actual offset used to index the counter table in the first counter pool is stored in this table",
    /* ING_FLEX_CTR_OFFSET_TABLE_9 */ "The actual offset used to index the counter table in the first counter pool is stored in this table",
    /* ING_FLEX_CTR_OFFSET_TABLE_10 */ "The actual offset used to index the counter table in the first counter pool is stored in this table",
    /* ING_FLEX_CTR_OFFSET_TABLE_11 */ "The actual offset used to index the counter table in the first counter pool is stored in this table",
    /* ING_FLEX_CTR_OFFSET_TABLE_12 */ "The actual offset used to index the counter table in the first counter pool is stored in this table",
    /* ING_FLEX_CTR_OFFSET_TABLE_13 */ "The actual offset used to index the counter table in the first counter pool is stored in this table",
    /* ING_FLEX_CTR_OFFSET_TABLE_14 */ "The actual offset used to index the counter table in the first counter pool is stored in this table",
    /* ING_FLEX_CTR_OFFSET_TABLE_15 */ "The actual offset used to index the counter table in the first counter pool is stored in this table",
    /* ING_FLEX_CTR_OFFSET_TABLE_16 */ "The actual offset used to index the counter table in the first counter pool is stored in this table",
    /* ING_FLEX_CTR_OFFSET_TABLE_17 */ "The actual offset used to index the counter table in the first counter pool is stored in this table",
    /* ING_FLEX_CTR_OFFSET_TABLE_18 */ "The actual offset used to index the counter table in the first counter pool is stored in this table",
    /* ING_FLEX_CTR_OFFSET_TABLE_19 */ "The actual offset used to index the counter table in the first counter pool is stored in this table",
    /* ING_FLEX_CTR_PKT_PRI_MAP  */ "PKT PRI mapping function for ingress flex counters",
    /* ING_FLEX_CTR_PKT_RES_MAP  */ "PKT_RES mapping function for ingress flex counters",
    /* ING_FLEX_CTR_PORT_MAP     */ "PORT mapping function for ingress flex counters",
    /* ING_FLEX_CTR_PRI_CNG_MAP  */ "PRI & CNG mapping function for ingress flex counters",
    /* ING_FLEX_CTR_TOS_MAP      */ "TOS mapping function for ingress flex counters",
    /* ING_HIGIG_TRUNK_OVERRIDE_PROFILE */ "Higig Trunk Override Profile Pointer.",
    /* ING_IDB_TO_DEVICE_PORT_NUMBER_MAPPING_TABLE */ "Ingress IDB to Device Port Number Mapping Table. Indexed by the IDB port number, and provides the corresponding device port number.",
    /* ING_IDB_TO_DEVICE_PORT_NUMBER_MAPPING_TABLE_PIPE0 */ "Ingress IDB to Device Port Number Mapping Table. Indexed by the IDB port number, and provides the corresponding device port number.",
    /* ING_IDB_TO_DEVICE_PORT_NUMBER_MAPPING_TABLE_PIPE1 */ "Ingress IDB to Device Port Number Mapping Table. Indexed by the IDB port number, and provides the corresponding device port number.",
    /* ING_IDB_TO_DEVICE_PORT_NUMBER_MAPPING_TABLE_PIPE2 */ "Ingress IDB to Device Port Number Mapping Table. Indexed by the IDB port number, and provides the corresponding device port number.",
    /* ING_IDB_TO_DEVICE_PORT_NUMBER_MAPPING_TABLE_PIPE3 */ "Ingress IDB to Device Port Number Mapping Table. Indexed by the IDB port number, and provides the corresponding device port number.",
    /* ING_IPFIX_DSCP_XLATE_TABLE */ "IPFIX DSCP Translation Table -- Address = {IP_DSCP_PROFILE[1:0], pkt_dscp[5:0]}",
    /* ING_IPFIX_EOP_BUFFER      */ "IPFIX EOP BUFFER - to save info per-port from SOP cells to EOP cells.",
    /* ING_IPFIX_EXPORT_FIFO     */ "Ingress IPFIX Export FIFO",
    /* ING_IPFIX_FLOW_RATE_METER_TABLE */ "IPFIX Flow Rate Meter Table",
    /* ING_IPFIX_IPV4_MASK_SET_A */ "IPFIX IPv4 Address Masks",
    /* ING_IPFIX_IPV4_MASK_SET_B */ "IPFIX IPv4 Address Masks",
    /* ING_IPFIX_IPV6_MASK_SET_A */ "IPFIX IPv6 Address Masks",
    /* ING_IPFIX_IPV6_MASK_SET_B */ "IPFIX IPv6 Address Masks",
    /* ING_IPFIX_PROFILE         */ "Ingress IPFIX Per-Port Profile Pointers, FeatureSpecific-FP",
    /* ING_IPFIX_SESSION_TABLE   */ "Ingress IPFIX Session Table",
    /* ING_IPV6_MC_RESERVED_ADDRESS */ "Ingress IPV6 Multicast Reserved Address table.",
    /* ING_L3_NEXT_HOP           */ "Reduced version of L3_NEXT_HOP table.  Used to provide just mod and port/TGID",
    /* ING_L3_NEXT_HOP_A         */ "Physical view of first copy of ING_L3_NEXT_HOP - contains all fields.",
    /* ING_L3_NEXT_HOP_ATTRIBUTE_1 */ "index by ING_L3_NEXT_HOP_ATTRIBUTE_1_INDEX.INDEX or ING_L3_NEXT_HOP.DVP_ATTRIBUTE_1_INDEX .",
    /* ING_L3_NEXT_HOP_ATTRIBUTE_1_INDEX */ "index by ING_L3_NEXT_HOP.L3_OIF or ipmc_index or VID.",
    /* ING_L3_NEXT_HOP_B         */ "Physical view of second copy of ING_L3_NEXT_HOP - contains a subset of fields.",
    /* ING_LM_COUNTER_CONTROL    */ "Per opcode OAM LM packets counter control.",
    /* ING_MOD_MAP_TABLE         */ "Ingress Module Remapping Table",
    /* ING_MPLS_ENTRY_ACTION_TABLE_A */ "Remapping Table for Ingress MPLS_ENTRY Hash (Key+1).",
    /* ING_MPLS_ENTRY_ACTION_TABLE_B */ "Remapping Table for Ingress MPLS_ENTRY Hash (Key+1).",
    /* ING_MPLS_ENTRY_REMAP_TABLE_A */ "Remapping Table for Ingress MPLS Entry 0 Hash (Key+1).",
    /* ING_MPLS_ENTRY_REMAP_TABLE_B */ "Remapping Table for Ingress MPLS ENTRY 1 Hash (Key+1).",
    /* ING_MPLS_EXP_MAPPING      */ "EXP to Internal Priority and Color Maping table. Address = {EXP_MAPPING_PTR, EXP}",
    /* ING_MPLS_EXP_MAPPING_1    */ "shows how the Label.PHB is derived from Label.EXP or MPLS.NEW_PRI for Uniform and Pipe model respectively.",
    /* ING_MTU_CHECK_1           */ "TSN_CIRCUIT_ID MTU check mapping table.",
    /* ING_MTU_CHECK_2           */ "SR_FLOW_ID MTU check mapping table.",
    /* ING_NETWORK_PRUNE_CONTROL */ "ING_NETWORK_PRUNE_CONTROL Indexed by SVP NETWORK_GROUP.",
    /* ING_NLF_PORT_MAP          */ "Map NLF ID to LOGICAL Port Number, index by LOOPBACK_PACKET_TYPE",
    /* ING_OAM_DGLP_PROFILE      */ ".",
    /* ING_OAM_FLEXIBLE_DOMAIN_CONTROL */ "index:{INNER PRIORITY TAGGED,PRE VXLT IVID VALID,PRE VXLT OVID VALID,POST VXLT IVID VALID,POST VXLT OVID VALID,SVP VALID}",
    /* ING_OAM_LM_COUNTERS_0     */ "Packet counter for OAM Loss Measurement pool 0",
    /* ING_OAM_LM_COUNTERS_1     */ "Packet counter for OAM Loss Measurement pool 0",
    /* ING_OAM_LM_COUNTERS_2     */ "Packet counter for OAM Loss Measurement pool 0",
    /* ING_OUTER_DOT1P_MAPPING_TABLE */ "Outer Dot1p mapping table, used to mark traffic from non-QCN-aware sources with a dot1p value that does not map to QCN-aware queues. The PORT_TABLE/SVP/VFI tables select the profile, and the {cfi,got1p[2:0]} value selects one of 16 entries.",
    /* ING_PHYSICAL_PORT_TABLE   */ "Port Table, FeatureSpecific-Ethernet.",
    /* ING_PHYSICAL_TO_LOGICAL_PORT_NUMBER_MAPPING_TABLE */ "Ingress Physical to Logical Port Number Mapping Table. Indexed by the Physical port number, and provides the corresponding logical port number.",
    /* ING_PHY_TO_IDB_PORT_MAP   */ "Ingress Physical to IDB Port Number Mapping Table. Indexed by the physical port number, and provides the corresponding idb port number.",
    /* ING_PHY_TO_IDB_PORT_MAP_PIPE0 */ "Ingress Physical to IDB Port Number Mapping Table. Indexed by the physical port number, and provides the corresponding idb port number.",
    /* ING_PHY_TO_IDB_PORT_MAP_PIPE1 */ "Ingress Physical to IDB Port Number Mapping Table. Indexed by the physical port number, and provides the corresponding idb port number.",
    /* ING_PHY_TO_IDB_PORT_MAP_PIPE2 */ "Ingress Physical to IDB Port Number Mapping Table. Indexed by the physical port number, and provides the corresponding idb port number.",
    /* ING_PHY_TO_IDB_PORT_MAP_PIPE3 */ "Ingress Physical to IDB Port Number Mapping Table. Indexed by the physical port number, and provides the corresponding idb port number.",
    /* ING_PORT_THROTTLE_ENABLE  */ "Table to enable Ingress Port Throttling on physical ports.",
    /* ING_PRI_CNG_MAP           */ "Per port ingress priority/CFI mapping table",
    /* ING_PW_TERM_COUNTERS      */ "Pseudo-wire Termination Byte counter - index by PW number",
    /* ING_PW_TERM_SEQ_NUM       */ "Pseudo-wire Termination Sequence Number - index by PW number",
    /* ING_PW_TERM_SEQ_NUM_PIPE0 */ "Pseudo-wire Termination Sequence Number - index by PW number. Packets from X and Y ingress pipes are independent of each other.",
    /* ING_PW_TERM_SEQ_NUM_PIPE1 */ "Pseudo-wire Termination Sequence Number - index by PW number. Packets from X and Y ingress pipes are independent of each other.",
    /* ING_PW_TERM_SEQ_NUM_PIPE2 */ "Pseudo-wire Termination Sequence Number - index by PW number. Packets from X and Y ingress pipes are independent of each other.",
    /* ING_PW_TERM_SEQ_NUM_PIPE3 */ "Pseudo-wire Termination Sequence Number - index by PW number. Packets from X and Y ingress pipes are independent of each other.",
    /* ING_PW_TERM_SEQ_NUM_X     */ "Pseudo-wire Termination Sequence Number - index by PW number.",
    /* ING_PW_TERM_SEQ_NUM_Y     */ "Pseudo-wire Termination Sequence Number - index by PW number.",
    /* ING_QUEUE_MAP             */ "New table for Flex Queueing",
    /* ING_QUEUE_OFFSET_MAPPING_TABLE */ "New table for Flex Queueing",
    /* ING_ROUTED_INT_PRI_MAPPING */ "Internal priority mapping table, used to steer traffic from non-QCN-aware sources away from QCN queues.",
    /* ING_RX_COUNTER            */ "Counts number over this port, Index: Preemptable_frame, Ingress Port.",
    /* ING_SAT_SAMP_DATA         */ "Service Activation Detection ACTION-DATA for DOWNMEPs",
    /* ING_SAT_SAMP_TCAM         */ "Service Activation Detection TCAM for DOWNMEPs",
    /* ING_SERVICE_COUNTER_TABLE */ "Ingress Service Interface Counters",
    /* ING_SERVICE_COUNTER_TABLE_X */ "Ingress Service Interface Counters.",
    /* ING_SERVICE_COUNTER_TABLE_Y */ "Ingress Service Interface Counters.",
    /* ING_SERVICE_PRI_MAP       */ "Ingress Class of Service instance priority value to OAM LM counter offset mapping table",
    /* ING_SERVICE_PRI_MAP_0     */ "Ingress Class of Service instance priority value to OAM LM counter offset mapping table",
    /* ING_SERVICE_PRI_MAP_1     */ "Ingress Class of Service instance priority value to OAM LM counter offset mapping table",
    /* ING_SERVICE_PRI_MAP_2     */ "Ingress Class of Service instance priority value to OAM LM counter offset mapping table",
    /* ING_SER_FIFO              */ "ING SER FIFO. FIFO containing the parity error logging information in IPIPE.",
    /* ING_SER_FIFO_PIPE0        */ "ING SER FIFO",
    /* ING_SER_FIFO_PIPE1        */ "ING SER FIFO",
    /* ING_SER_FIFO_PIPE2        */ "ING SER FIFO",
    /* ING_SER_FIFO_PIPE3        */ "ING SER FIFO",
    /* ING_SER_FIFO_X            */ "ING SER FIFO",
    /* ING_SER_FIFO_Y            */ "ING SER FIFO",
    /* ING_SNAT                  */ "Ingress SNAT Lookup.",
    /* ING_SNAT_DATA_ONLY        */ "ING_SNAT Data SRAM for ING_SNAT TCAM.",
    /* ING_SNAT_HIT_ONLY         */ "hit bit for ING_SNAT TCAM.",
    /* ING_SNAT_HIT_ONLY_X       */ "hit bit for ING_SNAT TCAM.",
    /* ING_SNAT_HIT_ONLY_Y       */ "hit bit for ING_SNAT TCAM.",
    /* ING_SNAT_ONLY             */ "ING_SNAT TCAM only view.",
    /* ING_SVM_PKT_PRI_MAP       */ "PKT_PRI_MAP",
    /* ING_SVM_PKT_RES_MAP       */ "PKT_RES_MAP",
    /* ING_SVM_PORT_MAP          */ "PORT_MAP",
    /* ING_SVM_PRI_CNG_MAP       */ "PRI_CNG_MAP",
    /* ING_SVM_TOS_MAP           */ "TOS_MAP",
    /* ING_TRILL_ADJACENCY       */ "Ingress TRILL Adjacency Register.",
    /* ING_TRILL_PARSE_CONTROL   */ "Trill parse control.",
    /* ING_TRILL_PAYLOAD_PARSE_CONTROL */ "Trill parse control.",
    /* ING_TUNNEL_ECN_DECAP      */ "Ingress ECN Tunnel Decap Control Register.",
    /* ING_TUNNEL_ECN_DECAP_2    */ "Ingress ECN Tunnel Decap Control Register #2.",
    /* ING_UNTAGGED_PHB          */ "Table used to derive untagged packet's PHB.",
    /* ING_VFT_PRI_MAP           */ "To derive the pri field of the VSAN tag.",
    /* ING_VINTF_COUNTER_TABLE   */ "Ingress Virtual Port / Interface Counters",
    /* ING_VINTF_COUNTER_TABLE_X */ "Ingress Virtual Port / Interface Counters.",
    /* ING_VINTF_COUNTER_TABLE_Y */ "Ingress Virtual Port / Interface Counters.",
    /* ING_VLAN_COUNTER_PRI_COS_MAP */ "VLAN_COUNTER PRI_COS mapping.",
    /* ING_VLAN_COUNTER_TABLE    */ "IVXLT action counter.",
    /* ING_VLAN_RANGE            */ "vlan range match table",
    /* ING_VLAN_TAG_ACTION_PROFILE */ "ACTIONS for the VXLT stage",
    /* ING_VLAN_VFI_MEMBERSHIP   */ "Ingress VLAN VFI member table.",
    /* ING_VP_VLAN_MEMBERSHIP    */ "Ingress VP VLAN member table.",
    /* ING_VP_VLAN_MEMBERSHIP_ACTION_A */ "Action of whether to prepend/append data from remap table to the key into hash A of ING_VP_VLAN_MEMBERSHIP table.",
    /* ING_VP_VLAN_MEMBERSHIP_ACTION_B */ "Action of whether to prepend/append data from remap table to the key into hash B of ING_VP_VLAN_MEMBERSHIP table.",
    /* ING_VP_VLAN_MEMBERSHIP_ECC */ "ECC Table for Ingress VP VLAN Member Table.",
    /* ING_VP_VLAN_MEMBERSHIP_REMAP_A */ "Remapping table for hash key into hash A of ING_VP_VLAN_MEMBERSHIP table.",
    /* ING_VP_VLAN_MEMBERSHIP_REMAP_B */ "Remapping table for hash key into hash B of ING_VP_VLAN_MEMBERSHIP table.",
    /* ING_VSAN                  */ "VSAN attributes",
    /* ING_VXLAN_CLASS_ID_POLICY_TABLE */ "POLICY TABLE FOR ING_VXLAN_CLASS_ID_TCAM",
    /* ING_VXLAN_CLASS_ID_TCAM   */ "TCAM FOR ING_VXLAN_CLASS_ID",
    /* ING_VXLT_ACTION_TABLE_A   */ "Remapping Table for Ingress VXLT Hash (Key+1).",
    /* ING_VXLT_ACTION_TABLE_B   */ "Remapping Table for Ingress VXLT Hash (Key+1).",
    /* ING_VXLT_REMAP_TABLE_A    */ "Remapping Table for Ingress VXLT Hash (Key+1).",
    /* ING_VXLT_REMAP_TABLE_B    */ "Remapping Table for Ingress VXLT Hash (Key+1).",
    /* INITIAL_ING_L3_NEXT_HOP   */ "Reduced version of L3_NEXT_HOP table.  Used to provide just mod and port/TGID",
    /* INITIAL_L3_ECMP           */ "Initial L3 Equal Cost Multipath table",
    /* INITIAL_L3_ECMP_COUNT     */ "Contains the number of members in each ECMP group.  Used with ECMP_pointer Group Propertis - indexed by ECMP group number from LPM table",
    /* INITIAL_L3_ECMP_GROUP     */ "Contains the number of members in each ECMP group and the ECMP base pointer.  It is indexed by ECMP group number from LPM table.",
    /* INITIAL_L3_ECMP_X         */ "Initial L3 Equal Cost Multipath table.",
    /* INITIAL_L3_ECMP_Y         */ "Initial L3 Equal Cost Multipath table.",
    /* INITIAL_PROT_GROUP_TABLE  */ "Protection Switching (backup path) Next Hop Table",
    /* INITIAL_PROT_NHI_DOUBLE_WIDE_TABLE */ "Protection Switching (backup path) Next Hop Table.",
    /* INITIAL_PROT_NHI_TABLE    */ "Protection Switching (backup path) Next Hop Table",
    /* INITIAL_PROT_NHI_TABLE_1  */ "Protection Switching (backup path) Next Hop Table.",
    /* INITIAL_PROT_NHI_TABLE_1_DMA */ "DMA view of INITIAL_PROT_NHI_TABLE_1",
    /* INITIAL_PROT_OFFSET_TABLE */ "Protection Switching (backup path) Next Hop Table.",
    /* INSTRUMENTATION_TRIGGERS_ENABLE */ "Bitmap Enable for Instrumentation trigger",
    /* INTERFACE_MAX_SHAPER_TABLE */ "The entries in this table are the parameters for the Interface Max Shaper",
    /* INT_CN_TO_MMUIF_MAPPING   */ "Mapping for INT_CN to MMU CN.",
    /* IPMC_VLAN_TBL0            */ "First physical copy of MMU_IPMC_VLAN_TBL",
    /* IPMC_VLAN_TBL1            */ "Second physical copy of MMU_IPMC_VLAN_TBL",
    /* IPORT_TABLE               */ "Port Table",
    /* IPPA_ACTION_PROFILE_MPLS_VALUE */ "Action profile configuration for default MPLS label actions.",
    /* IPPA_COE_CHANNEL_ID       */ "CoE Map PTC,VID to channel-id",
    /* IPPA_DESIGNATED_VLAN_TABLE */ "This table hold 8 designated VLANs, per pp-port designated-vlan index.\n Used twice, first for stage 1 and second for one of the stages 2B-3B",
    /* IPPA_INGRESS_VLAN_EDIT_COMMAND_TABLE */ "accessed with Packet-Is-MEF-L2CP(1), LLVP-Incoming-Tag-Structure (5), AC-VLAN-Edit-Profile 5:3 and chose  inside the  entry with AC-VLAN-Edit-Profile2:0",
    /* IPPA_IPPA_DEBUG_COLLECTOR_FIFO */ "Command for the DBG block",
    /* IPPA_LEARN_PAYLOAD_CONTEXT_MAPPING */ "",
    /* IPPA_LIF_PROFILE_ATTRIBUTES_0 */ "Lif.Profile Attributes",
    /* IPPA_LIF_PROFILE_ATTRIBUTES_1 */ "Lif.Profile Attributes",
    /* IPPA_MAP_PORT_TO_MEMBERSHIP_IF_VEC */ "This table hold Vlan-Member-Ship-Interface per port.",
    /* IPPA_MAP_RIF_PROFILE_TO_ROUTING_ENABLE */ "This table is accessed with the In-Rif-Profile. Each line holds bitmap vector which map Ethernet.Qualifier-Next-Protocol,IP-Qualifier.Is-Mc to enable bit.",
    /* IPPA_MAP_VSI_MAC_PREFIX_TO_DA_MSB */ "Map VSI.My-Mac-Prefix(6) to My-Mac-Prefix 38 bits, By this way My-Vsi-Da is equla to My-Mac-Prefix 47:10 VSI.My-MAC-Lsb9:0",
    /* IPPA_MEM_AB00000          */ "INTERNAL",
    /* IPPA_MEM_AB10000          */ "INTERNAL",
    /* IPPA_MEM_AB20000          */ "INTERNAL",
    /* IPPA_MEM_AB50000          */ "INTERNAL",
    /* IPPA_MEM_AB60000          */ "INTERNAL",
    /* IPPA_MEM_AB70000          */ "INTERNAL",
    /* IPPA_MEM_ABA0000          */ "INTERNAL",
    /* IPPA_MEM_ABB0000          */ "INTERNAL",
    /* IPPA_MEM_ABC0000          */ "INTERNAL",
    /* IPPA_MEM_AC40000          */ "INTERNAL",
    /* IPPA_MEM_AC50000          */ "INTERNAL",
    /* IPPA_MEM_AC60000          */ "INTERNAL",
    /* IPPA_MEM_ACB0000          */ "INTERNAL",
    /* IPPA_MEM_ACD0000          */ "INTERNAL",
    /* IPPA_MEM_ACF0000          */ "INTERNAL",
    /* IPPA_MEM_AD10000          */ "INTERNAL",
    /* IPPA_MEM_AD80000          */ "INTERNAL",
    /* IPPA_MEM_AD90000          */ "INTERNAL",
    /* IPPA_MEM_ADA0000          */ "INTERNAL",
    /* IPPA_MEM_ADB0000          */ "INTERNAL",
    /* IPPA_MEM_ADC0000          */ "INTERNAL",
    /* IPPA_MEM_ADD0000          */ "INTERNAL",
    /* IPPA_MEM_ADE0000          */ "INTERNAL",
    /* IPPA_MEM_ADF0000          */ "INTERNAL",
    /* IPPA_MEM_AE00000          */ "INTERNAL",
    /* IPPA_MEM_AE20000          */ "INTERNAL",
    /* IPPA_MEM_AE30000          */ "INTERNAL",
    /* IPPA_MEM_AE40000          */ "INTERNAL",
    /* IPPA_MEM_AE50000          */ "INTERNAL",
    /* IPPA_MEM_AE60000          */ "INTERNAL",
    /* IPPA_MEM_AE80000          */ "INTERNAL",
    /* IPPA_MEM_AEB0000          */ "INTERNAL",
    /* IPPA_MEM_AED0000          */ "INTERNAL",
    /* IPPA_MEM_AEF0000          */ "INTERNAL",
    /* IPPA_MEM_AF20000          */ "INTERNAL",
    /* IPPA_MEM_AF30000          */ "INTERNAL",
    /* IPPA_MEM_AF50000          */ "INTERNAL",
    /* IPPA_MEM_AFD0000          */ "INTERNAL",
    /* IPPA_MEM_AFE0000          */ "INTERNAL",
    /* IPPA_MEM_AFF0000          */ "INTERNAL",
    /* IPPA_MEM_B000000          */ "INTERNAL",
    /* IPPA_MEM_B010000          */ "INTERNAL",
    /* IPPA_MEM_B020000          */ "INTERNAL",
    /* IPPA_MEM_B040000          */ "INTERNAL",
    /* IPPA_MEM_B050000          */ "INTERNAL",
    /* IPPA_MEM_B060000          */ "INTERNAL",
    /* IPPA_MEM_B070000          */ "INTERNAL",
    /* IPPA_MEM_B080000          */ "INTERNAL",
    /* IPPA_MEM_B090000          */ "INTERNAL",
    /* IPPA_MEM_B100000          */ "INTERNAL",
    /* IPPA_MEM_B110000          */ "INTERNAL",
    /* IPPA_MEM_B120000          */ "INTERNAL",
    /* IPPA_MEM_B130000          */ "INTERNAL",
    /* IPPA_MEM_B150000          */ "INTERNAL",
    /* IPPA_MEM_B200000          */ "INTERNAL",
    /* IPPA_MEM_B210000          */ "INTERNAL",
    /* IPPA_MEM_B230000          */ "INTERNAL",
    /* IPPA_MEM_B250000          */ "INTERNAL",
    /* IPPA_MEM_B280000          */ "INTERNAL",
    /* IPPA_MEM_B290000          */ "INTERNAL",
    /* IPPA_MEM_B320000          */ "INTERNAL",
    /* IPPA_MEM_B330000          */ "INTERNAL",
    /* IPPA_MEM_B340000          */ "INTERNAL",
    /* IPPA_MEM_B350000          */ "INTERNAL",
    /* IPPA_MEM_B360000          */ "INTERNAL",
    /* IPPA_MEM_B370000          */ "INTERNAL",
    /* IPPA_MEM_B390000          */ "INTERNAL",
    /* IPPA_MEM_B400000          */ "INTERNAL",
    /* IPPA_MEM_B410000          */ "INTERNAL",
    /* IPPA_MEM_B430000          */ "INTERNAL",
    /* IPPA_MEM_B440000          */ "INTERNAL",
    /* IPPA_MEM_B450000          */ "INTERNAL",
    /* IPPA_MEM_B460000          */ "INTERNAL",
    /* IPPA_MEM_B470000          */ "INTERNAL",
    /* IPPA_MEM_B490000          */ "INTERNAL",
    /* IPPA_MEM_B0A0000          */ "INTERNAL",
    /* IPPA_MEM_B0B0000          */ "INTERNAL",
    /* IPPA_MEM_B0C0000          */ "INTERNAL",
    /* IPPA_MEM_B0E0000          */ "INTERNAL",
    /* IPPA_MEM_B0F0000          */ "INTERNAL",
    /* IPPA_MEM_B2B0000          */ "INTERNAL",
    /* IPPA_MEM_B3A0000          */ "INTERNAL",
    /* IPPA_MEM_B3B0000          */ "INTERNAL",
    /* IPPA_MEM_B3C0000          */ "INTERNAL",
    /* IPPA_MEM_B3D0000          */ "INTERNAL",
    /* IPPA_MEM_B3E0000          */ "INTERNAL",
    /* IPPA_MEM_B3F0000          */ "INTERNAL",
    /* IPPA_PORT_INFO_STAT       */ "This table hold port statistics, used in end of pipe",
    /* IPPA_ROUTING_PROFILE_TABLE */ "This table is accessed with the In-Rif-Profile. Routing profile pointer",
    /* IPPA_STP_TABLE            */ "This table is accessed with the PP-Port. Each line holds the STP state per topology-ID.",
    /* IPPA_TERMINATION_PROFILE_TABLE */ "",
    /* IPPA_VD_TO_VLAN_CLASSIFICATION_PROFILE */ "Map Vlan Domain To vlan classifiaction profile which is used in the llvp table",
    /* IPPA_VLAN_EDIT_PCP_DEI_MAP */ "Accessed by PCP-DEI-Map-Profile3:0 Incoming-Tag.PCP-DEI(4).\n 6 Msb  used for Table  Address and 2 LSB for Entry resolution",
    /* IPPA_VLAN_MEMBERSHIP_IF_ATTR */ "",
    /* IPPA_VLAN_MEMBERSHIP_TABLE */ "This table holds a bit per Initial-VID, VlanDomainIf for the VLAN-Port membership. Table is accessed with Initial-VID, and each line holds one bit per pp-port.\n Used twice, first for stage 1 and second for one of the stages 2B-3B",
    /* IPPA_VLAN_RANGE_COMPRESSION_TABLE */ "Used twice, first for stage 1 and second for one of the stages 2B-3B",
    /* IPPA_VRID_DA_PROFILE_ATTR */ "DA-Profile is mapped to Trap-Enable & Layer-Index-Offset(3) & Ethernet-offset(5) Internal-Offset(6) & Mask(32)",
    /* IPPA_VRID_MY_MAC_MAPPING  */ "DA-Profile is mapped to FFC, Kbr, FormatIdx",
    /* IPPA_VRID_MY_MAC_TCAM     */ "TCAM interface for vrid based my-mac.",
    /* IPPA_VSI_FORMAT_CONFIGURATION_TABLE */ "A configuration table for the ARR, where each line represents a specific input format.\n Each line includes the configurartion data for each field in the incoming data.\n A general look of each line:\n  f_1.size , f_1.position , f_1.prefix , f_2.size , f_2.position , f_2.prefix , ... , f_n.size , f_n.position , f_n.prefix",
    /* IPPA_VSI_PREFIX_INDEX_TABLE */ "A list of prefixes, each line is a possible prefix.",
    /* IPPA_VSI_PROFILE_ATTRIBUTES_0 */ "If VSI-Profile10 is unset then Map VSI-Profile(9) to Learn-Key-Context",
    /* IPPA_VSI_PROFILE_ATTRIBUTES_1 */ "If VSI-Profile10 is set then Map VSI-Profile(9) to Learn-Key-Context",
    /* IPPA_VTACS_ACTION         */ "",
    /* IPPA_VTACS_TCAM_BANK      */ "This table provides access to the TCAM banks through read and write commands.\n every entry refering to a TCAM bank.",
    /* IPPA_VTACS_TCAM_BANK_COMMAND */ "TCAM command:\n The command can be write/read/compare. In case of write and compare the Din is needed",
    /* IPPA_VTACS_TCAM_BANK_REPLY */ "TCAM reply. The reply is based on the command entered before.",
    /* IPPA_VTACS_TCAM_ENTRY_PROTECTION */ "This table holds the ECC bits for each entry in the TCAM. The table is built from 12 tables,\n Each of them with 2K entries. Each table represents ECC bits for one corressponding TCAM.\n Note:  If the addresss lsb is clear (even address)  the entry is a key. If the addresss lsb is set (odd address)  the entry is a mask.",
    /* IPPA_VTACS_TCAM_HIT_INDICATION */ "",
    /* IPPA_VTA_CONTEXT_SEL_TCAM */ "Context selection is relevant for first stage",
    /* IPPA_VTA_LIF_STATISTIC_DATA_FIFO */ "FIFO for packet data waiting for the Dbs results",
    /* IPPA_VTA_LOOKUP_ACCESS_LOOKUP_FIFO_0 */ "FIFO for packet data waiting for the Dbs results",
    /* IPPA_VTA_LOOKUP_ACCESS_LOOKUP_FIFO_1 */ "FIFO for packet data waiting for the Dbs results",
    /* IPPA_VTA_LOOKUP_ACCESS_LOOKUP_FIFO_2 */ "FIFO for packet data waiting for the Dbs results",
    /* IPPA_VTA_POST_GENERAL_DATA_FIFO */ "FIFO for packet data waiting for the Dbs results",
    /* IPPA_VTA_VSI_STATISTIC_DATA_FIFO */ "",
    /* IPPA_VTBCS_ACTION         */ "",
    /* IPPA_VTBCS_TCAM_BANK      */ "This table provides access to the TCAM banks through read and write commands.\n every entry refering to a TCAM bank.",
    /* IPPA_VTBCS_TCAM_BANK_COMMAND */ "TCAM command:\n The command can be write/read/compare. In case of write and compare the Din is needed",
    /* IPPA_VTBCS_TCAM_BANK_REPLY */ "TCAM reply. The reply is based on the command entered before.",
    /* IPPA_VTBCS_TCAM_ENTRY_PROTECTION */ "This table holds the ECC bits for each entry in the TCAM. The table is built from 12 tables,\n Each of them with 2K entries. Each table represents ECC bits for one corressponding TCAM.\n Note:  If the addresss lsb is clear (even address)  the entry is a key. If the addresss lsb is set (odd address)  the entry is a mask.",
    /* IPPA_VTBCS_TCAM_HIT_INDICATION */ "",
    /* IPPA_VTB_LIF_STATISTIC_DATA_FIFO */ "",
    /* IPPA_VTB_LOOKUP_ACCESS_LOOKUP_FIFO_0 */ "FIFO for packet data waiting for the Dbs results",
    /* IPPA_VTB_LOOKUP_ACCESS_LOOKUP_FIFO_1 */ "FIFO for packet data waiting for the Dbs results",
    /* IPPA_VTB_LOOKUP_ACCESS_LOOKUP_FIFO_2 */ "FIFO for packet data waiting for the Dbs results",
    /* IPPA_VTB_LOOKUP_ACCESS_LOOKUP_FIFO_3 */ "FIFO for packet data waiting for the Dbs results",
    /* IPPA_VTB_POST_GENERAL_DATA_FIFO */ "FIFO for packet data waiting for the Dbs results",
    /* IPPA_VTCCS_ACTION         */ "",
    /* IPPA_VTCCS_TCAM_BANK      */ "This table provides access to the TCAM banks through read and write commands.\n every entry refering to a TCAM bank.",
    /* IPPA_VTCCS_TCAM_BANK_COMMAND */ "TCAM command:\n The command can be write/read/compare. In case of write and compare the Din is needed",
    /* IPPA_VTCCS_TCAM_BANK_REPLY */ "TCAM reply. The reply is based on the command entered before.",
    /* IPPA_VTCCS_TCAM_ENTRY_PROTECTION */ "This table holds the ECC bits for each entry in the TCAM. The table is built from 12 tables,\n Each of them with 2K entries. Each table represents ECC bits for one corressponding TCAM.\n Note:  If the addresss lsb is clear (even address)  the entry is a key. If the addresss lsb is set (odd address)  the entry is a mask.",
    /* IPPA_VTCCS_TCAM_HIT_INDICATION */ "",
    /* IPPA_VTC_LIF_STATISTIC_DATA_FIFO */ "FIFO for packet data waiting for the Dbs results",
    /* IPPA_VTC_LOOKUP_ACCESS_LOOKUP_FIFO_0 */ "FIFO for packet data waiting for the Dbs results",
    /* IPPA_VTC_LOOKUP_ACCESS_LOOKUP_FIFO_1 */ "FIFO for packet data waiting for the Dbs results",
    /* IPPA_VTC_LOOKUP_ACCESS_LOOKUP_FIFO_2 */ "FIFO for packet data waiting for the Dbs results",
    /* IPPA_VTC_LOOKUP_ACCESS_LOOKUP_FIFO_3 */ "FIFO for packet data waiting for the Dbs results",
    /* IPPA_VTC_POST_GENERAL_DATA_FIFO */ "FIFO for packet data waiting for the Dbs results",
    /* IPPA_VTDCS_ACTION         */ "",
    /* IPPA_VTDCS_TCAM_BANK      */ "This table provides access to the TCAM banks through read and write commands.\n every entry refering to a TCAM bank.",
    /* IPPA_VTDCS_TCAM_BANK_COMMAND */ "TCAM command:\n The command can be write/read/compare. In case of write and compare the Din is needed",
    /* IPPA_VTDCS_TCAM_BANK_REPLY */ "TCAM reply. The reply is based on the command entered before.",
    /* IPPA_VTDCS_TCAM_ENTRY_PROTECTION */ "This table holds the ECC bits for each entry in the TCAM. The table is built from 12 tables,\n Each of them with 2K entries. Each table represents ECC bits for one corressponding TCAM.\n Note:  If the addresss lsb is clear (even address)  the entry is a key. If the addresss lsb is set (odd address)  the entry is a mask.",
    /* IPPA_VTDCS_TCAM_HIT_INDICATION */ "",
    /* IPPA_VTD_LIF_STATISTIC_DATA_FIFO */ "FIFO for packet data waiting for the Dbs results",
    /* IPPA_VTD_LOOKUP_ACCESS_LOOKUP_FIFO_0 */ "FIFO for packet data waiting for the Dbs results",
    /* IPPA_VTD_LOOKUP_ACCESS_LOOKUP_FIFO_1 */ "FIFO for packet data waiting for the Dbs results",
    /* IPPA_VTD_LOOKUP_ACCESS_LOOKUP_FIFO_2 */ "FIFO for packet data waiting for the Dbs results",
    /* IPPA_VTD_LOOKUP_ACCESS_LOOKUP_FIFO_3 */ "FIFO for packet data waiting for the Dbs results",
    /* IPPA_VTD_POST_GENERAL_DATA_FIFO */ "FIFO for packet data waiting for the Dbs results",
    /* IPPA_VTECS_ACTION         */ "",
    /* IPPA_VTECS_TCAM_BANK      */ "This table provides access to the TCAM banks through read and write commands.\n every entry refering to a TCAM bank.",
    /* IPPA_VTECS_TCAM_BANK_COMMAND */ "TCAM command:\n The command can be write/read/compare. In case of write and compare the Din is needed",
    /* IPPA_VTECS_TCAM_BANK_REPLY */ "TCAM reply. The reply is based on the command entered before.",
    /* IPPA_VTECS_TCAM_ENTRY_PROTECTION */ "This table holds the ECC bits for each entry in the TCAM. The table is built from 12 tables,\n Each of them with 2K entries. Each table represents ECC bits for one corressponding TCAM.\n Note:  If the addresss lsb is clear (even address)  the entry is a key. If the addresss lsb is set (odd address)  the entry is a mask.",
    /* IPPA_VTECS_TCAM_HIT_INDICATION */ "",
    /* IPPA_VTE_LIF_STATISTIC_DATA_FIFO */ "FIFO for packet data waiting for the Dbs results",
    /* IPPA_VTE_LOOKUP_ACCESS_LOOKUP_FIFO_0 */ "FIFO for packet data waiting for the Dbs results",
    /* IPPA_VTE_LOOKUP_ACCESS_LOOKUP_FIFO_1 */ "FIFO for packet data waiting for the Dbs results",
    /* IPPA_VTE_LOOKUP_ACCESS_LOOKUP_FIFO_2 */ "FIFO for packet data waiting for the Dbs results",
    /* IPPA_VTE_LOOKUP_ACCESS_LOOKUP_FIFO_3 */ "FIFO for packet data waiting for the Dbs results",
    /* IPPA_VTE_POST_GENERAL_DATA_FIFO */ "FIFO for packet data waiting for the Dbs results",
    /* IPPA_VTT_CONTEXT_SEL_TCAM */ "Context selection is relevant for 4 last stages",
    /* IPPA_VTT_CURRENT_CONTEXT_PROFILE_MAP */ "maps context to context profile",
    /* IPPA_VTT_ETH_PACKET_FORMAT_ATTRIBUTES_TABLE */ "This table is accessed with inner Ethernet-Qualifer.Next-protocol\n and the result is Packet-format-code, Packet leaf-context and Next-protcol-size",
    /* IPPA_VTT_FORMAT_CONFIGURATION_TABLE */ "A configuration table for the ARR, where each line represents a specific input format.\n Each line includes the configurartion data for each field in the incoming data.\n A general look of each line:\n  f_1.size , f_1.position , f_1.prefix , f_2.size , f_2.position , f_2.prefix , ... , f_n.size , f_n.position , f_n.prefix",
    /* IPPA_VTT_INIT_CONTEXT_ENABLERS */ "This table is accessed with the Current Context. Each line holds Enablers & profile",
    /* IPPA_VTT_IN_PP_PORT_CONFIG */ "This table holds VLAN translation and tunnel termination In-PP-Port configurations.\n Used twice, first for stage 1 and second for one of the stages 2A-2B",
    /* IPPA_VTT_IP_PACKET_FORMAT_ATTRIBUTES_TABLE */ "This table is accessed with Is-IPv4, inner IP-Qualifer.Next-protocol\n and the result is Packet-format-code, Packet leaf-context and Next-protcol-size",
    /* IPPA_VTT_LAYER_RECORDS_CRC_FIFO */ "",
    /* IPPA_VTT_LLVP             */ "Link layer VLAN processing table. This table has 1024 entries, and the index  into the table is In-PP-Port.VLAN-Classification-Profile (3b), Is-Priority, Packet-Format-Qualifier1.Ethernet-Tag-Format (6). Each entry includes information on the matcing VLAN tag and how it should be processed.",
    /* IPPA_VTT_MPLS_LABEL_RANGE_TABLE */ "This table hold 8 Mpls Labels ranges and the range attributes.",
    /* IPPA_VTT_MPLS_LABEL_TCAM  */ "MPLS Label Type TCAM\n This is the register array which is used by all 13 MPLS-Hdr-Parser for label matching",
    /* IPPA_VTT_PATH_SELECT      */ "This table maps a  In-LIF.Protection-Pointer and  In-LIF.Protection-Path to a protection path selection. The table has 4K entries. The index to the table is the In-LIF.Protection-Pointer and  In-LIF.Protection-Path, with every eight entries being stored in a single register line, meaning the register address is set by  In-LIF.Protection-Pointer and  In-LIF.Protection-Path, and entry number in the register by  In-LIF.Protection-Pointer and  In-LIF.Protection-Path 2:0. Each entry indicates if an o ...",
    /* IPPA_VTT_PP_PORT_VSI_PROFILES */ "",
    /* IPPA_VTT_PREFIX_INDEX_TABLE */ "A list of prefixes, each line is a possible prefix.",
    /* IPPA_VTT_PS_PACKET_FORMAT_CODE_MAP_TABLE */ "This table is accessed with packet-format-code\n and the result is a new Packet-format-code which used in Vlan translation and tunnel termination program selection stage",
    /* IPPA_VTT_PTC_CONFIG       */ "each line holds the values for 8 Port-Termination-Contexts.",
    /* IPPA_VTT_RES_CONTEXT_ENABLERS */ "This table is accessed with the Current Context. Each line holds Enablers & profile",
    /* IPPA_VTT_ST_ONE_LE_FFC_GROUP_0_QUAD_CONTEXT_SELECTOR */ "",
    /* IPPA_VTT_ST_ONE_LE_FFC_GROUP_1_QUAD_CONTEXT_SELECTOR */ "",
    /* IPPA_VTT_ST_ONE_LE_FFC_GROUP_2_QUAD_CONTEXT_SELECTOR */ "",
    /* IPPA_VTT_ST_ONE_LE_KEY_BUILDER_CONTEXT_SELECTOR */ "",
    /* IPPA_VTT_ST_TH_LE_FFC_GROUP_0_QUAD_CONTEXT_SELECTOR */ "",
    /* IPPA_VTT_ST_TH_LE_FFC_GROUP_1_QUAD_CONTEXT_SELECTOR */ "",
    /* IPPA_VTT_ST_TH_LE_FFC_GROUP_2_QUAD_CONTEXT_SELECTOR */ "",
    /* IPPA_VTT_ST_TH_LE_FFC_GROUP_3_QUAD_CONTEXT_SELECTOR */ "",
    /* IPPA_VTT_ST_TH_LE_KEY_BUILDER_CONTEXT_SELECTOR */ "",
    /* IPPA_VTT_ST_TH_LE_SHARED_PD_CONTEXT_SELECTOR */ "",
    /* IPPA_VTT_ST_TWO_LE_FFC_GROUP_0_QUAD_CONTEXT_SELECTOR */ "",
    /* IPPA_VTT_ST_TWO_LE_FFC_GROUP_1_QUAD_CONTEXT_SELECTOR */ "",
    /* IPPA_VTT_ST_TWO_LE_FFC_GROUP_2_QUAD_CONTEXT_SELECTOR */ "",
    /* IPPA_VTT_ST_TWO_LE_FFC_GROUP_3_QUAD_CONTEXT_SELECTOR */ "",
    /* IPPA_VTT_ST_TWO_LE_KEY_BUILDER_CONTEXT_SELECTOR */ "",
    /* IPPA_VTT_ST_TWO_LE_SHARED_PD_CONTEXT_SELECTOR */ "",
    /* IPPA_VTT_S_1_VSI_LKUP_FIFO_PIPE */ "FIFO for packet data waiting for the Dbs results",
    /* IPPA_VTT_S_2A_VSI_LKUP_FIFO_PIPE */ "FIFO for packet data waiting for the Dbs results",
    /* IPPA_VTT_VLAN_DOMAIN_ATTRIBUTES */ "This table holds the VLAN range compression selection per vlan domain\n Used twice, first for stage 1 and second for one of the stages 2B-3B",
    /* IPPA_VTX_VSI_STATISTIC_DATA_FIFO */ "FIFO for packet data waiting for the Dbs results",
    /* IPPB_ACCEPTED_ARR_FORMAT_CONFIG */ "A configuration table for the ARR, where each line represents a specific input format.\n Each line includes the configurartion data for each field in the incoming data.\n A general look of each line:\n  f_1.size , f_1.position , f_1.prefix , f_2.size , f_2.position , f_2.prefix , ... , f_n.size , f_n.position , f_n.prefix",
    /* IPPB_APP_DB_MAP           */ "maps app_db to context_type. Encoded with leading one.",
    /* IPPB_EGRESS_OPPORTUNISTIC_FIFO */ "",
    /* IPPB_ELK_ACL_ALIGNER_MAPPING_MEM */ "contains 4k eantris of 8 bit opcode - 4 entries per address in memory",
    /* IPPB_ELK_ALIGNER_MAPPING_MEM */ "",
    /* IPPB_ELK_OPCODE_MAPPING_MEM */ "contains 4k eantris of 8 bit opcode - 4 entries per address in memory",
    /* IPPB_ELK_PAYLOAD_FORMAT   */ "per FLP program, sets ELK result payload format",
    /* IPPB_ELK_RESULT_MAPPING_MEM */ "contains 4k eantris of 8 bit opcode - 4 entries per address in memory",
    /* IPPB_ETHERNET_OAM_OPCODE_MAP */ "This table maps Y1731-Header opcode to an OAM opcode and offset configuration. The table has 256 entries, with the index being Y1731-Headers 8-bit Opcode. The value in each entry includes an 4-bit OAM opcode and an OAM offset, used to indicate OAM stamp location in the header.",
    /* IPPB_EXPECTED_ARR_FORMAT_CONFIG */ "A configuration table for the ARR, where each line represents a specific input format.\n Each line includes the configurartion data for each field in the incoming data.\n A general look of each line:\n  f_1.size , f_1.position , f_1.prefix , f_2.size , f_2.position , f_2.prefix , ... , f_n.size , f_n.position , f_n.prefix",
    /* IPPB_FLPACS_ACTION        */ "",
    /* IPPB_FLPACS_TCAM_BANK     */ "This table provides access to the TCAM banks through read and write commands.\n every entry refering to a TCAM bank.",
    /* IPPB_FLPACS_TCAM_BANK_COMMAND */ "TCAM command:\n The command can be write/read/compare. In case of write and compare the Din is needed",
    /* IPPB_FLPACS_TCAM_BANK_REPLY */ "TCAM reply. The reply is based on the command entered before.",
    /* IPPB_FLPACS_TCAM_ENTRY_PROTECTION */ "This table holds the ECC bits for each entry in the TCAM. The table is built from 12 tables,\n Each of them with 2K entries. Each table represents ECC bits for one corressponding TCAM.\n Note:  If the addresss lsb is clear (even address)  the entry is a key. If the addresss lsb is set (odd address)  the entry is a mask.",
    /* IPPB_FLPACS_TCAM_HIT_INDICATION */ "",
    /* IPPB_FLPA_CURRENT_CONTEXT_PROFILE_MAP */ "maps the FWD2 context  to a profile for ACL CS",
    /* IPPB_FLPA_INIT_CONTEXT_ENABLERS */ "bit per context enabling fixed initial processing logic",
    /* IPPB_FLPA_LOOKUP_ACCESS_LOOKUP_FIFO_2 */ "",
    /* IPPB_FLPA_LOOKUP_ACCESS_LOOKUP_FIFO_3 */ "",
    /* IPPB_FLPA_LOOKUP_ACCESS_LOOKUP_FIFO_4 */ "",
    /* IPPB_FLPA_RES_CONTEXT_ENABLERS */ "",
    /* IPPB_FLPA_USER_GENERAL_CONTAINER_CFG */ "contains a 3b code per container:\n 3'd0: don't override\n 3'd1: override with PD0\n 3'd2: override with PD1\n 3'd3: override with FPD0\n 3'd4: override with FPD1\n 3'd5: override with DE0\n 3'd6: override with DE1\n Containers:\n 0,1 24b\n 2,3 40b\n 4 96b\n 5 160b",
    /* IPPB_FLPBCS_ACTION        */ "",
    /* IPPB_FLPBCS_TCAM_BANK     */ "This table provides access to the TCAM banks through read and write commands.\n every entry refering to a TCAM bank.",
    /* IPPB_FLPBCS_TCAM_BANK_COMMAND */ "TCAM command:\n The command can be write/read/compare. In case of write and compare the Din is needed",
    /* IPPB_FLPBCS_TCAM_BANK_REPLY */ "TCAM reply. The reply is based on the command entered before.",
    /* IPPB_FLPBCS_TCAM_ENTRY_PROTECTION */ "This table holds the ECC bits for each entry in the TCAM. The table is built from 12 tables,\n Each of them with 2K entries. Each table represents ECC bits for one corressponding TCAM.\n Note:  If the addresss lsb is clear (even address)  the entry is a key. If the addresss lsb is set (odd address)  the entry is a mask.",
    /* IPPB_FLPBCS_TCAM_HIT_INDICATION */ "",
    /* IPPB_FLPB_CURRENT_CONTEXT_PROFILE_MAP */ "maps the FWD2 context  to a profile for ACL CS",
    /* IPPB_FLPB_INIT_CONTEXT_ENABLERS */ "",
    /* IPPB_FLPB_LOOKUP_ACCESS_LOOKUP_FIFO_2 */ "",
    /* IPPB_FLPB_LOOKUP_ACCESS_LOOKUP_FIFO_3 */ "",
    /* IPPB_FLPB_LOOKUP_ACCESS_LOOKUP_FIFO_4 */ "",
    /* IPPB_FLPB_RES_CONTEXT_ENABLERS */ "",
    /* IPPB_FLPB_USER_GENERAL_CONTAINER_CFG */ "contains a 3b code per container:\n 3'd0: don't override\n 3'd1: override with PD0\n 3'd2: override with PD1\n 3'd3: override with FPD0\n 3'd4: override with FPD1\n 3'd5: override with DE0\n 3'd6: override with DE1\n Containers:\n 0,1 24b\n 2,3 40b\n 4 96b\n 5 160b",
    /* IPPB_FLPLE_FFC_GROUP_0_QUAD_IS_ACL_CONTEXT */ "",
    /* IPPB_FLPLE_FFC_GROUP_1_QUAD_IS_ACL_CONTEXT */ "",
    /* IPPB_FLPLE_FFC_GROUP_2_QUAD_IS_ACL_CONTEXT */ "",
    /* IPPB_FLPLE_FFC_GROUP_3_QUAD_IS_ACL_CONTEXT */ "",
    /* IPPB_FLPLE_FFC_GROUP_4_QUAD_IS_ACL_CONTEXT */ "",
    /* IPPB_FLPLE_KEY_BUILDER_IS_ACL_CONTEXT */ "",
    /* IPPB_FLPLE_SHARED_PD_IS_ACL_CONTEXT */ "",
    /* IPPB_FLP_ELK_FWD_STRENGTH_MAPPING_MEM */ "each memory is mapped by an 8b prefix and a strength is chosen according to deault bit",
    /* IPPB_FLP_ELK_RPF_STRENGTH_MAPPING_MEM */ "",
    /* IPPB_FLP_FWD_FORMAT_CONFIGURATION_TABLE */ "A configuration table for the ARR, where each line represents a specific input format.\n Each line includes the configurartion data for each field in the incoming data.\n A general look of each line:\n  f_1.size , f_1.position , f_1.prefix , f_2.size , f_2.position , f_2.prefix , ... , f_n.size , f_n.position , f_n.prefix",
    /* IPPB_FLP_FWD_PREFIX_INDEX_TABLE */ "A list of prefixes, each line is a possible prefix.",
    /* IPPB_FLP_KAPS_STRENGTH_MAPPING_MEM */ "each memory is mapped by an 8b prefix and a strength is chosen according to deault bit",
    /* IPPB_FLP_PORT_PROFILE_MAP */ "maps port to port profile",
    /* IPPB_FLP_PTC_PROFILE_MAP  */ "maps port to port profile",
    /* IPPB_FLP_RPF_FORMAT_CONFIGURATION_TABLE */ "A configuration table for the ARR, where each line represents a specific input format.\n Each line includes the configurartion data for each field in the incoming data.\n A general look of each line:\n  f_1.size , f_1.position , f_1.prefix , f_2.size , f_2.position , f_2.prefix , ... , f_n.size , f_n.position , f_n.prefix",
    /* IPPB_FLP_RPF_PREFIX_INDEX_TABLE */ "A list of prefixes, each line is a possible prefix.",
    /* IPPB_FORCE_LB_LAYER_MEM   */ "used for mpls labels identification and assignment for label types in the following table",
    /* IPPB_ICMP_TYPE_COMPRESSION_TABLE */ "maps port to port profile",
    /* IPPB_IEEE_1588_ACTION     */ "Accessed with IEEE-1588-Encapsulation (1), IEEE-1588-Address (2), IEEE-1588-Header.Message-Type (4), IEEE-1588-Header.Flag-Field9\n each action is selected according to In-PP-Port.IEEE-1588-Profile (2)",
    /* IPPB_IEEE_1588_IDENTIFICATION_CAM */ "This table is used for IEEE1588-protocol identification.\n The table is searched for rules matching, and if all rules don't match then default values will be selected and PacketIsIeee1588 will be set to zero (non IEEE-1588 packet)",
    /* IPPB_IPPB_DEBUG_COLLECTOR_FIFO */ "Command for the DBG block",
    /* IPPB_IPPB_FLP_BYPASS_FIFO */ "",
    /* IPPB_LEARN_APPDB_MAP      */ "maps port to port profile",
    /* IPPB_LEL_BURST_FIFO       */ "",
    /* IPPB_LEL_CONTROL_FIFO     */ "",
    /* IPPB_LOAD_BALANCING_CRC_SELECTION_CAM */ "maps destination and outlif0 into a configuration of which CRC16 to use per LB client",
    /* IPPB_MEM_100000           */ "INTERNAL",
    /* IPPB_MEM_110000           */ "INTERNAL",
    /* IPPB_MEM_120000           */ "INTERNAL",
    /* IPPB_MEM_1830000          */ "INTERNAL",
    /* IPPB_MEM_1850000          */ "INTERNAL",
    /* IPPB_MEM_1870000          */ "INTERNAL",
    /* IPPB_MEM_1920000          */ "INTERNAL",
    /* IPPB_MEM_18A0000          */ "INTERNAL",
    /* IPPB_MEM_18F0000          */ "INTERNAL",
    /* IPPB_MEM_1A50000          */ "INTERNAL",
    /* IPPB_MEM_1A60000          */ "INTERNAL",
    /* IPPB_MEM_1A70000          */ "INTERNAL",
    /* IPPB_MEM_1A80000          */ "INTERNAL",
    /* IPPB_MEM_1A90000          */ "INTERNAL",
    /* IPPB_MEM_1AA0000          */ "INTERNAL",
    /* IPPB_MEM_1AC0000          */ "INTERNAL",
    /* IPPB_MEM_1AE0000          */ "INTERNAL",
    /* IPPB_MEM_1B00000          */ "INTERNAL",
    /* IPPB_MEM_1B10000          */ "INTERNAL",
    /* IPPB_MEM_1B20000          */ "INTERNAL",
    /* IPPB_MEM_1B30000          */ "INTERNAL",
    /* IPPB_MEM_1B40000          */ "INTERNAL",
    /* IPPB_MEM_1B50000          */ "INTERNAL",
    /* IPPB_MEM_1B60000          */ "INTERNAL",
    /* IPPB_MEM_1B70000          */ "INTERNAL",
    /* IPPB_MEM_1B80000          */ "INTERNAL",
    /* IPPB_MEM_1B90000          */ "INTERNAL",
    /* IPPB_MEM_1BA0000          */ "INTERNAL",
    /* IPPB_MEM_1BB0000          */ "INTERNAL",
    /* IPPB_MEM_1BC0000          */ "INTERNAL",
    /* IPPB_MEM_1BD0000          */ "INTERNAL",
    /* IPPB_MEM_1BE0000          */ "INTERNAL",
    /* IPPB_MEM_1BF0000          */ "INTERNAL",
    /* IPPB_MEM_1C00000          */ "INTERNAL",
    /* IPPB_MEM_1C10000          */ "INTERNAL",
    /* IPPB_MEM_1C20000          */ "INTERNAL",
    /* IPPB_MEM_1C30000          */ "INTERNAL",
    /* IPPB_MEM_1C40000          */ "INTERNAL",
    /* IPPB_MEM_1C50000          */ "INTERNAL",
    /* IPPB_MEM_1C60000          */ "INTERNAL",
    /* IPPB_MEM_1C80000          */ "INTERNAL",
    /* IPPB_MEM_1CA0000          */ "INTERNAL",
    /* IPPB_MEM_1CB0000          */ "INTERNAL",
    /* IPPB_MEM_1CC0000          */ "INTERNAL",
    /* IPPB_MEM_1CD0000          */ "INTERNAL",
    /* IPPB_MEM_1CE0000          */ "INTERNAL",
    /* IPPB_MEM_1CF0000          */ "INTERNAL",
    /* IPPB_MEM_A00000           */ "INTERNAL",
    /* IPPB_MEM_A10000           */ "INTERNAL",
    /* IPPB_MEM_A20000           */ "INTERNAL",
    /* IPPB_MPLS_LABEL_TYPES_CAM_0 */ "used for mpls labels identification and assignment for label types in the following table",
    /* IPPB_MPLS_LABEL_TYPES_CAM_1 */ "used for mpls labels identification and assignment for label types in the following table",
    /* IPPB_MY_BFD_DIP           */ "This table contains 16 IPv6-Destination-IPs. These IP addresses are compared to incoming destination IP to identify Multi-Hop BFD over IP.\n For IPv4 format, use default IPv4 extension: 0::FFFF:IPv4-DIP",
    /* IPPB_OAMA                 */ "Map Inject(1), OAM-Opcode (4), My-CFM-MAC(1), OAM-LIF 1 MP-Profile (4),DA-IS-MC(1)",
    /* IPPB_OAMB                 */ "Map PKT-IS-BFD(1),Inject(1), My-CFM-MAC (1),  OAM-Opcode (4), OAM-ACC-MEP-MP-Prof (4),DA-IS-MC(1)",
    /* IPPB_OAM_CHANNEL_TYPE     */ "This table is used to map  Control-Words Channel-Type to OAM-Format. The table contains 16 entries, with the index being a control words channel type. The value in each entry contain sthe OAM format, including format type, format opcode and the result of OAM channel type lookup in the CAM.",
    /* IPPB_OAM_COUNTER_DISABLE_MAP */ "enable the counter per counter interface. A bitmap with a selector nof_valid_lm_lifs(2),oamb_dis_cnt(1),in_lif_valid_for_lm(1), mp_type(4)",
    /* IPPB_OAM_KEY_SEL_MEM      */ "maps port to port profile",
    /* IPPB_OAM_MP_TYPE_MAP      */ "MP Type Map used in MP type calculation oam_is_bfd(1),nof_mep_below_mdl(3),mdl_mp_type(2),nof_above_mdl(3)",
    /* IPPB_OAM_MY_CFM_MAC       */ "control-Word.Channel-Type",
    /* IPPB_OAM_PDU_DS_TO_PCP_VEC */ "",
    /* IPPB_PHB_ECN_CONTEXT_ACTION_MEM */ "used for mpls labels identification and assignment for label types in the following table",
    /* IPPB_PHB_ECN_CONTEXT_SELECTION_CAM */ "used for mpls labels identification and assignment for label types in the following table",
    /* IPPB_PHB_ECN_MAP_INDEX_EXPLICIT_VALUE_MEM */ "",
    /* IPPB_PHB_ECN_PROFILE_RESOLUTION_MEM */ "",
    /* IPPB_PHB_ECN_RESULT_MEM   */ "",
    /* IPPB_PHB_TCDP_PROFILE_RESOLUTION_MEM */ "",
    /* IPPB_PHB_TC_DP_CONTEXT_ACTION_MEM */ "used for mpls labels identification and assignment for label types in the following table",
    /* IPPB_PHB_TC_DP_CONTEXT_SELECTION_CAM */ "used for mpls labels identification and assignment for label types in the following table",
    /* IPPB_PHB_TC_DP_MAP_INDEX_EXPLICIT_VALUE_MEM */ "",
    /* IPPB_PHB_TC_DP_RESULT_MEM */ "",
    /* IPPB_PINFO_FLP_MEM        */ "This table provides port info for the Forwarding Lookup (FLP) unit. The table has 256 entries, one per PP port, with the index being the port number. Every entry contains information used for forwarding lookup decisions by the ingress packet processor.",
    /* IPPB_REMARK_CONTEXT_ACTION_MEM */ "context selection CAM for Dscp Remark",
    /* IPPB_REMARK_CONTEXT_SELECTION_CAM */ "context selection CAM for Dscp Remark",
    /* IPPB_REMARK_MAP_INDEX_EXPLICIT_VALUE_MEM */ "",
    /* IPPB_REMARK_PROFILE_RESOLUTION_MEM */ "",
    /* IPPB_REMARK_RESULT_MEM    */ "",
    /* IPPB_TRAP_HANDLING_TABLE  */ "",
    /* IPPB_TRAP_PROFILE_BY_OUT_LIF */ "maps port to port profile",
    /* IPPB_TRAP_PROFILE_BY_PP_PORT */ "maps port to port profile",
    /* IPPB_TRAP_PROFILING_TABLE */ "",
    /* IPPB_TTL_CONTEXT_SELECTION_CAM */ "context selection CAM for TTl",
    /* IPPB_UNKNOWN_DA_PROFILE   */ "This table is used to map an unknown Destination Address (DA) action profile to a destination address. The table has 24 entries, with the index being DA-Type0..2 In-LIF-DA-Not-Found-Profile, In-PP-Port.DA-Not-Found-Profile and the value being the default destination to use.\n DA-Type is defined as follows:\n 0x0 - Multicast\n 0x1: Broadcast\n 0x2: Unicast\n The reset Value for all lines is 0x0 with a mask value of 0x1F.",
    /* IPPB_VLAN_EDIT_PCP_DEI_MEM */ "the map uses address compression from 1K to 256.\n Use the pointer in the following format:\n address = pointer7:0\n data=mem_datapointer9:8*8+:8",
    /* IPPC_EFES_ACTION_MASK     */ "Program Instruction Table per program for all 8 keys",
    /* IPPC_EVENTOR_FIFO         */ "State Table used in key update keygen or acr",
    /* IPPC_FEM_0_4B_MAP_TABLE   */ "This table defines the action type and how to build the action.\n Table Address: MapIndex",
    /* IPPC_FEM_10_24B_MAP_TABLE */ "Same as Fem2_24bMapTable",
    /* IPPC_FEM_11_24B_MAP_TABLE */ "Same as Fem2_24bMapTable",
    /* IPPC_FEM_12_24B_MAP_TABLE */ "Same as Fem2_24bMapTable",
    /* IPPC_FEM_13_24B_MAP_TABLE */ "Same as Fem2_24bMapTable",
    /* IPPC_FEM_14_24B_MAP_TABLE */ "Same as Fem2_24bMapTable",
    /* IPPC_FEM_15_24B_MAP_TABLE */ "Same as Fem2_24bMapTable",
    /* IPPC_FEM_1_4B_MAP_TABLE   */ "Same as Fem0MapTable",
    /* IPPC_FEM_2_24B_MAP_TABLE  */ "For details, see Fem0_4bMapTable.",
    /* IPPC_FEM_3_24B_MAP_TABLE  */ "Same as Fem2_24bMapTable",
    /* IPPC_FEM_4_24B_MAP_TABLE  */ "Same as Fem2_24bMapTable",
    /* IPPC_FEM_5_24B_MAP_TABLE  */ "Same as Fem2_24bMapTable",
    /* IPPC_FEM_6_24B_MAP_TABLE  */ "For details, see Fem0_4bMapTable.",
    /* IPPC_FEM_7_24B_MAP_TABLE  */ "For details, see Fem0_4bMapTable.",
    /* IPPC_FEM_8_24B_MAP_TABLE  */ "Same as Fem2_24bMapTable",
    /* IPPC_FEM_9_24B_MAP_TABLE  */ "Same as Fem2_24bMapTable",
    /* IPPC_FEM_BIT_SELECT       */ "This table holds the 4bits to be taken from the key, which are used to address MapIndexTable.\n Table Address: According to the FEM-Program",
    /* IPPC_FEM_MAP_INDEX_TABLE  */ "This table holds the FEM's Map-Data and Map-Index, which are used as an address to the Fem0..15MapTable.\n Table Address: FEM-Program(2b), Key-Selected-Bits(4b)",
    /* IPPC_FES_2ND_INSTRUCTION  */ "Program Instruction Table per program for all 8 keys",
    /* IPPC_FIFO_DIRECT_EXTRACTION_PASS_1 */ "FIFO for lpm 2nd lookup result",
    /* IPPC_FIFO_DIRECT_EXTRACTION_PASS_2 */ "FIFO for lpm 2nd lookup result",
    /* IPPC_FIFO_DIRECT_PASS_1   */ "FIFO for lpm 1st lookup result",
    /* IPPC_FIFO_DIRECT_PASS_2   */ "FIFO for lpm 2nd lookup result",
    /* IPPC_FIFO_DSP             */ "FIFO for data sample\n the fifo size is twice the db fifo size + 12",
    /* IPPC_FIFO_DSP_PASS_1      */ "FIFO for data sample",
    /* IPPC_FIFO_DSP_PASS_2      */ "FIFO for data sample",
    /* IPPC_FIFO_EXEM_PASS_1     */ "FIFO for lem lookup result",
    /* IPPC_FIFO_EXEM_PASS_2     */ "FIFO for lem lookup result",
    /* IPPC_FIFO_IP_DSP          */ "FIFO for data sample\n the fifo size is twice the db fifo size + 12",
    /* IPPC_FIFO_STATE_TABLE_PASS_1 */ "FIFO for lem lookup result",
    /* IPPC_FIFO_STATE_TABLE_PASS_2 */ "FIFO for lem lookup result",
    /* IPPC_FIFO_TCAM_PASS_1     */ "FIFO for tcam 1st pass lookup result",
    /* IPPC_FIFO_TCAM_PASS_2     */ "FIFO for tcam 2nd pass lookup result",
    /* IPPC_IPPC_DEBUG_COLLECTOR_FIFO */ "Command for the DBG block",
    /* IPPC_L_4_OPS              */ "Used to calculate L4Ops. The relevant bit of the L4Ops is set to '1' if:\n (source_port       >= source_port_min ) &\n (source_port       <= source_port_max ) &\n (destination_port >= destination_port_min ) &\n (destination_port <= destination_port_max )\n Reset Value:\n Value: 64'h0 Mask: 64'h0",
    /* IPPC_MAP_STATISTIC_OBJECT */ "this memory configures how will statistics object are mapped",
    /* IPPC_MEM_220000           */ "INTERNAL",
    /* IPPC_MEM_230000           */ "INTERNAL",
    /* IPPC_MEM_240000           */ "INTERNAL",
    /* IPPC_PINFO_PMF            */ "This table provides Port Termination Context (PTC, formerly known as TM port), info for Programmable Mapping and Filtering (PMF) unit. The table has 256 entries, one per PTC port, with the index being the port number. Every entry contains information used for PMF decisions by the ingress packet processor.",
    /* IPPC_PMFACSA_ACTION       */ "",
    /* IPPC_PMFACSA_TCAM_BANK    */ "This table provides access to the TCAM banks through read and write commands.\n every entry refering to a TCAM bank.",
    /* IPPC_PMFACSA_TCAM_BANK_COMMAND */ "TCAM command:\n The command can be write/read/compare. In case of write and compare the Din is needed",
    /* IPPC_PMFACSA_TCAM_BANK_REPLY */ "TCAM reply. The reply is based on the command entered before.",
    /* IPPC_PMFACSA_TCAM_ENTRY_PROTECTION */ "This table holds the ECC bits for each entry in the TCAM. The table is built from 12 tables,\n Each of them with 2K entries. Each table represents ECC bits for one corressponding TCAM.\n Note:  If the addresss lsb is clear (even address)  the entry is a key. If the addresss lsb is set (odd address)  the entry is a mask.",
    /* IPPC_PMFACSA_TCAM_HIT_INDICATION */ "",
    /* IPPC_PMFACSB_ACTION       */ "",
    /* IPPC_PMFACSB_TCAM_BANK    */ "This table provides access to the TCAM banks through read and write commands.\n every entry refering to a TCAM bank.",
    /* IPPC_PMFACSB_TCAM_BANK_COMMAND */ "TCAM command:\n The command can be write/read/compare. In case of write and compare the Din is needed",
    /* IPPC_PMFACSB_TCAM_BANK_REPLY */ "TCAM reply. The reply is based on the command entered before.",
    /* IPPC_PMFACSB_TCAM_ENTRY_PROTECTION */ "This table holds the ECC bits for each entry in the TCAM. The table is built from 12 tables,\n Each of them with 2K entries. Each table represents ECC bits for one corressponding TCAM.\n Note:  If the addresss lsb is clear (even address)  the entry is a key. If the addresss lsb is set (odd address)  the entry is a mask.",
    /* IPPC_PMFACSB_TCAM_HIT_INDICATION */ "",
    /* IPPC_PMF_FEM_PROGRAM      */ "This table contains the Programmable Mapping and Filtering (PMF) Field Extraction Macros (FES) program. The table has 64 entries, the first 32 entries dedicated to FEM 0-7, and the last 32 entries dedicated to FEM 8-15. Each entry contains a program and key selection for the FEM.",
    /* IPPC_PMF_FES_PROGRAM      */ "This table holds the Program and Key-Select for Field-Extraction-Macros.\n lines 0-31 : for FESs 0-15\n lines 32-63 : for instructions 16-31",
    /* IPPC_PMF_INITIAL_KEY_PASS_2 */ "This table maps program to initial key for the 2nd PMF pass. The table has 32 entries, one per program. Every entry contains the initial key to be used for the 2nd PMF pass.\n Used in conjunction with the previous PMF Pass Key Gen and PMF Pass lookup tables.",
    /* IPPC_PMF_KBR_PASS_1       */ "Program Instruction Table per program for all 8 keys",
    /* IPPC_PMF_KBR_PASS_2       */ "Program Instruction Table per program for all 8 keys",
    /* IPPC_PMF_KEY_GEN_PASS_1   */ "Program Instruction Table per program for all 8 keys",
    /* IPPC_PMF_KEY_GEN_PASS_2   */ "Program Instruction Table per program for all 4 keys LSB\n lines 0-31 : for instructions 0-7\n lines 32-63 : for instructions 8-15",
    /* IPPC_PMF_PROGRAM_GENERAL  */ "This table provides default values for PMF programs. The table has 32 entries, one per program. Every entry default values for this program.",
    /* IPPC_PROGRAM_KEY_GEN_VAR  */ "This table provides per PMF program a general variable that can be used in the programmable keys. The table has 32 entries, one per program, and the entrys value is the general variable.",
    /* IPPC_PTC_INFO_PMF         */ "Port-Termination-Context info",
    /* IPPC_STATE_TABLE          */ "State Table used in key update keygen or acr",
    /* IPPC_TRAJECTORY_CONFIGURATION */ "FIFO for lem lookup result",
    /* IPPD_CONTEXT_PROFILE_TABLE */ "This is a mapping between in lif profile to",
    /* IPPD_DESTINATION_STATUS   */ "This table holds a valid bit for each system-port.",
    /* IPPD_EFES_ACTION_MASK     */ "Program Instruction Table per program for all 8 keys",
    /* IPPD_ELEPHANT_TRAP_CFG    */ "Elephant trap configuration.\n The address to this table is 4 bits taken from elephant_trap_payload(32) starting from ElephantTrapLearnCfgStartBit.",
    /* IPPD_FEC_ARR_PREFIX_INDEX_TABLE */ "A list of prefixes, each line is a possible prefix.",
    /* IPPD_FEC_ECMP             */ "The FEC ECMP table contains ECMP information for the first 4K FECs.  The table has 4K entries, with the index being the FEC pointer. Each entry has information on the corresponding FEC.",
    /* IPPD_FEC_ECMP_GROUP_PROFILE */ "The FEC ECMP table contains ECMP RPF information for the first 4K FECs.  The table has 512K entries, with the index being the RPF FEC pointer. Each entry has information on the corresponding FEC.",
    /* IPPD_FEC_ECMP_MEMBERS     */ "The FEC ECMP table contains ECMP RPF information for the first 4K FECs.  The table has 512K entries, with the index being the RPF FEC pointer. Each entry has information on the corresponding FEC.",
    /* IPPD_FEC_ECMP_RPF_MODE    */ "The FEC ECMP table contains ECMP RPF information for the first 4K FECs.  The table has 512K entries, with the index being the RPF FEC pointer. Each entry has information on the corresponding FEC.",
    /* IPPD_FEC_FORMAT_CONFIGURATION_TABLE */ "A configuration table for the ARR, where each line represents a specific input format.\n Each line includes the configurartion data for each field in the incoming data.\n A general look of each line:\n  f_1.size , f_1.position , f_1.prefix , f_2.size , f_2.position , f_2.prefix , ... , f_n.size , f_n.position , f_n.prefix",
    /* IPPD_FEC_PATH_SELECT      */ "This table maps a FEC entry to a protection path selection. The table has 64K . The index to the table is the FEC entry number, with every eight entries being stored in a single register line, meaning the register address is set by FEC number 16:4 and entry number in the register by FEC number 3:1. Each entry indicates if an odd or even protection path should be taken (in case of protection)",
    /* IPPD_FES_2ND_INSTRUCTION  */ "Program Instruction Table per program for all 8 keys",
    /* IPPD_FIFO_DIRECT_EXTRACTION */ "FIFO for lem lookup result",
    /* IPPD_FIFO_DIRECT_PASS     */ "FIFO for lpm 1st lookup result",
    /* IPPD_FIFO_DSP             */ "FIFO for data sample\n the fifo size is twice the db fifo size + 8",
    /* IPPD_FIFO_DSP_1           */ "FIFO for data sample",
    /* IPPD_FIFO_ELK_RX          */ "FIFO for the elk results",
    /* IPPD_FIFO_ELK_TX          */ "FIFO for the elk requests",
    /* IPPD_FIFO_EXEM            */ "FIFO for lem lookup result",
    /* IPPD_FIFO_IP_DSP          */ "FIFO for data sample\n the fifo size is twice the db fifo size + 8",
    /* IPPD_FIFO_PACKET_DATA     */ "FER partial LB keys",
    /* IPPD_FIFO_PASS_1          */ "FER partial LB keys",
    /* IPPD_FIFO_PASS_2          */ "FER partial LB keys",
    /* IPPD_FIFO_PASS_3          */ "FER partial LB keys",
    /* IPPD_FIFO_PASS_4          */ "FER partial LB keys",
    /* IPPD_FIFO_PASS_5          */ "FER partial LB keys",
    /* IPPD_FIFO_PASS_6          */ "FER partial LB keys",
    /* IPPD_FIFO_TCAM_PASS_1     */ "FIFO for tcam 1st pass lookup result",
    /* IPPD_FORWARDING_STRENGTH_PROFILE */ "maps 4b forward strength to TM-profile(2b) and forward-strength(1b)",
    /* IPPD_FORWARDING_TYPE_TO_CODE */ "maps each forwarding_layer_type, forwarding_layer_qualifier0 to code",
    /* IPPD_FWD_ACT_PROFILE      */ "This table defines the actions that need to be taken per forwarding action profile. Throughout the PP, various functions assign a forwarding action profile, while the actions of this profile are defined in this table. The table has 512 entries, with the index being the forwarding action profile, and the entrys value being the required actions.\n this table is used to trap resolution. if the packet is trap, the table indicates which fieldes should be overwriten and the new values. if there is no v ...",
    /* IPPD_FWD_DESTINATION_PROFILE */ "this table defines the actions that need to be taken per forwarding action profile",
    /* IPPD_HEADER_PROFILE       */ "Maps each of 16 possible Header profile",
    /* IPPD_IN_LIF_PROFILE_TABLE */ "This is a mapping between in lif profile to",
    /* IPPD_IN_PORT_PROFILE_TABLE */ "This is a mapping between in lif profile to",
    /* IPPD_IPPD_DEBUG_COLLECTOR_FIFO */ "Command for the DBG block",
    /* IPPD_LBP_PP_PORT_INFO     */ "General configuration per pp port.",
    /* IPPD_LEARN_ARR_CONFIGURATION_TABLE */ "configuration for the ARR used for the learn trsanslation from Jericho2 to Jericho",
    /* IPPD_MAP_STATISTIC_OBJECT */ "this memory configures how will statistics object are mapped",
    /* IPPD_MEM_220000           */ "INTERNAL",
    /* IPPD_MEM_230000           */ "INTERNAL",
    /* IPPD_MEM_240000           */ "INTERNAL",
    /* IPPD_MIRROR_CODE_TO_CMD   */ "Mapping of mirror_code(9) to mirror_command(5).\n This command is going to the TM on the TM-command.sniff1_cmd\n This command is also mapped to probability (MrrActProbability table).",
    /* IPPD_MRR_ACT_PROBABILITY  */ "Probability of mirror execution per mirror-command.",
    /* IPPD_OPCODE_MAP_RX        */ "opcode -> size, type",
    /* IPPD_OPCODE_MAP_TX        */ "opcode -> size, type",
    /* IPPD_PER_TRAP_CONTEXT_ENABLE */ "This is a  Trap per context enabler",
    /* IPPD_PINFO_PMF            */ "This table provides Port Termination Context (PTC, formerly known as TM port), info for Programmable Mapping and Filtering (PMF) unit. The table has 256 entries, one per PTC port, with the index being the port number. Every entry contains information used for PMF decisions by the ingress packet processor.",
    /* IPPD_PMFBCS_ACTION        */ "",
    /* IPPD_PMFBCS_TCAM_BANK     */ "This table provides access to the TCAM banks through read and write commands.\n every entry refering to a TCAM bank.",
    /* IPPD_PMFBCS_TCAM_BANK_COMMAND */ "TCAM command:\n The command can be write/read/compare. In case of write and compare the Din is needed",
    /* IPPD_PMFBCS_TCAM_BANK_REPLY */ "TCAM reply. The reply is based on the command entered before.",
    /* IPPD_PMFBCS_TCAM_ENTRY_PROTECTION */ "This table holds the ECC bits for each entry in the TCAM. The table is built from 12 tables,\n Each of them with 2K entries. Each table represents ECC bits for one corressponding TCAM.\n Note:  If the addresss lsb is clear (even address)  the entry is a key. If the addresss lsb is set (odd address)  the entry is a mask.",
    /* IPPD_PMFBCS_TCAM_HIT_INDICATION */ "",
    /* IPPD_PMF_FES_PROGRAM      */ "This table holds the Program and Key-Select for Field-Extraction-Macros.\n lines 0-31 : for FESs 0-15\n lines 32-63 : for instructions 16-31",
    /* IPPD_PMF_KBR_PASS         */ "Program Instruction Table per program for all 8 keys",
    /* IPPD_PMF_PASS_KEY_GEN     */ "Program Instruction Table per program for all 8 keys",
    /* IPPD_PMF_PROGRAM_GENERAL  */ "This table provides default values for PMF programs. The table has 32 entries, one per program. Every entry default values for this program.",
    /* IPPD_PPH_ATTRIBUTES_BY_EEI */ "for each EEI identifier decide if a FHEI sohuld be created instead of EEI and determine it's type and size. This is for MPLS packets, for IP and ETHERNET these values are overriden.",
    /* IPPD_PROGRAM_KEY_GEN_VAR  */ "This table provides per PMF program a general variable that can be used in the programmable keys. The table has 32 entries, one per program, and the entrys value is the general variable.",
    /* IPPD_PTC_INFO_PMF         */ "Port-Termination-Context info",
    /* IPPD_SAME_INTERFACE_MAP   */ "This is a mapping between in lif profile to",
    /* IPPD_SLB_CFG              */ "Slb trap configuration.\n The address to this table is 4 bits taken from slb_payload(32) starting from SlbLearnCfgStartBit.",
    /* IPPD_SNP_ACT_PROBABILITY  */ "Probability of Snoop execution per snoop-command(4).\n Snoop_action(4) is a mapping of snoop_code(9) from the table SnoopAction.",
    /* IPPD_SNP_CODE_TO_CMD      */ "Mapping of snoop_code(9) to snoop_command(5).\n This command is going to the TM on the TM-command.sniff0_cmd\n This command is also mapped to probability",
    /* IPPD_STATISTICAL_SAMPLE_ACT_PROBABILITY */ "Probability of Statistical-sampling execution per Statistical-sampling-command.",
    /* IPPD_STAT_SAMPLE_CODE_TO_CMD */ "Mapping of statistical_sampling_code(9) to statistical_sampling_command(5).\n This command is going to the TM on the TM-command.sniff2_cmd\n This command is also mapped to probability (StatisticalSampleActProbability)",
    /* IPPD_SUPER_ARR_FORMAT_CONFIGURATION_TABLE */ "A configuration table for the ARR, where each line represents a specific input format.\n Each line includes the configurartion data for each field in the incoming data.\n A general look of each line:\n  f_1.size , f_1.position , f_1.prefix , f_2.size , f_2.position , f_2.prefix , ... , f_n.size , f_n.position , f_n.prefix",
    /* IPPD_SUPER_ARR_PREFIX_INDEX_TABLE */ "A list of prefixes, each line is a possible prefix.",
    /* IPPD_TIME_STAMP_FIFO      */ "Fifo that samples the Time stamp from the Parser and holds it until the relevant packet has arrived.",
    /* IPPD_WEAK_TM_MAP          */ "This is a mapping between in lif profile to",
    /* IPPE_APPLET_MEMORY        */ "Holds all the packets that will be injected in this applet transaction",
    /* IPPE_IPPE_DEBUG_COLLECTOR_FIFO */ "Command for the DBG block",
    /* IPPE_LLRCS_ACTION         */ "",
    /* IPPE_LLRCS_TCAM_BANK      */ "This table provides access to the TCAM banks through read and write commands.\n every entry refering to a TCAM bank.",
    /* IPPE_LLRCS_TCAM_BANK_COMMAND */ "TCAM command:\n The command can be write/read/compare. In case of write and compare the Din is needed",
    /* IPPE_LLRCS_TCAM_BANK_REPLY */ "TCAM reply. The reply is based on the command entered before.",
    /* IPPE_LLRCS_TCAM_ENTRY_PROTECTION */ "This table holds the ECC bits for each entry in the TCAM. The table is built from 12 tables,\n Each of them with 2K entries. Each table represents ECC bits for one corressponding TCAM.\n Note:  If the addresss lsb is clear (even address)  the entry is a key. If the addresss lsb is set (odd address)  the entry is a mask.",
    /* IPPE_LLRCS_TCAM_HIT_INDICATION */ "",
    /* IPPE_LLR_LLVP             */ "Link layer VLAN processing table. This table has 1024 entries, and the index  into the table is In-PP-Port.VLAN-Classification-Profile (3b), Is-Priority, Packet-Format-Qualifier1.Ethernet-Tag-Format (6). Each entry includes information on the matcing VLAN tag and how it should be processed.",
    /* IPPE_LLR_PTC_TABLE        */ "",
    /* IPPE_LL_MIRROR_PROFILE    */ "Link layer Mirror profile table. This table has 2K entries, and the index  into the table is VID-Index, In-PP-Port.Each entry contains the link layer mirror profile matching its index.",
    /* IPPE_PINFO_LLR            */ "This register includes port information settings of the IHP link layer block. This table has 256 entries, one per port.",
    /* IPPE_PP_PORT_TO_QOS       */ "Mapped Pp-Port to initial Qos information",
    /* IPPE_PP_PORT_TO_VD        */ "",
    /* IPPE_PRSE_HEADER_SIZE_MAP */ "HeaderSizeMap",
    /* IPPE_PRSE_LOAD_BALANCING_PROGRAM */ "PrseLoadBalancingProgram0..14",
    /* IPPE_PRSE_PROGRAM         */ "PrseProgram0..14",
    /* IPPE_PRSE_TCAM            */ "PrseTcam",
    /* IPPE_PRSE_TCAM_AD_A       */ "PrseTcamAdA0..14",
    /* IPPE_PRSE_TCAM_AD_B       */ "PrseTcamAdB0..14",
    /* IPPE_PRTCAM_TCAM_BANK     */ "This table provides access to the TCAM banks through read and write commands.\n every entry refering to a TCAM bank.",
    /* IPPE_PRTCAM_TCAM_BANK_COMMAND */ "TCAM command:\n The command can be write/read/compare. In case of write and compare the Din is needed",
    /* IPPE_PRTCAM_TCAM_BANK_REPLY */ "TCAM reply. The reply is based on the command entered before.",
    /* IPPE_PRTCAM_TCAM_ENTRY_PROTECTION */ "This table holds the ECC bits for each entry in the TCAM. The table is built from 12 tables,\n Each of them with 2K entries. Each table represents ECC bits for one corressponding TCAM.\n Note:  If the addresss lsb is clear (even address)  the entry is a key. If the addresss lsb is set (odd address)  the entry is a mask.",
    /* IPPE_PRTCAM_TCAM_HIT_INDICATION */ "",
    /* IPPE_PRT_FIFO             */ "",
    /* IPPE_PRT_PP_PORT_INFO     */ "default values for pp-port, src-sys-port, parsing-context and prt-qulifier0.\n per pp-port.",
    /* IPPE_PRT_PROFILE_INFO     */ "The address to this table is ptc_profile, rcycle_profile",
    /* IPPE_PRT_PTC_INFO         */ "thse values together with the values from RecycleInfo are concetrated to 32B from header to build the input to the FFCs:                                                    ptc, ptc.attributes, recycle, recycle.attributes, 32B header MSB",
    /* IPPE_PRT_PTC_PROFILE      */ "address to ProfileInfo table is:                                                                      ptc(8)",
    /* IPPE_PRT_RECYCLE_INFO     */ "thse values together with the values from PtcInfo are concetrated to 32B  from header to build the input to the FFCs:                                                          ptc, ptc.attributes, recycle, recycle.attributes, 32B header MSB",
    /* IPPE_PRT_RECYCLE_PROFILE  */ "address to ProfileInfo table is:                                                                      recycle_command.prt_profile",
    /* IPPE_VIRTUAL_PORT_AD      */ "default values for pp-port and src-sys-port.",
    /* IPPE_VTT_FIFO             */ "",
    /* IPSEC_CONTEXTS_Q_SIZE     */ "the size of each context queue",
    /* IPSEC_CONTEXTS_Q_START    */ "the start of each context queue",
    /* IPSEC_CONTEXTS_Q_TH       */ "the threshold of each context queue",
    /* IPSEC_ERROR_COUNTERS_MEMORY */ "holds a counter per tunnel  and a profile to determine which error will be counted",
    /* IPSEC_LFEM_FIELD_SELECT_MAP */ "LFEM field selct map  **make sure the defulat size is the total size of the memory!!**",
    /* IPSEC_POST_DATA           */ "post processing data",
    /* IPSEC_POST_OUTPUT_FIFO_MEM */ "memories for the input fifos fo each spu wrapper",
    /* IPSEC_PRGE_DATA           */ "Programmable editor data",
    /* IPSEC_PRGE_INSTRUCTION    */ "Programmable Editor (PRGE) instructions",
    /* IPSEC_PRGE_PROGRAM_VARIABLES */ "holds several program variable needed for the dedicated logic for SPU headers. Accessed according to program.",
    /* IPSEC_PROGRAM_DATA        */ "Program data memory with initial instruciotn index and two initial instructions",
    /* IPSEC_PROGRAM_INDEX_MEMORY */ "a program index memory mapped by tnnel id",
    /* IPSEC_REASSEMBLY_BYPASS_FIFO_MEM */ "memory for the bypass fifo in the reassembly block",
    /* IPSEC_REASSEMBLY_CONTEXT_NUM */ "Reassembly context number mapped to tunnel id",
    /* IPSEC_REASSEMBLY_PACKETS_MEMORY_0 */ "a memory for reassembled packets",
    /* IPSEC_REASSEMBLY_PACKETS_MEMORY_1 */ "a memory for reassembled packets",
    /* IPSEC_RX_ESN_PTR          */ "a pointer to the msb of the ESN in an RX packet",
    /* IPSEC_SEQUENCE_VERIFICATION_MEMORY */ "holds sequence numbers for all tunnels",
    /* IPSEC_SEQUENCE_VERIFICATION_MEMORY_SLAVE */ "holds the same data as the sequence verification memory but read from the reassembly block in order to calculate ESN - updates with the master memory",
    /* IPSEC_SPU_BYPASS_FIFO_MEM */ "memroy for the bypass fifo in the spu control logic block",
    /* IPSEC_SPU_WRAPPER_TOP_SPU_INPUT_FIFO_MEM_H */ "memories for the input fifos fo each spu wrapper",
    /* IPSEC_SPU_WRAPPER_TOP_SPU_OUTPUT_FIFO_MEM_H */ "memories for the Output fifos fo each spu wrapper",
    /* IPSEC_STAMPING_SEQUENCE_NUMBER */ "holds sequence numbers for all tunnels",
    /* IPSEC_TUNNEL_DATA         */ "Holds SPU header fields",
    /* IPSEC_TUNNEL_ID_TABLE     */ "Tunnel Id table for PTCH , Dumy header and MTU",
    /* IPSEC_TUNNEL_SEQUENCE_NUMBER */ "holds sequence numbers for all tunnels",
    /* IPST_CRVS                 */ "Each source device is associated with one of two possible CreditValues.\n                   Each bit in this bitmap determines if CreditValue0 or CreditValue1 is to be used.\n                   This table is enabled by CrValSelEnable register.",
    /* IPST_IPS_0_CREDIT_ARBITER_FIFO */ "INTERNAL",
    /* IPST_IPS_1_CREDIT_ARBITER_FIFO */ "INTERNAL",
    /* IPS_CAM_FULL_THERSHOLD    */ "IFC CamFull Memory.\n Threshold for DRAM/Fabric CAM full per Qtype. CAM maximum value is 'd127.",
    /* IPS_CFMEM                 */ "IFC CamFull Memory.\n Threshold for DRAM/Fabric CAM full per Qtype. CAM maximum value is 'd127.",
    /* IPS_CNT_DRAM_CAM          */ "INTERNAL",
    /* IPS_CNT_DRAM_MEM          */ "INTERNAL",
    /* IPS_CNT_FABRIC_CAM        */ "INTERNAL",
    /* IPS_CNT_FABRIC_MEM        */ "INTERNAL",
    /* IPS_CRBAL                 */ "This memory holds most of the Q descriptor variables.\n                   Caution: This table is for debug purposes and should be used with user discretion as it can effect the IPS operation. Special consideration should be given when writing to this table.",
    /* IPS_CRBALTH               */ "The values in this table affect the credit request state (CRS) according to the credit balance (or the difference between it and the Q size). Values for all thresholds are given in terms of mantissa and exponent. The value of the threshold is (M x 2^E), where M=TH7:4 and E=TH3:0. All values are in 1B resolution.",
    /* IPS_CRBAL_TH              */ "The values in this table affect the credit request state (CRS) according to the credit balance (or the difference between it and the Q size).\n All values are in 1/2/4B resolution (according to CreditBalanceResolution) and possitive.\n Access to this table is according to Queue Type.",
    /* IPS_CRDT_VALUE_SEL        */ "Each source device is associated with one of two possible CreditValues.\n Each bit in this bitmap determines if CreditValue0 or CreditValue1 is to be used.\n This table is enabled by CrValSelEnable register.",
    /* IPS_CRDT_WD_TH            */ "The values in this table hold thresholds for the credit Watchdog, in case a long time passed since the last credit for an active Queue was received, a Flow Status Message can be sent or the queue can be marked to be deleted.\n Deleted queue will drop all the packets in the queue, in case a packet arrives when the queue is in delete state and there are still packets need to be dropped the new packet will also be dropped.\n Queue in delete state will return to normal state, when a new credit arrives ...",
    /* IPS_CREDIT_BALANCE_BASED_THRESHOLDS_TABLE */ "The values in this table affect the credit request state (CRS) according to the credit balance (or the difference between it and the Q size). Values for all thresholds are given in terms of mantissa and exponent. The value of the threshold is (M x 2^E), where M=TH7:4 and E=TH3:0. All values are in 1B resolution. Access to this table is according to Queue Type.",
    /* IPS_CREDIT_WATCHDOG_THRESHOLDS_TABLE */ "The values in this table hold thresholds for the credit Watchdog, in case a long time passed since the last credit for an active Queue was received, a Flow Status Message can be sent or the queue can be marked to be deleted.\n Deleted queue will drop all the packets in the queue, in case a packet arrives when the queue is in delete state and there are still packets need to be dropped the new packet will also be dropped.\n Queue in delete state will return to normal state, when a new credit arrives ...",
    /* IPS_CRVS                  */ "Each source device is associated with one of two possible CreditValues.\n                   Each bit in this bitmap determines if CreditValue0 or CreditValue1 is to be used.\n                   This table is enabled by CrValSelEnable register.",
    /* IPS_CRWDTH                */ "The values in this tables gives the thresholds for credit watchdog, in case a long time passed since the last credit for an active Q. the Values are given in WD full cycle units. A value of 0 disables the relevant TH.",
    /* IPS_CR_BAL_TABLE          */ "This memory holds most of the Q descriptor variables.\n                   Caution: This table is for debug purposes and should be used with user discretion as it can effect the IPS operation. Special consideration should be given when writing to this table.",
    /* IPS_D_DQM_DQCQ_FIFO_MEMORY */ "INTERNAL",
    /* IPS_EMPTYQCRBAL           */ "The values in this table relate to the credit balance of an empty Q, and affect its latency and credit waste.\n                   Note: Values given here are in 2's complement",
    /* IPS_EMPTY_QUEUE_CREDIT_BALANCE_TABLE */ "The values in this table relate to the credit balance of an empty Q, and affect its latency and credit waste. Access to this table is according to Queue Type.\n Note: Values given here are in 2's complement",
    /* IPS_EMPTY_Q_CRBAL_TH      */ "The values in this table relate to the credit balance of an empty Q, and affect its latency and credit waste.\n All values are in 1/2/4B resolution (according to CreditBalanceResolution) and presented in 2's complement.\n Access to this table is according to Queue Type.",
    /* IPS_FLOW_ID_LOOKUP_TABLE  */ "Queue to egress base flow mapping- Every 4 queues are mapped to a single base flow and subflow mode.\n Details are explained under InterdigitatedMode register.",
    /* IPS_FLWID                 */ "Queue to egress base flow mapping- Every 4 queues are mapped to a single base flow and subflow mode.\n                   Details are explained under InterdigitatedMode register.",
    /* IPS_FMSBYP                */ "FMS may be bypassed if destination device supports Egress FMS function.\n                   Following table has 1b per Destination Device, set to 1 if FMS may be bypassed.\n                   This configuration is enabled by FmsEnableByp register.",
    /* IPS_FMS_BYPASS            */ "FMS may be bypassed if destination device supports Egress FMS function.\n Following table has 1b per Destination Device, set to 1 if FMS may be bypassed.\n This configuration is enabled by FmsEnableByp register.",
    /* IPS_FSMRQ_FIFO_MEMORY     */ "INTERNAL",
    /* IPS_MAXQSZ                */ "Maximum queue size for system RED feature- One entry per system physical port reads the value received from credits.",
    /* IPS_MEM_180000            */ "INTERNAL",
    /* IPS_MEM_200000            */ "INTERNAL",
    /* IPS_MEM_220000            */ "INTERNAL",
    /* IPS_MEM_240000            */ "INTERNAL",
    /* IPS_MEM_260000            */ "INTERNAL",
    /* IPS_MEM_280000            */ "INTERNAL",
    /* IPS_MEM_1A0000            */ "INTERNAL",
    /* IPS_MEM_1C0000            */ "INTERNAL",
    /* IPS_MEM_1E0000            */ "INTERNAL",
    /* IPS_MEM_2A0000            */ "INTERNAL",
    /* IPS_MEM_2C0000            */ "INTERNAL",
    /* IPS_MEM_2E0000            */ "INTERNAL",
    /* IPS_QDESC                 */ "This memory holds most of the Q descriptor variables.\n                   Caution: This table is for debug purposes and should be used with user discretion as it can effect the IPS operation. Special consideration should be given when writing to this table.",
    /* IPS_QDESC_TABLE           */ "This memory holds most of the Q descriptor variables.\n                   Caution: This table is for debug purposes and should be used with user discretion as it can effect the IPS operation. Special consideration should be given when writing to this table.",
    /* IPS_QFM                   */ "Queue to egress base flow mapping- Every 4 queues are mapped to a single base flow and subflow mode.\n Details are explained under InterdigitatedMode register.",
    /* IPS_QM_RPRT_FIFO          */ "",
    /* IPS_QPM_1                 */ "Queue port map 1 (under system red mode)",
    /* IPS_QPM_2                 */ "Queue port map 2 (under no system red mode).\n                   In this mode, each entry holds the values for 4 consecutive queues.",
    /* IPS_QPM_1_NO_SYS_RED      */ "Queue port map 1 (under no system red mode)",
    /* IPS_QPM_1_SYS_RED         */ "Queue port map 1 (under system red mode)",
    /* IPS_QPM_2_NO_SYS_RED      */ "Queue port map 2 (under no system red mode).\n                   In this mode, each entry holds the values for 4 consecutive queues.",
    /* IPS_QPM_2_SYS_RED         */ "Queue port map 2 (under system red mode)",
    /* IPS_QPRI                  */ "The values in this table Determines if the Queue is High / Low priority and if it is OCB-Only (low latency).\n                   This affects the DQCQ context selection for this Q-type. Access to this table is according to Queue Type.",
    /* IPS_QPRISEL               */ "Every 64 contiguous queues are assigned one of four 64-bit bitmaps.\n                   Each line holds the values for 16 groups.",
    /* IPS_QSIZE_TH              */ "The values in this table affect the credit request state (CRS) according to the difference between Q size and credit balance.\n All values are in 1/2/4B resolution (according to CreditBalanceResolution) and presented in 2's complement.\n Access to this table is according to Queue Type.",
    /* IPS_QSPM                  */ "Queue port map 1 (under system red mode)",
    /* IPS_QSZ                   */ "Q size variable of the Q descriptor. The value is given in mantissa and exponent format, where M=q_size6:4 and E=q_size3:0. The value is (M x 2^E). A value of -1 (0xFF00 in the register) means that the Q size is over the maximum of the IPS. The queue size is given in 16B resolution.\n                   Caution: This table is for debug purposes and should be used with user discretion as it can effect the IPS operation. Special consideration should be given when writing to this table.",
    /* IPS_QSZTH                 */ "The values in this table affect the credit request state (CRS) according to the difference between Q size and credit balance. Values for all thresholds are given in terms of mantissa and exponent, with a sign bit. The value of the threshold is (M x 2^E), where M=TH6:4 ,E=TH3:0 and TH7 is the sign bit. All values are in 1B resolution",
    /* IPS_QTYPE                 */ "Each queue is mapped to a queue type, to determine various thresholds and parameters.",
    /* IPS_QUEUE_DESCRIPTOR_TABLE */ "This memory holds most of the Q descriptor variables.\n Caution: This table is for debug purposes and should be used with user discretion as it can effect the IPS operation. Special consideration should be given when writing to this table.",
    /* IPS_QUEUE_PRIORITY_TABLE  */ "The values in this table Determines if the Queue is High / Low priority.\n This affects the DQCQ context selection for this Q-type. Access to this table is according to Queue Type.",
    /* IPS_QUEUE_SIZE_BASED_THRESHOLDS_TABLE */ "The values in this table affect the credit request state (CRS) according to the difference between Q size and credit balance. Values for all thresholds are given in terms of mantissa and exponent, with a sign bit. The value of the threshold is (M x 2^E), where M=TH9:4 ,E=TH3:0 and TH10 is the sign bit. All values are in 1B resolution. Access to this table is according to Queue Type.",
    /* IPS_QUEUE_SIZE_TABLE      */ "Q size variable of the Q descriptor. The queue size is given in 16B resolution.\n Caution: This table is for debug purposes and should be used with user discretion as it can effect the IPS operation. Special consideration should be given when writing to this table.",
    /* IPS_QUEUE_TYPE_LOOKUP_TABLE */ "Each queue is mapped to a queue type, to determine various thresholds and parameters. Used as index to QPRI, QSZTH, SFTH, CRBALTH, EMPTYQCRBAL, CRWDTH tables.",
    /* IPS_Q_PRIORITY_BIT_MAP    */ "The bit position in the bitmap corresponding to the queue determines the priority.",
    /* IPS_SFTH                  */ "Slow-Factor (SF) Thresholds.\n                   SlowFactor is used when exact scheduling is desired.\n                   When Flow Status is SLOW, the SCH is assumed to send SLOW rate that ensures only 1 credit is inflight. This allows the IPS to respond in time to stop the SCH such that no exess credits accumulate in the IPS once the Queue is emptied.\n                   The SlowFactor reflects the number of missing credits (Qsize-CrBal) and allows the SCH to use higher SLOW rates, such that more ...",
    /* IPS_SLOW_FACTOR_TH        */ "Slow-Factor (SF) Thresholds.\n SlowFactor is used when exact scheduling is desired.\n When Flow Status is SLOW, the SCH is assumed to send SLOW rate that ensures only 1 credit is inflight. This allows the IPS to respond in time to stop the SCH such that no exess credits accumulate in the IPS once the Queue is emptied.\n The SlowFactor reflects the number of missing credits (Qsize-CrBal) and allows the SCH to use higher SLOW rates, such that more than 1 credit is inflight but not too many inflight c ...",
    /* IPS_SLOW_FACTOR_THRESHOLDS_TABLE */ "Slow-Factor (SF) Thresholds.\n SlowFactor is used when exact scheduling is desired.\n When Flow Status is SLOW, the SCH is assumed to send SLOW rate that ensures only 1 credit is inflight. This allows the IPS to respond in time to stop the SCH such that no exess credits accumulate in the IPS once the Queue is emptied.\n The SlowFactor reflects the number of missing credits (Qsize-CrBal) and allows the SCH to use higher SLOW rates, such that more than 1 credit is inflight but not too many inflight c ...",
    /* IPS_SPM                   */ "Queue port map 2 (under no system red mode).\n In this mode, each entry holds the values for 4 consecutive queues.",
    /* IPS_S_DQCQ_FIFO_MEMORY    */ "INTERNAL",
    /* IPS_TIME_STAMP_MEMORY     */ "INTERNAL",
    /* IPTE_CLIENT_CAL           */ "This is the IPTE Client Selection calendar memory.",
    /* IPTE_CLIENT_CAL1          */ "This is the IPTE Client Selection calendar memory. client calendar 1",
    /* IPTE_PORT_CAL             */ "This is the IPTE PORT Selection calendar memory.",
    /* IPTE_PORT_CAL1            */ "This is the IPTE PORT Selection calendar memory for Port calendar 1.",
    /* IPTE_PORT_CONTEXT         */ "This is the IPTE pre-Port packet context memory",
    /* IPTE_PREFETCH_FIFO        */ "This is the IPTE Queue Selection calendar memory.",
    /* IPTE_Q2C_MAP              */ "This is the IPTE Queue to channel mapping Database. Indexed by destination queue. On a reset, all entries are initialized with fc_index=0, port=0xf",
    /* IPTE_QMAX_BUCKET          */ "This is the IPTE QMAX credit bucket working memory. Access onl",
    /* IPTE_QMAX_BURST           */ "This is the IPTE QMAX burst threshold configuration memory.",
    /* IPTE_QMAX_RATE            */ "This is the IPTE QMAX rate configuration memory.",
    /* IPTE_RESIDUAL_DB          */ "This is the IPTE Working Residual Database. Access for Debug only",
    /* IPTE_RRPC                 */ "This is the IPTE Read Request packet Context Database",
    /* IPTE_TX_STATS             */ "This is the IPTE per queue transmit statistics. Each addresss has packet and byte counts for queue, with address cleared after read. CPU writes are supported, but cause memory to be initialised to CPU write value",
    /* IPTE_WDRR_CREDIT_CFG      */ "This is the IPTE WDRR Credit Configuration Database",
    /* IPTE_WDRR_STATE           */ "This is the IPTE WDRR Working Credit State Database",
    /* IPT_ARAD_SNP_MIR_STAMP_EN */ "The IPT stamps for snoop or mirror packet the following fields according to the enable bits, per snoop/mirror command from the IQM's outlif field.\n                   The address of this table access is is_snoop(~mirror), snoop/mirror-cmd.\n                   Meaning that the first rows of the table are for mirror and the last rows are for snoop",
    /* IPT_ARAD_SNP_MIR_STAMP_VALUES */ "The IPT stamps for snoop or mirror packet the following fields according to the enable bits, per snoop/mirror command from the IQM's outlif field.\n                   The address of this table access is is_snoop(~mirror), snoop/mirror-cmd.\n                   Meaning that the first rows of the table are for mirror and the last rows are for snoop",
    /* IPT_BDQ                   */ "Data Buffer queue memory",
    /* IPT_CGM_S_2D_CMD_RXI      */ "RXI",
    /* IPT_CGM_TX_CMD_RXI        */ "RXI",
    /* IPT_DBLF                  */ "DBuff List FIFO: holds a packet list of Dram Buffer pointers (up to 40 buffer pointers per packet)",
    /* IPT_DDEL_EOBFIF           */ "EOB/EOP FIFO",
    /* IPT_DQCF                  */ "DeQCmd FIFO: holds per a dequeue command from the dram/ocb per packet",
    /* IPT_DRAM_MIX_RET_BANK     */ "The bank of the data returned from the dram, that was requested from the dram and ocb mixed context.\n                   Second bit is indication if we saw crc error in this segment in this buffer from this bank",
    /* IPT_DRAM_MIX_RET_DATA     */ "Data returned from the dram, that was requested from the dram and ocb mixed context",
    /* IPT_EGQCTL                */ "EGQ control FIFO",
    /* IPT_EGQDATA               */ "EGQ DATA FIFO, PROTECTION ON HEADER BITS",
    /* IPT_EGQ_TXQ_RD_ADDR       */ "EGQ TX FIFO read pointer.",
    /* IPT_EGQ_TXQ_WR_ADDR       */ "EGQ TX FIFO write pointer.",
    /* IPT_FDTCTL                */ "FDT control FIFO",
    /* IPT_FDTDATA               */ "FDT DATA FIFO",
    /* IPT_FDT_TXQ_RD_ADDR       */ "FDT TX FIFO read pointer (DTQs)",
    /* IPT_FDT_TXQ_WR_ADDR       */ "FDT TX FIFO write pointer (DTQs)",
    /* IPT_GCI_BACKOFF_MASK      */ "GciBackofMask table.\n                   Configure mask bits for timer period randomization, each 12 bits define a configurable mask per each backoff timer (entry 0 refers to timer1).\n                   Timer = LFSR17:6 & Mask11:0 LFSR5:0",
    /* IPT_IPT_0_DEST_PIPE_MAPPING_2_FDT */ "This table maps the incoming index, build from various packet parameters to the destination pipe send to the FDT.\n                   The fields building the input of the table are:\n                   iqm2ipt_hp, iqm2ipt_mc, ftmh2ipt_dp(2bits), ftmh2ipt_trfcls(3bits), is_pkt_tdm(q_sig).\n                   Per each key above the output is 2 bits of the destination context number (0,1,2).",
    /* IPT_IPT_1_DEST_PIPE_MAPPING_2_FDT */ "This table maps the incoming index, build from various packet parameters to the destination pipe send to the FDT.\n                   The fields building the input of the table are:\n                   iqm2ipt_hp, iqm2ipt_mc, ftmh2ipt_dp(2bits), ftmh2ipt_trfcls(3bits), is_pkt_tdm(q_sig).\n                   Per each key above the output is 2 bits of the destination context number (0,1,2).",
    /* IPT_ITE_FABRIC_PEF        */ "Packet Edit FIFO",
    /* IPT_ITE_FABRIC_WDF        */ "Word Data FIFO",
    /* IPT_ITM_TO_OTM_MAP        */ "CNM: this tables maps either ITM port from the CNM FIFO or (src_sys_port from the DRAM - cfg_local_sys_port_base) to OTM/DSP that is inserted to the generated CNM FTMH.",
    /* IPT_MAX_LATENCY           */ "The IPT measures latency from the packet OAM-TS extension.\n                   In this memory the 8 maximal latency's are kept, with the pointer associated with them",
    /* IPT_MEM_80000             */ "INTERNAL",
    /* IPT_MIX_MOP_DESC          */ "MIX MOP DESC FIFO:\n                   Packet buffer pointer list\n                   This is context based, controls for traffic from pipe0 is in context0 and controls for pipe1 is in context 1.",
    /* IPT_MIX_OCB_REQ           */ "MIX OCB read request: holds the interface to the mmu for mix-ocb requests from IPT 0&1.\n                   This is context based, controls for traffic from pipe0 is in context0 and controls for pipe1 is in context 1.",
    /* IPT_MIX_SOP_DESC          */ "MIX SOP DESC FIFO:\n                   Memory contents look different for regular packet and CNM packet,\n                   for CNM they look like this:\n                   cnm data at 73:0 contains:\n                   iqm2ipt_cnm_eq_ifp              73:66 (8)\n                   iqm2ipt_cnm_eq_cpid           65:50 (16)\n                   iqm2ipt_cnm_eq_qntzd_fb    49:44 (6)\n                   iqm2ipt_cnm_eq_qoffset       43:28 (16)\n                   iqm2ipt_cnm_eq_qdelta        27:12 (16)\n        ...",
    /* IPT_MOP_MIX_SELFIF        */ "MOP Select FIFO (MIXS/MIXD)",
    /* IPT_MOP_MMU               */ "MOP MMU FIFO",
    /* IPT_MOP_SELFIF            */ "MOP Select FIFO (SRAM/MIX)",
    /* IPT_OCB_MIX_RET_DATA      */ "Data returned from the ocb, that was requested from the dram and ocb mixed context\n                   This is context based, there are 2 contexts here, one for pipe0 traffic and one for pipe1.",
    /* IPT_OCB_MOP_DESC          */ "OCB ONLY MOP DESC FIFO:\n                   Packet buffer pointer list",
    /* IPT_OCB_ONLY_OR_MIX_AND_IQ_MS_ARB */ "Ocb Only Or Mix context And IQMs arbiter: holds indication whether it was from OCB only context or from the MIX contexts",
    /* IPT_OCB_ONLY_RET_DATA     */ "Data returned from the ocb, that was requested from the ocb only context",
    /* IPT_OCB_SOP_DESC          */ "OCB ONLY SOP DESC FIFO:\n                   Memory contents look different for regular packet and CNM packet,\n                   for CNM they look like this:\n                   cnm data at 73:0 contains:\n                   iqm2ipt_cnm_eq_ifp              73:66 (8)\n                   iqm2ipt_cnm_eq_cpid           65:50 (16)\n                   iqm2ipt_cnm_eq_qntzd_fb    49:44 (6)\n                   iqm2ipt_cnm_eq_qoffset       43:28 (16)\n                   iqm2ipt_cnm_eq_qdelta        27:12 (16)\n   ...",
    /* IPT_PCP_ACF               */ "Aligner Control Fifo",
    /* IPT_PCP_CFG               */ "In fabric mode: Packing control. Address is destination device lsb (DestFap10:4).\n Output is 16 x 2b = 32b",
    /* IPT_PCQ                   */ "Start of packet queue memory",
    /* IPT_PDQ_BLOCK_MATRIX      */ "Configuration per queue of PDQ.",
    /* IPT_PEND_BUFF_FIFO        */ "Hold start buffers pending for RPC",
    /* IPT_PER_DTQ_GIPT_CFG      */ "Configurations per DTQ to FC the shapers\n Dtq0FcTh - Local-EGQ0.\n Dtq1FcTh - Local-EGQ1.\n Dtq2FcTh - Fabric-Dtq0.\n Dtq3FcTh - Fabric-Dtq1.\n Dtq4FcTh - Fabric-Dtq2.\n Dtq5FcTh - Total Fabric.",
    /* IPT_PER_GIPT_SHAPER_CFG   */ "Configuration per IPT shaper,\n addr=0 : LOCAL-HP\n addr=1 : LOCAL-LP\n addr=2 : LOCAL",
    /* IPT_PER_SHAPER_CFG        */ "Configuration per IPT shaper,\n addr=0 : LOCAL-HP\n addr=1 : LOCAL-LP\n addr=2 : LOCAL",
    /* IPT_PRIORITY_BITS_MAPPING_2_FDT */ "This table maps the incoming index, build form various packet parameter to 2 priority bits send to the FDT.\n                   The fields building the input of the table are:\n                   iqm2ipt_hp, iqm2ipt_mc, ftmh2ipt_dp(2bits), ftmh2ipt_trfcls(3bits), ftmh2ipt_tdm  to 2 bits priority",
    /* IPT_PRIORITY_BITS_MAP_2_FDT */ "This table maps the incoming index, build form various packet parameter to 2 priority bits send to the FDT.\n                   The fields building the input of the table are:\n                   iqm2ipt_hp, 0 (1 bit reserved), ftmh2ipt_dp(2bits), ftmh2ipt_trfcls(3bits), ftmh2ipt_tdm  to 2 bits priority",
    /* IPT_RDF_MIXD_FIFO         */ "Dequeue Data FIFO",
    /* IPT_RDF_SRAM_FIFO         */ "Dequeue Data FIFO\n (OCBO + SRAM + MIXS)",
    /* IPT_RRF_SRAM              */ "Dequeue Request FIFO\n (SRAM + MIXS)",
    /* IPT_SCS_EOBFIF_MIX        */ "EOB/EOP FIFO",
    /* IPT_SCS_EOBFIF_SRM        */ "EOB/EOP FIFO",
    /* IPT_SCS_OCB_EOBFIF        */ "EOB/EOP FIFO",
    /* IPT_SCS_SELFIF            */ "Select (MIX/SRAM)",
    /* IPT_SHAPER_FMC_CFG        */ "Configurations for IPT fabric-MC shaper\n Index0 : FMC-HP\n Index1 : FMC-LP\n Index2 : FMC (total)",
    /* IPT_SNP_MIR_CMD_MAP       */ "snoop/mirror command (taken from the CUD) mapped to outlif and dsp extension in the FTMH header\n                   Address to this table is\n                    mirror or snoop (1 bit), cmd4:0\n                   if snoop, addr msb = 1\n                   if mirror addr msb = 0",
    /* IPT_SOP_MMU               */ "SOP MMU FIFO:\n                   memory contents look different for regular packet and CNM packet,\n                   for CNM they look like this:\n                   cnm data at 77:0 contains:\n                   iqm2ipt_cnm_eq_ifp              77:70\n                   iqm2ipt_cnm_eq_cpid           69:54\n                   iqm2ipt_cnm_eq_qntzd_fb    53:48\n                   iqm2ipt_cnm_eq_qoffset       47:32\n                   iqm2ipt_cnm_eq_qdelta        31:16\n                   cnm_cell_size    ...",
    /* IPT_SRAM_DEL_Q            */ "DRAM Delete PDQ",
    /* IPT_S_2D_DBLF             */ "Dequeue Buffer List FIFO",
    /* IPT_S_2D_DQCF             */ "Dequeue Command FIFO",
    /* IPT_S_2D_PEND_BUFF_FIFO   */ "Hold start buffers pending for RPC",
    /* IPT_TDM_BIT_MAPPING_2_FDT */ "This table maps the incoming index, build from various packet parameters to 1 bit TDM send to the FDT.\n                   The fields building the input of the table are:\n                   iqm2ipt_hp, iqm2ipt_mc, ftmh2ipt_dp(2bits), ftmh2ipt_trfcls(3bits), is_pkt_tdm(q_sig)",
    /* IPV4_IN_IPV6_PREFIX_MATCH_TABLE */ "IPv6 in IPv6 Address Prefix Matching Memory",
    /* IPV6_PROXY_ENABLE_TABLE   */ "Source Trunk Map Table",
    /* IP_MULTICAST_TCAM         */ "IP Multicast TCAM..",
    /* IP_OPTION_CONTROL_PROFILE_TABLE */ "Actions on IP packets with options. Indexed by L3_IIF.IP_OPTION_PROFILE_INDEX(2 bits) + IP option number (8 bits)",
    /* IP_PROTO_MAP              */ "This Data Structure is used to compress the 8b IP Protocol field from the packet into a 4b field.",
    /* IP_PROTO_MAP_PIPE0        */ "This Data Structure is used to compress the 8b IP Protocol field from the packet into a 4b field.",
    /* IP_PROTO_MAP_PIPE1        */ "This Data Structure is used to compress the 8b IP Protocol field from the packet into a 4b field.",
    /* IP_PROTO_MAP_PIPE2        */ "This Data Structure is used to compress the 8b IP Protocol field from the packet into a 4b field.",
    /* IP_PROTO_MAP_PIPE3        */ "This Data Structure is used to compress the 8b IP Protocol field from the packet into a 4b field.",
    /* IP_TO_INT_CN_MAPPING      */ "Mapping for IP ECN to INT_CN.",
    /* IQMT_BDBLL                */ "BDB Link List\n                   BDB-ptr18:0",
    /* IQMT_EGR_RPT_CPM          */ "CTR Header-Compensation:\n                   In-PP-Port-Profile(4) -> CTR-Header-Compensation",
    /* IQMT_EGR_RPT_HAPM         */ "CTR Header-Compensation:\n                   Header-Append-Ptr -> Header-Apeend-Ptr-Compensation",
    /* IQMT_EGR_RPT_PCM          */ "CTR Header-Compensation:\n                   In-PP-Port -> Ctr-Hdr-Cmp-Profile table",
    /* IQMT_FLUSCNT              */ "Full Multicast User Count\n                   Number of duplications of the FullMulticast Dbuffs (UserCnt+1).",
    /* IQMT_ING_RPT_CPM          */ "CTR Header-Compensation:\n                   In-PP-Port-Profile(4) -> CTR-Header-Compensation",
    /* IQMT_ING_RPT_HAPM         */ "CTR Header-Compensation:\n                   Header-Append-Ptr -> Header-Apeend-Ptr-Compensation",
    /* IQMT_ING_RPT_PCM          */ "CTR Header-Compensation:\n                   In-PP-Port -> Ctr-Hdr-Cmp-Profile table",
    /* IQMT_MEM_300000           */ "INTERNAL",
    /* IQMT_MNUSCNT              */ "Mini Multicast User Count\n                   Number of duplications of the MiniMulticast Dbuffs (UserCnt+1).",
    /* IQMT_PDM_0                */ "Packet descriptor memory. Bank 0",
    /* IQMT_PDM_1                */ "Packet descriptor memory. Bank 1",
    /* IQMT_PDM_2                */ "Packet descriptor memory. Bank 2",
    /* IQMT_PDM_3                */ "Packet descriptor memory. Bank 3",
    /* IQMT_PDM_4                */ "Packet descriptor memory. Bank 4",
    /* IQMT_PDM_5                */ "Packet descriptor memory. Bank 5",
    /* IQM_BDBLL                 */ "BDB Link List\n                   BDB-ptr17:0",
    /* IQM_CNG_QUE_SET           */ "Congested Queue set (Dynamic)\n                   The array of 8 values presents the 8 most ocngested Queues and their Qsize.\n                   The array can be set to monitor Queues ocngestion based on buffers (Dbuffs or Bds)  by asserting CngqOnBuffEn.\n                   Reading should start from offset 0 (freeze the 8 values, and end at offset 7, release the set for further updates).\n                   Note:\n                   - This is a status array.\n                   -  during reading the ...",
    /* IQM_CNRED                 */ "CNI (Congestion Notification Indication) WRED and drop threshold table.\n                   Accessed by Q's Rate-Class during DEQUEUE process, to define the CNI indication of the packet.\n                   Note: the table does not define packet reject options.",
    /* IQM_CNTCMD_CPM            */ "CTR Header-Compensation:\n                   In-PP-Port-Profile(4) -> CTR-Header-Compensation",
    /* IQM_CNTCMD_HAPM           */ "CTR Header-Compensation:\n                   Header-Append-Ptr -> Header-Apeend-Ptr-Compensation",
    /* IQM_CNTCMD_PCM            */ "CTR Header-Compensation:\n                   In-PP-Port -> Ctr-Hdr-Cmp-Profile table",
    /* IQM_CPDMD                 */ "Congestion point (CP) queue descriptor ( Dynamic )\n                   (per each CP Queue number out of 4K, CNM logic)\n                   updated by the CNM logic.",
    /* IQM_CPDMD_SMP_OFF         */ "Congestion point (CP) queue descriptor ( Dynamic )\n                   (per each CP Queue number out of 4K, CNM logic)\n                   updated by the CNM logic.\n                   Table description for Sampling-Mode OFF",
    /* IQM_CPDMD_SMP_ON          */ "Congestion point (CP) queue descriptor ( Dynamic )\n                   (per each CP Queue number out of 4K, CNM logic)\n                   updated by the CNM logic.\n                   Table description for Sampling-Mode ON",
    /* IQM_CPDMS                 */ "Congestion point (CP) queue descriptor ( static )\n                   (per each CP Queue number out of 4K, CNM logic)\n                   In Sampling mode, bit assignment is changed:\n                   Bit 0      - CpEn1\n                   Bits 3:1 - CpClass12:0\n                   Bit 4      - CpEn2\n                   Bits 7:5 - CpClass2:0",
    /* IQM_CPDMS_SMP_OFF         */ "Congestion point (CP) queue descriptor ( static )\n                   (per each CP Queue number out of 4K, CNM logic)",
    /* IQM_CPDMS_SMP_ON          */ "Congestion point (CP) queue descriptor ( static )\n                   (per each CP Queue number out of 4K, CNM logic)",
    /* IQM_CPPRM                 */ "Congestion point (CP) parameters table\n                   (per each CpClass , CNM logic )",
    /* IQM_CRDTDIS               */ "Credit Discount\n                   A value that is discounted from the packet size on packet Dequeue  (per Q's credit-class).",
    /* IQM_DBFFM                 */ "Dbuff FIFO memory",
    /* IQM_DELFFM                */ "Delete Dbuff  FIFO memory",
    /* IQM_DEQ_FRDB              */ "IPT_FRDB_RXI",
    /* IQM_ENQ_FRDB              */ "IRR_RXI_MEM",
    /* IQM_FADTT                 */ "Free resource VOQ max threshold. (VOQ max threshold based on free resources).\n                   FreeMax-Th = Parameter*(Free-Resource >> FrRsrcMaxTh)\n                    (per Q's Rate-Class and DP).",
    /* IQM_FLUSCNT               */ "Full Multicast User Count\n                   Number of duplications of the FullMulticast Dbuffs (UserCnt+1).",
    /* IQM_FRDMT                 */ "Free resource VOQ max threshold. (VOQ max threshold based on free resources).\n                   FreeMax-Th = Parameter*(Free-Resource >> FrRsrcMaxTh)\n                    (per Q's Rate-Class and DP).",
    /* IQM_GRSPRM                */ "Guaranteed Space Parameters (static)\n                   The table containes the guaranteed space defined for each Q, in Bytes, Buffers and Bdbs.\n                   Q bellow these thresholds will accept packets regardless to WRED decisions.\n                   (per each Q's Rate-class5:0)",
    /* IQM_IPPPM                 */ "In-PP-Port to NifPort (static)\n                   Maps incoming PP-Port7:0 to VSQs",
    /* IQM_IQM_READ_PENDING_FIFO */ "INTERNAL",
    /* IQM_IRPP_CNTCMD_CPM       */ "IRPP-CTR Header-Compensation:\n                   In-PP-Port-Profile(4) -> CTR-Header-Compensation",
    /* IQM_IRPP_CNTCMD_HAPM      */ "IRPP-CTR Header-Compensation:\n                   Header-Append-Ptr -> Header-Apeend-Ptr-Compensation",
    /* IQM_IRPP_CNTCMD_PCM       */ "IRPP-CTR Header-Compensation:\n                   In-PP-Port -> Ctr-Hdr-Cmp-Profile table",
    /* IQM_IRR_RXI               */ "IRR_RXI_MEM",
    /* IQM_ITMPM                 */ "ItmPort to NifPort (static)\n                   Maps incominf TM-port7:0 to Nif-Port4:0.\n                   This is needed to define the PFC-VSQ and LLFC-VSQ pointers, which are based on NIF-Port.",
    /* IQM_MC_FADTT              */ "Fair adaptive dynamic threshold table.\n                   (VOQ dynamic threshold based on free resources).\n                    (per Q's Rate-Class and DP).\n\n                   Parameter = 2^(FadtExpSign*FadtExpVal)\n                   FADT-Threshold = Free-Resource*Parameter",
    /* IQM_MEM_1400000           */ "INTERNAL",
    /* IQM_MEM_1600000           */ "INTERNAL",
    /* IQM_MEM_1800000           */ "INTERNAL",
    /* IQM_MEM_8000000           */ "INTERNAL",
    /* IQM_MEM_9600000           */ "INTERNAL",
    /* IQM_MEM_9700000           */ "INTERNAL",
    /* IQM_MEM_7E00000           */ "INTERNAL",
    /* IQM_MNUSCNT               */ "Mini Multicast User Count\n                   Number of duplications of the MiniMulticast Dbuffs (UserCnt+1).",
    /* IQM_NIFTCM                */ "NifPort+TC mapping (static)\n                   Maps NifPort4:0TC2:0 to PFC-TC2:0\n                   The original TC is based on the Q's TC (from PQDMS), the mapped TC is used to define the PFC-VSQ (priority flow control).",
    /* IQM_OCBPRM                */ "OCB Queue params table (static)\n                   Per Q-Category1:0,Q-RC5:0Q-TC2:0\n                   Defines per Q, OCB related parametrs.\n                   Used to define the report to the IDR on each Q's eligibility to use OCB buffers.",
    /* IQM_PACK_MODE             */ "Packing mode (per destination ID).\n                   Note: Each entry holds packing mode of 16 devices.\n                   Access with dest_id11:4",
    /* IQM_PAKCET_DESCRIPTOR_MEMORY_A_DYNAMIC */ "Packet descriptor memory\n                   The memory is devided to continues ranges of buffer descriptors.\n                   Each buffer descriptor can hold Dbuff information or CUD of types\n                   ISP-CUD\n                   IPT-CUD\n                   Statistics\n                   Relevant for entries: 0 - 11FFFF",
    /* IQM_PAKCET_DESCRIPTOR_MEMORY_B_DYNAMIC */ "Packet descriptor memory\n                   The memory is devided to continues ranges of buffer descriptors.\n                   Each buffer descriptor can hold Dbuff information or CUD of types\n                   ISP-CUD\n                   IPT-CUD\n                   Statistics\n                   Relevant for entries: 0 - 11FFFF",
    /* IQM_PAKCET_DESCRIPTOR_MEMORY_ECC_DYNAMIC */ "Packet descriptor memory\n                   The memory is devided to continues ranges of buffer descriptors.\n                   Each buffer descriptor can hold Dbuff information or CUD of types\n                   ISP-CUD\n                   IPT-CUD\n                   Statistics\n                   Relevant for entries: 0 - 11FFFF",
    /* IQM_PDM                   */ "Packet descriptor memory\n                   The memory is devided to continues ranges of buffer descriptors.\n                   Each buffer descriptor can hold Dbuff information or CUD of types\n                   ISP-CUD\n                   IPT-CUD\n                   Statistics\n                   Relevant for entries: 0 - 11FFFF",
    /* IQM_PDQ_SEQ_NUM           */ "Full Multicast User Count\n Number of duplications of the FullMulticast Dbuffs (UserCnt+1).",
    /* IQM_PG_TC_BITMAP          */ "Map IQM-TC to PG offset.\n                   Mapping of IPPPM.PgTcBitmapIndex, TC to VSQ-PG-TC.\n                   VSQ-PG = In-PP-Port.VSQ-Base + VSQ-PG-TC",
    /* IQM_PQDMD                 */ "Packet Queue Descriptor Dynamic fields",
    /* IQM_PQDMS                 */ "Packet Queue Descriptor Static bits",
    /* IQM_PQRED                 */ "Packet Queue Red parameters\n                   Per Q Rate Class and Drop-p.",
    /* IQM_PQWQ                  */ "Packet Queue Average Weight\n                   Accessed according to the Queue's Rate-Class5:0.",
    /* IQM_QM_RPRT_FIFO          */ "Full Multicast User Count\n Number of duplications of the FullMulticast Dbuffs (UserCnt+1).",
    /* IQM_SCH_CCCP              */ "SCH Header-Compensation:\n                   Credit-Class to Sch-Cmp-Profile table",
    /* IQM_SCH_CPM               */ "SCH Header-Compensation:\n                   CcSchHdrCmpProfile(3), IppSchHdrCmpProfile(3) -> SCH-Header-Compensation",
    /* IQM_SCH_HAPM              */ "SCH Header-Compensation:\n                   Header-Append-Ptr -> Header-Apeend-Ptr-Compensation",
    /* IQM_SCH_HCE               */ "SCH Header-Compensation: Header-Compensation encoding table",
    /* IQM_SCH_PCM               */ "SCH Header-Compensation:\n                   In-PP-Port -> SCH-Hdr-Cmp-Profile table",
    /* IQM_SCRBUFFTH             */ "Scrubber buffer thresholds (Static)\n                   Each entry include buffer thresholds to be compared to occupied or free buffer counters, this defines the Global-Buffer-Consumption field in the scrubber statistics report (used in Qsize statistics report mode).\n                   The thresholds define 16 ranges of buffer occupancy.\n                   Each line coresponds to another level of thresholds.\n                   The IQM will present the worst result of the 3 buffers types.\n         ...",
    /* IQM_SPRDPRM               */ "System Red parameters: defines the reject test parameters (per Q rate-class and Drop-p).",
    /* IQM_SRCQRNG               */ "Source Q size range thresholds.\n                   Defines 16 ranges of the instantaneous Qsizes that define the 4-bit System-Q-size value (per Q rate-class)\n                   Qsize below QszRngThN is defined with source-Q-size N.\n                   Note:Units of 16 bytes,the value is compared to the Qsize with maximal value of 2^2416 byte.",
    /* IQM_SRDPRB                */ "System Red drop-probability values.",
    /* IQM_TAIL                  */ "Packet Queue Tail pointer\n                   This is the BDB,Offset where the last packet Dbuff has been written.",
    /* IQM_TO_DRAM_STATE         */ "Full Multicast User Count\n Number of duplications of the FullMulticast Dbuffs (UserCnt+1).",
    /* IQM_TO_FABRIC_STATE       */ "Full Multicast User Count\n Number of duplications of the FullMulticast Dbuffs (UserCnt+1).",
    /* IQM_TX_CMD_ORDER_FIFO     */ "Full Multicast User Count\n Number of duplications of the FullMulticast Dbuffs (UserCnt+1).",
    /* IQM_VQFCPR_MA             */ "Flow Control parameters (Per Rate-Class3:0)\n\n                   VSQs: 0->3",
    /* IQM_VQFCPR_MB             */ "Flow Control parameters (Per Rate-Class3:0)\n                   VSQs: 4->35\n                   The table should have the same values as VQFCPRMa.",
    /* IQM_VQFCPR_MC             */ "Flow Control parameters (Per Rate-Class3:0)\n                   VSQs: 36->99\n                   The table should have the same values as VQFCPRMa.",
    /* IQM_VQFCPR_MD             */ "Flow Control parameters (Per Rate-Class3:0)\n                   VSQs: 100->355\n                   The table should have the same values as VQFCPRMa.",
    /* IQM_VQFCPR_ME             */ "Flow Control parameters (Per Rate-Class3:0)\n                   VSQs: 356->387\n                   The table should have the same values as VQFCPRMa.",
    /* IQM_VQFCPR_MF             */ "Flow Control parameters (Per Rate-Class3:0)\n                   VSQs: 388->643\n                   The table should have the same values as VQFCPRMa.",
    /* IQM_VQPR_MA               */ "Virtual Q parameters (Per Rate-Class3:0Drop-p1:0)\n                   Tail Drop thresholds &\n                   Red Parameters\n                   P-Drop(red) = (c1*AvgSize-c2)*PcktSize*c3\n                   VSQs: 0->3",
    /* IQM_VQPR_MB               */ "Virtual Q parameters (Per Rate-Class3:0Drop-p1:0)\n                   MaxInstQsizeWords\n                   MaxInstQsizeBds\n                   Red Parameters\n                   VSQs: 4->35\n                   The table should have the same values as VQPRMa.",
    /* IQM_VQPR_MC               */ "Virtual Q parameters (Per Rate-Class3:0Drop-p1:0)\n                   VSQs: 36->99\n                   The table should have the same values as VQPRMa.",
    /* IQM_VQPR_MD               */ "Virtual Q parameters (Per Rate-Class3:0Drop-p1:0)\n                   VSQs: 100->355\n                   The table should have the same values as VQPRMa.",
    /* IQM_VQPR_ME               */ "Virtual Q parameters (Per Rate-Class3:0Drop-p1:0)\n                   VSQs: 356->387\n                   The table should have the same values as VQPRMa.",
    /* IQM_VQPR_MF               */ "Virtual Q parameters (Per Rate-Class3:0Drop-p1:0)\n                   VSQs: 388->643\n                   The table should have the same values as VQPRMa.",
    /* IQM_VSQA_AVRG             */ "Average size memory.\n                   VSQs: 0 -> 3 (MIXED)\n                   VSQs: 4 -> 7 (OCB-Only)",
    /* IQM_VSQA_FC_PRM           */ "Flow Control parameters for VSQA.\n                   (Per VSQ-Rate-Class4:0)",
    /* IQM_VSQA_MX_OC            */ "VSQ-A Max occupancy level",
    /* IQM_VSQA_PQWQ             */ "VSQ Red Weight table - Group A\n                   (Per Rate-Class4:0)",
    /* IQM_VSQA_PRM              */ "VSQ reject parameters\n                   (Per Rate-Class4:0Drop-p1:0)",
    /* IQM_VSQA_QSZ              */ "Instantaneous size memory.\n                   VSQs: 0 -> 3 (MIXED)\n                   VSQs: 4 -> 7 (OCB-Only)",
    /* IQM_VSQA_RC               */ "Virtual Queue Descriptor Rate Class\n                   VSQs: 0->3",
    /* IQM_VSQB_AVRG             */ "Average size memory.\n                   VSQs: 8 -> 39 (MIXED)\n                   VSQs: 40 -> 71 (OCB-Only)",
    /* IQM_VSQB_FC_PRM           */ "Flow Control parameters for VSQB.\n                   (Per VSQ-Rate-Class4:0)",
    /* IQM_VSQB_MX_OC            */ "VSQ-B Max occupancy level",
    /* IQM_VSQB_PQWQ             */ "VSQ Red Weight table - Group B\n                   (Per Rate-Class4:0)",
    /* IQM_VSQB_PRM              */ "VSQ reject parameters\n                   (Per Rate-Class4:0Drop-p1:0)",
    /* IQM_VSQB_QSZ              */ "Instantaneous size memory.\n                   VSQs: 8 -> 39 (MIXED)\n                   VSQs: 40 -> 71 (OCB-Only)",
    /* IQM_VSQB_RC               */ "Rate class.\n                   Used to access parameter tables.",
    /* IQM_VSQC_AVRG             */ "Average size memory.\n                   VSQs: 72 -> 135 (MIXED)\n                   VSQs: 136 -> 199 (OCB-Only)",
    /* IQM_VSQC_FC_PRM           */ "Flow Control parameters for VSQC.\n                   (Per VSQ-Rate-Class4:0)",
    /* IQM_VSQC_MX_OC            */ "VSQ-C Max occupancy level",
    /* IQM_VSQC_PQWQ             */ "VSQ Red Weight table - Group C\n                   (Per Rate-Class4:0)",
    /* IQM_VSQC_PRM              */ "VSQ reject parameters\n                   (Per Rate-Class4:0Drop-p1:0)",
    /* IQM_VSQC_QSZ              */ "Instantaneous size memory.\n                   VSQs: 72 -> 135 (MIXED)\n                   VSQs: 136 -> 199 (OCB-Only)",
    /* IQM_VSQC_RC               */ "Virtual Queue Descriptor Rate Class",
    /* IQM_VSQDRC_A              */ "Virtual Queue Descriptor Rate Class\n                   VSQs: 0->3",
    /* IQM_VSQDRC_B              */ "Rate class.\n                   Used to access parameter tables.",
    /* IQM_VSQDRC_C              */ "Virtual Queue Descriptor Rate Class",
    /* IQM_VSQDRC_D              */ "Virtual Queue Descriptor Rate Class",
    /* IQM_VSQDRC_E              */ "Virtual Queue Descriptor Rate Class",
    /* IQM_VSQDRC_F              */ "Virtual Queue Descriptor Rate Class",
    /* IQM_VSQD_AVRG             */ "Average size memory.\n                   VSQs: 200 -> 455 (MIXED)\n                   VSQs: 456 -> 711 (OCB-Only)",
    /* IQM_VSQD_FC_PRM           */ "Flow Control parameters for VSQD.\n                   (Per VSQ-Rate-Class4:0)",
    /* IQM_VSQD_MX_OC            */ "VSQ-D Max occupancy level",
    /* IQM_VSQD_PQWQ             */ "VSQ Red Weight table - Group D\n                   (Per Rate-Class4:0)",
    /* IQM_VSQD_PRM              */ "VSQ reject parameters\n                   (Per Rate-Class4:0Drop-p1:0)",
    /* IQM_VSQD_QSZ              */ "Instantaneous size memory.\n                   VSQs: 200 -> 455 (MIXED)\n                   VSQs: 456 -> 711 (OCB-Only)",
    /* IQM_VSQD_RC               */ "Virtual Queue Descriptor Rate Class",
    /* IQM_VSQE_AVRG             */ "Average size memory.\n                   VSQs: 712 -> 839 (MIXED)\n                   VSQs: 840 -> 967 (OCB-Only)",
    /* IQM_VSQE_FC_PRM           */ "Flow Control parameters for VSQE.\n                   (Per VSQ-Rate-Class4:0)\n                   Table-0 --> Shared-Pool-0\n                   Table-1 --> Shared-Pool-1",
    /* IQM_VSQE_MAP              */ "Map VSQ-E to CFC LLFC index\n                   (Value must be 0-143)",
    /* IQM_VSQE_MX_OC            */ "VSQ-E Max occupancy level",
    /* IQM_VSQE_PQWQ             */ "VSQ Red Weight table - Group E\n                   (Per Rate-Class4:0)",
    /* IQM_VSQE_PRM              */ "VSQ reject parameters\n                   (Per Rate-Class4:0Drop-p1:0)\n                   Table-0 --> Shared-Pool-0\n                   Table-1 --> Shared-Pool-1",
    /* IQM_VSQE_QSZ              */ "Instantaneous size memory.\n                   VSQs: 712 -> 839 (MIXED)\n                   VSQs: 840 -> 967 (OCB-Only)",
    /* IQM_VSQE_RC               */ "Virtual Queue Descriptor Rate Class",
    /* IQM_VSQF_AVRG             */ "Average size memory.\n                   VSQs: 968 -> 1479 (MIXED/OCB)",
    /* IQM_VSQF_FC_PRM           */ "Flow Control parameters for VSQF.\n                   (Per VSQ-Rate-Class4:0).\n                   Used only if VSQ FADT is disabled (VsqThModeSel is reset)..",
    /* IQM_VSQF_MAP              */ "Map VSQ-F to CFC PFC index\n                   (Value must be 0-575)",
    /* IQM_VSQF_MX_OC            */ "VSQ-F Max occupancy level",
    /* IQM_VSQF_PQWQ             */ "VSQ Red Weight table - Group F\n                   (Per Rate-Class4:0)",
    /* IQM_VSQF_PRM              */ "Virtual Q parameters (Per Rate-Class4:0Drop-p1:0)",
    /* IQM_VSQF_QSZ              */ "Instantaneous size memory.\n                   VSQs: 968 -> 1479 (MIXED/OCB)",
    /* IQM_VSQF_RC               */ "Virtual Queue Descriptor Rate Class",
    /* IQM_VSQ_A_MX_OC           */ "VSQ-A Max occupancy level",
    /* IQM_VSQ_B_MX_OC           */ "VSQ-B Max occupancy level",
    /* IQM_VSQ_C_MX_OC           */ "VSQ-C Max occupancy level",
    /* IQM_VSQ_D_MX_OC           */ "VSQ-D Max occupancy level",
    /* IQM_VSQ_E_MX_OC           */ "VSQ-E Max occupancy level",
    /* IQM_VSQ_F_MX_OC           */ "VSQ-F Max occupancy level",
    /* IQM_VSQ_PG_PRM            */ "Virtual Q parameters (Per Rate-Class4:0)",
    /* IQM_VS_QA_AVG             */ "VSQs: 0->3 ,Average Size in 16-bytes resolution.",
    /* IQM_VS_QA_QSZ             */ "VSQs: 0->3, Instantaneous size memory.",
    /* IQM_VS_QB_AVG             */ "VSQs: 4->35 ,Average Size in 16-bytes resolution.",
    /* IQM_VS_QB_QSZ             */ "VSQs: 4->35, Instantaneous size memory.",
    /* IQM_VS_QC_AVG             */ "VSQs: 36->99 ,Average Size in 16-bytes resolution.",
    /* IQM_VS_QC_QSZ             */ "VSQs: 36->99, Instantaneous size memory.",
    /* IQM_VS_QD_AVG             */ "VSQs: 100->355 ,Average Size in 16-bytes resolution.",
    /* IQM_VS_QD_QSZ             */ "VSQs: 100->355, Instantaneous size memory.",
    /* IQM_VS_QE_AVG             */ "VSQs: 356->387 ,Average Size in 16-bytes resolution.",
    /* IQM_VS_QE_QSZ             */ "VSQs: 356->387, Instantaneous size memory.\n                   LLFC VSQs (NifPort based)",
    /* IQM_VS_QF_AVG             */ "VSQs: 388->643 ,Average Size in 16-bytes resolution.",
    /* IQM_VS_QF_QSZ             */ "VSQs: 388>643, Instantaneous size memory.\n                   PFC VSQs (Based on NifPort,Tc)",
    /* IRE_CPU_CTXT_MAP          */ "CPU interface channel to incoming Context mapping.",
    /* IRE_CPU_TDM_CTXT_MAP      */ "Map incoming CPU channel to TDM contexts.",
    /* IRE_CTXT_MAP              */ "Map incoming Port and Channel to contexts.\n                   Access this table using CtxtMapBaseAddress (the result from PortToBaseAddressMap) + incoming-channel.",
    /* IRE_CTXT_MEM_CONTROL      */ "Holds the remainder and corresponding status on the alignment process.",
    /* IRE_CTXT_MEM_CTRL         */ "Holds the remainder and corresponding status on the alignment process.",
    /* IRE_CTXT_MEM_DATA         */ "Holds the remainder and corresponding status on the alignment process.",
    /* IRE_HPF_MEM               */ "IHP FIFO memory",
    /* IRE_HPF_MEM_CONTROL       */ "IHP FIFO memory",
    /* IRE_HPF_MEM_DATA          */ "IHP FIFO memory",
    /* IRE_IPSEC_RXI_MEM         */ "Fifo that holds the packet received from Ipsec",
    /* IRE_LAST_RECEIVED_PACKET  */ "Hold the last packet data received on a configured Reassembly context",
    /* IRE_MEM_1_INTERNAL        */ "INTERNAL",
    /* IRE_MEM_2_INTERNAL        */ "INTERNAL",
    /* IRE_MEM_3_INTERNAL        */ "INTERNAL",
    /* IRE_MEM_4_INTERNAL        */ "INTERNAL",
    /* IRE_MEM_5_INTERNAL        */ "INTERNAL",
    /* IRE_MEM_6_INTERNAL        */ "INTERNAL",
    /* IRE_MEM_7_INTERNAL        */ "INTERNAL",
    /* IRE_MEM_8_INTERNAL        */ "INTERNAL",
    /* IRE_MEM_D0000             */ "INTERNAL",
    /* IRE_MEM_F0000             */ "INTERNAL",
    /* IRE_NIF_CTXT_MAP          */ "Map incoming NIF port and Channel to contexts.\n                   Access this table using CtxtMapBaseAddress (the result from NifPortMap) + incoming-channel.",
    /* IRE_NIF_PORT_MAP          */ "Map incoming nif port to base address. Base address plus nif channel will access nif-ctxt-map",
    /* IRE_NIF_PORT_TO_CTXT_BIT_MAP */ "Eight entries. Each entry represents, per MAC lane, a bit map of the associated Incoming FAP ports. Access this table with nif_port5:2",
    /* IRE_NIF_RXI_MEM           */ "RXI memory",
    /* IRE_NIF_RXI_MEM_DATA      */ "Fifo that holds the data received from NIF",
    /* IRE_NIF_TDM_CTXT_MAP      */ "Map incoming NIF port and Channel to TDM contexts.\n                   Access this table using CtxtMapBaseAddress (the result from PortToBaseAddressMap) + incoming-channel.",
    /* IRE_NIF_TDM_RXI_MEM       */ "Fifo that holds the data received from NIF",
    /* IRE_NIF_TDM_RXI_MEM_CONTROL */ "Fifo that holds the data received from NIF",
    /* IRE_NIF_TDM_RXI_MEM_DATA  */ "Fifo that holds the data received from NIF",
    /* IRE_PEF_MEM_CTRL          */ "Packet edit FIFO Ctrl",
    /* IRE_PEF_MEM_DATA          */ "Packet edit FIFO Data",
    /* IRE_PKT_SRC_TO_CHANNEL_MAP */ "Map incoming PktSrcId (from CPU interface) to CPU channel.\n                   Channel plus base address will access CtxtMap and CpuTdmCtxtMap.",
    /* IRE_PORT_TO_BASE_ADDRESS_MAP */ "Map incoming NIF/Recycle/CPU port to base address.\n                   The NIF port is derived from the data on the NIF interface.\n                   The Recycle ports (EGQ-0 and EGQ-1) are derived from register InterfaceEgqPort.\n                   The CPU port is derived from register InterfaceCpuPort.\n                   Base address plus channel will access CtxtMap and NifTdmCtxtMap.\n                   Address will access NifPortToCtxtBitMap.",
    /* IRE_PPLB_CFG              */ "INTERNAL",
    /* IRE_RCY_CTXT_MAP          */ "Egress Recycling channel to incoming  Context mapping.\n                   Write 8'd255 to an invalid Recycling channel.",
    /* IRE_RCY_RXI_MEM           */ "Fifo that holds the data received from EGQ",
    /* IRE_RCY_RXI_MEM_CONTROL   */ "Fifo that holds the data received from EGQ",
    /* IRE_RCY_RXI_MEM_DATA      */ "Fifo that holds the data received from EGQ",
    /* IRE_SAT_RXI_MEM           */ "Fifo that holds the packet received from SAT",
    /* IRE_SAT_TDM_CTXT_MAP      */ "Map incoming SAT channel to TDM contexts.",
    /* IRE_TAG_SWAP_0_CFG        */ "Tag Swap configuration per Port Termination Context (PTC) for Pipe0",
    /* IRE_TAG_SWAP_1_CFG        */ "Tag Swap configuration per Port Termination Context (PTC) for Pipe1",
    /* IRE_TAG_SWAP_CFG          */ "Tag Swap configuration per Port Termination Context (PTC)",
    /* IRE_TDM_CONFIG            */ "TDM configuration for each reassembly context",
    /* IRE_WDF_MEM_CONTROL       */ "Word FIFO memory",
    /* IRE_WDF_MEM_CTRL          */ "Word FIFO memory",
    /* IRE_WDF_MEM_DATA          */ "Word FIFO memory",
    /* IRR_DESTINATION_TABLE     */ "This memory maps a system port ID to a queue number and a traffic class profile",
    /* IRR_FLOW_TABLE            */ "Flow profile per Folw.\n                   There are 96K flows. Profile per 4 flows.\n                   Access this table with flow16:4 and pick profile from the entry using flow3:2",
    /* IRR_FREE_PCB_MEMORY       */ "Free PCB Pointers FIFO Memory",
    /* IRR_IRDB                  */ "Ingress Replication Database.\n                   For each Multicast ID, this table indicates whether ingress replication is required and whether to use uc buffer for mc packet. If the mc is not ingress mc, the queue resolution is derived from the class field, and the packet is queued to one of the spatial multicast queues.\n                   Each line in the database holds the indication for 16 multicast IDs.",
    /* IRR_ISF_MEMORY            */ "Ingress Shaped FIFO Memory",
    /* IRR_IS_FREE_PCB_MEMORY    */ "Ingress Shaped free PCB Pointers FIFO Memory",
    /* IRR_IS_PCB_LINK_TABLE     */ "Ingress Shaped PCB Link Table",
    /* IRR_IS_PC_MEMORY          */ "Ingress Shaped PC Memory",
    /* IRR_LAG_MAPPING           */ "LAG mapping table.\n                   Given the LAG and its member specifies the destination.\n                   Entry into table is LAG, LAG-member.",
    /* IRR_LAG_NEXT_MEMBER       */ "For LAG resolution, this memory is read, and if it is in round-robin load-balanced mode, the output received is the offset corresponding to the LAG. Note that in this case, the offset is incremented by one and written back to the memory",
    /* IRR_LAG_TO_LAG_RANGE      */ "LAG range memory table.\n                   Specifies for each LAG its range",
    /* IRR_MCDB                  */ "128k Ingress Multicast Replication Data Base. (Physically shared with egress MLL table). Each multicast ID can result in up to 4k different copies of the incoming packet at the ingress FAP. Each copy is associated with a configurable Queue/destination System port and an OutLif. Each entry in this table can define 1 such copy, and points to the next entry in the linked list. The OutLif can be further used at the egress FOP as a key for Egress Multicast lookup and can be used by egress Packet Proc ...",
    /* IRR_MCDB_EGRESS_FORMAT_0  */ "Generate up to two copies, both having the same OutLIF but different PP-DSP.",
    /* IRR_MCDB_EGRESS_FORMAT_1  */ "Generate up to 256 copies, according to the bitmap that is pointed to by the Bitmap-Pointer. All copies get the OutLIF indicated in the entry.",
    /* IRR_MCDB_EGRESS_FORMAT_2  */ "Generate up to two copies, each with unique OutLIF and PP-DSP. The PP-DSP is generated by mapping the OutLIF (through a dedicated table).  If OutLIF == 0 do not produce copy.",
    /* IRR_MCDB_EGRESS_FORMAT_3  */ "Generate up to two copies, each with unique OutLIF and PP-DSP. The PP-DSP is generated by mapping the OutLIF (through a dedicated table).  If OutLIF == 0 do not produce copy.",
    /* IRR_MCDB_EGRESS_FORMAT_4  */ "Generate up to two copies, each with unique OutLIF and PP-DSP. This entry is end of list.",
    /* IRR_MCDB_EGRESS_FORMAT_5  */ "Generate up to two copies, each with unique OutLIF and PP-DSP. Link pointer is implicit to the next incrementing entry.",
    /* IRR_MCDB_EGRESS_FORMAT_6  */ "Generate up to three copies, each with unique OutLIF and PP-DSP. The PP-DSP is generated by mapping the OutLIF (through a dedicated table). This entry is end of list.",
    /* IRR_MCDB_EGRESS_FORMAT_7  */ "Generate up to three copies, each with unique OutLIF and PP-DSP. The PP-DSP is generated by mapping the OutLIF (through a dedicated table). Link pointer is implicit to the next incrementing entry.",
    /* IRR_MCDB_EGRESS_FORMAT_2_PP */ "Set OutRIF(CUD2) for the rest of the following Link List Entries (of type 3-7)",
    /* IRR_MCDB_EGRESS_SPECIAL_FORMAT */ "Special Format description.\n                   If SpecialMcMode register in EGQ is enabled, then the whole MCDB entries are in this format. Otherwise, the format of each entry is determined according to Entry-Format field in each entry.\n                   If SpecialMcMode is enabled, the access to the MCDB memory is according to the following method:\n                   1. MC_ID18:3 is used to select a row from the second half of the MCDB table.\n                   2. MC_ID2:0 is used as pointer t ...",
    /* IRR_MCDB_EGRESS_TDM_FORMAT */ "Egress TDM Format\n                   If TdmRepFormatEn is set and the multicast packet is TDM, then the entry pointed by TDM packet will be interpreted as TDM format (this format).",
    /* IRR_MCR_MEMORY            */ "MCR Memory",
    /* IRR_MEM_300000            */ "INTERNAL",
    /* IRR_MEM_340000            */ "INTERNAL",
    /* IRR_MEM_3C0000            */ "INTERNAL",
    /* IRR_PCB_LINK_TABLE        */ "PCB Link Table",
    /* IRR_PC_MEMORY             */ "PC Memory.",
    /* IRR_QUEUE_IS_OCB_COMMITTED */ "Stores1 bit per queue number (96k queues) which indicates if the queue is committed to OCB buffers (cannot use DRAM buffers).",
    /* IRR_SMOOTH_DIVISION       */ "Smooth division is used in lag resolution in case LagToLagRange.Mode == 0 and LagMode == 1024x16. Maps lag-range (from LagToLagRange) and Lag-Lb-Key to Member.\n                   Access this table with lag-range, lag-lb-key7:1",
    /* IRR_SNOOP_MIRROR_DEST_TABLE */ "Snoop and Mirror table. This memory maps the incoming snoop command or mirror command to a replication. The first half is for snoop; the second half is for mirror.\n                   This table is split into two parts.",
    /* IRR_SNOOP_MIRROR_TABLE_0  */ "Snoop and Mirror table. This memory maps the incoming snoop command or mirror command to a replication. The first half is for snoop; the second half is for mirror.\n                   This table is split into two parts.",
    /* IRR_SNOOP_MIRROR_TABLE_1  */ "Snoop and Mirror table. This memory maps the incoming snoop command or mirror command to a replication. First half is for mirror, second half is for snoop.\n                   This table is split into two parts.\n                   First line of this table must be set to all 0's.",
    /* IRR_SNOOP_MIRROR_TM_TABLE */ "Snoop and Mirror table. This memory maps the incoming snoop command or mirror command to a replication.\n                   This table is split into two parts: The first half is for mirror; the second half is for snoop.\n                   First line of this table must be set to all 0's.",
    /* IRR_STACK_FEC_RESOLVE     */ "Access if UseStackResolve is set and destination is system port and resolved-queue16:6 == 11'h7ff.\n                   Access with resolved-queue5:0 lag-lb-key7:4\n                   The resolved StackLag is used to access StackTrunkResolve.",
    /* IRR_STACK_TRUNK_RESOLVE   */ "Access if UseStackResolve is set and destination is system port and resolved-queue16:6 == 11'h7ff.\n                   Access with StackLag, lag-lb-key3:0.\n                   Resolved queue = BaseQueue + Traffic-Class",
    /* IRR_TRAFFIC_CLASS_MAPPING */ "The traffic class is mapped according to packet's source and destination. Table is accessed as follows:\n                   Before ingress shaping:\n                   line 0,2,4,6 - Destination is System-Port-ID with TC-Mapping-Profile equal to 0,1,2,3 Respectively\n                   line 8,10,12,14 - Destination is Flow with Flow-Profile equal to 0,1,2,3 Respectively\n                   line 16 - Destination is fabric or egress multicast\n                   After ingress shaping:\n                  ...",
    /* IRR_TRAFFIC_CLASS_MAPPING_0 */ "The traffic class is mapped according to packet's source and destination for pipe 0.\n                   Table is accessed with the following key key_msb,ingress_shape,orig_tc, where:\n                   * key_msb (4 bits):\n                     - 2'b00,TC-Mapping-Profile if Destination is System-Port-ID\n                     - 2'b01,Flow-Profile if Destination is Flow\n                     - 2'b10,2'b00 if Destination is fabric or egress multicast\n                   * ingress_shape (1 bit) is '0' be ...",
    /* IRR_TRAFFIC_CLASS_MAPPING_1 */ "The traffic class is mapped according to packet's source and destination for pipe 1.\n                   Table is accessed with the following key key_msb,ingress_shape,orig_tc, where:\n                   * key_msb (4 bits):\n                     - 2'b00,TC-Mapping-Profile if Destination is System-Port-ID\n                     - 2'b01,Flow-Profile if Destination is Flow\n                     - 2'b10,2'b00 if Destination is fabric or egress multicast\n                   * ingress_shape (1 bit) is '0' be ...",
    /* ISBS_PORT_TO_PIPE_MAPPING */ "SBS Port to Pipe Mapping table.",
    /* ISEC_BYPASS_FILTER_TABLE  */ "traffic is de-multiplexed into controlled port and uncontrolled port using the filter table. This filter table allows traffic to be separated based on MAC_SA, MAC_DA, ranges of MAC_DA, ranges of MAC_SA or EtherType",
    /* ISEC_DEBUG_RAM            */ "ISEC DEBUG RAM",
    /* ISEC_SA_KEY_TABLE         */ "SA Key table",
    /* ISEC_SA_TABLE             */ "SA attribute Table",
    /* ISEC_SC_TABLE             */ "ISEC SC Index (SCI) Table",
    /* ISM_SER_FIFO              */ "ISM SER FIFO",
    /* IS_TDM_CALENDAR0          */ "TDM Calendar 0,",
    /* IS_TDM_CALENDAR1          */ "TDM Calendar 1,",
    /* IS_TDM_CALENDAR0_PIPE0    */ "TDM Calendar 0,",
    /* IS_TDM_CALENDAR0_PIPE1    */ "TDM Calendar 0,",
    /* IS_TDM_CALENDAR0_PIPE2    */ "TDM Calendar 0,",
    /* IS_TDM_CALENDAR0_PIPE3    */ "TDM Calendar 0,",
    /* IS_TDM_CALENDAR1_PIPE0    */ "TDM Calendar 1,",
    /* IS_TDM_CALENDAR1_PIPE1    */ "TDM Calendar 1,",
    /* IS_TDM_CALENDAR1_PIPE2    */ "TDM Calendar 1,",
    /* IS_TDM_CALENDAR1_PIPE3    */ "TDM Calendar 1,",
    /* ITE_ACF                   */ "Aligner Control FIFO",
    /* ITE_BDM                   */ "Bypass Data Memory",
    /* ITE_MAX_LATENCY           */ "The ITPP measures latency from the packet OAM-TS extension.\n In this memory the 8 maximal latency's are kept, with the pointer associated with them",
    /* ITE_SNP_MIRR_CMD_MAP      */ "snoop/mirror command (taken from the CUD) mapped to outlif and dsp extension in the FTMH header\n Address to this table is\n  mirror or snoop (1 bit), cmd3:0\n if snoop, addr msb = 1\n if mirror addr msb = 0\n NOTE: This should only be used when System headers are Petra Headers.\n For Arad / Jericho headers, should use AradSnpMirStampEn and AradSnpMirStampValues",
    /* ITE_SNP_MIRR_SYS_HEADER_INFO */ "The ITPP stamps for snoop or mirror packet the following fields according to the enable bits, per snoop/mirror command from the IQM's outlif field.\n The address of this table access is is_snoop(~mirror), snoop/mirror-cmd.\n Meaning that the first rows of the table are for mirror and the last rows are for snoop",
    /* ITPP_MAX_LATENCY          */ "The ITPP measures latency from the packet OAM-TS extension.\n In this memory the 8 maximal latency's are kept, with the pointer associated with them",
    /* ITPP_PACKET_LATENCY_MEASUREMENT */ "ITPP measure latency between the packet TimeStamp stamped by the IPP, to the time of day reported to it.\n Latency is reported to the CRPS and the maximal value is kept.",
    /* ITPP_SNIFF_SYS_HEADER_INFO */ "The ITPP stamps for snoop or mirror packet the following fields according to the enable bits, per snoop/mirror command from the IQM's outlif field.\n The address of this table access is is_snoop(~mirror), snoop/mirror-cmd.\n Meaning that the first rows of the table are for mirror and the last rows are for snoop",
    /* ITPP_VOQ_QUARTET          */ "",
    /* KAPS_BBS_BUCKET_MEMORY    */ "Bucket memory",
    /* KAPS_BUCKET_MAP_MEMORY    */ "Bucket mapping memory",
    /* KAPS_BUCKET_MEMORY        */ "Bucket memory",
    /* KAPS_RPB_ADS              */ "Context Memory for packet alignment control",
    /* KAPS_RPB_TCAM_CPU_CMD     */ "TCAM command: The command can be write/read/compare/search. In case of write and compare  the Din is needed.\n A command can be performed to addresses 0-4095, representing the 4K TCAM memory. There is one interface per RPB",
    /* KAPS_RPB_TCAM_CPU_COMMAND */ "RPB TCAM command: The command can be write/read/compare/search. In case of write and compare  the Din is needed.\n A command can be performed to addresses 0-4095, representing the 4K TCAM memory (1 I/F per RPB)",
    /* KAPS_RPB_TCAM_CPU_REP     */ "TCAM reply. The reply is based on the command entered before.",
    /* KAPS_RPB_TCAM_CPU_REPLY   */ "TCAM reply. The reply is based on the command entered before.",
    /* KAPS_RPB_TCAM_HIT_INDICATION */ "hit indication memory",
    /* KAPS_TCAM_ECC_MEMORY      */ "Tcam ECC Memory",
    /* KAPS_TCAM_HIT_INDICATION  */ "tcam hit indication memory",
    /* KAPS_TCM                  */ "The R5s TCM. The host may DMA read and write this memory.",
    /* KNOWN_MCAST_BLOCK_MASK    */ "Known Multicast Block Mask, FeatureSpecific-Ethernet.",
    /* L1_BK                     */ "Level 1 Bucket Table",
    /* L1_BP                     */ "Level 1 Bucket Parameters Table",
    /* L1_LA                     */ "Level 1 Leak Aperiodic Pending Update Table. INIT=0.",
    /* L1_N0                     */ "Level 1 Node Info 0 Table",
    /* L1_N1                     */ "Level 1 Node Info 1 Table",
    /* L1_N2                     */ "Level 1 Node Info 2 Table.",
    /* L1_NG                     */ "Level 1 Node Groups Table",
    /* L1_NM                     */ "Level 1 Node Mapping Table",
    /* L1_NP                     */ "Level 1 Node Profile Table",
    /* L2MC                      */ "L2 Multicast table",
    /* L2X                       */ "Combined HW managed L2 entry table.  Includes L2_ENTRY, L2_HITDA, and L2_HITSA",
    /* L2_BK                     */ "Level 2 Bucket Table.",
    /* L2_BP                     */ "Level 2 Bucket Parameters Table.",
    /* L2_BULK                   */ "L2_BULK_MATCH and L2_BULK_REPLACE fields.            Addr 0: L2_BULK_MATCH_DATA\n            Addr 1: L2_BULK_MATCH_MASK\n            Addr 2: L2_BULK_REPLACE_DATA\n            Addr 3: L2_BULK_REPLACE_MASK",
    /* L2_BULK_MATCH_DATA        */ "L2 Bulk match enable.",
    /* L2_BULK_MATCH_MASK        */ "L2 Bulk match enable.",
    /* L2_BULK_MATCH_VLANS_PORT_A */ "VLAN Membership bitmap for PORT_A for L2_BULK.",
    /* L2_BULK_MATCH_VLANS_PORT_B */ "VLAN Membership bitmap for PORT_B for L2_BULK.",
    /* L2_BULK_REPLACE_DATA      */ "L2 Bulk match enable.",
    /* L2_BULK_REPLACE_MASK      */ "L2 Bulk match enable.",
    /* L2_ENDPOINT_ID            */ "L2 Endpoint ID table. REFER TO: L2_ENDPOINT_ID_HASH_CONTROL register.",
    /* L2_ENTRY_1                */ "L2_ENTRY_1, Single base entry views. FeatureSpecific-Ethernet.",
    /* L2_ENTRY_2                */ "L2_ENTRY_2, Double base entry views. FeatureSpecific-Ethernet.",
    /* L2_ENTRY_1_HIT_ONLY       */ "L2_ENTRY_1_HIT_ONLY, Single base entry views. FeatureSpecific-Ethernet.",
    /* L2_ENTRY_2_HIT_ONLY       */ "L2_ENTRY_2_HIT_ONLY, Double base entry views. FeatureSpecific-Ethernet.",
    /* L2_ENTRY_ISS_LP           */ "L2_ENTRY LP Control Table.",
    /* L2_ENTRY_LP               */ "L2_ENTRY LP Control Table.",
    /* L2_ENTRY_ONLY             */ "HW managed L2_ENTRY table only.  Does not include L2_HITSA or L2_HITDA",
    /* L2_ENTRY_ONLY_ECC         */ "ECC Table for L2_ENTRY_ONLY.",
    /* L2_ENTRY_ONLY_TILE        */ "HW Managed L2_ENTRY Table Only.  Does not include L2_HITSA or L2_HITDA.",
    /* L2_ENTRY_OVERFLOW         */ "Small overflow for L2_ENTRY table.  Treated as extra entries for all buckets.",
    /* L2_ENTRY_SCRATCH          */ "Single L2_ENTRY that is usable by software - never written by h/w learn, etc.  Fully usable L2 entry that is searched for every packet.",
    /* L2_ENTRY_TILE             */ "Combined HW Managed L2 Entry Table.  Includes L2_ENTRY_TILE, L2_HITDA, and L2_HITSA.",
    /* L2_HITDA_ONLY             */ "HW managed L2_HITDA_ONLY table.  Just the DA hit bits.",
    /* L2_HITDA_ONLY_X           */ "HW managed L2_HITDA_ONLY table.  Just the DA hit bits.",
    /* L2_HITDA_ONLY_Y           */ "HW managed L2_HITDA_ONLY table.  Just the DA hit bits.",
    /* L2_HITSA_ONLY             */ "HW managed L2_HITSA_ONLY table.  Just the SA hit bits.",
    /* L2_HITSA_ONLY_X           */ "HW managed L2_HITSA_ONLY table.  Just the SA hit bits.",
    /* L2_HITSA_ONLY_Y           */ "HW managed L2_HITSA_ONLY table.  Just the SA hit bits.",
    /* L2_LA                     */ "Level 2 Leak Aperiodic Pending Update Table.",
    /* L2_LEARN_INSERT_FAILURE   */ "If L2_ENTRY hardware learning encounters a bucket full condition, the L2_ENTRY that was to be learned is recorded to this register. Software writes all zeros to this register to reset, allowing hardware to record again.  An L2_LEARN_INSERT_FAILURE interrupt is generated when this register is non-zero.",
    /* L2_MB                     */ "Level 2 Multipath Pending Update Table.",
    /* L2_MGMT_SER_FIFO          */ "L2_MGMT SER FIFO",
    /* L2_MOD_FIFO               */ "FIFO for operations that MODify the L2_ENTRY table.",
    /* L2_N0                     */ "Level 2 Node Info 0 Table.",
    /* L2_N1                     */ "Level 2 Node Info 1 Table.",
    /* L2_N2                     */ "Level 2 Node Info 2 Table.",
    /* L2_NG                     */ "Level 2 Node Groups Table.",
    /* L2_NM                     */ "Level 2 Node Mapping Table.",
    /* L2_NP                     */ "Level 2 Node Profile Table.",
    /* L2_USER_ENTRY             */ "Combined L2_ENTRY TCAM/Data RAM for guaranteed L2 entries and BPDUs.",
    /* L2_USER_ENTRY_DATA_ONLY   */ "Data SRAM for L2_USER_ENTRY TCAM.",
    /* L2_USER_ENTRY_ONLY        */ "TCAM for guaranteed L2 entries and BPDUs.",
    /* L3_BK                     */ "Level 3 Bucket Table.",
    /* L3_BP                     */ "Level 3 Bucket Parameters Table.",
    /* L3_DEFIP                  */ "L3 Default IP Route (LPM) TCAM view with data and hit bits",
    /* L3_DEFIP_128              */ "L3 Default IP Route (LPM) TCAM view with data and hit bits. FeatureSpecific-Ethernet",
    /* L3_DEFIP_128_DATA_ONLY    */ "L3 Default IP Route (LPM) Data SRAM for the L3_DEFIP_128 TCAM. FeatureSpecific-Ethernet",
    /* L3_DEFIP_128_HIT_ONLY     */ "L3_DEFIP Hit bit table, FeatureSpecific-Ethernet",
    /* L3_DEFIP_128_HIT_ONLY_X   */ "L3_DEFIP Hit bit table, FeatureSpecific-Ethernet.",
    /* L3_DEFIP_128_HIT_ONLY_Y   */ "L3_DEFIP Hit bit table, FeatureSpecific-Ethernet.",
    /* L3_DEFIP_128_ONLY         */ "L3 Default IP Route (LPM) TCAM only view. FeatureSpecific-Ethernet",
    /* L3_DEFIP_128_X            */ "L3 Default IP Route (LPM) TCAM view with data and hit bits. FeatureSpecific-Ethernet.",
    /* L3_DEFIP_128_Y            */ "L3 Default IP Route (LPM) TCAM view with data and hit bits. FeatureSpecific-Ethernet.",
    /* L3_DEFIP_ALPM_ECC         */ "ECC table for L3_DEFIP_ALPM.",
    /* L3_DEFIP_ALPM_HIT_ONLY    */ "L3_DEFIP Hit bit table..",
    /* L3_DEFIP_ALPM_HIT_ONLY_X  */ "L3_DEFIP Hit bit table..",
    /* L3_DEFIP_ALPM_HIT_ONLY_Y  */ "L3_DEFIP Hit bit table..",
    /* L3_DEFIP_ALPM_IPV4        */ "(ALPM) SRAM Data for IPv4 view, no flex counters.",
    /* L3_DEFIP_ALPM_IPV4_1      */ "(ALPM) SRAM Data for IPv4 view with flex counters.",
    /* L3_DEFIP_ALPM_IPV6_64     */ "(ALPM) SRAM Data for IPv6(64b) view, no flex counters.",
    /* L3_DEFIP_ALPM_IPV6_128    */ "(ALPM) SRAM Data for IPv6(128b) view",
    /* L3_DEFIP_ALPM_IPV6_64_1   */ "(ALPM) SRAM Data for IPv6(64b) view, with flex counters.",
    /* L3_DEFIP_ALPM_RAW         */ "L3_DEFIP_ALPM raw view to ISS memory",
    /* L3_DEFIP_AUX_HITBIT_UPDATE */ "L3 DEFIP ALPM hitbit replacement configuration register",
    /* L3_DEFIP_AUX_SCRATCH      */ "L3 Default IP Route (LPM) Data SRAM for the L3_DEFIP TCAM.",
    /* L3_DEFIP_AUX_TABLE        */ "L3 Default IP Route (LPM) Data SRAM for the L3_DEFIP TCAM.",
    /* L3_DEFIP_DATA_ONLY        */ "L3 Default IP Route (LPM) Data SRAM for the L3_DEFIP TCAM",
    /* L3_DEFIP_HIT_ONLY         */ "L3_DEFIP Hit bit table",
    /* L3_DEFIP_HIT_ONLY_X       */ "L3_DEFIP Hit bit table, FeatureSpecific-Ethernet.",
    /* L3_DEFIP_HIT_ONLY_Y       */ "L3_DEFIP Hit bit table, FeatureSpecific-Ethernet.",
    /* L3_DEFIP_ONLY             */ "L3 Default IP Route (LPM) TCAM only view",
    /* L3_DEFIP_PAIR_128         */ "L3 Default IP Route (LPM) TCAM view with data and hit bits. FeatureSpecific-Ethernet.",
    /* L3_DEFIP_PAIR_128_DATA_ONLY */ "L3 Default IP Route (LPM) Data SRAM for the L3_DEFIP_128 TCAM. FeatureSpecific-Ethernet.",
    /* L3_DEFIP_PAIR_128_HIT_ONLY */ "L3_DEFIP Hit bit table, FeatureSpecific-Ethernet.",
    /* L3_DEFIP_PAIR_128_HIT_ONLY_X */ "L3_DEFIP Hit bit table..",
    /* L3_DEFIP_PAIR_128_HIT_ONLY_Y */ "L3_DEFIP Hit bit table..",
    /* L3_DEFIP_PAIR_128_ONLY    */ "L3 Default IP Route (LPM) TCAM only view. FeatureSpecific-Ethernet.",
    /* L3_DEFIP_X                */ "L3 Default IP Route (LPM) TCAM view with data and hit bits. FeatureSpecific-Ethernet.",
    /* L3_DEFIP_Y                */ "L3 Default IP Route (LPM) TCAM view with data and hit bits. FeatureSpecific-Ethernet.",
    /* L3_ECMP                   */ "L3 Equal Cost Multipath table",
    /* L3_ECMP_COUNT             */ "Contains the number of members in each ECMP group.  Used with ECMP_POINTER to calulate index to L3_ECMP table",
    /* L3_ECMP_RRLB_CNT          */ "Initial L3 Equal Cost Multipath Group Round Robin Count.",
    /* L3_ECMP_RRLB_CNT_PIPE0    */ "Initial L3 Equal Cost Multipath Group Round Robin Count.",
    /* L3_ECMP_RRLB_CNT_PIPE1    */ "Initial L3 Equal Cost Multipath Group Round Robin Count.",
    /* L3_ECMP_RRLB_CNT_PIPE2    */ "Initial L3 Equal Cost Multipath Group Round Robin Count.",
    /* L3_ECMP_RRLB_CNT_PIPE3    */ "Initial L3 Equal Cost Multipath Group Round Robin Count.",
    /* L3_ENTRY_1                */ "L3_ENTRY_1, Single base entry views. FeatureSpecific-Ethernet.",
    /* L3_ENTRY_2                */ "L3_ENTRY_2, Double base entry views. FeatureSpecific-Ethernet.",
    /* L3_ENTRY_4                */ "L3_ENTRY_4, Quad base entry views. FeatureSpecific-Ethernet.",
    /* L3_ENTRY_1_HIT_ONLY       */ "L3_ENTRY_1_HIT_ONLY, Single base entry views. FeatureSpecific-Ethernet.",
    /* L3_ENTRY_2_HIT_ONLY       */ "L3_ENTRY_2_HIT_ONLY, Double base entry views. FeatureSpecific-Ethernet.",
    /* L3_ENTRY_4_HIT_ONLY       */ "L3_ENTRY_4_HIT_ONLY, Quad base entry views. FeatureSpecific-Ethernet.",
    /* L3_ENTRY_HIT_ONLY         */ "L3 Hit bit table",
    /* L3_ENTRY_HIT_ONLY_X       */ "L3 Hit bit table, FeatureSpecific-Ethernet.",
    /* L3_ENTRY_HIT_ONLY_Y       */ "L3 Hit bit table, FeatureSpecific-Ethernet.",
    /* L3_ENTRY_IPV4_MULTICAST   */ "L3 routing table IPV4 MULTICAST view",
    /* L3_ENTRY_IPV4_MULTICAST_SCRATCH */ "L3 routing table IPV4 MULTICAST_SCRATCH view, FeatureSpecific-Ethernet",
    /* L3_ENTRY_IPV4_MULTICAST_X */ "L3 routing table IPV4 MULTICAST view, FeatureSpecific-Ethernet.",
    /* L3_ENTRY_IPV4_MULTICAST_Y */ "L3 routing table IPV4 MULTICAST view, FeatureSpecific-Ethernet.",
    /* L3_ENTRY_IPV4_UNICAST     */ "L3 routing table IPV4 UNICAST view",
    /* L3_ENTRY_IPV4_UNICAST_SCRATCH */ "L3 routing table IPV4 UNICAST view, FeatureSpecific-Ethernet",
    /* L3_ENTRY_IPV4_UNICAST_X   */ "L3 routing table IPV4 UNICAST view, FeatureSpecific-Ethernet.",
    /* L3_ENTRY_IPV4_UNICAST_Y   */ "L3 routing table IPV4 UNICAST view, FeatureSpecific-Ethernet.",
    /* L3_ENTRY_IPV6_MULTICAST   */ "L3 routing table IPV6 MULTICAST view",
    /* L3_ENTRY_IPV6_MULTICAST_SCRATCH */ "L3 routing table IPV6 MULTICAST_SCRATCH view, FeatureSpecific-Ethernet",
    /* L3_ENTRY_IPV6_MULTICAST_X */ "L3 routing table IPV6 MULTICAST view, FeatureSpecific-Ethernet.",
    /* L3_ENTRY_IPV6_MULTICAST_Y */ "L3 routing table IPV6 MULTICAST view, FeatureSpecific-Ethernet.",
    /* L3_ENTRY_IPV6_UNICAST     */ "L3 routing table IPV6 UNICAST view",
    /* L3_ENTRY_IPV6_UNICAST_SCRATCH */ "L3 routing table IPV6 UNICAST view, FeatureSpecific-Ethernet",
    /* L3_ENTRY_IPV6_UNICAST_X   */ "L3 routing table IPV6 UNICAST view, FeatureSpecific-Ethernet.",
    /* L3_ENTRY_IPV6_UNICAST_Y   */ "L3 routing table IPV6 UNICAST view, FeatureSpecific-Ethernet.",
    /* L3_ENTRY_ISS_LP           */ "L3_ENTRY LP Control Table.",
    /* L3_ENTRY_LP               */ "L3_ENTRY LP Control Table.",
    /* L3_ENTRY_ONLY             */ "L3 routing table with fb_regs arch view.  No hit bits",
    /* L3_ENTRY_ONLY_ECC         */ "ECC Table for L3_ENTRY_ONLY.",
    /* L3_ENTRY_VALID_ONLY       */ "L3 routing table Valid Bits only view.  Organized into buckets",
    /* L3_IIF                    */ "Layer 3 Input Interface Properties",
    /* L3_IIF_PROFILE            */ "Layer 3 Input Interface Properties. Indexed by L3_IIF.L3_IIF_PROFILE_INDEX.",
    /* L3_IPMC                   */ "L3 IPMC Table",
    /* L3_IPMC_1                 */ "L3 IPMC Table (for source properties)",
    /* L3_IPMC_2                 */ "L3 IPMC Table.",
    /* L3_IPMC_REMAP             */ "L3 IPMC Remap Table",
    /* L3_LA                     */ "Level 3 Leak Aperiodic Pending Update Table.",
    /* L3_MB                     */ "Level 3 Multipath Pending Update Table.",
    /* L3_MTU_VALUES             */ "index by ING_L3_NEXT_HOP.L3_OIF or ipmc_index or VID",
    /* L3_N0                     */ "Level 3 Node Info 0 Table.",
    /* L3_N1                     */ "Level 3 Node Info 1 Table.",
    /* L3_N2                     */ "Level 3 Node Info 2 Table.",
    /* L3_NG                     */ "Level 3 Node Groups Table.",
    /* L3_NM                     */ "Level 3 Node Mapping Table.",
    /* L3_NP                     */ "Level 3 Node Profile Table.",
    /* L3_TUNNEL                 */ "L3 Tunnel Table TCAM",
    /* L3_TUNNEL_DATA_ONLY       */ "L3 Tunnel Table TCAM..",
    /* L3_TUNNEL_ONLY            */ "L3 Tunnel Table TCAM..",
    /* L4_BK                     */ "Level 4 Bucket Table.",
    /* L4_BP                     */ "Level 4 Bucket Parameters Table.",
    /* L4_FL                     */ "Level 4 Full State Table.",
    /* L4_FS                     */ "Level 4 Full Pending Update Table.",
    /* L4_LA                     */ "Level 4 Leak Aperiodic Pending Update Table.",
    /* L4_MB                     */ "Level 4 Multipath Pending Update Table.",
    /* L4_N0                     */ "Level 4 Node Info 0 Table.",
    /* L4_N1                     */ "Level 4 Node Info 1 Table.",
    /* L4_N2                     */ "Level 4 Node Info 2 Table.",
    /* L4_NG                     */ "Level 4 Node Groups Table.",
    /* L4_NM                     */ "Level 4 Node Mapping Table.",
    /* L4_NP                     */ "Level 4 Node Profile Table.",
    /* L5_BK                     */ "Level 5 Bucket Table.",
    /* L5_BP                     */ "Level 5 Bucket Parameters Table.",
    /* L5_FL                     */ "Level 5 Full State Table.",
    /* L5_FS                     */ "Level 5 Full Pending Update Table.",
    /* L5_MB                     */ "Level 5 Multipath Pending Update Table.",
    /* L5_N0                     */ "Level 5 Node Info 0 Table.",
    /* L5_N1                     */ "Level 5 Node Info 1 Table.",
    /* L5_N2                     */ "Level 5 Node Info 2 Table.",
    /* L5_NG                     */ "Level 5 Node Groups Table.",
    /* L5_NM                     */ "Level 5 Node Mapping Table.",
    /* L5_NP                     */ "Level 5 Node Profile Table.",
    /* L6_BK                     */ "Level 6 Bucket Table.",
    /* L6_BP                     */ "Level 6 Bucket Parameters Table.",
    /* L6_FL                     */ "Level 6 Full State Table.",
    /* L6_FS                     */ "Level 6 Full Pending Update Table.",
    /* L6_MB                     */ "Level 6 Multipath Pending Update Table.",
    /* L6_N0                     */ "Level 6 Node Info 0 Table.",
    /* L6_N1                     */ "Level 6 Node Info 1 Table.",
    /* L6_N2                     */ "Level 6 Node Info 2 Table.",
    /* L6_NG                     */ "Level 6 Node Groups Table.",
    /* L6_NM                     */ "Level 6 Node Mapping Table.",
    /* L6_NP                     */ "Level 6 Node Profile Table.",
    /* L7_BK                     */ "Level 7 Bucket Table.",
    /* L7_BP                     */ "Level 7 Bucket Parameters Table.",
    /* L7_N0                     */ "Level 7 Node Info 0 Table.",
    /* L7_N1                     */ "Level 7 Node Info 1 Table.",
    /* L7_N2                     */ "Level 7 Node Info 2 Table.",
    /* L7_NG                     */ "Level 7 Node Groups Table.",
    /* L7_NM                     */ "Level 7 Node Mapping Table.",
    /* L7_NP                     */ "Level 7 Node Profile Table.",
    /* LAG_DLB_CONTROL           */ "DLB Enables for LAG.",
    /* LAST_SENT                 */ "Priority look up table",
    /* LCM_AUTO_DOC_NAME_15      */ "INTERNAL",
    /* LCM_AUTO_DOC_NAME_16      */ "INTERNAL",
    /* LCM_AUTO_DOC_NAME_17      */ "INTERNAL",
    /* LCM_AUTO_DOC_NAME_18      */ "INTERNAL",
    /* LCM_AUTO_DOC_NAME_19      */ "INTERNAL",
    /* LEAFNODE_TO_QUEUE         */ "Leafnode to base queue mapping",
    /* LF_QD                     */ "Leaf queue destination table",
    /* LF_QP                     */ "Leaf queue priority table",
    /* LINK_LOCAL_MAC_ADDRESS    */ "Multicast MAC address range reserved for 802.1.",
    /* LINK_STATUS               */ "Link Status Indication Register.",
    /* LLA_TRANS                 */ "This database holds the translation from logical buffer offset to LLA buffer offset",
    /* LLS_L0_CHILD_STATE1       */ "L0 Child Status 1 Database",
    /* LLS_L0_CHILD_STATE1_A     */ "L0 Child Status 1 Database",
    /* LLS_L0_CHILD_WEIGHT_CFG   */ "L0 Child Weight Config Database",
    /* LLS_L0_CHILD_WEIGHT_CFG_CNT */ "L0 Child Weight Config and count Database",
    /* LLS_L0_CHILD_WEIGHT_WORKING */ "L0 Child Working Weight and Count Database",
    /* LLS_L0_CONFIG             */ "L0 Configuration Database",
    /* LLS_L0_CONFIG_A           */ "L0 Configuration Database",
    /* LLS_L0_EF_NEXT            */ "L0 Child EF Linked List Next Database",
    /* LLS_L0_ERROR              */ "L0 Error database containing difference between expected scheduling amount and actual scheduling amount",
    /* LLS_L0_ERROR_MIN          */ "L0 Min Error database containing difference between expected scheduling amount and actual scheduling amount",
    /* LLS_L0_HEADS_TAILS        */ "L0 Heads and Tails Database",
    /* LLS_L0_HEADS_TAILS_1      */ "L0 Heads and Tails Database",
    /* LLS_L0_HEADS_TAILS_2      */ "L0 Heads and Tails Database",
    /* LLS_L0_MIN_BUCKET_C       */ "L0 Min Bucket Database for L0 child entities",
    /* LLS_L0_MIN_CONFIG_C       */ "L0 Min Configuration Database for L0 child entities",
    /* LLS_L0_MIN_NEXT           */ "L0 Child Min Linked List Next Database",
    /* LLS_L0_PARENT             */ "L0 Parent Database",
    /* LLS_L0_PARENT_STATE       */ "L0 Parent State Database",
    /* LLS_L0_PARENT_STATE_A     */ "L0 Parent State Database",
    /* LLS_L0_SHAPER_BUCKET_C    */ "L0 Shaper Bucket Database for L0 child entities",
    /* LLS_L0_SHAPER_CONFIG_C    */ "L0 Shaper Configuration Database for L0 child entities",
    /* LLS_L0_WERR_MAX_SC        */ "L0 Max Surplus Count Database",
    /* LLS_L0_WERR_NEXT          */ "L0 Child WERR Linked List Next Database",
    /* LLS_L0_XOFF               */ "Port XOFF Database",
    /* LLS_L1_ACT_MIN            */ "L1 Activation Database database for reactivating shaped nodes",
    /* LLS_L1_ACT_SHAPER         */ "L1 Activation Database database for reactivating shaped nodes",
    /* LLS_L1_ACT_XON            */ "L1 Activation Database database for reactivating shaped nodes",
    /* LLS_L1_CHILD_STATE1       */ "L1 Child Status 1 Database 4 entries of 7 bits per line",
    /* LLS_L1_CHILD_STATE1_A     */ "L1 Child Status 1 Database 4 entries of 7 bits per line",
    /* LLS_L1_CHILD_WEIGHT_CFG   */ "L1 Child Weight Config Database",
    /* LLS_L1_CHILD_WEIGHT_CFG_CNT */ "L1 Child Weight Config and Count Database",
    /* LLS_L1_CHILD_WEIGHT_WORKING */ "L1 Child Working Weight and Count Database",
    /* LLS_L1_CONFIG             */ "L1 Configuration Database",
    /* LLS_L1_CONFIG_A           */ "L1 Configuration Database",
    /* LLS_L1_EF_NEXT            */ "L1 Child EF Linked List Next Database",
    /* LLS_L1_ERROR              */ "L1 Error database containing difference between expected scheduling amount and actual scheduling amount",
    /* LLS_L1_ERROR_MIN          */ "L1 Min Error database containing difference between expected scheduling amount and actual scheduling amount",
    /* LLS_L1_HEADS_TAILS        */ "L1 Heads Tails Database for non ef list",
    /* LLS_L1_HEADS_TAILS_1      */ "L1 Heads Tails Database",
    /* LLS_L1_HEADS_TAILS_2      */ "L1 Heads Tails Database",
    /* LLS_L1_MC_XOFF            */ "Port XOFF Database",
    /* LLS_L1_MIN_BUCKET_C       */ "L1 Min Bucket Database for L1 child entities",
    /* LLS_L1_MIN_CONFIG_C       */ "L0 Min Configuration Database for L1 child entities",
    /* LLS_L1_MIN_NEXT           */ "L1 Child Min Linked List Next Database",
    /* LLS_L1_PARENT             */ "L1 Parent Database",
    /* LLS_L1_PARENT_STATE       */ "L1 Parent State Database",
    /* LLS_L1_PARENT_STATE_A     */ "L1 Parent State Database",
    /* LLS_L1_SHAPER_BUCKET_C    */ "L1 Shaper Bucket Database for L1 child entities",
    /* LLS_L1_SHAPER_CONFIG_C    */ "L1 Shaper Configuration Database for L1 child entities",
    /* LLS_L1_WERR_MAX_SC        */ "L1 Max Surplus Count Database",
    /* LLS_L1_WERR_NEXT          */ "L1 Child WERR Linked List Next Database",
    /* LLS_L1_XOFF               */ "Port XOFF Database",
    /* LLS_L2_ACT_ENQ            */ "L2 Activation Database database for reactivating enqueue unicast nodes",
    /* LLS_L2_ACT_MIN            */ "L2 min activation table",
    /* LLS_L2_ACT_SHAPER         */ "L2 shaper activation table",
    /* LLS_L2_ACT_XON            */ "L2 xon activation table",
    /* LLS_L2_CHILD_STATE1       */ "L2 Child state database",
    /* LLS_L2_CHILD_STATE1_A     */ "L2 Child state database",
    /* LLS_L2_CHILD_WEIGHT_CFG   */ "L2 Child Weight Config and count Database",
    /* LLS_L2_CHILD_WEIGHT_CFG_CNT */ "L2 Child Weight Config and count Database",
    /* LLS_L2_CHILD_WEIGHT_WORKING */ "L2 Child Working Weight and count Database",
    /* LLS_L2_EMPTY_STATE        */ "L2 EMPTY_STATE Database",
    /* LLS_L2_ERROR              */ "L2 Error database containing difference between expected scheduling amount and actual scheduling amount",
    /* LLS_L2_ERROR_MIN          */ "L2 Min Error database containing difference between expected scheduling amount and actual scheduling amount",
    /* LLS_L2_MC_CHILD_WEIGHT_CFG_CNT */ "L2 MC Child Weight Config and count Database",
    /* LLS_L2_MC_XOFF            */ "L2 XOFF Database",
    /* LLS_L2_MIN_BUCKET_C       */ "L2 Min Bucket Database for L2 child entities",
    /* LLS_L2_MIN_BUCKET_LOWER_C */ "L2 Min Bucket Database for L2 child entities",
    /* LLS_L2_MIN_BUCKET_UPPER_C */ "L2 Min Bucket Database for L2 child entities",
    /* LLS_L2_MIN_CONFIG_C       */ "L2 Min Max Configuration Database for L2 child entities",
    /* LLS_L2_MIN_CONFIG_LOWER_C */ "L2 Min Configuration Database for L2 child entities",
    /* LLS_L2_MIN_CONFIG_UPPER_C */ "L2 Min Configuration Database for L2 child entities",
    /* LLS_L2_MIN_NEXT           */ "L2 Child MIN Linked List Next Database",
    /* LLS_L2_PARENT             */ "L2 Parent Database",
    /* LLS_L2_SHAPER_BUCKET      */ "L2 Shaper Bucket Database 0 for L2 child entities",
    /* LLS_L2_SHAPER_BUCKET_LOWER */ "L2 Shaper Bucket Database 0 for L2 child entities",
    /* LLS_L2_SHAPER_BUCKET_UPPER */ "L2 Shaper Bucket Database 0 for L2 child entities",
    /* LLS_L2_SHAPER_CONFIG_C    */ "L2  Max Configuration Database for L2 child entities",
    /* LLS_L2_SHAPER_CONFIG_LOWER */ "L2 Shaper Configuration Database for L2 child entities",
    /* LLS_L2_SHAPER_CONFIG_UPPER */ "L2 Shaper Configuration Database for L2 child entities",
    /* LLS_L2_SHAPER_STATE_MAX   */ "L2 Max shaper state database",
    /* LLS_L2_SHAPER_STATE_MIN   */ "L2 Min shaper state database",
    /* LLS_L2_WERR_NEXT          */ "L2 Child WERR Linked List Next Database 4 entries per word",
    /* LLS_L2_XOFF               */ "L2 XOFF Database",
    /* LLS_PORT_CONFIG           */ "Port Configuration Database",
    /* LLS_PORT_CONFIG_A         */ "Port Configuration Database. Implemented using flops, No ECC or Parity protection",
    /* LLS_PORT_ERROR            */ "Port Error database containing difference between expected scheduling amount and actual scheduling amount",
    /* LLS_PORT_HEADS            */ "Port Heads Database",
    /* LLS_PORT_PARENT_STATE     */ "Port Parent State Database",
    /* LLS_PORT_PARENT_STATE_A   */ "Port Parent State Database. Implemented using flops, No ECC or Parity protection",
    /* LLS_PORT_SEQ_NUM          */ "Port Sequence Number Database : Working memory",
    /* LLS_PORT_SHAPER_BUCKET_C  */ "Port Shaper Bucket Database",
    /* LLS_PORT_SHAPER_CONFIG_C  */ "Port Shaper Configuration Database",
    /* LLS_PORT_TAILS            */ "Port Tails Database",
    /* LLS_PORT_TDM              */ "PORT TDM table",
    /* LLS_PORT_WERR_MAX_SC      */ "Port Max Surplus Count Database",
    /* LLS_PORT_XOFF             */ "Port XOFF Database",
    /* LLS_S0_ERROR              */ "S0 Error database containing difference between expected scheduling amount and actual scheduling amount",
    /* LLS_S0_SHAPER_BUCKET_C    */ "Port Shaper Bucket Database",
    /* LLS_S0_SHAPER_CONFIG_C    */ "S0 Shaper Configuration Database",
    /* LLS_S1_CHILD_STATE        */ "S1 Child State : Working memory",
    /* LLS_S1_CHILD_WEIGHT_CFG_CNT */ "L0 Child Weight Config and count Database",
    /* LLS_S1_CONFIG             */ "S1 Configuration Database for S1s 0 to 127. S1s 128 to 255 do not require this database as those S1s map directly to an L0 with the same node ID. May be updated during traffic but only S1s that do not have any traffic to allow the setup of a new S1",
    /* LLS_S1_ERROR              */ "S1 Error database containing difference between expected scheduling amount and actual scheduling amount",
    /* LLS_S1_HEADS              */ "S1 Heads Database for S1s 0 to 127. S1s 128 to 255 do not require this database as those S1s map directly to an L0 with the same node ID : Working memory that cannot be accessed during traffic",
    /* LLS_S1_HEADS_TAILS        */ "S1 Heads Database : Working memory that cannot be accessed during traffic",
    /* LLS_S1_L0_LOOKUP          */ "S1 Max Surplus Count Database : NOLONGER HOST ACCESSIBLE",
    /* LLS_S1_NEXT               */ "S1 Next Database : Working memory : THIS DATABASE IS READ ONLY",
    /* LLS_S1_PARENT             */ "S1 Parent  Database : Config memory",
    /* LLS_S1_PARENT_STATE       */ "S1 Parent State Database for S1s 0 to 127. S1s 128 to 255 do not require this database as those S1s map directly to an L0 with the same node ID : Working memory that cannot be accessed during traffic",
    /* LLS_S1_SHAPER_BUCKET_C    */ "Port Shaper Bucket Database",
    /* LLS_S1_SHAPER_CONFIG_C    */ "S0 Shaper Configuration Database : Only Locations 0 to 127 should be configured. Locations 128 to 255 should be set to 0 as S1 128 to 255 is L0 128 to 255 so L0 shaping should be used for these",
    /* LLS_S1_TAILS              */ "S1 Tails Database for S1s 0 to 127. S1s 128 to 255 do not require this database as those S1s map directly to an L0 with the same node ID",
    /* LLS_S1_WERR_MAX_SC        */ "S1 Max Surplus Count Database",
    /* LLS_S1_XOFF               */ "S1 XOFF Database",
    /* LMEP                      */ "",
    /* LMEP_1                    */ "LMEP extension",
    /* LMEP_DA                   */ "Destination MAC Address for the LMEP_TX Packets.",
    /* LM_COUNTER_CONTROL        */ "Per opcode OAM LM packets counter control.",
    /* LOCAL_SW_DISABLE_DEFAULT_PBM */ "Local switching disable default port bitmap, FeatureSpecific-Ethernet.",
    /* LOCAL_SW_DISABLE_DEFAULT_PBM_2 */ "Local switching disable default port bitmap - logically the same table as LOCAL_SW_DISABLE_DEFAULT_PBM. The field is separated for physical design purpose.",
    /* LOCAL_SW_DISABLE_DEFAULT_PBM_MIRR */ "Local switching disable default port bitmap for ingress mirror or egress mirror packets, FeatureSpecific-Ethernet.",
    /* LPORT_TAB                 */ "LPort Table",
    /* LRA_INST_B0_MEM0          */ "Instruction memory for stream $mem0 and $mem1 for bank $i.",
    /* LRA_INST_B0_MEM1          */ "Instruction memory for stream $mem0 and $mem1 for bank $i.",
    /* LRA_INST_B0_MEM2          */ "Instruction memory for stream $mem0 and $mem1 for bank $i.",
    /* LRA_INST_B0_MEM3          */ "Instruction memory for stream $mem0 and $mem1 for bank $i.",
    /* LRA_INST_B0_MEM4          */ "Instruction memory for stream $mem0 and $mem1 for bank $i.",
    /* LRA_INST_B0_MEM5          */ "Instruction memory for stream $mem0 and $mem1 for bank $i.",
    /* LRA_INST_B1_MEM0          */ "Instruction memory for stream $mem0 and $mem1 for bank $i.",
    /* LRA_INST_B1_MEM1          */ "Instruction memory for stream $mem0 and $mem1 for bank $i.",
    /* LRA_INST_B1_MEM2          */ "Instruction memory for stream $mem0 and $mem1 for bank $i.",
    /* LRA_INST_B1_MEM3          */ "Instruction memory for stream $mem0 and $mem1 for bank $i.",
    /* LRA_INST_B1_MEM4          */ "Instruction memory for stream $mem0 and $mem1 for bank $i.",
    /* LRA_INST_B1_MEM5          */ "Instruction memory for stream $mem0 and $mem1 for bank $i.",
    /* LRA_INST_DEBUG            */ "Instruction memory for debug stream",
    /* LRA_INST_TASK_MAP         */ "Task map for instruction streams",
    /* LRB_BUBBLE_INTERVAL_TABLE */ "Holds the timer interval increment values",
    /* LRB_DM_SEGMENT_TABLE      */ "Segement table entires for DM ports 0-2.  These entries determine how many 128b results\nwill be returned from a read to these ports.  There is no entry for DM3 because it can\nonly return 1 result.",
    /* LRB_PROGRAM_TRANSLATION   */ "Search engine program translation table",
    /* MACT_FID_MANAGEMENT_CONTROL_FIFO */ "holds the data to be compared to the data from the MDB",
    /* MACT_FID_POINTER_INDEX    */ "maps vmv(4), app-db(6) to fid_pointer_index",
    /* MACT_FID_POINTER_INFO     */ "configures how to take the FID-pointer from the entry",
    /* MACT_FID_PROFILE_INFO     */ "",
    /* MACT_LARGE_EM_AGING_CONFIGURATION_TABLE */ "Logically:\n 4 Aging-Configuration-Table accessed table is chosen according to Aging-Configuration-Pointer(2)\n Each Aging-Configuration-Table has 16 Entries Access according to Entry.AGE(3), Entry.RBD(1), Owned-Entry\n Physically:\n strength(4), rbd(1), age(3) each line holds data for all age_profiles.\n age_profile(5)",
    /* MACT_LARGE_EM_EMC_RXI_FIFO */ "INTERNAL",
    /* MACT_LARGE_EM_EVENT_FIFO  */ "INTERNAL",
    /* MACT_LARGE_EM_LELA_RXI_FIFO */ "INTERNAL",
    /* MACT_LARGE_EM_LELB_RXI_FIFO */ "INTERNAL",
    /* MACT_LARGE_EM_MANAGEMENT_REQUEST_FIFO */ "INTERNAL",
    /* MACT_LARGE_EM_REPLY_FIFO  */ "INTERNAL",
    /* MACT_VSI_COUNTERS         */ "VSI counters",
    /* MACT_VSI_PROFILES         */ "VSI profiles",
    /* MAC_BLOCK                 */ "Source Trunk Bitmap Table",
    /* MAC_LIMIT_PORT_MAP_TABLE  */ "TABLE for mapping a INGRESS PORT to a index into MAC_LIMIT_COUNT_TABLE. Indexed using ingress port number",
    /* MAC_LIMIT_TRUNK_MAP_TABLE */ "TABLE for mapping a TRUNK group to a index into MAC_LIMIT_COUNT_TABLE. Indexed using the Src/Dst TGID.",
    /* MAID_REDUCTION            */ "",
    /* MA_INDEX                  */ "",
    /* MA_STATE                  */ "",
    /* MCP_ENG_DB_A_EXT_MEM      */ "MCD-A - dynamic data\n Notes:\n - Each entry map 4 meters to profiles which are processed simultaneously.\n - Indexes 0 - 32k-1",
    /* MCP_ENG_DB_A_MEM          */ "MCD-A - dynamic data\n Notes:\n - Each entry map 4 meters to profiles which are processed simultaneously.\n - Indexes 0 - 32k-1",
    /* MCP_ENG_DB_B_MEM          */ "MCD-A - dynamic data\n Notes:\n - Each entry map 4 meters to profiles which are processed simultaneously.\n - Indexes 0 - 32k-1",
    /* MCP_ENG_DB_C_EXT_MEM      */ "MCD-A - dynamic data\n Notes:\n - Each entry map 4 meters to profiles which are processed simultaneously.\n - Indexes 0 - 32k-1",
    /* MCP_ENG_DB_C_MEM          */ "MCD-A - dynamic data\n Notes:\n - Each entry map 4 meters to profiles which are processed simultaneously.\n - Indexes 0 - 32k-1",
    /* MCT_MCT                   */ "8 x 32K x 194 multicast table. Provides direct access to table.",
    /* MDB_ARM_MESSAGING         */ "ARM mesaaging",
    /* MDB_EEDB_ABK_BANK         */ "",
    /* MDB_EEDB_ENTRY_BANK       */ "EEDB link list pointers",
    /* MDB_EOEM_0                */ "Interface for accessing EM database (See EMC spec for more details)",
    /* MDB_EOEM_1                */ "Interface for accessing EM database (See EMC spec for more details)",
    /* MDB_EOEM_MANAGMENT_TABLE_0 */ "fetch memory for cukoo machine",
    /* MDB_EOEM_MANAGMENT_TABLE_1 */ "fetch memory for cukoo machine",
    /* MDB_EOEM_OVF_CAM_0        */ "CAM storage for entries that failed cukoo",
    /* MDB_EOEM_OVF_CAM_1        */ "CAM storage for entries that failed cukoo",
    /* MDB_EOEM_STEP_TABLE_0     */ "Configurations for cukoo algorithm",
    /* MDB_EOEM_STEP_TABLE_1     */ "Configurations for cukoo algorithm",
    /* MDB_EOEM_TID_ATR_0        */ "Application-DB configurations for EM database",
    /* MDB_EOEM_TID_ATR_1        */ "Application-DB configurations for EM database",
    /* MDB_ESEM                  */ "Interface for accessing EM database (See EMC spec for more details)",
    /* MDB_ESEM_MANAGMENT_TABLE  */ "fetch memory for cukoo machine",
    /* MDB_ESEM_OVF_CAM          */ "CAM storage for entries that failed cukoo",
    /* MDB_ESEM_STEP_TABLE       */ "Configurations for cukoo algorithm",
    /* MDB_ESEM_TID_ATR          */ "Application-DB configurations for EM database",
    /* MDB_EXEM_1                */ "Interface for accessing EM database (See EMC spec for more details)",
    /* MDB_EXEM_2                */ "Interface for accessing EM database (See EMC spec for more details)",
    /* MDB_EXEM_3                */ "Interface for accessing EM database (See EMC spec for more details)",
    /* MDB_EXEM_4                */ "Interface for accessing EM database (See EMC spec for more details)",
    /* MDB_EXEM_1_MANAGMENT_TABLE */ "fetch memory for cukoo machine",
    /* MDB_EXEM_1_OVF_CAM        */ "CAM storage for entries that failed cukoo",
    /* MDB_EXEM_1_STEP_TABLE     */ "Configurations for cukoo algorithm",
    /* MDB_EXEM_1_TID_ATR        */ "Application-DB configurations for EM database",
    /* MDB_EXEM_2_MANAGMENT_TABLE */ "fetch memory for cukoo machine",
    /* MDB_EXEM_2_OVF_CAM        */ "CAM storage for entries that failed cukoo",
    /* MDB_EXEM_2_STEP_TABLE     */ "Configurations for cukoo algorithm",
    /* MDB_EXEM_2_TID_ATR        */ "Application-DB configurations for EM database",
    /* MDB_EXEM_3_MANAGMENT_TABLE */ "fetch memory for cukoo machine",
    /* MDB_EXEM_3_OVF_CAM        */ "CAM storage for entries that failed cukoo",
    /* MDB_EXEM_3_STEP_TABLE     */ "Configurations for cukoo algorithm",
    /* MDB_EXEM_3_TID_ATR        */ "Application-DB configurations for EM database",
    /* MDB_EXEM_4_MANAGMENT_TABLE */ "fetch memory for cukoo machine",
    /* MDB_EXEM_4_OVF_CAM        */ "CAM storage for entries that failed cukoo",
    /* MDB_EXEM_4_STEP_TABLE     */ "Configurations for cukoo algorithm",
    /* MDB_EXEM_4_TID_ATR        */ "Application-DB configurations for EM database",
    /* MDB_EXEM_AGING            */ "Exem Aging",
    /* MDB_GLEM_0                */ "Interface for accessing EM database (See EMC spec for more details)",
    /* MDB_GLEM_1                */ "Interface for accessing EM database (See EMC spec for more details)",
    /* MDB_GLEM_MANAGMENT_TABLE_0 */ "fetch memory for cukoo machine",
    /* MDB_GLEM_MANAGMENT_TABLE_1 */ "fetch memory for cukoo machine",
    /* MDB_GLEM_OVF_CAM_0        */ "CAM storage for entries that failed cukoo",
    /* MDB_GLEM_OVF_CAM_1        */ "CAM storage for entries that failed cukoo",
    /* MDB_GLEM_STEP_TABLE_0     */ "Configurations for cukoo algorithm",
    /* MDB_GLEM_STEP_TABLE_1     */ "Configurations for cukoo algorithm",
    /* MDB_GLEM_TID_ATR_0        */ "Application-DB configurations for EM database",
    /* MDB_GLEM_TID_ATR_1        */ "Application-DB configurations for EM database",
    /* MDB_IOEM_0                */ "Interface for accessing EM database (See EMC spec for more details)",
    /* MDB_IOEM_1                */ "Interface for accessing EM database (See EMC spec for more details)",
    /* MDB_IOEM_MANAGMENT_TABLE_0 */ "fetch memory for cukoo machine",
    /* MDB_IOEM_MANAGMENT_TABLE_1 */ "fetch memory for cukoo machine",
    /* MDB_IOEM_OVF_CAM_0        */ "CAM storage for entries that failed cukoo",
    /* MDB_IOEM_OVF_CAM_1        */ "CAM storage for entries that failed cukoo",
    /* MDB_IOEM_STEP_TABLE_0     */ "Configurations for cukoo algorithm",
    /* MDB_IOEM_STEP_TABLE_1     */ "Configurations for cukoo algorithm",
    /* MDB_IOEM_TID_ATR_0        */ "Application-DB configurations for EM database",
    /* MDB_IOEM_TID_ATR_1        */ "Application-DB configurations for EM database",
    /* MDB_ISEM_1                */ "Interface for accessing EM database (See EMC spec for more details)",
    /* MDB_ISEM_2                */ "Interface for accessing EM database (See EMC spec for more details)",
    /* MDB_ISEM_3                */ "Interface for accessing EM database (See EMC spec for more details)",
    /* MDB_ISEM_1_MANAGMENT_TABLE */ "fetch memory for cukoo machine",
    /* MDB_ISEM_1_OVF_CAM        */ "CAM storage for entries that failed cukoo",
    /* MDB_ISEM_1_STEP_TABLE     */ "Configurations for cukoo algorithm",
    /* MDB_ISEM_1_TID_ATR        */ "Application-DB configurations for EM database",
    /* MDB_ISEM_2_MANAGMENT_TABLE */ "fetch memory for cukoo machine",
    /* MDB_ISEM_2_OVF_CAM        */ "CAM storage for entries that failed cukoo",
    /* MDB_ISEM_2_STEP_TABLE     */ "Configurations for cukoo algorithm",
    /* MDB_ISEM_2_TID_ATR        */ "Application-DB configurations for EM database",
    /* MDB_ISEM_3_MANAGMENT_TABLE */ "fetch memory for cukoo machine",
    /* MDB_ISEM_3_OVF_CAM        */ "CAM storage for entries that failed cukoo",
    /* MDB_ISEM_3_STEP_TABLE     */ "Configurations for cukoo algorithm",
    /* MDB_ISEM_3_TID_ATR        */ "Application-DB configurations for EM database",
    /* MDB_LEM                   */ "Interface for accessing EM database (See EMC spec for more details)",
    /* MDB_LEM_AGING             */ "MACT aging",
    /* MDB_LEM_MANAGMENT_TABLE   */ "fetch memory for cukoo machine",
    /* MDB_LEM_OVF_CAM           */ "CAM storage for entries that failed cukoo",
    /* MDB_LEM_STEP_TABLE        */ "Configurations for cukoo algorithm",
    /* MDB_LEM_TID_ATR           */ "Application-DB configurations for EM database",
    /* MDB_MC_ID                 */ "Interface for accessing EM database (See EMC spec for more details)",
    /* MDB_MC_ID_MANAGMENT_TABLE */ "fetch memory for cukoo machine",
    /* MDB_MC_ID_OVF_CAM         */ "CAM storage for entries that failed cukoo",
    /* MDB_MC_ID_STEP_TABLE      */ "Configurations for cukoo algorithm",
    /* MDB_MC_ID_TID_ATR         */ "Application-DB configurations for EM database",
    /* MDB_PHASE_MAP             */ "table that maps from  address msb to the access phase",
    /* MDB_RMEP                  */ "Interface for accessing EM database (See EMC spec for more details)",
    /* MDB_RMEP_MANAGMENT_TABLE  */ "fetch memory for cukoo machine",
    /* MDB_RMEP_OVF_CAM          */ "CAM storage for entries that failed cukoo",
    /* MDB_RMEP_STEP_TABLE       */ "Configurations for cukoo algorithm",
    /* MDB_RMEP_TID_ATR          */ "Application-DB configurations for EM database",
    /* MIRROR_CONTROL            */ "Mirror control register, FeatureSpecific-Ethernet.",
    /* MMU_ADM_QUEUE_DB          */ "",
    /* MMU_ADM_SRC_CTXT_DB       */ "",
    /* MMU_AGING_CTR             */ "Aging Counter RAM",
    /* MMU_AGING_CTR_EXT         */ "External Aging Counter RAM",
    /* MMU_AGING_CTR_INT         */ "Internal Aging Counter RAM",
    /* MMU_AGING_EXP             */ "Aging Expiration Status RAM",
    /* MMU_AGING_EXP_EXT         */ "External Aging Expiration Status RAM",
    /* MMU_AGING_EXP_INT         */ "Internal Aging Expiration Status RAM",
    /* MMU_AGING_LMT_EXT         */ "External Aging Limit Lookup Table, one entry per 6-bit Port value.  Used for Unicast, where Limit is a function of 6-bit Port and 4-bit PRI.",
    /* MMU_AGING_LMT_INT         */ "Internal Aging Limit Lookup Table, one entry per 6-bit Port value.  Used for Unicast, where Limit is a function of 6-bit Port and 4-bit PRI.",
    /* MMU_AGING_MASK_TBL_PIPE0  */ "replication state of the MCQS",
    /* MMU_AGING_MASK_TBL_PIPE1  */ "replication state of the MCQS",
    /* MMU_ARB_TDM_TABLE         */ "MMU to EPIPE Arbiter TDM Table\nMust be programmed with the values specified in SDK per index as part of initialization before traffic is enabled.",
    /* MMU_CBPCELLHEADER         */ "CBP Header RAM",
    /* MMU_CBPDATA0              */ "CBP Data RAM 0",
    /* MMU_CBPDATA1              */ "CBP Data RAM 1",
    /* MMU_CBPDATA2              */ "CBP Data RAM 2",
    /* MMU_CBPDATA3              */ "CBP Data RAM 3",
    /* MMU_CBPDATA4              */ "CBP Data RAM 4",
    /* MMU_CBPDATA5              */ "CBP Data RAM 5",
    /* MMU_CBPDATA6              */ "CBP Data RAM 6",
    /* MMU_CBPDATA7              */ "CBP Data RAM 7",
    /* MMU_CBPDATA8              */ "CBP Data RAM 8",
    /* MMU_CBPDATA9              */ "CBP Data RAM 9",
    /* MMU_CBPDATA10             */ "CBP Data RAM 10",
    /* MMU_CBPDATA11             */ "CBP Data RAM 11",
    /* MMU_CBPDATA12             */ "CBP Data RAM 12",
    /* MMU_CBPDATA13             */ "CBP Data RAM 13",
    /* MMU_CBPDATA14             */ "CBP Data RAM 14",
    /* MMU_CBPDATA15             */ "CBP Data RAM 15",
    /* MMU_CBPDATA16             */ "CBP Data RAM 16",
    /* MMU_CBPDATA17             */ "CBP Data RAM 17",
    /* MMU_CBPDATA18             */ "CBP Data RAM 18",
    /* MMU_CBPDATA19             */ "CBP Data RAM 19",
    /* MMU_CBPDATA20             */ "CBP Data RAM 20",
    /* MMU_CBPDATA21             */ "CBP Data RAM 21",
    /* MMU_CBPDATA22             */ "CBP Data RAM 22",
    /* MMU_CBPDATA23             */ "CBP Data RAM 23",
    /* MMU_CBPDATA24             */ "CBP Data RAM 24",
    /* MMU_CBPDATA25             */ "CBP Data RAM 25",
    /* MMU_CBPDATA26             */ "CBP Data RAM 26",
    /* MMU_CBPDATA27             */ "CBP Data RAM 27",
    /* MMU_CBPDATA28             */ "CBP Data RAM 28",
    /* MMU_CBPDATA29             */ "CBP Data RAM 29",
    /* MMU_CBPDATA30             */ "CBP Data RAM 30",
    /* MMU_CBPDATA31             */ "CBP Data RAM 31",
    /* MMU_CBPDATA32             */ "CBP Data RAM 32",
    /* MMU_CBPDATA33             */ "CBP Data RAM 33",
    /* MMU_CBPDATA34             */ "CBP Data RAM 34",
    /* MMU_CBPDATA35             */ "CBP Data RAM 35",
    /* MMU_CBPDATA36             */ "CBP Data RAM 36",
    /* MMU_CBPDATA37             */ "CBP Data RAM 37",
    /* MMU_CBPDATA38             */ "CBP Data RAM 38",
    /* MMU_CBPDATA39             */ "CBP Data RAM 39",
    /* MMU_CBPDATA40             */ "CBP Data RAM 40",
    /* MMU_CBPDATA41             */ "CBP Data RAM 41",
    /* MMU_CBPDATA42             */ "CBP Data RAM 42",
    /* MMU_CBPDATA43             */ "CBP Data RAM 43",
    /* MMU_CBPDATA44             */ "CBP Data RAM 44",
    /* MMU_CBPDATA45             */ "CBP Data RAM 45",
    /* MMU_CBPDATA46             */ "CBP Data RAM 46",
    /* MMU_CBPDATA47             */ "CBP Data RAM 47",
    /* MMU_CBPDATA48             */ "CBP Data RAM 48",
    /* MMU_CBPDATA49             */ "CBP Data RAM 49",
    /* MMU_CBPDATA50             */ "CBP Data RAM 50",
    /* MMU_CBPDATA51             */ "CBP Data RAM 51",
    /* MMU_CBPDATA52             */ "CBP Data RAM 52",
    /* MMU_CBPDATA53             */ "CBP Data RAM 53",
    /* MMU_CBPDATA54             */ "CBP Data RAM 54",
    /* MMU_CBPDATA55             */ "CBP Data RAM 55",
    /* MMU_CBPDATA56             */ "CBP Data RAM 56",
    /* MMU_CBPDATA57             */ "CBP Data RAM 57",
    /* MMU_CBPDATA58             */ "CBP Data RAM 58",
    /* MMU_CBPDATA59             */ "CBP Data RAM 59",
    /* MMU_CBPDATA60             */ "CBP Data RAM 60",
    /* MMU_CBPDATA61             */ "CBP Data RAM 61",
    /* MMU_CBPDATA62             */ "CBP Data RAM 62",
    /* MMU_CBPDATA63             */ "CBP Data RAM 63",
    /* MMU_CBPDATA64             */ "CBP Data RAM 64",
    /* MMU_CBPDATA65             */ "CBP Data RAM 65",
    /* MMU_CBPDATA66             */ "CBP Data RAM 66",
    /* MMU_CBPDATA67             */ "CBP Data RAM 67",
    /* MMU_CBPDATA68             */ "CBP Data RAM 68",
    /* MMU_CBPDATA69             */ "CBP Data RAM 69",
    /* MMU_CBPDATA70             */ "CBP Data RAM 70",
    /* MMU_CBPDATA71             */ "CBP Data RAM 71",
    /* MMU_CBPDATA72             */ "CBP Data RAM 72",
    /* MMU_CBPDATA73             */ "CBP Data RAM 73",
    /* MMU_CBPDATA74             */ "CBP Data RAM 74",
    /* MMU_CBPDATA75             */ "CBP Data RAM 75",
    /* MMU_CBPDATA76             */ "CBP Data RAM 76",
    /* MMU_CBPDATA77             */ "CBP Data RAM 77",
    /* MMU_CBPDATA78             */ "CBP Data RAM 78",
    /* MMU_CBPDATA79             */ "CBP Data RAM 79",
    /* MMU_CBPDATA80             */ "CBP Data RAM 80",
    /* MMU_CBPDATA81             */ "CBP Data RAM 81",
    /* MMU_CBPDATA82             */ "CBP Data RAM 82",
    /* MMU_CBPDATA83             */ "CBP Data RAM 83",
    /* MMU_CBPDATA84             */ "CBP Data RAM 84",
    /* MMU_CBPDATA85             */ "CBP Data RAM 85",
    /* MMU_CBPDATA86             */ "CBP Data RAM 86",
    /* MMU_CBPDATA87             */ "CBP Data RAM 87",
    /* MMU_CBPDATA88             */ "CBP Data RAM 88",
    /* MMU_CBPDATA89             */ "CBP Data RAM 89",
    /* MMU_CBPDATA90             */ "CBP Data RAM 90",
    /* MMU_CBPDATA91             */ "CBP Data RAM 91",
    /* MMU_CBPDATA92             */ "CBP Data RAM 92",
    /* MMU_CBPDATA93             */ "CBP Data RAM 93",
    /* MMU_CBPDATA94             */ "CBP Data RAM 94",
    /* MMU_CBPDATA95             */ "CBP Data RAM 95",
    /* MMU_CBPDATA96             */ "CBP Data RAM 96",
    /* MMU_CBPDATA97             */ "CBP Data RAM 97",
    /* MMU_CBPDATA98             */ "CBP Data RAM 98",
    /* MMU_CBPDATA99             */ "CBP Data RAM 99",
    /* MMU_CBPDATA100            */ "CBP Data RAM 100",
    /* MMU_CBPDATA101            */ "CBP Data RAM 101",
    /* MMU_CBPDATA102            */ "CBP Data RAM 102",
    /* MMU_CBPDATA103            */ "CBP Data RAM 103",
    /* MMU_CBPDATA104            */ "CBP Data RAM 104 (bank 13, slice 0).",
    /* MMU_CBPDATA105            */ "CBP Data RAM 105 (bank 13, slice 1).",
    /* MMU_CBPDATA106            */ "CBP Data RAM 106 (bank 13, slice 2).",
    /* MMU_CBPDATA107            */ "CBP Data RAM 107 (bank 13, slice 3).",
    /* MMU_CBPDATA108            */ "CBP Data RAM 108 (bank 13, slice 4).",
    /* MMU_CBPDATA109            */ "CBP Data RAM 109 (bank 13, slice 5).",
    /* MMU_CBPDATA110            */ "CBP Data RAM 110 (bank 13, slice 6).",
    /* MMU_CBPDATA111            */ "CBP Data RAM 111 (bank 13, slice 7).",
    /* MMU_CBPDATA0_XPE0         */ "Cell buffer RAM 0. Slice 0, bank 0.",
    /* MMU_CBPDATA0_XPE1         */ "Cell buffer RAM 0. Slice 0, bank 0.",
    /* MMU_CBPDATA0_XPE2         */ "Cell buffer RAM 0. Slice 0, bank 0.",
    /* MMU_CBPDATA0_XPE3         */ "Cell buffer RAM 0. Slice 0, bank 0.",
    /* MMU_CBPDATA100_XPE0       */ "CBP Data RAM 100 (bank 12, slice 4).",
    /* MMU_CBPDATA100_XPE1       */ "CBP Data RAM 100 (bank 12, slice 4).",
    /* MMU_CBPDATA100_XPE2       */ "CBP Data RAM 100 (bank 12, slice 4).",
    /* MMU_CBPDATA100_XPE3       */ "CBP Data RAM 100 (bank 12, slice 4).",
    /* MMU_CBPDATA101_XPE0       */ "CBP Data RAM 101 (bank 12, slice 5).",
    /* MMU_CBPDATA101_XPE1       */ "CBP Data RAM 101 (bank 12, slice 5).",
    /* MMU_CBPDATA101_XPE2       */ "CBP Data RAM 101 (bank 12, slice 5).",
    /* MMU_CBPDATA101_XPE3       */ "CBP Data RAM 101 (bank 12, slice 5).",
    /* MMU_CBPDATA102_XPE0       */ "CBP Data RAM 102 (bank 12, slice 6).",
    /* MMU_CBPDATA102_XPE1       */ "CBP Data RAM 102 (bank 12, slice 6).",
    /* MMU_CBPDATA102_XPE2       */ "CBP Data RAM 102 (bank 12, slice 6).",
    /* MMU_CBPDATA102_XPE3       */ "CBP Data RAM 102 (bank 12, slice 6).",
    /* MMU_CBPDATA103_XPE0       */ "CBP Data RAM 103 (bank 12, slice 7).",
    /* MMU_CBPDATA103_XPE1       */ "CBP Data RAM 103 (bank 12, slice 7).",
    /* MMU_CBPDATA103_XPE2       */ "CBP Data RAM 103 (bank 12, slice 7).",
    /* MMU_CBPDATA103_XPE3       */ "CBP Data RAM 103 (bank 12, slice 7).",
    /* MMU_CBPDATA104_XPE0       */ "CBP Data RAM 104 (bank 13, slice 0).",
    /* MMU_CBPDATA104_XPE1       */ "CBP Data RAM 104 (bank 13, slice 0).",
    /* MMU_CBPDATA104_XPE2       */ "CBP Data RAM 104 (bank 13, slice 0).",
    /* MMU_CBPDATA104_XPE3       */ "CBP Data RAM 104 (bank 13, slice 0).",
    /* MMU_CBPDATA105_XPE0       */ "CBP Data RAM 105 (bank 13, slice 1).",
    /* MMU_CBPDATA105_XPE1       */ "CBP Data RAM 105 (bank 13, slice 1).",
    /* MMU_CBPDATA105_XPE2       */ "CBP Data RAM 105 (bank 13, slice 1).",
    /* MMU_CBPDATA105_XPE3       */ "CBP Data RAM 105 (bank 13, slice 1).",
    /* MMU_CBPDATA106_XPE0       */ "CBP Data RAM 106 (bank 13, slice 2).",
    /* MMU_CBPDATA106_XPE1       */ "CBP Data RAM 106 (bank 13, slice 2).",
    /* MMU_CBPDATA106_XPE2       */ "CBP Data RAM 106 (bank 13, slice 2).",
    /* MMU_CBPDATA106_XPE3       */ "CBP Data RAM 106 (bank 13, slice 2).",
    /* MMU_CBPDATA107_XPE0       */ "CBP Data RAM 107 (bank 13, slice 3).",
    /* MMU_CBPDATA107_XPE1       */ "CBP Data RAM 107 (bank 13, slice 3).",
    /* MMU_CBPDATA107_XPE2       */ "CBP Data RAM 107 (bank 13, slice 3).",
    /* MMU_CBPDATA107_XPE3       */ "CBP Data RAM 107 (bank 13, slice 3).",
    /* MMU_CBPDATA108_XPE0       */ "CBP Data RAM 108 (bank 13, slice 4).",
    /* MMU_CBPDATA108_XPE1       */ "CBP Data RAM 108 (bank 13, slice 4).",
    /* MMU_CBPDATA108_XPE2       */ "CBP Data RAM 108 (bank 13, slice 4).",
    /* MMU_CBPDATA108_XPE3       */ "CBP Data RAM 108 (bank 13, slice 4).",
    /* MMU_CBPDATA109_XPE0       */ "CBP Data RAM 109 (bank 13, slice 5).",
    /* MMU_CBPDATA109_XPE1       */ "CBP Data RAM 109 (bank 13, slice 5).",
    /* MMU_CBPDATA109_XPE2       */ "CBP Data RAM 109 (bank 13, slice 5).",
    /* MMU_CBPDATA109_XPE3       */ "CBP Data RAM 109 (bank 13, slice 5).",
    /* MMU_CBPDATA10_XPE0        */ "Cell buffer RAM 10.  Slice 0, bank 10",
    /* MMU_CBPDATA10_XPE1        */ "Cell buffer RAM 10.  Slice 0, bank 10",
    /* MMU_CBPDATA10_XPE2        */ "Cell buffer RAM 10.  Slice 0, bank 10",
    /* MMU_CBPDATA10_XPE3        */ "Cell buffer RAM 10.  Slice 0, bank 10",
    /* MMU_CBPDATA110_XPE0       */ "CBP Data RAM 110 (bank 13, slice 6).",
    /* MMU_CBPDATA110_XPE1       */ "CBP Data RAM 110 (bank 13, slice 6).",
    /* MMU_CBPDATA110_XPE2       */ "CBP Data RAM 110 (bank 13, slice 6).",
    /* MMU_CBPDATA110_XPE3       */ "CBP Data RAM 110 (bank 13, slice 6).",
    /* MMU_CBPDATA111_XPE0       */ "CBP Data RAM 111 (bank 13, slice 7).",
    /* MMU_CBPDATA111_XPE1       */ "CBP Data RAM 111 (bank 13, slice 7).",
    /* MMU_CBPDATA111_XPE2       */ "CBP Data RAM 111 (bank 13, slice 7).",
    /* MMU_CBPDATA111_XPE3       */ "CBP Data RAM 111 (bank 13, slice 7).",
    /* MMU_CBPDATA11_XPE0        */ "Cell buffer RAM 11.  Slice 0, bank 11",
    /* MMU_CBPDATA11_XPE1        */ "Cell buffer RAM 11.  Slice 0, bank 11",
    /* MMU_CBPDATA11_XPE2        */ "Cell buffer RAM 11.  Slice 0, bank 11",
    /* MMU_CBPDATA11_XPE3        */ "Cell buffer RAM 11.  Slice 0, bank 11",
    /* MMU_CBPDATA12_XPE0        */ "Cell buffer RAM 12.  Slice 0, bank 12",
    /* MMU_CBPDATA12_XPE1        */ "Cell buffer RAM 12.  Slice 0, bank 12",
    /* MMU_CBPDATA12_XPE2        */ "Cell buffer RAM 12.  Slice 0, bank 12",
    /* MMU_CBPDATA12_XPE3        */ "Cell buffer RAM 12.  Slice 0, bank 12",
    /* MMU_CBPDATA13_XPE0        */ "Cell buffer RAM 13.  Slice 0, bank 13",
    /* MMU_CBPDATA13_XPE1        */ "Cell buffer RAM 13.  Slice 0, bank 13",
    /* MMU_CBPDATA13_XPE2        */ "Cell buffer RAM 13.  Slice 0, bank 13",
    /* MMU_CBPDATA13_XPE3        */ "Cell buffer RAM 13.  Slice 0, bank 13",
    /* MMU_CBPDATA14_XPE0        */ "Cell buffer RAM 14.  Slice 0, bank 14",
    /* MMU_CBPDATA14_XPE1        */ "Cell buffer RAM 14.  Slice 0, bank 14",
    /* MMU_CBPDATA14_XPE2        */ "Cell buffer RAM 14.  Slice 0, bank 14",
    /* MMU_CBPDATA14_XPE3        */ "Cell buffer RAM 14.  Slice 0, bank 14",
    /* MMU_CBPDATA15_XPE0        */ "Cell buffer RAM 15. Slice 1, bank 0",
    /* MMU_CBPDATA15_XPE1        */ "Cell buffer RAM 15. Slice 1, bank 0",
    /* MMU_CBPDATA15_XPE2        */ "Cell buffer RAM 15. Slice 1, bank 0",
    /* MMU_CBPDATA15_XPE3        */ "Cell buffer RAM 15. Slice 1, bank 0",
    /* MMU_CBPDATA16_XPE0        */ "Cell buffer RAM 16. Slice 1, bank 1",
    /* MMU_CBPDATA16_XPE1        */ "Cell buffer RAM 16. Slice 1, bank 1",
    /* MMU_CBPDATA16_XPE2        */ "Cell buffer RAM 16. Slice 1, bank 1",
    /* MMU_CBPDATA16_XPE3        */ "Cell buffer RAM 16. Slice 1, bank 1",
    /* MMU_CBPDATA17_XPE0        */ "Cell buffer RAM 17. Slice 1, bank 2",
    /* MMU_CBPDATA17_XPE1        */ "Cell buffer RAM 17. Slice 1, bank 2",
    /* MMU_CBPDATA17_XPE2        */ "Cell buffer RAM 17. Slice 1, bank 2",
    /* MMU_CBPDATA17_XPE3        */ "Cell buffer RAM 17. Slice 1, bank 2",
    /* MMU_CBPDATA18_XPE0        */ "Cell buffer RAM 18. Slice 1, bank 3",
    /* MMU_CBPDATA18_XPE1        */ "Cell buffer RAM 18. Slice 1, bank 3",
    /* MMU_CBPDATA18_XPE2        */ "Cell buffer RAM 18. Slice 1, bank 3",
    /* MMU_CBPDATA18_XPE3        */ "Cell buffer RAM 18. Slice 1, bank 3",
    /* MMU_CBPDATA19_XPE0        */ "Cell buffer RAM 19. Slice 1, bank 4",
    /* MMU_CBPDATA19_XPE1        */ "Cell buffer RAM 19. Slice 1, bank 4",
    /* MMU_CBPDATA19_XPE2        */ "Cell buffer RAM 19. Slice 1, bank 4",
    /* MMU_CBPDATA19_XPE3        */ "Cell buffer RAM 19. Slice 1, bank 4",
    /* MMU_CBPDATA1_XPE0         */ "Cell buffer RAM 1.  Slice 0, bank 1.",
    /* MMU_CBPDATA1_XPE1         */ "Cell buffer RAM 1.  Slice 0, bank 1.",
    /* MMU_CBPDATA1_XPE2         */ "Cell buffer RAM 1.  Slice 0, bank 1.",
    /* MMU_CBPDATA1_XPE3         */ "Cell buffer RAM 1.  Slice 0, bank 1.",
    /* MMU_CBPDATA20_XPE0        */ "Cell buffer RAM 20. Slice 1, bank 5",
    /* MMU_CBPDATA20_XPE1        */ "Cell buffer RAM 20. Slice 1, bank 5",
    /* MMU_CBPDATA20_XPE2        */ "Cell buffer RAM 20. Slice 1, bank 5",
    /* MMU_CBPDATA20_XPE3        */ "Cell buffer RAM 20. Slice 1, bank 5",
    /* MMU_CBPDATA21_XPE0        */ "Cell buffer RAM 21. Slice 1, bank 6",
    /* MMU_CBPDATA21_XPE1        */ "Cell buffer RAM 21. Slice 1, bank 6",
    /* MMU_CBPDATA21_XPE2        */ "Cell buffer RAM 21. Slice 1, bank 6",
    /* MMU_CBPDATA21_XPE3        */ "Cell buffer RAM 21. Slice 1, bank 6",
    /* MMU_CBPDATA22_XPE0        */ "Cell buffer RAM 22. Slice 1, bank 7",
    /* MMU_CBPDATA22_XPE1        */ "Cell buffer RAM 22. Slice 1, bank 7",
    /* MMU_CBPDATA22_XPE2        */ "Cell buffer RAM 22. Slice 1, bank 7",
    /* MMU_CBPDATA22_XPE3        */ "Cell buffer RAM 22. Slice 1, bank 7",
    /* MMU_CBPDATA23_XPE0        */ "Cell buffer RAM 23. Slice 1, bank 8",
    /* MMU_CBPDATA23_XPE1        */ "Cell buffer RAM 23. Slice 1, bank 8",
    /* MMU_CBPDATA23_XPE2        */ "Cell buffer RAM 23. Slice 1, bank 8",
    /* MMU_CBPDATA23_XPE3        */ "Cell buffer RAM 23. Slice 1, bank 8",
    /* MMU_CBPDATA24_XPE0        */ "Cell buffer RAM 24. Slice 1, bank 9",
    /* MMU_CBPDATA24_XPE1        */ "Cell buffer RAM 24. Slice 1, bank 9",
    /* MMU_CBPDATA24_XPE2        */ "Cell buffer RAM 24. Slice 1, bank 9",
    /* MMU_CBPDATA24_XPE3        */ "Cell buffer RAM 24. Slice 1, bank 9",
    /* MMU_CBPDATA25_XPE0        */ "Cell buffer RAM 25. Slice 1, bank 10",
    /* MMU_CBPDATA25_XPE1        */ "Cell buffer RAM 25. Slice 1, bank 10",
    /* MMU_CBPDATA25_XPE2        */ "Cell buffer RAM 25. Slice 1, bank 10",
    /* MMU_CBPDATA25_XPE3        */ "Cell buffer RAM 25. Slice 1, bank 10",
    /* MMU_CBPDATA26_XPE0        */ "Cell buffer RAM 26. Slice 1, bank 11",
    /* MMU_CBPDATA26_XPE1        */ "Cell buffer RAM 26. Slice 1, bank 11",
    /* MMU_CBPDATA26_XPE2        */ "Cell buffer RAM 26. Slice 1, bank 11",
    /* MMU_CBPDATA26_XPE3        */ "Cell buffer RAM 26. Slice 1, bank 11",
    /* MMU_CBPDATA27_XPE0        */ "Cell buffer RAM 27. Slice 1, bank 12",
    /* MMU_CBPDATA27_XPE1        */ "Cell buffer RAM 27. Slice 1, bank 12",
    /* MMU_CBPDATA27_XPE2        */ "Cell buffer RAM 27. Slice 1, bank 12",
    /* MMU_CBPDATA27_XPE3        */ "Cell buffer RAM 27. Slice 1, bank 12",
    /* MMU_CBPDATA28_XPE0        */ "Cell buffer RAM 28. Slice 1, bank 13",
    /* MMU_CBPDATA28_XPE1        */ "Cell buffer RAM 28. Slice 1, bank 13",
    /* MMU_CBPDATA28_XPE2        */ "Cell buffer RAM 28. Slice 1, bank 13",
    /* MMU_CBPDATA28_XPE3        */ "Cell buffer RAM 28. Slice 1, bank 13",
    /* MMU_CBPDATA29_XPE0        */ "Cell buffer RAM 29. Slice 1, bank 14",
    /* MMU_CBPDATA29_XPE1        */ "Cell buffer RAM 29. Slice 1, bank 14",
    /* MMU_CBPDATA29_XPE2        */ "Cell buffer RAM 29. Slice 1, bank 14",
    /* MMU_CBPDATA29_XPE3        */ "Cell buffer RAM 29. Slice 1, bank 14",
    /* MMU_CBPDATA2_XPE0         */ "Cell buffer RAM 2.  Slice 0, bank 2",
    /* MMU_CBPDATA2_XPE1         */ "Cell buffer RAM 2.  Slice 0, bank 2",
    /* MMU_CBPDATA2_XPE2         */ "Cell buffer RAM 2.  Slice 0, bank 2",
    /* MMU_CBPDATA2_XPE3         */ "Cell buffer RAM 2.  Slice 0, bank 2",
    /* MMU_CBPDATA30_XPE0        */ "Cell buffer RAM 30. Slice 2, bank 0",
    /* MMU_CBPDATA30_XPE1        */ "Cell buffer RAM 30. Slice 2, bank 0",
    /* MMU_CBPDATA30_XPE2        */ "Cell buffer RAM 30. Slice 2, bank 0",
    /* MMU_CBPDATA30_XPE3        */ "Cell buffer RAM 30. Slice 2, bank 0",
    /* MMU_CBPDATA31_XPE0        */ "Cell buffer RAM 31. Slice 2, bank 1",
    /* MMU_CBPDATA31_XPE1        */ "Cell buffer RAM 31. Slice 2, bank 1",
    /* MMU_CBPDATA31_XPE2        */ "Cell buffer RAM 31. Slice 2, bank 1",
    /* MMU_CBPDATA31_XPE3        */ "Cell buffer RAM 31. Slice 2, bank 1",
    /* MMU_CBPDATA32_XPE0        */ "Cell buffer RAM 32. Slice 2, bank 2",
    /* MMU_CBPDATA32_XPE1        */ "Cell buffer RAM 32. Slice 2, bank 2",
    /* MMU_CBPDATA32_XPE2        */ "Cell buffer RAM 32. Slice 2, bank 2",
    /* MMU_CBPDATA32_XPE3        */ "Cell buffer RAM 32. Slice 2, bank 2",
    /* MMU_CBPDATA33_XPE0        */ "Cell buffer RAM 33. Slice 2, bank 3",
    /* MMU_CBPDATA33_XPE1        */ "Cell buffer RAM 33. Slice 2, bank 3",
    /* MMU_CBPDATA33_XPE2        */ "Cell buffer RAM 33. Slice 2, bank 3",
    /* MMU_CBPDATA33_XPE3        */ "Cell buffer RAM 33. Slice 2, bank 3",
    /* MMU_CBPDATA34_XPE0        */ "Cell buffer RAM 34. Slice 2, bank 4",
    /* MMU_CBPDATA34_XPE1        */ "Cell buffer RAM 34. Slice 2, bank 4",
    /* MMU_CBPDATA34_XPE2        */ "Cell buffer RAM 34. Slice 2, bank 4",
    /* MMU_CBPDATA34_XPE3        */ "Cell buffer RAM 34. Slice 2, bank 4",
    /* MMU_CBPDATA35_XPE0        */ "Cell buffer RAM 35. Slice 2, bank 5",
    /* MMU_CBPDATA35_XPE1        */ "Cell buffer RAM 35. Slice 2, bank 5",
    /* MMU_CBPDATA35_XPE2        */ "Cell buffer RAM 35. Slice 2, bank 5",
    /* MMU_CBPDATA35_XPE3        */ "Cell buffer RAM 35. Slice 2, bank 5",
    /* MMU_CBPDATA36_XPE0        */ "Cell buffer RAM 36. Slice 2, bank 6",
    /* MMU_CBPDATA36_XPE1        */ "Cell buffer RAM 36. Slice 2, bank 6",
    /* MMU_CBPDATA36_XPE2        */ "Cell buffer RAM 36. Slice 2, bank 6",
    /* MMU_CBPDATA36_XPE3        */ "Cell buffer RAM 36. Slice 2, bank 6",
    /* MMU_CBPDATA37_XPE0        */ "Cell buffer RAM 37. Slice 2, bank 7",
    /* MMU_CBPDATA37_XPE1        */ "Cell buffer RAM 37. Slice 2, bank 7",
    /* MMU_CBPDATA37_XPE2        */ "Cell buffer RAM 37. Slice 2, bank 7",
    /* MMU_CBPDATA37_XPE3        */ "Cell buffer RAM 37. Slice 2, bank 7",
    /* MMU_CBPDATA38_XPE0        */ "Cell buffer RAM 38. Slice 2, bank 8",
    /* MMU_CBPDATA38_XPE1        */ "Cell buffer RAM 38. Slice 2, bank 8",
    /* MMU_CBPDATA38_XPE2        */ "Cell buffer RAM 38. Slice 2, bank 8",
    /* MMU_CBPDATA38_XPE3        */ "Cell buffer RAM 38. Slice 2, bank 8",
    /* MMU_CBPDATA39_XPE0        */ "Cell buffer RAM 39. Slice 2, bank 9",
    /* MMU_CBPDATA39_XPE1        */ "Cell buffer RAM 39. Slice 2, bank 9",
    /* MMU_CBPDATA39_XPE2        */ "Cell buffer RAM 39. Slice 2, bank 9",
    /* MMU_CBPDATA39_XPE3        */ "Cell buffer RAM 39. Slice 2, bank 9",
    /* MMU_CBPDATA3_XPE0         */ "Cell buffer RAM 3.  Slice 0, bank 3",
    /* MMU_CBPDATA3_XPE1         */ "Cell buffer RAM 3.  Slice 0, bank 3",
    /* MMU_CBPDATA3_XPE2         */ "Cell buffer RAM 3.  Slice 0, bank 3",
    /* MMU_CBPDATA3_XPE3         */ "Cell buffer RAM 3.  Slice 0, bank 3",
    /* MMU_CBPDATA40_XPE0        */ "Cell buffer RAM 40. Slice 2, bank 10",
    /* MMU_CBPDATA40_XPE1        */ "Cell buffer RAM 40. Slice 2, bank 10",
    /* MMU_CBPDATA40_XPE2        */ "Cell buffer RAM 40. Slice 2, bank 10",
    /* MMU_CBPDATA40_XPE3        */ "Cell buffer RAM 40. Slice 2, bank 10",
    /* MMU_CBPDATA41_XPE0        */ "Cell buffer RAM 41. Slice 2, bank 11",
    /* MMU_CBPDATA41_XPE1        */ "Cell buffer RAM 41. Slice 2, bank 11",
    /* MMU_CBPDATA41_XPE2        */ "Cell buffer RAM 41. Slice 2, bank 11",
    /* MMU_CBPDATA41_XPE3        */ "Cell buffer RAM 41. Slice 2, bank 11",
    /* MMU_CBPDATA42_XPE0        */ "Cell buffer RAM 42. Slice 2, bank 12",
    /* MMU_CBPDATA42_XPE1        */ "Cell buffer RAM 42. Slice 2, bank 12",
    /* MMU_CBPDATA42_XPE2        */ "Cell buffer RAM 42. Slice 2, bank 12",
    /* MMU_CBPDATA42_XPE3        */ "Cell buffer RAM 42. Slice 2, bank 12",
    /* MMU_CBPDATA43_XPE0        */ "Cell buffer RAM 43. Slice 2, bank 13",
    /* MMU_CBPDATA43_XPE1        */ "Cell buffer RAM 43. Slice 2, bank 13",
    /* MMU_CBPDATA43_XPE2        */ "Cell buffer RAM 43. Slice 2, bank 13",
    /* MMU_CBPDATA43_XPE3        */ "Cell buffer RAM 43. Slice 2, bank 13",
    /* MMU_CBPDATA44_XPE0        */ "Cell buffer RAM 44. Slice 2, bank 14",
    /* MMU_CBPDATA44_XPE1        */ "Cell buffer RAM 44. Slice 2, bank 14",
    /* MMU_CBPDATA44_XPE2        */ "Cell buffer RAM 44. Slice 2, bank 14",
    /* MMU_CBPDATA44_XPE3        */ "Cell buffer RAM 44. Slice 2, bank 14",
    /* MMU_CBPDATA45_XPE0        */ "Cell buffer RAM 45. Slice 3, bank 0",
    /* MMU_CBPDATA45_XPE1        */ "Cell buffer RAM 45. Slice 3, bank 0",
    /* MMU_CBPDATA45_XPE2        */ "Cell buffer RAM 45. Slice 3, bank 0",
    /* MMU_CBPDATA45_XPE3        */ "Cell buffer RAM 45. Slice 3, bank 0",
    /* MMU_CBPDATA46_XPE0        */ "Cell buffer RAM 46. Slice 3, bank 1",
    /* MMU_CBPDATA46_XPE1        */ "Cell buffer RAM 46. Slice 3, bank 1",
    /* MMU_CBPDATA46_XPE2        */ "Cell buffer RAM 46. Slice 3, bank 1",
    /* MMU_CBPDATA46_XPE3        */ "Cell buffer RAM 46. Slice 3, bank 1",
    /* MMU_CBPDATA47_XPE0        */ "Cell buffer RAM 47. Slice 3, bank 2",
    /* MMU_CBPDATA47_XPE1        */ "Cell buffer RAM 47. Slice 3, bank 2",
    /* MMU_CBPDATA47_XPE2        */ "Cell buffer RAM 47. Slice 3, bank 2",
    /* MMU_CBPDATA47_XPE3        */ "Cell buffer RAM 47. Slice 3, bank 2",
    /* MMU_CBPDATA48_XPE0        */ "Cell buffer RAM 48. Slice 3, bank 3",
    /* MMU_CBPDATA48_XPE1        */ "Cell buffer RAM 48. Slice 3, bank 3",
    /* MMU_CBPDATA48_XPE2        */ "Cell buffer RAM 48. Slice 3, bank 3",
    /* MMU_CBPDATA48_XPE3        */ "Cell buffer RAM 48. Slice 3, bank 3",
    /* MMU_CBPDATA49_XPE0        */ "Cell buffer RAM 49. Slice 3, bank 4",
    /* MMU_CBPDATA49_XPE1        */ "Cell buffer RAM 49. Slice 3, bank 4",
    /* MMU_CBPDATA49_XPE2        */ "Cell buffer RAM 49. Slice 3, bank 4",
    /* MMU_CBPDATA49_XPE3        */ "Cell buffer RAM 49. Slice 3, bank 4",
    /* MMU_CBPDATA4_XPE0         */ "Cell buffer RAM 4.  Slice 0, bank 4",
    /* MMU_CBPDATA4_XPE1         */ "Cell buffer RAM 4.  Slice 0, bank 4",
    /* MMU_CBPDATA4_XPE2         */ "Cell buffer RAM 4.  Slice 0, bank 4",
    /* MMU_CBPDATA4_XPE3         */ "Cell buffer RAM 4.  Slice 0, bank 4",
    /* MMU_CBPDATA50_XPE0        */ "Cell buffer RAM 50. Slice 3, bank 5",
    /* MMU_CBPDATA50_XPE1        */ "Cell buffer RAM 50. Slice 3, bank 5",
    /* MMU_CBPDATA50_XPE2        */ "Cell buffer RAM 50. Slice 3, bank 5",
    /* MMU_CBPDATA50_XPE3        */ "Cell buffer RAM 50. Slice 3, bank 5",
    /* MMU_CBPDATA51_XPE0        */ "Cell buffer RAM 51. Slice 3, bank 6",
    /* MMU_CBPDATA51_XPE1        */ "Cell buffer RAM 51. Slice 3, bank 6",
    /* MMU_CBPDATA51_XPE2        */ "Cell buffer RAM 51. Slice 3, bank 6",
    /* MMU_CBPDATA51_XPE3        */ "Cell buffer RAM 51. Slice 3, bank 6",
    /* MMU_CBPDATA52_XPE0        */ "Cell buffer RAM 52. Slice 3, bank 7",
    /* MMU_CBPDATA52_XPE1        */ "Cell buffer RAM 52. Slice 3, bank 7",
    /* MMU_CBPDATA52_XPE2        */ "Cell buffer RAM 52. Slice 3, bank 7",
    /* MMU_CBPDATA52_XPE3        */ "Cell buffer RAM 52. Slice 3, bank 7",
    /* MMU_CBPDATA53_XPE0        */ "Cell buffer RAM 53. Slice 3, bank 8",
    /* MMU_CBPDATA53_XPE1        */ "Cell buffer RAM 53. Slice 3, bank 8",
    /* MMU_CBPDATA53_XPE2        */ "Cell buffer RAM 53. Slice 3, bank 8",
    /* MMU_CBPDATA53_XPE3        */ "Cell buffer RAM 53. Slice 3, bank 8",
    /* MMU_CBPDATA54_XPE0        */ "Cell buffer RAM 54. Slice 3, bank 9",
    /* MMU_CBPDATA54_XPE1        */ "Cell buffer RAM 54. Slice 3, bank 9",
    /* MMU_CBPDATA54_XPE2        */ "Cell buffer RAM 54. Slice 3, bank 9",
    /* MMU_CBPDATA54_XPE3        */ "Cell buffer RAM 54. Slice 3, bank 9",
    /* MMU_CBPDATA55_XPE0        */ "Cell buffer RAM 55. Slice 3, bank 10",
    /* MMU_CBPDATA55_XPE1        */ "Cell buffer RAM 55. Slice 3, bank 10",
    /* MMU_CBPDATA55_XPE2        */ "Cell buffer RAM 55. Slice 3, bank 10",
    /* MMU_CBPDATA55_XPE3        */ "Cell buffer RAM 55. Slice 3, bank 10",
    /* MMU_CBPDATA56_XPE0        */ "Cell buffer RAM 56. Slice 3, bank 11",
    /* MMU_CBPDATA56_XPE1        */ "Cell buffer RAM 56. Slice 3, bank 11",
    /* MMU_CBPDATA56_XPE2        */ "Cell buffer RAM 56. Slice 3, bank 11",
    /* MMU_CBPDATA56_XPE3        */ "Cell buffer RAM 56. Slice 3, bank 11",
    /* MMU_CBPDATA57_XPE0        */ "Cell buffer RAM 57. Slice 3, bank 12",
    /* MMU_CBPDATA57_XPE1        */ "Cell buffer RAM 57. Slice 3, bank 12",
    /* MMU_CBPDATA57_XPE2        */ "Cell buffer RAM 57. Slice 3, bank 12",
    /* MMU_CBPDATA57_XPE3        */ "Cell buffer RAM 57. Slice 3, bank 12",
    /* MMU_CBPDATA58_XPE0        */ "Cell buffer RAM 58. Slice 3, bank 13",
    /* MMU_CBPDATA58_XPE1        */ "Cell buffer RAM 58. Slice 3, bank 13",
    /* MMU_CBPDATA58_XPE2        */ "Cell buffer RAM 58. Slice 3, bank 13",
    /* MMU_CBPDATA58_XPE3        */ "Cell buffer RAM 58. Slice 3, bank 13",
    /* MMU_CBPDATA59_XPE0        */ "Cell buffer RAM 59. Slice 3, bank 14",
    /* MMU_CBPDATA59_XPE1        */ "Cell buffer RAM 59. Slice 3, bank 14",
    /* MMU_CBPDATA59_XPE2        */ "Cell buffer RAM 59. Slice 3, bank 14",
    /* MMU_CBPDATA59_XPE3        */ "Cell buffer RAM 59. Slice 3, bank 14",
    /* MMU_CBPDATA5_XPE0         */ "Cell buffer RAM 5.  Slice 0, bank 5",
    /* MMU_CBPDATA5_XPE1         */ "Cell buffer RAM 5.  Slice 0, bank 5",
    /* MMU_CBPDATA5_XPE2         */ "Cell buffer RAM 5.  Slice 0, bank 5",
    /* MMU_CBPDATA5_XPE3         */ "Cell buffer RAM 5.  Slice 0, bank 5",
    /* MMU_CBPDATA60_XPE0        */ "Cell buffer RAM 60.  Slice 3, bank 3.",
    /* MMU_CBPDATA60_XPE1        */ "Cell buffer RAM 60.  Slice 3, bank 3.",
    /* MMU_CBPDATA60_XPE2        */ "Cell buffer RAM 60.  Slice 3, bank 3.",
    /* MMU_CBPDATA60_XPE3        */ "Cell buffer RAM 60.  Slice 3, bank 3.",
    /* MMU_CBPDATA61_XPE0        */ "Cell buffer RAM 61.  Slice 3, bank 4.",
    /* MMU_CBPDATA61_XPE1        */ "Cell buffer RAM 61.  Slice 3, bank 4.",
    /* MMU_CBPDATA61_XPE2        */ "Cell buffer RAM 61.  Slice 3, bank 4.",
    /* MMU_CBPDATA61_XPE3        */ "Cell buffer RAM 61.  Slice 3, bank 4.",
    /* MMU_CBPDATA62_XPE0        */ "Cell buffer RAM 62.  Slice 3, bank 5.",
    /* MMU_CBPDATA62_XPE1        */ "Cell buffer RAM 62.  Slice 3, bank 5.",
    /* MMU_CBPDATA62_XPE2        */ "Cell buffer RAM 62.  Slice 3, bank 5.",
    /* MMU_CBPDATA62_XPE3        */ "Cell buffer RAM 62.  Slice 3, bank 5.",
    /* MMU_CBPDATA63_XPE0        */ "Cell buffer RAM 63.  Slice 3, bank 6.",
    /* MMU_CBPDATA63_XPE1        */ "Cell buffer RAM 63.  Slice 3, bank 6.",
    /* MMU_CBPDATA63_XPE2        */ "Cell buffer RAM 63.  Slice 3, bank 6.",
    /* MMU_CBPDATA63_XPE3        */ "Cell buffer RAM 63.  Slice 3, bank 6.",
    /* MMU_CBPDATA64_XPE0        */ "Cell buffer RAM 64.  Slice 3, bank 7.",
    /* MMU_CBPDATA64_XPE1        */ "Cell buffer RAM 64.  Slice 3, bank 7.",
    /* MMU_CBPDATA64_XPE2        */ "Cell buffer RAM 64.  Slice 3, bank 7.",
    /* MMU_CBPDATA64_XPE3        */ "Cell buffer RAM 64.  Slice 3, bank 7.",
    /* MMU_CBPDATA65_XPE0        */ "Cell buffer RAM 65.  Slice 3, bank 8.",
    /* MMU_CBPDATA65_XPE1        */ "Cell buffer RAM 65.  Slice 3, bank 8.",
    /* MMU_CBPDATA65_XPE2        */ "Cell buffer RAM 65.  Slice 3, bank 8.",
    /* MMU_CBPDATA65_XPE3        */ "Cell buffer RAM 65.  Slice 3, bank 8.",
    /* MMU_CBPDATA66_XPE0        */ "Cell buffer RAM 66.  Slice 3, bank 9.",
    /* MMU_CBPDATA66_XPE1        */ "Cell buffer RAM 66.  Slice 3, bank 9.",
    /* MMU_CBPDATA66_XPE2        */ "Cell buffer RAM 66.  Slice 3, bank 9.",
    /* MMU_CBPDATA66_XPE3        */ "Cell buffer RAM 66.  Slice 3, bank 9.",
    /* MMU_CBPDATA67_XPE0        */ "Cell buffer RAM 67.  Slice 3, bank 10.",
    /* MMU_CBPDATA67_XPE1        */ "Cell buffer RAM 67.  Slice 3, bank 10.",
    /* MMU_CBPDATA67_XPE2        */ "Cell buffer RAM 67.  Slice 3, bank 10.",
    /* MMU_CBPDATA67_XPE3        */ "Cell buffer RAM 67.  Slice 3, bank 10.",
    /* MMU_CBPDATA68_XPE0        */ "Cell buffer RAM 68.  Slice 3, bank 11.",
    /* MMU_CBPDATA68_XPE1        */ "Cell buffer RAM 68.  Slice 3, bank 11.",
    /* MMU_CBPDATA68_XPE2        */ "Cell buffer RAM 68.  Slice 3, bank 11.",
    /* MMU_CBPDATA68_XPE3        */ "Cell buffer RAM 68.  Slice 3, bank 11.",
    /* MMU_CBPDATA69_XPE0        */ "Cell buffer RAM 69.  Slice 3, bank 12.",
    /* MMU_CBPDATA69_XPE1        */ "Cell buffer RAM 69.  Slice 3, bank 12.",
    /* MMU_CBPDATA69_XPE2        */ "Cell buffer RAM 69.  Slice 3, bank 12.",
    /* MMU_CBPDATA69_XPE3        */ "Cell buffer RAM 69.  Slice 3, bank 12.",
    /* MMU_CBPDATA6_XPE0         */ "Cell buffer RAM 6.  Slice 0, bank 6",
    /* MMU_CBPDATA6_XPE1         */ "Cell buffer RAM 6.  Slice 0, bank 6",
    /* MMU_CBPDATA6_XPE2         */ "Cell buffer RAM 6.  Slice 0, bank 6",
    /* MMU_CBPDATA6_XPE3         */ "Cell buffer RAM 6.  Slice 0, bank 6",
    /* MMU_CBPDATA70_XPE0        */ "Cell buffer RAM 70.  Slice 3, bank 13.",
    /* MMU_CBPDATA70_XPE1        */ "Cell buffer RAM 70.  Slice 3, bank 13.",
    /* MMU_CBPDATA70_XPE2        */ "Cell buffer RAM 70.  Slice 3, bank 13.",
    /* MMU_CBPDATA70_XPE3        */ "Cell buffer RAM 70.  Slice 3, bank 13.",
    /* MMU_CBPDATA71_XPE0        */ "Cell buffer RAM 71.  Slice 3, bank 14.",
    /* MMU_CBPDATA71_XPE1        */ "Cell buffer RAM 71.  Slice 3, bank 14.",
    /* MMU_CBPDATA71_XPE2        */ "Cell buffer RAM 71.  Slice 3, bank 14.",
    /* MMU_CBPDATA71_XPE3        */ "Cell buffer RAM 71.  Slice 3, bank 14.",
    /* MMU_CBPDATA72_XPE0        */ "Cell buffer RAM 72.  Slice 3, bank 15.",
    /* MMU_CBPDATA72_XPE1        */ "Cell buffer RAM 72.  Slice 3, bank 15.",
    /* MMU_CBPDATA72_XPE2        */ "Cell buffer RAM 72.  Slice 3, bank 15.",
    /* MMU_CBPDATA72_XPE3        */ "Cell buffer RAM 72.  Slice 3, bank 15.",
    /* MMU_CBPDATA73_XPE0        */ "Cell buffer RAM 73.  Slice 3, bank 16.",
    /* MMU_CBPDATA73_XPE1        */ "Cell buffer RAM 73.  Slice 3, bank 16.",
    /* MMU_CBPDATA73_XPE2        */ "Cell buffer RAM 73.  Slice 3, bank 16.",
    /* MMU_CBPDATA73_XPE3        */ "Cell buffer RAM 73.  Slice 3, bank 16.",
    /* MMU_CBPDATA74_XPE0        */ "Cell buffer RAM 74.  Slice 3, bank 17.",
    /* MMU_CBPDATA74_XPE1        */ "Cell buffer RAM 74.  Slice 3, bank 17.",
    /* MMU_CBPDATA74_XPE2        */ "Cell buffer RAM 74.  Slice 3, bank 17.",
    /* MMU_CBPDATA74_XPE3        */ "Cell buffer RAM 74.  Slice 3, bank 17.",
    /* MMU_CBPDATA75_XPE0        */ "Cell buffer RAM 75.  Slice 3, bank 18.",
    /* MMU_CBPDATA75_XPE1        */ "Cell buffer RAM 75.  Slice 3, bank 18.",
    /* MMU_CBPDATA75_XPE2        */ "Cell buffer RAM 75.  Slice 3, bank 18.",
    /* MMU_CBPDATA75_XPE3        */ "Cell buffer RAM 75.  Slice 3, bank 18.",
    /* MMU_CBPDATA76_XPE0        */ "CBP Data RAM 76 (bank 9, slice 4).",
    /* MMU_CBPDATA76_XPE1        */ "CBP Data RAM 76 (bank 9, slice 4).",
    /* MMU_CBPDATA76_XPE2        */ "CBP Data RAM 76 (bank 9, slice 4).",
    /* MMU_CBPDATA76_XPE3        */ "CBP Data RAM 76 (bank 9, slice 4).",
    /* MMU_CBPDATA77_XPE0        */ "CBP Data RAM 77 (bank 9, slice 5).",
    /* MMU_CBPDATA77_XPE1        */ "CBP Data RAM 77 (bank 9, slice 5).",
    /* MMU_CBPDATA77_XPE2        */ "CBP Data RAM 77 (bank 9, slice 5).",
    /* MMU_CBPDATA77_XPE3        */ "CBP Data RAM 77 (bank 9, slice 5).",
    /* MMU_CBPDATA78_XPE0        */ "CBP Data RAM 78 (bank 9, slice 6).",
    /* MMU_CBPDATA78_XPE1        */ "CBP Data RAM 78 (bank 9, slice 6).",
    /* MMU_CBPDATA78_XPE2        */ "CBP Data RAM 78 (bank 9, slice 6).",
    /* MMU_CBPDATA78_XPE3        */ "CBP Data RAM 78 (bank 9, slice 6).",
    /* MMU_CBPDATA79_XPE0        */ "CBP Data RAM 79 (bank 9, slice 7).",
    /* MMU_CBPDATA79_XPE1        */ "CBP Data RAM 79 (bank 9, slice 7).",
    /* MMU_CBPDATA79_XPE2        */ "CBP Data RAM 79 (bank 9, slice 7).",
    /* MMU_CBPDATA79_XPE3        */ "CBP Data RAM 79 (bank 9, slice 7).",
    /* MMU_CBPDATA7_XPE0         */ "Cell buffer RAM 7.  Slice 0, bank 7",
    /* MMU_CBPDATA7_XPE1         */ "Cell buffer RAM 7.  Slice 0, bank 7",
    /* MMU_CBPDATA7_XPE2         */ "Cell buffer RAM 7.  Slice 0, bank 7",
    /* MMU_CBPDATA7_XPE3         */ "Cell buffer RAM 7.  Slice 0, bank 7",
    /* MMU_CBPDATA80_XPE0        */ "CBP Data RAM 80 (bank 10, slice 0).",
    /* MMU_CBPDATA80_XPE1        */ "CBP Data RAM 80 (bank 10, slice 0).",
    /* MMU_CBPDATA80_XPE2        */ "CBP Data RAM 80 (bank 10, slice 0).",
    /* MMU_CBPDATA80_XPE3        */ "CBP Data RAM 80 (bank 10, slice 0).",
    /* MMU_CBPDATA81_XPE0        */ "CBP Data RAM 81 (bank 10, slice 1).",
    /* MMU_CBPDATA81_XPE1        */ "CBP Data RAM 81 (bank 10, slice 1).",
    /* MMU_CBPDATA81_XPE2        */ "CBP Data RAM 81 (bank 10, slice 1).",
    /* MMU_CBPDATA81_XPE3        */ "CBP Data RAM 81 (bank 10, slice 1).",
    /* MMU_CBPDATA82_XPE0        */ "CBP Data RAM 82 (bank 10, slice 2).",
    /* MMU_CBPDATA82_XPE1        */ "CBP Data RAM 82 (bank 10, slice 2).",
    /* MMU_CBPDATA82_XPE2        */ "CBP Data RAM 82 (bank 10, slice 2).",
    /* MMU_CBPDATA82_XPE3        */ "CBP Data RAM 82 (bank 10, slice 2).",
    /* MMU_CBPDATA83_XPE0        */ "CBP Data RAM 83 (bank 10, slice 3).",
    /* MMU_CBPDATA83_XPE1        */ "CBP Data RAM 83 (bank 10, slice 3).",
    /* MMU_CBPDATA83_XPE2        */ "CBP Data RAM 83 (bank 10, slice 3).",
    /* MMU_CBPDATA83_XPE3        */ "CBP Data RAM 83 (bank 10, slice 3).",
    /* MMU_CBPDATA84_XPE0        */ "CBP Data RAM 84 (bank 10, slice 4).",
    /* MMU_CBPDATA84_XPE1        */ "CBP Data RAM 84 (bank 10, slice 4).",
    /* MMU_CBPDATA84_XPE2        */ "CBP Data RAM 84 (bank 10, slice 4).",
    /* MMU_CBPDATA84_XPE3        */ "CBP Data RAM 84 (bank 10, slice 4).",
    /* MMU_CBPDATA85_XPE0        */ "CBP Data RAM 85 (bank 10, slice 5).",
    /* MMU_CBPDATA85_XPE1        */ "CBP Data RAM 85 (bank 10, slice 5).",
    /* MMU_CBPDATA85_XPE2        */ "CBP Data RAM 85 (bank 10, slice 5).",
    /* MMU_CBPDATA85_XPE3        */ "CBP Data RAM 85 (bank 10, slice 5).",
    /* MMU_CBPDATA86_XPE0        */ "CBP Data RAM 86 (bank 10, slice 6).",
    /* MMU_CBPDATA86_XPE1        */ "CBP Data RAM 86 (bank 10, slice 6).",
    /* MMU_CBPDATA86_XPE2        */ "CBP Data RAM 86 (bank 10, slice 6).",
    /* MMU_CBPDATA86_XPE3        */ "CBP Data RAM 86 (bank 10, slice 6).",
    /* MMU_CBPDATA87_XPE0        */ "CBP Data RAM 87 (bank 10, slice 7).",
    /* MMU_CBPDATA87_XPE1        */ "CBP Data RAM 87 (bank 10, slice 7).",
    /* MMU_CBPDATA87_XPE2        */ "CBP Data RAM 87 (bank 10, slice 7).",
    /* MMU_CBPDATA87_XPE3        */ "CBP Data RAM 87 (bank 10, slice 7).",
    /* MMU_CBPDATA88_XPE0        */ "CBP Data RAM 88 (bank 11, slice 0).",
    /* MMU_CBPDATA88_XPE1        */ "CBP Data RAM 88 (bank 11, slice 0).",
    /* MMU_CBPDATA88_XPE2        */ "CBP Data RAM 88 (bank 11, slice 0).",
    /* MMU_CBPDATA88_XPE3        */ "CBP Data RAM 88 (bank 11, slice 0).",
    /* MMU_CBPDATA89_XPE0        */ "CBP Data RAM 89 (bank 11, slice 1).",
    /* MMU_CBPDATA89_XPE1        */ "CBP Data RAM 89 (bank 11, slice 1).",
    /* MMU_CBPDATA89_XPE2        */ "CBP Data RAM 89 (bank 11, slice 1).",
    /* MMU_CBPDATA89_XPE3        */ "CBP Data RAM 89 (bank 11, slice 1).",
    /* MMU_CBPDATA8_XPE0         */ "Cell buffer RAM 8.  Slice 0, bank 8",
    /* MMU_CBPDATA8_XPE1         */ "Cell buffer RAM 8.  Slice 0, bank 8",
    /* MMU_CBPDATA8_XPE2         */ "Cell buffer RAM 8.  Slice 0, bank 8",
    /* MMU_CBPDATA8_XPE3         */ "Cell buffer RAM 8.  Slice 0, bank 8",
    /* MMU_CBPDATA90_XPE0        */ "CBP Data RAM 90 (bank 11, slice 2).",
    /* MMU_CBPDATA90_XPE1        */ "CBP Data RAM 90 (bank 11, slice 2).",
    /* MMU_CBPDATA90_XPE2        */ "CBP Data RAM 90 (bank 11, slice 2).",
    /* MMU_CBPDATA90_XPE3        */ "CBP Data RAM 90 (bank 11, slice 2).",
    /* MMU_CBPDATA91_XPE0        */ "CBP Data RAM 91 (bank 11, slice 3).",
    /* MMU_CBPDATA91_XPE1        */ "CBP Data RAM 91 (bank 11, slice 3).",
    /* MMU_CBPDATA91_XPE2        */ "CBP Data RAM 91 (bank 11, slice 3).",
    /* MMU_CBPDATA91_XPE3        */ "CBP Data RAM 91 (bank 11, slice 3).",
    /* MMU_CBPDATA92_XPE0        */ "CBP Data RAM 92 (bank 11, slice 4).",
    /* MMU_CBPDATA92_XPE1        */ "CBP Data RAM 92 (bank 11, slice 4).",
    /* MMU_CBPDATA92_XPE2        */ "CBP Data RAM 92 (bank 11, slice 4).",
    /* MMU_CBPDATA92_XPE3        */ "CBP Data RAM 92 (bank 11, slice 4).",
    /* MMU_CBPDATA93_XPE0        */ "CBP Data RAM 93 (bank 11, slice 5).",
    /* MMU_CBPDATA93_XPE1        */ "CBP Data RAM 93 (bank 11, slice 5).",
    /* MMU_CBPDATA93_XPE2        */ "CBP Data RAM 93 (bank 11, slice 5).",
    /* MMU_CBPDATA93_XPE3        */ "CBP Data RAM 93 (bank 11, slice 5).",
    /* MMU_CBPDATA94_XPE0        */ "CBP Data RAM 94 (bank 11, slice 6).",
    /* MMU_CBPDATA94_XPE1        */ "CBP Data RAM 94 (bank 11, slice 6).",
    /* MMU_CBPDATA94_XPE2        */ "CBP Data RAM 94 (bank 11, slice 6).",
    /* MMU_CBPDATA94_XPE3        */ "CBP Data RAM 94 (bank 11, slice 6).",
    /* MMU_CBPDATA95_XPE0        */ "CBP Data RAM 95 (bank 11, slice 7).",
    /* MMU_CBPDATA95_XPE1        */ "CBP Data RAM 95 (bank 11, slice 7).",
    /* MMU_CBPDATA95_XPE2        */ "CBP Data RAM 95 (bank 11, slice 7).",
    /* MMU_CBPDATA95_XPE3        */ "CBP Data RAM 95 (bank 11, slice 7).",
    /* MMU_CBPDATA96_XPE0        */ "CBP Data RAM 96 (bank 12, slice 0).",
    /* MMU_CBPDATA96_XPE1        */ "CBP Data RAM 96 (bank 12, slice 0).",
    /* MMU_CBPDATA96_XPE2        */ "CBP Data RAM 96 (bank 12, slice 0).",
    /* MMU_CBPDATA96_XPE3        */ "CBP Data RAM 96 (bank 12, slice 0).",
    /* MMU_CBPDATA97_XPE0        */ "CBP Data RAM 97 (bank 12, slice 1).",
    /* MMU_CBPDATA97_XPE1        */ "CBP Data RAM 97 (bank 12, slice 1).",
    /* MMU_CBPDATA97_XPE2        */ "CBP Data RAM 97 (bank 12, slice 1).",
    /* MMU_CBPDATA97_XPE3        */ "CBP Data RAM 97 (bank 12, slice 1).",
    /* MMU_CBPDATA98_XPE0        */ "CBP Data RAM 98 (bank 12, slice 2).",
    /* MMU_CBPDATA98_XPE1        */ "CBP Data RAM 98 (bank 12, slice 2).",
    /* MMU_CBPDATA98_XPE2        */ "CBP Data RAM 98 (bank 12, slice 2).",
    /* MMU_CBPDATA98_XPE3        */ "CBP Data RAM 98 (bank 12, slice 2).",
    /* MMU_CBPDATA99_XPE0        */ "CBP Data RAM 99 (bank 12, slice 3).",
    /* MMU_CBPDATA99_XPE1        */ "CBP Data RAM 99 (bank 12, slice 3).",
    /* MMU_CBPDATA99_XPE2        */ "CBP Data RAM 99 (bank 12, slice 3).",
    /* MMU_CBPDATA99_XPE3        */ "CBP Data RAM 99 (bank 12, slice 3).",
    /* MMU_CBPDATA9_XPE0         */ "Cell buffer RAM 9.  Slice 0, bank 9",
    /* MMU_CBPDATA9_XPE1         */ "Cell buffer RAM 9.  Slice 0, bank 9",
    /* MMU_CBPDATA9_XPE2         */ "Cell buffer RAM 9.  Slice 0, bank 9",
    /* MMU_CBPDATA9_XPE3         */ "Cell buffer RAM 9.  Slice 0, bank 9",
    /* MMU_CBPI_0                */ "Internal Payload Memory, Address Range 0 to 10923, RAM 0",
    /* MMU_CBPI_1                */ "Internal Payload Memory, Address Range 0 to 10923, RAM 1",
    /* MMU_CBPI_2                */ "Internal Payload Memory, Address Range 0 to 10923, RAM 2",
    /* MMU_CBPI_3                */ "Internal Payload Memory, Address Range 0 to 10923, RAM 3",
    /* MMU_CBPI_4                */ "Internal Payload Memory, Address Range 0 to 10923, RAM 4",
    /* MMU_CBPI_5                */ "Internal Payload Memory, Address Range 0 to 10923, RAM 5",
    /* MMU_CBPI_6                */ "Internal Payload Memory, Address Range 0 to 10923, RAM 6",
    /* MMU_CBPI_7                */ "Internal Payload Memory, Address Range 0 to 10923, RAM 7",
    /* MMU_CBPI_8                */ "Internal Payload Memory, Address Range 0 to 10923, RAM 8",
    /* MMU_CBPI_9                */ "Internal Payload Memory, Address Range 0 to 10923, RAM 9",
    /* MMU_CBPI_10               */ "Internal Payload Memory, Address Range 0 to 10923, RAM 10",
    /* MMU_CBPI_11               */ "Internal Payload Memory, Address Range 0 to 10923, RAM 11",
    /* MMU_CBPPKTHEADER0         */ "CBP Packet Header RAM 0",
    /* MMU_CBPPKTHEADER1         */ "CBP Packet Header RAM 1",
    /* MMU_CBPPKTHEADER2         */ "CBP Packet Header RAM 1 MEM0",
    /* MMU_CBPPKTHEADER0_MEM0    */ "CBP Packet Header RAM 0",
    /* MMU_CBPPKTHEADER0_MEM1    */ "CBP Packet Header RAM 1",
    /* MMU_CBPPKTHEADER0_MEM2    */ "CBP Packet Header RAM 2",
    /* MMU_CBPPKTHEADER0_MEM3    */ "CBP Packet Header RAM 2",
    /* MMU_CBPPKTHEADER1_MEM0    */ "CBP Packet Header RAM 1 MEM0",
    /* MMU_CBPPKTHEADER1_MEM1    */ "CBP Packet Header RAM 1 MEM0",
    /* MMU_CBPPKTHEADER1_MEM2    */ "CBP Packet Header 1 RAM 2",
    /* MMU_CBPPKTHEADERCPU       */ "CBP Packet Header CPU RAM",
    /* MMU_CBPPKTHEADER_EXT      */ "CBP Packet Header RAM 2 - is written at EOP",
    /* MMU_CBPPKTLENGTH          */ "CBP Packet Length RAM",
    /* MMU_CBP_CELL_LINK         */ "CBP Cell link memory",
    /* MMU_CCP                   */ "Copy Count Pool RAM",
    /* MMU_CCP0_RESEQ_MEM        */ "Copy Count Pool RAM",
    /* MMU_CCP1_RESEQ_MEM        */ "Copy Count Pool RAM",
    /* MMU_CCPE_MEM              */ "External Buffer Copy Count Pool RAM",
    /* MMU_CCPI_MEM              */ "Internal Buffer Copy Count Pool RAM",
    /* MMU_CCP_MEM               */ "Copy Count Pool RAM",
    /* MMU_CCP_MEM_XPE0          */ "Copy Count Pool RAM",
    /* MMU_CCP_MEM_XPE1          */ "Copy Count Pool RAM",
    /* MMU_CCP_MEM_XPE2          */ "Copy Count Pool RAM",
    /* MMU_CCP_MEM_XPE3          */ "Copy Count Pool RAM",
    /* MMU_CCP_RELEASE_FIFO      */ "CCP Release FiFo",
    /* MMU_CCP_RESEQ_MEM         */ "This is a working memory maintained by hardware.\nThis memory contains the per port database of RESEQ information for delayed SOP cell return\nThe index to this table are MMU port numbers  as below :\n0-31    : General Ports (Ethernet/HiGig)\n32      : CPU port\n33      : Loopback port\n34-35   : Unused\n36-39   : MMU internal purge ports",
    /* MMU_CCP_RESEQ_MEM_XPE0_PIPE0 */ "This is a working memory maintained by hardware.\nThis memory contains the per port database of RESEQ information for delayed SOP cell return\nThe index to this table are MMU port numbers  as below :\n0-31    : General Ports (Ethernet/HiGig)\n32      : CPU port\n33      : Loopback port\n34-35   : Unused\n36-39   : MMU internal purge ports",
    /* MMU_CCP_RESEQ_MEM_XPE0_PIPE1 */ "This is a working memory maintained by hardware.\nThis memory contains the per port database of RESEQ information for delayed SOP cell return\nThe index to this table are MMU port numbers  as below :\n0-31    : General Ports (Ethernet/HiGig)\n32      : CPU port\n33      : Loopback port\n34-35   : Unused\n36-39   : MMU internal purge ports",
    /* MMU_CCP_RESEQ_MEM_XPE1_PIPE2 */ "This is a working memory maintained by hardware.\nThis memory contains the per port database of RESEQ information for delayed SOP cell return\nThe index to this table are MMU port numbers  as below :\n0-31    : General Ports (Ethernet/HiGig)\n32      : CPU port\n33      : Loopback port\n34-35   : Unused\n36-39   : MMU internal purge ports",
    /* MMU_CCP_RESEQ_MEM_XPE1_PIPE3 */ "This is a working memory maintained by hardware.\nThis memory contains the per port database of RESEQ information for delayed SOP cell return\nThe index to this table are MMU port numbers  as below :\n0-31    : General Ports (Ethernet/HiGig)\n32      : CPU port\n33      : Loopback port\n34-35   : Unused\n36-39   : MMU internal purge ports",
    /* MMU_CCP_RESEQ_MEM_XPE2_PIPE0 */ "This is a working memory maintained by hardware.\nThis memory contains the per port database of RESEQ information for delayed SOP cell return\nThe index to this table are MMU port numbers  as below :\n0-31    : General Ports (Ethernet/HiGig)\n32      : CPU port\n33      : Loopback port\n34-35   : Unused\n36-39   : MMU internal purge ports",
    /* MMU_CCP_RESEQ_MEM_XPE2_PIPE1 */ "This is a working memory maintained by hardware.\nThis memory contains the per port database of RESEQ information for delayed SOP cell return\nThe index to this table are MMU port numbers  as below :\n0-31    : General Ports (Ethernet/HiGig)\n32      : CPU port\n33      : Loopback port\n34-35   : Unused\n36-39   : MMU internal purge ports",
    /* MMU_CCP_RESEQ_MEM_XPE3_PIPE2 */ "This is a working memory maintained by hardware.\nThis memory contains the per port database of RESEQ information for delayed SOP cell return\nThe index to this table are MMU port numbers  as below :\n0-31    : General Ports (Ethernet/HiGig)\n32      : CPU port\n33      : Loopback port\n34-35   : Unused\n36-39   : MMU internal purge ports",
    /* MMU_CCP_RESEQ_MEM_XPE3_PIPE3 */ "This is a working memory maintained by hardware.\nThis memory contains the per port database of RESEQ information for delayed SOP cell return\nThe index to this table are MMU port numbers  as below :\n0-31    : General Ports (Ethernet/HiGig)\n32      : CPU port\n33      : Loopback port\n34-35   : Unused\n36-39   : MMU internal purge ports",
    /* MMU_CELLCHK               */ "Cell CRC Check",
    /* MMU_CELLCHK0              */ "Cell CRC Check",
    /* MMU_CELLCHK1              */ "Cell CRC Check",
    /* MMU_CELLCHK2              */ "Cell CRC Check",
    /* MMU_CELLCHK3              */ "Cell CRC Check",
    /* MMU_CELLLINK              */ "CELLLINK",
    /* MMU_CELLLINKE             */ "CELLLINK Database for External Buffers",
    /* MMU_CELLLINKI             */ "CELLLINK Database for Internal Buffers",
    /* MMU_CELL_LINK             */ "CELL_LINK",
    /* MMU_CELL_LINK_XPE0        */ "Cell link memory.  This is a working FIFO maintained by hardware.",
    /* MMU_CELL_LINK_XPE1        */ "Cell link memory.  This is a working FIFO maintained by hardware.",
    /* MMU_CELL_LINK_XPE2        */ "Cell link memory.  This is a working FIFO maintained by hardware.",
    /* MMU_CELL_LINK_XPE3        */ "Cell link memory.  This is a working FIFO maintained by hardware.",
    /* MMU_CFAP                  */ "CBP Free Address Pool RAM",
    /* MMU_CFAPE_BITMAP          */ "External Free Address Pool Bitmap RAM",
    /* MMU_CFAPE_STACK           */ "Internal Free Address Pool Stack RAM",
    /* MMU_CFAPI0_BITMAP         */ "Internal Free Address Pool Bitmap RAM",
    /* MMU_CFAPI0_STACK          */ "Internal Free Address Pool Stack RAM",
    /* MMU_CFAPI1_BITMAP         */ "External Free Address Pool Bitmap RAM",
    /* MMU_CFAPI1_STACK          */ "Internal Free Address Pool Stack RAM",
    /* MMU_CFAPI_BITMAP          */ "Internal Free Address Pool Bitmap RAM",
    /* MMU_CFAPI_STACK           */ "Internal Free Address Pool Stack RAM",
    /* MMU_CFAP_BANK0            */ "CBP Free Address Pool RAM",
    /* MMU_CFAP_BANK1            */ "CBP Free Address Pool RAM",
    /* MMU_CFAP_BANK2            */ "CBP Free Address Pool RAM",
    /* MMU_CFAP_BANK3            */ "CBP Free Address Pool RAM",
    /* MMU_CFAP_BANK4            */ "CBP Free Address Pool RAM",
    /* MMU_CFAP_BANK5            */ "CBP Free Address Pool RAM",
    /* MMU_CFAP_BANK6            */ "CBP Free Address Pool RAM",
    /* MMU_CFAP_BANK7            */ "CBP Free Address Pool RAM",
    /* MMU_CFAP_BANK8            */ "CBP Free Address Pool RAM",
    /* MMU_CFAP_BANK9            */ "CBP Free Address Pool RAM",
    /* MMU_CFAP_BANK10           */ "CBP Free Address Pool RAM",
    /* MMU_CFAP_BANK11           */ "CBP Free Address Pool RAM",
    /* MMU_CFAP_BANK12           */ "CBP Free Address Pool RAM",
    /* MMU_CFAP_BANK13           */ "CBP Free Address Pool RAM",
    /* MMU_CFAP_BANK14           */ "CBP Free Address Pool RAM",
    /* MMU_CFAP_BANK15           */ "CBP Free Address Pool RAM",
    /* MMU_CFAP_BANK16           */ "CBP Free Address Pool RAM. This memory should not be accessed by SW during normal operation.",
    /* MMU_CFAP_BANK17           */ "CBP Free Address Pool RAM. This memory should not be accessed by SW during normal operation.",
    /* MMU_CFAP_BANK18           */ "CBP Free Address Pool RAM. This memory should not be accessed by SW during normal operation.",
    /* MMU_CFAP_BANK19           */ "CBP Free Address Pool RAM. This memory should not be accessed by SW during normal operation.",
    /* MMU_CFAP_BANK20           */ "CBP Free Address Pool RAM. This memory should not be accessed by SW during normal operation.",
    /* MMU_CFAP_BANK0_XPE0       */ "CBP Free Address Pool RAM. This memory should not be accessed by SW during normal operation.",
    /* MMU_CFAP_BANK0_XPE1       */ "CBP Free Address Pool RAM. This memory should not be accessed by SW during normal operation.",
    /* MMU_CFAP_BANK0_XPE2       */ "CBP Free Address Pool RAM. This memory should not be accessed by SW during normal operation.",
    /* MMU_CFAP_BANK0_XPE3       */ "CBP Free Address Pool RAM. This memory should not be accessed by SW during normal operation.",
    /* MMU_CFAP_BANK10_XPE0      */ "CBP Free Address Pool RAM. This memory should not be accessed by SW during normal operation.",
    /* MMU_CFAP_BANK10_XPE1      */ "CBP Free Address Pool RAM. This memory should not be accessed by SW during normal operation.",
    /* MMU_CFAP_BANK10_XPE2      */ "CBP Free Address Pool RAM. This memory should not be accessed by SW during normal operation.",
    /* MMU_CFAP_BANK10_XPE3      */ "CBP Free Address Pool RAM. This memory should not be accessed by SW during normal operation.",
    /* MMU_CFAP_BANK11_XPE0      */ "CBP Free Address Pool RAM. This memory should not be accessed by SW during normal operation.",
    /* MMU_CFAP_BANK11_XPE1      */ "CBP Free Address Pool RAM. This memory should not be accessed by SW during normal operation.",
    /* MMU_CFAP_BANK11_XPE2      */ "CBP Free Address Pool RAM. This memory should not be accessed by SW during normal operation.",
    /* MMU_CFAP_BANK11_XPE3      */ "CBP Free Address Pool RAM. This memory should not be accessed by SW during normal operation.",
    /* MMU_CFAP_BANK12_XPE0      */ "CBP Free Address Pool RAM. This memory should not be accessed by SW during normal operation.",
    /* MMU_CFAP_BANK12_XPE1      */ "CBP Free Address Pool RAM. This memory should not be accessed by SW during normal operation.",
    /* MMU_CFAP_BANK12_XPE2      */ "CBP Free Address Pool RAM. This memory should not be accessed by SW during normal operation.",
    /* MMU_CFAP_BANK12_XPE3      */ "CBP Free Address Pool RAM. This memory should not be accessed by SW during normal operation.",
    /* MMU_CFAP_BANK13_XPE0      */ "CBP Free Address Pool RAM. This memory should not be accessed by SW during normal operation.",
    /* MMU_CFAP_BANK13_XPE1      */ "CBP Free Address Pool RAM. This memory should not be accessed by SW during normal operation.",
    /* MMU_CFAP_BANK13_XPE2      */ "CBP Free Address Pool RAM. This memory should not be accessed by SW during normal operation.",
    /* MMU_CFAP_BANK13_XPE3      */ "CBP Free Address Pool RAM. This memory should not be accessed by SW during normal operation.",
    /* MMU_CFAP_BANK14_XPE0      */ "CBP Free Address Pool RAM. This memory should not be accessed by SW during normal operation.",
    /* MMU_CFAP_BANK14_XPE1      */ "CBP Free Address Pool RAM. This memory should not be accessed by SW during normal operation.",
    /* MMU_CFAP_BANK14_XPE2      */ "CBP Free Address Pool RAM. This memory should not be accessed by SW during normal operation.",
    /* MMU_CFAP_BANK14_XPE3      */ "CBP Free Address Pool RAM. This memory should not be accessed by SW during normal operation.",
    /* MMU_CFAP_BANK15_XPE0      */ "CBP Free Address Pool RAM. This memory should not be accessed by SW during normal operation.",
    /* MMU_CFAP_BANK15_XPE1      */ "CBP Free Address Pool RAM. This memory should not be accessed by SW during normal operation.",
    /* MMU_CFAP_BANK15_XPE2      */ "CBP Free Address Pool RAM. This memory should not be accessed by SW during normal operation.",
    /* MMU_CFAP_BANK15_XPE3      */ "CBP Free Address Pool RAM. This memory should not be accessed by SW during normal operation.",
    /* MMU_CFAP_BANK16_XPE0      */ "CBP Free Address Pool RAM. This memory should not be accessed by SW during normal operation.",
    /* MMU_CFAP_BANK16_XPE1      */ "CBP Free Address Pool RAM. This memory should not be accessed by SW during normal operation.",
    /* MMU_CFAP_BANK16_XPE2      */ "CBP Free Address Pool RAM. This memory should not be accessed by SW during normal operation.",
    /* MMU_CFAP_BANK16_XPE3      */ "CBP Free Address Pool RAM. This memory should not be accessed by SW during normal operation.",
    /* MMU_CFAP_BANK17_XPE0      */ "CBP Free Address Pool RAM. This memory should not be accessed by SW during normal operation.",
    /* MMU_CFAP_BANK17_XPE1      */ "CBP Free Address Pool RAM. This memory should not be accessed by SW during normal operation.",
    /* MMU_CFAP_BANK17_XPE2      */ "CBP Free Address Pool RAM. This memory should not be accessed by SW during normal operation.",
    /* MMU_CFAP_BANK17_XPE3      */ "CBP Free Address Pool RAM. This memory should not be accessed by SW during normal operation.",
    /* MMU_CFAP_BANK18_XPE0      */ "CBP Free Address Pool RAM. This memory should not be accessed by SW during normal operation.",
    /* MMU_CFAP_BANK18_XPE1      */ "CBP Free Address Pool RAM. This memory should not be accessed by SW during normal operation.",
    /* MMU_CFAP_BANK18_XPE2      */ "CBP Free Address Pool RAM. This memory should not be accessed by SW during normal operation.",
    /* MMU_CFAP_BANK18_XPE3      */ "CBP Free Address Pool RAM. This memory should not be accessed by SW during normal operation.",
    /* MMU_CFAP_BANK1_XPE0       */ "CBP Free Address Pool RAM. This memory should not be accessed by SW during normal operation.",
    /* MMU_CFAP_BANK1_XPE1       */ "CBP Free Address Pool RAM. This memory should not be accessed by SW during normal operation.",
    /* MMU_CFAP_BANK1_XPE2       */ "CBP Free Address Pool RAM. This memory should not be accessed by SW during normal operation.",
    /* MMU_CFAP_BANK1_XPE3       */ "CBP Free Address Pool RAM. This memory should not be accessed by SW during normal operation.",
    /* MMU_CFAP_BANK2_XPE0       */ "CBP Free Address Pool RAM. This memory should not be accessed by SW during normal operation.",
    /* MMU_CFAP_BANK2_XPE1       */ "CBP Free Address Pool RAM. This memory should not be accessed by SW during normal operation.",
    /* MMU_CFAP_BANK2_XPE2       */ "CBP Free Address Pool RAM. This memory should not be accessed by SW during normal operation.",
    /* MMU_CFAP_BANK2_XPE3       */ "CBP Free Address Pool RAM. This memory should not be accessed by SW during normal operation.",
    /* MMU_CFAP_BANK3_XPE0       */ "CBP Free Address Pool RAM. This memory should not be accessed by SW during normal operation.",
    /* MMU_CFAP_BANK3_XPE1       */ "CBP Free Address Pool RAM. This memory should not be accessed by SW during normal operation.",
    /* MMU_CFAP_BANK3_XPE2       */ "CBP Free Address Pool RAM. This memory should not be accessed by SW during normal operation.",
    /* MMU_CFAP_BANK3_XPE3       */ "CBP Free Address Pool RAM. This memory should not be accessed by SW during normal operation.",
    /* MMU_CFAP_BANK4_XPE0       */ "CBP Free Address Pool RAM. This memory should not be accessed by SW during normal operation.",
    /* MMU_CFAP_BANK4_XPE1       */ "CBP Free Address Pool RAM. This memory should not be accessed by SW during normal operation.",
    /* MMU_CFAP_BANK4_XPE2       */ "CBP Free Address Pool RAM. This memory should not be accessed by SW during normal operation.",
    /* MMU_CFAP_BANK4_XPE3       */ "CBP Free Address Pool RAM. This memory should not be accessed by SW during normal operation.",
    /* MMU_CFAP_BANK5_XPE0       */ "CBP Free Address Pool RAM. This memory should not be accessed by SW during normal operation.",
    /* MMU_CFAP_BANK5_XPE1       */ "CBP Free Address Pool RAM. This memory should not be accessed by SW during normal operation.",
    /* MMU_CFAP_BANK5_XPE2       */ "CBP Free Address Pool RAM. This memory should not be accessed by SW during normal operation.",
    /* MMU_CFAP_BANK5_XPE3       */ "CBP Free Address Pool RAM. This memory should not be accessed by SW during normal operation.",
    /* MMU_CFAP_BANK6_XPE0       */ "CBP Free Address Pool RAM. This memory should not be accessed by SW during normal operation.",
    /* MMU_CFAP_BANK6_XPE1       */ "CBP Free Address Pool RAM. This memory should not be accessed by SW during normal operation.",
    /* MMU_CFAP_BANK6_XPE2       */ "CBP Free Address Pool RAM. This memory should not be accessed by SW during normal operation.",
    /* MMU_CFAP_BANK6_XPE3       */ "CBP Free Address Pool RAM. This memory should not be accessed by SW during normal operation.",
    /* MMU_CFAP_BANK7_XPE0       */ "CBP Free Address Pool RAM. This memory should not be accessed by SW during normal operation.",
    /* MMU_CFAP_BANK7_XPE1       */ "CBP Free Address Pool RAM. This memory should not be accessed by SW during normal operation.",
    /* MMU_CFAP_BANK7_XPE2       */ "CBP Free Address Pool RAM. This memory should not be accessed by SW during normal operation.",
    /* MMU_CFAP_BANK7_XPE3       */ "CBP Free Address Pool RAM. This memory should not be accessed by SW during normal operation.",
    /* MMU_CFAP_BANK8_XPE0       */ "CBP Free Address Pool RAM. This memory should not be accessed by SW during normal operation.",
    /* MMU_CFAP_BANK8_XPE1       */ "CBP Free Address Pool RAM. This memory should not be accessed by SW during normal operation.",
    /* MMU_CFAP_BANK8_XPE2       */ "CBP Free Address Pool RAM. This memory should not be accessed by SW during normal operation.",
    /* MMU_CFAP_BANK8_XPE3       */ "CBP Free Address Pool RAM. This memory should not be accessed by SW during normal operation.",
    /* MMU_CFAP_BANK9_XPE0       */ "CBP Free Address Pool RAM. This memory should not be accessed by SW during normal operation.",
    /* MMU_CFAP_BANK9_XPE1       */ "CBP Free Address Pool RAM. This memory should not be accessed by SW during normal operation.",
    /* MMU_CFAP_BANK9_XPE2       */ "CBP Free Address Pool RAM. This memory should not be accessed by SW during normal operation.",
    /* MMU_CFAP_BANK9_XPE3       */ "CBP Free Address Pool RAM. This memory should not be accessed by SW during normal operation.",
    /* MMU_CFAP_MEM              */ "CBP Free Address Pool RAM",
    /* MMU_CHFC_SYSPORT_MAPPING  */ "Mapping from channel Flow Control Byte number to System port number",
    /* MMU_CPQLINK               */ "CPQLINK",
    /* MMU_CTR_COLOR_DROP_MEM    */ "Unicast WRED Color drop counter ,and\nUnicast/Multicast Color drop counter.\n0x0   -  0x41 :  Port0 - Port65 Unicast WRED Red Color drop count\n0x42  -  0x83 :  Port0 - Port65 Unicast WRED Yellow Color drop count\n0x84  -  0xC5 :  Port0 - Port65 Unicast WRED Greeen Color drop count\n0xC6  -  0x107:  Port0 - Port65 Red Color drop count\n0x108 -  0x149:  Port0 - Port65 Yellow Color drop count\n--\n|0x0\n|   Unicast WRED Red Drop CNT\n|\n--\n|0x42\n|   Unicast WRED Yellow Drop CNT\n|\n-\n|0x84\n|   Unicast WRED Gre ...",
    /* MMU_CTR_COLOR_DROP_MEM_XPE0 */ "MMU Color Drop Counter Memory:\nUnicast WRED Color drop counter and Unicast/Multicast Color drop counter.\n  0x0   -  0x21 :  Port0  - Port33 Unicast WRED Red Color drop count\n  0x22  -  0x43 :  Port64 - Port97 Unicast WRED Red Color drop count\n  0x44  -  0x65 :  Port0  - Port33 Unicast WRED Yellow Color drop count\n  0x66  -  0x87 :  Port64 - Port97 Unicast WRED Yellow Color drop count\n  0x88  -  0xA9 :  Port0  - Port33 Unicast WRED Green Color drop count\n  0xAA  -  0xCB :  Port64 - Port97 Unicast ...",
    /* MMU_CTR_COLOR_DROP_MEM_XPE1 */ "MMU Color Drop Counter Memory:\nUnicast WRED Color drop counter and Unicast/Multicast Color drop counter.\n  0x0   -  0x21 :  Port0  - Port33 Unicast WRED Red Color drop count\n  0x22  -  0x43 :  Port64 - Port97 Unicast WRED Red Color drop count\n  0x44  -  0x65 :  Port0  - Port33 Unicast WRED Yellow Color drop count\n  0x66  -  0x87 :  Port64 - Port97 Unicast WRED Yellow Color drop count\n  0x88  -  0xA9 :  Port0  - Port33 Unicast WRED Green Color drop count\n  0xAA  -  0xCB :  Port64 - Port97 Unicast ...",
    /* MMU_CTR_COLOR_DROP_MEM_XPE2 */ "MMU Color Drop Counter Memory:\nUnicast WRED Color drop counter and Unicast/Multicast Color drop counter.\n  0x0   -  0x21 :  Port0  - Port33 Unicast WRED Red Color drop count\n  0x22  -  0x43 :  Port64 - Port97 Unicast WRED Red Color drop count\n  0x44  -  0x65 :  Port0  - Port33 Unicast WRED Yellow Color drop count\n  0x66  -  0x87 :  Port64 - Port97 Unicast WRED Yellow Color drop count\n  0x88  -  0xA9 :  Port0  - Port33 Unicast WRED Green Color drop count\n  0xAA  -  0xCB :  Port64 - Port97 Unicast ...",
    /* MMU_CTR_COLOR_DROP_MEM_XPE3 */ "MMU Color Drop Counter Memory:\nUnicast WRED Color drop counter and Unicast/Multicast Color drop counter.\n  0x0   -  0x21 :  Port0  - Port33 Unicast WRED Red Color drop count\n  0x22  -  0x43 :  Port64 - Port97 Unicast WRED Red Color drop count\n  0x44  -  0x65 :  Port0  - Port33 Unicast WRED Yellow Color drop count\n  0x66  -  0x87 :  Port64 - Port97 Unicast WRED Yellow Color drop count\n  0x88  -  0xA9 :  Port0  - Port33 Unicast WRED Green Color drop count\n  0xAA  -  0xCB :  Port64 - Port97 Unicast ...",
    /* MMU_CTR_COLOR_DROP_MEM_XPE0_PIPE0 */ "MMU Color Drop Counter Memory:\nUnicast WRED Color drop counter and Unicast/Multicast Color drop counter.\n  0x0   -  0x21 :  Port0  - Port33 Unicast WRED Red Color drop count\n  0x22  -  0x43 :  Port0  - Port33 Unicast WRED Yellow Color drop count\n  0x44  -  0x65 :  Port0  - Port33 Unicast WRED Green Color drop count\n  0x66  -  0x87 :  Port0  - Port33 Red Color drop count\n  0x88  -  0xA9 :  Port0  - Port33 Yellow Color drop count",
    /* MMU_CTR_COLOR_DROP_MEM_XPE0_PIPE1 */ "MMU Color Drop Counter Memory:\nUnicast WRED Color drop counter and Unicast/Multicast Color drop counter.\n  0x0   -  0x21 :  Port0  - Port33 Unicast WRED Red Color drop count\n  0x22  -  0x43 :  Port0  - Port33 Unicast WRED Yellow Color drop count\n  0x44  -  0x65 :  Port0  - Port33 Unicast WRED Green Color drop count\n  0x66  -  0x87 :  Port0  - Port33 Red Color drop count\n  0x88  -  0xA9 :  Port0  - Port33 Yellow Color drop count",
    /* MMU_CTR_COLOR_DROP_MEM_XPE1_PIPE2 */ "MMU Color Drop Counter Memory:\nUnicast WRED Color drop counter and Unicast/Multicast Color drop counter.\n  0x0   -  0x21 :  Port0  - Port33 Unicast WRED Red Color drop count\n  0x22  -  0x43 :  Port0  - Port33 Unicast WRED Yellow Color drop count\n  0x44  -  0x65 :  Port0  - Port33 Unicast WRED Green Color drop count\n  0x66  -  0x87 :  Port0  - Port33 Red Color drop count\n  0x88  -  0xA9 :  Port0  - Port33 Yellow Color drop count",
    /* MMU_CTR_COLOR_DROP_MEM_XPE1_PIPE3 */ "MMU Color Drop Counter Memory:\nUnicast WRED Color drop counter and Unicast/Multicast Color drop counter.\n  0x0   -  0x21 :  Port0  - Port33 Unicast WRED Red Color drop count\n  0x22  -  0x43 :  Port0  - Port33 Unicast WRED Yellow Color drop count\n  0x44  -  0x65 :  Port0  - Port33 Unicast WRED Green Color drop count\n  0x66  -  0x87 :  Port0  - Port33 Red Color drop count\n  0x88  -  0xA9 :  Port0  - Port33 Yellow Color drop count",
    /* MMU_CTR_COLOR_DROP_MEM_XPE2_PIPE0 */ "MMU Color Drop Counter Memory:\nUnicast WRED Color drop counter and Unicast/Multicast Color drop counter.\n  0x0   -  0x21 :  Port0  - Port33 Unicast WRED Red Color drop count\n  0x22  -  0x43 :  Port0  - Port33 Unicast WRED Yellow Color drop count\n  0x44  -  0x65 :  Port0  - Port33 Unicast WRED Green Color drop count\n  0x66  -  0x87 :  Port0  - Port33 Red Color drop count\n  0x88  -  0xA9 :  Port0  - Port33 Yellow Color drop count",
    /* MMU_CTR_COLOR_DROP_MEM_XPE2_PIPE1 */ "MMU Color Drop Counter Memory:\nUnicast WRED Color drop counter and Unicast/Multicast Color drop counter.\n  0x0   -  0x21 :  Port0  - Port33 Unicast WRED Red Color drop count\n  0x22  -  0x43 :  Port0  - Port33 Unicast WRED Yellow Color drop count\n  0x44  -  0x65 :  Port0  - Port33 Unicast WRED Green Color drop count\n  0x66  -  0x87 :  Port0  - Port33 Red Color drop count\n  0x88  -  0xA9 :  Port0  - Port33 Yellow Color drop count",
    /* MMU_CTR_COLOR_DROP_MEM_XPE3_PIPE2 */ "MMU Color Drop Counter Memory:\nUnicast WRED Color drop counter and Unicast/Multicast Color drop counter.\n  0x0   -  0x21 :  Port0  - Port33 Unicast WRED Red Color drop count\n  0x22  -  0x43 :  Port0  - Port33 Unicast WRED Yellow Color drop count\n  0x44  -  0x65 :  Port0  - Port33 Unicast WRED Green Color drop count\n  0x66  -  0x87 :  Port0  - Port33 Red Color drop count\n  0x88  -  0xA9 :  Port0  - Port33 Yellow Color drop count",
    /* MMU_CTR_COLOR_DROP_MEM_XPE3_PIPE3 */ "MMU Color Drop Counter Memory:\nUnicast WRED Color drop counter and Unicast/Multicast Color drop counter.\n  0x0   -  0x21 :  Port0  - Port33 Unicast WRED Red Color drop count\n  0x22  -  0x43 :  Port0  - Port33 Unicast WRED Yellow Color drop count\n  0x44  -  0x65 :  Port0  - Port33 Unicast WRED Green Color drop count\n  0x66  -  0x87 :  Port0  - Port33 Red Color drop count\n  0x88  -  0xA9 :  Port0  - Port33 Yellow Color drop count",
    /* MMU_CTR_ING_DROP_MEM      */ "Per ingress port drop counter, due to THDI  drop.\nentries 0 - 52    :   PIPEx Ingress port 0  - 52\nentries 64 - 116  :   PIPEy Ingress port 64 - 116",
    /* MMU_CTR_ING_DROP_MEM_XPE0_PIPE0 */ "Per ingress port drop counter, due to THDI  drop. (XPE0)\n  Entries 0 - 33   : XPE 0 PIPE 0 Ingress port 0  - 33",
    /* MMU_CTR_ING_DROP_MEM_XPE0_PIPE3 */ "Per ingress port drop counter, due to THDI  drop. (XPE0)\n  Entries 0 - 33   : XPE 0 PIPE 3 Ingress port 0  - 33",
    /* MMU_CTR_ING_DROP_MEM_XPE1_PIPE0 */ "Per ingress port drop counter, due to THDI  drop. (XPE1)\n  Entries 0 - 33   : XPE 1 PIPE 0 Ingress port 0  - 33",
    /* MMU_CTR_ING_DROP_MEM_XPE1_PIPE3 */ "Per ingress port drop counter, due to THDI  drop. (XPE1)\n  Entries 0 - 33   : XPE 1 PIPE 3 Ingress port 0  - 33",
    /* MMU_CTR_ING_DROP_MEM_XPE2_PIPE1 */ "Per ingress port drop counter, due to THDI  drop. (XPE2)\n  Entries 0 - 33   : XPE 2 PIPE 1 Ingress port 0  - 33",
    /* MMU_CTR_ING_DROP_MEM_XPE2_PIPE2 */ "Per ingress port drop counter, due to THDI  drop. (XPE2)\n  Entries 0 - 33   : XPE 2 PIPE 2 Ingress port 0  - 33",
    /* MMU_CTR_ING_DROP_MEM_XPE3_PIPE1 */ "Per ingress port drop counter, due to THDI  drop. (XPE3)\n  Entries 0 - 33   : XPE 3 PIPE 1 Ingress port 0  - 33",
    /* MMU_CTR_ING_DROP_MEM_XPE3_PIPE2 */ "Per ingress port drop counter, due to THDI  drop. (XPE3)\n  Entries 0 - 33   : XPE 3 PIPE 2 Ingress port 0  - 33",
    /* MMU_CTR_MC_DROP_MEM       */ "Unicast drop counter mmeory.\nPORT0 - has 48 entries, map to CPU_COS0 - CPU_COS47\nPORT1 - PORT65 have 5 entries per port: 0-4 map to COS0-COS4;\nPort0:  0x0   <= addr <= 0x2F    48 entries\nPort1:  0x30  <= addr <= 0x34    10 entries\nPort2:  0x35  <= addr <= 0x39    10 entries\n...                              10 entries\nport65: 0x170 <= addr <= 0x174   10 entries",
    /* MMU_CTR_MC_DROP_MEM0      */ "Multicast drop counter mmeory for PIPEx.\nPORT0  - PORT51  : 10 entries each port: 0 - 519\nPORT52 (CPU Port): 48 entries : 520-567",
    /* MMU_CTR_MC_DROP_MEM1      */ "Multicast drop counter mmeory for PIPEx.\nPORT64  - PORT115 : 10 entries per port : 0 - 519\nport116 (loopback port)  : 8 entries    : 520 - 527",
    /* MMU_CTR_MC_DROP_MEM_XPE0_PIPE0 */ "MMU Multicast Counter Drop Memory:\n  PORT0  - PORT31  : 10 entries each port: 0 - 319\n  PORT32 (LBP):      10 entries : 320 - 329\n  PORT33 (CPU Port): 48 entries : 330-377",
    /* MMU_CTR_MC_DROP_MEM_XPE0_PIPE1 */ "MMU Multicast Counter Drop Memory:\n  PORT0  - PORT31  : 10 entries each port: 0 - 319\n  PORT32 (LBP):      10 entries : 320 - 329\n  PORT33 (CPU Port): 48 entries : 330-377",
    /* MMU_CTR_MC_DROP_MEM_XPE1_PIPE2 */ "MMU Multicast Counter Drop Memory:\n  PORT0  - PORT31  : 10 entries each port: 0 - 319\n  PORT32 (LBP):      10 entries : 320 - 329\n  PORT33 (CPU Port): 48 entries : 330-377",
    /* MMU_CTR_MC_DROP_MEM_XPE1_PIPE3 */ "MMU Multicast Counter Drop Memory:\n  PORT0  - PORT31  : 10 entries each port: 0 - 319\n  PORT32 (LBP):      10 entries : 320 - 329\n  PORT33 (CPU Port): 48 entries : 330-377",
    /* MMU_CTR_MC_DROP_MEM_XPE2_PIPE0 */ "MMU Multicast Counter Drop Memory:\n  PORT0  - PORT31  : 10 entries each port: 0 - 319\n  PORT32 (LBP):      10 entries : 320 - 329\n  PORT33 (CPU Port): 48 entries : 330-377",
    /* MMU_CTR_MC_DROP_MEM_XPE2_PIPE1 */ "MMU Multicast Counter Drop Memory:\n  PORT0  - PORT31  : 10 entries each port: 0 - 319\n  PORT32 (LBP):      10 entries : 320 - 329\n  PORT33 (CPU Port): 48 entries : 330-377",
    /* MMU_CTR_MC_DROP_MEM_XPE3_PIPE2 */ "MMU Multicast Counter Drop Memory:\n  PORT0  - PORT31  : 10 entries each port: 0 - 319\n  PORT32 (LBP):      10 entries : 320 - 329\n  PORT33 (CPU Port): 48 entries : 330-377",
    /* MMU_CTR_MC_DROP_MEM_XPE3_PIPE3 */ "MMU Multicast Counter Drop Memory:\n  PORT0  - PORT31  : 10 entries each port: 0 - 319\n  PORT32 (LBP):      10 entries : 320 - 329\n  PORT33 (CPU Port): 48 entries : 330-377",
    /* MMU_CTR_MTRI_DROP_MEM     */ "Per ingress port drop counter, due to MTRI drop ONLY.\nentries 0 - 52    :   PIPEx Ingress port 0  - 52\nentries 64 - 116  :   PIPEy Ingress port 64 - 116",
    /* MMU_CTR_UC_DROP_MEM       */ "Unicast drop counter mmeory.\nDrop Counters for MMU PORT1 - PORT32,PORT34 - PORT65.\nDrop Counters for CPU & LBP port are in \"MMU_CTR_MC_DROP_MEM\"\nPORT1  - PORT4 have  74 entries per port: 64-73 map to COS0-COS9, 0-63 map to VOQ 64-127\nPORT34 - PORT37 have 74 entries per port: 64-73 map to COS0-COS9, 0-63 map to VOQ 64-127\nPORT5  - PORT32 have 10 entries per port: 0-9 map to COS0-COS9.\nPORT38 - PORT65 have 10 entries per port: 0-9 map to COS0-COS9.\nPort1:  0x0   <= addr <= 0x49    74 entries\nPort2 ...",
    /* MMU_CTR_UC_DROP_MEM_XPE0_PIPE0 */ "MMU Unicast Counter Drop Memory\n  PORT0  - PORT31    : 10 entries each port: 0 - 319\n  PORT32 (MANAGEMENT): 10 entries : 320 - 329",
    /* MMU_CTR_UC_DROP_MEM_XPE0_PIPE1 */ "MMU Unicast Counter Drop Memory\n  PORT0  - PORT31    : 10 entries each port: 0 - 319\n  PORT32 (MANAGEMENT): 10 entries : 320 - 329",
    /* MMU_CTR_UC_DROP_MEM_XPE1_PIPE2 */ "MMU Unicast Counter Drop Memory\n  PORT0  - PORT31    : 10 entries each port: 0 - 319\n  PORT32 (MANAGEMENT): 10 entries : 320 - 329",
    /* MMU_CTR_UC_DROP_MEM_XPE1_PIPE3 */ "MMU Unicast Counter Drop Memory\n  PORT0  - PORT31    : 10 entries each port: 0 - 319\n  PORT32 (MANAGEMENT): 10 entries : 320 - 329",
    /* MMU_CTR_UC_DROP_MEM_XPE2_PIPE0 */ "MMU Unicast Counter Drop Memory\n  PORT0  - PORT31    : 10 entries each port: 0 - 319\n  PORT32 (MANAGEMENT): 10 entries : 320 - 329",
    /* MMU_CTR_UC_DROP_MEM_XPE2_PIPE1 */ "MMU Unicast Counter Drop Memory\n  PORT0  - PORT31    : 10 entries each port: 0 - 319\n  PORT32 (MANAGEMENT): 10 entries : 320 - 329",
    /* MMU_CTR_UC_DROP_MEM_XPE3_PIPE2 */ "MMU Unicast Counter Drop Memory\n  PORT0  - PORT31    : 10 entries each port: 0 - 319\n  PORT32 (MANAGEMENT): 10 entries : 320 - 329",
    /* MMU_CTR_UC_DROP_MEM_XPE3_PIPE3 */ "MMU Unicast Counter Drop Memory\n  PORT0  - PORT31    : 10 entries each port: 0 - 319\n  PORT32 (MANAGEMENT): 10 entries : 320 - 329",
    /* MMU_CTR_WRED_DROP_MEM     */ "MMU WRED Drop Memory",
    /* MMU_CTR_WRED_DROP_MEM_XPE0_PIPE0 */ "MMU WRED Drop Memory",
    /* MMU_CTR_WRED_DROP_MEM_XPE0_PIPE1 */ "MMU WRED Drop Memory",
    /* MMU_CTR_WRED_DROP_MEM_XPE1_PIPE2 */ "MMU WRED Drop Memory",
    /* MMU_CTR_WRED_DROP_MEM_XPE1_PIPE3 */ "MMU WRED Drop Memory",
    /* MMU_CTR_WRED_DROP_MEM_XPE2_PIPE0 */ "MMU WRED Drop Memory",
    /* MMU_CTR_WRED_DROP_MEM_XPE2_PIPE1 */ "MMU WRED Drop Memory",
    /* MMU_CTR_WRED_DROP_MEM_XPE3_PIPE2 */ "MMU WRED Drop Memory",
    /* MMU_CTR_WRED_DROP_MEM_XPE3_PIPE3 */ "MMU WRED Drop Memory",
    /* MMU_DEQ_AGING_MASK_LOOKUP_TABLE_MEM */ "Aging Mask Memory, Address Range 0 to 63, RAM Instance 0",
    /* MMU_DEQ_RDE_DESCP_MEM     */ "Redirect Descriptor RAM",
    /* MMU_DRAM_ADDRESS_SPACE    */ "Data written to /read from the external DRAM.\n                   Address should be calculated in the following manner:\n                   row (X bits), column (X bits), dram number (3 bits), bank number (3 bits)\n                   Address should be calculated in the following manner:\n                   If DRAM has 8 column bits (256 Columns), mapping is:\n                   row 13:0,column7:4,dram_i/f2:0,bank2:0\n                   If DRAM has 9 column bits (512 Columns), mapping is:\n              ...",
    /* MMU_ENQS_CT_FIFO          */ "Per port ASF Cell FIFO",
    /* MMU_ENQS_CT_FIFO_PIPE0    */ "Per port ASF Cell FIFO",
    /* MMU_ENQS_CT_FIFO_PIPE1    */ "Per port ASF Cell FIFO",
    /* MMU_ENQS_CT_FIFO_PIPE2    */ "Per port ASF Cell FIFO",
    /* MMU_ENQS_CT_FIFO_PIPE3    */ "Per port ASF Cell FIFO",
    /* MMU_ENQS_PBI_DB           */ "ENQS memory for storage of PBI information at SOP.  This is a working memory maintained by hardware.",
    /* MMU_ENQS_PBI_DB_SC0_PIPE0 */ "ENQS memory for storage of PBI information at SOP.  This is a working memory maintained by hardware.",
    /* MMU_ENQS_PBI_DB_SC0_PIPE1 */ "ENQS memory for storage of PBI information at SOP.  This is a working memory maintained by hardware.",
    /* MMU_ENQS_PBI_DB_SC0_PIPE2 */ "ENQS memory for storage of PBI information at SOP.  This is a working memory maintained by hardware.",
    /* MMU_ENQS_PBI_DB_SC0_PIPE3 */ "ENQS memory for storage of PBI information at SOP.  This is a working memory maintained by hardware.",
    /* MMU_ENQS_PBI_DB_SC1_PIPE0 */ "ENQS memory for storage of PBI information at SOP.  This is a working memory maintained by hardware.",
    /* MMU_ENQS_PBI_DB_SC1_PIPE1 */ "ENQS memory for storage of PBI information at SOP.  This is a working memory maintained by hardware.",
    /* MMU_ENQS_PBI_DB_SC1_PIPE2 */ "ENQS memory for storage of PBI information at SOP.  This is a working memory maintained by hardware.",
    /* MMU_ENQS_PBI_DB_SC1_PIPE3 */ "ENQS memory for storage of PBI information at SOP.  This is a working memory maintained by hardware.",
    /* MMU_ENQS_PBI_DB_SED0_PIPE0 */ "ENQS memory for storage of PBI information at SOP.  This is a working memory maintained by hardware.",
    /* MMU_ENQS_PBI_DB_SED0_PIPE1 */ "ENQS memory for storage of PBI information at SOP.  This is a working memory maintained by hardware.",
    /* MMU_ENQS_PBI_DB_SED0_PIPE2 */ "ENQS memory for storage of PBI information at SOP.  This is a working memory maintained by hardware.",
    /* MMU_ENQS_PBI_DB_SED0_PIPE3 */ "ENQS memory for storage of PBI information at SOP.  This is a working memory maintained by hardware.",
    /* MMU_ENQS_PBI_DB_SED1_PIPE0 */ "ENQS memory for storage of PBI information at SOP.  This is a working memory maintained by hardware.",
    /* MMU_ENQS_PBI_DB_SED1_PIPE1 */ "ENQS memory for storage of PBI information at SOP.  This is a working memory maintained by hardware.",
    /* MMU_ENQS_PBI_DB_SED1_PIPE2 */ "ENQS memory for storage of PBI information at SOP.  This is a working memory maintained by hardware.",
    /* MMU_ENQS_PBI_DB_SED1_PIPE3 */ "ENQS memory for storage of PBI information at SOP.  This is a working memory maintained by hardware.",
    /* MMU_ENQX_EARLY_PIPEMEM_HI */ "Pipeline memory for early stages of ENQX pipeline high word",
    /* MMU_ENQX_EARLY_PIPEMEM_HI_XPE0_PIPE0 */ "Pipeline memory for early stages of ENQX pipeline high word",
    /* MMU_ENQX_EARLY_PIPEMEM_HI_XPE0_PIPE3 */ "Pipeline memory for early stages of ENQX pipeline high word",
    /* MMU_ENQX_EARLY_PIPEMEM_HI_XPE1_PIPE0 */ "Pipeline memory for early stages of ENQX pipeline high word",
    /* MMU_ENQX_EARLY_PIPEMEM_HI_XPE1_PIPE3 */ "Pipeline memory for early stages of ENQX pipeline high word",
    /* MMU_ENQX_EARLY_PIPEMEM_HI_XPE2_PIPE1 */ "Pipeline memory for early stages of ENQX pipeline high word",
    /* MMU_ENQX_EARLY_PIPEMEM_HI_XPE2_PIPE2 */ "Pipeline memory for early stages of ENQX pipeline high word",
    /* MMU_ENQX_EARLY_PIPEMEM_HI_XPE3_PIPE1 */ "Pipeline memory for early stages of ENQX pipeline high word",
    /* MMU_ENQX_EARLY_PIPEMEM_HI_XPE3_PIPE2 */ "Pipeline memory for early stages of ENQX pipeline high word",
    /* MMU_ENQX_EARLY_PIPEMEM_LO */ "Pipeline memory for early stages of ENQX pipeline low word",
    /* MMU_ENQX_EARLY_PIPEMEM_LO_XPE0_PIPE0 */ "Pipeline memory for early stages of ENQX pipeline low word",
    /* MMU_ENQX_EARLY_PIPEMEM_LO_XPE0_PIPE3 */ "Pipeline memory for early stages of ENQX pipeline low word",
    /* MMU_ENQX_EARLY_PIPEMEM_LO_XPE1_PIPE0 */ "Pipeline memory for early stages of ENQX pipeline low word",
    /* MMU_ENQX_EARLY_PIPEMEM_LO_XPE1_PIPE3 */ "Pipeline memory for early stages of ENQX pipeline low word",
    /* MMU_ENQX_EARLY_PIPEMEM_LO_XPE2_PIPE1 */ "Pipeline memory for early stages of ENQX pipeline low word",
    /* MMU_ENQX_EARLY_PIPEMEM_LO_XPE2_PIPE2 */ "Pipeline memory for early stages of ENQX pipeline low word",
    /* MMU_ENQX_EARLY_PIPEMEM_LO_XPE3_PIPE1 */ "Pipeline memory for early stages of ENQX pipeline low word",
    /* MMU_ENQX_EARLY_PIPEMEM_LO_XPE3_PIPE2 */ "Pipeline memory for early stages of ENQX pipeline low word",
    /* MMU_ENQX_PIPEMEM_HI       */ "Pipeline memory for Packet header and RQE data waiting for remote THDO drop, high word",
    /* MMU_ENQX_PIPEMEM_HI_XPE0_PIPE0 */ "Pipeline memory for Packet header and RQE data waiting for remote THDO drop, high word",
    /* MMU_ENQX_PIPEMEM_HI_XPE0_PIPE3 */ "Pipeline memory for Packet header and RQE data waiting for remote THDO drop, high word",
    /* MMU_ENQX_PIPEMEM_HI_XPE1_PIPE0 */ "Pipeline memory for Packet header and RQE data waiting for remote THDO drop, high word",
    /* MMU_ENQX_PIPEMEM_HI_XPE1_PIPE3 */ "Pipeline memory for Packet header and RQE data waiting for remote THDO drop, high word",
    /* MMU_ENQX_PIPEMEM_HI_XPE2_PIPE1 */ "Pipeline memory for Packet header and RQE data waiting for remote THDO drop, high word",
    /* MMU_ENQX_PIPEMEM_HI_XPE2_PIPE2 */ "Pipeline memory for Packet header and RQE data waiting for remote THDO drop, high word",
    /* MMU_ENQX_PIPEMEM_HI_XPE3_PIPE1 */ "Pipeline memory for Packet header and RQE data waiting for remote THDO drop, high word",
    /* MMU_ENQX_PIPEMEM_HI_XPE3_PIPE2 */ "Pipeline memory for Packet header and RQE data waiting for remote THDO drop, high word",
    /* MMU_ENQX_PIPEMEM_LO       */ "Pipeline memory for Packet header and RQE data waiting for remote THDO drop, low word",
    /* MMU_ENQX_PIPEMEM_LO_XPE0_PIPE0 */ "Pipeline memory for Packet header and RQE data waiting for remote THDO drop, low word",
    /* MMU_ENQX_PIPEMEM_LO_XPE0_PIPE3 */ "Pipeline memory for Packet header and RQE data waiting for remote THDO drop, low word",
    /* MMU_ENQX_PIPEMEM_LO_XPE1_PIPE0 */ "Pipeline memory for Packet header and RQE data waiting for remote THDO drop, low word",
    /* MMU_ENQX_PIPEMEM_LO_XPE1_PIPE3 */ "Pipeline memory for Packet header and RQE data waiting for remote THDO drop, low word",
    /* MMU_ENQX_PIPEMEM_LO_XPE2_PIPE1 */ "Pipeline memory for Packet header and RQE data waiting for remote THDO drop, low word",
    /* MMU_ENQX_PIPEMEM_LO_XPE2_PIPE2 */ "Pipeline memory for Packet header and RQE data waiting for remote THDO drop, low word",
    /* MMU_ENQX_PIPEMEM_LO_XPE3_PIPE1 */ "Pipeline memory for Packet header and RQE data waiting for remote THDO drop, low word",
    /* MMU_ENQX_PIPEMEM_LO_XPE3_PIPE2 */ "Pipeline memory for Packet header and RQE data waiting for remote THDO drop, low word",
    /* MMU_ENQ_CBP_32B_WR_STORE_0 */ "Temporary store of SOP/EOP data - CPU readable only",
    /* MMU_ENQ_CBP_32B_WR_STORE_1 */ "Temporary store of SOP/EOP data - CPU readable only",
    /* MMU_ENQ_CBP_32B_WR_STORE_2 */ "Temporary store of SOP/EOP data - CPU readable only",
    /* MMU_ENQ_CFAPI_INTERNAL_RECYCLE */ "Internal Pointer Cache",
    /* MMU_ENQ_FAP_BITMAP        */ "ENQ FAP BITMAP",
    /* MMU_ENQ_FAP_STACK         */ "ENQ FAP STACK",
    /* MMU_ENQ_PACKING_CTXT_FIFOS_FP_LL */ "ENQ PAcking per Ctxt Reasembly FIFOs Free Pool and Linked List",
    /* MMU_ENQ_PBI_DB            */ "ENQ memory for storage of PBI information at SOP.",
    /* MMU_ENQ_RQE_WR_COMPLETE_0 */ "Write complete information needed for write complete message to TOQ and/or RQE",
    /* MMU_ENQ_RQE_WR_COMPLETE_1 */ "Write complete information needed for write complete message to TOQ and/or RQE",
    /* MMU_ENQ_RQE_WR_COMPLETE_2 */ "Write complete information needed for write complete message to TOQ and/or RQE",
    /* MMU_ENQ_RQE_WR_COMPLETE_3 */ "Write complete information needed for write complete message to TOQ and/or RQE",
    /* MMU_ENQ_RQE_WR_COMPLETE_4 */ "Write complete information needed for write complete message to TOQ and/or RQE",
    /* MMU_ENQ_RQE_WR_COMPLETE_5 */ "Write complete information needed for write complete message to TOQ and/or RQE",
    /* MMU_ENQ_SRC_PORT_STATE_0  */ "ENQ SRC PORT STATE 0",
    /* MMU_ENQ_SRC_PORT_STATE_1  */ "ENQ SRC PORT STATE 1",
    /* MMU_ENQ_SRC_PORT_STATE_2  */ "ENQ SRC PORT STATE 2",
    /* MMU_ENQ_SRC_PPP_TO_S1_LOOKUP */ "MPB.SRC_PPP to Destination Channel lookup for COE Pause Frames",
    /* MMU_EPRG_MEM              */ "Egress purge queue memory",
    /* MMU_EPRG_MEM_XPE0         */ "Egress purge queue memory",
    /* MMU_EPRG_MEM_XPE1         */ "Egress purge queue memory",
    /* MMU_EPRG_MEM_XPE2         */ "Egress purge queue memory",
    /* MMU_EPRG_MEM_XPE3         */ "Egress purge queue memory",
    /* MMU_EXT_MC_GROUP_MAP      */ "Extended MC group mapping table",
    /* MMU_EXT_MC_QUEUE_LIST0    */ "Extended MC group mapping table",
    /* MMU_EXT_MC_QUEUE_LIST1    */ "Extended MC group mapping table",
    /* MMU_EXT_MC_QUEUE_LIST4    */ "Extended MC group mapping table",
    /* MMU_FDF                   */ "FDF Indirect Mechanism.",
    /* MMU_GATE_CTL_TBL0_P2      */ "TAS control list table",
    /* MMU_GATE_CTL_TBL0_P3      */ "TAS control list table",
    /* MMU_GATE_CTL_TBL0_P4      */ "TAS control list table",
    /* MMU_GATE_CTL_TBL0_P5      */ "TAS control list table",
    /* MMU_GATE_CTL_TBL0_P6      */ "TAS control list table",
    /* MMU_GATE_CTL_TBL0_P7      */ "TAS control list table",
    /* MMU_GATE_CTL_TBL0_P8      */ "TAS control list table",
    /* MMU_GATE_CTL_TBL0_P9      */ "TAS control list table",
    /* MMU_GATE_CTL_TBL0_P10     */ "TAS control list table",
    /* MMU_GATE_CTL_TBL0_P11     */ "TAS control list table",
    /* MMU_GATE_CTL_TBL0_P12     */ "TAS control list table",
    /* MMU_GATE_CTL_TBL0_P13     */ "TAS control list table",
    /* MMU_GATE_CTL_TBL0_P14     */ "TAS control list table",
    /* MMU_GATE_CTL_TBL0_P15     */ "TAS control list table",
    /* MMU_GATE_CTL_TBL0_P16     */ "TAS control list table",
    /* MMU_GATE_CTL_TBL0_P17     */ "TAS control list table",
    /* MMU_GATE_CTL_TBL0_P18     */ "TAS control list table",
    /* MMU_GATE_CTL_TBL0_P19     */ "TAS control list table",
    /* MMU_GATE_CTL_TBL0_P20     */ "TAS control list table",
    /* MMU_GATE_CTL_TBL0_P21     */ "TAS control list table",
    /* MMU_GATE_CTL_TBL0_P22     */ "TAS control list table",
    /* MMU_GATE_CTL_TBL0_P23     */ "TAS control list table",
    /* MMU_GATE_CTL_TBL0_P24     */ "TAS control list table",
    /* MMU_GATE_CTL_TBL0_P25     */ "TAS control list table",
    /* MMU_GATE_CTL_TBL0_P26     */ "TAS control list table",
    /* MMU_GATE_CTL_TBL0_P27     */ "TAS control list table",
    /* MMU_GATE_CTL_TBL0_P28     */ "TAS control list table",
    /* MMU_GATE_CTL_TBL0_P29     */ "TAS control list table",
    /* MMU_GATE_CTL_TBL0_P30     */ "TAS control list table",
    /* MMU_GATE_CTL_TBL0_P31     */ "TAS control list table",
    /* MMU_GATE_CTL_TBL0_P32     */ "TAS control list table",
    /* MMU_GATE_CTL_TBL0_P33     */ "TAS control list table",
    /* MMU_GATE_CTL_TBL0_P34     */ "TAS control list table",
    /* MMU_GATE_CTL_TBL0_P35     */ "TAS control list table",
    /* MMU_GATE_CTL_TBL0_P36     */ "TAS control list table",
    /* MMU_GATE_CTL_TBL0_P37     */ "TAS control list table",
    /* MMU_GATE_CTL_TBL0_P38     */ "TAS control list table",
    /* MMU_GATE_CTL_TBL0_P39     */ "TAS control list table",
    /* MMU_GATE_CTL_TBL0_P40     */ "TAS control list table",
    /* MMU_GATE_CTL_TBL0_P41     */ "TAS control list table",
    /* MMU_GATE_CTL_TBL0_P42     */ "TAS control list table",
    /* MMU_GATE_CTL_TBL0_P43     */ "TAS control list table",
    /* MMU_GATE_CTL_TBL0_P44     */ "TAS control list table",
    /* MMU_GATE_CTL_TBL0_P45     */ "TAS control list table",
    /* MMU_GATE_CTL_TBL0_P46     */ "TAS control list table",
    /* MMU_GATE_CTL_TBL0_P47     */ "TAS control list table",
    /* MMU_GATE_CTL_TBL0_P48     */ "TAS control list table",
    /* MMU_GATE_CTL_TBL0_P49     */ "TAS control list table",
    /* MMU_GATE_CTL_TBL0_P50     */ "TAS control list table",
    /* MMU_GATE_CTL_TBL0_P51     */ "TAS control list table",
    /* MMU_GATE_CTL_TBL0_P52     */ "TAS control list table",
    /* MMU_GATE_CTL_TBL0_P53     */ "TAS control list table",
    /* MMU_GATE_CTL_TBL0_P54     */ "TAS control list table",
    /* MMU_GATE_CTL_TBL0_P55     */ "TAS control list table",
    /* MMU_GATE_CTL_TBL0_P56     */ "TAS control list table",
    /* MMU_GATE_CTL_TBL0_P57     */ "TAS control list table",
    /* MMU_GATE_CTL_TBL0_P58     */ "TAS control list table",
    /* MMU_GATE_CTL_TBL0_P59     */ "TAS control list table",
    /* MMU_GATE_CTL_TBL0_P60     */ "TAS control list table",
    /* MMU_GATE_CTL_TBL0_P61     */ "TAS control list table",
    /* MMU_GATE_CTL_TBL0_P62     */ "TAS control list table",
    /* MMU_GATE_CTL_TBL0_P63     */ "TAS control list table",
    /* MMU_GATE_CTL_TBL0_P64     */ "TAS control list table",
    /* MMU_GATE_CTL_TBL0_P65     */ "TAS control list table",
    /* MMU_GATE_CTL_TBL1_P2      */ "TAS control list table",
    /* MMU_GATE_CTL_TBL1_P3      */ "TAS control list table",
    /* MMU_GATE_CTL_TBL1_P4      */ "TAS control list table",
    /* MMU_GATE_CTL_TBL1_P5      */ "TAS control list table",
    /* MMU_GATE_CTL_TBL1_P6      */ "TAS control list table",
    /* MMU_GATE_CTL_TBL1_P7      */ "TAS control list table",
    /* MMU_GATE_CTL_TBL1_P8      */ "TAS control list table",
    /* MMU_GATE_CTL_TBL1_P9      */ "TAS control list table",
    /* MMU_GATE_CTL_TBL1_P10     */ "TAS control list table",
    /* MMU_GATE_CTL_TBL1_P11     */ "TAS control list table",
    /* MMU_GATE_CTL_TBL1_P12     */ "TAS control list table",
    /* MMU_GATE_CTL_TBL1_P13     */ "TAS control list table",
    /* MMU_GATE_CTL_TBL1_P14     */ "TAS control list table",
    /* MMU_GATE_CTL_TBL1_P15     */ "TAS control list table",
    /* MMU_GATE_CTL_TBL1_P16     */ "TAS control list table",
    /* MMU_GATE_CTL_TBL1_P17     */ "TAS control list table",
    /* MMU_GATE_CTL_TBL1_P18     */ "TAS control list table",
    /* MMU_GATE_CTL_TBL1_P19     */ "TAS control list table",
    /* MMU_GATE_CTL_TBL1_P20     */ "TAS control list table",
    /* MMU_GATE_CTL_TBL1_P21     */ "TAS control list table",
    /* MMU_GATE_CTL_TBL1_P22     */ "TAS control list table",
    /* MMU_GATE_CTL_TBL1_P23     */ "TAS control list table",
    /* MMU_GATE_CTL_TBL1_P24     */ "TAS control list table",
    /* MMU_GATE_CTL_TBL1_P25     */ "TAS control list table",
    /* MMU_GATE_CTL_TBL1_P26     */ "TAS control list table",
    /* MMU_GATE_CTL_TBL1_P27     */ "TAS control list table",
    /* MMU_GATE_CTL_TBL1_P28     */ "TAS control list table",
    /* MMU_GATE_CTL_TBL1_P29     */ "TAS control list table",
    /* MMU_GATE_CTL_TBL1_P30     */ "TAS control list table",
    /* MMU_GATE_CTL_TBL1_P31     */ "TAS control list table",
    /* MMU_GATE_CTL_TBL1_P32     */ "TAS control list table",
    /* MMU_GATE_CTL_TBL1_P33     */ "TAS control list table",
    /* MMU_GATE_CTL_TBL1_P34     */ "TAS control list table",
    /* MMU_GATE_CTL_TBL1_P35     */ "TAS control list table",
    /* MMU_GATE_CTL_TBL1_P36     */ "TAS control list table",
    /* MMU_GATE_CTL_TBL1_P37     */ "TAS control list table",
    /* MMU_GATE_CTL_TBL1_P38     */ "TAS control list table",
    /* MMU_GATE_CTL_TBL1_P39     */ "TAS control list table",
    /* MMU_GATE_CTL_TBL1_P40     */ "TAS control list table",
    /* MMU_GATE_CTL_TBL1_P41     */ "TAS control list table",
    /* MMU_GATE_CTL_TBL1_P42     */ "TAS control list table",
    /* MMU_GATE_CTL_TBL1_P43     */ "TAS control list table",
    /* MMU_GATE_CTL_TBL1_P44     */ "TAS control list table",
    /* MMU_GATE_CTL_TBL1_P45     */ "TAS control list table",
    /* MMU_GATE_CTL_TBL1_P46     */ "TAS control list table",
    /* MMU_GATE_CTL_TBL1_P47     */ "TAS control list table",
    /* MMU_GATE_CTL_TBL1_P48     */ "TAS control list table",
    /* MMU_GATE_CTL_TBL1_P49     */ "TAS control list table",
    /* MMU_GATE_CTL_TBL1_P50     */ "TAS control list table",
    /* MMU_GATE_CTL_TBL1_P51     */ "TAS control list table",
    /* MMU_GATE_CTL_TBL1_P52     */ "TAS control list table",
    /* MMU_GATE_CTL_TBL1_P53     */ "TAS control list table",
    /* MMU_GATE_CTL_TBL1_P54     */ "TAS control list table",
    /* MMU_GATE_CTL_TBL1_P55     */ "TAS control list table",
    /* MMU_GATE_CTL_TBL1_P56     */ "TAS control list table",
    /* MMU_GATE_CTL_TBL1_P57     */ "TAS control list table",
    /* MMU_GATE_CTL_TBL1_P58     */ "TAS control list table",
    /* MMU_GATE_CTL_TBL1_P59     */ "TAS control list table",
    /* MMU_GATE_CTL_TBL1_P60     */ "TAS control list table",
    /* MMU_GATE_CTL_TBL1_P61     */ "TAS control list table",
    /* MMU_GATE_CTL_TBL1_P62     */ "TAS control list table",
    /* MMU_GATE_CTL_TBL1_P63     */ "TAS control list table",
    /* MMU_GATE_CTL_TBL1_P64     */ "TAS control list table",
    /* MMU_GATE_CTL_TBL1_P65     */ "TAS control list table",
    /* MMU_GCFG_MEM_FAIL_ADDR_64 */ "Memory Fail address FIFO",
    /* MMU_IDF                   */ "IDF Indirect Mechanism.",
    /* MMU_IDR_RXI_MEM_DATA      */ "Fifo that hold the data received from IDR",
    /* MMU_INITIAL_NHOP_TBL      */ "MMU_INITIAL_NHOP_TBL arranged as 4 entries per 1 word indexed by L3_REPL_PTR0[12:2]",
    /* MMU_INTFI_BASE_INDEX_TBL  */ "Base Index Table in Mapping and Storage",
    /* MMU_INTFI_BASE_TBL        */ "Flow Control Base Table",
    /* MMU_INTFI_DEBUG_MEM       */ "Flow Control Debug Memory",
    /* MMU_INTFI_FC_MAP_TBL0     */ "FC Map Table for Level 0 in Mapping and Storage",
    /* MMU_INTFI_FC_MAP_TBL1     */ "FC Map Table for Level 1 in Mapping and Storage",
    /* MMU_INTFI_FC_MAP_TBL2     */ "FC Map Table for Level 2 in Mapping and Storage",
    /* MMU_INTFI_FC_STATE_TBL    */ "Flow Control State Table",
    /* MMU_INTFI_FC_ST_TBL0      */ "FC State Table for Level 0 in Mapping and Storage",
    /* MMU_INTFI_FC_ST_TBL1      */ "FC State Table for Level 1 in Mapping and Storage",
    /* MMU_INTFI_FC_ST_TBL2      */ "FC State Table for Level 2 in Mapping and Storage",
    /* MMU_INTFI_MAP_TBL         */ "Flow Control Map Table",
    /* MMU_INTFI_MERGE_ST_TBL    */ "Merge State Table in DMVOQ merge block maintained by hardware",
    /* MMU_INTFI_OFFSET_MAP_TBL  */ "Offset Map Table in DMVOQ merge block",
    /* MMU_INTFI_PFC_ST_TBL      */ "PFC State Table in Mapping and Storage",
    /* MMU_INTFI_PORT_COEFC_TB   */ "COE-FC PORT STATE Table",
    /* MMU_INTFI_S1_ST_TB        */ "FC S1 STATE Table",
    /* MMU_INTFI_ST_TRANS_TBL    */ "State Translation Table in Mapping and Storage",
    /* MMU_INTFI_XLATE_TBL       */ "Status Translation Table. XLATE_TBL0 = 0-255, XLATE_TBL1 = 256-511",
    /* MMU_INTFI_XPIPE_FC_MAP_TBL0 */ "FC Map Table for Level 0 in Mapping and Storage",
    /* MMU_INTFI_XPIPE_FC_MAP_TBL1 */ "FC Map Table for Level 1 in Mapping and Storage",
    /* MMU_INTFI_XPIPE_FC_MAP_TBL2 */ "FC Map Table for Level 2 in Mapping and Storage",
    /* MMU_INTFI_XPIPE_FC_MAP_TBS1 */ "S1 Map Table for Level S1 in Mapping and Storage",
    /* MMU_INTFI_YPIPE_FC_MAP_TBL0 */ "FC Map Table for Level 0 in Mapping and Storage",
    /* MMU_INTFI_YPIPE_FC_MAP_TBL1 */ "FC Map Table for Level 1 in Mapping and Storage",
    /* MMU_INTFI_YPIPE_FC_MAP_TBL2 */ "FC Map Table for Level 2 in Mapping and Storage",
    /* MMU_INTFO_QCN_CNM_RVD_TBL */ "number of received QCN CNM which triggered PRP PFC/PAUSE",
    /* MMU_INTFO_QCN_CNM_TIMER_TBL */ "Timer for triggered PRP PFC/PAUSE",
    /* MMU_INTFO_QCN_TBID_TBL    */ "table ID for QCN_TIMEOUT_VALUE map table, addressed by dst_port[5:0]",
    /* MMU_INTFO_QCN_TOV_TBL     */ "QCN_TIMEOUT_VALUE table",
    /* MMU_INTFO_TC2PRI_MAPPING  */ "Channel TC state to Priority mapping",
    /* MMU_INTFO_TC2PRI_MAPPING0 */ "Channel TC state to Priority mapping, instance 0",
    /* MMU_INTFO_TC2PRI_MAPPING1 */ "Channel TC state to Priority mapping, instance 1",
    /* MMU_INTFO_TC2PRI_MAPPING2 */ "Channel TC state to Priority mapping, instance 2",
    /* MMU_INTFO_TC2PRI_MAPPING3 */ "Channel TC state to Priority mapping, instance 3",
    /* MMU_INTFO_TIMESTAMP       */ "local 1588 timestamp received by INTFO",
    /* MMU_INTFO_TOD_TIMESTAMP   */ "Time of Day values to be stored by host process for MMU Packet stats UTC conversion from local 1588 timestamp",
    /* MMU_INTFO_UTC_TIMESTAMP   */ "Converted UTC Timestamp",
    /* MMU_IPCTR_CTXT_COUNTER_0  */ "IPCTR CTXT COUNTER 0",
    /* MMU_IPCTR_PG_COUNTER_0    */ "IPCTR PG COUNTER 0",
    /* MMU_IPCTR_PG_COUNTER_1    */ "IPCTR PG COUNTER 1",
    /* MMU_IPMC_GROUP_TBL        */ "IPMC VLAN Group Table 0 for PPP#1-32",
    /* MMU_IPMC_GROUP_TBL0       */ "IPMC VLAN Group Table 0",
    /* MMU_IPMC_GROUP_TBL1       */ "IPMC VLAN Group Table 1",
    /* MMU_IPMC_GROUP_TBL2       */ "IPMC VLAN Group Table 2",
    /* MMU_IPMC_GROUP_TBL3       */ "IPMC VLAN Group Table 3",
    /* MMU_IPMC_GROUP_TBL4       */ "IPMC VLAN Group Table 4",
    /* MMU_IPMC_GROUP_TBL5       */ "IPMC VLAN Group Table 5",
    /* MMU_IPMC_GROUP_TBL6       */ "IPMC VLAN Group Table 6",
    /* MMU_IPMC_GROUP_TBL7       */ "IPMC VLAN Group Table 7",
    /* MMU_IPMC_GROUP_TBL8       */ "IPMC VLAN Group Table 8",
    /* MMU_IPMC_GROUP_TBL9       */ "IPMC VLAN Group Table 9",
    /* MMU_IPMC_GROUP_TBL10      */ "IPMC VLAN Group Table 10",
    /* MMU_IPMC_GROUP_TBL11      */ "IPMC VLAN Group Table 11",
    /* MMU_IPMC_GROUP_TBL12      */ "IPMC VLAN Group Table 12",
    /* MMU_IPMC_GROUP_TBL13      */ "IPMC VLAN Group Table 13",
    /* MMU_IPMC_GROUP_TBL14      */ "IPMC VLAN Group Table 14",
    /* MMU_IPMC_GROUP_TBL15      */ "IPMC VLAN Group Table 15",
    /* MMU_IPMC_GROUP_TBL16      */ "IPMC VLAN Group Table 16",
    /* MMU_IPMC_GROUP_TBL17      */ "IPMC VLAN Group Table 17",
    /* MMU_IPMC_GROUP_TBL18      */ "IPMC VLAN Group Table 18",
    /* MMU_IPMC_GROUP_TBL19      */ "IPMC VLAN Group Table 19",
    /* MMU_IPMC_GROUP_TBL20      */ "IPMC VLAN Group Table 20",
    /* MMU_IPMC_GROUP_TBL21      */ "IPMC VLAN Group Table 21",
    /* MMU_IPMC_GROUP_TBL22      */ "IPMC VLAN Group Table 22",
    /* MMU_IPMC_GROUP_TBL23      */ "IPMC VLAN Group Table 23",
    /* MMU_IPMC_GROUP_TBL24      */ "IPMC VLAN Group Table 24",
    /* MMU_IPMC_GROUP_TBL25      */ "IPMC VLAN Group Table 25",
    /* MMU_IPMC_GROUP_TBL26      */ "IPMC VLAN Group Table 26",
    /* MMU_IPMC_GROUP_TBL27      */ "IPMC VLAN Group Table 27",
    /* MMU_IPMC_GROUP_TBL28      */ "IPMC VLAN Group Table 28",
    /* MMU_IPMC_GROUP_TBL29      */ "IPMC VLAN Group Table 29",
    /* MMU_IPMC_GROUP_TBL30      */ "IPMC VLAN Group Table 30",
    /* MMU_IPMC_GROUP_TBL31      */ "IPMC VLAN Group Table 31",
    /* MMU_IPMC_GROUP_TBL32      */ "IPMC VLAN Group Table 32",
    /* MMU_IPMC_GROUP_TBL33      */ "IPMC VLAN Group Table 33",
    /* MMU_IPMC_GROUP_TBL34      */ "IPMC VLAN Group Table 34",
    /* MMU_IPMC_GROUP_TBL35      */ "IPMC VLAN Group Table 35",
    /* MMU_IPMC_GROUP_TBL36      */ "IPMC VLAN Group Table 36",
    /* MMU_IPMC_GROUP_TBL37      */ "IPMC VLAN Group Table 37",
    /* MMU_IPMC_GROUP_TBL38      */ "IPMC VLAN Group Table 38",
    /* MMU_IPMC_GROUP_TBL39      */ "IPMC VLAN Group Table 39",
    /* MMU_IPMC_GROUP_TBL40      */ "IPMC VLAN Group Table 40",
    /* MMU_IPMC_GROUP_TBL41      */ "IPMC VLAN Group Table 41",
    /* MMU_IPMC_GROUP_TBL42      */ "IPMC VLAN Group Table 42",
    /* MMU_IPMC_GROUP_TBL43      */ "IPMC VLAN Group Table 43",
    /* MMU_IPMC_GROUP_TBL44      */ "IPMC VLAN Group Table 44",
    /* MMU_IPMC_GROUP_TBL45      */ "IPMC VLAN Group Table 45",
    /* MMU_IPMC_GROUP_TBL46      */ "IPMC VLAN Group Table 46",
    /* MMU_IPMC_GROUP_TBL47      */ "IPMC VLAN Group Table 47",
    /* MMU_IPMC_GROUP_TBL48      */ "IPMC VLAN Group Table 48",
    /* MMU_IPMC_GROUP_TBL49      */ "IPMC VLAN Group Table 49",
    /* MMU_IPMC_GROUP_TBL50      */ "IPMC VLAN Group Table 50",
    /* MMU_IPMC_GROUP_TBL51      */ "IPMC VLAN Group Table 51",
    /* MMU_IPMC_GROUP_TBL52      */ "IPMC VLAN Group Table 52",
    /* MMU_IPMC_GROUP_TBL53      */ "IPMC VLAN Group Table 53",
    /* MMU_IPMC_GROUP_TBL54      */ "IPMC VLAN Group Table 54",
    /* MMU_IPMC_GROUP_TBL55      */ "IPMC VLAN Group Table 55",
    /* MMU_IPMC_GROUP_TBL56      */ "IPMC VLAN Group Table 56",
    /* MMU_IPMC_GROUP_TBL57      */ "IPMC VLAN Group Table 57",
    /* MMU_IPMC_GROUP_TBL58      */ "IPMC VLAN Group Table 58",
    /* MMU_IPMC_GROUP_TBL59      */ "IPMC VLAN Group Table 59",
    /* MMU_IPMC_GROUP_TBL60      */ "IPMC VLAN Group Table 60",
    /* MMU_IPMC_GROUP_TBL61      */ "IPMC VLAN Group Table 61",
    /* MMU_IPMC_GROUP_TBL62      */ "IPMC VLAN Group Table 62",
    /* MMU_IPMC_GROUP_TBL63      */ "IPMC VLAN Group Table 63",
    /* MMU_IPMC_GROUP_TBL64      */ "IPMC VLAN Group Table 64",
    /* MMU_IPMC_GROUP_TBL65      */ "IPMC VLAN Group Table 65",
    /* MMU_IPMC_VLAN_TBL         */ "IPMC VLAN LSB Bitmap Table RAM",
    /* MMU_IPMC_VLAN_TBL_MEM0    */ "IPMC VLAN LSB Bitmap Table RAM 0",
    /* MMU_IPMC_VLAN_TBL_MEM1    */ "IPMC VLAN LSB Bitmap Table RAM 0",
    /* MMU_ITE_CTRL_0            */ "ITE Control used for write complete information",
    /* MMU_ITE_CTRL_1            */ "ITE Control used for write complete information",
    /* MMU_ITE_PACKET_PTR_STORE  */ "",
    /* MMU_ITE_QMGR_FLL          */ "EMA FIFO Free Pointer Linked List",
    /* MMU_ITE_QMGR_QLL          */ "EMA FIFO Queue Block Linked List",
    /* MMU_ITE_WORK_QUEUE_0      */ "EMA FIFO Working memory 0",
    /* MMU_ITE_WORK_QUEUE_1      */ "EMA FIFO Working memory 1",
    /* MMU_ITE_WORK_QUEUE_2      */ "EMA FIFO Working memory 2",
    /* MMU_LBM                   */ "Last buffer memory",
    /* MMU_LINK_MEM              */ "Packet link memory.  This is a working FIFO maintained by hardware.",
    /* MMU_LINK_MEM_XPE0         */ "Packet link memory.  This is a working FIFO maintained by hardware.",
    /* MMU_LINK_MEM_XPE1         */ "Packet link memory.  This is a working FIFO maintained by hardware.",
    /* MMU_LINK_MEM_XPE2         */ "Packet link memory.  This is a working FIFO maintained by hardware.",
    /* MMU_LINK_MEM_XPE3         */ "Packet link memory.  This is a working FIFO maintained by hardware.",
    /* MMU_MAPPER_X_LSB          */ "MMU_MAPPER_X_LSB",
    /* MMU_MAPPER_Y_LSB          */ "MMU_MAPPER_Y_LSB",
    /* MMU_MAX_BUCKET_EVEN       */ "For port 0,2,4,6,...\nport/cos to MEM idx mapping: idx = {port/2, cos[2:0]}",
    /* MMU_MAX_BUCKET_GPORT      */ "MMU_MAX_BUCKET_GPORT",
    /* MMU_MAX_BUCKET_ODD        */ "For port 1,3,5,7,...\nport/cos to MEM idx mapping: idx = {(port-1)/2, cos[2:0]}",
    /* MMU_MAX_BUCKET_PGRP0      */ "MMU_MAX_BUCKET_PGRP0 - port 2 ~ 15\nport/cos to MEM idx mapping: idx = {port - 2, cos[2:0]}",
    /* MMU_MAX_BUCKET_PGRP1      */ "MMU_MAX_BUCKET_PGRP1 - port 0, 16 ~ 29\nport/cos to MEM idx mapping:\n1. port=0, idx = {0, cos[2:0]}\n2. port!=0, idx = {port - 15, cos[2:0]}    (port 16~29)",
    /* MMU_MAX_BUCKET_QGROUP     */ "port/QG to MEM idx mapping:  only for(port >= 58) idx = {port-58, QG[2:0]}",
    /* MMU_MAX_BUCKET_QLAYER     */ "port/cos to MEM idx mapping:\n  if(port <=57) idx = {port, cos[2:0]}\n  else          idx = {(port-58), cos[5:0]}+ 58*8",
    /* MMU_MCFP                  */ "MCFP",
    /* MMU_MCFP_XPE0             */ "Multicast queue entry free pool.  This is a working FIFO maintained by hardware.",
    /* MMU_MCFP_XPE1             */ "Multicast queue entry free pool.  This is a working FIFO maintained by hardware.",
    /* MMU_MCFP_XPE2             */ "Multicast queue entry free pool.  This is a working FIFO maintained by hardware.",
    /* MMU_MCFP_XPE3             */ "Multicast queue entry free pool.  This is a working FIFO maintained by hardware.",
    /* MMU_MCQDB0                */ "MCQDB0",
    /* MMU_MCQDB1                */ "MCQDB1",
    /* MMU_MCQDB_X               */ "Multicast queue database.  This is a working FIFO maintained by hardware.",
    /* MMU_MCQDB_X_A             */ "Multicast queue database.  This is a working FIFO maintained by hardware.",
    /* MMU_MCQDB_X_A_XPE0        */ "Multicast queue database.  This is a working FIFO maintained by hardware.",
    /* MMU_MCQDB_X_A_XPE1        */ "Multicast queue database.  This is a working FIFO maintained by hardware.",
    /* MMU_MCQDB_X_A_XPE2        */ "Multicast queue database.  This is a working FIFO maintained by hardware.",
    /* MMU_MCQDB_X_A_XPE3        */ "Multicast queue database.  This is a working FIFO maintained by hardware.",
    /* MMU_MCQDB_X_B             */ "Multicast queue database.  This is a working FIFO maintained by hardware.",
    /* MMU_MCQDB_X_B_XPE0        */ "Multicast queue database.  This is a working FIFO maintained by hardware.",
    /* MMU_MCQDB_X_B_XPE1        */ "Multicast queue database.  This is a working FIFO maintained by hardware.",
    /* MMU_MCQDB_X_B_XPE2        */ "Multicast queue database.  This is a working FIFO maintained by hardware.",
    /* MMU_MCQDB_X_B_XPE3        */ "Multicast queue database.  This is a working FIFO maintained by hardware.",
    /* MMU_MCQDB_X_XPE0          */ "Multicast queue database.  This is a working FIFO maintained by hardware.",
    /* MMU_MCQDB_X_XPE1          */ "Multicast queue database.  This is a working FIFO maintained by hardware.",
    /* MMU_MCQDB_X_XPE2          */ "Multicast queue database.  This is a working FIFO maintained by hardware.",
    /* MMU_MCQDB_X_XPE3          */ "Multicast queue database.  This is a working FIFO maintained by hardware.",
    /* MMU_MCQDB_Y               */ "Multicast queue database.  This is a working FIFO maintained by hardware.",
    /* MMU_MCQDB_Y_A             */ "Multicast queue database.  This is a working FIFO maintained by hardware.",
    /* MMU_MCQDB_Y_A_XPE0        */ "Multicast queue database.  This is a working FIFO maintained by hardware.",
    /* MMU_MCQDB_Y_A_XPE1        */ "Multicast queue database.  This is a working FIFO maintained by hardware.",
    /* MMU_MCQDB_Y_A_XPE2        */ "Multicast queue database.  This is a working FIFO maintained by hardware.",
    /* MMU_MCQDB_Y_A_XPE3        */ "Multicast queue database.  This is a working FIFO maintained by hardware.",
    /* MMU_MCQDB_Y_B             */ "Multicast queue database.  This is a working FIFO maintained by hardware.",
    /* MMU_MCQDB_Y_B_XPE0        */ "Multicast queue database.  This is a working FIFO maintained by hardware.",
    /* MMU_MCQDB_Y_B_XPE1        */ "Multicast queue database.  This is a working FIFO maintained by hardware.",
    /* MMU_MCQDB_Y_B_XPE2        */ "Multicast queue database.  This is a working FIFO maintained by hardware.",
    /* MMU_MCQDB_Y_B_XPE3        */ "Multicast queue database.  This is a working FIFO maintained by hardware.",
    /* MMU_MCQDB_Y_XPE0          */ "Multicast queue database.  This is a working FIFO maintained by hardware.",
    /* MMU_MCQDB_Y_XPE1          */ "Multicast queue database.  This is a working FIFO maintained by hardware.",
    /* MMU_MCQDB_Y_XPE2          */ "Multicast queue database.  This is a working FIFO maintained by hardware.",
    /* MMU_MCQDB_Y_XPE3          */ "Multicast queue database.  This is a working FIFO maintained by hardware.",
    /* MMU_MCQE                  */ "MCQE",
    /* MMU_MCQE_PREFETCH_X       */ "Multicast queue database.  This is a working FIFO maintained by hardware.",
    /* MMU_MCQE_PREFETCH_X_XPE0  */ "Multicast queue database.  This is a working FIFO maintained by hardware.",
    /* MMU_MCQE_PREFETCH_X_XPE1  */ "Multicast queue database.  This is a working FIFO maintained by hardware.",
    /* MMU_MCQE_PREFETCH_X_XPE2  */ "Multicast queue database.  This is a working FIFO maintained by hardware.",
    /* MMU_MCQE_PREFETCH_X_XPE3  */ "Multicast queue database.  This is a working FIFO maintained by hardware.",
    /* MMU_MCQE_PREFETCH_Y       */ "Multicast queue database.  This is a working FIFO maintained by hardware.",
    /* MMU_MCQE_PREFETCH_Y_XPE0  */ "Multicast queue database.  This is a working FIFO maintained by hardware.",
    /* MMU_MCQE_PREFETCH_Y_XPE1  */ "Multicast queue database.  This is a working FIFO maintained by hardware.",
    /* MMU_MCQE_PREFETCH_Y_XPE2  */ "Multicast queue database.  This is a working FIFO maintained by hardware.",
    /* MMU_MCQE_PREFETCH_Y_XPE3  */ "Multicast queue database.  This is a working FIFO maintained by hardware.",
    /* MMU_MCQE_XPE0             */ "Multicast queue entry.  This is a working FIFO maintained by hardware.",
    /* MMU_MCQE_XPE1             */ "Multicast queue entry.  This is a working FIFO maintained by hardware.",
    /* MMU_MCQE_XPE2             */ "Multicast queue entry.  This is a working FIFO maintained by hardware.",
    /* MMU_MCQE_XPE3             */ "Multicast queue entry.  This is a working FIFO maintained by hardware.",
    /* MMU_MCQN                  */ "MCQN",
    /* MMU_MCQN_XPE0             */ "Multicast queue entry next pointer.  This is a working FIFO maintained by hardware.",
    /* MMU_MCQN_XPE1             */ "Multicast queue entry next pointer.  This is a working FIFO maintained by hardware.",
    /* MMU_MCQN_XPE2             */ "Multicast queue entry next pointer.  This is a working FIFO maintained by hardware.",
    /* MMU_MCQN_XPE3             */ "Multicast queue entry next pointer.  This is a working FIFO maintained by hardware.",
    /* MMU_MC_FIFO0              */ "MC_FIFO",
    /* MMU_MC_FIFO1              */ "MC_FIFO1",
    /* MMU_MC_FIFO2              */ "MC_FIFO1",
    /* MMU_MC_FIFO3              */ "MC_FIFO1",
    /* MMU_MC_FIFO4              */ "MC_FIFO1",
    /* MMU_MC_FIFO5              */ "MC_FIFO1",
    /* MMU_MC_FIFO6              */ "MC_FIFO1",
    /* MMU_MC_FIFO7              */ "MC_FIFO1",
    /* MMU_MC_FIFO8              */ "MC_FIFO1",
    /* MMU_MC_FIFO9              */ "MC_FIFO1",
    /* MMU_MC_FIFO10             */ "MC_FIFO1",
    /* MMU_MC_FIFO11             */ "MC_FIFO1",
    /* MMU_MC_FIFO12             */ "MC_FIFO1",
    /* MMU_MC_FIFO13             */ "MC_FIFO1",
    /* MMU_MC_FIFO14             */ "MC_FIFO1",
    /* MMU_MC_FIFO15             */ "MC_FIFO1",
    /* MMU_MC_FIFO16             */ "MC_FIFO1",
    /* MMU_MC_FIFO17             */ "MC_FIFO1",
    /* MMU_MC_FIFO18             */ "MC_FIFO1",
    /* MMU_MC_FIFO19             */ "MC_FIFO1",
    /* MMU_MC_FIFO20             */ "MC_FIFO1",
    /* MMU_MC_FIFO21             */ "MC_FIFO1",
    /* MMU_MC_FIFO22             */ "MC_FIFO1",
    /* MMU_MC_FIFO23             */ "MC_FIFO1",
    /* MMU_MC_FIFO24             */ "MC_FIFO1",
    /* MMU_MC_FIFO25             */ "MC_FIFO1",
    /* MMU_MC_FIFO26             */ "MC_FIFO1",
    /* MMU_MC_FIFO27             */ "MC_FIFO1",
    /* MMU_MC_FIFO28             */ "MC_FIFO1",
    /* MMU_MC_FIFO29             */ "MC_FIFO1",
    /* MMU_MC_FIFO30             */ "MC_FIFO1",
    /* MMU_MC_FIFO31             */ "MC_FIFO1",
    /* MMU_MC_FIFO32             */ "MC_FIFO1",
    /* MMU_MC_FIFO33             */ "MC_FIFO1",
    /* MMU_MC_FIFO34             */ "MC_FIFO1",
    /* MMU_MC_FIFO35             */ "MC_FIFO1",
    /* MMU_MC_FIFO36             */ "MC_FIFO1",
    /* MMU_MC_FIFO37             */ "MC_FIFO1",
    /* MMU_MC_FIFO38             */ "MC_FIFO1",
    /* MMU_MC_FIFO39             */ "MC_FIFO1",
    /* MMU_MC_FIFO40             */ "MC_FIFO1",
    /* MMU_MC_FIFO41             */ "MC_FIFO1",
    /* MMU_MC_FIFO42             */ "MC_FIFO1",
    /* MMU_MC_FIFO43             */ "MC_FIFO1",
    /* MMU_MC_FIFO44             */ "MC_FIFO1",
    /* MMU_MC_FIFO45             */ "MC_FIFO1",
    /* MMU_MC_FIFO46             */ "MC_FIFO1",
    /* MMU_MC_FIFO47             */ "MC_FIFO1",
    /* MMU_MC_FIFO48             */ "MC_FIFO1",
    /* MMU_MC_FIFO49             */ "MC_FIFO1",
    /* MMU_MC_FIFO50             */ "MC_FIFO1",
    /* MMU_MC_FIFO51             */ "MC_FIFO1",
    /* MMU_MC_FIFO52             */ "MC_FIFO1",
    /* MMU_MC_FIFO53             */ "MC_FIFO1",
    /* MMU_MC_FIFO54             */ "MC_FIFO1",
    /* MMU_MC_FIFO55             */ "MC_FIFO1",
    /* MMU_MC_FIFO56             */ "MC_FIFO1",
    /* MMU_MC_FIFO57             */ "MC_FIFO1",
    /* MMU_MC_FIFO58             */ "MC_FIFO1",
    /* MMU_MC_FIFO59             */ "MC_FIFO1",
    /* MMU_MC_FIFO60             */ "MC_FIFO1",
    /* MMU_MC_FIFO61             */ "MC_FIFO1",
    /* MMU_MC_FIFO62             */ "MC_FIFO1",
    /* MMU_MC_FIFO63             */ "MC_FIFO1",
    /* MMU_MC_FIFO64             */ "MC_FIFO1",
    /* MMU_MC_FIFO65             */ "MC_FIFO1",
    /* MMU_MC_FIFO48_1           */ "MC_FIFO",
    /* MMU_MC_FIFO49_1           */ "MC_FIFO",
    /* MMU_MC_FIFO50_1           */ "MC_FIFO",
    /* MMU_MC_FIFO51_1           */ "MC_FIFO",
    /* MMU_MC_FIFO52_1           */ "MC_FIFO",
    /* MMU_MC_FIFO53_1           */ "MC_FIFO",
    /* MMU_MC_FIFO54_1           */ "MC_FIFO",
    /* MMU_MC_FIFO55_1           */ "MC_FIFO",
    /* MMU_MC_FIFO57_1           */ "MC_FIFO",
    /* MMU_MC_FIFO57_2           */ "MC_FIFO",
    /* MMU_MC_FIFO57_3           */ "MC_FIFO",
    /* MMU_MC_FIFO59_1           */ "MC_FIFO",
    /* MMU_MC_FIFO59_2           */ "MC_FIFO",
    /* MMU_MIN_BUCKET_EVEN       */ "For port 0,2,4,6,...\nport/cos to MEM idx mapping: idx = {port/2, cos[2:0]}",
    /* MMU_MIN_BUCKET_GPORT      */ "MMU_MIN_BUCKET_GPORT",
    /* MMU_MIN_BUCKET_ODD        */ "For port 1,3,5,7,...\nport/cos to MEM idx mapping: idx = {(port-1)/2, cos[2:0]}",
    /* MMU_MIN_BUCKET_PGRP0      */ "MMU_MIN_BUCKET_PGRP0 - port 2 ~ 15\nport/cos to MEM idx mapping: idx = {port - 2, cos[2:0]}",
    /* MMU_MIN_BUCKET_PGRP1      */ "MMU_MIN_BUCKET_PGRP1 - port 0, 16 ~ 29\nport/cos to MEM idx mapping:\n1. port=0, idx = {0, cos[2:0]}\n2. port!=0, idx = {port - 15, cos[2:0]}    (port 16~29)",
    /* MMU_MIN_BUCKET_QGROUP     */ "port/QG to MEM idx mapping:  only for(port >= 58) idx = {port-58, QG[2:0]}",
    /* MMU_MIN_BUCKET_QLAYER     */ "port/cos to MEM idx mapping:\n  if(port <=57) idx = {port, cos[2:0]}\n  else          idx = {(port-58), cos[5:0]}+ 58*8",
    /* MMU_MTRI_BKPMETERINGBUCKET_MEM_0 */ "Back-pressure Metering Bucket",
    /* MMU_MTRI_BKPMETERINGBUCKET_MEM_1 */ "Back-pressure Metering Bucket",
    /* MMU_MTRI_BKPMETERINGCONFIG_MEM_0 */ "Back-pressure Metering Config",
    /* MMU_MTRI_BKPMETERINGCONFIG_MEM_1 */ "Back-pressure Metering Config",
    /* MMU_MTRO_BUCKET_L0_MEM    */ "L0 nodes min/max bucket. This cannot be written to, and is used by the shaping logic to store the bucket count/status",
    /* MMU_MTRO_BUCKET_L0_MEM_0  */ "L0 nodes min/max bucket",
    /* MMU_MTRO_BUCKET_L0_MEM_1  */ "L0 nodes min/max bucket",
    /* MMU_MTRO_BUCKET_L0_MEM_PIPE0 */ "L0 nodes min/max bucket. The index to this memory is the L0 number of this pipe, ranging from 0 to 339. The extra entries outside of the range are not used.",
    /* MMU_MTRO_BUCKET_L0_MEM_PIPE1 */ "L0 nodes min/max bucket. The index to this memory is the L0 number of this pipe, ranging from 0 to 339. The extra entries outside of the range are not used.",
    /* MMU_MTRO_BUCKET_L0_MEM_PIPE2 */ "L0 nodes min/max bucket. The index to this memory is the L0 number of this pipe, ranging from 0 to 339. The extra entries outside of the range are not used.",
    /* MMU_MTRO_BUCKET_L0_MEM_PIPE3 */ "L0 nodes min/max bucket. The index to this memory is the L0 number of this pipe, ranging from 0 to 339. The extra entries outside of the range are not used.",
    /* MMU_MTRO_BUCKET_L1_MEM    */ "L1 nodes min/max bucket. This cannot be written to, and is used by the shaping logic to store the bucket count/status",
    /* MMU_MTRO_BUCKET_L1_MEM_0  */ "L1 nodes min/max bucket",
    /* MMU_MTRO_BUCKET_L1_MEM_1  */ "L1 nodes min/max bucket",
    /* MMU_MTRO_BUCKET_L1_MEM_PIPE0 */ "L1 nodes min/max bucket. The index to this memory is the logical queue number of this pipe, ranging from 0 to 707. Of this range, 0 to 329 are for UC queues and 330 to 707 are for MC queues. The extra entries outside of the range are not used.",
    /* MMU_MTRO_BUCKET_L1_MEM_PIPE1 */ "L1 nodes min/max bucket. The index to this memory is the logical queue number of this pipe, ranging from 0 to 707. Of this range, 0 to 329 are for UC queues and 330 to 707 are for MC queues. The extra entries outside of the range are not used.",
    /* MMU_MTRO_BUCKET_L1_MEM_PIPE2 */ "L1 nodes min/max bucket. The index to this memory is the logical queue number of this pipe, ranging from 0 to 707. Of this range, 0 to 329 are for UC queues and 330 to 707 are for MC queues. The extra entries outside of the range are not used.",
    /* MMU_MTRO_BUCKET_L1_MEM_PIPE3 */ "L1 nodes min/max bucket. The index to this memory is the logical queue number of this pipe, ranging from 0 to 707. Of this range, 0 to 329 are for UC queues and 330 to 707 are for MC queues. The extra entries outside of the range are not used.",
    /* MMU_MTRO_BUCKET_L2_MEM    */ "L2 nodes min/max bucket. This cannot be written to, and is used by the shaping logic to store the bucket count/status",
    /* MMU_MTRO_BUCKET_L2_MEM_0  */ "L2 nodes min/max bucket",
    /* MMU_MTRO_BUCKET_L2_MEM_1  */ "L2 nodes min/max bucket",
    /* MMU_MTRO_BUCKET_L2_MEM_2  */ "L2 nodes min/max bucket",
    /* MMU_MTRO_BUCKET_L2_MEM_3  */ "L2 nodes min/max bucket",
    /* MMU_MTRO_BUCKET_L2_MEM_4  */ "L2 nodes min/max bucket",
    /* MMU_MTRO_BUCKET_L2_MEM_5  */ "L2 nodes min/max bucket",
    /* MMU_MTRO_BUCKET_L2_MEM_6  */ "L2 nodes min/max bucket",
    /* MMU_MTRO_BUCKET_L2_MEM_7  */ "L2 nodes min/max bucket",
    /* MMU_MTRO_BUCKET_S1_MEM_0  */ "S1 level metering configuration",
    /* MMU_MTRO_EGRMETERINGBUCKET_MEM */ "Port level metering status",
    /* MMU_MTRO_EGRMETERINGBUCKET_MEM_0 */ "Port level metering configuration",
    /* MMU_MTRO_EGRMETERINGBUCKET_MEM_1 */ "Port level metering configuration",
    /* MMU_MTRO_EGRMETERINGBUCKET_MEM_PIPE0 */ "Port level metering status",
    /* MMU_MTRO_EGRMETERINGBUCKET_MEM_PIPE1 */ "Port level metering status",
    /* MMU_MTRO_EGRMETERINGBUCKET_MEM_PIPE2 */ "Port level metering status",
    /* MMU_MTRO_EGRMETERINGBUCKET_MEM_PIPE3 */ "Port level metering status",
    /* MMU_MTRO_EGRMETERINGCONFIG_MEM */ "Port level metering configuration. The index to this memory is the MMU port number, ranging from 0 to 33. The extra entries outside of the range are not used.",
    /* MMU_MTRO_EGRMETERINGCONFIG_MEM_0 */ "Port level metering configuration",
    /* MMU_MTRO_EGRMETERINGCONFIG_MEM_1 */ "Port level metering configuration",
    /* MMU_MTRO_EGRMETERINGCONFIG_MEM_A */ "Port level metering configuration. The index to this memory is the MMU port number, ranging from 0 to 33. The extra entries outside of the range are not used. NOTE: This is a replicated database for testing only. Use the MMU_MTRO_EGRMETERINGCONFIG_MEM for normal operation. Accessing this memory is only allowed when traffic is idle.",
    /* MMU_MTRO_EGRMETERINGCONFIG_MEM_A_PIPE0 */ "Port level metering configuration. The index to this memory is the MMU port number, ranging from 0 to 33. The extra entries outside of the range are not used. NOTE: This is a replicated database for testing only. Use the MMU_MTRO_EGRMETERINGCONFIG_MEM for normal operation. Accessing this memory is only allowed when traffic is idle.",
    /* MMU_MTRO_EGRMETERINGCONFIG_MEM_A_PIPE1 */ "Port level metering configuration. The index to this memory is the MMU port number, ranging from 0 to 33. The extra entries outside of the range are not used. NOTE: This is a replicated database for testing only. Use the MMU_MTRO_EGRMETERINGCONFIG_MEM for normal operation. Accessing this memory is only allowed when traffic is idle.",
    /* MMU_MTRO_EGRMETERINGCONFIG_MEM_A_PIPE2 */ "Port level metering configuration. The index to this memory is the MMU port number, ranging from 0 to 33. The extra entries outside of the range are not used. NOTE: This is a replicated database for testing only. Use the MMU_MTRO_EGRMETERINGCONFIG_MEM for normal operation. Accessing this memory is only allowed when traffic is idle.",
    /* MMU_MTRO_EGRMETERINGCONFIG_MEM_A_PIPE3 */ "Port level metering configuration. The index to this memory is the MMU port number, ranging from 0 to 33. The extra entries outside of the range are not used. NOTE: This is a replicated database for testing only. Use the MMU_MTRO_EGRMETERINGCONFIG_MEM for normal operation. Accessing this memory is only allowed when traffic is idle.",
    /* MMU_MTRO_EGRMETERINGCONFIG_MEM_B */ "Port level metering configuration. The index to this memory is the MMU port number, ranging from 0 to 33. The extra entries outside of the range are not used. NOTE: This is a replicated database for testing only. Use the MMU_MTRO_EGRMETERINGCONFIG_MEM for normal operation. Accessing this memory is only allowed when traffic is idle.",
    /* MMU_MTRO_EGRMETERINGCONFIG_MEM_B_PIPE0 */ "Port level metering configuration. The index to this memory is the MMU port number, ranging from 0 to 33. The extra entries outside of the range are not used. NOTE: This is a replicated database for testing only. Use the MMU_MTRO_EGRMETERINGCONFIG_MEM for normal operation. Accessing this memory is only allowed when traffic is idle.",
    /* MMU_MTRO_EGRMETERINGCONFIG_MEM_B_PIPE1 */ "Port level metering configuration. The index to this memory is the MMU port number, ranging from 0 to 33. The extra entries outside of the range are not used. NOTE: This is a replicated database for testing only. Use the MMU_MTRO_EGRMETERINGCONFIG_MEM for normal operation. Accessing this memory is only allowed when traffic is idle.",
    /* MMU_MTRO_EGRMETERINGCONFIG_MEM_B_PIPE2 */ "Port level metering configuration. The index to this memory is the MMU port number, ranging from 0 to 33. The extra entries outside of the range are not used. NOTE: This is a replicated database for testing only. Use the MMU_MTRO_EGRMETERINGCONFIG_MEM for normal operation. Accessing this memory is only allowed when traffic is idle.",
    /* MMU_MTRO_EGRMETERINGCONFIG_MEM_B_PIPE3 */ "Port level metering configuration. The index to this memory is the MMU port number, ranging from 0 to 33. The extra entries outside of the range are not used. NOTE: This is a replicated database for testing only. Use the MMU_MTRO_EGRMETERINGCONFIG_MEM for normal operation. Accessing this memory is only allowed when traffic is idle.",
    /* MMU_MTRO_EGRMETERINGCONFIG_MEM_PIPE0 */ "Port level metering configuration. The index to this memory is the MMU port number, ranging from 0 to 33. The extra entries outside of the range are not used.",
    /* MMU_MTRO_EGRMETERINGCONFIG_MEM_PIPE1 */ "Port level metering configuration. The index to this memory is the MMU port number, ranging from 0 to 33. The extra entries outside of the range are not used.",
    /* MMU_MTRO_EGRMETERINGCONFIG_MEM_PIPE2 */ "Port level metering configuration. The index to this memory is the MMU port number, ranging from 0 to 33. The extra entries outside of the range are not used.",
    /* MMU_MTRO_EGRMETERINGCONFIG_MEM_PIPE3 */ "Port level metering configuration. The index to this memory is the MMU port number, ranging from 0 to 33. The extra entries outside of the range are not used.",
    /* MMU_MTRO_L0_MEM           */ "L0 nodes min/max configuration",
    /* MMU_MTRO_L0_MEM_0         */ "L0 nodes min/max configuration",
    /* MMU_MTRO_L0_MEM_1         */ "L0 nodes min/max configuration",
    /* MMU_MTRO_L0_MEM_A         */ "L0 nodes min/max configuration. The index to this memory is the L0 number of this pipe, ranging from 0 to 339. The extra entries outside of the range are not used.",
    /* MMU_MTRO_L0_MEM_A_PIPE0   */ "L0 nodes min/max configuration. The index to this memory is the L0 number of this pipe, ranging from 0 to 339. The extra entries outside of the range are not used.",
    /* MMU_MTRO_L0_MEM_A_PIPE1   */ "L0 nodes min/max configuration. The index to this memory is the L0 number of this pipe, ranging from 0 to 339. The extra entries outside of the range are not used.",
    /* MMU_MTRO_L0_MEM_A_PIPE2   */ "L0 nodes min/max configuration. The index to this memory is the L0 number of this pipe, ranging from 0 to 339. The extra entries outside of the range are not used.",
    /* MMU_MTRO_L0_MEM_A_PIPE3   */ "L0 nodes min/max configuration. The index to this memory is the L0 number of this pipe, ranging from 0 to 339. The extra entries outside of the range are not used.",
    /* MMU_MTRO_L0_MEM_B         */ "L0 nodes min/max configuration. The index to this memory is the L0 number of this pipe, ranging from 0 to 339. The extra entries outside of the range are not used.",
    /* MMU_MTRO_L0_MEM_B_PIPE0   */ "L0 nodes min/max configuration. The index to this memory is the L0 number of this pipe, ranging from 0 to 339. The extra entries outside of the range are not used.",
    /* MMU_MTRO_L0_MEM_B_PIPE1   */ "L0 nodes min/max configuration. The index to this memory is the L0 number of this pipe, ranging from 0 to 339. The extra entries outside of the range are not used.",
    /* MMU_MTRO_L0_MEM_B_PIPE2   */ "L0 nodes min/max configuration. The index to this memory is the L0 number of this pipe, ranging from 0 to 339. The extra entries outside of the range are not used.",
    /* MMU_MTRO_L0_MEM_B_PIPE3   */ "L0 nodes min/max configuration. The index to this memory is the L0 number of this pipe, ranging from 0 to 339. The extra entries outside of the range are not used.",
    /* MMU_MTRO_L0_MEM_PIPE0     */ "L0 nodes min/max configuration. The index to this memory is the L0 number of this pipe, ranging from 0 to 339. The extra entries outside of the range are not used.",
    /* MMU_MTRO_L0_MEM_PIPE1     */ "L0 nodes min/max configuration. The index to this memory is the L0 number of this pipe, ranging from 0 to 339. The extra entries outside of the range are not used.",
    /* MMU_MTRO_L0_MEM_PIPE2     */ "L0 nodes min/max configuration. The index to this memory is the L0 number of this pipe, ranging from 0 to 339. The extra entries outside of the range are not used.",
    /* MMU_MTRO_L0_MEM_PIPE3     */ "L0 nodes min/max configuration. The index to this memory is the L0 number of this pipe, ranging from 0 to 339. The extra entries outside of the range are not used.",
    /* MMU_MTRO_L1_MEM           */ "L1 nodes min/max configuration",
    /* MMU_MTRO_L1_MEM_0         */ "L1 nodes min/max configuration",
    /* MMU_MTRO_L1_MEM_1         */ "L1 nodes min/max configuration",
    /* MMU_MTRO_L1_MEM_A         */ "L1 nodes min/max configuration. The index to this memory is the logical queue number of this pipe, ranging from 0 to 707. Of this range, 0 to 329 are for UC queues and 330 to 707 are for MC queues. The extra entries outside of the range are not used.",
    /* MMU_MTRO_L1_MEM_A_PIPE0   */ "L1 nodes min/max configuration. The index to this memory is the logical queue number of this pipe, ranging from 0 to 707. Of this range, 0 to 329 are for UC queues and 330 to 707 are for MC queues. The extra entries outside of the range are not used.",
    /* MMU_MTRO_L1_MEM_A_PIPE1   */ "L1 nodes min/max configuration. The index to this memory is the logical queue number of this pipe, ranging from 0 to 707. Of this range, 0 to 329 are for UC queues and 330 to 707 are for MC queues. The extra entries outside of the range are not used.",
    /* MMU_MTRO_L1_MEM_A_PIPE2   */ "L1 nodes min/max configuration. The index to this memory is the logical queue number of this pipe, ranging from 0 to 707. Of this range, 0 to 329 are for UC queues and 330 to 707 are for MC queues. The extra entries outside of the range are not used.",
    /* MMU_MTRO_L1_MEM_A_PIPE3   */ "L1 nodes min/max configuration. The index to this memory is the logical queue number of this pipe, ranging from 0 to 707. Of this range, 0 to 329 are for UC queues and 330 to 707 are for MC queues. The extra entries outside of the range are not used.",
    /* MMU_MTRO_L1_MEM_B         */ "L1 nodes min/max configuration. The index to this memory is the logical queue number of this pipe, ranging from 0 to 707. Of this range, 0 to 329 are for UC queues and 330 to 707 are for MC queues. The extra entries outside of the range are not used.",
    /* MMU_MTRO_L1_MEM_B_PIPE0   */ "L1 nodes min/max configuration. The index to this memory is the logical queue number of this pipe, ranging from 0 to 707. Of this range, 0 to 329 are for UC queues and 330 to 707 are for MC queues. The extra entries outside of the range are not used.",
    /* MMU_MTRO_L1_MEM_B_PIPE1   */ "L1 nodes min/max configuration. The index to this memory is the logical queue number of this pipe, ranging from 0 to 707. Of this range, 0 to 329 are for UC queues and 330 to 707 are for MC queues. The extra entries outside of the range are not used.",
    /* MMU_MTRO_L1_MEM_B_PIPE2   */ "L1 nodes min/max configuration. The index to this memory is the logical queue number of this pipe, ranging from 0 to 707. Of this range, 0 to 329 are for UC queues and 330 to 707 are for MC queues. The extra entries outside of the range are not used.",
    /* MMU_MTRO_L1_MEM_B_PIPE3   */ "L1 nodes min/max configuration. The index to this memory is the logical queue number of this pipe, ranging from 0 to 707. Of this range, 0 to 329 are for UC queues and 330 to 707 are for MC queues. The extra entries outside of the range are not used.",
    /* MMU_MTRO_L1_MEM_PIPE0     */ "L1 nodes min/max configuration. The index to this memory is the logical queue number of this pipe, ranging from 0 to 707. Of this range, 0 to 329 are for UC queues and 330 to 707 are for MC queues. The extra entries outside of the range are not used.",
    /* MMU_MTRO_L1_MEM_PIPE1     */ "L1 nodes min/max configuration. The index to this memory is the logical queue number of this pipe, ranging from 0 to 707. Of this range, 0 to 329 are for UC queues and 330 to 707 are for MC queues. The extra entries outside of the range are not used.",
    /* MMU_MTRO_L1_MEM_PIPE2     */ "L1 nodes min/max configuration. The index to this memory is the logical queue number of this pipe, ranging from 0 to 707. Of this range, 0 to 329 are for UC queues and 330 to 707 are for MC queues. The extra entries outside of the range are not used.",
    /* MMU_MTRO_L1_MEM_PIPE3     */ "L1 nodes min/max configuration. The index to this memory is the logical queue number of this pipe, ranging from 0 to 707. Of this range, 0 to 329 are for UC queues and 330 to 707 are for MC queues. The extra entries outside of the range are not used.",
    /* MMU_MTRO_L2_MEM           */ "L2 nodes min/max configuration",
    /* MMU_MTRO_L2_MEM_0         */ "L2 nodes min/max configuration",
    /* MMU_MTRO_L2_MEM_1         */ "L2 nodes min/max configuration",
    /* MMU_MTRO_L2_MEM_2         */ "L2 nodes min/max configuration",
    /* MMU_MTRO_L2_MEM_3         */ "L2 nodes min/max configuration",
    /* MMU_MTRO_L2_MEM_4         */ "L2 nodes min/max configuration",
    /* MMU_MTRO_L2_MEM_5         */ "L2 nodes min/max configuration",
    /* MMU_MTRO_L2_MEM_6         */ "L2 nodes min/max configuration",
    /* MMU_MTRO_L2_MEM_7         */ "L2 nodes min/max configuration",
    /* MMU_MTRO_S1_MEM_0         */ "S1 level metering configuration",
    /* MMU_OVQ_BANK0_MEM0        */ "OVQ BANK0 MEM0",
    /* MMU_OVQ_BANK0_MEM1        */ "OVQ BANK0 MEM1",
    /* MMU_OVQ_BANK0_MEM2        */ "OVQ BANK0 MEM2",
    /* MMU_OVQ_BANK0_MEM3        */ "OVQ BANK0 MEM3",
    /* MMU_OVQ_BANK1_MEM0        */ "OVQ BANK1 MEM0",
    /* MMU_OVQ_BANK1_MEM1        */ "OVQ BANK1 MEM1",
    /* MMU_OVQ_BANK1_MEM2        */ "OVQ BANK1 MEM2",
    /* MMU_OVQ_BANK1_MEM3        */ "OVQ BANK0 MEM3",
    /* MMU_OVQ_BANK2_MEM0        */ "OVQ BANK2 MEM0",
    /* MMU_OVQ_BANK2_MEM1        */ "OVQ BANK2 MEM1",
    /* MMU_OVQ_BANK2_MEM2        */ "OVQ BANK2 MEM2",
    /* MMU_OVQ_BANK2_MEM3        */ "OVQ BANK2 MEM3",
    /* MMU_OVQ_BANK3_MEM0        */ "OVQ BANK3 MEM0",
    /* MMU_OVQ_BANK3_MEM1        */ "OVQ BANK3 MEM1",
    /* MMU_OVQ_BANK3_MEM2        */ "OVQ BANK0 MEM2",
    /* MMU_OVQ_BANK3_MEM3        */ "OVQ BANK3 MEM3",
    /* MMU_OVQ_DISTRIBUTOR_MEM0  */ "OVQ_DISTRIBUTOR_MEM0",
    /* MMU_OVQ_DISTRIBUTOR_MEM1  */ "OVQ_DISTRIBUTOR_MEM1",
    /* MMU_OVQ_DISTRIBUTOR_MEM2  */ "OVQ Distributor MEM2",
    /* MMU_OVQ_DISTRIBUTOR_MEM3  */ "OVQ DISTRIBUTOR MEM3",
    /* MMU_PDB0                  */ "PDB0",
    /* MMU_PDB1                  */ "PDB1",
    /* MMU_PDB_X                 */ "This memory contains the per port database of PDB_X for ongoing packet information and enables traversal through the cell-link structrure.\nThe index to this table are MMU port numbers  as below :\n0-31    : General Ports (Ethernet/HiGig)\n32      : CPU port\n33      : Loopback port\n34-35   : Unused\n36-39   : MMU internal purge ports",
    /* MMU_PDB_X_XPE0            */ "This memory contains the per port database of PDB_X for ongoing packet information and enables traversal through the cell-link structrure.\nThe index to this table are MMU port numbers  as below :\n0-31    : General Ports (Ethernet/HiGig)\n32      : CPU port\n33      : Loopback port\n34-35   : Unused\n36-39   : MMU internal purge ports",
    /* MMU_PDB_X_XPE1            */ "This memory contains the per port database of PDB_X for ongoing packet information and enables traversal through the cell-link structrure.\nThe index to this table are MMU port numbers  as below :\n0-31    : General Ports (Ethernet/HiGig)\n32      : CPU port\n33      : Loopback port\n34-35   : Unused\n36-39   : MMU internal purge ports",
    /* MMU_PDB_X_XPE2            */ "This memory contains the per port database of PDB_X for ongoing packet information and enables traversal through the cell-link structrure.\nThe index to this table are MMU port numbers  as below :\n0-31    : General Ports (Ethernet/HiGig)\n32      : CPU port\n33      : Loopback port\n34-35   : Unused\n36-39   : MMU internal purge ports",
    /* MMU_PDB_X_XPE3            */ "This memory contains the per port database of PDB_X for ongoing packet information and enables traversal through the cell-link structrure.\nThe index to this table are MMU port numbers  as below :\n0-31    : General Ports (Ethernet/HiGig)\n32      : CPU port\n33      : Loopback port\n34-35   : Unused\n36-39   : MMU internal purge ports",
    /* MMU_PDB_Y                 */ "This memory contains the per port database of PDB_Y for ongoing packet information and enables traversal through the cell-link structrure.\nThe index to this table are MMU port numbers  as below :\n0-31    : General Ports (Ethernet/HiGig)\n32      : CPU port\n33      : Loopback port\n34-35   : Unused\n36-39   : MMU internal purge ports",
    /* MMU_PDB_Y_XPE0            */ "This memory contains the per port database of PDB_Y for ongoing packet information and enables traversal through the cell-link structrure.\nThe index to this table are MMU port numbers  as below :\n0-31    : General Ports (Ethernet/HiGig)\n32      : CPU port\n33      : Loopback port\n34-35   : Unused\n36-39   : MMU internal purge ports",
    /* MMU_PDB_Y_XPE1            */ "This memory contains the per port database of PDB_Y for ongoing packet information and enables traversal through the cell-link structrure.\nThe index to this table are MMU port numbers  as below :\n0-31    : General Ports (Ethernet/HiGig)\n32      : CPU port\n33      : Loopback port\n34-35   : Unused\n36-39   : MMU internal purge ports",
    /* MMU_PDB_Y_XPE2            */ "This memory contains the per port database of PDB_Y for ongoing packet information and enables traversal through the cell-link structrure.\nThe index to this table are MMU port numbers  as below :\n0-31    : General Ports (Ethernet/HiGig)\n32      : CPU port\n33      : Loopback port\n34-35   : Unused\n36-39   : MMU internal purge ports",
    /* MMU_PDB_Y_XPE3            */ "This memory contains the per port database of PDB_Y for ongoing packet information and enables traversal through the cell-link structrure.\nThe index to this table are MMU port numbers  as below :\n0-31    : General Ports (Ethernet/HiGig)\n32      : CPU port\n33      : Loopback port\n34-35   : Unused\n36-39   : MMU internal purge ports",
    /* MMU_PFAP_MEM              */ "Packet Pointer Free Address Pool RAM",
    /* MMU_PKTHDR                */ "CBP Packet Header RAM",
    /* MMU_PKTHDR_XPE0           */ "The Packet Header memory is used to store certain packet information that is generated by the MMU, and is needed when the packet is dequeued.",
    /* MMU_PKTHDR_XPE1           */ "The Packet Header memory is used to store certain packet information that is generated by the MMU, and is needed when the packet is dequeued.",
    /* MMU_PKTHDR_XPE2           */ "The Packet Header memory is used to store certain packet information that is generated by the MMU, and is needed when the packet is dequeued.",
    /* MMU_PKTHDR_XPE3           */ "The Packet Header memory is used to store certain packet information that is generated by the MMU, and is needed when the packet is dequeued.",
    /* MMU_PKTLINK               */ "PKTLINK",
    /* MMU_PKTLINK0              */ "PKTLINK0",
    /* MMU_PKTLINK1              */ "PKTLINK1",
    /* MMU_PKTLINK2              */ "PKTLINK2",
    /* MMU_PKTLINK3              */ "PKTLINK3",
    /* MMU_PKTLINK4              */ "PKTLINK4",
    /* MMU_PKTLINK5              */ "PKTLINK5",
    /* MMU_PKTLINK6              */ "PKTLINK6",
    /* MMU_PKTLINK7              */ "PKTLINK7",
    /* MMU_PKTLINK8              */ "PKTLINK8",
    /* MMU_PKTLINK9              */ "PKTLINK9",
    /* MMU_PKTLINK10             */ "PKTLINK10",
    /* MMU_PKTLINK11             */ "PKTLINK11",
    /* MMU_PKTLINK12             */ "PKTLINK12",
    /* MMU_PKTLINK13             */ "PKTLINK13",
    /* MMU_PKTLINK14             */ "PKTLINK14",
    /* MMU_PKTLINK15             */ "PKTLINK15",
    /* MMU_PKTLINK16             */ "PKTLINK16",
    /* MMU_PKTLINK17             */ "PKTLINK17",
    /* MMU_PKTLINK18             */ "PKTLINK18",
    /* MMU_PKTLINK19             */ "PKTLINK19",
    /* MMU_PKTLINK20             */ "PKTLINK20",
    /* MMU_PKTLINK21             */ "PKTLINK21",
    /* MMU_PKTLINK22             */ "PKTLINK22",
    /* MMU_PKTLINK23             */ "PKTLINK23",
    /* MMU_PKTLINK24             */ "PKTLINK24",
    /* MMU_PKTLINK25             */ "PKTLINK25",
    /* MMU_PKTLINK26             */ "PKTLINK26",
    /* MMU_PKTLINK27             */ "PKTLINK27",
    /* MMU_PKTLINK28             */ "PKTLINK28",
    /* MMU_PKTLINK29             */ "PKTLINK29",
    /* MMU_PKTLINK30             */ "PKTLINK30",
    /* MMU_PKTLINK31             */ "PKTLINK31",
    /* MMU_PKTLINK32             */ "PKTLINK32",
    /* MMU_PKTLINK33             */ "PKTLINK33",
    /* MMU_PKTLINK34             */ "PKTLINK34",
    /* MMU_PKTLINK35             */ "PKTLINK35",
    /* MMU_PKTLINK36             */ "PKTLINK36",
    /* MMU_PKTLINK37             */ "PKTLINK37",
    /* MMU_PKTLINK38             */ "PKTLINK38",
    /* MMU_PKTLINK39             */ "PKTLINK39",
    /* MMU_PKTLINK40             */ "PKTLINK40",
    /* MMU_PKTLINK41             */ "PKTLINK41",
    /* MMU_PKTLINK42             */ "PKTLINK42",
    /* MMU_PKTLINK43             */ "PKTLINK43",
    /* MMU_PKTLINK44             */ "PKTLINK44",
    /* MMU_PKTLINK45             */ "PKTLINK45",
    /* MMU_PKTLINK46             */ "PKTLINK46",
    /* MMU_PKTLINK47             */ "PKTLINK47",
    /* MMU_PKTLINK48             */ "PKTLINK48",
    /* MMU_PKTLINK49             */ "PKTLINK49",
    /* MMU_PKTLINK50             */ "PKTLINK50",
    /* MMU_PKTLINK51             */ "PKTLINK51",
    /* MMU_PKTLINK52             */ "PKTLINK52",
    /* MMU_PKTLINK53             */ "PKTLINK53",
    /* MMU_PKTLINK54             */ "PKTLINK54",
    /* MMU_PKT_LINK              */ "PKT_LINK",
    /* MMU_PKT_LINK_XPE0         */ "Packet link memory.  This is a working FIFO maintained by hardware.",
    /* MMU_PKT_LINK_XPE1         */ "Packet link memory.  This is a working FIFO maintained by hardware.",
    /* MMU_PKT_LINK_XPE2         */ "Packet link memory.  This is a working FIFO maintained by hardware.",
    /* MMU_PKT_LINK_XPE3         */ "Packet link memory.  This is a working FIFO maintained by hardware.",
    /* MMU_PORTCNT               */ "",
    /* MMU_PORTCNT_XPE0          */ "The Port Count memory is used to store certain packet information that is computed by the MMU, and is needed when the packet is dequeued.",
    /* MMU_PORTCNT_XPE1          */ "The Port Count memory is used to store certain packet information that is computed by the MMU, and is needed when the packet is dequeued.",
    /* MMU_PORTCNT_XPE2          */ "The Port Count memory is used to store certain packet information that is computed by the MMU, and is needed when the packet is dequeued.",
    /* MMU_PORTCNT_XPE3          */ "The Port Count memory is used to store certain packet information that is computed by the MMU, and is needed when the packet is dequeued.",
    /* MMU_PQE0_MEM              */ "Central Purge Queue RAM",
    /* MMU_PQE0_MEM_XPE0         */ "Central Purge Queue RAM",
    /* MMU_PQE0_MEM_XPE1         */ "Central Purge Queue RAM",
    /* MMU_PQE0_MEM_XPE2         */ "Central Purge Queue RAM",
    /* MMU_PQE0_MEM_XPE3         */ "Central Purge Queue RAM",
    /* MMU_PQE1_MEM              */ "Central Purge Queue RAM",
    /* MMU_PQE1_MEM_XPE0         */ "Central Purge Queue RAM",
    /* MMU_PQE1_MEM_XPE1         */ "Central Purge Queue RAM",
    /* MMU_PQE1_MEM_XPE2         */ "Central Purge Queue RAM",
    /* MMU_PQE1_MEM_XPE3         */ "Central Purge Queue RAM",
    /* MMU_PQE_MEM               */ "Central Purge Queue RAM",
    /* MMU_PQE_MEM0              */ "Central Purge Queue RAM",
    /* MMU_PQE_MEM1              */ "Central Purge Queue RAM",
    /* MMU_PROT_GROUP_TABLE      */ "MMU_PROT_GROUP_TABLE arranged as 32 entries per 1 word indexed by MMU_INITIAL_NHOP_TBL.PROT_GRP_IDX0[9:5]",
    /* MMU_QCN_CNM_COUNTER       */ "QCN CNM Counter per CP Queue.",
    /* MMU_QCN_CNM_QUEUE         */ "QCN CNM queue memory",
    /* MMU_QCN_CNM_QUEUE0        */ "QCN CNM queue.",
    /* MMU_QCN_CNM_QUEUE1        */ "QCN CNM queue.",
    /* MMU_QCN_CPQCFG            */ "Memory address = dest_port_num\nCPQ configuration",
    /* MMU_QCN_CPQST_QLEN        */ "Per CPQ state memory for Q length and jitter.",
    /* MMU_QCN_CPQST_TSSLS       */ "Per CPQ state memory for TSSLS.",
    /* MMU_QCN_ENABLE            */ "Memory address = dest_port_num\nto enable or disable QCN on per cos queue basis,\nand assign CPQ_index to each QCN enalbed queue (0 or 1).\nOnly up to two CPQs enalbed per egress port.",
    /* MMU_QCN_ENABLE_0          */ "Memory address = unicast queue number  (11bits)\n0-1479     unicast queues on PIPEx\nEnable or disable QCN on per unicast queue basis,\nand assign CPQ_ID to each QCN enalbed queue .\nOnly support up to  1480 CPQs per chip.",
    /* MMU_QCN_ENABLE_1          */ "Memory address = unicast queue number  (11bits)\n0-1479     unicast queues on PIPEy\nEnable or disable QCN on per unicast queue basis,\nand assign CPQ_ID to each QCN enalbed queue .\nOnly support up to 1480  CPQs per chip.",
    /* MMU_QCN_QFBTB             */ "The Table to map QuantizedFb[5:0] from PreQntzFb[6:0].\nThere are eight different choices per PreQntzFb.",
    /* MMU_QCN_QLEN_SHADOW       */ "Shadow copy of ThDO Unicast queue length in QCN block.",
    /* MMU_QCN_QLEN_SHADOW0      */ "Unicast queue length PIPEx.",
    /* MMU_QCN_QLEN_SHADOW1      */ "Unicast queue length PIPEy.",
    /* MMU_QCN_SITB              */ "Sample Interval Table.\nTwo Tables, each has 64 entries.",
    /* MMU_QSTRUCT_QBLOCK_BM_0   */ "QBLOCK_BM DATABASE",
    /* MMU_QSTRUCT_QBLOCK_BM_1   */ "QBLOCK_BM DATABASE",
    /* MMU_QSTRUCT_QBLOCK_BM_2   */ "QBLOCK_BM DATABASE",
    /* MMU_QSTRUCT_QBLOCK_BM_3   */ "QBLOCK_BM DATABASE",
    /* MMU_QSTRUCT_QBLOCK_BM_FIFO_0 */ "QBLOCK_BM_FIFO DATABASE",
    /* MMU_QSTRUCT_QBLOCK_BM_FIFO_1 */ "QBLOCK_BM_FIFO DATABASE",
    /* MMU_QSTRUCT_QBLOCK_BM_FIFO_2 */ "QBLOCK_BM_FIFO DATABASE",
    /* MMU_QSTRUCT_QBLOCK_BM_FIFO_3 */ "QBLOCK_BM_FIFO DATABASE",
    /* MMU_QSTRUCT_QBLOCK_NEXT   */ "QBLOCK_NEXT DATABASE",
    /* MMU_QSTRUCT_QBLOCK_NEXT_0 */ "QBLOCK_NEXT DATABASE",
    /* MMU_QSTRUCT_QBLOCK_NEXT_1 */ "QBLOCK_NEXT DATABASE",
    /* MMU_QSTRUCT_QBLOCK_NEXT_2 */ "QBLOCK_NEXT DATABASE",
    /* MMU_QSTRUCT_QBLOCK_NEXT_3 */ "QBLOCK_NEXT DATABASE",
    /* MMU_QSTRUCT_QBLOCK_NEXT_4 */ "QBLOCK_NEXT DATABASE",
    /* MMU_QSTRUCT_QBLOCK_NEXT_5 */ "QBLOCK_NEXT DATABASE",
    /* MMU_QSTRUCT_QBLOCK_NEXT_6 */ "QBLOCK_NEXT DATABASE",
    /* MMU_QSTRUCT_QBLOCK_NEXT_7 */ "QBLOCK_NEXT DATABASE",
    /* MMU_QSTRUCT_QENTRY        */ "QENTRY DATABASE",
    /* MMU_QSTRUCT_QENTRY_LOWER_0 */ "QENTRY DATABASE",
    /* MMU_QSTRUCT_QENTRY_LOWER_1 */ "QENTRY DATABASE",
    /* MMU_QSTRUCT_QENTRY_LOWER_2 */ "QENTRY DATABASE",
    /* MMU_QSTRUCT_QENTRY_LOWER_3 */ "QENTRY DATABASE",
    /* MMU_QSTRUCT_QENTRY_LOWER_4 */ "QENTRY DATABASE",
    /* MMU_QSTRUCT_QENTRY_LOWER_5 */ "QENTRY DATABASE",
    /* MMU_QSTRUCT_QENTRY_LOWER_6 */ "QENTRY DATABASE",
    /* MMU_QSTRUCT_QENTRY_LOWER_7 */ "QENTRY DATABASE",
    /* MMU_QSTRUCT_QENTRY_UPPER_0 */ "QENTRY_UPPER DATABASE",
    /* MMU_QSTRUCT_QENTRY_UPPER_1 */ "QENTRY_UPPER DATABASE",
    /* MMU_QSTRUCT_QENTRY_UPPER_2 */ "QENTRY_UPPER DATABASE",
    /* MMU_QSTRUCT_QENTRY_UPPER_3 */ "QENTRY_UPPER DATABASE",
    /* MMU_QSTRUCT_QENTRY_UPPER_4 */ "QENTRY_UPPER DATABASE",
    /* MMU_QSTRUCT_QENTRY_UPPER_5 */ "QENTRY_UPPER DATABASE",
    /* MMU_QSTRUCT_QENTRY_UPPER_6 */ "QENTRY_UPPER DATABASE",
    /* MMU_QSTRUCT_QENTRY_UPPER_7 */ "QENTRY_UPPER DATABASE",
    /* MMU_RAFA                  */ "RAFA",
    /* MMU_RAFA_RADDR_STATUS     */ "RAF RADDR + STATUS Indirect Mechanism.",
    /* MMU_RAFB                  */ "RAFB",
    /* MMU_RAFB_RADDR_STATUS     */ "RAF RADDR + STATUS Indirect Mechanism.",
    /* MMU_RAFC                  */ "RAFC",
    /* MMU_RAFC_RADDR_STATUS     */ "RAF RADDR + STATUS Indirect Mechanism.",
    /* MMU_RAFD_RADDR_STATUS     */ "RAF RADDR + STATUS Indirect Mechanism.",
    /* MMU_RAFE_RADDR_STATUS     */ "RAF RADDR + STATUS Indirect Mechanism.",
    /* MMU_RAFF_RADDR_STATUS     */ "RAF RADDR + STATUS Indirect Mechanism.",
    /* MMU_RAFG_RADDR_STATUS     */ "RAF RADDR + STATUS Indirect Mechanism.",
    /* MMU_RAFH_RADDR_STATUS     */ "RAF RADDR + STATUS Indirect Mechanism.",
    /* MMU_RAF_WADDR             */ "RAF WADDR Indirect Mechanism.",
    /* MMU_RDEHEADER_MEM0        */ "Re-direct Packet Pass-Through Header MEM0",
    /* MMU_RDEHEADER_MEM1        */ "Re-direct Packet Pass-Through Header MEM1",
    /* MMU_RDE_ADM_DPC_STORE_MEM */ "RDE ADM needs to store some info per DPC",
    /* MMU_RDE_CFIFO_MEM0        */ "DEQ to RDE Cell deallocation info",
    /* MMU_RDE_CFIFO_MEM1        */ "DEQ to RDE cell deallocation info",
    /* MMU_RDE_COSPCP_MEM        */ "Per PG_CoS Packet Redirect Count Table",
    /* MMU_RDE_DESCP_MEM         */ "Redirect Packet Descriptor",
    /* MMU_RDE_FREEDESCPLIST_MEM */ "Redirect FREE List",
    /* MMU_RDE_FREELIST_MEM      */ "Redirect FREE List",
    /* MMU_RDE_FREEPKTLIST_MEM   */ "Redirect FREE List",
    /* MMU_RDE_ITE_REL_FIFO_MEM  */ "DEQ to RDE Cell deallocation info",
    /* MMU_RDE_PKTLINK_MEM       */ "Redirect Packet Link",
    /* MMU_RDE_PQE_FIFO_MEM      */ "DEQ to RDE Cell deallocation info",
    /* MMU_RDE_PRCP_MEM          */ "Packet Redirect Copy Count Table",
    /* MMU_RDE_REAL_CELL_FIFO_MEM */ "DEQ to RDE Cell deallocation info",
    /* MMU_RDE_TXQ_FLL           */ "Free Pointer Block Link List",
    /* MMU_RDE_TXQ_QLL           */ "Queue Pointer Block Link List",
    /* MMU_RDE_TXQ_STATE         */ "Store the packet details from ENQ",
    /* MMU_RDFA                  */ "RDFA",
    /* MMU_RDFA_WADDR_STATUS     */ "RDF WADDR + STATUS Indirect Mechanism.",
    /* MMU_RDFB                  */ "RDFB",
    /* MMU_RDFB_WADDR_STATUS     */ "RDF WADDR + STATUS Indirect Mechanism.",
    /* MMU_RDFC                  */ "RDFC",
    /* MMU_RDFC_WADDR_STATUS     */ "RDF WADDR + STATUS Indirect Mechanism.",
    /* MMU_RDFD_WADDR_STATUS     */ "RDF WADDR + STATUS Indirect Mechanism.",
    /* MMU_RDFE_WADDR_STATUS     */ "RDF WADDR + STATUS Indirect Mechanism.",
    /* MMU_RDFF_WADDR_STATUS     */ "RDF WADDR + STATUS Indirect Mechanism.",
    /* MMU_RDFG_WADDR_STATUS     */ "RDF WADDR + STATUS Indirect Mechanism.",
    /* MMU_RDFH_WADDR_STATUS     */ "RDF WADDR + STATUS Indirect Mechanism.",
    /* MMU_RDF_RADDR             */ "RDF RADDR Indirect Mechanism.",
    /* MMU_RD_DATA_MEM           */ "Memory to store the Data after the async fifo on the read data path",
    /* MMU_RD_FBC_DATA_MEM       */ "Memory to store the Fbc Data after the async fifo on the read data path",
    /* MMU_REPL_GROUP            */ "Replication group table",
    /* MMU_REPL_GROUP_INFO0      */ "REPL_GROUP_INFO0",
    /* MMU_REPL_GROUP_INFO1      */ "REPL_GROUP_INFO1",
    /* MMU_REPL_GROUP_INFO_TBL   */ "REPL_GROUP_INFO_TBL",
    /* MMU_REPL_GROUP_INFO_TBL_PIPE0 */ "REPL_GROUP_INFO_TBL",
    /* MMU_REPL_GROUP_INFO_TBL_PIPE1 */ "REPL_GROUP_INFO_TBL",
    /* MMU_REPL_GROUP_INFO_TBL_PIPE2 */ "REPL_GROUP_INFO_TBL",
    /* MMU_REPL_GROUP_INFO_TBL_PIPE3 */ "REPL_GROUP_INFO_TBL",
    /* MMU_REPL_GROUP_INITIAL_COPY_COUNT */ "Replication Group Initial Copy Count. Values are in physical port domain.",
    /* MMU_REPL_GROUP_INITIAL_COPY_COUNT0 */ "Replication Group Initial Copy Count. Values are in physical port domain.",
    /* MMU_REPL_GROUP_INITIAL_COPY_COUNT1 */ "Replication Group Initial Copy Count. Values are in physical port domain.",
    /* MMU_REPL_GROUP_INITIAL_COPY_COUNT0_SC0 */ "Replication Group Initial Copy Count. Values are in physical port domain.",
    /* MMU_REPL_GROUP_INITIAL_COPY_COUNT0_SC1 */ "Replication Group Initial Copy Count. Values are in physical port domain.",
    /* MMU_REPL_GROUP_INITIAL_COPY_COUNT1_SC0 */ "Replication Group Initial Copy Count. Values are in physical port domain.",
    /* MMU_REPL_GROUP_INITIAL_COPY_COUNT1_SC1 */ "Replication Group Initial Copy Count. Values are in physical port domain.",
    /* MMU_REPL_GROUP_INITIAL_COPY_COUNT_SC0 */ "Replication Group Initial Copy Count. Values are in physical port domain.",
    /* MMU_REPL_GROUP_INITIAL_COPY_COUNT_SC1 */ "Replication Group Initial Copy Count. Values are in physical port domain.",
    /* MMU_REPL_GRP_TBL          */ "IPMC Replication Group Table",
    /* MMU_REPL_GRP_TBL0         */ "IPMC Replication Group Table 0",
    /* MMU_REPL_GRP_TBL1         */ "IPMC Replication Group Table 1",
    /* MMU_REPL_GRP_TBL2         */ "IPMC Replication Group Table 2",
    /* MMU_REPL_HEAD_TBL         */ "IPMC Replication Head Table",
    /* MMU_REPL_HEAD_TBL_PIPE0   */ "REPL_HEAD_PIPE0",
    /* MMU_REPL_HEAD_TBL_PIPE1   */ "REPL_HEAD_PIPE1",
    /* MMU_REPL_HEAD_TBL_PIPE2   */ "REPL_HEAD",
    /* MMU_REPL_HEAD_TBL_PIPE3   */ "REPL_HEAD",
    /* MMU_REPL_LIST_TBL         */ "IPMC Replication List LSB Bitmap Table",
    /* MMU_REPL_LIST_TBL_PIPE0   */ "IPMC Replication List LSB Bitmap Table",
    /* MMU_REPL_LIST_TBL_PIPE1   */ "IPMC Replication List LSB Bitmap Table",
    /* MMU_REPL_LIST_TBL_PIPE2   */ "IPMC Replication List LSB Bitmap Table",
    /* MMU_REPL_LIST_TBL_PIPE3   */ "IPMC Replication List LSB Bitmap Table",
    /* MMU_REPL_MAP_TBL          */ "TOQ REPL_MAP Database, memory : Configuration database for mapping DEQ_PKT_CONTEXT to DEST_PPP",
    /* MMU_REPL_STATE_TBL        */ "replication state of the MCQS",
    /* MMU_REPL_STATE_TBL_PIPE0  */ "replication state of the MCQS",
    /* MMU_REPL_STATE_TBL_PIPE1  */ "replication state of the MCQS",
    /* MMU_REPL_STATE_TBL_PIPE2  */ "replication state of the MCQS, Addressed per physical multicast gueue, (384 mc queues per layer) x (2 layers) = 768 entries per pipe. There are actually 378 mc queues per layer, however the physical memory used is 384 entries.  Address 0-383 is for layer A, address 384-767 is for layer B",
    /* MMU_REPL_STATE_TBL_PIPE3  */ "replication state of the MCQS, Addressed per physical multicast gueue, (384 mc queues per layer) x (2 layers) = 768 entries per pipe. There are actually 378 mc queues per layer, however the physical memory used is 384 entries.  Address 0-383 is for layer A, address 384-767 is for layer B",
    /* MMU_RFAFA                 */ "RFAFA",
    /* MMU_RFAFB                 */ "RFAFB",
    /* MMU_RFAFC                 */ "RFAFC",
    /* MMU_RFDFA                 */ "RFDFA",
    /* MMU_RFDFB                 */ "RFDFB",
    /* MMU_RFDFC                 */ "RFDFC",
    /* MMU_RPFAP_BITMAP          */ "Redirect Packet-header Free Address Pool Bitmap",
    /* MMU_RPFAP_STACK           */ "Redirect Packet-header Free Address Pool Stack",
    /* MMU_RQE_QMGR_FLL          */ "Free+Queue Block Link List",
    /* MMU_RQE_QMGR_QLL          */ "Free+Queue Block Link List",
    /* MMU_RQE_QUEUE_OP_NODE_MAP */ "Queue to OP NODE mapping table",
    /* MMU_RQE_WORK_QUEUE        */ "Store the packet details from ENQ",
    /* MMU_SCFG_MEM_FAIL_ADDR_64 */ "Memory Fail address FIFO",
    /* MMU_SCFG_MEM_FAIL_ADDR_64_SC0 */ "Memory Fail address FIFO",
    /* MMU_SCFG_MEM_FAIL_ADDR_64_SC1 */ "Memory Fail address FIFO",
    /* MMU_SEDCFG_MEM_FAIL_ADDR_64 */ "Memory Fail address FIFO",
    /* MMU_SEDCFG_MEM_FAIL_ADDR_64_SC0 */ "Memory Fail address FIFO",
    /* MMU_SEDCFG_MEM_FAIL_ADDR_64_SC1 */ "Memory Fail address FIFO",
    /* MMU_SM                    */ "Signature Matching RAM",
    /* MMU_TCB_BUFFER_CELL_DATA_LOWER */ "Transient Capture Buffer lower 220b",
    /* MMU_TCB_BUFFER_CELL_DATA_LOWER_XPE0 */ "Transient Capture Buffer lower 220b",
    /* MMU_TCB_BUFFER_CELL_DATA_LOWER_XPE1 */ "Transient Capture Buffer lower 220b",
    /* MMU_TCB_BUFFER_CELL_DATA_LOWER_XPE2 */ "Transient Capture Buffer lower 220b",
    /* MMU_TCB_BUFFER_CELL_DATA_LOWER_XPE3 */ "Transient Capture Buffer lower 220b",
    /* MMU_TCB_BUFFER_CELL_DATA_SCRATCH_LOWER */ "Transient Capture Buffer 80B",
    /* MMU_TCB_BUFFER_CELL_DATA_SCRATCH_LOWER_SED0_PIPE0 */ "Transient Capture Buffer 80B",
    /* MMU_TCB_BUFFER_CELL_DATA_SCRATCH_LOWER_SED0_PIPE1 */ "Transient Capture Buffer 80B",
    /* MMU_TCB_BUFFER_CELL_DATA_SCRATCH_LOWER_SED0_PIPE2 */ "Transient Capture Buffer 80B",
    /* MMU_TCB_BUFFER_CELL_DATA_SCRATCH_LOWER_SED0_PIPE3 */ "Transient Capture Buffer 80B",
    /* MMU_TCB_BUFFER_CELL_DATA_SCRATCH_LOWER_SED1_PIPE0 */ "Transient Capture Buffer 80B",
    /* MMU_TCB_BUFFER_CELL_DATA_SCRATCH_LOWER_SED1_PIPE1 */ "Transient Capture Buffer 80B",
    /* MMU_TCB_BUFFER_CELL_DATA_SCRATCH_LOWER_SED1_PIPE2 */ "Transient Capture Buffer 80B",
    /* MMU_TCB_BUFFER_CELL_DATA_SCRATCH_LOWER_SED1_PIPE3 */ "Transient Capture Buffer 80B",
    /* MMU_TCB_BUFFER_CELL_DATA_SCRATCH_UPPER */ "Transient Capture Buffer 80B",
    /* MMU_TCB_BUFFER_CELL_DATA_SCRATCH_UPPER_SED0_PIPE0 */ "Transient Capture Buffer 80B",
    /* MMU_TCB_BUFFER_CELL_DATA_SCRATCH_UPPER_SED0_PIPE1 */ "Transient Capture Buffer 80B",
    /* MMU_TCB_BUFFER_CELL_DATA_SCRATCH_UPPER_SED0_PIPE2 */ "Transient Capture Buffer 80B",
    /* MMU_TCB_BUFFER_CELL_DATA_SCRATCH_UPPER_SED0_PIPE3 */ "Transient Capture Buffer 80B",
    /* MMU_TCB_BUFFER_CELL_DATA_SCRATCH_UPPER_SED1_PIPE0 */ "Transient Capture Buffer 80B",
    /* MMU_TCB_BUFFER_CELL_DATA_SCRATCH_UPPER_SED1_PIPE1 */ "Transient Capture Buffer 80B",
    /* MMU_TCB_BUFFER_CELL_DATA_SCRATCH_UPPER_SED1_PIPE2 */ "Transient Capture Buffer 80B",
    /* MMU_TCB_BUFFER_CELL_DATA_SCRATCH_UPPER_SED1_PIPE3 */ "Transient Capture Buffer 80B",
    /* MMU_TCB_BUFFER_CELL_DATA_UPPER */ "Transient Capture Buffer upper 420b",
    /* MMU_TCB_BUFFER_CELL_DATA_UPPER_XPE0 */ "Transient Capture Buffer upper 420b",
    /* MMU_TCB_BUFFER_CELL_DATA_UPPER_XPE1 */ "Transient Capture Buffer upper 420b",
    /* MMU_TCB_BUFFER_CELL_DATA_UPPER_XPE2 */ "Transient Capture Buffer upper 420b",
    /* MMU_TCB_BUFFER_CELL_DATA_UPPER_XPE3 */ "Transient Capture Buffer upper 420b",
    /* MMU_THDM_DB_POOL_MCUC_PKSTAT */ "PKSTAT Stat for shared use count of each service pool.",
    /* MMU_THDM_DB_POOL_MCUC_PKSTAT_XPE0 */ "PKSTAT Stat for shared use count of each service pool.",
    /* MMU_THDM_DB_POOL_MCUC_PKSTAT_XPE1 */ "PKSTAT Stat for shared use count of each service pool.",
    /* MMU_THDM_DB_POOL_MCUC_PKSTAT_XPE2 */ "PKSTAT Stat for shared use count of each service pool.",
    /* MMU_THDM_DB_POOL_MCUC_PKSTAT_XPE3 */ "PKSTAT Stat for shared use count of each service pool.",
    /* MMU_THDM_DB_PORTSP_BST    */ "THDM BST counters for per port per pool count.  Ports 0-33 and 4 service pool.  Organization would",
    /* MMU_THDM_DB_PORTSP_BST_0  */ "THDM BST counters for per port per pool count.  Ports 0-53 and 4 service pool.  Organization would",
    /* MMU_THDM_DB_PORTSP_BST_1  */ "THDO BST counters for UC queues.",
    /* MMU_THDM_DB_PORTSP_BST_XPE0_PIPE0 */ "THDM BST counters for per port per pool count.  Ports 0-33 and 4 service pool.  Organization would",
    /* MMU_THDM_DB_PORTSP_BST_XPE0_PIPE1 */ "THDM BST counters for per port per pool count.  Ports 0-33 and 4 service pool.  Organization would",
    /* MMU_THDM_DB_PORTSP_BST_XPE1_PIPE2 */ "THDM BST counters for per port per pool count.  Ports 0-33 and 4 service pool.  Organization would",
    /* MMU_THDM_DB_PORTSP_BST_XPE1_PIPE3 */ "THDM BST counters for per port per pool count.  Ports 0-33 and 4 service pool.  Organization would",
    /* MMU_THDM_DB_PORTSP_BST_XPE2_PIPE0 */ "THDM BST counters for per port per pool count.  Ports 0-33 and 4 service pool.  Organization would",
    /* MMU_THDM_DB_PORTSP_BST_XPE2_PIPE1 */ "THDM BST counters for per port per pool count.  Ports 0-33 and 4 service pool.  Organization would",
    /* MMU_THDM_DB_PORTSP_BST_XPE3_PIPE2 */ "THDM BST counters for per port per pool count.  Ports 0-33 and 4 service pool.  Organization would",
    /* MMU_THDM_DB_PORTSP_BST_XPE3_PIPE3 */ "THDM BST counters for per port per pool count.  Ports 0-33 and 4 service pool.  Organization would",
    /* MMU_THDM_DB_PORTSP_CONFIG */ "THDO configuration for MC Port Pool.",
    /* MMU_THDM_DB_PORTSP_CONFIG_0 */ "THDO configuration for MC Port Pool.",
    /* MMU_THDM_DB_PORTSP_CONFIG_1 */ "THDO configuration for MC Port Pool.",
    /* MMU_THDM_DB_PORTSP_CONFIG_0A */ "THDO configuration for MC Port Pool.",
    /* MMU_THDM_DB_PORTSP_CONFIG_0B */ "THDO configuration for MC Port Pool.",
    /* MMU_THDM_DB_PORTSP_CONFIG_0C */ "THDO configuration for MC Port Pool.",
    /* MMU_THDM_DB_PORTSP_CONFIG_1A */ "THDO configuration for MC Port Pool.",
    /* MMU_THDM_DB_PORTSP_CONFIG_1B */ "THDO configuration for MC Port Pool.",
    /* MMU_THDM_DB_PORTSP_CONFIG_1C */ "THDO configuration for MC Port Pool.",
    /* MMU_THDM_DB_PORTSP_CONFIG_A */ "THDO configuration for MC Port Pool.",
    /* MMU_THDM_DB_PORTSP_CONFIG_A_PIPE0 */ "THDO configuration for MC Port Pool.",
    /* MMU_THDM_DB_PORTSP_CONFIG_A_PIPE1 */ "THDO configuration for MC Port Pool.",
    /* MMU_THDM_DB_PORTSP_CONFIG_A_PIPE2 */ "THDO configuration for MC Port Pool.",
    /* MMU_THDM_DB_PORTSP_CONFIG_A_PIPE3 */ "THDO configuration for MC Port Pool.",
    /* MMU_THDM_DB_PORTSP_CONFIG_B */ "THDO configuration for MC Port Pool.",
    /* MMU_THDM_DB_PORTSP_CONFIG_B_PIPE0 */ "THDO configuration for MC Port Pool.",
    /* MMU_THDM_DB_PORTSP_CONFIG_B_PIPE1 */ "THDO configuration for MC Port Pool.",
    /* MMU_THDM_DB_PORTSP_CONFIG_B_PIPE2 */ "THDO configuration for MC Port Pool.",
    /* MMU_THDM_DB_PORTSP_CONFIG_B_PIPE3 */ "THDO configuration for MC Port Pool.",
    /* MMU_THDM_DB_PORTSP_CONFIG_C */ "THDO configuration for MC Port Pool.",
    /* MMU_THDM_DB_PORTSP_CONFIG_C_PIPE0 */ "THDO configuration for MC Port Pool.",
    /* MMU_THDM_DB_PORTSP_CONFIG_C_PIPE1 */ "THDO configuration for MC Port Pool.",
    /* MMU_THDM_DB_PORTSP_CONFIG_C_PIPE2 */ "THDO configuration for MC Port Pool.",
    /* MMU_THDM_DB_PORTSP_CONFIG_C_PIPE3 */ "THDO configuration for MC Port Pool.",
    /* MMU_THDM_DB_PORTSP_CONFIG_PIPE0 */ "THDO configuration for MC Port Pool.",
    /* MMU_THDM_DB_PORTSP_CONFIG_PIPE1 */ "THDO configuration for MC Port Pool.",
    /* MMU_THDM_DB_PORTSP_CONFIG_PIPE2 */ "THDO configuration for MC Port Pool.",
    /* MMU_THDM_DB_PORTSP_CONFIG_PIPE3 */ "THDO configuration for MC Port Pool.",
    /* MMU_THDM_DB_QUEUE_BST     */ "THDO BST counters for UC queues.",
    /* MMU_THDM_DB_QUEUE_BST_0   */ "THDO BST counters for UC queues.",
    /* MMU_THDM_DB_QUEUE_BST_1   */ "THDO BST counters for UC queues.",
    /* MMU_THDM_DB_QUEUE_BST_XPE0_PIPE0 */ "THDO BST counters for UC queues.",
    /* MMU_THDM_DB_QUEUE_BST_XPE0_PIPE1 */ "THDO BST counters for UC queues.",
    /* MMU_THDM_DB_QUEUE_BST_XPE1_PIPE2 */ "THDO BST counters for UC queues.",
    /* MMU_THDM_DB_QUEUE_BST_XPE1_PIPE3 */ "THDO BST counters for UC queues.",
    /* MMU_THDM_DB_QUEUE_BST_XPE2_PIPE0 */ "THDO BST counters for UC queues.",
    /* MMU_THDM_DB_QUEUE_BST_XPE2_PIPE1 */ "THDO BST counters for UC queues.",
    /* MMU_THDM_DB_QUEUE_BST_XPE3_PIPE2 */ "THDO BST counters for UC queues.",
    /* MMU_THDM_DB_QUEUE_BST_XPE3_PIPE3 */ "THDO BST counters for UC queues.",
    /* MMU_THDM_DB_QUEUE_CONFIG  */ "THDO configuration for MC queues.",
    /* MMU_THDM_DB_QUEUE_CONFIG_0 */ "THDO configuration for MC queues.",
    /* MMU_THDM_DB_QUEUE_CONFIG_1 */ "THDO configuration for MC queues.",
    /* MMU_THDM_DB_QUEUE_CONFIG_0A */ "THDM queue configuration for MC queues.",
    /* MMU_THDM_DB_QUEUE_CONFIG_0B */ "THDM queue configuration for MC queues.",
    /* MMU_THDM_DB_QUEUE_CONFIG_0C */ "THDM queue configuration for MC queues.",
    /* MMU_THDM_DB_QUEUE_CONFIG_1A */ "THDM queue configuration for MC queues.",
    /* MMU_THDM_DB_QUEUE_CONFIG_1B */ "THDM queue configuration for MC queues.",
    /* MMU_THDM_DB_QUEUE_CONFIG_1C */ "THDM queue configuration for MC queues.",
    /* MMU_THDM_DB_QUEUE_CONFIG_A */ "THDM queue configuration for MC queues.",
    /* MMU_THDM_DB_QUEUE_CONFIG_A_PIPE0 */ "THDM queue configuration for MC queues.",
    /* MMU_THDM_DB_QUEUE_CONFIG_A_PIPE1 */ "THDM queue configuration for MC queues.",
    /* MMU_THDM_DB_QUEUE_CONFIG_A_PIPE2 */ "THDM queue configuration for MC queues.",
    /* MMU_THDM_DB_QUEUE_CONFIG_A_PIPE3 */ "THDM queue configuration for MC queues.",
    /* MMU_THDM_DB_QUEUE_CONFIG_B */ "THDM queue configuration for MC queues.",
    /* MMU_THDM_DB_QUEUE_CONFIG_B_PIPE0 */ "THDM queue configuration for MC queues.",
    /* MMU_THDM_DB_QUEUE_CONFIG_B_PIPE1 */ "THDM queue configuration for MC queues.",
    /* MMU_THDM_DB_QUEUE_CONFIG_B_PIPE2 */ "THDM queue configuration for MC queues.",
    /* MMU_THDM_DB_QUEUE_CONFIG_B_PIPE3 */ "THDM queue configuration for MC queues.",
    /* MMU_THDM_DB_QUEUE_CONFIG_C */ "THDM queue configuration for MC queues.",
    /* MMU_THDM_DB_QUEUE_CONFIG_C_PIPE0 */ "THDM queue configuration for MC queues.",
    /* MMU_THDM_DB_QUEUE_CONFIG_C_PIPE1 */ "THDM queue configuration for MC queues.",
    /* MMU_THDM_DB_QUEUE_CONFIG_C_PIPE2 */ "THDM queue configuration for MC queues.",
    /* MMU_THDM_DB_QUEUE_CONFIG_C_PIPE3 */ "THDM queue configuration for MC queues.",
    /* MMU_THDM_DB_QUEUE_CONFIG_PIPE0 */ "THDO configuration for MC queues.",
    /* MMU_THDM_DB_QUEUE_CONFIG_PIPE1 */ "THDO configuration for MC queues.",
    /* MMU_THDM_DB_QUEUE_CONFIG_PIPE2 */ "THDO configuration for MC queues.",
    /* MMU_THDM_DB_QUEUE_CONFIG_PIPE3 */ "THDO configuration for MC queues.",
    /* MMU_THDM_DB_QUEUE_COUNT   */ "THDO counters for UC queues.",
    /* MMU_THDM_DB_QUEUE_COUNT_0 */ "THDO counters for UC queues.",
    /* MMU_THDM_DB_QUEUE_COUNT_1 */ "THDO counters for MC queues.",
    /* MMU_THDM_DB_QUEUE_COUNT_XPE0_PIPE0 */ "THDO counters for UC queues.",
    /* MMU_THDM_DB_QUEUE_COUNT_XPE0_PIPE1 */ "THDO counters for UC queues.",
    /* MMU_THDM_DB_QUEUE_COUNT_XPE1_PIPE2 */ "THDO counters for UC queues.",
    /* MMU_THDM_DB_QUEUE_COUNT_XPE1_PIPE3 */ "THDO counters for UC queues.",
    /* MMU_THDM_DB_QUEUE_COUNT_XPE2_PIPE0 */ "THDO counters for UC queues.",
    /* MMU_THDM_DB_QUEUE_COUNT_XPE2_PIPE1 */ "THDO counters for UC queues.",
    /* MMU_THDM_DB_QUEUE_COUNT_XPE3_PIPE2 */ "THDO counters for UC queues.",
    /* MMU_THDM_DB_QUEUE_COUNT_XPE3_PIPE3 */ "THDO counters for UC queues.",
    /* MMU_THDM_DB_QUEUE_OFFSET  */ "THDO queue offset for UC queues.",
    /* MMU_THDM_DB_QUEUE_OFFSET_0 */ "THDO queue offset for UC queues.",
    /* MMU_THDM_DB_QUEUE_OFFSET_1 */ "THDO queue offset for UC queues.",
    /* MMU_THDM_DB_QUEUE_OFFSET_0A */ "THDM queue offset config for MC queues.",
    /* MMU_THDM_DB_QUEUE_OFFSET_0B */ "THDM queue offset config for MC queues.",
    /* MMU_THDM_DB_QUEUE_OFFSET_0C */ "THDM queue offset config for MC queues.",
    /* MMU_THDM_DB_QUEUE_OFFSET_1A */ "THDM queue offset config for MC queues.",
    /* MMU_THDM_DB_QUEUE_OFFSET_1B */ "THDM queue offset config for MC queues.",
    /* MMU_THDM_DB_QUEUE_OFFSET_1C */ "THDM queue offset config for MC queues.",
    /* MMU_THDM_DB_QUEUE_OFFSET_A */ "THDM queue offset config for MC queues.",
    /* MMU_THDM_DB_QUEUE_OFFSET_A_PIPE0 */ "THDM queue offset config for MC queues.",
    /* MMU_THDM_DB_QUEUE_OFFSET_A_PIPE1 */ "THDM queue offset config for MC queues.",
    /* MMU_THDM_DB_QUEUE_OFFSET_A_PIPE2 */ "THDM queue offset config for MC queues.",
    /* MMU_THDM_DB_QUEUE_OFFSET_A_PIPE3 */ "THDM queue offset config for MC queues.",
    /* MMU_THDM_DB_QUEUE_OFFSET_B */ "THDM queue offset config for MC queues.",
    /* MMU_THDM_DB_QUEUE_OFFSET_B_PIPE0 */ "THDM queue offset config for MC queues.",
    /* MMU_THDM_DB_QUEUE_OFFSET_B_PIPE1 */ "THDM queue offset config for MC queues.",
    /* MMU_THDM_DB_QUEUE_OFFSET_B_PIPE2 */ "THDM queue offset config for MC queues.",
    /* MMU_THDM_DB_QUEUE_OFFSET_B_PIPE3 */ "THDM queue offset config for MC queues.",
    /* MMU_THDM_DB_QUEUE_OFFSET_C */ "THDM queue offset config for MC queues.",
    /* MMU_THDM_DB_QUEUE_OFFSET_C_PIPE0 */ "THDM queue offset config for MC queues.",
    /* MMU_THDM_DB_QUEUE_OFFSET_C_PIPE1 */ "THDM queue offset config for MC queues.",
    /* MMU_THDM_DB_QUEUE_OFFSET_C_PIPE2 */ "THDM queue offset config for MC queues.",
    /* MMU_THDM_DB_QUEUE_OFFSET_C_PIPE3 */ "THDM queue offset config for MC queues.",
    /* MMU_THDM_DB_QUEUE_OFFSET_PIPE0 */ "THDO queue offset for UC queues.",
    /* MMU_THDM_DB_QUEUE_OFFSET_PIPE1 */ "THDO queue offset for UC queues.",
    /* MMU_THDM_DB_QUEUE_OFFSET_PIPE2 */ "THDO queue offset for UC queues.",
    /* MMU_THDM_DB_QUEUE_OFFSET_PIPE3 */ "THDO queue offset for UC queues.",
    /* MMU_THDM_DB_QUEUE_RESUME  */ "THDO queue reset value for UC queues.",
    /* MMU_THDM_DB_QUEUE_RESUME_0 */ "THDO queue reset value for UC queues.",
    /* MMU_THDM_DB_QUEUE_RESUME_1 */ "THDO queue reset value for UC queues.",
    /* MMU_THDM_DB_QUEUE_RESUME_XPE0_PIPE0 */ "THDO queue reset value for UC queues.",
    /* MMU_THDM_DB_QUEUE_RESUME_XPE0_PIPE1 */ "THDO queue reset value for UC queues.",
    /* MMU_THDM_DB_QUEUE_RESUME_XPE1_PIPE2 */ "THDO queue reset value for UC queues.",
    /* MMU_THDM_DB_QUEUE_RESUME_XPE1_PIPE3 */ "THDO queue reset value for UC queues.",
    /* MMU_THDM_DB_QUEUE_RESUME_XPE2_PIPE0 */ "THDO queue reset value for UC queues.",
    /* MMU_THDM_DB_QUEUE_RESUME_XPE2_PIPE1 */ "THDO queue reset value for UC queues.",
    /* MMU_THDM_DB_QUEUE_RESUME_XPE3_PIPE2 */ "THDO queue reset value for UC queues.",
    /* MMU_THDM_DB_QUEUE_RESUME_XPE3_PIPE3 */ "THDO queue reset value for UC queues.",
    /* MMU_THDM_MCQE_PORTSP_BST  */ "THDM BST counters for per port per pool count.  Ports 0-53 and 4 service pool.  Organization would",
    /* MMU_THDM_MCQE_PORTSP_BST_0 */ "THDM BST counters for per port per pool count.  Ports 0-53 and 4 service pool.  Organization would",
    /* MMU_THDM_MCQE_PORTSP_BST_1 */ "THDO BST counters for UC queues.",
    /* MMU_THDM_MCQE_PORTSP_BST_XPE0_PIPE0 */ "THDM BST counters for per port per pool count.  Ports 0-53 and 4 service pool.  Organization would",
    /* MMU_THDM_MCQE_PORTSP_BST_XPE0_PIPE1 */ "THDM BST counters for per port per pool count.  Ports 0-53 and 4 service pool.  Organization would",
    /* MMU_THDM_MCQE_PORTSP_BST_XPE1_PIPE2 */ "THDM BST counters for per port per pool count.  Ports 0-53 and 4 service pool.  Organization would",
    /* MMU_THDM_MCQE_PORTSP_BST_XPE1_PIPE3 */ "THDM BST counters for per port per pool count.  Ports 0-53 and 4 service pool.  Organization would",
    /* MMU_THDM_MCQE_PORTSP_BST_XPE2_PIPE0 */ "THDM BST counters for per port per pool count.  Ports 0-53 and 4 service pool.  Organization would",
    /* MMU_THDM_MCQE_PORTSP_BST_XPE2_PIPE1 */ "THDM BST counters for per port per pool count.  Ports 0-53 and 4 service pool.  Organization would",
    /* MMU_THDM_MCQE_PORTSP_BST_XPE3_PIPE2 */ "THDM BST counters for per port per pool count.  Ports 0-53 and 4 service pool.  Organization would",
    /* MMU_THDM_MCQE_PORTSP_BST_XPE3_PIPE3 */ "THDM BST counters for per port per pool count.  Ports 0-53 and 4 service pool.  Organization would",
    /* MMU_THDM_MCQE_PORTSP_CONFIG */ "THDO configuration for MC Port Pool.",
    /* MMU_THDM_MCQE_PORTSP_CONFIG_0 */ "THDO configuration for MC Port Pool.",
    /* MMU_THDM_MCQE_PORTSP_CONFIG_1 */ "THDO configuration for MC Port Pool.",
    /* MMU_THDM_MCQE_PORTSP_CONFIG_0A */ "THDO configuration for MC Port Pool.",
    /* MMU_THDM_MCQE_PORTSP_CONFIG_0B */ "THDO configuration for MC Port Pool.",
    /* MMU_THDM_MCQE_PORTSP_CONFIG_1A */ "THDO configuration for MC Port Pool.",
    /* MMU_THDM_MCQE_PORTSP_CONFIG_1B */ "THDO configuration for MC Port Pool.",
    /* MMU_THDM_MCQE_PORTSP_CONFIG_A */ "THDO configuration for MC Port Pool.",
    /* MMU_THDM_MCQE_PORTSP_CONFIG_A_PIPE0 */ "THDO configuration for MC Port Pool.",
    /* MMU_THDM_MCQE_PORTSP_CONFIG_A_PIPE1 */ "THDO configuration for MC Port Pool.",
    /* MMU_THDM_MCQE_PORTSP_CONFIG_A_PIPE2 */ "THDO configuration for MC Port Pool.",
    /* MMU_THDM_MCQE_PORTSP_CONFIG_A_PIPE3 */ "THDO configuration for MC Port Pool.",
    /* MMU_THDM_MCQE_PORTSP_CONFIG_B */ "THDO configuration for MC Port Pool.",
    /* MMU_THDM_MCQE_PORTSP_CONFIG_B_PIPE0 */ "THDO configuration for MC Port Pool.",
    /* MMU_THDM_MCQE_PORTSP_CONFIG_B_PIPE1 */ "THDO configuration for MC Port Pool.",
    /* MMU_THDM_MCQE_PORTSP_CONFIG_B_PIPE2 */ "THDO configuration for MC Port Pool.",
    /* MMU_THDM_MCQE_PORTSP_CONFIG_B_PIPE3 */ "THDO configuration for MC Port Pool.",
    /* MMU_THDM_MCQE_PORTSP_CONFIG_C */ "THDO configuration for MC Port Pool.",
    /* MMU_THDM_MCQE_PORTSP_CONFIG_C_PIPE0 */ "THDO configuration for MC Port Pool.",
    /* MMU_THDM_MCQE_PORTSP_CONFIG_C_PIPE1 */ "THDO configuration for MC Port Pool.",
    /* MMU_THDM_MCQE_PORTSP_CONFIG_C_PIPE2 */ "THDO configuration for MC Port Pool.",
    /* MMU_THDM_MCQE_PORTSP_CONFIG_C_PIPE3 */ "THDO configuration for MC Port Pool.",
    /* MMU_THDM_MCQE_PORTSP_CONFIG_PIPE0 */ "THDO configuration for MC Port Pool.",
    /* MMU_THDM_MCQE_PORTSP_CONFIG_PIPE1 */ "THDO configuration for MC Port Pool.",
    /* MMU_THDM_MCQE_PORTSP_CONFIG_PIPE2 */ "THDO configuration for MC Port Pool.",
    /* MMU_THDM_MCQE_PORTSP_CONFIG_PIPE3 */ "THDO configuration for MC Port Pool.",
    /* MMU_THDM_MCQE_QUEUE_BST   */ "THDO BST counters for UC queues.",
    /* MMU_THDM_MCQE_QUEUE_BST_0 */ "THDO BST counters for UC queues.",
    /* MMU_THDM_MCQE_QUEUE_BST_1 */ "THDO BST counters for UC queues.",
    /* MMU_THDM_MCQE_QUEUE_BST_XPE0_PIPE0 */ "THDO BST counters for UC queues.",
    /* MMU_THDM_MCQE_QUEUE_BST_XPE0_PIPE1 */ "THDO BST counters for UC queues.",
    /* MMU_THDM_MCQE_QUEUE_BST_XPE1_PIPE2 */ "THDO BST counters for UC queues.",
    /* MMU_THDM_MCQE_QUEUE_BST_XPE1_PIPE3 */ "THDO BST counters for UC queues.",
    /* MMU_THDM_MCQE_QUEUE_BST_XPE2_PIPE0 */ "THDO BST counters for UC queues.",
    /* MMU_THDM_MCQE_QUEUE_BST_XPE2_PIPE1 */ "THDO BST counters for UC queues.",
    /* MMU_THDM_MCQE_QUEUE_BST_XPE3_PIPE2 */ "THDO BST counters for UC queues.",
    /* MMU_THDM_MCQE_QUEUE_BST_XPE3_PIPE3 */ "THDO BST counters for UC queues.",
    /* MMU_THDM_MCQE_QUEUE_CONFIG */ "THDO configuration for MC queues.",
    /* MMU_THDM_MCQE_QUEUE_CONFIG_0 */ "THDO configuration for MC queues.",
    /* MMU_THDM_MCQE_QUEUE_CONFIG_1 */ "THDO configuration for MC queues.",
    /* MMU_THDM_MCQE_QUEUE_CONFIG_0A */ "THDM queue configuration for MC queues.",
    /* MMU_THDM_MCQE_QUEUE_CONFIG_0B */ "THDM queue configuration for MC queues.",
    /* MMU_THDM_MCQE_QUEUE_CONFIG_0C */ "THDM queue configuration for MC queues.",
    /* MMU_THDM_MCQE_QUEUE_CONFIG_1A */ "THDM queue configuration for MC queues.",
    /* MMU_THDM_MCQE_QUEUE_CONFIG_1B */ "THDM queue configuration for MC queues.",
    /* MMU_THDM_MCQE_QUEUE_CONFIG_1C */ "THDM queue configuration for MC queues.",
    /* MMU_THDM_MCQE_QUEUE_CONFIG_A */ "THDM queue configuration for MC queues.",
    /* MMU_THDM_MCQE_QUEUE_CONFIG_A_PIPE0 */ "THDM queue configuration for MC queues.",
    /* MMU_THDM_MCQE_QUEUE_CONFIG_A_PIPE1 */ "THDM queue configuration for MC queues.",
    /* MMU_THDM_MCQE_QUEUE_CONFIG_A_PIPE2 */ "THDM queue configuration for MC queues.",
    /* MMU_THDM_MCQE_QUEUE_CONFIG_A_PIPE3 */ "THDM queue configuration for MC queues.",
    /* MMU_THDM_MCQE_QUEUE_CONFIG_B */ "THDM queue configuration for MC queues.",
    /* MMU_THDM_MCQE_QUEUE_CONFIG_B_PIPE0 */ "THDM queue configuration for MC queues.",
    /* MMU_THDM_MCQE_QUEUE_CONFIG_B_PIPE1 */ "THDM queue configuration for MC queues.",
    /* MMU_THDM_MCQE_QUEUE_CONFIG_B_PIPE2 */ "THDM queue configuration for MC queues.",
    /* MMU_THDM_MCQE_QUEUE_CONFIG_B_PIPE3 */ "THDM queue configuration for MC queues.",
    /* MMU_THDM_MCQE_QUEUE_CONFIG_C */ "THDM queue configuration for MC queues.",
    /* MMU_THDM_MCQE_QUEUE_CONFIG_C_PIPE0 */ "THDM queue configuration for MC queues.",
    /* MMU_THDM_MCQE_QUEUE_CONFIG_C_PIPE1 */ "THDM queue configuration for MC queues.",
    /* MMU_THDM_MCQE_QUEUE_CONFIG_C_PIPE2 */ "THDM queue configuration for MC queues.",
    /* MMU_THDM_MCQE_QUEUE_CONFIG_C_PIPE3 */ "THDM queue configuration for MC queues.",
    /* MMU_THDM_MCQE_QUEUE_CONFIG_PIPE0 */ "THDO configuration for MC queues.",
    /* MMU_THDM_MCQE_QUEUE_CONFIG_PIPE1 */ "THDO configuration for MC queues.",
    /* MMU_THDM_MCQE_QUEUE_CONFIG_PIPE2 */ "THDO configuration for MC queues.",
    /* MMU_THDM_MCQE_QUEUE_CONFIG_PIPE3 */ "THDO configuration for MC queues.",
    /* MMU_THDM_MCQE_QUEUE_COUNT */ "THDO counters for UC queues.",
    /* MMU_THDM_MCQE_QUEUE_COUNT_0 */ "THDO counters for UC queues.",
    /* MMU_THDM_MCQE_QUEUE_COUNT_1 */ "THDO counters for UC queues.",
    /* MMU_THDM_MCQE_QUEUE_COUNT_XPE0_PIPE0 */ "THDO counters for UC queues.",
    /* MMU_THDM_MCQE_QUEUE_COUNT_XPE0_PIPE1 */ "THDO counters for UC queues.",
    /* MMU_THDM_MCQE_QUEUE_COUNT_XPE1_PIPE2 */ "THDO counters for UC queues.",
    /* MMU_THDM_MCQE_QUEUE_COUNT_XPE1_PIPE3 */ "THDO counters for UC queues.",
    /* MMU_THDM_MCQE_QUEUE_COUNT_XPE2_PIPE0 */ "THDO counters for UC queues.",
    /* MMU_THDM_MCQE_QUEUE_COUNT_XPE2_PIPE1 */ "THDO counters for UC queues.",
    /* MMU_THDM_MCQE_QUEUE_COUNT_XPE3_PIPE2 */ "THDO counters for UC queues.",
    /* MMU_THDM_MCQE_QUEUE_COUNT_XPE3_PIPE3 */ "THDO counters for UC queues.",
    /* MMU_THDM_MCQE_QUEUE_OFFSET */ "THDO queue offset for UC queues.",
    /* MMU_THDM_MCQE_QUEUE_OFFSET_0 */ "THDO queue offset for UC queues.",
    /* MMU_THDM_MCQE_QUEUE_OFFSET_1 */ "THDO queue offset for UC queues.",
    /* MMU_THDM_MCQE_QUEUE_OFFSET_0A */ "THDM queue offset config for MC queues.",
    /* MMU_THDM_MCQE_QUEUE_OFFSET_0B */ "THDM queue offset config for MC queues.",
    /* MMU_THDM_MCQE_QUEUE_OFFSET_0C */ "THDM queue offset config for MC queues.",
    /* MMU_THDM_MCQE_QUEUE_OFFSET_1A */ "THDM queue offset config for MC queues.",
    /* MMU_THDM_MCQE_QUEUE_OFFSET_1B */ "THDM queue offset config for MC queues.",
    /* MMU_THDM_MCQE_QUEUE_OFFSET_1C */ "THDM queue offset config for MC queues.",
    /* MMU_THDM_MCQE_QUEUE_OFFSET_A */ "THDM queue offset config for MC queues.",
    /* MMU_THDM_MCQE_QUEUE_OFFSET_A_PIPE0 */ "THDM queue offset config for MC queues.",
    /* MMU_THDM_MCQE_QUEUE_OFFSET_A_PIPE1 */ "THDM queue offset config for MC queues.",
    /* MMU_THDM_MCQE_QUEUE_OFFSET_A_PIPE2 */ "THDM queue offset config for MC queues.",
    /* MMU_THDM_MCQE_QUEUE_OFFSET_A_PIPE3 */ "THDM queue offset config for MC queues.",
    /* MMU_THDM_MCQE_QUEUE_OFFSET_B */ "THDM queue offset config for MC queues.",
    /* MMU_THDM_MCQE_QUEUE_OFFSET_B_PIPE0 */ "THDM queue offset config for MC queues.",
    /* MMU_THDM_MCQE_QUEUE_OFFSET_B_PIPE1 */ "THDM queue offset config for MC queues.",
    /* MMU_THDM_MCQE_QUEUE_OFFSET_B_PIPE2 */ "THDM queue offset config for MC queues.",
    /* MMU_THDM_MCQE_QUEUE_OFFSET_B_PIPE3 */ "THDM queue offset config for MC queues.",
    /* MMU_THDM_MCQE_QUEUE_OFFSET_C */ "THDM queue offset config for MC queues.",
    /* MMU_THDM_MCQE_QUEUE_OFFSET_C_PIPE0 */ "THDM queue offset config for MC queues.",
    /* MMU_THDM_MCQE_QUEUE_OFFSET_C_PIPE1 */ "THDM queue offset config for MC queues.",
    /* MMU_THDM_MCQE_QUEUE_OFFSET_C_PIPE2 */ "THDM queue offset config for MC queues.",
    /* MMU_THDM_MCQE_QUEUE_OFFSET_C_PIPE3 */ "THDM queue offset config for MC queues.",
    /* MMU_THDM_MCQE_QUEUE_OFFSET_PIPE0 */ "THDO queue offset for UC queues.",
    /* MMU_THDM_MCQE_QUEUE_OFFSET_PIPE1 */ "THDO queue offset for UC queues.",
    /* MMU_THDM_MCQE_QUEUE_OFFSET_PIPE2 */ "THDO queue offset for UC queues.",
    /* MMU_THDM_MCQE_QUEUE_OFFSET_PIPE3 */ "THDO queue offset for UC queues.",
    /* MMU_THDM_MCQE_QUEUE_RESUME */ "THDO queue reset value for UC queues.",
    /* MMU_THDM_MCQE_QUEUE_RESUME_0 */ "THDO queue reset value for UC queues.",
    /* MMU_THDM_MCQE_QUEUE_RESUME_1 */ "THDO queue reset value for UC queues.",
    /* MMU_THDM_MCQE_QUEUE_RESUME_XPE0_PIPE0 */ "THDO queue reset value for UC queues.",
    /* MMU_THDM_MCQE_QUEUE_RESUME_XPE0_PIPE1 */ "THDO queue reset value for UC queues.",
    /* MMU_THDM_MCQE_QUEUE_RESUME_XPE1_PIPE2 */ "THDO queue reset value for UC queues.",
    /* MMU_THDM_MCQE_QUEUE_RESUME_XPE1_PIPE3 */ "THDO queue reset value for UC queues.",
    /* MMU_THDM_MCQE_QUEUE_RESUME_XPE2_PIPE0 */ "THDO queue reset value for UC queues.",
    /* MMU_THDM_MCQE_QUEUE_RESUME_XPE2_PIPE1 */ "THDO queue reset value for UC queues.",
    /* MMU_THDM_MCQE_QUEUE_RESUME_XPE3_PIPE2 */ "THDO queue reset value for UC queues.",
    /* MMU_THDM_MCQE_QUEUE_RESUME_XPE3_PIPE3 */ "THDO queue reset value for UC queues.",
    /* MMU_THDO_BST_PORT         */ "THDO BST counters for UC ports.",
    /* MMU_THDO_BST_QGROUP       */ "THDO BST counters for UC queue group.",
    /* MMU_THDO_BST_QUEUE        */ "THDO BST counters for UC queues.",
    /* MMU_THDO_CONFIG_0         */ "THDO configuration for UC queues in normal (non-VOQ) ports, MMU ports 5 - 32.  Address index = ( port_num - 5 ) * 10 + cos_num.",
    /* MMU_THDO_CONFIG_1         */ "THDO configuration for UC queues in normal (non-VOQ) ports, MMU ports 38 - 65.  Address index = ( port_num - 38 ) * 10 + cos_num.",
    /* MMU_THDO_CONFIG_EX_0      */ "THDO configuration for UC extended queues in VOQ ports, MMU ports 1 - 4.  Address index = ( port_num - 1 ) * 74 + ext_queue_num.",
    /* MMU_THDO_CONFIG_EX_1      */ "THDO configuration for UC extended queues in VOQ ports, MMU ports 34 - 37.  Address index = ( port_num - 34 ) * 74 + ext_queue_num.",
    /* MMU_THDO_CONFIG_PORT      */ "THDO configuration for UC queue groups.",
    /* MMU_THDO_CONFIG_QGROUP    */ "THDO configuration for UC queue groups.",
    /* MMU_THDO_CONFIG_QUEUE     */ "THDO configuration for UC queues.",
    /* MMU_THDO_CONFIG_SP_0      */ "THDO configuration for UC COS queues in VOQ ports, MMU ports 1 - 4.  Address index = ( port_num - 1 ) * 10 + cos_num.",
    /* MMU_THDO_CONFIG_SP_1      */ "THDO configuration for UC COS queues in VOQ ports, MMU ports 34 - 37.  Address index = ( port_num - 34 ) * 10 + cos_num.",
    /* MMU_THDO_COUNTER_PORT     */ "THDO counters for UC queue groups.",
    /* MMU_THDO_COUNTER_QGROUP   */ "THDO counters for UC queue groups.",
    /* MMU_THDO_COUNTER_QUEUE    */ "THDO counters for UC queues.",
    /* MMU_THDO_CTRO_UC_DTYPE    */ "THDO CTRO stores UC packet drop_level & drop_resources to be used for reporting to CTRO i/f, on per SRC_CONTEXT basis.",
    /* MMU_THDO_CTRO_UC_PKT_STORE */ "THDO CTRO stores UC packet information from SOP to be used for reporting to CTRO i/f, on per SRC_CONTEXT basis.",
    /* MMU_THDO_OFFSET_0         */ "THDO configuration for UC queues in normal (non-VOQ) ports, MMU ports 5 - 32.  Address index = ( port_num - 5 ) * 10 + cos_num.",
    /* MMU_THDO_OFFSET_1         */ "THDO configuration for UC queues in normal (non-VOQ) ports, MMU ports 38 - 65.  Address index = ( port_num - 38 ) * 10 + cos_num.",
    /* MMU_THDO_OFFSET_EX_0      */ "THDO configuration for UC extended queues in VOQ ports, MMU ports 1 - 4.  Address index = ( port_num - 1 ) * 74 + ext_queue_num.",
    /* MMU_THDO_OFFSET_EX_1      */ "THDO configuration for UC extended queues in VOQ ports, MMU ports 34 - 37.  Address index = ( port_num - 34 ) * 74 + ext_queue_num.",
    /* MMU_THDO_OFFSET_QGROUP    */ "THDO offset for UC queue groups.",
    /* MMU_THDO_OFFSET_QUEUE     */ "THDO queue offset for UC queues.",
    /* MMU_THDO_OFFSET_SP_0      */ "THDO offset configuration for UC COS queues in VOQ ports, MMU ports 1 - 4.  Address index = ( port_num - 1 ) * 10 + cos_num.",
    /* MMU_THDO_OFFSET_SP_1      */ "THDO offset configuration for UC COS queues in VOQ ports, MMU ports 34 - 37.  Address index = ( port_num - 34 ) * 10 + cos_num.",
    /* MMU_THDO_OPNCONFIG_CELL   */ "THDO configuration for o/p nodes",
    /* MMU_THDO_OPNCONFIG_QENTRY */ "THDO configuration for o/p nodes",
    /* MMU_THDO_OPNCOUNT_CELL    */ "THDO Op-Node total count shadow storage for WRED access for op-node in the range of 0-511",
    /* MMU_THDO_OPNOFFSET_CELL   */ "THDO configuration for output nodes",
    /* MMU_THDO_OPNOFFSET_QENTRY */ "THDO configuration for output nodes",
    /* MMU_THDO_OPNSTATUS_CELL   */ "THDO Output Node cell count and other status info for output nodes",
    /* MMU_THDO_OPNSTATUS_QENTRY */ "THDO Output Node qentry count and other status info for output nodes",
    /* MMU_THDO_QCONFIG_CELL     */ "THDO configuration for queues",
    /* MMU_THDO_QCONFIG_QENTRY   */ "THDO configuration for queues",
    /* MMU_THDO_QCOUNT_CELL      */ "THDO Queue total count shadow storage for WRED access for queue in the range [0...2047]",
    /* MMU_THDO_QCOUNT_CELL_0    */ "THDO Queue total count shadow storage for WRED access for queue in the range [0...2047]",
    /* MMU_THDO_QDRPRST_0        */ "THDO cos_queue_drop_state_cell reset value for UC queues in normal (non-VOQ) ports, MMU ports 5 - 32.  Address index = ( port_num - 5 ) * 10 + cos_num.",
    /* MMU_THDO_QDRPRST_1        */ "THDO cos_queue_drop_state_cell reset value for UC queues in normal (non-VOQ) ports, MMU ports 38 - 65.  Address index = ( port_num - 38 ) * 10 + cos_num.",
    /* MMU_THDO_QDRPRST_EX_0     */ "THDO cos_queue_drop_state_cell reset value for UC extended queues in VOQ ports, MMU ports 1 - 4.  Address index = ( port_num - 1 ) * 74 + ext_queue_num.",
    /* MMU_THDO_QDRPRST_EX_1     */ "THDO cos_queue_drop_state_cell reset value for UC extended queues in VOQ ports, MMU ports 34 - 37.  Address index = ( port_num - 34 ) * 74 + ext_queue_num.",
    /* MMU_THDO_QDRPRST_SP_0     */ "THDO cos_queue_drop_state_cell reset value for UC COS queues in VOQ ports, MMU ports 1 - 4.  Address index = ( port_num - 1 ) * 10 + cos_num.",
    /* MMU_THDO_QDRPRST_SP_1     */ "THDO cos_queue_drop_state_cell reset value for UC COS queues in VOQ ports, MMU ports 34 - 37.  Address index = ( port_num - 34 ) * 10 + cos_num.",
    /* MMU_THDO_QOFFSET_CELL     */ "THDO reset offset config for queues",
    /* MMU_THDO_QOFFSET_QENTRY   */ "THDO reset offset config for queues",
    /* MMU_THDO_QREDRST_0        */ "THDO cos_red_ds_cell reset value for UC queues in normal (non-VOQ) ports, MMU ports 5 - 32.  Address index = ( port_num - 5 ) * 10 + cos_num.",
    /* MMU_THDO_QREDRST_1        */ "THDO cos_red_ds_cell reset value for UC queues in normal (non-VOQ) ports, MMU ports 38 - 65.  Address index = ( port_num - 38 ) * 10 + cos_num.",
    /* MMU_THDO_QREDRST_EX_0     */ "THDO cos_red_ds_cell reset value for UC extended queues in VOQ ports, MMU ports 1 - 4.  Address index = ( port_num - 1 ) * 74 + ext_queue_num.",
    /* MMU_THDO_QREDRST_EX_1     */ "THDO cos_red_ds_cell reset value for UC extended queues in VOQ ports, MMU ports 34 - 37.  Address index = ( port_num - 34 ) * 74 + ext_queue_num.",
    /* MMU_THDO_QREDRST_SP_0     */ "THDO cos_red_ds_cell reset value for UC COS queues in VOQ ports, MMU ports 1 - 4.  Address index = ( port_num - 1 ) * 10 + cos_num.",
    /* MMU_THDO_QREDRST_SP_1     */ "THDO cos_red_ds_cell reset value for UC COS queues in VOQ ports, MMU ports 34 - 37.  Address index = ( port_num - 34 ) * 10 + cos_num.",
    /* MMU_THDO_QRESET_VALUE_CELL */ "THDO green, yellow and red buffer reset values for queues in the range 0-2047. Used for status collection for diagnostic purposes only.\nCPU read during traffic is guaranteed, but CPU write is opportunistic.",
    /* MMU_THDO_QRESET_VALUE_CELL_0 */ "THDO green, yellow and red buffer reset values for queues in the range 0-2047. Used for status collection for diagnostic purposes only.",
    /* MMU_THDO_QRESET_VALUE_QENTRY */ "THDO green, yellow and red buffer reset values for queues in the range 0-2047. Used for status collection for diagnostic purposes only.\nCPU read during traffic is guaranteed, but CPU write is opportunistic.",
    /* MMU_THDO_QRESET_VALUE_QENTRY_0 */ "THDO green, yellow and red buffer reset values for queues in the range 0-2047. Used for status collection for diagnostic purposes only.",
    /* MMU_THDO_QSTATUS_CELL     */ "THDO queue cell count and other status info for queues in the range 0-2047',\nCPU read during traffic is guaranteed, but CPU write is opportunistic.",
    /* MMU_THDO_QSTATUS_CELL_0   */ "THDO queue cell count and other status info for queues in the range 0-2047",
    /* MMU_THDO_QSTATUS_QENTRY   */ "THDO queue qentry count and other status info for queues in the range 0-2047\nCPU read during traffic is guaranteed, but CPU write is opportunistic.",
    /* MMU_THDO_QSTATUS_QENTRY_0 */ "THDO queue qentry count and other status info for queues in the range 0-2047",
    /* MMU_THDO_QYELRST_0        */ "THDO cos_yellow_ds_cell reset value for UC queues in normal (non-VOQ) ports, MMU ports 5 - 32.  Address index = ( port_num - 5 ) * 10 + cos_num.",
    /* MMU_THDO_QYELRST_1        */ "THDO cos_yellow_ds_cell reset value for UC queues in normal (non-VOQ) ports, MMU ports 38 - 65.  Address index = ( port_num - 38 ) * 10 + cos_num.",
    /* MMU_THDO_QYELRST_EX_0     */ "THDO cos_yellow_ds_cell reset value for UC extended queues in VOQ ports, MMU ports 1 - 4.  Address index = ( port_num - 1 ) * 74 + ext_queue_num.",
    /* MMU_THDO_QYELRST_EX_1     */ "THDO cos_yellow_ds_cell reset value for UC extended queues in VOQ ports, MMU ports 34 - 37.  Address index = ( port_num - 34 ) * 74 + ext_queue_num.",
    /* MMU_THDO_QYELRST_SP_0     */ "THDO cos_yellow_ds_cell reset value for UC COS queues in VOQ ports, MMU ports 1 - 4.  Address index = ( port_num - 1 ) * 10 + cos_num.",
    /* MMU_THDO_QYELRST_SP_1     */ "THDO cos_yellow_ds_cell reset value for UC COS queues in VOQ ports, MMU ports 34 - 37.  Address index = ( port_num - 34 ) * 10 + cos_num.",
    /* MMU_THDO_Q_TO_QGRP_MAP    */ "UC queue to queue group mapping.  Address index = uc_queue_num.",
    /* MMU_THDO_RESUME_QGROUP    */ "THDO queue reset value for UC queue groups.",
    /* MMU_THDO_RESUME_QUEUE     */ "THDO queue reset value for UC queues.",
    /* MMU_THDU_BST_PORT         */ "THDU BST counters for UC ports.",
    /* MMU_THDU_BST_PORT_XPE0_PIPE0 */ "THDU BST counters for UC ports.",
    /* MMU_THDU_BST_PORT_XPE0_PIPE1 */ "THDU BST counters for UC ports.",
    /* MMU_THDU_BST_PORT_XPE1_PIPE2 */ "THDU BST counters for UC ports.",
    /* MMU_THDU_BST_PORT_XPE1_PIPE3 */ "THDU BST counters for UC ports.",
    /* MMU_THDU_BST_PORT_XPE2_PIPE0 */ "THDU BST counters for UC ports.",
    /* MMU_THDU_BST_PORT_XPE2_PIPE1 */ "THDU BST counters for UC ports.",
    /* MMU_THDU_BST_PORT_XPE3_PIPE2 */ "THDU BST counters for UC ports.",
    /* MMU_THDU_BST_PORT_XPE3_PIPE3 */ "THDU BST counters for UC ports.",
    /* MMU_THDU_BST_QGROUP       */ "THDU BST counters for UC queue group.",
    /* MMU_THDU_BST_QGROUP_XPE0_PIPE0 */ "THDU BST counters for UC queue group.",
    /* MMU_THDU_BST_QGROUP_XPE0_PIPE1 */ "THDU BST counters for UC queue group.",
    /* MMU_THDU_BST_QGROUP_XPE1_PIPE2 */ "THDU BST counters for UC queue group.",
    /* MMU_THDU_BST_QGROUP_XPE1_PIPE3 */ "THDU BST counters for UC queue group.",
    /* MMU_THDU_BST_QGROUP_XPE2_PIPE0 */ "THDU BST counters for UC queue group.",
    /* MMU_THDU_BST_QGROUP_XPE2_PIPE1 */ "THDU BST counters for UC queue group.",
    /* MMU_THDU_BST_QGROUP_XPE3_PIPE2 */ "THDU BST counters for UC queue group.",
    /* MMU_THDU_BST_QGROUP_XPE3_PIPE3 */ "THDU BST counters for UC queue group.",
    /* MMU_THDU_BST_QUEUE        */ "THDU BST counters for UC queues.",
    /* MMU_THDU_BST_QUEUE_XPE0_PIPE0 */ "THDU BST counters for UC queues.",
    /* MMU_THDU_BST_QUEUE_XPE0_PIPE1 */ "THDU BST counters for UC queues.",
    /* MMU_THDU_BST_QUEUE_XPE1_PIPE2 */ "THDU BST counters for UC queues.",
    /* MMU_THDU_BST_QUEUE_XPE1_PIPE3 */ "THDU BST counters for UC queues.",
    /* MMU_THDU_BST_QUEUE_XPE2_PIPE0 */ "THDU BST counters for UC queues.",
    /* MMU_THDU_BST_QUEUE_XPE2_PIPE1 */ "THDU BST counters for UC queues.",
    /* MMU_THDU_BST_QUEUE_XPE3_PIPE2 */ "THDU BST counters for UC queues.",
    /* MMU_THDU_BST_QUEUE_XPE3_PIPE3 */ "THDU BST counters for UC queues.",
    /* MMU_THDU_CONFIG_PORT      */ "THDU configuration for egress ports.",
    /* MMU_THDU_CONFIG_PORT0     */ "THDU configuration for egress ports.",
    /* MMU_THDU_CONFIG_PORT1     */ "THDU configuration for egress ports.",
    /* MMU_THDU_CONFIG_PORT0_PIPE0 */ "THDU configuration for egress ports.",
    /* MMU_THDU_CONFIG_PORT0_PIPE1 */ "THDU configuration for egress ports.",
    /* MMU_THDU_CONFIG_PORT0_PIPE2 */ "THDU configuration for egress ports.",
    /* MMU_THDU_CONFIG_PORT0_PIPE3 */ "THDU configuration for egress ports.",
    /* MMU_THDU_CONFIG_PORT1_PIPE0 */ "THDU configuration for egress ports.",
    /* MMU_THDU_CONFIG_PORT1_PIPE1 */ "THDU configuration for egress ports.",
    /* MMU_THDU_CONFIG_PORT1_PIPE2 */ "THDU configuration for egress ports.",
    /* MMU_THDU_CONFIG_PORT1_PIPE3 */ "THDU configuration for egress ports.",
    /* MMU_THDU_CONFIG_PORT_PIPE0 */ "THDU configuration for egress ports.",
    /* MMU_THDU_CONFIG_PORT_PIPE1 */ "THDU configuration for egress ports.",
    /* MMU_THDU_CONFIG_PORT_PIPE2 */ "THDU configuration for egress ports.",
    /* MMU_THDU_CONFIG_PORT_PIPE3 */ "THDU configuration for egress ports.",
    /* MMU_THDU_CONFIG_QGROUP    */ "THDU configuration for UC queue groups.",
    /* MMU_THDU_CONFIG_QGROUP0   */ "THDU configuration for UC queue groups.",
    /* MMU_THDU_CONFIG_QGROUP1   */ "THDU configuration for UC queue groups.",
    /* MMU_THDU_CONFIG_QGROUP0_PIPE0 */ "THDU configuration for UC queue groups.",
    /* MMU_THDU_CONFIG_QGROUP0_PIPE1 */ "THDU configuration for UC queue groups.",
    /* MMU_THDU_CONFIG_QGROUP0_PIPE2 */ "THDU configuration for UC queue groups.",
    /* MMU_THDU_CONFIG_QGROUP0_PIPE3 */ "THDU configuration for UC queue groups.",
    /* MMU_THDU_CONFIG_QGROUP1_PIPE0 */ "THDU configuration for UC queue groups.",
    /* MMU_THDU_CONFIG_QGROUP1_PIPE1 */ "THDU configuration for UC queue groups.",
    /* MMU_THDU_CONFIG_QGROUP1_PIPE2 */ "THDU configuration for UC queue groups.",
    /* MMU_THDU_CONFIG_QGROUP1_PIPE3 */ "THDU configuration for UC queue groups.",
    /* MMU_THDU_CONFIG_QGROUP_PIPE0 */ "THDU configuration for UC queue groups.",
    /* MMU_THDU_CONFIG_QGROUP_PIPE1 */ "THDU configuration for UC queue groups.",
    /* MMU_THDU_CONFIG_QGROUP_PIPE2 */ "THDU configuration for UC queue groups.",
    /* MMU_THDU_CONFIG_QGROUP_PIPE3 */ "THDU configuration for UC queue groups.",
    /* MMU_THDU_CONFIG_QUEUE     */ "THDU configuration for UC queues.",
    /* MMU_THDU_CONFIG_QUEUE0    */ "THDU configuration for UC queues.",
    /* MMU_THDU_CONFIG_QUEUE1    */ "THDU configuration for UC queues.",
    /* MMU_THDU_CONFIG_QUEUE0_PIPE0 */ "THDU configuration for UC queues.",
    /* MMU_THDU_CONFIG_QUEUE0_PIPE1 */ "THDU configuration for UC queues.",
    /* MMU_THDU_CONFIG_QUEUE0_PIPE2 */ "THDU configuration for UC queues.",
    /* MMU_THDU_CONFIG_QUEUE0_PIPE3 */ "THDU configuration for UC queues.",
    /* MMU_THDU_CONFIG_QUEUE1_PIPE0 */ "THDU configuration for UC queues.",
    /* MMU_THDU_CONFIG_QUEUE1_PIPE1 */ "THDU configuration for UC queues.",
    /* MMU_THDU_CONFIG_QUEUE1_PIPE2 */ "THDU configuration for UC queues.",
    /* MMU_THDU_CONFIG_QUEUE1_PIPE3 */ "THDU configuration for UC queues.",
    /* MMU_THDU_CONFIG_QUEUE_PIPE0 */ "THDU configuration for UC queues.",
    /* MMU_THDU_CONFIG_QUEUE_PIPE1 */ "THDU configuration for UC queues.",
    /* MMU_THDU_CONFIG_QUEUE_PIPE2 */ "THDU configuration for UC queues.",
    /* MMU_THDU_CONFIG_QUEUE_PIPE3 */ "THDU configuration for UC queues.",
    /* MMU_THDU_COUNTER_PORT     */ "THDU counters for UC queue groups.",
    /* MMU_THDU_COUNTER_PORT_XPE0_PIPE0 */ "THDU counters for UC queue groups.",
    /* MMU_THDU_COUNTER_PORT_XPE0_PIPE1 */ "THDU counters for UC queue groups.",
    /* MMU_THDU_COUNTER_PORT_XPE1_PIPE2 */ "THDU counters for UC queue groups.",
    /* MMU_THDU_COUNTER_PORT_XPE1_PIPE3 */ "THDU counters for UC queue groups.",
    /* MMU_THDU_COUNTER_PORT_XPE2_PIPE0 */ "THDU counters for UC queue groups.",
    /* MMU_THDU_COUNTER_PORT_XPE2_PIPE1 */ "THDU counters for UC queue groups.",
    /* MMU_THDU_COUNTER_PORT_XPE3_PIPE2 */ "THDU counters for UC queue groups.",
    /* MMU_THDU_COUNTER_PORT_XPE3_PIPE3 */ "THDU counters for UC queue groups.",
    /* MMU_THDU_COUNTER_QGROUP   */ "THDU counters for UC queue groups.",
    /* MMU_THDU_COUNTER_QGROUP_XPE0_PIPE0 */ "THDU counters for UC queue groups.",
    /* MMU_THDU_COUNTER_QGROUP_XPE0_PIPE1 */ "THDU counters for UC queue groups.",
    /* MMU_THDU_COUNTER_QGROUP_XPE1_PIPE2 */ "THDU counters for UC queue groups.",
    /* MMU_THDU_COUNTER_QGROUP_XPE1_PIPE3 */ "THDU counters for UC queue groups.",
    /* MMU_THDU_COUNTER_QGROUP_XPE2_PIPE0 */ "THDU counters for UC queue groups.",
    /* MMU_THDU_COUNTER_QGROUP_XPE2_PIPE1 */ "THDU counters for UC queue groups.",
    /* MMU_THDU_COUNTER_QGROUP_XPE3_PIPE2 */ "THDU counters for UC queue groups.",
    /* MMU_THDU_COUNTER_QGROUP_XPE3_PIPE3 */ "THDU counters for UC queue groups.",
    /* MMU_THDU_COUNTER_QUEUE    */ "THDU counters for UC queues.",
    /* MMU_THDU_COUNTER_QUEUE_XPE0_PIPE0 */ "THDU counters for UC queues.",
    /* MMU_THDU_COUNTER_QUEUE_XPE0_PIPE1 */ "THDU counters for UC queues.",
    /* MMU_THDU_COUNTER_QUEUE_XPE1_PIPE2 */ "THDU counters for UC queues.",
    /* MMU_THDU_COUNTER_QUEUE_XPE1_PIPE3 */ "THDU counters for UC queues.",
    /* MMU_THDU_COUNTER_QUEUE_XPE2_PIPE0 */ "THDU counters for UC queues.",
    /* MMU_THDU_COUNTER_QUEUE_XPE2_PIPE1 */ "THDU counters for UC queues.",
    /* MMU_THDU_COUNTER_QUEUE_XPE3_PIPE2 */ "THDU counters for UC queues.",
    /* MMU_THDU_COUNTER_QUEUE_XPE3_PIPE3 */ "THDU counters for UC queues.",
    /* MMU_THDU_OFFSET_QGROUP    */ "THDU offset for UC queue groups.",
    /* MMU_THDU_OFFSET_QGROUP0   */ "THDU offset for UC queue groups.",
    /* MMU_THDU_OFFSET_QGROUP1   */ "THDU offset for UC queue groups.",
    /* MMU_THDU_OFFSET_QGROUP0_PIPE0 */ "THDU offset for UC queue groups.",
    /* MMU_THDU_OFFSET_QGROUP0_PIPE1 */ "THDU offset for UC queue groups.",
    /* MMU_THDU_OFFSET_QGROUP0_PIPE2 */ "THDU offset for UC queue groups.",
    /* MMU_THDU_OFFSET_QGROUP0_PIPE3 */ "THDU offset for UC queue groups.",
    /* MMU_THDU_OFFSET_QGROUP1_PIPE0 */ "THDU offset for UC queue groups.",
    /* MMU_THDU_OFFSET_QGROUP1_PIPE1 */ "THDU offset for UC queue groups.",
    /* MMU_THDU_OFFSET_QGROUP1_PIPE2 */ "THDU offset for UC queue groups.",
    /* MMU_THDU_OFFSET_QGROUP1_PIPE3 */ "THDU offset for UC queue groups.",
    /* MMU_THDU_OFFSET_QGROUP_PIPE0 */ "THDU offset for UC queue groups.",
    /* MMU_THDU_OFFSET_QGROUP_PIPE1 */ "THDU offset for UC queue groups.",
    /* MMU_THDU_OFFSET_QGROUP_PIPE2 */ "THDU offset for UC queue groups.",
    /* MMU_THDU_OFFSET_QGROUP_PIPE3 */ "THDU offset for UC queue groups.",
    /* MMU_THDU_OFFSET_QUEUE     */ "THDU queue offset for UC queues.",
    /* MMU_THDU_OFFSET_QUEUE0    */ "THDU queue offset for UC queues.",
    /* MMU_THDU_OFFSET_QUEUE1    */ "THDU queue offset for UC queues.",
    /* MMU_THDU_OFFSET_QUEUE0_PIPE0 */ "THDU queue offset for UC queues.",
    /* MMU_THDU_OFFSET_QUEUE0_PIPE1 */ "THDU queue offset for UC queues.",
    /* MMU_THDU_OFFSET_QUEUE0_PIPE2 */ "THDU queue offset for UC queues.",
    /* MMU_THDU_OFFSET_QUEUE0_PIPE3 */ "THDU queue offset for UC queues.",
    /* MMU_THDU_OFFSET_QUEUE1_PIPE0 */ "THDU queue offset for UC queues.",
    /* MMU_THDU_OFFSET_QUEUE1_PIPE1 */ "THDU queue offset for UC queues.",
    /* MMU_THDU_OFFSET_QUEUE1_PIPE2 */ "THDU queue offset for UC queues.",
    /* MMU_THDU_OFFSET_QUEUE1_PIPE3 */ "THDU queue offset for UC queues.",
    /* MMU_THDU_OFFSET_QUEUE_PIPE0 */ "THDU queue offset for UC queues.",
    /* MMU_THDU_OFFSET_QUEUE_PIPE1 */ "THDU queue offset for UC queues.",
    /* MMU_THDU_OFFSET_QUEUE_PIPE2 */ "THDU queue offset for UC queues.",
    /* MMU_THDU_OFFSET_QUEUE_PIPE3 */ "THDU queue offset for UC queues.",
    /* MMU_THDU_QGROUP_TICKET    */ "Unicast queue group ticket memory.",
    /* MMU_THDU_QUEUE_TICKET     */ "Unicast queue ticket memory.",
    /* MMU_THDU_Q_TO_QGRP_MAP    */ "UC queue to queue group mapping.  Address index = uc_queue_num.",
    /* MMU_THDU_Q_TO_QGRP_MAP0   */ "UC queue to queue group mapping.  Address index = uc_queue_num.",
    /* MMU_THDU_Q_TO_QGRP_MAP1   */ "UC queue to queue group mapping.  Address index = uc_queue_num.",
    /* MMU_THDU_Q_TO_QGRP_MAP2   */ "UC queue to queue group mapping.  Address index = uc_queue_num.",
    /* MMU_THDU_Q_TO_QGRP_MAP0_PIPE0 */ "UC queue to queue group mapping.  Address index = uc_queue_num.",
    /* MMU_THDU_Q_TO_QGRP_MAP0_PIPE1 */ "UC queue to queue group mapping.  Address index = uc_queue_num.",
    /* MMU_THDU_Q_TO_QGRP_MAP0_PIPE2 */ "UC queue to queue group mapping.  Address index = uc_queue_num.",
    /* MMU_THDU_Q_TO_QGRP_MAP0_PIPE3 */ "UC queue to queue group mapping.  Address index = uc_queue_num.",
    /* MMU_THDU_Q_TO_QGRP_MAP1_PIPE0 */ "UC queue to queue group mapping.  Address index = uc_queue_num.",
    /* MMU_THDU_Q_TO_QGRP_MAP1_PIPE1 */ "UC queue to queue group mapping.  Address index = uc_queue_num.",
    /* MMU_THDU_Q_TO_QGRP_MAP1_PIPE2 */ "UC queue to queue group mapping.  Address index = uc_queue_num.",
    /* MMU_THDU_Q_TO_QGRP_MAP1_PIPE3 */ "UC queue to queue group mapping.  Address index = uc_queue_num.",
    /* MMU_THDU_Q_TO_QGRP_MAP2_PIPE0 */ "UC queue to queue group mapping.  Address index = uc_queue_num.",
    /* MMU_THDU_Q_TO_QGRP_MAP2_PIPE1 */ "UC queue to queue group mapping.  Address index = uc_queue_num.",
    /* MMU_THDU_Q_TO_QGRP_MAP2_PIPE2 */ "UC queue to queue group mapping.  Address index = uc_queue_num.",
    /* MMU_THDU_Q_TO_QGRP_MAP2_PIPE3 */ "UC queue to queue group mapping.  Address index = uc_queue_num.",
    /* MMU_THDU_Q_TO_QGRP_MAP_PIPE0 */ "UC queue to queue group mapping.  Address index = uc_queue_num.",
    /* MMU_THDU_Q_TO_QGRP_MAP_PIPE1 */ "UC queue to queue group mapping.  Address index = uc_queue_num.",
    /* MMU_THDU_Q_TO_QGRP_MAP_PIPE2 */ "UC queue to queue group mapping.  Address index = uc_queue_num.",
    /* MMU_THDU_Q_TO_QGRP_MAP_PIPE3 */ "UC queue to queue group mapping.  Address index = uc_queue_num.",
    /* MMU_THDU_RESUME_PORT      */ "THDU resume configuration for egress ports.",
    /* MMU_THDU_RESUME_PORT0     */ "THDU resume configuration for egress ports.",
    /* MMU_THDU_RESUME_PORT1     */ "THDU resume configuration for egress ports.",
    /* MMU_THDU_RESUME_PORT2     */ "THDU resume configuration for egress ports.",
    /* MMU_THDU_RESUME_PORT0_PIPE0 */ "THDU resume configuration for egress ports.",
    /* MMU_THDU_RESUME_PORT0_PIPE1 */ "THDU resume configuration for egress ports.",
    /* MMU_THDU_RESUME_PORT0_PIPE2 */ "THDU resume configuration for egress ports.",
    /* MMU_THDU_RESUME_PORT0_PIPE3 */ "THDU resume configuration for egress ports.",
    /* MMU_THDU_RESUME_PORT1_PIPE0 */ "THDU resume configuration for egress ports.",
    /* MMU_THDU_RESUME_PORT1_PIPE1 */ "THDU resume configuration for egress ports.",
    /* MMU_THDU_RESUME_PORT1_PIPE2 */ "THDU resume configuration for egress ports.",
    /* MMU_THDU_RESUME_PORT1_PIPE3 */ "THDU resume configuration for egress ports.",
    /* MMU_THDU_RESUME_PORT2_PIPE0 */ "THDU resume configuration for egress ports.",
    /* MMU_THDU_RESUME_PORT2_PIPE1 */ "THDU resume configuration for egress ports.",
    /* MMU_THDU_RESUME_PORT2_PIPE2 */ "THDU resume configuration for egress ports.",
    /* MMU_THDU_RESUME_PORT2_PIPE3 */ "THDU resume configuration for egress ports.",
    /* MMU_THDU_RESUME_PORT_PIPE0 */ "THDU resume configuration for egress ports.",
    /* MMU_THDU_RESUME_PORT_PIPE1 */ "THDU resume configuration for egress ports.",
    /* MMU_THDU_RESUME_PORT_PIPE2 */ "THDU resume configuration for egress ports.",
    /* MMU_THDU_RESUME_PORT_PIPE3 */ "THDU resume configuration for egress ports.",
    /* MMU_THDU_RESUME_QGROUP    */ "THDU queue reset value for UC queue groups.",
    /* MMU_THDU_RESUME_QGROUP_XPE0_PIPE0 */ "THDU queue reset value for UC queue groups.",
    /* MMU_THDU_RESUME_QGROUP_XPE0_PIPE1 */ "THDU queue reset value for UC queue groups.",
    /* MMU_THDU_RESUME_QGROUP_XPE1_PIPE2 */ "THDU queue reset value for UC queue groups.",
    /* MMU_THDU_RESUME_QGROUP_XPE1_PIPE3 */ "THDU queue reset value for UC queue groups.",
    /* MMU_THDU_RESUME_QGROUP_XPE2_PIPE0 */ "THDU queue reset value for UC queue groups.",
    /* MMU_THDU_RESUME_QGROUP_XPE2_PIPE1 */ "THDU queue reset value for UC queue groups.",
    /* MMU_THDU_RESUME_QGROUP_XPE3_PIPE2 */ "THDU queue reset value for UC queue groups.",
    /* MMU_THDU_RESUME_QGROUP_XPE3_PIPE3 */ "THDU queue reset value for UC queue groups.",
    /* MMU_THDU_RESUME_QUEUE     */ "THDU queue reset value for UC queues.",
    /* MMU_THDU_RESUME_QUEUE_XPE0_PIPE0 */ "THDU queue reset value for UC queues.",
    /* MMU_THDU_RESUME_QUEUE_XPE0_PIPE1 */ "THDU queue reset value for UC queues.",
    /* MMU_THDU_RESUME_QUEUE_XPE1_PIPE2 */ "THDU queue reset value for UC queues.",
    /* MMU_THDU_RESUME_QUEUE_XPE1_PIPE3 */ "THDU queue reset value for UC queues.",
    /* MMU_THDU_RESUME_QUEUE_XPE2_PIPE0 */ "THDU queue reset value for UC queues.",
    /* MMU_THDU_RESUME_QUEUE_XPE2_PIPE1 */ "THDU queue reset value for UC queues.",
    /* MMU_THDU_RESUME_QUEUE_XPE3_PIPE2 */ "THDU queue reset value for UC queues.",
    /* MMU_THDU_RESUME_QUEUE_XPE3_PIPE3 */ "THDU queue reset value for UC queues.",
    /* MMU_THDU_UCQ_STATS        */ "This memory is intended for accesses to the packetized statistics memory for debugging purposes.  Both CPU reads and CPU writes to the packetized statistics memory can be achieved by issuing CPU read or write operations to this memory.",
    /* MMU_THDU_UCQ_STATS_TABLE  */ "This memory is intended for DMA read accesses only.  Attempting to write to this memory will result in a SBUS Timeout.  CPU writes to the contents of this memory can be done by accessing the MMU_THDU_UCQ_STATS memory instead.  A DMA read to this memory will return four consecutive UCQ counts begining with the memory location that is on a boundary of 4.  For example, a DMA read access to any of the following addresses (0x11 or 0x12 or 0x13) will return the UCQ counts at locations 0x10,0x11,0x12,0 ...",
    /* MMU_THDU_UCQ_STATS_TABLE_XPE0_PIPE0 */ "This memory is intended for DMA read accesses only.  Attempting to write to this memory will result in a SBUS Timeout.  CPU writes to the contents of this memory can be done by accessing the MMU_THDU_UCQ_STATS memory instead.  A DMA read to this memory will return four consecutive UCQ counts begining with the memory location that is on a boundary of 4.  For example, a DMA read access to any of the following addresses (0x11 or 0x12 or 0x13) will return the UCQ counts at locations 0x10,0x11,0x12,0 ...",
    /* MMU_THDU_UCQ_STATS_TABLE_XPE0_PIPE1 */ "This memory is intended for DMA read accesses only.  Attempting to write to this memory will result in a SBUS Timeout.  CPU writes to the contents of this memory can be done by accessing the MMU_THDU_UCQ_STATS memory instead.  A DMA read to this memory will return four consecutive UCQ counts begining with the memory location that is on a boundary of 4.  For example, a DMA read access to any of the following addresses (0x11 or 0x12 or 0x13) will return the UCQ counts at locations 0x10,0x11,0x12,0 ...",
    /* MMU_THDU_UCQ_STATS_TABLE_XPE1_PIPE2 */ "This memory is intended for DMA read accesses only.  Attempting to write to this memory will result in a SBUS Timeout.  CPU writes to the contents of this memory can be done by accessing the MMU_THDU_UCQ_STATS memory instead.  A DMA read to this memory will return four consecutive UCQ counts begining with the memory location that is on a boundary of 4.  For example, a DMA read access to any of the following addresses (0x11 or 0x12 or 0x13) will return the UCQ counts at locations 0x10,0x11,0x12,0 ...",
    /* MMU_THDU_UCQ_STATS_TABLE_XPE1_PIPE3 */ "This memory is intended for DMA read accesses only.  Attempting to write to this memory will result in a SBUS Timeout.  CPU writes to the contents of this memory can be done by accessing the MMU_THDU_UCQ_STATS memory instead.  A DMA read to this memory will return four consecutive UCQ counts begining with the memory location that is on a boundary of 4.  For example, a DMA read access to any of the following addresses (0x11 or 0x12 or 0x13) will return the UCQ counts at locations 0x10,0x11,0x12,0 ...",
    /* MMU_THDU_UCQ_STATS_TABLE_XPE2_PIPE0 */ "This memory is intended for DMA read accesses only.  Attempting to write to this memory will result in a SBUS Timeout.  CPU writes to the contents of this memory can be done by accessing the MMU_THDU_UCQ_STATS memory instead.  A DMA read to this memory will return four consecutive UCQ counts begining with the memory location that is on a boundary of 4.  For example, a DMA read access to any of the following addresses (0x11 or 0x12 or 0x13) will return the UCQ counts at locations 0x10,0x11,0x12,0 ...",
    /* MMU_THDU_UCQ_STATS_TABLE_XPE2_PIPE1 */ "This memory is intended for DMA read accesses only.  Attempting to write to this memory will result in a SBUS Timeout.  CPU writes to the contents of this memory can be done by accessing the MMU_THDU_UCQ_STATS memory instead.  A DMA read to this memory will return four consecutive UCQ counts begining with the memory location that is on a boundary of 4.  For example, a DMA read access to any of the following addresses (0x11 or 0x12 or 0x13) will return the UCQ counts at locations 0x10,0x11,0x12,0 ...",
    /* MMU_THDU_UCQ_STATS_TABLE_XPE3_PIPE2 */ "This memory is intended for DMA read accesses only.  Attempting to write to this memory will result in a SBUS Timeout.  CPU writes to the contents of this memory can be done by accessing the MMU_THDU_UCQ_STATS memory instead.  A DMA read to this memory will return four consecutive UCQ counts begining with the memory location that is on a boundary of 4.  For example, a DMA read access to any of the following addresses (0x11 or 0x12 or 0x13) will return the UCQ counts at locations 0x10,0x11,0x12,0 ...",
    /* MMU_THDU_UCQ_STATS_TABLE_XPE3_PIPE3 */ "This memory is intended for DMA read accesses only.  Attempting to write to this memory will result in a SBUS Timeout.  CPU writes to the contents of this memory can be done by accessing the MMU_THDU_UCQ_STATS memory instead.  A DMA read to this memory will return four consecutive UCQ counts begining with the memory location that is on a boundary of 4.  For example, a DMA read access to any of the following addresses (0x11 or 0x12 or 0x13) will return the UCQ counts at locations 0x10,0x11,0x12,0 ...",
    /* MMU_THDU_UCQ_STATS_XPE0_PIPE0 */ "This memory is intended for accesses to the packetized statistics memory for debugging purposes.  Both CPU reads and CPU writes to the packetized statistics memory can be achieved by issuing CPU read or write operations to this memory.",
    /* MMU_THDU_UCQ_STATS_XPE0_PIPE1 */ "This memory is intended for accesses to the packetized statistics memory for debugging purposes.  Both CPU reads and CPU writes to the packetized statistics memory can be achieved by issuing CPU read or write operations to this memory.",
    /* MMU_THDU_UCQ_STATS_XPE1_PIPE2 */ "This memory is intended for accesses to the packetized statistics memory for debugging purposes.  Both CPU reads and CPU writes to the packetized statistics memory can be achieved by issuing CPU read or write operations to this memory.",
    /* MMU_THDU_UCQ_STATS_XPE1_PIPE3 */ "This memory is intended for accesses to the packetized statistics memory for debugging purposes.  Both CPU reads and CPU writes to the packetized statistics memory can be achieved by issuing CPU read or write operations to this memory.",
    /* MMU_THDU_UCQ_STATS_XPE2_PIPE0 */ "This memory is intended for accesses to the packetized statistics memory for debugging purposes.  Both CPU reads and CPU writes to the packetized statistics memory can be achieved by issuing CPU read or write operations to this memory.",
    /* MMU_THDU_UCQ_STATS_XPE2_PIPE1 */ "This memory is intended for accesses to the packetized statistics memory for debugging purposes.  Both CPU reads and CPU writes to the packetized statistics memory can be achieved by issuing CPU read or write operations to this memory.",
    /* MMU_THDU_UCQ_STATS_XPE3_PIPE2 */ "This memory is intended for accesses to the packetized statistics memory for debugging purposes.  Both CPU reads and CPU writes to the packetized statistics memory can be achieved by issuing CPU read or write operations to this memory.",
    /* MMU_THDU_UCQ_STATS_XPE3_PIPE3 */ "This memory is intended for accesses to the packetized statistics memory for debugging purposes.  Both CPU reads and CPU writes to the packetized statistics memory can be achieved by issuing CPU read or write operations to this memory.",
    /* MMU_THDU_XPIPE_BST_PORT   */ "THDU BST counters for UC ports.    This is for ports in X pipe.",
    /* MMU_THDU_XPIPE_BST_QGROUP */ "THDU BST counters for UC queue group.  This is for queue groups in X pipe.",
    /* MMU_THDU_XPIPE_BST_QUEUE  */ "THDU BST counters for UC queues.  This is for queues in X pipe.",
    /* MMU_THDU_XPIPE_CONFIG_PORT */ "THDU configuration for UC queue groups.  This is for ports in X pipe.",
    /* MMU_THDU_XPIPE_CONFIG_QGROUP */ "THDU configuration for UC queue groups.  This is for queue groups in X pipe.",
    /* MMU_THDU_XPIPE_CONFIG_QUEUE */ "THDU configuration for UC queues.  This is for queues in X pipe.",
    /* MMU_THDU_XPIPE_COUNTER_PORT */ "THDU counters for UC queue groups.    This is for ports in X pipe.",
    /* MMU_THDU_XPIPE_COUNTER_QGROUP */ "THDU counters for UC queue groups.  This is for queue groups in X pipe.",
    /* MMU_THDU_XPIPE_COUNTER_QUEUE */ "THDU counters for UC queues.  This is for queues in X pipe.",
    /* MMU_THDU_XPIPE_OFFSET_QGROUP */ "THDU offset for UC queue groups.  This is for queue groups in X pipe.",
    /* MMU_THDU_XPIPE_OFFSET_QUEUE */ "THDU queue offset for UC queues.  This is for queues in X pipe.",
    /* MMU_THDU_XPIPE_Q_TO_QGRP_MAP */ "UC queue to queue group mapping.  Address index = uc_queue_num.  This is for queues in X pipe.",
    /* MMU_THDU_XPIPE_Q_TO_QGRP_MAP_0 */ "First physical copy of MMU_THDU_Q_TO_QGRP_MAP",
    /* MMU_THDU_XPIPE_Q_TO_QGRP_MAP_1 */ "Second physical copy of MMU_THDU_Q_TO_QGRP_MAP",
    /* MMU_THDU_XPIPE_RESUME_PORT */ "THDU configuration for UC queue groups.  This is for ports in X pipe.",
    /* MMU_THDU_XPIPE_RESUME_PORT_0 */ "First physical copy of MMU_THDU_RESUME_PORT",
    /* MMU_THDU_XPIPE_RESUME_PORT_1 */ "Second physical copy of MMU_THDU_RESUME_PORT",
    /* MMU_THDU_XPIPE_RESUME_QGROUP */ "THDU queue reset value for UC queue groups.  This is for queue groups in X pipe.",
    /* MMU_THDU_XPIPE_RESUME_QUEUE */ "THDU queue reset value for UC queues.  This is for queues in X pipe.",
    /* MMU_THDU_YPIPE_BST_PORT   */ "THDU BST counters for UC ports.",
    /* MMU_THDU_YPIPE_BST_QGROUP */ "THDU BST counters for UC queue group.",
    /* MMU_THDU_YPIPE_BST_QUEUE  */ "THDU BST counters for UC queues.",
    /* MMU_THDU_YPIPE_CONFIG_PORT */ "THDU configuration for UC queue groups.",
    /* MMU_THDU_YPIPE_CONFIG_QGROUP */ "THDU configuration for UC queue groups.",
    /* MMU_THDU_YPIPE_CONFIG_QUEUE */ "THDU configuration for UC queues.",
    /* MMU_THDU_YPIPE_COUNTER_PORT */ "THDU counters for UC queue groups.",
    /* MMU_THDU_YPIPE_COUNTER_QGROUP */ "THDU counters for UC queue groups.",
    /* MMU_THDU_YPIPE_COUNTER_QUEUE */ "THDU counters for UC queues.",
    /* MMU_THDU_YPIPE_OFFSET_QGROUP */ "THDU offset for UC queue groups.",
    /* MMU_THDU_YPIPE_OFFSET_QUEUE */ "THDU queue offset for UC queues.",
    /* MMU_THDU_YPIPE_Q_TO_QGRP_MAP */ "UC queue to queue group mapping.  Address index = uc_queue_num.",
    /* MMU_THDU_YPIPE_Q_TO_QGRP_MAP_0 */ "First physical copy of MMU_THDU_YPIPE_Q_TO_QGRP_MAP",
    /* MMU_THDU_YPIPE_Q_TO_QGRP_MAP_1 */ "Second physical copy of MMU_THDU_YPIPE_Q_TO_QGRP_MAP",
    /* MMU_THDU_YPIPE_RESUME_PORT */ "THDU configuration for UC queue groups.",
    /* MMU_THDU_YPIPE_RESUME_PORT_0 */ "First physical copy of MMU_THDU_YPIPE_RESUME_PORT",
    /* MMU_THDU_YPIPE_RESUME_PORT_1 */ "Second physical copy of MMU_THDU_YPIPE_RESUME_PORT",
    /* MMU_THDU_YPIPE_RESUME_QGROUP */ "THDU queue reset value for UC queue groups.",
    /* MMU_THDU_YPIPE_RESUME_QUEUE */ "THDU queue reset value for UC queues.",
    /* MMU_TOQRDE                */ "TOQRDE",
    /* MMU_TOQ_EOPE_TBL          */ "TOQ EOPE Database, memory : Hold EOPE state for external buffer usage tracking. No CPU access in traffic",
    /* MMU_TOQ_IPMC_GROUP_TBL0   */ "TOQ IPMC VLAN Group Table 0 for port#1-5",
    /* MMU_TOQ_IPMC_GROUP_TBL1   */ "TOQ IPMC VLAN Group Table 1 for port#6-10",
    /* MMU_TOQ_IPMC_GROUP_TBL2   */ "TOQ IPMC VLAN Group Table 2 for port#11-15",
    /* MMU_TOQ_IPMC_GROUP_TBL3   */ "TOQ IPMC VLAN Group Table 3 for port#16-20",
    /* MMU_TOQ_IPMC_GROUP_TBL4   */ "TOQ IPMC VLAN Group Table 4 for port#21-25",
    /* MMU_TOQ_IPMC_GROUP_TBL5   */ "TOQ IPMC VLAN Group Table 5 for port#26-30",
    /* MMU_TOQ_IPMC_GROUP_TBL6   */ "TOQ IPMC VLAN Group Table 6 for port#31-35",
    /* MMU_TOQ_PORT_STATE_MEM    */ "TOQ PORT_STATE Database, memory : Dbug access only for 4K queues midpacket state info. No access in traffic",
    /* MMU_TOQ_QPACK_MODE        */ "TOQ QPACK_MODE. Per queue configuration, 16 Queues per address, so memory is addressed by QID[11:4] and bits within memory by QID[3:0]",
    /* MMU_TOQ_STATE_MEM0        */ "TOQ STATE Database, mem0",
    /* MMU_TOQ_STATE_MEM1        */ "TOQ STATE Database, mem1",
    /* MMU_UCQDB0                */ "UCQDB0",
    /* MMU_UCQDB1                */ "UCQDB1",
    /* MMU_UCQDB_X               */ "Unicast queue database.  This is a working FIFO maintained by hardware.",
    /* MMU_UCQDB_X_XPE0          */ "Unicast queue database.  This is a working FIFO maintained by hardware.",
    /* MMU_UCQDB_X_XPE1          */ "Unicast queue database.  This is a working FIFO maintained by hardware.",
    /* MMU_UCQDB_X_XPE2          */ "Unicast queue database.  This is a working FIFO maintained by hardware.",
    /* MMU_UCQDB_X_XPE3          */ "Unicast queue database.  This is a working FIFO maintained by hardware.",
    /* MMU_UCQDB_Y               */ "Multicast queue database.  This is a working FIFO maintained by hardware.",
    /* MMU_UCQDB_Y_XPE0          */ "Multicast queue database.  This is a working FIFO maintained by hardware.",
    /* MMU_UCQDB_Y_XPE1          */ "Multicast queue database.  This is a working FIFO maintained by hardware.",
    /* MMU_UCQDB_Y_XPE2          */ "Multicast queue database.  This is a working FIFO maintained by hardware.",
    /* MMU_UCQDB_Y_XPE3          */ "Multicast queue database.  This is a working FIFO maintained by hardware.",
    /* MMU_UCQ_RP                */ "UCQ_RP",
    /* MMU_UCQ_WP                */ "UCQ_WP",
    /* MMU_UC_QDB                */ "UC_QDB",
    /* MMU_WAFAA                 */ "WAFAA",
    /* MMU_WAFAB                 */ "WAFAB",
    /* MMU_WAFAC                 */ "WAFAC",
    /* MMU_WAFA_HALFA_RADDR_STATUS */ "WAF HALFA RADDR + STATUS Indirect Mechanism.",
    /* MMU_WAFA_HALFB_RADDR_STATUS */ "WAF HALFB RADDR + STATUS Indirect Mechanism.",
    /* MMU_WAFBA                 */ "WAFBA",
    /* MMU_WAFBB                 */ "WAFBB",
    /* MMU_WAFBC                 */ "WAFBC",
    /* MMU_WAFB_HALFA_RADDR_STATUS */ "WAF HALFA RADDR + STATUS Indirect Mechanism.",
    /* MMU_WAFB_HALFB_RADDR_STATUS */ "WAF HALFB RADDR + STATUS Indirect Mechanism.",
    /* MMU_WAFC_HALFA_RADDR_STATUS */ "WAF HALFA RADDR + STATUS Indirect Mechanism.",
    /* MMU_WAFC_HALFB_RADDR_STATUS */ "WAF HALFB RADDR + STATUS Indirect Mechanism.",
    /* MMU_WAFD_HALFA_RADDR_STATUS */ "WAF HALFA RADDR + STATUS Indirect Mechanism.",
    /* MMU_WAFD_HALFB_RADDR_STATUS */ "WAF HALFB RADDR + STATUS Indirect Mechanism.",
    /* MMU_WAFE_HALFA_RADDR_STATUS */ "WAF HALFA RADDR + STATUS Indirect Mechanism.",
    /* MMU_WAFE_HALFB_RADDR_STATUS */ "WAF HALFB RADDR + STATUS Indirect Mechanism.",
    /* MMU_WAFF_HALFA_RADDR_STATUS */ "WAF HALFA RADDR + STATUS Indirect Mechanism.",
    /* MMU_WAFF_HALFB_RADDR_STATUS */ "WAF HALFB RADDR + STATUS Indirect Mechanism.",
    /* MMU_WAFG_HALFA_RADDR_STATUS */ "WAF HALFA RADDR + STATUS Indirect Mechanism.",
    /* MMU_WAFG_HALFB_RADDR_STATUS */ "WAF HALFB RADDR + STATUS Indirect Mechanism.",
    /* MMU_WAFH_HALFA_RADDR_STATUS */ "WAF HALFA RADDR + STATUS Indirect Mechanism.",
    /* MMU_WAFH_HALFB_RADDR_STATUS */ "WAF HALFB RADDR + STATUS Indirect Mechanism.",
    /* MMU_WAF_HALFA_WADDR       */ "WAF HALFA WADDR Indirect Mechanism.",
    /* MMU_WAF_HALFB_WADDR       */ "WAF HALFB WADDR Indirect Mechanism.",
    /* MMU_WAMULINK              */ "WAMULINK",
    /* MMU_WAMU_MEM0             */ "Wireless Reassembly Context Table RAM",
    /* MMU_WAMU_MEM1             */ "Wireless Reassembly Context Table RAM",
    /* MMU_WAMU_MEM2             */ "Wireless Reassembly Context Table RAM",
    /* MMU_WAMU_MEM3             */ "Wireless Reassembly Context Table RAM",
    /* MMU_WDFAA                 */ "WDFAA",
    /* MMU_WDFAB                 */ "WDFAB",
    /* MMU_WDFAC                 */ "WDFAC",
    /* MMU_WDFBA                 */ "WDFBA",
    /* MMU_WDFBB                 */ "WDFBB",
    /* MMU_WDFBC                 */ "WDFBC",
    /* MMU_WFAFA                 */ "WFAFA",
    /* MMU_WFAFB                 */ "WFAFB",
    /* MMU_WFAFC                 */ "WFAFC",
    /* MMU_WFDFA                 */ "WFDFA",
    /* MMU_WFDFB                 */ "WFDFB",
    /* MMU_WFDFC                 */ "WFDFC",
    /* MMU_WRED_AVG_QSIZE        */ "WRED Average Queue Size Memory for Unicast Queue, Queue Group and Port service Pool.\nThe range:\n1023 ~    0: Unicast Queue\n1279 ~ 1024: Queue Group\n1531 ~ 1280: Port Service Pool (port 0 to 62)\n             Address = { 1, PortID[5:0], SPID[1:0]}\n         Each Port's service pool is addressed by Address[1:0] of this memory address .\n1535 ~ 1532: Global Service Pool\n       1532: Global Service Pool 0\n       1533: Global Service Pool 1\n       1534: Global Service Pool 2\n       1535: Global Service  ...",
    /* MMU_WRED_AVG_QSIZE_QGROUP */ "WRED Average Queue Size Memory for All Queues of Network Ports\nif(port_number = 58~65) MEM_ADDR[5:0]= { (port_number-58)*8+ QUEUE_GROUP_ID[2:0]}\nQUEUE_GROUP_ID[2:0] = 0~7",
    /* MMU_WRED_AVG_QSIZE_XPE0_PIPE0 */ "WRED Average Queue Size Memory for Unicast Queue, and Port service Pool.\nThe range:\n329 ~   0: Unicast Queue\n461 ~ 330: Port Service Pool (port 0 to 32)\n           Address = 330 + {PORTID[5:0], SPID[1:0]} per PIPE\n           Each Port's service pool is addressed by Address[1:0] of this memory address.\n465 ~ 462: Global Service Pool\n      462: Global Service Pool 0\n      463: Global Service Pool 1\n      464: Global Service Pool 2\n      465: Global Service Pool 3\nThe physcial memory spans from 0 t ...",
    /* MMU_WRED_AVG_QSIZE_XPE0_PIPE1 */ "WRED Average Queue Size Memory for Unicast Queue, and Port service Pool.\nThe range:\n329 ~   0: Unicast Queue\n461 ~ 330: Port Service Pool (port 0 to 32)\n           Address = 330 + {PORTID[5:0], SPID[1:0]} per PIPE\n           Each Port's service pool is addressed by Address[1:0] of this memory address.\n465 ~ 462: Global Service Pool\n      462: Global Service Pool 0\n      463: Global Service Pool 1\n      464: Global Service Pool 2\n      465: Global Service Pool 3\nThe physcial memory spans from 0 t ...",
    /* MMU_WRED_AVG_QSIZE_XPE1_PIPE2 */ "WRED Average Queue Size Memory for Unicast Queue, and Port service Pool.\nThe range:\n329 ~   0: Unicast Queue\n461 ~ 330: Port Service Pool (port 0 to 32)\n           Address = 330 + {PORTID[5:0], SPID[1:0]} per PIPE\n           Each Port's service pool is addressed by Address[1:0] of this memory address.\n465 ~ 462: Global Service Pool\n      462: Global Service Pool 0\n      463: Global Service Pool 1\n      464: Global Service Pool 2\n      465: Global Service Pool 3\nThe physcial memory spans from 0 t ...",
    /* MMU_WRED_AVG_QSIZE_XPE1_PIPE3 */ "WRED Average Queue Size Memory for Unicast Queue, and Port service Pool.\nThe range:\n329 ~   0: Unicast Queue\n461 ~ 330: Port Service Pool (port 0 to 32)\n           Address = 330 + {PORTID[5:0], SPID[1:0]} per PIPE\n           Each Port's service pool is addressed by Address[1:0] of this memory address.\n465 ~ 462: Global Service Pool\n      462: Global Service Pool 0\n      463: Global Service Pool 1\n      464: Global Service Pool 2\n      465: Global Service Pool 3\nThe physcial memory spans from 0 t ...",
    /* MMU_WRED_AVG_QSIZE_XPE2_PIPE0 */ "WRED Average Queue Size Memory for Unicast Queue, and Port service Pool.\nThe range:\n329 ~   0: Unicast Queue\n461 ~ 330: Port Service Pool (port 0 to 32)\n           Address = 330 + {PORTID[5:0], SPID[1:0]} per PIPE\n           Each Port's service pool is addressed by Address[1:0] of this memory address.\n465 ~ 462: Global Service Pool\n      462: Global Service Pool 0\n      463: Global Service Pool 1\n      464: Global Service Pool 2\n      465: Global Service Pool 3\nThe physcial memory spans from 0 t ...",
    /* MMU_WRED_AVG_QSIZE_XPE2_PIPE1 */ "WRED Average Queue Size Memory for Unicast Queue, and Port service Pool.\nThe range:\n329 ~   0: Unicast Queue\n461 ~ 330: Port Service Pool (port 0 to 32)\n           Address = 330 + {PORTID[5:0], SPID[1:0]} per PIPE\n           Each Port's service pool is addressed by Address[1:0] of this memory address.\n465 ~ 462: Global Service Pool\n      462: Global Service Pool 0\n      463: Global Service Pool 1\n      464: Global Service Pool 2\n      465: Global Service Pool 3\nThe physcial memory spans from 0 t ...",
    /* MMU_WRED_AVG_QSIZE_XPE3_PIPE2 */ "WRED Average Queue Size Memory for Unicast Queue, and Port service Pool.\nThe range:\n329 ~   0: Unicast Queue\n461 ~ 330: Port Service Pool (port 0 to 32)\n           Address = 330 + {PORTID[5:0], SPID[1:0]} per PIPE\n           Each Port's service pool is addressed by Address[1:0] of this memory address.\n465 ~ 462: Global Service Pool\n      462: Global Service Pool 0\n      463: Global Service Pool 1\n      464: Global Service Pool 2\n      465: Global Service Pool 3\nThe physcial memory spans from 0 t ...",
    /* MMU_WRED_AVG_QSIZE_XPE3_PIPE3 */ "WRED Average Queue Size Memory for Unicast Queue, and Port service Pool.\nThe range:\n329 ~   0: Unicast Queue\n461 ~ 330: Port Service Pool (port 0 to 32)\n           Address = 330 + {PORTID[5:0], SPID[1:0]} per PIPE\n           Each Port's service pool is addressed by Address[1:0] of this memory address.\n465 ~ 462: Global Service Pool\n      462: Global Service Pool 0\n      463: Global Service Pool 1\n      464: Global Service Pool 2\n      465: Global Service Pool 3\nThe physcial memory spans from 0 t ...",
    /* MMU_WRED_AVG_QSIZE_X_PIPE */ "WRED Average Queue Size Memory for Unicast Queue, Queue Group and Port service Pool.\nThe range:\n1479 ~    0: Unicast Queue\n1487 ~ 1480: Not Used\n1615 - 1488: Queue Group\n             Address = 1488 + {QGROUPID[6:0]}\n1823 ~ 1616: Port Service Pool (port 0 to 51)\n             Address = 1616 + {PortID[5:0], SPID[1:0]}\n         Each Port's service pool is addressed by Address[1:0] of this memory address .\n1839 ~ 1824: Not Used\n1843 ~ 1840: Global Service Pool\n       1840: Global Service Pool 0\n      ...",
    /* MMU_WRED_AVG_QSIZE_Y_PIPE */ "WRED Average Queue Size Memory for Unicast Queue, Queue Group and Port service Pool.\nThe range:\n1479 ~    0: Unicast Queue\n1487 ~ 1480: Not Used\n1615 - 1488: Queue Group\n             Address = 1488 + {QGROUPID[6:0]}\n1823 ~ 1616: Port Service Pool (port 0 to 51)\n             Address = 1616 + {PortID[5:0], SPID[1:0]}\n         Each Port's service pool is addressed by Address[1:0] of this memory address .\n1839 ~ 1824: Not Used\n1843 ~ 1840: Global Service Pool\n       1840: Global Service Pool 0\n      ...",
    /* MMU_WRED_CFG_CELL         */ "WRED Configuartion and Average Qsize Memory for Cell",
    /* MMU_WRED_CFG_PACKET       */ "WRED Configuartion and Average Qsize Memory for Packet",
    /* MMU_WRED_CONFIG           */ "WRED Config Memory for Unicast Queue, Queue Group and Port service Pool.\nThe range:\n1023 ~    0: Unicast Queue\n1279 ~ 1024: Queue Group\n1531 ~ 1280: Port Service Pool (port 0 to 62)\n             Address = { 1, PortID[5:0], SPID[1:0]}\n         Each Port's service pool is addressed by Address[1:0] of this memory address .\n1535 ~ 1532: Global Service Pool\n       1532: Global Service Pool 0\n       1533: Global Service Pool 1\n       1534: Global Service Pool 2\n       1535: Global Service Pool 3\nQGROU ...",
    /* MMU_WRED_CONFIG_QGROUP    */ "WRED Config Memory for all queue group of network ports.\nNote: the QG \"ECN_MARKING_EN\" won't have any effect on hardware!! Hardware will honor\nper-Q's setting.\n\nif(port_number = 58~65) MEM_ADDR[5:0]= { (port_number-58)*8+ QUEUE_GROUP_ID[2:0]}\nQUEUE_GROUP_ID[2:0] = 0~7",
    /* MMU_WRED_CONFIG_XPE0_PIPE0 */ "WRED Config Memory for Unicast Queue, PortSP and service Pool.\nThe range:\n329 ~   0: Unicast Queue\n461 ~ 330: Port Service Pool (port 0 to 32)\n           Address = 330 + {PORTID[5:0], SPID[1:0]} per PIPE\n           Each Port's service pool is addressed by Address[1:0] of this memory address.\n465 ~ 462: Global Service Pool\n      462: Global Service Pool 0\n      463: Global Service Pool 1\n      464: Global Service Pool 2\n      465: Global Service Pool 3\nECN_MARKING_EN, LOGICAL_Q_TRACK_ENABLE, QG_E ...",
    /* MMU_WRED_CONFIG_XPE0_PIPE1 */ "WRED Config Memory for Unicast Queue, PortSP and service Pool.\nThe range:\n329 ~   0: Unicast Queue\n461 ~ 330: Port Service Pool (port 0 to 32)\n           Address = 330 + {PORTID[5:0], SPID[1:0]} per PIPE\n           Each Port's service pool is addressed by Address[1:0] of this memory address.\n465 ~ 462: Global Service Pool\n      462: Global Service Pool 0\n      463: Global Service Pool 1\n      464: Global Service Pool 2\n      465: Global Service Pool 3\nECN_MARKING_EN, LOGICAL_Q_TRACK_ENABLE, QG_E ...",
    /* MMU_WRED_CONFIG_XPE1_PIPE2 */ "WRED Config Memory for Unicast Queue, PortSP and service Pool.\nThe range:\n329 ~   0: Unicast Queue\n461 ~ 330: Port Service Pool (port 0 to 32)\n           Address = 330 + {PORTID[5:0], SPID[1:0]} per PIPE\n           Each Port's service pool is addressed by Address[1:0] of this memory address.\n465 ~ 462: Global Service Pool\n      462: Global Service Pool 0\n      463: Global Service Pool 1\n      464: Global Service Pool 2\n      465: Global Service Pool 3\nECN_MARKING_EN, LOGICAL_Q_TRACK_ENABLE, QG_E ...",
    /* MMU_WRED_CONFIG_XPE1_PIPE3 */ "WRED Config Memory for Unicast Queue, PortSP and service Pool.\nThe range:\n329 ~   0: Unicast Queue\n461 ~ 330: Port Service Pool (port 0 to 32)\n           Address = 330 + {PORTID[5:0], SPID[1:0]} per PIPE\n           Each Port's service pool is addressed by Address[1:0] of this memory address.\n465 ~ 462: Global Service Pool\n      462: Global Service Pool 0\n      463: Global Service Pool 1\n      464: Global Service Pool 2\n      465: Global Service Pool 3\nECN_MARKING_EN, LOGICAL_Q_TRACK_ENABLE, QG_E ...",
    /* MMU_WRED_CONFIG_XPE2_PIPE0 */ "WRED Config Memory for Unicast Queue, PortSP and service Pool.\nThe range:\n329 ~   0: Unicast Queue\n461 ~ 330: Port Service Pool (port 0 to 32)\n           Address = 330 + {PORTID[5:0], SPID[1:0]} per PIPE\n           Each Port's service pool is addressed by Address[1:0] of this memory address.\n465 ~ 462: Global Service Pool\n      462: Global Service Pool 0\n      463: Global Service Pool 1\n      464: Global Service Pool 2\n      465: Global Service Pool 3\nECN_MARKING_EN, LOGICAL_Q_TRACK_ENABLE, QG_E ...",
    /* MMU_WRED_CONFIG_XPE2_PIPE1 */ "WRED Config Memory for Unicast Queue, PortSP and service Pool.\nThe range:\n329 ~   0: Unicast Queue\n461 ~ 330: Port Service Pool (port 0 to 32)\n           Address = 330 + {PORTID[5:0], SPID[1:0]} per PIPE\n           Each Port's service pool is addressed by Address[1:0] of this memory address.\n465 ~ 462: Global Service Pool\n      462: Global Service Pool 0\n      463: Global Service Pool 1\n      464: Global Service Pool 2\n      465: Global Service Pool 3\nECN_MARKING_EN, LOGICAL_Q_TRACK_ENABLE, QG_E ...",
    /* MMU_WRED_CONFIG_XPE3_PIPE2 */ "WRED Config Memory for Unicast Queue, PortSP and service Pool.\nThe range:\n329 ~   0: Unicast Queue\n461 ~ 330: Port Service Pool (port 0 to 32)\n           Address = 330 + {PORTID[5:0], SPID[1:0]} per PIPE\n           Each Port's service pool is addressed by Address[1:0] of this memory address.\n465 ~ 462: Global Service Pool\n      462: Global Service Pool 0\n      463: Global Service Pool 1\n      464: Global Service Pool 2\n      465: Global Service Pool 3\nECN_MARKING_EN, LOGICAL_Q_TRACK_ENABLE, QG_E ...",
    /* MMU_WRED_CONFIG_XPE3_PIPE3 */ "WRED Config Memory for Unicast Queue, PortSP and service Pool.\nThe range:\n329 ~   0: Unicast Queue\n461 ~ 330: Port Service Pool (port 0 to 32)\n           Address = 330 + {PORTID[5:0], SPID[1:0]} per PIPE\n           Each Port's service pool is addressed by Address[1:0] of this memory address.\n465 ~ 462: Global Service Pool\n      462: Global Service Pool 0\n      463: Global Service Pool 1\n      464: Global Service Pool 2\n      465: Global Service Pool 3\nECN_MARKING_EN, LOGICAL_Q_TRACK_ENABLE, QG_E ...",
    /* MMU_WRED_CONFIG_X_PIPE    */ "WRED Config Memory for Unicast Queue, Queue Group and Port service Pool.\nThe range:\n1479 ~    0: Unicast Queue\n1487 ~ 1480: Not used.\n1615 - 1488: Queue Group per PIPE\n             Address = 1488 + QGROUPID[6:0] per PIPE\n1823 ~ 1616: Port Service Pool (port 0 to 52)\n             Address = 1616 + {PORTID[5:0], SPID[1:0]} per PIPE\n         Each Port's service pool is addressed by Address[1:0] of this memory address .\n1843 ~ 1840: Global Service Pool\n       1840: Global Service Pool 0\n       1841:  ...",
    /* MMU_WRED_CONFIG_Y_PIPE    */ "WRED Config Memory for Unicast Queue, Queue Group and Port service Pool.\nThe range:\n1479 ~    0: Unicast Queue\n1487 ~ 1480: Not used.\n1615 - 1488: Queue Group per PIPE\n             Address = 1488 + QGROUPID[6:0] per PIPE\n1823 ~ 1616: Port Service Pool (port 0 to 52)\n             Address = 1616 + {PORTID[5:0], SPID[1:0]} per PIPE\n             Each Port's service pool is addressed by Address[1:0] of this memory address .\n1843 ~ 1840: Global Service Pool\n       1840: Global Service Pool 0\n       18 ...",
    /* MMU_WRED_DROP_CURVE_PROFILE_0 */ "WRED Drop Curve Profile for TCP Green Traffic",
    /* MMU_WRED_DROP_CURVE_PROFILE_1 */ "WRED Drop Curve Profile for TCP Yellow Traffic",
    /* MMU_WRED_DROP_CURVE_PROFILE_2 */ "WRED Drop Curve Profile For TCP Red Traffic",
    /* MMU_WRED_DROP_CURVE_PROFILE_3 */ "WRED Drop Curve Profile For Non-TCP Green Traffic",
    /* MMU_WRED_DROP_CURVE_PROFILE_4 */ "WRED Drop Curve Profile For Non-TCP Yellow Traffic",
    /* MMU_WRED_DROP_CURVE_PROFILE_5 */ "WRED Drop Curve Profile For Non-TCP Red Traffic",
    /* MMU_WRED_DROP_CURVE_PROFILE_6 */ "WRED Drop Curve Profile For ECN Marking Green packets",
    /* MMU_WRED_DROP_CURVE_PROFILE_7 */ "WRED Drop Curve Profile For ECN Marking Yellow packets",
    /* MMU_WRED_DROP_CURVE_PROFILE_8 */ "WRED Drop Curve Profile For ECN Marking Red packets",
    /* MMU_WRED_DROP_CURVE_PROFILE_0_A */ "WRED Drop Curve Profile for Responsive Dropping Green Traffic, single view",
    /* MMU_WRED_DROP_CURVE_PROFILE_0_B */ "WRED Drop Curve Profile for Responsive Dropping Green Traffic, single view",
    /* MMU_WRED_DROP_CURVE_PROFILE_0_X_PIPE */ "WRED Drop Curve Profile for TCP Green Traffic",
    /* MMU_WRED_DROP_CURVE_PROFILE_0_Y_PIPE */ "WRED Drop Curve Profile for TCP Green Traffic",
    /* MMU_WRED_DROP_CURVE_PROFILE_1_A */ "WRED Drop Curve Profile for Responsive Dropping Yellow Traffic, single view",
    /* MMU_WRED_DROP_CURVE_PROFILE_1_B */ "WRED Drop Curve Profile for Responsive Dropping Yellow Traffic, single view",
    /* MMU_WRED_DROP_CURVE_PROFILE_1_X_PIPE */ "WRED Drop Curve Profile for TCP Yellow Traffic",
    /* MMU_WRED_DROP_CURVE_PROFILE_1_Y_PIPE */ "WRED Drop Curve Profile for TCP Yellow Traffic",
    /* MMU_WRED_DROP_CURVE_PROFILE_2_A */ "WRED Drop Curve Profile for Responsive Dropping Red Traffic, single view",
    /* MMU_WRED_DROP_CURVE_PROFILE_2_B */ "WRED Drop Curve Profile for Responsive Dropping Red Traffic, single view",
    /* MMU_WRED_DROP_CURVE_PROFILE_2_X_PIPE */ "WRED Drop Curve Profile For TCP Red Traffic",
    /* MMU_WRED_DROP_CURVE_PROFILE_2_Y_PIPE */ "WRED Drop Curve Profile For TCP Red Traffic",
    /* MMU_WRED_DROP_CURVE_PROFILE_3_A */ "WRED Drop Curve Profile for Non-Responsive Dropping Green Traffic, single view",
    /* MMU_WRED_DROP_CURVE_PROFILE_3_B */ "WRED Drop Curve Profile for Non-Responsive Dropping Green Traffic, single view",
    /* MMU_WRED_DROP_CURVE_PROFILE_3_X_PIPE */ "WRED Drop Curve Profile For Non-TCP Green Traffic",
    /* MMU_WRED_DROP_CURVE_PROFILE_3_Y_PIPE */ "WRED Drop Curve Profile For Non-TCP Green Traffic",
    /* MMU_WRED_DROP_CURVE_PROFILE_4_A */ "WRED Drop Curve Profile for Non-Responsive Dropping Yellow Traffic, single view",
    /* MMU_WRED_DROP_CURVE_PROFILE_4_B */ "WRED Drop Curve Profile for Non-Responsive Dropping Yellow Traffic, single view",
    /* MMU_WRED_DROP_CURVE_PROFILE_4_X_PIPE */ "WRED Drop Curve Profile For Non-TCP Yellow Traffic",
    /* MMU_WRED_DROP_CURVE_PROFILE_4_Y_PIPE */ "WRED Drop Curve Profile For Non-TCP Yellow Traffic",
    /* MMU_WRED_DROP_CURVE_PROFILE_5_A */ "WRED Drop Curve Profile for Non-Responsive Dropping Red Traffic, single view",
    /* MMU_WRED_DROP_CURVE_PROFILE_5_B */ "WRED Drop Curve Profile for Non-Responsive Dropping Red Traffic, single view",
    /* MMU_WRED_DROP_CURVE_PROFILE_5_X_PIPE */ "WRED Drop Curve Profile For Non-TCP Red Traffic",
    /* MMU_WRED_DROP_CURVE_PROFILE_5_Y_PIPE */ "WRED Drop Curve Profile For Non-TCP Red Traffic",
    /* MMU_WRED_DROP_CURVE_PROFILE_6_A */ "WRED Drop Curve Profile for ECN Marking Green Traffic, single view",
    /* MMU_WRED_DROP_CURVE_PROFILE_6_B */ "WRED Drop Curve Profile for ECN Marking Green Traffic, single view",
    /* MMU_WRED_DROP_CURVE_PROFILE_7_A */ "WRED Drop Curve Profile for ECN Marking Yellow Traffic, single view",
    /* MMU_WRED_DROP_CURVE_PROFILE_7_B */ "WRED Drop Curve Profile for ECN Marking Yellow Traffic, single view",
    /* MMU_WRED_DROP_CURVE_PROFILE_8_A */ "WRED Drop Curve Profile for ECN Marking Red Traffic, single view",
    /* MMU_WRED_DROP_CURVE_PROFILE_8_B */ "WRED Drop Curve Profile for ECN Marking Red Traffic, single view",
    /* MMU_WRED_DROP_PROFILE_GREEN */ "WRED Responsive Drop Curve Profile for Green Packet",
    /* MMU_WRED_DROP_PROFILE_RED */ "WRED Responsive Drop Curve Profile for RED Packet",
    /* MMU_WRED_DROP_PROFILE_YELLOW */ "WRED Responsive Drop Curve Profile for Yellow Packet",
    /* MMU_WRED_DROP_THD_UC_DEQ0 */ "WRED Unicast Drop Threshold Memory for Deq pipe 0",
    /* MMU_WRED_DROP_THD_UC_DEQ1 */ "WRED Unicast Drop Threshold Memory for Deq pipe 1",
    /* MMU_WRED_DROP_THD_UC_ENQ0 */ "WRED Unicast Drop Threshold Memory for Enq pipe 0",
    /* MMU_WRED_DROP_THD_UC_ENQ1 */ "WRED Unicast Drop Threshold Memory for Enq pipe 1",
    /* MMU_WRED_MARK_PROFILE_GREEN */ "WRED Mark Curve Profile for Green Packet",
    /* MMU_WRED_MARK_PROFILE_RED */ "WRED Mark Curve Profile for Red Packet",
    /* MMU_WRED_MARK_PROFILE_YELLOW */ "WRED Mark Curve Profile for Yellow Packet",
    /* MMU_WRED_MARK_THD         */ "WRED Mark Threshold Memory\nMEM_ADDR[7:0]={PORT_ID[4:0], QUEUE_ID[2:0]}\nPORT_ID[4:0] = 0, PORT 2,\nPORT_ID[4:0] = 1, PORT 3,\n...\nPORT_ID[4:0] = 27, PORT 29,\nPORT_ID[4:0] = 28, Invalid,\n...\nPORT_ID[4:0] = 31, Invalid.\nQUEUE_ID[2:0] = 0, Queue 0,\nQUEUE_ID[2:0] = 1, Queue 1,\n...\nQUEUE_ID[2:0] = 7, Queue 7.",
    /* MMU_WRED_OPN_AVG_QSIZE_BUFFER */ "WRED O/P Node Avg Q Size memory - will be split in 8 banks",
    /* MMU_WRED_OPN_AVG_QSIZE_QENTRY */ "WRED O/P Node Avg Q Size memory - will be split in 8 banks",
    /* MMU_WRED_OPN_CONFIG_BUFFER */ "WRED Output Node Config Memory - will be split in 8 banks",
    /* MMU_WRED_OPN_CONFIG_QENTRY */ "WRED Output Node Config Memory - will be split in 8 banks",
    /* MMU_WRED_OPN_DROP_THD_DEQ */ "WRED Unicast Drop Threshold Memory for Deq",
    /* MMU_WRED_OPN_DROP_THD_ENQ */ "WRED Unicast Drop Threshold Memory for Enq",
    /* MMU_WRED_PORT_CFG_CELL    */ "WRED Port Configuartion and Average Qsize Memory for Cell",
    /* MMU_WRED_PORT_CFG_PACKET  */ "WRED Port Configuartion and Average Qsize Memory for Packet",
    /* MMU_WRED_PORT_SP_DROP_THD */ "WRED Unicast Drop Threshold Memory for Port Service Pool",
    /* MMU_WRED_PORT_SP_DROP_THD_MARK */ "WRED Unicast Drop Threshold Memory for Port Service Pool ECN Marking,\nThe physcial memory spans from 0 to 143, while the functional entries are from 0 to 131.",
    /* MMU_WRED_PORT_SP_DROP_THD_MARK_XPE0_PIPE0 */ "WRED Unicast Drop Threshold Memory for Port Service Pool ECN Marking,\nThe physcial memory spans from 0 to 143, while the functional entries are from 0 to 131.",
    /* MMU_WRED_PORT_SP_DROP_THD_MARK_XPE0_PIPE1 */ "WRED Unicast Drop Threshold Memory for Port Service Pool ECN Marking,\nThe physcial memory spans from 0 to 143, while the functional entries are from 0 to 131.",
    /* MMU_WRED_PORT_SP_DROP_THD_MARK_XPE1_PIPE2 */ "WRED Unicast Drop Threshold Memory for Port Service Pool ECN Marking,\nThe physcial memory spans from 0 to 143, while the functional entries are from 0 to 131.",
    /* MMU_WRED_PORT_SP_DROP_THD_MARK_XPE1_PIPE3 */ "WRED Unicast Drop Threshold Memory for Port Service Pool ECN Marking,\nThe physcial memory spans from 0 to 143, while the functional entries are from 0 to 131.",
    /* MMU_WRED_PORT_SP_DROP_THD_MARK_XPE2_PIPE0 */ "WRED Unicast Drop Threshold Memory for Port Service Pool ECN Marking,\nThe physcial memory spans from 0 to 143, while the functional entries are from 0 to 131.",
    /* MMU_WRED_PORT_SP_DROP_THD_MARK_XPE2_PIPE1 */ "WRED Unicast Drop Threshold Memory for Port Service Pool ECN Marking,\nThe physcial memory spans from 0 to 143, while the functional entries are from 0 to 131.",
    /* MMU_WRED_PORT_SP_DROP_THD_MARK_XPE3_PIPE2 */ "WRED Unicast Drop Threshold Memory for Port Service Pool ECN Marking,\nThe physcial memory spans from 0 to 143, while the functional entries are from 0 to 131.",
    /* MMU_WRED_PORT_SP_DROP_THD_MARK_XPE3_PIPE3 */ "WRED Unicast Drop Threshold Memory for Port Service Pool ECN Marking,\nThe physcial memory spans from 0 to 143, while the functional entries are from 0 to 131.",
    /* MMU_WRED_PORT_SP_DROP_THD_XPE0_PIPE0 */ "WRED Unicast Drop Threshold Memory for Port Service Pool,\nThe physcial memory spans from 0 to 143, while the functional entries are from 0 to 131.",
    /* MMU_WRED_PORT_SP_DROP_THD_XPE0_PIPE1 */ "WRED Unicast Drop Threshold Memory for Port Service Pool,\nThe physcial memory spans from 0 to 143, while the functional entries are from 0 to 131.",
    /* MMU_WRED_PORT_SP_DROP_THD_XPE1_PIPE2 */ "WRED Unicast Drop Threshold Memory for Port Service Pool,\nThe physcial memory spans from 0 to 143, while the functional entries are from 0 to 131.",
    /* MMU_WRED_PORT_SP_DROP_THD_XPE1_PIPE3 */ "WRED Unicast Drop Threshold Memory for Port Service Pool,\nThe physcial memory spans from 0 to 143, while the functional entries are from 0 to 131.",
    /* MMU_WRED_PORT_SP_DROP_THD_XPE2_PIPE0 */ "WRED Unicast Drop Threshold Memory for Port Service Pool,\nThe physcial memory spans from 0 to 143, while the functional entries are from 0 to 131.",
    /* MMU_WRED_PORT_SP_DROP_THD_XPE2_PIPE1 */ "WRED Unicast Drop Threshold Memory for Port Service Pool,\nThe physcial memory spans from 0 to 143, while the functional entries are from 0 to 131.",
    /* MMU_WRED_PORT_SP_DROP_THD_XPE3_PIPE2 */ "WRED Unicast Drop Threshold Memory for Port Service Pool,\nThe physcial memory spans from 0 to 143, while the functional entries are from 0 to 131.",
    /* MMU_WRED_PORT_SP_DROP_THD_XPE3_PIPE3 */ "WRED Unicast Drop Threshold Memory for Port Service Pool,\nThe physcial memory spans from 0 to 143, while the functional entries are from 0 to 131.",
    /* MMU_WRED_PORT_SP_DROP_THD_X_PIPE */ "WRED Unicast Drop Threshold Memory for Port Service Pool X PIPE",
    /* MMU_WRED_PORT_SP_DROP_THD_Y_PIPE */ "WRED Unicast Drop Threshold Memory for Port Service Pool Y PIPE",
    /* MMU_WRED_PORT_SP_SHARED_COUNT */ "WRED Port Service Pool Total Count Shadow Copy Memory",
    /* MMU_WRED_PORT_SP_SHARED_COUNT_XPE0_PIPE0 */ "WRED Port Service Pool Shared Count Shadow Copy Memory,\nThe physcial memory spans from 0 to 135, while the functional entries are from 0 to 131.",
    /* MMU_WRED_PORT_SP_SHARED_COUNT_XPE0_PIPE1 */ "WRED Port Service Pool Shared Count Shadow Copy Memory,\nThe physcial memory spans from 0 to 135, while the functional entries are from 0 to 131.",
    /* MMU_WRED_PORT_SP_SHARED_COUNT_XPE1_PIPE2 */ "WRED Port Service Pool Shared Count Shadow Copy Memory,\nThe physcial memory spans from 0 to 135, while the functional entries are from 0 to 131.",
    /* MMU_WRED_PORT_SP_SHARED_COUNT_XPE1_PIPE3 */ "WRED Port Service Pool Shared Count Shadow Copy Memory,\nThe physcial memory spans from 0 to 135, while the functional entries are from 0 to 131.",
    /* MMU_WRED_PORT_SP_SHARED_COUNT_XPE2_PIPE0 */ "WRED Port Service Pool Shared Count Shadow Copy Memory,\nThe physcial memory spans from 0 to 135, while the functional entries are from 0 to 131.",
    /* MMU_WRED_PORT_SP_SHARED_COUNT_XPE2_PIPE1 */ "WRED Port Service Pool Shared Count Shadow Copy Memory,\nThe physcial memory spans from 0 to 135, while the functional entries are from 0 to 131.",
    /* MMU_WRED_PORT_SP_SHARED_COUNT_XPE3_PIPE2 */ "WRED Port Service Pool Shared Count Shadow Copy Memory,\nThe physcial memory spans from 0 to 135, while the functional entries are from 0 to 131.",
    /* MMU_WRED_PORT_SP_SHARED_COUNT_XPE3_PIPE3 */ "WRED Port Service Pool Shared Count Shadow Copy Memory,\nThe physcial memory spans from 0 to 135, while the functional entries are from 0 to 131.",
    /* MMU_WRED_PORT_SP_SHARED_COUNT_X_PIPE */ "WRED Port Service Pool Shared Count Shadow Copy Memory X PIPE",
    /* MMU_WRED_PORT_SP_SHARED_COUNT_Y_PIPE */ "WRED Port Service Pool Shared Count Shadow Copy Memory Y PIPE",
    /* MMU_WRED_PORT_THD_0_CELL  */ "WRED Port Green and Yellow Threshold Memory for Cell",
    /* MMU_WRED_PORT_THD_0_PACKET */ "WRED Port Green and Yellow Threshold Memory for Packet",
    /* MMU_WRED_PORT_THD_1_CELL  */ "WRED Port Green and Yellow Threshold Memory for Cell",
    /* MMU_WRED_PORT_THD_1_PACKET */ "WRED Red and Nontcp Threshold Memory for Packet",
    /* MMU_WRED_QGROUP_DROP_THD  */ "WRED Unicast Drop Threshold Memory for Queue Group",
    /* MMU_WRED_QGROUP_DROP_THD_X_PIPE */ "WRED Unicast Drop Threshold Memory for Queue Group X PIPE",
    /* MMU_WRED_QGROUP_DROP_THD_Y_PIPE */ "WRED Unicast Drop Threshold Memory for Queue Group Y PIPE",
    /* MMU_WRED_QGROUP_SHARED_COUNT */ "WRED Queue Group Shared Count Shadow Copy Memory",
    /* MMU_WRED_QGROUP_SHARED_COUNT_X_PIPE */ "WRED Queue Group Shared Count Shadow Copy Memory X PIPE",
    /* MMU_WRED_QGROUP_SHARED_COUNT_Y_PIPE */ "WRED Queue Group Shared Count Shadow Copy Memory Y PIPE",
    /* MMU_WRED_QUEUE_AVG_QSIZE_BUFFER */ "WRED Queue Avg Q Size Memory - will be split in 8 banks",
    /* MMU_WRED_QUEUE_AVG_QSIZE_QENTRY */ "WRED Queue Avg Q Size Memory - will be split in 8 banks",
    /* MMU_WRED_QUEUE_CONFIG_BUFFER */ "WRED Queue Config Memory - will be split in 8 banks",
    /* MMU_WRED_QUEUE_CONFIG_QENTRY */ "WRED Queue Config Memory - will be split in 8 banks",
    /* MMU_WRED_QUEUE_DROP_THD_DEQ */ "WRED Unicast Drop Threshold Memory for Deq",
    /* MMU_WRED_QUEUE_DROP_THD_ENQ */ "WRED Unicast Drop Threshold Memory for Enq",
    /* MMU_WRED_QUEUE_DROP_THD_ENQ_0 */ "WRED Unicast Drop Threshold Memory for Enq",
    /* MMU_WRED_QUEUE_DROP_THD_ENQ_1 */ "WRED Unicast Drop Threshold Memory for Enq",
    /* MMU_WRED_QUEUE_OP_NODE_MAP */ "Queue to OP NODE mapping table",
    /* MMU_WRED_THD_0_CELL       */ "WRED Green and Yellow Threshold Memory for Cell",
    /* MMU_WRED_THD_0_PACKET     */ "WRED Green and Yellow Threshold Memory for Packet",
    /* MMU_WRED_THD_1_CELL       */ "WRED Green and Yellow Threshold Memory for Cell",
    /* MMU_WRED_THD_1_PACKET     */ "WRED Red and Nontcp Threshold Memory for Packet",
    /* MMU_WRED_UC_QUEUE_DROP_THD_0 */ "WRED Unicast Drop Threshold Memory for WRED Dropping,\nThe physcial memory spans from 0 to 351, while the functional entries are from 0 to 329.",
    /* MMU_WRED_UC_QUEUE_DROP_THD_1 */ "WRED Unicast Drop Threshold Memory for WRED Dropping,\nThe physcial memory spans from 0 to 351, while the functional entries are from 0 to 329.",
    /* MMU_WRED_UC_QUEUE_DROP_THD_0_XPE0_PIPE0 */ "WRED Unicast Drop Threshold Memory for WRED Dropping,\nThe physcial memory spans from 0 to 351, while the functional entries are from 0 to 329.",
    /* MMU_WRED_UC_QUEUE_DROP_THD_0_XPE0_PIPE1 */ "WRED Unicast Drop Threshold Memory for WRED Dropping,\nThe physcial memory spans from 0 to 351, while the functional entries are from 0 to 329.",
    /* MMU_WRED_UC_QUEUE_DROP_THD_0_XPE1_PIPE2 */ "WRED Unicast Drop Threshold Memory for WRED Dropping,\nThe physcial memory spans from 0 to 351, while the functional entries are from 0 to 329.",
    /* MMU_WRED_UC_QUEUE_DROP_THD_0_XPE1_PIPE3 */ "WRED Unicast Drop Threshold Memory for WRED Dropping,\nThe physcial memory spans from 0 to 351, while the functional entries are from 0 to 329.",
    /* MMU_WRED_UC_QUEUE_DROP_THD_0_XPE2_PIPE0 */ "WRED Unicast Drop Threshold Memory for WRED Dropping,\nThe physcial memory spans from 0 to 351, while the functional entries are from 0 to 329.",
    /* MMU_WRED_UC_QUEUE_DROP_THD_0_XPE2_PIPE1 */ "WRED Unicast Drop Threshold Memory for WRED Dropping,\nThe physcial memory spans from 0 to 351, while the functional entries are from 0 to 329.",
    /* MMU_WRED_UC_QUEUE_DROP_THD_0_XPE3_PIPE2 */ "WRED Unicast Drop Threshold Memory for WRED Dropping,\nThe physcial memory spans from 0 to 351, while the functional entries are from 0 to 329.",
    /* MMU_WRED_UC_QUEUE_DROP_THD_0_XPE3_PIPE3 */ "WRED Unicast Drop Threshold Memory for WRED Dropping,\nThe physcial memory spans from 0 to 351, while the functional entries are from 0 to 329.",
    /* MMU_WRED_UC_QUEUE_DROP_THD_1_XPE0_PIPE0 */ "WRED Unicast Drop Threshold Memory for WRED Dropping,\nThe physcial memory spans from 0 to 351, while the functional entries are from 0 to 329.",
    /* MMU_WRED_UC_QUEUE_DROP_THD_1_XPE0_PIPE1 */ "WRED Unicast Drop Threshold Memory for WRED Dropping,\nThe physcial memory spans from 0 to 351, while the functional entries are from 0 to 329.",
    /* MMU_WRED_UC_QUEUE_DROP_THD_1_XPE1_PIPE2 */ "WRED Unicast Drop Threshold Memory for WRED Dropping,\nThe physcial memory spans from 0 to 351, while the functional entries are from 0 to 329.",
    /* MMU_WRED_UC_QUEUE_DROP_THD_1_XPE1_PIPE3 */ "WRED Unicast Drop Threshold Memory for WRED Dropping,\nThe physcial memory spans from 0 to 351, while the functional entries are from 0 to 329.",
    /* MMU_WRED_UC_QUEUE_DROP_THD_1_XPE2_PIPE0 */ "WRED Unicast Drop Threshold Memory for WRED Dropping,\nThe physcial memory spans from 0 to 351, while the functional entries are from 0 to 329.",
    /* MMU_WRED_UC_QUEUE_DROP_THD_1_XPE2_PIPE1 */ "WRED Unicast Drop Threshold Memory for WRED Dropping,\nThe physcial memory spans from 0 to 351, while the functional entries are from 0 to 329.",
    /* MMU_WRED_UC_QUEUE_DROP_THD_1_XPE3_PIPE2 */ "WRED Unicast Drop Threshold Memory for WRED Dropping,\nThe physcial memory spans from 0 to 351, while the functional entries are from 0 to 329.",
    /* MMU_WRED_UC_QUEUE_DROP_THD_1_XPE3_PIPE3 */ "WRED Unicast Drop Threshold Memory for WRED Dropping,\nThe physcial memory spans from 0 to 351, while the functional entries are from 0 to 329.",
    /* MMU_WRED_UC_QUEUE_DROP_THD_DEQ */ "WRED Unicast Drop Threshold Memory for Deq",
    /* MMU_WRED_UC_QUEUE_DROP_THD_DEQ_X_PIPE_0 */ "WRED Unicast Drop Threshold Memory for Deq",
    /* MMU_WRED_UC_QUEUE_DROP_THD_DEQ_Y_PIPE_1 */ "WRED Unicast Drop Threshold Memory for Deq",
    /* MMU_WRED_UC_QUEUE_DROP_THD_ENQ */ "WRED Unicast Drop Threshold Memory for Enq",
    /* MMU_WRED_UC_QUEUE_DROP_THD_ENQ_X_PIPE_0 */ "WRED Unicast Drop Threshold Memory for Enq",
    /* MMU_WRED_UC_QUEUE_DROP_THD_ENQ_X_PIPE_1 */ "WRED Unicast Drop Threshold Memory for Deq",
    /* MMU_WRED_UC_QUEUE_DROP_THD_ENQ_Y_PIPE_0 */ "WRED Unicast Drop Threshold Memory for Deq",
    /* MMU_WRED_UC_QUEUE_DROP_THD_ENQ_Y_PIPE_1 */ "WRED Unicast Drop Threshold Memory for Deq",
    /* MMU_WRED_UC_QUEUE_DROP_THD_MARK */ "WRED Unicast Drop Threshold Memory for ECN Marking,\nThe physcial memory spans from 0 to 351, while the functional entries are from 0 to 329.",
    /* MMU_WRED_UC_QUEUE_DROP_THD_MARK_XPE0_PIPE0 */ "WRED Unicast Drop Threshold Memory for ECN Marking,\nThe physcial memory spans from 0 to 351, while the functional entries are from 0 to 329.",
    /* MMU_WRED_UC_QUEUE_DROP_THD_MARK_XPE0_PIPE1 */ "WRED Unicast Drop Threshold Memory for ECN Marking,\nThe physcial memory spans from 0 to 351, while the functional entries are from 0 to 329.",
    /* MMU_WRED_UC_QUEUE_DROP_THD_MARK_XPE1_PIPE2 */ "WRED Unicast Drop Threshold Memory for ECN Marking,\nThe physcial memory spans from 0 to 351, while the functional entries are from 0 to 329.",
    /* MMU_WRED_UC_QUEUE_DROP_THD_MARK_XPE1_PIPE3 */ "WRED Unicast Drop Threshold Memory for ECN Marking,\nThe physcial memory spans from 0 to 351, while the functional entries are from 0 to 329.",
    /* MMU_WRED_UC_QUEUE_DROP_THD_MARK_XPE2_PIPE0 */ "WRED Unicast Drop Threshold Memory for ECN Marking,\nThe physcial memory spans from 0 to 351, while the functional entries are from 0 to 329.",
    /* MMU_WRED_UC_QUEUE_DROP_THD_MARK_XPE2_PIPE1 */ "WRED Unicast Drop Threshold Memory for ECN Marking,\nThe physcial memory spans from 0 to 351, while the functional entries are from 0 to 329.",
    /* MMU_WRED_UC_QUEUE_DROP_THD_MARK_XPE3_PIPE2 */ "WRED Unicast Drop Threshold Memory for ECN Marking,\nThe physcial memory spans from 0 to 351, while the functional entries are from 0 to 329.",
    /* MMU_WRED_UC_QUEUE_DROP_THD_MARK_XPE3_PIPE3 */ "WRED Unicast Drop Threshold Memory for ECN Marking,\nThe physcial memory spans from 0 to 351, while the functional entries are from 0 to 329.",
    /* MMU_WRED_UC_QUEUE_TOTAL_COUNT */ "WRED UC Queue Total Count Shadow Copy Memory",
    /* MMU_WRED_UC_QUEUE_TOTAL_COUNT_FROM_REMOTE */ "WRED UC Queue Total Count Shadow Copy Memory,\nThe physcial memory spans from 0 to 335, while the functional entries are from 0 to 329.",
    /* MMU_WRED_UC_QUEUE_TOTAL_COUNT_FROM_REMOTE_XPE0_PIPE0 */ "WRED UC Queue Total Count Shadow Copy Memory,\nThe physcial memory spans from 0 to 335, while the functional entries are from 0 to 329.",
    /* MMU_WRED_UC_QUEUE_TOTAL_COUNT_FROM_REMOTE_XPE0_PIPE1 */ "WRED UC Queue Total Count Shadow Copy Memory,\nThe physcial memory spans from 0 to 335, while the functional entries are from 0 to 329.",
    /* MMU_WRED_UC_QUEUE_TOTAL_COUNT_FROM_REMOTE_XPE1_PIPE2 */ "WRED UC Queue Total Count Shadow Copy Memory,\nThe physcial memory spans from 0 to 335, while the functional entries are from 0 to 329.",
    /* MMU_WRED_UC_QUEUE_TOTAL_COUNT_FROM_REMOTE_XPE1_PIPE3 */ "WRED UC Queue Total Count Shadow Copy Memory,\nThe physcial memory spans from 0 to 335, while the functional entries are from 0 to 329.",
    /* MMU_WRED_UC_QUEUE_TOTAL_COUNT_FROM_REMOTE_XPE2_PIPE0 */ "WRED UC Queue Total Count Shadow Copy Memory,\nThe physcial memory spans from 0 to 335, while the functional entries are from 0 to 329.",
    /* MMU_WRED_UC_QUEUE_TOTAL_COUNT_FROM_REMOTE_XPE2_PIPE1 */ "WRED UC Queue Total Count Shadow Copy Memory,\nThe physcial memory spans from 0 to 335, while the functional entries are from 0 to 329.",
    /* MMU_WRED_UC_QUEUE_TOTAL_COUNT_FROM_REMOTE_XPE3_PIPE2 */ "WRED UC Queue Total Count Shadow Copy Memory,\nThe physcial memory spans from 0 to 335, while the functional entries are from 0 to 329.",
    /* MMU_WRED_UC_QUEUE_TOTAL_COUNT_FROM_REMOTE_XPE3_PIPE3 */ "WRED UC Queue Total Count Shadow Copy Memory,\nThe physcial memory spans from 0 to 335, while the functional entries are from 0 to 329.",
    /* MMU_WRED_UC_QUEUE_TOTAL_COUNT_XPE0_PIPE0 */ "WRED UC Queue Total Count Shadow Copy Memory,\nThe physcial memory spans from 0 to 335, while the functional entries are from 0 to 329.",
    /* MMU_WRED_UC_QUEUE_TOTAL_COUNT_XPE0_PIPE1 */ "WRED UC Queue Total Count Shadow Copy Memory,\nThe physcial memory spans from 0 to 335, while the functional entries are from 0 to 329.",
    /* MMU_WRED_UC_QUEUE_TOTAL_COUNT_XPE1_PIPE2 */ "WRED UC Queue Total Count Shadow Copy Memory,\nThe physcial memory spans from 0 to 335, while the functional entries are from 0 to 329.",
    /* MMU_WRED_UC_QUEUE_TOTAL_COUNT_XPE1_PIPE3 */ "WRED UC Queue Total Count Shadow Copy Memory,\nThe physcial memory spans from 0 to 335, while the functional entries are from 0 to 329.",
    /* MMU_WRED_UC_QUEUE_TOTAL_COUNT_XPE2_PIPE0 */ "WRED UC Queue Total Count Shadow Copy Memory,\nThe physcial memory spans from 0 to 335, while the functional entries are from 0 to 329.",
    /* MMU_WRED_UC_QUEUE_TOTAL_COUNT_XPE2_PIPE1 */ "WRED UC Queue Total Count Shadow Copy Memory,\nThe physcial memory spans from 0 to 335, while the functional entries are from 0 to 329.",
    /* MMU_WRED_UC_QUEUE_TOTAL_COUNT_XPE3_PIPE2 */ "WRED UC Queue Total Count Shadow Copy Memory,\nThe physcial memory spans from 0 to 335, while the functional entries are from 0 to 329.",
    /* MMU_WRED_UC_QUEUE_TOTAL_COUNT_XPE3_PIPE3 */ "WRED UC Queue Total Count Shadow Copy Memory,\nThe physcial memory spans from 0 to 335, while the functional entries are from 0 to 329.",
    /* MMU_WRED_UC_QUEUE_TOTAL_COUNT_X_PIPE */ "WRED UC Queue Total Count Shadow Copy Memory X PIPE",
    /* MMU_WRED_UC_QUEUE_TOTAL_COUNT_Y_PIPE */ "WRED UC Queue Total Count Shadow Copy Memory Y PIPE",
    /* MMU_WR_DATA_MEM           */ "Memory to store the Data after the async fifo on thew write path",
    /* MMU_WR_FBC_DATA_MEM       */ "Memory to store the Fbc Data after the async fifo on the write path",
    /* MMU_XCFG_MEM_FAIL_ADDR_64 */ "Memory Fail address FIFO",
    /* MMU_XCFG_MEM_FAIL_ADDR_64_XPE0 */ "Memory Fail address FIFO",
    /* MMU_XCFG_MEM_FAIL_ADDR_64_XPE1 */ "Memory Fail address FIFO",
    /* MMU_XCFG_MEM_FAIL_ADDR_64_XPE2 */ "Memory Fail address FIFO",
    /* MMU_XCFG_MEM_FAIL_ADDR_64_XPE3 */ "Memory Fail address FIFO",
    /* MMU_XQ0                   */ "XQ0",
    /* MMU_XQ1                   */ "XQ1",
    /* MMU_XQ2                   */ "XQ2",
    /* MMU_XQ3                   */ "XQ3",
    /* MMU_XQ4                   */ "XQ4",
    /* MMU_XQ5                   */ "XQ5",
    /* MMU_XQ6                   */ "XQ6",
    /* MMU_XQ7                   */ "XQ7",
    /* MMU_XQ8                   */ "XQ8",
    /* MMU_XQ9                   */ "XQ9",
    /* MMU_XQ10                  */ "XQ10",
    /* MMU_XQ11                  */ "XQ11",
    /* MMU_XQ12                  */ "XQ12",
    /* MMU_XQ13                  */ "XQ13",
    /* MMU_XQ14                  */ "XQ14",
    /* MMU_XQ15                  */ "XQ15",
    /* MMU_XQ16                  */ "XQ16",
    /* MMU_XQ17                  */ "XQ17",
    /* MMU_XQ18                  */ "XQ18",
    /* MMU_XQ19                  */ "XQ19",
    /* MMU_XQ20                  */ "XQ20",
    /* MMU_XQ21                  */ "XQ21",
    /* MMU_XQ22                  */ "XQ22",
    /* MMU_XQ23                  */ "XQ23",
    /* MMU_XQ24                  */ "XQ24",
    /* MMU_XQ25                  */ "XQ25",
    /* MMU_XQ26                  */ "XQ26",
    /* MMU_XQ27                  */ "XQ27",
    /* MMU_XQ28                  */ "XQ28",
    /* MMU_XQ29                  */ "XQ29",
    /* MMU_XQ30                  */ "XQ30",
    /* MMU_XQ31                  */ "XQ31",
    /* MMU_XQ32                  */ "XQ32",
    /* MMU_XQ33                  */ "XQ33",
    /* MMU_XQ34                  */ "XQ34",
    /* MMU_XQ35                  */ "XQ35",
    /* MMU_XQ36                  */ "XQ36",
    /* MMU_XQ37                  */ "XQ37",
    /* MMU_XQ38                  */ "XQ38",
    /* MMU_XQ39                  */ "XQ39",
    /* MMU_XQ40                  */ "XQ40",
    /* MMU_XQ41                  */ "XQ41",
    /* MMU_XQ42                  */ "XQ42",
    /* MMU_XQ43                  */ "XQ43",
    /* MMU_XQ44                  */ "XQ44",
    /* MMU_XQ45                  */ "XQ45",
    /* MMU_XQ46                  */ "XQ46",
    /* MMU_XQ47                  */ "XQ47",
    /* MMU_XQ48                  */ "XQ48",
    /* MMU_XQ49                  */ "XQ49",
    /* MMU_XQ50                  */ "XQ50",
    /* MMU_XQ51                  */ "XQ51",
    /* MMU_XQ52                  */ "XQ52",
    /* MMU_XQ53                  */ "XQ53",
    /* MMU_XQ54                  */ "XQ54",
    /* MMU_XQ55                  */ "XQ55",
    /* MMU_XQ56                  */ "XQ56",
    /* MMU_XQ57                  */ "XQ57",
    /* MMU_XQ58                  */ "XQ58",
    /* MMU_XQ59                  */ "XQ59",
    /* MMU_XQ60                  */ "XQ60",
    /* MMU_XQ61                  */ "XQ61",
    /* MMU_XQ62                  */ "XQ62",
    /* MMU_XQ63                  */ "XQ63",
    /* MMU_XQ64                  */ "XQ64",
    /* MMU_XQ65                  */ "XQ65",
    /* MMU_XQFLL0                */ "XQFLL0",
    /* MMU_XQFLL2                */ "XQFLL2",
    /* MMU_XQFLL3                */ "XQFLL3",
    /* MMU_XQFLL4                */ "XQFLL4",
    /* MMU_XQFLL5                */ "XQFLL5",
    /* MMU_XQFLL6                */ "XQFLL6",
    /* MMU_XQFLL7                */ "XQFLL7",
    /* MMU_XQFLL8                */ "XQFLL8",
    /* MMU_XQFLL9                */ "XQFLL9",
    /* MMU_XQFLL10               */ "XQFLL10",
    /* MMU_XQFLL11               */ "XQFLL11",
    /* MMU_XQFLL12               */ "XQFLL12",
    /* MMU_XQFLL13               */ "XQFLL13",
    /* MMU_XQFLL14               */ "XQFLL14",
    /* MMU_XQFLL15               */ "XQFLL15",
    /* MMU_XQFLL16               */ "XQFLL16",
    /* MMU_XQFLL17               */ "XQFLL17",
    /* MMU_XQFLL18               */ "XQFLL18",
    /* MMU_XQFLL19               */ "XQFLL19",
    /* MMU_XQFLL20               */ "XQFLL20",
    /* MMU_XQFLL21               */ "XQFLL21",
    /* MMU_XQFLL22               */ "XQFLL22",
    /* MMU_XQFLL23               */ "XQFLL23",
    /* MMU_XQFLL24               */ "XQFLL24",
    /* MMU_XQFLL25               */ "XQFLL25",
    /* MMU_XQFLL26               */ "XQFLL26",
    /* MMU_XQFLL27               */ "XQFLL27",
    /* MMU_XQFLL28               */ "XQFLL28",
    /* MMU_XQFLL29               */ "XQFLL29",
    /* MMU_XQFLL30               */ "XQFLL30",
    /* MMU_XQFLL31               */ "XQFLL31",
    /* MMU_XQFLL32               */ "XQFLL32",
    /* MMU_XQFLL33               */ "XQFLL33",
    /* MMU_XQFLL34               */ "XQFLL34",
    /* MMU_XQFLL35               */ "XQFLL35",
    /* MMU_XQFLL36               */ "XQFLL36",
    /* MMU_XQFLL37               */ "XQFLL37",
    /* MMU_XQFLL38               */ "XQFLL38",
    /* MMU_XQFLL39               */ "XQFLL39",
    /* MMU_XQFLL40               */ "XQFLL40",
    /* MMU_XQFLL41               */ "XQFLL41",
    /* MMU_XQFLL42               */ "XQFLL42",
    /* MMU_XQFLL43               */ "XQFLL43",
    /* MMU_XQFLL44               */ "XQFLL44",
    /* MMU_XQFLL45               */ "XQFLL45",
    /* MMU_XQFLL46               */ "XQFLL46",
    /* MMU_XQFLL47               */ "XQFLL47",
    /* MMU_XQFLL48               */ "XQFLL48",
    /* MMU_XQFLL49               */ "XQFLL49",
    /* MMU_XQFLL50               */ "XQFLL50",
    /* MMU_XQFLL51               */ "XQFLL51",
    /* MMU_XQFLL52               */ "XQFLL52",
    /* MMU_XQFLL53               */ "XQFLL53",
    /* MMU_XQFLL54               */ "XQFLL54",
    /* MMU_XQFLL55               */ "XQFLL55",
    /* MMU_XQFLL56               */ "XQFLL56",
    /* MMU_XQFLL57               */ "XQFLL57",
    /* MMU_XQFLL58               */ "XQFLL58",
    /* MMU_XQFLL59               */ "XQFLL59",
    /* MMU_XQFLL60               */ "XQFLL60",
    /* MMU_XQFLL61               */ "XQFLL61",
    /* MMU_XQFLL62               */ "XQFLL62",
    /* MMU_XQFLL63               */ "XQFLL63",
    /* MMU_XQFLL64               */ "XQFLL64",
    /* MMU_XQFLL65               */ "XQFLL65",
    /* MODID_BASE_PTR            */ "Maps DST_MODID to a base pointer in the MODPORT_MAP_SUBPORT table.",
    /* MODPORT_MAP               */ "Module Port Mapping Table",
    /* MODPORT_MAP_EM            */ "Third physical copy of Module Port Mapping Table - used for mapping the egress mirrored copy of a packet",
    /* MODPORT_MAP_IM            */ "Second physical copy of Module Port Mapping Table - used for mapping the ingress mirrored copy of a packet",
    /* MODPORT_MAP_M0            */ "First physical copy of Module Port Mapping Table - used for mapping the M0 copy of a packet.",
    /* MODPORT_MAP_M1            */ "First physical copy of Module Port Mapping Table - used for mapping the M1 copy of a packet.",
    /* MODPORT_MAP_M2            */ "First physical copy of Module Port Mapping Table - used for mapping the M2 copy of a packet.",
    /* MODPORT_MAP_M3            */ "First physical copy of Module Port Mapping Table - used for mapping the M3 copy of a packet.",
    /* MODPORT_MAP_MIRROR        */ "Second physical copy of Module Port Mapping Table - used for mapping the ingress mirrored copy of a packet",
    /* MODPORT_MAP_MIRROR_1      */ "Third physical copy of Module Port Mapping Table - used for mapping the egress mirrored copy of a packet",
    /* MODPORT_MAP_SUBPORT       */ "This table is used to determine the necessary cascaded egress port or cascaded egress trunk that a switched packet must use in order to reach the subtending port.",
    /* MODPORT_MAP_SUBPORT_M0    */ "Physical copy of Module Port to front panel port or COE Subtending Port Mapping Table - used for mapping the M0 copy of a packet.",
    /* MODPORT_MAP_SUBPORT_M1    */ "Physical copy of Module Port to front panel port or COE Subtending Port Mapping Table - used for mapping the M1 copy of a packet.",
    /* MODPORT_MAP_SUBPORT_M2    */ "Physical copy of Module Port to front panel port or COE Subtending Port Mapping Table - used for mapping the M2 copy of a packet.",
    /* MODPORT_MAP_SUBPORT_M3    */ "Physical copy of Module Port to front panel port or COE Subtending Port Mapping Table - used for mapping the M3 copy of a packet.",
    /* MODPORT_MAP_SUBPORT_MIRROR */ "Module Port to front panel port or COE Subtending Port Mapping Table - Mirror Copy. Writing this view writes all four physical copies.",
    /* MODPORT_MAP_SW            */ "First physical copy of Module Port Mapping Table - used for mapping the switched copy of a packet",
    /* MPLS_ENTROPY_LABEL_DATA   */ "The fields in this table should be an alias of all the fields in the MPLS_ENTRY table.",
    /* MPLS_ENTRY                */ "MPLS Label Lookup. Dual-Hash table with Keys and Data",
    /* MPLS_ENTRY_1              */ "",
    /* MPLS_ENTRY_1_HIT_ONLY     */ "MPLS_ENTRY_1_HIT_ONLY, Single base entry views. FeatureSpecific-Ethernet.",
    /* MPLS_ENTRY_2_HIT_ONLY     */ "MPLS_ENTRY_2_HIT_ONLY, Double base entry views. FeatureSpecific-Ethernet.",
    /* MPLS_ENTRY_ECC            */ "ECC Table for MPLS_ENTRY.",
    /* MPLS_ENTRY_EXTD           */ "MPLS_ENTRY_2, Double base entry views. FeatureSpecific-Ethernet.",
    /* MPLS_ENTRY_SCRATCH        */ "Single MPLS_ENTRY entry that is usable by software.when shifting MPLS_ENTRY entries across the dual hash.  Fully usable entry that is searched for every packet. Acts like a fully-associative 9th entry (for every bucket.)",
    /* MPLS_OAM_ACH_TYPE_CONFIG  */ "This table is used to configure the ACH types associated with MPLS LM/DM, BHH-OAM, and any GAL_ACH messages. Note that for MPLS LM/DM the OPCOD_VALID = 1, but for BHH-OAM the OPCODE_VLAID =0. Also note that this table is not used for BFD and BFD has its own dedicated registers for ACH configuration.",
    /* MPLS_STATION_TCAM         */ "TCAM for MPLS My Station lookups - no associated data",
    /* MP_GROUP                  */ "MEP lookup table in ingress direction.  No hit bits, FeatureSpecific-OAM.",
    /* MRPS_CONTEXT_COLOR        */ "Color memory per context",
    /* MRPS_CONTEXT_SIZE_HIGH    */ "Packet size memory per context.\n                   Higher 138 values\n                   (total of 330 contexts in Jericho)",
    /* MRPS_CONTEXT_SIZE_LOW     */ "Packet size memory per context.\n                   Lower 192 values",
    /* MRPS_EGR_ENG_PRFCFG       */ "MCD-A - profile configuration.\n First copy\n Both copies should be initialized the same",
    /* MRPS_EGR_ENG_PTR_MAP      */ "",
    /* MRPS_EGR_FINAL_RSLV_COLOR */ "Ingress Final-Resolution-Color-Table.\n\n Address to this table:\n  - bits 3:0 - DP-Command\n  - bits 5:4 - In-Color\n  - bits 7:6 - Resolved Color (from EgrColorRslvTable)",
    /* MRPS_EGR_RSLV_COLOR       */ "Ingress Resolution-Color-Table.\n\n Address to this table:\n  - bits 1:0 - Engine-0 Color\n  - bits 2    - Engine-0 Other-Bucket-Level\n  - bits 4:3 - Engine-1 Color\n  - bits 5    - Engine-1 Other-Bucket-Level\n  - bits 6    - Engine-0-Profile / Dp-Command0\n  - bits 7    - Engine-1-Profile / Dp-Command1\n  - bits 8    - Dp-Command2\n  - bits 9    - Dp-Command3",
    /* MRPS_ING_ENG_HAPM         */ "MCD-A - profile configuration.\n First copy\n Both copies should be initialized the same",
    /* MRPS_ING_ENG_HCPM         */ "",
    /* MRPS_ING_ENG_PP_PORT_MAP  */ "MCD-A - profile configuration.\n First copy\n Both copies should be initialized the same",
    /* MRPS_ING_ENG_PRFCFG       */ "MCD-A - profile configuration.\n First copy\n Both copies should be initialized the same",
    /* MRPS_ING_ENG_PTR_MAP      */ "",
    /* MRPS_ING_FINAL_RSLV_COLOR */ "Ingress Final-Resolution-Color-Table.\n\n Address to this table:\n  - bits 3:0 - DP-Command\n  - bits 5:4 - In-Color\n  - bits 7:6 - Resolved Color (from EgrColorRslvTable)\n  - bits 8    - Global-Engine-Color (1'b0 - GREEN, 1'b1 - RED)",
    /* MRPS_ING_GLBL_ENG_DB      */ "",
    /* MRPS_ING_GLBL_ENG_HAPM    */ "MCD-A - profile configuration.\n First copy\n Both copies should be initialized the same",
    /* MRPS_ING_GLBL_ENG_HCPM    */ "",
    /* MRPS_ING_GLBL_ENG_PP_PORT_MAP */ "MCD-A - profile configuration.\n First copy\n Both copies should be initialized the same",
    /* MRPS_ING_GLBL_ENG_PRFCFG  */ "MCD-A - profile configuration.\n First copy\n Both copies should be initialized the same",
    /* MRPS_ING_RSLV_COLOR       */ "Ingress Resolution-Color-Table.\n\n Address to this table:\n  - bits 1:0 - Engine-0 Color\n  - bits 2    - Engine-0 Other-Bucket-Level\n  - bits 4:3 - Engine-1 Color\n  - bits 5    - Engine-1 Other-Bucket-Level\n  - bits 7:6 - Engine-2 Color\n  - bits 8    - Engine-2 Other-Bucket-Level\n  - bits 9    - Engine-0-Profile / Dp-Command0\n  - bits 10  - Engine-1-Profile / Dp-Command1\n  - bits 11  - Engine-2-Profile / Dp-Command2\n  - bits 12  - Dp-Command3",
    /* MRPS_MCDA_DYNAMIC         */ "MCD-A - dynamic data\n                   Notes:\n                   - Each entry map 4 meters to profiles which are processed simultaneously.\n                   - Indexes 0 - 32k-1",
    /* MRPS_MCDA_HEADER_APPEND_SIZE_PTR_MAP */ "MCDA - Mapping Header Append Size Ptr (Out LIF Adjust Profile).\n                   Value = -128, +127\n                   Notes:\n                   - Each entry has 4 mappings\n                   - Indexes 0 - 256-1",
    /* MRPS_MCDA_IN_PP_PORT_MAP  */ "MCDA - Mapping In-PP-Port(8) into In-PP-Port-Profile(3)\n                   Notes:\n                   - Each entry has 4 mappings\n                   - Indexes 0 - 256-1",
    /* MRPS_MCDA_IN_PP_PORT_MAP_AND_MTR_PRF_MAP */ "MCDA - Mapping In-PP-Port-Profile(6) into In-PP-Port-Size-Delta(8)\n                   Values = -128, +127\n                   Notes:\n                   - Each entry has 4 mappings\n                   - Indexes 0 - 256-1",
    /* MRPS_MCDA_PCUC            */ "MCDA - Update color memory per context.\n                   Holds the LB (color) that was updated on SOP.",
    /* MRPS_MCDA_PRFCFG_0        */ "MCD-A - profile configuration.\n                   First copy\n                   Both copies should be initialized the same",
    /* MRPS_MCDA_PRFCFG_1        */ "MCD-A - profile configuration.\n                   Second copy\n                   Both copies should be initialized the same",
    /* MRPS_MCDA_PRFCFG_SHARING_DIS */ "MRPS - MCD-A - profile configuration.\n                   This table define the profile config memory fields when the profile ShraingFlag is reset.",
    /* MRPS_MCDA_PRFCFG_SHARING_EN */ "MRPS - MCD-A - profile configuration.\n                   This table define the profile config memory fields when the profile ShraingFlag is set.",
    /* MRPS_MCDA_PRFSEL          */ "MCD-A - index to profile mapping.\n                   Notes:\n                   - Each entry map 4 meters to profiles which are processed simultaneously.\n                   - Indexes 0 - 32k-1",
    /* MRPS_MCDB_DYNAMIC         */ "MCD-B - dynamic data\n                   Notes:\n                   - Each entry map 4 meters to profiles which are processed simultaneously.\n                   - Indexes 0 - 32k-1",
    /* MRPS_MCDB_HEADER_APPEND_SIZE_PTR_MAP */ "MCDB - Mapping Header Append Size Ptr (Out LIF Adjust Profile).\n                   Value = -128, +127\n                   Notes:\n                   - Each entry has 4 mappings\n                   - Indexes 0 - 256-1",
    /* MRPS_MCDB_IN_PP_PORT_MAP  */ "MCDB - Mapping In-PP-Port(8) into In-PP-Port-Profile(3)\n                   Notes:\n                   - Each entry has 4 mappings\n                   - Indexes 0 - 256-1",
    /* MRPS_MCDB_IN_PP_PORT_MAP_AND_MTR_PRF_MAP */ "MCDB- Mapping In-PP-Port-Profile(6) into In-PP-Port-Size-Delta(8)\n                   Values = -128, +127\n                   Notes:\n                   - Each entry has 4 mappings\n                   - Indexes 0 - 256-1",
    /* MRPS_MCDB_PCUC            */ "MCDB - Update color memory per context.\n                   Holds the LB (color) that was updated on SOP.",
    /* MRPS_MCDB_PRFCFG_0        */ "MCD-B - profile configuration.\n                   First copy\n                   Both copies should be initialized the same",
    /* MRPS_MCDB_PRFCFG_1        */ "MCD-B - profile configuration.\n                   Second copy\n                   Both copies should be initialized the same",
    /* MRPS_MCDB_PRFCFG_SHARING_DIS */ "MCD-B - profile configuration.\n                   This table defines the profile config memory fields when the profile Sharing Flag is reset.",
    /* MRPS_MCDB_PRFCFG_SHARING_EN */ "MCD-B - profile configuration.\n                   This table defines the profile config memory fields when the profile SharingFlag is set.",
    /* MRPS_MCDB_PRFSEL          */ "MCD-B - index to profile mapping.\n                   Notes:\n                   - Each entry map 4 meters to profiles which are processed simultaneously.\n                   - Indexes 0 - 32k-1",
    /* MRPS_PCD_MAP              */ "Parallel color decision mapping table (64 entries x 4)\n                   Address (6) to this table is:\n                   On Dual mode:\n                   - bits 5:4 - MCD-B color decision\n                   - bits 3 - MCD-B other bucket has credits\n                   - bits 2:1 - MCD-A color decision\n                   - bits 0 - MCD-A other bucket has credits\n                   On Single mode:\n                   - bits 5:4 - MRPS1 color decision\n                   - bits 3 - MRPS1 other bucke ...",
    /* MTM_EGR_0_MCH_REP_REQ_RXI */ "Egress MC High Replication Request Rxi memory",
    /* MTM_EGR_0_MCL_REP_REQ_RXI */ "Egress MC Low Replication Request Rxi memory",
    /* MTM_EGR_0_TDM_REP_REQ_RXI */ "Egress TDM Replication Request Rxi memory",
    /* MTM_EGR_0_UC_REP_REQ_RXI  */ "Egress UC Replication Request Rxi memory",
    /* MTM_EGR_1_MCH_REP_REQ_RXI */ "Egress MC High Replication Request Rxi memory",
    /* MTM_EGR_1_MCL_REP_REQ_RXI */ "Egress MC Low Replication Request Rxi memory",
    /* MTM_EGR_1_TDM_REP_REQ_RXI */ "Egress TDM Replication Request Rxi memory",
    /* MTM_EGR_1_UC_REP_REQ_RXI  */ "Egress UC Replication Request Rxi memory",
    /* MTM_EGR_BITMAP_MAPPING_TABLE */ "Bitmap mapping table. Map Offset (4), Index(5) to destination.",
    /* MTM_ING_0_MCH_REP_REQ_RXI */ "Ingress MC High Replication Request Rxi memory",
    /* MTM_ING_0_MCL_REP_REQ_RXI */ "Ingress MC Low Replication Request Rxi memory",
    /* MTM_ING_1_MCH_REP_REQ_RXI */ "Ingress MC High Replication Request Rxi memory",
    /* MTM_ING_1_MCL_REP_REQ_RXI */ "Ingress MC Low Replication Request Rxi memory",
    /* MTM_ING_BITMAP_MAPPING_TABLE */ "Bitmap mapping table. Map Offset (4), Index(5) to destination.",
    /* MTM_MCDB                  */ "",
    /* MTM_MCDB_FORMAT_BIER_EGR_INFO */ "MCDB egress BIER additional information",
    /* MTM_MCDB_FORMAT_BIER_ING_INFO */ "MCDB ingress BIER additional information",
    /* MTM_MCDB_FORMAT_BITMAP    */ "MCDB Bitmap Format entry. Can be used by ingress and egress  Note:  - This entry holds the bitmap for copy generation",
    /* MTM_MCDB_FORMAT_BITMAP_PTR */ "MCDB Bitmap-Pointer Format entry. Can be used by ingress and egress  Note:  - This entry holds the pointer to the first bitmap and the CUD which will be used on all copies",
    /* MTM_MCDB_FORMAT_DOUBLE    */ "MCDB Double Format entry. (used by egress only)",
    /* MTM_MCDB_FORMAT_LINK_LIST */ "MCDB Link-List entry. Can be used by ingress and egress  Note:  - This entry holds a pointer to a link-list and a pointer for the next link-list",
    /* MTM_MCDB_FORMAT_SINGLE    */ "MCDB Single Format entry",
    /* MTM_MCDB_FORMAT_TDM       */ "MCDB egress TDM format",
    /* MTM_MCDB_FORMAT_X_4_BITMAP */ "MCDB egress TDM format",
    /* MTRPS_EM_CONTEXT_COLOR    */ "Color memory per context",
    /* MTRPS_EM_CONTEXT_SIZE_HIGH */ "Packet size memory per context.\n                   Higher 138 values\n                   (total of 330 contexts in Jericho)",
    /* MTRPS_EM_CONTEXT_SIZE_LOW */ "Packet size memory per context.\n                   Lower 192 values",
    /* MTRPS_EM_MCDA_DYNAMIC     */ "MCD-A - dynamic data\n                   Notes:\n                   - Each entry map 4 meters to profiles which are processed simultaneously.\n                   - Indexes 0 - (1280-1)",
    /* MTRPS_EM_MCDA_HEADER_APPEND_SIZE_PTR_MAP */ "MCDA - Mapping Header Append Size Ptr (Out LIF Adjust Profile).\n                   Value = -128, +127\n                   Notes:\n                   - Each entry has 4 mappings\n                   - Indexes 0 - 256-1",
    /* MTRPS_EM_MCDA_IN_PP_PORT_MAP */ "MCDA - Mapping In-PP-Port(8) into In-PP-Port-Profile(3)\n                   Notes:\n                   - Each entry has 4 mappings\n                   - Indexes 0 - 256-1",
    /* MTRPS_EM_MCDA_IN_PP_PORT_MAP_AND_MTR_PRF_MAP */ "MCDA - Mapping In-PP-Port-Profile(6) into In-PP-Port-Size-Delta(8)\n                   Values = -128, +127\n                   Notes:\n                   - Each entry has 4 mappings\n                   - Indexes 0 - 256-1",
    /* MTRPS_EM_MCDA_PCUC        */ "MCDA - Update color memory per context.\n                   Holds the LB (color) that was updated on SOP.",
    /* MTRPS_EM_MCDA_PRFCFG_0    */ "MCD-A - profile configuration.\n                   First copy\n                   Both copies should be initialized the same",
    /* MTRPS_EM_MCDA_PRFCFG_1    */ "MCD-A - profile configuration.\n                   Second copy\n                   Both copies should be initialized the same",
    /* MTRPS_EM_MCDA_PRFCFG_SHARING_DIS */ "MCD-A - profile configuration.\n                   This table defines the profile config memory fields when the profile SharingFlag is reset.",
    /* MTRPS_EM_MCDA_PRFCFG_SHARING_EN */ "MCD-A - profile configuration.\n                   This table defines the profile config memory fields when the profile SharingFlag is set.",
    /* MTRPS_EM_MCDA_PRFSEL      */ "MCD-A - index to profile mapping.\n                   Notes:\n                   - Each entry map 4 meters to profiles which are processed simultaneously.\n                   - Indexes 0 - (1280-1)",
    /* MTRPS_EM_MCDB_DYNAMIC     */ "MCD-B - dynamic data\n                   Notes:\n                   - Each entry map 4 meters to profiles which are processed simultaneously.\n                   - Indexes 0 - (8-1)",
    /* MTRPS_EM_MCDB_HEADER_APPEND_SIZE_PTR_MAP */ "MCDB - Mapping Header Append Size Ptr (Out LIF Adjust Profile).\n                   Value = -128, +127\n                   Notes:\n                   - Each entry has 4 mappings\n                   - Indexes 0 - 256-1",
    /* MTRPS_EM_MCDB_IN_PP_PORT_MAP */ "MCDB - Mapping In-PP-Port(8) into In-PP-Port-Profile(3)\n                   Notes:\n                   - Each entry has 4 mappings\n                   - Indexes 0 - 256-1",
    /* MTRPS_EM_MCDB_IN_PP_PORT_MAP_AND_MTR_PRF_MAP */ "MCDB- Mapping In-PP-Port-Profile(6) into In-PP-Port-Size-Delta(8)\n                   Values = -128, +127\n                   Notes:\n                   - Each entry has 4 mappings\n                   - Indexes 0 - 256-1",
    /* MTRPS_EM_MCDB_PCUC        */ "MCDB - Update color memory per context.\n                   Holds the LB (color) that was updated on SOP.",
    /* MTRPS_EM_MCDB_PRFCFG_0    */ "MCD-B - profile configuration.\n                   First copy\n                   Both copies should be initialized the same",
    /* MTRPS_EM_MCDB_PRFCFG_1    */ "MCD-B - profile configuration.\n                   Second copy\n                   Both copies should be initialized the same",
    /* MTRPS_EM_MCDB_PRFCFG_SHARING_DIS */ "MCD-B - profile configuration.\n                   This table defines the profile config memory fields when the profile SharingFlag is reset.",
    /* MTRPS_EM_MCDB_PRFCFG_SHARING_EN */ "MCD-B - profile configuration.\n                   This table defines the profile config memory fields when the profile SharingFlag is set.",
    /* MTRPS_EM_MCDB_PRFSEL      */ "MCD-B - index to profile mapping.\n                   Notes:\n                   - Each entry map 4 meters to profiles which are processed simultaneously.\n                   - Indexes 0 - (8-1)",
    /* MTRPS_EM_PCD_MAP          */ "Parallel color decision mapping table (64 entries x 4)\n                   Address (6) to this table is:\n                   On Dual mode:\n                   - bits 5:4 - MCD-B color decision\n                   - bits 3 - MCD-B other bucket has credits\n                   - bits 2:1 - MCD-A color decision\n                   - bits 0 - MCD-A other bucket has credits\n                   On Single mode:\n                   - bits 5:4 - MRPS1 color decision\n                   - bits 3 - MRPS1 other bucke ...",
    /* MTU_PROFILE               */ "MTU check table, Indexed by MTU_PROFILE_INDEX (5 bits)",
    /* MULTIPASS_LOOPBACK_BITMAP */ "Multipass Loopback Bitmap Register.",
    /* MULTIPASS_LOOPBACK_BITMAP_PIPE0 */ "Multipass Loopback Bitmap Register. This table contains a bitmap indicating the port(s) that are used for multipass processing (MiM, TRILL, etc.). It is a programming requirement that this bitmap only contains the internal loopback port.",
    /* MULTIPASS_LOOPBACK_BITMAP_PIPE1 */ "Multipass Loopback Bitmap Register. This table contains a bitmap indicating the port(s) that are used for multipass processing (MiM, TRILL, etc.). It is a programming requirement that this bitmap only contains the internal loopback port.",
    /* MULTIPASS_LOOPBACK_BITMAP_PIPE2 */ "Multipass Loopback Bitmap Register. This table contains a bitmap indicating the port(s) that are used for multipass processing (MiM, TRILL, etc.). It is a programming requirement that this bitmap only contains the internal loopback port.",
    /* MULTIPASS_LOOPBACK_BITMAP_PIPE3 */ "Multipass Loopback Bitmap Register. This table contains a bitmap indicating the port(s) that are used for multipass processing (MiM, TRILL, etc.). It is a programming requirement that this bitmap only contains the internal loopback port.",
    /* MY_STATION_TCAM           */ "TCAM for MPLS My Station lookups - no associated data.",
    /* MY_STATION_TCAM_2         */ "TCAM for My Station 2 lookups - no associated data.",
    /* MY_STATION_TCAM_2_DATA_ONLY */ "Alias for data portion of MY_STATION_TCAM.",
    /* MY_STATION_TCAM_2_ENTRY_ONLY */ "Alias for TCAM portion of MY_STATION_TCAM_2.",
    /* MY_STATION_TCAM_DATA_ONLY */ "TCAM for MPLS My Station lookups - no associated data.",
    /* MY_STATION_TCAM_ENTRY_ONLY */ "TCAM for MPLS My Station lookups - no associated data.",
    /* NBIH_RX_DATA_HRF_MEMA_CTRL */ "rx CTRL memory n for ILKN ports - Data Hrf",
    /* NBIH_RX_DATA_HRF_MEMA_DATA */ "Rx DATA memory n for ILKN ports - Data Hrf",
    /* NBIH_RX_DATA_HRF_MEMB_CTRL */ "rx CTRL memory n for ILKN ports - Data Hrf",
    /* NBIH_RX_DATA_HRF_MEMB_DATA */ "Rx DATA memory n for ILKN ports - Data Hrf",
    /* NBIH_RX_DATA_HRF_MEMC_CTRL */ "rx CTRL memory n for ILKN ports - Data Hrf",
    /* NBIH_RX_DATA_HRF_MEMC_DATA */ "Rx DATA memory n for ILKN ports - Data Hrf",
    /* NBIH_RX_DATA_HRF_MEMD_CTRL */ "rx CTRL memory n for ILKN ports - Data Hrf",
    /* NBIH_RX_DATA_HRF_MEMD_DATA */ "Rx DATA memory n for ILKN ports - Data Hrf",
    /* NBIH_RX_MEMA_0_QMLF       */ "rx memory a n",
    /* NBIH_RX_MEMA_1_QMLF       */ "rx memory a n",
    /* NBIH_RX_MEMA_2_QMLF       */ "rx memory a n",
    /* NBIH_RX_MEMA_3_QMLF       */ "rx memory a n",
    /* NBIH_RX_MEMA_4_QMLF       */ "rx memory a n",
    /* NBIH_RX_MEMB_0_QMLF       */ "rx memory b n",
    /* NBIH_RX_MEMB_1_QMLF       */ "rx memory b n",
    /* NBIH_RX_MEMB_2_QMLF       */ "rx memory b n",
    /* NBIH_RX_MEMB_3_QMLF       */ "rx memory b n",
    /* NBIH_RX_MEMB_4_QMLF       */ "rx memory b n",
    /* NBIH_RX_MEMC_0_QMLF       */ "rx memory c n",
    /* NBIH_RX_MEMC_1_QMLF       */ "rx memory c n",
    /* NBIH_RX_MEMC_2_QMLF       */ "rx memory c n",
    /* NBIH_RX_MEMC_3_QMLF       */ "rx memory c n",
    /* NBIH_RX_MEMC_4_QMLF       */ "rx memory c n",
    /* NBIH_RX_MEMD_0_QMLF       */ "rx memory d n",
    /* NBIH_RX_MEMD_1_QMLF       */ "rx memory d n",
    /* NBIH_RX_MEMD_2_QMLF       */ "rx memory d n",
    /* NBIH_RX_MEMD_3_QMLF       */ "rx memory d n",
    /* NBIH_RX_MEMD_4_QMLF       */ "rx memory d n",
    /* NBIH_RX_TDM_HRF_MEMA_CTRL */ "rx CTRL memory n for ILKN ports - tdm Hrf",
    /* NBIH_RX_TDM_HRF_MEMA_DATA */ "Rx DATA memory n for ILKN ports - tdm Hrf",
    /* NBIH_RX_TDM_HRF_MEMB_CTRL */ "rx CTRL memory n for ILKN ports - tdm Hrf",
    /* NBIH_RX_TDM_HRF_MEMB_DATA */ "Rx DATA memory n for ILKN ports - tdm Hrf",
    /* NBIH_RX_TDM_HRF_MEMC_CTRL */ "rx CTRL memory n for ILKN ports - tdm Hrf",
    /* NBIH_RX_TDM_HRF_MEMC_DATA */ "Rx DATA memory n for ILKN ports - tdm Hrf",
    /* NBIH_RX_TDM_HRF_MEMD_CTRL */ "rx CTRL memory n for ILKN ports - tdm Hrf",
    /* NBIH_RX_TDM_HRF_MEMD_DATA */ "Rx DATA memory n for ILKN ports - tdm Hrf",
    /* NBIH_TX_ELK_RXI           */ "tx elk RXI memory n",
    /* NBIH_TX_HRF_MEMA_CTRL     */ "tx CTRL memory n for ILKN ports",
    /* NBIH_TX_HRF_MEMA_DATA     */ "tx DATA memory n for ILKN ports",
    /* NBIH_TX_HRF_MEMB_CTRL     */ "tx CTRL memory n for ILKN ports",
    /* NBIH_TX_HRF_MEMB_DATA     */ "tx DATA memory n for ILKN ports",
    /* NBIH_TX_MEMA_CTRL         */ "tx CTRL memory n for PML ports (12.5G SerDes)",
    /* NBIH_TX_MEMA_DATA         */ "tx DATA memory n for PML ports (12.5G SerDes)",
    /* NBIH_TX_MEMB_CTRL         */ "tx CTRL memory n for PML ports (12.5G SerDes)",
    /* NBIH_TX_MEMB_DATA         */ "tx DATA memory n for PML ports (12.5G SerDes)",
    /* NBIH_TX_SIF_RXI           */ "tx SIF RXI memory n",
    /* NBIL_RX_DATA_HRF_MEMA_CTRL */ "rx CTRL memory  for ILKN ports - Data Hrf",
    /* NBIL_RX_DATA_HRF_MEMA_DATA */ "Rx DATA memory n for ILKN ports - Data Hrf",
    /* NBIL_RX_DATA_HRF_MEMB_CTRL */ "rx CTRL memory for ILKN ports - Data Hrf",
    /* NBIL_RX_DATA_HRF_MEMB_DATA */ "Rx DATA memory for ILKN ports - Data Hrf",
    /* NBIL_RX_DATA_HRF_MEMC_CTRL */ "rx CTRL memory  for ILKN ports - Data Hrf",
    /* NBIL_RX_DATA_HRF_MEMC_DATA */ "Rx DATA memory  for ILKN ports - Data Hrf",
    /* NBIL_RX_DATA_HRF_MEMD_CTRL */ "rx CTRL memory  for ILKN ports - Data Hrf",
    /* NBIL_RX_DATA_HRF_MEMD_DATA */ "Rx DATA memory  for ILKN ports - Data Hrf",
    /* NBIL_RX_MEMA_0_QMLF       */ "rx memory a n",
    /* NBIL_RX_MEMA_1_QMLF       */ "rx memory a n",
    /* NBIL_RX_MEMA_2_QMLF       */ "rx memory a n",
    /* NBIL_RX_MEMA_3_QMLF       */ "rx memory a n",
    /* NBIL_RX_MEMA_4_QMLF       */ "rx memory a n",
    /* NBIL_RX_MEMB_0_QMLF       */ "rx memory b n",
    /* NBIL_RX_MEMB_1_QMLF       */ "rx memory b n",
    /* NBIL_RX_MEMB_2_QMLF       */ "rx memory b n",
    /* NBIL_RX_MEMB_3_QMLF       */ "rx memory b n",
    /* NBIL_RX_MEMB_4_QMLF       */ "rx memory b n",
    /* NBIL_RX_MEMC_0_QMLF       */ "rx memory c n",
    /* NBIL_RX_MEMC_1_QMLF       */ "rx memory c n",
    /* NBIL_RX_MEMC_2_QMLF       */ "rx memory c n",
    /* NBIL_RX_MEMC_3_QMLF       */ "rx memory c n",
    /* NBIL_RX_MEMC_4_QMLF       */ "rx memory c n",
    /* NBIL_RX_MEMD_0_QMLF       */ "rx memory d n",
    /* NBIL_RX_MEMD_1_QMLF       */ "rx memory d n",
    /* NBIL_RX_MEMD_2_QMLF       */ "rx memory d n",
    /* NBIL_RX_MEMD_3_QMLF       */ "rx memory d n",
    /* NBIL_RX_MEMD_4_QMLF       */ "rx memory d n",
    /* NBIL_RX_TDM_HRF_MEMA_CTRL */ "rx CTRL memory  for ILKN ports - tdm Hrf",
    /* NBIL_RX_TDM_HRF_MEMA_DATA */ "Rx DATA memory  for ILKN ports - tdm Hrf",
    /* NBIL_RX_TDM_HRF_MEMB_CTRL */ "rx CTRL memory  for ILKN ports - tdm Hrf",
    /* NBIL_RX_TDM_HRF_MEMB_DATA */ "Rx DATA memory  for ILKN ports - tdm Hrf",
    /* NBIL_RX_TDM_HRF_MEMC_CTRL */ "rx CTRL memory for ILKN ports - tdm Hrf",
    /* NBIL_RX_TDM_HRF_MEMC_DATA */ "Rx DATA memory  for ILKN ports - tdm Hrf",
    /* NBIL_RX_TDM_HRF_MEMD_CTRL */ "rx CTRL memory for ILKN ports - tdm Hrf",
    /* NBIL_RX_TDM_HRF_MEMD_DATA */ "Rx DATA memory  for ILKN ports - tdm Hrf",
    /* NBIL_TX_ELK_RXI           */ "tx elk RXI memory n",
    /* NBIL_TX_HRF_MEMA_CTRL     */ "tx CTRL memory  for ILKN ports",
    /* NBIL_TX_HRF_MEMA_DATA     */ "tx DATA memory  for ILKN ports",
    /* NBIL_TX_HRF_MEMB_CTRL     */ "tx CTRL memory for ILKN ports",
    /* NBIL_TX_HRF_MEMB_DATA     */ "tx DATA memory  for ILKN ports",
    /* NBIL_TX_MEMA_CTRL         */ "tx CTRL memory n for PML ports (12.5G SerDes)",
    /* NBIL_TX_MEMA_DATA         */ "tx DATA memory n for PML ports (12.5G SerDes)",
    /* NBIL_TX_MEMB_CTRL         */ "tx CTRL memory n for PML ports (12.5G SerDes)",
    /* NBIL_TX_MEMB_DATA         */ "tx DATA memory n for PML ports (12.5G SerDes)",
    /* NBIL_TX_SIF_RXI           */ "tx SIF RXI memory n",
    /* NBI_EGR_MEM_CTRL          */ "tx ctrl memory",
    /* NBI_EGR_MEM_DATA          */ "tx data memory",
    /* NBI_ING_MEM_CTRL          */ "rx ctrl memory",
    /* NBI_ING_MEM_DATA          */ "rx data memory",
    /* NBI_MEM_92000             */ "INTERNAL",
    /* NBI_MEM_93000             */ "INTERNAL",
    /* NBI_MEM_94000             */ "INTERNAL",
    /* NBI_MEM_95000             */ "INTERNAL",
    /* NBI_MLF_RX_MEM_A_CTRL     */ "rxn controls memory a",
    /* NBI_MLF_RX_MEM_B_CTRL     */ "rxn controls memory b",
    /* NBI_MLF_TX_MEM_CTRL       */ "txn controls memory",
    /* NBI_RBINS_MEM             */ "Statistics memory for the RX bins. Each memory index refers to a port from 0-27. Each port has 14 bins (described at StatReadCntId). This memory can be read via the special Statistics mechanism.",
    /* NBI_RLENG_MEM             */ "Statistics memory for the RX octets. Each NIF port has 1 entry.",
    /* NBI_RPKTS_MEM             */ "Statistics memory for the RX BURSTS count. Each NIF port has 2 entries; the first is for good bursts count and the second is for error bursts count.",
    /* NBI_RTYPE_MEM             */ "Statistics memory for the RX MCAST and BCAST. Each NIF port has 2 entries; the first is its BCAST count and the second is its MCAST count.",
    /* NBI_TBINS_MEM             */ "Statistics memory for the TX bins. Each memory index refers to a port from 0-27. Each port has 14 bins (described at StatReadCntId). This memory can be read via the special Statistics mechanism.",
    /* NBI_TLENG_MEM             */ "Statistics memory for the TX octets. Each NIF port has 1 entry.",
    /* NBI_TPKTS_MEM             */ "Statistics memory for the TX BURSTS count. Each NIF port has 2 entries; the first is for good bursts count and the second is for error bursts count.",
    /* NBI_TTYPE_MEM             */ "Statistics memory for the TX MCAST and BCAST. Each NIF port has 2 entries; the first is its BCAST count and the second is its MCAST count.",
    /* NETID_BITMAP              */ "NET_ID indication mapping. Index: PKT.NET_ID.",
    /* NHI_GROUP_TC_PROFILE      */ "NHI group offset based on {tc_profile_index, int_pri}",
    /* NIF_PML_RX_MEMA_0_QMLF    */ "rx memory a n",
    /* NIF_PML_RX_MEMA_1_QMLF    */ "rx memory a n",
    /* NIF_PML_RX_MEMA_2_QMLF    */ "rx memory a n",
    /* NIF_PML_RX_MEMA_3_QMLF    */ "rx memory a n",
    /* NIF_PML_RX_MEMA_4_QMLF    */ "rx memory a n",
    /* NIF_PML_RX_MEMB_0_QMLF    */ "rx memory b n",
    /* NIF_PML_RX_MEMB_1_QMLF    */ "rx memory b n",
    /* NIF_PML_RX_MEMB_2_QMLF    */ "rx memory b n",
    /* NIF_PML_RX_MEMB_3_QMLF    */ "rx memory b n",
    /* NIF_PML_RX_MEMB_4_QMLF    */ "rx memory b n",
    /* NIF_PML_RX_MEMC_0_QMLF    */ "rx memory c n",
    /* NIF_PML_RX_MEMC_1_QMLF    */ "rx memory c n",
    /* NIF_PML_RX_MEMC_2_QMLF    */ "rx memory c n",
    /* NIF_PML_RX_MEMC_3_QMLF    */ "rx memory c n",
    /* NIF_PML_RX_MEMC_4_QMLF    */ "rx memory c n",
    /* NIF_PML_RX_MEMD_0_QMLF    */ "rx memory d n",
    /* NIF_PML_RX_MEMD_1_QMLF    */ "rx memory d n",
    /* NIF_PML_RX_MEMD_2_QMLF    */ "rx memory d n",
    /* NIF_PML_RX_MEMD_3_QMLF    */ "rx memory d n",
    /* NIF_PML_RX_MEMD_4_QMLF    */ "rx memory d n",
    /* NIF_PML_TX_MEMA_CTRL      */ "tx CTRL memory n for PML ports (12.5G SerDes)",
    /* NIF_PML_TX_MEMA_DATA      */ "tx DATA memory n for PML ports (12.5G SerDes)",
    /* NIF_PML_TX_MEMB_CTRL      */ "tx CTRL memory n for PML ports (12.5G SerDes)",
    /* NIF_PML_TX_MEMB_DATA      */ "tx DATA memory n for PML ports (12.5G SerDes)",
    /* NIF_PMX_RX_MEMA_0_QMLF_2  */ "rx memory a n",
    /* NIF_PMX_RX_MEMA_0_QMLF_3  */ "rx memory a n",
    /* NIF_PMX_RX_MEMA_0_QMLF_4  */ "rx memory a n",
    /* NIF_PMX_RX_MEMA_0_QMLF_5  */ "rx memory a n",
    /* NIF_PMX_RX_MEMA_0_QMLF_6  */ "rx memory a n",
    /* NIF_PMX_RX_MEMA_0_QMLF_7  */ "rx memory a n",
    /* NIF_PMX_RX_MEMA_0_QMLF_8  */ "rx memory a n",
    /* NIF_PMX_RX_MEMA_1_QMLF_2  */ "rx memory a n",
    /* NIF_PMX_RX_MEMA_1_QMLF_3  */ "rx memory a n",
    /* NIF_PMX_RX_MEMA_1_QMLF_4  */ "rx memory a n",
    /* NIF_PMX_RX_MEMA_1_QMLF_5  */ "rx memory a n",
    /* NIF_PMX_RX_MEMA_1_QMLF_6  */ "rx memory a n",
    /* NIF_PMX_RX_MEMA_1_QMLF_7  */ "rx memory a n",
    /* NIF_PMX_RX_MEMA_1_QMLF_8  */ "rx memory a n",
    /* NIF_PMX_RX_MEMA_2_QMLF_2  */ "rx memory a n",
    /* NIF_PMX_RX_MEMA_2_QMLF_3  */ "rx memory a n",
    /* NIF_PMX_RX_MEMA_2_QMLF_4  */ "rx memory a n",
    /* NIF_PMX_RX_MEMA_2_QMLF_5  */ "rx memory a n",
    /* NIF_PMX_RX_MEMA_2_QMLF_6  */ "rx memory a n",
    /* NIF_PMX_RX_MEMA_2_QMLF_7  */ "rx memory a n",
    /* NIF_PMX_RX_MEMA_2_QMLF_8  */ "rx memory a n",
    /* NIF_PMX_RX_MEMA_3_QMLF_2  */ "rx memory a n",
    /* NIF_PMX_RX_MEMA_3_QMLF_3  */ "rx memory a n",
    /* NIF_PMX_RX_MEMA_3_QMLF_4  */ "rx memory a n",
    /* NIF_PMX_RX_MEMA_3_QMLF_5  */ "rx memory a n",
    /* NIF_PMX_RX_MEMA_3_QMLF_6  */ "rx memory a n",
    /* NIF_PMX_RX_MEMA_3_QMLF_7  */ "rx memory a n",
    /* NIF_PMX_RX_MEMA_3_QMLF_8  */ "rx memory a n",
    /* NIF_PMX_RX_MEMA_4_QMLF_2  */ "rx memory a n",
    /* NIF_PMX_RX_MEMA_4_QMLF_3  */ "rx memory a n",
    /* NIF_PMX_RX_MEMA_4_QMLF_4  */ "rx memory a n",
    /* NIF_PMX_RX_MEMA_4_QMLF_5  */ "rx memory a n",
    /* NIF_PMX_RX_MEMA_4_QMLF_6  */ "rx memory a n",
    /* NIF_PMX_RX_MEMA_4_QMLF_7  */ "rx memory a n",
    /* NIF_PMX_RX_MEMA_4_QMLF_8  */ "rx memory a n",
    /* NIF_PMX_RX_MEMB_0_QMLF_2  */ "rx memory b n",
    /* NIF_PMX_RX_MEMB_0_QMLF_3  */ "rx memory b n",
    /* NIF_PMX_RX_MEMB_0_QMLF_4  */ "rx memory b n",
    /* NIF_PMX_RX_MEMB_0_QMLF_5  */ "rx memory b n",
    /* NIF_PMX_RX_MEMB_0_QMLF_6  */ "rx memory b n",
    /* NIF_PMX_RX_MEMB_0_QMLF_7  */ "rx memory b n",
    /* NIF_PMX_RX_MEMB_0_QMLF_8  */ "rx memory b n",
    /* NIF_PMX_RX_MEMB_1_QMLF_2  */ "rx memory b n",
    /* NIF_PMX_RX_MEMB_1_QMLF_3  */ "rx memory b n",
    /* NIF_PMX_RX_MEMB_1_QMLF_4  */ "rx memory b n",
    /* NIF_PMX_RX_MEMB_1_QMLF_5  */ "rx memory b n",
    /* NIF_PMX_RX_MEMB_1_QMLF_6  */ "rx memory b n",
    /* NIF_PMX_RX_MEMB_1_QMLF_7  */ "rx memory b n",
    /* NIF_PMX_RX_MEMB_1_QMLF_8  */ "rx memory b n",
    /* NIF_PMX_RX_MEMB_2_QMLF_2  */ "rx memory b n",
    /* NIF_PMX_RX_MEMB_2_QMLF_3  */ "rx memory b n",
    /* NIF_PMX_RX_MEMB_2_QMLF_4  */ "rx memory b n",
    /* NIF_PMX_RX_MEMB_2_QMLF_5  */ "rx memory b n",
    /* NIF_PMX_RX_MEMB_2_QMLF_6  */ "rx memory b n",
    /* NIF_PMX_RX_MEMB_2_QMLF_7  */ "rx memory b n",
    /* NIF_PMX_RX_MEMB_2_QMLF_8  */ "rx memory b n",
    /* NIF_PMX_RX_MEMB_3_QMLF_2  */ "rx memory b n",
    /* NIF_PMX_RX_MEMB_3_QMLF_3  */ "rx memory b n",
    /* NIF_PMX_RX_MEMB_3_QMLF_4  */ "rx memory b n",
    /* NIF_PMX_RX_MEMB_3_QMLF_5  */ "rx memory b n",
    /* NIF_PMX_RX_MEMB_3_QMLF_6  */ "rx memory b n",
    /* NIF_PMX_RX_MEMB_3_QMLF_7  */ "rx memory b n",
    /* NIF_PMX_RX_MEMB_3_QMLF_8  */ "rx memory b n",
    /* NIF_PMX_RX_MEMB_4_QMLF_2  */ "rx memory b n",
    /* NIF_PMX_RX_MEMB_4_QMLF_3  */ "rx memory b n",
    /* NIF_PMX_RX_MEMB_4_QMLF_4  */ "rx memory b n",
    /* NIF_PMX_RX_MEMB_4_QMLF_5  */ "rx memory b n",
    /* NIF_PMX_RX_MEMB_4_QMLF_6  */ "rx memory b n",
    /* NIF_PMX_RX_MEMB_4_QMLF_7  */ "rx memory b n",
    /* NIF_PMX_RX_MEMB_4_QMLF_8  */ "rx memory b n",
    /* NIF_PMX_RX_MEMC_0_QMLF_2  */ "rx memory c n",
    /* NIF_PMX_RX_MEMC_0_QMLF_3  */ "rx memory c n",
    /* NIF_PMX_RX_MEMC_0_QMLF_4  */ "rx memory c n",
    /* NIF_PMX_RX_MEMC_0_QMLF_5  */ "rx memory c n",
    /* NIF_PMX_RX_MEMC_0_QMLF_6  */ "rx memory c n",
    /* NIF_PMX_RX_MEMC_0_QMLF_7  */ "rx memory c n",
    /* NIF_PMX_RX_MEMC_0_QMLF_8  */ "rx memory c n",
    /* NIF_PMX_RX_MEMC_1_QMLF_2  */ "rx memory c n",
    /* NIF_PMX_RX_MEMC_1_QMLF_3  */ "rx memory c n",
    /* NIF_PMX_RX_MEMC_1_QMLF_4  */ "rx memory c n",
    /* NIF_PMX_RX_MEMC_1_QMLF_5  */ "rx memory c n",
    /* NIF_PMX_RX_MEMC_1_QMLF_6  */ "rx memory c n",
    /* NIF_PMX_RX_MEMC_1_QMLF_7  */ "rx memory c n",
    /* NIF_PMX_RX_MEMC_1_QMLF_8  */ "rx memory c n",
    /* NIF_PMX_RX_MEMC_2_QMLF_2  */ "rx memory c n",
    /* NIF_PMX_RX_MEMC_2_QMLF_3  */ "rx memory c n",
    /* NIF_PMX_RX_MEMC_2_QMLF_4  */ "rx memory c n",
    /* NIF_PMX_RX_MEMC_2_QMLF_5  */ "rx memory c n",
    /* NIF_PMX_RX_MEMC_2_QMLF_6  */ "rx memory c n",
    /* NIF_PMX_RX_MEMC_2_QMLF_7  */ "rx memory c n",
    /* NIF_PMX_RX_MEMC_2_QMLF_8  */ "rx memory c n",
    /* NIF_PMX_RX_MEMC_3_QMLF_2  */ "rx memory c n",
    /* NIF_PMX_RX_MEMC_3_QMLF_3  */ "rx memory c n",
    /* NIF_PMX_RX_MEMC_3_QMLF_4  */ "rx memory c n",
    /* NIF_PMX_RX_MEMC_3_QMLF_5  */ "rx memory c n",
    /* NIF_PMX_RX_MEMC_3_QMLF_6  */ "rx memory c n",
    /* NIF_PMX_RX_MEMC_3_QMLF_7  */ "rx memory c n",
    /* NIF_PMX_RX_MEMC_3_QMLF_8  */ "rx memory c n",
    /* NIF_PMX_RX_MEMC_4_QMLF_2  */ "rx memory c n",
    /* NIF_PMX_RX_MEMC_4_QMLF_3  */ "rx memory c n",
    /* NIF_PMX_RX_MEMC_4_QMLF_4  */ "rx memory c n",
    /* NIF_PMX_RX_MEMC_4_QMLF_5  */ "rx memory c n",
    /* NIF_PMX_RX_MEMC_4_QMLF_6  */ "rx memory c n",
    /* NIF_PMX_RX_MEMC_4_QMLF_7  */ "rx memory c n",
    /* NIF_PMX_RX_MEMC_4_QMLF_8  */ "rx memory c n",
    /* NIF_PMX_RX_MEMD_0_QMLF_2  */ "rx memory d n",
    /* NIF_PMX_RX_MEMD_0_QMLF_3  */ "rx memory d n",
    /* NIF_PMX_RX_MEMD_0_QMLF_4  */ "rx memory d n",
    /* NIF_PMX_RX_MEMD_0_QMLF_5  */ "rx memory d n",
    /* NIF_PMX_RX_MEMD_0_QMLF_6  */ "rx memory d n",
    /* NIF_PMX_RX_MEMD_0_QMLF_7  */ "rx memory d n",
    /* NIF_PMX_RX_MEMD_0_QMLF_8  */ "rx memory d n",
    /* NIF_PMX_RX_MEMD_1_QMLF_2  */ "rx memory d n",
    /* NIF_PMX_RX_MEMD_1_QMLF_3  */ "rx memory d n",
    /* NIF_PMX_RX_MEMD_1_QMLF_4  */ "rx memory d n",
    /* NIF_PMX_RX_MEMD_1_QMLF_5  */ "rx memory d n",
    /* NIF_PMX_RX_MEMD_1_QMLF_6  */ "rx memory d n",
    /* NIF_PMX_RX_MEMD_1_QMLF_7  */ "rx memory d n",
    /* NIF_PMX_RX_MEMD_1_QMLF_8  */ "rx memory d n",
    /* NIF_PMX_RX_MEMD_2_QMLF_2  */ "rx memory d n",
    /* NIF_PMX_RX_MEMD_2_QMLF_3  */ "rx memory d n",
    /* NIF_PMX_RX_MEMD_2_QMLF_4  */ "rx memory d n",
    /* NIF_PMX_RX_MEMD_2_QMLF_5  */ "rx memory d n",
    /* NIF_PMX_RX_MEMD_2_QMLF_6  */ "rx memory d n",
    /* NIF_PMX_RX_MEMD_2_QMLF_7  */ "rx memory d n",
    /* NIF_PMX_RX_MEMD_2_QMLF_8  */ "rx memory d n",
    /* NIF_PMX_RX_MEMD_3_QMLF_2  */ "rx memory d n",
    /* NIF_PMX_RX_MEMD_3_QMLF_3  */ "rx memory d n",
    /* NIF_PMX_RX_MEMD_3_QMLF_4  */ "rx memory d n",
    /* NIF_PMX_RX_MEMD_3_QMLF_5  */ "rx memory d n",
    /* NIF_PMX_RX_MEMD_3_QMLF_6  */ "rx memory d n",
    /* NIF_PMX_RX_MEMD_3_QMLF_7  */ "rx memory d n",
    /* NIF_PMX_RX_MEMD_3_QMLF_8  */ "rx memory d n",
    /* NIF_PMX_RX_MEMD_4_QMLF_2  */ "rx memory d n",
    /* NIF_PMX_RX_MEMD_4_QMLF_3  */ "rx memory d n",
    /* NIF_PMX_RX_MEMD_4_QMLF_4  */ "rx memory d n",
    /* NIF_PMX_RX_MEMD_4_QMLF_5  */ "rx memory d n",
    /* NIF_PMX_RX_MEMD_4_QMLF_6  */ "rx memory d n",
    /* NIF_PMX_RX_MEMD_4_QMLF_7  */ "rx memory d n",
    /* NIF_PMX_RX_MEMD_4_QMLF_8  */ "rx memory d n",
    /* NIF_PMX_TX_MEMA_2_CTRL    */ "tx CTRL memory n for PMX ports (12.5G SerDes)",
    /* NIF_PMX_TX_MEMA_2_DATA    */ "tx DATA memory n for PMX ports (12.5G SerDes)",
    /* NIF_PMX_TX_MEMA_3_CTRL    */ "tx CTRL memory n for PMX ports (12.5G SerDes)",
    /* NIF_PMX_TX_MEMA_3_DATA    */ "tx DATA memory n for PMX ports (12.5G SerDes)",
    /* NIF_PMX_TX_MEMA_4_CTRL    */ "tx CTRL memory n for PMX ports (12.5G SerDes)",
    /* NIF_PMX_TX_MEMA_4_DATA    */ "tx DATA memory n for PMX ports (12.5G SerDes)",
    /* NIF_PMX_TX_MEMA_5_CTRL    */ "tx CTRL memory n for PMX ports (12.5G SerDes)",
    /* NIF_PMX_TX_MEMA_5_DATA    */ "tx DATA memory n for PMX ports (12.5G SerDes)",
    /* NIF_PMX_TX_MEMA_6_CTRL    */ "tx CTRL memory n for PMX ports (12.5G SerDes)",
    /* NIF_PMX_TX_MEMA_6_DATA    */ "tx DATA memory n for PMX ports (12.5G SerDes)",
    /* NIF_PMX_TX_MEMA_7_CTRL    */ "tx CTRL memory n for PMX ports (12.5G SerDes)",
    /* NIF_PMX_TX_MEMA_7_DATA    */ "tx DATA memory n for PMX ports (12.5G SerDes)",
    /* NIF_PMX_TX_MEMA_8_CTRL    */ "tx CTRL memory n for PMX ports (12.5G SerDes)",
    /* NIF_PMX_TX_MEMA_8_DATA    */ "tx DATA memory n for PMX ports (12.5G SerDes)",
    /* NIF_PMX_TX_MEMB_2_CTRL    */ "tx CTRL memory n for PMX ports (12.5G SerDes)",
    /* NIF_PMX_TX_MEMB_2_DATA    */ "tx DATA memory n for PMX ports (12.5G SerDes)",
    /* NIF_PMX_TX_MEMB_3_CTRL    */ "tx CTRL memory n for PMX ports (12.5G SerDes)",
    /* NIF_PMX_TX_MEMB_3_DATA    */ "tx DATA memory n for PMX ports (12.5G SerDes)",
    /* NIF_PMX_TX_MEMB_4_CTRL    */ "tx CTRL memory n for PMX ports (12.5G SerDes)",
    /* NIF_PMX_TX_MEMB_4_DATA    */ "tx DATA memory n for PMX ports (12.5G SerDes)",
    /* NIF_PMX_TX_MEMB_5_CTRL    */ "tx CTRL memory n for PMX ports (12.5G SerDes)",
    /* NIF_PMX_TX_MEMB_5_DATA    */ "tx DATA memory n for PMX ports (12.5G SerDes)",
    /* NIF_PMX_TX_MEMB_6_CTRL    */ "tx CTRL memory n for PMX ports (12.5G SerDes)",
    /* NIF_PMX_TX_MEMB_6_DATA    */ "tx DATA memory n for PMX ports (12.5G SerDes)",
    /* NIF_PMX_TX_MEMB_7_CTRL    */ "tx CTRL memory n for PMX ports (12.5G SerDes)",
    /* NIF_PMX_TX_MEMB_7_DATA    */ "tx DATA memory n for PMX ports (12.5G SerDes)",
    /* NIF_PMX_TX_MEMB_8_CTRL    */ "tx CTRL memory n for PMX ports (12.5G SerDes)",
    /* NIF_PMX_TX_MEMB_8_DATA    */ "tx DATA memory n for PMX ports (12.5G SerDes)",
    /* NIF_TX_SIF_RXI            */ "tx SIF RXI memory",
    /* NONUCAST_TRUNK_BLOCK_MASK */ "Multicast and Broadcast Trunk Block Mask Table",
    /* NUM_QCN_CNM_RECEIVED      */ "Counts the number of QCN CNMs that are destined to egress on the associated (Egress Port, Priority)HG-Trunk DLB Control.",
    /* OAMP_CLS_FLEX_CRC_TCAM    */ "Map Trap Code and Opcode/channel to mask on first 128 bytes of OAM pdu for CRC claculation",
    /* OAMP_CLS_TRAP_CODE_TCAM   */ "Map Trap Code and Opcode/channel to mask on first 128 bytes of OAM pdu for CRC claculation",
    /* OAMP_DM_TRIGER            */ "",
    /* OAMP_FLEX_VER_MASK_TEMP   */ "",
    /* OAMP_FLOW_STAT_10_SEC_ENTRY_1 */ "Flow statistics for 10 seconds, occupy entries 128-255, each flow occupies four entries.",
    /* OAMP_FLOW_STAT_10_SEC_ENTRY_2 */ "Flow statistics for 10 seconds, occupy entries 128-255, each flow occupies four entries.",
    /* OAMP_FLOW_STAT_10_SEC_ENTRY_3 */ "Flow statistics for 10 seconds, occupy entries 128-255, each flow occupies four entries.",
    /* OAMP_FLOW_STAT_1_SEC_ENTRY_1 */ "Flow statistics for 1 second, occupy entries 0-127, each flow occupies four entries.",
    /* OAMP_FLOW_STAT_1_SEC_ENTRY_2 */ "Flow statistics for 1 second, occupy entries 0-127, each flow occupies four entries.",
    /* OAMP_FLOW_STAT_1_SEC_ENTRY_3 */ "Flow statistics for 1 second, occupy entries 0-127, each flow occupies four entries.",
    /* OAMP_FLOW_STAT_ACCUM_ENTRY_1 */ "Flow accumulated statistics, occupy entries 256-383, each flow occupies four entries.",
    /* OAMP_FLOW_STAT_ACCUM_ENTRY_2 */ "Flow accumulated statistics, occupy entries 256-383, each flow occupies four entries.",
    /* OAMP_FLOW_STAT_ACCUM_ENTRY_3 */ "Flow accumulated statistics, occupy entries 256-383, each flow occupies four entries.",
    /* OAMP_FLOW_STAT_ACCUM_ENTRY_4 */ "",
    /* OAMP_FLOW_STAT_ACCUM_ENTRY_34 */ "Flow accumulated statistics, occupy entries 256-383, each flow occupies four entries.",
    /* OAMP_ITR_DATA_FIFO        */ "INTERNAL",
    /* OAMP_ITR_PKT_FIFO         */ "INTERNAL",
    /* OAMP_LMM_DA_NIC_TABLE     */ "Translate LmmDaNicProfile to LmmDaNic - 3 leaset significant bytes of the LMM o ETH , mac DA",
    /* OAMP_LOCAL_PORT_2_SYSTEM_PORT */ "Map local port to system port",
    /* OAMP_MEM_20000            */ "INTERNAL",
    /* OAMP_MEM_40000            */ "INTERNAL",
    /* OAMP_MEM_50000            */ "INTERNAL",
    /* OAMP_MEM_60000            */ "INTERNAL",
    /* OAMP_MEM_70000            */ "INTERNAL",
    /* OAMP_MEM_80000            */ "INTERNAL",
    /* OAMP_MEM_90000            */ "INTERNAL",
    /* OAMP_MEM_100000           */ "INTERNAL",
    /* OAMP_MEM_150000           */ "INTERNAL",
    /* OAMP_MEM_180000           */ "INTERNAL",
    /* OAMP_MEM_190000           */ "INTERNAL",
    /* OAMP_MEM_210000           */ "INTERNAL",
    /* OAMP_MEM_220000           */ "INTERNAL",
    /* OAMP_MEM_270000           */ "INTERNAL",
    /* OAMP_MEM_290000           */ "INTERNAL",
    /* OAMP_MEM_340000           */ "INTERNAL",
    /* OAMP_MEM_350000           */ "INTERNAL",
    /* OAMP_MEM_1C0000           */ "INTERNAL",
    /* OAMP_MEM_2A0000           */ "INTERNAL",
    /* OAMP_MEM_2B0000           */ "INTERNAL",
    /* OAMP_MEM_B0000            */ "INTERNAL",
    /* OAMP_MEM_C0000            */ "INTERNAL",
    /* OAMP_MEM_D0000            */ "INTERNAL",
    /* OAMP_MEP_DB               */ "MEP DB (eth)",
    /* OAMP_MEP_DB_BFD_CC_ON_MPLSTP */ "MEP DB (BFDCC over MPLSTP)",
    /* OAMP_MEP_DB_BFD_CV_ON_MPLSTP */ "MEP DB (BFDCV over MPLSTP)",
    /* OAMP_MEP_DB_BFD_ON_IPV4_MULTI_HOP */ "MEP DB (BFD over IPv4 multi hop)",
    /* OAMP_MEP_DB_BFD_ON_IPV4_MULTI_HOP_SHORT_STATIC_MDB_FORMAT */ "MEP DB (BFD over IPv4 multi hop) static parameters in MDB (complementing the short format)",
    /* OAMP_MEP_DB_BFD_ON_IPV4_ONE_HOP */ "MEP DB (BFD over IPv4 one hop)",
    /* OAMP_MEP_DB_BFD_ON_IPV4_ONE_HOP_SHORT_STATIC_MDB_FORMAT */ "MEP DB (BFD over IPv4 one hop) static parameters in MDB (complementing the short format)",
    /* OAMP_MEP_DB_BFD_ON_MPLS   */ "MEP DB (BFD over MPLS)",
    /* OAMP_MEP_DB_BFD_ON_MPLS_SHORT_STATIC_MDB_FORMAT */ "MEP DB (BFD over MPLS) static parameters in MDB (complementing the short format)",
    /* OAMP_MEP_DB_BFD_ON_PWE    */ "MEP DB (BFD over PWE)",
    /* OAMP_MEP_DB_BFD_ON_PWE_SHORT_STATIC_MDB_FORMAT */ "MEP DB (BFD over MPLS) static parameters in MDB (complementing the short format)",
    /* OAMP_MEP_DB_BFD_ON_PWE_STATIC_MDB_FORMAT_PART_1 */ "MEP DB (BFD on PWE) static parameters in MDB (complementing the offloaded format), part1",
    /* OAMP_MEP_DB_BFD_ON_PWE_STATIC_MDB_FORMAT_PART_2 */ "MEP DB (BFD on PWE) static parameters in MDB (complementing the offloaded format), part2",
    /* OAMP_MEP_DB_BFD_SHORT_FORMAT */ "MEP DB (All BFD formats) short format, with static parameters in MDB",
    /* OAMP_MEP_DB_CCM_ETH_SHORT_STATIC_MDB_FORMAT */ "MEP DB (eth) static parameters in MDB (complementing the short format)",
    /* OAMP_MEP_DB_CCM_ETH_STATIC_MDB_FORMAT_PART_1 */ "MEP DB (eth) static parameters in MDB (complementing the offloaded format), part1",
    /* OAMP_MEP_DB_CCM_ETH_STATIC_MDB_FORMAT_PART_2 */ "MEP DB (eth) static parameters in MDB (complementing the offloaded format), part2",
    /* OAMP_MEP_DB_CCM_Y_1731_SHORT_FORMAT */ "MEP DB (eth/Y1731oMPLSTP/Y1731oPWE) short format, with static parameters in MDB",
    /* OAMP_MEP_DB_DM_STAT       */ "MEP DB (DM Stat entry)",
    /* OAMP_MEP_DB_DM_STAT_ONE_WAY */ "MEP DB (DM Stat entry one way delay)",
    /* OAMP_MEP_DB_DM_STAT_TWO_WAY */ "MEP DB (DM Stat entry twp way delay)",
    /* OAMP_MEP_DB_EXTRA_DATA_IN_MDB_HEADER */ "MEP DB Extra Data Format, when stored in MDB",
    /* OAMP_MEP_DB_EXTRA_DATA_IN_MDB_PAYLOAD */ "MEP DB Extra Data Format, when stored in MDB",
    /* OAMP_MEP_DB_EXT_DATA_HDR  */ "MEP DB Extra data header",
    /* OAMP_MEP_DB_EXT_DATA_PLD  */ "MEP DB Extra data",
    /* OAMP_MEP_DB_LM_DB         */ "MEP DB (LM DB entry)",
    /* OAMP_MEP_DB_LM_STAT       */ "MEP DB (LM Stat entry)",
    /* OAMP_MEP_DB_OFFLOADED_FORMAT_PART_1 */ "MEP DB (eth/Y1731oMPLSTP/Y1731oPWE/BFDoPWE) with static fields offloaded to MDB",
    /* OAMP_MEP_DB_OFFLOADED_FORMAT_PART_2 */ "MEP DB with static fields offloaded to MDB, part2",
    /* OAMP_MEP_DB_RFC_6374_ON_MPLSTP */ "MEP DB (rfc 6374)",
    /* OAMP_MEP_DB_Y_1731_ON_MPLSTP */ "MEP DB (Y1731 over MPLSTP)",
    /* OAMP_MEP_DB_Y_1731_ON_MPLSTP_SHORT_STATIC_MDB_FORMAT */ "MEP DB (Y1731 on MPLS-TP) static parameters in MDB (complementing the short format)",
    /* OAMP_MEP_DB_Y_1731_ON_MPLSTP_STATIC_MDB_FORMAT_PART_1 */ "MEP DB (Y1731 on MPLS-TP) static parameters in MDB (complementing the offloaded format), part1",
    /* OAMP_MEP_DB_Y_1731_ON_MPLSTP_STATIC_MDB_FORMAT_PART_2 */ "MEP DB (Y1731 on MPLS-TP) static parameters in MDB (complementing the offloaded format), part2",
    /* OAMP_MEP_DB_Y_1731_ON_PWE */ "MEP DB (Y1731 over PWE)",
    /* OAMP_MEP_DB_Y_1731_ON_PWE_SHORT_STATIC_MDB_FORMAT */ "MEP DB (Y1731 on PWE) static parameters in MDB (complementing the short format)",
    /* OAMP_MEP_DB_Y_1731_ON_PWE_STATIC_MDB_FORMAT_PART_1 */ "MEP DB (Y1731 on PWE) static parameters in MDB (complementing the offloaded format), part1",
    /* OAMP_MEP_DB_Y_1731_ON_PWE_STATIC_MDB_FORMAT_PART_2 */ "MEP DB (Y1731 on PWE) static parameters in MDB (complementing the offloaded format), part2",
    /* OAMP_MEP_PROFILE          */ "",
    /* OAMP_MEP_SCAN_PROFILE     */ "",
    /* OAMP_OLD_ETH_FORMAT       */ "MEP DB (eth)",
    /* OAMP_OPCODE_FOR_CNT       */ "",
    /* OAMP_PE_0_FDBK_FIFO       */ "INTERNAL",
    /* OAMP_PE_0_PROG_TCAM       */ "",
    /* OAMP_PE_1_FDBK_FIFO       */ "INTERNAL",
    /* OAMP_PE_1_PROG_TCAM       */ "",
    /* OAMP_PE_GEN_MEM           */ "OAMP Programmable Editor gen mem",
    /* OAMP_PE_INPUT_CNTL_FIFO_1 */ "Pe Input Cntl  FIFO 1",
    /* OAMP_PE_INPUT_CNTL_FIFO_2 */ "Pe Input Cntl  FIFO 2",
    /* OAMP_PE_PROGRAM           */ "OAMP Programmable Editor program mem",
    /* OAMP_PE_PROG_TCAM         */ "",
    /* OAMP_PROG_TCAM_PUNT_KEY   */ "",
    /* OAMP_PROG_TCAM_TX_KEY     */ "",
    /* OAMP_REMOTE_MEP_EXACT_MATCH_ACDT_AUX */ "INTERNAL",
    /* OAMP_REMOTE_MEP_EXACT_MATCH_ACDT_H */ "INTERNAL",
    /* OAMP_REMOTE_MEP_EXACT_MATCH_KEYT_AUX */ "INTERNAL",
    /* OAMP_REMOTE_MEP_EXACT_MATCH_KEYT_PLDT_H */ "INTERNAL",
    /* OAMP_REMOTE_MEP_EXACT_MATCH_MAA_CAM */ "INTERNAL",
    /* OAMP_REMOTE_MEP_EXACT_MATCH_MAA_CAM_PAYLOAD */ "INTERNAL",
    /* OAMP_REMOTE_MEP_EXACT_MATCH_MANAGEMENT_MEMORY_H */ "INTERNAL",
    /* OAMP_REMOTE_MEP_EXACT_MATCH_PLDT_AUX */ "INTERNAL",
    /* OAMP_REMOTE_MEP_EXACT_MATCH_STEP_TABLE */ "Step Table\n                   (The Item bit ordering matches must emc_include.v)",
    /* OAMP_RFC_FILTER           */ "",
    /* OAMP_RMAPEM_MANAGEMENT_REQUEST */ "Management requests",
    /* OAMP_RMAPEM_STEP_TABLE    */ "Step Table\n                   (The Item bit ordering matches must emc_include.v)",
    /* OAMP_RMEP_DATABASE        */ "Remote MEP DB",
    /* OAMP_RMEP_DB              */ "Remote MEP DB",
    /* OAMP_RMEP_DB_EXT          */ "Remote MEP DB extension",
    /* OAMP_RMEP_DB_EXTERNAL     */ "Remote MEP DB",
    /* OAMP_RMEP_INDEX_ACC       */ "Enable lookup of RMEP ID for a combination of opcode(8), MEP-Type(4)\n MEP-Type is the index to the bit within the entry,\n opcode is the address to the table",
    /* OAMP_RSP_FIRST_DATA_FIFO  */ "INTERNAL",
    /* OAMP_RSP_OUT_DATA_FIFO    */ "INTERNAL",
    /* OAMP_RSP_TCAM             */ "",
    /* OAMP_RXB_INPUT_DATA_FIFO  */ "INTERNAL",
    /* OAMP_RXB_INPUT_DECISION_FIFO */ "Rxb Input Decison FIFO",
    /* OAMP_RXB_OUTPUT_DATA_FIFO */ "INTERNAL",
    /* OAMP_RXP_LMM_DA_NIC_TBL_FIFO */ "Rxp Lmm Da Nic Table FIFO",
    /* OAMP_RXP_LOCAL_MEP_EXTRA_DATA_FIFO_1 */ "Rxp Local MEP Extra Data 1 FIFO",
    /* OAMP_RXP_LOCAL_MEP_EXTRA_DATA_FIFO_2 */ "Rxp Local MEP Extra Data 2 FIFO",
    /* OAMP_RXP_LOCAL_MEP_EXTRA_DATA_FIFO_3 */ "Rxp Local MEP Extra Data 3 FIFO",
    /* OAMP_RXP_LOCAL_MEP_EXTRA_DATA_FIFO_4 */ "Rxp Local MEP Extra Data 4 FIFO",
    /* OAMP_RXP_LOCAL_MEP_LM_DM_FIFO_1 */ "Rxp local MEP Db LM DM FIFO 1",
    /* OAMP_RXP_LOCAL_MEP_LM_DM_FIFO_2 */ "Rxp local MEP Db LM DM FIFO 2",
    /* OAMP_RXP_LOCAL_MEP_LM_DM_FIFO_3 */ "Rxp local MEP Db LM DM FIFO 3",
    /* OAMP_RXP_LOCAL_MEP_LM_DM_FIFO_4 */ "Rxp local MEP Db LM DM FIFO 4",
    /* OAMP_RXP_LOCAL_MEP_PART_1_FIFO */ "Rxp local MEP Db Part 1 FIFO",
    /* OAMP_RXP_LOCAL_MEP_PART_2_FIFO */ "Rxp local MEP Db Part 2 FIFO",
    /* OAMP_RXP_LOCAL_R_MEP_PART_1_FIFO */ "Rxp Local RMEP Part1 FIFO",
    /* OAMP_RXP_LOCAL_R_MEP_PART_2_FIFO */ "Rxp Local RMEP Part2 FIFO",
    /* OAMP_RXP_LOC_2_SYS_PORT_TBL_FIFO */ "Rxp Loc2Sys Port table FIFO",
    /* OAMP_RXP_MDB_MEP_EXTRA_DATA_FIFO_1 */ "Rxp MDB MEP Extra Data 1 FIFO",
    /* OAMP_RXP_MDB_MEP_EXTRA_DATA_FIFO_2 */ "Rxp MDB MEP Extra Data 2 FIFO",
    /* OAMP_RXP_MDB_MEP_EXTRA_DATA_FIFO_3 */ "Rxp MDB MEP Extra Data 3 FIFO",
    /* OAMP_RXP_MDB_MEP_EXTRA_DATA_FIFO_4 */ "Rxp MDB MEP Extra Data 4 FIFO",
    /* OAMP_RXP_MDB_MEP_FIFO     */ "Rxp MDB MEP FIFO",
    /* OAMP_RXP_MDB_R_MEP_PART_2_FIFO */ "Rxp MDB RMEP Part2 FIFO",
    /* OAMP_RXP_MEP_PROFILE_TBL_FIFO */ "Rxp MEP Profile table FIFO",
    /* OAMP_RXP_PARSER_DATA_FIFO */ "Rxp Parser FIFO",
    /* OAMP_RXP_R_MEP_INDEX_FIFO */ "Rxp RMEP Index FIFO",
    /* OAMP_RXP_UMC_TBL_FIFO     */ "Rxp UMC Table  FIFO",
    /* OAMP_RX_OAM_ID_TCAM       */ "",
    /* OAMP_SAT_DATA_FIFO_MEM    */ "INTERNAL",
    /* OAMP_SAT_EVENT_FIFO_MEM   */ "INTERNAL",
    /* OAMP_SAT_RXI_CORE_0_MEM   */ "INTERNAL",
    /* OAMP_SAT_RXI_CORE_1_MEM   */ "INTERNAL",
    /* OAMP_SAT_RX_FLOW_10_SEC_ACCUM_STATS */ "Flow statistics for 10 seconds",
    /* OAMP_SAT_RX_FLOW_10_SEC_BIN_STATS */ "Flow statistics for 10 seconds",
    /* OAMP_SAT_RX_FLOW_10_SEC_STATS */ "Flow statistics for 10 seconds",
    /* OAMP_SAT_RX_FLOW_1_SEC_ACCUM_STATS */ "Flow statistics for 1 second",
    /* OAMP_SAT_RX_FLOW_1_SEC_BIN_STATS */ "Flow statistics for 1 second",
    /* OAMP_SAT_RX_FLOW_1_SEC_STATS */ "Flow statistics for 1 second",
    /* OAMP_SAT_RX_FLOW_ACCUM_STATS_1 */ "Flow accumulated statistics",
    /* OAMP_SAT_RX_FLOW_ACCUM_STATS_2 */ "Flow accumulated statistics",
    /* OAMP_SAT_RX_FLOW_ACCUM_STATS_3 */ "Flow accumulated statistics",
    /* OAMP_SAT_RX_FLOW_ACCUM_STATS_4 */ "Flow accumulated statistics",
    /* OAMP_SAT_RX_FLOW_ID       */ "",
    /* OAMP_SAT_RX_FLOW_PARAMS   */ "",
    /* OAMP_SAT_RX_FLOW_STATS    */ "",
    /* OAMP_SAT_TX               */ "",
    /* OAMP_SAT_TX_EVC_PARAMS_ENTRY_1 */ "Per evc parameters, two memory entries are needed. Occupy entries 0-15 (even entries)",
    /* OAMP_SAT_TX_EVC_PARAMS_ENTRY_2 */ "Per evc parameters, two memory entries are needed. Occupy entries 0-15 (odd entries)",
    /* OAMP_SAT_TX_EVC_PRM       */ "",
    /* OAMP_SAT_TX_EVC_PRM_ENTRY_1 */ "Per evc parameters, two memory entries are needed. Occupy entries 0-15, even addresses",
    /* OAMP_SAT_TX_EVC_PRM_ENTRY_2 */ "Per evc parameters, two memory entries are needed. Occupy entries 0-15, odd addresses",
    /* OAMP_SAT_TX_GEN_PARAMS    */ "Per generator parameters, occupy entries 16-31",
    /* OAMP_SAT_TX_GEN_PKT_PARAMS_1 */ "",
    /* OAMP_SAT_TX_GEN_PKT_PARAMS_2 */ "",
    /* OAMP_SAT_TX_GEN_PKT_PARAMS_1_EVEN */ "Per generator parameters, entry 1",
    /* OAMP_SAT_TX_GEN_PKT_PARAMS_1_ODD */ "Per generator parameters entry 2",
    /* OAMP_SAT_TX_GEN_PKT_PARAMS_2_EVEN */ "Per flow parameters, two memory entries are needed. Occupy entries 0-15, even addresses",
    /* OAMP_SAT_TX_GEN_PKT_PARAMS_2_ODD */ "Per flow parameters, two memory entries are needed. Occupy entries 0-15, odd addresses",
    /* OAMP_SAT_TX_GEN_PRM       */ "",
    /* OAMP_SAT_TX_GEN_PRM_ENTRY_1 */ "Per generator parameters, entry 1",
    /* OAMP_SAT_TX_GEN_PRM_ENTRY_2 */ "Per generator parameters entry 2",
    /* OAMP_SD_SF_DB_1           */ "SdSf database, keeping the sliding window and sd sf indications",
    /* OAMP_SD_SF_DB_2           */ "SdSf DB, splitted part",
    /* OAMP_SD_SF_DB_Y_1711      */ "Remote MEP DB",
    /* OAMP_SD_SF_PROFILE        */ "Remote MEP DB",
    /* OAMP_TXM_DATA_FIFO_MEMORY */ "INTERNAL",
    /* OAMP_TXM_LENGTH_FIFO_MEMORY */ "INTERNAL",
    /* OAMP_TXO_DATA_FIFO_MEMORY */ "INTERNAL",
    /* OAMP_TXO_LENGTH_FIFO      */ "Txo Length FIFO",
    /* OAMP_TXO_REQ_FIFO_MEMORY  */ "INTERNAL",
    /* OAMP_UMC_TABLE            */ "UMC table for ICC based MAID",
    /* OAM_DGLP_PROFILE          */ ".",
    /* OAM_FLEXIBLE_DOMAIN_CONTROL */ "index:{INNER PRIORITY TAGGED,PRE VXLT IVID VALID,PRE VXLT OVID VALID,POST VXLT IVID VALID,POST VXLT OVID VALID,SVP VALID}",
    /* OAM_LM_COUNTERS           */ "Packet counter for OAM Loss Measurement",
    /* OAM_LM_COUNTERS_0         */ "Packet counter for OAM Loss Measurement pool 0",
    /* OAM_LM_COUNTERS_1         */ "Packet counter for OAM Loss Measurement pool 1",
    /* OAM_OPCODE_CONTROL_PROFILE */ ".",
    /* OAM_OPCODE_GROUP          */ ".",
    /* OCB_FBM_BANK_MEM          */ "Free pointer memory. per bankn two memories n and n+32.",
    /* OCB_OCBM_BANK             */ "OCB Memory. Address field and access mode are empty because we dont want CPU to access directly to OCB memory.",
    /* OCB_OCBM_EVEN             */ "OCB Even Memory",
    /* OCB_OCBM_ODD              */ "OCB Odd Memory",
    /* OCB_OCB_ADDRESS_SPACE     */ "OCB memory space, addressable by CPU.\n                   Address should be logical (i.e. represent duff pointer).",
    /* OCB_WRITE_RXI_MEM         */ "write rxi.",
    /* OC_CMU_PORT0_BLOCK        */ "CMU Port 0 Block Table, provides logical-to-physical address mapping.",
    /* OC_CMU_PORT1_BLOCK        */ "CMU Port 1 Block Table, provides logical-to-physical address mapping.",
    /* OC_COP0_PORT_BLOCK        */ "COP0 Port Block Table, provides logical-to-physical address mapping.",
    /* OC_COP1_PORT_BLOCK        */ "COP1 Port Block Table, provides logical-to-physical address mapping.",
    /* OC_LRP_BUBBLE_PORT_BLOCK  */ "Bubble Port Block Table, provides logical-to-physical address mapping.",
    /* OC_LRP_BUBBLE_PORT_SEGMENT */ "Bubble Port Segment Table RAM, provides port-to-logical address mapping.  Note all 128 locations can be written and read, but only location 0 is used by the hardware.",
    /* OC_LRP_PORT0_BLOCK        */ "LRP Port 0 Block Table, provides logical-to-physical address mapping.",
    /* OC_LRP_PORT0_SEGMENT      */ "Port 0 Segment Table RAM, provides port-to-logical address mapping",
    /* OC_LRP_PORT1_BLOCK        */ "LRP Port 1 Block Table, provides logical-to-physical address mapping.",
    /* OC_LRP_PORT1_SEGMENT      */ "Port 1 Segment Table RAM, provides port-to-logical address mapping",
    /* OC_LRP_PORT2_BLOCK        */ "LRP Port 2 Block Table, provides logical-to-physical address mapping.",
    /* OC_LRP_PORT2_SEGMENT      */ "Port 2 Segment Table RAM, provides port-to-logical address mapping",
    /* OC_LRP_PORT3_BLOCK        */ "LRP Port 3 Block Table, provides logical-to-physical address mapping.",
    /* OC_LRP_PORT3_SEGMENT      */ "Port 3 Segment Table RAM, provides port-to-logical address mapping",
    /* OC_LRP_PORT4_BLOCK        */ "LRP Port 4 Block Table, provides logical-to-physical address mapping.",
    /* OC_LRP_PORT4_SEGMENT      */ "Port 4 Segment Table RAM, provides port-to-logical address mapping",
    /* OC_LRP_PORT5_BLOCK        */ "LRP Port 5 Block Table, provides logical-to-physical address mapping.",
    /* OC_LRP_PORT5_SEGMENT      */ "Port 5 Segment Table RAM, provides port-to-logical address mapping",
    /* OC_LRP_PORT6_BLOCK        */ "LRP Port 6 Block Table, provides logical-to-physical address mapping.",
    /* OC_LRP_PORT6_SEGMENT      */ "Port 6 Segment Table RAM, provides port-to-logical address mapping",
    /* OC_LRP_PORT7_BLOCK        */ "LRP Port 7 Block Table, provides logical-to-physical address mapping.",
    /* OC_LRP_PORT7_SEGMENT      */ "Port 7 Segment Table RAM, provides port-to-logical address mapping",
    /* OC_LRP_PORT8_BLOCK        */ "LRP Port 8 Block Table, provides logical-to-physical address mapping.",
    /* OC_LRP_PORT8_SEGMENT      */ "Port 8 Segment Table RAM, provides port-to-logical address mapping",
    /* OC_LRP_PORT9_BLOCK        */ "LRP Port 9 Block Table, provides logical-to-physical address mapping.",
    /* OC_LRP_PORT9_SEGMENT      */ "Port 9 Segment Table RAM, provides port-to-logical address mapping",
    /* OC_MEMORY                 */ "OCM MEMORY. PROC_PORT_ID or DMA_PORT_ID field in OC_CONFIG must be loaded prior to accessing this memory, to specify which Port Interface is to be used.  Specified Port Interface's OC_PORT_SEGMENT table (if LRP port) and OC_PORT_BLOCK table must be initialized before accessing this memory.  ECC and parity bit assignments only apply when memory configured for ECC protection.  This memory has 128M addresses, to allow bit access to any bit.  For dibit access, only the bottom 64M addresses will be u ...",
    /* OLP_DSP_EVENT_ROUTE       */ "Determines destination of the event read. The vector is accessed with the following fields of the event: Key-DB-Profile(2), Command(3), Part-of-Lag(1), FID-DB-Profile(2). Each entry contains 3-bits indicating whether to push the event to FIFO0, FIFO1 or the loopback, respectively (i.e. lsb is the loopback indication), Each line at this memory contains 8 entries.\n                   Only lower 32 lines are actually accessed",
    /* OLP_MEM_00000             */ "INTERNAL",
    /* OLP_MEM_20000             */ "INTERNAL",
    /* OP_UC_QGROUP_DROP_STATE   */ "THDU UC queue group drop state.",
    /* OP_UC_QGROUP_MINOK        */ "THDU UC queue group drop state.",
    /* OP_UC_QUEUE_DROP_STATE    */ "THDU UC queue drop state.",
    /* OP_UC_QUEUE_MINOK         */ "THDU UC queue drop state.",
    /* OUTCTRLBCASTPKTS          */ "Controlled Port Transmit Broadcast Frame Counter",
    /* OUTCTRLBYT                */ "Controlled Port Transmit Frame Octet Counter",
    /* OUTCTRLERRPKTS            */ "Controlled Port Transmit Error Frame Counter",
    /* OUTCTRLMCASTPKTS          */ "Controlled Port Transmit Multicast Frame Counter",
    /* OUTCTRLUCASTPKTS          */ "Controlled Port Transmit Unicast Frame Counter",
    /* OUTUNCTRLBCASTPKTS        */ "Uncontrolled Port Transmit Broadcast Frame Counter",
    /* OUTUNCTRLBYT              */ "Uncontrolled Port Transmit Frame Octet Counter",
    /* OUTUNCTRLERRPKTS          */ "Uncontrolled Port Transmit Error Frame Counter",
    /* OUTUNCTRLMCASTPKTS        */ "Uncontrolled Port Transmit Multicast Frame Counter",
    /* OUTUNCTRLUCASTPKTS        */ "Uncontrolled Port Transmit Unicast Frame Counter",
    /* PAYLOAD_TOS_FN            */ "TOS function table to map the TOS value to any value for filtering with the ContentAware Engine This table is indexed by payload TOS",
    /* PBI_DEBUG_TABLE           */ "PBI Debug Table",
    /* PB_PAYLOAD_MEM_BANK0      */ "Bank 0 of main Payload Memory (16 total, each storing a single 16B line)",
    /* PB_PAYLOAD_MEM_BANK1      */ "Bank 1 of main Payload Memory (16 total, each storing a single 16B line)",
    /* PB_PAYLOAD_MEM_BANK2      */ "Bank 2 of main Payload Memory (16 total, each storing a single 16B line)",
    /* PB_PAYLOAD_MEM_BANK3      */ "Bank 3 of main Payload Memory (16 total, each storing a single 16B line)",
    /* PB_PAYLOAD_MEM_BANK4      */ "Bank 4 of main Payload Memory (16 total, each storing a single 16B line)",
    /* PB_PAYLOAD_MEM_BANK5      */ "Bank 5 of main Payload Memory (16 total, each storing a single 16B line)",
    /* PB_PAYLOAD_MEM_BANK6      */ "Bank 6 of main Payload Memory (16 total, each storing a single 16B line)",
    /* PB_PAYLOAD_MEM_BANK7      */ "Bank 7 of main Payload Memory (16 total, each storing a single 16B line)",
    /* PB_PAYLOAD_MEM_BANK8      */ "Bank 8 of main Payload Memory (16 total, each storing a single 16B line)",
    /* PB_PAYLOAD_MEM_BANK9      */ "Bank 9 of main Payload Memory (16 total, each storing a single 16B line)",
    /* PB_PAYLOAD_MEM_BANK10     */ "Bank 10 of main Payload Memory (16 total, each storing a single 16B line)",
    /* PB_PAYLOAD_MEM_BANK11     */ "Bank 11 of main Payload Memory (16 total, each storing a single 16B line)",
    /* PB_PAYLOAD_MEM_BANK12     */ "Bank 12 of main Payload Memory (16 total, each storing a single 16B line)",
    /* PB_PAYLOAD_MEM_BANK13     */ "Bank 13 of main Payload Memory (16 total, each storing a single 16B line)",
    /* PB_PAYLOAD_MEM_BANK14     */ "Bank 14 of main Payload Memory (16 total, each storing a single 16B line)",
    /* PB_PAYLOAD_MEM_BANK15     */ "Bank 15 of main Payload Memory (16 total, each storing a single 16B line)",
    /* PDM_PDB_FBM               */ "Free pointer memory for SQM-PDB",
    /* PDM_PDM                   */ "Packet descriptor memory for SQM-PDM",
    /* PEM_ALU_0_LEVEL_1_4_OPCODES */ "Level 1-4 opcodes.",
    /* PEM_ALU_0_OPERATION       */ "Alu0Operation",
    /* PEM_ALU_0_OUT_DBUS_CHUNK_SELECT */ "Selects 16b chunk in the output Dbus.",
    /* PEM_ALU_0_VAR_CONSTRUCTION_0 */ "Alu0VarConstruction0",
    /* PEM_ALU_0_VAR_CONSTRUCTION_1 */ "Alu0VarConstruction1",
    /* PEM_ALU_0_VAR_CONSTRUCTION_2 */ "Alu0VarConstruction2",
    /* PEM_ALU_1_LEVEL_1_4_OPCODES */ "Level 1-4 opcodes.",
    /* PEM_ALU_1_OPERATION       */ "Alu1Operation",
    /* PEM_ALU_1_OUT_DBUS_CHUNK_SELECT */ "Selects 16b chunk in the output Dbus.",
    /* PEM_ALU_1_VAR_CONSTRUCTION_0 */ "Alu1VarConstruction0",
    /* PEM_ALU_1_VAR_CONSTRUCTION_1 */ "Alu1VarConstruction1",
    /* PEM_ALU_1_VAR_CONSTRUCTION_2 */ "Alu1VarConstruction2",
    /* PEM_ALU_2_LEVEL_1_4_OPCODES */ "Level 1-4 opcodes.",
    /* PEM_ALU_2_OPERATION       */ "Alu2Operation",
    /* PEM_ALU_2_OUT_DBUS_CHUNK_SELECT */ "Selects 16b chunk in the output Dbus.",
    /* PEM_ALU_2_VAR_CONSTRUCTION_0 */ "Alu2VarConstruction0",
    /* PEM_ALU_2_VAR_CONSTRUCTION_1 */ "Alu2VarConstruction1",
    /* PEM_ALU_2_VAR_CONSTRUCTION_2 */ "Alu2VarConstruction2",
    /* PEM_ALU_3_LEVEL_1_4_OPCODES */ "Level 1-4 opcodes.",
    /* PEM_ALU_3_OPERATION       */ "Alu3Operation",
    /* PEM_ALU_3_OUT_DBUS_CHUNK_SELECT */ "Selects 16b chunk in the output Dbus.",
    /* PEM_ALU_3_VAR_CONSTRUCTION_0 */ "Alu3VarConstruction0",
    /* PEM_ALU_3_VAR_CONSTRUCTION_1 */ "Alu3VarConstruction1",
    /* PEM_ALU_3_VAR_CONSTRUCTION_2 */ "Alu3VarConstruction2",
    /* PEM_ALU_4_OPERATION       */ "Alu4Operation",
    /* PEM_ALU_4_VAR_CONSTRUCTION_0 */ "Alu4VarConstruction0",
    /* PEM_ALU_4_VAR_CONSTRUCTION_1 */ "Alu4VarConstruction1",
    /* PEM_ALU_5_OPERATION       */ "Alu5Operation",
    /* PEM_ALU_5_VAR_CONSTRUCTION_0 */ "Alu5VarConstruction0",
    /* PEM_ALU_5_VAR_CONSTRUCTION_1 */ "Alu5VarConstruction1",
    /* PEM_ALU_6_OPERATION       */ "Alu6Operation",
    /* PEM_ALU_6_VAR_CONSTRUCTION_0 */ "Alu6VarConstruction0",
    /* PEM_ALU_6_VAR_CONSTRUCTION_1 */ "Alu6VarConstruction1",
    /* PEM_ALU_7_OPERATION       */ "Alu7Operation",
    /* PEM_ALU_7_VAR_CONSTRUCTION_0 */ "Alu7VarConstruction0",
    /* PEM_ALU_7_VAR_CONSTRUCTION_1 */ "Alu7VarConstruction1",
    /* PEM_ALU_8_OPERATION       */ "Alu8Operation",
    /* PEM_ALU_8_VAR_CONSTRUCTION_0 */ "Alu8VarConstruction0",
    /* PEM_ALU_8_VAR_CONSTRUCTION_1 */ "Alu8VarConstruction1",
    /* PEM_ALU_9_OPERATION       */ "Alu9Operation",
    /* PEM_ALU_9_VAR_CONSTRUCTION_0 */ "Alu9VarConstruction0",
    /* PEM_ALU_9_VAR_CONSTRUCTION_1 */ "Alu9VarConstruction1",
    /* PEM_CAM_0_PROGRAM         */ "Cam0Program",
    /* PEM_CAM_0_SRAM_0          */ "tcam associated data",
    /* PEM_CAM_0_SRAM_1          */ "tcam associated data",
    /* PEM_CAM_0_STD_TCAM_0      */ "TCAM. We have 2 instances of this CAM each one for quarter of the PE-CAM key",
    /* PEM_CAM_0_STD_TCAM_1      */ "TCAM. We have 4 instances of this CAM each one for quarter of the PE-CAM key",
    /* PEM_CAM_0_TCAM_MASTER     */ "",
    /* PEM_CAM_1_PROGRAM         */ "Cam1Program",
    /* PEM_CAM_1_SRAM_0          */ "tcam associated data",
    /* PEM_CAM_1_SRAM_1          */ "tcam associated data",
    /* PEM_CAM_1_STD_TCAM_0      */ "TCAM. We have 2 instances of this CAM each one for quarter of the PE-CAM key",
    /* PEM_CAM_1_STD_TCAM_1      */ "TCAM. We have 4 instances of this CAM each one for quarter of the PE-CAM key",
    /* PEM_CAM_1_TCAM_MASTER     */ "",
    /* PEM_CAM_2_PROGRAM         */ "Cam2Program",
    /* PEM_CAM_2_SRAM_0          */ "tcam associated data",
    /* PEM_CAM_2_SRAM_1          */ "tcam associated data",
    /* PEM_CAM_2_STD_TCAM_0      */ "TCAM. We have 2 instances of this CAM each one for quarter of the PE-CAM key",
    /* PEM_CAM_2_STD_TCAM_1      */ "TCAM. We have 4 instances of this CAM each one for quarter of the PE-CAM key",
    /* PEM_CAM_2_TCAM_MASTER     */ "",
    /* PEM_CAM_3_PROGRAM         */ "Cam3Program",
    /* PEM_CAM_3_SRAM_0          */ "tcam associated data",
    /* PEM_CAM_3_SRAM_1          */ "tcam associated data",
    /* PEM_CAM_3_STD_TCAM_0      */ "TCAM. We have 2 instances of this CAM each one for quarter of the PE-CAM key",
    /* PEM_CAM_3_STD_TCAM_1      */ "TCAM. We have 4 instances of this CAM each one for quarter of the PE-CAM key",
    /* PEM_CAM_3_TCAM_MASTER     */ "",
    /* PEM_CAM_4_PROGRAM         */ "Cam4Program",
    /* PEM_CAM_4_SRAM_0          */ "tcam associated data",
    /* PEM_CAM_4_SRAM_1          */ "tcam associated data",
    /* PEM_CAM_4_STD_TCAM_0      */ "TCAM. We have 2 instances of this CAM each one for quarter of the PE-CAM key",
    /* PEM_CAM_4_STD_TCAM_1      */ "TCAM. We have 4 instances of this CAM each one for quarter of the PE-CAM key",
    /* PEM_CAM_4_TCAM_MASTER     */ "",
    /* PEM_CAM_5_PROGRAM         */ "Cam5Program",
    /* PEM_CAM_5_SRAM_0          */ "tcam associated data",
    /* PEM_CAM_5_SRAM_1          */ "tcam associated data",
    /* PEM_CAM_5_STD_TCAM_0      */ "TCAM. We have 2 instances of this CAM each one for quarter of the PE-CAM key",
    /* PEM_CAM_5_STD_TCAM_1      */ "TCAM. We have 4 instances of this CAM each one for quarter of the PE-CAM key",
    /* PEM_CAM_5_TCAM_MASTER     */ "",
    /* PEM_CAM_6_PROGRAM         */ "Cam6Program",
    /* PEM_CAM_6_SRAM_0          */ "tcam associated data",
    /* PEM_CAM_6_SRAM_1          */ "tcam associated data",
    /* PEM_CAM_6_STD_TCAM_0      */ "TCAM. We have 2 instances of this CAM each one for quarter of the PE-CAM key",
    /* PEM_CAM_6_STD_TCAM_1      */ "TCAM. We have 4 instances of this CAM each one for quarter of the PE-CAM key",
    /* PEM_CAM_6_TCAM_MASTER     */ "",
    /* PEM_CAM_7_PROGRAM         */ "Cam7Program",
    /* PEM_CAM_7_SRAM_0          */ "tcam associated data",
    /* PEM_CAM_7_SRAM_1          */ "tcam associated data",
    /* PEM_CAM_7_STD_TCAM_0      */ "TCAM. We have 2 instances of this CAM each one for quarter of the PE-CAM key",
    /* PEM_CAM_7_STD_TCAM_1      */ "TCAM. We have 4 instances of this CAM each one for quarter of the PE-CAM key",
    /* PEM_CAM_7_TCAM_MASTER     */ "",
    /* PEM_CAM_8_PROGRAM         */ "Cam8Program",
    /* PEM_CAM_8_SRAM_0          */ "tcam associated data",
    /* PEM_CAM_8_SRAM_1          */ "tcam associated data",
    /* PEM_CAM_8_STD_TCAM_0      */ "TCAM. We have 2 instances of this CAM each one for quarter of the PE-CAM key",
    /* PEM_CAM_8_STD_TCAM_1      */ "TCAM. We have 4 instances of this CAM each one for quarter of the PE-CAM key",
    /* PEM_CAM_8_TCAM_MASTER     */ "",
    /* PEM_CAM_9_PROGRAM         */ "Cam9Program",
    /* PEM_CAM_9_SRAM_0          */ "tcam associated data",
    /* PEM_CAM_9_SRAM_1          */ "tcam associated data",
    /* PEM_CAM_9_STD_TCAM_0      */ "TCAM. We have 2 instances of this CAM each one for quarter of the PE-CAM key",
    /* PEM_CAM_9_STD_TCAM_1      */ "TCAM. We have 4 instances of this CAM each one for quarter of the PE-CAM key",
    /* PEM_CAM_9_TCAM_MASTER     */ "",
    /* PEM_MAP_0_OUT_DBUS_CHUNK_SELECT */ "Selects 16b chunk in the output Dbus.",
    /* PEM_MAP_0_PHYSICAL_ADDRESS_CONSTRUCTION */ "32 FFC instructions. Each instruction is composed from:\n Dbus-offset(9b), field-width(4b), key-offset(4b)",
    /* PEM_MAP_0_PHYSICAL_ADDR_CONSTRUCTION */ "32 FFC instructions. Each instruction is composed from:\n Dbus-offset(9b), field-width(4b), key-offset(4b)",
    /* PEM_MAP_0_SRAM_0          */ "Map sram memory",
    /* PEM_MAP_0_SRAM_1          */ "Map sram memory",
    /* PEM_MAP_0_SRAM_2          */ "Map sram memory",
    /* PEM_MAP_0_SRAM_3          */ "Map sram memory",
    /* PEM_MAP_0_VIRTUAL_ADDRESS_CONSTRUCTION */ "FFC instructions and enable",
    /* PEM_MAP_0_VIRTUAL_ADDR_CONSTRUCTION */ "FFC instructions and enable",
    /* PEM_MAP_1_OUT_DBUS_CHUNK_SELECT */ "Selects 16b chunk in the output Dbus.",
    /* PEM_MAP_1_PHYSICAL_ADDRESS_CONSTRUCTION */ "32 FFC instructions. Each instruction is composed from:\n Dbus-offset(9b), field-width(4b), key-offset(4b)",
    /* PEM_MAP_1_PHYSICAL_ADDR_CONSTRUCTION */ "32 FFC instructions. Each instruction is composed from:\n Dbus-offset(9b), field-width(4b), key-offset(4b)",
    /* PEM_MAP_1_SRAM_0          */ "Map sram memory",
    /* PEM_MAP_1_SRAM_1          */ "Map sram memory",
    /* PEM_MAP_1_SRAM_2          */ "Map sram memory",
    /* PEM_MAP_1_SRAM_3          */ "Map sram memory",
    /* PEM_MAP_1_VIRTUAL_ADDRESS_CONSTRUCTION */ "FFC instructions and enable",
    /* PEM_MAP_1_VIRTUAL_ADDR_CONSTRUCTION */ "FFC instructions and enable",
    /* PEM_MAP_2_OUT_DBUS_CHUNK_SELECT */ "Selects 16b chunk in the output Dbus.",
    /* PEM_MAP_2_PHYSICAL_ADDRESS_CONSTRUCTION */ "32 FFC instructions. Each instruction is composed from:\n Dbus-offset(9b), field-width(4b), key-offset(4b)",
    /* PEM_MAP_2_PHYSICAL_ADDR_CONSTRUCTION */ "32 FFC instructions. Each instruction is composed from:\n Dbus-offset(9b), field-width(4b), key-offset(4b)",
    /* PEM_MAP_2_SRAM_0          */ "Map sram memory",
    /* PEM_MAP_2_SRAM_1          */ "Map sram memory",
    /* PEM_MAP_2_SRAM_2          */ "Map sram memory",
    /* PEM_MAP_2_SRAM_3          */ "Map sram memory",
    /* PEM_MAP_2_VIRTUAL_ADDRESS_CONSTRUCTION */ "FFC instructions and enable",
    /* PEM_MAP_2_VIRTUAL_ADDR_CONSTRUCTION */ "FFC instructions and enable",
    /* PEM_MAP_3_OUT_DBUS_CHUNK_SELECT */ "Selects 16b chunk in the output Dbus.",
    /* PEM_MAP_3_PHYSICAL_ADDRESS_CONSTRUCTION */ "32 FFC instructions. Each instruction is composed from:\n Dbus-offset(9b), field-width(4b), key-offset(4b)",
    /* PEM_MAP_3_PHYSICAL_ADDR_CONSTRUCTION */ "32 FFC instructions. Each instruction is composed from:\n Dbus-offset(9b), field-width(4b), key-offset(4b)",
    /* PEM_MAP_3_SRAM_0          */ "Map sram memory",
    /* PEM_MAP_3_SRAM_1          */ "Map sram memory",
    /* PEM_MAP_3_SRAM_2          */ "Map sram memory",
    /* PEM_MAP_3_SRAM_3          */ "Map sram memory",
    /* PEM_MAP_3_VIRTUAL_ADDRESS_CONSTRUCTION */ "FFC instructions and enable",
    /* PEM_MAP_3_VIRTUAL_ADDR_CONSTRUCTION */ "FFC instructions and enable",
    /* PEM_MAP_4_PHYSICAL_ADDR_CONSTRUCTION */ "32 FFC instructions. Each instruction is composed from:\n Dbus-offset(9b), field-width(4b), key-offset(4b)",
    /* PEM_MAP_4_SRAM_0          */ "Map sram memory",
    /* PEM_MAP_4_SRAM_1          */ "Map sram memory",
    /* PEM_MAP_4_SRAM_2          */ "Map sram memory",
    /* PEM_MAP_4_SRAM_3          */ "Map sram memory",
    /* PEM_MAP_4_VIRTUAL_ADDR_CONSTRUCTION */ "FFC instructions and enable",
    /* PEM_MAP_5_PHYSICAL_ADDR_CONSTRUCTION */ "32 FFC instructions. Each instruction is composed from:\n Dbus-offset(9b), field-width(4b), key-offset(4b)",
    /* PEM_MAP_5_SRAM_0          */ "Map sram memory",
    /* PEM_MAP_5_SRAM_1          */ "Map sram memory",
    /* PEM_MAP_5_SRAM_2          */ "Map sram memory",
    /* PEM_MAP_5_SRAM_3          */ "Map sram memory",
    /* PEM_MAP_5_VIRTUAL_ADDR_CONSTRUCTION */ "FFC instructions and enable",
    /* PEM_MAP_6_PHYSICAL_ADDR_CONSTRUCTION */ "32 FFC instructions. Each instruction is composed from:\n Dbus-offset(9b), field-width(4b), key-offset(4b)",
    /* PEM_MAP_6_SRAM_0          */ "Map sram memory",
    /* PEM_MAP_6_SRAM_1          */ "Map sram memory",
    /* PEM_MAP_6_SRAM_2          */ "Map sram memory",
    /* PEM_MAP_6_SRAM_3          */ "Map sram memory",
    /* PEM_MAP_6_VIRTUAL_ADDR_CONSTRUCTION */ "FFC instructions and enable",
    /* PEM_MAP_7_PHYSICAL_ADDR_CONSTRUCTION */ "32 FFC instructions. Each instruction is composed from:\n Dbus-offset(9b), field-width(4b), key-offset(4b)",
    /* PEM_MAP_7_SRAM_0          */ "Map sram memory",
    /* PEM_MAP_7_SRAM_1          */ "Map sram memory",
    /* PEM_MAP_7_SRAM_2          */ "Map sram memory",
    /* PEM_MAP_7_SRAM_3          */ "Map sram memory",
    /* PEM_MAP_7_VIRTUAL_ADDR_CONSTRUCTION */ "FFC instructions and enable",
    /* PEM_MAP_8_PHYSICAL_ADDR_CONSTRUCTION */ "32 FFC instructions. Each instruction is composed from:\n Dbus-offset(9b), field-width(4b), key-offset(4b)",
    /* PEM_MAP_8_SRAM_0          */ "Map sram memory",
    /* PEM_MAP_8_SRAM_1          */ "Map sram memory",
    /* PEM_MAP_8_SRAM_2          */ "Map sram memory",
    /* PEM_MAP_8_SRAM_3          */ "Map sram memory",
    /* PEM_MAP_8_VIRTUAL_ADDR_CONSTRUCTION */ "FFC instructions and enable",
    /* PEM_MAP_9_PHYSICAL_ADDR_CONSTRUCTION */ "32 FFC instructions. Each instruction is composed from:\n Dbus-offset(9b), field-width(4b), key-offset(4b)",
    /* PEM_MAP_9_SRAM_0          */ "Map sram memory",
    /* PEM_MAP_9_SRAM_1          */ "Map sram memory",
    /* PEM_MAP_9_SRAM_2          */ "Map sram memory",
    /* PEM_MAP_9_SRAM_3          */ "Map sram memory",
    /* PEM_MAP_9_VIRTUAL_ADDR_CONSTRUCTION */ "FFC instructions and enable",
    /* PEM_PRIO_0_INITIAL_VALUES */ "Priority select configuration includes the dbus enablers  and per select module and the initial values",
    /* PEM_PRIO_0_OPERATION      */ "Priority operation configuration",
    /* PEM_PRIO_0_PROGRAM        */ "Priority key construction. This memory contains the GFC instructions",
    /* PEM_PRIO_1_INITIAL_VALUES */ "Priority select configuration includes the dbus enablers  and per select module and the initial values",
    /* PEM_PRIO_1_OPERATION      */ "Priority operation configuration",
    /* PEM_PRIO_1_PROGRAM        */ "Priority key construction. This memory contains the GFC instructions",
    /* PEM_PRIO_2_INITIAL_VALUES */ "Priority select configuration includes the dbus enablers  and per select module and the initial values",
    /* PEM_PRIO_2_OPERATION      */ "Priority operation configuration",
    /* PEM_PRIO_2_PROGRAM        */ "Priority key construction. This memory contains the GFC instructions",
    /* PEM_PRIO_3_INITIAL_VALUES */ "Priority select configuration includes the dbus enablers  and per select module and the initial values",
    /* PEM_PRIO_3_OPERATION      */ "Priority operation configuration",
    /* PEM_PRIO_3_PROGRAM        */ "Priority key construction. This memory contains the GFC instructions",
    /* PEM_PRIO_4_INITIAL_VALUES */ "Priority select configuration includes the dbus enablers  and per select module and the initial values",
    /* PEM_PRIO_4_OPERATION      */ "Priority operation configuration",
    /* PEM_PRIO_4_PROGRAM        */ "Priority key construction. This memory contains the GFC instructions",
    /* PEM_PRIO_5_INITIAL_VALUES */ "Priority select configuration includes the dbus enablers  and per select module and the initial values",
    /* PEM_PRIO_5_OPERATION      */ "Priority operation configuration",
    /* PEM_PRIO_5_PROGRAM        */ "Priority key construction. This memory contains the GFC instructions",
    /* PEM_PRIO_6_INITIAL_VALUES */ "Priority select configuration includes the dbus enablers  and per select module and the initial values",
    /* PEM_PRIO_6_OPERATION      */ "Priority operation configuration",
    /* PEM_PRIO_6_PROGRAM        */ "Priority key construction. This memory contains the GFC instructions",
    /* PEM_PRIO_7_INITIAL_VALUES */ "Priority select configuration includes the dbus enablers  and per select module and the initial values",
    /* PEM_PRIO_7_OPERATION      */ "Priority operation configuration",
    /* PEM_PRIO_7_PROGRAM        */ "Priority key construction. This memory contains the GFC instructions",
    /* PEM_PRIO_8_INITIAL_VALUES */ "Priority select configuration includes the dbus enablers  and per select module and the initial values",
    /* PEM_PRIO_8_OPERATION      */ "Priority operation configuration",
    /* PEM_PRIO_8_PROGRAM        */ "Priority key construction. This memory contains the GFC instructions",
    /* PEM_PRIO_9_INITIAL_VALUES */ "Priority select configuration includes the dbus enablers  and per select module and the initial values",
    /* PEM_PRIO_9_OPERATION      */ "Priority operation configuration",
    /* PEM_PRIO_9_PROGRAM        */ "Priority key construction. This memory contains the GFC instructions",
    /* PFC_ENQ_SRC_PORT_LKUP     */ "SIRIUS C0 : This database contains the PFC Source Port Lookup table. A similar database, TX_PFC_SRC_PORT_LKUP, exists in the TX block. The two databases must have identical entry values.",
    /* PFC_SP_PG_LINE_CNT        */ "SIRIUS C0 : This database contains the PFC SRC/PG Line Counts. Access is only permited for debug, with no traffic in system. The 128 entries database is indexed by {src_port[3:0], priority_group[2:0]}",
    /* PFS_PACKET_TYPE_OFFSET    */ "Provide index offset to FP_PORT_FIELD_SEL table based on L3 types of the packet",
    /* PHB2_COS_MAP              */ "index by PHB2_DOT1P_MAPPING_PTR(4-bit), 802.1 priority(3-bit), CFI/DE",
    /* PHYSICAL_PORT_BASE_QUEUE  */ "",
    /* PKT_SCH_CALENDAR0         */ "Packet Shaping block packet scheduler Calendar 0 (Each pipe has two half-pipe packet schedulers, this is for the half-pipe 0),",
    /* PKT_SCH_CALENDAR1         */ "Packet Shaping block packet scheduler Calendar 1 (Each pipe has two half-pipe packet schedulers, this is for the half-pipe 1),",
    /* PKT_SCH_CALENDAR0_PIPE0   */ "Packet Shaping block packet scheduler Calendar 0 (Each pipe has two half-pipe packet schedulers, this is for the half-pipe 0),",
    /* PKT_SCH_CALENDAR0_PIPE1   */ "Packet Shaping block packet scheduler Calendar 0 (Each pipe has two half-pipe packet schedulers, this is for the half-pipe 0),",
    /* PKT_SCH_CALENDAR0_PIPE2   */ "Packet Shaping block packet scheduler Calendar 0 (Each pipe has two half-pipe packet schedulers, this is for the half-pipe 0),",
    /* PKT_SCH_CALENDAR0_PIPE3   */ "Packet Shaping block packet scheduler Calendar 0 (Each pipe has two half-pipe packet schedulers, this is for the half-pipe 0),",
    /* PKT_SCH_CALENDAR1_PIPE0   */ "Packet Shaping block packet scheduler Calendar 1 (Each pipe has two half-pipe packet schedulers, this is for the half-pipe 1),",
    /* PKT_SCH_CALENDAR1_PIPE1   */ "Packet Shaping block packet scheduler Calendar 1 (Each pipe has two half-pipe packet schedulers, this is for the half-pipe 1),",
    /* PKT_SCH_CALENDAR1_PIPE2   */ "Packet Shaping block packet scheduler Calendar 1 (Each pipe has two half-pipe packet schedulers, this is for the half-pipe 1),",
    /* PKT_SCH_CALENDAR1_PIPE3   */ "Packet Shaping block packet scheduler Calendar 1 (Each pipe has two half-pipe packet schedulers, this is for the half-pipe 1),",
    /* PMEM0                     */ "SBLK0 Pattern Memory",
    /* PMEM1                     */ "SBLK1 Pattern Memory",
    /* PMEM2                     */ "SBLK2 Pattern Memory",
    /* PMEM3                     */ "SBLK3 Pattern Memory",
    /* PMEM4                     */ "SBLK4 Pattern Memory",
    /* PMEM5                     */ "SBLK5 Pattern Memory",
    /* PMEM6                     */ "SBLK6 Pattern Memory",
    /* PMEM7                     */ "SBLK7 Pattern Memory",
    /* PMEM8                     */ "SBLK8 Pattern Memory",
    /* PMEM9                     */ "SBLK9 Pattern Memory",
    /* PMEM10                    */ "SBLK10 Pattern Memory",
    /* PMEM11                    */ "SBLK11 Pattern Memory",
    /* PMEM12                    */ "SBLK12 Pattern Memory",
    /* PMEM13                    */ "SBLK13 Pattern Memory",
    /* PMEM14                    */ "SBLK14 Pattern Memory",
    /* PMEM15                    */ "SBLK15 Pattern Memory",
    /* PMEM16                    */ "SBLK16 Pattern Memory",
    /* PMEM17                    */ "SBLK17 Pattern Memory",
    /* PMEM18                    */ "SBLK18 Pattern Memory",
    /* PMEM19                    */ "SBLK19 Pattern Memory",
    /* PMEM20                    */ "SBLK20 Pattern Memory",
    /* PMEM21                    */ "SBLK21 Pattern Memory",
    /* PMEM22                    */ "SBLK22 Pattern Memory",
    /* PMEM23                    */ "SBLK23 Pattern Memory",
    /* PORT_BRIDGE_BMAP          */ "Bitmap of ports with port_bridge enabled.",
    /* PORT_BRIDGE_MIRROR_BMAP   */ "Bitmap of ports with port_bridge enabled for mirror packets.",
    /* PORT_CBL_TABLE            */ "Port Class Based Learning Attribute Table for class based station movement. Direct index table, address = {mod[6:0], port[5:0]} or address = virtual_port_num",
    /* PORT_CBL_TABLE_MODBASE    */ "Specifies the port(s) that is (are) CPU.",
    /* PORT_COS_MAP              */ "index by COS_MAP_SEL.SELECT(2-bit), ingress port internal priority(4-bit)",
    /* PORT_EHG_RX_TUNNEL_DATA   */ "Embedded Higig Rx tunnel data memory",
    /* PORT_EHG_RX_TUNNEL_MASK   */ "Embedded Higig Rx tunnel mask memory",
    /* PORT_EHG_TX_TUNNEL_DATA   */ "Embedded Higig Tx tunnel data memory",
    /* PORT_LAG_FAILOVER_SET     */ "Port LAG Failover Set Table",
    /* PORT_OR_TRUNK_MAC_ACTION  */ "Contains actions for Mac Limit Feature. Indexed with the indicies from MAC_LIMIT_TRUNK_MAP_TABLE or MAC_LIMIT_PORT_MAP_TABLE",
    /* PORT_OR_TRUNK_MAC_COUNT   */ "Port or trunk MAC limit counters",
    /* PORT_OR_TRUNK_MAC_LIMIT   */ "Port or trunk MAC limit counters",
    /* PORT_TAB                  */ "Port Table",
    /* PORT_WC_UCMEM_DATA        */ "Warpcore External Memory Interface to program micro-controller memory",
    /* PPDB_A_FEC_ENTRY_FORMAT_A */ "FEC entry tables Format A entry values, for the table described in FEC Entry register.\n                   This is a description of the fields used for unicast routing (IP or MPLS) into a link layer interface. In this scenario:\n                    Out-LIF = 3'h0, OutLif\n                    EEI = ARP-Ptr-Prefix, ArpPtr\n                    Expected-In-RIF = OutLif14:0",
    /* PPDB_A_FEC_ENTRY_FORMAT_B */ "FEC entry tables Format B entry values, for the table described in FEC Entry register.\n                   Format B is used when the link layer interface is a composite object (in a composite object the Out-LIF points to an entry in the EEDB of type Out-RIF; which points in turn to a link layer entry) or when routing into a tunnel. This is a description of the fields used for Format B. In this scenario:\n                    Out-Lif = OutLif\n                    EEI = NULL\n                    Expect ...",
    /* PPDB_A_FEC_ENTRY_FORMAT_C */ "FEC entry tables Format C entry values, for the table described in FEC Entry register.\n                   This is a description of the fields used for bridging into a TRILL tunnel. In this scenario:\n                    Out-Lif = NULL\n                    EEI = Eei\n                    Expected-In-RIF = NULL",
    /* PPDB_A_FEC_ENTRY_FORMAT_NULL */ "FEC entry tables NULL entry values, for the table described in FEC Entry register.\n                   This is a description of the fields  of a NULL entry. In this scenario:\n                    Out-LIF = NULL\n                    EEI = NULL\n                    Expected-In-RIF = NULL",
    /* PPDB_A_FEC_ENTRY_GENERAL  */ "FEC entry tables general entry values, for the table described in FEC Entry register.\n                   This is a description of the general fields that are commong to all FEC entry formats.",
    /* PPDB_A_FEC_SUPER_ENTRY_BANK */ "The FEC entry table is accessed with a FEC pointer. The table has 16K entries, and it is divided to two identical tables, for FEC Entry0 and Entry1. The entry format is dependent on the application. The following registers (from FEC Entry General to FEC Entry Format C) describe the table format per application.",
    /* PPDB_A_ISEM_ACDT_AUX      */ "INTERNAL",
    /* PPDB_A_ISEM_ACDT_H        */ "INTERNAL",
    /* PPDB_A_ISEM_KEYT_AUX      */ "INTERNAL",
    /* PPDB_A_ISEM_KEYT_PLDT_H   */ "INTERNAL",
    /* PPDB_A_ISEM_MAA_CAM       */ "INTERNAL",
    /* PPDB_A_ISEM_MAA_CAM_PAYLOAD */ "INTERNAL",
    /* PPDB_A_ISEM_MANAGEMENT_MEMORY_H */ "INTERNAL",
    /* PPDB_A_ISEM_MANAGEMENT_REQUEST */ "Management requests",
    /* PPDB_A_ISEM_PLDT_AUX      */ "INTERNAL",
    /* PPDB_A_ISEM_STEP_TABLE    */ "Step Table\n (The Item bit ordering matches must emc_include.v)",
    /* PPDB_A_OEMA_ACDT_AUX      */ "INTERNAL",
    /* PPDB_A_OEMA_ACDT_MASTER_H */ "INTERNAL",
    /* PPDB_A_OEMA_ACDT_SLAVE_H  */ "INTERNAL",
    /* PPDB_A_OEMA_KEYT_AUX      */ "INTERNAL",
    /* PPDB_A_OEMA_KEYT_PLDT_H   */ "INTERNAL",
    /* PPDB_A_OEMA_MAA_CAM       */ "INTERNAL",
    /* PPDB_A_OEMA_MAA_CAM_PAYLOAD */ "INTERNAL",
    /* PPDB_A_OEMA_MANAGEMENT_MEMORY_H */ "INTERNAL",
    /* PPDB_A_OEMA_MANAGEMENT_REQUEST */ "Management requests",
    /* PPDB_A_OEMA_PLDT_AUX      */ "INTERNAL",
    /* PPDB_A_OEMA_STEP_TABLE    */ "Step Table\n                   (The Item bit ordering matches must emc_include.v)",
    /* PPDB_A_OEMB_ACDT_AUX      */ "INTERNAL",
    /* PPDB_A_OEMB_ACDT_MASTER_H */ "INTERNAL",
    /* PPDB_A_OEMB_ACDT_SLAVE_H  */ "INTERNAL",
    /* PPDB_A_OEMB_KEYT_AUX      */ "INTERNAL",
    /* PPDB_A_OEMB_KEYT_PLDT_H   */ "INTERNAL",
    /* PPDB_A_OEMB_MAA_CAM       */ "INTERNAL",
    /* PPDB_A_OEMB_MAA_CAM_PAYLOAD */ "INTERNAL",
    /* PPDB_A_OEMB_MANAGEMENT_MEMORY_H */ "INTERNAL",
    /* PPDB_A_OEMB_MANAGEMENT_REQUEST */ "Management requests",
    /* PPDB_A_OEMB_PLDT_AUX      */ "INTERNAL",
    /* PPDB_A_OEMB_STEP_TABLE    */ "Step Table\n                   (The Item bit ordering matches must emc_include.v)",
    /* PPDB_A_TCAM_ACCESS_PROFILE */ "This table maps TCAM query DB-profile to an access profile. The table has 48 entries, with the index being DB-profile. Each entry defines the access profile, including the memory to access, key size, access type (direct / lookup) and action on the prefix bits.",
    /* PPDB_A_TCAM_ACTION        */ "This table provides access to the TCAM Action banks. Each TCAM bank is associated with two 20-bit TCAM action memories, provided in this table. Each action table has 1K entries, and there are 24 such tables.\n                   The TCAM action table is valid for PP units ERPP, PMF, FLP and VTT.",
    /* PPDB_A_TCAM_ACTION_HIT_INDICATION */ "This table provides a hit indication for each entry in each TCAM Action bank. Each TCAM bank is associated with two 20-bit TCAM action memories, for which the hit indication is provided. Each action table has 1K entries, divided to 128 register lines of 8-bit, and there are 12x2 such tables.",
    /* PPDB_A_TCAM_ACTION_HIT_INDICATION_SMALL_16 */ "This table provides a hit indication for each entry in each small TCAM Action bank. Each small TCAM bank is associated with two 20-bit TCAM action memories, for which the hit indication is provided. Each action table has 128K entries, divided to 16 register lines of 8-bit, and there are 4 such tables.\n This table belongs to TcamAction24",
    /* PPDB_A_TCAM_ACTION_HIT_INDICATION_SMALL_17 */ "This table provides a hit indication for each entry in each small TCAM Action bank. Each small TCAM bank is associated with two 20-bit TCAM action memories, for which the hit indication is provided. Each action table has 128K entries, divided to 16 register lines of 8-bit, and there are 4 such tables.\n This table belongs to TcamAction24",
    /* PPDB_A_TCAM_ACTION_HIT_INDICATION_SMALL_18 */ "This table provides a hit indication for each entry in each small TCAM Action bank. Each small TCAM bank is associated with two 20-bit TCAM action memories, for which the hit indication is provided. Each action table has 128K entries, divided to 16 register lines of 8-bit, and there are 4 such tables.\n This table belongs to TcamAction24",
    /* PPDB_A_TCAM_ACTION_HIT_INDICATION_SMALL_19 */ "This table provides a hit indication for each entry in each small TCAM Action bank. Each small TCAM bank is associated with two 20-bit TCAM action memories, for which the hit indication is provided. Each action table has 128K entries, divided to 16 register lines of 8-bit, and there are 4 such tables.\n This table belongs to TcamAction24",
    /* PPDB_A_TCAM_ACTION_HIT_INDICATION_SMALL_20 */ "This table provides a hit indication for each entry in each small TCAM Action bank. Each small TCAM bank is associated with two 20-bit TCAM action memories, for which the hit indication is provided. Each action table has 128K entries, divided to 16 register lines of 8-bit, and there are 4 such tables.\n This table belongs to TcamAction24",
    /* PPDB_A_TCAM_ACTION_HIT_INDICATION_SMALL_21 */ "This table provides a hit indication for each entry in each small TCAM Action bank. Each small TCAM bank is associated with two 20-bit TCAM action memories, for which the hit indication is provided. Each action table has 128K entries, divided to 16 register lines of 8-bit, and there are 4 such tables.\n This table belongs to TcamAction24",
    /* PPDB_A_TCAM_ACTION_HIT_INDICATION_SMALL_22 */ "This table provides a hit indication for each entry in each small TCAM Action bank. Each small TCAM bank is associated with two 20-bit TCAM action memories, for which the hit indication is provided. Each action table has 128K entries, divided to 16 register lines of 8-bit, and there are 4 such tables.\n This table belongs to TcamAction24",
    /* PPDB_A_TCAM_ACTION_HIT_INDICATION_SMALL_23 */ "This table provides a hit indication for each entry in each small TCAM Action bank. Each small TCAM bank is associated with two 20-bit TCAM action memories, for which the hit indication is provided. Each action table has 128K entries, divided to 16 register lines of 8-bit, and there are 4 such tables.\n This table belongs to TcamAction24",
    /* PPDB_A_TCAM_ACTION_HIT_INDICATION_SMALL_24 */ "This table provides a hit indication for each entry in each small TCAM Action bank. Each small TCAM bank is associated with two 20-bit TCAM action memories, for which the hit indication is provided. Each action table has 128K entries, divided to 16 register lines of 8-bit, and there are 4 such tables.\n                   This table belongs to TcamAction24",
    /* PPDB_A_TCAM_ACTION_HIT_INDICATION_SMALL_25 */ "This table provides a hit indication for each entry in each small TCAM Action bank. Each small TCAM bank is associated with two 20-bit TCAM action memories, for which the hit indication is provided. Each action table has 128K entries, divided to 16 register lines of 8-bit, and there are 4 such tables.\n                   This table belongs to TcamAction24",
    /* PPDB_A_TCAM_ACTION_HIT_INDICATION_SMALL_26 */ "This table provides a hit indication for each entry in each small TCAM Action bank. Each small TCAM bank is associated with two 20-bit TCAM action memories, for which the hit indication is provided. Each action table has 128K entries, divided to 16 register lines of 8-bit, and there are 4 such tables.\n                   This table belongs to TcamAction24",
    /* PPDB_A_TCAM_ACTION_HIT_INDICATION_SMALL_27 */ "This table provides a hit indication for each entry in each small TCAM Action bank. Each small TCAM bank is associated with two 20-bit TCAM action memories, for which the hit indication is provided. Each action table has 128K entries, divided to 16 register lines of 8-bit, and there are 4 such tables.\n                   This table belongs to TcamAction24",
    /* PPDB_A_TCAM_ACTION_HIT_INDICATION_SMALL_28 */ "This table provides a hit indication for each entry in each small TCAM Action bank. Each small TCAM bank is associated with two 20-bit TCAM action memories, for which the hit indication is provided. Each action table has 128K entries, divided to 16 register lines of 8-bit, and there are 4 such tables.\n                   This table belongs to TcamAction24",
    /* PPDB_A_TCAM_ACTION_HIT_INDICATION_SMALL_29 */ "This table provides a hit indication for each entry in each small TCAM Action bank. Each small TCAM bank is associated with two 20-bit TCAM action memories, for which the hit indication is provided. Each action table has 128K entries, divided to 16 register lines of 8-bit, and there are 4 such tables.\n                   This table belongs to TcamAction24",
    /* PPDB_A_TCAM_ACTION_HIT_INDICATION_SMALL_30 */ "This table provides a hit indication for each entry in each small TCAM Action bank. Each small TCAM bank is associated with two 20-bit TCAM action memories, for which the hit indication is provided. Each action table has 128K entries, divided to 16 register lines of 8-bit, and there are 4 such tables.\n                   This table belongs to TcamAction24",
    /* PPDB_A_TCAM_ACTION_HIT_INDICATION_SMALL_31 */ "This table provides a hit indication for each entry in each small TCAM Action bank. Each small TCAM bank is associated with two 20-bit TCAM action memories, for which the hit indication is provided. Each action table has 128K entries, divided to 16 register lines of 8-bit, and there are 4 such tables.\n                   This table belongs to TcamAction24",
    /* PPDB_A_TCAM_ACTION_SMALL_16 */ "This table provides access to the small TCAM Action banks. Each small TCAM bank is associated with two 24-bit small TCAM action memories, provided in this table. Each action table has 128 entries.\n The TCAM action table is valid for PP units ERPP, PMF, FLP and VTT.\n TcamAction24 belongs to TCAM BANK 12",
    /* PPDB_A_TCAM_ACTION_SMALL_17 */ "This table provides access to the small TCAM Action banks. Each small TCAM bank is associated with two 24-bit small TCAM action memories, provided in this table. Each action table has 128 entries.\n The TCAM action table is valid for PP units ERPP, PMF, FLP and VTT.\n TcamAction24 belongs to TCAM BANK 12",
    /* PPDB_A_TCAM_ACTION_SMALL_18 */ "This table provides access to the small TCAM Action banks. Each small TCAM bank is associated with two 24-bit small TCAM action memories, provided in this table. Each action table has 128 entries.\n The TCAM action table is valid for PP units ERPP, PMF, FLP and VTT.\n TcamAction24 belongs to TCAM BANK 12",
    /* PPDB_A_TCAM_ACTION_SMALL_19 */ "This table provides access to the small TCAM Action banks. Each small TCAM bank is associated with two 24-bit small TCAM action memories, provided in this table. Each action table has 128 entries.\n The TCAM action table is valid for PP units ERPP, PMF, FLP and VTT.\n TcamAction24 belongs to TCAM BANK 12",
    /* PPDB_A_TCAM_ACTION_SMALL_20 */ "This table provides access to the small TCAM Action banks. Each small TCAM bank is associated with two 24-bit small TCAM action memories, provided in this table. Each action table has 128 entries.\n The TCAM action table is valid for PP units ERPP, PMF, FLP and VTT.\n TcamAction24 belongs to TCAM BANK 12",
    /* PPDB_A_TCAM_ACTION_SMALL_21 */ "This table provides access to the small TCAM Action banks. Each small TCAM bank is associated with two 24-bit small TCAM action memories, provided in this table. Each action table has 128 entries.\n The TCAM action table is valid for PP units ERPP, PMF, FLP and VTT.\n TcamAction24 belongs to TCAM BANK 12",
    /* PPDB_A_TCAM_ACTION_SMALL_22 */ "This table provides access to the small TCAM Action banks. Each small TCAM bank is associated with two 24-bit small TCAM action memories, provided in this table. Each action table has 128 entries.\n The TCAM action table is valid for PP units ERPP, PMF, FLP and VTT.\n TcamAction24 belongs to TCAM BANK 12",
    /* PPDB_A_TCAM_ACTION_SMALL_23 */ "This table provides access to the small TCAM Action banks. Each small TCAM bank is associated with two 24-bit small TCAM action memories, provided in this table. Each action table has 128 entries.\n The TCAM action table is valid for PP units ERPP, PMF, FLP and VTT.\n TcamAction24 belongs to TCAM BANK 12",
    /* PPDB_A_TCAM_ACTION_SMALL_24 */ "This table provides access to the small TCAM Action banks. Each small TCAM bank is associated with two 24-bit small TCAM action memories, provided in this table. Each action table has 128 entries.\n                   The TCAM action table is valid for PP units ERPP, PMF, FLP and VTT.\n                   TcamAction24 belongs to TCAM BANK 12",
    /* PPDB_A_TCAM_ACTION_SMALL_25 */ "This table provides access to the small TCAM Action banks. Each small TCAM bank is associated with two 24-bit small TCAM action memories, provided in this table. Each action table has 128 entries.\n                   The TCAM action table is valid for PP units ERPP, PMF, FLP and VTT.\n                   TcamAction24 belongs to TCAM BANK 12",
    /* PPDB_A_TCAM_ACTION_SMALL_26 */ "This table provides access to the small TCAM Action banks. Each small TCAM bank is associated with two 24-bit small TCAM action memories, provided in this table. Each action table has 128 entries.\n                   The TCAM action table is valid for PP units ERPP, PMF, FLP and VTT.\n                   TcamAction24 belongs to TCAM BANK 12",
    /* PPDB_A_TCAM_ACTION_SMALL_27 */ "This table provides access to the small TCAM Action banks. Each small TCAM bank is associated with two 24-bit small TCAM action memories, provided in this table. Each action table has 128 entries.\n                   The TCAM action table is valid for PP units ERPP, PMF, FLP and VTT.\n                   TcamAction24 belongs to TCAM BANK 12",
    /* PPDB_A_TCAM_ACTION_SMALL_28 */ "This table provides access to the small TCAM Action banks. Each small TCAM bank is associated with two 24-bit small TCAM action memories, provided in this table. Each action table has 128 entries.\n                   The TCAM action table is valid for PP units ERPP, PMF, FLP and VTT.\n                   TcamAction24 belongs to TCAM BANK 12",
    /* PPDB_A_TCAM_ACTION_SMALL_29 */ "This table provides access to the small TCAM Action banks. Each small TCAM bank is associated with two 24-bit small TCAM action memories, provided in this table. Each action table has 128 entries.\n                   The TCAM action table is valid for PP units ERPP, PMF, FLP and VTT.\n                   TcamAction24 belongs to TCAM BANK 12",
    /* PPDB_A_TCAM_ACTION_SMALL_30 */ "This table provides access to the small TCAM Action banks. Each small TCAM bank is associated with two 24-bit small TCAM action memories, provided in this table. Each action table has 128 entries.\n                   The TCAM action table is valid for PP units ERPP, PMF, FLP and VTT.\n                   TcamAction24 belongs to TCAM BANK 12",
    /* PPDB_A_TCAM_ACTION_SMALL_31 */ "This table provides access to the small TCAM Action banks. Each small TCAM bank is associated with two 24-bit small TCAM action memories, provided in this table. Each action table has 128 entries.\n                   The TCAM action table is valid for PP units ERPP, PMF, FLP and VTT.\n                   TcamAction24 belongs to TCAM BANK 12",
    /* PPDB_A_TCAM_BANK          */ "This table provides access to the TCAM banks through read and write commands.\n                   The table has 12*2K + 2*256 entries, with every entry refering to a TCAM bank.\n                   First 2K entries belongs to TCAM BANK 0 and so on till BANK 11.\n                   The bottom 2*256 entries belongs to TCAM Bank 12 and 13.\n                   Note:  The bank address is 11 bits. If the lsb is clear (even address)  the entry is a key. If the lsb is set (odd address)  the entry is a mask\n  ...",
    /* PPDB_A_TCAM_BANK_COMMAND  */ "TCAM command:\n                   he command can be write/read/compare. In case of write and compare the Din is needed",
    /* PPDB_A_TCAM_BANK_REPLY    */ "TCAM reply. The reply is based on the command entered before",
    /* PPDB_A_TCAM_ENTRY_PARITY  */ "This table holds the parity bits for each 32-bit in the TCAM. The table is built from 12 tables,\n                   each of them with 2K entries. Each table represents Parity bits for one corressponding TCAM.\n                   Note:  If the addresss lsb is clear (even address)  the entry is a key. If the addresss lsb is set (odd address)  the entry is a mask.",
    /* PPDB_A_TCAM_ENTRY_PARITY_SMALL_8 */ "This table holds the parity bits for each 32-bit in the TCAM.\n The table is with 2K entries, each entry contain the parity bits for the matched entry in TCAM-12.\n Note:  If the addresss lsb is clear (even address)  the entry is a key. If the addresss lsb is set (odd address)  the entry is a mask.",
    /* PPDB_A_TCAM_ENTRY_PARITY_SMALL_9 */ "This table holds the parity bits for each 32-bit in the TCAM.\n The table is with 2K entries, each entry contain the parity bits for the matched entry in TCAM-12.\n Note:  If the addresss lsb is clear (even address)  the entry is a key. If the addresss lsb is set (odd address)  the entry is a mask.",
    /* PPDB_A_TCAM_ENTRY_PARITY_SMALL_10 */ "This table holds the parity bits for each 32-bit in the TCAM.\n The table is with 2K entries, each entry contain the parity bits for the matched entry in TCAM-12.\n Note:  If the addresss lsb is clear (even address)  the entry is a key. If the addresss lsb is set (odd address)  the entry is a mask.",
    /* PPDB_A_TCAM_ENTRY_PARITY_SMALL_11 */ "This table holds the parity bits for each 32-bit in the TCAM.\n The table is with 2K entries, each entry contain the parity bits for the matched entry in TCAM-12.\n Note:  If the addresss lsb is clear (even address)  the entry is a key. If the addresss lsb is set (odd address)  the entry is a mask.",
    /* PPDB_A_TCAM_ENTRY_PARITY_SMALL_12 */ "This table holds the parity bits for each 32-bit in the TCAM.\n                   The table is with 2K entries, each entry contain the parity bits for the matched entry in TCAM-12.\n                   Note:  If the addresss lsb is clear (even address)  the entry is a key. If the addresss lsb is set (odd address)  the entry is a mask.",
    /* PPDB_A_TCAM_ENTRY_PARITY_SMALL_13 */ "This table holds the parity bits for each 32-bit in the TCAM.\n                   The table is with 2K entries, each entry contain the parity bits for the matched entry in TCAM-12.\n                   Note:  If the addresss lsb is clear (even address)  the entry is a key. If the addresss lsb is set (odd address)  the entry is a mask.",
    /* PPDB_A_TCAM_ENTRY_PARITY_SMALL_14 */ "This table holds the parity bits for each 32-bit in the TCAM.\n                   The table is with 2K entries, each entry contain the parity bits for the matched entry in TCAM-12.\n                   Note:  If the addresss lsb is clear (even address)  the entry is a key. If the addresss lsb is set (odd address)  the entry is a mask.",
    /* PPDB_A_TCAM_ENTRY_PARITY_SMALL_15 */ "This table holds the parity bits for each 32-bit in the TCAM.\n                   The table is with 2K entries, each entry contain the parity bits for the matched entry in TCAM-12.\n                   Note:  If the addresss lsb is clear (even address)  the entry is a key. If the addresss lsb is set (odd address)  the entry is a mask.",
    /* PPDB_A_TCAM_PD_PROFILE    */ "TCAM Priority Decoder profile.\n                   This table maps TCAM query DB-profile to a priority decoder profile. The table has 48 entries, with the index being DB-profile. Each entry defines the priority decoder profile through a bitmap selecting which TCAM banks action results will participate in the priority decoder.",
    /* PPDB_B_ISEM_ACDT_AUX      */ "INTERNAL",
    /* PPDB_B_ISEM_ACDT_H        */ "INTERNAL",
    /* PPDB_B_ISEM_KEYT_AUX      */ "INTERNAL",
    /* PPDB_B_ISEM_KEYT_PLDT_H   */ "INTERNAL",
    /* PPDB_B_ISEM_MAA_CAM       */ "INTERNAL",
    /* PPDB_B_ISEM_MAA_CAM_PAYLOAD */ "INTERNAL",
    /* PPDB_B_ISEM_MANAGEMENT_MEMORY_H */ "INTERNAL",
    /* PPDB_B_ISEM_MANAGEMENT_REQUEST */ "Management requests",
    /* PPDB_B_ISEM_PLDT_AUX      */ "INTERNAL",
    /* PPDB_B_ISEM_STEP_TABLE    */ "Step Table\n (The Item bit ordering matches must emc_include.v)",
    /* PPDB_B_LARGE_EM_ACDT_AUX  */ "INTERNAL",
    /* PPDB_B_LARGE_EM_ACDT_H    */ "INTERNAL",
    /* PPDB_B_LARGE_EM_ACDT_MASTER_H */ "INTERNAL",
    /* PPDB_B_LARGE_EM_AGET_AUX  */ "INTERNAL",
    /* PPDB_B_LARGE_EM_AGET_H    */ "INTERNAL",
    /* PPDB_B_LARGE_EM_AGING_CONFIGURATION_TABLE */ "",
    /* PPDB_B_LARGE_EM_AMSG_FIFO */ "INTERNAL",
    /* PPDB_B_LARGE_EM_FID_COUNTER_DB */ "Design Behaviour for Err: Countinue",
    /* PPDB_B_LARGE_EM_FID_COUNTER_PROFILE_DB */ "",
    /* PPDB_B_LARGE_EM_FID_PROFILE_DB */ "Design Behaviour for Err: Countinue",
    /* PPDB_B_LARGE_EM_FLUSH_DB  */ "Flush DB",
    /* PPDB_B_LARGE_EM_FMSG_FIFO */ "INTERNAL",
    /* PPDB_B_LARGE_EM_FORMAT_1  */ "Large-EM Entry  Format I  B-MACT data (i.e. PBP)",
    /* PPDB_B_LARGE_EM_FORMAT_2  */ "",
    /* PPDB_B_LARGE_EM_FORMAT_0_TYPE_0 */ "The LargeEM has several formats. Format1 is used by the forwarding lookups block and its encoding is determined by the application. All encodings have the base format indicated here. Each application is elaborated in the subsequent sections.",
    /* PPDB_B_LARGE_EM_FORMAT_3_TYPE_0 */ "",
    /* PPDB_B_LARGE_EM_FORMAT_3_TYPE_1 */ "",
    /* PPDB_B_LARGE_EM_FORMAT_SLB_COUNTER */ "",
    /* PPDB_B_LARGE_EM_KEYT_AUX  */ "INTERNAL",
    /* PPDB_B_LARGE_EM_KEYT_PLDT_H */ "INTERNAL",
    /* PPDB_B_LARGE_EM_LEARN_FORMAT */ "The LargeEM has several formats. Format1 is used by the forwarding lookups block and its encoding is determined by the application. All encodings have the base format indicated here. Each application is elaborated in the subsequent sections.",
    /* PPDB_B_LARGE_EM_LOOKUP_BURST_FIFO */ "INTERNAL",
    /* PPDB_B_LARGE_EM_MAA_CAM   */ "INTERNAL",
    /* PPDB_B_LARGE_EM_MAA_CAM_PAYLOAD */ "INTERNAL",
    /* PPDB_B_LARGE_EM_MANAGEMENT_EVENT */ "INTERNAL",
    /* PPDB_B_LARGE_EM_MANAGEMENT_MEMORY_H */ "INTERNAL",
    /* PPDB_B_LARGE_EM_MANAGEMENT_REPLY */ "INTERNAL",
    /* PPDB_B_LARGE_EM_MASTER_LOOKUP_BURST_FIFO */ "INTERNAL",
    /* PPDB_B_LARGE_EM_MASTER_MANAGEMENT_EVENT */ "INTERNAL",
    /* PPDB_B_LARGE_EM_PLDT_AUX  */ "INTERNAL",
    /* PPDB_B_LARGE_EM_PORT_MINE_TABLE_LAG_PORT */ "If set, Lag Port has at least one member this Device\n                   Design Behaviour for Err: Countinue (might result in deletion of entry an age-cycle earlier/later)",
    /* PPDB_B_LARGE_EM_PORT_MINE_TABLE_PHYSICAL_PORT */ "If set, Physical Port is local to this Device,\n                   Each address contains 32 entries\n                   Design Behaviour for Err: Countinue (might result in deletion of entry an age-cycle earlier/later)",
    /* PPDB_B_LARGE_EM_REQUEST_FIFO */ "INTERNAL",
    /* PPDB_B_LARGE_EM_SLAVE_LOOKUP_BURST_FIFO */ "INTERNAL",
    /* PPDB_B_LARGE_EM_SLAVE_MANAGEMENT_EVENT */ "INTERNAL",
    /* PPDB_B_LARGE_EM_STEP_TABLE */ "Step Table\n                   (The Item bit ordering matches must emc_include.v)",
    /* PPDB_B_LEARN_FEC_POINTER  */ "Large-EM Entry  Format I  B-MACT data (i.e. PBP)",
    /* PPDB_B_LIF_TABLE          */ "The Small-EM result table is accessed with the SEM-Index which is a result of the Small-EM lookup. The entry format is dependent on the key into the Small-EM and the application. The table contains 16K entries.",
    /* PPDB_B_LIF_TABLE_AC_2_EEI */ "This is the format of a P2P AC that is connected to a PWE or PBB.",
    /* PPDB_B_LIF_TABLE_AC_2_OUT_LIF */ "This is the format of a P2P AC that is connected to an AC.",
    /* PPDB_B_LIF_TABLE_AC_MP    */ "This is the format of a multipoint AC.",
    /* PPDB_B_LIF_TABLE_DOUBLE_DATA */ "Double Data Entry",
    /* PPDB_B_LIF_TABLE_IP_TT    */ "IP tunnels are terminated according to this entry.",
    /* PPDB_B_LIF_TABLE_ISID_MP  */ "This is the format of a PBP with a multipoint service.",
    /* PPDB_B_LIF_TABLE_ISID_P2P */ "This is the format of a PBP with a P2P service.",
    /* PPDB_B_LIF_TABLE_LABEL_DOUBLE_DATA */ "Double Data Entry",
    /* PPDB_B_LIF_TABLE_LABEL_PROTOCOL_OR_LSP */ "MPLS labels with an IP header above ther are terminated according to this entry.",
    /* PPDB_B_LIF_TABLE_LABEL_PWE_MP */ "Multipoint service MPLS labels are terminated according to this entry.",
    /* PPDB_B_LIF_TABLE_LABEL_PWE_P2P */ "P2P service MPLS labels are terminated according to this entry.",
    /* PPDB_B_LIF_TABLE_TRILL    */ "TRILL encapsulated packets are terminated according to this entry.",
    /* PPDB_B_MACT_ACDT_SLAVE_H  */ "INTERNAL",
    /* PPDB_B_SYSTEM_PORT_LAG    */ "",
    /* PPDB_B_TYPE               */ "Large-EM Entry  Format I  Transparent P2P data (applicable for AC and I-SID)",
    /* PP_CAM_RAM                */ "Parser CAM Index RAM Access Table.  Accesses all 7 CAM RAMs.  Addresses 0-255 access CAM RAM0, addresses 256-511 access CAM RAM1, etc",
    /* PP_CPDM                   */ "Header Copy Memory",
    /* PP_HASH_BIT_TEMPLATE      */ "Hash Bit Template Memory",
    /* PP_HASH_BYTE_TEMPLATE     */ "Hash Byte Template Memory",
    /* PP_IQSM                   */ "Initial Queue State Table",
    /* PP_PORT_GPP_TRANSLATION_1 */ "Port Table, FeatureSpecific-Ethernet.",
    /* PP_PORT_GPP_TRANSLATION_2 */ "Port Table, FeatureSpecific-Ethernet.",
    /* PP_PORT_GPP_TRANSLATION_3 */ "",
    /* PP_PORT_GPP_TRANSLATION_4 */ "Port Table, FeatureSpecific-Ethernet.",
    /* PP_PORT_TO_PHYSICAL_PORT_MAP */ "",
    /* PP_SQDM                   */ "Source Queue Data Memory",
    /* PP_TCAM                   */ "TCAM Access Table.  Accesses all 7 TCAMs.  Addresses 0-255 access TCAM0, addresses 256-511 access TCAM1, etc",
    /* PQP_DCM                   */ "This table contains the number of descriptors stored in each queue in PQP. Index to the table is queue number in range 0 to 511.",
    /* PQP_DFM                   */ "Delete Queue FIFO",
    /* PQP_DFM_TDM               */ "TDM Delete Queue FIFO",
    /* PQP_FDM                   */ "Represents the dynamic status of the EGQ 72K Descriptors. Each entry represents a bitmap of 256 packet descriptors indicating, per descriptor, whether it is free or occupied.",
    /* PQP_LCD                   */ "Last copy discard FIFO",
    /* PQP_LCD_TDM               */ "Last copy discard FIFO",
    /* PQP_OTM_ATTRIBUTES_TABLE_DEQ */ "Represents the OTM attributes used in dequeue pipeline.",
    /* PQP_OTM_ATTRIBUTES_TABLE_ENQ */ "Represents the OTM attributes used in enqueue pipeline.",
    /* PQP_PDM_1                 */ "packet descriptors memory for range 0 - 32K-1",
    /* PQP_PDM_2                 */ "packet descriptors memory for range 32K - 68K-1",
    /* PQP_RDM                   */ "read desc memory",
    /* PQP_TC_DP_MAP             */ "Lookup table used to map Port-COS-Map-Profile(4), Egress-MC(1), SYS-TC(3),SYS-DP(2) to the following parameters: Egress-TC(3) and CGM-MC-DP(2).\n The Egress-TC + Base-Queue-Num determines the final queue number the packet will be enqueued to it.",
    /* PQP_WDM                   */ "write desc memory",
    /* PRI_LUT                   */ "Priority look up table",
    /* PROG_MEM                  */ "Provides Access To ETU Wrapper Program Memory",
    /* PR_ICC_LOOKUP_CORE_LOOKUP_RESULTS_TABLE */ "If Last = 0 (LSB from Lookup Table entry)\n\n                                            Entry = {State[23:00], Shift[04:00], Last = 0}\n\n                                            If Last = 1 (LSB from Lookup Table entry)\n\n                                            Entry = {Queue[05:00], Drop, QueueAction[01:00], COS[02:00], DP[01:00], DefaultDE[01:00], SelectDE, Last = 1}",
    /* PR_ICC_LOOKUP_CORE_PORT_DEFAULTS_TABLE */ "",
    /* PR_ICC_LOOKUP_CORE_TCAM_TABLE */ "TCAM Access Table.",
    /* PR_IDP_POLICER_METER_BUCKET */ "Meter Bucket Memory",
    /* PR_IDP_POLICER_METER_CONFIG */ "Meter Config Memory",
    /* PTP_LABEL_RANGE_PROFILE_TABLE */ "",
    /* PTR_RESULTS_BUFFER_ISW1   */ "Visibility packet result capture in ISW1.",
    /* PTR_RESULTS_BUFFER_ISW2   */ "Visibility packet result capture in ISW2.",
    /* PTR_RESULTS_BUFFER_ISW1_PIPE0 */ "Visibility packet result capture in ISW1.",
    /* PTR_RESULTS_BUFFER_ISW1_PIPE1 */ "Visibility packet result capture in ISW1.",
    /* PTR_RESULTS_BUFFER_ISW1_PIPE2 */ "Visibility packet result capture in ISW1.",
    /* PTR_RESULTS_BUFFER_ISW1_PIPE3 */ "Visibility packet result capture in ISW1.",
    /* PTR_RESULTS_BUFFER_ISW2_PIPE0 */ "Visibility packet result capture in ISW2.",
    /* PTR_RESULTS_BUFFER_ISW2_PIPE1 */ "Visibility packet result capture in ISW2.",
    /* PTR_RESULTS_BUFFER_ISW2_PIPE2 */ "Visibility packet result capture in ISW2.",
    /* PTR_RESULTS_BUFFER_ISW2_PIPE3 */ "Visibility packet result capture in ISW2.",
    /* PTR_RESULTS_BUFFER_IVP    */ "Visibility packet result capture in IVP.",
    /* PTR_RESULTS_BUFFER_IVP_PIPE0 */ "Visibility packet result capture in IVP.",
    /* PTR_RESULTS_BUFFER_IVP_PIPE1 */ "Visibility packet result capture in IVP.",
    /* PTR_RESULTS_BUFFER_IVP_PIPE2 */ "Visibility packet result capture in IVP.",
    /* PTR_RESULTS_BUFFER_IVP_PIPE3 */ "Visibility packet result capture in IVP.",
    /* PTS_DRAM_DBLF             */ "DRAM Dequeue Buffer List FIFO",
    /* PTS_DRAM_DQCF             */ "DRAM Dequeue Command FIFO",
    /* PTS_PDQ_BLOCK_MATRIX      */ "Configuration per queue of PDQ.",
    /* PTS_PER_PDQ_CFG           */ "Configuration per queue of PDQ (DQCF and DBLF).",
    /* PTS_PER_SHAPER_CFG        */ "Configuration per PTS shaper,\n addr=0 : LOCAL-HP\n addr=1 : LOCAL-LP\n addr=2 : LOCAL",
    /* PTS_PER_WFQ_CFG           */ "Configuration per PTS WFQ\n addr=0 : SRAM:DRAM - LOCAL-HP\n addr=1 : SRAM:DRAM - LOCAL-LP\n addr=2 : SRAM:DRAM - FUC-HP\n\n All the WFQs arbitrates between 2 contexts, each one has its weight.",
    /* PTS_PER_WFQ_MESH_CFG      */ "Configuration per PTS Mesh-WFQ\n addr=0 : LOCAL:DEV1:DEV2 - HP\n addr=1 : LOCAL:DEV1:DEV2 - LP\n The WFQs arbitrates between 3 contexts, each one has its weight.",
    /* PTS_SHAPER_FMC_CFG        */ "Configurations for PTS fabric-MC shaper\n Index0 : FMC-HP\n Index1 : FMC-LP\n Index2 : FMC (total)",
    /* PTS_SRAM_DQCF             */ "SRAM Dequeue Command FIFO",
    /* PUPFIFO_HI                */ "Priority Update Pipeline Hi Pri Fifo",
    /* PUPFIFO_LO                */ "Priority Update Pipeline Lo Pri Fifo",
    /* QBUFFSPROFILE             */ "The database assigns queues to buffer usage profiles",
    /* QDEPTH_THRESH0            */ "Queue depth threshold pointers - Lower 32K queues - 4 queues per entry",
    /* QDEPTH_THRESH1            */ "Queue depth threshold pointers - Upper 32K queues - 4 queues per entry",
    /* QL_TABLE0                 */ "Average Queue Length Table 0",
    /* QL_TABLE1                 */ "Average Queue Length Table 1",
    /* QM_ALLOCATION_WATERMARK   */ "Source queue pages allocation watermark memory. Indexed by a source queue number.",
    /* QM_BUFFER_STATE0          */ "Buffer state0 table. Indexed by the SOP page of a HPP packet.",
    /* QM_BUFFER_STATE2          */ "Buffer state2 table. Indexed by the SOP page of a packet.",
    /* QM_BUFFER_STATE3          */ "Buffer state3 table. Indexed by the SOP page of a packet.",
    /* QM_BUFFER_STATE_AGE       */ "Buffer state age memory. Indexed by the SOP page of a packet.",
    /* QM_DEQUEUE_CONTEXT0       */ "Packet dequeue context0. Indexed by destination queue number, contains the active, aged, src buffer page of the context.",
    /* QM_DEQUEUE_CONTEXT1       */ "Packet dequeue context1. Indexed by destination queue number, contains the next_page field of the dequeue context.",
    /* QM_DEST_QUEUE_HEADPTR     */ "Destination queue head buffer pointer. Indexed by a destination queue number.",
    /* QM_DEST_QUEUE_STATE       */ "Destination queue state memory. Indexed by a destination queue number.",
    /* QM_DQ_NEXT_BUFFER         */ "Pointers to the next packet for destination queues processing. Indexed by the SOP page of the current packet.",
    /* QM_EGRESS_BUFFER_STATE1   */ "Egress buffer state1 table. Indexed by the SOP page of a packet.",
    /* QM_FREE_PAGE_FIFO0        */ "Free page FIFO. Pages in the FIFO is available for new allocation to queues. There are five FIFO's that can opererate in parallel. Pages are pushed or popped from the five FIFO's in a round robin fashion",
    /* QM_FREE_PAGE_FIFO1        */ "Free page FIFO. Pages in the FIFO is available for new allocation to queues. There are five FIFO's that can opererate in parallel. Pages are pushed or popped from the five FIFO's in a round robin fashion",
    /* QM_FREE_PAGE_FIFO2        */ "Free page FIFO. Pages in the FIFO is available for new allocation to queues. There are five FIFO's that can opererate in parallel. Pages are pushed or popped from the five FIFO's in a round robin fashion",
    /* QM_FREE_PAGE_FIFO3        */ "Free page FIFO. Pages in the FIFO is available for new allocation to queues. There are five FIFO's that can opererate in parallel. Pages are pushed or popped from the five FIFO's in a round robin fashion",
    /* QM_FREE_PAGE_FIFO4        */ "Free page FIFO. Pages in the FIFO is available for new allocation to queues. There are five FIFO's that can opererate in parallel. Pages are pushed or popped from the five FIFO's in a round robin fashion",
    /* QM_INGRESS_BUFFER_STATE1  */ "Ingress buffer state1 table. Indixed by the SOP page of a packet.",
    /* QM_NEXT_PAGE              */ "For looking up the next page of a packet. Indexed by the current page.",
    /* QM_PAGE_ROTATION          */ "To look up the rotation index of a page. Indexed by the current page.",
    /* QM_REPLICATION_CONTEXT    */ "Packet replication context. Indexed by source queue number. To keep track of the number of replication copies sent to the HPP.",
    /* QM_REPLICATION_DEREF      */ "Replication state table: de-reference count. Index to the table is the SOP page of a packet.",
    /* QM_REPLICATION_LRP_STATE  */ "Replication state table: rep LRP states. Index to the table is the SOP page of a packet.",
    /* QM_REPLICATION_REF        */ "Replication state table: reference count. Index to the table is the SOP page of a packet.",
    /* QM_REPLICATION_REP_COPY   */ "Replication state table: repplication copy count. Indexed by the SOP page of a packet.",
    /* QM_SCOREBOARD0            */ "One of two Free page scoreboard tables. Each entry is 32 bits, with one bit for each page. A bit is set whenever the associated page is enqueued. Page 0 is represented by bit 0 of entry 0. Page 16383 is represented by bit 31 of entry 511. Up to two pages can be enqueued per clock cycle, there are two scoreboard tables such that a page is considered free if its freed bit is set in any of the two scoreboard table.",
    /* QM_SCOREBOARD1            */ "One of two Free page scoreboard tables. Each entry is 32 bits, with one bit for each page. A bit is set whenever the associated page is enqueued. Page 0 is represented by bit 0 of entry 0. Page 16383 is represented by bit 31 of entry 511. Up to two pages can be enqueued per clock cycle, there are two scoreboard tables such that a page is considered free if its freed bit is set in any of the two scoreboard table.",
    /* QM_SOURCE_QUEUE           */ "Source queue lookup table. Indexed by the current page.",
    /* QM_SOURCE_QUEUE_CONFIG    */ "Source queue config table. Indexed by a source queue number.",
    /* QM_SOURCE_QUEUE_HEADPTR   */ "Source queue head buffer pointer. Indexed by a source queue number.",
    /* QM_SOURCE_QUEUE_STATE0    */ "Source queue state0 memory. Indexed by a source queue number.",
    /* QM_SOURCE_QUEUE_STATE1    */ "Source queue state1 memory. Indexed by a source queue number.",
    /* QM_SQ_NEXT_BUFFER         */ "Pointers to the next packet for source queues processing. Indexed by the SOP page of the current packet.",
    /* QRH_CUCT                  */ "2Kx192 CRH unicast routing and distribution table. Provides direct access to table.",
    /* QRH_DLLU                  */ "192x10x4 DRH last link used table. Information is kept per link bundle.",
    /* QRH_DUCT                  */ "2Kx192 DRH unicast routing and distribution table. Provides direct access to table.",
    /* QRH_FFLB                  */ "Fault FAPS load balancing. Maps each FAP to load balancing context.  There are total 4 contexts. By default all FAPs maps to context 0. Address is bits 10:4 of FAP ID. Data for each FAP contaion 2 bits. 4 LSBs of FAP ID is offset in units of 2 bits. For example in address 15, bits 1:0 are FAP 240, bits 3:2 are FAP 241, up to bits 31:30 which are FAP 255.",
    /* QRH_MCLBT                 */ "192x192 DRH multicast load balancing table. Provides direct access to table . All tables should be written with the same values for proper operation.",
    /* QRH_MCSFF                 */ "MultiCase Source Fap Filter - filtering out replication which were originated in the same FAP Address: List of FAPS  - FAP-ID List Of Links - group-ID (similar to MCLBT index). Data itself is as following: Bit 11:       enable (if set  enables this feature for this link-group ID) Bit 10:0:   FAP-ID connected to this link group Note  this works only in FE2 single stage and FE3",
    /* QRH_MNOL                  */ "Minimum number of link",
    /* QRH_RESERVED_21           */ "INTERNAL",
    /* QRH_RESERVED_22           */ "INTERNAL",
    /* QRH_RESERVED_23           */ "INTERNAL",
    /* QUEUE_MAP                 */ "This database contains the Queue Map Table.",
    /* QUEUE_PARAMETER_HI        */ "Queue parameter database for upper 32K queues",
    /* QUEUE_PARAMETER_LO        */ "Queue parameter database for lower 32K queues",
    /* QUEUE_STATE_HI            */ "Queue parameter database for upper 32K queues",
    /* QUEUE_STATE_LO            */ "Queue parameter database for lower 32K queues",
    /* QUEUE_TO_SC_0             */ "Queue to sysport and cos conversion",
    /* QUEUE_TO_SC_1             */ "Queue to sysport and cos conversion",
    /* QUEUE_TO_SC_2             */ "Queue to sysport and cos conversion",
    /* QUEUE_TO_SC_3             */ "Queue to sysport and cos conversion",
    /* Q_MAX_BUFFS               */ "The database contains the maximum buffer and WRED gain parameters for buffer profile",
    /* Q_MIN_BUFFS               */ "The database contains the minimum buffer parameter for buffer profile",
    /* Q_SCHED_L0_ACCUM_COMP_MEM */ "Internal working memory for hardware to track the per node cell length error. The index to this memory is the L0 number of this pipe, ranging from 0 to 339. Extra entries outside of the range are not used",
    /* Q_SCHED_L0_ACCUM_COMP_MEM_PIPE0 */ "Internal working memory for hardware to track the per node cell length error. The index to this memory is the L0 number of this pipe, ranging from 0 to 339. Extra entries outside of the range are not used",
    /* Q_SCHED_L0_ACCUM_COMP_MEM_PIPE1 */ "Internal working memory for hardware to track the per node cell length error. The index to this memory is the L0 number of this pipe, ranging from 0 to 339. Extra entries outside of the range are not used",
    /* Q_SCHED_L0_ACCUM_COMP_MEM_PIPE2 */ "Internal working memory for hardware to track the per node cell length error. The index to this memory is the L0 number of this pipe, ranging from 0 to 339. Extra entries outside of the range are not used",
    /* Q_SCHED_L0_ACCUM_COMP_MEM_PIPE3 */ "Internal working memory for hardware to track the per node cell length error. The index to this memory is the L0 number of this pipe, ranging from 0 to 339. Extra entries outside of the range are not used",
    /* Q_SCHED_L0_CREDIT_MEM     */ "Internal working memory for hardware to trackthe per node running credit. The index to this memory is the L0 number of this pipe, ranging from 0 to 339. Extra entries outside of the range are not used",
    /* Q_SCHED_L0_CREDIT_MEM_PIPE0 */ "Internal working memory for hardware to trackthe per node running credit. The index to this memory is the L0 number of this pipe, ranging from 0 to 339. Extra entries outside of the range are not used",
    /* Q_SCHED_L0_CREDIT_MEM_PIPE1 */ "Internal working memory for hardware to trackthe per node running credit. The index to this memory is the L0 number of this pipe, ranging from 0 to 339. Extra entries outside of the range are not used",
    /* Q_SCHED_L0_CREDIT_MEM_PIPE2 */ "Internal working memory for hardware to trackthe per node running credit. The index to this memory is the L0 number of this pipe, ranging from 0 to 339. Extra entries outside of the range are not used",
    /* Q_SCHED_L0_CREDIT_MEM_PIPE3 */ "Internal working memory for hardware to trackthe per node running credit. The index to this memory is the L0 number of this pipe, ranging from 0 to 339. Extra entries outside of the range are not used",
    /* Q_SCHED_L0_WEIGHT_MEM     */ "Memory to keep the per L0 node weight information. The index to this memory is the L0 number of this pipe, ranging from 0 to 339. Extra entries outside of the range are not used",
    /* Q_SCHED_L0_WEIGHT_MEM_PIPE0 */ "Memory to keep the per L0 node weight information. The index to this memory is the L0 number of this pipe, ranging from 0 to 339. Extra entries outside of the range are not used",
    /* Q_SCHED_L0_WEIGHT_MEM_PIPE1 */ "Memory to keep the per L0 node weight information. The index to this memory is the L0 number of this pipe, ranging from 0 to 339. Extra entries outside of the range are not used",
    /* Q_SCHED_L0_WEIGHT_MEM_PIPE2 */ "Memory to keep the per L0 node weight information. The index to this memory is the L0 number of this pipe, ranging from 0 to 339. Extra entries outside of the range are not used",
    /* Q_SCHED_L0_WEIGHT_MEM_PIPE3 */ "Memory to keep the per L0 node weight information. The index to this memory is the L0 number of this pipe, ranging from 0 to 339. Extra entries outside of the range are not used",
    /* Q_SCHED_L1_ACCUM_COMP_MEM */ "Internal working memory for hardware to track the per queue cell length error. The index to this memory is the logical queue number, ranging from 0 to 707. Of this range, 0 to 329 are for UC queues and 330 to 707 are for MC queues. The extra entries outside of the range are not used",
    /* Q_SCHED_L1_ACCUM_COMP_MEM_PIPE0 */ "Internal working memory for hardware to track the per queue cell length error. The index to this memory is the logical queue number, ranging from 0 to 707. Of this range, 0 to 329 are for UC queues and 330 to 707 are for MC queues. The extra entries outside of the range are not used",
    /* Q_SCHED_L1_ACCUM_COMP_MEM_PIPE1 */ "Internal working memory for hardware to track the per queue cell length error. The index to this memory is the logical queue number, ranging from 0 to 707. Of this range, 0 to 329 are for UC queues and 330 to 707 are for MC queues. The extra entries outside of the range are not used",
    /* Q_SCHED_L1_ACCUM_COMP_MEM_PIPE2 */ "Internal working memory for hardware to track the per queue cell length error. The index to this memory is the logical queue number, ranging from 0 to 707. Of this range, 0 to 329 are for UC queues and 330 to 707 are for MC queues. The extra entries outside of the range are not used",
    /* Q_SCHED_L1_ACCUM_COMP_MEM_PIPE3 */ "Internal working memory for hardware to track the per queue cell length error. The index to this memory is the logical queue number, ranging from 0 to 707. Of this range, 0 to 329 are for UC queues and 330 to 707 are for MC queues. The extra entries outside of the range are not used",
    /* Q_SCHED_L1_CREDIT_MEM     */ "Internal working memory for hardware to track the per queue running credit. The index to this memory comes from the logical queue number, ranging from 0 to 707. Of this range, 0 to 329 are for UC queues and 330 to 707 are for MC queues. The extra entries outside of the range are not used",
    /* Q_SCHED_L1_CREDIT_MEM_PIPE0 */ "Internal working memory for hardware to track the per queue running credit. The index to this memory comes from the logical queue number, ranging from 0 to 707. Of this range, 0 to 329 are for UC queues and 330 to 707 are for MC queues. The extra entries outside of the range are not used",
    /* Q_SCHED_L1_CREDIT_MEM_PIPE1 */ "Internal working memory for hardware to track the per queue running credit. The index to this memory comes from the logical queue number, ranging from 0 to 707. Of this range, 0 to 329 are for UC queues and 330 to 707 are for MC queues. The extra entries outside of the range are not used",
    /* Q_SCHED_L1_CREDIT_MEM_PIPE2 */ "Internal working memory for hardware to track the per queue running credit. The index to this memory comes from the logical queue number, ranging from 0 to 707. Of this range, 0 to 329 are for UC queues and 330 to 707 are for MC queues. The extra entries outside of the range are not used",
    /* Q_SCHED_L1_CREDIT_MEM_PIPE3 */ "Internal working memory for hardware to track the per queue running credit. The index to this memory comes from the logical queue number, ranging from 0 to 707. Of this range, 0 to 329 are for UC queues and 330 to 707 are for MC queues. The extra entries outside of the range are not used",
    /* Q_SCHED_L1_WEIGHT_MEM     */ "Memory to keep the per queue weight infomation. The index to this memory comes from the logical queue number, ranging from 0 to 707. Of this range, 0 to 329 are for UC queues and 330 to 707 are for MC queues. The extra entries outside of the range are not used",
    /* Q_SCHED_L1_WEIGHT_MEM_PIPE0 */ "Memory to keep the per queue weight infomation. The index to this memory comes from the logical queue number, ranging from 0 to 707. Of this range, 0 to 329 are for UC queues and 330 to 707 are for MC queues. The extra entries outside of the range are not used",
    /* Q_SCHED_L1_WEIGHT_MEM_PIPE1 */ "Memory to keep the per queue weight infomation. The index to this memory comes from the logical queue number, ranging from 0 to 707. Of this range, 0 to 329 are for UC queues and 330 to 707 are for MC queues. The extra entries outside of the range are not used",
    /* Q_SCHED_L1_WEIGHT_MEM_PIPE2 */ "Memory to keep the per queue weight infomation. The index to this memory comes from the logical queue number, ranging from 0 to 707. Of this range, 0 to 329 are for UC queues and 330 to 707 are for MC queues. The extra entries outside of the range are not used",
    /* Q_SCHED_L1_WEIGHT_MEM_PIPE3 */ "Memory to keep the per queue weight infomation. The index to this memory comes from the logical queue number, ranging from 0 to 707. Of this range, 0 to 329 are for UC queues and 330 to 707 are for MC queues. The extra entries outside of the range are not used",
    /* Q_SCHED_L2_ACCUM_COMP_MEM */ "Internal working memory for hardware to track the per queue cell length error. The memory is organized into two sections: the first section ranging from 0 to 707 is used to track errors for queues in ToQ_A, the second section ranging from 708 to 1415 is used to track errors for queues in ToQ_B. Extra entries outside of these two sections are not used",
    /* Q_SCHED_L2_ACCUM_COMP_MEM_PIPE0 */ "Internal working memory for hardware to track the per queue cell length error. The memory is organized into two sections: the first section ranging from 0 to 707 is used to track errors for queues in ToQ_A, the second section ranging from 708 to 1415 is used to track errors for queues in ToQ_B. Extra entries outside of these two sections are not used",
    /* Q_SCHED_L2_ACCUM_COMP_MEM_PIPE1 */ "Internal working memory for hardware to track the per queue cell length error. The memory is organized into two sections: the first section ranging from 0 to 707 is used to track errors for queues in ToQ_A, the second section ranging from 708 to 1415 is used to track errors for queues in ToQ_B. Extra entries outside of these two sections are not used",
    /* Q_SCHED_L2_ACCUM_COMP_MEM_PIPE2 */ "Internal working memory for hardware to track the per queue cell length error. The memory is organized into two sections: the first section ranging from 0 to 707 is used to track errors for queues in ToQ_A, the second section ranging from 708 to 1415 is used to track errors for queues in ToQ_B. Extra entries outside of these two sections are not used",
    /* Q_SCHED_L2_ACCUM_COMP_MEM_PIPE3 */ "Internal working memory for hardware to track the per queue cell length error. The memory is organized into two sections: the first section ranging from 0 to 707 is used to track errors for queues in ToQ_A, the second section ranging from 708 to 1415 is used to track errors for queues in ToQ_B. Extra entries outside of these two sections are not used",
    /* Q_SCHED_L2_CREDIT_MEM     */ "Internal working memory for hardware to track the running credit. The memory is organized into two sections: the first section ranging from 0 to 707 is used to track errors for queues in ToQ_A, the second section ranging from 708 to 1415 is used to track errors for queues in ToQ_B. Extra entries outside of these two sections are not used",
    /* Q_SCHED_L2_CREDIT_MEM_PIPE0 */ "Internal working memory for hardware to track the running credit. The memory is organized into two sections: the first section ranging from 0 to 707 is used to track errors for queues in ToQ_A, the second section ranging from 708 to 1415 is used to track errors for queues in ToQ_B. Extra entries outside of these two sections are not used",
    /* Q_SCHED_L2_CREDIT_MEM_PIPE1 */ "Internal working memory for hardware to track the running credit. The memory is organized into two sections: the first section ranging from 0 to 707 is used to track errors for queues in ToQ_A, the second section ranging from 708 to 1415 is used to track errors for queues in ToQ_B. Extra entries outside of these two sections are not used",
    /* Q_SCHED_L2_CREDIT_MEM_PIPE2 */ "Internal working memory for hardware to track the running credit. The memory is organized into two sections: the first section ranging from 0 to 707 is used to track errors for queues in ToQ_A, the second section ranging from 708 to 1415 is used to track errors for queues in ToQ_B. Extra entries outside of these two sections are not used",
    /* Q_SCHED_L2_CREDIT_MEM_PIPE3 */ "Internal working memory for hardware to track the running credit. The memory is organized into two sections: the first section ranging from 0 to 707 is used to track errors for queues in ToQ_A, the second section ranging from 708 to 1415 is used to track errors for queues in ToQ_B. Extra entries outside of these two sections are not used",
    /* RANDGEN                   */ "The database contains WRED random Number generator seeds",
    /* RANDOM_RRLB_HG_TRUNK_MEMBER */ "Contains the list of all HG Trunk members.",
    /* RATE_DELTA_MAX            */ "This database holds the range of possible rate_max_deltas for the demand calculation.",
    /* RAW_ENTRY_TABLE           */ "Raw physical access to the Search Bank Memories.",
    /* RAW_HITBIT_TABLE          */ "Raw physical access to the Hitbit Search Bank Memories.",
    /* RDB_BANK_0_0              */ "RDB Data Buffer 0 Part 0.",
    /* RDB_BANK_0_1              */ "RDB Data Buffer 0 Part 1.",
    /* RDB_BANK_1_0              */ "RDB Data Buffer 1 Part 0.",
    /* RDB_BANK_1_1              */ "RDB Data Buffer 1 Part 1.",
    /* RDB_BANK_2_0              */ "RDB Data Buffer 2 Part 0.",
    /* RDB_BANK_2_1              */ "RDB Data Buffer 2 Part 1.",
    /* RDB_BANK_3_0              */ "RDB Data Buffer 3 Part 0.",
    /* RDB_BANK_3_1              */ "RDB Data Buffer 3 Part 1.",
    /* RDB_CEL                   */ "RDB Cell Link.",
    /* RDB_CONTEXT               */ "RDB context debug.",
    /* RDB_CXT_AB                */ "RDB Descriptors AB.",
    /* RDB_CXT_CD                */ "RDB Descriptors CD.",
    /* RDB_FCP_0                 */ "RDB Free Pointer FIFO for Bank 0.",
    /* RDB_FCP_1                 */ "RDB Free Pointer FIFO for Bank 1.",
    /* RDB_FCP_2                 */ "RDB Free Pointer FIFO for Bank 2.",
    /* RDB_FCP_3                 */ "RDB Free Pointer FIFO for Bank 3.",
    /* RDB_PKT                   */ "RDB Packet Link.",
    /* RDB_QUEUE                 */ "RDB queue debug.",
    /* REPLICATION_FIFO_BANK0    */ "Bank0 of Replication FIFO. This memory should not be accessed by CPU during traffic",
    /* REPLICATION_FIFO_BANK1    */ "Bank1 of Replication FIFO. This memory should not be accessed by CPU during traffic",
    /* REPLICATION_FIFO_BANK0_XPE0 */ "Bank0 of Replication FIFO. This memory should not be accessed by CPU during traffic",
    /* REPLICATION_FIFO_BANK0_XPE1 */ "Bank0 of Replication FIFO. This memory should not be accessed by CPU during traffic",
    /* REPLICATION_FIFO_BANK0_XPE2 */ "Bank0 of Replication FIFO. This memory should not be accessed by CPU during traffic",
    /* REPLICATION_FIFO_BANK0_XPE3 */ "Bank0 of Replication FIFO. This memory should not be accessed by CPU during traffic",
    /* REPLICATION_FIFO_BANK1_XPE0 */ "Bank1 of Replication FIFO. This memory should not be accessed by CPU during traffic",
    /* REPLICATION_FIFO_BANK1_XPE1 */ "Bank1 of Replication FIFO. This memory should not be accessed by CPU during traffic",
    /* REPLICATION_FIFO_BANK1_XPE2 */ "Bank1 of Replication FIFO. This memory should not be accessed by CPU during traffic",
    /* REPLICATION_FIFO_BANK1_XPE3 */ "Bank1 of Replication FIFO. This memory should not be accessed by CPU during traffic",
    /* RESPONSIVE_PROTOCOL_MATCH */ "Responsive protocol match register set.",
    /* RH_ECMP_DROPS             */ "RH_ECMP drop counter.",
    /* RH_ECMP_DROPS_X           */ "RH_ECMP drop counter.",
    /* RH_ECMP_DROPS_Y           */ "RH_ECMP drop counter.",
    /* RH_ECMP_ETHERTYPE_ELIGIBILITY_MAP */ "A list of ethertype within which RH ECMP can be applied (or excluded).",
    /* RH_ECMP_FLOWSET           */ "RH_ECMP Flow Set Assigned Member.",
    /* RH_HGT_DROPS              */ "RH_HGT Group Member Statistic.",
    /* RH_HGT_DROPS_X            */ "RH_HGT Group Member Statistic.",
    /* RH_HGT_DROPS_Y            */ "RH_HGT Group Member Statistic.",
    /* RH_HGT_ETHERTYPE_ELIGIBILITY_MAP */ "A list of ethertype within which RH HGT can be applied (or excluded).",
    /* RH_HGT_FLOWSET            */ "RH_HGT Flow Set Assigned Member.",
    /* RH_HGT_GROUP_CONTROL      */ "RH_HGT Group Parameters.",
    /* RH_LAG_DROPS              */ "RH_LAG drop counter.",
    /* RH_LAG_DROPS_X            */ "RH_LAG drop counter.",
    /* RH_LAG_DROPS_Y            */ "RH_LAG drop counter.",
    /* RH_LAG_ETHERTYPE_ELIGIBILITY_MAP */ "A list of ethertype within which RH LAG can be applied (or excluded).",
    /* RH_LAG_FLOWSET            */ "RH_LAG Flow Set Assigned Member.",
    /* RMEP                      */ "",
    /* RQE_FREE_LIST             */ "RQE FREE LIST",
    /* RQE_FREE_LIST_XPE0        */ "RQE FREE LIST",
    /* RQE_FREE_LIST_XPE1        */ "RQE FREE LIST",
    /* RQE_FREE_LIST_XPE2        */ "RQE FREE LIST",
    /* RQE_FREE_LIST_XPE3        */ "RQE FREE LIST",
    /* RQE_LINK_LIST             */ "RQE LINK LIST",
    /* RQE_LINK_LIST_XPE0        */ "RQE LINK LIST",
    /* RQE_LINK_LIST_XPE1        */ "RQE LINK LIST",
    /* RQE_LINK_LIST_XPE2        */ "RQE LINK LIST",
    /* RQE_LINK_LIST_XPE3        */ "RQE LINK LIST",
    /* RQP_CRM                   */ "CRC16 Reminder Memory",
    /* RQP_FCM                   */ "RCM Free Context Memory",
    /* RQP_FRM                   */ "FDA RXI Memory",
    /* RQP_HDR_FIFO              */ "Packet header FIFO for DBF write latency in PRP",
    /* RQP_MBYPASS               */ "Multicast Bypass memory",
    /* RQP_MC_SP_TC_MAP          */ "RQP should drop MC packets based on data buffers consumption. The decision whether to drop a packet or forward it is resolved by the CGM block that passes the indication to the RQP. The RQP map SYS-TC2:0SYS-DP1:0 to CGM-SP(1),CGM-SE(2),CGM-TC(3) and forward them to the CGM.",
    /* RQP_MSC                   */ "Multicast shared contexts",
    /* RQP_PCM                   */ "Packed Cell Memory",
    /* RQP_PRD                   */ "Pre Reassemblly database",
    /* RQP_PRF                   */ "Pre Reassemblly FIFO",
    /* RQP_PRT                   */ "Pre Reassemblly Table",
    /* RQP_RCM                   */ "Reassembly contexts memory allocation used for fabric primary pipe traffic. Index to this memory is FAB_PIPE_ID1:0 & FAP ID10:0\n The reassembly contexts allocation mode in the Fabric primary interface, may be one from the following options, according to RcmPrimaryMode register:\n 0 - Static allocation mode, in this mode reassembly context is feagured from the FAP_ID9:0 and context mask + base address.\n 1 - Semi-dynamic allocation mode, RQP context is detrmined by mapping of FAB_PIPE_ID1:0 & FAP I ...",
    /* RQP_RPDM                  */ "RQP Packet reassembly descriptors (PRP)",
    /* RQP_RPDMHDR               */ "Packet reassembly descriptors for packet header(PRP)",
    /* RQP_RSM                   */ "Cell Unpack Reassembly Memory (state)",
    /* RQP_SEGM                  */ "Segment Memory for EGQ0.",
    /* RQP_TSM                   */ "TDM (in PRP) Segment Memory",
    /* RQP_USM                   */ "Unpacked Segment Memory",
    /* RTAG7_FLOW_BASED_HASH     */ "RTAG7 Flow-based Hash table.",
    /* RTAG7_PORT_BASED_HASH     */ ". FeatureSpecific-Ethernet.",
    /* RTP_CRMA                  */ "Each address corresponds to two consecutive Destination-ID and contains a bitmap. Each bit corresponds to a physical link.\n                    1 : Destination is accessible through the link.\n                    0 : Destination is not accessible through the link.\n                   Control cells exit the FAP only on valid links.\n                   Note: this table is updated automatically by a hardware process and normally should not be modified by the user.\n                   Note: This memory i ...",
    /* RTP_CUCT                  */ "",
    /* RTP_DLLUP                 */ "",
    /* RTP_DLLUS                 */ "",
    /* RTP_DRMA                  */ "Each address corresponds to two consecutive Destination-ID and contains a bitmap. Each bit corresponds to a physical link.\n                    1 : Destination is accessible through the link.\n                    0 : Destination is not accessible through the link.\n                   Data cells destined for a destination exit the FAP only on valid links.\n                   Note, this table is updated automatically by a hardware process and normally should not be modified by the user.\n               ...",
    /* RTP_DUCTP                 */ "",
    /* RTP_DUCTS                 */ "",
    /* RTP_FFLBP                 */ "",
    /* RTP_FFLBS                 */ "",
    /* RTP_FLGM                  */ "2048x8 FAP Link Group Mapping. This table mapped for each FAP the link group number that the FAP belongs to. This table should be inialized by SW according to system connectivity (as read from RMHMT). For easy use: the first active link for each FAP will be the group number.",
    /* RTP_GCILBT                */ "192x192 load balancing table for reachability GCI masking. Used when detected a group with low number of links (below MNOLG) to know which links should mask from GCI generation. Should be initialized to the same values as DRH MCLBT tables.",
    /* RTP_MCLBTP                */ "",
    /* RTP_MCLBTS                */ "",
    /* RTP_MCSFFP                */ "",
    /* RTP_MCT                   */ "",
    /* RTP_MEM_800000            */ "",
    /* RTP_MEM_900000            */ "",
    /* RTP_MEM_1100000           */ "",
    /* RTP_MEM_A00000            */ "",
    /* RTP_MEM_C00000            */ "",
    /* RTP_MEM_D00000            */ "",
    /* RTP_MNOLG                 */ "Minimum number of link for GCI masking",
    /* RTP_MNOLP                 */ "Minimum number of link",
    /* RTP_MNOLR                 */ "192x8 minimun number of links for group reachbility. If number of links the valid for group in below this TH, the group reported as non-reachable. Relevent for FE1, to know which groups are valid for local-route",
    /* RTP_MULTI_CAST_TABLE_UPDATE */ "",
    /* RTP_MULTI_TB              */ "",
    /* RTP_RCGLBT                */ "",
    /* RTP_RESERVED_21           */ "INTERNAL",
    /* RTP_RESERVED_22           */ "INTERNAL",
    /* RTP_RESERVED_23           */ "INTERNAL",
    /* RTP_RMHMT                 */ "",
    /* RTP_RRMA                  */ "Each address corresponds to two consecutive Destination-ID and contains a bitmap. Each bit corresponds to a physical link.\n                    1 : Destination is accessible through the link.\n                    0 : Destination is not accessible through the link.\n                   Control cells exit the FAP only on valid links.\n                   Note: this table is updated automatically by a hardware process and normally should not be modified by the user.\n                   Note: This memory i ...",
    /* RTP_SCTINC                */ "",
    /* RTP_SGR                   */ "192x192 Stabilize group reachability Table. The 64 copies of this table used for routing of MC queries in DRH (64 MCLBT's) . Each entry of this table can be static by write 1 in the coresponding bit in MclbtGroupStaticConfig. Else the entry will update according to connectivity of all FAP's that related to this group in FLGM table.",
    /* RTP_SLSCT                 */ "",
    /* RTP_TOTSF                 */ "",
    /* RTP_UNICAST_DISTRIBUTION_MEMORY */ "Each address corresponds to two consecutive Destination-ID and contains a bitmap. Each bit corresponds to a physical link.\n                    1 : Destination is accessible through the link.\n                    0 : Destination is not accessible through the link.\n                   Control cells exit the FAP only on valid links.\n                   Note: this table is updated automatically by a hardware process and normally should not be modified by the user.\n                   Note: This memory i ...",
    /* RTP_UNICAST_DISTRIBUTION_MEMORY_FOR_CTRL_CELLS */ "Each address corresponds to two consecutive Destination-ID and contains a bitmap. Each bit corresponds to a physical link.\n                    1 : Destination is accessible through the link.\n                    0 : Destination is not accessible through the link.\n                   Control cells exit the FAP only on valid links.\n                   Note: this table is updated automatically by a hardware process and normally should not be modified by the user.\n                   Note: This memory i ...",
    /* RTP_UNICAST_DISTRIBUTION_MEMORY_FOR_DATA_CELLS */ "Each address corresponds to two consecutive Destination-ID and contains a bitmap. Each bit corresponds to a physical link.\n                    1 : Destination is accessible through the link.\n                    0 : Destination is not accessible through the link.\n                   Data cells destined for a destination exit the FAP only on valid links.\n                   Note, this table is updated automatically by a hardware process and normally should not be modified by the user.\n               ...",
    /* RT_BK                     */ "Root Node Bucket Table.",
    /* RT_FM                     */ "Root Node Full Map Table.",
    /* RT_FS                     */ "Root Node Full State Table.",
    /* RT_IF                     */ "Root Node Interface Configuration Table.",
    /* RT_ST                     */ "Root Node State Table.",
    /* RXBADTAGPKTS              */ "Receive Bad Tag Frame Counter  - Implemented in isec_RxTagUntagNoneBad",
    /* RXLP_CHANNEL_CONTROL_BUFFER */ "",
    /* RXLP_DEBUG_COUNTER0       */ "This table counts the triggers set in RXLP_DEBUG_COUNTER0_TRIGGER_SELECT register",
    /* RXLP_DEBUG_COUNTER1       */ "This table counts the triggers set in RXLP_DEBUG_COUNTER1_TRIGGER_SELECT register",
    /* RXLP_DEBUG_COUNTER2       */ "This table counts the triggers set in RXLP_DEBUG_COUNTER2_TRIGGER_SELECT register",
    /* RXLP_DEBUG_COUNTER3       */ "This table counts the triggers set in RXLP_DEBUG_COUNTER3_TRIGGER_SELECT register",
    /* RXLP_DEBUG_COUNTER4       */ "This table counts the triggers set in RXLP_DEBUG_COUNTER4_TRIGGER_SELECT register",
    /* RXLP_DEBUG_COUNTER5       */ "This table counts the triggers set in RXLP_DEBUG_COUNTER5_TRIGGER_SELECT register",
    /* RXLP_DEBUG_COUNTER6       */ "This table counts the triggers set in RXLP_DEBUG_COUNTER6_TRIGGER_SELECT register",
    /* RXLP_DEBUG_COUNTER7       */ "This table counts the triggers set in RXLP_DEBUG_COUNTER7_TRIGGER_SELECT register",
    /* RXLP_DEBUG_COUNTER8       */ "This table counts the number of Fragment-Bytes/stream transmitted by RXLP",
    /* RXLP_DEBUG_COUNTER9       */ "This table counts the number of Fragments/stream transmitted by RXLP",
    /* RXLP_DEBUG_COUNTER10      */ "This table counts the number of Frame-Bytes/stream transmitted by RXLP",
    /* RXLP_DEBUG_COUNTER11      */ "This table counts the number of Frames/stream transmitted by RXLP",
    /* RXLP_DFC_MSG_BIT_REMAP_PORT_0 */ "External -> Remapped translation table",
    /* RXLP_DFC_MSG_BIT_REMAP_PORT_1 */ "External -> Remapped translation table",
    /* RXLP_DFC_MSG_BIT_REMAP_PORT_2 */ "External -> Remapped translation table",
    /* RXLP_DFC_MSG_BIT_REMAP_PORT_3 */ "External -> Remapped translation table",
    /* RXLP_ERROR_ACTION_MAP_DATA */ "",
    /* RXLP_ERROR_ACTION_MAP_TCAM */ "Interrupt Data Log Memory that stores the fragment information corresponding to an error case log",
    /* RXLP_INTERNAL_STREAM_MAP_PORT_0 */ "Maps (External Stream ID - RXLP_PORT_STREAM_ID_BASE) to internal stream ID in the range 0-127. There is one copy of this table for each port. The internal stream IDs configured in this table should be unique across the four ports associated with the RXLP slice.",
    /* RXLP_INTERNAL_STREAM_MAP_PORT_1 */ "Maps (External Stream ID - RXLP_PORT_STREAM_ID_BASE) to internal stream ID in the range 0-127. There is one copy of this table for each port. The internal stream IDs configured in this table should be unique across the four ports associated with the RXLP slice.",
    /* RXLP_INTERNAL_STREAM_MAP_PORT_2 */ "Maps (External Stream ID - RXLP_PORT_STREAM_ID_BASE) to internal stream ID in the range 0-127. There is one copy of this table for each port. The internal stream IDs configured in this table should be unique across the four ports associated with the RXLP slice.",
    /* RXLP_INTERNAL_STREAM_MAP_PORT_3 */ "Maps (External Stream ID - RXLP_PORT_STREAM_ID_BASE) to internal stream ID in the range 0-127. There is one copy of this table for each port. The internal stream IDs configured in this table should be unique across the four ports associated with the RXLP slice.",
    /* RXLP_INTR_DATA_MEM        */ "Interrupt Data Log Memory that stores the fragment information corresponding to an error case log",
    /* RXLP_MAX_FRAME_SIZE       */ "External -> Remapped translation table",
    /* RXNOSCIPKTS               */ "Receive Unknown SCI Discarded Frame Counter - Implemented in isec_RxSCIUnknownNonePkts",
    /* RXNOTAGPKTS               */ "Receive No Tag Frame Counter  - Implemented in isec_RxTagUntagNoneBad",
    /* RXSAINVLDPKTS             */ "Receive SA Invalid Frame Counter",
    /* RXSANOTUSINGSAPKTS        */ "Receive Unused SA Discarded Encrypted Frame Counter",
    /* RXSANOTVLDPKTS            */ "Receive SA Invalid Frame Counter",
    /* RXSAOKPKTS                */ "Receive SA Valid Frame Counter",
    /* RXSAUNUSEDSAPKTS          */ "Receive Unused SA Unencrypted Frame Counter",
    /* RXSCDCRPTBYT              */ "Receive Encrypted Frame Octet Count for each SC",
    /* RXSCDLYPKTS               */ "Receive PN Violation Frame Counter for SC",
    /* RXSCINVLDPKTS             */ "Summation of Receive SA Invalid Frame Counter for SC",
    /* RXSCLATEPKTS              */ "Receive  PN Violation Discarded Frame Counter for SC",
    /* RXSCNOTUSINGSAPKTS        */ "Summation of Receive Unused SA Encrypted Frame Counter for SC",
    /* RXSCNOTVLDPKTS            */ "Summation of Receive SA Not Valid Frame Counter for SC",
    /* RXSCOKPKTS                */ "Summation of Receive SA Valid Frame Counter for SC",
    /* RXSCUNCHKPKTS             */ "Receive Unchecked Frame Counter for SC",
    /* RXSCUNUSEDSAPKTS          */ "Summation of Receive Unused SA Unencrypted Frame Counter for SC",
    /* RXSCVLDTBYT               */ "Receive Authentication Only Frame Octet Count for SC",
    /* RXUNKNOWNSCIPKTS          */ "Receive Unknown SCI Frame Counter - Implemented in isec_RxSCIUnknownNonePkts",
    /* RXUNTAGPKTS               */ "Receive Untagged Frame Counter - Implemented in isec_RxTagUntagNoneBad",
    /* RX_PROT_GROUP_TABLE       */ "Protection Switching Drop Enable.",
    /* RX_PROT_GROUP_TABLE_1     */ "Protection Switching Drop Enable.",
    /* RX_PROT_GROUP_TABLE_1_DMA */ "Protection Switching Drop Enable DMA view-1.",
    /* RX_PROT_GROUP_TABLE_DMA   */ "Protection Switching Drop Enable DMA view-1.",
    /* SCH_BFC_FLOW_BULK_DESCRIPTOR_BFBD */ "(Backdoor flow-control) Maps flow-bulk to flow QOS and Base Q-Pair, which are used for flow-fc. Each entry is for a bulk of 16 flows",
    /* SCH_BFC_FLOW_MAPPING_RULES_BFMR */ "(Backdoor flow-control) Maps flow's QOS and flow_id3:0 (TC) to Q-pair offset in Q-Pair FC vector. Entry 15 of this table is not valid, since QOS==0xf means no FC on the bulk",
    /* SCH_BUCKET_DEFICIT_BDF    */ "Holds the value of token bucket deficit",
    /* SCH_BUCKET_DEFICIT__BDF   */ "Holds the value of token bucket deficit",
    /* SCH_CH_NIF_CALENDAR_CONFIGURATION_CNCC */ "",
    /* SCH_CH_NIF_CALENDAR_CONFIGURATION__CNCC */ "",
    /* SCH_CH_NIF_RATES_CONFIGURATION_CNRC */ "",
    /* SCH_CH_NIF_RATES_CONFIGURATION__CNRC */ "",
    /* SCH_CIR_SHAPERS_DYNAMIC_TABEL_CSDT */ "INTERNAL",
    /* SCH_CIR_SHAPERS_STATIC_TABEL_CSST */ "Shaper define per each PG. holds Quanta to add and max-burst per each PG",
    /* SCH_CIR_SHAPERS_STATIC_TABEL__CSST */ "Shaper define per each PG. holds Quanta to add and max-burst per each PG",
    /* SCH_CIR_SHAPER_CALENDAR_CSC */ "Holds pointer to CSST",
    /* SCH_CIR_SHAPER_CALENDAR__CSC */ "Holds pointer to CSST",
    /* SCH_CL_SCHEDULERS_CONFIGURATION_SCC */ "The SCC is an 16k-entry memory. This memory allocates to each of the 16k class schedulers one of 256 types. (See memory SCT).\n                   Entry i relates to class scheduler i.",
    /* SCH_CL_SCHEDULERS_CONFIGURATION__SCC */ "The SCC is an 16k-entry memory. This memory allocates to each of the 16k class schedulers one of 256 types. (See memory SCT).\n                   Entry i relates to class scheduler i.",
    /* SCH_CL_SCHEDULERS_TYPE_SCT */ "The SCT is a 256-entry memory. This memory defines for each class type exactly how the class scheduler will be configured. In the table below, n relates to set of values, while X relates to a range, as it is configured by the WFQ mode.",
    /* SCH_CL_SCHEDULERS_TYPE__SCT */ "The SCT is a 256-entry memory. This memory defines for each class type exactly how the class scheduler will be configured. In the table below, n relates to set of values, while X relates to a range, as it is configured by the WFQ mode.",
    /* SCH_DEVICE_RATE_MEMORY_DRM */ "The selection of the current active rate is determined by the number of current active links (0 36) and the current status of fabric congestion, as reflected in the RCI bucket level (0 7). The address is a concatenation of NumActiveLinks and RCILevel.",
    /* SCH_DEVICE_RATE_MEMORY__DRM */ "The DRM is a 296-entry memory. The selection of the current active rate is determined by the number of current active links (0 36) and the current status of fabric congestion, as reflected in the RCI bucket level (0 7). The address is a concatenation of NumActiveLinks and RCILevel.",
    /* SCH_DSP_2_PORT_MAP_DSPP   */ "Maps each of the 256 DSPs to each of the 256 HR schedulers.",
    /* SCH_DSP_2_PORT_MAP__DSPP  */ "Maps each of the 256 DSPs to each of the 256 HR schedulers.",
    /* SCH_DUAL_SHAPER_MEMORY_DSM */ "The DSM is a 1K-entry memory. Each entry contains data for 16 dual bucket schedulers.",
    /* SCH_DUAL_SHAPER_MEMORY__DSM */ "The DSM is a 1K-entry memory. Each entry contains data for 16 dual bucket schedulers.",
    /* SCH_DYNAMIC_FLOW_BFC_TABLE_DFBT */ "Dynamic table which holds per flow whether it in flow-control or not. Each entry holds data for 512 flows",
    /* SCH_FC_MAP_FCM            */ "Maps each of the 32 EGQ interface FC to each of 32 Scheduler interface FC, If more than one EGQ interface FC is mapped to one scheduer interface FC then they are bit-wise ORed",
    /* SCH_FC_MAP__FCM           */ "Maps each of the 32 EGQ interface FC to each of 32 Scheduler interface FC, If more than one EGQ interface FC is mapped to one scheduer interface FC then they are bit-wise ORed",
    /* SCH_FLOW_DESCRIPTOR_MEMORY_STATIC_FDMS */ "The FDMS is a 128k-entry memory. This memory contains the Flow-Attributes. There is one entry per sub-flow. Both Schedulers and flows share this memory context.\n                   The Flow-Attributes are set by the user. The Flow-Attributes depend on the type of scheduler this flow is attached to.",
    /* SCH_FLOW_DESCRIPTOR_MEMORY_STATIC__FDMS */ "The FDMS is a 128k-entry memory. This memory contains the Flow-Attributes. There is one entry per sub-flow. Both Schedulers and flows share this memory context.\n                   The Flow-Attributes are set by the user. The Flow-Attributes depend on the type of scheduler this flow is attached to.",
    /* SCH_FLOW_GROUP_MEMORY_FGM */ "Each entry holds the group of eight schedulers, indicating the group (0-2) assigned to the scheduler. The flows belonging to a scheduler are attached to the group of the scheduler in the shaper according to this memory.",
    /* SCH_FLOW_GROUP_MEMORY__FGM */ "Each entry holds the group of eight schedulers, indicating the group (0-2) assigned to the scheduler. The flows belonging to a scheduler are attached to the group of the scheduler in the shaper according to this memory.",
    /* SCH_FLOW_INSTALLED_MEMORY_FIM */ "Each entry holds the data of 16 flows.",
    /* SCH_FLOW_INSTALLED_MEMORY__FIM */ "The FIM is 8192 entry memory. Each entry holds the data of 16 flows.",
    /* SCH_FLOW_STATUS_MEMORY_FSM */ "Each entry contains 8 bits which states the status of 4 flows. This memory holds the status of flows/schedulers. For a flow the entry reflects the status of the ingress queue. For a scheduler the entry reflects wether it has a flow attached.\n                   A flow may be at one of 3 states: OFF, ON-SLOW and ON-NORMAL",
    /* SCH_FLOW_STATUS_MEMORY_FSM_B */ "Duplication for FSM memory",
    /* SCH_FLOW_STATUS_MEMORY__FSM */ "The FSM is 32k entry Memory. Each entry contains 8 bits which\n                   states the status of 4 flows. This memory holds the status of flows/schedulers. For a flow the entry reflects the status of the ingress queue. For a scheduler the entry reflects wether it has a flow attached.\n                   A flow may be at one of 3 states: OFF, ON-SLOW and ON-NORMAL",
    /* SCH_FLOW_SUB_FLOW_FSF     */ "The FSF states whether a flow is a regular or composite flow.\n                   One bit is allocated for every two flows.\n                   If the bit is not set, both odd and even flows are regular flows.\n                   If the Bit is set, then the Even flow is a composite flow and the odd flow is not valid.\n                   Each entry holds the data for 16 composite flows.",
    /* SCH_FLOW_SUB_FLOW__FSF    */ "The FSF states whether a flow is a regular or composite flow.\n                   One bit is allocated for every two flows.\n                   If the bit is not set, both odd and even flows are regular flows.\n                   If the Bit is set, then the Even flow is a composite flow and the odd flow is not valid.\n                   Each entry holds the data for 16 composite flows.",
    /* SCH_FLOW_TO_FIP_MAPPING_FFM */ "The FFM is an 16K-entry memory. Each entry maps a block of eight local flow-IDs to the source-FAP. (When reading each of these eight flows, the same source FAP id will be received. For writing the DeviceNumber associated with flow x, you need to access address x13:3. Entries are meaningful only for mapping flows (And not for aggregates).",
    /* SCH_FLOW_TO_FIP_MAPPING__FFM */ "The FFM is an 16K-entry memory. Each entry maps a block of eight local flow-IDs to the source-FAP. (When reading each of these eight flows, the same source FAP id will be received. For writing the DeviceNumber associated with flow x, you need to access address x13:3. Entries are meaningful only for mapping flows (And not for aggregates).",
    /* SCH_FLOW_TO_QUEUE_MAPPING_FQM */ "The FQM is a 32k-entry memory. Each entry relates Four flows to one Base Queue, Based on SubFlowMode. If SubFlowMode is set, then four queues are mapped to four even flows. Base_flow15:2 is the address to the table.\n                   The mapping between the flow and the base queue is done\n                   Per four flows.",
    /* SCH_FLOW_TO_QUEUE_MAPPING__FQM */ "The FQM is a 32k-entry memory. Each entry relates Four flows to one Base Queue, Based on SubFlowMode. If SubFlowMode is set, then four queues are mapped to four even flows. Base_flow15:2 is the address to the table.\n                   The mapping between the flow and the base queue is done\n                   Per four flows.",
    /* SCH_FORCE_STATUS_MESSAGE  */ "This register enables the CPU to emulate a Flow Status Message.\n                   One application of this is for CBR/TDM traffic types. As a result, a steady stream of credit is guaranteed to the flow, eliminating the delay and jitter associated with the scheduling. The Write value contains the two fields of the status message. This message is not authenticated with the FFQ; hence there is no need for the other values. This address is Write only. To check if the operation has finished, read add ...",
    /* SCH_HR_SCHEDULER_CONFIGURATION_SHC */ "The SHC is a 256-entry memory. This memory describes an HR scheduler operating in single, dual, or Enhanced mode. It also holds the High/Low flow-control mode to be applied for the HR.",
    /* SCH_HR_SCHEDULER_CONFIGURATION__SHC */ "The SHC is a 256-entry memory. This memory describes an HR scheduler operating in single, dual, or Enhanced mode. It also holds the High/Low flow-control mode to be applied for the HR.",
    /* SCH_MAX_PORT_QUEUE_SIZE_MPQS */ "INTERNAL",
    /* SCH_MEM_01300000          */ "INTERNAL",
    /* SCH_MEM_01400000          */ "INTERNAL",
    /* SCH_MEM_01500000          */ "INTERNAL",
    /* SCH_MEM_01600000          */ "INTERNAL",
    /* SCH_MEM_01700000          */ "INTERNAL",
    /* SCH_MEM_01800000          */ "INTERNAL",
    /* SCH_MEM_01900000          */ "INTERNAL",
    /* SCH_MEM_03000000          */ "INTERNAL",
    /* SCH_MEM_03100000          */ "INTERNAL",
    /* SCH_MEM_03200000          */ "INTERNAL",
    /* SCH_MEM_03300000          */ "INTERNAL",
    /* SCH_MEM_03400000          */ "INTERNAL",
    /* SCH_MEM_03500000          */ "INTERNAL",
    /* SCH_MEM_04700000          */ "INTERNAL",
    /* SCH_MEM_07100000          */ "INTERNAL",
    /* SCH_MEM_07300000          */ "INTERNAL",
    /* SCH_MEM_07500000          */ "INTERNAL",
    /* SCH_MEM_30000000          */ "INTERNAL",
    /* SCH_MEM_01A00000          */ "INTERNAL",
    /* SCH_MEM_01B00000          */ "INTERNAL",
    /* SCH_MEM_01C00000          */ "INTERNAL",
    /* SCH_MEM_01F00000          */ "INTERNAL",
    /* SCH_MEM_03A00000          */ "INTERNAL",
    /* SCH_MEM_03B00000          */ "INTERNAL",
    /* SCH_MEM_03C00000          */ "INTERNAL",
    /* SCH_MEM_03D00000          */ "INTERNAL",
    /* SCH_MEM_03E00000          */ "INTERNAL",
    /* SCH_MEM_03F00000          */ "INTERNAL",
    /* SCH_MEM_04A00000          */ "INTERNAL",
    /* SCH_MEM_04D00000          */ "INTERNAL",
    /* SCH_ONE_PORT_NIF_CONFIGURATION_OPNC */ "",
    /* SCH_ONE_PORT_NIF_CONFIGURATION__OPNC */ "",
    /* SCH_PIR_SHAPERS_DYNAMIC_TABEL_PSDT */ "INTERNAL",
    /* SCH_PIR_SHAPERS_STATIC_TABEL_PSST */ "Shaper define per each TC (HR). holds Quanta to add and max-burst per each HR",
    /* SCH_PIR_SHAPERS_STATIC_TABEL__PSST */ "Shaper define per each TC (HR). holds Quanta to add and max-burst per each HR",
    /* SCH_PIR_SHAPER_CALENDAR_PSC */ "Holds pointer to PSST",
    /* SCH_PIR_SHAPER_CALENDAR__PSC */ "Holds pointer to PSST",
    /* SCH_PORT_ENABLE_PORTEN    */ "Enables HR scheduler to function as Scheduler-Port.",
    /* SCH_PORT_ENABLE__PORTEN   */ "Enables HR scheduler to function as Scheduler-Port.",
    /* SCH_PORT_GROUP_PFGM       */ "Holds Port to Group mappings",
    /* SCH_PORT_GROUP__PFGM      */ "Holds Port to Group mappings",
    /* SCH_PORT_QUEUE_SIZE_PQS   */ "(Pqs) - The PQS is an 256-entry memory. Each entry holds the data relevant for system RED.\n                   Each read returns the data of PQS and MPQS",
    /* SCH_PORT_QUEUE_SIZE__PQS  */ "The PQS is an 256-entry memory. Each entry holds the data relevant for system RED.\n                   Each read returns the data of PQS and MPQS",
    /* SCH_PORT_SCHEDULER_MAP_PSM */ "Holds the mapping of each of the 8 HR schedulers to each of the 8PGs and WFQ of the Port-Scheduler (PS)",
    /* SCH_PORT_SCHEDULER_MAP__PSM */ "Holds the mapping of each of the 8 HR schedulers to each of the 8PGs and WFQ of the Port-Scheduler (PS)",
    /* SCH_PORT_SCHEDULER_WEIGHTS_PSW */ "Holds the weight of each PG, the weight is valid only if the relevant bit in the field PSM.PgWfqValid is set",
    /* SCH_PORT_SCHEDULER_WEIGHTS__PSW */ "Holds the weight of each PG, the weight is valid only if the relevant bit in the field PSM.PgWfqValid is set",
    /* SCH_PS_8P_RATES_PSR       */ "Sets 8p-port-scheduler rate, used for dvs priority propagation",
    /* SCH_QPAIR_TO_PORT_MAP_QPM */ "(Backdoor flow-control) Maps each qpair from egq (both cores) to Port (HR) index. If valid bit is reset, the qpair is not mapped to any port.",
    /* SCH_RCI_CREDIT_JITTER_HIGH_MAP */ "Threshold is according to the fields per flow in FDMS memory concatenated with fabric RCI level\n CrdtJtrLowThXY:\n X is for HighOrLowFlow\n Y is for FabricOrLocalFlow",
    /* SCH_RCI_CREDIT_JITTER_LOW_MAP */ "Threshold is according to the fields per flow in FDMS memory concatenated with fabric RCI level\n CrdtJtrLowThXY:\n X is for HighOrLowFlow\n Y is for FabricOrLocalFlow",
    /* SCH_RCI_UNLINK_FLOW_TH_MAP */ "Threshold is according to the fields per flow in FDMS memory concatenated with fabric RCI level\n If lfsr is less than threshold, the flow will be unlinked",
    /* SCH_SCHEDULER_CREDIT_GENERATION_CALENDAR_CAL_0 */ "Each of the ChNIFs maintain two calendars. Passive and Active. 4 interfaces has 1k calendar length and the rest have 256 entries calendar. The length of each calendar is configured using the variables CALALen and CALBLen for each of the Channelized NIFs. Each calendar entry specifies one Port-Scheduler. A Port-Scheduler with n occurrences in the calendar is awarded n CALxLen of its interface rate. At a single point in time, one calendar is designated as Active, and the other as Standby. The conf ...",
    /* SCH_SCHEDULER_CREDIT_GENERATION_CALENDAR_CAL_1 */ "See description of SchedulerCreditGenerationCalendar_cal0",
    /* SCH_SCHEDULER_CREDIT_GENERATION_CALENDAR_CAL_2 */ "See description of SchedulerCreditGenerationCalendar_cal0",
    /* SCH_SCHEDULER_CREDIT_GENERATION_CALENDAR_CAL_3 */ "See description of SchedulerCreditGenerationCalendar_cal0",
    /* SCH_SCHEDULER_CREDIT_GENERATION_CALENDAR_CAL_4 */ "See description of SchedulerCreditGenerationCalendar_cal0",
    /* SCH_SCHEDULER_CREDIT_GENERATION_CALENDAR_CAL_5 */ "See description of SchedulerCreditGenerationCalendar_cal0",
    /* SCH_SCHEDULER_CREDIT_GENERATION_CALENDAR_CAL_6 */ "See description of SchedulerCreditGenerationCalendar_cal0",
    /* SCH_SCHEDULER_CREDIT_GENERATION_CALENDAR_CAL_7 */ "See description of SchedulerCreditGenerationCalendar_cal0",
    /* SCH_SCHEDULER_CREDIT_GENERATION_CALENDAR_CAL_8 */ "See description of SchedulerCreditGenerationCalendar_cal0",
    /* SCH_SCHEDULER_CREDIT_GENERATION_CALENDAR_CAL_9 */ "See description of SchedulerCreditGenerationCalendar_cal0",
    /* SCH_SCHEDULER_CREDIT_GENERATION_CALENDAR_CAL_10 */ "See description of SchedulerCreditGenerationCalendar_cal0",
    /* SCH_SCHEDULER_CREDIT_GENERATION_CALENDAR_CAL_11 */ "See description of SchedulerCreditGenerationCalendar_cal0",
    /* SCH_SCHEDULER_CREDIT_GENERATION_CALENDAR_CAL_12 */ "See description of SchedulerCreditGenerationCalendar_cal0",
    /* SCH_SCHEDULER_CREDIT_GENERATION_CALENDAR_CAL_13 */ "See description of SchedulerCreditGenerationCalendar_cal0",
    /* SCH_SCHEDULER_CREDIT_GENERATION_CALENDAR_CAL_14 */ "See description of SchedulerCreditGenerationCalendar_cal0",
    /* SCH_SCHEDULER_CREDIT_GENERATION_CALENDAR_CAL_15 */ "See description of SchedulerCreditGenerationCalendar_cal0",
    /* SCH_SCHEDULER_CREDIT_GENERATION_CALENDAR_CAL_16 */ "See description of SchedulerCreditGenerationCalendar_cal0",
    /* SCH_SCHEDULER_CREDIT_GENERATION_CALENDAR_CAL_17 */ "See description of SchedulerCreditGenerationCalendar_cal0",
    /* SCH_SCHEDULER_CREDIT_GENERATION_CALENDAR_CAL_18 */ "See description of SchedulerCreditGenerationCalendar_cal0",
    /* SCH_SCHEDULER_CREDIT_GENERATION_CALENDAR_CAL_19 */ "See description of SchedulerCreditGenerationCalendar_cal0",
    /* SCH_SCHEDULER_CREDIT_GENERATION_CALENDAR_CAL_20 */ "See description of SchedulerCreditGenerationCalendar_cal0",
    /* SCH_SCHEDULER_CREDIT_GENERATION_CALENDAR_CAL_21 */ "See description of SchedulerCreditGenerationCalendar_cal0",
    /* SCH_SCHEDULER_CREDIT_GENERATION_CALENDAR_CAL_22 */ "See description of SchedulerCreditGenerationCalendar_cal0",
    /* SCH_SCHEDULER_CREDIT_GENERATION_CALENDAR_CAL_23 */ "See description of SchedulerCreditGenerationCalendar_cal0",
    /* SCH_SCHEDULER_CREDIT_GENERATION_CALENDAR_CAL_24 */ "See description of SchedulerCreditGenerationCalendar_cal0",
    /* SCH_SCHEDULER_CREDIT_GENERATION_CALENDAR_CAL_25 */ "See description of SchedulerCreditGenerationCalendar_cal0",
    /* SCH_SCHEDULER_CREDIT_GENERATION_CALENDAR_CAL_26 */ "See description of SchedulerCreditGenerationCalendar_cal0",
    /* SCH_SCHEDULER_CREDIT_GENERATION_CALENDAR_CAL_27 */ "See description of SchedulerCreditGenerationCalendar_cal0",
    /* SCH_SCHEDULER_CREDIT_GENERATION_CALENDAR_CAL_28 */ "See description of SchedulerCreditGenerationCalendar_cal0",
    /* SCH_SCHEDULER_CREDIT_GENERATION_CALENDAR_CAL_29 */ "See description of SchedulerCreditGenerationCalendar_cal0",
    /* SCH_SCHEDULER_CREDIT_GENERATION_CALENDAR_CAL_30 */ "See description of SchedulerCreditGenerationCalendar_cal0",
    /* SCH_SCHEDULER_CREDIT_GENERATION_CALENDAR_CAL_31 */ "See description of SchedulerCreditGenerationCalendar_cal0",
    /* SCH_SCHEDULER_CREDIT_GENERATION_CALENDAR__CAL */ "The CAL is a 20k-entry memory. Each of the eight NIFs, the CPU, and the recycle interfaces maintain two calendars. Passive and Active. In total there are 20 calendars (10 Interfaces x 2 Calendars). Each calendar has 1k entries. The length of each calendar is configured using the variables CALALen and CALBLen for each of the 8 Channelized NIFs, the CPU, and the Recycle. Each calendar entry specifies one HR-Scheduler. An HR-Scheduler with n occurrences in the calendar is awarded n CALxLen of its i ...",
    /* SCH_SCHEDULER_ENABLE_MEMORY_SEM */ "The SEM is a 4k-entry memoryeach entry holds data for eight schedulers.\n                   The Scheduler-Enable-Memory has one bit per scheduler. If a bit is set, this indicates that the corresponding scheduler is in fact used as a scheduler; if not set this indicates that the scheduler is not used and the flow that feeds credits to the scheduler is free to be used for other purposes.\n                   There are a total of 16k schedulers:\n                   8192 Class schedulers (In entries 0-1 ...",
    /* SCH_SCHEDULER_ENABLE_MEMORY_SEM_B */ "INTERNAL",
    /* SCH_SCHEDULER_ENABLE_MEMORY__SEM */ "The SEM is a 4k-entry memoryeach entry holds data for eight schedulers.\n                   The Scheduler-Enable-Memory has one bit per scheduler. If a bit is set, this indicates that the corresponding scheduler is in fact used as a scheduler; if not set this indicates that the scheduler is not used and the flow that feeds credits to the scheduler is free to be used for other purposes.\n                   There are a total of 16k schedulers:\n                   8192 Class schedulers (In entries 0-1 ...",
    /* SCH_SCHEDULER_INIT        */ "Initialization of the scheduler is done in order to initialize all dynamic structures. The user should initialize the scheduler in the start up sequence by writing to the bit below. This is done by an indirect write to the address below, which will start a process that initializes the internal structures of the scheduler. The initialization process takes approximately 56K core clocks to complete. To check if it is finished, read the register 040. Wait until the trigger is reset.",
    /* SCH_SCH_FCR_RXI           */ "SMP RXI memory",
    /* SCH_SHAPER_DESCRIPTOR_MEMORY_STATIC_SHDS */ "The SHDS is a 64k-entry memory. This memory contains the Shaper-Flow-Attributes. Each entry contains the data for two flows. For each flow, this memory holds the Shaper-Flow-Attributes. The Flow-Attributes are set by the user and are never modified by the logic.\n                   The Shaper receives a credit every four clocks. The bandwidth given to a flow is the Rate (see calculation below) multiplied by the shaper bandwidth.",
    /* SCH_SHAPER_DESCRIPTOR_MEMORY_STATIC__SHDS */ "The SHDS is a 64k-entry memory. This memory contains the Shaper-Flow-Attributes. Each entry contains the data for two flows. For each flow, this memory holds the Shaper-Flow-Attributes. The Flow-Attributes are set by the user and are never modified by the logic.\n                   The Shaper receives a credit every four clocks. The bandwidth given to a flow is the Rate (see calculation below) multiplied by the shaper bandwidth.",
    /* SCH_SHARED_DEVICE_RATE_SHARED_DRM */ "The DRM is a 296-entry memory. The selection of the current active rate is determined by the number of current active links (0 36) and the current status of fabric congestion, as reflected in the RCI bucket level (0 7). The address is a concatenation of NumActiveLinks and RCILevel.",
    /* SCH_SLOW_FACTOR_MEMORY_SFM */ "Slow Factor Memory",
    /* SCH_SLOW_SCALE_A_SSA      */ "Slow factor from the IPS defines the entry to this table.",
    /* SCH_SLOW_SCALE_B_SSB      */ "Slow factor from the IPS defines the entry to this table.",
    /* SCH_TOKEN_MEMORY_CONTROLLER_TMC */ "The token memory holds the number of tokens currently available for a sub-flow/flow/scheduler.\n                   Updating the initial token count is done by updating the field MaxBurst and MaxBurstUpdate in the SHDS. (Please consult API regarding update of initial values in this memory).",
    /* SCH_TOKEN_MEMORY_CONTROLLER_TMC_MSB */ "The token memory holds the number of tokens currently available for a sub-flow/flow/scheduler.\n                   Updating the initial token count is done by updating the field MaxBurst and MaxBurstUpdate in the SHDS. (Please consult API regarding update of initial values in this memory).",
    /* SCH_TOKEN_MEMORY_CONTROLLER__TMC */ "The TMC is a 128k-entry memory. The token memory holds the number of tokens currently available for a sub-flow/flow/scheduler.\n                   Updating the initial token count is done by updating the field MaxBurst and MaxBurstUpdate in the SHDS. (Please consult API regarding update of initial values in this memory).",
    /* SERVICE_COS_MAP           */ "index by {service_cos_profile_idx[1:0], int_pri[3:0]",
    /* SERVICE_PORT_MAP          */ "index by {service_port_profile_idx[2:0], local_dst_port[6:0]",
    /* SERVICE_QUEUE_MAP         */ "index by {0, vid[11:0] or {1, vfi[11:0]}",
    /* SER_ACC_TYPE_MAP          */ "Maps the ACC_TYPE to an offset to the SER_RANGE_RESULT.START_ADDR, so as to separate parity information for different pipes",
    /* SER_MEMORY                */ "ECC/Parity bits",
    /* SER_RESULT_0              */ "Error information",
    /* SER_RESULT_1              */ "Error information",
    /* SER_RESULT_DATA_0         */ "Corrected SBUS data if SER_CONFIG.CORRECT_1B set and ECC mode is used, else raw SBUS data. Should be considered invalid if corresponding ERROR_0_VAL register bit is not set",
    /* SER_RESULT_DATA_1         */ "Corrected SBUS data if SER_CONFIG.CORRECT_1B set and ECC mode is used, else raw SBUS data. Should be considered invalid if corresponding ERROR_0_VAL register bit is not set",
    /* SER_RESULT_EXPECTED_0     */ "Expected ECC. In parity mode, its not updated. Valid only if SER_RESULT_CTL.ERROR_0_VAL is set",
    /* SER_RESULT_EXPECTED_1     */ "Expected ECC. In parity mode, its not updated. Valid only if SER_RESULT_CTL.ERROR_1_VAL is set",
    /* SFLOW_ING_DATA_SOURCE     */ "Ingress Sflow Data Table.",
    /* SFLOW_ING_FLEX_DATA_SOURCE */ "Ingress Flex Sflow Data Table.",
    /* SGPP_TO_PIPE_MAPPING      */ "Map SGPP to x- or y-pipe for OAM UPMEP TX packet",
    /* SHAPER_BUCKET_0           */ "Data base for shaper working credit",
    /* SHAPER_BUCKET_1           */ "Data base for shaper working credit",
    /* SHAPER_BUCKET_2           */ "Data base for shaper working credit",
    /* SHAPER_BUCKET_3           */ "Data base for shaper working credit",
    /* SHAPER_EVENT              */ "Shaper change soon status",
    /* SHAPER_LEAK_0             */ "Data base to define shaper leak rates in bits per clock cycle and threshold",
    /* SHAPER_LEAK_1             */ "Data base to define shaper leak rates in bits per clock cycle and threshold",
    /* SHAPER_LEAK_2             */ "Data base to define shaper leak rates in bits per clock cycle and threshold",
    /* SHAPER_LEAK_3             */ "Data base to define shaper leak rates in bits per clock cycle and threshold",
    /* SHAPER_STATE              */ "shaped_bit flags for 128 queues",
    /* SIF_BILLING_CGM_INPUT_MEM */ "Input fifo mem",
    /* SIF_BILLING_EGR_INPUT_MEM */ "Input fifo mem",
    /* SIF_QSIZE_CGM_INPUT_MEM   */ "Input fifo mem",
    /* SIF_ST_PORT_MEM           */ "Statistics-Port data FIFO.  Access to this FIFO is forbidden.",
    /* SLQ_COUNTER               */ "This is the SLQ Counter database",
    /* SOURCE_MOD_PROXY_TABLE    */ "Source MODID table for Higig Lookup",
    /* SOURCE_NODE_TYPE_TAB      */ "2 bits source node type lookup by source_node[7:0] field in TS header for UC packlets.",
    /* SOURCE_TRUNK_MAP_MODBASE  */ "Specifies the port(s) that is (are) CPU.",
    /* SOURCE_TRUNK_MAP_TABLE    */ "Source Trunk Map Table",
    /* SOURCE_VP                 */ "Source Virtual Port Properties",
    /* SOURCE_VP_2               */ "TPID parse control for 2nd parser",
    /* SOURCE_VP_ATTRIBUTES_2    */ "Attributes associated with Looped back WLAN Packets.",
    /* SPB_BUF_LINK              */ "Buffers link memory",
    /* SPB_CONTEXT_MRU           */ "Maximum reception size for each reassembly context. Access this memory with Reassembly-context",
    /* SPB_CONTEXT_PROFILE_MAP   */ "Map reassembly context to context profile, used for packet reject logic.",
    /* SPB_COUNTERS              */ "Counters per reassembly context",
    /* SPB_COUNTERS_SHADOW       */ "Counters per reassembly context, read from here also clear the counters.\n Write is not working, ignored.",
    /* SPB_DEL_CMD_RXI           */ "Delete command RXI from IPT",
    /* SPB_DFM                   */ "Delete FIFO memory",
    /* SPB_FBM_0                 */ "Free Buffer Memory Num0",
    /* SPB_FBM_1                 */ "Free Buffer Memory Num1",
    /* SPB_IRE_RXI_CTRL          */ "IRE RXI memory",
    /* SPB_IRE_RXI_DATA          */ "IRE RXI memory",
    /* SPB_IRE_RXI_MEM           */ "IRE RXI memory",
    /* SPB_PACKET_REJECT_CFG     */ "Per packet profile ContextProfile2,TC3DP2 a configuration of reject or not when SPB is almost full (amount of free buffer is below a configurable TH).\n Because TH should maintain TH1 =< TH2 =< TH3 the first TH (TH1) is low priority and TH2 is high priority. for high pririty TC-DP set the RejectOnTh2 and for low priority set RejectOnTh1 or both RejectOnTh1 and RejectOnTh2.",
    /* SPB_PKT_RLS_RXI           */ "CGM Packet Release RXI memory",
    /* SPB_PSF                   */ "PEC Pointer State FIFO",
    /* SPB_PSM                   */ "PEC Pointer State Memory",
    /* SPB_RCNT                  */ "Read Counter Memory.\n Every row has 4 counters of 12b (up to 4k copies).",
    /* SPB_REL_BUFF_FIFO         */ "Release Buffer FIFO\n 0-S2F\n 1-S2D",
    /* SPB_REL_RPRT_FIFO         */ "Release report FIFO\n 0-S2F\n 1-S2D",
    /* SPB_RSM                   */ "PEC Reassembly State Memory",
    /* SPB_SRAM_ADDRESS_SPACE    */ "SRAM memory space, addressable by CPU.\n Address should be logical (i.e. represent duff pointer).",
    /* SPB_S_2D_PDQ_RXI          */ "S2D-Packet Dequeue Command RXI",
    /* SPB_S_2D_RPC_SORT_FIFO    */ "RPC Sort FIFO",
    /* SPB_S_2D_TCF              */ "S2D-TCF",
    /* SPB_S_2F_PDQ_RXI          */ "S2F-Packet Dequeue Command RXI",
    /* SPB_S_2F_RPC_SORT_FIFO    */ "RPC Sort FIFO",
    /* SPB_S_2F_TCF              */ "S2F-TCF",
    /* SPB_TX_CMD_RPRT           */ "non LCD Reports Fifo",
    /* SPORT_EHG_RX_TUNNEL_DATA  */ "Embedded Higig Rx tunnel data memory",
    /* SPORT_EHG_RX_TUNNEL_MASK  */ "Embedded Higig Rx tunnel data memory",
    /* SPORT_EHG_TX_TUNNEL_DATA  */ "Embedded Higig Rx tunnel data memory",
    /* SQM_DEQ_READ_WEIGHT       */ "DEQ Read Weight\n\n Access using VOQ.Queue-Type",
    /* SQM_FREE_PDB_MEMORY       */ "Free PDB",
    /* SQM_PACKET_DESCRIPTOR_MEMORY */ "Full Multicast User Count\n Number of duplications of the FullMulticast Dbuffs (UserCnt+1).",
    /* SQM_PDB_LINK_LIST         */ "PDBLL - PDB link list",
    /* SQM_PDM                   */ "Packet descriptor memory for SQM-PDM",
    /* SQM_QUEUE_DATA_MEMORY     */ "Free PDB",
    /* SQM_TX_BUNDLE_MEMORY      */ "INTERNAL",
    /* SQM_TX_PACKET_DESCRIPTOR_FIFOS_MEMORY */ "INTERNAL",
    /* SRC_COMPRESSION           */ "Compresses the IPv6 SIPs. Remaps IPv4 SIPs.",
    /* SRC_COMPRESSION_DATA_ONLY */ "Compresses the IPv6 SIPs. Remaps IPv4 SIPs.",
    /* SRC_COMPRESSION_DATA_ONLY_PIPE0 */ "Compresses the IPv6 SIPs. Remaps IPv4 SIPs.",
    /* SRC_COMPRESSION_DATA_ONLY_PIPE1 */ "Compresses the IPv6 SIPs. Remaps IPv4 SIPs.",
    /* SRC_COMPRESSION_DATA_ONLY_PIPE2 */ "Compresses the IPv6 SIPs. Remaps IPv4 SIPs.",
    /* SRC_COMPRESSION_DATA_ONLY_PIPE3 */ "Compresses the IPv6 SIPs. Remaps IPv4 SIPs.",
    /* SRC_COMPRESSION_PIPE0     */ "Compresses the IPv6 SIPs. Remaps IPv4 SIPs.",
    /* SRC_COMPRESSION_PIPE1     */ "Compresses the IPv6 SIPs. Remaps IPv4 SIPs.",
    /* SRC_COMPRESSION_PIPE2     */ "Compresses the IPv6 SIPs. Remaps IPv4 SIPs.",
    /* SRC_COMPRESSION_PIPE3     */ "Compresses the IPv6 SIPs. Remaps IPv4 SIPs.",
    /* SRC_COMPRESSION_TCAM_ONLY */ "Compresses the IPv6 SIPs. Remaps IPv4 SIPs.",
    /* SRC_COMPRESSION_TCAM_ONLY_PIPE0 */ "Compresses the IPv6 SIPs. Remaps IPv4 SIPs.",
    /* SRC_COMPRESSION_TCAM_ONLY_PIPE1 */ "Compresses the IPv6 SIPs. Remaps IPv4 SIPs.",
    /* SRC_COMPRESSION_TCAM_ONLY_PIPE2 */ "Compresses the IPv6 SIPs. Remaps IPv4 SIPs.",
    /* SRC_COMPRESSION_TCAM_ONLY_PIPE3 */ "Compresses the IPv6 SIPs. Remaps IPv4 SIPs.",
    /* SRC_MODID_BLOCK           */ "Source Modid based blocking mask table",
    /* SRC_MODID_EGRESS          */ "Source Modid based blocking mask table",
    /* SRC_MODID_INGRESS_BLOCK   */ "Source Modid based blocking mask table",
    /* SR_EGR_COUNTER_PROFILE    */ "SR Ingress Counter Profile table, Index: SR_FLOW_EGR_COUNTER_CONTROL.SR_EGR_COUNTER_PROFILE",
    /* SR_EGR_ING_PORT           */ "SR ingress port setting table in egress pipeline. Index: SGPP.",
    /* SR_EGR_PORT               */ "SR Egress Port configuration table.",
    /* SR_ETHERTYPES             */ "Supervisory frame identify Ethertype setting register.",
    /* SR_FLOW_COUNT_POOL0       */ "Counts number over this flow.",
    /* SR_FLOW_COUNT_POOL1       */ "Counts number over this flow.",
    /* SR_FLOW_COUNT_POOL2       */ "Counts number over this flow.",
    /* SR_FLOW_COUNT_POOL3       */ "Counts number over this flow.",
    /* SR_FLOW_COUNT_POOL4       */ "Counts number over this flow.",
    /* SR_FLOW_COUNT_POOL5       */ "Counts number over this flow.",
    /* SR_FLOW_COUNT_POOL6       */ "Counts number over this flow.",
    /* SR_FLOW_COUNT_POOL7       */ "Counts number over this flow.",
    /* SR_FLOW_EGR_COUNTER_CONTROL */ "SR counter pool control table, Index: FLOWID.",
    /* SR_FLOW_ING_COUNTER_CONTROL */ "SR counter pool control table, Index: FLOWID.",
    /* SR_ING_COUNTER_PROFILE    */ "SR Ingress Counter Profile table, Index: SR_FLOW_ING_COUNTER_CONTROL.SR_ING_COUNTER_PROFILE",
    /* SR_ING_EGR_PORT           */ "Egress port SR configuration table.\nThis table is used to provide control setting per egress ports. Need to be in-sync with SR_EGR_PORT table",
    /* SR_ING_EGR_TRUNK          */ "Egress port SR configuration table.\nThis table is used to provide control setting per egress trunk ports. Need to be in-sync with SR_EGR_PORT table",
    /* SR_L2_ENTRY               */ "HW managed SR_L2_ENTRY table, all SR setting is included.",
    /* SR_LPORT_TAB              */ "SR LOOPBACK Port Profile Table",
    /* SR_MAC_LEARNING           */ "Per Port based L2 entry table. This table is indexed by logical port.",
    /* SR_MAC_LEARNING_VALID     */ "Per Port based L2 entry table. This table is indexed by logical port.",
    /* SR_MAC_PROXY_PROFILE      */ "table_description",
    /* SR_PORT_COUNT_OWN_RX      */ "Number of SR frames received on this flow, where MAC-SA is a proxy MAC.",
    /* SR_PORT_COUNT_RX          */ "Counts all SR-Tagged and normal Ethernet frames excluding link-local frames received on this port.",
    /* SR_PORT_COUNT_RX_DUPLICATES */ "Number of Duplicate SR frames received on this port.",
    /* SR_PORT_COUNT_RX_ERROR    */ "Number of SR frames received on this port with Error.",
    /* SR_PORT_COUNT_RX_OUTOFORDER */ "Number of SR frames that were received out of order on this port (PKT.SN != Previous PKT.SN + 1)",
    /* SR_PORT_COUNT_RX_PASSED   */ "Number of SR frames that are accepted and pass the duplicate discard mechanism.",
    /* SR_PORT_COUNT_RX_TAGGED   */ "Counts number of frames transmitted over this port that with SR Tag.",
    /* SR_PORT_COUNT_RX_TAG_ERROR */ "Number of SR frames received on this port with Tag Error such as Wrong Length.",
    /* SR_PORT_COUNT_RX_WRONG_LAN */ "Number of SR-tagged frames received on this port with wrong LAN_ID where  (Applies only to PRP ports)(Applies only to PRP ports).",
    /* SR_PORT_COUNT_TX          */ "Count all SR-Tagged and normal Ethernet frames excluding link-local frames transmitted on this port.",
    /* SR_PORT_COUNT_TX_TAGGED   */ "Counts number of frames transmitted over this port that with SR Tag.",
    /* SR_PORT_COUNT_UNEXPECTED_FRAME */ "Counts number of frames received on this port with wrong SR encapsulation. Such as receiving HSR frames from a PRP port.",
    /* SR_PORT_MTU_ERROR         */ "Counts number of packets that exceed MTU size of this ingress port.",
    /* SR_PORT_PROXY_MAC_ERROR   */ "Counts the number of packets dropped due to MAC-SA proxy error.",
    /* SR_PORT_SN_WINDOW_RESET   */ "Counts number of times HW has reset the SN_WINDOW.",
    /* SR_PORT_STU_ERROR         */ "Counts number of packets that exceed STU size of this ingress port.",
    /* SR_PORT_TABLE             */ "SR feature Port Configuration Table.i\nThis table is used to control SR basic setting on per port based. The port number corresponds to the index.\nLOOPBACK port should refer to SR_LPORT_TABLE.",
    /* SR_PORT_TX_MTU_ERROR      */ "Counts number of packets that exceed MTU size of this egress port.",
    /* SR_PORT_TX_STU_ERROR      */ "Counts number of packets that exceed STU size of this egress port.",
    /* SR_PRI_OFFSET             */ "New priority/ FLOWID OFFSET mapping table.",
    /* SR_RX                     */ "SR_RX setting table: All the main RX path attribution setting table.",
    /* SR_RX_FLOW_ID_POOL        */ "HW SR RX FLOWID identify Poll table.",
    /* SR_SN_HISTORY_0           */ "SR serence number history table, Index by SN_HISTORY_INDEX_X + SN_WINDOW_OFFSET_X (SR_RX table)",
    /* SR_SN_HISTORY_1           */ "Counts number over this flow.",
    /* SR_SN_HISTORY_2           */ "Counts number over this flow.",
    /* SR_SN_HISTORY_3           */ "Counts number over this flow.",
    /* SR_SN_HISTORY_4           */ "Counts number over this flow.",
    /* SR_SN_HISTORY_5           */ "Counts number over this flow.",
    /* SR_SN_HISTORY_6           */ "Counts number over this flow.",
    /* SR_SN_HISTORY_7           */ "Counts number over this flow.",
    /* SR_SN_HISTORY_8           */ "Counts number over this flow.",
    /* SR_SN_HISTORY_9           */ "Counts number over this flow.",
    /* SR_SN_HISTORY_10          */ "Counts number over this flow.",
    /* SR_SN_HISTORY_11          */ "Counts number over this flow.",
    /* SR_SN_HISTORY_12          */ "Counts number over this flow.",
    /* SR_SN_HISTORY_13          */ "Counts number over this flow.",
    /* SR_SN_HISTORY_14          */ "Counts number over this flow.",
    /* SR_SN_HISTORY_15          */ "Counts number over this flow.",
    /* SR_SUPERVISORY_MAC_ADDRESS */ "PRP/ HSR Supervisory frames identify MAC address setting register.",
    /* SR_SUPERVISORY_MAC_ADDRESS_DOT1CB */ "802.1CB Supervisory frames identify MAC address setting register.",
    /* SR_TX                     */ "SR TX table: Index: FLOW_ID",
    /* SR_TX_FLOW_ID_POOL        */ "HW SR TX FLOWID identify Poll table.",
    /* STATSCFG                  */ "This is the Central Statistic Configuration database",
    /* STATS_INTF_QUEUE_LIST     */ "Statistics Logic Queue Reporting List",
    /* STATS_INTF_SERVPOOL_LIST  */ "Statistics Service Pool Reporting List",
    /* STG_TAB                   */ "Spanning Tree Group state table",
    /* STU_PROFILE               */ "STU check table, Indexed by STU_PROFILE_INDEX (5 bits)",
    /* SUBPORT_MAP_TABLE         */ "Configuration Map for all the Sub-ports",
    /* SUBPORT_SHAPER_TABLE      */ "Parameters for the Min and Max Shapers used to shape the sub-ports",
    /* SUBPORT_TAG_SGPP_MAP      */ "Used for mapping COE subtending port to SGPP.",
    /* SUBPORT_TAG_SGPP_MAP_DATA_ONLY */ "SUBPORT_TAG_SGPP_MAP data only view.",
    /* SUBPORT_TAG_SGPP_MAP_ONLY */ "SUBPORT_TAG_SGPP_MAP TCAM only view",
    /* SUBPORT_TAG_TO_PP_PORT_MAP */ "SPVID to SGPP conversion table for Triple Vlan Application.\nThis table is looked up if PORT_TABLE.PORT_TYPE=4 i.e., CASCADED_FOR_TRIPLE_VLAN",
    /* SUBPORT_TAG_TO_PP_PORT_MAP_DATA_ONLY */ "SPVID to SGPP conversion table for Triple Vlan Application.\nThis table is looked up if PORT_TABLE.PORT_TYPE=4 i.e., CASCADED_FOR_TRIPLE_VLAN",
    /* SUBPORT_TAG_TO_PP_PORT_MAP_ONLY */ "Subport Tag  to ingress Packet Processing Port conversion table for Triple Vlan Application.\nThis table is looked up if PORT_TABLE.PORT_TYPE=4 i.e., CASCADED_FOR_TRIPLE_VLAN",
    /* SUBPORT_WERR_TABLE        */ "WERR parameters for for all the Sub-ports",
    /* SVC_METER_OFFSET_POLICY_TABLE */ "POLICY TABLE FOR SVC_METER_OFFSET_TCAM",
    /* SVC_METER_OFFSET_TCAM     */ "TCAM FOR SVC_METER_OFFSET_TCAM",
    /* SVM_DBG_01                */ "Used for determining the final outgoing color for all modes except hierarchial mode",
    /* SVM_DBG_02                */ "Used for determining the final outgoing color for all modes except hierarchial mode",
    /* SVM_DBG_03                */ "Used for determining the updates of Micro and macro committed buckets in Hierarchial mode",
    /* SVM_MACROFLOW_INDEX_TABLE */ "Used for computing the final meter index from the base meter index",
    /* SVM_METER_TABLE           */ "Used for computing the final meter index from the base meter index",
    /* SVM_OFFSET_TABLE          */ "Used for computing the final meter index from the base meter index",
    /* SVM_POLICY_TABLE          */ "Used for computing the final meter index from the base meter index",
    /* SVP_DISABLE_VLAN_CHECKS_TAB */ "Contains cntrls assoc with the 4K VLANs.",
    /* SYSPORT_PRI_HI            */ "Priority and next priority pairs for upper 8 COS in a Sys Port",
    /* SYSPORT_PRI_LO            */ "Priority and next priority pairs for lower 8 COS in a Sys Port",
    /* SYSPORT_TO_NODE           */ "Sysport to node mapping",
    /* SYSPORT_TO_QUEUE          */ "Sysport to base queue mapping, msb indicates multicast",
    /* SYSTEM_CONFIG_TABLE       */ "System Port Table. Holds fields necessary to futher parse a higig packet, address = {src_modid[6:0], src_port[5:0]} FeatureSpecific-Ethernet",
    /* SYSTEM_CONFIG_TABLE_MODBASE */ "Specifies the port(s) that is (are) CPU.",
    /* SYS_PORTMAP               */ "System Port Mapping Table (maps local system port number to a local physical port number)",
    /* TABLE0_LOG_TO_PHY_MAP     */ "Table 0 (VLAN_XLATE) Logical to Physical address mapping.  Maps upper 6 bits of the address.",
    /* TABLE1_LOG_TO_PHY_MAP     */ "Table 1 (L2_ENTRY) Logical to Physical address mapping.  Maps upper 6 bits of the address.",
    /* TABLE2_LOG_TO_PHY_MAP     */ "Table 2 (L3_ENTRY) Logical to Physical address mapping.  Maps upper 6 bits of the address.",
    /* TABLE3_LOG_TO_PHY_MAP     */ "Table 3 (EP_VLAN_XLATE) Logical to Physical address mapping.  Maps upper 6 bits of the address.",
    /* TABLE4_LOG_TO_PHY_MAP     */ "Table 4 (MPLS_ENTRY) Logical to Physical address mapping.  Maps upper 6 bits of the address.",
    /* TAIL_LLA                  */ "This database contains the queue tail pointers",
    /* TAPS_BB_CMD_NOP           */ "taps bb nop command definition",
    /* TAPS_BB_CMD_READ          */ "taps bb read command definition",
    /* TAPS_BB_CMD_WRITE         */ "taps bb write command definition",
    /* TAPS_BB_RAW_CMD_READ      */ "taps bb raw read command definition",
    /* TAPS_BB_RAW_CMD_WRITE     */ "taps bb raw write command definition",
    /* TAPS_BRR_CMD_NOP          */ "",
    /* TAPS_BRR_CMD_READ         */ "taps brr read command definition",
    /* TAPS_BRR_CMD_WRITE        */ "taps brr write command definition",
    /* TAPS_BRR_WIDE_CMD_READ    */ "taps brr wide read command definition",
    /* TAPS_BRR_WIDE_CMD_WRITE   */ "taps brr wide write command definition",
    /* TAPS_RPB_CMD_FIND_BUCKET  */ "taps rpb find bucket command definition",
    /* TAPS_RPB_CMD_NOP          */ "",
    /* TAPS_RPB_CMD_PROPAGATE    */ "taps rpb propagate command definition",
    /* TAPS_RPB_CMD_READ         */ "taps rpb read command definition",
    /* TAPS_RPB_CMD_REPLACE      */ "taps rpb replace command definition",
    /* TAPS_RPB_CMD_WRITE        */ "taps rpb write command definition",
    /* TAPS_RPB_RAW_TCAM_CMD_READ */ "taps rpb raw tcam read command definition",
    /* TAPS_RPB_RAW_TCAM_CMD_WRITE */ "taps rpb raw tcam write command definition",
    /* TAR_BITMAP_MAPPING_TABLE  */ "Bitmap mapping table.\n Map Offset (2), Index(6) to destination.",
    /* TAR_DESTINATION_TABLE     */ "This memory maps a system port ID to a queue number and a traffic class profile",
    /* TAR_FLOW_AGR_MAP          */ "Flow-Aggregate mapping table\n Map Flow-Aggregate-ID12:0 to Flow-Quartet and Lag-Group.",
    /* TAR_FLOW_TABLE            */ "Flow profile per Folw.\n There are 16K flows. Profile per 4 flows.\n Access this table with flow14:4 and pick profile from the entry using flow3:2",
    /* TAR_LAG_MAPPING           */ "LAG mapping table.\n Given the LAG and its member specifies the destination.\n Entry into table is LAG, LAG-member.",
    /* TAR_LAG_NEXT_MEMBER       */ "For LAG resolution, this memory is read, and if it is in round-robin load-balanced mode, the output received is the offset corresponding to the LAG. Note that in this case, the offset is incremented by one and written back to the memory",
    /* TAR_LAG_TO_LAG_RANGE      */ "LAG range memory table.\n Specifies for each LAG its range",
    /* TAR_MCDB                  */ "96k Ingress Multicast Replication Data Base. (Physically shared with egress MLL table). Each multicast ID can result in up to 4k different copies of the incoming packet at the ingress FAP. Each copy is associated with a configurable Queue/destination System port and an OutLif.\n Ingress - each entry in this table can either:\n  - Single copy pointed to the next entry in the linked list. The OutLif can be further used at the egress FOP as a key for Egress Multicast lookup and can be used by egress  ...",
    /* TAR_MCDB_BITMAP_REPLICATION_ENTRY */ "Ingress\n Pointer to Bitmap replication with Outlif to use on all bitmap copies",
    /* TAR_MCDB_BITMAP_REPLICATION_VECTOR */ "Ingress\n Bitmap replication vector",
    /* TAR_MCDB_DOUBLE_REPLICATION */ "Ingress\n Double replication pointed to the next entry in the table. Each copy has dedicated Outlif. The OutLif can be further used at the egress FOP as a key for Egress Multicast lookup and can be used by egress Packet Processor.",
    /* TAR_MCDB_EGRESS_BITMAP_FORMAT */ "Egress:\n Generate up to 64 copies. All having the same OutLIF.",
    /* TAR_MCDB_EGRESS_BITMAP_POINTER_FORMAT */ "Egress:\n Generate up to 256 copies, according to the bitmap that is pointed to by the Bitmap-Pointer. All copies get the OutLIF indicated in the entry.",
    /* TAR_MCDB_EGRESS_DOUBLE_CUD_FORMAT */ "Egress:\n Generate up to two copies, both having the same OutLIF(36 bits) but different PP-DSP.",
    /* TAR_MCDB_EGRESS_TDM_FORMAT */ "Egress:\n Egress TDM Format",
    /* TAR_MCDB_EGRESS_TWO_COPIES_FORMAT */ "Egress:\n Generate up to two copies, each copy has its OutLIF.",
    /* TAR_MCDB_SINGLE_REPLICATION */ "Ingress\n Single copy pointed to the next entry in the linked list. The OutLif can be further used at the egress FOP as a key for Egress Multicast lookup and can be used by egress Packet Processor.",
    /* TAR_SMOOTH_DIVISION       */ "Smooth division is used in lag resolution in case LagToLagRange.Mode == 2.\n Maps lag-range (from LagToLagRange) and Lag-Lb-Key to Member.\n Access this table with lag-range, lag-lb-key7:1",
    /* TAR_SMOOTH_DIVISION_GROUP_SIZE */ "",
    /* TAR_SNOOP_MIRROR_DEST_TABLE */ "Snoop and Mirror table. This memory maps the incoming snoop command or mirror command to a replication. The first half is for mirror; the second half is for snoop.\n This table is split into two parts.",
    /* TAR_STACK_FEC_RESOLVE     */ "Access if UseStackResolve is set and destination is system port and resolved-queue16:6 == 11'h7ff.\n Access with resolved-queue5:0 lag-lb-key7:4\n The resolved StackLag is used to access StackTrunkResolve.",
    /* TAR_STACK_TRUNK_RESOLVE   */ "Access if UseStackResolve is set and destination is system port and resolved-queue16:6 == 11'h7ff.\n Access with StackLag, lag-lb-key5:0.\n Resolved queue = BaseQueue + Traffic-Class",
    /* TAR_TRAFFIC_CLASS_MAPPING */ "The traffic class is mapped according to packet's source and destination.\n Table is accessed with the following key key_msb,orig_tc, where:\n * key_msb (4 bits):\n   - 2'b00,TC-Mapping-Profile if Destination is System-Port-ID\n   - 2'b01,Flow-Profile if Destination is Flow\n   - 2'b10,2'b00 if Destination is fabric or egress multicast\n * ingress_shape (1 bit) is '0' before ingress shaping, and '1' after ingress shaping\n * orig_tc (3 bits) is the original traffic class",
    /* TCAM_TCAM_ACCESS_PROFILE  */ "This table maps TCAM query APP-DB to an access profile. The table has 64 entries, with the index being APP-DB. Each entry defines the access profile, including the memory to access, key size, access type (direct / lookup) and action on the prefix bits.",
    /* TCAM_TCAM_ACTION          */ "This table provides access to the TCAM Action banks. Each TCAM bank is associated with two 24-bit TCAM action memories, provided in this table. Each action table has 2K entries, and there are 24 such tables.\n The TCAM action table is valid for PP units ERPP, PMF, FLP and VTT.",
    /* TCAM_TCAM_ACTION_HIT_INDICATION */ "This table provides a hit indication for each entry in each TCAM Action bank. Each TCAM bank is associated with two 20-bit TCAM action memories, for which the hit indication is provided. Each action table has 1K entries, divided to 128 register lines of 8-bit, and there are 12x2 such tables.",
    /* TCAM_TCAM_ACTION_HIT_INDICATION_SMALL_24 */ "This table provides a hit indication for each entry in each small TCAM Action bank. Each small TCAM bank is associated with two 20-bit TCAM action memories, for which the hit indication is provided. Each action table has 128K entries, divided to 16 register lines of 8-bit, and there are 4 such tables.\n This table belongs to TcamAction24",
    /* TCAM_TCAM_ACTION_HIT_INDICATION_SMALL_25 */ "This table provides a hit indication for each entry in each small TCAM Action bank. Each small TCAM bank is associated with two 20-bit TCAM action memories, for which the hit indication is provided. Each action table has 128K entries, divided to 16 register lines of 8-bit, and there are 4 such tables.\n This table belongs to TcamAction24",
    /* TCAM_TCAM_ACTION_HIT_INDICATION_SMALL_26 */ "This table provides a hit indication for each entry in each small TCAM Action bank. Each small TCAM bank is associated with two 20-bit TCAM action memories, for which the hit indication is provided. Each action table has 128K entries, divided to 16 register lines of 8-bit, and there are 4 such tables.\n This table belongs to TcamAction24",
    /* TCAM_TCAM_ACTION_HIT_INDICATION_SMALL_27 */ "This table provides a hit indication for each entry in each small TCAM Action bank. Each small TCAM bank is associated with two 20-bit TCAM action memories, for which the hit indication is provided. Each action table has 128K entries, divided to 16 register lines of 8-bit, and there are 4 such tables.\n This table belongs to TcamAction24",
    /* TCAM_TCAM_ACTION_HIT_INDICATION_SMALL_28 */ "This table provides a hit indication for each entry in each small TCAM Action bank. Each small TCAM bank is associated with two 20-bit TCAM action memories, for which the hit indication is provided. Each action table has 128K entries, divided to 16 register lines of 8-bit, and there are 4 such tables.\n This table belongs to TcamAction24",
    /* TCAM_TCAM_ACTION_HIT_INDICATION_SMALL_29 */ "This table provides a hit indication for each entry in each small TCAM Action bank. Each small TCAM bank is associated with two 20-bit TCAM action memories, for which the hit indication is provided. Each action table has 128K entries, divided to 16 register lines of 8-bit, and there are 4 such tables.\n This table belongs to TcamAction24",
    /* TCAM_TCAM_ACTION_HIT_INDICATION_SMALL_30 */ "This table provides a hit indication for each entry in each small TCAM Action bank. Each small TCAM bank is associated with two 20-bit TCAM action memories, for which the hit indication is provided. Each action table has 128K entries, divided to 16 register lines of 8-bit, and there are 4 such tables.\n This table belongs to TcamAction24",
    /* TCAM_TCAM_ACTION_HIT_INDICATION_SMALL_31 */ "This table provides a hit indication for each entry in each small TCAM Action bank. Each small TCAM bank is associated with two 20-bit TCAM action memories, for which the hit indication is provided. Each action table has 128K entries, divided to 16 register lines of 8-bit, and there are 4 such tables.\n This table belongs to TcamAction24",
    /* TCAM_TCAM_ACTION_SMALL_24 */ "This table provides access to the small TCAM Action banks. Each small TCAM bank is associated with two 24-bit small TCAM action memories, provided in this table. Each action table has 128 entries.\n The TCAM action table is valid for PP units ERPP, PMF, FLP and VTT.\n TcamAction24 belongs to TCAM BANK 12",
    /* TCAM_TCAM_ACTION_SMALL_25 */ "This table provides access to the small TCAM Action banks. Each small TCAM bank is associated with two 24-bit small TCAM action memories, provided in this table. Each action table has 128 entries.\n The TCAM action table is valid for PP units ERPP, PMF, FLP and VTT.\n TcamAction24 belongs to TCAM BANK 12",
    /* TCAM_TCAM_ACTION_SMALL_26 */ "This table provides access to the small TCAM Action banks. Each small TCAM bank is associated with two 24-bit small TCAM action memories, provided in this table. Each action table has 128 entries.\n The TCAM action table is valid for PP units ERPP, PMF, FLP and VTT.\n TcamAction24 belongs to TCAM BANK 12",
    /* TCAM_TCAM_ACTION_SMALL_27 */ "This table provides access to the small TCAM Action banks. Each small TCAM bank is associated with two 24-bit small TCAM action memories, provided in this table. Each action table has 128 entries.\n The TCAM action table is valid for PP units ERPP, PMF, FLP and VTT.\n TcamAction24 belongs to TCAM BANK 12",
    /* TCAM_TCAM_ACTION_SMALL_28 */ "This table provides access to the small TCAM Action banks. Each small TCAM bank is associated with two 24-bit small TCAM action memories, provided in this table. Each action table has 128 entries.\n The TCAM action table is valid for PP units ERPP, PMF, FLP and VTT.\n TcamAction24 belongs to TCAM BANK 12",
    /* TCAM_TCAM_ACTION_SMALL_29 */ "This table provides access to the small TCAM Action banks. Each small TCAM bank is associated with two 24-bit small TCAM action memories, provided in this table. Each action table has 128 entries.\n The TCAM action table is valid for PP units ERPP, PMF, FLP and VTT.\n TcamAction24 belongs to TCAM BANK 12",
    /* TCAM_TCAM_ACTION_SMALL_30 */ "This table provides access to the small TCAM Action banks. Each small TCAM bank is associated with two 24-bit small TCAM action memories, provided in this table. Each action table has 128 entries.\n The TCAM action table is valid for PP units ERPP, PMF, FLP and VTT.\n TcamAction24 belongs to TCAM BANK 12",
    /* TCAM_TCAM_ACTION_SMALL_31 */ "This table provides access to the small TCAM Action banks. Each small TCAM bank is associated with two 24-bit small TCAM action memories, provided in this table. Each action table has 128 entries.\n The TCAM action table is valid for PP units ERPP, PMF, FLP and VTT.\n TcamAction24 belongs to TCAM BANK 12",
    /* TCAM_TCAM_BANK            */ "This table provides access to the TCAM banks through read and write commands.\n The table has 12*2K*2 + 4*128*2 entries, with every entry refering to a TCAM bank.\n First 4K entries belongs to TCAM BANK 0 and so on till BANK 11.\n The bottom 4*256 entries belongs to TCAM Bank 12, 13, 14 and 15.\n Note:  The bank address is 12 bits. If the lsb is clear (even address)  the entry is a key. If the lsb is set (odd address)  the entry is a mask\n The address msbs (bits 16:13) defines the TCAM bank the acti ...",
    /* TCAM_TCAM_BANK_COMMAND    */ "TCAM command:\n The command can be write/read/compare. In case of write and compare the Din is needed",
    /* TCAM_TCAM_BANK_REPLY      */ "TCAM reply. The reply is based on the command entered before.",
    /* TCAM_TCAM_ENTRY_ECC       */ "This table holds the ECC bits for each entry in the TCAM. The table is built from 12 tables,\n Each of them with 2K entries. Each table represents ECC bits for one corressponding TCAM.\n Note:  If the addresss lsb is clear (even address)  the entry is a key. If the addresss lsb is set (odd address)  the entry is a mask.",
    /* TCAM_TCAM_ENTRY_ECC_SMALL_12 */ "This table holds the ECC bits for each TCAM Bank.\n The table is with 2K entries, each entry contain the ECC bits for the matched entry in TCAM-12 through 15.\n Note:  If the addresss lsb is clear (even address)  the entry is a key. If the addresss lsb is set (odd address)  the entry is a mask.",
    /* TCAM_TCAM_ENTRY_ECC_SMALL_13 */ "This table holds the ECC bits for each TCAM Bank.\n The table is with 2K entries, each entry contain the ECC bits for the matched entry in TCAM-12 through 15.\n Note:  If the addresss lsb is clear (even address)  the entry is a key. If the addresss lsb is set (odd address)  the entry is a mask.",
    /* TCAM_TCAM_ENTRY_ECC_SMALL_14 */ "This table holds the ECC bits for each TCAM Bank.\n The table is with 2K entries, each entry contain the ECC bits for the matched entry in TCAM-12 through 15.\n Note:  If the addresss lsb is clear (even address)  the entry is a key. If the addresss lsb is set (odd address)  the entry is a mask.",
    /* TCAM_TCAM_ENTRY_ECC_SMALL_15 */ "This table holds the ECC bits for each TCAM Bank.\n The table is with 2K entries, each entry contain the ECC bits for the matched entry in TCAM-12 through 15.\n Note:  If the addresss lsb is clear (even address)  the entry is a key. If the addresss lsb is set (odd address)  the entry is a mask.",
    /* TCAM_TCAM_PD_PROFILE      */ "TCAM Priority Decoder profile.\n This table maps TCAM query APP-DB to a priority decoder profile. The table has 64 entries, with the index being  APP-DB. Each entry defines the priority decoder profile through a bitmap selecting which TCAM banks action results will participate in the priority decoder.",
    /* TCB_BUFFER_METADATA       */ "TCB circular FIFO. It is used to store timestamp and MPB related data of each packet. It should be only read in frozen phase",
    /* TCB_BUFFER_METADATA_XPE0  */ "TCB circular FIFO. It is used to store timestamp and MPB related data of each packet. It should be only read in frozen phase",
    /* TCB_BUFFER_METADATA_XPE1  */ "TCB circular FIFO. It is used to store timestamp and MPB related data of each packet. It should be only read in frozen phase",
    /* TCB_BUFFER_METADATA_XPE2  */ "TCB circular FIFO. It is used to store timestamp and MPB related data of each packet. It should be only read in frozen phase",
    /* TCB_BUFFER_METADATA_XPE3  */ "TCB circular FIFO. It is used to store timestamp and MPB related data of each packet. It should be only read in frozen phase",
    /* TCB_EVENT_BUFFER          */ "TCB circular FIFO. It is used to store timestamp and MPB related data of each event trigger packet. It should be only read in frozen phase",
    /* TCB_EVENT_BUFFER_XPE0     */ "TCB circular FIFO. It is used to store timestamp and MPB related data of each event trigger packet. It should be only read in frozen phase",
    /* TCB_EVENT_BUFFER_XPE1     */ "TCB circular FIFO. It is used to store timestamp and MPB related data of each event trigger packet. It should be only read in frozen phase",
    /* TCB_EVENT_BUFFER_XPE2     */ "TCB circular FIFO. It is used to store timestamp and MPB related data of each event trigger packet. It should be only read in frozen phase",
    /* TCB_EVENT_BUFFER_XPE3     */ "TCB circular FIFO. It is used to store timestamp and MPB related data of each event trigger packet. It should be only read in frozen phase",
    /* TCB_SCRATCH_BUFFER        */ "It is used to store timestamp and MPB related data of each packet",
    /* TCB_SCRATCH_BUFFER_XPE0_PIPE0 */ "It is used to store timestamp and MPB related data of each packet",
    /* TCB_SCRATCH_BUFFER_XPE0_PIPE3 */ "It is used to store timestamp and MPB related data of each packet",
    /* TCB_SCRATCH_BUFFER_XPE1_PIPE0 */ "It is used to store timestamp and MPB related data of each packet",
    /* TCB_SCRATCH_BUFFER_XPE1_PIPE3 */ "It is used to store timestamp and MPB related data of each packet",
    /* TCB_SCRATCH_BUFFER_XPE2_PIPE1 */ "It is used to store timestamp and MPB related data of each packet",
    /* TCB_SCRATCH_BUFFER_XPE2_PIPE2 */ "It is used to store timestamp and MPB related data of each packet",
    /* TCB_SCRATCH_BUFFER_XPE3_PIPE1 */ "It is used to store timestamp and MPB related data of each packet",
    /* TCB_SCRATCH_BUFFER_XPE3_PIPE2 */ "It is used to store timestamp and MPB related data of each packet",
    /* TCB_THRESHOLD_PROFILE_MAP */ "It is used to store profile_ptr",
    /* TCB_THRESHOLD_PROFILE_MAP_A */ "It is used to store profile_ptr",
    /* TCB_THRESHOLD_PROFILE_MAP_A_XPE0 */ "It is used to store profile_ptr",
    /* TCB_THRESHOLD_PROFILE_MAP_A_XPE1 */ "It is used to store profile_ptr",
    /* TCB_THRESHOLD_PROFILE_MAP_A_XPE2 */ "It is used to store profile_ptr",
    /* TCB_THRESHOLD_PROFILE_MAP_A_XPE3 */ "It is used to store profile_ptr",
    /* TCB_THRESHOLD_PROFILE_MAP_B */ "It is used to store profile_ptr",
    /* TCB_THRESHOLD_PROFILE_MAP_B_XPE0 */ "It is used to store profile_ptr",
    /* TCB_THRESHOLD_PROFILE_MAP_B_XPE1 */ "It is used to store profile_ptr",
    /* TCB_THRESHOLD_PROFILE_MAP_B_XPE2 */ "It is used to store profile_ptr",
    /* TCB_THRESHOLD_PROFILE_MAP_B_XPE3 */ "It is used to store profile_ptr",
    /* TCB_THRESHOLD_PROFILE_MAP_XPE0 */ "It is used to store profile_ptr",
    /* TCB_THRESHOLD_PROFILE_MAP_XPE1 */ "It is used to store profile_ptr",
    /* TCB_THRESHOLD_PROFILE_MAP_XPE2 */ "It is used to store profile_ptr",
    /* TCB_THRESHOLD_PROFILE_MAP_XPE3 */ "It is used to store profile_ptr",
    /* TCP_FN                    */ "TCP function table to map TCP Flags to any value for an IFP key, FeatureSpecific-Ethernet",
    /* TCP_FN_PIPE0              */ "TCP function table to map TCP Flags to any value for an IFP key.",
    /* TCP_FN_PIPE1              */ "TCP function table to map TCP Flags to any value for an IFP key.",
    /* TCP_FN_PIPE2              */ "TCP function table to map TCP Flags to any value for an IFP key.",
    /* TCP_FN_PIPE3              */ "TCP function table to map TCP Flags to any value for an IFP key.",
    /* TC_FREE_POOL              */ "This database is the tag Controller Free Pool Regfile. Access is only permited for debug, with no traffic in system",
    /* TDM_CALENDAR0             */ "TDM Calendar 0,",
    /* TDM_CALENDAR1             */ "TDM Calendar 1,",
    /* TDM_CALENDAR0_PIPE0       */ "TDM Calendar 0,",
    /* TDM_CALENDAR0_PIPE1       */ "TDM Calendar 0,",
    /* TDM_CALENDAR0_PIPE2       */ "TDM Calendar 0,",
    /* TDM_CALENDAR0_PIPE3       */ "TDM Calendar 0,",
    /* TDM_CALENDAR1_PIPE0       */ "TDM Calendar 1,",
    /* TDM_CALENDAR1_PIPE1       */ "TDM Calendar 1,",
    /* TDM_CALENDAR1_PIPE2       */ "TDM Calendar 1,",
    /* TDM_CALENDAR1_PIPE3       */ "TDM Calendar 1,",
    /* TDM_TABLE                 */ "The entries in this table identify the next interface to be serviced",
    /* TDU_DS_CHANNEL_ORDER_FIFO */ "Read Channel order fifo",
    /* TDU_DS_READ_REQ_RXI       */ "Read request rxi memory",
    /* TDU_DS_WRITE_DATA_RXI     */ "Write data rxi memory",
    /* TDU_DS_WRITE_REQ_RXI      */ "Write request rxi memory",
    /* THDIEMA_THDI_PORT_PG_CNTRS */ "This memory contains the counters that need to be stored on a per port per PG basis. Every cycle, up to two entries will be updated via a RMW operation.\nMemory address = port_num[0..41] * 8 + pg[0..7]. Please note that for ports supporting only one PG, there is only one location on the memory,\neg. Port 6, Pg[0..7] will all point to a same location in the memory\nEach Entry contains:\n* pg_min count:          No. of cells in PG min space\n* pg_sp_min_count        No. of cells in the min space for th ...",
    /* THDIEMA_THDI_PORT_PG_CONFIG */ "This memory contains the configuration for those counters that need to be stored on a per port per PG basis. Every cycle, up to two entries will be read and compared with the euqivalent row that is in the counter memory.\nMemory address = port_num[0..62] * 8 + pg[0..7].Please note that for ports supporting only one PG, there is only one location on the memory,\neg. Port 6, Pg[0..7] will all point to a same location in the memory\nEach Entry contains:\n* pg_min_limit:          No. of cells reserved f ...",
    /* THDIEMA_THDI_PORT_SP_CNTRS */ "This memory contains the counters and configuration that needs to be stored on a per port per service pool basis. Every cycle, up to two entries will be updated via a RMW operation.\nMemory address = port_num[0..41]\nEach Entry contains:\n* sp_shared_count:      No. of cells current used by this port in this service pool\n* ecc:                  SECDED across the other bits in this row.",
    /* THDIEMA_THDI_PORT_SP_CONFIG */ "This memory contains the counters and configuration that needs to be stored on a per port per service pool basis. Every cycle, up to two entries will be updated via a RMW operation.\nMemory address = port_num[0..41]\nEach Entry contains:\n* sp_port_min_limit:    No. of cells to be reserved for this port in this service pool. These are in addition to the normal pool allocation.\n* sp_port_max_limit:    No. of cells allowed to be used by this port in this service pool - includes the minimum allocation ...",
    /* THDIEXT_THDI_PORT_PG_CNTRS */ "This memory contains the counters that need to be stored on a per port per PG basis. Every cycle, up to two entries will be updated via a RMW operation.\nMemory address = port_num[0..41] * 8 + pg[0..7]. Please note that for ports supporting only one PG, there is only one location on the memory,\neg. Port 6, Pg[0..7] will all point to a same location in the memory\nEach Entry contains:\n* pg_min count:          No. of cells in PG min space\n* pg_sp_min_count        No. of cells in the min space for th ...",
    /* THDIEXT_THDI_PORT_PG_CONFIG */ "This memory contains the configuration for those counters that need to be stored on a per port per PG basis. Every cycle, up to two entries will be read and compared with the euqivalent row that is in the counter memory.\nMemory address = port_num[0..62] * 8 + pg[0..7].Please note that for ports supporting only one PG, there is only one location on the memory,\neg. Port 6, Pg[0..7] will all point to a same location in the memory\nEach Entry contains:\n* pg_min_limit:          No. of cells reserved f ...",
    /* THDIEXT_THDI_PORT_SP_CNTRS */ "This memory contains the counters and configuration that needs to be stored on a per port per service pool basis. Every cycle, up to two entries will be updated via a RMW operation.\nMemory address = port_num[0..41]\nEach Entry contains:\n* sp_shared_count:      No. of cells current used by this port in this service pool\n* ecc:                  SECDED across the other bits in this row.",
    /* THDIEXT_THDI_PORT_SP_CONFIG */ "This memory contains the counters and configuration that needs to be stored on a per port per service pool basis. Every cycle, up to two entries will be updated via a RMW operation.\nMemory address = port_num[0..41]\nEach Entry contains:\n* sp_port_min_limit:    No. of cells to be reserved for this port in this service pool. These are in addition to the normal pool allocation.\n* sp_port_max_limit:    No. of cells allowed to be used by this port in this service pool - includes the minimum allocation ...",
    /* THDIQEN_THDI_PORT_PG_CNTRS */ "This memory contains the counters that need to be stored on a per port per PG basis. Every cycle, up to two entries will be updated via a RMW operation.\nMemory address = port_num[0..41] * 8 + pg[0..7]. Please note that for ports supporting only one PG, there is only one location on the memory,\neg. Port 6, Pg[0..7] will all point to a same location in the memory\nEach Entry contains:\n* pg_min count:          No. of cells in PG min space\n* pg_sp_min_count        No. of cells in the min space for th ...",
    /* THDIQEN_THDI_PORT_PG_CONFIG */ "This memory contains the configuration for those counters that need to be stored on a per port per PG basis. Every cycle, up to two entries will be read and compared with the euqivalent row that is in the counter memory.\nMemory address = port_num[0..62] * 8 + pg[0..7].Please note that for ports supporting only one PG, there is only one location on the memory,\neg. Port 6, Pg[0..7] will all point to a same location in the memory\nEach Entry contains:\n* pg_min_limit:          No. of cells reserved f ...",
    /* THDIQEN_THDI_PORT_SP_CNTRS */ "This memory contains the counters and configuration that needs to be stored on a per port per service pool basis. Every cycle, up to two entries will be updated via a RMW operation.\nMemory address = port_num[0..41]\nEach Entry contains:\n* sp_shared_count:      No. of cells current used by this port in this service pool\n* ecc:                  SECDED across the other bits in this row.",
    /* THDIQEN_THDI_PORT_SP_CONFIG */ "This memory contains the counters and configuration that needs to be stored on a per port per service pool basis. Every cycle, up to two entries will be updated via a RMW operation.\nMemory address = port_num[0..41]\nEach Entry contains:\n* sp_port_min_limit:    No. of cells to be reserved for this port in this service pool. These are in addition to the normal pool allocation.\n* sp_port_max_limit:    No. of cells allowed to be used by this port in this service pool - includes the minimum allocation ...",
    /* THDIRQE_THDI_PORT_PG_CNTRS */ "This memory contains the counters that need to be stored on a per port per PG basis. Every cycle, up to two entries will be updated via a RMW operation.\nMemory address = port_num[0..41] * 8 + pg[0..7]. Please note that for ports supporting only one PG, there is only one location on the memory,\neg. Port 6, Pg[0..7] will all point to a same location in the memory\nEach Entry contains:\n* pg_min count:          No. of cells in PG min space\n* pg_sp_min_count        No. of cells in the min space for th ...",
    /* THDIRQE_THDI_PORT_PG_CONFIG */ "This memory contains the configuration for those counters that need to be stored on a per port per PG basis. Every cycle, up to two entries will be read and compared with the euqivalent row that is in the counter memory.\nMemory address = port_num[0..62] * 8 + pg[0..7].Please note that for ports supporting only one PG, there is only one location on the memory,\neg. Port 6, Pg[0..7] will all point to a same location in the memory\nEach Entry contains:\n* pg_min_limit:          No. of cells reserved f ...",
    /* THDIRQE_THDI_PORT_SP_CNTRS */ "This memory contains the counters and configuration that needs to be stored on a per port per service pool basis. Every cycle, up to two entries will be updated via a RMW operation.\nMemory address = port_num[0..41]\nEach Entry contains:\n* sp_shared_count:      No. of cells current used by this port in this service pool\n* ecc:                  SECDED across the other bits in this row.",
    /* THDIRQE_THDI_PORT_SP_CONFIG */ "This memory contains the counters and configuration that needs to be stored on a per port per service pool basis. Every cycle, up to two entries will be updated via a RMW operation.\nMemory address = port_num[0..41]\nEach Entry contains:\n* sp_port_min_limit:    No. of cells to be reserved for this port in this service pool. These are in addition to the normal pool allocation.\n* sp_port_max_limit:    No. of cells allowed to be used by this port in this service pool - includes the minimum allocation ...",
    /* THDI_PKT_STAT_SP_SHARED_COUNT */ "",
    /* THDI_PKT_STAT_SP_SHARED_COUNT_XPE0 */ "",
    /* THDI_PKT_STAT_SP_SHARED_COUNT_XPE1 */ "",
    /* THDI_PKT_STAT_SP_SHARED_COUNT_XPE2 */ "",
    /* THDI_PKT_STAT_SP_SHARED_COUNT_XPE3 */ "",
    /* THDI_PORT_PG_BST          */ "This memory contains shadow copies, or maximum values of selected counters that are updated in the Per Port per PG memory array. Every cycle, up to two entries will be updated, or a single entry will be updated via a RMW (depending on chip wide configuration).\nMemory address = port_num[0..62] * 8 + pg[0..7].\nEach Entry contains:\n* ing_ptpg_bst_par: Even parity across the row\n* Ing_PG_BST_Stat_Shared: Cells occupied in the shared space for this Port PG\n* Ing_PG_BST_Threshold_Profile_Shared: Which ...",
    /* THDI_PORT_PG_BST_X        */ "This memory contains shadow copies, or maximum values of selected counters that are updated in the Per Port per PG memory array. Every cycle, up to two entries will be updated, or a single entry will be updated via a RMW (depending on chip wide configuration).\nMemory address = port_num[0..62] * 8 + pg[0..7].\nEach Entry contains:\n* ing_ptpg_bst_par:                 Even parity across the row\n* Ing_PG_BST_Stat_Shared:    Cells occupied in the shared space for this Port PG\n* Ing_PG_BST_Stat_HDRM:   ...",
    /* THDI_PORT_PG_BST_XPE0_PIPE0 */ "This memory contains shadow copies, or maximum values of selected counters that are updated in the Per Port per PG memory array. Every cycle, up to two entries will be updated, or a single entry will be updated via a RMW (depending on chip wide configuration).\nMemory address = port_num[0..33] * 8 + pg[0..7].\nEach Entry contains:\n* ing_ptpg_bst_par:                 Even parity across the row\n* Ing_PG_BST_Stat_Shared:    Cells occupied in the shared space for this Port PG\n* Ing_PG_BST_Stat_HDRM:   ...",
    /* THDI_PORT_PG_BST_XPE0_PIPE3 */ "This memory contains shadow copies, or maximum values of selected counters that are updated in the Per Port per PG memory array. Every cycle, up to two entries will be updated, or a single entry will be updated via a RMW (depending on chip wide configuration).\nMemory address = port_num[0..33] * 8 + pg[0..7].\nEach Entry contains:\n* ing_ptpg_bst_par:                 Even parity across the row\n* Ing_PG_BST_Stat_Shared:    Cells occupied in the shared space for this Port PG\n* Ing_PG_BST_Stat_HDRM:   ...",
    /* THDI_PORT_PG_BST_XPE1_PIPE0 */ "This memory contains shadow copies, or maximum values of selected counters that are updated in the Per Port per PG memory array. Every cycle, up to two entries will be updated, or a single entry will be updated via a RMW (depending on chip wide configuration).\nMemory address = port_num[0..33] * 8 + pg[0..7].\nEach Entry contains:\n* ing_ptpg_bst_par:                 Even parity across the row\n* Ing_PG_BST_Stat_Shared:    Cells occupied in the shared space for this Port PG\n* Ing_PG_BST_Stat_HDRM:   ...",
    /* THDI_PORT_PG_BST_XPE1_PIPE3 */ "This memory contains shadow copies, or maximum values of selected counters that are updated in the Per Port per PG memory array. Every cycle, up to two entries will be updated, or a single entry will be updated via a RMW (depending on chip wide configuration).\nMemory address = port_num[0..33] * 8 + pg[0..7].\nEach Entry contains:\n* ing_ptpg_bst_par:                 Even parity across the row\n* Ing_PG_BST_Stat_Shared:    Cells occupied in the shared space for this Port PG\n* Ing_PG_BST_Stat_HDRM:   ...",
    /* THDI_PORT_PG_BST_XPE2_PIPE1 */ "This memory contains shadow copies, or maximum values of selected counters that are updated in the Per Port per PG memory array. Every cycle, up to two entries will be updated, or a single entry will be updated via a RMW (depending on chip wide configuration).\nMemory address = port_num[0..33] * 8 + pg[0..7].\nEach Entry contains:\n* ing_ptpg_bst_par:                 Even parity across the row\n* Ing_PG_BST_Stat_Shared:    Cells occupied in the shared space for this Port PG\n* Ing_PG_BST_Stat_HDRM:   ...",
    /* THDI_PORT_PG_BST_XPE2_PIPE2 */ "This memory contains shadow copies, or maximum values of selected counters that are updated in the Per Port per PG memory array. Every cycle, up to two entries will be updated, or a single entry will be updated via a RMW (depending on chip wide configuration).\nMemory address = port_num[0..33] * 8 + pg[0..7].\nEach Entry contains:\n* ing_ptpg_bst_par:                 Even parity across the row\n* Ing_PG_BST_Stat_Shared:    Cells occupied in the shared space for this Port PG\n* Ing_PG_BST_Stat_HDRM:   ...",
    /* THDI_PORT_PG_BST_XPE3_PIPE1 */ "This memory contains shadow copies, or maximum values of selected counters that are updated in the Per Port per PG memory array. Every cycle, up to two entries will be updated, or a single entry will be updated via a RMW (depending on chip wide configuration).\nMemory address = port_num[0..33] * 8 + pg[0..7].\nEach Entry contains:\n* ing_ptpg_bst_par:                 Even parity across the row\n* Ing_PG_BST_Stat_Shared:    Cells occupied in the shared space for this Port PG\n* Ing_PG_BST_Stat_HDRM:   ...",
    /* THDI_PORT_PG_BST_XPE3_PIPE2 */ "This memory contains shadow copies, or maximum values of selected counters that are updated in the Per Port per PG memory array. Every cycle, up to two entries will be updated, or a single entry will be updated via a RMW (depending on chip wide configuration).\nMemory address = port_num[0..33] * 8 + pg[0..7].\nEach Entry contains:\n* ing_ptpg_bst_par:                 Even parity across the row\n* Ing_PG_BST_Stat_Shared:    Cells occupied in the shared space for this Port PG\n* Ing_PG_BST_Stat_HDRM:   ...",
    /* THDI_PORT_PG_BST_Y        */ "This memory contains shadow copies, or maximum values of selected counters that are updated in the Per Port per PG memory array. Every cycle, up to two entries will be updated, or a single entry will be updated via a RMW (depending on chip wide configuration).\nMemory address = port_num[64..115] * 8 + pg[0..7].\nEach Entry contains:\n* ing_ptpg_bst_par:                Even parity across the row\n* Ing_PG_BST_Stat_Shared:    Cells occupied in the shared space for this Port PG\n* Ing_PG_BST_Stat_HDRM:  ...",
    /* THDI_PORT_PG_CNTRS        */ "This memory contains the counters that need to be stored on a per port per PG basis. Every cycle, up to two entries will be updated via a RMW operation.\nMemory address = port_num[0..62] * 8 + pg[0..7].\nEach Entry contains:\n* pg_min count:          No. of cells in PG min space\n* pg_sp_min_count        No. of cells in the min space for the service pool that contains this PG\n* pg_shared_count        No. of cells in the shared space for this PG\n* pg_hdrm_count          No. of cells in the local rese ...",
    /* THDI_PORT_PG_CNTRS_RT1    */ "This memory contains the counters that need to be stored on a per port per PG basis. Every cycle, up to three entries will be updated via a RMW operation.\nMemory address = port_num[0..33] * 8 + pg[0..7].\nEach Entry contains:\n* pg_min_count:       No. of cells in PG min space\n* pg_min_count_g1:    No. of cells in PG min space is greater than 1\n* pg_min_count_g0:    No. of cells in PG min space is greater than 0\n* pg_sp_min_count:    No. of cells in the min space for the service pool that contains ...",
    /* THDI_PORT_PG_CNTRS_RT2    */ "This memory contains the counters that need to be stored on a per port per PG basis. Every cycle, up to three entries will be updated via a RMW operation.\nMemory address = port_num[0..33] * 8 + pg[0..7].\nEach Entry contains:\n* pg_hdrm_count:           No. of cells in the local reserved headroom for this PG.\n* pg_hdrm_count_g1:        No. of cells in the local reserved headroom for this PG is greater than 1.\n* pg_hdrm_count_g0:        No. of cells in the local reserved headroom for this PG is gre ...",
    /* THDI_PORT_PG_CNTRS_RT1_X  */ "This memory contains the counters that need to be stored on a per port per PG basis. Every cycle, up to three entries will be updated via a RMW operation.\nMemory address = port_num[0..52] * 8 + pg[0..7].\nEach Entry contains:\n* pg_min_count:       No. of cells in PG min space\n* pg_min_count_g1:    No. of cells in PG min space is greater than 1\n* pg_min_count_g0:    No. of cells in PG min space is greater than 0\n* pg_sp_min_count:    No. of cells in the min space for the service pool that contains ...",
    /* THDI_PORT_PG_CNTRS_RT1_XPE0_PIPE0 */ "This memory contains the counters that need to be stored on a per port per PG basis. Every cycle, up to three entries will be updated via a RMW operation.\nMemory address = port_num[0..33] * 8 + pg[0..7].\nEach Entry contains:\n* pg_min_count:       No. of cells in PG min space\n* pg_min_count_g1:    No. of cells in PG min space is greater than 1\n* pg_min_count_g0:    No. of cells in PG min space is greater than 0\n* pg_sp_min_count:    No. of cells in the min space for the service pool that contains ...",
    /* THDI_PORT_PG_CNTRS_RT1_XPE0_PIPE3 */ "This memory contains the counters that need to be stored on a per port per PG basis. Every cycle, up to three entries will be updated via a RMW operation.\nMemory address = port_num[0..33] * 8 + pg[0..7].\nEach Entry contains:\n* pg_min_count:       No. of cells in PG min space\n* pg_min_count_g1:    No. of cells in PG min space is greater than 1\n* pg_min_count_g0:    No. of cells in PG min space is greater than 0\n* pg_sp_min_count:    No. of cells in the min space for the service pool that contains ...",
    /* THDI_PORT_PG_CNTRS_RT1_XPE1_PIPE0 */ "This memory contains the counters that need to be stored on a per port per PG basis. Every cycle, up to three entries will be updated via a RMW operation.\nMemory address = port_num[0..33] * 8 + pg[0..7].\nEach Entry contains:\n* pg_min_count:       No. of cells in PG min space\n* pg_min_count_g1:    No. of cells in PG min space is greater than 1\n* pg_min_count_g0:    No. of cells in PG min space is greater than 0\n* pg_sp_min_count:    No. of cells in the min space for the service pool that contains ...",
    /* THDI_PORT_PG_CNTRS_RT1_XPE1_PIPE3 */ "This memory contains the counters that need to be stored on a per port per PG basis. Every cycle, up to three entries will be updated via a RMW operation.\nMemory address = port_num[0..33] * 8 + pg[0..7].\nEach Entry contains:\n* pg_min_count:       No. of cells in PG min space\n* pg_min_count_g1:    No. of cells in PG min space is greater than 1\n* pg_min_count_g0:    No. of cells in PG min space is greater than 0\n* pg_sp_min_count:    No. of cells in the min space for the service pool that contains ...",
    /* THDI_PORT_PG_CNTRS_RT1_XPE2_PIPE1 */ "This memory contains the counters that need to be stored on a per port per PG basis. Every cycle, up to three entries will be updated via a RMW operation.\nMemory address = port_num[0..33] * 8 + pg[0..7].\nEach Entry contains:\n* pg_min_count:       No. of cells in PG min space\n* pg_min_count_g1:    No. of cells in PG min space is greater than 1\n* pg_min_count_g0:    No. of cells in PG min space is greater than 0\n* pg_sp_min_count:    No. of cells in the min space for the service pool that contains ...",
    /* THDI_PORT_PG_CNTRS_RT1_XPE2_PIPE2 */ "This memory contains the counters that need to be stored on a per port per PG basis. Every cycle, up to three entries will be updated via a RMW operation.\nMemory address = port_num[0..33] * 8 + pg[0..7].\nEach Entry contains:\n* pg_min_count:       No. of cells in PG min space\n* pg_min_count_g1:    No. of cells in PG min space is greater than 1\n* pg_min_count_g0:    No. of cells in PG min space is greater than 0\n* pg_sp_min_count:    No. of cells in the min space for the service pool that contains ...",
    /* THDI_PORT_PG_CNTRS_RT1_XPE3_PIPE1 */ "This memory contains the counters that need to be stored on a per port per PG basis. Every cycle, up to three entries will be updated via a RMW operation.\nMemory address = port_num[0..33] * 8 + pg[0..7].\nEach Entry contains:\n* pg_min_count:       No. of cells in PG min space\n* pg_min_count_g1:    No. of cells in PG min space is greater than 1\n* pg_min_count_g0:    No. of cells in PG min space is greater than 0\n* pg_sp_min_count:    No. of cells in the min space for the service pool that contains ...",
    /* THDI_PORT_PG_CNTRS_RT1_XPE3_PIPE2 */ "This memory contains the counters that need to be stored on a per port per PG basis. Every cycle, up to three entries will be updated via a RMW operation.\nMemory address = port_num[0..33] * 8 + pg[0..7].\nEach Entry contains:\n* pg_min_count:       No. of cells in PG min space\n* pg_min_count_g1:    No. of cells in PG min space is greater than 1\n* pg_min_count_g0:    No. of cells in PG min space is greater than 0\n* pg_sp_min_count:    No. of cells in the min space for the service pool that contains ...",
    /* THDI_PORT_PG_CNTRS_RT1_Y  */ "This memory contains the counters that need to be stored on a per port per PG basis. Every cycle, up to three entries will be updated via a RMW operation.\nMemory address = port_num[64..115] * 8 + pg[0..7].\nEach Entry contains:\n* pg_min_count:       No. of cells in PG min space\n* pg_min_count_g1:    No. of cells in PG min space is greater than 1\n* pg_min_count_g0:    No. of cells in PG min space is greater than 0\n* pg_sp_min_count     No. of cells in the min space for the service pool that contai ...",
    /* THDI_PORT_PG_CNTRS_RT2_X  */ "This memory contains the counters that need to be stored on a per port per PG basis. Every cycle, up to three entries will be updated via a RMW operation.\nMemory address = port_num[0..52] * 8 + pg[0..7].\nEach Entry contains:\n* pg_hdrm_count:           No. of cells in the local reserved headroom for this PG.\n* pg_hdrm_count_g1:        No. of cells in the local reserved headroom for this PG is greater than 1.\n* pg_hdrm_count_g0:        No. of cells in the local reserved headroom for this PG is gre ...",
    /* THDI_PORT_PG_CNTRS_RT2_XPE0_PIPE0 */ "This memory contains the counters that need to be stored on a per port per PG basis. Every cycle, up to three entries will be updated via a RMW operation.\nMemory address = port_num[0..33] * 8 + pg[0..7].\nEach Entry contains:\n* pg_hdrm_count:           No. of cells in the local reserved headroom for this PG.\n* pg_hdrm_count_g1:        No. of cells in the local reserved headroom for this PG is greater than 1.\n* pg_hdrm_count_g0:        No. of cells in the local reserved headroom for this PG is gre ...",
    /* THDI_PORT_PG_CNTRS_RT2_XPE0_PIPE3 */ "This memory contains the counters that need to be stored on a per port per PG basis. Every cycle, up to three entries will be updated via a RMW operation.\nMemory address = port_num[0..33] * 8 + pg[0..7].\nEach Entry contains:\n* pg_hdrm_count:           No. of cells in the local reserved headroom for this PG.\n* pg_hdrm_count_g1:        No. of cells in the local reserved headroom for this PG is greater than 1.\n* pg_hdrm_count_g0:        No. of cells in the local reserved headroom for this PG is gre ...",
    /* THDI_PORT_PG_CNTRS_RT2_XPE1_PIPE0 */ "This memory contains the counters that need to be stored on a per port per PG basis. Every cycle, up to three entries will be updated via a RMW operation.\nMemory address = port_num[0..33] * 8 + pg[0..7].\nEach Entry contains:\n* pg_hdrm_count:           No. of cells in the local reserved headroom for this PG.\n* pg_hdrm_count_g1:        No. of cells in the local reserved headroom for this PG is greater than 1.\n* pg_hdrm_count_g0:        No. of cells in the local reserved headroom for this PG is gre ...",
    /* THDI_PORT_PG_CNTRS_RT2_XPE1_PIPE3 */ "This memory contains the counters that need to be stored on a per port per PG basis. Every cycle, up to three entries will be updated via a RMW operation.\nMemory address = port_num[0..33] * 8 + pg[0..7].\nEach Entry contains:\n* pg_hdrm_count:           No. of cells in the local reserved headroom for this PG.\n* pg_hdrm_count_g1:        No. of cells in the local reserved headroom for this PG is greater than 1.\n* pg_hdrm_count_g0:        No. of cells in the local reserved headroom for this PG is gre ...",
    /* THDI_PORT_PG_CNTRS_RT2_XPE2_PIPE1 */ "This memory contains the counters that need to be stored on a per port per PG basis. Every cycle, up to three entries will be updated via a RMW operation.\nMemory address = port_num[0..33] * 8 + pg[0..7].\nEach Entry contains:\n* pg_hdrm_count:           No. of cells in the local reserved headroom for this PG.\n* pg_hdrm_count_g1:        No. of cells in the local reserved headroom for this PG is greater than 1.\n* pg_hdrm_count_g0:        No. of cells in the local reserved headroom for this PG is gre ...",
    /* THDI_PORT_PG_CNTRS_RT2_XPE2_PIPE2 */ "This memory contains the counters that need to be stored on a per port per PG basis. Every cycle, up to three entries will be updated via a RMW operation.\nMemory address = port_num[0..33] * 8 + pg[0..7].\nEach Entry contains:\n* pg_hdrm_count:           No. of cells in the local reserved headroom for this PG.\n* pg_hdrm_count_g1:        No. of cells in the local reserved headroom for this PG is greater than 1.\n* pg_hdrm_count_g0:        No. of cells in the local reserved headroom for this PG is gre ...",
    /* THDI_PORT_PG_CNTRS_RT2_XPE3_PIPE1 */ "This memory contains the counters that need to be stored on a per port per PG basis. Every cycle, up to three entries will be updated via a RMW operation.\nMemory address = port_num[0..33] * 8 + pg[0..7].\nEach Entry contains:\n* pg_hdrm_count:           No. of cells in the local reserved headroom for this PG.\n* pg_hdrm_count_g1:        No. of cells in the local reserved headroom for this PG is greater than 1.\n* pg_hdrm_count_g0:        No. of cells in the local reserved headroom for this PG is gre ...",
    /* THDI_PORT_PG_CNTRS_RT2_XPE3_PIPE2 */ "This memory contains the counters that need to be stored on a per port per PG basis. Every cycle, up to three entries will be updated via a RMW operation.\nMemory address = port_num[0..33] * 8 + pg[0..7].\nEach Entry contains:\n* pg_hdrm_count:           No. of cells in the local reserved headroom for this PG.\n* pg_hdrm_count_g1:        No. of cells in the local reserved headroom for this PG is greater than 1.\n* pg_hdrm_count_g0:        No. of cells in the local reserved headroom for this PG is gre ...",
    /* THDI_PORT_PG_CNTRS_RT2_Y  */ "This memory contains the counters that need to be stored on a per port per PG basis. Every cycle, up to three entries will be updated via a RMW operation.\nMemory address = port_num[64..115] * 8 + pg[0..7].\nEach Entry contains:\n* pg_hdrm_count:           No. of cells in the local reserved headroom for this PG.\n* pg_hdrm_count_g1:        No. of cells in the local reserved headroom for this PG is greater than 1.\n* pg_hdrm_count_g0:        No. of cells in the local reserved headroom for this PG is g ...",
    /* THDI_PORT_PG_CNTRS_SH1    */ "This memory contains the shadow counters that need to be stored on a per port per PG basis. Every cycle, up to three entries will be updated via a RMW operation.\nMemory address = port_num[0..33] * 8 + pg[0..7].\nEach Entry contains:\n* pg_min_count:       No. of cells in PG min space\n* pg_min_count_g1:    No. of cells in PG min space is greater than 1\n* pg_min_count_g0:    No. of cells in PG min space is greater than 0\n* pg_sp_min_count:    No. of cells in the min space for the service pool that c ...",
    /* THDI_PORT_PG_CNTRS_SH2    */ "This memory contains the shadow counters that need to be stored on a per port per PG basis. Every cycle, up to three entries will be updated via a RMW operation.\nMemory address = port_num[0..33] * 8 + pg[0..7].\nEach Entry contains:\n* pg_hdrm_count:           No. of cells in the local reserved headroom for this PG.\n* pg_hdrm_count_g1:        No. of cells in the local reserved headroom for this PG is greater than 1.\n* pg_hdrm_count_g0:        No. of cells in the local reserved headroom for this PG ...",
    /* THDI_PORT_PG_CNTRS_SH1_X  */ "This memory contains the shadow counters that need to be stored on a per port per PG basis. Every cycle, up to three entries will be updated via a RMW operation.\nMemory address = port_num[0..52] * 8 + pg[0..7].\nEach Entry contains:\n* pg_min_count:       No. of cells in PG min space\n* pg_min_count_g1:    No. of cells in PG min space is greater than 1\n* pg_min_count_g0:    No. of cells in PG min space is greater than 0\n* pg_sp_min_count:    No. of cells in the min space for the service pool that c ...",
    /* THDI_PORT_PG_CNTRS_SH1_XPE0_PIPE0 */ "This memory contains the shadow counters that need to be stored on a per port per PG basis. Every cycle, up to three entries will be updated via a RMW operation.\nMemory address = port_num[0..33] * 8 + pg[0..7].\nEach Entry contains:\n* pg_min_count:       No. of cells in PG min space\n* pg_min_count_g1:    No. of cells in PG min space is greater than 1\n* pg_min_count_g0:    No. of cells in PG min space is greater than 0\n* pg_sp_min_count:    No. of cells in the min space for the service pool that c ...",
    /* THDI_PORT_PG_CNTRS_SH1_XPE0_PIPE3 */ "This memory contains the shadow counters that need to be stored on a per port per PG basis. Every cycle, up to three entries will be updated via a RMW operation.\nMemory address = port_num[0..33] * 8 + pg[0..7].\nEach Entry contains:\n* pg_min_count:       No. of cells in PG min space\n* pg_min_count_g1:    No. of cells in PG min space is greater than 1\n* pg_min_count_g0:    No. of cells in PG min space is greater than 0\n* pg_sp_min_count:    No. of cells in the min space for the service pool that c ...",
    /* THDI_PORT_PG_CNTRS_SH1_XPE1_PIPE0 */ "This memory contains the shadow counters that need to be stored on a per port per PG basis. Every cycle, up to three entries will be updated via a RMW operation.\nMemory address = port_num[0..33] * 8 + pg[0..7].\nEach Entry contains:\n* pg_min_count:       No. of cells in PG min space\n* pg_min_count_g1:    No. of cells in PG min space is greater than 1\n* pg_min_count_g0:    No. of cells in PG min space is greater than 0\n* pg_sp_min_count:    No. of cells in the min space for the service pool that c ...",
    /* THDI_PORT_PG_CNTRS_SH1_XPE1_PIPE3 */ "This memory contains the shadow counters that need to be stored on a per port per PG basis. Every cycle, up to three entries will be updated via a RMW operation.\nMemory address = port_num[0..33] * 8 + pg[0..7].\nEach Entry contains:\n* pg_min_count:       No. of cells in PG min space\n* pg_min_count_g1:    No. of cells in PG min space is greater than 1\n* pg_min_count_g0:    No. of cells in PG min space is greater than 0\n* pg_sp_min_count:    No. of cells in the min space for the service pool that c ...",
    /* THDI_PORT_PG_CNTRS_SH1_XPE2_PIPE1 */ "This memory contains the shadow counters that need to be stored on a per port per PG basis. Every cycle, up to three entries will be updated via a RMW operation.\nMemory address = port_num[0..33] * 8 + pg[0..7].\nEach Entry contains:\n* pg_min_count:       No. of cells in PG min space\n* pg_min_count_g1:    No. of cells in PG min space is greater than 1\n* pg_min_count_g0:    No. of cells in PG min space is greater than 0\n* pg_sp_min_count:    No. of cells in the min space for the service pool that c ...",
    /* THDI_PORT_PG_CNTRS_SH1_XPE2_PIPE2 */ "This memory contains the shadow counters that need to be stored on a per port per PG basis. Every cycle, up to three entries will be updated via a RMW operation.\nMemory address = port_num[0..33] * 8 + pg[0..7].\nEach Entry contains:\n* pg_min_count:       No. of cells in PG min space\n* pg_min_count_g1:    No. of cells in PG min space is greater than 1\n* pg_min_count_g0:    No. of cells in PG min space is greater than 0\n* pg_sp_min_count:    No. of cells in the min space for the service pool that c ...",
    /* THDI_PORT_PG_CNTRS_SH1_XPE3_PIPE1 */ "This memory contains the shadow counters that need to be stored on a per port per PG basis. Every cycle, up to three entries will be updated via a RMW operation.\nMemory address = port_num[0..33] * 8 + pg[0..7].\nEach Entry contains:\n* pg_min_count:       No. of cells in PG min space\n* pg_min_count_g1:    No. of cells in PG min space is greater than 1\n* pg_min_count_g0:    No. of cells in PG min space is greater than 0\n* pg_sp_min_count:    No. of cells in the min space for the service pool that c ...",
    /* THDI_PORT_PG_CNTRS_SH1_XPE3_PIPE2 */ "This memory contains the shadow counters that need to be stored on a per port per PG basis. Every cycle, up to three entries will be updated via a RMW operation.\nMemory address = port_num[0..33] * 8 + pg[0..7].\nEach Entry contains:\n* pg_min_count:       No. of cells in PG min space\n* pg_min_count_g1:    No. of cells in PG min space is greater than 1\n* pg_min_count_g0:    No. of cells in PG min space is greater than 0\n* pg_sp_min_count:    No. of cells in the min space for the service pool that c ...",
    /* THDI_PORT_PG_CNTRS_SH1_Y  */ "This memory contains the shadow counters that need to be stored on a per port per PG basis. Every cycle, up to three entries will be updated via a RMW operation.\nMemory address = port_num[64..115] * 8 + pg[0..7].\nEach Entry contains:\n* pg_min_count:       No. of cells in PG min space\n* pg_min_count_g1:    No. of cells in PG min space is greater than 1\n* pg_min_count_g0:    No. of cells in PG min space is greater than 0\n* pg_sp_min_count:    No. of cells in the min space for the service pool that ...",
    /* THDI_PORT_PG_CNTRS_SH2_X  */ "This memory contains the shadow counters that need to be stored on a per port per PG basis. Every cycle, up to three entries will be updated via a RMW operation.\nMemory address = port_num[0..52] * 8 + pg[0..7].\nEach Entry contains:\n* pg_hdrm_count:           No. of cells in the local reserved headroom for this PG.\n* pg_hdrm_count_g1:        No. of cells in the local reserved headroom for this PG is greater than 1.\n* pg_hdrm_count_g0:        No. of cells in the local reserved headroom for this PG ...",
    /* THDI_PORT_PG_CNTRS_SH2_XPE0_PIPE0 */ "This memory contains the shadow counters that need to be stored on a per port per PG basis. Every cycle, up to three entries will be updated via a RMW operation.\nMemory address = port_num[0..33] * 8 + pg[0..7].\nEach Entry contains:\n* pg_hdrm_count:           No. of cells in the local reserved headroom for this PG.\n* pg_hdrm_count_g1:        No. of cells in the local reserved headroom for this PG is greater than 1.\n* pg_hdrm_count_g0:        No. of cells in the local reserved headroom for this PG ...",
    /* THDI_PORT_PG_CNTRS_SH2_XPE0_PIPE3 */ "This memory contains the shadow counters that need to be stored on a per port per PG basis. Every cycle, up to three entries will be updated via a RMW operation.\nMemory address = port_num[0..33] * 8 + pg[0..7].\nEach Entry contains:\n* pg_hdrm_count:           No. of cells in the local reserved headroom for this PG.\n* pg_hdrm_count_g1:        No. of cells in the local reserved headroom for this PG is greater than 1.\n* pg_hdrm_count_g0:        No. of cells in the local reserved headroom for this PG ...",
    /* THDI_PORT_PG_CNTRS_SH2_XPE1_PIPE0 */ "This memory contains the shadow counters that need to be stored on a per port per PG basis. Every cycle, up to three entries will be updated via a RMW operation.\nMemory address = port_num[0..33] * 8 + pg[0..7].\nEach Entry contains:\n* pg_hdrm_count:           No. of cells in the local reserved headroom for this PG.\n* pg_hdrm_count_g1:        No. of cells in the local reserved headroom for this PG is greater than 1.\n* pg_hdrm_count_g0:        No. of cells in the local reserved headroom for this PG ...",
    /* THDI_PORT_PG_CNTRS_SH2_XPE1_PIPE3 */ "This memory contains the shadow counters that need to be stored on a per port per PG basis. Every cycle, up to three entries will be updated via a RMW operation.\nMemory address = port_num[0..33] * 8 + pg[0..7].\nEach Entry contains:\n* pg_hdrm_count:           No. of cells in the local reserved headroom for this PG.\n* pg_hdrm_count_g1:        No. of cells in the local reserved headroom for this PG is greater than 1.\n* pg_hdrm_count_g0:        No. of cells in the local reserved headroom for this PG ...",
    /* THDI_PORT_PG_CNTRS_SH2_XPE2_PIPE1 */ "This memory contains the shadow counters that need to be stored on a per port per PG basis. Every cycle, up to three entries will be updated via a RMW operation.\nMemory address = port_num[0..33] * 8 + pg[0..7].\nEach Entry contains:\n* pg_hdrm_count:           No. of cells in the local reserved headroom for this PG.\n* pg_hdrm_count_g1:        No. of cells in the local reserved headroom for this PG is greater than 1.\n* pg_hdrm_count_g0:        No. of cells in the local reserved headroom for this PG ...",
    /* THDI_PORT_PG_CNTRS_SH2_XPE2_PIPE2 */ "This memory contains the shadow counters that need to be stored on a per port per PG basis. Every cycle, up to three entries will be updated via a RMW operation.\nMemory address = port_num[0..33] * 8 + pg[0..7].\nEach Entry contains:\n* pg_hdrm_count:           No. of cells in the local reserved headroom for this PG.\n* pg_hdrm_count_g1:        No. of cells in the local reserved headroom for this PG is greater than 1.\n* pg_hdrm_count_g0:        No. of cells in the local reserved headroom for this PG ...",
    /* THDI_PORT_PG_CNTRS_SH2_XPE3_PIPE1 */ "This memory contains the shadow counters that need to be stored on a per port per PG basis. Every cycle, up to three entries will be updated via a RMW operation.\nMemory address = port_num[0..33] * 8 + pg[0..7].\nEach Entry contains:\n* pg_hdrm_count:           No. of cells in the local reserved headroom for this PG.\n* pg_hdrm_count_g1:        No. of cells in the local reserved headroom for this PG is greater than 1.\n* pg_hdrm_count_g0:        No. of cells in the local reserved headroom for this PG ...",
    /* THDI_PORT_PG_CNTRS_SH2_XPE3_PIPE2 */ "This memory contains the shadow counters that need to be stored on a per port per PG basis. Every cycle, up to three entries will be updated via a RMW operation.\nMemory address = port_num[0..33] * 8 + pg[0..7].\nEach Entry contains:\n* pg_hdrm_count:           No. of cells in the local reserved headroom for this PG.\n* pg_hdrm_count_g1:        No. of cells in the local reserved headroom for this PG is greater than 1.\n* pg_hdrm_count_g0:        No. of cells in the local reserved headroom for this PG ...",
    /* THDI_PORT_PG_CNTRS_SH2_Y  */ "This memory contains the shadow counters that need to be stored on a per port per PG basis. Every cycle, up to three entries will be updated via a RMW operation.\nMemory address = port_num[64..115] * 8 + pg[0..7].\nEach Entry contains:\n* pg_hdrm_count:           No. of cells in the local reserved headroom for this PG.\n* pg_hdrm_count_g1:        No. of cells in the local reserved headroom for this PG is greater than 1.\n* pg_hdrm_count_g0:        No. of cells in the local reserved headroom for this  ...",
    /* THDI_PORT_PG_CONFIG       */ "This memory contains the configuration for those counters that need to be stored on a per port per PG basis. Every cycle, up to two entries will be read and compared with the euqivalent row that is in the counter memory.\nMemory address = port_num[0..62] * 8 + pg[0..7].\nEach Entry contains:\n* pg_min_limit:          No. of cells reserved for PG min space\n* pg_shared_dynamic      Is the shared limit for this PG static or dynamic?\n* pg_shared_limit        No. of cells allowed to be consumed in the s ...",
    /* THDI_PORT_PG_CONFIG0_X    */ "This memory contains the configuration for those counters that need to be stored on a per port per PG basis. Every cycle, up to two entries will be read and compared with the euqivalent row that is in the counter memory.\nMemory address = port_num[0..52] * 8 + pg[0..7].\nEach Entry contains:\n* pg_min_limit:                                       No. of cells reserved for PG min space\n* pg_shared_limit:                                    No. of cells allowed to be consumed in the shared space for th ...",
    /* THDI_PORT_PG_CONFIG0_Y    */ "This memory contains the configuration for those counters that need to be stored on a per port per PG basis. Every cycle, up to two entries will be read and compared with the euqivalent row that is in the counter memory.\nMemory address = port_num[64..115] * 8 + pg[0..7].\nEach Entry contains:\n* pg_min_limit:                                          No. of cells reserved for PG min space\n* pg_shared_limit:                                       No. of cells allowed to be consumed in the shared spac ...",
    /* THDI_PORT_PG_CONFIG1_X    */ "This memory contains the configuration for those counters that need to be stored on a per port per PG basis. Every cycle, up to two entries will be read and compared with the euqivalent row that is in the counter memory.\nMemory address = port_num[0..52] * 8 + pg[0..7].\nEach Entry contains:\n* pg_min_limit:                                       No. of cells reserved for PG min space\n* pg_shared_limit:                                    No. of cells allowed to be consumed in the shared space for th ...",
    /* THDI_PORT_PG_CONFIG1_Y    */ "This memory contains the configuration for those counters that need to be stored on a per port per PG basis. Every cycle, up to two entries will be read and compared with the euqivalent row that is in the counter memory.\nMemory address = port_num[64..115] * 8 + pg[0..7].\nEach Entry contains:\n* pg_min_limit:                                          No. of cells reserved for PG min space\n* pg_shared_limit:                                       No. of cells allowed to be consumed in the shared spac ...",
    /* THDI_PORT_PG_CONFIG2_X    */ "This memory contains the configuration for those counters that need to be stored on a per port per PG basis. Every cycle, up to two entries will be read and compared with the euqivalent row that is in the counter memory.\nMemory address = port_num[0..52] * 8 + pg[0..7].\nEach Entry contains:\n* pg_min_limit:                                       No. of cells reserved for PG min space\n* pg_shared_limit:                                    No. of cells allowed to be consumed in the shared space for th ...",
    /* THDI_PORT_PG_CONFIG2_Y    */ "This memory contains the configuration for those counters that need to be stored on a per port per PG basis. Every cycle, up to two entries will be read and compared with the euqivalent row that is in the counter memory.\nMemory address = port_num[64..115] * 8 + pg[0..7].\nEach Entry contains:\n* pg_min_limit:                                          No. of cells reserved for PG min space\n* pg_shared_limit:                                       No. of cells allowed to be consumed in the shared spac ...",
    /* THDI_PORT_PG_CONFIG_PIPE0 */ "This memory contains the configuration for those counters that need to be stored on a per port per PG basis. Every cycle, up to two entries will be read and compared with the equivalent row that is in the counter memory.\nMemory address = port_num[0..33] * 8 + pg[0..7].\nEach Entry contains:\n* pg_min_limit:                                       No. of cells reserved for PG min space\n* pg_shared_limit:                                       No. of cells allowed to be consumed in the shared space for ...",
    /* THDI_PORT_PG_CONFIG_PIPE1 */ "This memory contains the configuration for those counters that need to be stored on a per port per PG basis. Every cycle, up to two entries will be read and compared with the equivalent row that is in the counter memory.\nMemory address = port_num[0..33] * 8 + pg[0..7].\nEach Entry contains:\n* pg_min_limit:                                       No. of cells reserved for PG min space\n* pg_shared_limit:                                       No. of cells allowed to be consumed in the shared space for ...",
    /* THDI_PORT_PG_CONFIG_PIPE2 */ "This memory contains the configuration for those counters that need to be stored on a per port per PG basis. Every cycle, up to two entries will be read and compared with the equivalent row that is in the counter memory.\nMemory address = port_num[0..33] * 8 + pg[0..7].\nEach Entry contains:\n* pg_min_limit:                                       No. of cells reserved for PG min space\n* pg_shared_limit:                                       No. of cells allowed to be consumed in the shared space for ...",
    /* THDI_PORT_PG_CONFIG_PIPE3 */ "This memory contains the configuration for those counters that need to be stored on a per port per PG basis. Every cycle, up to two entries will be read and compared with the equivalent row that is in the counter memory.\nMemory address = port_num[0..33] * 8 + pg[0..7].\nEach Entry contains:\n* pg_min_limit:                                       No. of cells reserved for PG min space\n* pg_shared_limit:                                       No. of cells allowed to be consumed in the shared space for ...",
    /* THDI_PORT_PG_CONFIG_X     */ "This memory contains the configuration for those counters that need to be stored on a per port per PG basis. Every cycle, up to two entries will be read and compared with the euqivalent row that is in the counter memory.\nMemory address = port_num[0..52] * 8 + pg[0..7].\nEach Entry contains:\n* pg_min_limit:                                       No. of cells reserved for PG min space\n* pg_shared_limit:                                       No. of cells allowed to be consumed in the shared space for ...",
    /* THDI_PORT_PG_CONFIG_Y     */ "This memory contains the configuration for those counters that need to be stored on a per port per PG basis. Every cycle, up to two entries will be read and compared with the euqivalent row that is in the counter memory.\nMemory address = port_num[64..115] * 8 + pg[0..7].\nEach Entry contains:\n* pg_min_limit:                                          No. of cells reserved for PG min space\n* pg_shared_limit:                                       No. of cells allowed to be consumed in the shared spac ...",
    /* THDI_PORT_SP_BST          */ "This memory contains the counters and configuration that needs to be stored on a per port per service pool basis. Every cycle, up to two entries will be updated via a RMW operation.\nMemory address = port_num[0..62] * 4 + sp[0..3].\nEach Entry contains:\n* ing_ptsp_bst_par:     Even Parity across bits 17:0\n* Ing_Port_SP_BST_Stat: Number of cells currently in use for this Port SP\n* Ing_Port_SP_BST_Threshold_Profile: Which of the eight compare profiles should be used to force a trigger.",
    /* THDI_PORT_SP_BST_X        */ "This memory contains shadow copies, or maximum values of selected counters that are updated in the Per Port per SP memory array. Every cycle, up to two entries will be updated, or a single entry will be updated via a RMW (depending on chip wide configuration).\nMemory address = port_num[0..62] * 8 + pg[0..7].\nEach Entry contains:\n* ing_ptsp_bst_par:     Even Parity across bits 17:0\n* Ing_Port_SP_BST_Stat: Number of cells currently in use for this Port SP\n* ecc:                                  SE ...",
    /* THDI_PORT_SP_BST_XPE0_PIPE0 */ "This memory contains shadow copies, or maximum values of selected counters that are updated in the Per Port per SP memory array. Every cycle, up to two entries will be updated, or a single entry will be updated via a RMW (depending on chip wide configuration).\nMemory address = port_num[0..33] * 4 + spid[0..7].\nEach Entry contains:\n* ing_ptsp_bst_par:     Even Parity across bits 17:0\n* Ing_Port_SP_BST_Stat: Number of cells currently in use for this Port SP\n* ecc:                                   ...",
    /* THDI_PORT_SP_BST_XPE0_PIPE3 */ "This memory contains shadow copies, or maximum values of selected counters that are updated in the Per Port per SP memory array. Every cycle, up to two entries will be updated, or a single entry will be updated via a RMW (depending on chip wide configuration).\nMemory address = port_num[0..33] * 4 + spid[0..7].\nEach Entry contains:\n* ing_ptsp_bst_par:     Even Parity across bits 17:0\n* Ing_Port_SP_BST_Stat: Number of cells currently in use for this Port SP\n* ecc:                                   ...",
    /* THDI_PORT_SP_BST_XPE1_PIPE0 */ "This memory contains shadow copies, or maximum values of selected counters that are updated in the Per Port per SP memory array. Every cycle, up to two entries will be updated, or a single entry will be updated via a RMW (depending on chip wide configuration).\nMemory address = port_num[0..33] * 4 + spid[0..7].\nEach Entry contains:\n* ing_ptsp_bst_par:     Even Parity across bits 17:0\n* Ing_Port_SP_BST_Stat: Number of cells currently in use for this Port SP\n* ecc:                                   ...",
    /* THDI_PORT_SP_BST_XPE1_PIPE3 */ "This memory contains shadow copies, or maximum values of selected counters that are updated in the Per Port per SP memory array. Every cycle, up to two entries will be updated, or a single entry will be updated via a RMW (depending on chip wide configuration).\nMemory address = port_num[0..33] * 4 + spid[0..7].\nEach Entry contains:\n* ing_ptsp_bst_par:     Even Parity across bits 17:0\n* Ing_Port_SP_BST_Stat: Number of cells currently in use for this Port SP\n* ecc:                                   ...",
    /* THDI_PORT_SP_BST_XPE2_PIPE1 */ "This memory contains shadow copies, or maximum values of selected counters that are updated in the Per Port per SP memory array. Every cycle, up to two entries will be updated, or a single entry will be updated via a RMW (depending on chip wide configuration).\nMemory address = port_num[0..33] * 4 + spid[0..7].\nEach Entry contains:\n* ing_ptsp_bst_par:     Even Parity across bits 17:0\n* Ing_Port_SP_BST_Stat: Number of cells currently in use for this Port SP\n* ecc:                                   ...",
    /* THDI_PORT_SP_BST_XPE2_PIPE2 */ "This memory contains shadow copies, or maximum values of selected counters that are updated in the Per Port per SP memory array. Every cycle, up to two entries will be updated, or a single entry will be updated via a RMW (depending on chip wide configuration).\nMemory address = port_num[0..33] * 4 + spid[0..7].\nEach Entry contains:\n* ing_ptsp_bst_par:     Even Parity across bits 17:0\n* Ing_Port_SP_BST_Stat: Number of cells currently in use for this Port SP\n* ecc:                                   ...",
    /* THDI_PORT_SP_BST_XPE3_PIPE1 */ "This memory contains shadow copies, or maximum values of selected counters that are updated in the Per Port per SP memory array. Every cycle, up to two entries will be updated, or a single entry will be updated via a RMW (depending on chip wide configuration).\nMemory address = port_num[0..33] * 4 + spid[0..7].\nEach Entry contains:\n* ing_ptsp_bst_par:     Even Parity across bits 17:0\n* Ing_Port_SP_BST_Stat: Number of cells currently in use for this Port SP\n* ecc:                                   ...",
    /* THDI_PORT_SP_BST_XPE3_PIPE2 */ "This memory contains shadow copies, or maximum values of selected counters that are updated in the Per Port per SP memory array. Every cycle, up to two entries will be updated, or a single entry will be updated via a RMW (depending on chip wide configuration).\nMemory address = port_num[0..33] * 4 + spid[0..7].\nEach Entry contains:\n* ing_ptsp_bst_par:     Even Parity across bits 17:0\n* Ing_Port_SP_BST_Stat: Number of cells currently in use for this Port SP\n* ecc:                                   ...",
    /* THDI_PORT_SP_BST_Y        */ "This memory contains shadow copies, or maximum values of selected counters that are updated in the Per Port per PG memory array. Every cycle, up to two entries will be updated, or a single entry will be updated via a RMW (depending on chip wide configuration).\nMemory address = port_num[64..115] * 8 + pg[0..7].\nEach Entry contains:\n* ing_ptsp_bst_par:     Even Parity across bits 17:0\n* Ing_Port_SP_BST_Stat: Number of cells currently in use for this Port SP",
    /* THDI_PORT_SP_CNTRS        */ "This memory contains the counters and configuration that needs to be stored on a per port per service pool basis. Every cycle, up to two entries will be updated via a RMW operation.\nMemory address = port_num[0..62] * 4 + sp[0..3].\nEach Entry contains:\n* sp_shared_count:      No. of cells current used by this port in this service pool\n* ecc:                  SECDED across the other bits in this row.",
    /* THDI_PORT_SP_CNTRS_RT     */ "This memory contains the counters and configuration that needs to be stored on a per port per service pool basis. Every cycle, up to three entries will be updated via a RMW operation.\nMemory address = port_num[0..33] * 4 + sp[0..3].\nEach Entry contains:\n* sp_min_count:                No. of minimum guaranteed cells current used by this port in this service pool\n* sp_min_count_g1:        No. of minimum guaranteed cells current used by this port in this service pool is greater than 1\n* sp_min_coun ...",
    /* THDI_PORT_SP_CNTRS_RT_X   */ "This memory contains the counters and configuration that needs to be stored on a per port per service pool basis. Every cycle, up to three entries will be updated via a RMW operation.\nMemory address = port_num[0..52] * 4 + sp[0..3].\nEach Entry contains:\n* sp_min_count:                No. of minimum guaranteed cells current used by this port in this service pool\n* sp_min_count_g1:        No. of minimum guaranteed cells current used by this port in this service pool is greater than 1\n* sp_min_coun ...",
    /* THDI_PORT_SP_CNTRS_RT_XPE0_PIPE0 */ "This memory contains the counters and configuration that needs to be stored on a per port per service pool basis. Every cycle, up to three entries will be updated via a RMW operation.\nMemory address = port_num[0..33] * 4 + sp[0..3].\nEach Entry contains:\n* sp_min_count:                No. of minimum guaranteed cells current used by this port in this service pool\n* sp_min_count_g1:        No. of minimum guaranteed cells current used by this port in this service pool is greater than 1\n* sp_min_coun ...",
    /* THDI_PORT_SP_CNTRS_RT_XPE0_PIPE3 */ "This memory contains the counters and configuration that needs to be stored on a per port per service pool basis. Every cycle, up to three entries will be updated via a RMW operation.\nMemory address = port_num[0..33] * 4 + sp[0..3].\nEach Entry contains:\n* sp_min_count:                No. of minimum guaranteed cells current used by this port in this service pool\n* sp_min_count_g1:        No. of minimum guaranteed cells current used by this port in this service pool is greater than 1\n* sp_min_coun ...",
    /* THDI_PORT_SP_CNTRS_RT_XPE1_PIPE0 */ "This memory contains the counters and configuration that needs to be stored on a per port per service pool basis. Every cycle, up to three entries will be updated via a RMW operation.\nMemory address = port_num[0..33] * 4 + sp[0..3].\nEach Entry contains:\n* sp_min_count:                No. of minimum guaranteed cells current used by this port in this service pool\n* sp_min_count_g1:        No. of minimum guaranteed cells current used by this port in this service pool is greater than 1\n* sp_min_coun ...",
    /* THDI_PORT_SP_CNTRS_RT_XPE1_PIPE3 */ "This memory contains the counters and configuration that needs to be stored on a per port per service pool basis. Every cycle, up to three entries will be updated via a RMW operation.\nMemory address = port_num[0..33] * 4 + sp[0..3].\nEach Entry contains:\n* sp_min_count:                No. of minimum guaranteed cells current used by this port in this service pool\n* sp_min_count_g1:        No. of minimum guaranteed cells current used by this port in this service pool is greater than 1\n* sp_min_coun ...",
    /* THDI_PORT_SP_CNTRS_RT_XPE2_PIPE1 */ "This memory contains the counters and configuration that needs to be stored on a per port per service pool basis. Every cycle, up to three entries will be updated via a RMW operation.\nMemory address = port_num[0..33] * 4 + sp[0..3].\nEach Entry contains:\n* sp_min_count:                No. of minimum guaranteed cells current used by this port in this service pool\n* sp_min_count_g1:        No. of minimum guaranteed cells current used by this port in this service pool is greater than 1\n* sp_min_coun ...",
    /* THDI_PORT_SP_CNTRS_RT_XPE2_PIPE2 */ "This memory contains the counters and configuration that needs to be stored on a per port per service pool basis. Every cycle, up to three entries will be updated via a RMW operation.\nMemory address = port_num[0..33] * 4 + sp[0..3].\nEach Entry contains:\n* sp_min_count:                No. of minimum guaranteed cells current used by this port in this service pool\n* sp_min_count_g1:        No. of minimum guaranteed cells current used by this port in this service pool is greater than 1\n* sp_min_coun ...",
    /* THDI_PORT_SP_CNTRS_RT_XPE3_PIPE1 */ "This memory contains the counters and configuration that needs to be stored on a per port per service pool basis. Every cycle, up to three entries will be updated via a RMW operation.\nMemory address = port_num[0..33] * 4 + sp[0..3].\nEach Entry contains:\n* sp_min_count:                No. of minimum guaranteed cells current used by this port in this service pool\n* sp_min_count_g1:        No. of minimum guaranteed cells current used by this port in this service pool is greater than 1\n* sp_min_coun ...",
    /* THDI_PORT_SP_CNTRS_RT_XPE3_PIPE2 */ "This memory contains the counters and configuration that needs to be stored on a per port per service pool basis. Every cycle, up to three entries will be updated via a RMW operation.\nMemory address = port_num[0..33] * 4 + sp[0..3].\nEach Entry contains:\n* sp_min_count:                No. of minimum guaranteed cells current used by this port in this service pool\n* sp_min_count_g1:        No. of minimum guaranteed cells current used by this port in this service pool is greater than 1\n* sp_min_coun ...",
    /* THDI_PORT_SP_CNTRS_RT_Y   */ "This memory contains the counters and configuration that needs to be stored on a per port per service pool basis. Every cycle, up to three entries will be updated via a RMW operation.\nMemory address = port_num[64..115] * 4 + sp[0..3].\nEach Entry contains:\n* sp_min_count:                No. of minimum guaranteed cells current used by this port in this service pool\n* sp_min_count_g1:        No. of minimum guaranteed cells current used by this port in this service pool is greater than 1\n* sp_min_co ...",
    /* THDI_PORT_SP_CNTRS_SH     */ "This memory contains the shadow counters and configuration that needs to be stored on a per port per service pool basis. Every cycle, up to three entries will be updated via a RMW operation.\nMemory address = port_num[0..33] * 4 + sp[0..3].\nEach Entry contains:\n* sp_min_count:                No. of minimum guaranteed cells current used by this port in this service pool\n* sp_min_count_g1:        No. of minimum guaranteed cells current used by this port in this service pool is greater than 1\n* sp_m ...",
    /* THDI_PORT_SP_CNTRS_SH_X   */ "This memory contains the shadow counters and configuration that needs to be stored on a per port per service pool basis. Every cycle, up to three entries will be updated via a RMW operation.\nMemory address = port_num[0..52] * 4 + sp[0..3].\nEach Entry contains:\n* sp_min_count:                No. of minimum guaranteed cells current used by this port in this service pool\n* sp_min_count_g1:        No. of minimum guaranteed cells current used by this port in this service pool is greater than 1\n* sp_m ...",
    /* THDI_PORT_SP_CNTRS_SH_XPE0_PIPE0 */ "This memory contains the shadow counters and configuration that needs to be stored on a per port per service pool basis. Every cycle, up to three entries will be updated via a RMW operation.\nMemory address = port_num[0..33] * 4 + sp[0..3].\nEach Entry contains:\n* sp_min_count:                No. of minimum guaranteed cells current used by this port in this service pool\n* sp_min_count_g1:        No. of minimum guaranteed cells current used by this port in this service pool is greater than 1\n* sp_m ...",
    /* THDI_PORT_SP_CNTRS_SH_XPE0_PIPE3 */ "This memory contains the shadow counters and configuration that needs to be stored on a per port per service pool basis. Every cycle, up to three entries will be updated via a RMW operation.\nMemory address = port_num[0..33] * 4 + sp[0..3].\nEach Entry contains:\n* sp_min_count:                No. of minimum guaranteed cells current used by this port in this service pool\n* sp_min_count_g1:        No. of minimum guaranteed cells current used by this port in this service pool is greater than 1\n* sp_m ...",
    /* THDI_PORT_SP_CNTRS_SH_XPE1_PIPE0 */ "This memory contains the shadow counters and configuration that needs to be stored on a per port per service pool basis. Every cycle, up to three entries will be updated via a RMW operation.\nMemory address = port_num[0..33] * 4 + sp[0..3].\nEach Entry contains:\n* sp_min_count:                No. of minimum guaranteed cells current used by this port in this service pool\n* sp_min_count_g1:        No. of minimum guaranteed cells current used by this port in this service pool is greater than 1\n* sp_m ...",
    /* THDI_PORT_SP_CNTRS_SH_XPE1_PIPE3 */ "This memory contains the shadow counters and configuration that needs to be stored on a per port per service pool basis. Every cycle, up to three entries will be updated via a RMW operation.\nMemory address = port_num[0..33] * 4 + sp[0..3].\nEach Entry contains:\n* sp_min_count:                No. of minimum guaranteed cells current used by this port in this service pool\n* sp_min_count_g1:        No. of minimum guaranteed cells current used by this port in this service pool is greater than 1\n* sp_m ...",
    /* THDI_PORT_SP_CNTRS_SH_XPE2_PIPE1 */ "This memory contains the shadow counters and configuration that needs to be stored on a per port per service pool basis. Every cycle, up to three entries will be updated via a RMW operation.\nMemory address = port_num[0..33] * 4 + sp[0..3].\nEach Entry contains:\n* sp_min_count:                No. of minimum guaranteed cells current used by this port in this service pool\n* sp_min_count_g1:        No. of minimum guaranteed cells current used by this port in this service pool is greater than 1\n* sp_m ...",
    /* THDI_PORT_SP_CNTRS_SH_XPE2_PIPE2 */ "This memory contains the shadow counters and configuration that needs to be stored on a per port per service pool basis. Every cycle, up to three entries will be updated via a RMW operation.\nMemory address = port_num[0..33] * 4 + sp[0..3].\nEach Entry contains:\n* sp_min_count:                No. of minimum guaranteed cells current used by this port in this service pool\n* sp_min_count_g1:        No. of minimum guaranteed cells current used by this port in this service pool is greater than 1\n* sp_m ...",
    /* THDI_PORT_SP_CNTRS_SH_XPE3_PIPE1 */ "This memory contains the shadow counters and configuration that needs to be stored on a per port per service pool basis. Every cycle, up to three entries will be updated via a RMW operation.\nMemory address = port_num[0..33] * 4 + sp[0..3].\nEach Entry contains:\n* sp_min_count:                No. of minimum guaranteed cells current used by this port in this service pool\n* sp_min_count_g1:        No. of minimum guaranteed cells current used by this port in this service pool is greater than 1\n* sp_m ...",
    /* THDI_PORT_SP_CNTRS_SH_XPE3_PIPE2 */ "This memory contains the shadow counters and configuration that needs to be stored on a per port per service pool basis. Every cycle, up to three entries will be updated via a RMW operation.\nMemory address = port_num[0..33] * 4 + sp[0..3].\nEach Entry contains:\n* sp_min_count:                No. of minimum guaranteed cells current used by this port in this service pool\n* sp_min_count_g1:        No. of minimum guaranteed cells current used by this port in this service pool is greater than 1\n* sp_m ...",
    /* THDI_PORT_SP_CNTRS_SH_Y   */ "This memory contains the shadow counters and configuration that needs to be stored on a per port per service pool basis. Every cycle, up to three entries will be updated via a RMW operation.\nMemory address = port_num[64..115] * 4 + sp[0..3].\nEach Entry contains:\n* sp_min_count:                No. of minimum guaranteed cells current used by this port in this service pool\n* sp_min_count_g1:        No. of minimum guaranteed cells current used by this port in this service pool is greater than 1\n* sp ...",
    /* THDI_PORT_SP_CONFIG       */ "This memory contains the counters and configuration that needs to be stored on a per port per service pool basis. Every cycle, up to two entries will be updated via a RMW operation.\nMemory address = port_num[0..62] * 4 + sp[0..3].\nEach Entry contains:\n* sp_port_min_limit:    No. of cells to be reserved for this port in this service pool. These are in addition to the normal pool allocation.\n* sp_port_max_limit:    No. of cells allowed to be used by this port in this service pool - includes the mi ...",
    /* THDI_PORT_SP_CONFIG0      */ "This memory contains the configuration that needs to be stored on a per port per service pool basis. Every cycle, up to two entries will be read and compared with the equivalent row that is in the counter memory.\nMemory address = port_num[0..33] * 4 + sp[0..3].\nEach Entry contains:\n* port_sp_min_limit:                                   No. of cells to be reserved for this port in this service pool. These are in addition to the normal pool allocation.\n* port_sp_max_limit:                          ...",
    /* THDI_PORT_SP_CONFIG1      */ "This memory contains the configuration that needs to be stored on a per port per service pool basis. Every cycle, up to two entries will be read and compared with the equivalent row that is in the counter memory.\nMemory address = port_num[0..33] * 4 + sp[0..3].\nEach Entry contains:\n* port_sp_min_limit:                                   No. of cells to be reserved for this port in this service pool. These are in addition to the normal pool allocation.\n* port_sp_max_limit:                          ...",
    /* THDI_PORT_SP_CONFIG2      */ "This memory contains the configuration that needs to be stored on a per port per service pool basis. Every cycle, up to two entries will be read and compared with the equivalent row that is in the counter memory.\nMemory address = port_num[0..33] * 4 + sp[0..3].\nEach Entry contains:\n* port_sp_min_limit:                                   No. of cells to be reserved for this port in this service pool. These are in addition to the normal pool allocation.\n* port_sp_max_limit:                          ...",
    /* THDI_PORT_SP_CONFIG0_PIPE0 */ "This memory contains the configuration that needs to be stored on a per port per service pool basis. Every cycle, up to two entries will be read and compared with the equivalent row that is in the counter memory.\nMemory address = port_num[0..33] * 4 + sp[0..3].\nEach Entry contains:\n* port_sp_min_limit:                                   No. of cells to be reserved for this port in this service pool. These are in addition to the normal pool allocation.\n* port_sp_max_limit:                          ...",
    /* THDI_PORT_SP_CONFIG0_PIPE1 */ "This memory contains the configuration that needs to be stored on a per port per service pool basis. Every cycle, up to two entries will be read and compared with the equivalent row that is in the counter memory.\nMemory address = port_num[0..33] * 4 + sp[0..3].\nEach Entry contains:\n* port_sp_min_limit:                                   No. of cells to be reserved for this port in this service pool. These are in addition to the normal pool allocation.\n* port_sp_max_limit:                          ...",
    /* THDI_PORT_SP_CONFIG0_PIPE2 */ "This memory contains the configuration that needs to be stored on a per port per service pool basis. Every cycle, up to two entries will be read and compared with the equivalent row that is in the counter memory.\nMemory address = port_num[0..33] * 4 + sp[0..3].\nEach Entry contains:\n* port_sp_min_limit:                                   No. of cells to be reserved for this port in this service pool. These are in addition to the normal pool allocation.\n* port_sp_max_limit:                          ...",
    /* THDI_PORT_SP_CONFIG0_PIPE3 */ "This memory contains the configuration that needs to be stored on a per port per service pool basis. Every cycle, up to two entries will be read and compared with the equivalent row that is in the counter memory.\nMemory address = port_num[0..33] * 4 + sp[0..3].\nEach Entry contains:\n* port_sp_min_limit:                                   No. of cells to be reserved for this port in this service pool. These are in addition to the normal pool allocation.\n* port_sp_max_limit:                          ...",
    /* THDI_PORT_SP_CONFIG0_X    */ "This memory contains the configuration that needs to be stored on a per port per service pool basis. Every cycle, up to two entries will be read and compared with the euqivalent row that is in the counter memory.\nMemory address = port_num[0..52] * 4 + sp[0..3].\nEach Entry contains:\n* port_sp_min_limit:                                   No. of cells to be reserved for this port in this service pool. These are in addition to the normal pool allocation.\n* port_sp_max_limit:                          ...",
    /* THDI_PORT_SP_CONFIG0_Y    */ "This memory contains the configuration that needs to be stored on a per port per service pool basis. Every cycle, up to two entries will be read and compared with the euqivalent row that is in the counter memory.\nMemory address = port_num[64..115] * 4 + sp[0..3].\nEach Entry contains:\n* port_sp_min_limit:                                   No. of cells to be reserved for this port in this service pool. These are in addition to the normal pool allocation.\n* port_sp_max_limit:                        ...",
    /* THDI_PORT_SP_CONFIG1_PIPE0 */ "This memory contains the configuration that needs to be stored on a per port per service pool basis. Every cycle, up to two entries will be read and compared with the equivalent row that is in the counter memory.\nMemory address = port_num[0..33] * 4 + sp[0..3].\nEach Entry contains:\n* port_sp_min_limit:                                   No. of cells to be reserved for this port in this service pool. These are in addition to the normal pool allocation.\n* port_sp_max_limit:                          ...",
    /* THDI_PORT_SP_CONFIG1_PIPE1 */ "This memory contains the configuration that needs to be stored on a per port per service pool basis. Every cycle, up to two entries will be read and compared with the equivalent row that is in the counter memory.\nMemory address = port_num[0..33] * 4 + sp[0..3].\nEach Entry contains:\n* port_sp_min_limit:                                   No. of cells to be reserved for this port in this service pool. These are in addition to the normal pool allocation.\n* port_sp_max_limit:                          ...",
    /* THDI_PORT_SP_CONFIG1_PIPE2 */ "This memory contains the configuration that needs to be stored on a per port per service pool basis. Every cycle, up to two entries will be read and compared with the equivalent row that is in the counter memory.\nMemory address = port_num[0..33] * 4 + sp[0..3].\nEach Entry contains:\n* port_sp_min_limit:                                   No. of cells to be reserved for this port in this service pool. These are in addition to the normal pool allocation.\n* port_sp_max_limit:                          ...",
    /* THDI_PORT_SP_CONFIG1_PIPE3 */ "This memory contains the configuration that needs to be stored on a per port per service pool basis. Every cycle, up to two entries will be read and compared with the equivalent row that is in the counter memory.\nMemory address = port_num[0..33] * 4 + sp[0..3].\nEach Entry contains:\n* port_sp_min_limit:                                   No. of cells to be reserved for this port in this service pool. These are in addition to the normal pool allocation.\n* port_sp_max_limit:                          ...",
    /* THDI_PORT_SP_CONFIG1_X    */ "This memory contains the configuration that needs to be stored on a per port per service pool basis. Every cycle, up to two entries will be read and compared with the euqivalent row that is in the counter memory.\nMemory address = port_num[0..52] * 4 + sp[0..3].\nEach Entry contains:\n* port_sp_min_limit:                                   No. of cells to be reserved for this port in this service pool. These are in addition to the normal pool allocation.\n* port_sp_max_limit:                          ...",
    /* THDI_PORT_SP_CONFIG1_Y    */ "This memory contains the configuration that needs to be stored on a per port per service pool basis. Every cycle, up to two entries will be read and compared with the euqivalent row that is in the counter memory.\nMemory address = port_num[64..115] * 4 + sp[0..3].\nEach Entry contains:\n* port_sp_min_limit:                                   No. of cells to be reserved for this port in this service pool. These are in addition to the normal pool allocation.\n* port_sp_max_limit:                        ...",
    /* THDI_PORT_SP_CONFIG2_PIPE0 */ "This memory contains the configuration that needs to be stored on a per port per service pool basis. Every cycle, up to two entries will be read and compared with the equivalent row that is in the counter memory.\nMemory address = port_num[0..33] * 4 + sp[0..3].\nEach Entry contains:\n* port_sp_min_limit:                                   No. of cells to be reserved for this port in this service pool. These are in addition to the normal pool allocation.\n* port_sp_max_limit:                          ...",
    /* THDI_PORT_SP_CONFIG2_PIPE1 */ "This memory contains the configuration that needs to be stored on a per port per service pool basis. Every cycle, up to two entries will be read and compared with the equivalent row that is in the counter memory.\nMemory address = port_num[0..33] * 4 + sp[0..3].\nEach Entry contains:\n* port_sp_min_limit:                                   No. of cells to be reserved for this port in this service pool. These are in addition to the normal pool allocation.\n* port_sp_max_limit:                          ...",
    /* THDI_PORT_SP_CONFIG2_PIPE2 */ "This memory contains the configuration that needs to be stored on a per port per service pool basis. Every cycle, up to two entries will be read and compared with the equivalent row that is in the counter memory.\nMemory address = port_num[0..33] * 4 + sp[0..3].\nEach Entry contains:\n* port_sp_min_limit:                                   No. of cells to be reserved for this port in this service pool. These are in addition to the normal pool allocation.\n* port_sp_max_limit:                          ...",
    /* THDI_PORT_SP_CONFIG2_PIPE3 */ "This memory contains the configuration that needs to be stored on a per port per service pool basis. Every cycle, up to two entries will be read and compared with the equivalent row that is in the counter memory.\nMemory address = port_num[0..33] * 4 + sp[0..3].\nEach Entry contains:\n* port_sp_min_limit:                                   No. of cells to be reserved for this port in this service pool. These are in addition to the normal pool allocation.\n* port_sp_max_limit:                          ...",
    /* THDI_PORT_SP_CONFIG2_X    */ "This memory contains the configuration that needs to be stored on a per port per service pool basis. Every cycle, up to two entries will be read and compared with the euqivalent row that is in the counter memory.\nMemory address = port_num[0..52] * 4 + sp[0..3].\nEach Entry contains:\n* port_sp_min_limit:                                   No. of cells to be reserved for this port in this service pool. These are in addition to the normal pool allocation.\n* port_sp_max_limit:                          ...",
    /* THDI_PORT_SP_CONFIG2_Y    */ "This memory contains the configuration that needs to be stored on a per port per service pool basis. Every cycle, up to two entries will be read and compared with the euqivalent row that is in the counter memory.\nMemory address = port_num[64..115] * 4 + sp[0..3].\nEach Entry contains:\n* port_sp_min_limit:                                   No. of cells to be reserved for this port in this service pool. These are in addition to the normal pool allocation.\n* port_sp_max_limit:                        ...",
    /* THDI_PORT_SP_CONFIG_PIPE0 */ "This memory contains the configuration that needs to be stored on a per port per service pool basis. Every cycle, up to two entries will be read and compared with the equivalent row that is in the counter memory.\nMemory address = port_num[0..33] * 4 + sp[0..3].\nEach Entry contains:\n* port_sp_min_limit:                                   No. of cells to be reserved for this port in this service pool. These are in addition to the normal pool allocation.\n* port_sp_max_limit:                          ...",
    /* THDI_PORT_SP_CONFIG_PIPE1 */ "This memory contains the configuration that needs to be stored on a per port per service pool basis. Every cycle, up to two entries will be read and compared with the equivalent row that is in the counter memory.\nMemory address = port_num[0..33] * 4 + sp[0..3].\nEach Entry contains:\n* port_sp_min_limit:                                   No. of cells to be reserved for this port in this service pool. These are in addition to the normal pool allocation.\n* port_sp_max_limit:                          ...",
    /* THDI_PORT_SP_CONFIG_PIPE2 */ "This memory contains the configuration that needs to be stored on a per port per service pool basis. Every cycle, up to two entries will be read and compared with the equivalent row that is in the counter memory.\nMemory address = port_num[0..33] * 4 + sp[0..3].\nEach Entry contains:\n* port_sp_min_limit:                                   No. of cells to be reserved for this port in this service pool. These are in addition to the normal pool allocation.\n* port_sp_max_limit:                          ...",
    /* THDI_PORT_SP_CONFIG_PIPE3 */ "This memory contains the configuration that needs to be stored on a per port per service pool basis. Every cycle, up to two entries will be read and compared with the equivalent row that is in the counter memory.\nMemory address = port_num[0..33] * 4 + sp[0..3].\nEach Entry contains:\n* port_sp_min_limit:                                   No. of cells to be reserved for this port in this service pool. These are in addition to the normal pool allocation.\n* port_sp_max_limit:                          ...",
    /* THDI_PORT_SP_CONFIG_X     */ "This memory contains the configuration that needs to be stored on a per port per service pool basis. Every cycle, up to two entries will be read and compared with the euqivalent row that is in the counter memory.\nMemory address = port_num[0..52] * 4 + sp[0..3].\nEach Entry contains:\n* port_sp_min_limit:                                   No. of cells to be reserved for this port in this service pool. These are in addition to the normal pool allocation.\n* port_sp_max_limit:                          ...",
    /* THDI_PORT_SP_CONFIG_Y     */ "This memory contains the configuration that needs to be stored on a per port per service pool basis. Every cycle, up to two entries will be read and compared with the euqivalent row that is in the counter memory.\nMemory address = port_num[64..115] * 4 + sp[0..3].\nEach Entry contains:\n* port_sp_min_limit:                                   No. of cells to be reserved for this port in this service pool. These are in addition to the normal pool allocation.\n* port_sp_max_limit:                        ...",
    /* THDO_CONFIG_0A            */ "First physical copy of MMU_THDO_CONFIG_0",
    /* THDO_CONFIG_0B            */ "Second physical copy of MMU_THDO_CONFIG_0",
    /* THDO_CONFIG_1A            */ "First physical copy of MMU_THDO_CONFIG_1",
    /* THDO_CONFIG_1B            */ "Second physical copy of MMU_THDO_CONFIG_1",
    /* THDO_CONFIG_EX_0A         */ "First physical copy of MMU_THDO_CONFIG_EX_0",
    /* THDO_CONFIG_EX_0B         */ "Second physical copy of MMU_THDO_CONFIG_EX_0",
    /* THDO_CONFIG_EX_1A         */ "First physical copy of MMU_THDO_CONFIG_EX_1",
    /* THDO_CONFIG_EX_1B         */ "Second physical copy of MMU_THDO_CONFIG_EX_1",
    /* THDO_OFFSET_0A            */ "First physical copy of MMU_THDO_OFFSET_0",
    /* THDO_OFFSET_0B            */ "Second physical copy of MMU_THDO_OFFSET_0",
    /* THDO_OFFSET_1A            */ "First physical copy of MMU_THDO_OFFSET_1",
    /* THDO_OFFSET_1B            */ "Second physical copy of MMU_THDO_OFFSET_1",
    /* THDO_OFFSET_EX_0A         */ "First physical copy of MMU_THDO_OFFSET_EX_0",
    /* THDO_OFFSET_EX_0B         */ "Second physical copy of MMU_THDO_OFFSET_EX_0",
    /* THDO_OFFSET_EX_1A         */ "First physical copy of MMU_THDO_OFFSET_EX_1",
    /* THDO_OFFSET_EX_1B         */ "Second physical copy of MMU_THDO_OFFSET_EX_1",
    /* THDO_OPNCOUNT_QENTRY      */ "THDO Op-Node total count shadow storage for WRED access in the range 0-511",
    /* THDO_QCOUNT_CELL_1        */ "copy of MMU_THDO_QCOUNT_CELL_0 for queues in the range [2048...4095]",
    /* THDO_QCOUNT_QENTRY        */ "THDO Queue total count shadow storage for WRED access for queues in the range 0-2047",
    /* THDO_QCOUNT_QENTRY_0      */ "THDO Queue total count shadow storage for WRED access for queues in the range 0-2047",
    /* THDO_QCOUNT_QENTRY_1      */ "copy of MMU_THDO_QCOUNT_QENTRY_0 for queues in the range 2048-4095",
    /* THDO_QRESET_VALUE_CELL_1  */ "copy of MMU_THDO_QRESET_VALUE_CELL_0 for queues > 2047",
    /* THDO_QRESET_VALUE_QENTRY_1 */ "copy of MMU_THDO_QRESET_VALUE_QENTRY_0 for queues in the range 2048-4095",
    /* THDO_QSTATUS_CELL_1       */ "copy of MMU_THDO_QSTATUS_CELL_0 for queues in the range 2048-4095",
    /* THDO_QSTATUS_QENTRY_1     */ "copy of MMU_THDO_QSTATUS_QENTRY_0 for queues in the range 2048-4095",
    /* TIMESLOT_BURST_SIZE_BYTES */ "burst size in bytes for each node type for 1 to 48 channels",
    /* TMA_HASH0_RANDTABLE0      */ "RandTable entries for hash computation",
    /* TMA_HASH0_RANDTABLE1      */ "RandTable entries for hash computation",
    /* TMA_HASH0_RANDTABLE2      */ "RandTable entries for hash computation",
    /* TMA_HASH0_RANDTABLE3      */ "RandTable entries for hash computation",
    /* TMA_HASH0_RANDTABLE4      */ "RandTable entries for hash computation",
    /* TMA_HASH0_RANDTABLE5      */ "RandTable entries for hash computation",
    /* TMA_HASH0_RANDTABLE6      */ "RandTable entries for hash computation",
    /* TMA_HASH0_RANDTABLE7      */ "RandTable entries for hash computation",
    /* TMA_HASH1_RANDTABLE0      */ "RandTable entries for hash computation",
    /* TMA_HASH1_RANDTABLE1      */ "RandTable entries for hash computation",
    /* TMA_HASH1_RANDTABLE2      */ "RandTable entries for hash computation",
    /* TMA_HASH1_RANDTABLE3      */ "RandTable entries for hash computation",
    /* TMA_HASH1_RANDTABLE4      */ "RandTable entries for hash computation",
    /* TMA_HASH1_RANDTABLE5      */ "RandTable entries for hash computation",
    /* TMA_HASH1_RANDTABLE6      */ "RandTable entries for hash computation",
    /* TMA_HASH1_RANDTABLE7      */ "RandTable entries for hash computation",
    /* TMA_PM_HIST0              */ "Performance Monitor Histogram Table 0",
    /* TMA_PM_HIST1              */ "Performance Monitor Histogram Table 1",
    /* TMA_PM_HIST2              */ "Performance Monitor Histogram Table 2",
    /* TMA_PM_HIST3              */ "Performance Monitor Histogram Table 3",
    /* TMA_PM_HIST4              */ "Performance Monitor Histogram Table 4",
    /* TMA_PM_HIST5              */ "Performance Monitor Histogram Table 5",
    /* TMA_PM_HIST6              */ "Performance Monitor Histogram Table 6",
    /* TMA_PM_HIST7              */ "Performance Monitor Histogram Table 7",
    /* TMB_DISTRIBUTOR_REGION_DEFINITION */ "Each entry defines a region",
    /* TMB_DISTRIBUTOR_SCRAMBLE_TABLE0 */ "Each entry defines a region",
    /* TMB_DISTRIBUTOR_SCRAMBLE_TABLE1 */ "Each entry defines a region",
    /* TMB_DISTRIBUTOR_SCRAMBLE_TABLE2 */ "Each entry defines a region",
    /* TMB_HASH0_RANDTABLE0      */ "RandTable entries for hash computation",
    /* TMB_HASH0_RANDTABLE1      */ "RandTable entries for hash computation",
    /* TMB_HASH0_RANDTABLE2      */ "RandTable entries for hash computation",
    /* TMB_HASH0_RANDTABLE3      */ "RandTable entries for hash computation",
    /* TMB_HASH0_RANDTABLE4      */ "RandTable entries for hash computation",
    /* TMB_HASH0_RANDTABLE5      */ "RandTable entries for hash computation",
    /* TMB_HASH0_RANDTABLE6      */ "RandTable entries for hash computation",
    /* TMB_HASH0_RANDTABLE7      */ "RandTable entries for hash computation",
    /* TMB_LPM_DBUCKET_IPV4_128  */ "TMB LPM IPV4 128 bits bucket format",
    /* TMB_LPM_DBUCKET_IPV4_256  */ "TMB LPM IPV4 256 bits bucket format",
    /* TMB_LPM_DBUCKET_IPV6_128  */ "TMB LPM IPV6 128 bits bucket format",
    /* TMB_LPM_DBUCKET_IPV6_256  */ "TMB LPM IPV6 256 bits bucket format",
    /* TMB_UPDATER_CMD_EML_DELETE */ "EML Delete command definition",
    /* TMB_UPDATER_CMD_EML_INS_BEGIN_END */ "EML INS/END command definition",
    /* TMB_UPDATER_CMD_FIFO0     */ "Writing to this memory pushes 4 64b command words into FIFO. This \"memory\" is Write-Only. Reads will be nack'd.",
    /* TMB_UPDATER_CMD_FIFO1     */ "Writing to this memory pushes 4 64b command words into FIFO. This \"memory\" is Write-Only. Reads will be nack'd.",
    /* TMB_UPDATER_CMD_LOCK_RELEASE */ "tmu lock release command definition",
    /* TMB_UPDATER_CMD_NOP       */ "NOP command definition",
    /* TMB_UPDATER_CMD_RAW_READ  */ "tmu raw read command definition",
    /* TMB_UPDATER_CMD_RAW_WRITE */ "tmu raw write command definition",
    /* TMB_UPDATER_CMD_XL_READ   */ "XL read command definition",
    /* TMB_UPDATER_CMD_XL_WRITE  */ "XL write command definition",
    /* TMB_UPDATER_FREE_CHAIN_FIFO0 */ "Writing to this memory pushes a free chain into the FIFO. This \"memory\" is Write-Only. Reads will be nack'd.",
    /* TMB_UPDATER_FREE_CHAIN_FIFO1 */ "Writing to this memory pushes a free chain into the FIFO. This \"memory\" is Write-Only. Reads will be nack'd.",
    /* TMB_UPDATER_FREE_CHAIN_FIFO2 */ "Writing to this memory pushes a free chain into the FIFO. This \"memory\" is Write-Only. Reads will be nack'd.",
    /* TMB_UPDATER_FREE_CHAIN_FIFO3 */ "Writing to this memory pushes a free chain into the FIFO. This \"memory\" is Write-Only. Reads will be nack'd.",
    /* TMB_UPDATER_RECYCLE_CHAIN_FIFO */ "Reading from memory pops a recycled chain from the FIFO. The \"memory\" is Read-Only, Writes will be nack'd.",
    /* TMB_UPDATER_RESPONSE      */ "non-TAPS response definition",
    /* TMB_UPDATER_RSP_FIFO0     */ "Reading from memory pops a 64b response words from the FIFO. The \"memory\" is Read-Only, Writes will be nack'd.",
    /* TMB_UPDATER_RSP_FIFO1     */ "Reading from memory pops a 64b response words from the FIFO. The \"memory\" is Read-Only, Writes will be nack'd.",
    /* TMB_UPDATER_TAPS_RESPONSE */ "TAPS response definition",
    /* TOS_FN                    */ "TOS FUNCTION TABLE FOR IFP, FeatureSpecific-Ethernet",
    /* TOS_FN_PIPE0              */ "TOS FUNCTION TABLE FOR IFP.",
    /* TOS_FN_PIPE1              */ "TOS FUNCTION TABLE FOR IFP.",
    /* TOS_FN_PIPE2              */ "TOS FUNCTION TABLE FOR IFP.",
    /* TOS_FN_PIPE3              */ "TOS FUNCTION TABLE FOR IFP.",
    /* TRILL_DROP_STATS          */ "TRILL_DROP_STATS table.",
    /* TRILL_DROP_STATS_PIPE0    */ "TRILL_DROP_STATS Table. Counts the number of dropped Trill frames due to various conditions. X and Y ingress pipe are countered independently.",
    /* TRILL_DROP_STATS_PIPE1    */ "TRILL_DROP_STATS Table. Counts the number of dropped Trill frames due to various conditions. X and Y ingress pipe are countered independently.",
    /* TRILL_DROP_STATS_PIPE2    */ "TRILL_DROP_STATS Table. Counts the number of dropped Trill frames due to various conditions. X and Y ingress pipe are countered independently.",
    /* TRILL_DROP_STATS_PIPE3    */ "TRILL_DROP_STATS Table. Counts the number of dropped Trill frames due to various conditions. X and Y ingress pipe are countered independently.",
    /* TRILL_DROP_STATS_X        */ "TRILL_DROP_STATS table.",
    /* TRILL_DROP_STATS_Y        */ "TRILL_DROP_STATS table.",
    /* TRUNK32_CONFIG_TABLE      */ "TRUNK32_CONFIG_TABLE holds fields necessary to futher parse a higig packet when the source is a TrunkID (no src_modid/port are present), address=TGID[4:0], FeatureSpecific-Ethernet",
    /* TRUNK32_PORT_TABLE        */ "HG port PWE_PROFILE_INDEX lookup in Trunk32 mode",
    /* TRUNK_BITMAP              */ "Source Trunk Bitmap Table",
    /* TRUNK_CBL_TABLE           */ "Trunk (LAG) Class Based Learning Attribute Table for class based station movement. Direct index table, address = TGID[6:0]",
    /* TRUNK_EGR_MASK            */ "Trunk Egress Block Mask Table",
    /* TRUNK_GROUP               */ "Egress Mask Table",
    /* TRUNK_MEMBER              */ "Contains the members in each LAG group.",
    /* TRUNK_RR_CNT              */ "Trunk Group Round Robin Count.",
    /* TRUNK_RR_CNT_PIPE0        */ "Trunk Group Round Robin Count.",
    /* TRUNK_RR_CNT_PIPE1        */ "Trunk Group Round Robin Count.",
    /* TRUNK_RR_CNT_PIPE2        */ "Trunk Group Round Robin Count.",
    /* TRUNK_RR_CNT_PIPE3        */ "Trunk Group Round Robin Count.",
    /* TSN_PRI_OFFSET            */ "New priority/ TSN_CIRCUIT_ID OFFSET mapping table.",
    /* TTL_FN                    */ "TTL FUNCTION TABLE FOR IFP, FeatureSpecific-Ethernet",
    /* TTL_FN_PIPE0              */ "TTL FUNCTION TABLE FOR IFP.",
    /* TTL_FN_PIPE1              */ "TTL FUNCTION TABLE FOR IFP.",
    /* TTL_FN_PIPE2              */ "TTL FUNCTION TABLE FOR IFP.",
    /* TTL_FN_PIPE3              */ "TTL FUNCTION TABLE FOR IFP.",
    /* TXLP_DEBUG_COUNTER0       */ "This table counts the triggers set in TXLP_DEBUG_COUNTER_SELECT0 register",
    /* TXLP_DEBUG_COUNTER1       */ "This table counts the triggers set in TXLP_DEBUG_COUNTER_SELECT1 register",
    /* TXLP_DEBUG_COUNTER2       */ "This table counts the triggers set in TXLP_DEBUG_COUNTER_SELECT2 register",
    /* TXLP_DEBUG_COUNTER3       */ "This table counts the triggers set in TXLP_DEBUG_COUNTER_SELECT3 register",
    /* TXLP_DEBUG_COUNTER4       */ "This table counts the triggers set in TXLP_DEBUG_COUNTER_SELECT4 register",
    /* TXLP_DEBUG_COUNTER5       */ "This table counts the triggers set in TXLP_DEBUG_COUNTER_SELECT5 register",
    /* TXLP_DEBUG_COUNTER6       */ "This table counts the triggers set in TXLP_DEBUG_COUNTER_SELECT6 register",
    /* TXLP_DEBUG_COUNTER7       */ "This table counts the triggers set in TXLP_DEBUG_COUNTER_SELECT7 register",
    /* TXLP_DEBUG_COUNTER8       */ "This table counts the number of Fragment-Bytes/stream transmitted by TXLP",
    /* TXLP_DEBUG_COUNTER9       */ "This table counts the number of Fragments/stream transmitted by TXLP",
    /* TXLP_DEBUG_COUNTER10      */ "This table counts the number of Frame-Bytes/stream transmitted by TXLP",
    /* TXLP_DEBUG_COUNTER11      */ "This table counts the number of Frames/stream transmitted by TXLP",
    /* TXLP_INT2EXT_STREAM_MAP_TABLE */ "Used for mapping the Internal-SID(7b) to External-SID(10b)",
    /* TXLP_PORT_ADDR_MAP_TABLE  */ "-----------------------------------------------------------------------\nNOTE::\nTHIS TABLE HAS TO BE PROGRAMMED ONLY WHEN ATLEAST ONE OR MORE PORTS IS\nRUNNING IN NON-LP-MODE.\nWHEN ALL-PORTS ARE RUNNING IN LP MODE, DONOT PROGRAM THIS TABLE.\n-----------------------------------------------------------------------\nThis table governs the buffer allocation for the  NON-LP PORTS.(4-sub-ports).\nThere is a total of 856-cell worth of storage in the TXL-DATA-BUFFER.\n856 cells have to be distributed across:\n ...",
    /* TXLP_PORT_MMU_REQUESTS    */ "This table contains buffer-utilization information on per-port basis for the NON-LP-Ports.\nThis is READ_ONLY for s/w\",",
    /* TXLP_PORT_REQUESTS        */ "This table contains the cell requests asserted by the port-block.",
    /* TXLP_PORT_STREAM_BITMAP_TABLE */ "Indicates what are the valid streams on a sub-port of a port-interface in a bitmap format.\nEach bit set indicates that SID being part of that port.\nNote that same stream cannot be enabled on more than one sub-port.\nWhen the port is in LP-mode, then Stream-ID for that sub-port is in Range [0-127] only.\nIn LP-Mode:\n===========\nSub-port    |  SID range\n   0        |     [0-127]\n   1        |     [0-127]\n   2        |     [0-127]\n   3        |     [0-127]\n\nHowever,When it is in Non-LP Mode following ...",
    /* TXLP_PORT_USED_ENTRIES    */ "This table contains the entires (each 96B) occupied in the buffer on per-stream basis\non a NON-LP-PORT.",
    /* TXLP_STREAM_ADDR_MAP_TABLE */ "-----------------------------------------------------------------------\nNOTE::\nTHIS TABLE HAS TO BE PROGRAMMED ONLY WHEN ATLEAST ONE OR MORE PORTS IS\nRUNNING IN LP-MODE.\nWHEN ALL-PORTS ARE RUNNING IN NON-LP MODE, DONOT PROGRAM THIS TABLE.\n-----------------------------------------------------------------------\nThis table governs the buffer allocation for the streams across all LP-ENABLED ports.\nThere is a total of 856-cell worth of storage in the TXL-DATA-BUFFER.\n856 cells have to be distributed  ...",
    /* TXLP_STREAM_MMU_REQUESTS  */ "This table contains buffer-utilization information on per-stream basis for the LP-ENABLED Ports.\nThis is READ_ONLY for s/w\",",
    /* TXLP_STREAM_USED_ENTRIES  */ "This table contains the entires (each 96B) occupied in the buffer on per-stream basis\non a LP-ENABLED-PORT.",
    /* TXQ_DDP_RXI_MEM           */ "RXI memory",
    /* TXQ_DRAM_CTQ              */ "",
    /* TXQ_DRAM_DTQ              */ "",
    /* TXQ_DRAM_EGQC             */ "",
    /* TXQ_DRAM_EGQD             */ "",
    /* TXQ_ITE_RXI_MEM           */ "RXI memory",
    /* TXQ_PER_DTQ_CFG           */ "Configuration per queue of PDQ (DQCF and DBLF).",
    /* TXQ_PER_WFQ_CFG           */ "Configuration per PTS WFQ\n addr=0 : SRAM:DRAM - DTQ0\n addr=1 : SRAM:DRAM - DTQ1\n addr=2 : SRAM:DRAM - DTQ2\n addr=4 : SRAM: DRAM - EGQ\n All the WFQs arbitrates between 2 contexts, wach on has its weight.",
    /* TXQ_PRIORITY_BITS_MAPPING_2_FDT */ "This table maps the incoming index, build from various packet parameters to 2 priority bits send to the FDT.\n The fields building the input of the table are:\n hp, mc, dp2 trfcls3",
    /* TXQ_SRAM_CTQ              */ "",
    /* TXQ_SRAM_DTQ              */ "",
    /* TXQ_SRAM_EGQC             */ "",
    /* TXQ_SRAM_EGQD             */ "",
    /* TXSACRPTPKTS              */ "Transmit SA Encrypted Frame Counter",
    /* TXSAPRTCPKTS              */ "Transmit SA Authentication Only Frame Counter",
    /* TXSCCRPTBYT               */ "Transmit Encrypted Frame Octet Counter for SC",
    /* TXSCCRPTPKTS              */ "Transmit Encrypted Frame Counter for SC",
    /* TXSCPRTCBYT               */ "Transmit Authentication Only Frame Octet Counter for SC",
    /* TXSCPRTCPKTS              */ "Transmit Authentication Only Frame Counter for SC",
    /* TXUNTAGPKTS               */ "Transmit Untagged Frame Counter",
    /* TX_INITIAL_PROT_GROUP_TABLE */ "Protection Switching (backup path) Next Hop Table.",
    /* TX_PFC_SRC_PORT_LKUP      */ "This database contains the PFC Source Port Lookup table. A similar database, PFC_ENQ_SRC_PORT_LKUP, exists in the QM block. The two databases must have identical entry values. All entries are initialized to 0 on a reset",
    /* TX_PROT_GROUP_1_1_TABLE   */ "Protection Switching (backup path) Next Hop Table.",
    /* TX_PROT_GROUP_1_TABLE     */ "Protection Switching (backup path) Next Hop Table.",
    /* TX_SFI_CFIFO              */ "This is the SFI Control FIFO. Access is for debug only and not in traffic.  Address format is {plane, fifo_addr}",
    /* TX_SFI_DFIFO              */ "This is the SFI Data FIFO. Access is for debug only and not in traffic.  Address format is {plane, lane, fifo_addr}",
    /* TYPE_RESOLUTION_TABLE     */ "This database contains the Type Resolution Table.",
    /* UDF_CONDITIONAL_CHECK_TABLE_CAM */ "Flexible Hashing Scheme conditional check matching TCAM.",
    /* UDF_CONDITIONAL_CHECK_TABLE_RAM */ "Flexible Hashing Scheme conditional check offsets. and masks.",
    /* UDF_CONDITIONAL_CHECK_TABLE_RAM_1 */ "Flexible Hashing Scheme conditional masks.",
    /* UDF_OFFSET                */ "UDF offset table",
    /* UFLOW_A                   */ "Flow table A",
    /* UFLOW_B                   */ "UFLOW table B",
    /* UNKNOWN_HGI_BITMAP        */ "Forwarding bitmap for unknown HGI.",
    /* UNKNOWN_MCAST_BLOCK_MASK  */ "Unknown Multicast Block Mask, FeatureSpecific-Ethernet.",
    /* UNKNOWN_UCAST_BLOCK_MASK  */ "Unknown Unicast Block Mask, FeatureSpecific-Ethernet.",
    /* VFI                       */ "VFI Properties - address is VFI value.",
    /* VFI_1                     */ "VFI-1 Table (used for MAC-in-MAC and HG ports) - address is VFI value.",
    /* VFI_PROFILE               */ "VFI profile table.",
    /* VFI_PROFILE_2             */ "VFI Profile Table 2. Contains sets of block masks that can be enabled depending on the packet type (UC/MC/BC).",
    /* VFP_HASH_FIELD_BMAP_TABLE_A */ "VFP_HASH_FIELD_BMAP_TABLE_A.",
    /* VFP_HASH_FIELD_BMAP_TABLE_B */ "VFP_HASH_FIELD_BMAP_TABLE_B.",
    /* VFP_POLICY_TABLE          */ "POLICY TABLE FOR DETERMINING ACTIONS IN THE VFP",
    /* VFP_POLICY_TABLE_PIPE0    */ "Policy Table for determining actions in the VFP.",
    /* VFP_POLICY_TABLE_PIPE1    */ "Policy Table for determining actions in the VFP.",
    /* VFP_POLICY_TABLE_PIPE2    */ "Policy Table for determining actions in the VFP.",
    /* VFP_POLICY_TABLE_PIPE3    */ "Policy Table for determining actions in the VFP.",
    /* VFP_TCAM                  */ "TCAM FOR VFP",
    /* VFP_TCAM_PIPE0            */ "TCAM Table for Matching VFP Rules.",
    /* VFP_TCAM_PIPE1            */ "TCAM Table for Matching VFP Rules.",
    /* VFP_TCAM_PIPE2            */ "TCAM Table for Matching VFP Rules.",
    /* VFP_TCAM_PIPE3            */ "TCAM Table for Matching VFP Rules.",
    /* VLAN_2_TAB                */ "Contains Controls assoc with the 4K VLANs.",
    /* VLAN_COS_MAP              */ "index by vid",
    /* VLAN_MAC                  */ "Holds key & data for MAC-based VLAN substitution",
    /* VLAN_MAC_OVERFLOW         */ "Holds key & data for MAC-based VLAN substitution. Overflow Table to populate entries if regular table is full. FeatureSpecific-Ethernet.",
    /* VLAN_MAC_SCRATCH          */ "Single VLAN_MAC entry that is usable by software when shifting VLAN_MAC entries across the dual hash.  Fully usable entry that is searched for every packet. Acts like a fully-associative 9th entry (for every bucket.)",
    /* VLAN_MPLS                 */ "Contains MPLS cntrls assoc with the 4K VLANs.",
    /* VLAN_OR_VFI_MAC_COUNT     */ "Vlan MAC limit counters",
    /* VLAN_OR_VFI_MAC_LIMIT     */ "Vlan MAC limit counters",
    /* VLAN_PROFILE_2            */ "Vlan Profile Table 2",
    /* VLAN_PROFILE_TAB          */ "VLAN profile table",
    /* VLAN_PROTOCOL             */ "Holds data for Protocol-based VLAN substitution.  Just the VLAN_PROTOCOL RAM.",
    /* VLAN_PROTOCOL_DATA        */ "Holds data for Protocol-based VLAN substitution",
    /* VLAN_SUBNET               */ "TCAM for IP subnet based VLAN substitution",
    /* VLAN_SUBNET_DATA_ONLY     */ "Holds data for IP Subnet-based VLAN substitution",
    /* VLAN_SUBNET_ONLY          */ "TCAM for IP subnet based VLAN substitution",
    /* VLAN_TAB                  */ "Contains cntrls assoc with the 4K VLANs.",
    /* VLAN_XLATE                */ "BCAM for VLAN trans of tagged pkts.",
    /* VLAN_XLATE_1              */ "",
    /* VLAN_XLATE_1_HIT_ONLY     */ "VLAN_XLATE_1_HIT_ONLY, Single base entry views. FeatureSpecific-Ethernet.",
    /* VLAN_XLATE_2_HIT_ONLY     */ "VLAN_XLATE_2_HIT_ONLY, Double base entry views. FeatureSpecific-Ethernet.",
    /* VLAN_XLATE_DATA_ONLY      */ "Data SRAM for VLAN_XLATE BCAM.",
    /* VLAN_XLATE_ECC            */ "ECC Table for VLAN_XLATE.",
    /* VLAN_XLATE_EXTD           */ "VLAN_XLATE_2, Double base entry views. FeatureSpecific-Ethernet.",
    /* VLAN_XLATE_LP             */ "VLAN_XLATE LP Control Table.",
    /* VLAN_XLATE_MASK           */ "View of CAM and RAM, with the mask bits visible and readable and writable. FeatureSpecific-Ethernet",
    /* VLAN_XLATE_ONLY           */ "BCAM for VLAN trans of tagged pkts.",
    /* VLAN_XLATE_OVERFLOW       */ "This table is shared with the VLAN_MAC_OVERFLOW table. View of CAM and RAM for overflow table, which is used if entry can not be inserted in the Normal Vlan Xlate Table. FeatureSpecific-Ethernet.",
    /* VLAN_XLATE_SCRATCH        */ "Single VLAN_XLATE entry that is usable by software.when shifting VLAN_XLATE entries across the dual hash.  Fully usable entry that is searched for every packet. Acts like a fully-associative 9th entry (for every bucket.)",
    /* VOQ_ARRIVALS              */ "The database assigns queues to buffer usage profiles",
    /* VOQ_CONFIG                */ "The database contains the minimum buffer parameter for buffer profile",
    /* VOQ_COS_MAP               */ "VOQ Mapping table.",
    /* VOQ_MOD_MAP               */ "VOQ MODID Mapping table. index by dest_ModID[7:0]",
    /* VOQ_PORT_MAP              */ "VOQ PORTID Mapping table. index by {voq_port_profile_index[1:0], Dest_Port[6:0]",
    /* VRF                       */ "VRF Properties - address is VRF value.",
    /* WLAN_SVP_TABLE            */ "Holds fields specific to WLAN SVPs for second pass processing. FeatureSpecific-Wireless",
    /* WRED_AVG_QUEUE_LENGTH     */ "The database contains the current QAVG for LQs with IDs 32k to 64k-1",
    /* WRED_CURVE                */ "The database stored the WRED Curve configurations for local queues.",
    /* WRED_STATE                */ "The database stored the VOQ WRED Drop Data provided by BME.",
    /* XLPORT_WC_UCMEM_DATA      */ "Warpcore External Memory Interface to program micro-controller memory",
    /* XPORT_EHG_RX_TUNNEL_DATA  */ "Embedded Higig Rx tunnel data memory",
    /* XPORT_EHG_RX_TUNNEL_MASK  */ "Embedded Higig Rx tunnel data memory",
    /* XPORT_EHG_TX_TUNNEL_DATA  */ "Embedded Higig Rx tunnel data memory",
    /* XPORT_WC_UCMEM_DATA       */ "Warpcore External Memory Interface to program micro-controller memory",
    /* XQPORT_EHG_RX_TUNNEL_DATA */ "Embedded Higig Rx tunnel data memory",
    /* XQPORT_EHG_RX_TUNNEL_MASK */ "Embedded Higig Rx tunnel data memory",
    /* XQPORT_EHG_TX_TUNNEL_DATA */ "Embedded Higig Rx tunnel data memory",
    /* X_ARB_TDM_TABLE           */ "MMU to X_EPIPE Arbiter TDM Table",
    /* Y_ARB_TDM_TABLE           */ "MMU to X_EPIPE Arbiter TDM Table",
