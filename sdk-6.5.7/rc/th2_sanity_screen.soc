# $Id: $
# $Copyright: (c) 2016 Broadcom.
# Broadcom Proprietary and Confidential. All rights reserved.$
#
# Tomahawk2 Sanity
#
# Script to run all available tests as quickly as possible.
# For testing basic sanity of new drivers, simulators, chips, etc.

# Set run command script not to fail on errors reported by commands
# this allows the script to continue if a test fails
set rcerror=false

# Set up test mode: don't stop on errors, show progress on each test
tm -stoponerror +progress
# Unselect all
ts -*

echo "testsuite: started: sanity"
time 'rcload rc.soc'
counter off
l2mode off

# We need to print out port status since any cabling effects results.
*:ps

if $?1 'local full_test 1'

# Avoid link messages while testing
linkscan off

init soc
local done 'echo "   Done"'

#Display some useful information
date
ver
soc

bb voltage core 0.92

#Start Test
echo "tr 2: Running PCI Compliance ..."
tr 2
$done
date
echo "tr 4: Running PCI S-Channel Buf ..."
tr 4
$done
date

echo "tr 1: Running Register reset defaults ..."
tr 1
$done
date
init soc
init misc
echo "tr 3: Running Register read/write ..."
tr 3 mask64
$done
date
rcload rc.soc
counter off
l2mode off
linkscan off
memscan off

echo "tr 21: Running CPU Benchmarks ..."
tr 21
$done
date

set rct=false
# Usage: BCM.0>th2_sanity_screen w x y z
# (w,x,y,z can be 50,51,52,71) and in any combination
# By default ie. if no arguments provided, only TR 50, 52,71 are run
echo "Running memory tests ..."
if !"expr $1+0 == 50" || !"expr $2+0 == 50" || !"expr $3+0 == 50" || !"expr $4+0 == 50" \
    'rcload tr50_bcm56970_a0.soc'
if !"expr $1+0 == 51" || !"expr $2+0 == 51" || !"expr $3+0 == 51" || !"expr $4+0 == 51" \
    'rcload tr51_bcm56970_a0.soc'
if !"expr $1+0 == 52" || !"expr $2+0 == 52" || !"expr $3+0 == 52" || !"expr $4+0 == 52" \
    'rcload tr52_bcm56970_a0.soc'
if !"expr $1+0 == 71" || !"expr $2+0 == 71" || !"expr $3+0 == 71" || !"expr $4+0 == 71" \
    'rcload tr71_bcm56970_a0.soc'
if !"expr $1+0 == 0" && !"expr $2+0 == 0" && !"expr $3+0 == 0" && !"expr $4+0 == 0" \
    'rcload tr50_bcm56970_a0.soc' \
    'rcload tr52_bcm56970_a0.soc' \
    'rcload tr71_bcm56970_a0.soc'
$done

# Re-initialize to clean up of various read/writes to MMU memories
set rct=true
rcload rc.soc
counter off
l2mode off
linkscan off
memscan off
date
echo "tr 30: Running counter width verification test ..."
tr 30
$done
date
echo "tr 31: Running counter read/write test ..."
tr 31
$done
date
#Hashing tests
#tr 55

echo "tr 60: Running MDIO Linkscan test"
tr 60
$done
date
echo "tr 17: Testing CPU DMA loopback ..."
tr 17
$done
date
#echo "Testing CPU DMA, Scatter/Gather Reload ..."
#tr 22
#$done

#echo "Testing CPU DMA, Scatter/Gather Simple ..."
#tr 23
#$done

#echo "Testing CPU DMA, Scatter/Gather Random ..."
#tr 24
#$done

#MAC Loopback
#echo "tr 18: Testing MAC Loopback - 10 Gb/s all XE ports"
#tr 18 PortBitMap=xe Speed=10G
#$done
date
#echo "Testing MAC Loopback - 100 Gb/s all CE ports"
#tr 18 PortBitMap=ce Speed=100G
#$done

#echo "Testing MAC Loopback - 106 Gb/s all HG ports"
#tr 18 PortBitMap=hg Speed=106G
#$done

#PHY Loopback
echo "tr 19: Testing PHY Loopback - 100 Gb/s all CE ports"
tr 19 PortBitMap=ce Speed=100G
$done
date
#echo "Testing PHY Loopback - 100 Gb/s all CE ports"
#tr 19 PortBitMap=ce Speed=100G
#$done

#echo "Testing PHY Loopback - 106 Gb/s all HG ports"
#tr 19 PortBitMap=hg Speed=106G
#$done

#echo "Running MAC loopback V2 on all ports ..."
#tr 48 PortBitMap=ce,xe
#tr 48 PortBitMap=xe
#$done

#echo "Running PHY loopback V2 on all ports ..."
#tr 49 PortBitMap=ce,xe
#tr 49 PortBitMap=xe
#$done

#Internal snake Loopback
#echo "tr 39: Running internal snake on all XE ports, MAC loopback ..."
#tr 39 LoopbackMode=MAC snakepath=TWOways PortBitMap=xe Count=1
$done
date
echo "tr 39: Running internal snake on all CE ports, PHY loopback 
tr 39 LoopbackMode=PHY snakepath=TWOways PortBitMap=ce Count=1 
$done
date
#echo "Running internal snake on all CE ports, MAC loopback ..."
#tr 39 LoopbackMode=MAC snakepath=TWOways PortBitMap=ce
#$done

#echo "Running internal snake on all CE ports, PHY loopback ..."
#tr 39 LoopbackMode=PHY snakepath=TWOways PortBitMap=ce
#$done

#Traffic Test
#echo "tr 72: Running Traffic Test in MAC mode on XE ports..."
#tr 72 RunMode=MAC PortBitMap=xe tis=5
#$done
date
echo "tr 72: Running Traffic Test in EXTERNAL mode on CE ports with AutoNeg disabled..."
tr 72 RunMode=EXTERNAL AutoNeg=False PortBitMap=ce tis=5
$done
date
echo "tr 72: Running Traffic Test in PHY mode on CE ports
tr 72 RunMode=PHY PortBitMap=ce tis=5
$done
date

echo "Running Traffic Test in PHY mode on XE ports..."
tr 72 RunMode=PHY PortBitMap=xe
 
tr 516
$done
date

# if you have cable with following paring
#    xe0-xe4, xe1-xe5, xe2-xe6, xe3-xe7
#    xe8-xe12, xe9-xe13, xe10-xe14, xe11-xe15
#    ...
#    xe56-xe60, xe57-xe61, xe58-xe62, xe59-xe63
#
# tr 72 rm=external pbm=xe0,xe4 an=f sp=10g
# tr 72 rm=external pbm=xe1,xe5 an=f sp=10g
# tr 72 rm=external pbm=xe2,xe6 an=f sp=10g
# tr 72 rm=external pbm=xe3,xe7 an=f sp=10g
# tr 72 rm=external pbm=xe8,xe12 an=f sp=10g
# tr 72 rm=external pbm=xe9,xe13 an=f sp=10g
# tr 72 rm=external pbm=xe10,xe14 an=f sp=10g
# tr 72 rm=external pbm=xe11,xe15 an=f sp=10g
# ...
# tr 72 rm=external pbm=xe56,xe60 an=f sp=10g
# tr 72 rm=external pbm=xe57,xe61 an=f sp=10g
# tr 72 rm=external pbm=xe58,xe62 an=f sp=10g
# tr 72 rm=external pbm=xe59,xe63 an=f sp=10g

# if you have cable with following paring
#    xe0-xe4, xe1-xe5, xem-xe6, xe3-xe7
#    xe8-xe12, xe9-xe13, xe10-xe14, xe11-xe15
#    ...
#    xe56-xe60, xe57-xe61, xe58-xe62, xe59-xe63
# echo "Running external loopback ..."
# tr 20 tpbm=xe0-xe3 di=4 an=f s=10g
# tr 20 tpbm=xe8-xe11 di=4 an=f s=10g
# tr 20 tpbm=xe16-xe19 di=4 an=f s=10g
# tr 20 tpbm=xe24-xe27 di=4 an=f s=10g
# tr 20 tpbm=xe32-xe35 di=4 an=f s=10g
# tr 20 tpbm=xe40-xe43 di=4 an=f s=10g
# tr 20 tpbm=xe48-xe51 di=4 an=f s=10g
# tr 20 tpbm=xe56-xe59 di=4 an=f s=10g
# $done

# Show status
date
tl
local returnCode $?

echo Tests Complete.  Reinitializing ...
config refresh
rcload rc.soc
counter off
l2mode off

# We want to show the return code from the tl command which
# lists the results. The automated test infrastructure keys off of this
# value
echo "testsuite: finished: sanity: $returnCode"

