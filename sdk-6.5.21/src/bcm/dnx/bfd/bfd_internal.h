/** \file bfd_internal.h
 * General BFD - contains internal functions and definitions for
 * BFD feature support 
 */
/*
 * This license is set out in https://raw.githubusercontent.com/Broadcom-Network-Switching-Software/OpenBCM/master/Legal/LICENSE file.
 * 
 * Copyright 2007-2020 Broadcom Inc. All rights reserved.
 */

#ifndef BFD_INTERNAL_H_INCLUDED
/*
 * {
 */
#define BFD_INTERNAL_H_INCLUDED

#ifndef BCM_DNX_SUPPORT
#error "This file is for use by DNX (JR2) family only!"
#endif

#include "include/bcm/bfd.h"

/** 
 *  Number of less significant bits that are not considered
 *  for discriminator range
 */
#define DISCR_RANGE_BIT_SHIFT 18

/** UDP destination port used for seamless BFD */
#define SBFD_UDP_DEST_PORT 7784

/** 
 *  When the BFD endpoint has one of these tunneling types,
 *  incoming packets are classified by discriminator
 */
#define BFD_MEP_TYPE_CLASSIFIED_BY_DISCR(type) ((type == bcmBFDTunnelTypeUdp) || (type == bcmBFDTunnelTypeMpls))

/** Macro to differentiate the "simpler" BFD endpoints */
#define BFD_TYPE_NOT_PWE(x) ((x == bcmBFDTunnelTypeUdp) || (x == bcmBFDTunnelTypeMpls)  || (x == bcmBFDTunnelTypeMplsTpCcCv))

/** "From OAMP" flag - indicates that the tx packets are generated by the OAMP */
#define ENDPOINT_FROM_OAMP(endpoint_info) (_SHR_IS_FLAG_SET(endpoint_info->flags, BCM_BFD_ENDPOINT_IN_HW) && \
  (endpoint_info->tx_gport != BCM_GPORT_INVALID || endpoint_info->egress_if != 0))

/**
 * Constant value greater than 0x1fff (max value possible for an OAM MEP name) to indicate
 * it is BFD. 
 */
#define DNX_BFD_RMEP_SW_INFO_NAME_CONST 0xffff

/*
 * Global and Static
 */

/* Callbacks are not supported by warmboot. Need to re-register after warmboot */
bcm_bfd_event_cb _g_bfd_event_cb[BCM_MAX_NUM_UNITS][bcmBFDEventCount];

/*User Data*/
void *_g_bfd_event_ud[BCM_MAX_NUM_UNITS][bcmBFDEventCount];

/**
 *  This struct is used to store data temporarily for the
 *  process of creating, modifying, reading or deleting BFD
 *  endpoints.
 *  Any change in a BFD endpoint is spread across several
 *  functions.  This structure is used to save data that is
 *  determined in one function, to be applied in a subsequent
 *  stage of the creating/modifying/reading/deleting process.
 */
typedef struct
{
    /**
     *  Structure for data that will be read from templates or
     *  written to new entries.  Used in bcm_dnx_endpoint_create and
     *  bcm_dnx_endpoint_get.
     */
    struct
    {
        /** Data for writing to OAMA/OAMB   */
        oam_action_key_t action_write_key;
        oam_action_content_t action_content;
        uint32 dip_write_index;
        /** Data for discriminator range   */
        uint32 discr_range_min;
        uint32 discr_range_max;

        /** Data for writing to Destination IP table   */
        bcm_ip6_t dip_ipv6_address;

        /** Prefix for LIF table   */
        uint32 lif_key_prefix;

        /** Flags: write or not?   */
        uint32 action_write;
        uint32 dip_write;
        uint8 discr_range_write;
        uint8 oamp_trap_tcam_write;

        /** BFD server data */
        uint32 bfd_server_trap_code_index;
        uint32 oam_trap_tcam_index;

        /** OAMP trap TCAM data */
        dnx_oam_oamp_trap_tcam_entry_t tcam_data;

        /** Seamless BFD data */
        uint16 sbfd_udp_src_port;
        uint8 sbfd_udp_src_port_write;

        /** MPLS-LM-DM only - pointer to entry */
        uint16 mpls_lm_dm_entry;
        uint8 mep_profile;
    } gathered_data;

    /**
     *  Structure for data that will be used to delete entries.
     *  Used in bcm_dnx_endpoint_destroy and in
     *  bcm_dnx_endpoint_create when used to modify an existing
     *  BFD endpoint.
     */
    struct
    {
        /** Data for deleting from OAMA/OAMB   */
        oam_action_key_t action_delete_key;

        /** Data for deleting from Destination IP table   */
        uint32 dip_delete_index;

        /** Flags: delete or not?   */
        uint8 action_delete;
        uint8 dip_delete;
        uint8 bfd_server_trap_code_delete;
        uint8 tcam_delete;

        /*
         * Data for deleting from BFD server trap code registers
         */
        uint32 bfd_server_trap_code_index;
        uint32 oam_trap_tcam_index;
    } deleted_data;

    /** ID of endpoint   */
    uint32 endpoint_id;

    /** Type of endpoint   */
    bcm_bfd_tunnel_type_t endpoint_type;

    /**
     *  Flags for BFD ep - Multihop, IPv6, Accelerated in HW, OAMB_profile
     *  This field uses DBAL_DEFINE_BFD_ENDPOINT_SW_STATE_FLAGS flags.
     */
    uint32 bfd_sw_state_flags;

    /** Data for writing to or deleting from OAMA/OAMB   */
    uint32 action_flags;

    /** Data for writing to classifier tables   */
    uint32 lif_id;

    /** Remote endpoint ID */
    uint32 rmep_index;

    /**
     *  Remote gport - valid only
     *  if BCM_BFD_ENDPOINT_HW_ACCELERATION_SET
     */
    uint32 remote_gport;

    /** MEP type for setting trap code tcam table */
    int mep_type;

    /** local discriminator to be used as acc_mep_db key  */
    uint32 oam_lif;

} bfd_temp_endpoint_data_t;

/*
 * }
 */

#endif /* BFD_INTERNAL_H_INCLUDED */
