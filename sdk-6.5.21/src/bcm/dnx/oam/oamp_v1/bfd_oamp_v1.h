/** \file bfd_oamp_v1.h
 * OAMP version one support - contains internal functions and definitions
 * for support of the OAM/BFD accelerator BFD functionality
 */
/*
 * This license is set out in https://raw.githubusercontent.com/Broadcom-Network-Switching-Software/OpenBCM/master/Legal/LICENSE file.
 * 
 * Copyright 2007-2020 Broadcom Inc. All rights reserved.
 */
#ifndef BFD_OAMP_V1_H_INCLUDED
/*
 * {
 */
#define BFD_OAMP_V1_H_INCLUDED
#ifndef BCM_DNX2_SUPPORT
#error "This file is for use by DNX (JR2) family only!"
#endif

/** Structure for accelerated BFD endpoints   */
typedef struct
{
    /**
     *  MEP type.   Values for BFD:
     *  BFD over IPv4 single-hop:
     *  DBAL_ENUM_FVAL_OAMP_MEP_TYPE_BFD_IPV4_1HOP = 3
     *  BFD over IPv4 multi-hop:
     *  DBAL_ENUM_FVAL_OAMP_MEP_TYPE_BFD_IPV4_MHOP = 4
     *  BFD over MPLS:
     * DBAL_ENUM_FVAL_OAMP_MEP_TYPE_BFD_MPLS = 5
     * BFD over PWE.
     * DBAL_ENUM_FVAL_OAMP_MEP_TYPE_BFD_PWE = 6
     */
    dbal_enum_value_field_oamp_mep_type_e mep_type;

    /** See flag mask definitions named DNX_OAMP_BFD_MEP_XXX  */
    uint32 flags;

    /** Only one of these values can be used.  See flag above   */
    union
    {
        /** FEC ID   */
        uint32 fec_id;

        /** Global out-LIF   */
        uint32 glob_out_lif;
    } fec_id_or_glob_out_lif;

    /** MPLS/PWE label (for MPLS/PWE only)   */
    uint32 label;

    /**
     *  Your discriminator.  For 1/4 entry, only lowest 26 bits
     *  are stored
     */
    uint32 your_disc;

    /** Destination IPv4 */
    uint32 ipv4_dip;

    /** Destination IPv6 */
    bcm_ip6_t ipv6_dip;

    /** Source IPv6 */
    bcm_ip6_t ipv6_sip;

    /** PWE only: system port   */
    uint16 dest_sys_port_agr;

    /** Profile index for PP port */
    uint16 pp_port_profile;

    /** BFD session state    */
    uint8 sta;

    /** Packet priority - mapped ITMH TC/DP   */
    uint8 itmh_tc_dp_profile;

    /** IPv4 Type of Service bits   */
    uint8 ip_ttl_tos_profile;

    /**
     *  Points to an entry that contains more endpoint
     *  parameters, mostly LM/DM
     */
    uint8 mep_profile;

    /**
     *  Points to an entry that contains parameters that dictate
     *  programmable editor modification of packets generated by
     *  this endpoint
     */
    uint8 mep_pe_profile;

    /**
     *  Single hop only: number of most significant bits to check
     *  in received packets
     */
    uint8 ip_subnet_len;

    /**
     *  MPLS/PWE only: points to a profile that contains TTL and
     *  QoS values
     */
    uint8 push_profile;

    /**
     *  Points to a profile that dictates the rate of
     *  packet transmission.
     */
    uint8 tx_rate_profile;

    /** source IPv4 address profile  */
    uint8 src_ip_profile;

    /** Detect multiplier   */
    uint8 detect_mult;

    /** Profile that sets Desired Min TX Interval   */
    uint8 min_tx_interval_profile;

    /** Profile that sets Required Min RX Interval   */
    uint8 min_rx_interval_profile;

    /**
     *  Points to a profile that contains the value of the diag
     *  field to be written in transmitted packets
     */
    uint8 diag_profile;

    /**
     *  Points to a profile that contains the value of the flag
     *  fields to be written in transmitted packets
     */
    uint8 flags_profile;

    /** PWE only - selects an ACH value   */
    uint8 ach_sel;

    /** Number of the core performing the counter processing */
    uint8 crps_core_select;

    /** Pointer to first extended data entry */
    uint32 ipv6_extra_data_index;

    /** Pointer to MPLS-LM-DM entry */
    uint32 mpls_lm_dm_entry;

    /** low 16 bits of local discr */
    uint32 local_discr_lsb;
} dnx_bfd_oamp_v1_endpoint_t;

/**
 *  This struct is used to store data temporarily for accessing
 *  the OAMP MEP DB for BFD endpoints - the data needed to fill
 *  an entry, including necessary templates and profile tables..
 */
typedef struct
{
    /** Data for writing to Tx Rate table  */
    uint32 tx_rate_write_value;
    uint32 tx_rate_write_index;

    /** Data for writing to Required Interval Table   */
    uint32 req_int_write_index[NOF_BASIC_INT_FIELDS];
    uint32 req_int_write_value[NOF_BASIC_INT_FIELDS];

    /** Data for discriminator range start   */
    uint32 discr_range_start;

    /** Data for writing to TOS_TTL table   */
    uint32 tos_ttl_entry_id;
    uint32 tos;
    uint32 ttl;

    /** Data for writing the IPV4_SRC_ADDRESS table   */
    uint32 ipv4_src_addr_index;
    bcm_ip_t ipv4_src_addr;

    bcm_ip6_t ipv6_src_addr;
    bcm_ip6_t ipv6_dst_addr;

    /** Data for writing TC/DP profile */
    uint32 itmh_priority_index;
    uint32 tc;
    uint32 dp;

    /** Data for writing MPLS/PWE ttl+exp profile   */
    uint32 ttl_exp_profile_index;
    uint32 mpls_pwe_ttl;
    uint32 exp;

    uint32 pp_port_profile;
    uint32 system_port;

    /** Data for writing BFD single-hop TOS */
    uint32 oamp_single_hop_tos;

    /** Data for writing OAMP BFD local min echo */
    uint32 oamp_local_min_echo;

    /** Data for writing UDP source port data */
    uint16 src_port;

    /** MEP Profile */
    int mep_profile;
    dnx_oam_mep_profile_t mep_profile_data;

    uint32 tx_rate_write;
    uint32 req_int_write[NOF_BASIC_INT_FIELDS];
    uint32 tos_ttl_write;
    uint32 ipv4_src_addr_write;
    uint32 itmh_priority_write;
    uint32 ttl_exp_profile_write;
    uint32 system_port_profile_write;
    uint32 oamp_single_hop_tos_write;
    uint32 oamp_local_min_echo_write;
    uint8 discr_range_start_write;
    uint8 upd_src_port_write;
    uint8 mep_profile_write;
    uint8 cluster_id;

    /** ID of endpoint   */
    uint32 endpoint_id;

} dnx_bfd_oamp_v1_temp_mep_db_data_t;

/**
 *  This struct is used to store data temporarily for deleting
 *  relevant profiles - when the reference count for a relevant
 *  profile reaches 0, the entry in the profile table is deleted
 */
typedef struct
{
    /** Struct for MEP profile for MPLS-LM-DM */
    dnx_oam_mep_profile_t mpls_lm_dm_only_profile_data;
    /** No-BFD profile created for MPLS-LM-DM */
    int mpls_lm_dm_only_profile;
    /** Flags that indicate HW table entries need to be deleted */
    uint8 itmh_priority_delete;
    uint8 system_port_profile_delete;
    uint8 tx_rate_write_delete;
    uint8 ipv4_src_addr_delete;
    uint8 tos_ttl_delete;
    uint8 ttl_exp_profile_delete;
    uint8 req_min_rx_int_delete;
    uint8 req_min_tx_int_delete;
    uint8 punt_profile_delete;
    uint8 mep_profile_delete;
    uint8 cluster_mep_profile;
    uint8 seamless_bfd;
    uint8 mpls_lm_dm;
    uint8 mpls_lm_dm_only_profile_write;
} dnx_bfd_oamp_v1_temp_db_delete_data_t;

/**
 * \brief - This function sets the RMEP index constant,
 *          which will be used as a field to write to
 *          two RMEP index tables - SW state and MDB.
 *
 * \param [in] unit - Number of hardware unit used.
 * \param [in] mep_type - type of BFD endpoint (OAMP MEP DB enum)
 * \param [out] rmep_index_const - Resulting RMEP index constant.
 *
 * \return
 *   shr_error_e
 *
 * \remark
 *   * None
 * \see
 *   * None
 */
shr_error_e dnx_bfd_oamp_v1_endpoint_db_get_const_for_oamp_rmep_index_db(
    int unit,
    dbal_enum_value_field_oamp_mep_type_e mep_type,
    uint16 *rmep_index_const);

/**
 * \brief - This function builds the structure needed to call
 *        the API that builds the entry(ies) for accelerated
 *        BFD endpoints into the hardware OAMP MEP DB, and MDB
 *        entries, if necessary.
 *
 * \param [in] unit - Number of hardware unit used.
 * \param [in] endpoint_info - see definition of struct for
 *        description of fields
 * \param [in] mep_hw_write_data - Pointer to struct where data
 *        for writing to HW tables has been placed.  Here, this
 *        data is used to write the proper profile indexes to
 *        the MEP DB entries (whether a new profile was added or
 *        an existing one was found.)
 * \param [in] bfd_sw_state_flags - Flags for BFD sw state.
 * \param [out] entry_values - Pointing to resulting structure data
 *        that will be used later to call OAMP MEP DB API.
 *
 * \return
 *   shr_error_e
 *
 * \remark
 *   * None
 * \see
 *   * None
 */
shr_error_e dnx_bfd_oamp_v1_endpoint_db_build_param_for_mep_db(
    int unit,
    const bcm_bfd_endpoint_info_t * endpoint_info,
    const dnx_bfd_oamp_v1_temp_mep_db_data_t * mep_hw_write_data,
    const uint32 bfd_sw_state_flags,
    dnx_bfd_oamp_v1_endpoint_t * entry_values);

/**
 * \brief - This function checks whether the BFD
 *          endpoint being created is being associated
 *          with an existing MPLS-LM-DM endpoint.  If it is,
 *          some parameters are verified.
 *
 * \param [in] unit - Number of hardware unit used.
 * \param [in] bfd_endpoint_info - info structure of the requested
 *        MEP
 *
 * \return
 *   shr_error_e
 *
 * \see
 *   * None
 */
shr_error_e dnx_bfd_oamp_v1_pwe_with_lm_dm_verify(
    int unit,
    const bcm_bfd_endpoint_info_t * bfd_endpoint_info);

/**
 * \brief - This function builds the ID of the newly created BFD
 *        endpoint.
 *
 * \param [in] unit - Number of hardware unit used.
 * \param [in] endpoint_info - see definition of struct for
 *        description of fields
 * \param [out] hw_write_data - Pointer to struct where data
 *        for writing to HW tables should be placed (see struct
 *        definition for reason.)
 *
 * \return
 *   shr_error_e
 *
 * \remark
 *   * Structure of the calculated endpoint ID:\n
 *      The "endpoint_id" which will be used for packet
 *      classification is either the lower 22 bits of the local
 *      discriminator field (for endpoints that classify packets
 *      by discriminator) or the LIF ID (provided by the user in
 *      the gport field)\n
 *      The endpoint ID returned to the user and saved to the SW
 *      state table also superimposes two addition bits:\n
 *      if bit 22 is set, the endpoint is not accelerated.\n
 *      if bit 23 is set, the endpoint classifies packets by
 *      discriminator.
 *      hw_write_data->endpoint_id will be used for classification
 *      endpoint_info->id is returned to the user and saved to the
 *      SW state table.
 * \see
 *   * None
 */
shr_error_e dnx_bfd_oamp_v1_build_endpoint_id(
    int unit,
    bcm_bfd_endpoint_info_t * endpoint_info,
    bfd_temp_endpoint_data_t * hw_write_data);

/**
 * \brief - This function deletes the entries used for
 *        accelerating a BFD endpoint from dbal (clearing them
 *        from the hardware tables as well)
 *
 * \param [in] unit - Number of hardware unit used
 * \param [in] oam_id - Index of BFD endpoint.  For full
 *        entry this must be a multiple or 4.
 * \param [in] is_ipv6 - specify if the endpoint is over IPv6
 *
 * \return
 *   shr_error_e
 *
 * \remark
 *   * None
 * \see
 *   * None
 */
shr_error_e dnx_bfd_oamp_v1_mep_db_endpoint_clear(
    int unit,
    uint16 oam_id,
    uint8 is_ipv6);

/**
 * \brief - This function reads the data relevant to a single
 *        accelerated BFD endpoint
 *
 * \param [in] unit - Number of hardware unit used
 * \param [in] oam_id - Index of BFD endpoint.  For full
 *        entry this must be a multiple or 4.
 * \param [out] entry_values - Structure into which all the
 *        endpoint parameters are written.
 *
 * \return
 *   shr_error_e
 *
 * \remark
 *   * None
 * \see
 *   * None
 */
shr_error_e dnx_bfd_oamp_v1_mep_db_endpoint_get(
    int unit,
    uint16 oam_id,
    dnx_bfd_oamp_v1_endpoint_t * entry_values);

/**
 * \brief - This function calls the functions that access
 *          the different templates associated with oamp
 *          profiles.
 *
 * \param [in] unit - Number of hardware unit used.
 * \param [in] endpoint_info - see definition of struct for
 *        description of fields
 * \param [out] mep_hw_write_data - Pointer to struct where data
 *        for writing to HW tables is placed.  This data is
 *        relevant to fields in the OAMP MEP DB.
 * \param [out] rmep_hw_write_data - Pointer to struct where data
 *        for writing to HW tables is placed.  This data is
 *        relevant to fields in the OAMP RMEP DB.
 *
 * \return
 *   shr_error_e
 *
 * \remark
 *   * None
 * \see
 *   * None
 */
shr_error_e dnx_bfd_oamp_v1_write_data_to_templates(
    int unit,
    const bcm_bfd_endpoint_info_t * endpoint_info,
    dnx_bfd_oamp_v1_temp_mep_db_data_t * mep_hw_write_data,
    bfd_temp_oamp_rmep_db_data_t * rmep_hw_write_data);

/**
 * \brief - This function, as part of the process of modifying
 *          an accelerated BFD endpoint, decrements the
 *          reference count for every profile that is no longer
 *          used, and increments the reference counts for the
 *          new profiles.
 *
 * \param [in] unit - Number of hardware unit used.
 * \param [in] new_endpoint_info - API parameters specifying
 *        how to modify the endpoint.
 * \param [in] existing_endpoint_info - the original API
 *        parameters used to create the endpoint.
 * \param [in] mep_entry_values - Pointer to struct containing
 *        Values read from OAMP_MEP_DB entry that was used
 *        for this endpoint.
 * \param [in] rmep_entry_values - Pointer to struct containing
 *        Values read from OAMP_RMEP_DB entry that was used
 *        for this endpoint.
 * \param [out] oamp_hw_delete_data - Pointer to struct that will
 *        holds the delete flags - if the refernce count of
 *        a profile reaches 0, that profile is deleted from
 *        the relevant profile hardware table.
 * \param [out] mep_hw_write_data - Pointer to struct where data
 *        for writing to HW tables is placed.  This data is
 *        relevant to fields in the OAMP MEP DB.
 * \param [out] rmep_hw_write_data - Pointer to struct where data
 *        for writing to HW tables is placed.  This data is
 *        relevant to fields in the OAMP RMEP DB.
 *
 * \return
 *   shr_error_e
 *
 * \remark
 *   * None
 * \see
 *   * None
 */
shr_error_e dnx_bfd_oamp_v1_modify_data_in_templates(
    int unit,
    const bcm_bfd_endpoint_info_t * new_endpoint_info,
    const bcm_bfd_endpoint_info_t * existing_endpoint_info,
    const dnx_bfd_oamp_v1_endpoint_t * mep_entry_values,
    const dnx_oam_oamp_rmep_db_entry_t * rmep_entry_values,
    dnx_bfd_oamp_v1_temp_db_delete_data_t * oamp_hw_delete_data,
    dnx_bfd_oamp_v1_temp_mep_db_data_t * mep_hw_write_data,
    bfd_temp_oamp_rmep_db_data_t * rmep_hw_write_data);

/**
 * \brief - This function writes data related to the newly
 *        created BFD endpoint that is accelerated to the local
 *        OAMP to hardware tables and registers with names that
 *        start with "OAMP_"
 *
 * \param [in] unit - Number of hardware unit used.
 * \param [out] mep_hw_write_data - Pointer to struct where data
 *        for writing to OAMP MEP DB related HW tables has been
 *        placed (see struct definition for reason.)
 * \param [out] rmep_hw_write_data - Pointer to struct where data
 *        for writing to OAMP RMEP DB related HW tables has been
 *        placed (see struct definition for reason.)
 *
 * \return
 *   shr_error_e
 *
 * \remark
 *   * None
 * \see
 *   * None
 */
shr_error_e dnx_bfd_oamp_v1_endpoint_db_write_to_hw(
    int unit,
    const dnx_bfd_oamp_v1_temp_mep_db_data_t * mep_hw_write_data,
    const bfd_temp_oamp_rmep_db_data_t * rmep_hw_write_data);

/**
 * \brief - This function, as part of the process of deleting
 *          an accelerated BFD endpoint, decrements the
 *          that was used by that endpoint and reached a
 *          reference count of 0 when it was deleted.
 *
 * \param [in] unit - Number of hardware unit used.
 * \param [in] mep_entry_values - Pointer to struct containing
 *             Values read from OAMP_MEP_DB entry that was used
 *             for this endpoint.
 * \param [in] rmep_entry_values - Pointer to struct containing
 *             Values read from OAMP_RMEP_DB entry that was used
 *             for this endpoint.
 * \param [in] oamp_hw_delete_data - Pointer to struct that holds
 *             holds the delete flags.  If the relevant delete
 *             flag is set, the entry will be deleted from the HW
 *             table.
 * \param [out] punt_good_hw_write_data - Punt good profile HW info
 *              for the requested MEP.
 *
 * \return
 *   shr_error_e
 *
 * \remark
 *   * None
 * \see
 *   * None
 */
shr_error_e dnx_bfd_oamp_v1_endpoint_db_delete_from_hw(
    int unit,
    const dnx_bfd_oamp_v1_endpoint_t * mep_entry_values,
    const dnx_oam_oamp_rmep_db_entry_t * rmep_entry_values,
    dnx_bfd_oamp_v1_temp_db_delete_data_t * oamp_hw_delete_data,
    dnx_oam_oamp_punt_good_profile_temp_data_t * punt_good_hw_write_data);

/**
 * \brief - This function calls functions that access
 *          the different templates associated with oamp
 *          profiles, and read data from those templates.
 *
 * \param [in] unit - Number of hardware unit used.
 * \param [out] endpoint_info - see definition of struct for
 *        description of fields
 * \param [in] mep_sw_read_data - Pointer to struct that now
 *        holds indexes for templates.
 * \param [in] rmep_sw_read_data - Pointer to struct that now
 *        holds indexes for templates.
 *
 * \return
 *   shr_error_e
 *
 * \remark
 *   * None
 * \see
 *   * None
 */
shr_error_e dnx_bfd_oamp_v1_read_data_from_templates(
    int unit,
    bcm_bfd_endpoint_info_t * endpoint_info,
    const dnx_bfd_oamp_v1_temp_mep_db_data_t * mep_sw_read_data,
    const bfd_temp_oamp_rmep_db_data_t * rmep_sw_read_data);

/**
 * \brief - This function creates or modifies the dbal entries
 *        needed for an accelerated BFD endpoint
 *
 * \param [in] unit - Number of hardware unit used
 * \param [in] endpoint_info - see definition of struct for
 *        description of fields
 * \param [in] entry_values - Structure containing all the
 *        endpoint parameters
 *
 * \return
 *   shr_error_e
 *
 * \remark
 *   * None
 * \see
 *   * None
 */
shr_error_e dnx_bfd_oamp_v1_mep_db_endpoint_set(
    int unit,
    const bcm_bfd_endpoint_info_t * endpoint_info,
    dnx_bfd_oamp_v1_endpoint_t * entry_values);

/**
 * \brief - This function checks that a short entry being allocated
 *          either has sub-index 0, or that the short entry with
 *          sub-index 0 has the same MEP type.
 *
 * \param [in] unit - Number of hardware unit used.
 * \param [in] oam_id - number of entry being added.
 * \param [in] endpoint_info - BFD entry parameters for
 *             intended entry.
 *
 * \return
 *   shr_error_e
 *
 * \remark
 *   * None
 * \see
 *   * None
 */
shr_error_e dnx_bfd_oamp_v1_short_entry_type_verify(
    int unit,
    uint16 oam_id,
    const bcm_bfd_endpoint_info_t * endpoint_info);

/**
* \brief
*  Determine whether the MplsLmDm EP associated with an BFD
*  OAM EP does not exist (does not transmit or receive packets)
* \param [in] unit  -
*  Relevant unit.
* \param [in] endpoint -
*  ID of the BFD endpoint from which to get the information.
* \param [out] is_bfd_endpoint_without_mpls_lm_dm -
*  Pointer to the resulting TRUE/FALSE
* \retval
*   shr_error - Error indication
* \remark
*   * None
*/
shr_error_e dnx_bfd_oamp_v1_endpoint_without_mpls_lm_dm(
    int unit,
    bcm_oam_endpoint_t endpoint,
    uint8 *is_bfd_endpoint_without_mpls_lm_dm);

/**
 * \brief - This function, as part of the process of deleting
 *          an accelerated BFD endpoint, decrements the
 *          reference count of every profile that was used by
 *          that endpoint.
 *
 * \param [in] unit - Number of hardware unit used.
 * \param [in] endpoint - ID of endpoint
 * \param [in] mep_entry_values - Pointer to struct containing
 *             Values read from OAMP_MEP_DB entry that was used
 *             for this endpoint.
 * \param [in] rmep_entry_values - Pointer to struct containing
 *             Values read from OAMP_RMEP_DB entry that was used
 *             for this endpoint.
 * \param [out] oamp_hw_delete_data - Pointer to struct that will
 *             holds the delete flags - if the refernce count of
 *             a profile reaches 0, that profile is deleted from
 *             the relevant profile hardware table.
 * \param [out] punt_good_hw_write_data - Punt good profile HW info
 *              for the requested MEP.
 * \param [in] is_single_hop_with_random_dip - means it's for single hop with random dip
 *
 * \return
 *   shr_error_e
 *
 * \remark
 *   * None
 * \see
 *   * None
 */
shr_error_e dnx_bfd_oamp_v1_delete_data_from_templates(
    int unit,
    bcm_bfd_endpoint_t endpoint,
    const dnx_bfd_oamp_v1_endpoint_t * mep_entry_values,
    const dnx_oam_oamp_rmep_db_entry_t * rmep_entry_values,
    dnx_bfd_oamp_v1_temp_db_delete_data_t * oamp_hw_delete_data,
    dnx_oam_oamp_punt_good_profile_temp_data_t * punt_good_hw_write_data,
    int is_single_hop_with_random_dip);

/**
 * \brief - This function modifies the MEP_PROFILE field in
 *          an OAMP_MEP_DB entry
 *
 * \param [in] unit - Number of hardware unit used.
 * \param [in] endpoint - ID of endpoint
 * \param [in] new_profile - new MEP_PROFILE value to write.
 *
 * \return
 *   shr_error_e
 *
 * \remark
 *   * None
 * \see
 *   * None
 */
shr_error_e dnx_bfd_oamp_v1_set_mpls_lm_dm_mep_profile(
    int unit,
    bcm_bfd_endpoint_t endpoint,
    uint8 new_profile);

/**
 * \brief - This function converts the data read from the
 *          OAMP MEP DB into fields in the API struct, or
 *          template indexes to look up more fields.
 *
 * \param [in] unit - Number of hardware unit used.
 * \param [out] endpoint_info - see definition of struct for
 *        description of fields
 * \param [out] mep_sw_read_data - Pointer to struct that will
 *        hold indexes for templates where data will be read
 *        later.
 * \param [in] entry_values - Data read from the relevant
 *        accelerated BFD endpoint's OAMP MEP DB entry.
 *
 * \return
 *   shr_error_e
 *
 * \remark
 *   * None
 * \see
 *   * None
 */
void dnx_bfd_oamp_v1_endpoint_db_analyze_param_from_oamp_mep_db(
    int unit,
    bcm_bfd_endpoint_info_t * endpoint_info,
    dnx_bfd_oamp_v1_temp_mep_db_data_t * mep_sw_read_data,
    const dnx_bfd_oamp_v1_endpoint_t * entry_values);

/*
 * }
 */
#endif /* BFD_OAMP_V1_H_INCLUDED */
