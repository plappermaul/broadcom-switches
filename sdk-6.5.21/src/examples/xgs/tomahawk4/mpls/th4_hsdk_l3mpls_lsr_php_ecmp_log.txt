BCM.0> c th4_hsdk_l3mpls_lsr_php_ecmp.c
execute(): Start
~~~ #1) test_setup(): ** start **
int ingress_port = 1 (0x1)
int $$ = 2 (0x2)
int $$ = 3 (0x3)
setting ingress port:1 MAC loopback
setting egress ports:2, 3 MAC loopback
int ifp_group = 1 (0x1)
int $$ = 1 (0x1)
int $$ = 2 (0x2)
~~~ #1) test_setup(): ** end **
~~~ #2) config_lsr_php_ecmp(): ** start **
l3 egr intf = 1
l3 egr intf2 = 2
l3 egr obj = 100001
l3 egr obj2 = 100002
int ecmp_group_id = 200001 (0x30d41)
Created flexctr stat_counter_id = 0x10000001.
Flexctr stat_counter_id:0x10000001 attached to l3 ecmp group 200001
~~~ #2) config_lsr_php_ecmp(): ** end **
~~~ #3) test_verify(): ** start **

a) Sending MPLS packet with TWO labels to ingress_port:1
Packet from data=<>, length=86
pktioRxCallback: packet received from correct expected ports
pktioRxCallback: packet received data comparision pass
pktioRxCallback: packet received from correct expected ports
pktioRxCallback: packet received data comparision pass
pktioRxCallback: packet received from correct expected ports
pktioRxCallback: packet received data comparision pass
pktioRxCallback: packet received from correct expected ports
pktioRxCallback: packet received data comparision pass
pktioRxCallback: packet received from correct expected ports
pktioRxCallback: packet received data comparision pass
pktioRxCallback: packet received from correct expected ports
pktioRxCallback: packet received data comparision pass
pktioRxCallback: packet received from correct expected ports
pktioRxCallback: packet received data comparision pass
pktioRxCallback: packet received from correct expected ports
pktioRxCallback: packet received data comparision pass
pktioRxCallback: packet received from correct expected ports
pktioRxCallback: packet received data comparision pass
pktioRxCallback: packet received from correct expected ports
pktioRxCallback: packet received data comparision pass
Flexctr Get : 10 packets / 900 bytes

----------------------------------------------------------- 
    RESULT OF L3MPLS LSR PHP VERIFICATION  
----------------------------------------------------------- 
Test = [PASS]
------------------------------------- 
~~~ #3) test_verify(): ** end **
~~~ #4) test_cleanup(): ** start **
~~~ #4) test_cleanup(): ** end **
bcm_error_t $$ = BCM_E_NONE (0)
execute(): End
BCM.0>
