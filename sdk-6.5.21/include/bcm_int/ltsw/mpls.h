/*
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 *
 * This license is set out in https://raw.githubusercontent.com/Broadcom-Network-Switching-Software/OpenBCM/master/Legal/LICENSE file.
 * 
 * Copyright 2007-2020 Broadcom Inc. All rights reserved.
 */

#ifndef BCMI_LTSW_MPLS_H
#define BCMI_LTSW_MPLS_H

#include <bcm/types.h>

#include <sal/sal_types.h>

/*!
 * \brief MPLS global control type.
 */
typedef enum bcmi_ltsw_mpls_global_ctrl_s {

    /*! Clear control word lower 2 bytes. */
    bcmiMplsGlobalCwLowerClear = 0,

    /*! Clear control word Upper 2 bytes. */
    bcmiMplsGlobalCwUpperClear = 1,

    /*! Gal label. */
    bcmiMplsGlobalGalLabel = 2,

    /*! Entropy label indicator label. */
    bcmiMplsGlobalEliLabel = 3,

    /*! PW decap sequence number range. */
    bcmiMplsGlobalPwDecapSeqNumRange = 4,

    /*! MPLS global control type count, must be the last. */
    bcmiMplsGlobalCount = 5

} bcmi_ltsw_mpls_global_ctrl_t;

#define BCMI_LTSW_MPLS_GLOBAL_CTRL_STR \
{ \
    "CwLowerClear", \
    "CwUpperClear", \
    "GalLabel", \
    "EliLabel", \
    "PwDecapSeqNumRange" \
}

/*!
 * \brief MPLS port match criteria.
 */
typedef enum bcmi_ltsw_mpls_port_match_criteria_s {

    /*! Match port group and outer vlan. */
    bcmiLtswMplsPortMatchPortGrpVlan = 0,

    /*! Match port group and inner vlan. */
    bcmiLtswMplsPortMatchPortGrpInnerVlan = 1,

    /*! Match port group, outer vlan and inner vlan. */
    bcmiLtswMplsPortMatchPortGrpVlanStacked = 2,

    /*! MPLS port match criteria count, must be the last. */
    bcmiLtswMplsPortMatchCount = 3

} bcmi_ltsw_mpls_port_match_criteria_t;

#define BCMI_LTSW_MPLS_PORT_MATCH_CRITERIA_STR \
{ \
    "PortGrpVlan", \
    "PortGrpInnerVlan", \
    "PortGrpVlanStacked" \
}

/*!
 * \brief MPLS tunnel dest mac profile.
 */
typedef struct bcmi_ltsw_mpls_tnl_dst_mac_profile_s {

    /*! Dst mac. */
    uint64_t mac_da;

} bcmi_ltsw_mpls_tnl_dst_mac_profile_t;

/*! Indicator of inserting Entropy label. */
#define BCMI_LTSW_MPLS_ENCAP_LABL_ENTROPY_LABL (1 << 0)

/*! Indicator of inserting Control Word. */
#define BCMI_LTSW_MPLS_ENCAP_LABL_CW (1 << 1)

/*! Indicator of inserting sequence number into Control Word. */
#define BCMI_LTSW_MPLS_ENCAP_LABL_CW_SEQUENCED (1 << 2)

/*! Indicator of inserting TTL with payload TTL. */
#define BCMI_LTSW_MPLS_ENCAP_LABL_USE_PLD_TTL (1 << 3)

/*!
 * \brief MPLS encapsulation label info structure.
 */
typedef struct bcmi_ltsw_mpls_encap_label_info_s {

    /*! LTSW_MPLS_ENCAP_LABL_xxx flag. */
    uint32_t flags;

    /*! VC label. */
    uint32_t vc_label;

    /*! VC label EXP. */
    uint8_t exp;

    /*! VC label TTL. */
    uint8_t ttl;

} bcmi_ltsw_mpls_encap_label_info_t;

/*!
 * \brief MPLS port match info structure.
 */
typedef struct bcmi_ltsw_mpls_port_match_s {

    /*! MPLS port match criteria. */
    bcmi_ltsw_mpls_port_match_criteria_t criteria;

    /*! Match outer vlan. */
    bcm_vlan_t match_vlan;

    /*! Match inner vlan. */
    bcm_vlan_t match_inner_vlan;

    /*! Match port group. */
    int port_group;

    /*! VLAN actions. */
    bcm_vlan_action_set_t action;

    /*! VPLS VPN. */
    bcm_vpn_t vpn;

} bcmi_ltsw_mpls_port_match_t;

/*!
 * \brief Detach MPLS module.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_mpls_detach(int unit);

/*!
 * \brief Display MPLS software structure information.
 *
 * \param [in] unit Unit Number.
 */
extern void
bcmi_ltsw_mpls_sw_dump(int unit);

/*!
 * \brief Match the match rule of mpls port ID to vp_lag_vp.
 *
 * \param [in] unit Unit Number.
 * \param [in] mpls_port_id mpls port ID.
 * \param [in] vp_lag_vp VPLAG vp ID.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_mpls_port_source_vp_lag_set(
    int unit,
    bcm_gport_t mpls_port_id,
    int vp_lag_vp);

/*!
 * \brief Get the VP matched to the match rule of mpls port ID.
 *
 * \param [in] unit Unit Number.
 * \param [in] mpls_port_id mpls port ID.
 * \param [out] vp_lag_vp VPLAG vp ID.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_mpls_port_source_vp_lag_get(
    int unit,
    bcm_gport_t mpls_port_id,
    int *vp_lag_vp);

/*!
 * \brief Restore the match rule of mpls port ID to itself.
 *
 * \param [in] unit Unit Number.
 * \param [in] mpls_port_id mpls port ID.
 * \param [in] vp_lag_vp VPLAG vp ID.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_mpls_port_source_vp_lag_clr(
    int unit,
    bcm_gport_t mpls_port_id,
    int vp_lag_vp);

/*!
 * \brief Set mpls global label range.
 *
 * \param [in] unit Unit Number.
 * \param [in] range_num Range number. 0 : First range, 1 : Second range.
 * \param [in] range_min Range min indicator. 0 : Range max, 1 : Range min
 * \param [in] label_val Label value
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_mpls_global_label_range_set(
    int unit,
    int range_num,
    int range_min,
    int label_val);

/*!
 * \brief Get mpls global label range.
 *
 * \param [in] unit Unit Number.
 * \param [in] range_num Range number. 0 : First range, 1 : Second range.
 * \param [out] min_label Min label
 * \param [out] max_label Max label
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_mpls_global_label_range_get(
    int unit,
    int range_num,
    int *min_label,
    int *max_label);

/*!
 * \brief Set MPLS global control.
 *
 * \param [in] unit Unit Number.
 * \param [in] control_type Control type.
 * \param [in] value Control value
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_mpls_global_control_set(
    int unit,
    bcmi_ltsw_mpls_global_ctrl_t control_type,
    int value);

/*!
 * \brief Get MPLS global control.
 *
 * \param [in] unit Unit Number.
 * \param [in] control_type Control type.
 * \param [out] value Control value
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_mpls_global_control_get(
    int unit,
    bcmi_ltsw_mpls_global_ctrl_t control_type,
    int *value);

/*!
 * \brief Add dst mac into MAC_DA profile.
 *
 * \param [in] unit Unit Number.
 * \param [in] mac Dst MAC.
 * \param [out] index Profile index.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_mpls_tnl_dst_mac_profile_add(
    int unit,
    uint64_t mac,
    int *index);

/*!
 * \brief Delete dst mac from MAC_DA profile.
 *
 * \param [in] unit Unit Number.
 * \param [in] index Profile index.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_mpls_tnl_dst_mac_profile_del(
    int unit,
    int index);

/*!
 * \brief Get dst mac from MAC_DA profile.
 *
 * \param [in] unit Unit Number.
 * \param [in] index Profile index.
 * \param [out] mac Dst MAC.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_mpls_tnl_dst_mac_profile_get(
    int unit,
    int index,
    uint64_t *mac);

/*!
 * \brief Add MPLS encap labels.
 *
 * \param [in] unit Unit Number.
 * \param [in] label_info Encap label info.
 * \param [out] label_index VC label index.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_mpls_encap_label_add(
    int unit,
    bcmi_ltsw_mpls_encap_label_info_t *label_info,
    int *label_index);

/*!
 * \brief Get MPLS encap labels.
 *
 * \param [in] unit Unit Number.
 * \param [in] label_index VC label index.
 * \param [out] label_info Encap label info.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_mpls_encap_label_get(
    int unit,
    int label_index,
    bcmi_ltsw_mpls_encap_label_info_t *label_info);

/*!
 * \brief Delete MPLS encap labels.
 *
 * \param [in] unit Unit Number.
 * \param [in] label_index VC label index.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_mpls_encap_label_delete(
    int unit,
    int label_index);

/*!
 * \brief Increase reference count of VC label index.
 *
 * \param [in] unit Unit Number.
 * \param [in] label_index VC label index.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_mpls_encap_label_ref_inc(
    int unit,
    int label_index);

/*!
 * \brief Replace vp value in match entry of mpls port id .
 *
 * \param [in] unit Unit Number.
 * \param [in] mpls_port_id MPLS port ID.
 * \param [in] new_vp New VP ID.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_mpls_port_match_vp_replace(
    int unit,
    bcm_gport_t mpls_port_id,
    int new_vp);

/*!
 * \brief Get the vp value in match entry of mpls port id.
 *
 * \param [in] unit Unit Number.
 * \param [in] mpls_port_id MPLS port ID.
 * \param [in] new_vp New VP ID.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_mpls_port_match_vp_get(
    int unit,
    bcm_gport_t mpls_port_id,
    int *new_vp);

/*!
 * \brief Add an MPLS control packet entry.
 *
 * \param [in] unit Unit Number.
 * \param [in] options Operation options.
 * \param [in] match MPLS control packet match.
 * \param [in] action MPLS control packet action.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_mpls_control_pkt_add(
    int unit,
    uint32_t options,
    bcm_mpls_control_pkt_match_t *match,
    bcm_mpls_control_pkt_action_t *action);

/*!
 * \brief Get an MPLS control packet entry.
 *
 * \param [in] unit Unit Number.
 * \param [in/out] match MPLS control packet match.
 * \param [out] action MPLS control packet action.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_mpls_control_pkt_get(
    int unit,
    bcm_mpls_control_pkt_match_t *match,
    bcm_mpls_control_pkt_action_t *action);

/*!
 * \brief Delete an MPLS control packet entry.
 *
 * \param [in] unit Unit Number.
 * \param [in/out] match MPLS control packet match.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_mpls_control_pkt_delete(
    int unit,
    bcm_mpls_control_pkt_match_t *match);

/*!
 * \brief Traverse all MPLS control packet entries and call user.s callback.
 *
 * \param [in] unit Unit Number.
 * \param [in] cb User callback function.
 * \param [in] user_data User data.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_mpls_control_pkt_traverse(
    int unit,
    bcm_mpls_control_pkt_traverse_cb cb,
    void *user_data);

/*!
 * \brief Delete all MPLS control packet entries.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_mpls_control_pkt_delete_all(int unit);

/*!
 * \brief Get counter statistic values for specific MPLS label and gport.
 *
 * \param [in] unit Unit Number.
 * \param [in] label MPLS label.
 * \param [in] mpls_port MPLS port.
 * \param [in] stat mpls port information.
 * \param [out] val Stats value.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_mpls_label_stat_get(
    int unit,
    bcm_mpls_label_t label,
    bcm_gport_t mpls_port,
    bcm_mpls_stat_t stat,
    uint64_t *val);

/*!
 * \brief Clear counter statistic values for specific MPLS label and gport.
 *
 * \param [in] unit Unit Number.
 * \param [in] label MPLS label.
 * \param [in] mpls_port MPLS port.
 * \param [in] stat mpls port information.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_mpls_label_stat_clear(
    int unit,
    bcm_mpls_label_t label,
    bcm_gport_t mpls_port,
    bcm_mpls_stat_t stat);

/*!
 * \brief Set a port match for a MPLS port.
 *
 * \param [in] unit Unit Number.
 * \param [in] mpls_port_id mpls port ID.
 * \param [in] match mpls port match.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_mpls_port_match_set(
    int unit,
    bcm_gport_t mpls_port_id,
    bcmi_ltsw_mpls_port_match_t *match);

/*!
 * \brief Clear a port match for a MPLS port.
 *
 * \param [in] unit Unit Number.
 * \param [in] mpls_port_id mpls port ID.
 * \param [in] match mpls port match.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_mpls_port_match_clear(
    int unit,
    bcm_gport_t mpls_port_id,
    bcmi_ltsw_mpls_port_match_t *match);

/*!
 * \brief Get all port matches for a MPLS port.
 *
 * \param [in] unit Unit Number.
 * \param [in] mpls_port_id mpls port ID.
 * \param [in] size Match array size.
 * \param [out] match_array mpls port match.
 * \param [out] count Port match count.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_mpls_port_match_multi_get(
    int unit,
    bcm_gport_t mpls_port_id,
    int size,
    bcmi_ltsw_mpls_port_match_t *match_array,
    int *count);

#endif /* BCMI_LTSW_MPLS_H */
