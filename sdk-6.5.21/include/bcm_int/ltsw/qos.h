/*
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 *
 * This license is set out in https://raw.githubusercontent.com/Broadcom-Network-Switching-Software/OpenBCM/master/Legal/LICENSE file.
 * 
 * Copyright 2007-2020 Broadcom Inc. All rights reserved.
 */

#ifndef BCMI_LTSW_QOS_H
#define BCMI_LTSW_QOS_H

#include <bcm/types.h>

#include <sal/sal_types.h>

/*!
 * \brief Application switch control type of QoS for a specific device.
 */
typedef enum bcmi_ltsw_qos_control_s {

    /*! Enable layered QoS resolution mode. */
    bcmiQosControlLayeredQoSResolution = 0,

    /*! QoS control type count. */
    bcmiQosControlCount = 1

} bcmi_ltsw_qos_control_t;

#define BCMI_LTSW_QOS_CONTROL_STR \
{ \
    "LayeredQoSResolution" \
}

/*!
 * \brief QoS map type. Note every new enum must be put following the last valid one.
 */
typedef enum bcmi_ltsw_qos_map_type_s {

    /*! Map dot1p pri/cfi to internal priority/cng. */
    bcmiQosMapTypeL2Ingress = 0,

    /*! Map DSCP of IP packet to internal priority/cng. */
    bcmiQosMapTypeL3Ingress = 1,

    /*! Map Exp of MPLS packet to internal priority/cng. */
    bcmiQosMapTypeMplsIngress = 2,

    /*! Map internal priority/cng to dot1p pri/cfi. */
    bcmiQosMapTypeL2Egress = 3,

    /*! Map internal priority/cng to DSCP of IP packet. */
    bcmiQosMapTypeL3Egress = 4,

    /*! Map internal priority/cng to Exp of MPLS packet. */
    bcmiQosMapTypeMplsEgress = 5,

    /*! Map internal CN to forwarding ECN. */
    bcmiQosMapTypeFwdEcnEgress = 6,

    /*! Map internal priority/cng to forwarding DSCP, at the same time map the internal CN to forwarding ECN. */
    bcmiQosMapTypeFwdEcnDscpEgress = 7,

    /*! Map internal CN to tunnel ECN. */
    bcmiQosMapTypeTnlEcnEgress = 8,

    /*! Map internal priority/cng to tunnel DSCP, at the same time map the internal CN to tunnel ECN. */
    bcmiQosMapTypeTnlEcnDscpEgress = 9,

    /*! Map EXP to dot1p pri/cfi of MPLS packet. */
    bcmiQosMapTypeMplsEgressL2 = 10,

    /*! Map internal CN/internal priority/cng to tunnel label EXPs of MPLS packet on tunnel initiation. */
    bcmiQosMapTypeMplsTnlEgress = 11,

    /*! Map packet pri and cfi copied from IPIPE to outgoing packet pri and cfi. */
    bcmiQosMapTypeCopiedL2Egress = 12,

    /*! Map DSCP copied from IPIPE  to outgoing packet DSCP. */
    bcmiQosMapTypeCopiedL3Egress = 13,

    /*! Map ECN copied from IPIPE  to outgoing packet ECN. */
    bcmiQosMapTypeCopiedEcnEgress = 14,

    /*! Map DSCP copied from IPIPE to outgoing packet DSCP, and at the same time map ECN copied from IPIPE to outgoing  packet ECN. */
    bcmiQosMapTypeCopiedL3EcnEgress = 15,

    /*! The count of map type, must be the last. */
    bcmiQosMapTypeCount = 16

} bcmi_ltsw_qos_map_type_t;

#define BCMI_LTSW_QOS_MAP_TYPE_STR \
{ \
    "L2Ingress", \
    "L3Ingress", \
    "MplsIngress", \
    "L2Egress", \
    "L3Egress", \
    "MplsEgress", \
    "FwdEcnEgress", \
    "FwdEcnDscpEgress", \
    "TnlEcnEgress", \
    "TnlEcnDscpEgress", \
    "MplsEgressL2", \
    "MplsTnlEgress", \
    "CopiedL2Egress", \
    "CopiedL3Egress", \
    "CopiedEcnEgress", \
    "CopiedL3EcnEgress" \
}

/*!
 * \brief QoS color definitions.
 */
/*! Green color. */
#define BCMI_LTSW_QOS_COLOR_GREEN 0

/*! Yellow color. */
#define BCMI_LTSW_QOS_COLOR_YELLOW 3

/*! Red color. */
#define BCMI_LTSW_QOS_COLOR_RED 1

/*! None. */
#define BCMI_LTSW_QOS_COLOR_NONE 0

/*! QoS color encoding. */
#define BCMI_LTSW_QOS_COLOR_ENCODING(color) \
            (((color) == bcmColorGreen) ? BCMI_LTSW_QOS_COLOR_GREEN : \
            (((color) == bcmColorYellow) ? BCMI_LTSW_QOS_COLOR_YELLOW : \
             (((color) == bcmColorRed) ? BCMI_LTSW_QOS_COLOR_RED : \
              BCMI_LTSW_QOS_COLOR_NONE)))

/*! Qos color decoding. */
#define BCMI_LTSW_QOS_COLOR_DECODING(hw_color) \
           (((hw_color) == BCMI_LTSW_QOS_COLOR_GREEN) ? bcmColorGreen : \
           (((hw_color) == BCMI_LTSW_QOS_COLOR_YELLOW) ? bcmColorYellow : \
            (((hw_color) == BCMI_LTSW_QOS_COLOR_RED) ? bcmColorRed : bcmColorGreen)))

/*!
 * \brief Resolve QoS map id into mapping pointer and QoS map type.
 *
 * \param [in] unit Unit Number.
 * \param [in] map_id QoS map id.
 * \param [out] type QoS map type. NULL indicates not care.
 * \param [out] ptr Mapping pointer. NULL indicates not care.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_qos_map_id_resolve(
    int unit,
    int map_id,
    bcmi_ltsw_qos_map_type_t *type,
    int *ptr);

/*!
 * \brief Construct QoS map id with mapping pointer and QoS map type.
 *
 * \param [in] unit Unit Number.
 * \param [in] ptr Mapping pointer.
 * \param [in] type QoS map type.
 * \param [out] map_id QoS map id.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_qos_map_id_construct(
    int unit,
    int ptr,
    bcmi_ltsw_qos_map_type_t type,
    int *map_id);

/*!
 * \brief Get default mapping pointer.
 *
 * \param [in] unit Unit Number.
 * \param [in] type QoS map type.
 * \param [out] ptr Mapping pointer.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_qos_default_ptr_get(
    int unit,
    bcmi_ltsw_qos_map_type_t type,
    int *ptr);

/*!
 * \brief Get dummy operation pointer. The pointer indicates QoS remarking will do nothing with int_cn/int_pri/cng.
 *
 * \param [in] unit Unit Number.
 * \param [in] type QoS map type.
 * \param [out] ptr Mapping pointer.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_qos_dummy_ptr_get(
    int unit,
    bcmi_ltsw_qos_map_type_t type,
    int *ptr);

/*!
 * \brief Dump QoS module software bookkeepings.
 *
 * \param [in] unit Unit Number.
 */
extern void
bcmi_ltsw_qos_sw_dump(int unit);

/*!
 * \brief Set egress L2 map on a port based on egress VLAN priority source.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port id.
 * \param [in] src Source of egress VLAN priority.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_qos_port_egr_l2_map_set(
    int unit,
    bcm_port_t port,
    int src);

/*!
 * \brief Get egress VLAN priority source on a port based on egress L2 map
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port id.
 * \param [out] src Source of egress VLAN priority.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_qos_port_egr_l2_map_get(
    int unit,
    bcm_port_t port,
    int *src);

/*!
 * \brief Restore default QoS setting on a new port during flex port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port id.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_qos_port_attach(
    int unit,
    bcm_port_t port);

/*!
 * \brief Clear default QoS setting on a to-be-removed port during flex port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port id.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_qos_port_detach(
    int unit,
    bcm_port_t port);

/*!
 * \brief Get mapping pointer for Vxlan G/BUM flags remarking.
 *
 * \param [in] unit Unit Number.
 * \param [in] g_ena Enable G flag remarking.
 * \param [in] bum_ena Enable BUM flag remarking.
 * \param [out] ptr Mapping pointer.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_qos_vxlan_flags_map_ptr_get(
    int unit,
    int g_ena,
    int bum_ena,
    int *ptr);

/*!
 * \brief Specify QoS switch control behaviors.
 *
 * \param [in] unit Unit Number.
 * \param [in] control The desired configuration parameter to modify.
 * \param [in] value The value with which to set the parameter.
 *
 * \retval SHR_E_NONE Success.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_qos_control_set(
    int unit,
    bcmi_ltsw_qos_control_t control,
    uint32_t value);

/*!
 * \brief Retrieve QoS switch control behaviors.
 *
 * \param [in] unit Unit Number.
 * \param [in] control The desired configuration parameter to retrieve.
 * \param [out] value Pointer to where the retrieved value will be written.
 *
 * \retval SHR_E_NONE Success.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_qos_control_get(
    int unit,
    bcmi_ltsw_qos_control_t control,
    uint32_t *value);

#endif /* BCMI_LTSW_QOS_H */
