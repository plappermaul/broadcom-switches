/*
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 *
 * This license is set out in https://raw.githubusercontent.com/Broadcom-Network-Switching-Software/OpenBCM/master/Legal/LICENSE file.
 * 
 * Copyright 2007-2020 Broadcom Inc. All rights reserved.
 */

#ifndef BCMI_LTSW_INT_H
#define BCMI_LTSW_INT_H

#if defined(INCLUDE_INT)

#include <bcm/int.h>

#include <sal/sal_types.h>

/*!
 * \brief Application switch control type of INT for a specific device.
 */
typedef enum bcmi_ltsw_int_control_s {

    /*! Action for inband telemetry packets with no vector match. 0: Drop, 1: Forward as non-INT packet. */
    bcmiIntControlVectorMatchMissAction = 0,

    /*! Time in nano-second that is added to current timestamp to adjust latency from egress pipeline to port. */
    bcmiIntControlEgressTimeDelta = 1,

    /*! Switch identifier. */
    bcmiIntControlSwitchId = 2,

    /*! IFA version number. */
    bcmiIntControlIfaVersion = 3,

    /*! IFA protocol value. */
    bcmiIntControlIfaProtocol = 4,

    /*! Enable to parse IOAM packet with GRE encapsulation. */
    bcmiIntControlIoamGreProtocolParse = 5,

    /*! IOAM GRE protocol value. */
    bcmiIntControlIoamGreProtocol = 6,

    /*! Enable to parse IOAM packet with IPV6 encapsulation. */
    bcmiIntControlIoamOptionIncrementalParse = 7,

    /*! IOAM option type value. */
    bcmiIntControlIoamOptionIncremental = 8,

    /*! IOAM type value. */
    bcmiIntControlIoamType = 9,

    /*! INT-DP version number. */
    bcmiIntControlIntDpVersion = 10,

    /*! INT-DP UDP destination port1. */
    bcmiIntControlIntDpL4DestPort1 = 11,

    /*! INT-DP UDP destination port2. */
    bcmiIntControlIntDpL4DestPort2 = 12,

    /*! INT-DP Use header ProbeMarker1. */
    bcmiIntControlIntDpUseProbeMarker1 = 13,

    /*! INT-DP header ProbeMarker1. */
    bcmiIntControlIntDpProbeMarker1 = 14,

    /*! INT-DP Use header ProbeMarker2. */
    bcmiIntControlIntDpUseProbeMarker2 = 15,

    /*! INT-DP header ProbeMarker2. */
    bcmiIntControlIntDpProbeMarker2 = 16,

    /*! Enable copy to CPU on egress port as turnaround port. */
    bcmiIntControlIntTurnAroundCpuEnable = 17,

    /*! Enable copy to CPU on hop limit condition. */
    bcmiIntControlIntHopLimitCpuEnable = 18,

    /*! INT control type count. */
    bcmiIntControlCount = 19

} bcmi_ltsw_int_control_t;

#define BCMI_LTSW_INT_CONTROL_STR \
{ \
    "VectorMatchMissAction", \
    "EgressTimeDelta", \
    "SwitchId", \
    "IfaVersion", \
    "IfaProtocol", \
    "IoamGreProtocolParse", \
    "IoamGreProtocol", \
    "IoamOptionIncrementalParse", \
    "IoamOptionIncremental", \
    "IoamType", \
    "IntDpVersion", \
    "IntDpL4DestPort1", \
    "IntDpL4DestPort2", \
    "IntDpUseProbeMarker1", \
    "IntDpProbeMarker1", \
    "IntDpUseProbeMarker2", \
    "IntDpProbeMarker2", \
    "IntTurnAroundCpuEnable", \
    "IntHopLimitCpuEnable" \
}

/*! Replace an INT vector match. */
#define BCMI_LTSW_INT_VECTOR_MATCH_OPTIONS_REPLACE (1 << 0)

/*!
 * \brief INT vector match type.
 */
typedef enum bcmi_ltsw_int_vector_match_type_s {

    /*! Reserved. */
    bcmiIntVectorMatchTypeNone = 0,

    /*! In-band Flow Analyzer. */
    bcmiIntVectorMatchTypeIfa = 1,

    /*! In-site Operations, Administration, and Maintenance. */
    bcmiIntVectorMatchTypeIoam = 2,

    /*! In-band Network Telemetry Data-plane Probe. */
    bcmiIntVectorMatchTypeIntDp = 3,

    /*! The count of vector match type, must be the last. */
    bcmiIntVectorMatchTypeCount = 4

} bcmi_ltsw_int_vector_match_type_t;

#define BCMI_LTSW_INT_VECTOR_MATCH_TYPE_STR \
{ \
    "None", \
    "Ifa", \
    "Ioam", \
    "IntDp" \
}

/*!
 * \brief INT vector match criteria.
 */
typedef struct bcmi_ltsw_int_vector_match_s {

    /*! vector match type. */
    bcmi_ltsw_int_vector_match_type_t type;

    /*! The priority of the vector match. */
    int priority;

    /*! IFA/INT-DP metadata header request vector value or IOAM metadata trace type value. */
    uint32_t request_vector;

    /*! IFA/INT-DP metadata header request vector mask or IOAM metadata trace type mask. */
    uint32_t request_vector_mask;

    /*! IFA metadata LNS value. */
    uint8_t md_hdr_temp_id;

    /*! IFA metadata LNS mask. */
    uint8_t md_hdr_temp_id_mask;

    /*! IFA header GNS value or IOAM metadata namespace ID value. */
    uint16_t base_hdr_ns_id;

    /*! IFA header GNS mask or IOAM metadata namespace ID mask. */
    uint16_t base_hdr_ns_id_mask;

    /*! Profile ID to select and construct INT metadata. */
    uint8_t metadata_profile_id;

} bcmi_ltsw_int_vector_match_t;

/*!
 * \brief Definition of callback to construct ifa info from int.
 *
 * \param [in] unit Unit Number.
 * \param [in] int_vector_match INT vector match criteria.
 * \param [out] int_ifa_vector_match IFA vector match criteria.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*bcmi_ltsw_int_ifa_vector_match_from_int_cb_f)(
    int unit,
    bcmi_ltsw_int_vector_match_t *int_vector_match,
    bcm_int_ifa_vector_match_t *int_ifa_vector_match);

/*!
 * \brief Definition of callback to construct ioam info from int.
 *
 * \param [in] unit Unit Number.
 * \param [in] int_vector_match INT vector match criteria.
 * \param [out] int_ioam_vector_match IOAM vector match criteria.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*bcmi_ltsw_int_ioam_vector_match_from_int_cb_f)(
    int unit,
    bcmi_ltsw_int_vector_match_t *int_vector_match,
    bcm_int_ioam_vector_match_t *int_ioam_vector_match);

/*!
 * \brief Definition of callback to construct int-dp info from int.
 *
 * \param [in] unit Unit Number.
 * \param [in] int_vector_match INT vector match criteria.
 * \param [out] int_dp_vector_match INT-DP vector match criteria.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*bcmi_ltsw_int_dp_vector_match_from_int_cb_f)(
    int unit,
    bcmi_ltsw_int_vector_match_t *int_vector_match,
    bcm_int_dp_vector_match_t *int_dp_vector_match);

/*! Create the INT action profile with ID. */
#define BCMI_LTSW_INT_ACTION_PROFILE_OPTIONS_WITH_ID (1 << 0)

/*! Replace the INT action profile. */
#define BCMI_LTSW_INT_ACTION_PROFILE_OPTIONS_REPLACE (1 << 1)

/*! Enable to update IP length after metadata insertion. */
#define BCMI_LTSW_INT_ACTION_PROFILE_FLAGS_IP_LENGTH_UPDATE (1 << 0)

/*! Enable to update UDP length after metadata insertion. */
#define BCMI_LTSW_INT_ACTION_PROFILE_FLAGS_UDP_LENGTH_UPDATE (1 << 1)

/*!
 * \brief INT action profile type.
 */
typedef enum bcmi_ltsw_int_action_profile_type_s {

    /*! Reserved. */
    bcmiIntActionProfileTypeNone = 0,

    /*! In-band Flow Analyzer. */
    bcmiIntActionProfileTypeIfa = 1,

    /*! In-site Operations, Administration, and Maintenance. */
    bcmiIntActionProfileTypeIoam = 2,

    /*! In-band Network Telemetry Data-plane Probe. */
    bcmiIntActionProfileTypeIntDp = 3,

    /*! The count of action profile type, must be the last. */
    bcmiIntActionProfileTypeCount = 4

} bcmi_ltsw_int_action_profile_type_t;

#define BCMI_LTSW_INT_ACTION_PROFILE_TYPE_STR \
{ \
    "None", \
    "Ifa", \
    "Ioam", \
    "IntDp" \
}

/*!
 * \brief INT action profile.
 */
typedef struct bcmi_ltsw_int_action_profile_s {

    /*! Action profile type. */
    bcmi_ltsw_int_action_profile_type_t type;

    /*! Action profile flags. */
    uint32_t flags;

    /*! Timestamp mode for ingress timestamp, egress timestamp and residence time. */
    bcm_int_timestamp_mode_t timestamp_mode;

    /*! Format for residence time. */
    bcm_int_residence_time_format_t residence_time_format;

    /*! Header operation mode. */
    bcm_int_header_operation_mode_t header_operation_mode;

    /*! The updating mode for the O-bit in the flag field during metadata insertion. */
    bcm_int_ioam_o_bit_update_mode_t o_bit_update_mode;

    /*! Profile ID to select and construct INT metadata. This can be used to overwrite the profile assigned by INT vector match. */
    uint8_t metadata_profile_id;

} bcmi_ltsw_int_action_profile_t;

/*!
 * \brief Definition of callback to construct ifa info from int.
 *
 * \param [in] unit Unit Number.
 * \param [in] int_action_profile INT action profile.
 * \param [out] int_ifa_action_profile IFA action profile.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*bcmi_ltsw_int_ifa_action_profile_from_int_cb_f)(
    int unit,
    bcmi_ltsw_int_action_profile_t *int_action_profile,
    bcm_int_ifa_action_profile_t *int_ifa_action_profile);

/*!
 * \brief Definition of callback to construct ioam info from int.
 *
 * \param [in] unit Unit Number.
 * \param [in] int_action_profile INT action profile.
 * \param [out] int_ioam_action_profile IOAM action profile.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*bcmi_ltsw_int_ioam_action_profile_from_int_cb_f)(
    int unit,
    bcmi_ltsw_int_action_profile_t *int_action_profile,
    bcm_int_ioam_action_profile_t *int_ioam_action_profile);

/*!
 * \brief Definition of callback to construct int-dp info from int.
 *
 * \param [in] unit Unit Number.
 * \param [in] int_action_profile INT action profile.
 * \param [out] int_dp_action_profile INT-DP action profile.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*bcmi_ltsw_int_dp_action_profile_from_int_cb_f)(
    int unit,
    bcmi_ltsw_int_action_profile_t *int_action_profile,
    bcm_int_dp_action_profile_t *int_dp_action_profile);

/*!
 * \brief Specify INT switch control behaviors.
 *
 * \param [in] unit Unit Number.
 * \param [in] control The desired configuration parameter to modify.
 * \param [in] value The value with which to set the parameter.
 *
 * \retval SHR_E_NONE Success.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_int_control_set(
    int unit,
    bcmi_ltsw_int_control_t control,
    uint32_t value);

/*!
 * \brief Retrieve INT switch control behaviors.
 *
 * \param [in] unit Unit Number.
 * \param [in] control The desired configuration parameter to retrieve.
 * \param [out] value Pointer to where the retrieved value will be written.
 *
 * \retval SHR_E_NONE Success.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_int_control_get(
    int unit,
    bcmi_ltsw_int_control_t control,
    uint32_t *value);

/*!
 * \brief Add a vector match for INT.
 *
 * \param [in] unit Unit Number.
 * \param [in] options Add options.
 * \param [in/out] vector_match Vector match criteria.
 *
 * \retval SHR_E_NONE Success.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_int_vector_match_add(
    int unit,
    uint32_t options,
    bcmi_ltsw_int_vector_match_t *vector_match);

/*!
 * \brief Get the vector match for INT.
 *
 * \param [in] unit Unit Number.
 * \param [in/out] vector_match Vector match criteria.
 *
 * \retval SHR_E_NONE Success.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_int_vector_match_get(
    int unit,
    bcmi_ltsw_int_vector_match_t *vector_match);

/*!
 * \brief Delete the vector match for IFA.
 *
 * \param [in] unit Unit Number.
 * \param [in] vector_match Vector match criteria.
 *
 * \retval SHR_E_NONE Success.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_int_vector_match_delete(
    int unit,
    bcmi_ltsw_int_vector_match_t *vector_match);

/*!
 * \brief Delete all vector matches for IFA.
 *
 * \param [in] unit Unit Number.
 * \param [in] type Vector match type.
 *
 * \retval SHR_E_NONE Success.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_int_vector_match_delete_all(
    int unit,
    bcmi_ltsw_int_vector_match_type_t type);

/*!
 * \brief Create the INT action profile.
 *
 * \param [in] unit Unit Number.
 * \param [in] options Create options.
 * \param [in/out] profile_id Action profile ID.
 * \param [in] profile Action profile.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_int_action_profile_create(
    int unit,
    uint32 options,
    int *profile_id,
    bcmi_ltsw_int_action_profile_t *profile);

/*!
 * \brief Get the INT action profile.
 *
 * \param [in] unit Unit Number.
 * \param [in] profile_id Action profile ID.
 * \param [out] profile Action profile.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_int_action_profile_get(
    int unit,
    int profile_id,
    bcmi_ltsw_int_action_profile_t *profile);

/*!
 * \brief Destroy the INT action profile.
 *
 * \param [in] unit Unit Number.
 * \param [in] type Action profile type.
 * \param [in] profile_id Action profile ID.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_int_action_profile_destroy(
    int unit,
    bcmi_ltsw_int_action_profile_type_t type,
    int profile_id);

/*!
 * \brief Traverse all vector matches for IFA.
 *
 * \param [in] unit Unit Number.
 * \param [in] trav_fn A pointer to the callback function to call for each vector match.
 * \param [in] cb A pointer to the callback function to call for construct ifa info from int.
 * \param [in] user_data Pointer to user data to supply in the callback.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_int_vector_match_ifa_traverse(
    int unit,
    bcm_int_ifa_vector_match_traverse_cb trav_fn,
    bcmi_ltsw_int_ifa_vector_match_from_int_cb_f cb,
    void *user_data);

/*!
 * \brief Traverse all vector matches for IOAM.
 *
 * \param [in] unit Unit Number.
 * \param [in] trav_fn A pointer to the callback function to call for each vector match.
 * \param [in] cb A pointer to the callback function to call for construct ioam info from int.
 * \param [in] user_data Pointer to user data to supply in the callback.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_int_vector_match_ioam_traverse(
    int unit,
    bcm_int_ioam_vector_match_traverse_cb trav_fn,
    bcmi_ltsw_int_ioam_vector_match_from_int_cb_f cb,
    void *user_data);

/*!
 * \brief Traverse all vector matches for INT-DP.
 *
 * \param [in] unit Unit Number.
 * \param [in] trav_fn A pointer to the callback function to call for each vector match.
 * \param [in] cb A pointer to the callback function to call for construct int-dp info from int.
 * \param [in] user_data Pointer to user data to supply in the callback.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_int_vector_match_dp_traverse(
    int unit,
    bcm_int_dp_vector_match_traverse_cb trav_fn,
    bcmi_ltsw_int_dp_vector_match_from_int_cb_f cb,
    void *user_data);

/*!
 * \brief Traverse all action profiles for IFA.
 *
 * \param [in] unit Unit Number.
 * \param [in] trav_fn A pointer to the callback function to call for each action profile.
 * \param [in] cb A pointer to the callback function to call for construct ifa info from int.
 * \param [in] user_data Pointer to user data to supply in the callback.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_int_action_profile_ifa_traverse(
    int unit,
    bcm_int_ifa_action_profile_traverse_cb trav_fn,
    bcmi_ltsw_int_ifa_action_profile_from_int_cb_f cb,
    void *user_data);

/*!
 * \brief Traverse all action profiles for IOAM.
 *
 * \param [in] unit Unit Number.
 * \param [in] trav_fn A pointer to the callback function to call for each action profile.
 * \param [in] cb A pointer to the callback function to call for construct ioam info from int.
 * \param [in] user_data Pointer to user data to supply in the callback.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_int_action_profile_ioam_traverse(
    int unit,
    bcm_int_ioam_action_profile_traverse_cb trav_fn,
    bcmi_ltsw_int_ioam_action_profile_from_int_cb_f cb,
    void *user_data);

/*!
 * \brief Traverse all action profiles for INT-DP.
 *
 * \param [in] unit Unit Number.
 * \param [in] trav_fn A pointer to the callback function to call for each action profile.
 * \param [in] cb A pointer to the callback function to call for construct int-dp info from int.
 * \param [in] user_data Pointer to user data to supply in the callback.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_int_action_profile_dp_traverse(
    int unit,
    bcm_int_dp_action_profile_traverse_cb trav_fn,
    bcmi_ltsw_int_dp_action_profile_from_int_cb_f cb,
    void *user_data);

#endif /* INCLUDE_INT */

#endif /* BCMI_LTSW_INT_H */
