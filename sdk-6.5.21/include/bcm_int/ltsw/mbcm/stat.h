/*
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 *
 * This license is set out in https://raw.githubusercontent.com/Broadcom-Network-Switching-Software/OpenBCM/master/Legal/LICENSE file.
 * 
 * Copyright 2007-2020 Broadcom Inc. All rights reserved.
 */

#ifndef BCMINT_LTSW_MBCM_STAT_H
#define BCMINT_LTSW_MBCM_STAT_H

#include <bcm/types.h>
#include <bcm/stat.h>

#include <bcm_int/ltsw/stat_int.h>
#include <bcm_int/ltsw/stat.h>

#include <sal/sal_types.h>

/*!
 * \brief Initializes the stat module.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*stat_init_f)(int unit);

/*!
 * \brief De-initializes the stat module.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*stat_detach_f)(int unit);

/*!
 * \brief Get the variant specific database.
 *
 * \param [in] unit Unit Number.
 * \param [out] stat_db Stat database structure.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*stat_db_get_f)(
    int unit,
    bcmint_stat_db_t *stat_db);

/*!
 * \brief Get the chip specific device informaiton.
 *
 * \param [in] unit Unit Number.
 * \param [out] devinfo Stat device information structure.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*stat_dev_info_get_f)(
    int unit,
    const bcmint_stat_dev_info_t **devinfo);

/*!
 * \brief Initializes the stat index for counter mapping table.
 *
 * \param [in] unit Unit Number.
 * \param [in] dev_info Stat device information structure.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*stat_index_init_f)(
    int unit,
    const bcmint_stat_dev_info_t *dev_info);

/*!
 * \brief De-initializes the stat LT entries.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*stat_lt_detach_f)(int unit);

/*!
 * \brief Initializes the statistic on port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*stat_port_attach_f)(
    int unit,
    bcm_port_t port);

/*!
 * \brief De-initializes the statistic on port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*stat_port_detach_f)(
    int unit,
    bcm_port_t port);

/*!
 * \brief Clear the port based statistics.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*stat_clear_f)(
    int unit,
    bcm_port_t port);

/*!
 * \brief Clear the specific statistics.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] stat_id SNMP statistics type.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*stat_clear_single_f)(
    int unit,
    bcm_port_t port,
    bcm_stat_val_t stat_id);

/*!
 * \brief Get the specified statistic from the port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] sync_mode Sync mode.
 * \param [in] stat_id SNMP statistics type.
 * \param [out] val 64-bit counter value.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*stat_get_f)(
    int unit,
    bcm_port_t port,
    bool sync_mode,
    bcm_stat_val_t stat_id,
    uint64_t *val);

/*!
 * \brief Get the dedicated counter associated with a given drop event.
 *
 * \param [in] unit Unit Number.
 * \param [in] sync_mode Sync mode.
 * \param [in] type Drop event type.
 * \param [out] val 64-bit counter value.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*stat_drop_event_counter_get_f)(
    int unit,
    bool sync_mode,
    bcm_pkt_drop_event_t type,
    uint64_t *val);

/*!
 * \brief Clear the dedicated counter associated with a given drop event.
 *
 * \param [in] unit Unit Number.
 * \param [in] type Drop event type.
 * \param [in] val 64-bit counter value. Set val to 0 to clear the counter.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*stat_drop_event_counter_set_f)(
    int unit,
    bcm_pkt_drop_event_t type,
    uint64_t val);

/*!
 * \brief Get the dedicated counter associated with a given trace event.
 *
 * \param [in] unit Unit Number.
 * \param [in] sync_mode Sync mode.
 * \param [in] type Trace event type.
 * \param [out] val 64-bit counter value.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*stat_trace_event_counter_get_f)(
    int unit,
    bool sync_mode,
    bcm_pkt_trace_event_t type,
    uint64_t *val);

/*!
 * \brief Clear the dedicated counter associated with a given trace event.
 *
 * \param [in] unit Unit Number.
 * \param [in] type Trace event type.
 * \param [in] val 64-bit counter value. Set val to 0 to clear the counter.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*stat_trace_event_counter_set_f)(
    int unit,
    bcm_pkt_trace_event_t type,
    uint64_t val);

/*!
 * \brief Initializes the counter control information.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*stat_counter_control_init_f)(int unit);

/*!
 * \brief Get the counter control information structure.
 *
 * \param [in] unit Unit Number.
 * \param [out] info Counter control information structure.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*stat_counter_control_get_f)(
    int unit,
    bcmi_ltsw_stat_counter_control_t *info);

/*!
 * \brief Add a certain packet type to debug counter to count.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] stat_id SNMP statistics type.
 * \param [in] trigger The counter select value (see include/bcm/stat.h for bit definitions).
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*stat_custom_add_f)(
    int unit,
    bcm_port_t port,
    bcm_stat_val_t stat_id,
    bcm_custom_stat_trigger_t trigger);

/*!
 * \brief Check if certain packet types is part of debug counter.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] stat_id SNMP statistics type.
 * \param [in] trigger The counter select value (see include/bcm/stat.h for bit definitions).
 * \param [out] result Result of a query. 0 if positive, -1 if negative.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*stat_custom_check_f)(
    int unit,
    bcm_port_t port,
    bcm_stat_val_t stat_id,
    bcm_custom_stat_trigger_t trigger,
    int *result);

/*!
 * \brief Delete a certain packet type from debug counter.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] stat_id SNMP statistics type.
 * \param [in] trigger The counter select value (see include/bcm/stat.h for bit definitions).
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*stat_custom_delete_f)(
    int unit,
    bcm_port_t port,
    bcm_stat_val_t stat_id,
    bcm_custom_stat_trigger_t trigger);

/*!
 * \brief Delete all packet types from debug counter.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] stat_id SNMP statistics type.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*stat_custom_delete_all_f)(
    int unit,
    bcm_port_t port,
    bcm_stat_val_t stat_id);

/*!
 * \brief Stat driver structure.
 */
typedef struct mbcm_ltsw_stat_drv_s {

    /*! Initializes the stat module. */
    stat_init_f stat_init;

    /*! De-initializes the stat module. */
    stat_detach_f stat_detach;

    /*! Get the variant specific database. */
    stat_db_get_f stat_db_get;

    /*! Get the chip specific device informaiton. */
    stat_dev_info_get_f stat_dev_info_get;

    /*! Initializes the stat index for counter mapping table. */
    stat_index_init_f stat_index_init;

    /*! De-initializes the stat LT entries. */
    stat_lt_detach_f stat_lt_detach;

    /*! Initializes the statistic on port. */
    stat_port_attach_f stat_port_attach;

    /*! De-initializes the statistic on port. */
    stat_port_detach_f stat_port_detach;

    /*! Clear the port based statistics. */
    stat_clear_f stat_clear;

    /*! Clear the specific statistics. */
    stat_clear_single_f stat_clear_single;

    /*! Get the specified statistic from the port. */
    stat_get_f stat_get;

    /*! Get the dedicated counter associated with a given drop event. */
    stat_drop_event_counter_get_f stat_drop_event_counter_get;

    /*! Clear the dedicated counter associated with a given drop event. */
    stat_drop_event_counter_set_f stat_drop_event_counter_set;

    /*! Get the dedicated counter associated with a given trace event. */
    stat_trace_event_counter_get_f stat_trace_event_counter_get;

    /*! Clear the dedicated counter associated with a given trace event. */
    stat_trace_event_counter_set_f stat_trace_event_counter_set;

    /*! Initializes the counter control information. */
    stat_counter_control_init_f stat_counter_control_init;

    /*! Get the counter control information structure. */
    stat_counter_control_get_f stat_counter_control_get;

    /*! Add a certain packet type to debug counter to count. */
    stat_custom_add_f stat_custom_add;

    /*! Check if certain packet types is part of debug counter. */
    stat_custom_check_f stat_custom_check;

    /*! Delete a certain packet type from debug counter. */
    stat_custom_delete_f stat_custom_delete;

    /*! Delete all packet types from debug counter. */
    stat_custom_delete_all_f stat_custom_delete_all;

} mbcm_ltsw_stat_drv_t;

/*!
 * \brief Set the STAT driver of the device.
 *
 * \param [in] unit Unit Number.
 * \param [in] drv Stat driver to set.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_stat_drv_set(
    int unit,
    mbcm_ltsw_stat_drv_t *drv);

/*!
 * \brief Initializes the stat module.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_stat_init(int unit);

/*!
 * \brief De-initializes the stat module.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_stat_detach(int unit);

/*!
 * \brief Get the variant specific database.
 *
 * \param [in] unit Unit Number.
 * \param [out] stat_db Stat database structure.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_stat_db_get(
    int unit,
    bcmint_stat_db_t *stat_db);

/*!
 * \brief Get the chip specific device informaiton.
 *
 * \param [in] unit Unit Number.
 * \param [out] devinfo Stat device information structure.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_stat_dev_info_get(
    int unit,
    const bcmint_stat_dev_info_t **devinfo);

/*!
 * \brief Initializes the stat index for counter mapping table.
 *
 * \param [in] unit Unit Number.
 * \param [in] dev_info Stat device information structure.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_stat_index_init(
    int unit,
    const bcmint_stat_dev_info_t *dev_info);

/*!
 * \brief De-initializes the stat LT entries.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_stat_lt_detach(int unit);

/*!
 * \brief Initializes the statistic on port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_stat_port_attach(
    int unit,
    bcm_port_t port);

/*!
 * \brief De-initializes the statistic on port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_stat_port_detach(
    int unit,
    bcm_port_t port);

/*!
 * \brief Clear the port based statistics.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_stat_clear(
    int unit,
    bcm_port_t port);

/*!
 * \brief Clear the specific statistics.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] stat_id SNMP statistics type.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_stat_clear_single(
    int unit,
    bcm_port_t port,
    bcm_stat_val_t stat_id);

/*!
 * \brief Get the specified statistic from the port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] sync_mode Sync mode.
 * \param [in] stat_id SNMP statistics type.
 * \param [out] val 64-bit counter value.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_stat_get(
    int unit,
    bcm_port_t port,
    bool sync_mode,
    bcm_stat_val_t stat_id,
    uint64_t *val);

/*!
 * \brief Get the dedicated counter associated with a given drop event.
 *
 * \param [in] unit Unit Number.
 * \param [in] sync_mode Sync mode.
 * \param [in] type Drop event type.
 * \param [out] val 64-bit counter value.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_stat_drop_event_counter_get(
    int unit,
    bool sync_mode,
    bcm_pkt_drop_event_t type,
    uint64_t *val);

/*!
 * \brief Clear the dedicated counter associated with a given drop event.
 *
 * \param [in] unit Unit Number.
 * \param [in] type Drop event type.
 * \param [in] val 64-bit counter value. Set val to 0 to clear the counter.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_stat_drop_event_counter_set(
    int unit,
    bcm_pkt_drop_event_t type,
    uint64_t val);

/*!
 * \brief Get the dedicated counter associated with a given trace event.
 *
 * \param [in] unit Unit Number.
 * \param [in] sync_mode Sync mode.
 * \param [in] type Trace event type.
 * \param [out] val 64-bit counter value.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_stat_trace_event_counter_get(
    int unit,
    bool sync_mode,
    bcm_pkt_trace_event_t type,
    uint64_t *val);

/*!
 * \brief Clear the dedicated counter associated with a given trace event.
 *
 * \param [in] unit Unit Number.
 * \param [in] type Trace event type.
 * \param [in] val 64-bit counter value. Set val to 0 to clear the counter.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_stat_trace_event_counter_set(
    int unit,
    bcm_pkt_trace_event_t type,
    uint64_t val);

/*!
 * \brief Initializes the counter control information.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_stat_counter_control_init(int unit);

/*!
 * \brief Get the counter control information structure.
 *
 * \param [in] unit Unit Number.
 * \param [out] info Counter control information structure.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_stat_counter_control_get(
    int unit,
    bcmi_ltsw_stat_counter_control_t *info);

/*!
 * \brief Add a certain packet type to debug counter to count.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] stat_id SNMP statistics type.
 * \param [in] trigger The counter select value (see include/bcm/stat.h for bit definitions).
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_stat_custom_add(
    int unit,
    bcm_port_t port,
    bcm_stat_val_t stat_id,
    bcm_custom_stat_trigger_t trigger);

/*!
 * \brief Check if certain packet types is part of debug counter.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] stat_id SNMP statistics type.
 * \param [in] trigger The counter select value (see include/bcm/stat.h for bit definitions).
 * \param [out] result Result of a query. 0 if positive, -1 if negative.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_stat_custom_check(
    int unit,
    bcm_port_t port,
    bcm_stat_val_t stat_id,
    bcm_custom_stat_trigger_t trigger,
    int *result);

/*!
 * \brief Delete a certain packet type from debug counter.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] stat_id SNMP statistics type.
 * \param [in] trigger The counter select value (see include/bcm/stat.h for bit definitions).
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_stat_custom_delete(
    int unit,
    bcm_port_t port,
    bcm_stat_val_t stat_id,
    bcm_custom_stat_trigger_t trigger);

/*!
 * \brief Delete all packet types from debug counter.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] stat_id SNMP statistics type.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_stat_custom_delete_all(
    int unit,
    bcm_port_t port,
    bcm_stat_val_t stat_id);

#endif /* BCMINT_LTSW_MBCM_STAT_H */
