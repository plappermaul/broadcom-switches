/*
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 *
 * This license is set out in https://raw.githubusercontent.com/Broadcom-Network-Switching-Software/OpenBCM/master/Legal/LICENSE file.
 * 
 * Copyright 2007-2020 Broadcom Inc. All rights reserved.
 */

#ifndef BCMINT_LTSW_MBCM_COSQ_THD_H
#define BCMINT_LTSW_MBCM_COSQ_THD_H

#include <bcm/cosq.h>
#include <bcm/types.h>

#include <sal/sal_types.h>

/*!
 * \brief Initialize the cosq_thd module.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*cosq_thd_init_f)(int unit);

/*!
 * \brief Detach the cosq_thd module.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*cosq_thd_detach_f)(int unit);

/*!
 * \brief Check if a cosq_control_type property can be changed dynamically
 *
 * \param [in] unit Unit Number.
 * \param [in] type Type of operation.
 * \param [in] dynamic Returns if type can be changed dynamically.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*cosq_thd_dynamic_get_f)(
    int unit,
    bcm_cosq_control_t type,
    bcm_cosq_dynamic_setting_type_t *dynamic);

/*!
 * \brief Reset the guarantee of priority group, uc queue, mc queue to the default.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*cosq_thd_port_guarantee_reset_f)(
    int unit,
    bcm_port_t port);

/*!
 * \brief Set specified feature configuration
 *
 * \param [in] unit Unit Number.
 * \param [in] gport Gport Number.
 * \param [in] cosq COS queue.
 * \param [in] buffer buffer id.
 * \param [in] type Feature.
 * \param [in] arg Feature value.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*cosq_thd_control_set_f)(
    int unit,
    bcm_gport_t gport,
    bcm_cos_queue_t cosq,
    bcm_cosq_buffer_id_t buffer,
    bcm_cosq_control_t type,
    int arg);

/*!
 * \brief Get specified feature configuration
 *
 * \param [in] unit Unit Number.
 * \param [in] gport Gport Number.
 * \param [in] cosq COS queue.
 * \param [in] buffer Buffer id.
 * \param [in] type Feature.
 * \param [out] arg Feature value.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*cosq_thd_control_get_f)(
    int unit,
    bcm_gport_t gport,
    bcm_cos_queue_t cosq,
    bcm_cosq_buffer_id_t buffer,
    bcm_cosq_control_t type,
    int *arg);

/*!
 * \brief Port UC service pool id get.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] queue queue id.
 * \param [out] spid pool id.
 * \param [out] use_qgroup_min true/false.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*cosq_thd_port_uc_spid_get_f)(
    int unit,
    bcm_port_t port,
    int queue,
    int *spid,
    int *use_qgroup_min);

/*!
 * \brief TM db shared limit get.
 *
 * \param [in] unit Unit Number.
 * \param [in] itm itm.
 * \param [in] spid ing service pool id.
 * \param [out] shared_limit shared limit value.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*cosq_thd_shared_limit_get_f)(
    int unit,
    int itm,
    int spid,
    int *shared_limit);

/*!
 * \brief Set the profile for Input priortty to PG mapping for a port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] profile_id Profile index.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*cosq_thd_port_inppri_profile_set_f)(
    int unit,
    bcm_port_t port,
    int profile_id);

/*!
 * \brief Get the profile for Input priortty to PG mapping for a port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [out] profile_id Profile index.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*cosq_thd_port_inppri_profile_get_f)(
    int unit,
    bcm_port_t port,
    int *profile_id);

/*!
 * \brief Set the profile for PG to SPID/HPID/PFCPRI mapping for a port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] profile_id Profile index.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*cosq_thd_port_pg_profile_set_f)(
    int unit,
    bcm_port_t port,
    int profile_id);

/*!
 * \brief Get the profile for PG to SPID/HPID/PFCPRI mapping for a port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [out] profile_id Profile index.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*cosq_thd_port_pg_profile_get_f)(
    int unit,
    bcm_port_t port,
    int *profile_id);

/*!
 * \brief To Set enable or disable status of service pool for a given pool id.
 *
 * \param [in] unit Unit Number.
 * \param [in] id Service pool id.
 * \param [in] cosq_service_pool Enable/Disable given type service pool.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*cosq_thd_service_pool_set_f)(
    int unit,
    bcm_service_pool_id_t id,
    bcm_cosq_service_pool_t cosq_service_pool);

/*!
 * \brief To get enable or disable status of service pool for a given pool id.
 *
 * \param [in] unit Unit Number.
 * \param [in] id Service pool id.
 * \param [out] cosq_service_pool Get enable or disable status.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*cosq_thd_service_pool_get_f)(
    int unit,
    bcm_service_pool_id_t id,
    bcm_cosq_service_pool_t *cosq_service_pool);

/*!
 * \brief Enable or disable service pool override.
 *
 * \param [in] unit Unit Number.
 * \param [in] type Service pool override type.
 * \param [in] service_pool Service pool id.
 * \param [in] enable Enable or disable service pool override.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*cosq_thd_service_pool_override_set_f)(
    int unit,
    bcm_cosq_service_pool_override_type_t type,
    bcm_service_pool_id_t service_pool,
    int enable);

/*!
 * \brief Enable or disable service pool override.
 *
 * \param [in] unit Unit Number.
 * \param [in] type Service pool override type.
 * \param [out] service_pool Service pool id.
 * \param [out] enable Enable or disable service pool override.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*cosq_thd_service_pool_override_get_f)(
    int unit,
    bcm_cosq_service_pool_override_type_t type,
    bcm_service_pool_id_t *service_pool,
    int *enable);

/*!
 * \brief Set a profile for the various mappings.
 *
 * \param [in] unit Unit Number.
 * \param [in] profile_index profile index.
 * \param [in] type Mapping type.
 * \param [in] array_count Number of mappings in array.
 * \param [in] arg Value of input to mapping type.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*cosq_thd_priority_group_mapping_profile_set_f)(
    int unit,
    int profile_index,
    bcm_cosq_priority_group_mapping_profile_type_t type,
    int array_count,
    int *arg);

/*!
 * \brief Get a profile for the various mappings.
 *
 * \param [in] unit Unit Number.
 * \param [in] profile_index profile index.
 * \param [in] type Mapping type.
 * \param [in] array_max Number of mappings allocated in array.
 * \param [out] arg Array of input to mapping type.
 * \param [out] array_count Number of mappings returned.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*cosq_thd_priority_group_mapping_profile_get_f)(
    int unit,
    int profile_index,
    bcm_cosq_priority_group_mapping_profile_type_t type,
    int array_max,
    int *arg,
    int *array_count);

/*!
 * \brief Setup per port per priority group properties.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] priority_group_id priority group.
 * \param [in] type Port/priority group property.
 * \param [in] arg set value of property.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*cosq_thd_port_priority_group_property_set_f)(
    int unit,
    bcm_port_t port,
    int priority_group_id,
    bcm_cosq_port_prigroup_control_t type,
    int arg);

/*!
 * \brief Setup per port per priority group properties.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] priority_group_id priority group.
 * \param [in] type Port/priority group property.
 * \param [out] arg set value of property.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*cosq_thd_port_priority_group_property_get_f)(
    int unit,
    bcm_port_t port,
    int priority_group_id,
    bcm_cosq_port_prigroup_control_t type,
    int *arg);

/*!
 * \brief Get mutliple buffer ids associated with a specified port.
 *
 * \param [in] unit Unit Number.
 * \param [in] gport Gport Number.
 * \param [in] cosq Reserved field.
 * \param [in] direction Specify ingress or egress direction.
 * \param [in] array_max number of entries to be retrieved.
 * \param [out] buf_id_array Buffer id array.
 * \param [out] array_count Actural buffer id count in buf_id_array.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*cosq_thd_buffer_id_multi_get_f)(
    int unit,
    bcm_gport_t gport,
    bcm_cos_queue_t cosq,
    bcm_cosq_dir_t direction,
    int array_max,
    bcm_cosq_buffer_id_t *buf_id_array,
    int *array_count);

/*!
 * \brief To enable/disable Rx of packets on the specified CPU cosq.
 *
 * \param [in] unit Unit Number.
 * \param [in] cosq CPU Cosq ID.
 * \param [in] enable Enable/Disable.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*cosq_thd_cpu_cosq_enable_set_f)(
    int unit,
    bcm_cos_queue_t cosq,
    int enable);

/*!
 * \brief To get enable/disable status on Rx of packets on the specified CPU cosq.
 *
 * \param [in] unit Unit Number.
 * \param [in] cosq CPU Cosq ID.
 * \param [out] enable Enable/Disable.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*cosq_thd_cpu_cosq_enable_get_f)(
    int unit,
    bcm_cos_queue_t cosq,
    int *enable);

/*!
 * \brief Convert BCM enum alpha value to LT enum value.
 *
 * \param [in] unit Unit Number.
 * \param [in] arg BCM Alpha value.
 * \param [out] alpha LT Alpha value.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*cosq_thd_alpha_bcm_to_lt_convert_f)(
    int unit,
    int arg,
    const char **alpha);

/*!
 * \brief Convert LT enum alpha value to BCM enum value.
 *
 * \param [in] unit Unit Number.
 * \param [in] alpha LT Alpha value.
 * \param [out] arg BCM Alpha value.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*cosq_thd_alpha_lt_to_bcm_convert_f)(
    int unit,
    const char *alpha,
    int *arg);

/*!
 * \brief Convert byte to cell.
 *
 * \param [in] unit Unit Number.
 * \param [in] bytes bytes.
 * \param [out] cells cells.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*cosq_thd_byte_to_cell_f)(
    int unit,
    uint32_t bytes,
    int *cells);

/*!
 * \brief Convert cell to byte.
 *
 * \param [in] unit Unit Number.
 * \param [in] cells cells.
 * \param [out] bytes bytes.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*cosq_thd_cell_to_byte_f)(
    int unit,
    uint32_t cells,
    int *bytes);

/*!
 * \brief Calculate and set Headroom Pool limit based on number of lossless classes and packet distribution.
 *
 * \param [in] unit Unit Number.
 * \param [in] hdrm_pool Headroom Pool number.
 * \param [in] num_lossless_class Max Number of lossless classes expected to use Headroom at a given time.
 * \param [in] arr_size Array size of packet distribution array.
 * \param [in] pkt_dist_array Packet distribution array.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*cosq_thd_hdrm_pool_limit_set_f)(
    int unit,
    int hdrm_pool,
    int num_lossless_class,
    int arr_size,
    bcm_cosq_pkt_size_dist_t *pkt_dist_array);

/*!
 * \brief Setup Port PriorityGroup headroom value based on cable length and packet distribution.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port number.
 * \param [in] pri_bmp Internal Priority bitmap for which PG headroom needs to be modified.
 * \param [in] cable_len Cable length (in meters).
 * \param [in] arr_size Array size of packet distribution array.
 * \param [in] pkt_dist_array Packet distribution array.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*cosq_thd_port_prigrp_hdrm_set_f)(
    int unit,
    bcm_port_t port,
    uint32_t pri_bmp,
    int cable_len,
    int arr_size,
    bcm_cosq_pkt_size_dist_t *pkt_dist_array);

/*!
 * \brief Cosq_thd driver structure.
 */
typedef struct mbcm_ltsw_cosq_thd_drv_s {

    /*! Initialize the cosq_thd module. */
    cosq_thd_init_f cosq_thd_init;

    /*! Detach the cosq_thd module. */
    cosq_thd_detach_f cosq_thd_detach;

    /*! Check if a cosq_control_type property can be changed dynamically */
    cosq_thd_dynamic_get_f cosq_thd_dynamic_get;

    /*! Reset the guarantee of priority group, uc queue, mc queue to the default. */
    cosq_thd_port_guarantee_reset_f cosq_thd_port_guarantee_reset;

    /*! Set specified feature configuration */
    cosq_thd_control_set_f cosq_thd_control_set;

    /*! Get specified feature configuration */
    cosq_thd_control_get_f cosq_thd_control_get;

    /*! Port UC service pool id get. */
    cosq_thd_port_uc_spid_get_f cosq_thd_port_uc_spid_get;

    /*! TM db shared limit get. */
    cosq_thd_shared_limit_get_f cosq_thd_shared_limit_get;

    /*! Set the profile for Input priortty to PG mapping for a port. */
    cosq_thd_port_inppri_profile_set_f cosq_thd_port_inppri_profile_set;

    /*! Get the profile for Input priortty to PG mapping for a port. */
    cosq_thd_port_inppri_profile_get_f cosq_thd_port_inppri_profile_get;

    /*! Set the profile for PG to SPID/HPID/PFCPRI mapping for a port. */
    cosq_thd_port_pg_profile_set_f cosq_thd_port_pg_profile_set;

    /*! Get the profile for PG to SPID/HPID/PFCPRI mapping for a port. */
    cosq_thd_port_pg_profile_get_f cosq_thd_port_pg_profile_get;

    /*! To Set enable or disable status of service pool for a given pool id. */
    cosq_thd_service_pool_set_f cosq_thd_service_pool_set;

    /*! To get enable or disable status of service pool for a given pool id. */
    cosq_thd_service_pool_get_f cosq_thd_service_pool_get;

    /*! Enable or disable service pool override. */
    cosq_thd_service_pool_override_set_f cosq_thd_service_pool_override_set;

    /*! Enable or disable service pool override. */
    cosq_thd_service_pool_override_get_f cosq_thd_service_pool_override_get;

    /*! Set a profile for the various mappings. */
    cosq_thd_priority_group_mapping_profile_set_f cosq_thd_priority_group_mapping_profile_set;

    /*! Get a profile for the various mappings. */
    cosq_thd_priority_group_mapping_profile_get_f cosq_thd_priority_group_mapping_profile_get;

    /*! Setup per port per priority group properties. */
    cosq_thd_port_priority_group_property_set_f cosq_thd_port_priority_group_property_set;

    /*! Setup per port per priority group properties. */
    cosq_thd_port_priority_group_property_get_f cosq_thd_port_priority_group_property_get;

    /*! Get mutliple buffer ids associated with a specified port. */
    cosq_thd_buffer_id_multi_get_f cosq_thd_buffer_id_multi_get;

    /*! To enable/disable Rx of packets on the specified CPU cosq. */
    cosq_thd_cpu_cosq_enable_set_f cosq_thd_cpu_cosq_enable_set;

    /*! To get enable/disable status on Rx of packets on the specified CPU cosq. */
    cosq_thd_cpu_cosq_enable_get_f cosq_thd_cpu_cosq_enable_get;

    /*! Convert BCM enum alpha value to LT enum value. */
    cosq_thd_alpha_bcm_to_lt_convert_f cosq_thd_alpha_bcm_to_lt_convert;

    /*! Convert LT enum alpha value to BCM enum value. */
    cosq_thd_alpha_lt_to_bcm_convert_f cosq_thd_alpha_lt_to_bcm_convert;

    /*! Convert byte to cell. */
    cosq_thd_byte_to_cell_f cosq_thd_byte_to_cell;

    /*! Convert cell to byte. */
    cosq_thd_cell_to_byte_f cosq_thd_cell_to_byte;

    /*! Calculate and set Headroom Pool limit based on number of lossless classes and packet distribution. */
    cosq_thd_hdrm_pool_limit_set_f cosq_thd_hdrm_pool_limit_set;

    /*! Setup Port PriorityGroup headroom value based on cable length and packet distribution. */
    cosq_thd_port_prigrp_hdrm_set_f cosq_thd_port_prigrp_hdrm_set;

} mbcm_ltsw_cosq_thd_drv_t;

/*!
 * \brief Set the COSQ_THD driver of the device.
 *
 * \param [in] unit Unit Number.
 * \param [in] drv Cosq_thd driver to set.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_cosq_thd_drv_set(
    int unit,
    mbcm_ltsw_cosq_thd_drv_t *drv);

/*!
 * \brief Initialize the cosq_thd module.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_cosq_thd_init(int unit);

/*!
 * \brief Detach the cosq_thd module.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_cosq_thd_detach(int unit);

/*!
 * \brief Check if a cosq_control_type property can be changed dynamically
 *
 * \param [in] unit Unit Number.
 * \param [in] type Type of operation.
 * \param [in] dynamic Returns if type can be changed dynamically.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_cosq_thd_dynamic_get(
    int unit,
    bcm_cosq_control_t type,
    bcm_cosq_dynamic_setting_type_t *dynamic);

/*!
 * \brief Reset the guarantee of priority group, uc queue, mc queue to the default.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_cosq_thd_port_guarantee_reset(
    int unit,
    bcm_port_t port);

/*!
 * \brief Set specified feature configuration
 *
 * \param [in] unit Unit Number.
 * \param [in] gport Gport Number.
 * \param [in] cosq COS queue.
 * \param [in] buffer buffer id.
 * \param [in] type Feature.
 * \param [in] arg Feature value.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_cosq_thd_control_set(
    int unit,
    bcm_gport_t gport,
    bcm_cos_queue_t cosq,
    bcm_cosq_buffer_id_t buffer,
    bcm_cosq_control_t type,
    int arg);

/*!
 * \brief Get specified feature configuration
 *
 * \param [in] unit Unit Number.
 * \param [in] gport Gport Number.
 * \param [in] cosq COS queue.
 * \param [in] buffer Buffer id.
 * \param [in] type Feature.
 * \param [out] arg Feature value.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_cosq_thd_control_get(
    int unit,
    bcm_gport_t gport,
    bcm_cos_queue_t cosq,
    bcm_cosq_buffer_id_t buffer,
    bcm_cosq_control_t type,
    int *arg);

/*!
 * \brief Port UC service pool id get.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] queue queue id.
 * \param [out] spid pool id.
 * \param [out] use_qgroup_min true/false.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_cosq_thd_port_uc_spid_get(
    int unit,
    bcm_port_t port,
    int queue,
    int *spid,
    int *use_qgroup_min);

/*!
 * \brief TM db shared limit get.
 *
 * \param [in] unit Unit Number.
 * \param [in] itm itm.
 * \param [in] spid ing service pool id.
 * \param [out] shared_limit shared limit value.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_cosq_thd_shared_limit_get(
    int unit,
    int itm,
    int spid,
    int *shared_limit);

/*!
 * \brief Set the profile for Input priortty to PG mapping for a port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] profile_id Profile index.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_cosq_thd_port_inppri_profile_set(
    int unit,
    bcm_port_t port,
    int profile_id);

/*!
 * \brief Get the profile for Input priortty to PG mapping for a port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [out] profile_id Profile index.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_cosq_thd_port_inppri_profile_get(
    int unit,
    bcm_port_t port,
    int *profile_id);

/*!
 * \brief Set the profile for PG to SPID/HPID/PFCPRI mapping for a port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] profile_id Profile index.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_cosq_thd_port_pg_profile_set(
    int unit,
    bcm_port_t port,
    int profile_id);

/*!
 * \brief Get the profile for PG to SPID/HPID/PFCPRI mapping for a port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [out] profile_id Profile index.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_cosq_thd_port_pg_profile_get(
    int unit,
    bcm_port_t port,
    int *profile_id);

/*!
 * \brief To Set enable or disable status of service pool for a given pool id.
 *
 * \param [in] unit Unit Number.
 * \param [in] id Service pool id.
 * \param [in] cosq_service_pool Enable/Disable given type service pool.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_cosq_thd_service_pool_set(
    int unit,
    bcm_service_pool_id_t id,
    bcm_cosq_service_pool_t cosq_service_pool);

/*!
 * \brief To get enable or disable status of service pool for a given pool id.
 *
 * \param [in] unit Unit Number.
 * \param [in] id Service pool id.
 * \param [out] cosq_service_pool Get enable or disable status.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_cosq_thd_service_pool_get(
    int unit,
    bcm_service_pool_id_t id,
    bcm_cosq_service_pool_t *cosq_service_pool);

/*!
 * \brief Enable or disable service pool override.
 *
 * \param [in] unit Unit Number.
 * \param [in] type Service pool override type.
 * \param [in] service_pool Service pool id.
 * \param [in] enable Enable or disable service pool override.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_cosq_thd_service_pool_override_set(
    int unit,
    bcm_cosq_service_pool_override_type_t type,
    bcm_service_pool_id_t service_pool,
    int enable);

/*!
 * \brief Enable or disable service pool override.
 *
 * \param [in] unit Unit Number.
 * \param [in] type Service pool override type.
 * \param [out] service_pool Service pool id.
 * \param [out] enable Enable or disable service pool override.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_cosq_thd_service_pool_override_get(
    int unit,
    bcm_cosq_service_pool_override_type_t type,
    bcm_service_pool_id_t *service_pool,
    int *enable);

/*!
 * \brief Set a profile for the various mappings.
 *
 * \param [in] unit Unit Number.
 * \param [in] profile_index profile index.
 * \param [in] type Mapping type.
 * \param [in] array_count Number of mappings in array.
 * \param [in] arg Value of input to mapping type.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_cosq_thd_priority_group_mapping_profile_set(
    int unit,
    int profile_index,
    bcm_cosq_priority_group_mapping_profile_type_t type,
    int array_count,
    int *arg);

/*!
 * \brief Get a profile for the various mappings.
 *
 * \param [in] unit Unit Number.
 * \param [in] profile_index profile index.
 * \param [in] type Mapping type.
 * \param [in] array_max Number of mappings allocated in array.
 * \param [out] arg Array of input to mapping type.
 * \param [out] array_count Number of mappings returned.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_cosq_thd_priority_group_mapping_profile_get(
    int unit,
    int profile_index,
    bcm_cosq_priority_group_mapping_profile_type_t type,
    int array_max,
    int *arg,
    int *array_count);

/*!
 * \brief Setup per port per priority group properties.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] priority_group_id priority group.
 * \param [in] type Port/priority group property.
 * \param [in] arg set value of property.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_cosq_thd_port_priority_group_property_set(
    int unit,
    bcm_port_t port,
    int priority_group_id,
    bcm_cosq_port_prigroup_control_t type,
    int arg);

/*!
 * \brief Setup per port per priority group properties.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] priority_group_id priority group.
 * \param [in] type Port/priority group property.
 * \param [out] arg set value of property.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_cosq_thd_port_priority_group_property_get(
    int unit,
    bcm_port_t port,
    int priority_group_id,
    bcm_cosq_port_prigroup_control_t type,
    int *arg);

/*!
 * \brief Get mutliple buffer ids associated with a specified port.
 *
 * \param [in] unit Unit Number.
 * \param [in] gport Gport Number.
 * \param [in] cosq Reserved field.
 * \param [in] direction Specify ingress or egress direction.
 * \param [in] array_max number of entries to be retrieved.
 * \param [out] buf_id_array Buffer id array.
 * \param [out] array_count Actural buffer id count in buf_id_array.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_cosq_thd_buffer_id_multi_get(
    int unit,
    bcm_gport_t gport,
    bcm_cos_queue_t cosq,
    bcm_cosq_dir_t direction,
    int array_max,
    bcm_cosq_buffer_id_t *buf_id_array,
    int *array_count);

/*!
 * \brief To enable/disable Rx of packets on the specified CPU cosq.
 *
 * \param [in] unit Unit Number.
 * \param [in] cosq CPU Cosq ID.
 * \param [in] enable Enable/Disable.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_cosq_thd_cpu_cosq_enable_set(
    int unit,
    bcm_cos_queue_t cosq,
    int enable);

/*!
 * \brief To get enable/disable status on Rx of packets on the specified CPU cosq.
 *
 * \param [in] unit Unit Number.
 * \param [in] cosq CPU Cosq ID.
 * \param [out] enable Enable/Disable.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_cosq_thd_cpu_cosq_enable_get(
    int unit,
    bcm_cos_queue_t cosq,
    int *enable);

/*!
 * \brief Convert BCM enum alpha value to LT enum value.
 *
 * \param [in] unit Unit Number.
 * \param [in] arg BCM Alpha value.
 * \param [out] alpha LT Alpha value.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_cosq_thd_alpha_bcm_to_lt_convert(
    int unit,
    int arg,
    const char **alpha);

/*!
 * \brief Convert LT enum alpha value to BCM enum value.
 *
 * \param [in] unit Unit Number.
 * \param [in] alpha LT Alpha value.
 * \param [out] arg BCM Alpha value.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_cosq_thd_alpha_lt_to_bcm_convert(
    int unit,
    const char *alpha,
    int *arg);

/*!
 * \brief Convert byte to cell.
 *
 * \param [in] unit Unit Number.
 * \param [in] bytes bytes.
 * \param [out] cells cells.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_cosq_thd_byte_to_cell(
    int unit,
    uint32_t bytes,
    int *cells);

/*!
 * \brief Convert cell to byte.
 *
 * \param [in] unit Unit Number.
 * \param [in] cells cells.
 * \param [out] bytes bytes.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_cosq_thd_cell_to_byte(
    int unit,
    uint32_t cells,
    int *bytes);

/*!
 * \brief Calculate and set Headroom Pool limit based on number of lossless classes and packet distribution.
 *
 * \param [in] unit Unit Number.
 * \param [in] hdrm_pool Headroom Pool number.
 * \param [in] num_lossless_class Max Number of lossless classes expected to use Headroom at a given time.
 * \param [in] arr_size Array size of packet distribution array.
 * \param [in] pkt_dist_array Packet distribution array.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_cosq_thd_hdrm_pool_limit_set(
    int unit,
    int hdrm_pool,
    int num_lossless_class,
    int arr_size,
    bcm_cosq_pkt_size_dist_t *pkt_dist_array);

/*!
 * \brief Setup Port PriorityGroup headroom value based on cable length and packet distribution.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port number.
 * \param [in] pri_bmp Internal Priority bitmap for which PG headroom needs to be modified.
 * \param [in] cable_len Cable length (in meters).
 * \param [in] arr_size Array size of packet distribution array.
 * \param [in] pkt_dist_array Packet distribution array.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_cosq_thd_port_prigrp_hdrm_set(
    int unit,
    bcm_port_t port,
    uint32_t pri_bmp,
    int cable_len,
    int arr_size,
    bcm_cosq_pkt_size_dist_t *pkt_dist_array);

#endif /* BCMINT_LTSW_MBCM_COSQ_THD_H */
