/*
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 *
 * This license is set out in https://raw.githubusercontent.com/Broadcom-Network-Switching-Software/OpenBCM/master/Legal/LICENSE file.
 * 
 * Copyright 2007-2020 Broadcom Inc. All rights reserved.
 */

#ifndef BCMINT_LTSW_MBCM_FLEXDIGEST_H
#define BCMINT_LTSW_MBCM_FLEXDIGEST_H

#include <bcm/flexdigest.h>

#include <bcm_int/ltsw/flexdigest_int.h>

#include <sal/sal_types.h>

/*!
 * \brief Initialize the flexdigest chip-based database.
 *
 * \param [in] unit Unit Number.
 * \param [in] warm The warmboot state.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flexdigest_db_init_f)(
    int unit,
    int warm);

/*!
 * \brief De-initialize the flexdigest chip-based database.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flexdigest_db_deinit_f)(int unit);

/*!
 * \brief Initialize the flexdigest module.
 *
 * \param [in] unit Unit Number.
 * \param [in] warm The warmboot state.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flexdigest_init_f)(
    int unit,
    int warm);

/*!
 * \brief De-initialize the flexdigest module.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flexdigest_deinit_f)(int unit);

/*!
 * \brief Get chip-specific sub-features for flexdigest functionalities.
 *
 * \param [in] unit Unit Number.
 * \param [in] functionality The flex digest functionality.
 * \param [out] features The flex digest functionality features.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flexdigest_feature_get_f)(
    int unit,
    uint32_t functionality,
    uint32_t *features);

/*!
 * \brief Get information of flex digest functionalities.
 *
 * \param [in] unit Unit Number.
 * \param [in] info The flex digest normalization information.
 * \param [out] value The flex digest normalization information value.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flexdigest_info_get_f)(
    int unit,
    bcmint_flexdigest_info_t info,
    int *value);

/*!
 * \brief validate the match criteria support or not.
 *
 * \param [in] unit Unit Number.
 * \param [in] match The match criteria.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flexdigest_validate_lkup_match_f)(
    int unit,
    bcm_flexdigest_match_t match);

/*!
 * \brief validate the match conflicting issue.
 *
 * \param [in] unit Unit Number.
 * \param [in] new_match The new match.
 * \param [in] old_match The old match.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flexdigest_validate_lkup_match_conflict_f)(
    int unit,
    bcm_flexdigest_match_t new_match,
    bcm_flexdigest_match_t old_match);

/*!
 * \brief validate the action configuration.
 *
 * \param [in] unit Unit Number.
 * \param [in] action The entry action.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flexdigest_validate_lkup_action_f)(
    int unit,
    bcm_flexdigest_action_t action);

/*!
 * \brief validate the action configuration.
 *
 * \param [in] unit Unit Number.
 * \param [in] action The entry action.
 * \param [in] param0 The entry action parameter 0.
 * \param [in] param1 The entry action parameter 1.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flexdigest_validate_lkup_action_params_f)(
    int unit,
    bcm_flexdigest_action_t action,
    uint16_t param0,
    uint16_t param1);

/*!
 * \brief validate the qualifier configuration.
 *
 * \param [in] unit Unit Number.
 * \param [in] qualifier The entry qualifier.
 * \param [in] data The entry qualifier data.
 * \param [in] mask The entry qualifier mask.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flexdigest_validate_lkup_qualifier_f)(
    int unit,
    bcm_flexdigest_qualify_t qualifier,
    uint16_t data,
    uint16_t mask);

/*!
 * \brief validate the qualifier set configuration.
 *
 * \param [in] unit Unit Number.
 * \param [in] qset The presel qualifier set.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flexdigest_validate_lkup_group_qset_f)(
    int unit,
    bcm_flexdigest_qset_t qset);

/*!
 * \brief Validate the flexdigest hashing profile controlling parameters.
 *
 * \param [in] unit Unit Number.
 * \param [in] hash_profile_id Hashing profile identifier.
 * \param [in] type The hashing profile control type.
 * \param [in] value The hashing profile control value.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flexdigest_validate_hash_profile_f)(
    int unit,
    int hash_profile_id,
    bcm_flexdigest_hash_profile_control_t type,
    int value);

/*!
 * \brief Insert a flex digest normalization seed profile to logical table.
 *
 * \param [in] unit Unit Number.
 * \param [in] seed_profile_id Normalization seed profile identifier.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flexdigest_norm_seed_profile_create_f)(
    int unit,
    int seed_profile_id);

/*!
 * \brief Delete a flex digest normalization seed profile from logical table.
 *
 * \param [in] unit Unit Number.
 * \param [in] seed_profile_id Normalization Seed profile identifier.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flexdigest_norm_seed_profile_destroy_f)(
    int unit,
    int seed_profile_id);

/*!
 * \brief Configure the flex digest normalization seed profile.
 *
 * \param [in] unit Unit Number.
 * \param [in] seed_profile_id Normalization Seed profile identifier.
 * \param [in] type The normalization seed profile control type.
 * \param [in] value The normalization seed profile control value.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flexdigest_norm_seed_profile_set_f)(
    int unit,
    int seed_profile_id,
    bcm_flexdigest_norm_seed_control_t type,
    int value);

/*!
 * \brief Get the flex digest normalization seed profile configuration.
 *
 * \param [in] unit Unit Number.
 * \param [in] seed_profile_id Normalization Seed profile identifier.
 * \param [in] type The normalization seed profile control type.
 * \param [out] value The normalization seed profile control value.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flexdigest_norm_seed_profile_get_f)(
    int unit,
    int seed_profile_id,
    bcm_flexdigest_norm_seed_control_t type,
    int *value);

/*!
 * \brief Check whether this flex digest normalization seed profile is configured or not.
 *
 * \param [in] unit Unit Number.
 * \param [in] seed_profile_id Normalization Seed profile identifier.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flexdigest_norm_seed_profile_configured_f)(
    int unit,
    int seed_profile_id);

/*!
 * \brief Insert a flex digest normalization profile to logical table.
 *
 * \param [in] unit Unit Number.
 * \param [in] norm_profile_id Normalization profile identifier.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flexdigest_norm_profile_create_f)(
    int unit,
    int norm_profile_id);

/*!
 * \brief Delete a flex digest normalization profile from logical table.
 *
 * \param [in] unit Unit Number.
 * \param [in] norm_profile_id Normalization profile identifier.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flexdigest_norm_profile_destroy_f)(
    int unit,
    int norm_profile_id);

/*!
 * \brief Configure the flex digest normalization profile.
 *
 * \param [in] unit Unit Number.
 * \param [in] norm_profile_id Normalization profile identifier.
 * \param [in] type The normalization profile control type.
 * \param [in] value The normalization profile control value.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flexdigest_norm_profile_set_f)(
    int unit,
    int norm_profile_id,
    bcm_flexdigest_norm_profile_control_t type,
    int value);

/*!
 * \brief Get the flex digest normalization profile configuration.
 *
 * \param [in] unit Unit Number.
 * \param [in] norm_profile_id Normalization profile identifier.
 * \param [in] type The normalization profile control type.
 * \param [out] value The normalization profile control value.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flexdigest_norm_profile_get_f)(
    int unit,
    int norm_profile_id,
    bcm_flexdigest_norm_profile_control_t type,
    int *value);

/*!
 * \brief Check whether the flex digest normalization profile is configured or not.
 *
 * \param [in] unit Unit Number.
 * \param [in] norm_profile_id Normalization profile identifier.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flexdigest_norm_profile_configured_f)(
    int unit,
    int norm_profile_id);

/*!
 * \brief Allocate a entry handle.
 *
 * \param [in] unit Unit Number.
 * \param [inout] einfo The entry information.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flexdigest_lkup_entry_allocate_f)(
    int unit,
    bcmint_flexdigest_entry_info_t *einfo);

/*!
 * \brief Free a entry handle.
 *
 * \param [in] unit Unit Number.
 * \param [inout] einfo The entry information.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flexdigest_lkup_entry_free_f)(
    int unit,
    bcmint_flexdigest_entry_info_t *einfo);

/*!
 * \brief Set the entry priority.
 *
 * \param [in] unit Unit Number.
 * \param [inout] einfo The entry information.
 * \param [in] prio The entry priority.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flexdigest_lkup_entry_pri_set_f)(
    int unit,
    bcmint_flexdigest_entry_info_t *einfo,
    int prio);

/*!
 * \brief Add a match to an entry.
 *
 * \param [in] unit Unit Number.
 * \param [inout] einfo The entry information.
 * \param [in] match The entry match criteria.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flexdigest_lkup_entry_match_add_f)(
    int unit,
    bcmint_flexdigest_entry_info_t *einfo,
    bcm_flexdigest_match_t match);

/*!
 * \brief Add a qualifier to an entry.
 *
 * \param [in] unit Unit Number.
 * \param [inout] einfo The entry information.
 * \param [in] qualifier The entry qualifier.
 * \param [in] data The entry qualifier data.
 * \param [in] mask The entry qualifier mask.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flexdigest_lkup_entry_qualifier_add_f)(
    int unit,
    bcmint_flexdigest_entry_info_t *einfo,
    bcm_flexdigest_qualify_t qualifier,
    uint16_t data,
    uint16_t mask);

/*!
 * \brief Add an action to an entry.
 *
 * \param [in] unit Unit Number.
 * \param [inout] einfo The entry information.
 * \param [in] action The entry match criteria.
 * \param [in] param0 The entry action param0.
 * \param [in] param1 The entry action param1.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flexdigest_lkup_entry_action_add_f)(
    int unit,
    bcmint_flexdigest_entry_info_t *einfo,
    bcm_flexdigest_action_t action,
    uint16_t param0,
    uint16_t param1);

/*!
 * \brief Restore lookup mask profile from entry actions.
 *
 * \param [in] unit Unit Number.
 * \param [inout] einfo The entry information.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flexdigest_lkup_entry_mask_profile_restore_f)(
    int unit,
    bcmint_flexdigest_entry_info_t *einfo);

/*!
 * \brief Insert an entry.
 *
 * \param [in] unit Unit Number.
 * \param [inout] einfo The entry information.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flexdigest_lkup_entry_insert_f)(
    int unit,
    bcmint_flexdigest_entry_info_t *einfo);

/*!
 * \brief Update an entry.
 *
 * \param [in] unit Unit Number.
 * \param [inout] einfo The entry information.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flexdigest_lkup_entry_update_f)(
    int unit,
    bcmint_flexdigest_entry_info_t *einfo);

/*!
 * \brief Lookup an entry.
 *
 * \param [in] unit Unit Number.
 * \param [inout] einfo The entry information.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flexdigest_lkup_entry_lookup_f)(
    int unit,
    bcmint_flexdigest_entry_info_t *einfo);

/*!
 * \brief Insert an entry.
 *
 * \param [in] unit Unit Number.
 * \param [inout] einfo The entry information.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flexdigest_lkup_entry_delete_f)(
    int unit,
    bcmint_flexdigest_entry_info_t *einfo);

/*!
 * \brief Unset an entry.
 *
 * \param [in] unit Unit Number.
 * \param [inout] einfo The entry information.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flexdigest_lkup_entry_unset_f)(
    int unit,
    bcmint_flexdigest_entry_info_t *einfo);

/*!
 * \brief Update the lookup presel logical table.
 *
 * \param [in] unit Unit Number.
 * \param [in] qset The Presel Qualifier Set.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flexdigest_lkup_group_update_presel_f)(
    int unit,
    bcm_flexdigest_qset_t qset);

/*!
 * \brief Insert a flex digest hashing profile to logical table.
 *
 * \param [in] unit Unit Number.
 * \param [in] hash_profile_id Hashing profile identifier.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flexdigest_hash_profile_create_f)(
    int unit,
    int hash_profile_id);

/*!
 * \brief Delete a flex digest hashing profile from logical table.
 *
 * \param [in] unit Unit Number.
 * \param [in] hash_profile_id Hashing profile identifier.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flexdigest_hash_profile_destroy_f)(
    int unit,
    int hash_profile_id);

/*!
 * \brief Configure the flex digest hashing profile.
 *
 * \param [in] unit Unit Number.
 * \param [in] hash_profile_id Hashing profile identifier.
 * \param [in] type The hashing profile control type.
 * \param [in] value The hashing profile control value.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flexdigest_hash_profile_set_f)(
    int unit,
    int hash_profile_id,
    bcm_flexdigest_hash_profile_control_t type,
    int value);

/*!
 * \brief Get the flex digest hashing profile configuration.
 *
 * \param [in] unit Unit Number.
 * \param [in] hash_profile_id Hashing profile identifier.
 * \param [in] type The hashing profile control type.
 * \param [out] value The hashing profile control value.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flexdigest_hash_profile_get_f)(
    int unit,
    int hash_profile_id,
    bcm_flexdigest_hash_profile_control_t type,
    int *value);

/*!
 * \brief Check whether the flex digest hashing profile is configured or not.
 *
 * \param [in] unit Unit Number.
 * \param [in] hash_profile_id Hashing profile identifier.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flexdigest_hash_profile_configured_f)(
    int unit,
    int hash_profile_id);

/*!
 * \brief Configure salt for a specific hashing bin set.
 *
 * \param [in] unit Unit Number.
 * \param [in] bin_set Hashing bin set.
 * \param [in] array_size The number of Hashing bins in a bin set.
 * \param [in] salt_array The Hashing salt array.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flexdigest_hash_salt_set_f)(
    int unit,
    bcm_flexdigest_hash_bin_set_t bin_set,
    int array_size,
    uint16_t *salt_array);

/*!
 * \brief Configure salt for a specific hashing bin set.
 *
 * \param [in] unit Unit Number.
 * \param [in] bin_set Hashing bin set.
 * \param [in] array_size The maximum number of Hashing bins array.
 * \param [out] salt_array The Hashing salt array.
 * \param [out] count The number of Hashing bins in a bin set.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flexdigest_hash_salt_get_f)(
    int unit,
    bcm_flexdigest_hash_bin_set_t bin_set,
    int array_size,
    uint16_t *salt_array,
    int *count);

/*!
 * \brief Set a device-wide flex digest control value.
 *
 * \param [in] unit Unit Number.
 * \param [in] type The flex digest control type.
 * \param [in] arg Argument whose meaning depends on type.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flexdigest_control_set_f)(
    int unit,
    bcm_flexdigest_control_t type,
    int arg);

/*!
 * \brief Get a device-wide flex digest control value.
 *
 * \param [in] unit Unit Number.
 * \param [in] type The flex digest control type.
 * \param [out] arg Argument whose meaning depends on type.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
typedef int (*flexdigest_control_get_f)(
    int unit,
    bcm_flexdigest_control_t type,
    int *arg);

/*!
 * \brief Flexdigest driver structure.
 */
typedef struct mbcm_ltsw_flexdigest_drv_s {

    /*! Initialize the flexdigest chip-based database. */
    flexdigest_db_init_f flexdigest_db_init;

    /*! De-initialize the flexdigest chip-based database. */
    flexdigest_db_deinit_f flexdigest_db_deinit;

    /*! Initialize the flexdigest module. */
    flexdigest_init_f flexdigest_init;

    /*! De-initialize the flexdigest module. */
    flexdigest_deinit_f flexdigest_deinit;

    /*! Get chip-specific sub-features for flexdigest functionalities. */
    flexdigest_feature_get_f flexdigest_feature_get;

    /*! Get information of flex digest functionalities. */
    flexdigest_info_get_f flexdigest_info_get;

    /*! validate the match criteria support or not. */
    flexdigest_validate_lkup_match_f flexdigest_validate_lkup_match;

    /*! validate the match conflicting issue. */
    flexdigest_validate_lkup_match_conflict_f flexdigest_validate_lkup_match_conflict;

    /*! validate the action configuration. */
    flexdigest_validate_lkup_action_f flexdigest_validate_lkup_action;

    /*! validate the action configuration. */
    flexdigest_validate_lkup_action_params_f flexdigest_validate_lkup_action_params;

    /*! validate the qualifier configuration. */
    flexdigest_validate_lkup_qualifier_f flexdigest_validate_lkup_qualifier;

    /*! validate the qualifier set configuration. */
    flexdigest_validate_lkup_group_qset_f flexdigest_validate_lkup_group_qset;

    /*! Validate the flexdigest hashing profile controlling parameters. */
    flexdigest_validate_hash_profile_f flexdigest_validate_hash_profile;

    /*! Insert a flex digest normalization seed profile to logical table. */
    flexdigest_norm_seed_profile_create_f flexdigest_norm_seed_profile_create;

    /*! Delete a flex digest normalization seed profile from logical table. */
    flexdigest_norm_seed_profile_destroy_f flexdigest_norm_seed_profile_destroy;

    /*! Configure the flex digest normalization seed profile. */
    flexdigest_norm_seed_profile_set_f flexdigest_norm_seed_profile_set;

    /*! Get the flex digest normalization seed profile configuration. */
    flexdigest_norm_seed_profile_get_f flexdigest_norm_seed_profile_get;

    /*! Check whether this flex digest normalization seed profile is configured or not. */
    flexdigest_norm_seed_profile_configured_f flexdigest_norm_seed_profile_configured;

    /*! Insert a flex digest normalization profile to logical table. */
    flexdigest_norm_profile_create_f flexdigest_norm_profile_create;

    /*! Delete a flex digest normalization profile from logical table. */
    flexdigest_norm_profile_destroy_f flexdigest_norm_profile_destroy;

    /*! Configure the flex digest normalization profile. */
    flexdigest_norm_profile_set_f flexdigest_norm_profile_set;

    /*! Get the flex digest normalization profile configuration. */
    flexdigest_norm_profile_get_f flexdigest_norm_profile_get;

    /*! Check whether the flex digest normalization profile is configured or not. */
    flexdigest_norm_profile_configured_f flexdigest_norm_profile_configured;

    /*! Allocate a entry handle. */
    flexdigest_lkup_entry_allocate_f flexdigest_lkup_entry_allocate;

    /*! Free a entry handle. */
    flexdigest_lkup_entry_free_f flexdigest_lkup_entry_free;

    /*! Set the entry priority. */
    flexdigest_lkup_entry_pri_set_f flexdigest_lkup_entry_pri_set;

    /*! Add a match to an entry. */
    flexdigest_lkup_entry_match_add_f flexdigest_lkup_entry_match_add;

    /*! Add a qualifier to an entry. */
    flexdigest_lkup_entry_qualifier_add_f flexdigest_lkup_entry_qualifier_add;

    /*! Add an action to an entry. */
    flexdigest_lkup_entry_action_add_f flexdigest_lkup_entry_action_add;

    /*! Restore lookup mask profile from entry actions. */
    flexdigest_lkup_entry_mask_profile_restore_f flexdigest_lkup_entry_mask_profile_restore;

    /*! Insert an entry. */
    flexdigest_lkup_entry_insert_f flexdigest_lkup_entry_insert;

    /*! Update an entry. */
    flexdigest_lkup_entry_update_f flexdigest_lkup_entry_update;

    /*! Lookup an entry. */
    flexdigest_lkup_entry_lookup_f flexdigest_lkup_entry_lookup;

    /*! Insert an entry. */
    flexdigest_lkup_entry_delete_f flexdigest_lkup_entry_delete;

    /*! Unset an entry. */
    flexdigest_lkup_entry_unset_f flexdigest_lkup_entry_unset;

    /*! Update the lookup presel logical table. */
    flexdigest_lkup_group_update_presel_f flexdigest_lkup_group_update_presel;

    /*! Insert a flex digest hashing profile to logical table. */
    flexdigest_hash_profile_create_f flexdigest_hash_profile_create;

    /*! Delete a flex digest hashing profile from logical table. */
    flexdigest_hash_profile_destroy_f flexdigest_hash_profile_destroy;

    /*! Configure the flex digest hashing profile. */
    flexdigest_hash_profile_set_f flexdigest_hash_profile_set;

    /*! Get the flex digest hashing profile configuration. */
    flexdigest_hash_profile_get_f flexdigest_hash_profile_get;

    /*! Check whether the flex digest hashing profile is configured or not. */
    flexdigest_hash_profile_configured_f flexdigest_hash_profile_configured;

    /*! Configure salt for a specific hashing bin set. */
    flexdigest_hash_salt_set_f flexdigest_hash_salt_set;

    /*! Configure salt for a specific hashing bin set. */
    flexdigest_hash_salt_get_f flexdigest_hash_salt_get;

    /*! Set a device-wide flex digest control value. */
    flexdigest_control_set_f flexdigest_control_set;

    /*! Get a device-wide flex digest control value. */
    flexdigest_control_get_f flexdigest_control_get;

} mbcm_ltsw_flexdigest_drv_t;

/*!
 * \brief Set the FLEXDIGEST driver of the device.
 *
 * \param [in] unit Unit Number.
 * \param [in] drv Flexdigest driver to set.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flexdigest_drv_set(
    int unit,
    mbcm_ltsw_flexdigest_drv_t *drv);

/*!
 * \brief Initialize the flexdigest chip-based database.
 *
 * \param [in] unit Unit Number.
 * \param [in] warm The warmboot state.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flexdigest_db_init(
    int unit,
    int warm);

/*!
 * \brief De-initialize the flexdigest chip-based database.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flexdigest_db_deinit(int unit);

/*!
 * \brief Initialize the flexdigest module.
 *
 * \param [in] unit Unit Number.
 * \param [in] warm The warmboot state.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flexdigest_init(
    int unit,
    int warm);

/*!
 * \brief De-initialize the flexdigest module.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flexdigest_deinit(int unit);

/*!
 * \brief Get chip-specific sub-features for flexdigest functionalities.
 *
 * \param [in] unit Unit Number.
 * \param [in] functionality The flex digest functionality.
 * \param [out] features The flex digest functionality features.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flexdigest_feature_get(
    int unit,
    uint32_t functionality,
    uint32_t *features);

/*!
 * \brief Get information of flex digest functionalities.
 *
 * \param [in] unit Unit Number.
 * \param [in] info The flex digest normalization information.
 * \param [out] value The flex digest normalization information value.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flexdigest_info_get(
    int unit,
    bcmint_flexdigest_info_t info,
    int *value);

/*!
 * \brief validate the match criteria support or not.
 *
 * \param [in] unit Unit Number.
 * \param [in] match The match criteria.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flexdigest_validate_lkup_match(
    int unit,
    bcm_flexdigest_match_t match);

/*!
 * \brief validate the match conflicting issue.
 *
 * \param [in] unit Unit Number.
 * \param [in] new_match The new match.
 * \param [in] old_match The old match.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flexdigest_validate_lkup_match_conflict(
    int unit,
    bcm_flexdigest_match_t new_match,
    bcm_flexdigest_match_t old_match);

/*!
 * \brief validate the action configuration.
 *
 * \param [in] unit Unit Number.
 * \param [in] action The entry action.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flexdigest_validate_lkup_action(
    int unit,
    bcm_flexdigest_action_t action);

/*!
 * \brief validate the action configuration.
 *
 * \param [in] unit Unit Number.
 * \param [in] action The entry action.
 * \param [in] param0 The entry action parameter 0.
 * \param [in] param1 The entry action parameter 1.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flexdigest_validate_lkup_action_params(
    int unit,
    bcm_flexdigest_action_t action,
    uint16_t param0,
    uint16_t param1);

/*!
 * \brief validate the qualifier configuration.
 *
 * \param [in] unit Unit Number.
 * \param [in] qualifier The entry qualifier.
 * \param [in] data The entry qualifier data.
 * \param [in] mask The entry qualifier mask.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flexdigest_validate_lkup_qualifier(
    int unit,
    bcm_flexdigest_qualify_t qualifier,
    uint16_t data,
    uint16_t mask);

/*!
 * \brief validate the qualifier set configuration.
 *
 * \param [in] unit Unit Number.
 * \param [in] qset The presel qualifier set.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flexdigest_validate_lkup_group_qset(
    int unit,
    bcm_flexdigest_qset_t qset);

/*!
 * \brief Validate the flexdigest hashing profile controlling parameters.
 *
 * \param [in] unit Unit Number.
 * \param [in] hash_profile_id Hashing profile identifier.
 * \param [in] type The hashing profile control type.
 * \param [in] value The hashing profile control value.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flexdigest_validate_hash_profile(
    int unit,
    int hash_profile_id,
    bcm_flexdigest_hash_profile_control_t type,
    int value);

/*!
 * \brief Insert a flex digest normalization seed profile to logical table.
 *
 * \param [in] unit Unit Number.
 * \param [in] seed_profile_id Normalization seed profile identifier.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flexdigest_norm_seed_profile_create(
    int unit,
    int seed_profile_id);

/*!
 * \brief Delete a flex digest normalization seed profile from logical table.
 *
 * \param [in] unit Unit Number.
 * \param [in] seed_profile_id Normalization Seed profile identifier.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flexdigest_norm_seed_profile_destroy(
    int unit,
    int seed_profile_id);

/*!
 * \brief Configure the flex digest normalization seed profile.
 *
 * \param [in] unit Unit Number.
 * \param [in] seed_profile_id Normalization Seed profile identifier.
 * \param [in] type The normalization seed profile control type.
 * \param [in] value The normalization seed profile control value.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flexdigest_norm_seed_profile_set(
    int unit,
    int seed_profile_id,
    bcm_flexdigest_norm_seed_control_t type,
    int value);

/*!
 * \brief Get the flex digest normalization seed profile configuration.
 *
 * \param [in] unit Unit Number.
 * \param [in] seed_profile_id Normalization Seed profile identifier.
 * \param [in] type The normalization seed profile control type.
 * \param [out] value The normalization seed profile control value.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flexdigest_norm_seed_profile_get(
    int unit,
    int seed_profile_id,
    bcm_flexdigest_norm_seed_control_t type,
    int *value);

/*!
 * \brief Check whether this flex digest normalization seed profile is configured or not.
 *
 * \param [in] unit Unit Number.
 * \param [in] seed_profile_id Normalization Seed profile identifier.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flexdigest_norm_seed_profile_configured(
    int unit,
    int seed_profile_id);

/*!
 * \brief Insert a flex digest normalization profile to logical table.
 *
 * \param [in] unit Unit Number.
 * \param [in] norm_profile_id Normalization profile identifier.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flexdigest_norm_profile_create(
    int unit,
    int norm_profile_id);

/*!
 * \brief Delete a flex digest normalization profile from logical table.
 *
 * \param [in] unit Unit Number.
 * \param [in] norm_profile_id Normalization profile identifier.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flexdigest_norm_profile_destroy(
    int unit,
    int norm_profile_id);

/*!
 * \brief Configure the flex digest normalization profile.
 *
 * \param [in] unit Unit Number.
 * \param [in] norm_profile_id Normalization profile identifier.
 * \param [in] type The normalization profile control type.
 * \param [in] value The normalization profile control value.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flexdigest_norm_profile_set(
    int unit,
    int norm_profile_id,
    bcm_flexdigest_norm_profile_control_t type,
    int value);

/*!
 * \brief Get the flex digest normalization profile configuration.
 *
 * \param [in] unit Unit Number.
 * \param [in] norm_profile_id Normalization profile identifier.
 * \param [in] type The normalization profile control type.
 * \param [out] value The normalization profile control value.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flexdigest_norm_profile_get(
    int unit,
    int norm_profile_id,
    bcm_flexdigest_norm_profile_control_t type,
    int *value);

/*!
 * \brief Check whether the flex digest normalization profile is configured or not.
 *
 * \param [in] unit Unit Number.
 * \param [in] norm_profile_id Normalization profile identifier.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flexdigest_norm_profile_configured(
    int unit,
    int norm_profile_id);

/*!
 * \brief Allocate a entry handle.
 *
 * \param [in] unit Unit Number.
 * \param [inout] einfo The entry information.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flexdigest_lkup_entry_allocate(
    int unit,
    bcmint_flexdigest_entry_info_t *einfo);

/*!
 * \brief Free a entry handle.
 *
 * \param [in] unit Unit Number.
 * \param [inout] einfo The entry information.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flexdigest_lkup_entry_free(
    int unit,
    bcmint_flexdigest_entry_info_t *einfo);

/*!
 * \brief Set the entry priority.
 *
 * \param [in] unit Unit Number.
 * \param [inout] einfo The entry information.
 * \param [in] prio The entry priority.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flexdigest_lkup_entry_pri_set(
    int unit,
    bcmint_flexdigest_entry_info_t *einfo,
    int prio);

/*!
 * \brief Add a match to an entry.
 *
 * \param [in] unit Unit Number.
 * \param [inout] einfo The entry information.
 * \param [in] match The entry match criteria.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flexdigest_lkup_entry_match_add(
    int unit,
    bcmint_flexdigest_entry_info_t *einfo,
    bcm_flexdigest_match_t match);

/*!
 * \brief Add a qualifier to an entry.
 *
 * \param [in] unit Unit Number.
 * \param [inout] einfo The entry information.
 * \param [in] qualifier The entry qualifier.
 * \param [in] data The entry qualifier data.
 * \param [in] mask The entry qualifier mask.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flexdigest_lkup_entry_qualifier_add(
    int unit,
    bcmint_flexdigest_entry_info_t *einfo,
    bcm_flexdigest_qualify_t qualifier,
    uint16_t data,
    uint16_t mask);

/*!
 * \brief Add an action to an entry.
 *
 * \param [in] unit Unit Number.
 * \param [inout] einfo The entry information.
 * \param [in] action The entry match criteria.
 * \param [in] param0 The entry action param0.
 * \param [in] param1 The entry action param1.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flexdigest_lkup_entry_action_add(
    int unit,
    bcmint_flexdigest_entry_info_t *einfo,
    bcm_flexdigest_action_t action,
    uint16_t param0,
    uint16_t param1);

/*!
 * \brief Restore lookup mask profile from entry actions.
 *
 * \param [in] unit Unit Number.
 * \param [inout] einfo The entry information.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flexdigest_lkup_entry_mask_profile_restore(
    int unit,
    bcmint_flexdigest_entry_info_t *einfo);

/*!
 * \brief Insert an entry.
 *
 * \param [in] unit Unit Number.
 * \param [inout] einfo The entry information.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flexdigest_lkup_entry_insert(
    int unit,
    bcmint_flexdigest_entry_info_t *einfo);

/*!
 * \brief Update an entry.
 *
 * \param [in] unit Unit Number.
 * \param [inout] einfo The entry information.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flexdigest_lkup_entry_update(
    int unit,
    bcmint_flexdigest_entry_info_t *einfo);

/*!
 * \brief Lookup an entry.
 *
 * \param [in] unit Unit Number.
 * \param [inout] einfo The entry information.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flexdigest_lkup_entry_lookup(
    int unit,
    bcmint_flexdigest_entry_info_t *einfo);

/*!
 * \brief Insert an entry.
 *
 * \param [in] unit Unit Number.
 * \param [inout] einfo The entry information.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flexdigest_lkup_entry_delete(
    int unit,
    bcmint_flexdigest_entry_info_t *einfo);

/*!
 * \brief Unset an entry.
 *
 * \param [in] unit Unit Number.
 * \param [inout] einfo The entry information.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flexdigest_lkup_entry_unset(
    int unit,
    bcmint_flexdigest_entry_info_t *einfo);

/*!
 * \brief Update the lookup presel logical table.
 *
 * \param [in] unit Unit Number.
 * \param [in] qset The Presel Qualifier Set.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flexdigest_lkup_group_update_presel(
    int unit,
    bcm_flexdigest_qset_t qset);

/*!
 * \brief Insert a flex digest hashing profile to logical table.
 *
 * \param [in] unit Unit Number.
 * \param [in] hash_profile_id Hashing profile identifier.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flexdigest_hash_profile_create(
    int unit,
    int hash_profile_id);

/*!
 * \brief Delete a flex digest hashing profile from logical table.
 *
 * \param [in] unit Unit Number.
 * \param [in] hash_profile_id Hashing profile identifier.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flexdigest_hash_profile_destroy(
    int unit,
    int hash_profile_id);

/*!
 * \brief Configure the flex digest hashing profile.
 *
 * \param [in] unit Unit Number.
 * \param [in] hash_profile_id Hashing profile identifier.
 * \param [in] type The hashing profile control type.
 * \param [in] value The hashing profile control value.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flexdigest_hash_profile_set(
    int unit,
    int hash_profile_id,
    bcm_flexdigest_hash_profile_control_t type,
    int value);

/*!
 * \brief Get the flex digest hashing profile configuration.
 *
 * \param [in] unit Unit Number.
 * \param [in] hash_profile_id Hashing profile identifier.
 * \param [in] type The hashing profile control type.
 * \param [out] value The hashing profile control value.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flexdigest_hash_profile_get(
    int unit,
    int hash_profile_id,
    bcm_flexdigest_hash_profile_control_t type,
    int *value);

/*!
 * \brief Check whether the flex digest hashing profile is configured or not.
 *
 * \param [in] unit Unit Number.
 * \param [in] hash_profile_id Hashing profile identifier.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flexdigest_hash_profile_configured(
    int unit,
    int hash_profile_id);

/*!
 * \brief Configure salt for a specific hashing bin set.
 *
 * \param [in] unit Unit Number.
 * \param [in] bin_set Hashing bin set.
 * \param [in] array_size The number of Hashing bins in a bin set.
 * \param [in] salt_array The Hashing salt array.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flexdigest_hash_salt_set(
    int unit,
    bcm_flexdigest_hash_bin_set_t bin_set,
    int array_size,
    uint16_t *salt_array);

/*!
 * \brief Configure salt for a specific hashing bin set.
 *
 * \param [in] unit Unit Number.
 * \param [in] bin_set Hashing bin set.
 * \param [in] array_size The maximum number of Hashing bins array.
 * \param [out] salt_array The Hashing salt array.
 * \param [out] count The number of Hashing bins in a bin set.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flexdigest_hash_salt_get(
    int unit,
    bcm_flexdigest_hash_bin_set_t bin_set,
    int array_size,
    uint16_t *salt_array,
    int *count);

/*!
 * \brief Set a device-wide flex digest control value.
 *
 * \param [in] unit Unit Number.
 * \param [in] type The flex digest control type.
 * \param [in] arg Argument whose meaning depends on type.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flexdigest_control_set(
    int unit,
    bcm_flexdigest_control_t type,
    int arg);

/*!
 * \brief Get a device-wide flex digest control value.
 *
 * \param [in] unit Unit Number.
 * \param [in] type The flex digest control type.
 * \param [out] arg Argument whose meaning depends on type.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
mbcm_ltsw_flexdigest_control_get(
    int unit,
    bcm_flexdigest_control_t type,
    int *arg);

#endif /* BCMINT_LTSW_MBCM_FLEXDIGEST_H */
