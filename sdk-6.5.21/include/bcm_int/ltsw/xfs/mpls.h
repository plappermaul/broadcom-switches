/*
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 *
 * This license is set out in https://raw.githubusercontent.com/Broadcom-Network-Switching-Software/OpenBCM/master/Legal/LICENSE file.
 * 
 * Copyright 2007-2020 Broadcom Inc. All rights reserved.
 */

#ifndef BCMINT_LTSW_XFS_MPLS_H
#define BCMINT_LTSW_XFS_MPLS_H

#include <bcm/mpls.h>
#include <bcm/types.h>

#include <bcm_int/ltsw/mpls.h>

#include <sal/sal_types.h>
#include <bcmltd/bcmltd_lt_types.h>

/*!
 * \brief Dump device-spefic SW MPLS info.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_mpls_sw_dump(int unit);

/*!
 * \brief Initialize device-spefic MPLS info.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_mpls_init(int unit);

/*!
 * \brief Deinitialize device-spefic MPLS info.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_mpls_detach(int unit);

/*!
 * \brief Add an MPLS tunnel terminator.
 *
 * \param [in] unit Unit Number.
 * \param [in/out] info MPLS tunnel terminator info.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_mpls_tnl_switch_add(
    int unit,
    bcm_mpls_tunnel_switch_t *info);

/*!
 * \brief Delete an MPLS tunnel terminator.
 *
 * \param [in] unit Unit Number.
 * \param [in] info MPLS tunnel terminator info.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_mpls_tnl_switch_delete(
    int unit,
    bcm_mpls_tunnel_switch_t *info);

/*!
 * \brief Get an MPLS tunnel terminator.
 *
 * \param [in] unit Unit Number.
 * \param [in/out] info MPLS tunnel terminator info.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_mpls_tnl_switch_get(
    int unit,
    bcm_mpls_tunnel_switch_t *info);

/*!
 * \brief Traverse valid tunnel terminators and call the callback.
 *
 * \param [in] unit Unit Number.
 * \param [in] cb User callback function, called once per tunnel terminator.
 * \param [in] user_data Cookie.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_mpls_tnl_switch_traverse(
    int unit,
    bcm_mpls_tunnel_switch_traverse_cb cb,
    void *user_data);

/*!
 * \brief Delete all MPLS tunnel terminators.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_mpls_tnl_switch_delete_all(int unit);

/*!
 * \brief Add the MPLS tunnel initiator.
 *
 * \param [in] unit Unit Number.
 * \param [in] options Opertation options.
 * \param [in/out] tunnel_encap MPLS tunnel initiator info.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_mpls_tnl_encap_create(
    int unit,
    uint32_t options,
    bcm_mpls_tunnel_encap_t *tunnel_encap);

/*!
 * \brief Get the MPLS tunnel initiator.
 *
 * \param [in] unit Unit Number.
 * \param [in/out] tunnel_encap MPLS tunnel initiator info.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_mpls_tnl_encap_get(
    int unit,
    bcm_mpls_tunnel_encap_t *tunnel_encap);

/*!
 * \brief Destroy the MPLS tunnel initiator.
 *
 * \param [in] unit Unit Number.
 * \param [in] tunnel_id MPLS tunnel initiator info.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_mpls_tnl_encap_destroy(
    int unit,
    bcm_gport_t tunnel_id);

/*!
 * \brief Destroy all MPLS tunnel initiators.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_mpls_tnl_encap_destroy_all(int unit);

/*!
 * \brief Configure the MPLS VFI.
 *
 * \param [in] unit Unit Number.
 * \param [in] opcode Configure operation code.
 * \param [in] vfi_idx VFI index.
 * \param [in] info VPN configuration info.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_mpls_vfi_op(
    int unit,
    bcmlt_opcode_t opcode,
    int vfi_idx,
    bcm_mpls_vpn_config_t *info);

/*!
 * \brief Get VPWS info.
 *
 * \param [in] unit Unit Number.
 * \param [in/out] idx_min VPWS index min.
 * \param [in/out] idx_max VPWS index max.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_mpls_vpws_info_get(
    int unit,
    int *idx_min,
    int *idx_max);

/*!
 * \brief Add the MPLS port.
 *
 * \param [in] unit Unit Number.
 * \param [in] vpn VPN ID.
 * \param [in/out] mpls_port mpls port information.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_mpls_port_add(
    int unit,
    bcm_vpn_t vpn,
    bcm_mpls_port_t *mpls_port);

/*!
 * \brief Get the MPLS port.
 *
 * \param [in] unit Unit Number.
 * \param [in] vpn VPN ID.
 * \param [in] mpls_port_id mpls port ID.
 * \param [in/out] mpls_port mpls port.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_mpls_port_get(
    int unit,
    bcm_vpn_t vpn,
    bcm_gport_t mpls_port_id,
    bcm_mpls_port_t *mpls_port);

/*!
 * \brief Get all the MPLS ports in the vpn.
 *
 * \param [in] unit Unit Number.
 * \param [in] vpn VPN ID.
 * \param [in] port_max Maximum number of ports in array.
 * \param [out] port_array Array of mpls ports.
 * \param [out] port_count Number of ports returned in array.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_mpls_vpls_port_get_all(
    int unit,
    bcm_vpn_t vpn,
    int port_max,
    bcm_mpls_port_t *port_array,
    int *port_count);

/*!
 * \brief Delete the MPLS port.
 *
 * \param [in] unit Unit Number.
 * \param [in] vpn VPN ID.
 * \param [in] mpls_port_id mpls port ID.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_mpls_port_delete(
    int unit,
    bcm_vpn_t vpn,
    bcm_gport_t mpls_port_id);

/*!
 * \brief Delete all the MPLS ports in the specified VPLS VPN.
 *
 * \param [in] unit Unit Number.
 * \param [in] vpn VPN ID.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_mpls_vpls_port_delete_by_vpn(
    int unit,
    bcm_vpn_t vpn);

/*!
 * \brief Delete all vpls ports in the unit.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_mpls_vpls_port_delete_all(int unit);

/*!
 * \brief Attach the source port to the destination port.
 *
 * \param [in] unit Unit Number.
 * \param [in] src_port_id Source port ID.
 * \param [in] dst_port_id Destination port ID.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_mpls_port_attach(
    int unit,
    bcm_gport_t src_port_id,
    bcm_gport_t dst_port_id);

/*!
 * \brief Detach the mpls port ID.
 *
 * \param [in] unit Unit Number.
 * \param [in] mpls_port_id mpls port ID.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_mpls_port_detach(
    int unit,
    bcm_gport_t mpls_port_id);

/*!
 * \brief Validate the mpls port ID.
 *
 * \param [in] unit Unit Number.
 * \param [in] mpls_port_id mpls port ID.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_mpls_port_validate(
    int unit,
    bcm_gport_t mpls_port_id);

/*!
 * \brief Get the vlan list which contain MPLS ports.
 *
 * \param [in] unit Unit Number.
 * \param [out] vlan_cnt Vlan count.
 * \param [out] vlan_list Vlan list.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_mpls_vlan_list_get(
    int unit,
    int *vlan_cnt,
    int *vlan_list);

/*!
 * \brief Add identifier entry of special label.
 *
 * \param [in] unit Unit Number.
 * \param [in] label_info Speical label info.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_mpls_special_label_identifier_add(
    int unit,
    bcm_mpls_special_label_t label_info);

/*!
 * \brief Get identifier entry of special label.
 *
 * \param [in] unit Unit Number.
 * \param [in/out] label_info Speical label info.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_mpls_special_label_identifier_get(
    int unit,
    bcm_mpls_special_label_t *label_info);

/*!
 * \brief Delete identifier entry of special label.
 *
 * \param [in] unit Unit Number.
 * \param [in] label_info Speical label info.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_mpls_special_label_identifier_delete(
    int unit,
    bcm_mpls_special_label_t label_info);

/*!
 * \brief Delete all identifier entries of special labels.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_mpls_special_label_identifier_delete_all(int unit);

/*!
 * \brief Traverse all identifier entries of special labels.
 *
 * \param [in] unit Unit Number.
 * \param [in] cb user callback.
 * \param [in] user_data user data.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_mpls_special_label_identifier_traverse(
    int unit,
    bcm_mpls_special_label_identifier_traverse_cb cb,
    void *user_data);

/*!
 * \brief Set mpls global label range.
 *
 * \param [in] unit Unit Number.
 * \param [in] range_num Range number. 0 : First range, 1 : Second range.
 * \param [in] range_min Range min indicator. 0 : Range max, 1 : Range min
 * \param [in] label_val Label value
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_mpls_global_label_range_set(
    int unit,
    int range_num,
    int range_min,
    int label_val);

/*!
 * \brief Get mpls global label range.
 *
 * \param [in] unit Unit Number.
 * \param [in] range_num Range number. 0 : First range, 1 : Second range.
 * \param [out] min_label Min label
 * \param [out] max_label Max label
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_mpls_global_label_range_get(
    int unit,
    int range_num,
    int *min_label,
    int *max_label);

/*!
 * \brief Set MPLS global control.
 *
 * \param [in] unit Unit Number.
 * \param [in] control_type Control type.
 * \param [in] value Control value
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_mpls_global_control_set(
    int unit,
    bcmi_ltsw_mpls_global_ctrl_t control_type,
    int value);

/*!
 * \brief Get MPLS global control.
 *
 * \param [in] unit Unit Number.
 * \param [in] control_type Control type.
 * \param [out] value Control value
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_mpls_global_control_get(
    int unit,
    bcmi_ltsw_mpls_global_ctrl_t control_type,
    int *value);

/*!
 * \brief Add MPLS encap labels.
 *
 * \param [in] unit Unit Number.
 * \param [in] label_info Encap label info.
 * \param [out] label_index VC label index.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_mpls_encap_label_add(
    int unit,
    bcmi_ltsw_mpls_encap_label_info_t *label_info,
    int *label_index);

/*!
 * \brief Get MPLS encap labels.
 *
 * \param [in] unit Unit Number.
 * \param [in] label_index VC label index.
 * \param [out] label_info Encap label info.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_mpls_encap_label_get(
    int unit,
    int label_index,
    bcmi_ltsw_mpls_encap_label_info_t *label_info);

/*!
 * \brief Delete MPLS encap labels.
 *
 * \param [in] unit Unit Number.
 * \param [in] label_index VC label index.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_mpls_encap_label_delete(
    int unit,
    int label_index);

/*!
 * \brief Increase reference count of VC label index.
 *
 * \param [in] unit Unit Number.
 * \param [in] label_index VC label index.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_mpls_encap_label_ref_inc(
    int unit,
    int label_index);

/*!
 * \brief Replace vp value in match entry of mpls port id .
 *
 * \param [in] unit Unit Number.
 * \param [in] mpls_port_id MPLS port ID.
 * \param [in] new_vp New VP ID.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_mpls_port_match_vp_replace(
    int unit,
    bcm_gport_t mpls_port_id,
    int new_vp);

/*!
 * \brief Get the vp value in match entry of mpls port id.
 *
 * \param [in] unit Unit Number.
 * \param [in] mpls_port_id MPLS port ID.
 * \param [in] new_vp New VP ID.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_mpls_port_match_vp_get(
    int unit,
    bcm_gport_t mpls_port_id,
    int *new_vp);

/*!
 * \brief Add an MPLS control packet entry.
 *
 * \param [in] unit Unit Number.
 * \param [in] options Operation options.
 * \param [in] match MPLS control packet match.
 * \param [in] action MPLS control packet action.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_mpls_control_pkt_add(
    int unit,
    uint32_t options,
    bcm_mpls_control_pkt_match_t *match,
    bcm_mpls_control_pkt_action_t *action);

/*!
 * \brief Get an MPLS control packet entry.
 *
 * \param [in] unit Unit Number.
 * \param [in/out] match MPLS control packet match.
 * \param [out] action MPLS control packet action.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_mpls_control_pkt_get(
    int unit,
    bcm_mpls_control_pkt_match_t *match,
    bcm_mpls_control_pkt_action_t *action);

/*!
 * \brief Delete an MPLS control packet entry.
 *
 * \param [in] unit Unit Number.
 * \param [in/out] match MPLS control packet match.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_mpls_control_pkt_delete(
    int unit,
    bcm_mpls_control_pkt_match_t *match);

/*!
 * \brief Traverse all MPLS control packet entries and call user.s callback.
 *
 * \param [in] unit Unit Number.
 * \param [in] cb User callback function.
 * \param [in] user_data User data.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_mpls_control_pkt_traverse(
    int unit,
    bcm_mpls_control_pkt_traverse_cb cb,
    void *user_data);

/*!
 * \brief Delete all MPLS control packet entries.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_mpls_control_pkt_delete_all(int unit);

/*!
 * \brief Get counter statistic values for specific MPLS label and gport.
 *
 * \param [in] unit Unit Number.
 * \param [in] label MPLS label.
 * \param [in] mpls_port MPLS port.
 * \param [in] stat mpls port information.
 * \param [out] val Stats value.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_mpls_label_stat_get(
    int unit,
    bcm_mpls_label_t label,
    bcm_gport_t mpls_port,
    bcm_mpls_stat_t stat,
    uint64_t *val);

/*!
 * \brief Clear counter statistic values for specific MPLS label and gport.
 *
 * \param [in] unit Unit Number.
 * \param [in] label MPLS label.
 * \param [in] mpls_port MPLS port.
 * \param [in] stat mpls port information.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_mpls_label_stat_clear(
    int unit,
    bcm_mpls_label_t label,
    bcm_gport_t mpls_port,
    bcm_mpls_stat_t stat);

/*!
 * \brief Set a port match for a MPLS port.
 *
 * \param [in] unit Unit Number.
 * \param [in] mpls_port_id mpls port ID.
 * \param [in] match mpls port match.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_mpls_port_match_set(
    int unit,
    bcm_gport_t mpls_port_id,
    bcmi_ltsw_mpls_port_match_t *match);

/*!
 * \brief Clear a port match for a MPLS port.
 *
 * \param [in] unit Unit Number.
 * \param [in] mpls_port_id mpls port ID.
 * \param [in] match mpls port match.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_mpls_port_match_clear(
    int unit,
    bcm_gport_t mpls_port_id,
    bcmi_ltsw_mpls_port_match_t *match);

/*!
 * \brief Get all port matches for a MPLS port.
 *
 * \param [in] unit Unit Number.
 * \param [in] mpls_port_id mpls port ID.
 * \param [in] size Match array size.
 * \param [out] match_array mpls port match.
 * \param [out] count Port match count.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_mpls_port_match_multi_get(
    int unit,
    bcm_gport_t mpls_port_id,
    int size,
    bcmi_ltsw_mpls_port_match_t *match_array,
    int *count);

/*!
 * \brief Delete all port matches for MPLS ports in the unit.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_mpls_port_match_delete_all(int unit);

#endif /* BCMINT_LTSW_XFS_MPLS_H */
