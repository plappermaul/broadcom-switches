/*
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 *
 * This license is set out in https://raw.githubusercontent.com/Broadcom-Network-Switching-Software/OpenBCM/master/Legal/LICENSE file.
 * 
 * Copyright 2007-2020 Broadcom Inc. All rights reserved.
 */

#ifndef BCMINT_LTSW_XFS_ECN_H
#define BCMINT_LTSW_XFS_ECN_H

#include <bcm/ecn.h>
#include <bcm/switch.h>
#include <bcm/types.h>

#include <sal/sal_types.h>

/*!
 * \brief Deinit ECN module.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_ecn_deinit(int unit);

/*!
 * \brief Init ECN module.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_ecn_init(int unit);

/*!
 * \brief Create MPLS ECN map.
 *
 * \param [in] unit Unit Number.
 * \param [in] flags flags.
 * \param [out] ecn_map_id ECN map ID.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_ecn_map_create(
    int unit,
    uint32_t flags,
    int *ecn_map_id);

/*!
 * \brief Destroy MPLS ECN map.
 *
 * \param [in] unit Unit Number.
 * \param [in] ecn_map_id ECN map ID.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_ecn_map_destroy(
    int unit,
    int ecn_map_id);

/*!
 * \brief Set MPLS ECN map.
 *
 * \param [in] unit Unit Number.
 * \param [in] options options, not used currently.
 * \param [in] ecn_map_id ECN map ID.
 * \param [in] ecn_map ECN mapping values.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_ecn_map_set(
    int unit,
    uint32_t options,
    int ecn_map_id,
    bcm_ecn_map_t *ecn_map);

/*!
 * \brief Get MPLS ECN map.
 *
 * \param [in] unit Unit Number.
 * \param [in] ecn_map_id ECN map ID.
 * \param [inout] ecn_map ECN mapping values.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_ecn_map_get(
    int unit,
    int ecn_map_id,
    bcm_ecn_map_t *ecn_map);

/*!
 * \brief Set latency-based ECN mode.
 *
 * \param [in] unit Unit Number.
 * \param [in] mode mode.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_ecn_latency_based_mode_set(
    int unit,
    bcm_switch_latency_ecn_mark_mode_t mode);

/*!
 * \brief Get latency-based ECN mode.
 *
 * \param [in] unit Unit Number.
 * \param [out] mode mode.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_ecn_latency_based_mode_get(
    int unit,
    bcm_switch_latency_ecn_mark_mode_t *mode);

/*!
 * \brief Set latency-based ECN threshold.
 *
 * \param [in] unit Unit Number.
 * \param [in] gport Port number or GPORT identifier.
 * \param [in] cosq COS queue number.
 * \param [in] mode mode.
 * \param [in] threshold threshold.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_ecn_latency_based_threshold_set(
    int unit,
    bcm_gport_t gport,
    bcm_cos_queue_t cosq,
    bcm_switch_latency_ecn_mark_mode_t mode,
    uint32_t threshold);

/*!
 * \brief Get latency-based ECN threshold.
 *
 * \param [in] unit Unit Number.
 * \param [in] gport Port number or GPORT identifier.
 * \param [in] cosq COS queue number.
 * \param [in] mode mode.
 * \param [out] threshold threshold.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_ecn_latency_based_threshold_get(
    int unit,
    bcm_gport_t gport,
    bcm_cos_queue_t cosq,
    bcm_switch_latency_ecn_mark_mode_t mode,
    uint32_t *threshold);

/*!
 * \brief Resolve ECN map ID.
 *
 * \param [in] unit Unit Number.
 * \param [in] ecn_map_id ECN map ID.
 * \param [out] ecn_map_type ECN map type.
 * \param [out] prof_id ECN map profile ID.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_ecn_map_id_resolve(
    int unit,
    int ecn_map_id,
    int *ecn_map_type,
    uint32_t *prof_id);

/*!
 * \brief Construct ECN map ID.
 *
 * \param [in] unit Unit Number.
 * \param [in] ecn_map_type ECN map type.
 * \param [in] prof_id ECN map profile ID.
 * \param [out] ecn_map_id ECN map ID.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_ecn_map_id_construct(
    int unit,
    int ecn_map_type,
    uint32_t prof_id,
    int *ecn_map_id);

/*!
 * \brief To set the mapped internal congestion notification (int_cn) value.
 *
 * \param [in] unit Unit Number.
 * \param [in] map Internal congestion notification map.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_ecn_traffic_map_set(
    int unit,
    bcm_ecn_traffic_map_info_t *map);

/*!
 * \brief To get the mapped internal congestion notification (int_cn) value.
 *
 * \param [in] unit Unit Number.
 * \param [inout] map Internal congestion notification map.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_ecn_traffic_map_get(
    int unit,
    bcm_ecn_traffic_map_info_t *map);

/*!
 * \brief To set the ECN enqueue action.
 *
 * \param [in] unit Unit Number.
 * \param [in] ecn_config ECN traffic action configuration.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_ecn_action_enqueue_set(
    int unit,
    bcm_ecn_traffic_action_config_t *ecn_config);

/*!
 * \brief To get the ECN enqueue action.
 *
 * \param [in] unit Unit Number.
 * \param [inout] ecn_config ECN traffic action configuration.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_ecn_action_enqueue_get(
    int unit,
    bcm_ecn_traffic_action_config_t *ecn_config);

/*!
 * \brief To set the ECN dequeue action.
 *
 * \param [in] unit Unit Number.
 * \param [in] ecn_config ECN traffic action configuration.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_ecn_action_dequeue_set(
    int unit,
    bcm_ecn_traffic_action_config_t *ecn_config);

/*!
 * \brief To get the ECN dequeue action.
 *
 * \param [in] unit Unit Number.
 * \param [inout] ecn_config ECN traffic action configuration.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_ecn_action_dequeue_get(
    int unit,
    bcm_ecn_traffic_action_config_t *ecn_config);

/*!
 * \brief To set the default responsive value for Non-TCP packets.
 *
 * \param [in] unit Unit Number.
 * \param [in] value Default responsive value.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_ecn_responsive_default_set(
    int unit,
    int value);

/*!
 * \brief To get the default responsive value for Non-TCP packets.
 *
 * \param [in] unit Unit Number.
 * \param [out] value Returned default responsive value.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_ecn_responsive_default_get(
    int unit,
    int *value);

#endif /* BCMINT_LTSW_XFS_ECN_H */
