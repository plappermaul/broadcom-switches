/*
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 *
 * This license is set out in https://raw.githubusercontent.com/Broadcom-Network-Switching-Software/OpenBCM/master/Legal/LICENSE file.
 * 
 * Copyright 2007-2020 Broadcom Inc. All rights reserved.
 */

#ifndef BCMINT_LTSW_XFS_L2_H
#define BCMINT_LTSW_XFS_L2_H

#include <bcm/l2.h>
#include <bcm/types.h>

#include <bcm_int/ltsw/l2_int.h>
#include <bcm_int/ltsw/l2.h>

#include <sal/sal_types.h>

/*!
 * \brief Initialize L2 module.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_l2_init(int unit);

/*!
 * \brief Detach L2 module.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_l2_detach(int unit);

/*!
 * \brief Add a L2 address entry into device.
 *
 * \param [in] unit Unit Number.
 * \param [in] l2addr L2 address structure.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_l2_addr_add(
    int unit,
    bcm_l2_addr_t *l2addr);

/*!
 * \brief Get l2 data structure info for given mac and vid from device.
 *
 * \param [in] unit Unit Number.
 * \param [in] mac Mac address.
 * \param [in] vid Vlan id.
 * \param [out] l2addr L2 address structure.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_l2_addr_get(
    int unit,
    bcm_mac_t mac,
    bcm_vlan_t vid,
    bcm_l2_addr_t *l2addr);

/*!
 * \brief Delete l2 address entry from device.
 *
 * \param [in] unit Unit Number.
 * \param [in] mac Mac address.
 * \param [in] vid Vlan id.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_l2_addr_delete(
    int unit,
    bcm_mac_t mac,
    bcm_vlan_t vid);

/*!
 * \brief Replace a l2 address entry with given info.
 *
 * \param [in] unit Unit Number.
 * \param [in] rep_st Replace info structure.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_l2_addr_replace(
    int unit,
    bcmint_l2_replace_t *rep_st);

/*!
 * \brief Traverse L2 address table and call users callback for matched entry.
 *
 * \param [in] unit Unit Number.
 * \param [in] trav_fn User specified callback function.
 * \param [in] user_data User specified data.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_l2_addr_traverse(
    int unit,
    bcm_l2_traverse_cb trav_fn,
    void *user_data);

/*!
 * \brief Purge L2 entries belong to set of (vlan, gport) tuple.
 *
 * \param [in] unit Unit Number.
 * \param [in] tuple_ctrl Tuple control structure.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_l2_addr_del_by_tuple(
    int unit,
    bcmint_l2_tuple_ctrl_t *tuple_ctrl);

/*!
 * \brief Get size of L2 Station table.
 *
 * \param [in] unit Unit Number.
 * \param [out] tbl_sz L2 Station table size.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_l2_station_size_get(
    int unit,
    uint32_t *tbl_sz);

/*!
 * \brief Age L2 entries.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_l2_age(int unit);

/*!
 * \brief Add a L2 station entry to device.
 *
 * \param [in] unit Unit Number.
 * \param [in] station L2 station entry.
 * \param [in] flags Internal L2 station flags.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_l2_station_add(
    int unit,
    bcm_l2_station_t *station,
    int flags);

/*!
 * \brief Get L2 station entry from device with given key.
 *
 * \param [in] unit Unit Number.
 * \param [in|out] station L2 station entry.
 * \param [in] flags Internal L2 station flags.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_l2_station_get(
    int unit,
    bcm_l2_station_t *station,
    int flags);

/*!
 * \brief Delete a L2 station entry from device.
 *
 * \param [in] unit Unit Number.
 * \param [in] station L2 station entry.
 * \param [in] flags Internal L2 station flags.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_l2_station_delete(
    int unit,
    bcm_l2_station_t *station,
    int flags);

/*!
 * \brief Set force vlan for all L2 entries of associated port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port id.
 * \param [in] vlan Force vlan id.
 * \param [in] flags Force vlan flags.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_l2_force_vlan_set(
    int unit,
    bcm_port_t port,
    bcm_vlan_t vlan,
    uint32_t flags);

/*!
 * \brief Enable/Disable global L2 learning.
 *
 * \param [in] unit Unit Number.
 * \param [in] enable 1 indicates enable, 0 indicates disable.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_l2_learn_set(
    int unit,
    int enable);

/*!
 * \brief Get global L2 learning setting.
 *
 * \param [in] unit Unit Number.
 * \param [out] enable Current global L2 learning setting.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_l2_learn_get(
    int unit,
    int *enable);

/*!
 * \brief Update VLAN info used by station.
 *
 * \param [in] unit Unit Number.
 * \param [in] vid VLAN id.
 * \param [in] flags Flags to indicate update which part of VLAN info.
 * \param [in] vlan_info VLAN info used by station.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_l2_station_vlan_update(
    int unit,
    int vid,
    int flags,
    bcmi_ltsw_l2_station_vlan_t *vlan_info);

/*!
 * \brief Get L2 table size.
 *
 * \param [in] unit Unit Number.
 * \param [out] size L2 table size.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_l2_size_get(
    int unit,
    int *size);

/*!
 * \brief Get L2 entry count.
 *
 * \param [in] unit Unit Number.
 * \param [out] count L2 entry count.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_l2_count_get(
    int unit,
    int *count);

/*!
 * \brief Update L2 table view info for a vlan.
 *
 * \param [in] unit Unit Number.
 * \param [in] info L2 table view info.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_l2_view_vlan_update(
    int unit,
    bcmi_ltsw_l2_view_vlan_info_t *info);

/*!
 * \brief Dump L2 module software bookkeepings.
 *
 * \param [in] unit Unit Number.
 */
extern void
xfs_ltsw_l2_sw_dump(int unit);

/*!
 * \brief Update L2 table virtual info for a gport.
 *
 * \param [in] unit Unit Number.
 * \param [in] info Virtual info.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
xfs_ltsw_l2_virtual_info_update(
    int unit,
    bcmi_ltsw_l2_virtual_info_t *info);

#endif /* BCMINT_LTSW_XFS_L2_H */
