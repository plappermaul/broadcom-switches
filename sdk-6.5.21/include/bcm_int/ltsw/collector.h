/*
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 *
 * This license is set out in https://raw.githubusercontent.com/Broadcom-Network-Switching-Software/OpenBCM/master/Legal/LICENSE file.
 * 
 * Copyright 2007-2020 Broadcom Inc. All rights reserved.
 */

#ifndef BCMI_LTSW_COLLECTOR_H
#define BCMI_LTSW_COLLECTOR_H

#include <bcm/collector.h>

#include <sal/sal_types.h>

/*!
 * \brief Transport types of collector.
 */
typedef enum bcmi_ltsw_collector_transport_type_s {

    /*! IPv4 UDP transport type. */
    bcmiCollectorTransportTypeIpv4Udp = 0,

    /*! IPv6 UDP transport type. */
    bcmiCollectorTransportTypeIpv6Udp = 1,

    /*! Must be the last, an invalid value. */
    bcmiCollectorTransportTypeCount = 2

} bcmi_ltsw_collector_transport_type_t;

#define BCMI_LTSW_COLLECTOR_TRANSPORT_TYPE_STR \
{ \
    "Ipv4Udp", \
    "Ipv6Udp" \
}

/*!
 * \brief User of common collector infrastructure.
 */
typedef enum bcmi_ltsw_collector_export_app_s {

    /*! None. */
    bcmiCollectorExportAppNone = 0,

    /*! Flowtracker with IPFIX format. */
    bcmiCollectorExportAppFlowtrackerIpfix = 1,

    /*! Flowtracker with Protocol Buffer format. */
    bcmiCollectorExportAppFlowtrackerProtoBuf = 2,

    /*! Telemetry with Protocol Buffer format. */
    bcmiCollectorExportAppTelemetryProtoBuf = 3,

    /*! IFA with IPFIX format. */
    bcmiCollectorExportAppIfaIpfix = 4,

    /*! Must be the last, an invalid value. */
    bcmiCollectorExportAppCount = 5

} bcmi_ltsw_collector_export_app_t;

#define BCMI_LTSW_COLLECTOR_EXPORT_APP_STR \
{ \
    "None", \
    "FlowtrackerIpfix", \
    "FlowtrackerProtoBuf", \
    "TelemetryProtoBuf", \
    "IfaIpfix" \
}

/*!
 * \brief Increment/Decrement reference count for an export profile.
 *
 * \param [in] unit Unit Number.
 * \param [in] id Export profile ID.
 * \param [in] update Reference count update (+/-).
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_collector_export_profile_ref_count_update(
    int unit,
    int id,
    int update);

/*!
 * \brief Increment/Decrement reference count for a collector.
 *
 * \param [in] unit Unit Number.
 * \param [in] id Collector ID.
 * \param [in] update Reference count update (+/-).
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_collector_ref_count_update(
    int unit,
    bcm_collector_t id,
    int update);

/*!
 * \brief Add user for a collector. Currently one user is expected per collector.
 *
 * \param [in] unit Unit Number.
 * \param [in] id Collector ID.
 * \param [in] user The user type of calling app.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_collector_user_update(
    int unit,
    bcm_collector_t id,
    bcmi_ltsw_collector_export_app_t user);

/*!
 * \brief Check if collector ID is used by other user.
 *
 * \param [in] unit Unit Number.
 * \param [in] id Collector ID.
 * \param [in] my_user The user type of calling app.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_collector_check_user_is_other(
    int unit,
    bcm_collector_t id,
    bcmi_ltsw_collector_export_app_t my_user);

/*!
 * \brief Get the internal ID (the ID that is programmed in LT) and the type of a collector.
 *
 * \param [in] unit Unit Number.
 * \param [in] id Collector ID.
 * \param [out] internal_id Internal ID of the collector.
 * \param [out] type Type of the collector.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_collector_internal_id_get(
    int unit,
    bcm_collector_t id,
    uint32_t *internal_id,
    bcmi_ltsw_collector_transport_type_t *type);

/*!
 * \brief Get the external ID of a collector.
 *
 * \param [in] unit Unit Number.
 * \param [in] internal_id Internal ID of the collector.
 * \param [in] type Type of the collector.
 * \param [out] id External ID of the collector.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_collector_external_id_get(
    int unit,
    uint32_t internal_id,
    bcmi_ltsw_collector_transport_type_t type,
    bcm_collector_t *id);

#endif /* BCMI_LTSW_COLLECTOR_H */
