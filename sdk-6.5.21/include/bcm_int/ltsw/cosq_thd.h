/*
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 *
 * This license is set out in https://raw.githubusercontent.com/Broadcom-Network-Switching-Software/OpenBCM/master/Legal/LICENSE file.
 * 
 * Copyright 2007-2020 Broadcom Inc. All rights reserved.
 */

#ifndef BCMI_LTSW_COSQ_THD_H
#define BCMI_LTSW_COSQ_THD_H

#include <bcm/types.h>
#include <bcm/cosq.h>

#include <sal/sal_types.h>

/*!
 * \brief Initialize the cosq_thd module.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_cosq_thd_init(int unit);

/*!
 * \brief Detach the cosq_thd module.
 *
 * \param [in] unit Unit Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_cosq_thd_detach(int unit);

/*!
 * \brief Set the profile for Input priortty to PG mapping for a port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] profile_id Profile index.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_cosq_thd_port_inppri_profile_set(
    int unit,
    bcm_port_t port,
    int profile_id);

/*!
 * \brief Get the profile for Input priortty to PG mapping for a port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [out] profile_id Profile index.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_cosq_thd_port_inppri_profile_get(
    int unit,
    bcm_port_t port,
    int *profile_id);

/*!
 * \brief Set the profile for PG to SPID/HPID/PFCPRI mapping for a port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] profile_id Profile index.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_cosq_thd_port_pg_profile_set(
    int unit,
    bcm_port_t port,
    int profile_id);

/*!
 * \brief Get the profile for PG to SPID/HPID/PFCPRI mapping for a port.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [out] profile_id Profile index.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_cosq_thd_port_pg_profile_get(
    int unit,
    bcm_port_t port,
    int *profile_id);

/*!
 * \brief Get the pool per PG for a port.
 *
 * \param [in] unit Unit Number.
 * \param [in] gport Gport Number.
 * \param [in] prigroup Priority group.
 * \param [in] type Feature.
 * \param [out] arg Feature value.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_cosq_thd_ing_pg_pool_get(
    int unit,
    bcm_gport_t gport,
    bcm_cos_t prigroup,
    bcm_cosq_control_t type,
    int *arg);

/*!
 * \brief Get the egress pool for a gport.
 *
 * \param [in] unit Unit Number.
 * \param [in] gport Gport Number.
 * \param [in] cosq cosq.
 * \param [in] type Feature.
 * \param [out] arg Feature value.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_cosq_thd_egress_pool_get(
    int unit,
    bcm_gport_t gport,
    bcm_cos_t cosq,
    bcm_cosq_control_t type,
    int *arg);

/*!
 * \brief TM db shared limit get.
 *
 * \param [in] unit Unit Number.
 * \param [in] itm itm.
 * \param [in] spid ing service pool id.
 * \param [out] shared_limit shared limit value.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_cosq_thd_shared_limit_get(
    int unit,
    int itm,
    int spid,
    int *shared_limit);

/*!
 * \brief Port UC service pool id get.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 * \param [in] queue queue id.
 * \param [out] spid pool id.
 * \param [out] use_qgroup_min true/false.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_cosq_thd_port_uc_spid_get(
    int unit,
    bcm_port_t port,
    int queue,
    int *spid,
    int *use_qgroup_min);

/*!
 * \brief Reset the guarantee of priority group, uc queue, mc queue to the default.
 *
 * \param [in] unit Unit Number.
 * \param [in] port Port Number.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_cosq_thd_port_guarantee_reset(
    int unit,
    bcm_port_t port);

/*!
 * \brief Convert BCM enum alpha value to LT enum value.
 *
 * \param [in] unit Unit Number.
 * \param [in] arg BCM Alpha value.
 * \param [out] alpha LT Alpha value.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_cosq_thd_alpha_bcm_to_lt_convert(
    int unit,
    int arg,
    const char **alpha);

/*!
 * \brief Convert LT enum alpha value to BCM enum value.
 *
 * \param [in] unit Unit Number.
 * \param [in] alpha LT Alpha value.
 * \param [out] arg BCM Alpha value.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_cosq_thd_alpha_lt_to_bcm_convert(
    int unit,
    const char *alpha,
    int *arg);

/*!
 * \brief Convert byte to cell.
 *
 * \param [in] unit Unit Number.
 * \param [in] bytes bytes.
 * \param [out] cells cells.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_cosq_thd_byte_to_cell(
    int unit,
    uint32_t bytes,
    int *cells);

/*!
 * \brief Convert cell to byte.
 *
 * \param [in] unit Unit Number.
 * \param [in] cells cells.
 * \param [out] bytes bytes.
 *
 * \retval SHR_E_NONE No errors.
 * \retval !SHR_E_NONE Failure.
 */
extern int
bcmi_ltsw_cosq_thd_cell_to_byte(
    int unit,
    uint32_t cells,
    int *bytes);

#endif /* BCMI_LTSW_COSQ_THD_H */
