
/*
 *         
 * 
 * 
 * This license is set out in https://raw.githubusercontent.com/Broadcom-Network-Switching-Software/OpenBCM/master/Legal/LICENSE file.
 * 
 * Copyright 2007-2020 Broadcom Inc. All rights reserved.
 *         
 *     
 * DO NOT EDIT THIS FILE!
 */

#ifndef BCM_DNX_SUPPORT
#error "This file is for use by DNX family only!"
#endif /* BCM_DNX_SUPPORT */

#ifndef _IMB_FABRIC_H__H_
#define _IMB_FABRIC_H__H_

#include <soc/portmod/portmod.h>
#include <bcm/port.h>
#include <bcm/cosq.h>
#include <bcm_int/dnx/port/imb/imb_diag.h>
#include <bcm_int/dnx/cosq/ingress/cosq_ingress_port.h>
#include <soc/dnxc/dnxc_port.h>
/*initialize an IMB.*/
int imb_fabric_init(
    int unit,
    const imb_create_info_t * imb_info,
    imb_specific_create_info_t * imb_specific_info);

/*De-initialize an existing IMB.*/
int imb_fabric_deinit(
    int unit,
    const imb_create_info_t * imb_info,
    imb_specific_create_info_t * imb_specific_info);

/*Add new IMB (Interface Management Block) port*/
int imb_fabric_port_attach(
    int unit,
    bcm_port_t port,
    uint32 flags);

/*Remove an existing IMB (Interface Management Block) port*/
int imb_fabric_port_detach(
    int unit,
    bcm_port_t port);

/*Enable / disable a port*/
int imb_fabric_port_enable_set(
    int unit,
    bcm_port_t port,
    uint32 flags,
    int enable);
int imb_fabric_port_enable_get(
    int unit,
    bcm_port_t port,
    int *enable);

/*Enable / disable loopback on a port*/
int imb_fabric_port_loopback_set(
    int unit,
    bcm_port_t port,
    int loopback);
int imb_fabric_port_loopback_get(
    int unit,
    bcm_port_t port,
    int *loopback);

/*Get port link state*/
int imb_fabric_port_link_state_get(
    int unit,
    bcm_port_t port,
    int clear_status,
    bcm_port_link_state_t * link_state);

/*Set Mac link according to Phy status*/
int imb_fabric_port_link_up_mac_update(
    int unit,
    bcm_port_t port,
    int link);

/*Local fault steatus get*/
int imb_fabric_port_local_fault_status_get(
    int unit,
    bcm_port_t port,
    int *local_fault);

/*Remote fault status get*/
int imb_fabric_port_remote_fault_status_get(
    int unit,
    bcm_port_t port,
    int *remote_fault);

/*Port speed configuration*/
int imb_fabric_port_speed_config_set(
    int unit,
    bcm_port_t port,
    const portmod_speed_config_t * speed_config);
int imb_fabric_port_speed_config_get(
    int unit,
    bcm_port_t port,
    portmod_speed_config_t * speed_config);

/*Get port's default resource configurations*/
int imb_fabric_port_resource_default_get(
    int unit,
    bcm_port_t port,
    uint32 flags,
    bcm_port_resource_t * resource);

/*Validate the FEC+SPEED combinations*/
int imb_fabric_port_fec_speed_validate(
    int unit,
    bcm_port_t port,
    bcm_port_phy_fec_t fec_type,
    int speed);

#endif /*_IMB_FABRIC_H_*/
