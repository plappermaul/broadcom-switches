
/*
 *         
 * 
 * 
 * This license is set out in https://raw.githubusercontent.com/Broadcom-Network-Switching-Software/OpenBCM/master/Legal/LICENSE file.
 * 
 * Copyright 2007-2020 Broadcom Inc. All rights reserved.
 *         
 *     
 * DO NOT EDIT THIS FILE!
 */

#ifndef BCM_DNX_SUPPORT
#error "This file is for use by DNX family only!"
#endif /* BCM_DNX_SUPPORT */

#ifndef _IMB_ILU_H__H_
#define _IMB_ILU_H__H_

#include <soc/portmod/portmod.h>
#include <bcm/port.h>
#include <bcm/cosq.h>
#include <bcm_int/dnx/port/imb/imb_diag.h>
#include <bcm_int/dnx/cosq/ingress/cosq_ingress_port.h>
#include <soc/dnxc/dnxc_port.h>
/*initialize an IMB.*/
int imb_ilu_init(
    int unit,
    const imb_create_info_t * imb_info,
    imb_specific_create_info_t * imb_specific_info);

/*De-initialize an existing IMB.*/
int imb_ilu_deinit(
    int unit,
    const imb_create_info_t * imb_info,
    imb_specific_create_info_t * imb_specific_info);

/*TX pad packets to the specified size. value less than 17 means pad is disabled. */
int imb_ilu_port_pad_size_set(
    int unit,
    bcm_port_t port,
    int value);
int imb_ilu_port_pad_size_get(
    int unit,
    bcm_port_t port,
    int *value);

/*Add new IMB (Interface Management Block) port*/
int imb_ilu_port_attach(
    int unit,
    bcm_port_t port,
    uint32 flags);

/*Remove an existing IMB (Interface Management Block) port*/
int imb_ilu_port_detach(
    int unit,
    bcm_port_t port);

/*Enable / disable a port*/
int imb_ilu_port_enable_set(
    int unit,
    bcm_port_t port,
    uint32 flags,
    int enable);
int imb_ilu_port_enable_get(
    int unit,
    bcm_port_t port,
    int *enable);

/*Get the Bandwidth for the CDU.*/
int imb_ilu_bandwidth_get(
    int unit,
    bcm_port_t port,
    int is_port_include,
    int *bandwidth);

/*Set the Start TX threshold.*/
int imb_ilu_port_tx_start_thr_set(
    int unit,
    bcm_port_t port,
    int speed);

/*Set/get the PRD Enable mode.*/
int imb_ilu_prd_enable_set(
    int unit,
    bcm_port_t port,
    int enable_mode);
int imb_ilu_prd_enable_get(
    int unit,
    bcm_port_t port,
    int *enable_mode);

/*Set/get PRD Properties.*/
int imb_ilu_prd_properties_set(
    int unit,
    bcm_port_t port,
    imb_prd_properties_t property,
    uint32 val);
int imb_ilu_prd_properties_get(
    int unit,
    bcm_port_t port,
    imb_prd_properties_t property,
    uint32 *val);

/*Configure PRD priority maps.*/
int imb_ilu_prd_map_set(
    int unit,
    bcm_port_t port,
    bcm_cosq_ingress_port_drop_map_t map,
    uint32 key,
    uint32 priority,
    uint32 is_tdm);
int imb_ilu_prd_map_get(
    int unit,
    bcm_port_t port,
    bcm_cosq_ingress_port_drop_map_t map,
    uint32 key,
    uint32 *priority,
    uint32 *is_tdm);

/*Configure PRD thresholds.*/
int imb_ilu_prd_threshold_set(
    int unit,
    bcm_port_t port,
    uint32 priority,
    uint32 threshold);
int imb_ilu_prd_threshold_get(
    int unit,
    bcm_port_t port,
    uint32 priority,
    uint32 *threshold);

/*Get maximum PRD threshold value.*/
int imb_ilu_prd_threshold_max_get(
    int unit,
    bcm_port_t port,
    uint32 *threshold);

/*Configure PRD TPIDs per port.*/
int imb_ilu_prd_tpid_set(
    int unit,
    bcm_port_t port,
    uint32 tpid_index,
    uint32 tpid_value);
int imb_ilu_prd_tpid_get(
    int unit,
    bcm_port_t port,
    uint32 tpid_index,
    uint32 *tpid_value);

/*Get PRD counter for the corresponding FIFO (RMC).*/
int imb_ilu_prd_drop_count_get(
    int unit,
    bcm_port_t port,
    bcm_port_nif_scheduler_t sch_priority,
    uint64 *count);

/*Set/Get PRD Configurable Ether types.*/
int imb_ilu_prd_custom_ether_type_set(
    int unit,
    bcm_port_t port,
    uint32 ether_type_code,
    uint32 ether_type_val);
int imb_ilu_prd_custom_ether_type_get(
    int unit,
    bcm_port_t port,
    uint32 ether_type_code,
    uint32 *ether_type_val);

/*Set/Get PRD TCAM entries (for the soft stage).*/
int imb_ilu_prd_flex_key_entry_set(
    int unit,
    bcm_port_t port,
    uint32 key_index,
    const dnx_cosq_prd_tcam_entry_info_t * entry_info);
int imb_ilu_prd_flex_key_entry_get(
    int unit,
    bcm_port_t port,
    uint32 key_index,
    dnx_cosq_prd_tcam_entry_info_t * entry_info);

/*Set/Get PRD TCAM key size per Ether type (for the soft stage).*/
int imb_ilu_prd_ether_type_size_set(
    int unit,
    bcm_port_t port,
    uint32 ether_type_code,
    uint32 ether_type_size);
int imb_ilu_prd_ether_type_size_get(
    int unit,
    bcm_port_t port,
    uint32 ether_type_code,
    uint32 *ether_type_size);

/*Set/Get PRD TCAM key offset base per Ether type (for the soft stage).*/
int imb_ilu_prd_tcam_entry_key_offset_base_set(
    int unit,
    bcm_port_t port,
    uint32 ether_type_code,
    uint32 offset_base);
int imb_ilu_prd_tcam_entry_key_offset_base_get(
    int unit,
    bcm_port_t port,
    uint32 ether_type_code,
    uint32 *offset_base);

/*Set/Get PRD TCAM key offset value per Ether type (for the soft stage).*/
int imb_ilu_prd_tcam_entry_key_offset_set(
    int unit,
    bcm_port_t port,
    uint32 ether_type_code,
    uint32 offset_index,
    uint32 offset_value);
int imb_ilu_prd_tcam_entry_key_offset_get(
    int unit,
    bcm_port_t port,
    uint32 ether_type_code,
    uint32 offset_index,
    uint32 *offset_value);

/*Set/Get PRD Control Frame proeprties. if a packet is identified as control frame, it will automatically get the highest priority.*/
int imb_ilu_prd_control_frame_set(
    int unit,
    bcm_port_t port,
    uint32 control_frame_index,
    const bcm_cosq_ingress_drop_control_frame_config_t * control_frame_config);
int imb_ilu_prd_control_frame_get(
    int unit,
    bcm_port_t port,
    uint32 control_frame_index,
    bcm_cosq_ingress_drop_control_frame_config_t * control_frame_config);

/*Set/Get PRD MPLS special label proeprties. if a packet is identified as MPLS special label and the label value matches to one of the saved special labels, the priority and TDM indication will be taken from the label properties.*/
int imb_ilu_prd_mpls_special_label_set(
    int unit,
    bcm_port_t port,
    uint32 label_index,
    const bcm_cosq_ingress_port_drop_mpls_special_label_config_t * label_config);
int imb_ilu_prd_mpls_special_label_get(
    int unit,
    bcm_port_t port,
    uint32 label_index,
    bcm_cosq_ingress_port_drop_mpls_special_label_config_t * label_config);

/*Get rx fifo status*/
int imb_ilu_port_rx_fifo_status_get(
    int unit,
    bcm_port_t port,
    bcm_port_nif_scheduler_t sch_priority,
    uint32 *max_occupancy,
    uint32 *fifo_level);

/*Get tx fifo status*/
int imb_ilu_port_tx_fifo_status_get(
    int unit,
    bcm_port_t port,
    uint32 *max_occupancy,
    uint32 *fifo_level,
    uint32 *pm_credits);

/*Port speed configuration*/
int imb_ilu_port_speed_config_set(
    int unit,
    bcm_port_t port,
    const portmod_speed_config_t * speed_config);
int imb_ilu_port_speed_config_get(
    int unit,
    bcm_port_t port,
    portmod_speed_config_t * speed_config);

/*Set port scheduler*/
int imb_ilu_port_scheduler_config_set(
    int unit,
    bcm_port_t port,
    int enable);

/*Update scheduler reset for High/Low priority*/
int imb_ilu_port_scheduler_priority_update(
    int unit,
    bcm_port_t port);

/*Enable / disable PM to stop TX on all of a port's lanes according to a LLFC signal from CFC*/
int imb_ilu_port_stop_pm_from_cfc_llfc_enable_set(
    int unit,
    bcm_port_t port,
    uint32 enable);

/*Set the Flow Control Interface in/out of reset for a specified CDU.*/
int imb_ilu_fc_reset_set(
    int unit,
    const imb_create_info_t * imb_info,
    uint32 in_reset);

/*Configure the specified ILKN core's Inband Flow Control parameters.*/
int imb_ilu_inband_ilkn_fc_init(
    int unit,
    const imb_create_info_t * imb_info);

/*Action on link status change*/
int imb_ilu_port_link_status_change_event(
    int unit,
    bcm_port_t port);

#endif /*_IMB_ILU_H_*/
