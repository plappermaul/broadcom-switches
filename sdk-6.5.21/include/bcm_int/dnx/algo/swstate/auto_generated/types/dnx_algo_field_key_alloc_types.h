/** \file algo/swstate/auto_generated/types/dnx_algo_field_key_alloc_types.h
 *
 * sw state types (structs/enums/typedefs)
 *
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 */
/*
 * This license is set out in https://raw.githubusercontent.com/Broadcom-Network-Switching-Software/OpenBCM/master/Legal/LICENSE file.
 * 
 * Copyright 2007-2020 Broadcom Inc. All rights reserved.
 */

#ifndef __DNX_ALGO_FIELD_KEY_ALLOC_TYPES_H__
#define __DNX_ALGO_FIELD_KEY_ALLOC_TYPES_H__

#include <soc/dnxc/swstate/dnxc_sw_state_h_includes.h>
#include <soc/dnx/swstate/auto_generated/types/dnx_field_types.h>
#include <soc/dnx/swstate/auto_generated/types/dnx_field_key_types.h>
/*
 * STRUCTs
 */

/**
 * Holds info regarding availability of keys per stage (dnx_field_stage_e) per
 * field group type (dnx_field_group_type_e).
 */
typedef struct {
    /**
     * Indicates whether this structure contains meaningful info (non-zero) or not (zero).
     */
    uint8 structure_is_valid;
    /**
     * Number of keys available for this stage and field group type.
     */
    uint8 nof_available_keys;
    /**
     * Indicates the first key that is available for this group type.
     * Uint8 is used here, to save swstate space by the implied type is dbal_enum_value_field_field_key_e
     */
    uint8 first_available_key;
} dnx_field_key_alloc_instruction_t;

/**
 * Holds info regarding availability of keys on all field group types (dnx_field_group_type_e).
 */
typedef struct {
    /**
     * Information on availability of keys per field group type.
     */
    dnx_field_key_alloc_instruction_t keys_availability_group_info[DNX_FIELD_GROUP_TYPE_NOF];
    /**
     * Number of keys available for this stage.
     */
    uint8 nof_available_keys_on_stage;
    /**
     * Indicates the first key that is available for this stage.
     * 'uint8' is used here, to save swstate space, but the implied
     * type is dbal_enum_value_field_field_key_e
     */
    uint8 first_available_key_on_stage;
} dnx_field_key_alloc_group_instruction_t;

/**
 * Holds info regarding availability of keys on all stages (dnx_field_stage_e).
 */
typedef struct {
    /**
     * Information on availability of keys per stage.
     */
    dnx_field_key_alloc_group_instruction_t keys_availability_stage_info[DNX_FIELD_STAGE_NOF];
} dnx_field_key_alloc_stage_instruction_info_t;

/**
 * Contains information about allocated keys per stage per PMF program
 */
typedef struct {
    /**
     * Structure containing arrays holding info regarding initial availability
     * of keys per each stage per each field group type
     */
    dnx_field_key_alloc_stage_instruction_info_t keys_availability;
} dnx_field_keys_per_stage_allocation_t;


#endif /* __DNX_ALGO_FIELD_KEY_ALLOC_TYPES_H__ */
