/** \file algo/swstate/auto_generated/types/meter_types.h
 *
 * sw state types (structs/enums/typedefs)
 *
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 */
/*
 * This license is set out in https://raw.githubusercontent.com/Broadcom-Network-Switching-Software/OpenBCM/master/Legal/LICENSE file.
 * 
 * Copyright 2007-2020 Broadcom Inc. All rights reserved.
 */

#ifndef __METER_TYPES_H__
#define __METER_TYPES_H__

#include <soc/dnxc/swstate/dnxc_sw_state_h_includes.h>
#include <bcm_int/dnx/algo/template_mngr/template_mngr.h>
#include <bcm_int/dnx/algo/template_mngr/template_mngr_internal.h>
#include <bcm_int/dnx/policer/policer_mgmt.h>
#include <include/bcm/policer.h>
#include <soc/dnx/dnx_data/auto_generated/dnx_data_device.h>
#include <soc/dnx/dnx_data/auto_generated/dnx_data_max_crps.h>
/*
 * STRUCTs
 */

/**
 * holds the max and min rate and burst of the meter profile per unit
 */
typedef struct {
    /**
     * max rate (kbits/sec)
     */
    uint32 max_rate;
    /**
     * max burst in normal mode (bytes)
     */
    uint32 max_burst_normal_mode;
    /**
     * max burst in large bucket mode(bytes)
     */
    uint32 max_burst_large_mode;
    /**
     * min rate(kbits/sec)
     */
    uint32 min_rate;
    /**
     * min burst(bytes)
     */
    uint32 min_burst;
    /**
     * max cbs mantissa
     */
    uint32 max_cbs_mant;
    /**
     * max cbs exponent
     */
    uint32 max_cbs_exp;
    /**
     * max ir (rate) mantissa
     */
    uint32 max_ir_mant;
    /**
     * max ir (rate) exponent
     */
    uint32 max_ir_exp;
} dnx_policer_profile_limits_info_t;

/**
 * a structure that hold the bank_id and the base meter index that it represent
 */
typedef struct {
    /**
     * bank_id (for dual bucket mode, the sw state holds the base bank)
     */
    int bank_id;
    /**
     * base meter index (after expansion) that goes to this bank
     */
    int base_meter_index;
} dnx_policer_bank_info_t;

/**
 * holds the information per meter database. (1 global db, 3 ingress db, 2 egress db)
 */
typedef struct {
    /**
     * is meter database enabled
     */
    uint32 enable;
    /**
     * is meter database created (relevant only for generic meter)
     */
    uint32 created;
    /**
     * Is meter expansion  enabled (relevant only for ingress)
     */
    uint32 expansion_enable;
    /**
     * Is meter expansion per TC or per L2-Fwd Type (relevant only for ingress)
     */
    uint32 expansion_is_per_tc;
    /**
     * is meter database working in singlle bucket mode
     */
    uint32 is_single_bucket;
    /**
     * indicates if database holds small shmem bank, which can be used as single bucket only
     */
    int use_single_bucket_bank;
    /**
     * size of banks_arr, which holds generic banks that belong to the big engines and can be used as single bucket or dual bucket
     */
    uint32 nof_generic_banks;
    /**
     * array that holds all the banks that are used by the database (relevant for big engines), upto 12 banks.
     */
    dnx_policer_bank_info_t banks_arr[DNX_DATA_MAX_CRPS_ENGINE_NOF_BIG_ENGINES*2];
} dnx_policer_database_info_t;

/**
 * holds the information on the generic policer per core
 */
typedef struct {
    /**
     * holds the information of the generic meter database[is_ingress][database_id]
     */
    dnx_policer_database_info_t* db_info[2];
} dnx_generic_meter_info_t;

/**
 * Policer Templates
 */
typedef struct {
    /**
     * meter ingress database-0 profiles
     */
    dnx_algo_template_t* policer_ingress_db0;
    /**
     * meter ingress database-1 profiles
     */
    dnx_algo_template_t* policer_ingress_db1;
    /**
     * meter ingress database-2 profiles
     */
    dnx_algo_template_t* policer_ingress_db2;
    /**
     * meter egress database-0 profiles
     */
    dnx_algo_template_t* policer_egress_db0;
    /**
     * meter egress database-1 profiles
     */
    dnx_algo_template_t* policer_egress_db1;
} policer_template_t;

/**
 * METER DB per unit
 */
typedef struct {
    /**
     * holds the max and min rate and burst of the meter profile
     */
    dnx_policer_profile_limits_info_t profile_limits_info;
    /**
     * holds per core if global meter enabled
     */
    int* global_meter_enabled;
    /**
     * holds the information on the generic policer per core
     */
    dnx_generic_meter_info_t* generic_meter_info;
    /**
     * holds policer's templates
     */
    policer_template_t policer_templates;
} dnx_meter_db_t;


#endif /* __METER_TYPES_H__ */
