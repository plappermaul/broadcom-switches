/** \file algo/swstate/auto_generated/types/crps_eviction_types.h
 *
 * sw state types (structs/enums/typedefs)
 *
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 */
/*
 * This license is set out in https://raw.githubusercontent.com/Broadcom-Network-Switching-Software/OpenBCM/master/Legal/LICENSE file.
 * 
 * Copyright 2007-2020 Broadcom Inc. All rights reserved.
 */

#ifndef __CRPS_EVICTION_TYPES_H__
#define __CRPS_EVICTION_TYPES_H__

#include <soc/dnxc/swstate/dnxc_sw_state_h_includes.h>
#include <include/bcm/stat.h>
#include <include/bcm/types.h>
#include <include/soc/dnx/dnx_data/auto_generated/dnx_data_crps.h>
#include <include/soc/dnx/dnx_data/auto_generated/dnx_data_max_crps.h>
#include <soc/dnxc/swstate/types/sw_state_mutex.h>
#include <soc/dnxc/swstate/types/sw_state_sem.h>
/*
 * STRUCTs
 */

/**
 * information relevant per record
 */
typedef struct {
    /**
     * Index of the returned counter entry
     */
    uint32 counter_entry;
    /**
     * Index of the returned the countet engine
     */
    uint32 engine_id;
    /**
     * core id
     */
    uint32 core_id;
    /**
     * Value of the counter1.  (for mode=packets_and_bytes, it represent the packets)
     */
    uint64 cnt1;
    /**
     * Value of counter2.  (for mode=packets_and_bytes, it represent the bytes)
     */
    uint64 cnt2;
    /**
     * format of the counter entry
     */
    bcm_stat_counter_format_type_t format;
} dnx_crps_eviction_ctr_result_t;

/**
 * structure which holds the records information. Only the first 'nof_counters' counters are relevant
 */
typedef struct {
    /**
     * Number of valid counters in the counter result 'cnt_result'
     */
    uint32 nof_counters;
    /**
     * Array of the cache counters. Only the first 'nof_counters' counters are relevant
     */
    dnx_crps_eviction_ctr_result_t* cnt_result;
} dnx_crps_eviction_ctr_result_arr_t;

/**
 * structure which holds bg thread handling parameters
 */
typedef struct {
    /**
     * unit background thread enable
     */
    int running;
    /**
     * delay per bg iter (microsec)
     */
    int bgWait;
    /**
     * flag which indicates if thread is still running after it was asked to stop
     */
    int thread_is_still_running;
    /**
     * unit background waiting sem
     */
    sw_state_sem_t bgSem;
} dnx_crps_eviction_bg_thread_data_t;

/**
 * CRPS EVICTION DB per unit
 */
typedef struct {
    /**
     * counters cache access locking
     */
    sw_state_mutex_t cache_lock;
    /**
     * fifo access locking
     */
    sw_state_mutex_t fifo_lock;
    /**
     * array that holds the dma channel for each CRPS FIFO
     */
    int fifo_channels[DNX_DATA_MAX_DEVICE_GENERAL_NOF_CORES][DNX_DATA_MAX_CRPS_EVICTION_NOF_COUNTERS_FIFO];
    /**
     * results read from the dma fifo
     */
    dnx_crps_eviction_ctr_result_arr_t fifo_results;
    /**
     * background thread data
     */
    dnx_crps_eviction_bg_thread_data_t bg_thread_data;
} dnx_crps_eviction_db_t;


#endif /* __CRPS_EVICTION_TYPES_H__ */
