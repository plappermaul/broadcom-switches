/* 
 * This license is set out in https://raw.githubusercontent.com/Broadcom-Network-Switching-Software/OpenBCM/master/Legal/LICENSE file.
 * 
 * Copyright 2007-2020 Broadcom Inc. All rights reserved.
*/


#ifndef __SOC_PPC_API_EG_VLAN_EDIT_INCLUDED__

#define __SOC_PPC_API_EG_VLAN_EDIT_INCLUDED__




#include <soc/dpp/SAND/Utils/sand_header.h>

#include <soc/dpp/SAND/Management/sand_general_macros.h>
#include <soc/dpp/SAND/Management/sand_error_code.h>

#include <soc/dpp/PPC/ppc_api_general.h>
#include <soc/dpp/dpp_config_defs.h>








#define SOC_PPC_NOF_EGRESS_TAG_FORMAT_BITS                      (4)
#define SOC_PPC_NOF_EGRESS_VLAN_EDIT_ACTION_MAPPINGS(unit)      (0x1 << ((SOC_DPP_DEFS_GET(unit, nof_eve_profile_bits)) + SOC_PPC_NOF_EGRESS_TAG_FORMAT_BITS))
#define SOC_PPC_NOF_EGRESS_VLAN_EDIT_ACTION_IDS(unit)           (SOC_PPC_NOF_EGRESS_VLAN_EDIT_ACTION_MAPPINGS(unit))


#define SOC_PPC_NOF_EGRESS_VLAN_EDIT_RESERVED_ACTION_IDS_ARAD   (2)


#define SOC_PPC_MAX_NOF_EGRESS_VLAN_EDIT_ACTION_MAPPINGS        (0x1 << ((SOC_DPP_DEFS_MAX(NOF_EVE_PROFILE_BITS)) + SOC_PPC_NOF_EGRESS_TAG_FORMAT_BITS))
#define SOC_PPC_MAX_NOF_EGRESS_VLAN_EDIT_ACTION_IDS             (SOC_PPC_MAX_NOF_EGRESS_VLAN_EDIT_ACTION_MAPPINGS)









typedef enum
{
  
  SOC_PPC_EG_VLAN_EDIT_TAG_VID_SRC_EMPTY = 0,
  
  SOC_PPC_EG_VLAN_EDIT_TAG_VID_SRC_OUTER_TAG = 1,
  
  SOC_PPC_EG_VLAN_EDIT_TAG_VID_SRC_INNER_TAG = 2,
  
  SOC_PPC_EG_VLAN_EDIT_TAG_VID_SRC_EDIT_INFO_0 = 3,
  
  SOC_PPC_EG_VLAN_EDIT_TAG_VID_SRC_EDIT_INFO_1 = 4,
  
  SOC_PPC_EG_VLAN_EDIT_TAG_VID_SRC_ENCAP_INFO = 5,
  
  SOC_PPC_EG_VLAN_EDIT_TAG_VID_SRC_CEP_EDIT_INFO = 6,
  
  SOC_PPC_EG_VLAN_EDIT_TAG_VID_SRC_PEP_EDIT = 7,
  
  SOC_PPC_NOF_EG_VLAN_EDIT_TAG_VID_SRCS_PB = 8,
   
  SOC_PPC_EG_VLAN_EDIT_TAG_VID_SRC_VSI = SOC_PPC_NOF_EG_VLAN_EDIT_TAG_VID_SRCS_PB,
  
  SOC_PPC_NOF_EG_VLAN_EDIT_TAG_VID_SRCS_ARAD = 9
}SOC_PPC_EG_VLAN_EDIT_TAG_VID_SRC;

typedef enum
{
  
  SOC_PPC_EG_VLAN_EDIT_TAG_PCP_DEI_NONE = 0,
  
  SOC_PPC_EG_VLAN_EDIT_TAG_PCP_DEI_SRC_MAP = 1,
  
  SOC_PPC_EG_VLAN_EDIT_TAG_PCP_DEI_SRC_OUTER_TAG = 2,
  
  SOC_PPC_EG_VLAN_EDIT_TAG_PCP_DEI_SRC_INNER_TAG = 3,
  
  SOC_PPC_EG_VLAN_EDIT_TAG_PCP_DEI_SRC_EDIT_INFO_0 = 4,
  
  SOC_PPC_EG_VLAN_EDIT_TAG_PCP_DEI_SRC_EDIT_INFO_1 = 5,
  
  SOC_PPC_EG_VLAN_EDIT_TAG_PCP_DEI_SRC_CEP_EDIT_INFO = 6,
  
  SOC_PPC_EG_VLAN_EDIT_TAG_PCP_DEI_SRC_PEP_EDIT = 7,
  
  SOC_PPC_NOF_EG_VLAN_EDIT_TAG_PCP_DEI_SRCS = 8
}SOC_PPC_EG_VLAN_EDIT_TAG_PCP_DEI_SRC;

typedef enum
{
  
  SOC_PPC_EG_VLAN_EDIT_TAG_PCP_DEI_MAP_KEY_TC_DP = 0,
  
  SOC_PPC_EG_VLAN_EDIT_TAG_PCP_DEI_MAP_KEY_PCP = 1,
  
  SOC_PPC_NOF_EG_VLAN_EDIT_TAG_PCP_DEI_MAP_KEYS_PB = 2,
   
  SOC_PPC_EG_VLAN_EDIT_TAG_PCP_DEI_MAP_KEY_DSCP_EXP = SOC_PPC_NOF_EG_VLAN_EDIT_TAG_PCP_DEI_MAP_KEYS_PB, 
  
  SOC_PPC_NOF_EG_VLAN_EDIT_TAG_PCP_DEI_MAP_KEYS_ARAD = 3

}SOC_PPC_EG_VLAN_EDIT_TAG_PCP_DEI_MAP_KEY;

typedef struct
{
  SOC_SAND_MAGIC_NUM_VAR
  
  SOC_SAND_PP_VLAN_ID pvid;
  
  SOC_SAND_PP_PCP_UP up;
  
  uint32 pep_edit_profile;

} SOC_PPC_EG_VLAN_EDIT_PEP_INFO;

typedef struct
{
  SOC_SAND_MAGIC_NUM_VAR
  
  SOC_SAND_PP_ETHERNET_FRAME_VLAN_FORMAT tag_format;
   
  uint32 edit_profile;

} SOC_PPC_EG_VLAN_EDIT_COMMAND_KEY;

typedef struct
{
  SOC_SAND_MAGIC_NUM_VAR
  
  uint32 tpid_index;
  
  SOC_PPC_EG_VLAN_EDIT_TAG_VID_SRC vid_source;
  
  SOC_PPC_EG_VLAN_EDIT_TAG_PCP_DEI_SRC pcp_dei_source;

} SOC_PPC_EG_VLAN_EDIT_COMMAND_TAG_BUILD_INFO;

typedef struct
{
  SOC_SAND_MAGIC_NUM_VAR
  
  uint8 tags_to_remove;
  
  SOC_PPC_EG_VLAN_EDIT_COMMAND_TAG_BUILD_INFO inner_tag;
  
  SOC_PPC_EG_VLAN_EDIT_COMMAND_TAG_BUILD_INFO outer_tag;
  
  uint8 cep_editing;
  
  uint8 is_extender;
  
  uint32 packet_is_tagged_after_eve;

} SOC_PPC_EG_VLAN_EDIT_COMMAND_INFO;










void
  SOC_PPC_EG_VLAN_EDIT_PEP_INFO_clear(
    SOC_SAND_OUT SOC_PPC_EG_VLAN_EDIT_PEP_INFO *info
  );

void
  SOC_PPC_EG_VLAN_EDIT_COMMAND_KEY_clear(
    SOC_SAND_OUT SOC_PPC_EG_VLAN_EDIT_COMMAND_KEY *info
  );

void
  SOC_PPC_EG_VLAN_EDIT_COMMAND_TAG_BUILD_INFO_clear(
    SOC_SAND_OUT SOC_PPC_EG_VLAN_EDIT_COMMAND_TAG_BUILD_INFO *info
  );

void
  SOC_PPC_EG_VLAN_EDIT_COMMAND_INFO_clear(
    SOC_SAND_OUT SOC_PPC_EG_VLAN_EDIT_COMMAND_INFO *info
  );

#if SOC_PPC_DEBUG_IS_LVL1

const char*
  SOC_PPC_EG_VLAN_EDIT_TAG_VID_SRC_to_string(
    SOC_SAND_IN  SOC_PPC_EG_VLAN_EDIT_TAG_VID_SRC enum_val
  );

const char*
  SOC_PPC_EG_VLAN_EDIT_TAG_PCP_DEI_SRC_to_string(
    SOC_SAND_IN  SOC_PPC_EG_VLAN_EDIT_TAG_PCP_DEI_SRC enum_val
  );

const char*
  SOC_PPC_EG_VLAN_EDIT_TAG_PCP_DEI_MAP_KEY_to_string(
    SOC_SAND_IN  SOC_PPC_EG_VLAN_EDIT_TAG_PCP_DEI_MAP_KEY enum_val
  );

void
  SOC_PPC_EG_VLAN_EDIT_PEP_INFO_print(
    SOC_SAND_IN  SOC_PPC_EG_VLAN_EDIT_PEP_INFO *info
  );

void
  SOC_PPC_EG_VLAN_EDIT_COMMAND_KEY_print(
    SOC_SAND_IN  SOC_PPC_EG_VLAN_EDIT_COMMAND_KEY *info
  );

void
  SOC_PPC_EG_VLAN_EDIT_COMMAND_TAG_BUILD_INFO_print(
    SOC_SAND_IN  SOC_PPC_EG_VLAN_EDIT_COMMAND_TAG_BUILD_INFO *info
  );

void
  SOC_PPC_EG_VLAN_EDIT_COMMAND_INFO_print(
    SOC_SAND_IN  SOC_PPC_EG_VLAN_EDIT_COMMAND_INFO *info
  );

#endif 



#include <soc/dpp/SAND/Utils/sand_footer.h>


#endif

