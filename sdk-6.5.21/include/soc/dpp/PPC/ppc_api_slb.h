/* 
 * This license is set out in https://raw.githubusercontent.com/Broadcom-Network-Switching-Software/OpenBCM/master/Legal/LICENSE file.
 * 
 * Copyright 2007-2020 Broadcom Inc. All rights reserved.
 */
#if !defined(__PPC_API_SLB_INCLUDED__) && !defined(PPC_API_SLB_INTERNAL_OBJECT_LIST_ONLY)

#define __PPC_API_SLB_INCLUDED__



#include <soc/dpp/SAND/Utils/sand_header.h>

#include <soc/dpp/SAND/Management/sand_general_macros.h>
#include <soc/dpp/SAND/Management/sand_error_code.h>

#include <soc/dpp/PPC/ppc_api_general.h>


#define SOC_PPC_SLB_GLUE(a, b) a ## b
#define SOC_PPC_SLB_C_ASSERT_impl(exp, line, file) typedef char SOC_PPC_SLB_GLUE(assertion_failed_, line)[(exp) ? 1 : -1]


#define SOC_PPC_SLB_C_ASSERT(exp) SOC_PPC_SLB_C_ASSERT_impl(exp, __LINE__, __FILE__)

#define SOC_PPC_SLB_MAX_ENTRIES_FOR_GET_BLOCK 130













typedef enum {
    SOC_PPC_SLB_OBJECT_TYPE_BASE = 0,

    SOC_PPC_SLB_OBJECT_TYPE_TRAVERSE_MATCH_RULE,
    SOC_PPC_SLB_OBJECT_TYPE_TRAVERSE_MATCH_RULE_ALL_LAG,
    SOC_PPC_SLB_OBJECT_TYPE_TRAVERSE_MATCH_RULE_ALL_ECMP,
    SOC_PPC_SLB_OBJECT_TYPE_TRAVERSE_MATCH_RULE_LB_GROUP,
    SOC_PPC_SLB_OBJECT_TYPE_TRAVERSE_MATCH_RULE_LB_GROUP_LAG,
    SOC_PPC_SLB_OBJECT_TYPE_TRAVERSE_MATCH_RULE_LB_GROUP_ECMP,
    SOC_PPC_SLB_OBJECT_TYPE_TRAVERSE_MATCH_RULE_LB_GROUP_MEMBER,
    SOC_PPC_SLB_OBJECT_TYPE_TRAVERSE_MATCH_RULE_LB_GROUP_MEMBER_LAG,
    SOC_PPC_SLB_OBJECT_TYPE_TRAVERSE_MATCH_RULE_LB_GROUP_MEMBER_ECMP,

    SOC_PPC_SLB_OBJECT_TYPE_TRAVERSE_ACTION,
    SOC_PPC_SLB_OBJECT_TYPE_TRAVERSE_ACTION_COUNT,
    SOC_PPC_SLB_OBJECT_TYPE_TRAVERSE_ACTION_UPDATE,
    SOC_PPC_SLB_OBJECT_TYPE_TRAVERSE_ACTION_REMOVE,

    SOC_PPC_SLB_OBJECT_TYPE_TRAVERSE_UPDATE_VALUE,
    SOC_PPC_SLB_OBJECT_TYPE_TRAVERSE_UPDATE_VALUE_LAG_MEMBER,
    SOC_PPC_SLB_OBJECT_TYPE_TRAVERSE_UPDATE_VALUE_ECMP_MEMBER,

    SOC_PPC_SLB_OBJECT_TYPE_ENTRY_KEY,
    SOC_PPC_SLB_OBJECT_TYPE_ENTRY_VALUE,

    SOC_PPC_SLB_OBJECT_TYPE_CONFIGURATION_ITEM,
    SOC_PPC_SLB_OBJECT_TYPE_CONFIGURATION_ITEM_SLB_ENTRY_AGING_TIME_IN_SECONDS,
    SOC_PPC_SLB_OBJECT_TYPE_CONFIGURATION_ITEM_LAG_HASH_FUNCTION,
    SOC_PPC_SLB_OBJECT_TYPE_CONFIGURATION_ITEM_LAG_HASH_SEED,
    SOC_PPC_SLB_OBJECT_TYPE_CONFIGURATION_ITEM_LAG_HASH_OFFSET,
    SOC_PPC_SLB_OBJECT_TYPE_CONFIGURATION_ITEM_ECMP_HASH_SEED,
    SOC_PPC_SLB_OBJECT_TYPE_CONFIGURATION_ITEM_ECMP_HASH_KEY_OFFSET,
    SOC_PPC_SLB_OBJECT_TYPE_CONFIGURATION_ITEM_CRC_HASH_SEED,
    SOC_PPC_SLB_OBJECT_TYPE_CONFIGURATION_ITEM_CRC_HASH_MASK,
    SOC_PPC_SLB_NOF_OBJECT_TYPES
} SOC_PPC_SLB_OBJECT_TYPE;


typedef struct {
  SOC_SAND_MAGIC_NUM_VAR
  SOC_PPC_SLB_OBJECT_TYPE type;
} SOC_PPC_SLB_OBJECT;

typedef struct {
  SOC_PPC_SLB_OBJECT base;
  uint32 lag_ndx;
} SOC_PPC_SLB_LAG_GROUP;

typedef struct {
  SOC_PPC_SLB_OBJECT base;
  SOC_PPC_FEC_ID ecmp_ndx;
} SOC_PPC_SLB_ECMP_GROUP;

typedef struct {
  SOC_PPC_SLB_OBJECT base;
  uint32 lag_member_ndx;
} SOC_PPC_SLB_LAG_MEMBER;

typedef struct {
  SOC_PPC_SLB_OBJECT base;
  uint32 ecmp_member_ndx;
} SOC_PPC_SLB_ECMP_MEMBER;


typedef struct {
  SOC_PPC_SLB_OBJECT base;
} SOC_PPC_SLB_TRAVERSE_MATCH_RULE;

  
  typedef struct {
    SOC_PPC_SLB_TRAVERSE_MATCH_RULE base;
  } SOC_PPC_SLB_TRAVERSE_MATCH_RULE_ALL_LAG;

  
  typedef struct {
    SOC_PPC_SLB_TRAVERSE_MATCH_RULE base;
  } SOC_PPC_SLB_TRAVERSE_MATCH_RULE_ALL_ECMP;

  
  typedef struct {
    SOC_PPC_SLB_TRAVERSE_MATCH_RULE base;
  } SOC_PPC_SLB_TRAVERSE_MATCH_RULE_LB_GROUP;

    
    typedef struct {
      SOC_PPC_SLB_TRAVERSE_MATCH_RULE_LB_GROUP base;
      uint32 lag_ndx;
    } SOC_PPC_SLB_TRAVERSE_MATCH_RULE_LB_GROUP_LAG;

    
    typedef struct {
      SOC_PPC_SLB_TRAVERSE_MATCH_RULE_LB_GROUP base;
      SOC_PPC_FEC_ID ecmp_ndx;
    } SOC_PPC_SLB_TRAVERSE_MATCH_RULE_LB_GROUP_ECMP;

  
  typedef struct {
    SOC_PPC_SLB_TRAVERSE_MATCH_RULE base;
  } SOC_PPC_SLB_TRAVERSE_MATCH_RULE_LB_GROUP_MEMBER;

    
    typedef struct {
      SOC_PPC_SLB_TRAVERSE_MATCH_RULE_LB_GROUP_MEMBER base;
      uint32 lag_member_ndx;
    } SOC_PPC_SLB_TRAVERSE_MATCH_RULE_LB_GROUP_MEMBER_LAG;

    
    typedef struct {
      SOC_PPC_SLB_TRAVERSE_MATCH_RULE_LB_GROUP_MEMBER base;
      SOC_PPC_FEC_ID ecmp_member_ndx;
    } SOC_PPC_SLB_TRAVERSE_MATCH_RULE_LB_GROUP_MEMBER_ECMP;

typedef struct {
  SOC_PPC_SLB_OBJECT base;

} SOC_PPC_SLB_TRAVERSE_UPDATE_VALUE;

  typedef struct {
    SOC_PPC_SLB_TRAVERSE_UPDATE_VALUE base;

    
    uint32 new_lag_member_ndx;
  } SOC_PPC_SLB_TRAVERSE_UPDATE_VALUE_LAG_MEMBER;

  typedef struct {
    SOC_PPC_SLB_TRAVERSE_UPDATE_VALUE base;

    
    uint32 new_ecmp_member_ndx;
  } SOC_PPC_SLB_TRAVERSE_UPDATE_VALUE_ECMP_MEMBER;

typedef struct {
  SOC_PPC_SLB_OBJECT base;

} SOC_PPC_SLB_TRAVERSE_ACTION;

  typedef struct {
    SOC_PPC_SLB_TRAVERSE_ACTION base;
  } SOC_PPC_SLB_TRAVERSE_ACTION_COUNT;

  typedef struct {
    SOC_PPC_SLB_TRAVERSE_ACTION base;
  } SOC_PPC_SLB_TRAVERSE_ACTION_REMOVE;

  typedef struct {
    SOC_PPC_SLB_TRAVERSE_ACTION base;

    
    SOC_PPC_SLB_TRAVERSE_UPDATE_VALUE *traverse_update_value;
  } SOC_PPC_SLB_TRAVERSE_ACTION_UPDATE;


typedef struct {
  SOC_PPC_SLB_OBJECT base;

  
  
  uint64 flow_label_id;

  
  
  union {
    uint32 lag_ndx;
    SOC_PPC_FEC_ID ecmp_ndx;
  } lb_group;

  
  uint8 is_fec;

} SOC_PPC_SLB_ENTRY_KEY;

typedef struct {
  SOC_PPC_SLB_OBJECT base;

  
  uint32 lag_ndx;

  
  uint32 lag_member_ndx;
  
  
  uint8 lag_valid;

  
  SOC_PPC_FEC_ID ecmp_member_ndx;

  
  uint8 ecmp_valid;

} SOC_PPC_SLB_ENTRY_VALUE;


typedef struct {
  SOC_PPC_SLB_OBJECT base;
} SOC_PPC_SLB_CONFIGURATION_ITEM;





typedef struct {
  SOC_PPC_SLB_CONFIGURATION_ITEM base;

  uint32 age_time_in_seconds;
} SOC_PPC_SLB_CONFIGURATION_ITEM_SLB_ENTRY_AGING_TIME_IN_SECONDS;


typedef struct {
  SOC_PPC_SLB_CONFIGURATION_ITEM base;

  
  uint32 hash_function;
} SOC_PPC_SLB_CONFIGURATION_ITEM_LAG_HASH_FUNCTION;


typedef struct {
  SOC_PPC_SLB_CONFIGURATION_ITEM base;

  uint16 seed;
} SOC_PPC_SLB_CONFIGURATION_ITEM_LAG_HASH_SEED;


typedef struct {
  SOC_PPC_SLB_CONFIGURATION_ITEM base;

  
  uint8 offset;
} SOC_PPC_SLB_CONFIGURATION_ITEM_LAG_HASH_OFFSET;


typedef struct {
  SOC_PPC_SLB_CONFIGURATION_ITEM base;

  uint16 seed;
} SOC_PPC_SLB_CONFIGURATION_ITEM_ECMP_HASH_SEED;


typedef struct {
  SOC_PPC_SLB_CONFIGURATION_ITEM base;

  
  uint8 offset;

  
  uint8 index;

} SOC_PPC_SLB_CONFIGURATION_ITEM_ECMP_HASH_KEY_OFFSET;


typedef struct {
  SOC_PPC_SLB_CONFIGURATION_ITEM base;

  uint16 seed;
} SOC_PPC_SLB_CONFIGURATION_ITEM_CRC_HASH_SEED;


typedef struct {
  SOC_PPC_SLB_CONFIGURATION_ITEM base;

  uint16 mask;

  
  uint8 index;
} SOC_PPC_SLB_CONFIGURATION_ITEM_CRC_HASH_MASK;



void SOC_PPC_SLB_clear(SOC_SAND_OUT SOC_PPC_SLB_OBJECT *object, SOC_SAND_IN SOC_PPC_SLB_OBJECT_TYPE type);
#define SOC_PPC_SLB_CLEAR(object, type) SOC_PPC_SLB_clear((SOC_PPC_SLB_OBJECT*)object, type)
#define SOC_PPC_SLB_DOWNCAST(object, type) ((type *)object)

#if SOC_PPC_DEBUG_IS_LVL1

void SOC_PPC_SLB_OBJECT_print(SOC_SAND_IN  SOC_PPC_SLB_OBJECT *object);

#endif 




typedef uint32 (*soc_ppc_slb_traverse_type_tree_cb)(SOC_SAND_IN SOC_PPC_SLB_OBJECT *object, SOC_SAND_IN SOC_PPC_SLB_OBJECT_TYPE type, void *opaque);


uint32 soc_ppc_slb_object_is(SOC_SAND_IN SOC_PPC_SLB_OBJECT *object, SOC_SAND_IN SOC_PPC_SLB_OBJECT_TYPE type, SOC_SAND_OUT uint8 *is_type);


uint32 soc_ppc_slb_object_traverse_type_tree(SOC_SAND_IN SOC_PPC_SLB_OBJECT *object, SOC_SAND_IN soc_ppc_slb_traverse_type_tree_cb callback, SOC_SAND_IN void *opaque);
uint32 soc_ppc_slb_object_type(SOC_SAND_IN SOC_PPC_SLB_OBJECT *object, SOC_SAND_OUT SOC_PPC_SLB_OBJECT_TYPE *type);


uint32 soc_ppc_slb_init(void);

#include <soc/dpp/SAND/Utils/sand_footer.h>

#elif defined(PPC_API_SLB_INTERNAL_OBJECT_LIST_ONLY)


#ifndef PPC_API_SLB_INTERNAL_OBJECT_LIST_ONLY_OBJECT_ACTION 
# error "PPC_API_SLB_INTERNAL_OBJECT_LIST_ONLY_OBJECT_ACTION must be defined"
#endif



PPC_API_SLB_INTERNAL_OBJECT_LIST_ONLY_OBJECT_ACTION(TRAVERSE_MATCH_RULE)
PPC_API_SLB_INTERNAL_OBJECT_LIST_ONLY_OBJECT_ACTION(TRAVERSE_MATCH_RULE_ALL_LAG)
PPC_API_SLB_INTERNAL_OBJECT_LIST_ONLY_OBJECT_ACTION(TRAVERSE_MATCH_RULE_ALL_ECMP)
PPC_API_SLB_INTERNAL_OBJECT_LIST_ONLY_OBJECT_ACTION(TRAVERSE_MATCH_RULE_LB_GROUP)
PPC_API_SLB_INTERNAL_OBJECT_LIST_ONLY_OBJECT_ACTION(TRAVERSE_MATCH_RULE_LB_GROUP_LAG)
PPC_API_SLB_INTERNAL_OBJECT_LIST_ONLY_OBJECT_ACTION(TRAVERSE_MATCH_RULE_LB_GROUP_ECMP)
PPC_API_SLB_INTERNAL_OBJECT_LIST_ONLY_OBJECT_ACTION(TRAVERSE_MATCH_RULE_LB_GROUP_MEMBER)
PPC_API_SLB_INTERNAL_OBJECT_LIST_ONLY_OBJECT_ACTION(TRAVERSE_MATCH_RULE_LB_GROUP_MEMBER_LAG)
PPC_API_SLB_INTERNAL_OBJECT_LIST_ONLY_OBJECT_ACTION(TRAVERSE_MATCH_RULE_LB_GROUP_MEMBER_ECMP)

PPC_API_SLB_INTERNAL_OBJECT_LIST_ONLY_OBJECT_ACTION(TRAVERSE_ACTION)
PPC_API_SLB_INTERNAL_OBJECT_LIST_ONLY_OBJECT_ACTION(TRAVERSE_ACTION_COUNT)
PPC_API_SLB_INTERNAL_OBJECT_LIST_ONLY_OBJECT_ACTION(TRAVERSE_ACTION_REMOVE)
PPC_API_SLB_INTERNAL_OBJECT_LIST_ONLY_OBJECT_ACTION(TRAVERSE_ACTION_UPDATE)

PPC_API_SLB_INTERNAL_OBJECT_LIST_ONLY_OBJECT_ACTION(TRAVERSE_UPDATE_VALUE)
PPC_API_SLB_INTERNAL_OBJECT_LIST_ONLY_OBJECT_ACTION(TRAVERSE_UPDATE_VALUE_LAG_MEMBER)
PPC_API_SLB_INTERNAL_OBJECT_LIST_ONLY_OBJECT_ACTION(TRAVERSE_UPDATE_VALUE_ECMP_MEMBER)

PPC_API_SLB_INTERNAL_OBJECT_LIST_ONLY_OBJECT_ACTION(ENTRY_KEY)
PPC_API_SLB_INTERNAL_OBJECT_LIST_ONLY_OBJECT_ACTION(ENTRY_VALUE)

PPC_API_SLB_INTERNAL_OBJECT_LIST_ONLY_OBJECT_ACTION(CONFIGURATION_ITEM)
PPC_API_SLB_INTERNAL_OBJECT_LIST_ONLY_OBJECT_ACTION(CONFIGURATION_ITEM_SLB_ENTRY_AGING_TIME_IN_SECONDS)
PPC_API_SLB_INTERNAL_OBJECT_LIST_ONLY_OBJECT_ACTION(CONFIGURATION_ITEM_LAG_HASH_FUNCTION)
PPC_API_SLB_INTERNAL_OBJECT_LIST_ONLY_OBJECT_ACTION(CONFIGURATION_ITEM_LAG_HASH_SEED)
PPC_API_SLB_INTERNAL_OBJECT_LIST_ONLY_OBJECT_ACTION(CONFIGURATION_ITEM_LAG_HASH_OFFSET)
PPC_API_SLB_INTERNAL_OBJECT_LIST_ONLY_OBJECT_ACTION(CONFIGURATION_ITEM_ECMP_HASH_SEED)
PPC_API_SLB_INTERNAL_OBJECT_LIST_ONLY_OBJECT_ACTION(CONFIGURATION_ITEM_ECMP_HASH_KEY_OFFSET)
PPC_API_SLB_INTERNAL_OBJECT_LIST_ONLY_OBJECT_ACTION(CONFIGURATION_ITEM_CRC_HASH_SEED)
PPC_API_SLB_INTERNAL_OBJECT_LIST_ONLY_OBJECT_ACTION(CONFIGURATION_ITEM_CRC_HASH_MASK)

#endif 

