#ifndef __BCMI_BLACKHAWK7_V1L8P1_XGXS_DEFS_H__
#define __BCMI_BLACKHAWK7_V1L8P1_XGXS_DEFS_H__
/*******************************************************************************
 *
 * 
 * This license is set out in https://raw.githubusercontent.com/Broadcom-Network-Switching-Software/OpenBCM/master/Legal/LICENSE file.
 * 
 * Copyright 2007-2020 Broadcom Inc. All rights reserved.
 *
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated from the registers file.
 * Edits to this file will be lost when it is regenerated.
 *
 * Definition file for the BCMI_BLACKHAWK7_V1L8P1_XGXS.
 * This file provides all basic definitions required to program the BCMI_BLACKHAWK7_V1L8P1_XGXS.
 *
 * This file is autogenerated. Please do not edit.
 */

#ifndef _DV_TB_
#include <phymod/acc/phymod_tsc_iblk.h>
#endif /* _DV_TB_ */

/*******************************************************************************
 *
 *                    CHIP DEFINITIONS BEGIN HERE
 */



/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  LNKTRNIT_BASE_R_PMD_CTL
 * BLOCKS:   LINKTRN_IEEE_TX
 * REGADDR:  0x0096
 * DEVAD:    1
 * DESC:     BASE-R PMD control register 150
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     LINKTRN_IEEE_RESTART_TRAINING 1 = Restart 10GBASE-KR linktrn training0 = Normal operation(self clearing)
 *     LINKTRN_IEEE_TRAINING_ENABLE 1 = Enable the 10GBASE-KR start-up protocol0 = Disable the 10GBASE-KR start-up protocol
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIT_BASE_R_PMD_CTLr (0x00010096 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIT_BASE_R_PMD_CTLr_SIZE 4

/*
 * This structure should be used to declare and program LNKTRNIT_BASE_R_PMD_CTL.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIT_BASE_R_PMD_CTLr_s {
	uint32_t v[1];
	uint32_t lnktrnit_base_r_pmd_ctl[1];
	uint32_t _lnktrnit_base_r_pmd_ctl;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIT_BASE_R_PMD_CTLr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIT_BASE_R_PMD_CTLr_CLR(r) (r).lnktrnit_base_r_pmd_ctl[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIT_BASE_R_PMD_CTLr_SET(r,d) (r).lnktrnit_base_r_pmd_ctl[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIT_BASE_R_PMD_CTLr_GET(r) (r).lnktrnit_base_r_pmd_ctl[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIT_BASE_R_PMD_CTLr_LINKTRN_IEEE_TRAINING_ENABLEf_GET(r) ((((r).lnktrnit_base_r_pmd_ctl[0]) >> 1) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIT_BASE_R_PMD_CTLr_LINKTRN_IEEE_TRAINING_ENABLEf_SET(r,f) (r).lnktrnit_base_r_pmd_ctl[0]=(((r).lnktrnit_base_r_pmd_ctl[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIT_BASE_R_PMD_CTLr_LINKTRN_IEEE_RESTART_TRAININGf_GET(r) (((r).lnktrnit_base_r_pmd_ctl[0]) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIT_BASE_R_PMD_CTLr_LINKTRN_IEEE_RESTART_TRAININGf_SET(r,f) (r).lnktrnit_base_r_pmd_ctl[0]=(((r).lnktrnit_base_r_pmd_ctl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access LNKTRNIT_BASE_R_PMD_CTL.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_LNKTRNIT_BASE_R_PMD_CTLr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIT_BASE_R_PMD_CTLr,(_r._lnktrnit_base_r_pmd_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_LNKTRNIT_BASE_R_PMD_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIT_BASE_R_PMD_CTLr,(_r._lnktrnit_base_r_pmd_ctl)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_LNKTRNIT_BASE_R_PMD_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIT_BASE_R_PMD_CTLr,(_r._lnktrnit_base_r_pmd_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_LNKTRNIT_BASE_R_PMD_CTLr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIT_BASE_R_PMD_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._lnktrnit_base_r_pmd_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_LNKTRNIT_BASE_R_PMD_CTLr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIT_BASE_R_PMD_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._lnktrnit_base_r_pmd_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_LNKTRNIT_BASE_R_PMD_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIT_BASE_R_PMD_CTLr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._lnktrnit_base_r_pmd_ctl))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define LNKTRNIT_BASE_R_PMD_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIT_BASE_R_PMD_CTLr
#define LNKTRNIT_BASE_R_PMD_CTLr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIT_BASE_R_PMD_CTLr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIT_BASE_R_PMD_CTLr_t LNKTRNIT_BASE_R_PMD_CTLr_t;
#define LNKTRNIT_BASE_R_PMD_CTLr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIT_BASE_R_PMD_CTLr_CLR
#define LNKTRNIT_BASE_R_PMD_CTLr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIT_BASE_R_PMD_CTLr_SET
#define LNKTRNIT_BASE_R_PMD_CTLr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIT_BASE_R_PMD_CTLr_GET
#define LNKTRNIT_BASE_R_PMD_CTLr_LINKTRN_IEEE_TRAINING_ENABLEf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIT_BASE_R_PMD_CTLr_LINKTRN_IEEE_TRAINING_ENABLEf_GET
#define LNKTRNIT_BASE_R_PMD_CTLr_LINKTRN_IEEE_TRAINING_ENABLEf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIT_BASE_R_PMD_CTLr_LINKTRN_IEEE_TRAINING_ENABLEf_SET
#define LNKTRNIT_BASE_R_PMD_CTLr_LINKTRN_IEEE_RESTART_TRAININGf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIT_BASE_R_PMD_CTLr_LINKTRN_IEEE_RESTART_TRAININGf_GET
#define LNKTRNIT_BASE_R_PMD_CTLr_LINKTRN_IEEE_RESTART_TRAININGf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIT_BASE_R_PMD_CTLr_LINKTRN_IEEE_RESTART_TRAININGf_SET
#define READ_LNKTRNIT_BASE_R_PMD_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_LNKTRNIT_BASE_R_PMD_CTLr
#define WRITE_LNKTRNIT_BASE_R_PMD_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_LNKTRNIT_BASE_R_PMD_CTLr
#define MODIFY_LNKTRNIT_BASE_R_PMD_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_LNKTRNIT_BASE_R_PMD_CTLr
#define READLN_LNKTRNIT_BASE_R_PMD_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_LNKTRNIT_BASE_R_PMD_CTLr
#define WRITELN_LNKTRNIT_BASE_R_PMD_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_LNKTRNIT_BASE_R_PMD_CTLr
#define WRITEALL_LNKTRNIT_BASE_R_PMD_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_LNKTRNIT_BASE_R_PMD_CTLr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIT_BASE_R_PMD_CTLr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  LNKTRNIT_BASE_R_PMD_STS
 * BLOCKS:   LINKTRN_IEEE_TX
 * REGADDR:  0x0097
 * DEVAD:    1
 * DESC:     BASE-R PMD status register 151
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     LINKTRN_IEEE_RECEIVER_STATUS 1 = Receiver trained and ready to receive data0 = Receiver training
 *     LINKTRN_IEEE_FRAME_LOCK 1 = Training frame delineation detected0 = Training frame delineation not detected
 *     LINKTRN_IEEE_TRAINING_STATUS 1 = Start-up protocol in progress0 = Start-up protocol complete
 *     LINKTRN_IEEE_TRAINING_FAILURE 1 = Training failure has been detected0 = Training failure has not been detected
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIT_BASE_R_PMD_STSr (0x00010097 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIT_BASE_R_PMD_STSr_SIZE 4

/*
 * This structure should be used to declare and program LNKTRNIT_BASE_R_PMD_STS.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIT_BASE_R_PMD_STSr_s {
	uint32_t v[1];
	uint32_t lnktrnit_base_r_pmd_sts[1];
	uint32_t _lnktrnit_base_r_pmd_sts;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIT_BASE_R_PMD_STSr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIT_BASE_R_PMD_STSr_CLR(r) (r).lnktrnit_base_r_pmd_sts[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIT_BASE_R_PMD_STSr_SET(r,d) (r).lnktrnit_base_r_pmd_sts[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIT_BASE_R_PMD_STSr_GET(r) (r).lnktrnit_base_r_pmd_sts[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIT_BASE_R_PMD_STSr_LINKTRN_IEEE_TRAINING_FAILUREf_GET(r) ((((r).lnktrnit_base_r_pmd_sts[0]) >> 3) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIT_BASE_R_PMD_STSr_LINKTRN_IEEE_TRAINING_FAILUREf_SET(r,f) (r).lnktrnit_base_r_pmd_sts[0]=(((r).lnktrnit_base_r_pmd_sts[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIT_BASE_R_PMD_STSr_LINKTRN_IEEE_TRAINING_STATUSf_GET(r) ((((r).lnktrnit_base_r_pmd_sts[0]) >> 2) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIT_BASE_R_PMD_STSr_LINKTRN_IEEE_TRAINING_STATUSf_SET(r,f) (r).lnktrnit_base_r_pmd_sts[0]=(((r).lnktrnit_base_r_pmd_sts[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIT_BASE_R_PMD_STSr_LINKTRN_IEEE_FRAME_LOCKf_GET(r) ((((r).lnktrnit_base_r_pmd_sts[0]) >> 1) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIT_BASE_R_PMD_STSr_LINKTRN_IEEE_FRAME_LOCKf_SET(r,f) (r).lnktrnit_base_r_pmd_sts[0]=(((r).lnktrnit_base_r_pmd_sts[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIT_BASE_R_PMD_STSr_LINKTRN_IEEE_RECEIVER_STATUSf_GET(r) (((r).lnktrnit_base_r_pmd_sts[0]) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIT_BASE_R_PMD_STSr_LINKTRN_IEEE_RECEIVER_STATUSf_SET(r,f) (r).lnktrnit_base_r_pmd_sts[0]=(((r).lnktrnit_base_r_pmd_sts[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access LNKTRNIT_BASE_R_PMD_STS.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_LNKTRNIT_BASE_R_PMD_STSr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIT_BASE_R_PMD_STSr,(_r._lnktrnit_base_r_pmd_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_LNKTRNIT_BASE_R_PMD_STSr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIT_BASE_R_PMD_STSr,(_r._lnktrnit_base_r_pmd_sts)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_LNKTRNIT_BASE_R_PMD_STSr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIT_BASE_R_PMD_STSr,(_r._lnktrnit_base_r_pmd_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_LNKTRNIT_BASE_R_PMD_STSr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIT_BASE_R_PMD_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._lnktrnit_base_r_pmd_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_LNKTRNIT_BASE_R_PMD_STSr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIT_BASE_R_PMD_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._lnktrnit_base_r_pmd_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_LNKTRNIT_BASE_R_PMD_STSr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIT_BASE_R_PMD_STSr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._lnktrnit_base_r_pmd_sts))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define LNKTRNIT_BASE_R_PMD_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIT_BASE_R_PMD_STSr
#define LNKTRNIT_BASE_R_PMD_STSr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIT_BASE_R_PMD_STSr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIT_BASE_R_PMD_STSr_t LNKTRNIT_BASE_R_PMD_STSr_t;
#define LNKTRNIT_BASE_R_PMD_STSr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIT_BASE_R_PMD_STSr_CLR
#define LNKTRNIT_BASE_R_PMD_STSr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIT_BASE_R_PMD_STSr_SET
#define LNKTRNIT_BASE_R_PMD_STSr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIT_BASE_R_PMD_STSr_GET
#define LNKTRNIT_BASE_R_PMD_STSr_LINKTRN_IEEE_TRAINING_FAILUREf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIT_BASE_R_PMD_STSr_LINKTRN_IEEE_TRAINING_FAILUREf_GET
#define LNKTRNIT_BASE_R_PMD_STSr_LINKTRN_IEEE_TRAINING_FAILUREf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIT_BASE_R_PMD_STSr_LINKTRN_IEEE_TRAINING_FAILUREf_SET
#define LNKTRNIT_BASE_R_PMD_STSr_LINKTRN_IEEE_TRAINING_STATUSf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIT_BASE_R_PMD_STSr_LINKTRN_IEEE_TRAINING_STATUSf_GET
#define LNKTRNIT_BASE_R_PMD_STSr_LINKTRN_IEEE_TRAINING_STATUSf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIT_BASE_R_PMD_STSr_LINKTRN_IEEE_TRAINING_STATUSf_SET
#define LNKTRNIT_BASE_R_PMD_STSr_LINKTRN_IEEE_FRAME_LOCKf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIT_BASE_R_PMD_STSr_LINKTRN_IEEE_FRAME_LOCKf_GET
#define LNKTRNIT_BASE_R_PMD_STSr_LINKTRN_IEEE_FRAME_LOCKf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIT_BASE_R_PMD_STSr_LINKTRN_IEEE_FRAME_LOCKf_SET
#define LNKTRNIT_BASE_R_PMD_STSr_LINKTRN_IEEE_RECEIVER_STATUSf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIT_BASE_R_PMD_STSr_LINKTRN_IEEE_RECEIVER_STATUSf_GET
#define LNKTRNIT_BASE_R_PMD_STSr_LINKTRN_IEEE_RECEIVER_STATUSf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIT_BASE_R_PMD_STSr_LINKTRN_IEEE_RECEIVER_STATUSf_SET
#define READ_LNKTRNIT_BASE_R_PMD_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_LNKTRNIT_BASE_R_PMD_STSr
#define WRITE_LNKTRNIT_BASE_R_PMD_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_LNKTRNIT_BASE_R_PMD_STSr
#define MODIFY_LNKTRNIT_BASE_R_PMD_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_LNKTRNIT_BASE_R_PMD_STSr
#define READLN_LNKTRNIT_BASE_R_PMD_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_LNKTRNIT_BASE_R_PMD_STSr
#define WRITELN_LNKTRNIT_BASE_R_PMD_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_LNKTRNIT_BASE_R_PMD_STSr
#define WRITEALL_LNKTRNIT_BASE_R_PMD_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_LNKTRNIT_BASE_R_PMD_STSr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIT_BASE_R_PMD_STSr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  LNKTRNIR_BASE_R_LP_COEFF_UPD
 * BLOCKS:   LINKTRN_IEEE_RX
 * REGADDR:  0x0098
 * DEVAD:    1
 * DESC:     BASE-R LP coeff update register 152
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     LINKTRN_IEEE_LP_COEFF_UPDATE This register reflects the first 16-bit Word of the training framemost recently recieived from the Link PartnerThis register is not writeable when linktrn training is disabled asindicated in the IEEE standardlinktrn supports link training for IEEE/OIF/FC standardsPlease see the appropriate standards for register bit definitions.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIR_BASE_R_LP_COEFF_UPDr (0x00010098 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIR_BASE_R_LP_COEFF_UPDr_SIZE 4

/*
 * This structure should be used to declare and program LNKTRNIR_BASE_R_LP_COEFF_UPD.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIR_BASE_R_LP_COEFF_UPDr_s {
	uint32_t v[1];
	uint32_t lnktrnir_base_r_lp_coeff_upd[1];
	uint32_t _lnktrnir_base_r_lp_coeff_upd;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIR_BASE_R_LP_COEFF_UPDr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIR_BASE_R_LP_COEFF_UPDr_CLR(r) (r).lnktrnir_base_r_lp_coeff_upd[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIR_BASE_R_LP_COEFF_UPDr_SET(r,d) (r).lnktrnir_base_r_lp_coeff_upd[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIR_BASE_R_LP_COEFF_UPDr_GET(r) (r).lnktrnir_base_r_lp_coeff_upd[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIR_BASE_R_LP_COEFF_UPDr_LINKTRN_IEEE_LP_COEFF_UPDATEf_GET(r) (((r).lnktrnir_base_r_lp_coeff_upd[0]) & 0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIR_BASE_R_LP_COEFF_UPDr_LINKTRN_IEEE_LP_COEFF_UPDATEf_SET(r,f) (r).lnktrnir_base_r_lp_coeff_upd[0]=(((r).lnktrnir_base_r_lp_coeff_upd[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access LNKTRNIR_BASE_R_LP_COEFF_UPD.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_LNKTRNIR_BASE_R_LP_COEFF_UPDr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIR_BASE_R_LP_COEFF_UPDr,(_r._lnktrnir_base_r_lp_coeff_upd))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_LNKTRNIR_BASE_R_LP_COEFF_UPDr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIR_BASE_R_LP_COEFF_UPDr,(_r._lnktrnir_base_r_lp_coeff_upd)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_LNKTRNIR_BASE_R_LP_COEFF_UPDr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIR_BASE_R_LP_COEFF_UPDr,(_r._lnktrnir_base_r_lp_coeff_upd))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_LNKTRNIR_BASE_R_LP_COEFF_UPDr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIR_BASE_R_LP_COEFF_UPDr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._lnktrnir_base_r_lp_coeff_upd))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_LNKTRNIR_BASE_R_LP_COEFF_UPDr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIR_BASE_R_LP_COEFF_UPDr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._lnktrnir_base_r_lp_coeff_upd))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_LNKTRNIR_BASE_R_LP_COEFF_UPDr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIR_BASE_R_LP_COEFF_UPDr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._lnktrnir_base_r_lp_coeff_upd))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define LNKTRNIR_BASE_R_LP_COEFF_UPDr BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIR_BASE_R_LP_COEFF_UPDr
#define LNKTRNIR_BASE_R_LP_COEFF_UPDr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIR_BASE_R_LP_COEFF_UPDr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIR_BASE_R_LP_COEFF_UPDr_t LNKTRNIR_BASE_R_LP_COEFF_UPDr_t;
#define LNKTRNIR_BASE_R_LP_COEFF_UPDr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIR_BASE_R_LP_COEFF_UPDr_CLR
#define LNKTRNIR_BASE_R_LP_COEFF_UPDr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIR_BASE_R_LP_COEFF_UPDr_SET
#define LNKTRNIR_BASE_R_LP_COEFF_UPDr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIR_BASE_R_LP_COEFF_UPDr_GET
#define LNKTRNIR_BASE_R_LP_COEFF_UPDr_LINKTRN_IEEE_LP_COEFF_UPDATEf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIR_BASE_R_LP_COEFF_UPDr_LINKTRN_IEEE_LP_COEFF_UPDATEf_GET
#define LNKTRNIR_BASE_R_LP_COEFF_UPDr_LINKTRN_IEEE_LP_COEFF_UPDATEf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIR_BASE_R_LP_COEFF_UPDr_LINKTRN_IEEE_LP_COEFF_UPDATEf_SET
#define READ_LNKTRNIR_BASE_R_LP_COEFF_UPDr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_LNKTRNIR_BASE_R_LP_COEFF_UPDr
#define WRITE_LNKTRNIR_BASE_R_LP_COEFF_UPDr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_LNKTRNIR_BASE_R_LP_COEFF_UPDr
#define MODIFY_LNKTRNIR_BASE_R_LP_COEFF_UPDr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_LNKTRNIR_BASE_R_LP_COEFF_UPDr
#define READLN_LNKTRNIR_BASE_R_LP_COEFF_UPDr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_LNKTRNIR_BASE_R_LP_COEFF_UPDr
#define WRITELN_LNKTRNIR_BASE_R_LP_COEFF_UPDr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_LNKTRNIR_BASE_R_LP_COEFF_UPDr
#define WRITEALL_LNKTRNIR_BASE_R_LP_COEFF_UPDr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_LNKTRNIR_BASE_R_LP_COEFF_UPDr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIR_BASE_R_LP_COEFF_UPDr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  LNKTRNIR_BASE_R_LP_STS_REP
 * BLOCKS:   LINKTRN_IEEE_RX
 * REGADDR:  0x0099
 * DEVAD:    1
 * DESC:     BASE-R LP status report register 153
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     LINKTRN_IEEE_LP_STATUS_REPORT This register reflects the second 16-bit Word of the training framemost recently recieived from the Link Partnerlinktrn supports link training for IEEE/OIF/FC standardsPlease see the appropriate standards for register bit definitions.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIR_BASE_R_LP_STS_REPr (0x00010099 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIR_BASE_R_LP_STS_REPr_SIZE 4

/*
 * This structure should be used to declare and program LNKTRNIR_BASE_R_LP_STS_REP.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIR_BASE_R_LP_STS_REPr_s {
	uint32_t v[1];
	uint32_t lnktrnir_base_r_lp_sts_rep[1];
	uint32_t _lnktrnir_base_r_lp_sts_rep;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIR_BASE_R_LP_STS_REPr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIR_BASE_R_LP_STS_REPr_CLR(r) (r).lnktrnir_base_r_lp_sts_rep[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIR_BASE_R_LP_STS_REPr_SET(r,d) (r).lnktrnir_base_r_lp_sts_rep[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIR_BASE_R_LP_STS_REPr_GET(r) (r).lnktrnir_base_r_lp_sts_rep[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIR_BASE_R_LP_STS_REPr_LINKTRN_IEEE_LP_STATUS_REPORTf_GET(r) (((r).lnktrnir_base_r_lp_sts_rep[0]) & 0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIR_BASE_R_LP_STS_REPr_LINKTRN_IEEE_LP_STATUS_REPORTf_SET(r,f) (r).lnktrnir_base_r_lp_sts_rep[0]=(((r).lnktrnir_base_r_lp_sts_rep[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access LNKTRNIR_BASE_R_LP_STS_REP.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_LNKTRNIR_BASE_R_LP_STS_REPr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIR_BASE_R_LP_STS_REPr,(_r._lnktrnir_base_r_lp_sts_rep))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_LNKTRNIR_BASE_R_LP_STS_REPr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIR_BASE_R_LP_STS_REPr,(_r._lnktrnir_base_r_lp_sts_rep)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_LNKTRNIR_BASE_R_LP_STS_REPr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIR_BASE_R_LP_STS_REPr,(_r._lnktrnir_base_r_lp_sts_rep))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_LNKTRNIR_BASE_R_LP_STS_REPr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIR_BASE_R_LP_STS_REPr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._lnktrnir_base_r_lp_sts_rep))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_LNKTRNIR_BASE_R_LP_STS_REPr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIR_BASE_R_LP_STS_REPr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._lnktrnir_base_r_lp_sts_rep))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_LNKTRNIR_BASE_R_LP_STS_REPr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIR_BASE_R_LP_STS_REPr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._lnktrnir_base_r_lp_sts_rep))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define LNKTRNIR_BASE_R_LP_STS_REPr BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIR_BASE_R_LP_STS_REPr
#define LNKTRNIR_BASE_R_LP_STS_REPr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIR_BASE_R_LP_STS_REPr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIR_BASE_R_LP_STS_REPr_t LNKTRNIR_BASE_R_LP_STS_REPr_t;
#define LNKTRNIR_BASE_R_LP_STS_REPr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIR_BASE_R_LP_STS_REPr_CLR
#define LNKTRNIR_BASE_R_LP_STS_REPr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIR_BASE_R_LP_STS_REPr_SET
#define LNKTRNIR_BASE_R_LP_STS_REPr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIR_BASE_R_LP_STS_REPr_GET
#define LNKTRNIR_BASE_R_LP_STS_REPr_LINKTRN_IEEE_LP_STATUS_REPORTf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIR_BASE_R_LP_STS_REPr_LINKTRN_IEEE_LP_STATUS_REPORTf_GET
#define LNKTRNIR_BASE_R_LP_STS_REPr_LINKTRN_IEEE_LP_STATUS_REPORTf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIR_BASE_R_LP_STS_REPr_LINKTRN_IEEE_LP_STATUS_REPORTf_SET
#define READ_LNKTRNIR_BASE_R_LP_STS_REPr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_LNKTRNIR_BASE_R_LP_STS_REPr
#define WRITE_LNKTRNIR_BASE_R_LP_STS_REPr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_LNKTRNIR_BASE_R_LP_STS_REPr
#define MODIFY_LNKTRNIR_BASE_R_LP_STS_REPr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_LNKTRNIR_BASE_R_LP_STS_REPr
#define READLN_LNKTRNIR_BASE_R_LP_STS_REPr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_LNKTRNIR_BASE_R_LP_STS_REPr
#define WRITELN_LNKTRNIR_BASE_R_LP_STS_REPr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_LNKTRNIR_BASE_R_LP_STS_REPr
#define WRITEALL_LNKTRNIR_BASE_R_LP_STS_REPr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_LNKTRNIR_BASE_R_LP_STS_REPr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIR_BASE_R_LP_STS_REPr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  LNKTRNIT_BASE_R_LD_COEFF_UPD
 * BLOCKS:   LINKTRN_IEEE_TX
 * REGADDR:  0x009a
 * DEVAD:    1
 * DESC:     BASE-R LD coeff update register 154
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     LINKTRN_IEEE_LD_COEFF_UPDATE This register reflects the first 16-bit Word of the outgoing training framesent by the Local DeviceThis register is not writeablelinktrn supports link training for IEEE/OIF/FC standardsPlease see the appropriate standards for register bit definitions.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIT_BASE_R_LD_COEFF_UPDr (0x0001009a | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIT_BASE_R_LD_COEFF_UPDr_SIZE 4

/*
 * This structure should be used to declare and program LNKTRNIT_BASE_R_LD_COEFF_UPD.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIT_BASE_R_LD_COEFF_UPDr_s {
	uint32_t v[1];
	uint32_t lnktrnit_base_r_ld_coeff_upd[1];
	uint32_t _lnktrnit_base_r_ld_coeff_upd;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIT_BASE_R_LD_COEFF_UPDr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIT_BASE_R_LD_COEFF_UPDr_CLR(r) (r).lnktrnit_base_r_ld_coeff_upd[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIT_BASE_R_LD_COEFF_UPDr_SET(r,d) (r).lnktrnit_base_r_ld_coeff_upd[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIT_BASE_R_LD_COEFF_UPDr_GET(r) (r).lnktrnit_base_r_ld_coeff_upd[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIT_BASE_R_LD_COEFF_UPDr_LINKTRN_IEEE_LD_COEFF_UPDATEf_GET(r) (((r).lnktrnit_base_r_ld_coeff_upd[0]) & 0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIT_BASE_R_LD_COEFF_UPDr_LINKTRN_IEEE_LD_COEFF_UPDATEf_SET(r,f) (r).lnktrnit_base_r_ld_coeff_upd[0]=(((r).lnktrnit_base_r_ld_coeff_upd[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access LNKTRNIT_BASE_R_LD_COEFF_UPD.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_LNKTRNIT_BASE_R_LD_COEFF_UPDr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIT_BASE_R_LD_COEFF_UPDr,(_r._lnktrnit_base_r_ld_coeff_upd))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_LNKTRNIT_BASE_R_LD_COEFF_UPDr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIT_BASE_R_LD_COEFF_UPDr,(_r._lnktrnit_base_r_ld_coeff_upd)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_LNKTRNIT_BASE_R_LD_COEFF_UPDr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIT_BASE_R_LD_COEFF_UPDr,(_r._lnktrnit_base_r_ld_coeff_upd))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_LNKTRNIT_BASE_R_LD_COEFF_UPDr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIT_BASE_R_LD_COEFF_UPDr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._lnktrnit_base_r_ld_coeff_upd))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_LNKTRNIT_BASE_R_LD_COEFF_UPDr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIT_BASE_R_LD_COEFF_UPDr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._lnktrnit_base_r_ld_coeff_upd))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_LNKTRNIT_BASE_R_LD_COEFF_UPDr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIT_BASE_R_LD_COEFF_UPDr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._lnktrnit_base_r_ld_coeff_upd))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define LNKTRNIT_BASE_R_LD_COEFF_UPDr BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIT_BASE_R_LD_COEFF_UPDr
#define LNKTRNIT_BASE_R_LD_COEFF_UPDr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIT_BASE_R_LD_COEFF_UPDr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIT_BASE_R_LD_COEFF_UPDr_t LNKTRNIT_BASE_R_LD_COEFF_UPDr_t;
#define LNKTRNIT_BASE_R_LD_COEFF_UPDr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIT_BASE_R_LD_COEFF_UPDr_CLR
#define LNKTRNIT_BASE_R_LD_COEFF_UPDr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIT_BASE_R_LD_COEFF_UPDr_SET
#define LNKTRNIT_BASE_R_LD_COEFF_UPDr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIT_BASE_R_LD_COEFF_UPDr_GET
#define LNKTRNIT_BASE_R_LD_COEFF_UPDr_LINKTRN_IEEE_LD_COEFF_UPDATEf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIT_BASE_R_LD_COEFF_UPDr_LINKTRN_IEEE_LD_COEFF_UPDATEf_GET
#define LNKTRNIT_BASE_R_LD_COEFF_UPDr_LINKTRN_IEEE_LD_COEFF_UPDATEf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIT_BASE_R_LD_COEFF_UPDr_LINKTRN_IEEE_LD_COEFF_UPDATEf_SET
#define READ_LNKTRNIT_BASE_R_LD_COEFF_UPDr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_LNKTRNIT_BASE_R_LD_COEFF_UPDr
#define WRITE_LNKTRNIT_BASE_R_LD_COEFF_UPDr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_LNKTRNIT_BASE_R_LD_COEFF_UPDr
#define MODIFY_LNKTRNIT_BASE_R_LD_COEFF_UPDr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_LNKTRNIT_BASE_R_LD_COEFF_UPDr
#define READLN_LNKTRNIT_BASE_R_LD_COEFF_UPDr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_LNKTRNIT_BASE_R_LD_COEFF_UPDr
#define WRITELN_LNKTRNIT_BASE_R_LD_COEFF_UPDr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_LNKTRNIT_BASE_R_LD_COEFF_UPDr
#define WRITEALL_LNKTRNIT_BASE_R_LD_COEFF_UPDr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_LNKTRNIT_BASE_R_LD_COEFF_UPDr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIT_BASE_R_LD_COEFF_UPDr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  LNKTRNIT_BASE_R_LD_STS_REP
 * BLOCKS:   LINKTRN_IEEE_TX
 * REGADDR:  0x009b
 * DEVAD:    1
 * DESC:     BASE-R LD status report register 155
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     LINKTRN_IEEE_LD_STATUS_REPORT This register reflects the second 16-bit Word of the outgoing training framesent by the Local Devicelinktrn supports link training for IEEE/OIF/FC standardsPlease see the appropriate standards for register bit definitions.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIT_BASE_R_LD_STS_REPr (0x0001009b | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIT_BASE_R_LD_STS_REPr_SIZE 4

/*
 * This structure should be used to declare and program LNKTRNIT_BASE_R_LD_STS_REP.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIT_BASE_R_LD_STS_REPr_s {
	uint32_t v[1];
	uint32_t lnktrnit_base_r_ld_sts_rep[1];
	uint32_t _lnktrnit_base_r_ld_sts_rep;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIT_BASE_R_LD_STS_REPr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIT_BASE_R_LD_STS_REPr_CLR(r) (r).lnktrnit_base_r_ld_sts_rep[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIT_BASE_R_LD_STS_REPr_SET(r,d) (r).lnktrnit_base_r_ld_sts_rep[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIT_BASE_R_LD_STS_REPr_GET(r) (r).lnktrnit_base_r_ld_sts_rep[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIT_BASE_R_LD_STS_REPr_LINKTRN_IEEE_LD_STATUS_REPORTf_GET(r) (((r).lnktrnit_base_r_ld_sts_rep[0]) & 0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIT_BASE_R_LD_STS_REPr_LINKTRN_IEEE_LD_STATUS_REPORTf_SET(r,f) (r).lnktrnit_base_r_ld_sts_rep[0]=(((r).lnktrnit_base_r_ld_sts_rep[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access LNKTRNIT_BASE_R_LD_STS_REP.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_LNKTRNIT_BASE_R_LD_STS_REPr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIT_BASE_R_LD_STS_REPr,(_r._lnktrnit_base_r_ld_sts_rep))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_LNKTRNIT_BASE_R_LD_STS_REPr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIT_BASE_R_LD_STS_REPr,(_r._lnktrnit_base_r_ld_sts_rep)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_LNKTRNIT_BASE_R_LD_STS_REPr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIT_BASE_R_LD_STS_REPr,(_r._lnktrnit_base_r_ld_sts_rep))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_LNKTRNIT_BASE_R_LD_STS_REPr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIT_BASE_R_LD_STS_REPr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._lnktrnit_base_r_ld_sts_rep))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_LNKTRNIT_BASE_R_LD_STS_REPr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIT_BASE_R_LD_STS_REPr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._lnktrnit_base_r_ld_sts_rep))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_LNKTRNIT_BASE_R_LD_STS_REPr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIT_BASE_R_LD_STS_REPr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._lnktrnit_base_r_ld_sts_rep))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define LNKTRNIT_BASE_R_LD_STS_REPr BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIT_BASE_R_LD_STS_REPr
#define LNKTRNIT_BASE_R_LD_STS_REPr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIT_BASE_R_LD_STS_REPr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIT_BASE_R_LD_STS_REPr_t LNKTRNIT_BASE_R_LD_STS_REPr_t;
#define LNKTRNIT_BASE_R_LD_STS_REPr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIT_BASE_R_LD_STS_REPr_CLR
#define LNKTRNIT_BASE_R_LD_STS_REPr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIT_BASE_R_LD_STS_REPr_SET
#define LNKTRNIT_BASE_R_LD_STS_REPr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIT_BASE_R_LD_STS_REPr_GET
#define LNKTRNIT_BASE_R_LD_STS_REPr_LINKTRN_IEEE_LD_STATUS_REPORTf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIT_BASE_R_LD_STS_REPr_LINKTRN_IEEE_LD_STATUS_REPORTf_GET
#define LNKTRNIT_BASE_R_LD_STS_REPr_LINKTRN_IEEE_LD_STATUS_REPORTf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIT_BASE_R_LD_STS_REPr_LINKTRN_IEEE_LD_STATUS_REPORTf_SET
#define READ_LNKTRNIT_BASE_R_LD_STS_REPr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_LNKTRNIT_BASE_R_LD_STS_REPr
#define WRITE_LNKTRNIT_BASE_R_LD_STS_REPr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_LNKTRNIT_BASE_R_LD_STS_REPr
#define MODIFY_LNKTRNIT_BASE_R_LD_STS_REPr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_LNKTRNIT_BASE_R_LD_STS_REPr
#define READLN_LNKTRNIT_BASE_R_LD_STS_REPr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_LNKTRNIT_BASE_R_LD_STS_REPr
#define WRITELN_LNKTRNIT_BASE_R_LD_STS_REPr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_LNKTRNIT_BASE_R_LD_STS_REPr
#define WRITEALL_LNKTRNIT_BASE_R_LD_STS_REPr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_LNKTRNIT_BASE_R_LD_STS_REPr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNIT_BASE_R_LD_STS_REPr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  DSC_RXA_SLCR_OFFS_ADJ1
 * BLOCKS:   DSC_AFE1
 * REGADDR:  0xd005
 * DEVAD:    1
 * DESC:     rxa_slicer_offset_1 register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RXA_SLICER_OFFSET_ADJ_CAL_D4 signed 2's complement rxa slicer offset adjust for PAM4 ER, p3 only[dbg_field]
 *     RXA_SLICER_OFFSET_ADJ_CAL_D5 signed 2's complement rxa slicer offset adjust for PAM4 ER, p4, NRZ-DFE [dbg_field]
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ1r (0x0001d005 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ1r_SIZE 4

/*
 * This structure should be used to declare and program DSC_RXA_SLCR_OFFS_ADJ1.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ1r_s {
	uint32_t v[1];
	uint32_t dsc_rxa_slcr_offs_adj1[1];
	uint32_t _dsc_rxa_slcr_offs_adj1;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ1r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ1r_CLR(r) (r).dsc_rxa_slcr_offs_adj1[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ1r_SET(r,d) (r).dsc_rxa_slcr_offs_adj1[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ1r_GET(r) (r).dsc_rxa_slcr_offs_adj1[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ1r_RXA_SLICER_OFFSET_ADJ_CAL_D5f_GET(r) ((((r).dsc_rxa_slcr_offs_adj1[0]) >> 8) & 0x3f)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ1r_RXA_SLICER_OFFSET_ADJ_CAL_D5f_SET(r,f) (r).dsc_rxa_slcr_offs_adj1[0]=(((r).dsc_rxa_slcr_offs_adj1[0] & ~((uint32_t)0x3f << 8)) | ((((uint32_t)f) & 0x3f) << 8)) | (63 << (16 + 8))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ1r_RXA_SLICER_OFFSET_ADJ_CAL_D4f_GET(r) (((r).dsc_rxa_slcr_offs_adj1[0]) & 0x3f)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ1r_RXA_SLICER_OFFSET_ADJ_CAL_D4f_SET(r,f) (r).dsc_rxa_slcr_offs_adj1[0]=(((r).dsc_rxa_slcr_offs_adj1[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f)) | (0x3f << 16)

/*
 * These macros can be used to access DSC_RXA_SLCR_OFFS_ADJ1.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DSC_RXA_SLCR_OFFS_ADJ1r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ1r,(_r._dsc_rxa_slcr_offs_adj1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DSC_RXA_SLCR_OFFS_ADJ1r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ1r,(_r._dsc_rxa_slcr_offs_adj1)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DSC_RXA_SLCR_OFFS_ADJ1r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ1r,(_r._dsc_rxa_slcr_offs_adj1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DSC_RXA_SLCR_OFFS_ADJ1r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rxa_slcr_offs_adj1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DSC_RXA_SLCR_OFFS_ADJ1r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rxa_slcr_offs_adj1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DSC_RXA_SLCR_OFFS_ADJ1r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ1r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_rxa_slcr_offs_adj1))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_RXA_SLCR_OFFS_ADJ1r BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ1r
#define DSC_RXA_SLCR_OFFS_ADJ1r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ1r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ1r_t DSC_RXA_SLCR_OFFS_ADJ1r_t;
#define DSC_RXA_SLCR_OFFS_ADJ1r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ1r_CLR
#define DSC_RXA_SLCR_OFFS_ADJ1r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ1r_SET
#define DSC_RXA_SLCR_OFFS_ADJ1r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ1r_GET
#define DSC_RXA_SLCR_OFFS_ADJ1r_RXA_SLICER_OFFSET_ADJ_CAL_D5f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ1r_RXA_SLICER_OFFSET_ADJ_CAL_D5f_GET
#define DSC_RXA_SLCR_OFFS_ADJ1r_RXA_SLICER_OFFSET_ADJ_CAL_D5f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ1r_RXA_SLICER_OFFSET_ADJ_CAL_D5f_SET
#define DSC_RXA_SLCR_OFFS_ADJ1r_RXA_SLICER_OFFSET_ADJ_CAL_D4f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ1r_RXA_SLICER_OFFSET_ADJ_CAL_D4f_GET
#define DSC_RXA_SLCR_OFFS_ADJ1r_RXA_SLICER_OFFSET_ADJ_CAL_D4f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ1r_RXA_SLICER_OFFSET_ADJ_CAL_D4f_SET
#define READ_DSC_RXA_SLCR_OFFS_ADJ1r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DSC_RXA_SLCR_OFFS_ADJ1r
#define WRITE_DSC_RXA_SLCR_OFFS_ADJ1r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DSC_RXA_SLCR_OFFS_ADJ1r
#define MODIFY_DSC_RXA_SLCR_OFFS_ADJ1r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DSC_RXA_SLCR_OFFS_ADJ1r
#define READLN_DSC_RXA_SLCR_OFFS_ADJ1r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DSC_RXA_SLCR_OFFS_ADJ1r
#define WRITELN_DSC_RXA_SLCR_OFFS_ADJ1r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DSC_RXA_SLCR_OFFS_ADJ1r
#define WRITEALL_DSC_RXA_SLCR_OFFS_ADJ1r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DSC_RXA_SLCR_OFFS_ADJ1r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ1r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  DSC_RXA_SLCR_OFFS_ADJ2
 * BLOCKS:   DSC_AFE1
 * REGADDR:  0xd006
 * DEVAD:    1
 * DESC:     rxa_slicer_offset_2 register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RXA_SLICER_OFFSET_ADJ_CAL_D2 signed 2's complement rxa slicer offset adjust for PAM4 ER, m1, PAM4 NR [dbg_field]
 *     RXA_SLICER_OFFSET_ADJ_CAL_D3 signed 2's complement rxa slicer offset adjust for PAM4 ER, p1 only[dbg_field]
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ2r (0x0001d006 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ2r_SIZE 4

/*
 * This structure should be used to declare and program DSC_RXA_SLCR_OFFS_ADJ2.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ2r_s {
	uint32_t v[1];
	uint32_t dsc_rxa_slcr_offs_adj2[1];
	uint32_t _dsc_rxa_slcr_offs_adj2;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ2r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ2r_CLR(r) (r).dsc_rxa_slcr_offs_adj2[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ2r_SET(r,d) (r).dsc_rxa_slcr_offs_adj2[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ2r_GET(r) (r).dsc_rxa_slcr_offs_adj2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ2r_RXA_SLICER_OFFSET_ADJ_CAL_D3f_GET(r) ((((r).dsc_rxa_slcr_offs_adj2[0]) >> 8) & 0x3f)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ2r_RXA_SLICER_OFFSET_ADJ_CAL_D3f_SET(r,f) (r).dsc_rxa_slcr_offs_adj2[0]=(((r).dsc_rxa_slcr_offs_adj2[0] & ~((uint32_t)0x3f << 8)) | ((((uint32_t)f) & 0x3f) << 8)) | (63 << (16 + 8))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ2r_RXA_SLICER_OFFSET_ADJ_CAL_D2f_GET(r) (((r).dsc_rxa_slcr_offs_adj2[0]) & 0x3f)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ2r_RXA_SLICER_OFFSET_ADJ_CAL_D2f_SET(r,f) (r).dsc_rxa_slcr_offs_adj2[0]=(((r).dsc_rxa_slcr_offs_adj2[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f)) | (0x3f << 16)

/*
 * These macros can be used to access DSC_RXA_SLCR_OFFS_ADJ2.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DSC_RXA_SLCR_OFFS_ADJ2r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ2r,(_r._dsc_rxa_slcr_offs_adj2))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DSC_RXA_SLCR_OFFS_ADJ2r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ2r,(_r._dsc_rxa_slcr_offs_adj2)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DSC_RXA_SLCR_OFFS_ADJ2r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ2r,(_r._dsc_rxa_slcr_offs_adj2))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DSC_RXA_SLCR_OFFS_ADJ2r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rxa_slcr_offs_adj2))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DSC_RXA_SLCR_OFFS_ADJ2r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rxa_slcr_offs_adj2))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DSC_RXA_SLCR_OFFS_ADJ2r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_rxa_slcr_offs_adj2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_RXA_SLCR_OFFS_ADJ2r BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ2r
#define DSC_RXA_SLCR_OFFS_ADJ2r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ2r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ2r_t DSC_RXA_SLCR_OFFS_ADJ2r_t;
#define DSC_RXA_SLCR_OFFS_ADJ2r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ2r_CLR
#define DSC_RXA_SLCR_OFFS_ADJ2r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ2r_SET
#define DSC_RXA_SLCR_OFFS_ADJ2r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ2r_GET
#define DSC_RXA_SLCR_OFFS_ADJ2r_RXA_SLICER_OFFSET_ADJ_CAL_D3f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ2r_RXA_SLICER_OFFSET_ADJ_CAL_D3f_GET
#define DSC_RXA_SLCR_OFFS_ADJ2r_RXA_SLICER_OFFSET_ADJ_CAL_D3f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ2r_RXA_SLICER_OFFSET_ADJ_CAL_D3f_SET
#define DSC_RXA_SLCR_OFFS_ADJ2r_RXA_SLICER_OFFSET_ADJ_CAL_D2f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ2r_RXA_SLICER_OFFSET_ADJ_CAL_D2f_GET
#define DSC_RXA_SLCR_OFFS_ADJ2r_RXA_SLICER_OFFSET_ADJ_CAL_D2f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ2r_RXA_SLICER_OFFSET_ADJ_CAL_D2f_SET
#define READ_DSC_RXA_SLCR_OFFS_ADJ2r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DSC_RXA_SLCR_OFFS_ADJ2r
#define WRITE_DSC_RXA_SLCR_OFFS_ADJ2r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DSC_RXA_SLCR_OFFS_ADJ2r
#define MODIFY_DSC_RXA_SLCR_OFFS_ADJ2r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DSC_RXA_SLCR_OFFS_ADJ2r
#define READLN_DSC_RXA_SLCR_OFFS_ADJ2r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DSC_RXA_SLCR_OFFS_ADJ2r
#define WRITELN_DSC_RXA_SLCR_OFFS_ADJ2r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DSC_RXA_SLCR_OFFS_ADJ2r
#define WRITEALL_DSC_RXA_SLCR_OFFS_ADJ2r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DSC_RXA_SLCR_OFFS_ADJ2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  DSC_RXA_SLCR_OFFS_ADJ3
 * BLOCKS:   DSC_AFE1
 * REGADDR:  0xd007
 * DEVAD:    1
 * DESC:     rxa_slicer_offset_3 register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RXA_SLICER_OFFSET_ADJ_CAL_D0 signed 2's complement rxa slicer offset adjust for PAM4 ER, m5, PAM4 NR, NRZ-DFE, NRZ-VSR[dbg_field]
 *     RXA_SLICER_OFFSET_ADJ_CAL_D1 signed 2's complement rxa slicer offset adjust for PAM4 ER, m3, PAM4 NR [dbg_field]
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ3r (0x0001d007 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ3r_SIZE 4

/*
 * This structure should be used to declare and program DSC_RXA_SLCR_OFFS_ADJ3.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ3r_s {
	uint32_t v[1];
	uint32_t dsc_rxa_slcr_offs_adj3[1];
	uint32_t _dsc_rxa_slcr_offs_adj3;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ3r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ3r_CLR(r) (r).dsc_rxa_slcr_offs_adj3[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ3r_SET(r,d) (r).dsc_rxa_slcr_offs_adj3[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ3r_GET(r) (r).dsc_rxa_slcr_offs_adj3[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ3r_RXA_SLICER_OFFSET_ADJ_CAL_D1f_GET(r) ((((r).dsc_rxa_slcr_offs_adj3[0]) >> 8) & 0x3f)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ3r_RXA_SLICER_OFFSET_ADJ_CAL_D1f_SET(r,f) (r).dsc_rxa_slcr_offs_adj3[0]=(((r).dsc_rxa_slcr_offs_adj3[0] & ~((uint32_t)0x3f << 8)) | ((((uint32_t)f) & 0x3f) << 8)) | (63 << (16 + 8))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ3r_RXA_SLICER_OFFSET_ADJ_CAL_D0f_GET(r) (((r).dsc_rxa_slcr_offs_adj3[0]) & 0x3f)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ3r_RXA_SLICER_OFFSET_ADJ_CAL_D0f_SET(r,f) (r).dsc_rxa_slcr_offs_adj3[0]=(((r).dsc_rxa_slcr_offs_adj3[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f)) | (0x3f << 16)

/*
 * These macros can be used to access DSC_RXA_SLCR_OFFS_ADJ3.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DSC_RXA_SLCR_OFFS_ADJ3r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ3r,(_r._dsc_rxa_slcr_offs_adj3))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DSC_RXA_SLCR_OFFS_ADJ3r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ3r,(_r._dsc_rxa_slcr_offs_adj3)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DSC_RXA_SLCR_OFFS_ADJ3r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ3r,(_r._dsc_rxa_slcr_offs_adj3))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DSC_RXA_SLCR_OFFS_ADJ3r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ3r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rxa_slcr_offs_adj3))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DSC_RXA_SLCR_OFFS_ADJ3r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ3r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rxa_slcr_offs_adj3))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DSC_RXA_SLCR_OFFS_ADJ3r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ3r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_rxa_slcr_offs_adj3))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_RXA_SLCR_OFFS_ADJ3r BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ3r
#define DSC_RXA_SLCR_OFFS_ADJ3r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ3r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ3r_t DSC_RXA_SLCR_OFFS_ADJ3r_t;
#define DSC_RXA_SLCR_OFFS_ADJ3r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ3r_CLR
#define DSC_RXA_SLCR_OFFS_ADJ3r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ3r_SET
#define DSC_RXA_SLCR_OFFS_ADJ3r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ3r_GET
#define DSC_RXA_SLCR_OFFS_ADJ3r_RXA_SLICER_OFFSET_ADJ_CAL_D1f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ3r_RXA_SLICER_OFFSET_ADJ_CAL_D1f_GET
#define DSC_RXA_SLCR_OFFS_ADJ3r_RXA_SLICER_OFFSET_ADJ_CAL_D1f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ3r_RXA_SLICER_OFFSET_ADJ_CAL_D1f_SET
#define DSC_RXA_SLCR_OFFS_ADJ3r_RXA_SLICER_OFFSET_ADJ_CAL_D0f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ3r_RXA_SLICER_OFFSET_ADJ_CAL_D0f_GET
#define DSC_RXA_SLCR_OFFS_ADJ3r_RXA_SLICER_OFFSET_ADJ_CAL_D0f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ3r_RXA_SLICER_OFFSET_ADJ_CAL_D0f_SET
#define READ_DSC_RXA_SLCR_OFFS_ADJ3r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DSC_RXA_SLCR_OFFS_ADJ3r
#define WRITE_DSC_RXA_SLCR_OFFS_ADJ3r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DSC_RXA_SLCR_OFFS_ADJ3r
#define MODIFY_DSC_RXA_SLCR_OFFS_ADJ3r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DSC_RXA_SLCR_OFFS_ADJ3r
#define READLN_DSC_RXA_SLCR_OFFS_ADJ3r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DSC_RXA_SLCR_OFFS_ADJ3r
#define WRITELN_DSC_RXA_SLCR_OFFS_ADJ3r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DSC_RXA_SLCR_OFFS_ADJ3r
#define WRITEALL_DSC_RXA_SLCR_OFFS_ADJ3r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DSC_RXA_SLCR_OFFS_ADJ3r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ3r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  DSC_RXA_SLCR_OFFS_ADJ4
 * BLOCKS:   DSC_AFE1
 * REGADDR:  0xd008
 * DEVAD:    1
 * DESC:     rxa_slicer_offset_4 register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RXA_SLICER_OFFSET_ADJ_CAL_P1 signed 2's complement rxa slicer offset adjust for PAM4 ER, PAM4 NR[dbg_field]
 *     RXA_SLICER_OFFSET_ADJ_CAL_P2 signed 2's complement rxa slicer offset adjust for PAM4 ER, PAM4 NR, NRZ-DFE[dbg_field]
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ4r (0x0001d008 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ4r_SIZE 4

/*
 * This structure should be used to declare and program DSC_RXA_SLCR_OFFS_ADJ4.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ4r_s {
	uint32_t v[1];
	uint32_t dsc_rxa_slcr_offs_adj4[1];
	uint32_t _dsc_rxa_slcr_offs_adj4;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ4r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ4r_CLR(r) (r).dsc_rxa_slcr_offs_adj4[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ4r_SET(r,d) (r).dsc_rxa_slcr_offs_adj4[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ4r_GET(r) (r).dsc_rxa_slcr_offs_adj4[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ4r_RXA_SLICER_OFFSET_ADJ_CAL_P2f_GET(r) ((((r).dsc_rxa_slcr_offs_adj4[0]) >> 8) & 0x3f)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ4r_RXA_SLICER_OFFSET_ADJ_CAL_P2f_SET(r,f) (r).dsc_rxa_slcr_offs_adj4[0]=(((r).dsc_rxa_slcr_offs_adj4[0] & ~((uint32_t)0x3f << 8)) | ((((uint32_t)f) & 0x3f) << 8)) | (63 << (16 + 8))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ4r_RXA_SLICER_OFFSET_ADJ_CAL_P1f_GET(r) (((r).dsc_rxa_slcr_offs_adj4[0]) & 0x3f)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ4r_RXA_SLICER_OFFSET_ADJ_CAL_P1f_SET(r,f) (r).dsc_rxa_slcr_offs_adj4[0]=(((r).dsc_rxa_slcr_offs_adj4[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f)) | (0x3f << 16)

/*
 * These macros can be used to access DSC_RXA_SLCR_OFFS_ADJ4.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DSC_RXA_SLCR_OFFS_ADJ4r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ4r,(_r._dsc_rxa_slcr_offs_adj4))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DSC_RXA_SLCR_OFFS_ADJ4r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ4r,(_r._dsc_rxa_slcr_offs_adj4)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DSC_RXA_SLCR_OFFS_ADJ4r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ4r,(_r._dsc_rxa_slcr_offs_adj4))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DSC_RXA_SLCR_OFFS_ADJ4r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ4r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rxa_slcr_offs_adj4))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DSC_RXA_SLCR_OFFS_ADJ4r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ4r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rxa_slcr_offs_adj4))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DSC_RXA_SLCR_OFFS_ADJ4r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ4r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_rxa_slcr_offs_adj4))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_RXA_SLCR_OFFS_ADJ4r BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ4r
#define DSC_RXA_SLCR_OFFS_ADJ4r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ4r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ4r_t DSC_RXA_SLCR_OFFS_ADJ4r_t;
#define DSC_RXA_SLCR_OFFS_ADJ4r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ4r_CLR
#define DSC_RXA_SLCR_OFFS_ADJ4r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ4r_SET
#define DSC_RXA_SLCR_OFFS_ADJ4r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ4r_GET
#define DSC_RXA_SLCR_OFFS_ADJ4r_RXA_SLICER_OFFSET_ADJ_CAL_P2f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ4r_RXA_SLICER_OFFSET_ADJ_CAL_P2f_GET
#define DSC_RXA_SLCR_OFFS_ADJ4r_RXA_SLICER_OFFSET_ADJ_CAL_P2f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ4r_RXA_SLICER_OFFSET_ADJ_CAL_P2f_SET
#define DSC_RXA_SLCR_OFFS_ADJ4r_RXA_SLICER_OFFSET_ADJ_CAL_P1f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ4r_RXA_SLICER_OFFSET_ADJ_CAL_P1f_GET
#define DSC_RXA_SLCR_OFFS_ADJ4r_RXA_SLICER_OFFSET_ADJ_CAL_P1f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ4r_RXA_SLICER_OFFSET_ADJ_CAL_P1f_SET
#define READ_DSC_RXA_SLCR_OFFS_ADJ4r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DSC_RXA_SLCR_OFFS_ADJ4r
#define WRITE_DSC_RXA_SLCR_OFFS_ADJ4r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DSC_RXA_SLCR_OFFS_ADJ4r
#define MODIFY_DSC_RXA_SLCR_OFFS_ADJ4r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DSC_RXA_SLCR_OFFS_ADJ4r
#define READLN_DSC_RXA_SLCR_OFFS_ADJ4r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DSC_RXA_SLCR_OFFS_ADJ4r
#define WRITELN_DSC_RXA_SLCR_OFFS_ADJ4r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DSC_RXA_SLCR_OFFS_ADJ4r
#define WRITEALL_DSC_RXA_SLCR_OFFS_ADJ4r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DSC_RXA_SLCR_OFFS_ADJ4r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ4r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  DSC_RXA_SLCR_OFFS_ADJ5
 * BLOCKS:   DSC_AFE1
 * REGADDR:  0xd009
 * DEVAD:    1
 * DESC:     rxa_slicer_offset_5 register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RXA_SLICER_OFFSET_ADJ_CAL_LMS signed 2's complement rxa slicer offset adjust for PAM4 ER, PAM4 NR, NRZ-DFE, NRZ-VSR[dbg_field]
 *     RXA_SLICER_OFFSET_ADJ_CAL_P0 signed 2's complement rxa slicer offset adjust for PAM4 ER, PAM4 NR, NRZ-DFE, NRZ-VSR[dbg_field]
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ5r (0x0001d009 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ5r_SIZE 4

/*
 * This structure should be used to declare and program DSC_RXA_SLCR_OFFS_ADJ5.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ5r_s {
	uint32_t v[1];
	uint32_t dsc_rxa_slcr_offs_adj5[1];
	uint32_t _dsc_rxa_slcr_offs_adj5;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ5r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ5r_CLR(r) (r).dsc_rxa_slcr_offs_adj5[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ5r_SET(r,d) (r).dsc_rxa_slcr_offs_adj5[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ5r_GET(r) (r).dsc_rxa_slcr_offs_adj5[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ5r_RXA_SLICER_OFFSET_ADJ_CAL_P0f_GET(r) ((((r).dsc_rxa_slcr_offs_adj5[0]) >> 8) & 0x3f)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ5r_RXA_SLICER_OFFSET_ADJ_CAL_P0f_SET(r,f) (r).dsc_rxa_slcr_offs_adj5[0]=(((r).dsc_rxa_slcr_offs_adj5[0] & ~((uint32_t)0x3f << 8)) | ((((uint32_t)f) & 0x3f) << 8)) | (63 << (16 + 8))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ5r_RXA_SLICER_OFFSET_ADJ_CAL_LMSf_GET(r) (((r).dsc_rxa_slcr_offs_adj5[0]) & 0x3f)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ5r_RXA_SLICER_OFFSET_ADJ_CAL_LMSf_SET(r,f) (r).dsc_rxa_slcr_offs_adj5[0]=(((r).dsc_rxa_slcr_offs_adj5[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f)) | (0x3f << 16)

/*
 * These macros can be used to access DSC_RXA_SLCR_OFFS_ADJ5.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DSC_RXA_SLCR_OFFS_ADJ5r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ5r,(_r._dsc_rxa_slcr_offs_adj5))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DSC_RXA_SLCR_OFFS_ADJ5r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ5r,(_r._dsc_rxa_slcr_offs_adj5)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DSC_RXA_SLCR_OFFS_ADJ5r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ5r,(_r._dsc_rxa_slcr_offs_adj5))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DSC_RXA_SLCR_OFFS_ADJ5r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ5r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rxa_slcr_offs_adj5))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DSC_RXA_SLCR_OFFS_ADJ5r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ5r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rxa_slcr_offs_adj5))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DSC_RXA_SLCR_OFFS_ADJ5r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ5r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_rxa_slcr_offs_adj5))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_RXA_SLCR_OFFS_ADJ5r BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ5r
#define DSC_RXA_SLCR_OFFS_ADJ5r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ5r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ5r_t DSC_RXA_SLCR_OFFS_ADJ5r_t;
#define DSC_RXA_SLCR_OFFS_ADJ5r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ5r_CLR
#define DSC_RXA_SLCR_OFFS_ADJ5r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ5r_SET
#define DSC_RXA_SLCR_OFFS_ADJ5r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ5r_GET
#define DSC_RXA_SLCR_OFFS_ADJ5r_RXA_SLICER_OFFSET_ADJ_CAL_P0f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ5r_RXA_SLICER_OFFSET_ADJ_CAL_P0f_GET
#define DSC_RXA_SLCR_OFFS_ADJ5r_RXA_SLICER_OFFSET_ADJ_CAL_P0f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ5r_RXA_SLICER_OFFSET_ADJ_CAL_P0f_SET
#define DSC_RXA_SLCR_OFFS_ADJ5r_RXA_SLICER_OFFSET_ADJ_CAL_LMSf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ5r_RXA_SLICER_OFFSET_ADJ_CAL_LMSf_GET
#define DSC_RXA_SLCR_OFFS_ADJ5r_RXA_SLICER_OFFSET_ADJ_CAL_LMSf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ5r_RXA_SLICER_OFFSET_ADJ_CAL_LMSf_SET
#define READ_DSC_RXA_SLCR_OFFS_ADJ5r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DSC_RXA_SLCR_OFFS_ADJ5r
#define WRITE_DSC_RXA_SLCR_OFFS_ADJ5r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DSC_RXA_SLCR_OFFS_ADJ5r
#define MODIFY_DSC_RXA_SLCR_OFFS_ADJ5r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DSC_RXA_SLCR_OFFS_ADJ5r
#define READLN_DSC_RXA_SLCR_OFFS_ADJ5r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DSC_RXA_SLCR_OFFS_ADJ5r
#define WRITELN_DSC_RXA_SLCR_OFFS_ADJ5r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DSC_RXA_SLCR_OFFS_ADJ5r
#define WRITEALL_DSC_RXA_SLCR_OFFS_ADJ5r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DSC_RXA_SLCR_OFFS_ADJ5r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXA_SLCR_OFFS_ADJ5r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  DSC_RXB_SLCR_OFFS_ADJ1
 * BLOCKS:   DSC_AFE1
 * REGADDR:  0xd00a
 * DEVAD:    1
 * DESC:     rxb_slicer_offset_1 register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RXB_SLICER_OFFSET_ADJ_CAL_D4 signed 2's complement rxb slicer offset adjust for PAM4 ER, p3 only[dbg_field]
 *     RXB_SLICER_OFFSET_ADJ_CAL_D5 signed 2's complement rxb slicer offset adjust for PAM4 ER, p4, NRZ-DFE [dbg_field]
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ1r (0x0001d00a | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ1r_SIZE 4

/*
 * This structure should be used to declare and program DSC_RXB_SLCR_OFFS_ADJ1.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ1r_s {
	uint32_t v[1];
	uint32_t dsc_rxb_slcr_offs_adj1[1];
	uint32_t _dsc_rxb_slcr_offs_adj1;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ1r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ1r_CLR(r) (r).dsc_rxb_slcr_offs_adj1[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ1r_SET(r,d) (r).dsc_rxb_slcr_offs_adj1[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ1r_GET(r) (r).dsc_rxb_slcr_offs_adj1[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ1r_RXB_SLICER_OFFSET_ADJ_CAL_D5f_GET(r) ((((r).dsc_rxb_slcr_offs_adj1[0]) >> 8) & 0x3f)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ1r_RXB_SLICER_OFFSET_ADJ_CAL_D5f_SET(r,f) (r).dsc_rxb_slcr_offs_adj1[0]=(((r).dsc_rxb_slcr_offs_adj1[0] & ~((uint32_t)0x3f << 8)) | ((((uint32_t)f) & 0x3f) << 8)) | (63 << (16 + 8))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ1r_RXB_SLICER_OFFSET_ADJ_CAL_D4f_GET(r) (((r).dsc_rxb_slcr_offs_adj1[0]) & 0x3f)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ1r_RXB_SLICER_OFFSET_ADJ_CAL_D4f_SET(r,f) (r).dsc_rxb_slcr_offs_adj1[0]=(((r).dsc_rxb_slcr_offs_adj1[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f)) | (0x3f << 16)

/*
 * These macros can be used to access DSC_RXB_SLCR_OFFS_ADJ1.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DSC_RXB_SLCR_OFFS_ADJ1r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ1r,(_r._dsc_rxb_slcr_offs_adj1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DSC_RXB_SLCR_OFFS_ADJ1r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ1r,(_r._dsc_rxb_slcr_offs_adj1)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DSC_RXB_SLCR_OFFS_ADJ1r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ1r,(_r._dsc_rxb_slcr_offs_adj1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DSC_RXB_SLCR_OFFS_ADJ1r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rxb_slcr_offs_adj1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DSC_RXB_SLCR_OFFS_ADJ1r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rxb_slcr_offs_adj1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DSC_RXB_SLCR_OFFS_ADJ1r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ1r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_rxb_slcr_offs_adj1))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_RXB_SLCR_OFFS_ADJ1r BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ1r
#define DSC_RXB_SLCR_OFFS_ADJ1r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ1r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ1r_t DSC_RXB_SLCR_OFFS_ADJ1r_t;
#define DSC_RXB_SLCR_OFFS_ADJ1r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ1r_CLR
#define DSC_RXB_SLCR_OFFS_ADJ1r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ1r_SET
#define DSC_RXB_SLCR_OFFS_ADJ1r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ1r_GET
#define DSC_RXB_SLCR_OFFS_ADJ1r_RXB_SLICER_OFFSET_ADJ_CAL_D5f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ1r_RXB_SLICER_OFFSET_ADJ_CAL_D5f_GET
#define DSC_RXB_SLCR_OFFS_ADJ1r_RXB_SLICER_OFFSET_ADJ_CAL_D5f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ1r_RXB_SLICER_OFFSET_ADJ_CAL_D5f_SET
#define DSC_RXB_SLCR_OFFS_ADJ1r_RXB_SLICER_OFFSET_ADJ_CAL_D4f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ1r_RXB_SLICER_OFFSET_ADJ_CAL_D4f_GET
#define DSC_RXB_SLCR_OFFS_ADJ1r_RXB_SLICER_OFFSET_ADJ_CAL_D4f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ1r_RXB_SLICER_OFFSET_ADJ_CAL_D4f_SET
#define READ_DSC_RXB_SLCR_OFFS_ADJ1r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DSC_RXB_SLCR_OFFS_ADJ1r
#define WRITE_DSC_RXB_SLCR_OFFS_ADJ1r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DSC_RXB_SLCR_OFFS_ADJ1r
#define MODIFY_DSC_RXB_SLCR_OFFS_ADJ1r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DSC_RXB_SLCR_OFFS_ADJ1r
#define READLN_DSC_RXB_SLCR_OFFS_ADJ1r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DSC_RXB_SLCR_OFFS_ADJ1r
#define WRITELN_DSC_RXB_SLCR_OFFS_ADJ1r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DSC_RXB_SLCR_OFFS_ADJ1r
#define WRITEALL_DSC_RXB_SLCR_OFFS_ADJ1r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DSC_RXB_SLCR_OFFS_ADJ1r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ1r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  DSC_RXB_SLCR_OFFS_ADJ2
 * BLOCKS:   DSC_AFE1
 * REGADDR:  0xd00b
 * DEVAD:    1
 * DESC:     rxb_slicer_offset_2 register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RXB_SLICER_OFFSET_ADJ_CAL_D2 signed 2's complement rxb slicer offset adjust for PAM4 ER, m1, PAM4 NR [dbg_field]
 *     RXB_SLICER_OFFSET_ADJ_CAL_D3 signed 2's complement rxb slicer offset adjust for PAM4 ER, p1 only[dbg_field]
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ2r (0x0001d00b | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ2r_SIZE 4

/*
 * This structure should be used to declare and program DSC_RXB_SLCR_OFFS_ADJ2.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ2r_s {
	uint32_t v[1];
	uint32_t dsc_rxb_slcr_offs_adj2[1];
	uint32_t _dsc_rxb_slcr_offs_adj2;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ2r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ2r_CLR(r) (r).dsc_rxb_slcr_offs_adj2[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ2r_SET(r,d) (r).dsc_rxb_slcr_offs_adj2[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ2r_GET(r) (r).dsc_rxb_slcr_offs_adj2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ2r_RXB_SLICER_OFFSET_ADJ_CAL_D3f_GET(r) ((((r).dsc_rxb_slcr_offs_adj2[0]) >> 8) & 0x3f)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ2r_RXB_SLICER_OFFSET_ADJ_CAL_D3f_SET(r,f) (r).dsc_rxb_slcr_offs_adj2[0]=(((r).dsc_rxb_slcr_offs_adj2[0] & ~((uint32_t)0x3f << 8)) | ((((uint32_t)f) & 0x3f) << 8)) | (63 << (16 + 8))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ2r_RXB_SLICER_OFFSET_ADJ_CAL_D2f_GET(r) (((r).dsc_rxb_slcr_offs_adj2[0]) & 0x3f)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ2r_RXB_SLICER_OFFSET_ADJ_CAL_D2f_SET(r,f) (r).dsc_rxb_slcr_offs_adj2[0]=(((r).dsc_rxb_slcr_offs_adj2[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f)) | (0x3f << 16)

/*
 * These macros can be used to access DSC_RXB_SLCR_OFFS_ADJ2.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DSC_RXB_SLCR_OFFS_ADJ2r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ2r,(_r._dsc_rxb_slcr_offs_adj2))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DSC_RXB_SLCR_OFFS_ADJ2r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ2r,(_r._dsc_rxb_slcr_offs_adj2)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DSC_RXB_SLCR_OFFS_ADJ2r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ2r,(_r._dsc_rxb_slcr_offs_adj2))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DSC_RXB_SLCR_OFFS_ADJ2r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rxb_slcr_offs_adj2))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DSC_RXB_SLCR_OFFS_ADJ2r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rxb_slcr_offs_adj2))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DSC_RXB_SLCR_OFFS_ADJ2r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_rxb_slcr_offs_adj2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_RXB_SLCR_OFFS_ADJ2r BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ2r
#define DSC_RXB_SLCR_OFFS_ADJ2r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ2r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ2r_t DSC_RXB_SLCR_OFFS_ADJ2r_t;
#define DSC_RXB_SLCR_OFFS_ADJ2r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ2r_CLR
#define DSC_RXB_SLCR_OFFS_ADJ2r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ2r_SET
#define DSC_RXB_SLCR_OFFS_ADJ2r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ2r_GET
#define DSC_RXB_SLCR_OFFS_ADJ2r_RXB_SLICER_OFFSET_ADJ_CAL_D3f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ2r_RXB_SLICER_OFFSET_ADJ_CAL_D3f_GET
#define DSC_RXB_SLCR_OFFS_ADJ2r_RXB_SLICER_OFFSET_ADJ_CAL_D3f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ2r_RXB_SLICER_OFFSET_ADJ_CAL_D3f_SET
#define DSC_RXB_SLCR_OFFS_ADJ2r_RXB_SLICER_OFFSET_ADJ_CAL_D2f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ2r_RXB_SLICER_OFFSET_ADJ_CAL_D2f_GET
#define DSC_RXB_SLCR_OFFS_ADJ2r_RXB_SLICER_OFFSET_ADJ_CAL_D2f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ2r_RXB_SLICER_OFFSET_ADJ_CAL_D2f_SET
#define READ_DSC_RXB_SLCR_OFFS_ADJ2r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DSC_RXB_SLCR_OFFS_ADJ2r
#define WRITE_DSC_RXB_SLCR_OFFS_ADJ2r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DSC_RXB_SLCR_OFFS_ADJ2r
#define MODIFY_DSC_RXB_SLCR_OFFS_ADJ2r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DSC_RXB_SLCR_OFFS_ADJ2r
#define READLN_DSC_RXB_SLCR_OFFS_ADJ2r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DSC_RXB_SLCR_OFFS_ADJ2r
#define WRITELN_DSC_RXB_SLCR_OFFS_ADJ2r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DSC_RXB_SLCR_OFFS_ADJ2r
#define WRITEALL_DSC_RXB_SLCR_OFFS_ADJ2r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DSC_RXB_SLCR_OFFS_ADJ2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  DSC_RXB_SLCR_OFFS_ADJ3
 * BLOCKS:   DSC_AFE1
 * REGADDR:  0xd00c
 * DEVAD:    1
 * DESC:     rxb_slicer_offset_3 register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RXB_SLICER_OFFSET_ADJ_CAL_D0 signed 2's complement rxb slicer offset adjust for PAM4 ER, m5, PAM4 NR, NRZ-DFE, NRZ-VSR[dbg_field]
 *     RXB_SLICER_OFFSET_ADJ_CAL_D1 signed 2's complement rxb slicer offset adjust for PAM4 ER, m3, PAM4 NR [dbg_field]
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ3r (0x0001d00c | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ3r_SIZE 4

/*
 * This structure should be used to declare and program DSC_RXB_SLCR_OFFS_ADJ3.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ3r_s {
	uint32_t v[1];
	uint32_t dsc_rxb_slcr_offs_adj3[1];
	uint32_t _dsc_rxb_slcr_offs_adj3;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ3r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ3r_CLR(r) (r).dsc_rxb_slcr_offs_adj3[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ3r_SET(r,d) (r).dsc_rxb_slcr_offs_adj3[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ3r_GET(r) (r).dsc_rxb_slcr_offs_adj3[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ3r_RXB_SLICER_OFFSET_ADJ_CAL_D1f_GET(r) ((((r).dsc_rxb_slcr_offs_adj3[0]) >> 8) & 0x3f)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ3r_RXB_SLICER_OFFSET_ADJ_CAL_D1f_SET(r,f) (r).dsc_rxb_slcr_offs_adj3[0]=(((r).dsc_rxb_slcr_offs_adj3[0] & ~((uint32_t)0x3f << 8)) | ((((uint32_t)f) & 0x3f) << 8)) | (63 << (16 + 8))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ3r_RXB_SLICER_OFFSET_ADJ_CAL_D0f_GET(r) (((r).dsc_rxb_slcr_offs_adj3[0]) & 0x3f)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ3r_RXB_SLICER_OFFSET_ADJ_CAL_D0f_SET(r,f) (r).dsc_rxb_slcr_offs_adj3[0]=(((r).dsc_rxb_slcr_offs_adj3[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f)) | (0x3f << 16)

/*
 * These macros can be used to access DSC_RXB_SLCR_OFFS_ADJ3.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DSC_RXB_SLCR_OFFS_ADJ3r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ3r,(_r._dsc_rxb_slcr_offs_adj3))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DSC_RXB_SLCR_OFFS_ADJ3r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ3r,(_r._dsc_rxb_slcr_offs_adj3)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DSC_RXB_SLCR_OFFS_ADJ3r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ3r,(_r._dsc_rxb_slcr_offs_adj3))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DSC_RXB_SLCR_OFFS_ADJ3r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ3r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rxb_slcr_offs_adj3))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DSC_RXB_SLCR_OFFS_ADJ3r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ3r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rxb_slcr_offs_adj3))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DSC_RXB_SLCR_OFFS_ADJ3r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ3r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_rxb_slcr_offs_adj3))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_RXB_SLCR_OFFS_ADJ3r BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ3r
#define DSC_RXB_SLCR_OFFS_ADJ3r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ3r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ3r_t DSC_RXB_SLCR_OFFS_ADJ3r_t;
#define DSC_RXB_SLCR_OFFS_ADJ3r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ3r_CLR
#define DSC_RXB_SLCR_OFFS_ADJ3r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ3r_SET
#define DSC_RXB_SLCR_OFFS_ADJ3r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ3r_GET
#define DSC_RXB_SLCR_OFFS_ADJ3r_RXB_SLICER_OFFSET_ADJ_CAL_D1f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ3r_RXB_SLICER_OFFSET_ADJ_CAL_D1f_GET
#define DSC_RXB_SLCR_OFFS_ADJ3r_RXB_SLICER_OFFSET_ADJ_CAL_D1f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ3r_RXB_SLICER_OFFSET_ADJ_CAL_D1f_SET
#define DSC_RXB_SLCR_OFFS_ADJ3r_RXB_SLICER_OFFSET_ADJ_CAL_D0f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ3r_RXB_SLICER_OFFSET_ADJ_CAL_D0f_GET
#define DSC_RXB_SLCR_OFFS_ADJ3r_RXB_SLICER_OFFSET_ADJ_CAL_D0f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ3r_RXB_SLICER_OFFSET_ADJ_CAL_D0f_SET
#define READ_DSC_RXB_SLCR_OFFS_ADJ3r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DSC_RXB_SLCR_OFFS_ADJ3r
#define WRITE_DSC_RXB_SLCR_OFFS_ADJ3r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DSC_RXB_SLCR_OFFS_ADJ3r
#define MODIFY_DSC_RXB_SLCR_OFFS_ADJ3r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DSC_RXB_SLCR_OFFS_ADJ3r
#define READLN_DSC_RXB_SLCR_OFFS_ADJ3r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DSC_RXB_SLCR_OFFS_ADJ3r
#define WRITELN_DSC_RXB_SLCR_OFFS_ADJ3r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DSC_RXB_SLCR_OFFS_ADJ3r
#define WRITEALL_DSC_RXB_SLCR_OFFS_ADJ3r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DSC_RXB_SLCR_OFFS_ADJ3r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ3r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  DSC_RXB_SLCR_OFFS_ADJ4
 * BLOCKS:   DSC_AFE1
 * REGADDR:  0xd00d
 * DEVAD:    1
 * DESC:     rxb_slicer_offset_4 register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RXB_SLICER_OFFSET_ADJ_CAL_P1 signed 2's complement rxb slicer offset adjust for PAM4 ER, PAM4 NR[dbg_field]
 *     RXB_SLICER_OFFSET_ADJ_CAL_P2 signed 2's complement rxb slicer offset adjust for PAM4 ER, PAM4 NR, NRZ-DFE[dbg_field]
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ4r (0x0001d00d | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ4r_SIZE 4

/*
 * This structure should be used to declare and program DSC_RXB_SLCR_OFFS_ADJ4.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ4r_s {
	uint32_t v[1];
	uint32_t dsc_rxb_slcr_offs_adj4[1];
	uint32_t _dsc_rxb_slcr_offs_adj4;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ4r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ4r_CLR(r) (r).dsc_rxb_slcr_offs_adj4[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ4r_SET(r,d) (r).dsc_rxb_slcr_offs_adj4[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ4r_GET(r) (r).dsc_rxb_slcr_offs_adj4[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ4r_RXB_SLICER_OFFSET_ADJ_CAL_P2f_GET(r) ((((r).dsc_rxb_slcr_offs_adj4[0]) >> 8) & 0x3f)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ4r_RXB_SLICER_OFFSET_ADJ_CAL_P2f_SET(r,f) (r).dsc_rxb_slcr_offs_adj4[0]=(((r).dsc_rxb_slcr_offs_adj4[0] & ~((uint32_t)0x3f << 8)) | ((((uint32_t)f) & 0x3f) << 8)) | (63 << (16 + 8))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ4r_RXB_SLICER_OFFSET_ADJ_CAL_P1f_GET(r) (((r).dsc_rxb_slcr_offs_adj4[0]) & 0x3f)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ4r_RXB_SLICER_OFFSET_ADJ_CAL_P1f_SET(r,f) (r).dsc_rxb_slcr_offs_adj4[0]=(((r).dsc_rxb_slcr_offs_adj4[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f)) | (0x3f << 16)

/*
 * These macros can be used to access DSC_RXB_SLCR_OFFS_ADJ4.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DSC_RXB_SLCR_OFFS_ADJ4r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ4r,(_r._dsc_rxb_slcr_offs_adj4))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DSC_RXB_SLCR_OFFS_ADJ4r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ4r,(_r._dsc_rxb_slcr_offs_adj4)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DSC_RXB_SLCR_OFFS_ADJ4r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ4r,(_r._dsc_rxb_slcr_offs_adj4))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DSC_RXB_SLCR_OFFS_ADJ4r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ4r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rxb_slcr_offs_adj4))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DSC_RXB_SLCR_OFFS_ADJ4r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ4r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rxb_slcr_offs_adj4))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DSC_RXB_SLCR_OFFS_ADJ4r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ4r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_rxb_slcr_offs_adj4))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_RXB_SLCR_OFFS_ADJ4r BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ4r
#define DSC_RXB_SLCR_OFFS_ADJ4r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ4r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ4r_t DSC_RXB_SLCR_OFFS_ADJ4r_t;
#define DSC_RXB_SLCR_OFFS_ADJ4r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ4r_CLR
#define DSC_RXB_SLCR_OFFS_ADJ4r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ4r_SET
#define DSC_RXB_SLCR_OFFS_ADJ4r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ4r_GET
#define DSC_RXB_SLCR_OFFS_ADJ4r_RXB_SLICER_OFFSET_ADJ_CAL_P2f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ4r_RXB_SLICER_OFFSET_ADJ_CAL_P2f_GET
#define DSC_RXB_SLCR_OFFS_ADJ4r_RXB_SLICER_OFFSET_ADJ_CAL_P2f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ4r_RXB_SLICER_OFFSET_ADJ_CAL_P2f_SET
#define DSC_RXB_SLCR_OFFS_ADJ4r_RXB_SLICER_OFFSET_ADJ_CAL_P1f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ4r_RXB_SLICER_OFFSET_ADJ_CAL_P1f_GET
#define DSC_RXB_SLCR_OFFS_ADJ4r_RXB_SLICER_OFFSET_ADJ_CAL_P1f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ4r_RXB_SLICER_OFFSET_ADJ_CAL_P1f_SET
#define READ_DSC_RXB_SLCR_OFFS_ADJ4r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DSC_RXB_SLCR_OFFS_ADJ4r
#define WRITE_DSC_RXB_SLCR_OFFS_ADJ4r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DSC_RXB_SLCR_OFFS_ADJ4r
#define MODIFY_DSC_RXB_SLCR_OFFS_ADJ4r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DSC_RXB_SLCR_OFFS_ADJ4r
#define READLN_DSC_RXB_SLCR_OFFS_ADJ4r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DSC_RXB_SLCR_OFFS_ADJ4r
#define WRITELN_DSC_RXB_SLCR_OFFS_ADJ4r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DSC_RXB_SLCR_OFFS_ADJ4r
#define WRITEALL_DSC_RXB_SLCR_OFFS_ADJ4r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DSC_RXB_SLCR_OFFS_ADJ4r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ4r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  DSC_RXB_SLCR_OFFS_ADJ5
 * BLOCKS:   DSC_AFE1
 * REGADDR:  0xd00e
 * DEVAD:    1
 * DESC:     rxb_slicer_offset_5 register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RXB_SLICER_OFFSET_ADJ_CAL_LMS signed 2's complement rxb slicer offset adjust for PAM4 ER, PAM4 NR, NRZ-DFE, NRZ-VSR[dbg_field]
 *     RXB_SLICER_OFFSET_ADJ_CAL_P0 signed 2's complement rxb slicer offset adjust for PAM4 ER, PAM4 NR, NRZ-DFE, NRZ-VSR[dbg_field]
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ5r (0x0001d00e | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ5r_SIZE 4

/*
 * This structure should be used to declare and program DSC_RXB_SLCR_OFFS_ADJ5.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ5r_s {
	uint32_t v[1];
	uint32_t dsc_rxb_slcr_offs_adj5[1];
	uint32_t _dsc_rxb_slcr_offs_adj5;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ5r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ5r_CLR(r) (r).dsc_rxb_slcr_offs_adj5[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ5r_SET(r,d) (r).dsc_rxb_slcr_offs_adj5[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ5r_GET(r) (r).dsc_rxb_slcr_offs_adj5[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ5r_RXB_SLICER_OFFSET_ADJ_CAL_P0f_GET(r) ((((r).dsc_rxb_slcr_offs_adj5[0]) >> 8) & 0x3f)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ5r_RXB_SLICER_OFFSET_ADJ_CAL_P0f_SET(r,f) (r).dsc_rxb_slcr_offs_adj5[0]=(((r).dsc_rxb_slcr_offs_adj5[0] & ~((uint32_t)0x3f << 8)) | ((((uint32_t)f) & 0x3f) << 8)) | (63 << (16 + 8))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ5r_RXB_SLICER_OFFSET_ADJ_CAL_LMSf_GET(r) (((r).dsc_rxb_slcr_offs_adj5[0]) & 0x3f)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ5r_RXB_SLICER_OFFSET_ADJ_CAL_LMSf_SET(r,f) (r).dsc_rxb_slcr_offs_adj5[0]=(((r).dsc_rxb_slcr_offs_adj5[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f)) | (0x3f << 16)

/*
 * These macros can be used to access DSC_RXB_SLCR_OFFS_ADJ5.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DSC_RXB_SLCR_OFFS_ADJ5r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ5r,(_r._dsc_rxb_slcr_offs_adj5))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DSC_RXB_SLCR_OFFS_ADJ5r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ5r,(_r._dsc_rxb_slcr_offs_adj5)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DSC_RXB_SLCR_OFFS_ADJ5r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ5r,(_r._dsc_rxb_slcr_offs_adj5))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DSC_RXB_SLCR_OFFS_ADJ5r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ5r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rxb_slcr_offs_adj5))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DSC_RXB_SLCR_OFFS_ADJ5r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ5r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rxb_slcr_offs_adj5))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DSC_RXB_SLCR_OFFS_ADJ5r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ5r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_rxb_slcr_offs_adj5))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_RXB_SLCR_OFFS_ADJ5r BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ5r
#define DSC_RXB_SLCR_OFFS_ADJ5r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ5r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ5r_t DSC_RXB_SLCR_OFFS_ADJ5r_t;
#define DSC_RXB_SLCR_OFFS_ADJ5r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ5r_CLR
#define DSC_RXB_SLCR_OFFS_ADJ5r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ5r_SET
#define DSC_RXB_SLCR_OFFS_ADJ5r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ5r_GET
#define DSC_RXB_SLCR_OFFS_ADJ5r_RXB_SLICER_OFFSET_ADJ_CAL_P0f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ5r_RXB_SLICER_OFFSET_ADJ_CAL_P0f_GET
#define DSC_RXB_SLCR_OFFS_ADJ5r_RXB_SLICER_OFFSET_ADJ_CAL_P0f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ5r_RXB_SLICER_OFFSET_ADJ_CAL_P0f_SET
#define DSC_RXB_SLCR_OFFS_ADJ5r_RXB_SLICER_OFFSET_ADJ_CAL_LMSf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ5r_RXB_SLICER_OFFSET_ADJ_CAL_LMSf_GET
#define DSC_RXB_SLCR_OFFS_ADJ5r_RXB_SLICER_OFFSET_ADJ_CAL_LMSf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ5r_RXB_SLICER_OFFSET_ADJ_CAL_LMSf_SET
#define READ_DSC_RXB_SLCR_OFFS_ADJ5r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DSC_RXB_SLCR_OFFS_ADJ5r
#define WRITE_DSC_RXB_SLCR_OFFS_ADJ5r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DSC_RXB_SLCR_OFFS_ADJ5r
#define MODIFY_DSC_RXB_SLCR_OFFS_ADJ5r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DSC_RXB_SLCR_OFFS_ADJ5r
#define READLN_DSC_RXB_SLCR_OFFS_ADJ5r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DSC_RXB_SLCR_OFFS_ADJ5r
#define WRITELN_DSC_RXB_SLCR_OFFS_ADJ5r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DSC_RXB_SLCR_OFFS_ADJ5r
#define WRITEALL_DSC_RXB_SLCR_OFFS_ADJ5r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DSC_RXB_SLCR_OFFS_ADJ5r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RXB_SLCR_OFFS_ADJ5r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  DSC_RX_DFE_TAP5_ABCD
 * BLOCKS:   DSC_AFE2
 * REGADDR:  0xd015
 * DEVAD:    1
 * DESC:     rx_dfe_tap5_abcd register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RXB_DFE_TAP5     signed 2's complement +/-7, 1 LSB=150mV/64
 *     RXA_DFE_TAP5     signed 2's complement +/-7, 1 LSB=150mV/64
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP5_ABCDr (0x0001d015 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP5_ABCDr_SIZE 4

/*
 * This structure should be used to declare and program DSC_RX_DFE_TAP5_ABCD.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP5_ABCDr_s {
	uint32_t v[1];
	uint32_t dsc_rx_dfe_tap5_abcd[1];
	uint32_t _dsc_rx_dfe_tap5_abcd;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP5_ABCDr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP5_ABCDr_CLR(r) (r).dsc_rx_dfe_tap5_abcd[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP5_ABCDr_SET(r,d) (r).dsc_rx_dfe_tap5_abcd[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP5_ABCDr_GET(r) (r).dsc_rx_dfe_tap5_abcd[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP5_ABCDr_RXA_DFE_TAP5f_GET(r) ((((r).dsc_rx_dfe_tap5_abcd[0]) >> 12) & 0xf)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP5_ABCDr_RXA_DFE_TAP5f_SET(r,f) (r).dsc_rx_dfe_tap5_abcd[0]=(((r).dsc_rx_dfe_tap5_abcd[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12)) | (15 << (16 + 12))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP5_ABCDr_RXB_DFE_TAP5f_GET(r) ((((r).dsc_rx_dfe_tap5_abcd[0]) >> 8) & 0xf)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP5_ABCDr_RXB_DFE_TAP5f_SET(r,f) (r).dsc_rx_dfe_tap5_abcd[0]=(((r).dsc_rx_dfe_tap5_abcd[0] & ~((uint32_t)0xf << 8)) | ((((uint32_t)f) & 0xf) << 8)) | (15 << (16 + 8))

/*
 * These macros can be used to access DSC_RX_DFE_TAP5_ABCD.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DSC_RX_DFE_TAP5_ABCDr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP5_ABCDr,(_r._dsc_rx_dfe_tap5_abcd))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DSC_RX_DFE_TAP5_ABCDr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP5_ABCDr,(_r._dsc_rx_dfe_tap5_abcd)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DSC_RX_DFE_TAP5_ABCDr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP5_ABCDr,(_r._dsc_rx_dfe_tap5_abcd))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DSC_RX_DFE_TAP5_ABCDr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP5_ABCDr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_dfe_tap5_abcd))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DSC_RX_DFE_TAP5_ABCDr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP5_ABCDr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_dfe_tap5_abcd))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DSC_RX_DFE_TAP5_ABCDr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP5_ABCDr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_rx_dfe_tap5_abcd))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_RX_DFE_TAP5_ABCDr BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP5_ABCDr
#define DSC_RX_DFE_TAP5_ABCDr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP5_ABCDr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP5_ABCDr_t DSC_RX_DFE_TAP5_ABCDr_t;
#define DSC_RX_DFE_TAP5_ABCDr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP5_ABCDr_CLR
#define DSC_RX_DFE_TAP5_ABCDr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP5_ABCDr_SET
#define DSC_RX_DFE_TAP5_ABCDr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP5_ABCDr_GET
#define DSC_RX_DFE_TAP5_ABCDr_RXA_DFE_TAP5f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP5_ABCDr_RXA_DFE_TAP5f_GET
#define DSC_RX_DFE_TAP5_ABCDr_RXA_DFE_TAP5f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP5_ABCDr_RXA_DFE_TAP5f_SET
#define DSC_RX_DFE_TAP5_ABCDr_RXB_DFE_TAP5f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP5_ABCDr_RXB_DFE_TAP5f_GET
#define DSC_RX_DFE_TAP5_ABCDr_RXB_DFE_TAP5f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP5_ABCDr_RXB_DFE_TAP5f_SET
#define READ_DSC_RX_DFE_TAP5_ABCDr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DSC_RX_DFE_TAP5_ABCDr
#define WRITE_DSC_RX_DFE_TAP5_ABCDr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DSC_RX_DFE_TAP5_ABCDr
#define MODIFY_DSC_RX_DFE_TAP5_ABCDr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DSC_RX_DFE_TAP5_ABCDr
#define READLN_DSC_RX_DFE_TAP5_ABCDr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DSC_RX_DFE_TAP5_ABCDr
#define WRITELN_DSC_RX_DFE_TAP5_ABCDr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DSC_RX_DFE_TAP5_ABCDr
#define WRITEALL_DSC_RX_DFE_TAP5_ABCDr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DSC_RX_DFE_TAP5_ABCDr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP5_ABCDr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  DSC_RX_DFE_TAP6_ABCD
 * BLOCKS:   DSC_AFE2
 * REGADDR:  0xd016
 * DEVAD:    1
 * DESC:     rx_dfe_tap6_abcd register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RXB_DFE_TAP6     signed 2's complement +/-7, 1 LSB=150mV/64
 *     RXA_DFE_TAP6     signed 2's complement +/-7, 1 LSB=150mV/64
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP6_ABCDr (0x0001d016 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP6_ABCDr_SIZE 4

/*
 * This structure should be used to declare and program DSC_RX_DFE_TAP6_ABCD.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP6_ABCDr_s {
	uint32_t v[1];
	uint32_t dsc_rx_dfe_tap6_abcd[1];
	uint32_t _dsc_rx_dfe_tap6_abcd;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP6_ABCDr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP6_ABCDr_CLR(r) (r).dsc_rx_dfe_tap6_abcd[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP6_ABCDr_SET(r,d) (r).dsc_rx_dfe_tap6_abcd[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP6_ABCDr_GET(r) (r).dsc_rx_dfe_tap6_abcd[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP6_ABCDr_RXA_DFE_TAP6f_GET(r) ((((r).dsc_rx_dfe_tap6_abcd[0]) >> 12) & 0xf)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP6_ABCDr_RXA_DFE_TAP6f_SET(r,f) (r).dsc_rx_dfe_tap6_abcd[0]=(((r).dsc_rx_dfe_tap6_abcd[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12)) | (15 << (16 + 12))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP6_ABCDr_RXB_DFE_TAP6f_GET(r) ((((r).dsc_rx_dfe_tap6_abcd[0]) >> 8) & 0xf)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP6_ABCDr_RXB_DFE_TAP6f_SET(r,f) (r).dsc_rx_dfe_tap6_abcd[0]=(((r).dsc_rx_dfe_tap6_abcd[0] & ~((uint32_t)0xf << 8)) | ((((uint32_t)f) & 0xf) << 8)) | (15 << (16 + 8))

/*
 * These macros can be used to access DSC_RX_DFE_TAP6_ABCD.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DSC_RX_DFE_TAP6_ABCDr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP6_ABCDr,(_r._dsc_rx_dfe_tap6_abcd))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DSC_RX_DFE_TAP6_ABCDr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP6_ABCDr,(_r._dsc_rx_dfe_tap6_abcd)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DSC_RX_DFE_TAP6_ABCDr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP6_ABCDr,(_r._dsc_rx_dfe_tap6_abcd))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DSC_RX_DFE_TAP6_ABCDr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP6_ABCDr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_dfe_tap6_abcd))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DSC_RX_DFE_TAP6_ABCDr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP6_ABCDr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_dfe_tap6_abcd))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DSC_RX_DFE_TAP6_ABCDr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP6_ABCDr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_rx_dfe_tap6_abcd))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_RX_DFE_TAP6_ABCDr BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP6_ABCDr
#define DSC_RX_DFE_TAP6_ABCDr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP6_ABCDr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP6_ABCDr_t DSC_RX_DFE_TAP6_ABCDr_t;
#define DSC_RX_DFE_TAP6_ABCDr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP6_ABCDr_CLR
#define DSC_RX_DFE_TAP6_ABCDr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP6_ABCDr_SET
#define DSC_RX_DFE_TAP6_ABCDr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP6_ABCDr_GET
#define DSC_RX_DFE_TAP6_ABCDr_RXA_DFE_TAP6f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP6_ABCDr_RXA_DFE_TAP6f_GET
#define DSC_RX_DFE_TAP6_ABCDr_RXA_DFE_TAP6f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP6_ABCDr_RXA_DFE_TAP6f_SET
#define DSC_RX_DFE_TAP6_ABCDr_RXB_DFE_TAP6f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP6_ABCDr_RXB_DFE_TAP6f_GET
#define DSC_RX_DFE_TAP6_ABCDr_RXB_DFE_TAP6f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP6_ABCDr_RXB_DFE_TAP6f_SET
#define READ_DSC_RX_DFE_TAP6_ABCDr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DSC_RX_DFE_TAP6_ABCDr
#define WRITE_DSC_RX_DFE_TAP6_ABCDr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DSC_RX_DFE_TAP6_ABCDr
#define MODIFY_DSC_RX_DFE_TAP6_ABCDr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DSC_RX_DFE_TAP6_ABCDr
#define READLN_DSC_RX_DFE_TAP6_ABCDr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DSC_RX_DFE_TAP6_ABCDr
#define WRITELN_DSC_RX_DFE_TAP6_ABCDr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DSC_RX_DFE_TAP6_ABCDr
#define WRITEALL_DSC_RX_DFE_TAP6_ABCDr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DSC_RX_DFE_TAP6_ABCDr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP6_ABCDr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  DSC_RX_DFE_TAP7_ABCD
 * BLOCKS:   DSC_AFE2
 * REGADDR:  0xd017
 * DEVAD:    1
 * DESC:     rx_dfe_tap7_abcd register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RXB_DFE_TAP7     signed 2's complement +/-7, 1 LSB=150mV/64
 *     RXA_DFE_TAP7     signed 2's complement +/-7, 1 LSB=150mV/64
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP7_ABCDr (0x0001d017 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP7_ABCDr_SIZE 4

/*
 * This structure should be used to declare and program DSC_RX_DFE_TAP7_ABCD.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP7_ABCDr_s {
	uint32_t v[1];
	uint32_t dsc_rx_dfe_tap7_abcd[1];
	uint32_t _dsc_rx_dfe_tap7_abcd;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP7_ABCDr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP7_ABCDr_CLR(r) (r).dsc_rx_dfe_tap7_abcd[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP7_ABCDr_SET(r,d) (r).dsc_rx_dfe_tap7_abcd[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP7_ABCDr_GET(r) (r).dsc_rx_dfe_tap7_abcd[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP7_ABCDr_RXA_DFE_TAP7f_GET(r) ((((r).dsc_rx_dfe_tap7_abcd[0]) >> 12) & 0xf)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP7_ABCDr_RXA_DFE_TAP7f_SET(r,f) (r).dsc_rx_dfe_tap7_abcd[0]=(((r).dsc_rx_dfe_tap7_abcd[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12)) | (15 << (16 + 12))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP7_ABCDr_RXB_DFE_TAP7f_GET(r) ((((r).dsc_rx_dfe_tap7_abcd[0]) >> 8) & 0xf)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP7_ABCDr_RXB_DFE_TAP7f_SET(r,f) (r).dsc_rx_dfe_tap7_abcd[0]=(((r).dsc_rx_dfe_tap7_abcd[0] & ~((uint32_t)0xf << 8)) | ((((uint32_t)f) & 0xf) << 8)) | (15 << (16 + 8))

/*
 * These macros can be used to access DSC_RX_DFE_TAP7_ABCD.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DSC_RX_DFE_TAP7_ABCDr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP7_ABCDr,(_r._dsc_rx_dfe_tap7_abcd))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DSC_RX_DFE_TAP7_ABCDr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP7_ABCDr,(_r._dsc_rx_dfe_tap7_abcd)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DSC_RX_DFE_TAP7_ABCDr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP7_ABCDr,(_r._dsc_rx_dfe_tap7_abcd))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DSC_RX_DFE_TAP7_ABCDr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP7_ABCDr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_dfe_tap7_abcd))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DSC_RX_DFE_TAP7_ABCDr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP7_ABCDr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_dfe_tap7_abcd))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DSC_RX_DFE_TAP7_ABCDr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP7_ABCDr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_rx_dfe_tap7_abcd))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_RX_DFE_TAP7_ABCDr BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP7_ABCDr
#define DSC_RX_DFE_TAP7_ABCDr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP7_ABCDr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP7_ABCDr_t DSC_RX_DFE_TAP7_ABCDr_t;
#define DSC_RX_DFE_TAP7_ABCDr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP7_ABCDr_CLR
#define DSC_RX_DFE_TAP7_ABCDr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP7_ABCDr_SET
#define DSC_RX_DFE_TAP7_ABCDr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP7_ABCDr_GET
#define DSC_RX_DFE_TAP7_ABCDr_RXA_DFE_TAP7f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP7_ABCDr_RXA_DFE_TAP7f_GET
#define DSC_RX_DFE_TAP7_ABCDr_RXA_DFE_TAP7f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP7_ABCDr_RXA_DFE_TAP7f_SET
#define DSC_RX_DFE_TAP7_ABCDr_RXB_DFE_TAP7f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP7_ABCDr_RXB_DFE_TAP7f_GET
#define DSC_RX_DFE_TAP7_ABCDr_RXB_DFE_TAP7f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP7_ABCDr_RXB_DFE_TAP7f_SET
#define READ_DSC_RX_DFE_TAP7_ABCDr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DSC_RX_DFE_TAP7_ABCDr
#define WRITE_DSC_RX_DFE_TAP7_ABCDr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DSC_RX_DFE_TAP7_ABCDr
#define MODIFY_DSC_RX_DFE_TAP7_ABCDr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DSC_RX_DFE_TAP7_ABCDr
#define READLN_DSC_RX_DFE_TAP7_ABCDr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DSC_RX_DFE_TAP7_ABCDr
#define WRITELN_DSC_RX_DFE_TAP7_ABCDr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DSC_RX_DFE_TAP7_ABCDr
#define WRITEALL_DSC_RX_DFE_TAP7_ABCDr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DSC_RX_DFE_TAP7_ABCDr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP7_ABCDr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  DSC_RX_DFE_TAP8_ABCD
 * BLOCKS:   DSC_AFE2
 * REGADDR:  0xd018
 * DEVAD:    1
 * DESC:     rx_dfe_tap8_abcd register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RXB_DFE_TAP8     signed 2's complement +/-7, 1 LSB=150mV/64
 *     RXA_DFE_TAP8     signed 2's complement +/-7, 1 LSB=150mV/64
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP8_ABCDr (0x0001d018 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP8_ABCDr_SIZE 4

/*
 * This structure should be used to declare and program DSC_RX_DFE_TAP8_ABCD.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP8_ABCDr_s {
	uint32_t v[1];
	uint32_t dsc_rx_dfe_tap8_abcd[1];
	uint32_t _dsc_rx_dfe_tap8_abcd;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP8_ABCDr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP8_ABCDr_CLR(r) (r).dsc_rx_dfe_tap8_abcd[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP8_ABCDr_SET(r,d) (r).dsc_rx_dfe_tap8_abcd[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP8_ABCDr_GET(r) (r).dsc_rx_dfe_tap8_abcd[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP8_ABCDr_RXA_DFE_TAP8f_GET(r) ((((r).dsc_rx_dfe_tap8_abcd[0]) >> 12) & 0xf)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP8_ABCDr_RXA_DFE_TAP8f_SET(r,f) (r).dsc_rx_dfe_tap8_abcd[0]=(((r).dsc_rx_dfe_tap8_abcd[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12)) | (15 << (16 + 12))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP8_ABCDr_RXB_DFE_TAP8f_GET(r) ((((r).dsc_rx_dfe_tap8_abcd[0]) >> 8) & 0xf)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP8_ABCDr_RXB_DFE_TAP8f_SET(r,f) (r).dsc_rx_dfe_tap8_abcd[0]=(((r).dsc_rx_dfe_tap8_abcd[0] & ~((uint32_t)0xf << 8)) | ((((uint32_t)f) & 0xf) << 8)) | (15 << (16 + 8))

/*
 * These macros can be used to access DSC_RX_DFE_TAP8_ABCD.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DSC_RX_DFE_TAP8_ABCDr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP8_ABCDr,(_r._dsc_rx_dfe_tap8_abcd))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DSC_RX_DFE_TAP8_ABCDr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP8_ABCDr,(_r._dsc_rx_dfe_tap8_abcd)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DSC_RX_DFE_TAP8_ABCDr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP8_ABCDr,(_r._dsc_rx_dfe_tap8_abcd))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DSC_RX_DFE_TAP8_ABCDr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP8_ABCDr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_dfe_tap8_abcd))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DSC_RX_DFE_TAP8_ABCDr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP8_ABCDr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_dfe_tap8_abcd))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DSC_RX_DFE_TAP8_ABCDr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP8_ABCDr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_rx_dfe_tap8_abcd))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_RX_DFE_TAP8_ABCDr BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP8_ABCDr
#define DSC_RX_DFE_TAP8_ABCDr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP8_ABCDr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP8_ABCDr_t DSC_RX_DFE_TAP8_ABCDr_t;
#define DSC_RX_DFE_TAP8_ABCDr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP8_ABCDr_CLR
#define DSC_RX_DFE_TAP8_ABCDr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP8_ABCDr_SET
#define DSC_RX_DFE_TAP8_ABCDr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP8_ABCDr_GET
#define DSC_RX_DFE_TAP8_ABCDr_RXA_DFE_TAP8f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP8_ABCDr_RXA_DFE_TAP8f_GET
#define DSC_RX_DFE_TAP8_ABCDr_RXA_DFE_TAP8f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP8_ABCDr_RXA_DFE_TAP8f_SET
#define DSC_RX_DFE_TAP8_ABCDr_RXB_DFE_TAP8f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP8_ABCDr_RXB_DFE_TAP8f_GET
#define DSC_RX_DFE_TAP8_ABCDr_RXB_DFE_TAP8f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP8_ABCDr_RXB_DFE_TAP8f_SET
#define READ_DSC_RX_DFE_TAP8_ABCDr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DSC_RX_DFE_TAP8_ABCDr
#define WRITE_DSC_RX_DFE_TAP8_ABCDr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DSC_RX_DFE_TAP8_ABCDr
#define MODIFY_DSC_RX_DFE_TAP8_ABCDr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DSC_RX_DFE_TAP8_ABCDr
#define READLN_DSC_RX_DFE_TAP8_ABCDr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DSC_RX_DFE_TAP8_ABCDr
#define WRITELN_DSC_RX_DFE_TAP8_ABCDr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DSC_RX_DFE_TAP8_ABCDr
#define WRITEALL_DSC_RX_DFE_TAP8_ABCDr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DSC_RX_DFE_TAP8_ABCDr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP8_ABCDr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  DSC_RX_DFE_TAP9_ABCD
 * BLOCKS:   DSC_AFE2
 * REGADDR:  0xd019
 * DEVAD:    1
 * DESC:     rx_dfe_tap9_abcd register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RXB_DFE_TAP9     signed 2's complement +/-7, 1 LSB=150mV/64
 *     RXA_DFE_TAP9     signed 2's complement +/-7, 1 LSB=150mV/64
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP9_ABCDr (0x0001d019 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP9_ABCDr_SIZE 4

/*
 * This structure should be used to declare and program DSC_RX_DFE_TAP9_ABCD.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP9_ABCDr_s {
	uint32_t v[1];
	uint32_t dsc_rx_dfe_tap9_abcd[1];
	uint32_t _dsc_rx_dfe_tap9_abcd;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP9_ABCDr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP9_ABCDr_CLR(r) (r).dsc_rx_dfe_tap9_abcd[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP9_ABCDr_SET(r,d) (r).dsc_rx_dfe_tap9_abcd[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP9_ABCDr_GET(r) (r).dsc_rx_dfe_tap9_abcd[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP9_ABCDr_RXA_DFE_TAP9f_GET(r) ((((r).dsc_rx_dfe_tap9_abcd[0]) >> 12) & 0xf)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP9_ABCDr_RXA_DFE_TAP9f_SET(r,f) (r).dsc_rx_dfe_tap9_abcd[0]=(((r).dsc_rx_dfe_tap9_abcd[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12)) | (15 << (16 + 12))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP9_ABCDr_RXB_DFE_TAP9f_GET(r) ((((r).dsc_rx_dfe_tap9_abcd[0]) >> 8) & 0xf)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP9_ABCDr_RXB_DFE_TAP9f_SET(r,f) (r).dsc_rx_dfe_tap9_abcd[0]=(((r).dsc_rx_dfe_tap9_abcd[0] & ~((uint32_t)0xf << 8)) | ((((uint32_t)f) & 0xf) << 8)) | (15 << (16 + 8))

/*
 * These macros can be used to access DSC_RX_DFE_TAP9_ABCD.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DSC_RX_DFE_TAP9_ABCDr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP9_ABCDr,(_r._dsc_rx_dfe_tap9_abcd))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DSC_RX_DFE_TAP9_ABCDr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP9_ABCDr,(_r._dsc_rx_dfe_tap9_abcd)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DSC_RX_DFE_TAP9_ABCDr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP9_ABCDr,(_r._dsc_rx_dfe_tap9_abcd))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DSC_RX_DFE_TAP9_ABCDr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP9_ABCDr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_dfe_tap9_abcd))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DSC_RX_DFE_TAP9_ABCDr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP9_ABCDr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_dfe_tap9_abcd))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DSC_RX_DFE_TAP9_ABCDr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP9_ABCDr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_rx_dfe_tap9_abcd))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_RX_DFE_TAP9_ABCDr BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP9_ABCDr
#define DSC_RX_DFE_TAP9_ABCDr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP9_ABCDr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP9_ABCDr_t DSC_RX_DFE_TAP9_ABCDr_t;
#define DSC_RX_DFE_TAP9_ABCDr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP9_ABCDr_CLR
#define DSC_RX_DFE_TAP9_ABCDr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP9_ABCDr_SET
#define DSC_RX_DFE_TAP9_ABCDr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP9_ABCDr_GET
#define DSC_RX_DFE_TAP9_ABCDr_RXA_DFE_TAP9f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP9_ABCDr_RXA_DFE_TAP9f_GET
#define DSC_RX_DFE_TAP9_ABCDr_RXA_DFE_TAP9f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP9_ABCDr_RXA_DFE_TAP9f_SET
#define DSC_RX_DFE_TAP9_ABCDr_RXB_DFE_TAP9f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP9_ABCDr_RXB_DFE_TAP9f_GET
#define DSC_RX_DFE_TAP9_ABCDr_RXB_DFE_TAP9f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP9_ABCDr_RXB_DFE_TAP9f_SET
#define READ_DSC_RX_DFE_TAP9_ABCDr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DSC_RX_DFE_TAP9_ABCDr
#define WRITE_DSC_RX_DFE_TAP9_ABCDr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DSC_RX_DFE_TAP9_ABCDr
#define MODIFY_DSC_RX_DFE_TAP9_ABCDr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DSC_RX_DFE_TAP9_ABCDr
#define READLN_DSC_RX_DFE_TAP9_ABCDr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DSC_RX_DFE_TAP9_ABCDr
#define WRITELN_DSC_RX_DFE_TAP9_ABCDr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DSC_RX_DFE_TAP9_ABCDr
#define WRITEALL_DSC_RX_DFE_TAP9_ABCDr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DSC_RX_DFE_TAP9_ABCDr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP9_ABCDr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  DSC_RX_DFE_TAP10_ABCD
 * BLOCKS:   DSC_AFE3
 * REGADDR:  0xd020
 * DEVAD:    1
 * DESC:     rx_dfe_tap10_abcd register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RXB_DFE_TAP10    signed 2's complement +/-7, 1 LSB=150mV/64
 *     RXA_DFE_TAP10    signed 2's complement +/-7, 1 LSB=150mV/64
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP10_ABCDr (0x0001d020 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP10_ABCDr_SIZE 4

/*
 * This structure should be used to declare and program DSC_RX_DFE_TAP10_ABCD.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP10_ABCDr_s {
	uint32_t v[1];
	uint32_t dsc_rx_dfe_tap10_abcd[1];
	uint32_t _dsc_rx_dfe_tap10_abcd;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP10_ABCDr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP10_ABCDr_CLR(r) (r).dsc_rx_dfe_tap10_abcd[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP10_ABCDr_SET(r,d) (r).dsc_rx_dfe_tap10_abcd[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP10_ABCDr_GET(r) (r).dsc_rx_dfe_tap10_abcd[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP10_ABCDr_RXA_DFE_TAP10f_GET(r) ((((r).dsc_rx_dfe_tap10_abcd[0]) >> 12) & 0xf)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP10_ABCDr_RXA_DFE_TAP10f_SET(r,f) (r).dsc_rx_dfe_tap10_abcd[0]=(((r).dsc_rx_dfe_tap10_abcd[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12)) | (15 << (16 + 12))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP10_ABCDr_RXB_DFE_TAP10f_GET(r) ((((r).dsc_rx_dfe_tap10_abcd[0]) >> 8) & 0xf)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP10_ABCDr_RXB_DFE_TAP10f_SET(r,f) (r).dsc_rx_dfe_tap10_abcd[0]=(((r).dsc_rx_dfe_tap10_abcd[0] & ~((uint32_t)0xf << 8)) | ((((uint32_t)f) & 0xf) << 8)) | (15 << (16 + 8))

/*
 * These macros can be used to access DSC_RX_DFE_TAP10_ABCD.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DSC_RX_DFE_TAP10_ABCDr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP10_ABCDr,(_r._dsc_rx_dfe_tap10_abcd))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DSC_RX_DFE_TAP10_ABCDr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP10_ABCDr,(_r._dsc_rx_dfe_tap10_abcd)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DSC_RX_DFE_TAP10_ABCDr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP10_ABCDr,(_r._dsc_rx_dfe_tap10_abcd))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DSC_RX_DFE_TAP10_ABCDr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP10_ABCDr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_dfe_tap10_abcd))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DSC_RX_DFE_TAP10_ABCDr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP10_ABCDr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_dfe_tap10_abcd))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DSC_RX_DFE_TAP10_ABCDr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP10_ABCDr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_rx_dfe_tap10_abcd))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_RX_DFE_TAP10_ABCDr BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP10_ABCDr
#define DSC_RX_DFE_TAP10_ABCDr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP10_ABCDr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP10_ABCDr_t DSC_RX_DFE_TAP10_ABCDr_t;
#define DSC_RX_DFE_TAP10_ABCDr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP10_ABCDr_CLR
#define DSC_RX_DFE_TAP10_ABCDr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP10_ABCDr_SET
#define DSC_RX_DFE_TAP10_ABCDr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP10_ABCDr_GET
#define DSC_RX_DFE_TAP10_ABCDr_RXA_DFE_TAP10f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP10_ABCDr_RXA_DFE_TAP10f_GET
#define DSC_RX_DFE_TAP10_ABCDr_RXA_DFE_TAP10f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP10_ABCDr_RXA_DFE_TAP10f_SET
#define DSC_RX_DFE_TAP10_ABCDr_RXB_DFE_TAP10f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP10_ABCDr_RXB_DFE_TAP10f_GET
#define DSC_RX_DFE_TAP10_ABCDr_RXB_DFE_TAP10f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP10_ABCDr_RXB_DFE_TAP10f_SET
#define READ_DSC_RX_DFE_TAP10_ABCDr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DSC_RX_DFE_TAP10_ABCDr
#define WRITE_DSC_RX_DFE_TAP10_ABCDr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DSC_RX_DFE_TAP10_ABCDr
#define MODIFY_DSC_RX_DFE_TAP10_ABCDr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DSC_RX_DFE_TAP10_ABCDr
#define READLN_DSC_RX_DFE_TAP10_ABCDr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DSC_RX_DFE_TAP10_ABCDr
#define WRITELN_DSC_RX_DFE_TAP10_ABCDr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DSC_RX_DFE_TAP10_ABCDr
#define WRITEALL_DSC_RX_DFE_TAP10_ABCDr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DSC_RX_DFE_TAP10_ABCDr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP10_ABCDr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  DSC_RX_DFE_TAP11_ABCD
 * BLOCKS:   DSC_AFE3
 * REGADDR:  0xd021
 * DEVAD:    1
 * DESC:     rx_dfe_tap11_abcd register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RXB_DFE_TAP11    signed 2's complement +/-7, 1 LSB=150mV/64
 *     RXA_DFE_TAP11    signed 2's complement +/-7, 1 LSB=150mV/64
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP11_ABCDr (0x0001d021 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP11_ABCDr_SIZE 4

/*
 * This structure should be used to declare and program DSC_RX_DFE_TAP11_ABCD.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP11_ABCDr_s {
	uint32_t v[1];
	uint32_t dsc_rx_dfe_tap11_abcd[1];
	uint32_t _dsc_rx_dfe_tap11_abcd;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP11_ABCDr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP11_ABCDr_CLR(r) (r).dsc_rx_dfe_tap11_abcd[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP11_ABCDr_SET(r,d) (r).dsc_rx_dfe_tap11_abcd[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP11_ABCDr_GET(r) (r).dsc_rx_dfe_tap11_abcd[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP11_ABCDr_RXA_DFE_TAP11f_GET(r) ((((r).dsc_rx_dfe_tap11_abcd[0]) >> 12) & 0xf)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP11_ABCDr_RXA_DFE_TAP11f_SET(r,f) (r).dsc_rx_dfe_tap11_abcd[0]=(((r).dsc_rx_dfe_tap11_abcd[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12)) | (15 << (16 + 12))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP11_ABCDr_RXB_DFE_TAP11f_GET(r) ((((r).dsc_rx_dfe_tap11_abcd[0]) >> 8) & 0xf)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP11_ABCDr_RXB_DFE_TAP11f_SET(r,f) (r).dsc_rx_dfe_tap11_abcd[0]=(((r).dsc_rx_dfe_tap11_abcd[0] & ~((uint32_t)0xf << 8)) | ((((uint32_t)f) & 0xf) << 8)) | (15 << (16 + 8))

/*
 * These macros can be used to access DSC_RX_DFE_TAP11_ABCD.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DSC_RX_DFE_TAP11_ABCDr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP11_ABCDr,(_r._dsc_rx_dfe_tap11_abcd))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DSC_RX_DFE_TAP11_ABCDr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP11_ABCDr,(_r._dsc_rx_dfe_tap11_abcd)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DSC_RX_DFE_TAP11_ABCDr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP11_ABCDr,(_r._dsc_rx_dfe_tap11_abcd))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DSC_RX_DFE_TAP11_ABCDr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP11_ABCDr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_dfe_tap11_abcd))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DSC_RX_DFE_TAP11_ABCDr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP11_ABCDr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_dfe_tap11_abcd))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DSC_RX_DFE_TAP11_ABCDr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP11_ABCDr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_rx_dfe_tap11_abcd))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_RX_DFE_TAP11_ABCDr BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP11_ABCDr
#define DSC_RX_DFE_TAP11_ABCDr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP11_ABCDr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP11_ABCDr_t DSC_RX_DFE_TAP11_ABCDr_t;
#define DSC_RX_DFE_TAP11_ABCDr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP11_ABCDr_CLR
#define DSC_RX_DFE_TAP11_ABCDr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP11_ABCDr_SET
#define DSC_RX_DFE_TAP11_ABCDr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP11_ABCDr_GET
#define DSC_RX_DFE_TAP11_ABCDr_RXA_DFE_TAP11f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP11_ABCDr_RXA_DFE_TAP11f_GET
#define DSC_RX_DFE_TAP11_ABCDr_RXA_DFE_TAP11f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP11_ABCDr_RXA_DFE_TAP11f_SET
#define DSC_RX_DFE_TAP11_ABCDr_RXB_DFE_TAP11f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP11_ABCDr_RXB_DFE_TAP11f_GET
#define DSC_RX_DFE_TAP11_ABCDr_RXB_DFE_TAP11f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP11_ABCDr_RXB_DFE_TAP11f_SET
#define READ_DSC_RX_DFE_TAP11_ABCDr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DSC_RX_DFE_TAP11_ABCDr
#define WRITE_DSC_RX_DFE_TAP11_ABCDr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DSC_RX_DFE_TAP11_ABCDr
#define MODIFY_DSC_RX_DFE_TAP11_ABCDr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DSC_RX_DFE_TAP11_ABCDr
#define READLN_DSC_RX_DFE_TAP11_ABCDr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DSC_RX_DFE_TAP11_ABCDr
#define WRITELN_DSC_RX_DFE_TAP11_ABCDr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DSC_RX_DFE_TAP11_ABCDr
#define WRITEALL_DSC_RX_DFE_TAP11_ABCDr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DSC_RX_DFE_TAP11_ABCDr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP11_ABCDr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  DSC_RX_DFE_TAP12_ABCD
 * BLOCKS:   DSC_AFE3
 * REGADDR:  0xd022
 * DEVAD:    1
 * DESC:     rx_dfe_tap12_abcd register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RXB_DFE_TAP12    signed 2's complement +/-7, 1 LSB=150mV/64
 *     RXA_DFE_TAP12    signed 2's complement +/-7, 1 LSB=150mV/64
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP12_ABCDr (0x0001d022 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP12_ABCDr_SIZE 4

/*
 * This structure should be used to declare and program DSC_RX_DFE_TAP12_ABCD.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP12_ABCDr_s {
	uint32_t v[1];
	uint32_t dsc_rx_dfe_tap12_abcd[1];
	uint32_t _dsc_rx_dfe_tap12_abcd;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP12_ABCDr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP12_ABCDr_CLR(r) (r).dsc_rx_dfe_tap12_abcd[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP12_ABCDr_SET(r,d) (r).dsc_rx_dfe_tap12_abcd[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP12_ABCDr_GET(r) (r).dsc_rx_dfe_tap12_abcd[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP12_ABCDr_RXA_DFE_TAP12f_GET(r) ((((r).dsc_rx_dfe_tap12_abcd[0]) >> 12) & 0xf)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP12_ABCDr_RXA_DFE_TAP12f_SET(r,f) (r).dsc_rx_dfe_tap12_abcd[0]=(((r).dsc_rx_dfe_tap12_abcd[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12)) | (15 << (16 + 12))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP12_ABCDr_RXB_DFE_TAP12f_GET(r) ((((r).dsc_rx_dfe_tap12_abcd[0]) >> 8) & 0xf)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP12_ABCDr_RXB_DFE_TAP12f_SET(r,f) (r).dsc_rx_dfe_tap12_abcd[0]=(((r).dsc_rx_dfe_tap12_abcd[0] & ~((uint32_t)0xf << 8)) | ((((uint32_t)f) & 0xf) << 8)) | (15 << (16 + 8))

/*
 * These macros can be used to access DSC_RX_DFE_TAP12_ABCD.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DSC_RX_DFE_TAP12_ABCDr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP12_ABCDr,(_r._dsc_rx_dfe_tap12_abcd))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DSC_RX_DFE_TAP12_ABCDr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP12_ABCDr,(_r._dsc_rx_dfe_tap12_abcd)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DSC_RX_DFE_TAP12_ABCDr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP12_ABCDr,(_r._dsc_rx_dfe_tap12_abcd))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DSC_RX_DFE_TAP12_ABCDr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP12_ABCDr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_dfe_tap12_abcd))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DSC_RX_DFE_TAP12_ABCDr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP12_ABCDr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_dfe_tap12_abcd))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DSC_RX_DFE_TAP12_ABCDr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP12_ABCDr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_rx_dfe_tap12_abcd))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_RX_DFE_TAP12_ABCDr BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP12_ABCDr
#define DSC_RX_DFE_TAP12_ABCDr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP12_ABCDr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP12_ABCDr_t DSC_RX_DFE_TAP12_ABCDr_t;
#define DSC_RX_DFE_TAP12_ABCDr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP12_ABCDr_CLR
#define DSC_RX_DFE_TAP12_ABCDr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP12_ABCDr_SET
#define DSC_RX_DFE_TAP12_ABCDr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP12_ABCDr_GET
#define DSC_RX_DFE_TAP12_ABCDr_RXA_DFE_TAP12f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP12_ABCDr_RXA_DFE_TAP12f_GET
#define DSC_RX_DFE_TAP12_ABCDr_RXA_DFE_TAP12f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP12_ABCDr_RXA_DFE_TAP12f_SET
#define DSC_RX_DFE_TAP12_ABCDr_RXB_DFE_TAP12f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP12_ABCDr_RXB_DFE_TAP12f_GET
#define DSC_RX_DFE_TAP12_ABCDr_RXB_DFE_TAP12f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP12_ABCDr_RXB_DFE_TAP12f_SET
#define READ_DSC_RX_DFE_TAP12_ABCDr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DSC_RX_DFE_TAP12_ABCDr
#define WRITE_DSC_RX_DFE_TAP12_ABCDr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DSC_RX_DFE_TAP12_ABCDr
#define MODIFY_DSC_RX_DFE_TAP12_ABCDr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DSC_RX_DFE_TAP12_ABCDr
#define READLN_DSC_RX_DFE_TAP12_ABCDr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DSC_RX_DFE_TAP12_ABCDr
#define WRITELN_DSC_RX_DFE_TAP12_ABCDr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DSC_RX_DFE_TAP12_ABCDr
#define WRITEALL_DSC_RX_DFE_TAP12_ABCDr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DSC_RX_DFE_TAP12_ABCDr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP12_ABCDr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  DSC_RX_DFE_TAP13_ABCD
 * BLOCKS:   DSC_AFE3
 * REGADDR:  0xd023
 * DEVAD:    1
 * DESC:     rx_dfe_tap13_abcd register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RXB_DFE_TAP13    signed 2's complement +/-7, 1 LSB=150mV/64
 *     RXA_DFE_TAP13    signed 2's complement +/-7, 1 LSB=150mV/64
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP13_ABCDr (0x0001d023 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP13_ABCDr_SIZE 4

/*
 * This structure should be used to declare and program DSC_RX_DFE_TAP13_ABCD.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP13_ABCDr_s {
	uint32_t v[1];
	uint32_t dsc_rx_dfe_tap13_abcd[1];
	uint32_t _dsc_rx_dfe_tap13_abcd;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP13_ABCDr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP13_ABCDr_CLR(r) (r).dsc_rx_dfe_tap13_abcd[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP13_ABCDr_SET(r,d) (r).dsc_rx_dfe_tap13_abcd[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP13_ABCDr_GET(r) (r).dsc_rx_dfe_tap13_abcd[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP13_ABCDr_RXA_DFE_TAP13f_GET(r) ((((r).dsc_rx_dfe_tap13_abcd[0]) >> 12) & 0xf)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP13_ABCDr_RXA_DFE_TAP13f_SET(r,f) (r).dsc_rx_dfe_tap13_abcd[0]=(((r).dsc_rx_dfe_tap13_abcd[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12)) | (15 << (16 + 12))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP13_ABCDr_RXB_DFE_TAP13f_GET(r) ((((r).dsc_rx_dfe_tap13_abcd[0]) >> 8) & 0xf)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP13_ABCDr_RXB_DFE_TAP13f_SET(r,f) (r).dsc_rx_dfe_tap13_abcd[0]=(((r).dsc_rx_dfe_tap13_abcd[0] & ~((uint32_t)0xf << 8)) | ((((uint32_t)f) & 0xf) << 8)) | (15 << (16 + 8))

/*
 * These macros can be used to access DSC_RX_DFE_TAP13_ABCD.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DSC_RX_DFE_TAP13_ABCDr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP13_ABCDr,(_r._dsc_rx_dfe_tap13_abcd))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DSC_RX_DFE_TAP13_ABCDr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP13_ABCDr,(_r._dsc_rx_dfe_tap13_abcd)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DSC_RX_DFE_TAP13_ABCDr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP13_ABCDr,(_r._dsc_rx_dfe_tap13_abcd))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DSC_RX_DFE_TAP13_ABCDr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP13_ABCDr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_dfe_tap13_abcd))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DSC_RX_DFE_TAP13_ABCDr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP13_ABCDr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_dfe_tap13_abcd))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DSC_RX_DFE_TAP13_ABCDr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP13_ABCDr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_rx_dfe_tap13_abcd))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_RX_DFE_TAP13_ABCDr BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP13_ABCDr
#define DSC_RX_DFE_TAP13_ABCDr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP13_ABCDr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP13_ABCDr_t DSC_RX_DFE_TAP13_ABCDr_t;
#define DSC_RX_DFE_TAP13_ABCDr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP13_ABCDr_CLR
#define DSC_RX_DFE_TAP13_ABCDr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP13_ABCDr_SET
#define DSC_RX_DFE_TAP13_ABCDr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP13_ABCDr_GET
#define DSC_RX_DFE_TAP13_ABCDr_RXA_DFE_TAP13f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP13_ABCDr_RXA_DFE_TAP13f_GET
#define DSC_RX_DFE_TAP13_ABCDr_RXA_DFE_TAP13f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP13_ABCDr_RXA_DFE_TAP13f_SET
#define DSC_RX_DFE_TAP13_ABCDr_RXB_DFE_TAP13f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP13_ABCDr_RXB_DFE_TAP13f_GET
#define DSC_RX_DFE_TAP13_ABCDr_RXB_DFE_TAP13f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP13_ABCDr_RXB_DFE_TAP13f_SET
#define READ_DSC_RX_DFE_TAP13_ABCDr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DSC_RX_DFE_TAP13_ABCDr
#define WRITE_DSC_RX_DFE_TAP13_ABCDr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DSC_RX_DFE_TAP13_ABCDr
#define MODIFY_DSC_RX_DFE_TAP13_ABCDr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DSC_RX_DFE_TAP13_ABCDr
#define READLN_DSC_RX_DFE_TAP13_ABCDr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DSC_RX_DFE_TAP13_ABCDr
#define WRITELN_DSC_RX_DFE_TAP13_ABCDr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DSC_RX_DFE_TAP13_ABCDr
#define WRITEALL_DSC_RX_DFE_TAP13_ABCDr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DSC_RX_DFE_TAP13_ABCDr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP13_ABCDr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  DSC_RX_DFE_TAP14_ABCD
 * BLOCKS:   DSC_AFE3
 * REGADDR:  0xd024
 * DEVAD:    1
 * DESC:     rx_dfe_tap14_abcd register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RXB_DFE_TAP14    signed 2's complement +/-7, 1 LSB=150mV/64
 *     RXA_DFE_TAP14    signed 2's complement +/-7, 1 LSB=150mV/64
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP14_ABCDr (0x0001d024 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP14_ABCDr_SIZE 4

/*
 * This structure should be used to declare and program DSC_RX_DFE_TAP14_ABCD.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP14_ABCDr_s {
	uint32_t v[1];
	uint32_t dsc_rx_dfe_tap14_abcd[1];
	uint32_t _dsc_rx_dfe_tap14_abcd;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP14_ABCDr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP14_ABCDr_CLR(r) (r).dsc_rx_dfe_tap14_abcd[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP14_ABCDr_SET(r,d) (r).dsc_rx_dfe_tap14_abcd[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP14_ABCDr_GET(r) (r).dsc_rx_dfe_tap14_abcd[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP14_ABCDr_RXA_DFE_TAP14f_GET(r) ((((r).dsc_rx_dfe_tap14_abcd[0]) >> 12) & 0xf)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP14_ABCDr_RXA_DFE_TAP14f_SET(r,f) (r).dsc_rx_dfe_tap14_abcd[0]=(((r).dsc_rx_dfe_tap14_abcd[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12)) | (15 << (16 + 12))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP14_ABCDr_RXB_DFE_TAP14f_GET(r) ((((r).dsc_rx_dfe_tap14_abcd[0]) >> 8) & 0xf)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP14_ABCDr_RXB_DFE_TAP14f_SET(r,f) (r).dsc_rx_dfe_tap14_abcd[0]=(((r).dsc_rx_dfe_tap14_abcd[0] & ~((uint32_t)0xf << 8)) | ((((uint32_t)f) & 0xf) << 8)) | (15 << (16 + 8))

/*
 * These macros can be used to access DSC_RX_DFE_TAP14_ABCD.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DSC_RX_DFE_TAP14_ABCDr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP14_ABCDr,(_r._dsc_rx_dfe_tap14_abcd))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DSC_RX_DFE_TAP14_ABCDr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP14_ABCDr,(_r._dsc_rx_dfe_tap14_abcd)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DSC_RX_DFE_TAP14_ABCDr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP14_ABCDr,(_r._dsc_rx_dfe_tap14_abcd))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DSC_RX_DFE_TAP14_ABCDr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP14_ABCDr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_dfe_tap14_abcd))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DSC_RX_DFE_TAP14_ABCDr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP14_ABCDr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_dfe_tap14_abcd))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DSC_RX_DFE_TAP14_ABCDr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP14_ABCDr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_rx_dfe_tap14_abcd))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_RX_DFE_TAP14_ABCDr BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP14_ABCDr
#define DSC_RX_DFE_TAP14_ABCDr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP14_ABCDr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP14_ABCDr_t DSC_RX_DFE_TAP14_ABCDr_t;
#define DSC_RX_DFE_TAP14_ABCDr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP14_ABCDr_CLR
#define DSC_RX_DFE_TAP14_ABCDr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP14_ABCDr_SET
#define DSC_RX_DFE_TAP14_ABCDr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP14_ABCDr_GET
#define DSC_RX_DFE_TAP14_ABCDr_RXA_DFE_TAP14f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP14_ABCDr_RXA_DFE_TAP14f_GET
#define DSC_RX_DFE_TAP14_ABCDr_RXA_DFE_TAP14f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP14_ABCDr_RXA_DFE_TAP14f_SET
#define DSC_RX_DFE_TAP14_ABCDr_RXB_DFE_TAP14f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP14_ABCDr_RXB_DFE_TAP14f_GET
#define DSC_RX_DFE_TAP14_ABCDr_RXB_DFE_TAP14f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP14_ABCDr_RXB_DFE_TAP14f_SET
#define READ_DSC_RX_DFE_TAP14_ABCDr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DSC_RX_DFE_TAP14_ABCDr
#define WRITE_DSC_RX_DFE_TAP14_ABCDr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DSC_RX_DFE_TAP14_ABCDr
#define MODIFY_DSC_RX_DFE_TAP14_ABCDr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DSC_RX_DFE_TAP14_ABCDr
#define READLN_DSC_RX_DFE_TAP14_ABCDr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DSC_RX_DFE_TAP14_ABCDr
#define WRITELN_DSC_RX_DFE_TAP14_ABCDr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DSC_RX_DFE_TAP14_ABCDr
#define WRITEALL_DSC_RX_DFE_TAP14_ABCDr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DSC_RX_DFE_TAP14_ABCDr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP14_ABCDr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  DSC_RX_DFE_TAP7_8_MUX_ABCD
 * BLOCKS:   DSC_AFE3
 * REGADDR:  0xd025
 * DEVAD:    1
 * DESC:     rx_dfe_tap7_8_mux_abcd register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RXB_DFE_TAP8_MUX tapN cancels ISI from location (N+value) where value is 0,1,2,3 Mux selects, 0 is early, 3 is later
 *     RXB_DFE_TAP7_MUX tapN cancels ISI from location (N+value) where value is 0,1,2,3 Mux selects, 0 is early, 3 is later
 *     RXA_DFE_TAP8_MUX tapN cancels ISI from location (N+value) where value is 0,1,2,3 Mux selects, 0 is early, 3 is later
 *     RXA_DFE_TAP7_MUX tapN cancels ISI from location (N+value) where value is 0,1,2,3 Mux selects, 0 is early, 3 is later
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCDr (0x0001d025 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCDr_SIZE 4

/*
 * This structure should be used to declare and program DSC_RX_DFE_TAP7_8_MUX_ABCD.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCDr_s {
	uint32_t v[1];
	uint32_t dsc_rx_dfe_tap7_8_mux_abcd[1];
	uint32_t _dsc_rx_dfe_tap7_8_mux_abcd;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCDr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCDr_CLR(r) (r).dsc_rx_dfe_tap7_8_mux_abcd[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCDr_SET(r,d) (r).dsc_rx_dfe_tap7_8_mux_abcd[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCDr_GET(r) (r).dsc_rx_dfe_tap7_8_mux_abcd[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCDr_RXA_DFE_TAP7_MUXf_GET(r) ((((r).dsc_rx_dfe_tap7_8_mux_abcd[0]) >> 14) & 0x3)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCDr_RXA_DFE_TAP7_MUXf_SET(r,f) (r).dsc_rx_dfe_tap7_8_mux_abcd[0]=(((r).dsc_rx_dfe_tap7_8_mux_abcd[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14)) | (3 << (16 + 14))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCDr_RXA_DFE_TAP8_MUXf_GET(r) ((((r).dsc_rx_dfe_tap7_8_mux_abcd[0]) >> 12) & 0x3)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCDr_RXA_DFE_TAP8_MUXf_SET(r,f) (r).dsc_rx_dfe_tap7_8_mux_abcd[0]=(((r).dsc_rx_dfe_tap7_8_mux_abcd[0] & ~((uint32_t)0x3 << 12)) | ((((uint32_t)f) & 0x3) << 12)) | (3 << (16 + 12))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCDr_RXB_DFE_TAP7_MUXf_GET(r) ((((r).dsc_rx_dfe_tap7_8_mux_abcd[0]) >> 10) & 0x3)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCDr_RXB_DFE_TAP7_MUXf_SET(r,f) (r).dsc_rx_dfe_tap7_8_mux_abcd[0]=(((r).dsc_rx_dfe_tap7_8_mux_abcd[0] & ~((uint32_t)0x3 << 10)) | ((((uint32_t)f) & 0x3) << 10)) | (3 << (16 + 10))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCDr_RXB_DFE_TAP8_MUXf_GET(r) ((((r).dsc_rx_dfe_tap7_8_mux_abcd[0]) >> 8) & 0x3)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCDr_RXB_DFE_TAP8_MUXf_SET(r,f) (r).dsc_rx_dfe_tap7_8_mux_abcd[0]=(((r).dsc_rx_dfe_tap7_8_mux_abcd[0] & ~((uint32_t)0x3 << 8)) | ((((uint32_t)f) & 0x3) << 8)) | (3 << (16 + 8))

/*
 * These macros can be used to access DSC_RX_DFE_TAP7_8_MUX_ABCD.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DSC_RX_DFE_TAP7_8_MUX_ABCDr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCDr,(_r._dsc_rx_dfe_tap7_8_mux_abcd))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DSC_RX_DFE_TAP7_8_MUX_ABCDr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCDr,(_r._dsc_rx_dfe_tap7_8_mux_abcd)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DSC_RX_DFE_TAP7_8_MUX_ABCDr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCDr,(_r._dsc_rx_dfe_tap7_8_mux_abcd))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DSC_RX_DFE_TAP7_8_MUX_ABCDr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCDr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_dfe_tap7_8_mux_abcd))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DSC_RX_DFE_TAP7_8_MUX_ABCDr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCDr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_dfe_tap7_8_mux_abcd))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DSC_RX_DFE_TAP7_8_MUX_ABCDr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCDr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_rx_dfe_tap7_8_mux_abcd))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_RX_DFE_TAP7_8_MUX_ABCDr BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCDr
#define DSC_RX_DFE_TAP7_8_MUX_ABCDr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCDr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCDr_t DSC_RX_DFE_TAP7_8_MUX_ABCDr_t;
#define DSC_RX_DFE_TAP7_8_MUX_ABCDr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCDr_CLR
#define DSC_RX_DFE_TAP7_8_MUX_ABCDr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCDr_SET
#define DSC_RX_DFE_TAP7_8_MUX_ABCDr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCDr_GET
#define DSC_RX_DFE_TAP7_8_MUX_ABCDr_RXA_DFE_TAP7_MUXf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCDr_RXA_DFE_TAP7_MUXf_GET
#define DSC_RX_DFE_TAP7_8_MUX_ABCDr_RXA_DFE_TAP7_MUXf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCDr_RXA_DFE_TAP7_MUXf_SET
#define DSC_RX_DFE_TAP7_8_MUX_ABCDr_RXA_DFE_TAP8_MUXf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCDr_RXA_DFE_TAP8_MUXf_GET
#define DSC_RX_DFE_TAP7_8_MUX_ABCDr_RXA_DFE_TAP8_MUXf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCDr_RXA_DFE_TAP8_MUXf_SET
#define DSC_RX_DFE_TAP7_8_MUX_ABCDr_RXB_DFE_TAP7_MUXf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCDr_RXB_DFE_TAP7_MUXf_GET
#define DSC_RX_DFE_TAP7_8_MUX_ABCDr_RXB_DFE_TAP7_MUXf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCDr_RXB_DFE_TAP7_MUXf_SET
#define DSC_RX_DFE_TAP7_8_MUX_ABCDr_RXB_DFE_TAP8_MUXf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCDr_RXB_DFE_TAP8_MUXf_GET
#define DSC_RX_DFE_TAP7_8_MUX_ABCDr_RXB_DFE_TAP8_MUXf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCDr_RXB_DFE_TAP8_MUXf_SET
#define READ_DSC_RX_DFE_TAP7_8_MUX_ABCDr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DSC_RX_DFE_TAP7_8_MUX_ABCDr
#define WRITE_DSC_RX_DFE_TAP7_8_MUX_ABCDr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DSC_RX_DFE_TAP7_8_MUX_ABCDr
#define MODIFY_DSC_RX_DFE_TAP7_8_MUX_ABCDr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DSC_RX_DFE_TAP7_8_MUX_ABCDr
#define READLN_DSC_RX_DFE_TAP7_8_MUX_ABCDr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DSC_RX_DFE_TAP7_8_MUX_ABCDr
#define WRITELN_DSC_RX_DFE_TAP7_8_MUX_ABCDr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DSC_RX_DFE_TAP7_8_MUX_ABCDr
#define WRITEALL_DSC_RX_DFE_TAP7_8_MUX_ABCDr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DSC_RX_DFE_TAP7_8_MUX_ABCDr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP7_8_MUX_ABCDr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  DSC_RX_DFE_TAP9_10_MUX_ABCD
 * BLOCKS:   DSC_AFE3
 * REGADDR:  0xd026
 * DEVAD:    1
 * DESC:     rx_dfe_tap9_10_mux_abcd register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RXB_DFE_TAP10_MUX tapN cancels ISI from location (N+value) where value is 0,1,2,3 Mux selects, 0 is early, 3 is later
 *     RXB_DFE_TAP9_MUX tapN cancels ISI from location (N+value) where value is 0,1,2,3 Mux selects, 0 is early, 3 is later
 *     RXA_DFE_TAP10_MUX tapN cancels ISI from location (N+value) where value is 0,1,2,3 Mux selects, 0 is early, 3 is later
 *     RXA_DFE_TAP9_MUX tapN cancels ISI from location (N+value) where value is 0,1,2,3 Mux selects, 0 is early, 3 is later
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCDr (0x0001d026 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCDr_SIZE 4

/*
 * This structure should be used to declare and program DSC_RX_DFE_TAP9_10_MUX_ABCD.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCDr_s {
	uint32_t v[1];
	uint32_t dsc_rx_dfe_tap9_10_mux_abcd[1];
	uint32_t _dsc_rx_dfe_tap9_10_mux_abcd;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCDr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCDr_CLR(r) (r).dsc_rx_dfe_tap9_10_mux_abcd[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCDr_SET(r,d) (r).dsc_rx_dfe_tap9_10_mux_abcd[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCDr_GET(r) (r).dsc_rx_dfe_tap9_10_mux_abcd[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCDr_RXA_DFE_TAP9_MUXf_GET(r) ((((r).dsc_rx_dfe_tap9_10_mux_abcd[0]) >> 14) & 0x3)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCDr_RXA_DFE_TAP9_MUXf_SET(r,f) (r).dsc_rx_dfe_tap9_10_mux_abcd[0]=(((r).dsc_rx_dfe_tap9_10_mux_abcd[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14)) | (3 << (16 + 14))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCDr_RXA_DFE_TAP10_MUXf_GET(r) ((((r).dsc_rx_dfe_tap9_10_mux_abcd[0]) >> 12) & 0x3)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCDr_RXA_DFE_TAP10_MUXf_SET(r,f) (r).dsc_rx_dfe_tap9_10_mux_abcd[0]=(((r).dsc_rx_dfe_tap9_10_mux_abcd[0] & ~((uint32_t)0x3 << 12)) | ((((uint32_t)f) & 0x3) << 12)) | (3 << (16 + 12))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCDr_RXB_DFE_TAP9_MUXf_GET(r) ((((r).dsc_rx_dfe_tap9_10_mux_abcd[0]) >> 10) & 0x3)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCDr_RXB_DFE_TAP9_MUXf_SET(r,f) (r).dsc_rx_dfe_tap9_10_mux_abcd[0]=(((r).dsc_rx_dfe_tap9_10_mux_abcd[0] & ~((uint32_t)0x3 << 10)) | ((((uint32_t)f) & 0x3) << 10)) | (3 << (16 + 10))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCDr_RXB_DFE_TAP10_MUXf_GET(r) ((((r).dsc_rx_dfe_tap9_10_mux_abcd[0]) >> 8) & 0x3)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCDr_RXB_DFE_TAP10_MUXf_SET(r,f) (r).dsc_rx_dfe_tap9_10_mux_abcd[0]=(((r).dsc_rx_dfe_tap9_10_mux_abcd[0] & ~((uint32_t)0x3 << 8)) | ((((uint32_t)f) & 0x3) << 8)) | (3 << (16 + 8))

/*
 * These macros can be used to access DSC_RX_DFE_TAP9_10_MUX_ABCD.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DSC_RX_DFE_TAP9_10_MUX_ABCDr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCDr,(_r._dsc_rx_dfe_tap9_10_mux_abcd))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DSC_RX_DFE_TAP9_10_MUX_ABCDr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCDr,(_r._dsc_rx_dfe_tap9_10_mux_abcd)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DSC_RX_DFE_TAP9_10_MUX_ABCDr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCDr,(_r._dsc_rx_dfe_tap9_10_mux_abcd))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DSC_RX_DFE_TAP9_10_MUX_ABCDr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCDr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_dfe_tap9_10_mux_abcd))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DSC_RX_DFE_TAP9_10_MUX_ABCDr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCDr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_dfe_tap9_10_mux_abcd))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DSC_RX_DFE_TAP9_10_MUX_ABCDr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCDr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_rx_dfe_tap9_10_mux_abcd))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_RX_DFE_TAP9_10_MUX_ABCDr BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCDr
#define DSC_RX_DFE_TAP9_10_MUX_ABCDr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCDr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCDr_t DSC_RX_DFE_TAP9_10_MUX_ABCDr_t;
#define DSC_RX_DFE_TAP9_10_MUX_ABCDr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCDr_CLR
#define DSC_RX_DFE_TAP9_10_MUX_ABCDr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCDr_SET
#define DSC_RX_DFE_TAP9_10_MUX_ABCDr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCDr_GET
#define DSC_RX_DFE_TAP9_10_MUX_ABCDr_RXA_DFE_TAP9_MUXf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCDr_RXA_DFE_TAP9_MUXf_GET
#define DSC_RX_DFE_TAP9_10_MUX_ABCDr_RXA_DFE_TAP9_MUXf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCDr_RXA_DFE_TAP9_MUXf_SET
#define DSC_RX_DFE_TAP9_10_MUX_ABCDr_RXA_DFE_TAP10_MUXf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCDr_RXA_DFE_TAP10_MUXf_GET
#define DSC_RX_DFE_TAP9_10_MUX_ABCDr_RXA_DFE_TAP10_MUXf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCDr_RXA_DFE_TAP10_MUXf_SET
#define DSC_RX_DFE_TAP9_10_MUX_ABCDr_RXB_DFE_TAP9_MUXf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCDr_RXB_DFE_TAP9_MUXf_GET
#define DSC_RX_DFE_TAP9_10_MUX_ABCDr_RXB_DFE_TAP9_MUXf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCDr_RXB_DFE_TAP9_MUXf_SET
#define DSC_RX_DFE_TAP9_10_MUX_ABCDr_RXB_DFE_TAP10_MUXf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCDr_RXB_DFE_TAP10_MUXf_GET
#define DSC_RX_DFE_TAP9_10_MUX_ABCDr_RXB_DFE_TAP10_MUXf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCDr_RXB_DFE_TAP10_MUXf_SET
#define READ_DSC_RX_DFE_TAP9_10_MUX_ABCDr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DSC_RX_DFE_TAP9_10_MUX_ABCDr
#define WRITE_DSC_RX_DFE_TAP9_10_MUX_ABCDr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DSC_RX_DFE_TAP9_10_MUX_ABCDr
#define MODIFY_DSC_RX_DFE_TAP9_10_MUX_ABCDr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DSC_RX_DFE_TAP9_10_MUX_ABCDr
#define READLN_DSC_RX_DFE_TAP9_10_MUX_ABCDr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DSC_RX_DFE_TAP9_10_MUX_ABCDr
#define WRITELN_DSC_RX_DFE_TAP9_10_MUX_ABCDr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DSC_RX_DFE_TAP9_10_MUX_ABCDr
#define WRITEALL_DSC_RX_DFE_TAP9_10_MUX_ABCDr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DSC_RX_DFE_TAP9_10_MUX_ABCDr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP9_10_MUX_ABCDr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  DSC_RX_DFE_TAP11_12_MUX_ABCD
 * BLOCKS:   DSC_AFE3
 * REGADDR:  0xd027
 * DEVAD:    1
 * DESC:     rx_dfe_tap11_12_mux_abcd register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RXB_DFE_TAP12_MUX tapN cancels ISI from location (N+value) where value is 0,1,2,3 Mux selects, 0 is early, 3 is later
 *     RXB_DFE_TAP11_MUX tapN cancels ISI from location (N+value) where value is 0,1,2,3 Mux selects, 0 is early, 3 is later
 *     RXA_DFE_TAP12_MUX tapN cancels ISI from location (N+value) where value is 0,1,2,3 Mux selects, 0 is early, 3 is later
 *     RXA_DFE_TAP11_MUX tapN cancels ISI from location (N+value) where value is 0,1,2,3 Mux selects, 0 is early, 3 is later
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCDr (0x0001d027 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCDr_SIZE 4

/*
 * This structure should be used to declare and program DSC_RX_DFE_TAP11_12_MUX_ABCD.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCDr_s {
	uint32_t v[1];
	uint32_t dsc_rx_dfe_tap11_12_mux_abcd[1];
	uint32_t _dsc_rx_dfe_tap11_12_mux_abcd;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCDr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCDr_CLR(r) (r).dsc_rx_dfe_tap11_12_mux_abcd[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCDr_SET(r,d) (r).dsc_rx_dfe_tap11_12_mux_abcd[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCDr_GET(r) (r).dsc_rx_dfe_tap11_12_mux_abcd[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCDr_RXA_DFE_TAP11_MUXf_GET(r) ((((r).dsc_rx_dfe_tap11_12_mux_abcd[0]) >> 14) & 0x3)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCDr_RXA_DFE_TAP11_MUXf_SET(r,f) (r).dsc_rx_dfe_tap11_12_mux_abcd[0]=(((r).dsc_rx_dfe_tap11_12_mux_abcd[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14)) | (3 << (16 + 14))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCDr_RXA_DFE_TAP12_MUXf_GET(r) ((((r).dsc_rx_dfe_tap11_12_mux_abcd[0]) >> 12) & 0x3)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCDr_RXA_DFE_TAP12_MUXf_SET(r,f) (r).dsc_rx_dfe_tap11_12_mux_abcd[0]=(((r).dsc_rx_dfe_tap11_12_mux_abcd[0] & ~((uint32_t)0x3 << 12)) | ((((uint32_t)f) & 0x3) << 12)) | (3 << (16 + 12))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCDr_RXB_DFE_TAP11_MUXf_GET(r) ((((r).dsc_rx_dfe_tap11_12_mux_abcd[0]) >> 10) & 0x3)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCDr_RXB_DFE_TAP11_MUXf_SET(r,f) (r).dsc_rx_dfe_tap11_12_mux_abcd[0]=(((r).dsc_rx_dfe_tap11_12_mux_abcd[0] & ~((uint32_t)0x3 << 10)) | ((((uint32_t)f) & 0x3) << 10)) | (3 << (16 + 10))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCDr_RXB_DFE_TAP12_MUXf_GET(r) ((((r).dsc_rx_dfe_tap11_12_mux_abcd[0]) >> 8) & 0x3)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCDr_RXB_DFE_TAP12_MUXf_SET(r,f) (r).dsc_rx_dfe_tap11_12_mux_abcd[0]=(((r).dsc_rx_dfe_tap11_12_mux_abcd[0] & ~((uint32_t)0x3 << 8)) | ((((uint32_t)f) & 0x3) << 8)) | (3 << (16 + 8))

/*
 * These macros can be used to access DSC_RX_DFE_TAP11_12_MUX_ABCD.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DSC_RX_DFE_TAP11_12_MUX_ABCDr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCDr,(_r._dsc_rx_dfe_tap11_12_mux_abcd))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DSC_RX_DFE_TAP11_12_MUX_ABCDr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCDr,(_r._dsc_rx_dfe_tap11_12_mux_abcd)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DSC_RX_DFE_TAP11_12_MUX_ABCDr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCDr,(_r._dsc_rx_dfe_tap11_12_mux_abcd))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DSC_RX_DFE_TAP11_12_MUX_ABCDr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCDr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_dfe_tap11_12_mux_abcd))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DSC_RX_DFE_TAP11_12_MUX_ABCDr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCDr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_dfe_tap11_12_mux_abcd))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DSC_RX_DFE_TAP11_12_MUX_ABCDr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCDr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_rx_dfe_tap11_12_mux_abcd))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_RX_DFE_TAP11_12_MUX_ABCDr BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCDr
#define DSC_RX_DFE_TAP11_12_MUX_ABCDr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCDr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCDr_t DSC_RX_DFE_TAP11_12_MUX_ABCDr_t;
#define DSC_RX_DFE_TAP11_12_MUX_ABCDr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCDr_CLR
#define DSC_RX_DFE_TAP11_12_MUX_ABCDr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCDr_SET
#define DSC_RX_DFE_TAP11_12_MUX_ABCDr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCDr_GET
#define DSC_RX_DFE_TAP11_12_MUX_ABCDr_RXA_DFE_TAP11_MUXf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCDr_RXA_DFE_TAP11_MUXf_GET
#define DSC_RX_DFE_TAP11_12_MUX_ABCDr_RXA_DFE_TAP11_MUXf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCDr_RXA_DFE_TAP11_MUXf_SET
#define DSC_RX_DFE_TAP11_12_MUX_ABCDr_RXA_DFE_TAP12_MUXf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCDr_RXA_DFE_TAP12_MUXf_GET
#define DSC_RX_DFE_TAP11_12_MUX_ABCDr_RXA_DFE_TAP12_MUXf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCDr_RXA_DFE_TAP12_MUXf_SET
#define DSC_RX_DFE_TAP11_12_MUX_ABCDr_RXB_DFE_TAP11_MUXf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCDr_RXB_DFE_TAP11_MUXf_GET
#define DSC_RX_DFE_TAP11_12_MUX_ABCDr_RXB_DFE_TAP11_MUXf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCDr_RXB_DFE_TAP11_MUXf_SET
#define DSC_RX_DFE_TAP11_12_MUX_ABCDr_RXB_DFE_TAP12_MUXf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCDr_RXB_DFE_TAP12_MUXf_GET
#define DSC_RX_DFE_TAP11_12_MUX_ABCDr_RXB_DFE_TAP12_MUXf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCDr_RXB_DFE_TAP12_MUXf_SET
#define READ_DSC_RX_DFE_TAP11_12_MUX_ABCDr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DSC_RX_DFE_TAP11_12_MUX_ABCDr
#define WRITE_DSC_RX_DFE_TAP11_12_MUX_ABCDr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DSC_RX_DFE_TAP11_12_MUX_ABCDr
#define MODIFY_DSC_RX_DFE_TAP11_12_MUX_ABCDr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DSC_RX_DFE_TAP11_12_MUX_ABCDr
#define READLN_DSC_RX_DFE_TAP11_12_MUX_ABCDr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DSC_RX_DFE_TAP11_12_MUX_ABCDr
#define WRITELN_DSC_RX_DFE_TAP11_12_MUX_ABCDr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DSC_RX_DFE_TAP11_12_MUX_ABCDr
#define WRITEALL_DSC_RX_DFE_TAP11_12_MUX_ABCDr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DSC_RX_DFE_TAP11_12_MUX_ABCDr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP11_12_MUX_ABCDr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  DSC_RX_DFE_TAP13_14_MUX_ABCD
 * BLOCKS:   DSC_AFE3
 * REGADDR:  0xd028
 * DEVAD:    1
 * DESC:     rx_dfe_tap13_14_mux_abcd register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RXB_DFE_TAP14_MUX tapN cancels ISI from location (N+value) where value is 0,1,2,3 Mux selects, 0 is early, 3 is later
 *     RXB_DFE_TAP13_MUX tapN cancels ISI from location (N+value) where value is 0,1,2,3 Mux selects, 0 is early, 3 is later
 *     RXA_DFE_TAP14_MUX tapN cancels ISI from location (N+value) where value is 0,1,2,3 Mux selects, 0 is early, 3 is later
 *     RXA_DFE_TAP13_MUX tapN cancels ISI from location (N+value) where value is 0,1,2,3 Mux selects, 0 is early, 3 is later
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCDr (0x0001d028 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCDr_SIZE 4

/*
 * This structure should be used to declare and program DSC_RX_DFE_TAP13_14_MUX_ABCD.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCDr_s {
	uint32_t v[1];
	uint32_t dsc_rx_dfe_tap13_14_mux_abcd[1];
	uint32_t _dsc_rx_dfe_tap13_14_mux_abcd;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCDr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCDr_CLR(r) (r).dsc_rx_dfe_tap13_14_mux_abcd[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCDr_SET(r,d) (r).dsc_rx_dfe_tap13_14_mux_abcd[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCDr_GET(r) (r).dsc_rx_dfe_tap13_14_mux_abcd[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCDr_RXA_DFE_TAP13_MUXf_GET(r) ((((r).dsc_rx_dfe_tap13_14_mux_abcd[0]) >> 14) & 0x3)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCDr_RXA_DFE_TAP13_MUXf_SET(r,f) (r).dsc_rx_dfe_tap13_14_mux_abcd[0]=(((r).dsc_rx_dfe_tap13_14_mux_abcd[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14)) | (3 << (16 + 14))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCDr_RXA_DFE_TAP14_MUXf_GET(r) ((((r).dsc_rx_dfe_tap13_14_mux_abcd[0]) >> 12) & 0x3)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCDr_RXA_DFE_TAP14_MUXf_SET(r,f) (r).dsc_rx_dfe_tap13_14_mux_abcd[0]=(((r).dsc_rx_dfe_tap13_14_mux_abcd[0] & ~((uint32_t)0x3 << 12)) | ((((uint32_t)f) & 0x3) << 12)) | (3 << (16 + 12))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCDr_RXB_DFE_TAP13_MUXf_GET(r) ((((r).dsc_rx_dfe_tap13_14_mux_abcd[0]) >> 10) & 0x3)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCDr_RXB_DFE_TAP13_MUXf_SET(r,f) (r).dsc_rx_dfe_tap13_14_mux_abcd[0]=(((r).dsc_rx_dfe_tap13_14_mux_abcd[0] & ~((uint32_t)0x3 << 10)) | ((((uint32_t)f) & 0x3) << 10)) | (3 << (16 + 10))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCDr_RXB_DFE_TAP14_MUXf_GET(r) ((((r).dsc_rx_dfe_tap13_14_mux_abcd[0]) >> 8) & 0x3)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCDr_RXB_DFE_TAP14_MUXf_SET(r,f) (r).dsc_rx_dfe_tap13_14_mux_abcd[0]=(((r).dsc_rx_dfe_tap13_14_mux_abcd[0] & ~((uint32_t)0x3 << 8)) | ((((uint32_t)f) & 0x3) << 8)) | (3 << (16 + 8))

/*
 * These macros can be used to access DSC_RX_DFE_TAP13_14_MUX_ABCD.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DSC_RX_DFE_TAP13_14_MUX_ABCDr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCDr,(_r._dsc_rx_dfe_tap13_14_mux_abcd))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DSC_RX_DFE_TAP13_14_MUX_ABCDr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCDr,(_r._dsc_rx_dfe_tap13_14_mux_abcd)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DSC_RX_DFE_TAP13_14_MUX_ABCDr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCDr,(_r._dsc_rx_dfe_tap13_14_mux_abcd))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DSC_RX_DFE_TAP13_14_MUX_ABCDr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCDr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_dfe_tap13_14_mux_abcd))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DSC_RX_DFE_TAP13_14_MUX_ABCDr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCDr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_dfe_tap13_14_mux_abcd))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DSC_RX_DFE_TAP13_14_MUX_ABCDr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCDr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_rx_dfe_tap13_14_mux_abcd))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_RX_DFE_TAP13_14_MUX_ABCDr BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCDr
#define DSC_RX_DFE_TAP13_14_MUX_ABCDr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCDr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCDr_t DSC_RX_DFE_TAP13_14_MUX_ABCDr_t;
#define DSC_RX_DFE_TAP13_14_MUX_ABCDr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCDr_CLR
#define DSC_RX_DFE_TAP13_14_MUX_ABCDr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCDr_SET
#define DSC_RX_DFE_TAP13_14_MUX_ABCDr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCDr_GET
#define DSC_RX_DFE_TAP13_14_MUX_ABCDr_RXA_DFE_TAP13_MUXf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCDr_RXA_DFE_TAP13_MUXf_GET
#define DSC_RX_DFE_TAP13_14_MUX_ABCDr_RXA_DFE_TAP13_MUXf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCDr_RXA_DFE_TAP13_MUXf_SET
#define DSC_RX_DFE_TAP13_14_MUX_ABCDr_RXA_DFE_TAP14_MUXf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCDr_RXA_DFE_TAP14_MUXf_GET
#define DSC_RX_DFE_TAP13_14_MUX_ABCDr_RXA_DFE_TAP14_MUXf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCDr_RXA_DFE_TAP14_MUXf_SET
#define DSC_RX_DFE_TAP13_14_MUX_ABCDr_RXB_DFE_TAP13_MUXf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCDr_RXB_DFE_TAP13_MUXf_GET
#define DSC_RX_DFE_TAP13_14_MUX_ABCDr_RXB_DFE_TAP13_MUXf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCDr_RXB_DFE_TAP13_MUXf_SET
#define DSC_RX_DFE_TAP13_14_MUX_ABCDr_RXB_DFE_TAP14_MUXf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCDr_RXB_DFE_TAP14_MUXf_GET
#define DSC_RX_DFE_TAP13_14_MUX_ABCDr_RXB_DFE_TAP14_MUXf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCDr_RXB_DFE_TAP14_MUXf_SET
#define READ_DSC_RX_DFE_TAP13_14_MUX_ABCDr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DSC_RX_DFE_TAP13_14_MUX_ABCDr
#define WRITE_DSC_RX_DFE_TAP13_14_MUX_ABCDr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DSC_RX_DFE_TAP13_14_MUX_ABCDr
#define MODIFY_DSC_RX_DFE_TAP13_14_MUX_ABCDr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DSC_RX_DFE_TAP13_14_MUX_ABCDr
#define READLN_DSC_RX_DFE_TAP13_14_MUX_ABCDr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DSC_RX_DFE_TAP13_14_MUX_ABCDr
#define WRITELN_DSC_RX_DFE_TAP13_14_MUX_ABCDr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DSC_RX_DFE_TAP13_14_MUX_ABCDr
#define WRITEALL_DSC_RX_DFE_TAP13_14_MUX_ABCDr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DSC_RX_DFE_TAP13_14_MUX_ABCDr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP13_14_MUX_ABCDr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  DSC_UC_CTL
 * BLOCKS:   DSC_A
 * REGADDR:  0xd03d
 * DEVAD:    1
 * DESC:     DSC uC Control
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     UC_DSC_GP_UC_REQ gp_uc request
 *     UC_DSC_ERROR_FOUND Error Found.
 *     UC_DSC_READY_FOR_CMD Ready for command.
 *     UC_DSC_SUPP_INFO Supplemental information.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_UC_CTLr (0x0001d03d | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_UC_CTLr_SIZE 4

/*
 * This structure should be used to declare and program DSC_UC_CTL.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_UC_CTLr_s {
	uint32_t v[1];
	uint32_t dsc_uc_ctl[1];
	uint32_t _dsc_uc_ctl;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_UC_CTLr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_UC_CTLr_CLR(r) (r).dsc_uc_ctl[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_UC_CTLr_SET(r,d) (r).dsc_uc_ctl[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_UC_CTLr_GET(r) (r).dsc_uc_ctl[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_UC_CTLr_UC_DSC_SUPP_INFOf_GET(r) ((((r).dsc_uc_ctl[0]) >> 8) & 0xff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_UC_CTLr_UC_DSC_SUPP_INFOf_SET(r,f) (r).dsc_uc_ctl[0]=(((r).dsc_uc_ctl[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8)) | (255 << (16 + 8))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_UC_CTLr_UC_DSC_READY_FOR_CMDf_GET(r) ((((r).dsc_uc_ctl[0]) >> 7) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_UC_CTLr_UC_DSC_READY_FOR_CMDf_SET(r,f) (r).dsc_uc_ctl[0]=(((r).dsc_uc_ctl[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_UC_CTLr_UC_DSC_ERROR_FOUNDf_GET(r) ((((r).dsc_uc_ctl[0]) >> 6) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_UC_CTLr_UC_DSC_ERROR_FOUNDf_SET(r,f) (r).dsc_uc_ctl[0]=(((r).dsc_uc_ctl[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_UC_CTLr_UC_DSC_GP_UC_REQf_GET(r) (((r).dsc_uc_ctl[0]) & 0x3f)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_UC_CTLr_UC_DSC_GP_UC_REQf_SET(r,f) (r).dsc_uc_ctl[0]=(((r).dsc_uc_ctl[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f)) | (0x3f << 16)

/*
 * These macros can be used to access DSC_UC_CTL.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DSC_UC_CTLr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_UC_CTLr,(_r._dsc_uc_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DSC_UC_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_UC_CTLr,(_r._dsc_uc_ctl)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DSC_UC_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_UC_CTLr,(_r._dsc_uc_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DSC_UC_CTLr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_UC_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_uc_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DSC_UC_CTLr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_UC_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_uc_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DSC_UC_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_UC_CTLr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_uc_ctl))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_UC_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_UC_CTLr
#define DSC_UC_CTLr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_UC_CTLr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_UC_CTLr_t DSC_UC_CTLr_t;
#define DSC_UC_CTLr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_UC_CTLr_CLR
#define DSC_UC_CTLr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_UC_CTLr_SET
#define DSC_UC_CTLr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_UC_CTLr_GET
#define DSC_UC_CTLr_UC_DSC_SUPP_INFOf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_UC_CTLr_UC_DSC_SUPP_INFOf_GET
#define DSC_UC_CTLr_UC_DSC_SUPP_INFOf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_UC_CTLr_UC_DSC_SUPP_INFOf_SET
#define DSC_UC_CTLr_UC_DSC_READY_FOR_CMDf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_UC_CTLr_UC_DSC_READY_FOR_CMDf_GET
#define DSC_UC_CTLr_UC_DSC_READY_FOR_CMDf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_UC_CTLr_UC_DSC_READY_FOR_CMDf_SET
#define DSC_UC_CTLr_UC_DSC_ERROR_FOUNDf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_UC_CTLr_UC_DSC_ERROR_FOUNDf_GET
#define DSC_UC_CTLr_UC_DSC_ERROR_FOUNDf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_UC_CTLr_UC_DSC_ERROR_FOUNDf_SET
#define DSC_UC_CTLr_UC_DSC_GP_UC_REQf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_UC_CTLr_UC_DSC_GP_UC_REQf_GET
#define DSC_UC_CTLr_UC_DSC_GP_UC_REQf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_UC_CTLr_UC_DSC_GP_UC_REQf_SET
#define READ_DSC_UC_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DSC_UC_CTLr
#define WRITE_DSC_UC_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DSC_UC_CTLr
#define MODIFY_DSC_UC_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DSC_UC_CTLr
#define READLN_DSC_UC_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DSC_UC_CTLr
#define WRITELN_DSC_UC_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DSC_UC_CTLr
#define WRITEALL_DSC_UC_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DSC_UC_CTLr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_UC_CTLr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  DSC_SCRATCH
 * BLOCKS:   DSC_A
 * REGADDR:  0xd03e
 * DEVAD:    1
 * DESC:     DSC uC Scratch
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     UC_DSC_SCRATCH   DSC scratch register.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SCRATCHr (0x0001d03e | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SCRATCHr_SIZE 4

/*
 * This structure should be used to declare and program DSC_SCRATCH.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SCRATCHr_s {
	uint32_t v[1];
	uint32_t dsc_scratch[1];
	uint32_t _dsc_scratch;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SCRATCHr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SCRATCHr_CLR(r) (r).dsc_scratch[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SCRATCHr_SET(r,d) (r).dsc_scratch[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SCRATCHr_GET(r) (r).dsc_scratch[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SCRATCHr_UC_DSC_SCRATCHf_GET(r) (((r).dsc_scratch[0]) & 0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SCRATCHr_UC_DSC_SCRATCHf_SET(r,f) (r).dsc_scratch[0]=(((r).dsc_scratch[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access DSC_SCRATCH.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DSC_SCRATCHr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SCRATCHr,(_r._dsc_scratch))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DSC_SCRATCHr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SCRATCHr,(_r._dsc_scratch)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DSC_SCRATCHr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SCRATCHr,(_r._dsc_scratch))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DSC_SCRATCHr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SCRATCHr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_scratch))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DSC_SCRATCHr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SCRATCHr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_scratch))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DSC_SCRATCHr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SCRATCHr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_scratch))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_SCRATCHr BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SCRATCHr
#define DSC_SCRATCHr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SCRATCHr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SCRATCHr_t DSC_SCRATCHr_t;
#define DSC_SCRATCHr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SCRATCHr_CLR
#define DSC_SCRATCHr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SCRATCHr_SET
#define DSC_SCRATCHr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SCRATCHr_GET
#define DSC_SCRATCHr_UC_DSC_SCRATCHf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SCRATCHr_UC_DSC_SCRATCHf_GET
#define DSC_SCRATCHr_UC_DSC_SCRATCHf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SCRATCHr_UC_DSC_SCRATCHf_SET
#define READ_DSC_SCRATCHr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DSC_SCRATCHr
#define WRITE_DSC_SCRATCHr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DSC_SCRATCHr
#define MODIFY_DSC_SCRATCHr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DSC_SCRATCHr
#define READLN_DSC_SCRATCHr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DSC_SCRATCHr
#define WRITELN_DSC_SCRATCHr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DSC_SCRATCHr
#define WRITEALL_DSC_SCRATCHr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DSC_SCRATCHr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SCRATCHr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  DSC_VGA_PHASE_THR_STS
 * BLOCKS:   DSC_B
 * REGADDR:  0xd04a
 * DEVAD:    1
 * DESC:     phase1 and phase02 threshold status register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     RX_PHASE02_STATUS Read out of the phase02 Slicer threshold in 2's complement signed format.
 *     RX_PHASE1_STATUS Read out of the phase1 Slicer threshold in 2's complement signed format.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_VGA_PHASE_THR_STSr (0x0001d04a | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_VGA_PHASE_THR_STSr_SIZE 4

/*
 * This structure should be used to declare and program DSC_VGA_PHASE_THR_STS.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_VGA_PHASE_THR_STSr_s {
	uint32_t v[1];
	uint32_t dsc_vga_phase_thr_sts[1];
	uint32_t _dsc_vga_phase_thr_sts;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_VGA_PHASE_THR_STSr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_VGA_PHASE_THR_STSr_CLR(r) (r).dsc_vga_phase_thr_sts[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_VGA_PHASE_THR_STSr_SET(r,d) (r).dsc_vga_phase_thr_sts[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_VGA_PHASE_THR_STSr_GET(r) (r).dsc_vga_phase_thr_sts[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_VGA_PHASE_THR_STSr_RX_PHASE1_STATUSf_GET(r) ((((r).dsc_vga_phase_thr_sts[0]) >> 8) & 0xff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_VGA_PHASE_THR_STSr_RX_PHASE1_STATUSf_SET(r,f) (r).dsc_vga_phase_thr_sts[0]=(((r).dsc_vga_phase_thr_sts[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8)) | (255 << (16 + 8))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_VGA_PHASE_THR_STSr_RX_PHASE02_STATUSf_GET(r) (((r).dsc_vga_phase_thr_sts[0]) & 0xff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_VGA_PHASE_THR_STSr_RX_PHASE02_STATUSf_SET(r,f) (r).dsc_vga_phase_thr_sts[0]=(((r).dsc_vga_phase_thr_sts[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff)) | (0xff << 16)

/*
 * These macros can be used to access DSC_VGA_PHASE_THR_STS.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DSC_VGA_PHASE_THR_STSr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_VGA_PHASE_THR_STSr,(_r._dsc_vga_phase_thr_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DSC_VGA_PHASE_THR_STSr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_VGA_PHASE_THR_STSr,(_r._dsc_vga_phase_thr_sts)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DSC_VGA_PHASE_THR_STSr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_VGA_PHASE_THR_STSr,(_r._dsc_vga_phase_thr_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DSC_VGA_PHASE_THR_STSr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_VGA_PHASE_THR_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_vga_phase_thr_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DSC_VGA_PHASE_THR_STSr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_VGA_PHASE_THR_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_vga_phase_thr_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DSC_VGA_PHASE_THR_STSr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_VGA_PHASE_THR_STSr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_vga_phase_thr_sts))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_VGA_PHASE_THR_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_VGA_PHASE_THR_STSr
#define DSC_VGA_PHASE_THR_STSr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_VGA_PHASE_THR_STSr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_VGA_PHASE_THR_STSr_t DSC_VGA_PHASE_THR_STSr_t;
#define DSC_VGA_PHASE_THR_STSr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_VGA_PHASE_THR_STSr_CLR
#define DSC_VGA_PHASE_THR_STSr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_VGA_PHASE_THR_STSr_SET
#define DSC_VGA_PHASE_THR_STSr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_VGA_PHASE_THR_STSr_GET
#define DSC_VGA_PHASE_THR_STSr_RX_PHASE1_STATUSf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_VGA_PHASE_THR_STSr_RX_PHASE1_STATUSf_GET
#define DSC_VGA_PHASE_THR_STSr_RX_PHASE1_STATUSf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_VGA_PHASE_THR_STSr_RX_PHASE1_STATUSf_SET
#define DSC_VGA_PHASE_THR_STSr_RX_PHASE02_STATUSf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_VGA_PHASE_THR_STSr_RX_PHASE02_STATUSf_GET
#define DSC_VGA_PHASE_THR_STSr_RX_PHASE02_STATUSf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_VGA_PHASE_THR_STSr_RX_PHASE02_STATUSf_SET
#define READ_DSC_VGA_PHASE_THR_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DSC_VGA_PHASE_THR_STSr
#define WRITE_DSC_VGA_PHASE_THR_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DSC_VGA_PHASE_THR_STSr
#define MODIFY_DSC_VGA_PHASE_THR_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DSC_VGA_PHASE_THR_STSr
#define READLN_DSC_VGA_PHASE_THR_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DSC_VGA_PHASE_THR_STSr
#define WRITELN_DSC_VGA_PHASE_THR_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DSC_VGA_PHASE_THR_STSr
#define WRITEALL_DSC_VGA_PHASE_THR_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DSC_VGA_PHASE_THR_STSr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_VGA_PHASE_THR_STSr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  DSC_VGA_DATA_THR_STS
 * BLOCKS:   DSC_B
 * REGADDR:  0xd04b
 * DEVAD:    1
 * DESC:     data14 and data05 threshold status register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     RX_DATA05_STATUS Read out of the Data05 Slicer threshold in 2's complement signed format.
 *     RX_DATA14_STATUS Read out of the Data14 Slicer threshold in 2's complement signed format.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_VGA_DATA_THR_STSr (0x0001d04b | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_VGA_DATA_THR_STSr_SIZE 4

/*
 * This structure should be used to declare and program DSC_VGA_DATA_THR_STS.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_VGA_DATA_THR_STSr_s {
	uint32_t v[1];
	uint32_t dsc_vga_data_thr_sts[1];
	uint32_t _dsc_vga_data_thr_sts;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_VGA_DATA_THR_STSr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_VGA_DATA_THR_STSr_CLR(r) (r).dsc_vga_data_thr_sts[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_VGA_DATA_THR_STSr_SET(r,d) (r).dsc_vga_data_thr_sts[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_VGA_DATA_THR_STSr_GET(r) (r).dsc_vga_data_thr_sts[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_VGA_DATA_THR_STSr_RX_DATA14_STATUSf_GET(r) ((((r).dsc_vga_data_thr_sts[0]) >> 8) & 0xff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_VGA_DATA_THR_STSr_RX_DATA14_STATUSf_SET(r,f) (r).dsc_vga_data_thr_sts[0]=(((r).dsc_vga_data_thr_sts[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8)) | (255 << (16 + 8))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_VGA_DATA_THR_STSr_RX_DATA05_STATUSf_GET(r) (((r).dsc_vga_data_thr_sts[0]) & 0xff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_VGA_DATA_THR_STSr_RX_DATA05_STATUSf_SET(r,f) (r).dsc_vga_data_thr_sts[0]=(((r).dsc_vga_data_thr_sts[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff)) | (0xff << 16)

/*
 * These macros can be used to access DSC_VGA_DATA_THR_STS.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DSC_VGA_DATA_THR_STSr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_VGA_DATA_THR_STSr,(_r._dsc_vga_data_thr_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DSC_VGA_DATA_THR_STSr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_VGA_DATA_THR_STSr,(_r._dsc_vga_data_thr_sts)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DSC_VGA_DATA_THR_STSr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_VGA_DATA_THR_STSr,(_r._dsc_vga_data_thr_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DSC_VGA_DATA_THR_STSr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_VGA_DATA_THR_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_vga_data_thr_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DSC_VGA_DATA_THR_STSr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_VGA_DATA_THR_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_vga_data_thr_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DSC_VGA_DATA_THR_STSr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_VGA_DATA_THR_STSr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_vga_data_thr_sts))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_VGA_DATA_THR_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_VGA_DATA_THR_STSr
#define DSC_VGA_DATA_THR_STSr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_VGA_DATA_THR_STSr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_VGA_DATA_THR_STSr_t DSC_VGA_DATA_THR_STSr_t;
#define DSC_VGA_DATA_THR_STSr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_VGA_DATA_THR_STSr_CLR
#define DSC_VGA_DATA_THR_STSr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_VGA_DATA_THR_STSr_SET
#define DSC_VGA_DATA_THR_STSr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_VGA_DATA_THR_STSr_GET
#define DSC_VGA_DATA_THR_STSr_RX_DATA14_STATUSf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_VGA_DATA_THR_STSr_RX_DATA14_STATUSf_GET
#define DSC_VGA_DATA_THR_STSr_RX_DATA14_STATUSf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_VGA_DATA_THR_STSr_RX_DATA14_STATUSf_SET
#define DSC_VGA_DATA_THR_STSr_RX_DATA05_STATUSf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_VGA_DATA_THR_STSr_RX_DATA05_STATUSf_GET
#define DSC_VGA_DATA_THR_STSr_RX_DATA05_STATUSf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_VGA_DATA_THR_STSr_RX_DATA05_STATUSf_SET
#define READ_DSC_VGA_DATA_THR_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DSC_VGA_DATA_THR_STSr
#define WRITE_DSC_VGA_DATA_THR_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DSC_VGA_DATA_THR_STSr
#define MODIFY_DSC_VGA_DATA_THR_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DSC_VGA_DATA_THR_STSr
#define READLN_DSC_VGA_DATA_THR_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DSC_VGA_DATA_THR_STSr
#define WRITELN_DSC_VGA_DATA_THR_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DSC_VGA_DATA_THR_STSr
#define WRITEALL_DSC_VGA_DATA_THR_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DSC_VGA_DATA_THR_STSr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_VGA_DATA_THR_STSr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  DSC_DC_OFFS_STS
 * BLOCKS:   DSC_B
 * REGADDR:  0xd04c
 * DEVAD:    1
 * DESC:     dc offset status register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     DC_OFFSET_BIN    rx dc offset
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_DC_OFFS_STSr (0x0001d04c | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_DC_OFFS_STSr_SIZE 4

/*
 * This structure should be used to declare and program DSC_DC_OFFS_STS.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_DC_OFFS_STSr_s {
	uint32_t v[1];
	uint32_t dsc_dc_offs_sts[1];
	uint32_t _dsc_dc_offs_sts;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_DC_OFFS_STSr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_DC_OFFS_STSr_CLR(r) (r).dsc_dc_offs_sts[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_DC_OFFS_STSr_SET(r,d) (r).dsc_dc_offs_sts[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_DC_OFFS_STSr_GET(r) (r).dsc_dc_offs_sts[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_DC_OFFS_STSr_DC_OFFSET_BINf_GET(r) (((r).dsc_dc_offs_sts[0]) & 0xff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_DC_OFFS_STSr_DC_OFFSET_BINf_SET(r,f) (r).dsc_dc_offs_sts[0]=(((r).dsc_dc_offs_sts[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff)) | (0xff << 16)

/*
 * These macros can be used to access DSC_DC_OFFS_STS.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DSC_DC_OFFS_STSr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_DC_OFFS_STSr,(_r._dsc_dc_offs_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DSC_DC_OFFS_STSr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_DC_OFFS_STSr,(_r._dsc_dc_offs_sts)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DSC_DC_OFFS_STSr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_DC_OFFS_STSr,(_r._dsc_dc_offs_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DSC_DC_OFFS_STSr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_DC_OFFS_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_dc_offs_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DSC_DC_OFFS_STSr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_DC_OFFS_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_dc_offs_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DSC_DC_OFFS_STSr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_DC_OFFS_STSr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_dc_offs_sts))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_DC_OFFS_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_DC_OFFS_STSr
#define DSC_DC_OFFS_STSr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_DC_OFFS_STSr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_DC_OFFS_STSr_t DSC_DC_OFFS_STSr_t;
#define DSC_DC_OFFS_STSr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_DC_OFFS_STSr_CLR
#define DSC_DC_OFFS_STSr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_DC_OFFS_STSr_SET
#define DSC_DC_OFFS_STSr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_DC_OFFS_STSr_GET
#define DSC_DC_OFFS_STSr_DC_OFFSET_BINf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_DC_OFFS_STSr_DC_OFFSET_BINf_GET
#define DSC_DC_OFFS_STSr_DC_OFFSET_BINf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_DC_OFFS_STSr_DC_OFFSET_BINf_SET
#define READ_DSC_DC_OFFS_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DSC_DC_OFFS_STSr
#define WRITE_DSC_DC_OFFS_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DSC_DC_OFFS_STSr
#define MODIFY_DSC_DC_OFFS_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DSC_DC_OFFS_STSr
#define READLN_DSC_DC_OFFS_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DSC_DC_OFFS_STSr
#define WRITELN_DSC_DC_OFFS_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DSC_DC_OFFS_STSr
#define WRITEALL_DSC_DC_OFFS_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DSC_DC_OFFS_STSr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_DC_OFFS_STSr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  DSC_VGA_D_THR_STS
 * BLOCKS:   DSC_B
 * REGADDR:  0xd04d
 * DEVAD:    1
 * DESC:     vga gain and data1 threshold status register.
 * RESETVAL: 0x2700 (9984)
 * ACCESS:   R/O
 * FIELDS:
 *     RX_DATA23_STATUS Read out of the Data23 Slicer threshold in 2's complement signed format.
 *     RX_VGA_STATUS    Read out of the VGA control.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_VGA_D_THR_STSr (0x0001d04d | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_VGA_D_THR_STSr_SIZE 4

/*
 * This structure should be used to declare and program DSC_VGA_D_THR_STS.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_VGA_D_THR_STSr_s {
	uint32_t v[1];
	uint32_t dsc_vga_d_thr_sts[1];
	uint32_t _dsc_vga_d_thr_sts;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_VGA_D_THR_STSr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_VGA_D_THR_STSr_CLR(r) (r).dsc_vga_d_thr_sts[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_VGA_D_THR_STSr_SET(r,d) (r).dsc_vga_d_thr_sts[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_VGA_D_THR_STSr_GET(r) (r).dsc_vga_d_thr_sts[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_VGA_D_THR_STSr_RX_VGA_STATUSf_GET(r) ((((r).dsc_vga_d_thr_sts[0]) >> 8) & 0x7f)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_VGA_D_THR_STSr_RX_VGA_STATUSf_SET(r,f) (r).dsc_vga_d_thr_sts[0]=(((r).dsc_vga_d_thr_sts[0] & ~((uint32_t)0x7f << 8)) | ((((uint32_t)f) & 0x7f) << 8)) | (127 << (16 + 8))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_VGA_D_THR_STSr_RX_DATA23_STATUSf_GET(r) (((r).dsc_vga_d_thr_sts[0]) & 0xff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_VGA_D_THR_STSr_RX_DATA23_STATUSf_SET(r,f) (r).dsc_vga_d_thr_sts[0]=(((r).dsc_vga_d_thr_sts[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff)) | (0xff << 16)

/*
 * These macros can be used to access DSC_VGA_D_THR_STS.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DSC_VGA_D_THR_STSr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_VGA_D_THR_STSr,(_r._dsc_vga_d_thr_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DSC_VGA_D_THR_STSr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_VGA_D_THR_STSr,(_r._dsc_vga_d_thr_sts)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DSC_VGA_D_THR_STSr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_VGA_D_THR_STSr,(_r._dsc_vga_d_thr_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DSC_VGA_D_THR_STSr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_VGA_D_THR_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_vga_d_thr_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DSC_VGA_D_THR_STSr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_VGA_D_THR_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_vga_d_thr_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DSC_VGA_D_THR_STSr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_VGA_D_THR_STSr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_vga_d_thr_sts))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_VGA_D_THR_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_VGA_D_THR_STSr
#define DSC_VGA_D_THR_STSr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_VGA_D_THR_STSr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_VGA_D_THR_STSr_t DSC_VGA_D_THR_STSr_t;
#define DSC_VGA_D_THR_STSr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_VGA_D_THR_STSr_CLR
#define DSC_VGA_D_THR_STSr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_VGA_D_THR_STSr_SET
#define DSC_VGA_D_THR_STSr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_VGA_D_THR_STSr_GET
#define DSC_VGA_D_THR_STSr_RX_VGA_STATUSf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_VGA_D_THR_STSr_RX_VGA_STATUSf_GET
#define DSC_VGA_D_THR_STSr_RX_VGA_STATUSf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_VGA_D_THR_STSr_RX_VGA_STATUSf_SET
#define DSC_VGA_D_THR_STSr_RX_DATA23_STATUSf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_VGA_D_THR_STSr_RX_DATA23_STATUSf_GET
#define DSC_VGA_D_THR_STSr_RX_DATA23_STATUSf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_VGA_D_THR_STSr_RX_DATA23_STATUSf_SET
#define READ_DSC_VGA_D_THR_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DSC_VGA_D_THR_STSr
#define WRITE_DSC_VGA_D_THR_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DSC_VGA_D_THR_STSr
#define MODIFY_DSC_VGA_D_THR_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DSC_VGA_D_THR_STSr
#define READLN_DSC_VGA_D_THR_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DSC_VGA_D_THR_STSr
#define WRITELN_DSC_VGA_D_THR_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DSC_VGA_D_THR_STSr
#define WRITEALL_DSC_VGA_D_THR_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DSC_VGA_D_THR_STSr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_VGA_D_THR_STSr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  DSC_CDR_CTL0
 * BLOCKS:   DSC_C
 * REGADDR:  0xd050
 * DEVAD:    1
 * DESC:     cdr control register 0.
 * RESETVAL: 0x9 (9)
 * ACCESS:   R/W
 * FIELDS:
 *     RESERVED_DSC_C_1 Reserved bitsmust not be written to. A read returns an unknown value
 *     RX_PAM4ER_PREC_DISABLED 1: PAM4 ER - precoder off @ transmit.0: PAM4 ER - precoder on @ transmit.For PAM4 NR - This bit is dont-care.
 *     RESERVED_DSC_C_0 Reserved bitmust not be written to. A read returns an unknown value
 *     RX_NRZ_VSR_MODE  NRZ mode select control and it is only applicable to the NRZ RX datapath.1: NRZ VSR mode.0: NRZ DFE mode.
 *     RX_PAM4_ER_MODE  PAM4 mode select control and it is only applicable to the PAM4 RX datapath.1: PAM4 ER (Extended Reach) mode.0: PAM4 NR (Normal Reach)   mode.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_CDR_CTL0r (0x0001d050 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_CDR_CTL0r_SIZE 4

/*
 * This structure should be used to declare and program DSC_CDR_CTL0.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_CDR_CTL0r_s {
	uint32_t v[1];
	uint32_t dsc_cdr_ctl0[1];
	uint32_t _dsc_cdr_ctl0;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_CDR_CTL0r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_CDR_CTL0r_CLR(r) (r).dsc_cdr_ctl0[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_CDR_CTL0r_SET(r,d) (r).dsc_cdr_ctl0[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_CDR_CTL0r_GET(r) (r).dsc_cdr_ctl0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_CDR_CTL0r_RX_PAM4_ER_MODEf_GET(r) ((((r).dsc_cdr_ctl0[0]) >> 15) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_CDR_CTL0r_RX_PAM4_ER_MODEf_SET(r,f) (r).dsc_cdr_ctl0[0]=(((r).dsc_cdr_ctl0[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_CDR_CTL0r_RX_NRZ_VSR_MODEf_GET(r) ((((r).dsc_cdr_ctl0[0]) >> 14) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_CDR_CTL0r_RX_NRZ_VSR_MODEf_SET(r,f) (r).dsc_cdr_ctl0[0]=(((r).dsc_cdr_ctl0[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14)) | (1 << (16 + 14))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_CDR_CTL0r_RESERVED_DSC_C_0f_GET(r) ((((r).dsc_cdr_ctl0[0]) >> 13) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_CDR_CTL0r_RESERVED_DSC_C_0f_SET(r,f) (r).dsc_cdr_ctl0[0]=(((r).dsc_cdr_ctl0[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13)) | (1 << (16 + 13))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_CDR_CTL0r_RX_PAM4ER_PREC_DISABLEDf_GET(r) ((((r).dsc_cdr_ctl0[0]) >> 12) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_CDR_CTL0r_RX_PAM4ER_PREC_DISABLEDf_SET(r,f) (r).dsc_cdr_ctl0[0]=(((r).dsc_cdr_ctl0[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12)) | (1 << (16 + 12))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_CDR_CTL0r_RESERVED_DSC_C_1f_GET(r) (((r).dsc_cdr_ctl0[0]) & 0xfff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_CDR_CTL0r_RESERVED_DSC_C_1f_SET(r,f) (r).dsc_cdr_ctl0[0]=(((r).dsc_cdr_ctl0[0] & ~((uint32_t)0xfff)) | (((uint32_t)f) & 0xfff)) | (0xfff << 16)

/*
 * These macros can be used to access DSC_CDR_CTL0.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DSC_CDR_CTL0r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_CDR_CTL0r,(_r._dsc_cdr_ctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DSC_CDR_CTL0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_CDR_CTL0r,(_r._dsc_cdr_ctl0)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DSC_CDR_CTL0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_CDR_CTL0r,(_r._dsc_cdr_ctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DSC_CDR_CTL0r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_CDR_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_cdr_ctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DSC_CDR_CTL0r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_CDR_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_cdr_ctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DSC_CDR_CTL0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_CDR_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_cdr_ctl0))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_CDR_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_CDR_CTL0r
#define DSC_CDR_CTL0r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_CDR_CTL0r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_CDR_CTL0r_t DSC_CDR_CTL0r_t;
#define DSC_CDR_CTL0r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_CDR_CTL0r_CLR
#define DSC_CDR_CTL0r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_CDR_CTL0r_SET
#define DSC_CDR_CTL0r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_CDR_CTL0r_GET
#define DSC_CDR_CTL0r_RX_PAM4_ER_MODEf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_CDR_CTL0r_RX_PAM4_ER_MODEf_GET
#define DSC_CDR_CTL0r_RX_PAM4_ER_MODEf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_CDR_CTL0r_RX_PAM4_ER_MODEf_SET
#define DSC_CDR_CTL0r_RX_NRZ_VSR_MODEf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_CDR_CTL0r_RX_NRZ_VSR_MODEf_GET
#define DSC_CDR_CTL0r_RX_NRZ_VSR_MODEf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_CDR_CTL0r_RX_NRZ_VSR_MODEf_SET
#define DSC_CDR_CTL0r_RESERVED_DSC_C_0f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_CDR_CTL0r_RESERVED_DSC_C_0f_GET
#define DSC_CDR_CTL0r_RESERVED_DSC_C_0f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_CDR_CTL0r_RESERVED_DSC_C_0f_SET
#define DSC_CDR_CTL0r_RX_PAM4ER_PREC_DISABLEDf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_CDR_CTL0r_RX_PAM4ER_PREC_DISABLEDf_GET
#define DSC_CDR_CTL0r_RX_PAM4ER_PREC_DISABLEDf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_CDR_CTL0r_RX_PAM4ER_PREC_DISABLEDf_SET
#define DSC_CDR_CTL0r_RESERVED_DSC_C_1f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_CDR_CTL0r_RESERVED_DSC_C_1f_GET
#define DSC_CDR_CTL0r_RESERVED_DSC_C_1f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_CDR_CTL0r_RESERVED_DSC_C_1f_SET
#define READ_DSC_CDR_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DSC_CDR_CTL0r
#define WRITE_DSC_CDR_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DSC_CDR_CTL0r
#define MODIFY_DSC_CDR_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DSC_CDR_CTL0r
#define READLN_DSC_CDR_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DSC_CDR_CTL0r
#define WRITELN_DSC_CDR_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DSC_CDR_CTL0r
#define WRITEALL_DSC_CDR_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DSC_CDR_CTL0r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_CDR_CTL0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  DSC_RX_PI_CTL1
 * BLOCKS:   DSC_C
 * REGADDR:  0xd05a
 * DEVAD:    1
 * DESC:     rx pi control 1 register.
 * RESETVAL: 0x3002 (12290)
 * ACCESS:   R/W
 * FIELDS:
 *     RX_PI_PHASE_INIT_EN 0: The Phase alignment of the phase PI does not occur after reset.1: The Phase alignment of the phase PI occurs after reset.
 *     RX_PI_CODE_STEP  Drives the RxAFE port pi_code_step[1:0]
 *     CDR_ALT_PAT_EN   One hot control. Only applicable to NRBRIndex [0]: NRBR, allow 0123x, 3210x.Index [1]: NRBR, allow (2,3)223, (0,1)110.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CTL1r (0x0001d05a | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CTL1r_SIZE 4

/*
 * This structure should be used to declare and program DSC_RX_PI_CTL1.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CTL1r_s {
	uint32_t v[1];
	uint32_t dsc_rx_pi_ctl1[1];
	uint32_t _dsc_rx_pi_ctl1;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CTL1r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CTL1r_CLR(r) (r).dsc_rx_pi_ctl1[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CTL1r_SET(r,d) (r).dsc_rx_pi_ctl1[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CTL1r_GET(r) (r).dsc_rx_pi_ctl1[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CTL1r_CDR_ALT_PAT_ENf_GET(r) ((((r).dsc_rx_pi_ctl1[0]) >> 12) & 0x3)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CTL1r_CDR_ALT_PAT_ENf_SET(r,f) (r).dsc_rx_pi_ctl1[0]=(((r).dsc_rx_pi_ctl1[0] & ~((uint32_t)0x3 << 12)) | ((((uint32_t)f) & 0x3) << 12)) | (3 << (16 + 12))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CTL1r_RX_PI_CODE_STEPf_GET(r) ((((r).dsc_rx_pi_ctl1[0]) >> 4) & 0x3)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CTL1r_RX_PI_CODE_STEPf_SET(r,f) (r).dsc_rx_pi_ctl1[0]=(((r).dsc_rx_pi_ctl1[0] & ~((uint32_t)0x3 << 4)) | ((((uint32_t)f) & 0x3) << 4)) | (3 << (16 + 4))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CTL1r_RX_PI_PHASE_INIT_ENf_GET(r) ((((r).dsc_rx_pi_ctl1[0]) >> 1) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CTL1r_RX_PI_PHASE_INIT_ENf_SET(r,f) (r).dsc_rx_pi_ctl1[0]=(((r).dsc_rx_pi_ctl1[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))

/*
 * These macros can be used to access DSC_RX_PI_CTL1.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DSC_RX_PI_CTL1r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CTL1r,(_r._dsc_rx_pi_ctl1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DSC_RX_PI_CTL1r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CTL1r,(_r._dsc_rx_pi_ctl1)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DSC_RX_PI_CTL1r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CTL1r,(_r._dsc_rx_pi_ctl1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DSC_RX_PI_CTL1r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CTL1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_pi_ctl1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DSC_RX_PI_CTL1r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CTL1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_pi_ctl1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DSC_RX_PI_CTL1r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CTL1r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_rx_pi_ctl1))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_RX_PI_CTL1r BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CTL1r
#define DSC_RX_PI_CTL1r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CTL1r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CTL1r_t DSC_RX_PI_CTL1r_t;
#define DSC_RX_PI_CTL1r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CTL1r_CLR
#define DSC_RX_PI_CTL1r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CTL1r_SET
#define DSC_RX_PI_CTL1r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CTL1r_GET
#define DSC_RX_PI_CTL1r_CDR_ALT_PAT_ENf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CTL1r_CDR_ALT_PAT_ENf_GET
#define DSC_RX_PI_CTL1r_CDR_ALT_PAT_ENf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CTL1r_CDR_ALT_PAT_ENf_SET
#define DSC_RX_PI_CTL1r_RX_PI_CODE_STEPf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CTL1r_RX_PI_CODE_STEPf_GET
#define DSC_RX_PI_CTL1r_RX_PI_CODE_STEPf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CTL1r_RX_PI_CODE_STEPf_SET
#define DSC_RX_PI_CTL1r_RX_PI_PHASE_INIT_ENf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CTL1r_RX_PI_PHASE_INIT_ENf_GET
#define DSC_RX_PI_CTL1r_RX_PI_PHASE_INIT_ENf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CTL1r_RX_PI_PHASE_INIT_ENf_SET
#define READ_DSC_RX_PI_CTL1r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DSC_RX_PI_CTL1r
#define WRITE_DSC_RX_PI_CTL1r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DSC_RX_PI_CTL1r
#define MODIFY_DSC_RX_PI_CTL1r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DSC_RX_PI_CTL1r
#define READLN_DSC_RX_PI_CTL1r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DSC_RX_PI_CTL1r
#define WRITELN_DSC_RX_PI_CTL1r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DSC_RX_PI_CTL1r
#define WRITEALL_DSC_RX_PI_CTL1r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DSC_RX_PI_CTL1r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CTL1r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  DSC_SLCRS_WRITE_CTL
 * BLOCKS:   DSC_C
 * REGADDR:  0xd05b
 * DEVAD:    1
 * DESC:     slicers override write control register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RX_AFE_OVERRIDE_SEL Based on this value, an override can be applied to one of the data, phase or lms slicers0 - Invalid; 1 - data23 slicer; 2 - data14 slicer; 3 - data05 slicer; 4 - phase1 slicer; 5 - phase02 slicer; 8 - lms threshold; 15 - Dont use (used in lms threshold readout).
 *     RX_AMS_BY_PASS_AUTO_UPDATE when this bit is set to 1, auto AFE update logic is bypassed by the ams rx signals
 *     RX_AFE_OVERRIDE_VAL override val of slicersthis value is binary. It is converted to gray before it is routed to AFE
 *     RX_AFE_OVERRIDE_WRITE strobe to write slicer values
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SLCRS_WRITE_CTLr (0x0001d05b | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SLCRS_WRITE_CTLr_SIZE 4

/*
 * This structure should be used to declare and program DSC_SLCRS_WRITE_CTL.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SLCRS_WRITE_CTLr_s {
	uint32_t v[1];
	uint32_t dsc_slcrs_write_ctl[1];
	uint32_t _dsc_slcrs_write_ctl;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SLCRS_WRITE_CTLr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SLCRS_WRITE_CTLr_CLR(r) (r).dsc_slcrs_write_ctl[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SLCRS_WRITE_CTLr_SET(r,d) (r).dsc_slcrs_write_ctl[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SLCRS_WRITE_CTLr_GET(r) (r).dsc_slcrs_write_ctl[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SLCRS_WRITE_CTLr_RX_AFE_OVERRIDE_WRITEf_GET(r) ((((r).dsc_slcrs_write_ctl[0]) >> 15) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SLCRS_WRITE_CTLr_RX_AFE_OVERRIDE_WRITEf_SET(r,f) (r).dsc_slcrs_write_ctl[0]=(((r).dsc_slcrs_write_ctl[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SLCRS_WRITE_CTLr_RX_AFE_OVERRIDE_VALf_GET(r) ((((r).dsc_slcrs_write_ctl[0]) >> 7) & 0xff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SLCRS_WRITE_CTLr_RX_AFE_OVERRIDE_VALf_SET(r,f) (r).dsc_slcrs_write_ctl[0]=(((r).dsc_slcrs_write_ctl[0] & ~((uint32_t)0xff << 7)) | ((((uint32_t)f) & 0xff) << 7)) | (255 << (16 + 7))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SLCRS_WRITE_CTLr_RX_AMS_BY_PASS_AUTO_UPDATEf_GET(r) ((((r).dsc_slcrs_write_ctl[0]) >> 4) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SLCRS_WRITE_CTLr_RX_AMS_BY_PASS_AUTO_UPDATEf_SET(r,f) (r).dsc_slcrs_write_ctl[0]=(((r).dsc_slcrs_write_ctl[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SLCRS_WRITE_CTLr_RX_AFE_OVERRIDE_SELf_GET(r) (((r).dsc_slcrs_write_ctl[0]) & 0xf)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SLCRS_WRITE_CTLr_RX_AFE_OVERRIDE_SELf_SET(r,f) (r).dsc_slcrs_write_ctl[0]=(((r).dsc_slcrs_write_ctl[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf)) | (0xf << 16)

/*
 * These macros can be used to access DSC_SLCRS_WRITE_CTL.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DSC_SLCRS_WRITE_CTLr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SLCRS_WRITE_CTLr,(_r._dsc_slcrs_write_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DSC_SLCRS_WRITE_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SLCRS_WRITE_CTLr,(_r._dsc_slcrs_write_ctl)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DSC_SLCRS_WRITE_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SLCRS_WRITE_CTLr,(_r._dsc_slcrs_write_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DSC_SLCRS_WRITE_CTLr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SLCRS_WRITE_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_slcrs_write_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DSC_SLCRS_WRITE_CTLr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SLCRS_WRITE_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_slcrs_write_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DSC_SLCRS_WRITE_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SLCRS_WRITE_CTLr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_slcrs_write_ctl))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_SLCRS_WRITE_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SLCRS_WRITE_CTLr
#define DSC_SLCRS_WRITE_CTLr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SLCRS_WRITE_CTLr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SLCRS_WRITE_CTLr_t DSC_SLCRS_WRITE_CTLr_t;
#define DSC_SLCRS_WRITE_CTLr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SLCRS_WRITE_CTLr_CLR
#define DSC_SLCRS_WRITE_CTLr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SLCRS_WRITE_CTLr_SET
#define DSC_SLCRS_WRITE_CTLr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SLCRS_WRITE_CTLr_GET
#define DSC_SLCRS_WRITE_CTLr_RX_AFE_OVERRIDE_WRITEf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SLCRS_WRITE_CTLr_RX_AFE_OVERRIDE_WRITEf_GET
#define DSC_SLCRS_WRITE_CTLr_RX_AFE_OVERRIDE_WRITEf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SLCRS_WRITE_CTLr_RX_AFE_OVERRIDE_WRITEf_SET
#define DSC_SLCRS_WRITE_CTLr_RX_AFE_OVERRIDE_VALf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SLCRS_WRITE_CTLr_RX_AFE_OVERRIDE_VALf_GET
#define DSC_SLCRS_WRITE_CTLr_RX_AFE_OVERRIDE_VALf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SLCRS_WRITE_CTLr_RX_AFE_OVERRIDE_VALf_SET
#define DSC_SLCRS_WRITE_CTLr_RX_AMS_BY_PASS_AUTO_UPDATEf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SLCRS_WRITE_CTLr_RX_AMS_BY_PASS_AUTO_UPDATEf_GET
#define DSC_SLCRS_WRITE_CTLr_RX_AMS_BY_PASS_AUTO_UPDATEf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SLCRS_WRITE_CTLr_RX_AMS_BY_PASS_AUTO_UPDATEf_SET
#define DSC_SLCRS_WRITE_CTLr_RX_AFE_OVERRIDE_SELf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SLCRS_WRITE_CTLr_RX_AFE_OVERRIDE_SELf_GET
#define DSC_SLCRS_WRITE_CTLr_RX_AFE_OVERRIDE_SELf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SLCRS_WRITE_CTLr_RX_AFE_OVERRIDE_SELf_SET
#define READ_DSC_SLCRS_WRITE_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DSC_SLCRS_WRITE_CTLr
#define WRITE_DSC_SLCRS_WRITE_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DSC_SLCRS_WRITE_CTLr
#define MODIFY_DSC_SLCRS_WRITE_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DSC_SLCRS_WRITE_CTLr
#define READLN_DSC_SLCRS_WRITE_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DSC_SLCRS_WRITE_CTLr
#define WRITELN_DSC_SLCRS_WRITE_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DSC_SLCRS_WRITE_CTLr
#define WRITEALL_DSC_SLCRS_WRITE_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DSC_SLCRS_WRITE_CTLr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SLCRS_WRITE_CTLr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  DSC_SM_CTL1
 * BLOCKS:   DSC_D
 * REGADDR:  0xd061
 * DEVAD:    1
 * DESC:     DSC STATE MACHINE CONTROL 1
 * RESETVAL: 0x4200 (16896)
 * ACCESS:   R/W
 * FIELDS:
 *     RX_DSC_LOCK_FRC  rx_dsc_lock force.
 *     RX_DSC_LOCK_FRC_VAL rx_dsc_lock force value.
 *     RESERVED_DSC_D_1 Reserved bitsmust not be written to. A read returns an unknown value
 *     RESERVED_DSC_D_0 Reserved bitmust not be written to. A read returns an unknown value
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SM_CTL1r (0x0001d061 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SM_CTL1r_SIZE 4

/*
 * This structure should be used to declare and program DSC_SM_CTL1.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SM_CTL1r_s {
	uint32_t v[1];
	uint32_t dsc_sm_ctl1[1];
	uint32_t _dsc_sm_ctl1;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SM_CTL1r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SM_CTL1r_CLR(r) (r).dsc_sm_ctl1[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SM_CTL1r_SET(r,d) (r).dsc_sm_ctl1[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SM_CTL1r_GET(r) (r).dsc_sm_ctl1[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SM_CTL1r_RESERVED_DSC_D_0f_GET(r) ((((r).dsc_sm_ctl1[0]) >> 14) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SM_CTL1r_RESERVED_DSC_D_0f_SET(r,f) (r).dsc_sm_ctl1[0]=(((r).dsc_sm_ctl1[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14)) | (1 << (16 + 14))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SM_CTL1r_RESERVED_DSC_D_1f_GET(r) ((((r).dsc_sm_ctl1[0]) >> 2) & 0xfff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SM_CTL1r_RESERVED_DSC_D_1f_SET(r,f) (r).dsc_sm_ctl1[0]=(((r).dsc_sm_ctl1[0] & ~((uint32_t)0xfff << 2)) | ((((uint32_t)f) & 0xfff) << 2)) | (4095 << (16 + 2))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SM_CTL1r_RX_DSC_LOCK_FRC_VALf_GET(r) ((((r).dsc_sm_ctl1[0]) >> 1) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SM_CTL1r_RX_DSC_LOCK_FRC_VALf_SET(r,f) (r).dsc_sm_ctl1[0]=(((r).dsc_sm_ctl1[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SM_CTL1r_RX_DSC_LOCK_FRCf_GET(r) (((r).dsc_sm_ctl1[0]) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SM_CTL1r_RX_DSC_LOCK_FRCf_SET(r,f) (r).dsc_sm_ctl1[0]=(((r).dsc_sm_ctl1[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access DSC_SM_CTL1.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DSC_SM_CTL1r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SM_CTL1r,(_r._dsc_sm_ctl1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DSC_SM_CTL1r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SM_CTL1r,(_r._dsc_sm_ctl1)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DSC_SM_CTL1r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SM_CTL1r,(_r._dsc_sm_ctl1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DSC_SM_CTL1r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SM_CTL1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_sm_ctl1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DSC_SM_CTL1r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SM_CTL1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_sm_ctl1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DSC_SM_CTL1r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SM_CTL1r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_sm_ctl1))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_SM_CTL1r BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SM_CTL1r
#define DSC_SM_CTL1r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SM_CTL1r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SM_CTL1r_t DSC_SM_CTL1r_t;
#define DSC_SM_CTL1r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SM_CTL1r_CLR
#define DSC_SM_CTL1r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SM_CTL1r_SET
#define DSC_SM_CTL1r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SM_CTL1r_GET
#define DSC_SM_CTL1r_RESERVED_DSC_D_0f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SM_CTL1r_RESERVED_DSC_D_0f_GET
#define DSC_SM_CTL1r_RESERVED_DSC_D_0f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SM_CTL1r_RESERVED_DSC_D_0f_SET
#define DSC_SM_CTL1r_RESERVED_DSC_D_1f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SM_CTL1r_RESERVED_DSC_D_1f_GET
#define DSC_SM_CTL1r_RESERVED_DSC_D_1f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SM_CTL1r_RESERVED_DSC_D_1f_SET
#define DSC_SM_CTL1r_RX_DSC_LOCK_FRC_VALf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SM_CTL1r_RX_DSC_LOCK_FRC_VALf_GET
#define DSC_SM_CTL1r_RX_DSC_LOCK_FRC_VALf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SM_CTL1r_RX_DSC_LOCK_FRC_VALf_SET
#define DSC_SM_CTL1r_RX_DSC_LOCK_FRCf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SM_CTL1r_RX_DSC_LOCK_FRCf_GET
#define DSC_SM_CTL1r_RX_DSC_LOCK_FRCf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SM_CTL1r_RX_DSC_LOCK_FRCf_SET
#define READ_DSC_SM_CTL1r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DSC_SM_CTL1r
#define WRITE_DSC_SM_CTL1r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DSC_SM_CTL1r
#define MODIFY_DSC_SM_CTL1r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DSC_SM_CTL1r
#define READLN_DSC_SM_CTL1r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DSC_SM_CTL1r
#define WRITELN_DSC_SM_CTL1r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DSC_SM_CTL1r
#define WRITEALL_DSC_SM_CTL1r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DSC_SM_CTL1r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SM_CTL1r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  DSC_SM_CTL9
 * BLOCKS:   DSC_D
 * REGADDR:  0xd069
 * DEVAD:    1
 * DESC:     DSC STATE MACHINE CONTROL 9
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RX_RESTART_PMD   1: restarts the RX PMD. This is a self-clear register bit.
 *     RX_RESTART_PMD_HOLD 1: restarts the RX PMD and holds it in RESTART state until this bit is cleared.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SM_CTL9r (0x0001d069 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SM_CTL9r_SIZE 4

/*
 * This structure should be used to declare and program DSC_SM_CTL9.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SM_CTL9r_s {
	uint32_t v[1];
	uint32_t dsc_sm_ctl9[1];
	uint32_t _dsc_sm_ctl9;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SM_CTL9r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SM_CTL9r_CLR(r) (r).dsc_sm_ctl9[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SM_CTL9r_SET(r,d) (r).dsc_sm_ctl9[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SM_CTL9r_GET(r) (r).dsc_sm_ctl9[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SM_CTL9r_RX_RESTART_PMD_HOLDf_GET(r) ((((r).dsc_sm_ctl9[0]) >> 1) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SM_CTL9r_RX_RESTART_PMD_HOLDf_SET(r,f) (r).dsc_sm_ctl9[0]=(((r).dsc_sm_ctl9[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SM_CTL9r_RX_RESTART_PMDf_GET(r) (((r).dsc_sm_ctl9[0]) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SM_CTL9r_RX_RESTART_PMDf_SET(r,f) (r).dsc_sm_ctl9[0]=(((r).dsc_sm_ctl9[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access DSC_SM_CTL9.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DSC_SM_CTL9r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SM_CTL9r,(_r._dsc_sm_ctl9))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DSC_SM_CTL9r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SM_CTL9r,(_r._dsc_sm_ctl9)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DSC_SM_CTL9r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SM_CTL9r,(_r._dsc_sm_ctl9))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DSC_SM_CTL9r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SM_CTL9r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_sm_ctl9))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DSC_SM_CTL9r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SM_CTL9r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_sm_ctl9))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DSC_SM_CTL9r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SM_CTL9r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_sm_ctl9))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_SM_CTL9r BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SM_CTL9r
#define DSC_SM_CTL9r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SM_CTL9r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SM_CTL9r_t DSC_SM_CTL9r_t;
#define DSC_SM_CTL9r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SM_CTL9r_CLR
#define DSC_SM_CTL9r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SM_CTL9r_SET
#define DSC_SM_CTL9r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SM_CTL9r_GET
#define DSC_SM_CTL9r_RX_RESTART_PMD_HOLDf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SM_CTL9r_RX_RESTART_PMD_HOLDf_GET
#define DSC_SM_CTL9r_RX_RESTART_PMD_HOLDf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SM_CTL9r_RX_RESTART_PMD_HOLDf_SET
#define DSC_SM_CTL9r_RX_RESTART_PMDf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SM_CTL9r_RX_RESTART_PMDf_GET
#define DSC_SM_CTL9r_RX_RESTART_PMDf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SM_CTL9r_RX_RESTART_PMDf_SET
#define READ_DSC_SM_CTL9r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DSC_SM_CTL9r
#define WRITE_DSC_SM_CTL9r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DSC_SM_CTL9r
#define MODIFY_DSC_SM_CTL9r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DSC_SM_CTL9r
#define READLN_DSC_SM_CTL9r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DSC_SM_CTL9r
#define WRITELN_DSC_SM_CTL9r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DSC_SM_CTL9r
#define WRITEALL_DSC_SM_CTL9r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DSC_SM_CTL9r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SM_CTL9r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  DSC_SM_STS_DSC_ST_ONE_HOT
 * BLOCKS:   DSC_D
 * REGADDR:  0xd06b
 * DEVAD:    1
 * DESC:     DSC STATE MACHINE STATUS ONE HOT
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     DSC_STATE_ONE_HOT Sticky one-hot coded states. These registers are cleared on read.RESET           =  0RESTART         =  1CONFIG          =  2WAIT_FOR_SIG    =  3ACQ_CDR         =  4CDR_SETTLE      =  5HW_TUNE         =  6UC_TUNE         =  7MEASURE         =  8DONE            =  9
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SM_STS_DSC_ST_ONE_HOTr (0x0001d06b | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SM_STS_DSC_ST_ONE_HOTr_SIZE 4

/*
 * This structure should be used to declare and program DSC_SM_STS_DSC_ST_ONE_HOT.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SM_STS_DSC_ST_ONE_HOTr_s {
	uint32_t v[1];
	uint32_t dsc_sm_sts_dsc_st_one_hot[1];
	uint32_t _dsc_sm_sts_dsc_st_one_hot;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SM_STS_DSC_ST_ONE_HOTr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SM_STS_DSC_ST_ONE_HOTr_CLR(r) (r).dsc_sm_sts_dsc_st_one_hot[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SM_STS_DSC_ST_ONE_HOTr_SET(r,d) (r).dsc_sm_sts_dsc_st_one_hot[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SM_STS_DSC_ST_ONE_HOTr_GET(r) (r).dsc_sm_sts_dsc_st_one_hot[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SM_STS_DSC_ST_ONE_HOTr_DSC_STATE_ONE_HOTf_GET(r) (((r).dsc_sm_sts_dsc_st_one_hot[0]) & 0x3ff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SM_STS_DSC_ST_ONE_HOTr_DSC_STATE_ONE_HOTf_SET(r,f) (r).dsc_sm_sts_dsc_st_one_hot[0]=(((r).dsc_sm_sts_dsc_st_one_hot[0] & ~((uint32_t)0x3ff)) | (((uint32_t)f) & 0x3ff)) | (0x3ff << 16)

/*
 * These macros can be used to access DSC_SM_STS_DSC_ST_ONE_HOT.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DSC_SM_STS_DSC_ST_ONE_HOTr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SM_STS_DSC_ST_ONE_HOTr,(_r._dsc_sm_sts_dsc_st_one_hot))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DSC_SM_STS_DSC_ST_ONE_HOTr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SM_STS_DSC_ST_ONE_HOTr,(_r._dsc_sm_sts_dsc_st_one_hot)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DSC_SM_STS_DSC_ST_ONE_HOTr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SM_STS_DSC_ST_ONE_HOTr,(_r._dsc_sm_sts_dsc_st_one_hot))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DSC_SM_STS_DSC_ST_ONE_HOTr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SM_STS_DSC_ST_ONE_HOTr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_sm_sts_dsc_st_one_hot))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DSC_SM_STS_DSC_ST_ONE_HOTr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SM_STS_DSC_ST_ONE_HOTr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_sm_sts_dsc_st_one_hot))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DSC_SM_STS_DSC_ST_ONE_HOTr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SM_STS_DSC_ST_ONE_HOTr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_sm_sts_dsc_st_one_hot))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_SM_STS_DSC_ST_ONE_HOTr BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SM_STS_DSC_ST_ONE_HOTr
#define DSC_SM_STS_DSC_ST_ONE_HOTr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SM_STS_DSC_ST_ONE_HOTr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SM_STS_DSC_ST_ONE_HOTr_t DSC_SM_STS_DSC_ST_ONE_HOTr_t;
#define DSC_SM_STS_DSC_ST_ONE_HOTr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SM_STS_DSC_ST_ONE_HOTr_CLR
#define DSC_SM_STS_DSC_ST_ONE_HOTr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SM_STS_DSC_ST_ONE_HOTr_SET
#define DSC_SM_STS_DSC_ST_ONE_HOTr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SM_STS_DSC_ST_ONE_HOTr_GET
#define DSC_SM_STS_DSC_ST_ONE_HOTr_DSC_STATE_ONE_HOTf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SM_STS_DSC_ST_ONE_HOTr_DSC_STATE_ONE_HOTf_GET
#define DSC_SM_STS_DSC_ST_ONE_HOTr_DSC_STATE_ONE_HOTf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SM_STS_DSC_ST_ONE_HOTr_DSC_STATE_ONE_HOTf_SET
#define READ_DSC_SM_STS_DSC_ST_ONE_HOTr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DSC_SM_STS_DSC_ST_ONE_HOTr
#define WRITE_DSC_SM_STS_DSC_ST_ONE_HOTr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DSC_SM_STS_DSC_ST_ONE_HOTr
#define MODIFY_DSC_SM_STS_DSC_ST_ONE_HOTr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DSC_SM_STS_DSC_ST_ONE_HOTr
#define READLN_DSC_SM_STS_DSC_ST_ONE_HOTr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DSC_SM_STS_DSC_ST_ONE_HOTr
#define WRITELN_DSC_SM_STS_DSC_ST_ONE_HOTr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DSC_SM_STS_DSC_ST_ONE_HOTr
#define WRITEALL_DSC_SM_STS_DSC_ST_ONE_HOTr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DSC_SM_STS_DSC_ST_ONE_HOTr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SM_STS_DSC_ST_ONE_HOTr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  DSC_SM_STS_DSC_ST
 * BLOCKS:   DSC_D
 * REGADDR:  0xd06e
 * DEVAD:    1
 * DESC:     DSC STATE MACHINE STATUS
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     DSC_SM_READY_FOR_CMD Ready for Command.
 *     DSC_SM_GP_UC_REQ gp_uc_req.
 *     DSC_SM_SCRATCH   3 bits of dsc_scratch
 *     DSC_STATE        Live DSC SM state. Following are the state encodings.RESET           =  0RESTART         =  1CONFIG          =  2WAIT_FOR_SIG    =  3ACQ_CDR         =  4CDR_SETTLE      =  5HW_TUNE         =  6UC_TUNE         =  7MEASURE         =  8DONE            =  9EEE_QUIET       =  10EEE_ANA_PWR     =  11EEE_ACQ_CDR     =  12EEE_CDR_SETTLE  =  13EEE_HW_TUNE     =  14EEE_MEASURE     =  15EEE_DONE        =  16
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SM_STS_DSC_STr (0x0001d06e | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SM_STS_DSC_STr_SIZE 4

/*
 * This structure should be used to declare and program DSC_SM_STS_DSC_ST.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SM_STS_DSC_STr_s {
	uint32_t v[1];
	uint32_t dsc_sm_sts_dsc_st[1];
	uint32_t _dsc_sm_sts_dsc_st;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SM_STS_DSC_STr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SM_STS_DSC_STr_CLR(r) (r).dsc_sm_sts_dsc_st[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SM_STS_DSC_STr_SET(r,d) (r).dsc_sm_sts_dsc_st[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SM_STS_DSC_STr_GET(r) (r).dsc_sm_sts_dsc_st[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SM_STS_DSC_STr_DSC_STATEf_GET(r) ((((r).dsc_sm_sts_dsc_st[0]) >> 11) & 0x1f)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SM_STS_DSC_STr_DSC_STATEf_SET(r,f) (r).dsc_sm_sts_dsc_st[0]=(((r).dsc_sm_sts_dsc_st[0] & ~((uint32_t)0x1f << 11)) | ((((uint32_t)f) & 0x1f) << 11)) | (31 << (16 + 11))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SM_STS_DSC_STr_DSC_SM_SCRATCHf_GET(r) ((((r).dsc_sm_sts_dsc_st[0]) >> 8) & 0x7)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SM_STS_DSC_STr_DSC_SM_SCRATCHf_SET(r,f) (r).dsc_sm_sts_dsc_st[0]=(((r).dsc_sm_sts_dsc_st[0] & ~((uint32_t)0x7 << 8)) | ((((uint32_t)f) & 0x7) << 8)) | (7 << (16 + 8))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SM_STS_DSC_STr_DSC_SM_GP_UC_REQf_GET(r) ((((r).dsc_sm_sts_dsc_st[0]) >> 1) & 0x3f)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SM_STS_DSC_STr_DSC_SM_GP_UC_REQf_SET(r,f) (r).dsc_sm_sts_dsc_st[0]=(((r).dsc_sm_sts_dsc_st[0] & ~((uint32_t)0x3f << 1)) | ((((uint32_t)f) & 0x3f) << 1)) | (63 << (16 + 1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SM_STS_DSC_STr_DSC_SM_READY_FOR_CMDf_GET(r) (((r).dsc_sm_sts_dsc_st[0]) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SM_STS_DSC_STr_DSC_SM_READY_FOR_CMDf_SET(r,f) (r).dsc_sm_sts_dsc_st[0]=(((r).dsc_sm_sts_dsc_st[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access DSC_SM_STS_DSC_ST.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DSC_SM_STS_DSC_STr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SM_STS_DSC_STr,(_r._dsc_sm_sts_dsc_st))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DSC_SM_STS_DSC_STr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SM_STS_DSC_STr,(_r._dsc_sm_sts_dsc_st)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DSC_SM_STS_DSC_STr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SM_STS_DSC_STr,(_r._dsc_sm_sts_dsc_st))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DSC_SM_STS_DSC_STr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SM_STS_DSC_STr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_sm_sts_dsc_st))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DSC_SM_STS_DSC_STr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SM_STS_DSC_STr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_sm_sts_dsc_st))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DSC_SM_STS_DSC_STr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SM_STS_DSC_STr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_sm_sts_dsc_st))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_SM_STS_DSC_STr BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SM_STS_DSC_STr
#define DSC_SM_STS_DSC_STr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SM_STS_DSC_STr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SM_STS_DSC_STr_t DSC_SM_STS_DSC_STr_t;
#define DSC_SM_STS_DSC_STr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SM_STS_DSC_STr_CLR
#define DSC_SM_STS_DSC_STr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SM_STS_DSC_STr_SET
#define DSC_SM_STS_DSC_STr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SM_STS_DSC_STr_GET
#define DSC_SM_STS_DSC_STr_DSC_STATEf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SM_STS_DSC_STr_DSC_STATEf_GET
#define DSC_SM_STS_DSC_STr_DSC_STATEf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SM_STS_DSC_STr_DSC_STATEf_SET
#define DSC_SM_STS_DSC_STr_DSC_SM_SCRATCHf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SM_STS_DSC_STr_DSC_SM_SCRATCHf_GET
#define DSC_SM_STS_DSC_STr_DSC_SM_SCRATCHf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SM_STS_DSC_STr_DSC_SM_SCRATCHf_SET
#define DSC_SM_STS_DSC_STr_DSC_SM_GP_UC_REQf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SM_STS_DSC_STr_DSC_SM_GP_UC_REQf_GET
#define DSC_SM_STS_DSC_STr_DSC_SM_GP_UC_REQf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SM_STS_DSC_STr_DSC_SM_GP_UC_REQf_SET
#define DSC_SM_STS_DSC_STr_DSC_SM_READY_FOR_CMDf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SM_STS_DSC_STr_DSC_SM_READY_FOR_CMDf_GET
#define DSC_SM_STS_DSC_STr_DSC_SM_READY_FOR_CMDf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SM_STS_DSC_STr_DSC_SM_READY_FOR_CMDf_SET
#define READ_DSC_SM_STS_DSC_STr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DSC_SM_STS_DSC_STr
#define WRITE_DSC_SM_STS_DSC_STr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DSC_SM_STS_DSC_STr
#define MODIFY_DSC_SM_STS_DSC_STr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DSC_SM_STS_DSC_STr
#define READLN_DSC_SM_STS_DSC_STr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DSC_SM_STS_DSC_STr
#define WRITELN_DSC_SM_STS_DSC_STr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DSC_SM_STS_DSC_STr
#define WRITEALL_DSC_SM_STS_DSC_STr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DSC_SM_STS_DSC_STr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_SM_STS_DSC_STr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  DSC_RX_PI_CNT_BIN_PD
 * BLOCKS:   DSC_E
 * REGADDR:  0xd070
 * DEVAD:    1
 * DESC:     rx_pi status register, both p and d.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     CNT_BIN_P_PD     PI counter value for phase slicersee description of cnt_bin_pq
 *     CNT_BIN_D_PD     PI counter value for phase quadrature slicersee description of cnt_bin_pq
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_PDr (0x0001d070 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_PDr_SIZE 4

/*
 * This structure should be used to declare and program DSC_RX_PI_CNT_BIN_PD.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_PDr_s {
	uint32_t v[1];
	uint32_t dsc_rx_pi_cnt_bin_pd[1];
	uint32_t _dsc_rx_pi_cnt_bin_pd;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_PDr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_PDr_CLR(r) (r).dsc_rx_pi_cnt_bin_pd[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_PDr_SET(r,d) (r).dsc_rx_pi_cnt_bin_pd[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_PDr_GET(r) (r).dsc_rx_pi_cnt_bin_pd[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_PDr_CNT_BIN_D_PDf_GET(r) ((((r).dsc_rx_pi_cnt_bin_pd[0]) >> 8) & 0xff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_PDr_CNT_BIN_D_PDf_SET(r,f) (r).dsc_rx_pi_cnt_bin_pd[0]=(((r).dsc_rx_pi_cnt_bin_pd[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8)) | (255 << (16 + 8))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_PDr_CNT_BIN_P_PDf_GET(r) (((r).dsc_rx_pi_cnt_bin_pd[0]) & 0xff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_PDr_CNT_BIN_P_PDf_SET(r,f) (r).dsc_rx_pi_cnt_bin_pd[0]=(((r).dsc_rx_pi_cnt_bin_pd[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff)) | (0xff << 16)

/*
 * These macros can be used to access DSC_RX_PI_CNT_BIN_PD.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DSC_RX_PI_CNT_BIN_PDr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_PDr,(_r._dsc_rx_pi_cnt_bin_pd))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DSC_RX_PI_CNT_BIN_PDr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_PDr,(_r._dsc_rx_pi_cnt_bin_pd)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DSC_RX_PI_CNT_BIN_PDr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_PDr,(_r._dsc_rx_pi_cnt_bin_pd))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DSC_RX_PI_CNT_BIN_PDr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_PDr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_pi_cnt_bin_pd))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DSC_RX_PI_CNT_BIN_PDr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_PDr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_pi_cnt_bin_pd))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DSC_RX_PI_CNT_BIN_PDr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_PDr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_rx_pi_cnt_bin_pd))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_RX_PI_CNT_BIN_PDr BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_PDr
#define DSC_RX_PI_CNT_BIN_PDr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_PDr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_PDr_t DSC_RX_PI_CNT_BIN_PDr_t;
#define DSC_RX_PI_CNT_BIN_PDr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_PDr_CLR
#define DSC_RX_PI_CNT_BIN_PDr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_PDr_SET
#define DSC_RX_PI_CNT_BIN_PDr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_PDr_GET
#define DSC_RX_PI_CNT_BIN_PDr_CNT_BIN_D_PDf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_PDr_CNT_BIN_D_PDf_GET
#define DSC_RX_PI_CNT_BIN_PDr_CNT_BIN_D_PDf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_PDr_CNT_BIN_D_PDf_SET
#define DSC_RX_PI_CNT_BIN_PDr_CNT_BIN_P_PDf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_PDr_CNT_BIN_P_PDf_GET
#define DSC_RX_PI_CNT_BIN_PDr_CNT_BIN_P_PDf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_PDr_CNT_BIN_P_PDf_SET
#define READ_DSC_RX_PI_CNT_BIN_PDr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DSC_RX_PI_CNT_BIN_PDr
#define WRITE_DSC_RX_PI_CNT_BIN_PDr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DSC_RX_PI_CNT_BIN_PDr
#define MODIFY_DSC_RX_PI_CNT_BIN_PDr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DSC_RX_PI_CNT_BIN_PDr
#define READLN_DSC_RX_PI_CNT_BIN_PDr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DSC_RX_PI_CNT_BIN_PDr
#define WRITELN_DSC_RX_PI_CNT_BIN_PDr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DSC_RX_PI_CNT_BIN_PDr
#define WRITEALL_DSC_RX_PI_CNT_BIN_PDr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DSC_RX_PI_CNT_BIN_PDr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_PDr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  DSC_RX_PI_CNT_BIN_LD
 * BLOCKS:   DSC_E
 * REGADDR:  0xd071
 * DEVAD:    1
 * DESC:     rx_pi status register, both l and d.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     CNT_BIN_L_LD     PI counter value for LMS slicersee description of cnt_bin_pq
 *     CNT_BIN_D_LD     PI counter value for LMS quadrature slicersee description of cnt_bin_pq
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_LDr (0x0001d071 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_LDr_SIZE 4

/*
 * This structure should be used to declare and program DSC_RX_PI_CNT_BIN_LD.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_LDr_s {
	uint32_t v[1];
	uint32_t dsc_rx_pi_cnt_bin_ld[1];
	uint32_t _dsc_rx_pi_cnt_bin_ld;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_LDr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_LDr_CLR(r) (r).dsc_rx_pi_cnt_bin_ld[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_LDr_SET(r,d) (r).dsc_rx_pi_cnt_bin_ld[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_LDr_GET(r) (r).dsc_rx_pi_cnt_bin_ld[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_LDr_CNT_BIN_D_LDf_GET(r) ((((r).dsc_rx_pi_cnt_bin_ld[0]) >> 8) & 0xff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_LDr_CNT_BIN_D_LDf_SET(r,f) (r).dsc_rx_pi_cnt_bin_ld[0]=(((r).dsc_rx_pi_cnt_bin_ld[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8)) | (255 << (16 + 8))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_LDr_CNT_BIN_L_LDf_GET(r) (((r).dsc_rx_pi_cnt_bin_ld[0]) & 0xff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_LDr_CNT_BIN_L_LDf_SET(r,f) (r).dsc_rx_pi_cnt_bin_ld[0]=(((r).dsc_rx_pi_cnt_bin_ld[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff)) | (0xff << 16)

/*
 * These macros can be used to access DSC_RX_PI_CNT_BIN_LD.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DSC_RX_PI_CNT_BIN_LDr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_LDr,(_r._dsc_rx_pi_cnt_bin_ld))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DSC_RX_PI_CNT_BIN_LDr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_LDr,(_r._dsc_rx_pi_cnt_bin_ld)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DSC_RX_PI_CNT_BIN_LDr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_LDr,(_r._dsc_rx_pi_cnt_bin_ld))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DSC_RX_PI_CNT_BIN_LDr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_LDr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_pi_cnt_bin_ld))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DSC_RX_PI_CNT_BIN_LDr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_LDr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_pi_cnt_bin_ld))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DSC_RX_PI_CNT_BIN_LDr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_LDr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_rx_pi_cnt_bin_ld))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_RX_PI_CNT_BIN_LDr BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_LDr
#define DSC_RX_PI_CNT_BIN_LDr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_LDr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_LDr_t DSC_RX_PI_CNT_BIN_LDr_t;
#define DSC_RX_PI_CNT_BIN_LDr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_LDr_CLR
#define DSC_RX_PI_CNT_BIN_LDr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_LDr_SET
#define DSC_RX_PI_CNT_BIN_LDr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_LDr_GET
#define DSC_RX_PI_CNT_BIN_LDr_CNT_BIN_D_LDf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_LDr_CNT_BIN_D_LDf_GET
#define DSC_RX_PI_CNT_BIN_LDr_CNT_BIN_D_LDf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_LDr_CNT_BIN_D_LDf_SET
#define DSC_RX_PI_CNT_BIN_LDr_CNT_BIN_L_LDf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_LDr_CNT_BIN_L_LDf_GET
#define DSC_RX_PI_CNT_BIN_LDr_CNT_BIN_L_LDf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_LDr_CNT_BIN_L_LDf_SET
#define READ_DSC_RX_PI_CNT_BIN_LDr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DSC_RX_PI_CNT_BIN_LDr
#define WRITE_DSC_RX_PI_CNT_BIN_LDr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DSC_RX_PI_CNT_BIN_LDr
#define MODIFY_DSC_RX_PI_CNT_BIN_LDr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DSC_RX_PI_CNT_BIN_LDr
#define READLN_DSC_RX_PI_CNT_BIN_LDr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DSC_RX_PI_CNT_BIN_LDr
#define WRITELN_DSC_RX_PI_CNT_BIN_LDr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DSC_RX_PI_CNT_BIN_LDr
#define WRITEALL_DSC_RX_PI_CNT_BIN_LDr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DSC_RX_PI_CNT_BIN_LDr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_LDr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  DSC_RX_PI_CNT_BIN_D
 * BLOCKS:   DSC_E
 * REGADDR:  0xd075
 * DEVAD:    1
 * DESC:     rx_pi status register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     CNT_BIN_D        PI counter value for data slicer
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_Dr (0x0001d075 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_Dr_SIZE 4

/*
 * This structure should be used to declare and program DSC_RX_PI_CNT_BIN_D.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_Dr_s {
	uint32_t v[1];
	uint32_t dsc_rx_pi_cnt_bin_d[1];
	uint32_t _dsc_rx_pi_cnt_bin_d;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_Dr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_Dr_CLR(r) (r).dsc_rx_pi_cnt_bin_d[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_Dr_SET(r,d) (r).dsc_rx_pi_cnt_bin_d[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_Dr_GET(r) (r).dsc_rx_pi_cnt_bin_d[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_Dr_CNT_BIN_Df_GET(r) (((r).dsc_rx_pi_cnt_bin_d[0]) & 0xff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_Dr_CNT_BIN_Df_SET(r,f) (r).dsc_rx_pi_cnt_bin_d[0]=(((r).dsc_rx_pi_cnt_bin_d[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff)) | (0xff << 16)

/*
 * These macros can be used to access DSC_RX_PI_CNT_BIN_D.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DSC_RX_PI_CNT_BIN_Dr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_Dr,(_r._dsc_rx_pi_cnt_bin_d))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DSC_RX_PI_CNT_BIN_Dr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_Dr,(_r._dsc_rx_pi_cnt_bin_d)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DSC_RX_PI_CNT_BIN_Dr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_Dr,(_r._dsc_rx_pi_cnt_bin_d))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DSC_RX_PI_CNT_BIN_Dr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_Dr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_pi_cnt_bin_d))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DSC_RX_PI_CNT_BIN_Dr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_Dr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_pi_cnt_bin_d))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DSC_RX_PI_CNT_BIN_Dr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_Dr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_rx_pi_cnt_bin_d))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_RX_PI_CNT_BIN_Dr BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_Dr
#define DSC_RX_PI_CNT_BIN_Dr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_Dr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_Dr_t DSC_RX_PI_CNT_BIN_Dr_t;
#define DSC_RX_PI_CNT_BIN_Dr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_Dr_CLR
#define DSC_RX_PI_CNT_BIN_Dr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_Dr_SET
#define DSC_RX_PI_CNT_BIN_Dr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_Dr_GET
#define DSC_RX_PI_CNT_BIN_Dr_CNT_BIN_Df_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_Dr_CNT_BIN_Df_GET
#define DSC_RX_PI_CNT_BIN_Dr_CNT_BIN_Df_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_Dr_CNT_BIN_Df_SET
#define READ_DSC_RX_PI_CNT_BIN_Dr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DSC_RX_PI_CNT_BIN_Dr
#define WRITE_DSC_RX_PI_CNT_BIN_Dr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DSC_RX_PI_CNT_BIN_Dr
#define MODIFY_DSC_RX_PI_CNT_BIN_Dr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DSC_RX_PI_CNT_BIN_Dr
#define READLN_DSC_RX_PI_CNT_BIN_Dr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DSC_RX_PI_CNT_BIN_Dr
#define WRITELN_DSC_RX_PI_CNT_BIN_Dr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DSC_RX_PI_CNT_BIN_Dr
#define WRITEALL_DSC_RX_PI_CNT_BIN_Dr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DSC_RX_PI_CNT_BIN_Dr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_Dr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  DSC_RX_PI_CNT_BIN_P
 * BLOCKS:   DSC_E
 * REGADDR:  0xd076
 * DEVAD:    1
 * DESC:     rx_pi status register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     CNT_BIN_P        PI counter value for phase slicer
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_Pr (0x0001d076 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_Pr_SIZE 4

/*
 * This structure should be used to declare and program DSC_RX_PI_CNT_BIN_P.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_Pr_s {
	uint32_t v[1];
	uint32_t dsc_rx_pi_cnt_bin_p[1];
	uint32_t _dsc_rx_pi_cnt_bin_p;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_Pr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_Pr_CLR(r) (r).dsc_rx_pi_cnt_bin_p[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_Pr_SET(r,d) (r).dsc_rx_pi_cnt_bin_p[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_Pr_GET(r) (r).dsc_rx_pi_cnt_bin_p[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_Pr_CNT_BIN_Pf_GET(r) (((r).dsc_rx_pi_cnt_bin_p[0]) & 0xff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_Pr_CNT_BIN_Pf_SET(r,f) (r).dsc_rx_pi_cnt_bin_p[0]=(((r).dsc_rx_pi_cnt_bin_p[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff)) | (0xff << 16)

/*
 * These macros can be used to access DSC_RX_PI_CNT_BIN_P.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DSC_RX_PI_CNT_BIN_Pr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_Pr,(_r._dsc_rx_pi_cnt_bin_p))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DSC_RX_PI_CNT_BIN_Pr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_Pr,(_r._dsc_rx_pi_cnt_bin_p)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DSC_RX_PI_CNT_BIN_Pr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_Pr,(_r._dsc_rx_pi_cnt_bin_p))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DSC_RX_PI_CNT_BIN_Pr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_Pr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_pi_cnt_bin_p))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DSC_RX_PI_CNT_BIN_Pr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_Pr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_pi_cnt_bin_p))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DSC_RX_PI_CNT_BIN_Pr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_Pr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_rx_pi_cnt_bin_p))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_RX_PI_CNT_BIN_Pr BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_Pr
#define DSC_RX_PI_CNT_BIN_Pr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_Pr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_Pr_t DSC_RX_PI_CNT_BIN_Pr_t;
#define DSC_RX_PI_CNT_BIN_Pr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_Pr_CLR
#define DSC_RX_PI_CNT_BIN_Pr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_Pr_SET
#define DSC_RX_PI_CNT_BIN_Pr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_Pr_GET
#define DSC_RX_PI_CNT_BIN_Pr_CNT_BIN_Pf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_Pr_CNT_BIN_Pf_GET
#define DSC_RX_PI_CNT_BIN_Pr_CNT_BIN_Pf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_Pr_CNT_BIN_Pf_SET
#define READ_DSC_RX_PI_CNT_BIN_Pr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DSC_RX_PI_CNT_BIN_Pr
#define WRITE_DSC_RX_PI_CNT_BIN_Pr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DSC_RX_PI_CNT_BIN_Pr
#define MODIFY_DSC_RX_PI_CNT_BIN_Pr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DSC_RX_PI_CNT_BIN_Pr
#define READLN_DSC_RX_PI_CNT_BIN_Pr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DSC_RX_PI_CNT_BIN_Pr
#define WRITELN_DSC_RX_PI_CNT_BIN_Pr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DSC_RX_PI_CNT_BIN_Pr
#define WRITEALL_DSC_RX_PI_CNT_BIN_Pr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DSC_RX_PI_CNT_BIN_Pr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_Pr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  DSC_RX_PI_CNT_BIN_L
 * BLOCKS:   DSC_E
 * REGADDR:  0xd077
 * DEVAD:    1
 * DESC:     rx_pi status register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     CNT_BIN_L        PI counter value for LMS slicer
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_Lr (0x0001d077 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_Lr_SIZE 4

/*
 * This structure should be used to declare and program DSC_RX_PI_CNT_BIN_L.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_Lr_s {
	uint32_t v[1];
	uint32_t dsc_rx_pi_cnt_bin_l[1];
	uint32_t _dsc_rx_pi_cnt_bin_l;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_Lr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_Lr_CLR(r) (r).dsc_rx_pi_cnt_bin_l[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_Lr_SET(r,d) (r).dsc_rx_pi_cnt_bin_l[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_Lr_GET(r) (r).dsc_rx_pi_cnt_bin_l[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_Lr_CNT_BIN_Lf_GET(r) (((r).dsc_rx_pi_cnt_bin_l[0]) & 0xff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_Lr_CNT_BIN_Lf_SET(r,f) (r).dsc_rx_pi_cnt_bin_l[0]=(((r).dsc_rx_pi_cnt_bin_l[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff)) | (0xff << 16)

/*
 * These macros can be used to access DSC_RX_PI_CNT_BIN_L.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DSC_RX_PI_CNT_BIN_Lr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_Lr,(_r._dsc_rx_pi_cnt_bin_l))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DSC_RX_PI_CNT_BIN_Lr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_Lr,(_r._dsc_rx_pi_cnt_bin_l)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DSC_RX_PI_CNT_BIN_Lr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_Lr,(_r._dsc_rx_pi_cnt_bin_l))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DSC_RX_PI_CNT_BIN_Lr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_Lr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_pi_cnt_bin_l))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DSC_RX_PI_CNT_BIN_Lr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_Lr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_pi_cnt_bin_l))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DSC_RX_PI_CNT_BIN_Lr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_Lr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_rx_pi_cnt_bin_l))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_RX_PI_CNT_BIN_Lr BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_Lr
#define DSC_RX_PI_CNT_BIN_Lr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_Lr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_Lr_t DSC_RX_PI_CNT_BIN_Lr_t;
#define DSC_RX_PI_CNT_BIN_Lr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_Lr_CLR
#define DSC_RX_PI_CNT_BIN_Lr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_Lr_SET
#define DSC_RX_PI_CNT_BIN_Lr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_Lr_GET
#define DSC_RX_PI_CNT_BIN_Lr_CNT_BIN_Lf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_Lr_CNT_BIN_Lf_GET
#define DSC_RX_PI_CNT_BIN_Lr_CNT_BIN_Lf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_Lr_CNT_BIN_Lf_SET
#define READ_DSC_RX_PI_CNT_BIN_Lr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DSC_RX_PI_CNT_BIN_Lr
#define WRITE_DSC_RX_PI_CNT_BIN_Lr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DSC_RX_PI_CNT_BIN_Lr
#define MODIFY_DSC_RX_PI_CNT_BIN_Lr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DSC_RX_PI_CNT_BIN_Lr
#define READLN_DSC_RX_PI_CNT_BIN_Lr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DSC_RX_PI_CNT_BIN_Lr
#define WRITELN_DSC_RX_PI_CNT_BIN_Lr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DSC_RX_PI_CNT_BIN_Lr
#define WRITEALL_DSC_RX_PI_CNT_BIN_Lr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DSC_RX_PI_CNT_BIN_Lr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PI_CNT_BIN_Lr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  DSC_CDR_STS_INTEG
 * BLOCKS:   DSC_E
 * REGADDR:  0xd078
 * DEVAD:    1
 * DESC:     cdr status register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     CDR_INTEG_REG    Divide this by 83.886 to get the approximate ppm frequency offset the CDR is tracking. (The CDR must settle first - rx_dsc_lock asserted high).
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_CDR_STS_INTEGr (0x0001d078 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_CDR_STS_INTEGr_SIZE 4

/*
 * This structure should be used to declare and program DSC_CDR_STS_INTEG.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_CDR_STS_INTEGr_s {
	uint32_t v[1];
	uint32_t dsc_cdr_sts_integ[1];
	uint32_t _dsc_cdr_sts_integ;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_CDR_STS_INTEGr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_CDR_STS_INTEGr_CLR(r) (r).dsc_cdr_sts_integ[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_CDR_STS_INTEGr_SET(r,d) (r).dsc_cdr_sts_integ[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_CDR_STS_INTEGr_GET(r) (r).dsc_cdr_sts_integ[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_CDR_STS_INTEGr_CDR_INTEG_REGf_GET(r) (((r).dsc_cdr_sts_integ[0]) & 0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_CDR_STS_INTEGr_CDR_INTEG_REGf_SET(r,f) (r).dsc_cdr_sts_integ[0]=(((r).dsc_cdr_sts_integ[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access DSC_CDR_STS_INTEG.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DSC_CDR_STS_INTEGr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_CDR_STS_INTEGr,(_r._dsc_cdr_sts_integ))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DSC_CDR_STS_INTEGr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_CDR_STS_INTEGr,(_r._dsc_cdr_sts_integ)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DSC_CDR_STS_INTEGr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_CDR_STS_INTEGr,(_r._dsc_cdr_sts_integ))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DSC_CDR_STS_INTEGr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_CDR_STS_INTEGr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_cdr_sts_integ))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DSC_CDR_STS_INTEGr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_CDR_STS_INTEGr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_cdr_sts_integ))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DSC_CDR_STS_INTEGr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_CDR_STS_INTEGr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_cdr_sts_integ))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_CDR_STS_INTEGr BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_CDR_STS_INTEGr
#define DSC_CDR_STS_INTEGr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_CDR_STS_INTEGr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_CDR_STS_INTEGr_t DSC_CDR_STS_INTEGr_t;
#define DSC_CDR_STS_INTEGr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_CDR_STS_INTEGr_CLR
#define DSC_CDR_STS_INTEGr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_CDR_STS_INTEGr_SET
#define DSC_CDR_STS_INTEGr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_CDR_STS_INTEGr_GET
#define DSC_CDR_STS_INTEGr_CDR_INTEG_REGf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_CDR_STS_INTEGr_CDR_INTEG_REGf_GET
#define DSC_CDR_STS_INTEGr_CDR_INTEG_REGf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_CDR_STS_INTEGr_CDR_INTEG_REGf_SET
#define READ_DSC_CDR_STS_INTEGr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DSC_CDR_STS_INTEGr
#define WRITE_DSC_CDR_STS_INTEGr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DSC_CDR_STS_INTEGr
#define MODIFY_DSC_CDR_STS_INTEGr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DSC_CDR_STS_INTEGr
#define READLN_DSC_CDR_STS_INTEGr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DSC_CDR_STS_INTEGr
#define WRITELN_DSC_CDR_STS_INTEGr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DSC_CDR_STS_INTEGr
#define WRITEALL_DSC_CDR_STS_INTEGr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DSC_CDR_STS_INTEGr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_CDR_STS_INTEGr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  DSC_RX_DFE_TAP2_STS
 * BLOCKS:   DSC_E
 * REGADDR:  0xd07b
 * DEVAD:    1
 * DESC:     rx_dfe_tap2_status register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     RXB_DFE_TAP2_STATUS signed 2's complement  +/-15, 1LSB=150mV/64
 *     RXA_DFE_TAP2_STATUS signed 2's complement +/-15, 1LSB=150mV/64
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_STSr (0x0001d07b | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_STSr_SIZE 4

/*
 * This structure should be used to declare and program DSC_RX_DFE_TAP2_STS.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_STSr_s {
	uint32_t v[1];
	uint32_t dsc_rx_dfe_tap2_sts[1];
	uint32_t _dsc_rx_dfe_tap2_sts;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_STSr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_STSr_CLR(r) (r).dsc_rx_dfe_tap2_sts[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_STSr_SET(r,d) (r).dsc_rx_dfe_tap2_sts[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_STSr_GET(r) (r).dsc_rx_dfe_tap2_sts[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_STSr_RXA_DFE_TAP2_STATUSf_GET(r) ((((r).dsc_rx_dfe_tap2_sts[0]) >> 6) & 0x3f)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_STSr_RXA_DFE_TAP2_STATUSf_SET(r,f) (r).dsc_rx_dfe_tap2_sts[0]=(((r).dsc_rx_dfe_tap2_sts[0] & ~((uint32_t)0x3f << 6)) | ((((uint32_t)f) & 0x3f) << 6)) | (63 << (16 + 6))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_STSr_RXB_DFE_TAP2_STATUSf_GET(r) (((r).dsc_rx_dfe_tap2_sts[0]) & 0x3f)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_STSr_RXB_DFE_TAP2_STATUSf_SET(r,f) (r).dsc_rx_dfe_tap2_sts[0]=(((r).dsc_rx_dfe_tap2_sts[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f)) | (0x3f << 16)

/*
 * These macros can be used to access DSC_RX_DFE_TAP2_STS.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DSC_RX_DFE_TAP2_STSr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_STSr,(_r._dsc_rx_dfe_tap2_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DSC_RX_DFE_TAP2_STSr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_STSr,(_r._dsc_rx_dfe_tap2_sts)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DSC_RX_DFE_TAP2_STSr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_STSr,(_r._dsc_rx_dfe_tap2_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DSC_RX_DFE_TAP2_STSr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_dfe_tap2_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DSC_RX_DFE_TAP2_STSr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_dfe_tap2_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DSC_RX_DFE_TAP2_STSr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_STSr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_rx_dfe_tap2_sts))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_RX_DFE_TAP2_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_STSr
#define DSC_RX_DFE_TAP2_STSr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_STSr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_STSr_t DSC_RX_DFE_TAP2_STSr_t;
#define DSC_RX_DFE_TAP2_STSr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_STSr_CLR
#define DSC_RX_DFE_TAP2_STSr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_STSr_SET
#define DSC_RX_DFE_TAP2_STSr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_STSr_GET
#define DSC_RX_DFE_TAP2_STSr_RXA_DFE_TAP2_STATUSf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_STSr_RXA_DFE_TAP2_STATUSf_GET
#define DSC_RX_DFE_TAP2_STSr_RXA_DFE_TAP2_STATUSf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_STSr_RXA_DFE_TAP2_STATUSf_SET
#define DSC_RX_DFE_TAP2_STSr_RXB_DFE_TAP2_STATUSf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_STSr_RXB_DFE_TAP2_STATUSf_GET
#define DSC_RX_DFE_TAP2_STSr_RXB_DFE_TAP2_STATUSf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_STSr_RXB_DFE_TAP2_STATUSf_SET
#define READ_DSC_RX_DFE_TAP2_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DSC_RX_DFE_TAP2_STSr
#define WRITE_DSC_RX_DFE_TAP2_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DSC_RX_DFE_TAP2_STSr
#define MODIFY_DSC_RX_DFE_TAP2_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DSC_RX_DFE_TAP2_STSr
#define READLN_DSC_RX_DFE_TAP2_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DSC_RX_DFE_TAP2_STSr
#define WRITELN_DSC_RX_DFE_TAP2_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DSC_RX_DFE_TAP2_STSr
#define WRITEALL_DSC_RX_DFE_TAP2_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DSC_RX_DFE_TAP2_STSr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_STSr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  DSC_RX_DFE_TAP2_3_STS
 * BLOCKS:   DSC_E
 * REGADDR:  0xd07c
 * DEVAD:    1
 * DESC:     rx_dfe_tap2_3_status register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     RXB_DFE_TAP3_STATUS signed 2's complement +/-15, 1LSB=150mV/64
 *     RXA_DFE_TAP3_STATUS signed 2's complement +/-15, 1LSB=150mV/64
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_3_STSr (0x0001d07c | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_3_STSr_SIZE 4

/*
 * This structure should be used to declare and program DSC_RX_DFE_TAP2_3_STS.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_3_STSr_s {
	uint32_t v[1];
	uint32_t dsc_rx_dfe_tap2_3_sts[1];
	uint32_t _dsc_rx_dfe_tap2_3_sts;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_3_STSr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_3_STSr_CLR(r) (r).dsc_rx_dfe_tap2_3_sts[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_3_STSr_SET(r,d) (r).dsc_rx_dfe_tap2_3_sts[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_3_STSr_GET(r) (r).dsc_rx_dfe_tap2_3_sts[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_3_STSr_RXA_DFE_TAP3_STATUSf_GET(r) ((((r).dsc_rx_dfe_tap2_3_sts[0]) >> 5) & 0x1f)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_3_STSr_RXA_DFE_TAP3_STATUSf_SET(r,f) (r).dsc_rx_dfe_tap2_3_sts[0]=(((r).dsc_rx_dfe_tap2_3_sts[0] & ~((uint32_t)0x1f << 5)) | ((((uint32_t)f) & 0x1f) << 5)) | (31 << (16 + 5))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_3_STSr_RXB_DFE_TAP3_STATUSf_GET(r) (((r).dsc_rx_dfe_tap2_3_sts[0]) & 0x1f)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_3_STSr_RXB_DFE_TAP3_STATUSf_SET(r,f) (r).dsc_rx_dfe_tap2_3_sts[0]=(((r).dsc_rx_dfe_tap2_3_sts[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f)) | (0x1f << 16)

/*
 * These macros can be used to access DSC_RX_DFE_TAP2_3_STS.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DSC_RX_DFE_TAP2_3_STSr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_3_STSr,(_r._dsc_rx_dfe_tap2_3_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DSC_RX_DFE_TAP2_3_STSr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_3_STSr,(_r._dsc_rx_dfe_tap2_3_sts)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DSC_RX_DFE_TAP2_3_STSr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_3_STSr,(_r._dsc_rx_dfe_tap2_3_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DSC_RX_DFE_TAP2_3_STSr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_3_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_dfe_tap2_3_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DSC_RX_DFE_TAP2_3_STSr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_3_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_dfe_tap2_3_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DSC_RX_DFE_TAP2_3_STSr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_3_STSr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_rx_dfe_tap2_3_sts))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_RX_DFE_TAP2_3_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_3_STSr
#define DSC_RX_DFE_TAP2_3_STSr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_3_STSr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_3_STSr_t DSC_RX_DFE_TAP2_3_STSr_t;
#define DSC_RX_DFE_TAP2_3_STSr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_3_STSr_CLR
#define DSC_RX_DFE_TAP2_3_STSr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_3_STSr_SET
#define DSC_RX_DFE_TAP2_3_STSr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_3_STSr_GET
#define DSC_RX_DFE_TAP2_3_STSr_RXA_DFE_TAP3_STATUSf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_3_STSr_RXA_DFE_TAP3_STATUSf_GET
#define DSC_RX_DFE_TAP2_3_STSr_RXA_DFE_TAP3_STATUSf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_3_STSr_RXA_DFE_TAP3_STATUSf_SET
#define DSC_RX_DFE_TAP2_3_STSr_RXB_DFE_TAP3_STATUSf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_3_STSr_RXB_DFE_TAP3_STATUSf_GET
#define DSC_RX_DFE_TAP2_3_STSr_RXB_DFE_TAP3_STATUSf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_3_STSr_RXB_DFE_TAP3_STATUSf_SET
#define READ_DSC_RX_DFE_TAP2_3_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DSC_RX_DFE_TAP2_3_STSr
#define WRITE_DSC_RX_DFE_TAP2_3_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DSC_RX_DFE_TAP2_3_STSr
#define MODIFY_DSC_RX_DFE_TAP2_3_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DSC_RX_DFE_TAP2_3_STSr
#define READLN_DSC_RX_DFE_TAP2_3_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DSC_RX_DFE_TAP2_3_STSr
#define WRITELN_DSC_RX_DFE_TAP2_3_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DSC_RX_DFE_TAP2_3_STSr
#define WRITEALL_DSC_RX_DFE_TAP2_3_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DSC_RX_DFE_TAP2_3_STSr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_3_STSr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  LNKTRNUT_STS0
 * BLOCKS:   LINKTRN_USER_TX
 * REGADDR:  0xd096
 * DEVAD:    1
 * DESC:     linktrn Status 0 Register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     LINKTRN_LOCAL_RX_READY Set to TRUE (1'b1) by the FSM when the remote transmitand local equalizers have been optimized and normal datatransmission may commence; set to FALSE (1'b0) otherwise.
 *     LINKTRN_TRAINING_FSM_SIGNAL_DETECT 1 - linktrn is in SEND_DATA state0 - linktrn is in training or reset state
 *     LINKTRN_XMT_COEFF_UPDATE_PARITY This fields indicates the parity of the current value of thelinktrn_xmt_update_page register field. This field can beused to adjust the parity of the Coeffcient Update field beforeit is sent to the link partner.0 - even parity - linktrn_xmt_update_page field has even number of 1's1 - odd parity  - linktrn_xmt_update_page field has odd number of 1'slinktrn_ignore_xmt_reg_value can be set to 1 stop the contents oflinktrn_xmt_update_page being sent while parity is being adjusted
 *     LINKTRN_XMT_STATUS_REPORT_PARITY This fields indicates the parity of the current value of thelinktrn_ld_xmt_status_page register field. This field can beused to adjust the parity of the Status page field beforeit is sent to the link partner.0 - even parity - linktrn_ld_xmt_status_page field has even number of 1's1 - odd parity  - linktrn_ld_xmt_status_page field has odd number of 1'slinktrn_ignore_xmt_reg_value can be set to 1 stop the contents oflinktrn_ld_xmt_status_page being sent while parity is being adjusted
 *     LINKTRN_SM_CURRENT_STATE Training State machine current state0 = ST_INITIALIZE1 = ST_SEND_TRAINING2 = ST_TRAIN_LOCAL3 = ST_TRAIN_REMOTE4 = ST_LINK_READY5 = ST_SEND_DATA6 = ST_TRAINING_FAILURE7 = ST_TIMEOUT
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNUT_STS0r (0x0001d096 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNUT_STS0r_SIZE 4

/*
 * This structure should be used to declare and program LNKTRNUT_STS0.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNUT_STS0r_s {
	uint32_t v[1];
	uint32_t lnktrnut_sts0[1];
	uint32_t _lnktrnut_sts0;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNUT_STS0r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNUT_STS0r_CLR(r) (r).lnktrnut_sts0[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNUT_STS0r_SET(r,d) (r).lnktrnut_sts0[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNUT_STS0r_GET(r) (r).lnktrnut_sts0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNUT_STS0r_LINKTRN_SM_CURRENT_STATEf_GET(r) ((((r).lnktrnut_sts0[0]) >> 12) & 0x7)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNUT_STS0r_LINKTRN_SM_CURRENT_STATEf_SET(r,f) (r).lnktrnut_sts0[0]=(((r).lnktrnut_sts0[0] & ~((uint32_t)0x7 << 12)) | ((((uint32_t)f) & 0x7) << 12)) | (7 << (16 + 12))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNUT_STS0r_LINKTRN_XMT_STATUS_REPORT_PARITYf_GET(r) ((((r).lnktrnut_sts0[0]) >> 5) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNUT_STS0r_LINKTRN_XMT_STATUS_REPORT_PARITYf_SET(r,f) (r).lnktrnut_sts0[0]=(((r).lnktrnut_sts0[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNUT_STS0r_LINKTRN_XMT_COEFF_UPDATE_PARITYf_GET(r) ((((r).lnktrnut_sts0[0]) >> 4) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNUT_STS0r_LINKTRN_XMT_COEFF_UPDATE_PARITYf_SET(r,f) (r).lnktrnut_sts0[0]=(((r).lnktrnut_sts0[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNUT_STS0r_LINKTRN_TRAINING_FSM_SIGNAL_DETECTf_GET(r) ((((r).lnktrnut_sts0[0]) >> 1) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNUT_STS0r_LINKTRN_TRAINING_FSM_SIGNAL_DETECTf_SET(r,f) (r).lnktrnut_sts0[0]=(((r).lnktrnut_sts0[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNUT_STS0r_LINKTRN_LOCAL_RX_READYf_GET(r) (((r).lnktrnut_sts0[0]) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNUT_STS0r_LINKTRN_LOCAL_RX_READYf_SET(r,f) (r).lnktrnut_sts0[0]=(((r).lnktrnut_sts0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access LNKTRNUT_STS0.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_LNKTRNUT_STS0r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNUT_STS0r,(_r._lnktrnut_sts0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_LNKTRNUT_STS0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNUT_STS0r,(_r._lnktrnut_sts0)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_LNKTRNUT_STS0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNUT_STS0r,(_r._lnktrnut_sts0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_LNKTRNUT_STS0r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNUT_STS0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._lnktrnut_sts0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_LNKTRNUT_STS0r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNUT_STS0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._lnktrnut_sts0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_LNKTRNUT_STS0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNUT_STS0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._lnktrnut_sts0))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define LNKTRNUT_STS0r BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNUT_STS0r
#define LNKTRNUT_STS0r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNUT_STS0r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNUT_STS0r_t LNKTRNUT_STS0r_t;
#define LNKTRNUT_STS0r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNUT_STS0r_CLR
#define LNKTRNUT_STS0r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNUT_STS0r_SET
#define LNKTRNUT_STS0r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNUT_STS0r_GET
#define LNKTRNUT_STS0r_LINKTRN_SM_CURRENT_STATEf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNUT_STS0r_LINKTRN_SM_CURRENT_STATEf_GET
#define LNKTRNUT_STS0r_LINKTRN_SM_CURRENT_STATEf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNUT_STS0r_LINKTRN_SM_CURRENT_STATEf_SET
#define LNKTRNUT_STS0r_LINKTRN_XMT_STATUS_REPORT_PARITYf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNUT_STS0r_LINKTRN_XMT_STATUS_REPORT_PARITYf_GET
#define LNKTRNUT_STS0r_LINKTRN_XMT_STATUS_REPORT_PARITYf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNUT_STS0r_LINKTRN_XMT_STATUS_REPORT_PARITYf_SET
#define LNKTRNUT_STS0r_LINKTRN_XMT_COEFF_UPDATE_PARITYf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNUT_STS0r_LINKTRN_XMT_COEFF_UPDATE_PARITYf_GET
#define LNKTRNUT_STS0r_LINKTRN_XMT_COEFF_UPDATE_PARITYf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNUT_STS0r_LINKTRN_XMT_COEFF_UPDATE_PARITYf_SET
#define LNKTRNUT_STS0r_LINKTRN_TRAINING_FSM_SIGNAL_DETECTf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNUT_STS0r_LINKTRN_TRAINING_FSM_SIGNAL_DETECTf_GET
#define LNKTRNUT_STS0r_LINKTRN_TRAINING_FSM_SIGNAL_DETECTf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNUT_STS0r_LINKTRN_TRAINING_FSM_SIGNAL_DETECTf_SET
#define LNKTRNUT_STS0r_LINKTRN_LOCAL_RX_READYf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNUT_STS0r_LINKTRN_LOCAL_RX_READYf_GET
#define LNKTRNUT_STS0r_LINKTRN_LOCAL_RX_READYf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNUT_STS0r_LINKTRN_LOCAL_RX_READYf_SET
#define READ_LNKTRNUT_STS0r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_LNKTRNUT_STS0r
#define WRITE_LNKTRNUT_STS0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_LNKTRNUT_STS0r
#define MODIFY_LNKTRNUT_STS0r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_LNKTRNUT_STS0r
#define READLN_LNKTRNUT_STS0r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_LNKTRNUT_STS0r
#define WRITELN_LNKTRNUT_STS0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_LNKTRNUT_STS0r
#define WRITEALL_LNKTRNUT_STS0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_LNKTRNUT_STS0r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_LNKTRNUT_STS0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  TX_PI_CTL0
 * BLOCKS:   TX_PI
 * REGADDR:  0xd0a0
 * DEVAD:    1
 * DESC:     TX Phase Interpolator Control 0
 * RESETVAL: 0x7000 (28672)
 * ACCESS:   R/W
 * FIELDS:
 *     TX_PI_EN         Transmit Phase Interpolator Enable. If 1'b0 will gate off the TX PI clock and also freeze the PI code.
 *     TX_PI_JITTER_FILTER_EN This enables the IIR filter for the phase_sum_val logic from the CDR ( or external CDR in case of Repeater ) .
 *     TX_PI_EXT_CTRL_EN Enable for the phase error (inc/dec) from the remote loopback ( or HS Phase FIFO in case of Repeater )
 *     TX_PI_FREQ_OVERRIDE_EN Enable for the frequency override mode. It should be 1'b1 for fixed frequency and jitter generation modes.
 *     TX_PI_SJ_GEN_EN  Sinusoidal Jitter (SJ) Enable. This has priority over tx_pi_ssc_gen_en if both are enabled simultaneously.
 *     TX_PI_SSC_GEN_EN Spread Spectrum Jitter (SSC) Enable. This has priority over tx_pi_ssc_gen_en if both are enabled simultaneously.
 *     TX_PI_JIT_SSC_FREQ_MODE SSJ Mode Select:1'b1 : 10G SSC mode and 1'b0: 6G SSC mode
 *     TX_PI_FIRST_ORDER_BWSEL_INTEG First order bandwidth control.3'd0 - 110 KHz3'd1 - 220 KHz3'd2 - 440 KHz3'd3 - 880 KHz3'd4 - 1.7 MHz>= 3'd5 is unused and reserved for future use.
 *     TX_PI_SECOND_ORDER_BWSEL_INTEG Second order bandwidth control. Valid values are 0, 1, 2 and 3.
 *     TX_PI_EXT_PHASE_BWSEL_INTEG External Phase bandwidth control. Valid values are 0 to 7.
 *     TX_PI_SECOND_ORDER_LOOP_EN 2nd Order Loop Enable. 1'b1 will enable the 2nd order loop of the IIR filter. 1'b0 will reset the all the flops related to the 2nd order loop.This bit is only valid when tx_pi_jitter_filter_en is set to 1'b1.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL0r (0x0001d0a0 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL0r_SIZE 4

/*
 * This structure should be used to declare and program TX_PI_CTL0.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL0r_s {
	uint32_t v[1];
	uint32_t tx_pi_ctl0[1];
	uint32_t _tx_pi_ctl0;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL0r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL0r_CLR(r) (r).tx_pi_ctl0[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL0r_SET(r,d) (r).tx_pi_ctl0[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL0r_GET(r) (r).tx_pi_ctl0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL0r_TX_PI_SECOND_ORDER_LOOP_ENf_GET(r) ((((r).tx_pi_ctl0[0]) >> 15) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL0r_TX_PI_SECOND_ORDER_LOOP_ENf_SET(r,f) (r).tx_pi_ctl0[0]=(((r).tx_pi_ctl0[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL0r_TX_PI_EXT_PHASE_BWSEL_INTEGf_GET(r) ((((r).tx_pi_ctl0[0]) >> 12) & 0x7)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL0r_TX_PI_EXT_PHASE_BWSEL_INTEGf_SET(r,f) (r).tx_pi_ctl0[0]=(((r).tx_pi_ctl0[0] & ~((uint32_t)0x7 << 12)) | ((((uint32_t)f) & 0x7) << 12)) | (7 << (16 + 12))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL0r_TX_PI_SECOND_ORDER_BWSEL_INTEGf_GET(r) ((((r).tx_pi_ctl0[0]) >> 10) & 0x3)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL0r_TX_PI_SECOND_ORDER_BWSEL_INTEGf_SET(r,f) (r).tx_pi_ctl0[0]=(((r).tx_pi_ctl0[0] & ~((uint32_t)0x3 << 10)) | ((((uint32_t)f) & 0x3) << 10)) | (3 << (16 + 10))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL0r_TX_PI_FIRST_ORDER_BWSEL_INTEGf_GET(r) ((((r).tx_pi_ctl0[0]) >> 7) & 0x7)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL0r_TX_PI_FIRST_ORDER_BWSEL_INTEGf_SET(r,f) (r).tx_pi_ctl0[0]=(((r).tx_pi_ctl0[0] & ~((uint32_t)0x7 << 7)) | ((((uint32_t)f) & 0x7) << 7)) | (7 << (16 + 7))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL0r_TX_PI_JIT_SSC_FREQ_MODEf_GET(r) ((((r).tx_pi_ctl0[0]) >> 6) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL0r_TX_PI_JIT_SSC_FREQ_MODEf_SET(r,f) (r).tx_pi_ctl0[0]=(((r).tx_pi_ctl0[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL0r_TX_PI_SSC_GEN_ENf_GET(r) ((((r).tx_pi_ctl0[0]) >> 5) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL0r_TX_PI_SSC_GEN_ENf_SET(r,f) (r).tx_pi_ctl0[0]=(((r).tx_pi_ctl0[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL0r_TX_PI_SJ_GEN_ENf_GET(r) ((((r).tx_pi_ctl0[0]) >> 4) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL0r_TX_PI_SJ_GEN_ENf_SET(r,f) (r).tx_pi_ctl0[0]=(((r).tx_pi_ctl0[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL0r_TX_PI_FREQ_OVERRIDE_ENf_GET(r) ((((r).tx_pi_ctl0[0]) >> 3) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL0r_TX_PI_FREQ_OVERRIDE_ENf_SET(r,f) (r).tx_pi_ctl0[0]=(((r).tx_pi_ctl0[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL0r_TX_PI_EXT_CTRL_ENf_GET(r) ((((r).tx_pi_ctl0[0]) >> 2) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL0r_TX_PI_EXT_CTRL_ENf_SET(r,f) (r).tx_pi_ctl0[0]=(((r).tx_pi_ctl0[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL0r_TX_PI_JITTER_FILTER_ENf_GET(r) ((((r).tx_pi_ctl0[0]) >> 1) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL0r_TX_PI_JITTER_FILTER_ENf_SET(r,f) (r).tx_pi_ctl0[0]=(((r).tx_pi_ctl0[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL0r_TX_PI_ENf_GET(r) (((r).tx_pi_ctl0[0]) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL0r_TX_PI_ENf_SET(r,f) (r).tx_pi_ctl0[0]=(((r).tx_pi_ctl0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access TX_PI_CTL0.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TX_PI_CTL0r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL0r,(_r._tx_pi_ctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TX_PI_CTL0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL0r,(_r._tx_pi_ctl0)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TX_PI_CTL0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL0r,(_r._tx_pi_ctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TX_PI_CTL0r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_pi_ctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TX_PI_CTL0r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_pi_ctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TX_PI_CTL0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tx_pi_ctl0))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TX_PI_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL0r
#define TX_PI_CTL0r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL0r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL0r_t TX_PI_CTL0r_t;
#define TX_PI_CTL0r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL0r_CLR
#define TX_PI_CTL0r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL0r_SET
#define TX_PI_CTL0r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL0r_GET
#define TX_PI_CTL0r_TX_PI_SECOND_ORDER_LOOP_ENf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL0r_TX_PI_SECOND_ORDER_LOOP_ENf_GET
#define TX_PI_CTL0r_TX_PI_SECOND_ORDER_LOOP_ENf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL0r_TX_PI_SECOND_ORDER_LOOP_ENf_SET
#define TX_PI_CTL0r_TX_PI_EXT_PHASE_BWSEL_INTEGf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL0r_TX_PI_EXT_PHASE_BWSEL_INTEGf_GET
#define TX_PI_CTL0r_TX_PI_EXT_PHASE_BWSEL_INTEGf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL0r_TX_PI_EXT_PHASE_BWSEL_INTEGf_SET
#define TX_PI_CTL0r_TX_PI_SECOND_ORDER_BWSEL_INTEGf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL0r_TX_PI_SECOND_ORDER_BWSEL_INTEGf_GET
#define TX_PI_CTL0r_TX_PI_SECOND_ORDER_BWSEL_INTEGf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL0r_TX_PI_SECOND_ORDER_BWSEL_INTEGf_SET
#define TX_PI_CTL0r_TX_PI_FIRST_ORDER_BWSEL_INTEGf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL0r_TX_PI_FIRST_ORDER_BWSEL_INTEGf_GET
#define TX_PI_CTL0r_TX_PI_FIRST_ORDER_BWSEL_INTEGf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL0r_TX_PI_FIRST_ORDER_BWSEL_INTEGf_SET
#define TX_PI_CTL0r_TX_PI_JIT_SSC_FREQ_MODEf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL0r_TX_PI_JIT_SSC_FREQ_MODEf_GET
#define TX_PI_CTL0r_TX_PI_JIT_SSC_FREQ_MODEf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL0r_TX_PI_JIT_SSC_FREQ_MODEf_SET
#define TX_PI_CTL0r_TX_PI_SSC_GEN_ENf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL0r_TX_PI_SSC_GEN_ENf_GET
#define TX_PI_CTL0r_TX_PI_SSC_GEN_ENf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL0r_TX_PI_SSC_GEN_ENf_SET
#define TX_PI_CTL0r_TX_PI_SJ_GEN_ENf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL0r_TX_PI_SJ_GEN_ENf_GET
#define TX_PI_CTL0r_TX_PI_SJ_GEN_ENf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL0r_TX_PI_SJ_GEN_ENf_SET
#define TX_PI_CTL0r_TX_PI_FREQ_OVERRIDE_ENf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL0r_TX_PI_FREQ_OVERRIDE_ENf_GET
#define TX_PI_CTL0r_TX_PI_FREQ_OVERRIDE_ENf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL0r_TX_PI_FREQ_OVERRIDE_ENf_SET
#define TX_PI_CTL0r_TX_PI_EXT_CTRL_ENf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL0r_TX_PI_EXT_CTRL_ENf_GET
#define TX_PI_CTL0r_TX_PI_EXT_CTRL_ENf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL0r_TX_PI_EXT_CTRL_ENf_SET
#define TX_PI_CTL0r_TX_PI_JITTER_FILTER_ENf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL0r_TX_PI_JITTER_FILTER_ENf_GET
#define TX_PI_CTL0r_TX_PI_JITTER_FILTER_ENf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL0r_TX_PI_JITTER_FILTER_ENf_SET
#define TX_PI_CTL0r_TX_PI_ENf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL0r_TX_PI_ENf_GET
#define TX_PI_CTL0r_TX_PI_ENf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL0r_TX_PI_ENf_SET
#define READ_TX_PI_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TX_PI_CTL0r
#define WRITE_TX_PI_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TX_PI_CTL0r
#define MODIFY_TX_PI_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TX_PI_CTL0r
#define READLN_TX_PI_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TX_PI_CTL0r
#define WRITELN_TX_PI_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TX_PI_CTL0r
#define WRITEALL_TX_PI_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TX_PI_CTL0r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  TX_PI_CTL1
 * BLOCKS:   TX_PI
 * REGADDR:  0xd0a1
 * DEVAD:    1
 * DESC:     TX Phase Interpolator Control 1
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     TX_PI_FREQ_OVERRIDE_VAL Fixed Frequncy Override Value: Valid values are -8192 to +8192. Register tx_pi_freq_override_en should be 1'b1 to enable the Fixed Frequncy Override mode.+8192 (-8192) value in this register will result into 1 TX PI phase inc (dec) every 20T tclk. This results into (1/64 * 1/20)UI phase inc (or dec) per UI = 781.25(-781.25) ppm. So 1 ppm = 10.486 value.If tx_pi_jit_gen_en is set to 1'b1 then this register provides initilization value for Jitter Gen Integ Reg. Valid values in jitter generation mode are -8192 to +8191
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL1r (0x0001d0a1 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL1r_SIZE 4

/*
 * This structure should be used to declare and program TX_PI_CTL1.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL1r_s {
	uint32_t v[1];
	uint32_t tx_pi_ctl1[1];
	uint32_t _tx_pi_ctl1;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL1r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL1r_CLR(r) (r).tx_pi_ctl1[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL1r_SET(r,d) (r).tx_pi_ctl1[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL1r_GET(r) (r).tx_pi_ctl1[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL1r_TX_PI_FREQ_OVERRIDE_VALf_GET(r) (((r).tx_pi_ctl1[0]) & 0x7fff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL1r_TX_PI_FREQ_OVERRIDE_VALf_SET(r,f) (r).tx_pi_ctl1[0]=(((r).tx_pi_ctl1[0] & ~((uint32_t)0x7fff)) | (((uint32_t)f) & 0x7fff)) | (0x7fff << 16)

/*
 * These macros can be used to access TX_PI_CTL1.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TX_PI_CTL1r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL1r,(_r._tx_pi_ctl1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TX_PI_CTL1r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL1r,(_r._tx_pi_ctl1)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TX_PI_CTL1r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL1r,(_r._tx_pi_ctl1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TX_PI_CTL1r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_pi_ctl1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TX_PI_CTL1r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_pi_ctl1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TX_PI_CTL1r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL1r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tx_pi_ctl1))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TX_PI_CTL1r BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL1r
#define TX_PI_CTL1r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL1r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL1r_t TX_PI_CTL1r_t;
#define TX_PI_CTL1r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL1r_CLR
#define TX_PI_CTL1r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL1r_SET
#define TX_PI_CTL1r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL1r_GET
#define TX_PI_CTL1r_TX_PI_FREQ_OVERRIDE_VALf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL1r_TX_PI_FREQ_OVERRIDE_VALf_GET
#define TX_PI_CTL1r_TX_PI_FREQ_OVERRIDE_VALf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL1r_TX_PI_FREQ_OVERRIDE_VALf_SET
#define READ_TX_PI_CTL1r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TX_PI_CTL1r
#define WRITE_TX_PI_CTL1r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TX_PI_CTL1r
#define MODIFY_TX_PI_CTL1r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TX_PI_CTL1r
#define READLN_TX_PI_CTL1r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TX_PI_CTL1r
#define WRITELN_TX_PI_CTL1r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TX_PI_CTL1r
#define WRITEALL_TX_PI_CTL1r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TX_PI_CTL1r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL1r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  TX_PI_CTL2
 * BLOCKS:   TX_PI
 * REGADDR:  0xd0a2
 * DEVAD:    1
 * DESC:     TX Phase Interpolator Control 2
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     TX_PI_JIT_FREQ_IDX Jitter Generator Frequency Index. Valid values are from 0 to 63. Each value maps to a table into the spec which then provides various Jitter generator parameters.In SJ  mode: It provides ndiv, Nsj (or Nsj_div_ndiv), sj_gain1 and sj_gain2. Refer Jitter Generator spec for the table details.In SSC mode: It provides Nssc.                                               Refer Jitter Generator spec for the table details.tx_pi_jit_freq_idx should be changed while both tx_pi_sj_gen_en and tx_pi_ssc_gen_en are disabled.
 *     TX_PI_JIT_AMP    Jitter Generator Amplification Factor. Valid values are 0 to a max value which is determined by tx_pi_jit_freq_idx settings.For a given tx_pi_jit_freq_idx setting, tx_pi_jit_amp can be changed from current value to a new value (should be lower than the max amp value based on tx_pi_jit_freq_idx setting) while tx_pi_sj_gen_en is enabled or disabled.Allow atleast few SJ waveform duration (atleast 1ms) between tx_pi_jit_amp changes.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL2r (0x0001d0a2 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL2r_SIZE 4

/*
 * This structure should be used to declare and program TX_PI_CTL2.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL2r_s {
	uint32_t v[1];
	uint32_t tx_pi_ctl2[1];
	uint32_t _tx_pi_ctl2;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL2r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL2r_CLR(r) (r).tx_pi_ctl2[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL2r_SET(r,d) (r).tx_pi_ctl2[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL2r_GET(r) (r).tx_pi_ctl2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL2r_TX_PI_JIT_AMPf_GET(r) ((((r).tx_pi_ctl2[0]) >> 8) & 0x3f)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL2r_TX_PI_JIT_AMPf_SET(r,f) (r).tx_pi_ctl2[0]=(((r).tx_pi_ctl2[0] & ~((uint32_t)0x3f << 8)) | ((((uint32_t)f) & 0x3f) << 8)) | (63 << (16 + 8))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL2r_TX_PI_JIT_FREQ_IDXf_GET(r) (((r).tx_pi_ctl2[0]) & 0x3f)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL2r_TX_PI_JIT_FREQ_IDXf_SET(r,f) (r).tx_pi_ctl2[0]=(((r).tx_pi_ctl2[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f)) | (0x3f << 16)

/*
 * These macros can be used to access TX_PI_CTL2.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TX_PI_CTL2r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL2r,(_r._tx_pi_ctl2))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TX_PI_CTL2r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL2r,(_r._tx_pi_ctl2)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TX_PI_CTL2r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL2r,(_r._tx_pi_ctl2))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TX_PI_CTL2r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_pi_ctl2))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TX_PI_CTL2r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_pi_ctl2))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TX_PI_CTL2r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tx_pi_ctl2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TX_PI_CTL2r BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL2r
#define TX_PI_CTL2r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL2r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL2r_t TX_PI_CTL2r_t;
#define TX_PI_CTL2r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL2r_CLR
#define TX_PI_CTL2r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL2r_SET
#define TX_PI_CTL2r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL2r_GET
#define TX_PI_CTL2r_TX_PI_JIT_AMPf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL2r_TX_PI_JIT_AMPf_GET
#define TX_PI_CTL2r_TX_PI_JIT_AMPf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL2r_TX_PI_JIT_AMPf_SET
#define TX_PI_CTL2r_TX_PI_JIT_FREQ_IDXf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL2r_TX_PI_JIT_FREQ_IDXf_GET
#define TX_PI_CTL2r_TX_PI_JIT_FREQ_IDXf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL2r_TX_PI_JIT_FREQ_IDXf_SET
#define READ_TX_PI_CTL2r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TX_PI_CTL2r
#define WRITE_TX_PI_CTL2r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TX_PI_CTL2r
#define MODIFY_TX_PI_CTL2r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TX_PI_CTL2r
#define READLN_TX_PI_CTL2r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TX_PI_CTL2r
#define WRITELN_TX_PI_CTL2r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TX_PI_CTL2r
#define WRITEALL_TX_PI_CTL2r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TX_PI_CTL2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  TX_PI_CTL5
 * BLOCKS:   TX_PI
 * REGADDR:  0xd0a5
 * DEVAD:    1
 * DESC:     TX Phase Interpolator Control 5
 * RESETVAL: 0x80 (128)
 * ACCESS:   R/W
 * FIELDS:
 *     TX_PI_HS_FIFO_PHSERR_INVERT 1'b1: Inverts the hs_fifo_phserr[4:0] to invert the meaning of inc/dec from hs_fifo_phserr[4:0]. When this bit is 1'b0, 1'b1 is increment and 1'b0 is decrement.
 *     TX_PI_EXT_PD_SEL Selects the source of the Phase Detector inc/dec information.1'b1: Select external PD path irrespective of rg_tx_pi_repeater_mode_en1'b0: Select PD path based on rg_tx_pi_repeater_mode_en
 *     TX_PI_HS_FIFO_PHSERR_SEL Selects the source of the Phase Detector inc/dec information. tx_pi_ext_pd_sel has higher priority so it should be 1'b0 for tx_pi_hs_fifo_phserr_sel to select.1'b1: hs_fifo_phserr[4] from the PD inside AFE for TCA irrespective of rg_tx_pi_repeater_mode_en.1'b0: Select PD path based on rg_tx_pi_repeater_mode_en.
 *     TX_PI_EXT_PHASE_STEP_CNT_INVERT 1'b1 : invert pmd_tx_pi_ext_phase_step_cnt such that -x will become +x and vice-versa and 0 will remain 0.It is only valid when tx_pi_ext_phase_step_cnt_sel OR tx_pi_ext_pd_sel bits are 1'b1.
 *     TX_PI_EXT_PHASE_STEP_CNT_SEL 1'b1 : will select the pmd_tx_pi_ext_phase_step_cnt pin by controlling the tx_pi final inc/dec complete bypass mux .If tx_pi_jitter_filter_en OR tx_pi_freq_override_en OR tx_pi_ext_ctrl_en reg fields are enabled then final mux will automatically switch to the normal tx_pi modeas if tx_pi_ext_phase_step_cnt_sel is 1'b0. Once all these fields are cleared then it will switch back to the pmd_tx_pi_ext_pd_inc/dec pin control mode if tx_pi_ext_phase_step_cnt_sel is 1.
 *     TX_PI_EXT_PHASE_STEP_CNT_FULL_BYPASS 1'b1 : will select the pmd_tx_pi_ext_phase_step_cnt pin by controlling the tx_pi final inc/dec full bypass mux . Only have effect when tx_pi_ext_phase_step_cnt_sel = 1.1'b0 : pmd_tx_pi_ext_phase_step_cnt will go through the dsm2 filter
 *     AFE_TX_FIFO_RESETB 1'b0: will assert the reset pin tx_fifo_resetb to 1'b0.1'b1: Once this bit is written to 1'b1 then phase error (bit 4) from FIFO is looked for 2 transitions and then reset is de-asserted to the Phase FIFO.
 *     AFE_TX_FIFO_RESETB_FRC 1'b0: Normal mode where reset pin tx_fifo_resetb is controlled as per the description of the register afe_tx_fifo_resetb.1'b1: force the reset pin tx_fifo_resetb to value indicated in the register afe_tx_fifo_resetb.
 *     TX_PI_PD_BYPASS_FLT 1'b1 will enable filter bypass for inc/dec indication from all sources to get a quicker phase locking time.
 *     TX_PI_PD_BYPASS_VCO 1'b1 will enable filter and vco bypass for inc/dec indication from all sources to get a quicker phase locking time.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL5r (0x0001d0a5 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL5r_SIZE 4

/*
 * This structure should be used to declare and program TX_PI_CTL5.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL5r_s {
	uint32_t v[1];
	uint32_t tx_pi_ctl5[1];
	uint32_t _tx_pi_ctl5;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL5r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL5r_CLR(r) (r).tx_pi_ctl5[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL5r_SET(r,d) (r).tx_pi_ctl5[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL5r_GET(r) (r).tx_pi_ctl5[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL5r_TX_PI_PD_BYPASS_VCOf_GET(r) ((((r).tx_pi_ctl5[0]) >> 11) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL5r_TX_PI_PD_BYPASS_VCOf_SET(r,f) (r).tx_pi_ctl5[0]=(((r).tx_pi_ctl5[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11)) | (1 << (16 + 11))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL5r_TX_PI_PD_BYPASS_FLTf_GET(r) ((((r).tx_pi_ctl5[0]) >> 10) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL5r_TX_PI_PD_BYPASS_FLTf_SET(r,f) (r).tx_pi_ctl5[0]=(((r).tx_pi_ctl5[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10)) | (1 << (16 + 10))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL5r_AFE_TX_FIFO_RESETB_FRCf_GET(r) ((((r).tx_pi_ctl5[0]) >> 9) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL5r_AFE_TX_FIFO_RESETB_FRCf_SET(r,f) (r).tx_pi_ctl5[0]=(((r).tx_pi_ctl5[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9)) | (1 << (16 + 9))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL5r_AFE_TX_FIFO_RESETBf_GET(r) ((((r).tx_pi_ctl5[0]) >> 8) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL5r_AFE_TX_FIFO_RESETBf_SET(r,f) (r).tx_pi_ctl5[0]=(((r).tx_pi_ctl5[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8)) | (1 << (16 + 8))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL5r_TX_PI_EXT_PHASE_STEP_CNT_FULL_BYPASSf_GET(r) ((((r).tx_pi_ctl5[0]) >> 7) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL5r_TX_PI_EXT_PHASE_STEP_CNT_FULL_BYPASSf_SET(r,f) (r).tx_pi_ctl5[0]=(((r).tx_pi_ctl5[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL5r_TX_PI_EXT_PHASE_STEP_CNT_SELf_GET(r) ((((r).tx_pi_ctl5[0]) >> 6) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL5r_TX_PI_EXT_PHASE_STEP_CNT_SELf_SET(r,f) (r).tx_pi_ctl5[0]=(((r).tx_pi_ctl5[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL5r_TX_PI_EXT_PHASE_STEP_CNT_INVERTf_GET(r) ((((r).tx_pi_ctl5[0]) >> 5) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL5r_TX_PI_EXT_PHASE_STEP_CNT_INVERTf_SET(r,f) (r).tx_pi_ctl5[0]=(((r).tx_pi_ctl5[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL5r_TX_PI_HS_FIFO_PHSERR_SELf_GET(r) ((((r).tx_pi_ctl5[0]) >> 4) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL5r_TX_PI_HS_FIFO_PHSERR_SELf_SET(r,f) (r).tx_pi_ctl5[0]=(((r).tx_pi_ctl5[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL5r_TX_PI_EXT_PD_SELf_GET(r) ((((r).tx_pi_ctl5[0]) >> 3) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL5r_TX_PI_EXT_PD_SELf_SET(r,f) (r).tx_pi_ctl5[0]=(((r).tx_pi_ctl5[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL5r_TX_PI_HS_FIFO_PHSERR_INVERTf_GET(r) ((((r).tx_pi_ctl5[0]) >> 1) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL5r_TX_PI_HS_FIFO_PHSERR_INVERTf_SET(r,f) (r).tx_pi_ctl5[0]=(((r).tx_pi_ctl5[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))

/*
 * These macros can be used to access TX_PI_CTL5.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TX_PI_CTL5r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL5r,(_r._tx_pi_ctl5))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TX_PI_CTL5r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL5r,(_r._tx_pi_ctl5)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TX_PI_CTL5r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL5r,(_r._tx_pi_ctl5))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TX_PI_CTL5r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL5r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_pi_ctl5))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TX_PI_CTL5r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL5r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_pi_ctl5))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TX_PI_CTL5r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL5r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tx_pi_ctl5))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TX_PI_CTL5r BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL5r
#define TX_PI_CTL5r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL5r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL5r_t TX_PI_CTL5r_t;
#define TX_PI_CTL5r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL5r_CLR
#define TX_PI_CTL5r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL5r_SET
#define TX_PI_CTL5r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL5r_GET
#define TX_PI_CTL5r_TX_PI_PD_BYPASS_VCOf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL5r_TX_PI_PD_BYPASS_VCOf_GET
#define TX_PI_CTL5r_TX_PI_PD_BYPASS_VCOf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL5r_TX_PI_PD_BYPASS_VCOf_SET
#define TX_PI_CTL5r_TX_PI_PD_BYPASS_FLTf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL5r_TX_PI_PD_BYPASS_FLTf_GET
#define TX_PI_CTL5r_TX_PI_PD_BYPASS_FLTf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL5r_TX_PI_PD_BYPASS_FLTf_SET
#define TX_PI_CTL5r_AFE_TX_FIFO_RESETB_FRCf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL5r_AFE_TX_FIFO_RESETB_FRCf_GET
#define TX_PI_CTL5r_AFE_TX_FIFO_RESETB_FRCf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL5r_AFE_TX_FIFO_RESETB_FRCf_SET
#define TX_PI_CTL5r_AFE_TX_FIFO_RESETBf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL5r_AFE_TX_FIFO_RESETBf_GET
#define TX_PI_CTL5r_AFE_TX_FIFO_RESETBf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL5r_AFE_TX_FIFO_RESETBf_SET
#define TX_PI_CTL5r_TX_PI_EXT_PHASE_STEP_CNT_FULL_BYPASSf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL5r_TX_PI_EXT_PHASE_STEP_CNT_FULL_BYPASSf_GET
#define TX_PI_CTL5r_TX_PI_EXT_PHASE_STEP_CNT_FULL_BYPASSf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL5r_TX_PI_EXT_PHASE_STEP_CNT_FULL_BYPASSf_SET
#define TX_PI_CTL5r_TX_PI_EXT_PHASE_STEP_CNT_SELf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL5r_TX_PI_EXT_PHASE_STEP_CNT_SELf_GET
#define TX_PI_CTL5r_TX_PI_EXT_PHASE_STEP_CNT_SELf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL5r_TX_PI_EXT_PHASE_STEP_CNT_SELf_SET
#define TX_PI_CTL5r_TX_PI_EXT_PHASE_STEP_CNT_INVERTf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL5r_TX_PI_EXT_PHASE_STEP_CNT_INVERTf_GET
#define TX_PI_CTL5r_TX_PI_EXT_PHASE_STEP_CNT_INVERTf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL5r_TX_PI_EXT_PHASE_STEP_CNT_INVERTf_SET
#define TX_PI_CTL5r_TX_PI_HS_FIFO_PHSERR_SELf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL5r_TX_PI_HS_FIFO_PHSERR_SELf_GET
#define TX_PI_CTL5r_TX_PI_HS_FIFO_PHSERR_SELf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL5r_TX_PI_HS_FIFO_PHSERR_SELf_SET
#define TX_PI_CTL5r_TX_PI_EXT_PD_SELf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL5r_TX_PI_EXT_PD_SELf_GET
#define TX_PI_CTL5r_TX_PI_EXT_PD_SELf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL5r_TX_PI_EXT_PD_SELf_SET
#define TX_PI_CTL5r_TX_PI_HS_FIFO_PHSERR_INVERTf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL5r_TX_PI_HS_FIFO_PHSERR_INVERTf_GET
#define TX_PI_CTL5r_TX_PI_HS_FIFO_PHSERR_INVERTf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL5r_TX_PI_HS_FIFO_PHSERR_INVERTf_SET
#define READ_TX_PI_CTL5r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TX_PI_CTL5r
#define WRITE_TX_PI_CTL5r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TX_PI_CTL5r
#define MODIFY_TX_PI_CTL5r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TX_PI_CTL5r
#define READLN_TX_PI_CTL5r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TX_PI_CTL5r
#define WRITELN_TX_PI_CTL5r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TX_PI_CTL5r
#define WRITEALL_TX_PI_CTL5r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TX_PI_CTL5r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_CTL5r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  TX_PI_STS0
 * BLOCKS:   TX_PI
 * REGADDR:  0xd0a8
 * DEVAD:    1
 * DESC:     TX Phase Interpolator Status 0
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     TX_PI_PHASE_CNTR TX PI Phase Counter. Unsigned Value.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS0r (0x0001d0a8 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS0r_SIZE 4

/*
 * This structure should be used to declare and program TX_PI_STS0.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS0r_s {
	uint32_t v[1];
	uint32_t tx_pi_sts0[1];
	uint32_t _tx_pi_sts0;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS0r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS0r_CLR(r) (r).tx_pi_sts0[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS0r_SET(r,d) (r).tx_pi_sts0[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS0r_GET(r) (r).tx_pi_sts0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS0r_TX_PI_PHASE_CNTRf_GET(r) (((r).tx_pi_sts0[0]) & 0xff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS0r_TX_PI_PHASE_CNTRf_SET(r,f) (r).tx_pi_sts0[0]=(((r).tx_pi_sts0[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff)) | (0xff << 16)

/*
 * These macros can be used to access TX_PI_STS0.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TX_PI_STS0r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS0r,(_r._tx_pi_sts0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TX_PI_STS0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS0r,(_r._tx_pi_sts0)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TX_PI_STS0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS0r,(_r._tx_pi_sts0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TX_PI_STS0r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_pi_sts0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TX_PI_STS0r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_pi_sts0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TX_PI_STS0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tx_pi_sts0))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TX_PI_STS0r BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS0r
#define TX_PI_STS0r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS0r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS0r_t TX_PI_STS0r_t;
#define TX_PI_STS0r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS0r_CLR
#define TX_PI_STS0r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS0r_SET
#define TX_PI_STS0r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS0r_GET
#define TX_PI_STS0r_TX_PI_PHASE_CNTRf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS0r_TX_PI_PHASE_CNTRf_GET
#define TX_PI_STS0r_TX_PI_PHASE_CNTRf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS0r_TX_PI_PHASE_CNTRf_SET
#define READ_TX_PI_STS0r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TX_PI_STS0r
#define WRITE_TX_PI_STS0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TX_PI_STS0r
#define MODIFY_TX_PI_STS0r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TX_PI_STS0r
#define READLN_TX_PI_STS0r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TX_PI_STS0r
#define WRITELN_TX_PI_STS0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TX_PI_STS0r
#define WRITEALL_TX_PI_STS0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TX_PI_STS0r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  TX_PI_STS1
 * BLOCKS:   TX_PI
 * REGADDR:  0xd0a9
 * DEVAD:    1
 * DESC:     TX Phase Interpolator Status 1
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     TX_PI_INTEG1_REG TX PI integ1 register. Signed Value.This field is meant for internal debug only.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS1r (0x0001d0a9 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS1r_SIZE 4

/*
 * This structure should be used to declare and program TX_PI_STS1.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS1r_s {
	uint32_t v[1];
	uint32_t tx_pi_sts1[1];
	uint32_t _tx_pi_sts1;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS1r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS1r_CLR(r) (r).tx_pi_sts1[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS1r_SET(r,d) (r).tx_pi_sts1[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS1r_GET(r) (r).tx_pi_sts1[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS1r_TX_PI_INTEG1_REGf_GET(r) (((r).tx_pi_sts1[0]) & 0x3fff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS1r_TX_PI_INTEG1_REGf_SET(r,f) (r).tx_pi_sts1[0]=(((r).tx_pi_sts1[0] & ~((uint32_t)0x3fff)) | (((uint32_t)f) & 0x3fff)) | (0x3fff << 16)

/*
 * These macros can be used to access TX_PI_STS1.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TX_PI_STS1r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS1r,(_r._tx_pi_sts1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TX_PI_STS1r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS1r,(_r._tx_pi_sts1)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TX_PI_STS1r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS1r,(_r._tx_pi_sts1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TX_PI_STS1r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_pi_sts1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TX_PI_STS1r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_pi_sts1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TX_PI_STS1r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS1r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tx_pi_sts1))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TX_PI_STS1r BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS1r
#define TX_PI_STS1r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS1r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS1r_t TX_PI_STS1r_t;
#define TX_PI_STS1r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS1r_CLR
#define TX_PI_STS1r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS1r_SET
#define TX_PI_STS1r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS1r_GET
#define TX_PI_STS1r_TX_PI_INTEG1_REGf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS1r_TX_PI_INTEG1_REGf_GET
#define TX_PI_STS1r_TX_PI_INTEG1_REGf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS1r_TX_PI_INTEG1_REGf_SET
#define READ_TX_PI_STS1r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TX_PI_STS1r
#define WRITE_TX_PI_STS1r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TX_PI_STS1r
#define MODIFY_TX_PI_STS1r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TX_PI_STS1r
#define READLN_TX_PI_STS1r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TX_PI_STS1r
#define WRITELN_TX_PI_STS1r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TX_PI_STS1r
#define WRITEALL_TX_PI_STS1r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TX_PI_STS1r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS1r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  TX_PI_STS2
 * BLOCKS:   TX_PI
 * REGADDR:  0xd0aa
 * DEVAD:    1
 * DESC:     TX Phase Interpolator Status 2
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     TX_PI_INTEG2_REG TX PI integ2 register. Signed Value. Once settled, it can provide the information of the ppm on the TX clock w.r.t. PLL/VCO clock.+8192 (-8192) is equal to +781.25 (-781.25) ppm which means tclk is slower (faster) w.r.t. PLL/VCO clock.Divide this register value by 10.485 to get the tclk ppm.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS2r (0x0001d0aa | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS2r_SIZE 4

/*
 * This structure should be used to declare and program TX_PI_STS2.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS2r_s {
	uint32_t v[1];
	uint32_t tx_pi_sts2[1];
	uint32_t _tx_pi_sts2;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS2r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS2r_CLR(r) (r).tx_pi_sts2[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS2r_SET(r,d) (r).tx_pi_sts2[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS2r_GET(r) (r).tx_pi_sts2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS2r_TX_PI_INTEG2_REGf_GET(r) (((r).tx_pi_sts2[0]) & 0x7fff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS2r_TX_PI_INTEG2_REGf_SET(r,f) (r).tx_pi_sts2[0]=(((r).tx_pi_sts2[0] & ~((uint32_t)0x7fff)) | (((uint32_t)f) & 0x7fff)) | (0x7fff << 16)

/*
 * These macros can be used to access TX_PI_STS2.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TX_PI_STS2r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS2r,(_r._tx_pi_sts2))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TX_PI_STS2r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS2r,(_r._tx_pi_sts2)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TX_PI_STS2r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS2r,(_r._tx_pi_sts2))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TX_PI_STS2r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_pi_sts2))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TX_PI_STS2r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_pi_sts2))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TX_PI_STS2r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tx_pi_sts2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TX_PI_STS2r BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS2r
#define TX_PI_STS2r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS2r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS2r_t TX_PI_STS2r_t;
#define TX_PI_STS2r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS2r_CLR
#define TX_PI_STS2r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS2r_SET
#define TX_PI_STS2r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS2r_GET
#define TX_PI_STS2r_TX_PI_INTEG2_REGf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS2r_TX_PI_INTEG2_REGf_GET
#define TX_PI_STS2r_TX_PI_INTEG2_REGf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS2r_TX_PI_INTEG2_REGf_SET
#define READ_TX_PI_STS2r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TX_PI_STS2r
#define WRITE_TX_PI_STS2r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TX_PI_STS2r
#define MODIFY_TX_PI_STS2r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TX_PI_STS2r
#define READLN_TX_PI_STS2r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TX_PI_STS2r
#define WRITELN_TX_PI_STS2r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TX_PI_STS2r
#define WRITEALL_TX_PI_STS2r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TX_PI_STS2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  TX_PI_STS3
 * BLOCKS:   TX_PI
 * REGADDR:  0xd0ab
 * DEVAD:    1
 * DESC:     TX Phase Interpolator Status 3
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     TX_PI_PHASE_ERR  TX PI Phase Error. Signed Value. Valid values are -8 to +8.
 *     TX_PI_PHASE_ERR_S1 TX PI Phase Error for the first stage jitter filter. Signed Value. Valid values are -8 to +8.
 *     RESERVED_TX_PI_0 Reserved bitmust not be written to. A read returns an unknown value
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS3r (0x0001d0ab | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS3r_SIZE 4

/*
 * This structure should be used to declare and program TX_PI_STS3.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS3r_s {
	uint32_t v[1];
	uint32_t tx_pi_sts3[1];
	uint32_t _tx_pi_sts3;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS3r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS3r_CLR(r) (r).tx_pi_sts3[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS3r_SET(r,d) (r).tx_pi_sts3[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS3r_GET(r) (r).tx_pi_sts3[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS3r_RESERVED_TX_PI_0f_GET(r) ((((r).tx_pi_sts3[0]) >> 15) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS3r_RESERVED_TX_PI_0f_SET(r,f) (r).tx_pi_sts3[0]=(((r).tx_pi_sts3[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS3r_TX_PI_PHASE_ERR_S1f_GET(r) ((((r).tx_pi_sts3[0]) >> 8) & 0x3f)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS3r_TX_PI_PHASE_ERR_S1f_SET(r,f) (r).tx_pi_sts3[0]=(((r).tx_pi_sts3[0] & ~((uint32_t)0x3f << 8)) | ((((uint32_t)f) & 0x3f) << 8)) | (63 << (16 + 8))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS3r_TX_PI_PHASE_ERRf_GET(r) (((r).tx_pi_sts3[0]) & 0x3f)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS3r_TX_PI_PHASE_ERRf_SET(r,f) (r).tx_pi_sts3[0]=(((r).tx_pi_sts3[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f)) | (0x3f << 16)

/*
 * These macros can be used to access TX_PI_STS3.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TX_PI_STS3r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS3r,(_r._tx_pi_sts3))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TX_PI_STS3r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS3r,(_r._tx_pi_sts3)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TX_PI_STS3r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS3r,(_r._tx_pi_sts3))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TX_PI_STS3r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS3r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_pi_sts3))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TX_PI_STS3r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS3r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_pi_sts3))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TX_PI_STS3r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS3r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tx_pi_sts3))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TX_PI_STS3r BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS3r
#define TX_PI_STS3r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS3r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS3r_t TX_PI_STS3r_t;
#define TX_PI_STS3r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS3r_CLR
#define TX_PI_STS3r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS3r_SET
#define TX_PI_STS3r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS3r_GET
#define TX_PI_STS3r_RESERVED_TX_PI_0f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS3r_RESERVED_TX_PI_0f_GET
#define TX_PI_STS3r_RESERVED_TX_PI_0f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS3r_RESERVED_TX_PI_0f_SET
#define TX_PI_STS3r_TX_PI_PHASE_ERR_S1f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS3r_TX_PI_PHASE_ERR_S1f_GET
#define TX_PI_STS3r_TX_PI_PHASE_ERR_S1f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS3r_TX_PI_PHASE_ERR_S1f_SET
#define TX_PI_STS3r_TX_PI_PHASE_ERRf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS3r_TX_PI_PHASE_ERRf_GET
#define TX_PI_STS3r_TX_PI_PHASE_ERRf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS3r_TX_PI_PHASE_ERRf_SET
#define READ_TX_PI_STS3r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TX_PI_STS3r
#define WRITE_TX_PI_STS3r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TX_PI_STS3r
#define MODIFY_TX_PI_STS3r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TX_PI_STS3r
#define READLN_TX_PI_STS3r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TX_PI_STS3r
#define WRITELN_TX_PI_STS3r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TX_PI_STS3r
#define WRITEALL_TX_PI_STS3r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TX_PI_STS3r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS3r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  TX_PI_STS4
 * BLOCKS:   TX_PI
 * REGADDR:  0xd0ac
 * DEVAD:    1
 * DESC:     TX Phase Interpolator Status 4
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     TX_PI_HS_FIFO_PHSERR Bit 4 of hs_fifo_pherr.
 *     ST_AFE_TX_FIFO_RESETB Status of the final afe_tx_fifo_resetb signal connected to the AFE pin.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS4r (0x0001d0ac | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS4r_SIZE 4

/*
 * This structure should be used to declare and program TX_PI_STS4.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS4r_s {
	uint32_t v[1];
	uint32_t tx_pi_sts4[1];
	uint32_t _tx_pi_sts4;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS4r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS4r_CLR(r) (r).tx_pi_sts4[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS4r_SET(r,d) (r).tx_pi_sts4[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS4r_GET(r) (r).tx_pi_sts4[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS4r_ST_AFE_TX_FIFO_RESETBf_GET(r) ((((r).tx_pi_sts4[0]) >> 1) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS4r_ST_AFE_TX_FIFO_RESETBf_SET(r,f) (r).tx_pi_sts4[0]=(((r).tx_pi_sts4[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS4r_TX_PI_HS_FIFO_PHSERRf_GET(r) (((r).tx_pi_sts4[0]) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS4r_TX_PI_HS_FIFO_PHSERRf_SET(r,f) (r).tx_pi_sts4[0]=(((r).tx_pi_sts4[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access TX_PI_STS4.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TX_PI_STS4r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS4r,(_r._tx_pi_sts4))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TX_PI_STS4r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS4r,(_r._tx_pi_sts4)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TX_PI_STS4r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS4r,(_r._tx_pi_sts4))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TX_PI_STS4r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS4r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_pi_sts4))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TX_PI_STS4r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS4r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_pi_sts4))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TX_PI_STS4r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS4r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tx_pi_sts4))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TX_PI_STS4r BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS4r
#define TX_PI_STS4r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS4r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS4r_t TX_PI_STS4r_t;
#define TX_PI_STS4r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS4r_CLR
#define TX_PI_STS4r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS4r_SET
#define TX_PI_STS4r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS4r_GET
#define TX_PI_STS4r_ST_AFE_TX_FIFO_RESETBf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS4r_ST_AFE_TX_FIFO_RESETBf_GET
#define TX_PI_STS4r_ST_AFE_TX_FIFO_RESETBf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS4r_ST_AFE_TX_FIFO_RESETBf_SET
#define TX_PI_STS4r_TX_PI_HS_FIFO_PHSERRf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS4r_TX_PI_HS_FIFO_PHSERRf_GET
#define TX_PI_STS4r_TX_PI_HS_FIFO_PHSERRf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS4r_TX_PI_HS_FIFO_PHSERRf_SET
#define READ_TX_PI_STS4r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TX_PI_STS4r
#define WRITE_TX_PI_STS4r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TX_PI_STS4r
#define MODIFY_TX_PI_STS4r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TX_PI_STS4r
#define READLN_TX_PI_STS4r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TX_PI_STS4r
#define WRITELN_TX_PI_STS4r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TX_PI_STS4r
#define WRITEALL_TX_PI_STS4r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TX_PI_STS4r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PI_STS4r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  RXTXCOM_OSR_MODE_CTL
 * BLOCKS:   RXTXCOM_CKRST_CTRL
 * REGADDR:  0xd0b0
 * DEVAD:    1
 * DESC:     RXTXCOM_OSR_MODE_CONTROL
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     OSR_MODE_FRC_VAL NRZ/PAM4 oversample (OS) mode Decoding of this register is as follows. pam4_mode should be 3'd0 or 3'd1 for this NRZ/PAM4 OS modes.OSX1          4'd0     (NRZ mode and PAM4 mode)OSX2          4'd1     (NRZ mode and PAM4 mode)OSX4          4'd2     (NRZ mode only         )OSX2P5      4'd3     (NRZ mode only         )OSX21P25      4'd4     (NRZ mode only         )OSX16P5       4'd8     (NRZ mode only         )OSX20P625     4'd12    (NRZ mode only         )OSX8          4'd5     (NRZ mode only         )OSX16         4'd9     (NRZ mode only         )OSX32         4'd13    (NRZ mode only         )
 *     PAM4_MODE_FRC_VAL PAM4 signalling mode Decoding of this register is as follows. osr_mode should be 4'd0 or 4'd1 for the PAM4 modes below.NRZ OS modes  3'd0PAM4 OS modes 3'd1         (rx_pam4_er_mode reg field when 1'b1 is PAM4 ER mode and 1'b0 is PAM4 NR mode)Reserved      3'd2:3d7Note: This field is PMD uC driven and off limits for users
 *     PAM4_MODE_FRC    PAM4 signalling mode force. Setting this bit will allow the register value to be used for pam4 mode.Othersise, the pin input values are used for pam4 mode Note: This field is PMD uC driven and off limits for users
 *     OSR_MODE_FRC     NRZ/PAM4 oversample (OS) mode force. Setting this bit will allow the register value to be used for OS mode.Othersise, the pin input values are used for OS mode
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_OSR_MODE_CTLr (0x0001d0b0 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_OSR_MODE_CTLr_SIZE 4

/*
 * This structure should be used to declare and program RXTXCOM_OSR_MODE_CTL.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_OSR_MODE_CTLr_s {
	uint32_t v[1];
	uint32_t rxtxcom_osr_mode_ctl[1];
	uint32_t _rxtxcom_osr_mode_ctl;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_OSR_MODE_CTLr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_OSR_MODE_CTLr_CLR(r) (r).rxtxcom_osr_mode_ctl[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_OSR_MODE_CTLr_SET(r,d) (r).rxtxcom_osr_mode_ctl[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_OSR_MODE_CTLr_GET(r) (r).rxtxcom_osr_mode_ctl[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_OSR_MODE_CTLr_OSR_MODE_FRCf_GET(r) ((((r).rxtxcom_osr_mode_ctl[0]) >> 15) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_OSR_MODE_CTLr_OSR_MODE_FRCf_SET(r,f) (r).rxtxcom_osr_mode_ctl[0]=(((r).rxtxcom_osr_mode_ctl[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_OSR_MODE_CTLr_PAM4_MODE_FRCf_GET(r) ((((r).rxtxcom_osr_mode_ctl[0]) >> 14) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_OSR_MODE_CTLr_PAM4_MODE_FRCf_SET(r,f) (r).rxtxcom_osr_mode_ctl[0]=(((r).rxtxcom_osr_mode_ctl[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14)) | (1 << (16 + 14))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_OSR_MODE_CTLr_PAM4_MODE_FRC_VALf_GET(r) ((((r).rxtxcom_osr_mode_ctl[0]) >> 4) & 0x7)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_OSR_MODE_CTLr_PAM4_MODE_FRC_VALf_SET(r,f) (r).rxtxcom_osr_mode_ctl[0]=(((r).rxtxcom_osr_mode_ctl[0] & ~((uint32_t)0x7 << 4)) | ((((uint32_t)f) & 0x7) << 4)) | (7 << (16 + 4))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_OSR_MODE_CTLr_OSR_MODE_FRC_VALf_GET(r) (((r).rxtxcom_osr_mode_ctl[0]) & 0xf)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_OSR_MODE_CTLr_OSR_MODE_FRC_VALf_SET(r,f) (r).rxtxcom_osr_mode_ctl[0]=(((r).rxtxcom_osr_mode_ctl[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf)) | (0xf << 16)

/*
 * These macros can be used to access RXTXCOM_OSR_MODE_CTL.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_RXTXCOM_OSR_MODE_CTLr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_OSR_MODE_CTLr,(_r._rxtxcom_osr_mode_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_RXTXCOM_OSR_MODE_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_OSR_MODE_CTLr,(_r._rxtxcom_osr_mode_ctl)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_RXTXCOM_OSR_MODE_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_OSR_MODE_CTLr,(_r._rxtxcom_osr_mode_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_RXTXCOM_OSR_MODE_CTLr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_OSR_MODE_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rxtxcom_osr_mode_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_RXTXCOM_OSR_MODE_CTLr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_OSR_MODE_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rxtxcom_osr_mode_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_RXTXCOM_OSR_MODE_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_OSR_MODE_CTLr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rxtxcom_osr_mode_ctl))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RXTXCOM_OSR_MODE_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_OSR_MODE_CTLr
#define RXTXCOM_OSR_MODE_CTLr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_OSR_MODE_CTLr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_OSR_MODE_CTLr_t RXTXCOM_OSR_MODE_CTLr_t;
#define RXTXCOM_OSR_MODE_CTLr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_OSR_MODE_CTLr_CLR
#define RXTXCOM_OSR_MODE_CTLr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_OSR_MODE_CTLr_SET
#define RXTXCOM_OSR_MODE_CTLr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_OSR_MODE_CTLr_GET
#define RXTXCOM_OSR_MODE_CTLr_OSR_MODE_FRCf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_OSR_MODE_CTLr_OSR_MODE_FRCf_GET
#define RXTXCOM_OSR_MODE_CTLr_OSR_MODE_FRCf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_OSR_MODE_CTLr_OSR_MODE_FRCf_SET
#define RXTXCOM_OSR_MODE_CTLr_PAM4_MODE_FRCf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_OSR_MODE_CTLr_PAM4_MODE_FRCf_GET
#define RXTXCOM_OSR_MODE_CTLr_PAM4_MODE_FRCf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_OSR_MODE_CTLr_PAM4_MODE_FRCf_SET
#define RXTXCOM_OSR_MODE_CTLr_PAM4_MODE_FRC_VALf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_OSR_MODE_CTLr_PAM4_MODE_FRC_VALf_GET
#define RXTXCOM_OSR_MODE_CTLr_PAM4_MODE_FRC_VALf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_OSR_MODE_CTLr_PAM4_MODE_FRC_VALf_SET
#define RXTXCOM_OSR_MODE_CTLr_OSR_MODE_FRC_VALf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_OSR_MODE_CTLr_OSR_MODE_FRC_VALf_GET
#define RXTXCOM_OSR_MODE_CTLr_OSR_MODE_FRC_VALf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_OSR_MODE_CTLr_OSR_MODE_FRC_VALf_SET
#define READ_RXTXCOM_OSR_MODE_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_RXTXCOM_OSR_MODE_CTLr
#define WRITE_RXTXCOM_OSR_MODE_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_RXTXCOM_OSR_MODE_CTLr
#define MODIFY_RXTXCOM_OSR_MODE_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_RXTXCOM_OSR_MODE_CTLr
#define READLN_RXTXCOM_OSR_MODE_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_RXTXCOM_OSR_MODE_CTLr
#define WRITELN_RXTXCOM_OSR_MODE_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_RXTXCOM_OSR_MODE_CTLr
#define WRITEALL_RXTXCOM_OSR_MODE_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_RXTXCOM_OSR_MODE_CTLr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_OSR_MODE_CTLr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  RXTXCOM_LN_CLK_RST_N_PWRDWN_CTL
 * BLOCKS:   RXTXCOM_CKRST_CTRL
 * REGADDR:  0xd0b1
 * DEVAD:    1
 * DESC:     RXTXCOM_LANE_CLK_RESET_N_POWERDOWN_CONTROL
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     LN_DP_S_RSTB     Active Low Lane Soft Reset for datapath. If asserted by writing to 1'b0 will reset the datapath for a lane.This soft reset is equivalent to the hard reset input pin pmd_ln_dp_h_rstb_i.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_CLK_RST_N_PWRDWN_CTLr (0x0001d0b1 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_CLK_RST_N_PWRDWN_CTLr_SIZE 4

/*
 * This structure should be used to declare and program RXTXCOM_LN_CLK_RST_N_PWRDWN_CTL.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_CLK_RST_N_PWRDWN_CTLr_s {
	uint32_t v[1];
	uint32_t rxtxcom_ln_clk_rst_n_pwrdwn_ctl[1];
	uint32_t _rxtxcom_ln_clk_rst_n_pwrdwn_ctl;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_CLK_RST_N_PWRDWN_CTLr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_CLK_RST_N_PWRDWN_CTLr_CLR(r) (r).rxtxcom_ln_clk_rst_n_pwrdwn_ctl[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_CLK_RST_N_PWRDWN_CTLr_SET(r,d) (r).rxtxcom_ln_clk_rst_n_pwrdwn_ctl[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_CLK_RST_N_PWRDWN_CTLr_GET(r) (r).rxtxcom_ln_clk_rst_n_pwrdwn_ctl[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_CLK_RST_N_PWRDWN_CTLr_LN_DP_S_RSTBf_GET(r) (((r).rxtxcom_ln_clk_rst_n_pwrdwn_ctl[0]) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_CLK_RST_N_PWRDWN_CTLr_LN_DP_S_RSTBf_SET(r,f) (r).rxtxcom_ln_clk_rst_n_pwrdwn_ctl[0]=(((r).rxtxcom_ln_clk_rst_n_pwrdwn_ctl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access RXTXCOM_LN_CLK_RST_N_PWRDWN_CTL.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_RXTXCOM_LN_CLK_RST_N_PWRDWN_CTLr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_CLK_RST_N_PWRDWN_CTLr,(_r._rxtxcom_ln_clk_rst_n_pwrdwn_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_RXTXCOM_LN_CLK_RST_N_PWRDWN_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_CLK_RST_N_PWRDWN_CTLr,(_r._rxtxcom_ln_clk_rst_n_pwrdwn_ctl)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_RXTXCOM_LN_CLK_RST_N_PWRDWN_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_CLK_RST_N_PWRDWN_CTLr,(_r._rxtxcom_ln_clk_rst_n_pwrdwn_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_RXTXCOM_LN_CLK_RST_N_PWRDWN_CTLr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_CLK_RST_N_PWRDWN_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rxtxcom_ln_clk_rst_n_pwrdwn_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_RXTXCOM_LN_CLK_RST_N_PWRDWN_CTLr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_CLK_RST_N_PWRDWN_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rxtxcom_ln_clk_rst_n_pwrdwn_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_RXTXCOM_LN_CLK_RST_N_PWRDWN_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_CLK_RST_N_PWRDWN_CTLr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rxtxcom_ln_clk_rst_n_pwrdwn_ctl))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RXTXCOM_LN_CLK_RST_N_PWRDWN_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_CLK_RST_N_PWRDWN_CTLr
#define RXTXCOM_LN_CLK_RST_N_PWRDWN_CTLr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_CLK_RST_N_PWRDWN_CTLr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_CLK_RST_N_PWRDWN_CTLr_t RXTXCOM_LN_CLK_RST_N_PWRDWN_CTLr_t;
#define RXTXCOM_LN_CLK_RST_N_PWRDWN_CTLr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_CLK_RST_N_PWRDWN_CTLr_CLR
#define RXTXCOM_LN_CLK_RST_N_PWRDWN_CTLr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_CLK_RST_N_PWRDWN_CTLr_SET
#define RXTXCOM_LN_CLK_RST_N_PWRDWN_CTLr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_CLK_RST_N_PWRDWN_CTLr_GET
#define RXTXCOM_LN_CLK_RST_N_PWRDWN_CTLr_LN_DP_S_RSTBf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_CLK_RST_N_PWRDWN_CTLr_LN_DP_S_RSTBf_GET
#define RXTXCOM_LN_CLK_RST_N_PWRDWN_CTLr_LN_DP_S_RSTBf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_CLK_RST_N_PWRDWN_CTLr_LN_DP_S_RSTBf_SET
#define READ_RXTXCOM_LN_CLK_RST_N_PWRDWN_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_RXTXCOM_LN_CLK_RST_N_PWRDWN_CTLr
#define WRITE_RXTXCOM_LN_CLK_RST_N_PWRDWN_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_RXTXCOM_LN_CLK_RST_N_PWRDWN_CTLr
#define MODIFY_RXTXCOM_LN_CLK_RST_N_PWRDWN_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_RXTXCOM_LN_CLK_RST_N_PWRDWN_CTLr
#define READLN_RXTXCOM_LN_CLK_RST_N_PWRDWN_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_RXTXCOM_LN_CLK_RST_N_PWRDWN_CTLr
#define WRITELN_RXTXCOM_LN_CLK_RST_N_PWRDWN_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_RXTXCOM_LN_CLK_RST_N_PWRDWN_CTLr
#define WRITEALL_RXTXCOM_LN_CLK_RST_N_PWRDWN_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_RXTXCOM_LN_CLK_RST_N_PWRDWN_CTLr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_CLK_RST_N_PWRDWN_CTLr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  RXTXCOM_LN_RST_N_PWRDN_PIN_KILL_CTL
 * BLOCKS:   RXTXCOM_CKRST_CTRL
 * REGADDR:  0xd0b3
 * DEVAD:    1
 * DESC:     RXTXCOM_LANE_RESET_N_PWRDN_PIN_KILL_CONTROL
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     PMD_LN_H_RSTB_PKILL 1'b1 will disable the pmd_ln_h_rstb input pin.
 *     PMD_LN_DP_H_RSTB_PKILL 1'b1 will disable the pmd_ln_dp_h_rstb input pin.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr (0x0001d0b3 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_SIZE 4

/*
 * This structure should be used to declare and program RXTXCOM_LN_RST_N_PWRDN_PIN_KILL_CTL.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_s {
	uint32_t v[1];
	uint32_t rxtxcom_ln_rst_n_pwrdn_pin_kill_ctl[1];
	uint32_t _rxtxcom_ln_rst_n_pwrdn_pin_kill_ctl;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_CLR(r) (r).rxtxcom_ln_rst_n_pwrdn_pin_kill_ctl[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_SET(r,d) (r).rxtxcom_ln_rst_n_pwrdn_pin_kill_ctl[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_GET(r) (r).rxtxcom_ln_rst_n_pwrdn_pin_kill_ctl[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_PMD_LN_DP_H_RSTB_PKILLf_GET(r) ((((r).rxtxcom_ln_rst_n_pwrdn_pin_kill_ctl[0]) >> 1) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_PMD_LN_DP_H_RSTB_PKILLf_SET(r,f) (r).rxtxcom_ln_rst_n_pwrdn_pin_kill_ctl[0]=(((r).rxtxcom_ln_rst_n_pwrdn_pin_kill_ctl[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_PMD_LN_H_RSTB_PKILLf_GET(r) (((r).rxtxcom_ln_rst_n_pwrdn_pin_kill_ctl[0]) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_PMD_LN_H_RSTB_PKILLf_SET(r,f) (r).rxtxcom_ln_rst_n_pwrdn_pin_kill_ctl[0]=(((r).rxtxcom_ln_rst_n_pwrdn_pin_kill_ctl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access RXTXCOM_LN_RST_N_PWRDN_PIN_KILL_CTL.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_RXTXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr,(_r._rxtxcom_ln_rst_n_pwrdn_pin_kill_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_RXTXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr,(_r._rxtxcom_ln_rst_n_pwrdn_pin_kill_ctl)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_RXTXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr,(_r._rxtxcom_ln_rst_n_pwrdn_pin_kill_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_RXTXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rxtxcom_ln_rst_n_pwrdn_pin_kill_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_RXTXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rxtxcom_ln_rst_n_pwrdn_pin_kill_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_RXTXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rxtxcom_ln_rst_n_pwrdn_pin_kill_ctl))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RXTXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr
#define RXTXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_t RXTXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_t;
#define RXTXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_CLR
#define RXTXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_SET
#define RXTXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_GET
#define RXTXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_PMD_LN_DP_H_RSTB_PKILLf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_PMD_LN_DP_H_RSTB_PKILLf_GET
#define RXTXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_PMD_LN_DP_H_RSTB_PKILLf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_PMD_LN_DP_H_RSTB_PKILLf_SET
#define RXTXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_PMD_LN_H_RSTB_PKILLf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_PMD_LN_H_RSTB_PKILLf_GET
#define RXTXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_PMD_LN_H_RSTB_PKILLf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_PMD_LN_H_RSTB_PKILLf_SET
#define READ_RXTXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_RXTXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr
#define WRITE_RXTXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_RXTXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr
#define MODIFY_RXTXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_RXTXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr
#define READLN_RXTXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_RXTXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr
#define WRITELN_RXTXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_RXTXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr
#define WRITEALL_RXTXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_RXTXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  RXTXCOM_UC_ACK_LN_CTL
 * BLOCKS:   RXTXCOM_CKRST_CTRL
 * REGADDR:  0xd0b5
 * DEVAD:    1
 * DESC:     RXTXCOM_UC_ACK_LANE_CONTROL
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     UC_ACK_LANE_CFG_DONE uC will write this to 1 to indicate it's configuration of the lane is complete. Writing to 1'b1 willshould release internal hold on lane_dp_reset, only if lane_dp_reset_state is 3'b001.
 *     UC_ACK_LANE_DP_RESET uC will write this to 1 to acknowledge a reset event after seeing "lane_dp_reset_coccured".
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_UC_ACK_LN_CTLr (0x0001d0b5 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_UC_ACK_LN_CTLr_SIZE 4

/*
 * This structure should be used to declare and program RXTXCOM_UC_ACK_LN_CTL.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_UC_ACK_LN_CTLr_s {
	uint32_t v[1];
	uint32_t rxtxcom_uc_ack_ln_ctl[1];
	uint32_t _rxtxcom_uc_ack_ln_ctl;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_UC_ACK_LN_CTLr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_UC_ACK_LN_CTLr_CLR(r) (r).rxtxcom_uc_ack_ln_ctl[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_UC_ACK_LN_CTLr_SET(r,d) (r).rxtxcom_uc_ack_ln_ctl[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_UC_ACK_LN_CTLr_GET(r) (r).rxtxcom_uc_ack_ln_ctl[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_UC_ACK_LN_CTLr_UC_ACK_LANE_DP_RESETf_GET(r) ((((r).rxtxcom_uc_ack_ln_ctl[0]) >> 1) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_UC_ACK_LN_CTLr_UC_ACK_LANE_DP_RESETf_SET(r,f) (r).rxtxcom_uc_ack_ln_ctl[0]=(((r).rxtxcom_uc_ack_ln_ctl[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_UC_ACK_LN_CTLr_UC_ACK_LANE_CFG_DONEf_GET(r) (((r).rxtxcom_uc_ack_ln_ctl[0]) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_UC_ACK_LN_CTLr_UC_ACK_LANE_CFG_DONEf_SET(r,f) (r).rxtxcom_uc_ack_ln_ctl[0]=(((r).rxtxcom_uc_ack_ln_ctl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access RXTXCOM_UC_ACK_LN_CTL.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_RXTXCOM_UC_ACK_LN_CTLr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_UC_ACK_LN_CTLr,(_r._rxtxcom_uc_ack_ln_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_RXTXCOM_UC_ACK_LN_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_UC_ACK_LN_CTLr,(_r._rxtxcom_uc_ack_ln_ctl)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_RXTXCOM_UC_ACK_LN_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_UC_ACK_LN_CTLr,(_r._rxtxcom_uc_ack_ln_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_RXTXCOM_UC_ACK_LN_CTLr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_UC_ACK_LN_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rxtxcom_uc_ack_ln_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_RXTXCOM_UC_ACK_LN_CTLr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_UC_ACK_LN_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rxtxcom_uc_ack_ln_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_RXTXCOM_UC_ACK_LN_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_UC_ACK_LN_CTLr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rxtxcom_uc_ack_ln_ctl))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RXTXCOM_UC_ACK_LN_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_UC_ACK_LN_CTLr
#define RXTXCOM_UC_ACK_LN_CTLr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_UC_ACK_LN_CTLr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_UC_ACK_LN_CTLr_t RXTXCOM_UC_ACK_LN_CTLr_t;
#define RXTXCOM_UC_ACK_LN_CTLr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_UC_ACK_LN_CTLr_CLR
#define RXTXCOM_UC_ACK_LN_CTLr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_UC_ACK_LN_CTLr_SET
#define RXTXCOM_UC_ACK_LN_CTLr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_UC_ACK_LN_CTLr_GET
#define RXTXCOM_UC_ACK_LN_CTLr_UC_ACK_LANE_DP_RESETf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_UC_ACK_LN_CTLr_UC_ACK_LANE_DP_RESETf_GET
#define RXTXCOM_UC_ACK_LN_CTLr_UC_ACK_LANE_DP_RESETf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_UC_ACK_LN_CTLr_UC_ACK_LANE_DP_RESETf_SET
#define RXTXCOM_UC_ACK_LN_CTLr_UC_ACK_LANE_CFG_DONEf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_UC_ACK_LN_CTLr_UC_ACK_LANE_CFG_DONEf_GET
#define RXTXCOM_UC_ACK_LN_CTLr_UC_ACK_LANE_CFG_DONEf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_UC_ACK_LN_CTLr_UC_ACK_LANE_CFG_DONEf_SET
#define READ_RXTXCOM_UC_ACK_LN_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_RXTXCOM_UC_ACK_LN_CTLr
#define WRITE_RXTXCOM_UC_ACK_LN_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_RXTXCOM_UC_ACK_LN_CTLr
#define MODIFY_RXTXCOM_UC_ACK_LN_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_RXTXCOM_UC_ACK_LN_CTLr
#define READLN_RXTXCOM_UC_ACK_LN_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_RXTXCOM_UC_ACK_LN_CTLr
#define WRITELN_RXTXCOM_UC_ACK_LN_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_RXTXCOM_UC_ACK_LN_CTLr
#define WRITEALL_RXTXCOM_UC_ACK_LN_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_RXTXCOM_UC_ACK_LN_CTLr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_UC_ACK_LN_CTLr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  RXTXCOM_LN_RST_OCC_CTL
 * BLOCKS:   RXTXCOM_CKRST_CTRL
 * REGADDR:  0xd0b6
 * DEVAD:    1
 * DESC:     RXTXCOM_LANE_REG_RESET_OCCURRED_CONTROL
 * RESETVAL: 0x1 (1)
 * ACCESS:   R/W
 * FIELDS:
 *     LANE_REG_RESET_OCCURRED Set to 1'b1 upon lane level register reset and remains so until cleared by register write from uC.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_RST_OCC_CTLr (0x0001d0b6 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_RST_OCC_CTLr_SIZE 4

/*
 * This structure should be used to declare and program RXTXCOM_LN_RST_OCC_CTL.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_RST_OCC_CTLr_s {
	uint32_t v[1];
	uint32_t rxtxcom_ln_rst_occ_ctl[1];
	uint32_t _rxtxcom_ln_rst_occ_ctl;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_RST_OCC_CTLr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_RST_OCC_CTLr_CLR(r) (r).rxtxcom_ln_rst_occ_ctl[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_RST_OCC_CTLr_SET(r,d) (r).rxtxcom_ln_rst_occ_ctl[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_RST_OCC_CTLr_GET(r) (r).rxtxcom_ln_rst_occ_ctl[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_RST_OCC_CTLr_LANE_REG_RESET_OCCURREDf_GET(r) (((r).rxtxcom_ln_rst_occ_ctl[0]) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_RST_OCC_CTLr_LANE_REG_RESET_OCCURREDf_SET(r,f) (r).rxtxcom_ln_rst_occ_ctl[0]=(((r).rxtxcom_ln_rst_occ_ctl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access RXTXCOM_LN_RST_OCC_CTL.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_RXTXCOM_LN_RST_OCC_CTLr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_RST_OCC_CTLr,(_r._rxtxcom_ln_rst_occ_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_RXTXCOM_LN_RST_OCC_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_RST_OCC_CTLr,(_r._rxtxcom_ln_rst_occ_ctl)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_RXTXCOM_LN_RST_OCC_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_RST_OCC_CTLr,(_r._rxtxcom_ln_rst_occ_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_RXTXCOM_LN_RST_OCC_CTLr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_RST_OCC_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rxtxcom_ln_rst_occ_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_RXTXCOM_LN_RST_OCC_CTLr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_RST_OCC_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rxtxcom_ln_rst_occ_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_RXTXCOM_LN_RST_OCC_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_RST_OCC_CTLr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rxtxcom_ln_rst_occ_ctl))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RXTXCOM_LN_RST_OCC_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_RST_OCC_CTLr
#define RXTXCOM_LN_RST_OCC_CTLr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_RST_OCC_CTLr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_RST_OCC_CTLr_t RXTXCOM_LN_RST_OCC_CTLr_t;
#define RXTXCOM_LN_RST_OCC_CTLr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_RST_OCC_CTLr_CLR
#define RXTXCOM_LN_RST_OCC_CTLr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_RST_OCC_CTLr_SET
#define RXTXCOM_LN_RST_OCC_CTLr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_RST_OCC_CTLr_GET
#define RXTXCOM_LN_RST_OCC_CTLr_LANE_REG_RESET_OCCURREDf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_RST_OCC_CTLr_LANE_REG_RESET_OCCURREDf_GET
#define RXTXCOM_LN_RST_OCC_CTLr_LANE_REG_RESET_OCCURREDf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_RST_OCC_CTLr_LANE_REG_RESET_OCCURREDf_SET
#define READ_RXTXCOM_LN_RST_OCC_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_RXTXCOM_LN_RST_OCC_CTLr
#define WRITE_RXTXCOM_LN_RST_OCC_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_RXTXCOM_LN_RST_OCC_CTLr
#define MODIFY_RXTXCOM_LN_RST_OCC_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_RXTXCOM_LN_RST_OCC_CTLr
#define READLN_RXTXCOM_LN_RST_OCC_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_RXTXCOM_LN_RST_OCC_CTLr
#define WRITELN_RXTXCOM_LN_RST_OCC_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_RXTXCOM_LN_RST_OCC_CTLr
#define WRITEALL_RXTXCOM_LN_RST_OCC_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_RXTXCOM_LN_RST_OCC_CTLr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_RST_OCC_CTLr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  RXTXCOM_LN_DP_RST_ST_STS
 * BLOCKS:   RXTXCOM_CKRST_CTRL
 * REGADDR:  0xd0b9
 * DEVAD:    1
 * DESC:     RXTXCOM_LANE_DP_RESET_STATE_STATUS
 * RESETVAL: 0x7 (7)
 * ACCESS:   R/O
 * FIELDS:
 *     LANE_DP_RESET_STATE Bit 2: lane_dp_reset_active   : Set to 1'b1 whenenver lane_dp_reset is currently requested through any register or pin controls.Bit 1: lane_dp_reset_occurred : Set to 1'b1 whenenver lane_dp_reset is currently requested through any register or pin controls and is latched high.Bit 0: lane_dp_reset_held     : Set to 1'b1 whenenver lane_dp_reset is internally held. Cleared to 1'b0, only if lane_dp_reset_state==001 and uc_ack_lane_cfg_done == 1.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_DP_RST_ST_STSr (0x0001d0b9 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_DP_RST_ST_STSr_SIZE 4

/*
 * This structure should be used to declare and program RXTXCOM_LN_DP_RST_ST_STS.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_DP_RST_ST_STSr_s {
	uint32_t v[1];
	uint32_t rxtxcom_ln_dp_rst_st_sts[1];
	uint32_t _rxtxcom_ln_dp_rst_st_sts;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_DP_RST_ST_STSr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_DP_RST_ST_STSr_CLR(r) (r).rxtxcom_ln_dp_rst_st_sts[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_DP_RST_ST_STSr_SET(r,d) (r).rxtxcom_ln_dp_rst_st_sts[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_DP_RST_ST_STSr_GET(r) (r).rxtxcom_ln_dp_rst_st_sts[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_DP_RST_ST_STSr_LANE_DP_RESET_STATEf_GET(r) (((r).rxtxcom_ln_dp_rst_st_sts[0]) & 0x7)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_DP_RST_ST_STSr_LANE_DP_RESET_STATEf_SET(r,f) (r).rxtxcom_ln_dp_rst_st_sts[0]=(((r).rxtxcom_ln_dp_rst_st_sts[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7)) | (0x7 << 16)

/*
 * These macros can be used to access RXTXCOM_LN_DP_RST_ST_STS.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_RXTXCOM_LN_DP_RST_ST_STSr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_DP_RST_ST_STSr,(_r._rxtxcom_ln_dp_rst_st_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_RXTXCOM_LN_DP_RST_ST_STSr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_DP_RST_ST_STSr,(_r._rxtxcom_ln_dp_rst_st_sts)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_RXTXCOM_LN_DP_RST_ST_STSr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_DP_RST_ST_STSr,(_r._rxtxcom_ln_dp_rst_st_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_RXTXCOM_LN_DP_RST_ST_STSr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_DP_RST_ST_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rxtxcom_ln_dp_rst_st_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_RXTXCOM_LN_DP_RST_ST_STSr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_DP_RST_ST_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rxtxcom_ln_dp_rst_st_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_RXTXCOM_LN_DP_RST_ST_STSr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_DP_RST_ST_STSr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rxtxcom_ln_dp_rst_st_sts))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RXTXCOM_LN_DP_RST_ST_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_DP_RST_ST_STSr
#define RXTXCOM_LN_DP_RST_ST_STSr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_DP_RST_ST_STSr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_DP_RST_ST_STSr_t RXTXCOM_LN_DP_RST_ST_STSr_t;
#define RXTXCOM_LN_DP_RST_ST_STSr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_DP_RST_ST_STSr_CLR
#define RXTXCOM_LN_DP_RST_ST_STSr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_DP_RST_ST_STSr_SET
#define RXTXCOM_LN_DP_RST_ST_STSr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_DP_RST_ST_STSr_GET
#define RXTXCOM_LN_DP_RST_ST_STSr_LANE_DP_RESET_STATEf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_DP_RST_ST_STSr_LANE_DP_RESET_STATEf_GET
#define RXTXCOM_LN_DP_RST_ST_STSr_LANE_DP_RESET_STATEf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_DP_RST_ST_STSr_LANE_DP_RESET_STATEf_SET
#define READ_RXTXCOM_LN_DP_RST_ST_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_RXTXCOM_LN_DP_RST_ST_STSr
#define WRITE_RXTXCOM_LN_DP_RST_ST_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_RXTXCOM_LN_DP_RST_ST_STSr
#define MODIFY_RXTXCOM_LN_DP_RST_ST_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_RXTXCOM_LN_DP_RST_ST_STSr
#define READLN_RXTXCOM_LN_DP_RST_ST_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_RXTXCOM_LN_DP_RST_ST_STSr
#define WRITELN_RXTXCOM_LN_DP_RST_ST_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_RXTXCOM_LN_DP_RST_ST_STSr
#define WRITEALL_RXTXCOM_LN_DP_RST_ST_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_RXTXCOM_LN_DP_RST_ST_STSr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_DP_RST_ST_STSr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  RXTXCOM_MCST_MASK_CTL
 * BLOCKS:   RXTXCOM_CKRST_CTRL
 * REGADDR:  0xd0ba
 * DEVAD:    1
 * DESC:     RXTXCOM_MULTICAST_MASK_CONTROL
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     MULTICAST_MASK_CONTROL This masks the lane from a broadcast or multicast write operation.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_MCST_MASK_CTLr (0x0001d0ba | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_MCST_MASK_CTLr_SIZE 4

/*
 * This structure should be used to declare and program RXTXCOM_MCST_MASK_CTL.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_MCST_MASK_CTLr_s {
	uint32_t v[1];
	uint32_t rxtxcom_mcst_mask_ctl[1];
	uint32_t _rxtxcom_mcst_mask_ctl;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_MCST_MASK_CTLr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_MCST_MASK_CTLr_CLR(r) (r).rxtxcom_mcst_mask_ctl[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_MCST_MASK_CTLr_SET(r,d) (r).rxtxcom_mcst_mask_ctl[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_MCST_MASK_CTLr_GET(r) (r).rxtxcom_mcst_mask_ctl[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_MCST_MASK_CTLr_MULTICAST_MASK_CONTROLf_GET(r) (((r).rxtxcom_mcst_mask_ctl[0]) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_MCST_MASK_CTLr_MULTICAST_MASK_CONTROLf_SET(r,f) (r).rxtxcom_mcst_mask_ctl[0]=(((r).rxtxcom_mcst_mask_ctl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access RXTXCOM_MCST_MASK_CTL.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_RXTXCOM_MCST_MASK_CTLr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_MCST_MASK_CTLr,(_r._rxtxcom_mcst_mask_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_RXTXCOM_MCST_MASK_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_MCST_MASK_CTLr,(_r._rxtxcom_mcst_mask_ctl)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_RXTXCOM_MCST_MASK_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_MCST_MASK_CTLr,(_r._rxtxcom_mcst_mask_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_RXTXCOM_MCST_MASK_CTLr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_MCST_MASK_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rxtxcom_mcst_mask_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_RXTXCOM_MCST_MASK_CTLr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_MCST_MASK_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rxtxcom_mcst_mask_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_RXTXCOM_MCST_MASK_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_MCST_MASK_CTLr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rxtxcom_mcst_mask_ctl))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RXTXCOM_MCST_MASK_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_MCST_MASK_CTLr
#define RXTXCOM_MCST_MASK_CTLr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_MCST_MASK_CTLr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_MCST_MASK_CTLr_t RXTXCOM_MCST_MASK_CTLr_t;
#define RXTXCOM_MCST_MASK_CTLr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_MCST_MASK_CTLr_CLR
#define RXTXCOM_MCST_MASK_CTLr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_MCST_MASK_CTLr_SET
#define RXTXCOM_MCST_MASK_CTLr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_MCST_MASK_CTLr_GET
#define RXTXCOM_MCST_MASK_CTLr_MULTICAST_MASK_CONTROLf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_MCST_MASK_CTLr_MULTICAST_MASK_CONTROLf_GET
#define RXTXCOM_MCST_MASK_CTLr_MULTICAST_MASK_CONTROLf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_MCST_MASK_CTLr_MULTICAST_MASK_CONTROLf_SET
#define READ_RXTXCOM_MCST_MASK_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_RXTXCOM_MCST_MASK_CTLr
#define WRITE_RXTXCOM_MCST_MASK_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_RXTXCOM_MCST_MASK_CTLr
#define MODIFY_RXTXCOM_MCST_MASK_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_RXTXCOM_MCST_MASK_CTLr
#define READLN_RXTXCOM_MCST_MASK_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_RXTXCOM_MCST_MASK_CTLr
#define WRITELN_RXTXCOM_MCST_MASK_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_RXTXCOM_MCST_MASK_CTLr
#define WRITEALL_RXTXCOM_MCST_MASK_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_RXTXCOM_MCST_MASK_CTLr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_MCST_MASK_CTLr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  RXTXCOM_OSR_MODE_STS_MC_MASK
 * BLOCKS:   RXTXCOM_CKRST_CTRL
 * REGADDR:  0xd0bb
 * DEVAD:    1
 * DESC:     RXTXCOM_OSR_MODE_STATUS_MC_MASK
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     OSR_MODE         OSR Mode status after the osr_mode_frc/frc_val mux.OSX1          4'd0     (NRZ mode and PAM4 mode)OSX2          4'd1     (NRZ mode and PAM4 mode)OSX4          4'd2     (NRZ mode only         )OSX2P5      4'd3     (NRZ mode only         )OSX21P25      4'd4     (NRZ mode only         )OSX16P5       4'd8     (NRZ mode only         )OSX20P625     4'd12    (NRZ mode only         )OSX8          4'd5     (NRZ mode only         )OSX16         4'd9     (NRZ mode only         )OSX32         4'd13    (NRZ mode only         )
 *     PAM4_MODE        PAM4 signalling mode status after the pam4_mode_frc/frc_val mux.NRZ OS modes  3'd0PAM4 OS modes 3'd1         (rx_pam4_er_mode reg field when 1'b1 is PAM4 ER mode and 1'b0 is PAM4 NR mode)Reserved      3'd2:3d7
 *     MULTICAST_MASK_CONTROL_STATUS Status of multicast mask control for masking lane from multicast write operation.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_OSR_MODE_STS_MC_MASKr (0x0001d0bb | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_OSR_MODE_STS_MC_MASKr_SIZE 4

/*
 * This structure should be used to declare and program RXTXCOM_OSR_MODE_STS_MC_MASK.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_OSR_MODE_STS_MC_MASKr_s {
	uint32_t v[1];
	uint32_t rxtxcom_osr_mode_sts_mc_mask[1];
	uint32_t _rxtxcom_osr_mode_sts_mc_mask;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_OSR_MODE_STS_MC_MASKr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_OSR_MODE_STS_MC_MASKr_CLR(r) (r).rxtxcom_osr_mode_sts_mc_mask[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_OSR_MODE_STS_MC_MASKr_SET(r,d) (r).rxtxcom_osr_mode_sts_mc_mask[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_OSR_MODE_STS_MC_MASKr_GET(r) (r).rxtxcom_osr_mode_sts_mc_mask[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_OSR_MODE_STS_MC_MASKr_MULTICAST_MASK_CONTROL_STATUSf_GET(r) ((((r).rxtxcom_osr_mode_sts_mc_mask[0]) >> 15) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_OSR_MODE_STS_MC_MASKr_MULTICAST_MASK_CONTROL_STATUSf_SET(r,f) (r).rxtxcom_osr_mode_sts_mc_mask[0]=(((r).rxtxcom_osr_mode_sts_mc_mask[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_OSR_MODE_STS_MC_MASKr_PAM4_MODEf_GET(r) ((((r).rxtxcom_osr_mode_sts_mc_mask[0]) >> 4) & 0x7)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_OSR_MODE_STS_MC_MASKr_PAM4_MODEf_SET(r,f) (r).rxtxcom_osr_mode_sts_mc_mask[0]=(((r).rxtxcom_osr_mode_sts_mc_mask[0] & ~((uint32_t)0x7 << 4)) | ((((uint32_t)f) & 0x7) << 4)) | (7 << (16 + 4))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_OSR_MODE_STS_MC_MASKr_OSR_MODEf_GET(r) (((r).rxtxcom_osr_mode_sts_mc_mask[0]) & 0xf)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_OSR_MODE_STS_MC_MASKr_OSR_MODEf_SET(r,f) (r).rxtxcom_osr_mode_sts_mc_mask[0]=(((r).rxtxcom_osr_mode_sts_mc_mask[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf)) | (0xf << 16)

/*
 * These macros can be used to access RXTXCOM_OSR_MODE_STS_MC_MASK.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_RXTXCOM_OSR_MODE_STS_MC_MASKr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_OSR_MODE_STS_MC_MASKr,(_r._rxtxcom_osr_mode_sts_mc_mask))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_RXTXCOM_OSR_MODE_STS_MC_MASKr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_OSR_MODE_STS_MC_MASKr,(_r._rxtxcom_osr_mode_sts_mc_mask)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_RXTXCOM_OSR_MODE_STS_MC_MASKr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_OSR_MODE_STS_MC_MASKr,(_r._rxtxcom_osr_mode_sts_mc_mask))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_RXTXCOM_OSR_MODE_STS_MC_MASKr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_OSR_MODE_STS_MC_MASKr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rxtxcom_osr_mode_sts_mc_mask))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_RXTXCOM_OSR_MODE_STS_MC_MASKr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_OSR_MODE_STS_MC_MASKr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rxtxcom_osr_mode_sts_mc_mask))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_RXTXCOM_OSR_MODE_STS_MC_MASKr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_OSR_MODE_STS_MC_MASKr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rxtxcom_osr_mode_sts_mc_mask))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RXTXCOM_OSR_MODE_STS_MC_MASKr BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_OSR_MODE_STS_MC_MASKr
#define RXTXCOM_OSR_MODE_STS_MC_MASKr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_OSR_MODE_STS_MC_MASKr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_OSR_MODE_STS_MC_MASKr_t RXTXCOM_OSR_MODE_STS_MC_MASKr_t;
#define RXTXCOM_OSR_MODE_STS_MC_MASKr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_OSR_MODE_STS_MC_MASKr_CLR
#define RXTXCOM_OSR_MODE_STS_MC_MASKr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_OSR_MODE_STS_MC_MASKr_SET
#define RXTXCOM_OSR_MODE_STS_MC_MASKr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_OSR_MODE_STS_MC_MASKr_GET
#define RXTXCOM_OSR_MODE_STS_MC_MASKr_MULTICAST_MASK_CONTROL_STATUSf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_OSR_MODE_STS_MC_MASKr_MULTICAST_MASK_CONTROL_STATUSf_GET
#define RXTXCOM_OSR_MODE_STS_MC_MASKr_MULTICAST_MASK_CONTROL_STATUSf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_OSR_MODE_STS_MC_MASKr_MULTICAST_MASK_CONTROL_STATUSf_SET
#define RXTXCOM_OSR_MODE_STS_MC_MASKr_PAM4_MODEf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_OSR_MODE_STS_MC_MASKr_PAM4_MODEf_GET
#define RXTXCOM_OSR_MODE_STS_MC_MASKr_PAM4_MODEf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_OSR_MODE_STS_MC_MASKr_PAM4_MODEf_SET
#define RXTXCOM_OSR_MODE_STS_MC_MASKr_OSR_MODEf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_OSR_MODE_STS_MC_MASKr_OSR_MODEf_GET
#define RXTXCOM_OSR_MODE_STS_MC_MASKr_OSR_MODEf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_OSR_MODE_STS_MC_MASKr_OSR_MODEf_SET
#define READ_RXTXCOM_OSR_MODE_STS_MC_MASKr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_RXTXCOM_OSR_MODE_STS_MC_MASKr
#define WRITE_RXTXCOM_OSR_MODE_STS_MC_MASKr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_RXTXCOM_OSR_MODE_STS_MC_MASKr
#define MODIFY_RXTXCOM_OSR_MODE_STS_MC_MASKr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_RXTXCOM_OSR_MODE_STS_MC_MASKr
#define READLN_RXTXCOM_OSR_MODE_STS_MC_MASKr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_RXTXCOM_OSR_MODE_STS_MC_MASKr
#define WRITELN_RXTXCOM_OSR_MODE_STS_MC_MASKr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_RXTXCOM_OSR_MODE_STS_MC_MASKr
#define WRITEALL_RXTXCOM_OSR_MODE_STS_MC_MASKr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_RXTXCOM_OSR_MODE_STS_MC_MASKr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_OSR_MODE_STS_MC_MASKr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  RXTXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STS
 * BLOCKS:   RXTXCOM_CKRST_CTRL
 * REGADDR:  0xd0bc
 * DEVAD:    1
 * DESC:     RXTXCOM_AFE_RESET_PWRDN_OSR_MODE_PIN_STATUS
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     OSR_MODE_PIN     Indicates the status of the pmd_osr_mode input pin.Decoding of pmd_osr_mode[3:0] pin and osr_mode registers are as follows.OSX1          4'd0     (NRZ mode and PAM4 mode)OSX2          4'd1     (NRZ mode and PAM4 mode)OSX4          4'd2     (NRZ mode only         )OSX2P5      4'd3     (NRZ mode only         )OSX21P25      4'd4     (NRZ mode only         )OSX16P5       4'd8     (NRZ mode only         )OSX20P625     4'd12    (NRZ mode only         )OSX8          4'd5     (NRZ mode only         )OSX16         4'd9     (NRZ mode only         )OSX32         4'd13    (NRZ mode only         )
 *     PAM4_MODE_PIN    Indicates the status of the pmd_pam4_mode input pin.Decoding of pmd_pam4_mode[2:0] pin and pam4_mode registers are as follows.NRZ OS modes  3'd0PAM4 OS modes 3'd1         (rx_pam4_er_mode reg field when 1'b1 is PAM4 ER mode and 1'b0 is PAM4 NR mode)Reserved      3'd2:3d7
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr (0x0001d0bc | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_SIZE 4

/*
 * This structure should be used to declare and program RXTXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STS.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_s {
	uint32_t v[1];
	uint32_t rxtxcom_afe_rst_pwrdn_osr_mode_pin_sts[1];
	uint32_t _rxtxcom_afe_rst_pwrdn_osr_mode_pin_sts;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_CLR(r) (r).rxtxcom_afe_rst_pwrdn_osr_mode_pin_sts[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_SET(r,d) (r).rxtxcom_afe_rst_pwrdn_osr_mode_pin_sts[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_GET(r) (r).rxtxcom_afe_rst_pwrdn_osr_mode_pin_sts[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_PAM4_MODE_PINf_GET(r) ((((r).rxtxcom_afe_rst_pwrdn_osr_mode_pin_sts[0]) >> 4) & 0x7)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_PAM4_MODE_PINf_SET(r,f) (r).rxtxcom_afe_rst_pwrdn_osr_mode_pin_sts[0]=(((r).rxtxcom_afe_rst_pwrdn_osr_mode_pin_sts[0] & ~((uint32_t)0x7 << 4)) | ((((uint32_t)f) & 0x7) << 4)) | (7 << (16 + 4))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_OSR_MODE_PINf_GET(r) (((r).rxtxcom_afe_rst_pwrdn_osr_mode_pin_sts[0]) & 0xf)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_OSR_MODE_PINf_SET(r,f) (r).rxtxcom_afe_rst_pwrdn_osr_mode_pin_sts[0]=(((r).rxtxcom_afe_rst_pwrdn_osr_mode_pin_sts[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf)) | (0xf << 16)

/*
 * These macros can be used to access RXTXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STS.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_RXTXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr,(_r._rxtxcom_afe_rst_pwrdn_osr_mode_pin_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_RXTXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr,(_r._rxtxcom_afe_rst_pwrdn_osr_mode_pin_sts)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_RXTXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr,(_r._rxtxcom_afe_rst_pwrdn_osr_mode_pin_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_RXTXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rxtxcom_afe_rst_pwrdn_osr_mode_pin_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_RXTXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rxtxcom_afe_rst_pwrdn_osr_mode_pin_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_RXTXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rxtxcom_afe_rst_pwrdn_osr_mode_pin_sts))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RXTXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr
#define RXTXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_t RXTXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_t;
#define RXTXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_CLR
#define RXTXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_SET
#define RXTXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_GET
#define RXTXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_PAM4_MODE_PINf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_PAM4_MODE_PINf_GET
#define RXTXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_PAM4_MODE_PINf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_PAM4_MODE_PINf_SET
#define RXTXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_OSR_MODE_PINf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_OSR_MODE_PINf_GET
#define RXTXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_OSR_MODE_PINf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_OSR_MODE_PINf_SET
#define READ_RXTXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_RXTXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr
#define WRITE_RXTXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_RXTXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr
#define MODIFY_RXTXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_RXTXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr
#define READLN_RXTXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_RXTXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr
#define WRITELN_RXTXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_RXTXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr
#define WRITEALL_RXTXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_RXTXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  RXTXCOM_LN_S_RSTB_CTL
 * BLOCKS:   RXTXCOM_CKRST_CTRL
 * REGADDR:  0xd0be
 * DEVAD:    1
 * DESC:     RXTXCOM_LN_S_RSTB_CONTROL
 * RESETVAL: 0x1 (1)
 * ACCESS:   R/W
 * FIELDS:
 *     LN_S_RSTB        Active Low Lane Soft Reset. If asserted by writing to 1'b0 will reset the registers and datapath for a lane.This soft reset is equivalent to the hard reset input pin pmd_ln_h_rstb_i.
 *     HW_FW_HANDSHAKE_DISABLE 1: disables the HW-FW handshake logic for the TX lane which means there is no acknowledgement required from uC and lane reset will be de-asserted once reset register/pin conditions are de-asserted.This register bit is unused in RX lane.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_S_RSTB_CTLr (0x0001d0be | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_S_RSTB_CTLr_SIZE 4

/*
 * This structure should be used to declare and program RXTXCOM_LN_S_RSTB_CTL.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_S_RSTB_CTLr_s {
	uint32_t v[1];
	uint32_t rxtxcom_ln_s_rstb_ctl[1];
	uint32_t _rxtxcom_ln_s_rstb_ctl;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_S_RSTB_CTLr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_S_RSTB_CTLr_CLR(r) (r).rxtxcom_ln_s_rstb_ctl[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_S_RSTB_CTLr_SET(r,d) (r).rxtxcom_ln_s_rstb_ctl[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_S_RSTB_CTLr_GET(r) (r).rxtxcom_ln_s_rstb_ctl[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_S_RSTB_CTLr_HW_FW_HANDSHAKE_DISABLEf_GET(r) ((((r).rxtxcom_ln_s_rstb_ctl[0]) >> 1) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_S_RSTB_CTLr_HW_FW_HANDSHAKE_DISABLEf_SET(r,f) (r).rxtxcom_ln_s_rstb_ctl[0]=(((r).rxtxcom_ln_s_rstb_ctl[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_S_RSTB_CTLr_LN_S_RSTBf_GET(r) (((r).rxtxcom_ln_s_rstb_ctl[0]) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_S_RSTB_CTLr_LN_S_RSTBf_SET(r,f) (r).rxtxcom_ln_s_rstb_ctl[0]=(((r).rxtxcom_ln_s_rstb_ctl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access RXTXCOM_LN_S_RSTB_CTL.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_RXTXCOM_LN_S_RSTB_CTLr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_S_RSTB_CTLr,(_r._rxtxcom_ln_s_rstb_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_RXTXCOM_LN_S_RSTB_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_S_RSTB_CTLr,(_r._rxtxcom_ln_s_rstb_ctl)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_RXTXCOM_LN_S_RSTB_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_S_RSTB_CTLr,(_r._rxtxcom_ln_s_rstb_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_RXTXCOM_LN_S_RSTB_CTLr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_S_RSTB_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rxtxcom_ln_s_rstb_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_RXTXCOM_LN_S_RSTB_CTLr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_S_RSTB_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rxtxcom_ln_s_rstb_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_RXTXCOM_LN_S_RSTB_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_S_RSTB_CTLr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rxtxcom_ln_s_rstb_ctl))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RXTXCOM_LN_S_RSTB_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_S_RSTB_CTLr
#define RXTXCOM_LN_S_RSTB_CTLr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_S_RSTB_CTLr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_S_RSTB_CTLr_t RXTXCOM_LN_S_RSTB_CTLr_t;
#define RXTXCOM_LN_S_RSTB_CTLr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_S_RSTB_CTLr_CLR
#define RXTXCOM_LN_S_RSTB_CTLr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_S_RSTB_CTLr_SET
#define RXTXCOM_LN_S_RSTB_CTLr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_S_RSTB_CTLr_GET
#define RXTXCOM_LN_S_RSTB_CTLr_HW_FW_HANDSHAKE_DISABLEf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_S_RSTB_CTLr_HW_FW_HANDSHAKE_DISABLEf_GET
#define RXTXCOM_LN_S_RSTB_CTLr_HW_FW_HANDSHAKE_DISABLEf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_S_RSTB_CTLr_HW_FW_HANDSHAKE_DISABLEf_SET
#define RXTXCOM_LN_S_RSTB_CTLr_LN_S_RSTBf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_S_RSTB_CTLr_LN_S_RSTBf_GET
#define RXTXCOM_LN_S_RSTB_CTLr_LN_S_RSTBf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_S_RSTB_CTLr_LN_S_RSTBf_SET
#define READ_RXTXCOM_LN_S_RSTB_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_RXTXCOM_LN_S_RSTB_CTLr
#define WRITE_RXTXCOM_LN_S_RSTB_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_RXTXCOM_LN_S_RSTB_CTLr
#define MODIFY_RXTXCOM_LN_S_RSTB_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_RXTXCOM_LN_S_RSTB_CTLr
#define READLN_RXTXCOM_LN_S_RSTB_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_RXTXCOM_LN_S_RSTB_CTLr
#define WRITELN_RXTXCOM_LN_S_RSTB_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_RXTXCOM_LN_S_RSTB_CTLr
#define WRITEALL_RXTXCOM_LN_S_RSTB_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_RXTXCOM_LN_S_RSTB_CTLr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_RXTXCOM_LN_S_RSTB_CTLr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  AMS_RX_RX_CTL0
 * BLOCKS:   AMS_RX
 * REGADDR:  0xd0c0
 * DEVAD:    1
 * DESC:     AMS RX CONTROL_0
 * RESETVAL: 0x2402 (9218)
 * ACCESS:   R/W
 * FIELDS:
 *     RESERVED_AMS_RX_2 Reserved bitsmust not be written to. A read returns an unknown value
 *     AMS_RX_TESTCLK_MUX Selects between local test clock defined by rx_ctrl<93:92>, and from adjacent lane, 0 = local, 1 = adjacent amsbus ctrl_out  3:3DFT_MUX
 *     RESERVED_AMS_RX_1 Reserved bitmust not be written to. A read returns an unknown value
 *     AMS_RX_RXCLK66_EN enables 66T clock amsbus ctrl_out  5:5DFT_MUX
 *     AMS_RX_TPORT_EN  output rx_rclk20 to PLL test port 0: disable 1: enable amsbus ctrl_out  6:6DFT_MUX
 *     RESERVED_AMS_RX_0 Reserved bitsmust not be written to. A read returns an unknown value
 *     AMS_RX_EQ2_DEQ3  MSB Gray-coded EQ2 peaking reduction for short channel in LR mode amsbus ctrl_out  14:14
 *     AMS_RX_EQ1_DEQ3  MSB Gray-coded EQ1 peaking reduction for short channel in LR mode amsbus ctrl_out  15:15
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL0r (0x0001d0c0 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL0r_SIZE 4

/*
 * This structure should be used to declare and program AMS_RX_RX_CTL0.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL0r_s {
	uint32_t v[1];
	uint32_t ams_rx_rx_ctl0[1];
	uint32_t _ams_rx_rx_ctl0;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL0r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL0r_CLR(r) (r).ams_rx_rx_ctl0[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL0r_SET(r,d) (r).ams_rx_rx_ctl0[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL0r_GET(r) (r).ams_rx_rx_ctl0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL0r_AMS_RX_EQ1_DEQ3f_GET(r) ((((r).ams_rx_rx_ctl0[0]) >> 15) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL0r_AMS_RX_EQ1_DEQ3f_SET(r,f) (r).ams_rx_rx_ctl0[0]=(((r).ams_rx_rx_ctl0[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL0r_AMS_RX_EQ2_DEQ3f_GET(r) ((((r).ams_rx_rx_ctl0[0]) >> 14) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL0r_AMS_RX_EQ2_DEQ3f_SET(r,f) (r).ams_rx_rx_ctl0[0]=(((r).ams_rx_rx_ctl0[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14)) | (1 << (16 + 14))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL0r_RESERVED_AMS_RX_0f_GET(r) ((((r).ams_rx_rx_ctl0[0]) >> 7) & 0x7f)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL0r_RESERVED_AMS_RX_0f_SET(r,f) (r).ams_rx_rx_ctl0[0]=(((r).ams_rx_rx_ctl0[0] & ~((uint32_t)0x7f << 7)) | ((((uint32_t)f) & 0x7f) << 7)) | (127 << (16 + 7))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL0r_AMS_RX_TPORT_ENf_GET(r) ((((r).ams_rx_rx_ctl0[0]) >> 6) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL0r_AMS_RX_TPORT_ENf_SET(r,f) (r).ams_rx_rx_ctl0[0]=(((r).ams_rx_rx_ctl0[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL0r_AMS_RX_RXCLK66_ENf_GET(r) ((((r).ams_rx_rx_ctl0[0]) >> 5) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL0r_AMS_RX_RXCLK66_ENf_SET(r,f) (r).ams_rx_rx_ctl0[0]=(((r).ams_rx_rx_ctl0[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL0r_RESERVED_AMS_RX_1f_GET(r) ((((r).ams_rx_rx_ctl0[0]) >> 4) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL0r_RESERVED_AMS_RX_1f_SET(r,f) (r).ams_rx_rx_ctl0[0]=(((r).ams_rx_rx_ctl0[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL0r_AMS_RX_TESTCLK_MUXf_GET(r) ((((r).ams_rx_rx_ctl0[0]) >> 3) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL0r_AMS_RX_TESTCLK_MUXf_SET(r,f) (r).ams_rx_rx_ctl0[0]=(((r).ams_rx_rx_ctl0[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL0r_RESERVED_AMS_RX_2f_GET(r) (((r).ams_rx_rx_ctl0[0]) & 0x7)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL0r_RESERVED_AMS_RX_2f_SET(r,f) (r).ams_rx_rx_ctl0[0]=(((r).ams_rx_rx_ctl0[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7)) | (0x7 << 16)

/*
 * These macros can be used to access AMS_RX_RX_CTL0.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_AMS_RX_RX_CTL0r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL0r,(_r._ams_rx_rx_ctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_AMS_RX_RX_CTL0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL0r,(_r._ams_rx_rx_ctl0)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_AMS_RX_RX_CTL0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL0r,(_r._ams_rx_rx_ctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_AMS_RX_RX_CTL0r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_rx_rx_ctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_AMS_RX_RX_CTL0r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_rx_rx_ctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_AMS_RX_RX_CTL0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._ams_rx_rx_ctl0))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AMS_RX_RX_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL0r
#define AMS_RX_RX_CTL0r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL0r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL0r_t AMS_RX_RX_CTL0r_t;
#define AMS_RX_RX_CTL0r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL0r_CLR
#define AMS_RX_RX_CTL0r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL0r_SET
#define AMS_RX_RX_CTL0r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL0r_GET
#define AMS_RX_RX_CTL0r_AMS_RX_EQ1_DEQ3f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL0r_AMS_RX_EQ1_DEQ3f_GET
#define AMS_RX_RX_CTL0r_AMS_RX_EQ1_DEQ3f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL0r_AMS_RX_EQ1_DEQ3f_SET
#define AMS_RX_RX_CTL0r_AMS_RX_EQ2_DEQ3f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL0r_AMS_RX_EQ2_DEQ3f_GET
#define AMS_RX_RX_CTL0r_AMS_RX_EQ2_DEQ3f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL0r_AMS_RX_EQ2_DEQ3f_SET
#define AMS_RX_RX_CTL0r_RESERVED_AMS_RX_0f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL0r_RESERVED_AMS_RX_0f_GET
#define AMS_RX_RX_CTL0r_RESERVED_AMS_RX_0f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL0r_RESERVED_AMS_RX_0f_SET
#define AMS_RX_RX_CTL0r_AMS_RX_TPORT_ENf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL0r_AMS_RX_TPORT_ENf_GET
#define AMS_RX_RX_CTL0r_AMS_RX_TPORT_ENf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL0r_AMS_RX_TPORT_ENf_SET
#define AMS_RX_RX_CTL0r_AMS_RX_RXCLK66_ENf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL0r_AMS_RX_RXCLK66_ENf_GET
#define AMS_RX_RX_CTL0r_AMS_RX_RXCLK66_ENf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL0r_AMS_RX_RXCLK66_ENf_SET
#define AMS_RX_RX_CTL0r_RESERVED_AMS_RX_1f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL0r_RESERVED_AMS_RX_1f_GET
#define AMS_RX_RX_CTL0r_RESERVED_AMS_RX_1f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL0r_RESERVED_AMS_RX_1f_SET
#define AMS_RX_RX_CTL0r_AMS_RX_TESTCLK_MUXf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL0r_AMS_RX_TESTCLK_MUXf_GET
#define AMS_RX_RX_CTL0r_AMS_RX_TESTCLK_MUXf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL0r_AMS_RX_TESTCLK_MUXf_SET
#define AMS_RX_RX_CTL0r_RESERVED_AMS_RX_2f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL0r_RESERVED_AMS_RX_2f_GET
#define AMS_RX_RX_CTL0r_RESERVED_AMS_RX_2f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL0r_RESERVED_AMS_RX_2f_SET
#define READ_AMS_RX_RX_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_AMS_RX_RX_CTL0r
#define WRITE_AMS_RX_RX_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_AMS_RX_RX_CTL0r
#define MODIFY_AMS_RX_RX_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_AMS_RX_RX_CTL0r
#define READLN_AMS_RX_RX_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_AMS_RX_RX_CTL0r
#define WRITELN_AMS_RX_RX_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_AMS_RX_RX_CTL0r
#define WRITEALL_AMS_RX_RX_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_AMS_RX_RX_CTL0r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  AMS_RX_RX_CTL1
 * BLOCKS:   AMS_RX
 * REGADDR:  0xd0c1
 * DEVAD:    1
 * DESC:     AMS RX CONTROL_1
 * RESETVAL: 0x9130 (37168)
 * ACCESS:   R/W
 * FIELDS:
 *     AMS_RX_ANA_LPBK_EN Enable TX to RX analog loopback amsbus ctrl_out  16:16DFT_MUX
 *     RESERVED_AMS_RX_3 Reserved bitsmust not be written to. A read returns an unknown value
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL1r (0x0001d0c1 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL1r_SIZE 4

/*
 * This structure should be used to declare and program AMS_RX_RX_CTL1.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL1r_s {
	uint32_t v[1];
	uint32_t ams_rx_rx_ctl1[1];
	uint32_t _ams_rx_rx_ctl1;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL1r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL1r_CLR(r) (r).ams_rx_rx_ctl1[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL1r_SET(r,d) (r).ams_rx_rx_ctl1[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL1r_GET(r) (r).ams_rx_rx_ctl1[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL1r_RESERVED_AMS_RX_3f_GET(r) ((((r).ams_rx_rx_ctl1[0]) >> 1) & 0x7fff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL1r_RESERVED_AMS_RX_3f_SET(r,f) (r).ams_rx_rx_ctl1[0]=(((r).ams_rx_rx_ctl1[0] & ~((uint32_t)0x7fff << 1)) | ((((uint32_t)f) & 0x7fff) << 1)) | (32767 << (16 + 1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL1r_AMS_RX_ANA_LPBK_ENf_GET(r) (((r).ams_rx_rx_ctl1[0]) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL1r_AMS_RX_ANA_LPBK_ENf_SET(r,f) (r).ams_rx_rx_ctl1[0]=(((r).ams_rx_rx_ctl1[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access AMS_RX_RX_CTL1.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_AMS_RX_RX_CTL1r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL1r,(_r._ams_rx_rx_ctl1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_AMS_RX_RX_CTL1r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL1r,(_r._ams_rx_rx_ctl1)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_AMS_RX_RX_CTL1r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL1r,(_r._ams_rx_rx_ctl1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_AMS_RX_RX_CTL1r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_rx_rx_ctl1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_AMS_RX_RX_CTL1r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_rx_rx_ctl1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_AMS_RX_RX_CTL1r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL1r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._ams_rx_rx_ctl1))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AMS_RX_RX_CTL1r BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL1r
#define AMS_RX_RX_CTL1r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL1r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL1r_t AMS_RX_RX_CTL1r_t;
#define AMS_RX_RX_CTL1r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL1r_CLR
#define AMS_RX_RX_CTL1r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL1r_SET
#define AMS_RX_RX_CTL1r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL1r_GET
#define AMS_RX_RX_CTL1r_RESERVED_AMS_RX_3f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL1r_RESERVED_AMS_RX_3f_GET
#define AMS_RX_RX_CTL1r_RESERVED_AMS_RX_3f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL1r_RESERVED_AMS_RX_3f_SET
#define AMS_RX_RX_CTL1r_AMS_RX_ANA_LPBK_ENf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL1r_AMS_RX_ANA_LPBK_ENf_GET
#define AMS_RX_RX_CTL1r_AMS_RX_ANA_LPBK_ENf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL1r_AMS_RX_ANA_LPBK_ENf_SET
#define READ_AMS_RX_RX_CTL1r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_AMS_RX_RX_CTL1r
#define WRITE_AMS_RX_RX_CTL1r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_AMS_RX_RX_CTL1r
#define MODIFY_AMS_RX_RX_CTL1r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_AMS_RX_RX_CTL1r
#define READLN_AMS_RX_RX_CTL1r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_AMS_RX_RX_CTL1r
#define WRITELN_AMS_RX_RX_CTL1r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_AMS_RX_RX_CTL1r
#define WRITEALL_AMS_RX_RX_CTL1r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_AMS_RX_RX_CTL1r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL1r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  AMS_RX_RX_CTL2
 * BLOCKS:   AMS_RX
 * REGADDR:  0xd0c2
 * DEVAD:    1
 * DESC:     AMS RX CONTROL_2
 * RESETVAL: 0x8924 (35108)
 * ACCESS:   R/W
 * FIELDS:
 *     RESERVED_AMS_RX_4 Reserved bitsmust not be written to. A read returns an unknown value
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL2r (0x0001d0c2 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL2r_SIZE 4

/*
 * This structure should be used to declare and program AMS_RX_RX_CTL2.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL2r_s {
	uint32_t v[1];
	uint32_t ams_rx_rx_ctl2[1];
	uint32_t _ams_rx_rx_ctl2;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL2r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL2r_CLR(r) (r).ams_rx_rx_ctl2[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL2r_SET(r,d) (r).ams_rx_rx_ctl2[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL2r_GET(r) (r).ams_rx_rx_ctl2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL2r_RESERVED_AMS_RX_4f_GET(r) (((r).ams_rx_rx_ctl2[0]) & 0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL2r_RESERVED_AMS_RX_4f_SET(r,f) (r).ams_rx_rx_ctl2[0]=(((r).ams_rx_rx_ctl2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access AMS_RX_RX_CTL2.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_AMS_RX_RX_CTL2r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL2r,(_r._ams_rx_rx_ctl2))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_AMS_RX_RX_CTL2r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL2r,(_r._ams_rx_rx_ctl2)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_AMS_RX_RX_CTL2r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL2r,(_r._ams_rx_rx_ctl2))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_AMS_RX_RX_CTL2r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_rx_rx_ctl2))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_AMS_RX_RX_CTL2r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_rx_rx_ctl2))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_AMS_RX_RX_CTL2r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._ams_rx_rx_ctl2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AMS_RX_RX_CTL2r BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL2r
#define AMS_RX_RX_CTL2r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL2r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL2r_t AMS_RX_RX_CTL2r_t;
#define AMS_RX_RX_CTL2r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL2r_CLR
#define AMS_RX_RX_CTL2r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL2r_SET
#define AMS_RX_RX_CTL2r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL2r_GET
#define AMS_RX_RX_CTL2r_RESERVED_AMS_RX_4f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL2r_RESERVED_AMS_RX_4f_GET
#define AMS_RX_RX_CTL2r_RESERVED_AMS_RX_4f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL2r_RESERVED_AMS_RX_4f_SET
#define READ_AMS_RX_RX_CTL2r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_AMS_RX_RX_CTL2r
#define WRITE_AMS_RX_RX_CTL2r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_AMS_RX_RX_CTL2r
#define MODIFY_AMS_RX_RX_CTL2r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_AMS_RX_RX_CTL2r
#define READLN_AMS_RX_RX_CTL2r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_AMS_RX_RX_CTL2r
#define WRITELN_AMS_RX_RX_CTL2r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_AMS_RX_RX_CTL2r
#define WRITEALL_AMS_RX_RX_CTL2r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_AMS_RX_RX_CTL2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  AMS_RX_RX_CTL3
 * BLOCKS:   AMS_RX
 * REGADDR:  0xd0c3
 * DEVAD:    1
 * DESC:     AMS RX CONTROL_3
 * RESETVAL: 0x210 (528)
 * ACCESS:   R/W
 * FIELDS:
 *     RESERVED_AMS_RX_5 Reserved bitsmust not be written to. A read returns an unknown value
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL3r (0x0001d0c3 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL3r_SIZE 4

/*
 * This structure should be used to declare and program AMS_RX_RX_CTL3.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL3r_s {
	uint32_t v[1];
	uint32_t ams_rx_rx_ctl3[1];
	uint32_t _ams_rx_rx_ctl3;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL3r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL3r_CLR(r) (r).ams_rx_rx_ctl3[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL3r_SET(r,d) (r).ams_rx_rx_ctl3[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL3r_GET(r) (r).ams_rx_rx_ctl3[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL3r_RESERVED_AMS_RX_5f_GET(r) (((r).ams_rx_rx_ctl3[0]) & 0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL3r_RESERVED_AMS_RX_5f_SET(r,f) (r).ams_rx_rx_ctl3[0]=(((r).ams_rx_rx_ctl3[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access AMS_RX_RX_CTL3.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_AMS_RX_RX_CTL3r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL3r,(_r._ams_rx_rx_ctl3))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_AMS_RX_RX_CTL3r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL3r,(_r._ams_rx_rx_ctl3)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_AMS_RX_RX_CTL3r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL3r,(_r._ams_rx_rx_ctl3))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_AMS_RX_RX_CTL3r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL3r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_rx_rx_ctl3))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_AMS_RX_RX_CTL3r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL3r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_rx_rx_ctl3))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_AMS_RX_RX_CTL3r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL3r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._ams_rx_rx_ctl3))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AMS_RX_RX_CTL3r BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL3r
#define AMS_RX_RX_CTL3r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL3r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL3r_t AMS_RX_RX_CTL3r_t;
#define AMS_RX_RX_CTL3r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL3r_CLR
#define AMS_RX_RX_CTL3r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL3r_SET
#define AMS_RX_RX_CTL3r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL3r_GET
#define AMS_RX_RX_CTL3r_RESERVED_AMS_RX_5f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL3r_RESERVED_AMS_RX_5f_GET
#define AMS_RX_RX_CTL3r_RESERVED_AMS_RX_5f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL3r_RESERVED_AMS_RX_5f_SET
#define READ_AMS_RX_RX_CTL3r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_AMS_RX_RX_CTL3r
#define WRITE_AMS_RX_RX_CTL3r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_AMS_RX_RX_CTL3r
#define MODIFY_AMS_RX_RX_CTL3r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_AMS_RX_RX_CTL3r
#define READLN_AMS_RX_RX_CTL3r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_AMS_RX_RX_CTL3r
#define WRITELN_AMS_RX_RX_CTL3r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_AMS_RX_RX_CTL3r
#define WRITEALL_AMS_RX_RX_CTL3r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_AMS_RX_RX_CTL3r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL3r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  AMS_RX_RX_CTL4
 * BLOCKS:   AMS_RX
 * REGADDR:  0xd0c4
 * DEVAD:    1
 * DESC:     AMS RX CONTROL_4
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RESERVED_AMS_RX_6 Reserved bitsmust not be written to. A read returns an unknown value
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL4r (0x0001d0c4 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL4r_SIZE 4

/*
 * This structure should be used to declare and program AMS_RX_RX_CTL4.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL4r_s {
	uint32_t v[1];
	uint32_t ams_rx_rx_ctl4[1];
	uint32_t _ams_rx_rx_ctl4;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL4r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL4r_CLR(r) (r).ams_rx_rx_ctl4[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL4r_SET(r,d) (r).ams_rx_rx_ctl4[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL4r_GET(r) (r).ams_rx_rx_ctl4[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL4r_RESERVED_AMS_RX_6f_GET(r) (((r).ams_rx_rx_ctl4[0]) & 0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL4r_RESERVED_AMS_RX_6f_SET(r,f) (r).ams_rx_rx_ctl4[0]=(((r).ams_rx_rx_ctl4[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access AMS_RX_RX_CTL4.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_AMS_RX_RX_CTL4r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL4r,(_r._ams_rx_rx_ctl4))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_AMS_RX_RX_CTL4r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL4r,(_r._ams_rx_rx_ctl4)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_AMS_RX_RX_CTL4r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL4r,(_r._ams_rx_rx_ctl4))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_AMS_RX_RX_CTL4r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL4r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_rx_rx_ctl4))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_AMS_RX_RX_CTL4r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL4r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_rx_rx_ctl4))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_AMS_RX_RX_CTL4r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL4r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._ams_rx_rx_ctl4))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AMS_RX_RX_CTL4r BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL4r
#define AMS_RX_RX_CTL4r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL4r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL4r_t AMS_RX_RX_CTL4r_t;
#define AMS_RX_RX_CTL4r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL4r_CLR
#define AMS_RX_RX_CTL4r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL4r_SET
#define AMS_RX_RX_CTL4r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL4r_GET
#define AMS_RX_RX_CTL4r_RESERVED_AMS_RX_6f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL4r_RESERVED_AMS_RX_6f_GET
#define AMS_RX_RX_CTL4r_RESERVED_AMS_RX_6f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL4r_RESERVED_AMS_RX_6f_SET
#define READ_AMS_RX_RX_CTL4r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_AMS_RX_RX_CTL4r
#define WRITE_AMS_RX_RX_CTL4r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_AMS_RX_RX_CTL4r
#define MODIFY_AMS_RX_RX_CTL4r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_AMS_RX_RX_CTL4r
#define READLN_AMS_RX_RX_CTL4r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_AMS_RX_RX_CTL4r
#define WRITELN_AMS_RX_RX_CTL4r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_AMS_RX_RX_CTL4r
#define WRITEALL_AMS_RX_RX_CTL4r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_AMS_RX_RX_CTL4r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL4r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  AMS_RX_RX_CTL5
 * BLOCKS:   AMS_RX
 * REGADDR:  0xd0c5
 * DEVAD:    1
 * DESC:     AMS RX CONTROL_5
 * RESETVAL: 0xa000 (40960)
 * ACCESS:   R/W
 * FIELDS:
 *     RESERVED_AMS_RX_7 Reserved bitsmust not be written to. A read returns an unknown value
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL5r (0x0001d0c5 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL5r_SIZE 4

/*
 * This structure should be used to declare and program AMS_RX_RX_CTL5.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL5r_s {
	uint32_t v[1];
	uint32_t ams_rx_rx_ctl5[1];
	uint32_t _ams_rx_rx_ctl5;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL5r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL5r_CLR(r) (r).ams_rx_rx_ctl5[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL5r_SET(r,d) (r).ams_rx_rx_ctl5[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL5r_GET(r) (r).ams_rx_rx_ctl5[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL5r_RESERVED_AMS_RX_7f_GET(r) (((r).ams_rx_rx_ctl5[0]) & 0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL5r_RESERVED_AMS_RX_7f_SET(r,f) (r).ams_rx_rx_ctl5[0]=(((r).ams_rx_rx_ctl5[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access AMS_RX_RX_CTL5.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_AMS_RX_RX_CTL5r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL5r,(_r._ams_rx_rx_ctl5))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_AMS_RX_RX_CTL5r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL5r,(_r._ams_rx_rx_ctl5)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_AMS_RX_RX_CTL5r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL5r,(_r._ams_rx_rx_ctl5))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_AMS_RX_RX_CTL5r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL5r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_rx_rx_ctl5))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_AMS_RX_RX_CTL5r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL5r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_rx_rx_ctl5))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_AMS_RX_RX_CTL5r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL5r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._ams_rx_rx_ctl5))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AMS_RX_RX_CTL5r BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL5r
#define AMS_RX_RX_CTL5r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL5r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL5r_t AMS_RX_RX_CTL5r_t;
#define AMS_RX_RX_CTL5r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL5r_CLR
#define AMS_RX_RX_CTL5r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL5r_SET
#define AMS_RX_RX_CTL5r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL5r_GET
#define AMS_RX_RX_CTL5r_RESERVED_AMS_RX_7f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL5r_RESERVED_AMS_RX_7f_GET
#define AMS_RX_RX_CTL5r_RESERVED_AMS_RX_7f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL5r_RESERVED_AMS_RX_7f_SET
#define READ_AMS_RX_RX_CTL5r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_AMS_RX_RX_CTL5r
#define WRITE_AMS_RX_RX_CTL5r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_AMS_RX_RX_CTL5r
#define MODIFY_AMS_RX_RX_CTL5r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_AMS_RX_RX_CTL5r
#define READLN_AMS_RX_RX_CTL5r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_AMS_RX_RX_CTL5r
#define WRITELN_AMS_RX_RX_CTL5r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_AMS_RX_RX_CTL5r
#define WRITEALL_AMS_RX_RX_CTL5r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_AMS_RX_RX_CTL5r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL5r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  AMS_RX_RX_CTL6
 * BLOCKS:   AMS_RX
 * REGADDR:  0xd0c6
 * DEVAD:    1
 * DESC:     AMS RX CONTROL_6
 * RESETVAL: 0xc218 (49688)
 * ACCESS:   R/W
 * FIELDS:
 *     RESERVED_AMS_RX_9 Reserved bitsmust not be written to. A read returns an unknown value
 *     AMS_RX_RXCLK32_EN enables 32T clock amsbus ctrl_out  104:104DFT_MUX
 *     RESERVED_AMS_RX_8 Reserved bitsmust not be written to. A read returns an unknown value
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL6r (0x0001d0c6 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL6r_SIZE 4

/*
 * This structure should be used to declare and program AMS_RX_RX_CTL6.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL6r_s {
	uint32_t v[1];
	uint32_t ams_rx_rx_ctl6[1];
	uint32_t _ams_rx_rx_ctl6;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL6r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL6r_CLR(r) (r).ams_rx_rx_ctl6[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL6r_SET(r,d) (r).ams_rx_rx_ctl6[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL6r_GET(r) (r).ams_rx_rx_ctl6[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL6r_RESERVED_AMS_RX_8f_GET(r) ((((r).ams_rx_rx_ctl6[0]) >> 9) & 0x7f)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL6r_RESERVED_AMS_RX_8f_SET(r,f) (r).ams_rx_rx_ctl6[0]=(((r).ams_rx_rx_ctl6[0] & ~((uint32_t)0x7f << 9)) | ((((uint32_t)f) & 0x7f) << 9)) | (127 << (16 + 9))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL6r_AMS_RX_RXCLK32_ENf_GET(r) ((((r).ams_rx_rx_ctl6[0]) >> 8) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL6r_AMS_RX_RXCLK32_ENf_SET(r,f) (r).ams_rx_rx_ctl6[0]=(((r).ams_rx_rx_ctl6[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8)) | (1 << (16 + 8))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL6r_RESERVED_AMS_RX_9f_GET(r) (((r).ams_rx_rx_ctl6[0]) & 0xff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL6r_RESERVED_AMS_RX_9f_SET(r,f) (r).ams_rx_rx_ctl6[0]=(((r).ams_rx_rx_ctl6[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff)) | (0xff << 16)

/*
 * These macros can be used to access AMS_RX_RX_CTL6.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_AMS_RX_RX_CTL6r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL6r,(_r._ams_rx_rx_ctl6))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_AMS_RX_RX_CTL6r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL6r,(_r._ams_rx_rx_ctl6)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_AMS_RX_RX_CTL6r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL6r,(_r._ams_rx_rx_ctl6))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_AMS_RX_RX_CTL6r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL6r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_rx_rx_ctl6))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_AMS_RX_RX_CTL6r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL6r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_rx_rx_ctl6))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_AMS_RX_RX_CTL6r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL6r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._ams_rx_rx_ctl6))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AMS_RX_RX_CTL6r BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL6r
#define AMS_RX_RX_CTL6r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL6r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL6r_t AMS_RX_RX_CTL6r_t;
#define AMS_RX_RX_CTL6r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL6r_CLR
#define AMS_RX_RX_CTL6r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL6r_SET
#define AMS_RX_RX_CTL6r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL6r_GET
#define AMS_RX_RX_CTL6r_RESERVED_AMS_RX_8f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL6r_RESERVED_AMS_RX_8f_GET
#define AMS_RX_RX_CTL6r_RESERVED_AMS_RX_8f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL6r_RESERVED_AMS_RX_8f_SET
#define AMS_RX_RX_CTL6r_AMS_RX_RXCLK32_ENf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL6r_AMS_RX_RXCLK32_ENf_GET
#define AMS_RX_RX_CTL6r_AMS_RX_RXCLK32_ENf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL6r_AMS_RX_RXCLK32_ENf_SET
#define AMS_RX_RX_CTL6r_RESERVED_AMS_RX_9f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL6r_RESERVED_AMS_RX_9f_GET
#define AMS_RX_RX_CTL6r_RESERVED_AMS_RX_9f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL6r_RESERVED_AMS_RX_9f_SET
#define READ_AMS_RX_RX_CTL6r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_AMS_RX_RX_CTL6r
#define WRITE_AMS_RX_RX_CTL6r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_AMS_RX_RX_CTL6r
#define MODIFY_AMS_RX_RX_CTL6r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_AMS_RX_RX_CTL6r
#define READLN_AMS_RX_RX_CTL6r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_AMS_RX_RX_CTL6r
#define WRITELN_AMS_RX_RX_CTL6r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_AMS_RX_RX_CTL6r
#define WRITEALL_AMS_RX_RX_CTL6r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_AMS_RX_RX_CTL6r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL6r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  AMS_RX_RX_CTL7
 * BLOCKS:   AMS_RX
 * REGADDR:  0xd0c7
 * DEVAD:    1
 * DESC:     AMS RX CONTROL_7
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RESERVED_AMS_RX_10 Reserved bitsmust not be written to. A read returns an unknown value
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL7r (0x0001d0c7 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL7r_SIZE 4

/*
 * This structure should be used to declare and program AMS_RX_RX_CTL7.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL7r_s {
	uint32_t v[1];
	uint32_t ams_rx_rx_ctl7[1];
	uint32_t _ams_rx_rx_ctl7;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL7r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL7r_CLR(r) (r).ams_rx_rx_ctl7[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL7r_SET(r,d) (r).ams_rx_rx_ctl7[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL7r_GET(r) (r).ams_rx_rx_ctl7[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL7r_RESERVED_AMS_RX_10f_GET(r) (((r).ams_rx_rx_ctl7[0]) & 0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL7r_RESERVED_AMS_RX_10f_SET(r,f) (r).ams_rx_rx_ctl7[0]=(((r).ams_rx_rx_ctl7[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access AMS_RX_RX_CTL7.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_AMS_RX_RX_CTL7r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL7r,(_r._ams_rx_rx_ctl7))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_AMS_RX_RX_CTL7r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL7r,(_r._ams_rx_rx_ctl7)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_AMS_RX_RX_CTL7r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL7r,(_r._ams_rx_rx_ctl7))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_AMS_RX_RX_CTL7r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL7r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_rx_rx_ctl7))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_AMS_RX_RX_CTL7r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL7r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_rx_rx_ctl7))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_AMS_RX_RX_CTL7r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL7r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._ams_rx_rx_ctl7))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AMS_RX_RX_CTL7r BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL7r
#define AMS_RX_RX_CTL7r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL7r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL7r_t AMS_RX_RX_CTL7r_t;
#define AMS_RX_RX_CTL7r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL7r_CLR
#define AMS_RX_RX_CTL7r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL7r_SET
#define AMS_RX_RX_CTL7r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL7r_GET
#define AMS_RX_RX_CTL7r_RESERVED_AMS_RX_10f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL7r_RESERVED_AMS_RX_10f_GET
#define AMS_RX_RX_CTL7r_RESERVED_AMS_RX_10f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL7r_RESERVED_AMS_RX_10f_SET
#define READ_AMS_RX_RX_CTL7r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_AMS_RX_RX_CTL7r
#define WRITE_AMS_RX_RX_CTL7r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_AMS_RX_RX_CTL7r
#define MODIFY_AMS_RX_RX_CTL7r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_AMS_RX_RX_CTL7r
#define READLN_AMS_RX_RX_CTL7r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_AMS_RX_RX_CTL7r
#define WRITELN_AMS_RX_RX_CTL7r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_AMS_RX_RX_CTL7r
#define WRITEALL_AMS_RX_RX_CTL7r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_AMS_RX_RX_CTL7r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL7r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  AMS_RX_RX_CTL8
 * BLOCKS:   AMS_RX
 * REGADDR:  0xd0c8
 * DEVAD:    1
 * DESC:     AMS RX CONTROL_8
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RESERVED_AMS_RX_11 Reserved bitsmust not be written to. A read returns an unknown value
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL8r (0x0001d0c8 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL8r_SIZE 4

/*
 * This structure should be used to declare and program AMS_RX_RX_CTL8.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL8r_s {
	uint32_t v[1];
	uint32_t ams_rx_rx_ctl8[1];
	uint32_t _ams_rx_rx_ctl8;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL8r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL8r_CLR(r) (r).ams_rx_rx_ctl8[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL8r_SET(r,d) (r).ams_rx_rx_ctl8[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL8r_GET(r) (r).ams_rx_rx_ctl8[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL8r_RESERVED_AMS_RX_11f_GET(r) (((r).ams_rx_rx_ctl8[0]) & 0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL8r_RESERVED_AMS_RX_11f_SET(r,f) (r).ams_rx_rx_ctl8[0]=(((r).ams_rx_rx_ctl8[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access AMS_RX_RX_CTL8.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_AMS_RX_RX_CTL8r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL8r,(_r._ams_rx_rx_ctl8))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_AMS_RX_RX_CTL8r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL8r,(_r._ams_rx_rx_ctl8)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_AMS_RX_RX_CTL8r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL8r,(_r._ams_rx_rx_ctl8))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_AMS_RX_RX_CTL8r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL8r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_rx_rx_ctl8))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_AMS_RX_RX_CTL8r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL8r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_rx_rx_ctl8))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_AMS_RX_RX_CTL8r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL8r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._ams_rx_rx_ctl8))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AMS_RX_RX_CTL8r BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL8r
#define AMS_RX_RX_CTL8r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL8r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL8r_t AMS_RX_RX_CTL8r_t;
#define AMS_RX_RX_CTL8r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL8r_CLR
#define AMS_RX_RX_CTL8r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL8r_SET
#define AMS_RX_RX_CTL8r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL8r_GET
#define AMS_RX_RX_CTL8r_RESERVED_AMS_RX_11f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL8r_RESERVED_AMS_RX_11f_GET
#define AMS_RX_RX_CTL8r_RESERVED_AMS_RX_11f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL8r_RESERVED_AMS_RX_11f_SET
#define READ_AMS_RX_RX_CTL8r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_AMS_RX_RX_CTL8r
#define WRITE_AMS_RX_RX_CTL8r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_AMS_RX_RX_CTL8r
#define MODIFY_AMS_RX_RX_CTL8r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_AMS_RX_RX_CTL8r
#define READLN_AMS_RX_RX_CTL8r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_AMS_RX_RX_CTL8r
#define WRITELN_AMS_RX_RX_CTL8r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_AMS_RX_RX_CTL8r
#define WRITEALL_AMS_RX_RX_CTL8r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_AMS_RX_RX_CTL8r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL8r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  AMS_RX_RX_CTL9
 * BLOCKS:   AMS_RX
 * REGADDR:  0xd0c9
 * DEVAD:    1
 * DESC:     AMS RX CONTROL_9
 * RESETVAL: 0x440 (1088)
 * ACCESS:   R/W
 * FIELDS:
 *     RESERVED_AMS_RX_12 Reserved bitsmust not be written to. A read returns an unknown value
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL9r (0x0001d0c9 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL9r_SIZE 4

/*
 * This structure should be used to declare and program AMS_RX_RX_CTL9.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL9r_s {
	uint32_t v[1];
	uint32_t ams_rx_rx_ctl9[1];
	uint32_t _ams_rx_rx_ctl9;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL9r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL9r_CLR(r) (r).ams_rx_rx_ctl9[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL9r_SET(r,d) (r).ams_rx_rx_ctl9[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL9r_GET(r) (r).ams_rx_rx_ctl9[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL9r_RESERVED_AMS_RX_12f_GET(r) (((r).ams_rx_rx_ctl9[0]) & 0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL9r_RESERVED_AMS_RX_12f_SET(r,f) (r).ams_rx_rx_ctl9[0]=(((r).ams_rx_rx_ctl9[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access AMS_RX_RX_CTL9.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_AMS_RX_RX_CTL9r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL9r,(_r._ams_rx_rx_ctl9))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_AMS_RX_RX_CTL9r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL9r,(_r._ams_rx_rx_ctl9)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_AMS_RX_RX_CTL9r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL9r,(_r._ams_rx_rx_ctl9))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_AMS_RX_RX_CTL9r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL9r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_rx_rx_ctl9))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_AMS_RX_RX_CTL9r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL9r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_rx_rx_ctl9))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_AMS_RX_RX_CTL9r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL9r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._ams_rx_rx_ctl9))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AMS_RX_RX_CTL9r BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL9r
#define AMS_RX_RX_CTL9r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL9r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL9r_t AMS_RX_RX_CTL9r_t;
#define AMS_RX_RX_CTL9r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL9r_CLR
#define AMS_RX_RX_CTL9r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL9r_SET
#define AMS_RX_RX_CTL9r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL9r_GET
#define AMS_RX_RX_CTL9r_RESERVED_AMS_RX_12f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL9r_RESERVED_AMS_RX_12f_GET
#define AMS_RX_RX_CTL9r_RESERVED_AMS_RX_12f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL9r_RESERVED_AMS_RX_12f_SET
#define READ_AMS_RX_RX_CTL9r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_AMS_RX_RX_CTL9r
#define WRITE_AMS_RX_RX_CTL9r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_AMS_RX_RX_CTL9r
#define MODIFY_AMS_RX_RX_CTL9r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_AMS_RX_RX_CTL9r
#define READLN_AMS_RX_RX_CTL9r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_AMS_RX_RX_CTL9r
#define WRITELN_AMS_RX_RX_CTL9r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_AMS_RX_RX_CTL9r
#define WRITEALL_AMS_RX_RX_CTL9r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_AMS_RX_RX_CTL9r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL9r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  AMS_RX_RX_CTL_10
 * BLOCKS:   AMS_RX
 * REGADDR:  0xd0ca
 * DEVAD:    1
 * DESC:     AMS RX CONTROL_10
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RESERVED_AMS_RX_13 Reserved bitsmust not be written to. A read returns an unknown value
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_10r (0x0001d0ca | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_10r_SIZE 4

/*
 * This structure should be used to declare and program AMS_RX_RX_CTL_10.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_10r_s {
	uint32_t v[1];
	uint32_t ams_rx_rx_ctl_10[1];
	uint32_t _ams_rx_rx_ctl_10;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_10r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_10r_CLR(r) (r).ams_rx_rx_ctl_10[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_10r_SET(r,d) (r).ams_rx_rx_ctl_10[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_10r_GET(r) (r).ams_rx_rx_ctl_10[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_10r_RESERVED_AMS_RX_13f_GET(r) (((r).ams_rx_rx_ctl_10[0]) & 0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_10r_RESERVED_AMS_RX_13f_SET(r,f) (r).ams_rx_rx_ctl_10[0]=(((r).ams_rx_rx_ctl_10[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access AMS_RX_RX_CTL_10.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_AMS_RX_RX_CTL_10r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_10r,(_r._ams_rx_rx_ctl_10))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_AMS_RX_RX_CTL_10r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_10r,(_r._ams_rx_rx_ctl_10)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_AMS_RX_RX_CTL_10r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_10r,(_r._ams_rx_rx_ctl_10))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_AMS_RX_RX_CTL_10r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_10r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_rx_rx_ctl_10))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_AMS_RX_RX_CTL_10r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_10r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_rx_rx_ctl_10))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_AMS_RX_RX_CTL_10r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_10r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._ams_rx_rx_ctl_10))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AMS_RX_RX_CTL_10r BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_10r
#define AMS_RX_RX_CTL_10r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_10r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_10r_t AMS_RX_RX_CTL_10r_t;
#define AMS_RX_RX_CTL_10r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_10r_CLR
#define AMS_RX_RX_CTL_10r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_10r_SET
#define AMS_RX_RX_CTL_10r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_10r_GET
#define AMS_RX_RX_CTL_10r_RESERVED_AMS_RX_13f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_10r_RESERVED_AMS_RX_13f_GET
#define AMS_RX_RX_CTL_10r_RESERVED_AMS_RX_13f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_10r_RESERVED_AMS_RX_13f_SET
#define READ_AMS_RX_RX_CTL_10r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_AMS_RX_RX_CTL_10r
#define WRITE_AMS_RX_RX_CTL_10r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_AMS_RX_RX_CTL_10r
#define MODIFY_AMS_RX_RX_CTL_10r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_AMS_RX_RX_CTL_10r
#define READLN_AMS_RX_RX_CTL_10r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_AMS_RX_RX_CTL_10r
#define WRITELN_AMS_RX_RX_CTL_10r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_AMS_RX_RX_CTL_10r
#define WRITEALL_AMS_RX_RX_CTL_10r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_AMS_RX_RX_CTL_10r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_10r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  AMS_RX_RX_CTL_11
 * BLOCKS:   AMS_RX
 * REGADDR:  0xd0cb
 * DEVAD:    1
 * DESC:     AMS RX CONTROL_11
 * RESETVAL: 0x40e0 (16608)
 * ACCESS:   R/W
 * FIELDS:
 *     RESERVED_AMS_RX_15 Reserved bitsmust not be written to. A read returns an unknown value
 *     AMS_RX_SIGDET_PWRDN Enable signal detector. 0: power up. 1: power down. Refer to AMS for more details. amsbus ctrl_out  179:179DFT_MUX
 *     AMS_RX_SIGDETECT_BYPASS Force signal detect output to be 1. Refer to AMS for more details. amsbus ctrl_out  180:180
 *     AMS_RX_RX_SIGDET_THRESHOLD Signal Detect threshold adjust, Gray code. Range 20mV to 160mV in steps of 10mV. Refer to AMS for more details. amsbus ctrl_out  184:181
 *     RESERVED_AMS_RX_14 Reserved bitsmust not be written to. A read returns an unknown value
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_11r (0x0001d0cb | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_11r_SIZE 4

/*
 * This structure should be used to declare and program AMS_RX_RX_CTL_11.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_11r_s {
	uint32_t v[1];
	uint32_t ams_rx_rx_ctl_11[1];
	uint32_t _ams_rx_rx_ctl_11;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_11r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_11r_CLR(r) (r).ams_rx_rx_ctl_11[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_11r_SET(r,d) (r).ams_rx_rx_ctl_11[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_11r_GET(r) (r).ams_rx_rx_ctl_11[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_11r_RESERVED_AMS_RX_14f_GET(r) ((((r).ams_rx_rx_ctl_11[0]) >> 9) & 0x7f)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_11r_RESERVED_AMS_RX_14f_SET(r,f) (r).ams_rx_rx_ctl_11[0]=(((r).ams_rx_rx_ctl_11[0] & ~((uint32_t)0x7f << 9)) | ((((uint32_t)f) & 0x7f) << 9)) | (127 << (16 + 9))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_11r_AMS_RX_RX_SIGDET_THRESHOLDf_GET(r) ((((r).ams_rx_rx_ctl_11[0]) >> 5) & 0xf)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_11r_AMS_RX_RX_SIGDET_THRESHOLDf_SET(r,f) (r).ams_rx_rx_ctl_11[0]=(((r).ams_rx_rx_ctl_11[0] & ~((uint32_t)0xf << 5)) | ((((uint32_t)f) & 0xf) << 5)) | (15 << (16 + 5))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_11r_AMS_RX_SIGDETECT_BYPASSf_GET(r) ((((r).ams_rx_rx_ctl_11[0]) >> 4) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_11r_AMS_RX_SIGDETECT_BYPASSf_SET(r,f) (r).ams_rx_rx_ctl_11[0]=(((r).ams_rx_rx_ctl_11[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_11r_AMS_RX_SIGDET_PWRDNf_GET(r) ((((r).ams_rx_rx_ctl_11[0]) >> 3) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_11r_AMS_RX_SIGDET_PWRDNf_SET(r,f) (r).ams_rx_rx_ctl_11[0]=(((r).ams_rx_rx_ctl_11[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_11r_RESERVED_AMS_RX_15f_GET(r) (((r).ams_rx_rx_ctl_11[0]) & 0x7)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_11r_RESERVED_AMS_RX_15f_SET(r,f) (r).ams_rx_rx_ctl_11[0]=(((r).ams_rx_rx_ctl_11[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7)) | (0x7 << 16)

/*
 * These macros can be used to access AMS_RX_RX_CTL_11.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_AMS_RX_RX_CTL_11r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_11r,(_r._ams_rx_rx_ctl_11))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_AMS_RX_RX_CTL_11r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_11r,(_r._ams_rx_rx_ctl_11)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_AMS_RX_RX_CTL_11r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_11r,(_r._ams_rx_rx_ctl_11))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_AMS_RX_RX_CTL_11r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_11r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_rx_rx_ctl_11))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_AMS_RX_RX_CTL_11r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_11r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_rx_rx_ctl_11))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_AMS_RX_RX_CTL_11r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_11r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._ams_rx_rx_ctl_11))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AMS_RX_RX_CTL_11r BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_11r
#define AMS_RX_RX_CTL_11r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_11r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_11r_t AMS_RX_RX_CTL_11r_t;
#define AMS_RX_RX_CTL_11r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_11r_CLR
#define AMS_RX_RX_CTL_11r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_11r_SET
#define AMS_RX_RX_CTL_11r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_11r_GET
#define AMS_RX_RX_CTL_11r_RESERVED_AMS_RX_14f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_11r_RESERVED_AMS_RX_14f_GET
#define AMS_RX_RX_CTL_11r_RESERVED_AMS_RX_14f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_11r_RESERVED_AMS_RX_14f_SET
#define AMS_RX_RX_CTL_11r_AMS_RX_RX_SIGDET_THRESHOLDf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_11r_AMS_RX_RX_SIGDET_THRESHOLDf_GET
#define AMS_RX_RX_CTL_11r_AMS_RX_RX_SIGDET_THRESHOLDf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_11r_AMS_RX_RX_SIGDET_THRESHOLDf_SET
#define AMS_RX_RX_CTL_11r_AMS_RX_SIGDETECT_BYPASSf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_11r_AMS_RX_SIGDETECT_BYPASSf_GET
#define AMS_RX_RX_CTL_11r_AMS_RX_SIGDETECT_BYPASSf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_11r_AMS_RX_SIGDETECT_BYPASSf_SET
#define AMS_RX_RX_CTL_11r_AMS_RX_SIGDET_PWRDNf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_11r_AMS_RX_SIGDET_PWRDNf_GET
#define AMS_RX_RX_CTL_11r_AMS_RX_SIGDET_PWRDNf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_11r_AMS_RX_SIGDET_PWRDNf_SET
#define AMS_RX_RX_CTL_11r_RESERVED_AMS_RX_15f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_11r_RESERVED_AMS_RX_15f_GET
#define AMS_RX_RX_CTL_11r_RESERVED_AMS_RX_15f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_11r_RESERVED_AMS_RX_15f_SET
#define READ_AMS_RX_RX_CTL_11r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_AMS_RX_RX_CTL_11r
#define WRITE_AMS_RX_RX_CTL_11r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_AMS_RX_RX_CTL_11r
#define MODIFY_AMS_RX_RX_CTL_11r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_AMS_RX_RX_CTL_11r
#define READLN_AMS_RX_RX_CTL_11r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_AMS_RX_RX_CTL_11r
#define WRITELN_AMS_RX_RX_CTL_11r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_AMS_RX_RX_CTL_11r
#define WRITEALL_AMS_RX_RX_CTL_11r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_AMS_RX_RX_CTL_11r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_11r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  AMS_RX_RX_CTL_12
 * BLOCKS:   AMS_RX
 * REGADDR:  0xd0cc
 * DEVAD:    1
 * DESC:     AMS RX CONTROL_12
 * RESETVAL: 0x80 (128)
 * ACCESS:   R/W
 * FIELDS:
 *     RESERVED_AMS_RX_16 Reserved bitsmust not be written to. A read returns an unknown value
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_12r (0x0001d0cc | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_12r_SIZE 4

/*
 * This structure should be used to declare and program AMS_RX_RX_CTL_12.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_12r_s {
	uint32_t v[1];
	uint32_t ams_rx_rx_ctl_12[1];
	uint32_t _ams_rx_rx_ctl_12;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_12r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_12r_CLR(r) (r).ams_rx_rx_ctl_12[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_12r_SET(r,d) (r).ams_rx_rx_ctl_12[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_12r_GET(r) (r).ams_rx_rx_ctl_12[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_12r_RESERVED_AMS_RX_16f_GET(r) (((r).ams_rx_rx_ctl_12[0]) & 0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_12r_RESERVED_AMS_RX_16f_SET(r,f) (r).ams_rx_rx_ctl_12[0]=(((r).ams_rx_rx_ctl_12[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access AMS_RX_RX_CTL_12.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_AMS_RX_RX_CTL_12r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_12r,(_r._ams_rx_rx_ctl_12))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_AMS_RX_RX_CTL_12r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_12r,(_r._ams_rx_rx_ctl_12)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_AMS_RX_RX_CTL_12r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_12r,(_r._ams_rx_rx_ctl_12))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_AMS_RX_RX_CTL_12r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_12r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_rx_rx_ctl_12))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_AMS_RX_RX_CTL_12r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_12r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_rx_rx_ctl_12))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_AMS_RX_RX_CTL_12r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_12r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._ams_rx_rx_ctl_12))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AMS_RX_RX_CTL_12r BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_12r
#define AMS_RX_RX_CTL_12r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_12r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_12r_t AMS_RX_RX_CTL_12r_t;
#define AMS_RX_RX_CTL_12r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_12r_CLR
#define AMS_RX_RX_CTL_12r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_12r_SET
#define AMS_RX_RX_CTL_12r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_12r_GET
#define AMS_RX_RX_CTL_12r_RESERVED_AMS_RX_16f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_12r_RESERVED_AMS_RX_16f_GET
#define AMS_RX_RX_CTL_12r_RESERVED_AMS_RX_16f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_12r_RESERVED_AMS_RX_16f_SET
#define READ_AMS_RX_RX_CTL_12r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_AMS_RX_RX_CTL_12r
#define WRITE_AMS_RX_RX_CTL_12r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_AMS_RX_RX_CTL_12r
#define MODIFY_AMS_RX_RX_CTL_12r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_AMS_RX_RX_CTL_12r
#define READLN_AMS_RX_RX_CTL_12r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_AMS_RX_RX_CTL_12r
#define WRITELN_AMS_RX_RX_CTL_12r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_AMS_RX_RX_CTL_12r
#define WRITEALL_AMS_RX_RX_CTL_12r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_AMS_RX_RX_CTL_12r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_12r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  AMS_RX_RX_CTL_13
 * BLOCKS:   AMS_RX
 * REGADDR:  0xd0cd
 * DEVAD:    1
 * DESC:     AMS RX CONTROL_13
 * RESETVAL: 0x8000 (32768)
 * ACCESS:   R/W
 * FIELDS:
 *     RESERVED_AMS_RX_17 Reserved bitsmust not be written to. A read returns an unknown value
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_13r (0x0001d0cd | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_13r_SIZE 4

/*
 * This structure should be used to declare and program AMS_RX_RX_CTL_13.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_13r_s {
	uint32_t v[1];
	uint32_t ams_rx_rx_ctl_13[1];
	uint32_t _ams_rx_rx_ctl_13;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_13r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_13r_CLR(r) (r).ams_rx_rx_ctl_13[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_13r_SET(r,d) (r).ams_rx_rx_ctl_13[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_13r_GET(r) (r).ams_rx_rx_ctl_13[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_13r_RESERVED_AMS_RX_17f_GET(r) (((r).ams_rx_rx_ctl_13[0]) & 0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_13r_RESERVED_AMS_RX_17f_SET(r,f) (r).ams_rx_rx_ctl_13[0]=(((r).ams_rx_rx_ctl_13[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access AMS_RX_RX_CTL_13.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_AMS_RX_RX_CTL_13r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_13r,(_r._ams_rx_rx_ctl_13))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_AMS_RX_RX_CTL_13r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_13r,(_r._ams_rx_rx_ctl_13)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_AMS_RX_RX_CTL_13r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_13r,(_r._ams_rx_rx_ctl_13))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_AMS_RX_RX_CTL_13r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_13r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_rx_rx_ctl_13))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_AMS_RX_RX_CTL_13r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_13r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_rx_rx_ctl_13))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_AMS_RX_RX_CTL_13r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_13r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._ams_rx_rx_ctl_13))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AMS_RX_RX_CTL_13r BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_13r
#define AMS_RX_RX_CTL_13r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_13r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_13r_t AMS_RX_RX_CTL_13r_t;
#define AMS_RX_RX_CTL_13r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_13r_CLR
#define AMS_RX_RX_CTL_13r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_13r_SET
#define AMS_RX_RX_CTL_13r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_13r_GET
#define AMS_RX_RX_CTL_13r_RESERVED_AMS_RX_17f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_13r_RESERVED_AMS_RX_17f_GET
#define AMS_RX_RX_CTL_13r_RESERVED_AMS_RX_17f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_13r_RESERVED_AMS_RX_17f_SET
#define READ_AMS_RX_RX_CTL_13r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_AMS_RX_RX_CTL_13r
#define WRITE_AMS_RX_RX_CTL_13r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_AMS_RX_RX_CTL_13r
#define MODIFY_AMS_RX_RX_CTL_13r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_AMS_RX_RX_CTL_13r
#define READLN_AMS_RX_RX_CTL_13r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_AMS_RX_RX_CTL_13r
#define WRITELN_AMS_RX_RX_CTL_13r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_AMS_RX_RX_CTL_13r
#define WRITEALL_AMS_RX_RX_CTL_13r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_AMS_RX_RX_CTL_13r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_13r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  AMS_RX_RX_CTL_14
 * BLOCKS:   AMS_RX
 * REGADDR:  0xd0ce
 * DEVAD:    1
 * DESC:     AMS RX CONTROL_14
 * RESETVAL: 0x8000 (32768)
 * ACCESS:   R/W
 * FIELDS:
 *     RESERVED_AMS_RX_18 Reserved bitsmust not be written to. A read returns an unknown value
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_14r (0x0001d0ce | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_14r_SIZE 4

/*
 * This structure should be used to declare and program AMS_RX_RX_CTL_14.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_14r_s {
	uint32_t v[1];
	uint32_t ams_rx_rx_ctl_14[1];
	uint32_t _ams_rx_rx_ctl_14;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_14r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_14r_CLR(r) (r).ams_rx_rx_ctl_14[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_14r_SET(r,d) (r).ams_rx_rx_ctl_14[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_14r_GET(r) (r).ams_rx_rx_ctl_14[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_14r_RESERVED_AMS_RX_18f_GET(r) (((r).ams_rx_rx_ctl_14[0]) & 0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_14r_RESERVED_AMS_RX_18f_SET(r,f) (r).ams_rx_rx_ctl_14[0]=(((r).ams_rx_rx_ctl_14[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access AMS_RX_RX_CTL_14.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_AMS_RX_RX_CTL_14r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_14r,(_r._ams_rx_rx_ctl_14))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_AMS_RX_RX_CTL_14r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_14r,(_r._ams_rx_rx_ctl_14)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_AMS_RX_RX_CTL_14r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_14r,(_r._ams_rx_rx_ctl_14))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_AMS_RX_RX_CTL_14r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_14r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_rx_rx_ctl_14))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_AMS_RX_RX_CTL_14r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_14r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_rx_rx_ctl_14))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_AMS_RX_RX_CTL_14r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_14r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._ams_rx_rx_ctl_14))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AMS_RX_RX_CTL_14r BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_14r
#define AMS_RX_RX_CTL_14r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_14r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_14r_t AMS_RX_RX_CTL_14r_t;
#define AMS_RX_RX_CTL_14r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_14r_CLR
#define AMS_RX_RX_CTL_14r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_14r_SET
#define AMS_RX_RX_CTL_14r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_14r_GET
#define AMS_RX_RX_CTL_14r_RESERVED_AMS_RX_18f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_14r_RESERVED_AMS_RX_18f_GET
#define AMS_RX_RX_CTL_14r_RESERVED_AMS_RX_18f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_14r_RESERVED_AMS_RX_18f_SET
#define READ_AMS_RX_RX_CTL_14r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_AMS_RX_RX_CTL_14r
#define WRITE_AMS_RX_RX_CTL_14r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_AMS_RX_RX_CTL_14r
#define MODIFY_AMS_RX_RX_CTL_14r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_AMS_RX_RX_CTL_14r
#define READLN_AMS_RX_RX_CTL_14r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_AMS_RX_RX_CTL_14r
#define WRITELN_AMS_RX_RX_CTL_14r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_AMS_RX_RX_CTL_14r
#define WRITEALL_AMS_RX_RX_CTL_14r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_AMS_RX_RX_CTL_14r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_RX_CTL_14r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  AMS_TX_TX_CTL0
 * BLOCKS:   AMS_TX
 * REGADDR:  0xd0d0
 * DEVAD:    1
 * DESC:     AMS TX CONTROL_0
 * RESETVAL: 0xc0 (192)
 * ACCESS:   R/W
 * FIELDS:
 *     AMS_TX_SKEW_PN   adjusts skew between TX P and N outputs, ~0.5ps per step amsbus ctrl_out  2:0
 *     AMS_TX_SKEW_POLARITY skew polarity 0=delay TX N, 1=delay TX P amsbus ctrl_out  3:3
 *     AMS_TX_SKEW_ENABLE skew enable amsbus ctrl_out  4:4
 *     RESERVED_AMS_TX_1 Reserved bitsmust not be written to. A read returns an unknown value
 *     AMS_TX_VDDR_BGB  vddr_bgb, bias mode control for LDO amsbus ctrl_out  8:8DFT_MUX
 *     RESERVED_AMS_TX_0 Reserved bitsmust not be written to. A read returns an unknown value
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL0r (0x0001d0d0 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL0r_SIZE 4

/*
 * This structure should be used to declare and program AMS_TX_TX_CTL0.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL0r_s {
	uint32_t v[1];
	uint32_t ams_tx_tx_ctl0[1];
	uint32_t _ams_tx_tx_ctl0;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL0r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL0r_CLR(r) (r).ams_tx_tx_ctl0[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL0r_SET(r,d) (r).ams_tx_tx_ctl0[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL0r_GET(r) (r).ams_tx_tx_ctl0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL0r_RESERVED_AMS_TX_0f_GET(r) ((((r).ams_tx_tx_ctl0[0]) >> 9) & 0x7f)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL0r_RESERVED_AMS_TX_0f_SET(r,f) (r).ams_tx_tx_ctl0[0]=(((r).ams_tx_tx_ctl0[0] & ~((uint32_t)0x7f << 9)) | ((((uint32_t)f) & 0x7f) << 9)) | (127 << (16 + 9))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL0r_AMS_TX_VDDR_BGBf_GET(r) ((((r).ams_tx_tx_ctl0[0]) >> 8) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL0r_AMS_TX_VDDR_BGBf_SET(r,f) (r).ams_tx_tx_ctl0[0]=(((r).ams_tx_tx_ctl0[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8)) | (1 << (16 + 8))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL0r_RESERVED_AMS_TX_1f_GET(r) ((((r).ams_tx_tx_ctl0[0]) >> 5) & 0x7)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL0r_RESERVED_AMS_TX_1f_SET(r,f) (r).ams_tx_tx_ctl0[0]=(((r).ams_tx_tx_ctl0[0] & ~((uint32_t)0x7 << 5)) | ((((uint32_t)f) & 0x7) << 5)) | (7 << (16 + 5))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL0r_AMS_TX_SKEW_ENABLEf_GET(r) ((((r).ams_tx_tx_ctl0[0]) >> 4) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL0r_AMS_TX_SKEW_ENABLEf_SET(r,f) (r).ams_tx_tx_ctl0[0]=(((r).ams_tx_tx_ctl0[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL0r_AMS_TX_SKEW_POLARITYf_GET(r) ((((r).ams_tx_tx_ctl0[0]) >> 3) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL0r_AMS_TX_SKEW_POLARITYf_SET(r,f) (r).ams_tx_tx_ctl0[0]=(((r).ams_tx_tx_ctl0[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL0r_AMS_TX_SKEW_PNf_GET(r) (((r).ams_tx_tx_ctl0[0]) & 0x7)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL0r_AMS_TX_SKEW_PNf_SET(r,f) (r).ams_tx_tx_ctl0[0]=(((r).ams_tx_tx_ctl0[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7)) | (0x7 << 16)

/*
 * These macros can be used to access AMS_TX_TX_CTL0.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_AMS_TX_TX_CTL0r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL0r,(_r._ams_tx_tx_ctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_AMS_TX_TX_CTL0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL0r,(_r._ams_tx_tx_ctl0)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_AMS_TX_TX_CTL0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL0r,(_r._ams_tx_tx_ctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_AMS_TX_TX_CTL0r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_tx_tx_ctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_AMS_TX_TX_CTL0r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_tx_tx_ctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_AMS_TX_TX_CTL0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._ams_tx_tx_ctl0))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AMS_TX_TX_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL0r
#define AMS_TX_TX_CTL0r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL0r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL0r_t AMS_TX_TX_CTL0r_t;
#define AMS_TX_TX_CTL0r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL0r_CLR
#define AMS_TX_TX_CTL0r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL0r_SET
#define AMS_TX_TX_CTL0r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL0r_GET
#define AMS_TX_TX_CTL0r_RESERVED_AMS_TX_0f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL0r_RESERVED_AMS_TX_0f_GET
#define AMS_TX_TX_CTL0r_RESERVED_AMS_TX_0f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL0r_RESERVED_AMS_TX_0f_SET
#define AMS_TX_TX_CTL0r_AMS_TX_VDDR_BGBf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL0r_AMS_TX_VDDR_BGBf_GET
#define AMS_TX_TX_CTL0r_AMS_TX_VDDR_BGBf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL0r_AMS_TX_VDDR_BGBf_SET
#define AMS_TX_TX_CTL0r_RESERVED_AMS_TX_1f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL0r_RESERVED_AMS_TX_1f_GET
#define AMS_TX_TX_CTL0r_RESERVED_AMS_TX_1f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL0r_RESERVED_AMS_TX_1f_SET
#define AMS_TX_TX_CTL0r_AMS_TX_SKEW_ENABLEf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL0r_AMS_TX_SKEW_ENABLEf_GET
#define AMS_TX_TX_CTL0r_AMS_TX_SKEW_ENABLEf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL0r_AMS_TX_SKEW_ENABLEf_SET
#define AMS_TX_TX_CTL0r_AMS_TX_SKEW_POLARITYf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL0r_AMS_TX_SKEW_POLARITYf_GET
#define AMS_TX_TX_CTL0r_AMS_TX_SKEW_POLARITYf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL0r_AMS_TX_SKEW_POLARITYf_SET
#define AMS_TX_TX_CTL0r_AMS_TX_SKEW_PNf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL0r_AMS_TX_SKEW_PNf_GET
#define AMS_TX_TX_CTL0r_AMS_TX_SKEW_PNf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL0r_AMS_TX_SKEW_PNf_SET
#define READ_AMS_TX_TX_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_AMS_TX_TX_CTL0r
#define WRITE_AMS_TX_TX_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_AMS_TX_TX_CTL0r
#define MODIFY_AMS_TX_TX_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_AMS_TX_TX_CTL0r
#define READLN_AMS_TX_TX_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_AMS_TX_TX_CTL0r
#define WRITELN_AMS_TX_TX_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_AMS_TX_TX_CTL0r
#define WRITEALL_AMS_TX_TX_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_AMS_TX_TX_CTL0r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  AMS_TX_TX_CTL1
 * BLOCKS:   AMS_TX
 * REGADDR:  0xd0d1
 * DEVAD:    1
 * DESC:     AMS TX CONTROL_1
 * RESETVAL: 0x924 (2340)
 * ACCESS:   R/W
 * FIELDS:
 *     RESERVED_AMS_TX_2 Reserved bitsmust not be written to. A read returns an unknown value
 *     AMS_TX_TXCLK66_EN enables the 66T clock. amsbus ctrl_out  28:28
 *     AMS_TX_TXCLK32_EN enables the 32T clock. amsbus ctrl_out  29:29
 *     AMS_TX_CKBUF_CALQ_L Skew adjustment control LSB for CK2TQ buffer. One step adjusts 100~200fs range of skew amsbus ctrl_out  31:30DFT_MUX
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL1r (0x0001d0d1 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL1r_SIZE 4

/*
 * This structure should be used to declare and program AMS_TX_TX_CTL1.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL1r_s {
	uint32_t v[1];
	uint32_t ams_tx_tx_ctl1[1];
	uint32_t _ams_tx_tx_ctl1;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL1r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL1r_CLR(r) (r).ams_tx_tx_ctl1[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL1r_SET(r,d) (r).ams_tx_tx_ctl1[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL1r_GET(r) (r).ams_tx_tx_ctl1[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL1r_AMS_TX_CKBUF_CALQ_Lf_GET(r) ((((r).ams_tx_tx_ctl1[0]) >> 14) & 0x3)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL1r_AMS_TX_CKBUF_CALQ_Lf_SET(r,f) (r).ams_tx_tx_ctl1[0]=(((r).ams_tx_tx_ctl1[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14)) | (3 << (16 + 14))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL1r_AMS_TX_TXCLK32_ENf_GET(r) ((((r).ams_tx_tx_ctl1[0]) >> 13) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL1r_AMS_TX_TXCLK32_ENf_SET(r,f) (r).ams_tx_tx_ctl1[0]=(((r).ams_tx_tx_ctl1[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13)) | (1 << (16 + 13))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL1r_AMS_TX_TXCLK66_ENf_GET(r) ((((r).ams_tx_tx_ctl1[0]) >> 12) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL1r_AMS_TX_TXCLK66_ENf_SET(r,f) (r).ams_tx_tx_ctl1[0]=(((r).ams_tx_tx_ctl1[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12)) | (1 << (16 + 12))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL1r_RESERVED_AMS_TX_2f_GET(r) (((r).ams_tx_tx_ctl1[0]) & 0xfff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL1r_RESERVED_AMS_TX_2f_SET(r,f) (r).ams_tx_tx_ctl1[0]=(((r).ams_tx_tx_ctl1[0] & ~((uint32_t)0xfff)) | (((uint32_t)f) & 0xfff)) | (0xfff << 16)

/*
 * These macros can be used to access AMS_TX_TX_CTL1.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_AMS_TX_TX_CTL1r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL1r,(_r._ams_tx_tx_ctl1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_AMS_TX_TX_CTL1r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL1r,(_r._ams_tx_tx_ctl1)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_AMS_TX_TX_CTL1r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL1r,(_r._ams_tx_tx_ctl1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_AMS_TX_TX_CTL1r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_tx_tx_ctl1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_AMS_TX_TX_CTL1r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_tx_tx_ctl1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_AMS_TX_TX_CTL1r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL1r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._ams_tx_tx_ctl1))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AMS_TX_TX_CTL1r BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL1r
#define AMS_TX_TX_CTL1r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL1r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL1r_t AMS_TX_TX_CTL1r_t;
#define AMS_TX_TX_CTL1r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL1r_CLR
#define AMS_TX_TX_CTL1r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL1r_SET
#define AMS_TX_TX_CTL1r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL1r_GET
#define AMS_TX_TX_CTL1r_AMS_TX_CKBUF_CALQ_Lf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL1r_AMS_TX_CKBUF_CALQ_Lf_GET
#define AMS_TX_TX_CTL1r_AMS_TX_CKBUF_CALQ_Lf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL1r_AMS_TX_CKBUF_CALQ_Lf_SET
#define AMS_TX_TX_CTL1r_AMS_TX_TXCLK32_ENf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL1r_AMS_TX_TXCLK32_ENf_GET
#define AMS_TX_TX_CTL1r_AMS_TX_TXCLK32_ENf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL1r_AMS_TX_TXCLK32_ENf_SET
#define AMS_TX_TX_CTL1r_AMS_TX_TXCLK66_ENf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL1r_AMS_TX_TXCLK66_ENf_GET
#define AMS_TX_TX_CTL1r_AMS_TX_TXCLK66_ENf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL1r_AMS_TX_TXCLK66_ENf_SET
#define AMS_TX_TX_CTL1r_RESERVED_AMS_TX_2f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL1r_RESERVED_AMS_TX_2f_GET
#define AMS_TX_TX_CTL1r_RESERVED_AMS_TX_2f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL1r_RESERVED_AMS_TX_2f_SET
#define READ_AMS_TX_TX_CTL1r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_AMS_TX_TX_CTL1r
#define WRITE_AMS_TX_TX_CTL1r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_AMS_TX_TX_CTL1r
#define MODIFY_AMS_TX_TX_CTL1r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_AMS_TX_TX_CTL1r
#define READLN_AMS_TX_TX_CTL1r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_AMS_TX_TX_CTL1r
#define WRITELN_AMS_TX_TX_CTL1r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_AMS_TX_TX_CTL1r
#define WRITEALL_AMS_TX_TX_CTL1r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_AMS_TX_TX_CTL1r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL1r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  AMS_TX_TX_CTL2
 * BLOCKS:   AMS_TX
 * REGADDR:  0xd0d2
 * DEVAD:    1
 * DESC:     AMS TX CONTROL_2
 * RESETVAL: 0x200 (512)
 * ACCESS:   R/W
 * FIELDS:
 *     AMS_TX_CKBUF_CALQ_H Skew adjustment control MSB for CK2TQ buffer. One step adjusts 100~200fs range of skew amsbus ctrl_out  32:32DFT_MUX
 *     AMS_TX_CKBUF_CALI Skew adjustment control for CK2TI buffer. One step adjusts 100~200fs range of skew. amsbus ctrl_out  35:33DFT_MUX
 *     AMS_TX_TEST_DATA generates output pattern, refer to AMS for more details amsbus ctrl_out  37:36
 *     AMS_TX_LPBK_MODE Shift the odd or even data,00: No shift,01: odd shifted by 90,10: even shifted by 90. amsbus ctrl_out  39:38
 *     AMS_TX_CKBUF_CM_CTRL Output resistance control for 2T clock channel driver amsbus ctrl_out  42:40DFT_MUX
 *     AMS_TX_CAL_CLKCHNL_QN Skew adjustment control for CK2TQN channel. One step adjusts 100~200fs range of skew. Each TX core control should be used for a dedicated channel. amsbus ctrl_out  46:43DFT_MUX
 *     AMS_TX_ELEC_IDLE_AUX force electrical idle mode amsbus ctrl_out  47:47DFT_MUX_AND_PRE
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL2r (0x0001d0d2 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL2r_SIZE 4

/*
 * This structure should be used to declare and program AMS_TX_TX_CTL2.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL2r_s {
	uint32_t v[1];
	uint32_t ams_tx_tx_ctl2[1];
	uint32_t _ams_tx_tx_ctl2;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL2r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL2r_CLR(r) (r).ams_tx_tx_ctl2[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL2r_SET(r,d) (r).ams_tx_tx_ctl2[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL2r_GET(r) (r).ams_tx_tx_ctl2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL2r_AMS_TX_ELEC_IDLE_AUXf_GET(r) ((((r).ams_tx_tx_ctl2[0]) >> 15) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL2r_AMS_TX_ELEC_IDLE_AUXf_SET(r,f) (r).ams_tx_tx_ctl2[0]=(((r).ams_tx_tx_ctl2[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL2r_AMS_TX_CAL_CLKCHNL_QNf_GET(r) ((((r).ams_tx_tx_ctl2[0]) >> 11) & 0xf)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL2r_AMS_TX_CAL_CLKCHNL_QNf_SET(r,f) (r).ams_tx_tx_ctl2[0]=(((r).ams_tx_tx_ctl2[0] & ~((uint32_t)0xf << 11)) | ((((uint32_t)f) & 0xf) << 11)) | (15 << (16 + 11))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL2r_AMS_TX_CKBUF_CM_CTRLf_GET(r) ((((r).ams_tx_tx_ctl2[0]) >> 8) & 0x7)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL2r_AMS_TX_CKBUF_CM_CTRLf_SET(r,f) (r).ams_tx_tx_ctl2[0]=(((r).ams_tx_tx_ctl2[0] & ~((uint32_t)0x7 << 8)) | ((((uint32_t)f) & 0x7) << 8)) | (7 << (16 + 8))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL2r_AMS_TX_LPBK_MODEf_GET(r) ((((r).ams_tx_tx_ctl2[0]) >> 6) & 0x3)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL2r_AMS_TX_LPBK_MODEf_SET(r,f) (r).ams_tx_tx_ctl2[0]=(((r).ams_tx_tx_ctl2[0] & ~((uint32_t)0x3 << 6)) | ((((uint32_t)f) & 0x3) << 6)) | (3 << (16 + 6))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL2r_AMS_TX_TEST_DATAf_GET(r) ((((r).ams_tx_tx_ctl2[0]) >> 4) & 0x3)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL2r_AMS_TX_TEST_DATAf_SET(r,f) (r).ams_tx_tx_ctl2[0]=(((r).ams_tx_tx_ctl2[0] & ~((uint32_t)0x3 << 4)) | ((((uint32_t)f) & 0x3) << 4)) | (3 << (16 + 4))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL2r_AMS_TX_CKBUF_CALIf_GET(r) ((((r).ams_tx_tx_ctl2[0]) >> 1) & 0x7)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL2r_AMS_TX_CKBUF_CALIf_SET(r,f) (r).ams_tx_tx_ctl2[0]=(((r).ams_tx_tx_ctl2[0] & ~((uint32_t)0x7 << 1)) | ((((uint32_t)f) & 0x7) << 1)) | (7 << (16 + 1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL2r_AMS_TX_CKBUF_CALQ_Hf_GET(r) (((r).ams_tx_tx_ctl2[0]) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL2r_AMS_TX_CKBUF_CALQ_Hf_SET(r,f) (r).ams_tx_tx_ctl2[0]=(((r).ams_tx_tx_ctl2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access AMS_TX_TX_CTL2.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_AMS_TX_TX_CTL2r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL2r,(_r._ams_tx_tx_ctl2))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_AMS_TX_TX_CTL2r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL2r,(_r._ams_tx_tx_ctl2)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_AMS_TX_TX_CTL2r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL2r,(_r._ams_tx_tx_ctl2))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_AMS_TX_TX_CTL2r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_tx_tx_ctl2))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_AMS_TX_TX_CTL2r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_tx_tx_ctl2))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_AMS_TX_TX_CTL2r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._ams_tx_tx_ctl2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AMS_TX_TX_CTL2r BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL2r
#define AMS_TX_TX_CTL2r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL2r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL2r_t AMS_TX_TX_CTL2r_t;
#define AMS_TX_TX_CTL2r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL2r_CLR
#define AMS_TX_TX_CTL2r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL2r_SET
#define AMS_TX_TX_CTL2r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL2r_GET
#define AMS_TX_TX_CTL2r_AMS_TX_ELEC_IDLE_AUXf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL2r_AMS_TX_ELEC_IDLE_AUXf_GET
#define AMS_TX_TX_CTL2r_AMS_TX_ELEC_IDLE_AUXf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL2r_AMS_TX_ELEC_IDLE_AUXf_SET
#define AMS_TX_TX_CTL2r_AMS_TX_CAL_CLKCHNL_QNf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL2r_AMS_TX_CAL_CLKCHNL_QNf_GET
#define AMS_TX_TX_CTL2r_AMS_TX_CAL_CLKCHNL_QNf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL2r_AMS_TX_CAL_CLKCHNL_QNf_SET
#define AMS_TX_TX_CTL2r_AMS_TX_CKBUF_CM_CTRLf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL2r_AMS_TX_CKBUF_CM_CTRLf_GET
#define AMS_TX_TX_CTL2r_AMS_TX_CKBUF_CM_CTRLf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL2r_AMS_TX_CKBUF_CM_CTRLf_SET
#define AMS_TX_TX_CTL2r_AMS_TX_LPBK_MODEf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL2r_AMS_TX_LPBK_MODEf_GET
#define AMS_TX_TX_CTL2r_AMS_TX_LPBK_MODEf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL2r_AMS_TX_LPBK_MODEf_SET
#define AMS_TX_TX_CTL2r_AMS_TX_TEST_DATAf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL2r_AMS_TX_TEST_DATAf_GET
#define AMS_TX_TX_CTL2r_AMS_TX_TEST_DATAf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL2r_AMS_TX_TEST_DATAf_SET
#define AMS_TX_TX_CTL2r_AMS_TX_CKBUF_CALIf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL2r_AMS_TX_CKBUF_CALIf_GET
#define AMS_TX_TX_CTL2r_AMS_TX_CKBUF_CALIf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL2r_AMS_TX_CKBUF_CALIf_SET
#define AMS_TX_TX_CTL2r_AMS_TX_CKBUF_CALQ_Hf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL2r_AMS_TX_CKBUF_CALQ_Hf_GET
#define AMS_TX_TX_CTL2r_AMS_TX_CKBUF_CALQ_Hf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL2r_AMS_TX_CKBUF_CALQ_Hf_SET
#define READ_AMS_TX_TX_CTL2r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_AMS_TX_TX_CTL2r
#define WRITE_AMS_TX_TX_CTL2r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_AMS_TX_TX_CTL2r
#define MODIFY_AMS_TX_TX_CTL2r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_AMS_TX_TX_CTL2r
#define READLN_AMS_TX_TX_CTL2r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_AMS_TX_TX_CTL2r
#define WRITELN_AMS_TX_TX_CTL2r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_AMS_TX_TX_CTL2r
#define WRITEALL_AMS_TX_TX_CTL2r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_AMS_TX_TX_CTL2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  AMS_TX_TX_CTL3
 * BLOCKS:   AMS_TX
 * REGADDR:  0xd0d3
 * DEVAD:    1
 * DESC:     AMS TX CONTROL_3
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     AMS_TX_SPARE_48_48 AMS reserved[48] amsbus ctrl_out  48:48
 *     AMS_TX_CAL_CLKCHNL_QP Skew adjustment control for CK2TQP channel. One step adjusts 100~200fs range of skew. Each TX core control should be used for a dedicated channel. amsbus ctrl_out  52:49DFT_MUX
 *     AMS_TX_PDET_MODE select update rate for phase detect (pdet) output. amsbus ctrl_out  53:53
 *     AMS_TX_SEL_TXMASTER_PULLDOWN Pull the output of the selected TCA master to ground. Only effective when sel_txmaster = 1. 0: normal TCA operation,1: TCA channel pulldown to AVSS. amsbus ctrl_out  54:54
 *     AMS_TX_SEL_TXMASTER select TX lane as master, only one TX lane can be set to master. amsbus ctrl_out  55:55
 *     AMS_TX_CAL_CLKCHNL_IN Skew adjustment control for CK2TIN channel. One step adjusts 100~200fs range of skew. Each TX core control should be used for a dedicated channel. amsbus ctrl_out  59:56DFT_MUX
 *     AMS_TX_CAL_CLKCHNL_IP Skew adjustment control for CK2TIP channel. One step adjusts 100~200fs range of skew. Each TX core control should be used for a dedicated channel. amsbus ctrl_out  63:60DFT_MUX
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL3r (0x0001d0d3 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL3r_SIZE 4

/*
 * This structure should be used to declare and program AMS_TX_TX_CTL3.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL3r_s {
	uint32_t v[1];
	uint32_t ams_tx_tx_ctl3[1];
	uint32_t _ams_tx_tx_ctl3;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL3r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL3r_CLR(r) (r).ams_tx_tx_ctl3[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL3r_SET(r,d) (r).ams_tx_tx_ctl3[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL3r_GET(r) (r).ams_tx_tx_ctl3[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL3r_AMS_TX_CAL_CLKCHNL_IPf_GET(r) ((((r).ams_tx_tx_ctl3[0]) >> 12) & 0xf)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL3r_AMS_TX_CAL_CLKCHNL_IPf_SET(r,f) (r).ams_tx_tx_ctl3[0]=(((r).ams_tx_tx_ctl3[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12)) | (15 << (16 + 12))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL3r_AMS_TX_CAL_CLKCHNL_INf_GET(r) ((((r).ams_tx_tx_ctl3[0]) >> 8) & 0xf)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL3r_AMS_TX_CAL_CLKCHNL_INf_SET(r,f) (r).ams_tx_tx_ctl3[0]=(((r).ams_tx_tx_ctl3[0] & ~((uint32_t)0xf << 8)) | ((((uint32_t)f) & 0xf) << 8)) | (15 << (16 + 8))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL3r_AMS_TX_SEL_TXMASTERf_GET(r) ((((r).ams_tx_tx_ctl3[0]) >> 7) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL3r_AMS_TX_SEL_TXMASTERf_SET(r,f) (r).ams_tx_tx_ctl3[0]=(((r).ams_tx_tx_ctl3[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL3r_AMS_TX_SEL_TXMASTER_PULLDOWNf_GET(r) ((((r).ams_tx_tx_ctl3[0]) >> 6) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL3r_AMS_TX_SEL_TXMASTER_PULLDOWNf_SET(r,f) (r).ams_tx_tx_ctl3[0]=(((r).ams_tx_tx_ctl3[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL3r_AMS_TX_PDET_MODEf_GET(r) ((((r).ams_tx_tx_ctl3[0]) >> 5) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL3r_AMS_TX_PDET_MODEf_SET(r,f) (r).ams_tx_tx_ctl3[0]=(((r).ams_tx_tx_ctl3[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL3r_AMS_TX_CAL_CLKCHNL_QPf_GET(r) ((((r).ams_tx_tx_ctl3[0]) >> 1) & 0xf)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL3r_AMS_TX_CAL_CLKCHNL_QPf_SET(r,f) (r).ams_tx_tx_ctl3[0]=(((r).ams_tx_tx_ctl3[0] & ~((uint32_t)0xf << 1)) | ((((uint32_t)f) & 0xf) << 1)) | (15 << (16 + 1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL3r_AMS_TX_SPARE_48_48f_GET(r) (((r).ams_tx_tx_ctl3[0]) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL3r_AMS_TX_SPARE_48_48f_SET(r,f) (r).ams_tx_tx_ctl3[0]=(((r).ams_tx_tx_ctl3[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access AMS_TX_TX_CTL3.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_AMS_TX_TX_CTL3r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL3r,(_r._ams_tx_tx_ctl3))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_AMS_TX_TX_CTL3r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL3r,(_r._ams_tx_tx_ctl3)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_AMS_TX_TX_CTL3r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL3r,(_r._ams_tx_tx_ctl3))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_AMS_TX_TX_CTL3r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL3r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_tx_tx_ctl3))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_AMS_TX_TX_CTL3r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL3r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_tx_tx_ctl3))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_AMS_TX_TX_CTL3r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL3r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._ams_tx_tx_ctl3))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AMS_TX_TX_CTL3r BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL3r
#define AMS_TX_TX_CTL3r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL3r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL3r_t AMS_TX_TX_CTL3r_t;
#define AMS_TX_TX_CTL3r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL3r_CLR
#define AMS_TX_TX_CTL3r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL3r_SET
#define AMS_TX_TX_CTL3r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL3r_GET
#define AMS_TX_TX_CTL3r_AMS_TX_CAL_CLKCHNL_IPf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL3r_AMS_TX_CAL_CLKCHNL_IPf_GET
#define AMS_TX_TX_CTL3r_AMS_TX_CAL_CLKCHNL_IPf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL3r_AMS_TX_CAL_CLKCHNL_IPf_SET
#define AMS_TX_TX_CTL3r_AMS_TX_CAL_CLKCHNL_INf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL3r_AMS_TX_CAL_CLKCHNL_INf_GET
#define AMS_TX_TX_CTL3r_AMS_TX_CAL_CLKCHNL_INf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL3r_AMS_TX_CAL_CLKCHNL_INf_SET
#define AMS_TX_TX_CTL3r_AMS_TX_SEL_TXMASTERf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL3r_AMS_TX_SEL_TXMASTERf_GET
#define AMS_TX_TX_CTL3r_AMS_TX_SEL_TXMASTERf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL3r_AMS_TX_SEL_TXMASTERf_SET
#define AMS_TX_TX_CTL3r_AMS_TX_SEL_TXMASTER_PULLDOWNf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL3r_AMS_TX_SEL_TXMASTER_PULLDOWNf_GET
#define AMS_TX_TX_CTL3r_AMS_TX_SEL_TXMASTER_PULLDOWNf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL3r_AMS_TX_SEL_TXMASTER_PULLDOWNf_SET
#define AMS_TX_TX_CTL3r_AMS_TX_PDET_MODEf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL3r_AMS_TX_PDET_MODEf_GET
#define AMS_TX_TX_CTL3r_AMS_TX_PDET_MODEf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL3r_AMS_TX_PDET_MODEf_SET
#define AMS_TX_TX_CTL3r_AMS_TX_CAL_CLKCHNL_QPf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL3r_AMS_TX_CAL_CLKCHNL_QPf_GET
#define AMS_TX_TX_CTL3r_AMS_TX_CAL_CLKCHNL_QPf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL3r_AMS_TX_CAL_CLKCHNL_QPf_SET
#define AMS_TX_TX_CTL3r_AMS_TX_SPARE_48_48f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL3r_AMS_TX_SPARE_48_48f_GET
#define AMS_TX_TX_CTL3r_AMS_TX_SPARE_48_48f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL3r_AMS_TX_SPARE_48_48f_SET
#define READ_AMS_TX_TX_CTL3r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_AMS_TX_TX_CTL3r
#define WRITE_AMS_TX_TX_CTL3r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_AMS_TX_TX_CTL3r
#define MODIFY_AMS_TX_TX_CTL3r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_AMS_TX_TX_CTL3r
#define READLN_AMS_TX_TX_CTL3r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_AMS_TX_TX_CTL3r
#define WRITELN_AMS_TX_TX_CTL3r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_AMS_TX_TX_CTL3r
#define WRITEALL_AMS_TX_TX_CTL3r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_AMS_TX_TX_CTL3r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL3r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  AMS_TX_TX_CTL4
 * BLOCKS:   AMS_TX
 * REGADDR:  0xd0d4
 * DEVAD:    1
 * DESC:     AMS TX CONTROL_4
 * RESETVAL: 0x7f00 (32512)
 * ACCESS:   R/W
 * FIELDS:
 *     AMS_TX_HZ_DAC    High-Z (auxiliary power down) of DAC driver. 0: normal operation 1: DAC core power down. Output very high Impedance. It is overwritten by electrical idle. In electrical idle mode, the impedance is high (not as high as High-Z) and well defined at the cost of small leakage current, while in High-Z mode, the driver is completely off. amsbus ctrl_out  64:64DFT_MUX
 *     AMS_TX_PD_D2C    Separate power down of 2T clock D2C, 1 = power down amsbus ctrl_out  65:65DFT_MUX
 *     AMS_TX_PD_4T     Separate power down of 4T clock path, 1 = power down amsbus ctrl_out  66:66DFT_MUX
 *     AMS_TX_ANA_LPBK_EN Enable TX to RX analog loopback amsbus ctrl_out  67:67DFT_MUX
 *     RESERVED_AMS_TX_4 Reserved bitsmust not be written to. A read returns an unknown value
 *     AMS_TX_EN_BIT    Enable each DAC bit. amsbus ctrl_out  78:72DFT_MUX
 *     RESERVED_AMS_TX_3 Reserved bitmust not be written to. A read returns an unknown value
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL4r (0x0001d0d4 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL4r_SIZE 4

/*
 * This structure should be used to declare and program AMS_TX_TX_CTL4.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL4r_s {
	uint32_t v[1];
	uint32_t ams_tx_tx_ctl4[1];
	uint32_t _ams_tx_tx_ctl4;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL4r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL4r_CLR(r) (r).ams_tx_tx_ctl4[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL4r_SET(r,d) (r).ams_tx_tx_ctl4[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL4r_GET(r) (r).ams_tx_tx_ctl4[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL4r_RESERVED_AMS_TX_3f_GET(r) ((((r).ams_tx_tx_ctl4[0]) >> 15) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL4r_RESERVED_AMS_TX_3f_SET(r,f) (r).ams_tx_tx_ctl4[0]=(((r).ams_tx_tx_ctl4[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL4r_AMS_TX_EN_BITf_GET(r) ((((r).ams_tx_tx_ctl4[0]) >> 8) & 0x7f)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL4r_AMS_TX_EN_BITf_SET(r,f) (r).ams_tx_tx_ctl4[0]=(((r).ams_tx_tx_ctl4[0] & ~((uint32_t)0x7f << 8)) | ((((uint32_t)f) & 0x7f) << 8)) | (127 << (16 + 8))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL4r_RESERVED_AMS_TX_4f_GET(r) ((((r).ams_tx_tx_ctl4[0]) >> 4) & 0xf)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL4r_RESERVED_AMS_TX_4f_SET(r,f) (r).ams_tx_tx_ctl4[0]=(((r).ams_tx_tx_ctl4[0] & ~((uint32_t)0xf << 4)) | ((((uint32_t)f) & 0xf) << 4)) | (15 << (16 + 4))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL4r_AMS_TX_ANA_LPBK_ENf_GET(r) ((((r).ams_tx_tx_ctl4[0]) >> 3) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL4r_AMS_TX_ANA_LPBK_ENf_SET(r,f) (r).ams_tx_tx_ctl4[0]=(((r).ams_tx_tx_ctl4[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL4r_AMS_TX_PD_4Tf_GET(r) ((((r).ams_tx_tx_ctl4[0]) >> 2) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL4r_AMS_TX_PD_4Tf_SET(r,f) (r).ams_tx_tx_ctl4[0]=(((r).ams_tx_tx_ctl4[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL4r_AMS_TX_PD_D2Cf_GET(r) ((((r).ams_tx_tx_ctl4[0]) >> 1) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL4r_AMS_TX_PD_D2Cf_SET(r,f) (r).ams_tx_tx_ctl4[0]=(((r).ams_tx_tx_ctl4[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL4r_AMS_TX_HZ_DACf_GET(r) (((r).ams_tx_tx_ctl4[0]) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL4r_AMS_TX_HZ_DACf_SET(r,f) (r).ams_tx_tx_ctl4[0]=(((r).ams_tx_tx_ctl4[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access AMS_TX_TX_CTL4.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_AMS_TX_TX_CTL4r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL4r,(_r._ams_tx_tx_ctl4))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_AMS_TX_TX_CTL4r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL4r,(_r._ams_tx_tx_ctl4)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_AMS_TX_TX_CTL4r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL4r,(_r._ams_tx_tx_ctl4))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_AMS_TX_TX_CTL4r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL4r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_tx_tx_ctl4))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_AMS_TX_TX_CTL4r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL4r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_tx_tx_ctl4))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_AMS_TX_TX_CTL4r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL4r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._ams_tx_tx_ctl4))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AMS_TX_TX_CTL4r BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL4r
#define AMS_TX_TX_CTL4r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL4r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL4r_t AMS_TX_TX_CTL4r_t;
#define AMS_TX_TX_CTL4r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL4r_CLR
#define AMS_TX_TX_CTL4r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL4r_SET
#define AMS_TX_TX_CTL4r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL4r_GET
#define AMS_TX_TX_CTL4r_RESERVED_AMS_TX_3f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL4r_RESERVED_AMS_TX_3f_GET
#define AMS_TX_TX_CTL4r_RESERVED_AMS_TX_3f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL4r_RESERVED_AMS_TX_3f_SET
#define AMS_TX_TX_CTL4r_AMS_TX_EN_BITf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL4r_AMS_TX_EN_BITf_GET
#define AMS_TX_TX_CTL4r_AMS_TX_EN_BITf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL4r_AMS_TX_EN_BITf_SET
#define AMS_TX_TX_CTL4r_RESERVED_AMS_TX_4f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL4r_RESERVED_AMS_TX_4f_GET
#define AMS_TX_TX_CTL4r_RESERVED_AMS_TX_4f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL4r_RESERVED_AMS_TX_4f_SET
#define AMS_TX_TX_CTL4r_AMS_TX_ANA_LPBK_ENf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL4r_AMS_TX_ANA_LPBK_ENf_GET
#define AMS_TX_TX_CTL4r_AMS_TX_ANA_LPBK_ENf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL4r_AMS_TX_ANA_LPBK_ENf_SET
#define AMS_TX_TX_CTL4r_AMS_TX_PD_4Tf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL4r_AMS_TX_PD_4Tf_GET
#define AMS_TX_TX_CTL4r_AMS_TX_PD_4Tf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL4r_AMS_TX_PD_4Tf_SET
#define AMS_TX_TX_CTL4r_AMS_TX_PD_D2Cf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL4r_AMS_TX_PD_D2Cf_GET
#define AMS_TX_TX_CTL4r_AMS_TX_PD_D2Cf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL4r_AMS_TX_PD_D2Cf_SET
#define AMS_TX_TX_CTL4r_AMS_TX_HZ_DACf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL4r_AMS_TX_HZ_DACf_GET
#define AMS_TX_TX_CTL4r_AMS_TX_HZ_DACf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL4r_AMS_TX_HZ_DACf_SET
#define READ_AMS_TX_TX_CTL4r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_AMS_TX_TX_CTL4r
#define WRITE_AMS_TX_TX_CTL4r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_AMS_TX_TX_CTL4r
#define MODIFY_AMS_TX_TX_CTL4r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_AMS_TX_TX_CTL4r
#define READLN_AMS_TX_TX_CTL4r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_AMS_TX_TX_CTL4r
#define WRITELN_AMS_TX_TX_CTL4r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_AMS_TX_TX_CTL4r
#define WRITEALL_AMS_TX_TX_CTL4r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_AMS_TX_TX_CTL4r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL4r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  AMS_TX_TX_CTL5
 * BLOCKS:   AMS_TX
 * REGADDR:  0xd0d5
 * DEVAD:    1
 * DESC:     AMS TX CONTROL_5
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RESERVED_AMS_TX_5 Reserved bitsmust not be written to. A read returns an unknown value
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL5r (0x0001d0d5 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL5r_SIZE 4

/*
 * This structure should be used to declare and program AMS_TX_TX_CTL5.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL5r_s {
	uint32_t v[1];
	uint32_t ams_tx_tx_ctl5[1];
	uint32_t _ams_tx_tx_ctl5;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL5r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL5r_CLR(r) (r).ams_tx_tx_ctl5[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL5r_SET(r,d) (r).ams_tx_tx_ctl5[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL5r_GET(r) (r).ams_tx_tx_ctl5[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL5r_RESERVED_AMS_TX_5f_GET(r) (((r).ams_tx_tx_ctl5[0]) & 0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL5r_RESERVED_AMS_TX_5f_SET(r,f) (r).ams_tx_tx_ctl5[0]=(((r).ams_tx_tx_ctl5[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access AMS_TX_TX_CTL5.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_AMS_TX_TX_CTL5r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL5r,(_r._ams_tx_tx_ctl5))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_AMS_TX_TX_CTL5r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL5r,(_r._ams_tx_tx_ctl5)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_AMS_TX_TX_CTL5r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL5r,(_r._ams_tx_tx_ctl5))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_AMS_TX_TX_CTL5r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL5r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_tx_tx_ctl5))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_AMS_TX_TX_CTL5r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL5r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_tx_tx_ctl5))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_AMS_TX_TX_CTL5r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL5r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._ams_tx_tx_ctl5))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AMS_TX_TX_CTL5r BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL5r
#define AMS_TX_TX_CTL5r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL5r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL5r_t AMS_TX_TX_CTL5r_t;
#define AMS_TX_TX_CTL5r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL5r_CLR
#define AMS_TX_TX_CTL5r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL5r_SET
#define AMS_TX_TX_CTL5r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL5r_GET
#define AMS_TX_TX_CTL5r_RESERVED_AMS_TX_5f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL5r_RESERVED_AMS_TX_5f_GET
#define AMS_TX_TX_CTL5r_RESERVED_AMS_TX_5f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL5r_RESERVED_AMS_TX_5f_SET
#define READ_AMS_TX_TX_CTL5r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_AMS_TX_TX_CTL5r
#define WRITE_AMS_TX_TX_CTL5r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_AMS_TX_TX_CTL5r
#define MODIFY_AMS_TX_TX_CTL5r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_AMS_TX_TX_CTL5r
#define READLN_AMS_TX_TX_CTL5r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_AMS_TX_TX_CTL5r
#define WRITELN_AMS_TX_TX_CTL5r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_AMS_TX_TX_CTL5r
#define WRITEALL_AMS_TX_TX_CTL5r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_AMS_TX_TX_CTL5r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL5r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  AMS_TX_TX_CTL6
 * BLOCKS:   AMS_TX
 * REGADDR:  0xd0d6
 * DEVAD:    1
 * DESC:     AMS TX CONTROL_6
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RESERVED_AMS_TX_6 Reserved bitsmust not be written to. A read returns an unknown value
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL6r (0x0001d0d6 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL6r_SIZE 4

/*
 * This structure should be used to declare and program AMS_TX_TX_CTL6.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL6r_s {
	uint32_t v[1];
	uint32_t ams_tx_tx_ctl6[1];
	uint32_t _ams_tx_tx_ctl6;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL6r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL6r_CLR(r) (r).ams_tx_tx_ctl6[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL6r_SET(r,d) (r).ams_tx_tx_ctl6[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL6r_GET(r) (r).ams_tx_tx_ctl6[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL6r_RESERVED_AMS_TX_6f_GET(r) (((r).ams_tx_tx_ctl6[0]) & 0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL6r_RESERVED_AMS_TX_6f_SET(r,f) (r).ams_tx_tx_ctl6[0]=(((r).ams_tx_tx_ctl6[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access AMS_TX_TX_CTL6.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_AMS_TX_TX_CTL6r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL6r,(_r._ams_tx_tx_ctl6))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_AMS_TX_TX_CTL6r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL6r,(_r._ams_tx_tx_ctl6)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_AMS_TX_TX_CTL6r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL6r,(_r._ams_tx_tx_ctl6))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_AMS_TX_TX_CTL6r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL6r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_tx_tx_ctl6))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_AMS_TX_TX_CTL6r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL6r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_tx_tx_ctl6))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_AMS_TX_TX_CTL6r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL6r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._ams_tx_tx_ctl6))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AMS_TX_TX_CTL6r BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL6r
#define AMS_TX_TX_CTL6r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL6r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL6r_t AMS_TX_TX_CTL6r_t;
#define AMS_TX_TX_CTL6r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL6r_CLR
#define AMS_TX_TX_CTL6r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL6r_SET
#define AMS_TX_TX_CTL6r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL6r_GET
#define AMS_TX_TX_CTL6r_RESERVED_AMS_TX_6f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL6r_RESERVED_AMS_TX_6f_GET
#define AMS_TX_TX_CTL6r_RESERVED_AMS_TX_6f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL6r_RESERVED_AMS_TX_6f_SET
#define READ_AMS_TX_TX_CTL6r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_AMS_TX_TX_CTL6r
#define WRITE_AMS_TX_TX_CTL6r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_AMS_TX_TX_CTL6r
#define MODIFY_AMS_TX_TX_CTL6r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_AMS_TX_TX_CTL6r
#define READLN_AMS_TX_TX_CTL6r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_AMS_TX_TX_CTL6r
#define WRITELN_AMS_TX_TX_CTL6r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_AMS_TX_TX_CTL6r
#define WRITEALL_AMS_TX_TX_CTL6r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_AMS_TX_TX_CTL6r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL6r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  AMS_TX_TX_CTL7
 * BLOCKS:   AMS_TX
 * REGADDR:  0xd0d7
 * DEVAD:    1
 * DESC:     AMS TX CONTROL_7
 * RESETVAL: 0xc00 (3072)
 * ACCESS:   R/W
 * FIELDS:
 *     RESERVED_AMS_TX_7 Reserved bitsmust not be written to. A read returns an unknown value
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL7r (0x0001d0d7 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL7r_SIZE 4

/*
 * This structure should be used to declare and program AMS_TX_TX_CTL7.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL7r_s {
	uint32_t v[1];
	uint32_t ams_tx_tx_ctl7[1];
	uint32_t _ams_tx_tx_ctl7;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL7r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL7r_CLR(r) (r).ams_tx_tx_ctl7[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL7r_SET(r,d) (r).ams_tx_tx_ctl7[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL7r_GET(r) (r).ams_tx_tx_ctl7[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL7r_RESERVED_AMS_TX_7f_GET(r) (((r).ams_tx_tx_ctl7[0]) & 0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL7r_RESERVED_AMS_TX_7f_SET(r,f) (r).ams_tx_tx_ctl7[0]=(((r).ams_tx_tx_ctl7[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access AMS_TX_TX_CTL7.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_AMS_TX_TX_CTL7r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL7r,(_r._ams_tx_tx_ctl7))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_AMS_TX_TX_CTL7r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL7r,(_r._ams_tx_tx_ctl7)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_AMS_TX_TX_CTL7r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL7r,(_r._ams_tx_tx_ctl7))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_AMS_TX_TX_CTL7r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL7r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_tx_tx_ctl7))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_AMS_TX_TX_CTL7r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL7r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_tx_tx_ctl7))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_AMS_TX_TX_CTL7r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL7r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._ams_tx_tx_ctl7))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AMS_TX_TX_CTL7r BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL7r
#define AMS_TX_TX_CTL7r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL7r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL7r_t AMS_TX_TX_CTL7r_t;
#define AMS_TX_TX_CTL7r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL7r_CLR
#define AMS_TX_TX_CTL7r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL7r_SET
#define AMS_TX_TX_CTL7r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL7r_GET
#define AMS_TX_TX_CTL7r_RESERVED_AMS_TX_7f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL7r_RESERVED_AMS_TX_7f_GET
#define AMS_TX_TX_CTL7r_RESERVED_AMS_TX_7f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL7r_RESERVED_AMS_TX_7f_SET
#define READ_AMS_TX_TX_CTL7r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_AMS_TX_TX_CTL7r
#define WRITE_AMS_TX_TX_CTL7r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_AMS_TX_TX_CTL7r
#define MODIFY_AMS_TX_TX_CTL7r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_AMS_TX_TX_CTL7r
#define READLN_AMS_TX_TX_CTL7r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_AMS_TX_TX_CTL7r
#define WRITELN_AMS_TX_TX_CTL7r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_AMS_TX_TX_CTL7r
#define WRITEALL_AMS_TX_TX_CTL7r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_AMS_TX_TX_CTL7r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_CTL7r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  AMS_TX_TX_INTCTL
 * BLOCKS:   AMS_TX
 * REGADDR:  0xd0d8
 * DEVAD:    1
 * DESC:     INTERNAL TX CONTROL
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RESERVED_AMS_TX_8 Reserved bitsmust not be written to. A read returns an unknown value
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_INTCTLr (0x0001d0d8 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_INTCTLr_SIZE 4

/*
 * This structure should be used to declare and program AMS_TX_TX_INTCTL.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_INTCTLr_s {
	uint32_t v[1];
	uint32_t ams_tx_tx_intctl[1];
	uint32_t _ams_tx_tx_intctl;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_INTCTLr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_INTCTLr_CLR(r) (r).ams_tx_tx_intctl[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_INTCTLr_SET(r,d) (r).ams_tx_tx_intctl[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_INTCTLr_GET(r) (r).ams_tx_tx_intctl[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_INTCTLr_RESERVED_AMS_TX_8f_GET(r) (((r).ams_tx_tx_intctl[0]) & 0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_INTCTLr_RESERVED_AMS_TX_8f_SET(r,f) (r).ams_tx_tx_intctl[0]=(((r).ams_tx_tx_intctl[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access AMS_TX_TX_INTCTL.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_AMS_TX_TX_INTCTLr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_INTCTLr,(_r._ams_tx_tx_intctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_AMS_TX_TX_INTCTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_INTCTLr,(_r._ams_tx_tx_intctl)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_AMS_TX_TX_INTCTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_INTCTLr,(_r._ams_tx_tx_intctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_AMS_TX_TX_INTCTLr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_INTCTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_tx_tx_intctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_AMS_TX_TX_INTCTLr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_INTCTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_tx_tx_intctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_AMS_TX_TX_INTCTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_INTCTLr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._ams_tx_tx_intctl))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AMS_TX_TX_INTCTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_INTCTLr
#define AMS_TX_TX_INTCTLr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_INTCTLr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_INTCTLr_t AMS_TX_TX_INTCTLr_t;
#define AMS_TX_TX_INTCTLr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_INTCTLr_CLR
#define AMS_TX_TX_INTCTLr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_INTCTLr_SET
#define AMS_TX_TX_INTCTLr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_INTCTLr_GET
#define AMS_TX_TX_INTCTLr_RESERVED_AMS_TX_8f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_INTCTLr_RESERVED_AMS_TX_8f_GET
#define AMS_TX_TX_INTCTLr_RESERVED_AMS_TX_8f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_INTCTLr_RESERVED_AMS_TX_8f_SET
#define READ_AMS_TX_TX_INTCTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_AMS_TX_TX_INTCTLr
#define WRITE_AMS_TX_TX_INTCTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_AMS_TX_TX_INTCTLr
#define MODIFY_AMS_TX_TX_INTCTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_AMS_TX_TX_INTCTLr
#define READLN_AMS_TX_TX_INTCTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_AMS_TX_TX_INTCTLr
#define WRITELN_AMS_TX_TX_INTCTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_AMS_TX_TX_INTCTLr
#define WRITEALL_AMS_TX_TX_INTCTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_AMS_TX_TX_INTCTLr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_INTCTLr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  AMS_TX_TX_STS
 * BLOCKS:   AMS_TX
 * REGADDR:  0xd0d9
 * DEVAD:    1
 * DESC:     AMS TX STATUS
 * RESETVAL: 0x7700 (30464)
 * ACCESS:   R/O
 * FIELDS:
 *     RESERVED_AMS_TX_9 Reserved bitsmust not be written to. A read returns an unknown value
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_STSr (0x0001d0d9 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_STSr_SIZE 4

/*
 * This structure should be used to declare and program AMS_TX_TX_STS.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_STSr_s {
	uint32_t v[1];
	uint32_t ams_tx_tx_sts[1];
	uint32_t _ams_tx_tx_sts;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_STSr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_STSr_CLR(r) (r).ams_tx_tx_sts[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_STSr_SET(r,d) (r).ams_tx_tx_sts[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_STSr_GET(r) (r).ams_tx_tx_sts[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_STSr_RESERVED_AMS_TX_9f_GET(r) (((r).ams_tx_tx_sts[0]) & 0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_STSr_RESERVED_AMS_TX_9f_SET(r,f) (r).ams_tx_tx_sts[0]=(((r).ams_tx_tx_sts[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access AMS_TX_TX_STS.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_AMS_TX_TX_STSr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_STSr,(_r._ams_tx_tx_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_AMS_TX_TX_STSr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_STSr,(_r._ams_tx_tx_sts)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_AMS_TX_TX_STSr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_STSr,(_r._ams_tx_tx_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_AMS_TX_TX_STSr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_tx_tx_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_AMS_TX_TX_STSr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_tx_tx_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_AMS_TX_TX_STSr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_STSr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._ams_tx_tx_sts))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AMS_TX_TX_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_STSr
#define AMS_TX_TX_STSr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_STSr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_STSr_t AMS_TX_TX_STSr_t;
#define AMS_TX_TX_STSr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_STSr_CLR
#define AMS_TX_TX_STSr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_STSr_SET
#define AMS_TX_TX_STSr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_STSr_GET
#define AMS_TX_TX_STSr_RESERVED_AMS_TX_9f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_STSr_RESERVED_AMS_TX_9f_GET
#define AMS_TX_TX_STSr_RESERVED_AMS_TX_9f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_STSr_RESERVED_AMS_TX_9f_SET
#define READ_AMS_TX_TX_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_AMS_TX_TX_STSr
#define WRITE_AMS_TX_TX_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_AMS_TX_TX_STSr
#define MODIFY_AMS_TX_TX_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_AMS_TX_TX_STSr
#define READLN_AMS_TX_TX_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_AMS_TX_TX_STSr
#define WRITELN_AMS_TX_TX_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_AMS_TX_TX_STSr
#define WRITEALL_AMS_TX_TX_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_AMS_TX_TX_STSr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_TX_TX_STSr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  SIGDET_STS0
 * BLOCKS:   SIGDET
 * REGADDR:  0xd0e8
 * DEVAD:    1
 * DESC:     SIGDET_STATUS_0
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     SIGNAL_DETECT    Filtered version of Signal Detect after frc/frc_val.
 *     SIGNAL_DETECT_CHANGE This latches the transition on signal_detect and cleared on read.
 *     SIGNAL_DETECT_RAW Raw version of Signal Detect going into the filter.
 *     SIGNAL_DETECT_RAW_CHANGE This latches the transition on signal_detect_raw and cleared on read.
 *     EXT_SIGDET       External LOS/sigdet from the pin going into the sigdet filter.
 *     EXT_SIGDET_CHANGE This latches the transition on ext_sigdet and cleared on read.
 *     AFE_SIGDET       Internal sigdet from the AFE sigdet block going into the sigdet filter.
 *     AFE_SIGDET_CHANGE This latches the transition on afe_sigdet and cleared on read.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_SIGDET_STS0r (0x0001d0e8 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_SIGDET_STS0r_SIZE 4

/*
 * This structure should be used to declare and program SIGDET_STS0.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_SIGDET_STS0r_s {
	uint32_t v[1];
	uint32_t sigdet_sts0[1];
	uint32_t _sigdet_sts0;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_SIGDET_STS0r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_SIGDET_STS0r_CLR(r) (r).sigdet_sts0[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_SIGDET_STS0r_SET(r,d) (r).sigdet_sts0[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_SIGDET_STS0r_GET(r) (r).sigdet_sts0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_SIGDET_STS0r_AFE_SIGDET_CHANGEf_GET(r) ((((r).sigdet_sts0[0]) >> 9) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_SIGDET_STS0r_AFE_SIGDET_CHANGEf_SET(r,f) (r).sigdet_sts0[0]=(((r).sigdet_sts0[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9)) | (1 << (16 + 9))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_SIGDET_STS0r_AFE_SIGDETf_GET(r) ((((r).sigdet_sts0[0]) >> 8) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_SIGDET_STS0r_AFE_SIGDETf_SET(r,f) (r).sigdet_sts0[0]=(((r).sigdet_sts0[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8)) | (1 << (16 + 8))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_SIGDET_STS0r_EXT_SIGDET_CHANGEf_GET(r) ((((r).sigdet_sts0[0]) >> 7) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_SIGDET_STS0r_EXT_SIGDET_CHANGEf_SET(r,f) (r).sigdet_sts0[0]=(((r).sigdet_sts0[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_SIGDET_STS0r_EXT_SIGDETf_GET(r) ((((r).sigdet_sts0[0]) >> 6) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_SIGDET_STS0r_EXT_SIGDETf_SET(r,f) (r).sigdet_sts0[0]=(((r).sigdet_sts0[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_SIGDET_STS0r_SIGNAL_DETECT_RAW_CHANGEf_GET(r) ((((r).sigdet_sts0[0]) >> 5) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_SIGDET_STS0r_SIGNAL_DETECT_RAW_CHANGEf_SET(r,f) (r).sigdet_sts0[0]=(((r).sigdet_sts0[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_SIGDET_STS0r_SIGNAL_DETECT_RAWf_GET(r) ((((r).sigdet_sts0[0]) >> 4) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_SIGDET_STS0r_SIGNAL_DETECT_RAWf_SET(r,f) (r).sigdet_sts0[0]=(((r).sigdet_sts0[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_SIGDET_STS0r_SIGNAL_DETECT_CHANGEf_GET(r) ((((r).sigdet_sts0[0]) >> 1) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_SIGDET_STS0r_SIGNAL_DETECT_CHANGEf_SET(r,f) (r).sigdet_sts0[0]=(((r).sigdet_sts0[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_SIGDET_STS0r_SIGNAL_DETECTf_GET(r) (((r).sigdet_sts0[0]) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_SIGDET_STS0r_SIGNAL_DETECTf_SET(r,f) (r).sigdet_sts0[0]=(((r).sigdet_sts0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access SIGDET_STS0.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_SIGDET_STS0r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_SIGDET_STS0r,(_r._sigdet_sts0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_SIGDET_STS0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_SIGDET_STS0r,(_r._sigdet_sts0)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_SIGDET_STS0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_SIGDET_STS0r,(_r._sigdet_sts0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_SIGDET_STS0r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_SIGDET_STS0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._sigdet_sts0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_SIGDET_STS0r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_SIGDET_STS0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._sigdet_sts0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_SIGDET_STS0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_SIGDET_STS0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._sigdet_sts0))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define SIGDET_STS0r BCMI_BLACKHAWK7_V1L8P1_XGXS_SIGDET_STS0r
#define SIGDET_STS0r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_SIGDET_STS0r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_SIGDET_STS0r_t SIGDET_STS0r_t;
#define SIGDET_STS0r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_SIGDET_STS0r_CLR
#define SIGDET_STS0r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_SIGDET_STS0r_SET
#define SIGDET_STS0r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_SIGDET_STS0r_GET
#define SIGDET_STS0r_AFE_SIGDET_CHANGEf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_SIGDET_STS0r_AFE_SIGDET_CHANGEf_GET
#define SIGDET_STS0r_AFE_SIGDET_CHANGEf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_SIGDET_STS0r_AFE_SIGDET_CHANGEf_SET
#define SIGDET_STS0r_AFE_SIGDETf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_SIGDET_STS0r_AFE_SIGDETf_GET
#define SIGDET_STS0r_AFE_SIGDETf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_SIGDET_STS0r_AFE_SIGDETf_SET
#define SIGDET_STS0r_EXT_SIGDET_CHANGEf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_SIGDET_STS0r_EXT_SIGDET_CHANGEf_GET
#define SIGDET_STS0r_EXT_SIGDET_CHANGEf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_SIGDET_STS0r_EXT_SIGDET_CHANGEf_SET
#define SIGDET_STS0r_EXT_SIGDETf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_SIGDET_STS0r_EXT_SIGDETf_GET
#define SIGDET_STS0r_EXT_SIGDETf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_SIGDET_STS0r_EXT_SIGDETf_SET
#define SIGDET_STS0r_SIGNAL_DETECT_RAW_CHANGEf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_SIGDET_STS0r_SIGNAL_DETECT_RAW_CHANGEf_GET
#define SIGDET_STS0r_SIGNAL_DETECT_RAW_CHANGEf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_SIGDET_STS0r_SIGNAL_DETECT_RAW_CHANGEf_SET
#define SIGDET_STS0r_SIGNAL_DETECT_RAWf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_SIGDET_STS0r_SIGNAL_DETECT_RAWf_GET
#define SIGDET_STS0r_SIGNAL_DETECT_RAWf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_SIGDET_STS0r_SIGNAL_DETECT_RAWf_SET
#define SIGDET_STS0r_SIGNAL_DETECT_CHANGEf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_SIGDET_STS0r_SIGNAL_DETECT_CHANGEf_GET
#define SIGDET_STS0r_SIGNAL_DETECT_CHANGEf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_SIGDET_STS0r_SIGNAL_DETECT_CHANGEf_SET
#define SIGDET_STS0r_SIGNAL_DETECTf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_SIGDET_STS0r_SIGNAL_DETECTf_GET
#define SIGDET_STS0r_SIGNAL_DETECTf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_SIGDET_STS0r_SIGNAL_DETECTf_SET
#define READ_SIGDET_STS0r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_SIGDET_STS0r
#define WRITE_SIGDET_STS0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_SIGDET_STS0r
#define MODIFY_SIGDET_STS0r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_SIGDET_STS0r
#define READLN_SIGDET_STS0r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_SIGDET_STS0r
#define WRITELN_SIGDET_STS0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_SIGDET_STS0r
#define WRITEALL_SIGDET_STS0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_SIGDET_STS0r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_SIGDET_STS0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  DSC_LMS_THR_STS
 * BLOCKS:   DSC_F
 * REGADDR:  0xd0f8
 * DEVAD:    1
 * DESC:     Internal lms threshold status register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     LMS_THRESH_BIN   bits [9:2]:  signed 2's complement; +/-127*4. 127=300mVIt reads out the hardware loop high resolution lms threshold/ override value left shifted by 2 (with lower two bits as 0).
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_LMS_THR_STSr (0x0001d0f8 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_LMS_THR_STSr_SIZE 4

/*
 * This structure should be used to declare and program DSC_LMS_THR_STS.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_LMS_THR_STSr_s {
	uint32_t v[1];
	uint32_t dsc_lms_thr_sts[1];
	uint32_t _dsc_lms_thr_sts;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_LMS_THR_STSr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_LMS_THR_STSr_CLR(r) (r).dsc_lms_thr_sts[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_LMS_THR_STSr_SET(r,d) (r).dsc_lms_thr_sts[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_LMS_THR_STSr_GET(r) (r).dsc_lms_thr_sts[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_LMS_THR_STSr_LMS_THRESH_BINf_GET(r) (((r).dsc_lms_thr_sts[0]) & 0x3ff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_LMS_THR_STSr_LMS_THRESH_BINf_SET(r,f) (r).dsc_lms_thr_sts[0]=(((r).dsc_lms_thr_sts[0] & ~((uint32_t)0x3ff)) | (((uint32_t)f) & 0x3ff)) | (0x3ff << 16)

/*
 * These macros can be used to access DSC_LMS_THR_STS.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DSC_LMS_THR_STSr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_LMS_THR_STSr,(_r._dsc_lms_thr_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DSC_LMS_THR_STSr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_LMS_THR_STSr,(_r._dsc_lms_thr_sts)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DSC_LMS_THR_STSr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_LMS_THR_STSr,(_r._dsc_lms_thr_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DSC_LMS_THR_STSr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_LMS_THR_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_lms_thr_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DSC_LMS_THR_STSr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_LMS_THR_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_lms_thr_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DSC_LMS_THR_STSr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_LMS_THR_STSr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_lms_thr_sts))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_LMS_THR_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_LMS_THR_STSr
#define DSC_LMS_THR_STSr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_LMS_THR_STSr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_LMS_THR_STSr_t DSC_LMS_THR_STSr_t;
#define DSC_LMS_THR_STSr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_LMS_THR_STSr_CLR
#define DSC_LMS_THR_STSr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_LMS_THR_STSr_SET
#define DSC_LMS_THR_STSr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_LMS_THR_STSr_GET
#define DSC_LMS_THR_STSr_LMS_THRESH_BINf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_LMS_THR_STSr_LMS_THRESH_BINf_GET
#define DSC_LMS_THR_STSr_LMS_THRESH_BINf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_LMS_THR_STSr_LMS_THRESH_BINf_SET
#define READ_DSC_LMS_THR_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DSC_LMS_THR_STSr
#define WRITE_DSC_LMS_THR_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DSC_LMS_THR_STSr
#define MODIFY_DSC_LMS_THR_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DSC_LMS_THR_STSr
#define READLN_DSC_LMS_THR_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DSC_LMS_THR_STSr
#define WRITELN_DSC_LMS_THR_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DSC_LMS_THR_STSr
#define WRITEALL_DSC_LMS_THR_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DSC_LMS_THR_STSr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_LMS_THR_STSr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  DIG_REVID0
 * BLOCKS:   DIG_COM
 * REGADDR:  0xd100
 * DEVAD:    1
 * DESC:     REVID0
 * RESETVAL: 0x228 (552)
 * ACCESS:   R/O
 * FIELDS:
 *     REVID_MODEL      model number
 *     REVID_PROCESS    technology process0 = 7nm FFP1 = 65nm2 = 40nm3 = 28nm4 = 20nm5 = 16nm FFP6 = 16nm FFC7 = 7nm
 *     REVID_BONDING    bonding0 = wire bond1 = flip chip2-3 = reserved
 *     REVID_REV_NUMBER Metal mask revision number
 *     REVID_REV_LETTER All layer revision letter0 = revA1 = revB2 = revC3 = revD
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_REVID0r (0x0001d100 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_REVID0r_SIZE 4

/*
 * This structure should be used to declare and program DIG_REVID0.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_REVID0r_s {
	uint32_t v[1];
	uint32_t dig_revid0[1];
	uint32_t _dig_revid0;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_REVID0r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_REVID0r_CLR(r) (r).dig_revid0[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_REVID0r_SET(r,d) (r).dig_revid0[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_REVID0r_GET(r) (r).dig_revid0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_REVID0r_REVID_REV_LETTERf_GET(r) ((((r).dig_revid0[0]) >> 14) & 0x3)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_REVID0r_REVID_REV_LETTERf_SET(r,f) (r).dig_revid0[0]=(((r).dig_revid0[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14)) | (3 << (16 + 14))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_REVID0r_REVID_REV_NUMBERf_GET(r) ((((r).dig_revid0[0]) >> 11) & 0x7)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_REVID0r_REVID_REV_NUMBERf_SET(r,f) (r).dig_revid0[0]=(((r).dig_revid0[0] & ~((uint32_t)0x7 << 11)) | ((((uint32_t)f) & 0x7) << 11)) | (7 << (16 + 11))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_REVID0r_REVID_BONDINGf_GET(r) ((((r).dig_revid0[0]) >> 9) & 0x3)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_REVID0r_REVID_BONDINGf_SET(r,f) (r).dig_revid0[0]=(((r).dig_revid0[0] & ~((uint32_t)0x3 << 9)) | ((((uint32_t)f) & 0x3) << 9)) | (3 << (16 + 9))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_REVID0r_REVID_PROCESSf_GET(r) ((((r).dig_revid0[0]) >> 6) & 0x7)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_REVID0r_REVID_PROCESSf_SET(r,f) (r).dig_revid0[0]=(((r).dig_revid0[0] & ~((uint32_t)0x7 << 6)) | ((((uint32_t)f) & 0x7) << 6)) | (7 << (16 + 6))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_REVID0r_REVID_MODELf_GET(r) (((r).dig_revid0[0]) & 0x3f)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_REVID0r_REVID_MODELf_SET(r,f) (r).dig_revid0[0]=(((r).dig_revid0[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f)) | (0x3f << 16)

/*
 * These macros can be used to access DIG_REVID0.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DIG_REVID0r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_REVID0r,(_r._dig_revid0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DIG_REVID0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_REVID0r,(_r._dig_revid0)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DIG_REVID0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_REVID0r,(_r._dig_revid0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DIG_REVID0r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_REVID0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dig_revid0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DIG_REVID0r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_REVID0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dig_revid0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DIG_REVID0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_REVID0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dig_revid0))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DIG_REVID0r BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_REVID0r
#define DIG_REVID0r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_REVID0r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_REVID0r_t DIG_REVID0r_t;
#define DIG_REVID0r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_REVID0r_CLR
#define DIG_REVID0r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_REVID0r_SET
#define DIG_REVID0r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_REVID0r_GET
#define DIG_REVID0r_REVID_REV_LETTERf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_REVID0r_REVID_REV_LETTERf_GET
#define DIG_REVID0r_REVID_REV_LETTERf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_REVID0r_REVID_REV_LETTERf_SET
#define DIG_REVID0r_REVID_REV_NUMBERf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_REVID0r_REVID_REV_NUMBERf_GET
#define DIG_REVID0r_REVID_REV_NUMBERf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_REVID0r_REVID_REV_NUMBERf_SET
#define DIG_REVID0r_REVID_BONDINGf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_REVID0r_REVID_BONDINGf_GET
#define DIG_REVID0r_REVID_BONDINGf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_REVID0r_REVID_BONDINGf_SET
#define DIG_REVID0r_REVID_PROCESSf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_REVID0r_REVID_PROCESSf_GET
#define DIG_REVID0r_REVID_PROCESSf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_REVID0r_REVID_PROCESSf_SET
#define DIG_REVID0r_REVID_MODELf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_REVID0r_REVID_MODELf_GET
#define DIG_REVID0r_REVID_MODELf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_REVID0r_REVID_MODELf_SET
#define READ_DIG_REVID0r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DIG_REVID0r
#define WRITE_DIG_REVID0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DIG_REVID0r
#define MODIFY_DIG_REVID0r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DIG_REVID0r
#define READLN_DIG_REVID0r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DIG_REVID0r
#define WRITELN_DIG_REVID0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DIG_REVID0r
#define WRITEALL_DIG_REVID0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DIG_REVID0r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_REVID0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  DIG_RST_CTL_PMD
 * BLOCKS:   DIG_COM
 * REGADDR:  0xd101
 * DEVAD:    1
 * DESC:     RESET_CONTROL_PMD
 * RESETVAL: 0x11 (17)
 * ACCESS:   R/W
 * FIELDS:
 *     CORE_S_RSTB      Active Low Core Level Soft Reset. This soft reset is equivalent to the hard reset input pin pmd_por_h_rstb.Assertion of this register resets all the PMD logic including registers except MDIO, PMI-LP, MICRO and RMIC interface related logic which means.this register can be written to 1'b0 or 1'b1 from any of the register access interfaces.This regiter bit can only be reset by assertion of the hard reset input pin pmd_por_h_rstb.
 *     UC_ACTIVE        When set to 1'b1 then Hardware should wait for uC handshakes to wake up from datapath resetWhen set to 1'b0 then Hardware can internally assume that uc_ack_* = 1.This regiter bit can only be reset by assertion of the hard reset input pin pmd_por_h_rstb.
 *     RING_EN          This regiter bit enables the ring to oscillate in RING_OSC block
 *     RING_RESETB_FRC_VAL RING_OSC reset force value.  To be used with ring_resetb_frc.RING_OSC reset is active low.
 *     RING_RESETB_FRC  RING_OSC reset force.  To be used with ring_resetb_frc_val.
 *     RING_SEL         Select which ring to observe in RING_OSC block
 *     RING_THRESHOLD_MSB RING_OSC ring counter for reference clock.  The refernce clock counter is split into two register fields.This is the MSBs of the ring threshold count. The LSBs of the ring threshold count is ring_threshold_lsb.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_RST_CTL_PMDr (0x0001d101 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_RST_CTL_PMDr_SIZE 4

/*
 * This structure should be used to declare and program DIG_RST_CTL_PMD.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_RST_CTL_PMDr_s {
	uint32_t v[1];
	uint32_t dig_rst_ctl_pmd[1];
	uint32_t _dig_rst_ctl_pmd;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_RST_CTL_PMDr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_RST_CTL_PMDr_CLR(r) (r).dig_rst_ctl_pmd[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_RST_CTL_PMDr_SET(r,d) (r).dig_rst_ctl_pmd[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_RST_CTL_PMDr_GET(r) (r).dig_rst_ctl_pmd[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_RST_CTL_PMDr_RING_THRESHOLD_MSBf_GET(r) ((((r).dig_rst_ctl_pmd[0]) >> 9) & 0x7f)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_RST_CTL_PMDr_RING_THRESHOLD_MSBf_SET(r,f) (r).dig_rst_ctl_pmd[0]=(((r).dig_rst_ctl_pmd[0] & ~((uint32_t)0x7f << 9)) | ((((uint32_t)f) & 0x7f) << 9)) | (127 << (16 + 9))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_RST_CTL_PMDr_RING_SELf_GET(r) ((((r).dig_rst_ctl_pmd[0]) >> 6) & 0x7)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_RST_CTL_PMDr_RING_SELf_SET(r,f) (r).dig_rst_ctl_pmd[0]=(((r).dig_rst_ctl_pmd[0] & ~((uint32_t)0x7 << 6)) | ((((uint32_t)f) & 0x7) << 6)) | (7 << (16 + 6))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_RST_CTL_PMDr_RING_RESETB_FRCf_GET(r) ((((r).dig_rst_ctl_pmd[0]) >> 5) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_RST_CTL_PMDr_RING_RESETB_FRCf_SET(r,f) (r).dig_rst_ctl_pmd[0]=(((r).dig_rst_ctl_pmd[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_RST_CTL_PMDr_RING_RESETB_FRC_VALf_GET(r) ((((r).dig_rst_ctl_pmd[0]) >> 4) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_RST_CTL_PMDr_RING_RESETB_FRC_VALf_SET(r,f) (r).dig_rst_ctl_pmd[0]=(((r).dig_rst_ctl_pmd[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_RST_CTL_PMDr_RING_ENf_GET(r) ((((r).dig_rst_ctl_pmd[0]) >> 3) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_RST_CTL_PMDr_RING_ENf_SET(r,f) (r).dig_rst_ctl_pmd[0]=(((r).dig_rst_ctl_pmd[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_RST_CTL_PMDr_UC_ACTIVEf_GET(r) ((((r).dig_rst_ctl_pmd[0]) >> 1) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_RST_CTL_PMDr_UC_ACTIVEf_SET(r,f) (r).dig_rst_ctl_pmd[0]=(((r).dig_rst_ctl_pmd[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_RST_CTL_PMDr_CORE_S_RSTBf_GET(r) (((r).dig_rst_ctl_pmd[0]) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_RST_CTL_PMDr_CORE_S_RSTBf_SET(r,f) (r).dig_rst_ctl_pmd[0]=(((r).dig_rst_ctl_pmd[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access DIG_RST_CTL_PMD.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DIG_RST_CTL_PMDr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_RST_CTL_PMDr,(_r._dig_rst_ctl_pmd))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DIG_RST_CTL_PMDr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_RST_CTL_PMDr,(_r._dig_rst_ctl_pmd)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DIG_RST_CTL_PMDr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_RST_CTL_PMDr,(_r._dig_rst_ctl_pmd))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DIG_RST_CTL_PMDr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_RST_CTL_PMDr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dig_rst_ctl_pmd))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DIG_RST_CTL_PMDr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_RST_CTL_PMDr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dig_rst_ctl_pmd))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DIG_RST_CTL_PMDr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_RST_CTL_PMDr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dig_rst_ctl_pmd))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DIG_RST_CTL_PMDr BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_RST_CTL_PMDr
#define DIG_RST_CTL_PMDr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_RST_CTL_PMDr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_RST_CTL_PMDr_t DIG_RST_CTL_PMDr_t;
#define DIG_RST_CTL_PMDr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_RST_CTL_PMDr_CLR
#define DIG_RST_CTL_PMDr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_RST_CTL_PMDr_SET
#define DIG_RST_CTL_PMDr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_RST_CTL_PMDr_GET
#define DIG_RST_CTL_PMDr_RING_THRESHOLD_MSBf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_RST_CTL_PMDr_RING_THRESHOLD_MSBf_GET
#define DIG_RST_CTL_PMDr_RING_THRESHOLD_MSBf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_RST_CTL_PMDr_RING_THRESHOLD_MSBf_SET
#define DIG_RST_CTL_PMDr_RING_SELf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_RST_CTL_PMDr_RING_SELf_GET
#define DIG_RST_CTL_PMDr_RING_SELf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_RST_CTL_PMDr_RING_SELf_SET
#define DIG_RST_CTL_PMDr_RING_RESETB_FRCf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_RST_CTL_PMDr_RING_RESETB_FRCf_GET
#define DIG_RST_CTL_PMDr_RING_RESETB_FRCf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_RST_CTL_PMDr_RING_RESETB_FRCf_SET
#define DIG_RST_CTL_PMDr_RING_RESETB_FRC_VALf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_RST_CTL_PMDr_RING_RESETB_FRC_VALf_GET
#define DIG_RST_CTL_PMDr_RING_RESETB_FRC_VALf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_RST_CTL_PMDr_RING_RESETB_FRC_VALf_SET
#define DIG_RST_CTL_PMDr_RING_ENf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_RST_CTL_PMDr_RING_ENf_GET
#define DIG_RST_CTL_PMDr_RING_ENf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_RST_CTL_PMDr_RING_ENf_SET
#define DIG_RST_CTL_PMDr_UC_ACTIVEf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_RST_CTL_PMDr_UC_ACTIVEf_GET
#define DIG_RST_CTL_PMDr_UC_ACTIVEf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_RST_CTL_PMDr_UC_ACTIVEf_SET
#define DIG_RST_CTL_PMDr_CORE_S_RSTBf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_RST_CTL_PMDr_CORE_S_RSTBf_GET
#define DIG_RST_CTL_PMDr_CORE_S_RSTBf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_RST_CTL_PMDr_CORE_S_RSTBf_SET
#define READ_DIG_RST_CTL_PMDr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DIG_RST_CTL_PMDr
#define WRITE_DIG_RST_CTL_PMDr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DIG_RST_CTL_PMDr
#define MODIFY_DIG_RST_CTL_PMDr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DIG_RST_CTL_PMDr
#define READLN_DIG_RST_CTL_PMDr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DIG_RST_CTL_PMDr
#define WRITELN_DIG_RST_CTL_PMDr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DIG_RST_CTL_PMDr
#define WRITEALL_DIG_RST_CTL_PMDr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DIG_RST_CTL_PMDr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_RST_CTL_PMDr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  DIG_RST_CTL_CORE_DP
 * BLOCKS:   DIG_COM
 * REGADDR:  0xd102
 * DEVAD:    1
 * DESC:     RESET_CONTROL_CORE_DP
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     SUP_RST_SEQ_FRC_VAL Suppress reset sequence force value.
 *     SUP_RST_SEQ_FRC  Suppress reset sequence force.
 *     PMD_MDIO_TRANS_PKILL 1'b1 will disable the pmd_mdio_trans pin.
 *     DFT_BURNIN_MODE_FRC_VAL Value for dft_burnin_mode when the frc is selected to override the internal pin control. Only meant for burnin mode to force test pattern during burnin.
 *     DFT_BURNIN_MODE_FRC Setting this bit to 1 will force the frc_val value for dft_burnin_mode. Only meant for burnin mode to force test pattern during burnin.
 *     PMI_LP_EN_DELAY  Setting this bit to 1 will delay pmi_en to RMIC block by 1 clock cycle. Only meant for debug.
 *     DISABLE_ACK_TIMEOUT Setting this bit to 1 disables the ack timeout for all ports.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_RST_CTL_CORE_DPr (0x0001d102 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_RST_CTL_CORE_DPr_SIZE 4

/*
 * This structure should be used to declare and program DIG_RST_CTL_CORE_DP.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_RST_CTL_CORE_DPr_s {
	uint32_t v[1];
	uint32_t dig_rst_ctl_core_dp[1];
	uint32_t _dig_rst_ctl_core_dp;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_RST_CTL_CORE_DPr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_RST_CTL_CORE_DPr_CLR(r) (r).dig_rst_ctl_core_dp[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_RST_CTL_CORE_DPr_SET(r,d) (r).dig_rst_ctl_core_dp[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_RST_CTL_CORE_DPr_GET(r) (r).dig_rst_ctl_core_dp[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_RST_CTL_CORE_DPr_DISABLE_ACK_TIMEOUTf_GET(r) ((((r).dig_rst_ctl_core_dp[0]) >> 15) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_RST_CTL_CORE_DPr_DISABLE_ACK_TIMEOUTf_SET(r,f) (r).dig_rst_ctl_core_dp[0]=(((r).dig_rst_ctl_core_dp[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_RST_CTL_CORE_DPr_PMI_LP_EN_DELAYf_GET(r) ((((r).dig_rst_ctl_core_dp[0]) >> 14) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_RST_CTL_CORE_DPr_PMI_LP_EN_DELAYf_SET(r,f) (r).dig_rst_ctl_core_dp[0]=(((r).dig_rst_ctl_core_dp[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14)) | (1 << (16 + 14))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_RST_CTL_CORE_DPr_DFT_BURNIN_MODE_FRCf_GET(r) ((((r).dig_rst_ctl_core_dp[0]) >> 13) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_RST_CTL_CORE_DPr_DFT_BURNIN_MODE_FRCf_SET(r,f) (r).dig_rst_ctl_core_dp[0]=(((r).dig_rst_ctl_core_dp[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13)) | (1 << (16 + 13))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_RST_CTL_CORE_DPr_DFT_BURNIN_MODE_FRC_VALf_GET(r) ((((r).dig_rst_ctl_core_dp[0]) >> 12) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_RST_CTL_CORE_DPr_DFT_BURNIN_MODE_FRC_VALf_SET(r,f) (r).dig_rst_ctl_core_dp[0]=(((r).dig_rst_ctl_core_dp[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12)) | (1 << (16 + 12))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_RST_CTL_CORE_DPr_PMD_MDIO_TRANS_PKILLf_GET(r) ((((r).dig_rst_ctl_core_dp[0]) >> 5) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_RST_CTL_CORE_DPr_PMD_MDIO_TRANS_PKILLf_SET(r,f) (r).dig_rst_ctl_core_dp[0]=(((r).dig_rst_ctl_core_dp[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_RST_CTL_CORE_DPr_SUP_RST_SEQ_FRCf_GET(r) ((((r).dig_rst_ctl_core_dp[0]) >> 4) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_RST_CTL_CORE_DPr_SUP_RST_SEQ_FRCf_SET(r,f) (r).dig_rst_ctl_core_dp[0]=(((r).dig_rst_ctl_core_dp[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_RST_CTL_CORE_DPr_SUP_RST_SEQ_FRC_VALf_GET(r) ((((r).dig_rst_ctl_core_dp[0]) >> 3) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_RST_CTL_CORE_DPr_SUP_RST_SEQ_FRC_VALf_SET(r,f) (r).dig_rst_ctl_core_dp[0]=(((r).dig_rst_ctl_core_dp[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))

/*
 * These macros can be used to access DIG_RST_CTL_CORE_DP.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DIG_RST_CTL_CORE_DPr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_RST_CTL_CORE_DPr,(_r._dig_rst_ctl_core_dp))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DIG_RST_CTL_CORE_DPr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_RST_CTL_CORE_DPr,(_r._dig_rst_ctl_core_dp)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DIG_RST_CTL_CORE_DPr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_RST_CTL_CORE_DPr,(_r._dig_rst_ctl_core_dp))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DIG_RST_CTL_CORE_DPr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_RST_CTL_CORE_DPr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dig_rst_ctl_core_dp))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DIG_RST_CTL_CORE_DPr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_RST_CTL_CORE_DPr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dig_rst_ctl_core_dp))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DIG_RST_CTL_CORE_DPr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_RST_CTL_CORE_DPr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dig_rst_ctl_core_dp))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DIG_RST_CTL_CORE_DPr BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_RST_CTL_CORE_DPr
#define DIG_RST_CTL_CORE_DPr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_RST_CTL_CORE_DPr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_RST_CTL_CORE_DPr_t DIG_RST_CTL_CORE_DPr_t;
#define DIG_RST_CTL_CORE_DPr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_RST_CTL_CORE_DPr_CLR
#define DIG_RST_CTL_CORE_DPr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_RST_CTL_CORE_DPr_SET
#define DIG_RST_CTL_CORE_DPr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_RST_CTL_CORE_DPr_GET
#define DIG_RST_CTL_CORE_DPr_DISABLE_ACK_TIMEOUTf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_RST_CTL_CORE_DPr_DISABLE_ACK_TIMEOUTf_GET
#define DIG_RST_CTL_CORE_DPr_DISABLE_ACK_TIMEOUTf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_RST_CTL_CORE_DPr_DISABLE_ACK_TIMEOUTf_SET
#define DIG_RST_CTL_CORE_DPr_PMI_LP_EN_DELAYf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_RST_CTL_CORE_DPr_PMI_LP_EN_DELAYf_GET
#define DIG_RST_CTL_CORE_DPr_PMI_LP_EN_DELAYf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_RST_CTL_CORE_DPr_PMI_LP_EN_DELAYf_SET
#define DIG_RST_CTL_CORE_DPr_DFT_BURNIN_MODE_FRCf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_RST_CTL_CORE_DPr_DFT_BURNIN_MODE_FRCf_GET
#define DIG_RST_CTL_CORE_DPr_DFT_BURNIN_MODE_FRCf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_RST_CTL_CORE_DPr_DFT_BURNIN_MODE_FRCf_SET
#define DIG_RST_CTL_CORE_DPr_DFT_BURNIN_MODE_FRC_VALf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_RST_CTL_CORE_DPr_DFT_BURNIN_MODE_FRC_VALf_GET
#define DIG_RST_CTL_CORE_DPr_DFT_BURNIN_MODE_FRC_VALf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_RST_CTL_CORE_DPr_DFT_BURNIN_MODE_FRC_VALf_SET
#define DIG_RST_CTL_CORE_DPr_PMD_MDIO_TRANS_PKILLf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_RST_CTL_CORE_DPr_PMD_MDIO_TRANS_PKILLf_GET
#define DIG_RST_CTL_CORE_DPr_PMD_MDIO_TRANS_PKILLf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_RST_CTL_CORE_DPr_PMD_MDIO_TRANS_PKILLf_SET
#define DIG_RST_CTL_CORE_DPr_SUP_RST_SEQ_FRCf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_RST_CTL_CORE_DPr_SUP_RST_SEQ_FRCf_GET
#define DIG_RST_CTL_CORE_DPr_SUP_RST_SEQ_FRCf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_RST_CTL_CORE_DPr_SUP_RST_SEQ_FRCf_SET
#define DIG_RST_CTL_CORE_DPr_SUP_RST_SEQ_FRC_VALf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_RST_CTL_CORE_DPr_SUP_RST_SEQ_FRC_VALf_GET
#define DIG_RST_CTL_CORE_DPr_SUP_RST_SEQ_FRC_VALf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_RST_CTL_CORE_DPr_SUP_RST_SEQ_FRC_VALf_SET
#define READ_DIG_RST_CTL_CORE_DPr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DIG_RST_CTL_CORE_DPr
#define WRITE_DIG_RST_CTL_CORE_DPr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DIG_RST_CTL_CORE_DPr
#define MODIFY_DIG_RST_CTL_CORE_DPr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DIG_RST_CTL_CORE_DPr
#define READLN_DIG_RST_CTL_CORE_DPr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DIG_RST_CTL_CORE_DPr
#define WRITELN_DIG_RST_CTL_CORE_DPr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DIG_RST_CTL_CORE_DPr
#define WRITEALL_DIG_RST_CTL_CORE_DPr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DIG_RST_CTL_CORE_DPr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_RST_CTL_CORE_DPr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  DIG_MASKDATA
 * BLOCKS:   DIG_COM
 * REGADDR:  0xd103
 * DEVAD:    1
 * DESC:     MASKDATA_REG
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     MASKDATA         maskdata for writes that can be used with PMI_LP or PMI_MDIO port. This register will get reset to 0 after each transaction.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_MASKDATAr (0x0001d103 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_MASKDATAr_SIZE 4

/*
 * This structure should be used to declare and program DIG_MASKDATA.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_MASKDATAr_s {
	uint32_t v[1];
	uint32_t dig_maskdata[1];
	uint32_t _dig_maskdata;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_MASKDATAr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_MASKDATAr_CLR(r) (r).dig_maskdata[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_MASKDATAr_SET(r,d) (r).dig_maskdata[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_MASKDATAr_GET(r) (r).dig_maskdata[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_MASKDATAr_MASKDATAf_GET(r) (((r).dig_maskdata[0]) & 0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_MASKDATAr_MASKDATAf_SET(r,f) (r).dig_maskdata[0]=(((r).dig_maskdata[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access DIG_MASKDATA.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DIG_MASKDATAr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_MASKDATAr,(_r._dig_maskdata))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DIG_MASKDATAr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_MASKDATAr,(_r._dig_maskdata)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DIG_MASKDATAr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_MASKDATAr,(_r._dig_maskdata))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DIG_MASKDATAr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_MASKDATAr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dig_maskdata))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DIG_MASKDATAr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_MASKDATAr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dig_maskdata))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DIG_MASKDATAr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_MASKDATAr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dig_maskdata))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DIG_MASKDATAr BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_MASKDATAr
#define DIG_MASKDATAr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_MASKDATAr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_MASKDATAr_t DIG_MASKDATAr_t;
#define DIG_MASKDATAr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_MASKDATAr_CLR
#define DIG_MASKDATAr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_MASKDATAr_SET
#define DIG_MASKDATAr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_MASKDATAr_GET
#define DIG_MASKDATAr_MASKDATAf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_MASKDATAr_MASKDATAf_GET
#define DIG_MASKDATAr_MASKDATAf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_MASKDATAr_MASKDATAf_SET
#define READ_DIG_MASKDATAr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DIG_MASKDATAr
#define WRITE_DIG_MASKDATAr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DIG_MASKDATAr
#define MODIFY_DIG_MASKDATAr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DIG_MASKDATAr
#define READLN_DIG_MASKDATAr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DIG_MASKDATAr
#define WRITELN_DIG_MASKDATAr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DIG_MASKDATAr
#define WRITEALL_DIG_MASKDATAr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DIG_MASKDATAr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_MASKDATAr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  DIG_TOP_USER_CTL0
 * BLOCKS:   DIG_COM
 * REGADDR:  0xd104
 * DEVAD:    1
 * DESC:     TOP_USER_CONTROL_0
 * RESETVAL: 0x271 (625)
 * ACCESS:   R/W
 * FIELDS:
 *     HEARTBEAT_COUNT_1US Heartbeat timer count in comclk cycles to create 1us heartbeat_1us period. It should be programmed to the nearest increment of 0.25Mhz value of the comclk frequency in Mhz.For example, for comclk of 125 Mhz, it should be programmed to 10'd500. For 156.25 Mhz comclk, it should be programmed to 10'd625 and similarly for any other comclk frequency.
 *     MASKDATA_BUS_ASSIGN This register is used to assign the maskdata bus to either the mdio or pmi_lp port .0: maskdata register is assigned to MDIO port1: maskdata register is assigned to PMI_LP port
 *     MDIO_FAST_MODE_FRC_VAL This value will be used to drive the internal mdio_fast_mode signal when mdio_fast_mode_frc is set to 1.0: Normal mdio frame operation with preamble1: Fast mdio frame operation without preamble
 *     MDIO_FAST_MODE_FRC Setting this bit will allow the register value to be used for mdio_fast_mode.Otherwise the pin mdio_fast_mode will be used.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_TOP_USER_CTL0r (0x0001d104 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_TOP_USER_CTL0r_SIZE 4

/*
 * This structure should be used to declare and program DIG_TOP_USER_CTL0.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_TOP_USER_CTL0r_s {
	uint32_t v[1];
	uint32_t dig_top_user_ctl0[1];
	uint32_t _dig_top_user_ctl0;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_TOP_USER_CTL0r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_TOP_USER_CTL0r_CLR(r) (r).dig_top_user_ctl0[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_TOP_USER_CTL0r_SET(r,d) (r).dig_top_user_ctl0[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_TOP_USER_CTL0r_GET(r) (r).dig_top_user_ctl0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_TOP_USER_CTL0r_MDIO_FAST_MODE_FRCf_GET(r) ((((r).dig_top_user_ctl0[0]) >> 15) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_TOP_USER_CTL0r_MDIO_FAST_MODE_FRCf_SET(r,f) (r).dig_top_user_ctl0[0]=(((r).dig_top_user_ctl0[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_TOP_USER_CTL0r_MDIO_FAST_MODE_FRC_VALf_GET(r) ((((r).dig_top_user_ctl0[0]) >> 14) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_TOP_USER_CTL0r_MDIO_FAST_MODE_FRC_VALf_SET(r,f) (r).dig_top_user_ctl0[0]=(((r).dig_top_user_ctl0[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14)) | (1 << (16 + 14))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_TOP_USER_CTL0r_MASKDATA_BUS_ASSIGNf_GET(r) ((((r).dig_top_user_ctl0[0]) >> 13) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_TOP_USER_CTL0r_MASKDATA_BUS_ASSIGNf_SET(r,f) (r).dig_top_user_ctl0[0]=(((r).dig_top_user_ctl0[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13)) | (1 << (16 + 13))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_TOP_USER_CTL0r_HEARTBEAT_COUNT_1USf_GET(r) (((r).dig_top_user_ctl0[0]) & 0xfff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_TOP_USER_CTL0r_HEARTBEAT_COUNT_1USf_SET(r,f) (r).dig_top_user_ctl0[0]=(((r).dig_top_user_ctl0[0] & ~((uint32_t)0xfff)) | (((uint32_t)f) & 0xfff)) | (0xfff << 16)

/*
 * These macros can be used to access DIG_TOP_USER_CTL0.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DIG_TOP_USER_CTL0r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_TOP_USER_CTL0r,(_r._dig_top_user_ctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DIG_TOP_USER_CTL0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_TOP_USER_CTL0r,(_r._dig_top_user_ctl0)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DIG_TOP_USER_CTL0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_TOP_USER_CTL0r,(_r._dig_top_user_ctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DIG_TOP_USER_CTL0r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_TOP_USER_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dig_top_user_ctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DIG_TOP_USER_CTL0r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_TOP_USER_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dig_top_user_ctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DIG_TOP_USER_CTL0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_TOP_USER_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dig_top_user_ctl0))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DIG_TOP_USER_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_TOP_USER_CTL0r
#define DIG_TOP_USER_CTL0r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_TOP_USER_CTL0r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_TOP_USER_CTL0r_t DIG_TOP_USER_CTL0r_t;
#define DIG_TOP_USER_CTL0r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_TOP_USER_CTL0r_CLR
#define DIG_TOP_USER_CTL0r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_TOP_USER_CTL0r_SET
#define DIG_TOP_USER_CTL0r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_TOP_USER_CTL0r_GET
#define DIG_TOP_USER_CTL0r_MDIO_FAST_MODE_FRCf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_TOP_USER_CTL0r_MDIO_FAST_MODE_FRCf_GET
#define DIG_TOP_USER_CTL0r_MDIO_FAST_MODE_FRCf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_TOP_USER_CTL0r_MDIO_FAST_MODE_FRCf_SET
#define DIG_TOP_USER_CTL0r_MDIO_FAST_MODE_FRC_VALf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_TOP_USER_CTL0r_MDIO_FAST_MODE_FRC_VALf_GET
#define DIG_TOP_USER_CTL0r_MDIO_FAST_MODE_FRC_VALf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_TOP_USER_CTL0r_MDIO_FAST_MODE_FRC_VALf_SET
#define DIG_TOP_USER_CTL0r_MASKDATA_BUS_ASSIGNf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_TOP_USER_CTL0r_MASKDATA_BUS_ASSIGNf_GET
#define DIG_TOP_USER_CTL0r_MASKDATA_BUS_ASSIGNf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_TOP_USER_CTL0r_MASKDATA_BUS_ASSIGNf_SET
#define DIG_TOP_USER_CTL0r_HEARTBEAT_COUNT_1USf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_TOP_USER_CTL0r_HEARTBEAT_COUNT_1USf_GET
#define DIG_TOP_USER_CTL0r_HEARTBEAT_COUNT_1USf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_TOP_USER_CTL0r_HEARTBEAT_COUNT_1USf_SET
#define READ_DIG_TOP_USER_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DIG_TOP_USER_CTL0r
#define WRITE_DIG_TOP_USER_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DIG_TOP_USER_CTL0r
#define MODIFY_DIG_TOP_USER_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DIG_TOP_USER_CTL0r
#define READLN_DIG_TOP_USER_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DIG_TOP_USER_CTL0r
#define WRITELN_DIG_TOP_USER_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DIG_TOP_USER_CTL0r
#define WRITEALL_DIG_TOP_USER_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DIG_TOP_USER_CTL0r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_TOP_USER_CTL0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  DIG_RING_OSC_STS0
 * BLOCKS:   DIG_COM
 * REGADDR:  0xd105
 * DEVAD:    1
 * DESC:     RING_OSC_STATUS_0
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     RING_COUNT       RING_OSC ring counter value
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_RING_OSC_STS0r (0x0001d105 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_RING_OSC_STS0r_SIZE 4

/*
 * This structure should be used to declare and program DIG_RING_OSC_STS0.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_RING_OSC_STS0r_s {
	uint32_t v[1];
	uint32_t dig_ring_osc_sts0[1];
	uint32_t _dig_ring_osc_sts0;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_RING_OSC_STS0r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_RING_OSC_STS0r_CLR(r) (r).dig_ring_osc_sts0[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_RING_OSC_STS0r_SET(r,d) (r).dig_ring_osc_sts0[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_RING_OSC_STS0r_GET(r) (r).dig_ring_osc_sts0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_RING_OSC_STS0r_RING_COUNTf_GET(r) (((r).dig_ring_osc_sts0[0]) & 0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_RING_OSC_STS0r_RING_COUNTf_SET(r,f) (r).dig_ring_osc_sts0[0]=(((r).dig_ring_osc_sts0[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access DIG_RING_OSC_STS0.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DIG_RING_OSC_STS0r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_RING_OSC_STS0r,(_r._dig_ring_osc_sts0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DIG_RING_OSC_STS0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_RING_OSC_STS0r,(_r._dig_ring_osc_sts0)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DIG_RING_OSC_STS0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_RING_OSC_STS0r,(_r._dig_ring_osc_sts0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DIG_RING_OSC_STS0r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_RING_OSC_STS0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dig_ring_osc_sts0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DIG_RING_OSC_STS0r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_RING_OSC_STS0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dig_ring_osc_sts0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DIG_RING_OSC_STS0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_RING_OSC_STS0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dig_ring_osc_sts0))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DIG_RING_OSC_STS0r BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_RING_OSC_STS0r
#define DIG_RING_OSC_STS0r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_RING_OSC_STS0r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_RING_OSC_STS0r_t DIG_RING_OSC_STS0r_t;
#define DIG_RING_OSC_STS0r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_RING_OSC_STS0r_CLR
#define DIG_RING_OSC_STS0r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_RING_OSC_STS0r_SET
#define DIG_RING_OSC_STS0r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_RING_OSC_STS0r_GET
#define DIG_RING_OSC_STS0r_RING_COUNTf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_RING_OSC_STS0r_RING_COUNTf_GET
#define DIG_RING_OSC_STS0r_RING_COUNTf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_RING_OSC_STS0r_RING_COUNTf_SET
#define READ_DIG_RING_OSC_STS0r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DIG_RING_OSC_STS0r
#define WRITE_DIG_RING_OSC_STS0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DIG_RING_OSC_STS0r
#define MODIFY_DIG_RING_OSC_STS0r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DIG_RING_OSC_STS0r
#define READLN_DIG_RING_OSC_STS0r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DIG_RING_OSC_STS0r
#define WRITELN_DIG_RING_OSC_STS0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DIG_RING_OSC_STS0r
#define WRITEALL_DIG_RING_OSC_STS0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DIG_RING_OSC_STS0r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_RING_OSC_STS0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  DIG_CORE_RST_OCC_CTL
 * BLOCKS:   DIG_COM
 * REGADDR:  0xd106
 * DEVAD:    1
 * DESC:     CORE_REG_RESET_OCCURRED_CONTROL
 * RESETVAL: 0x1 (1)
 * ACCESS:   R/W
 * FIELDS:
 *     CORE_REG_RESET_OCCURRED Set to 1'b1 upon core level register reset and remains so until cleared by register write from uC.
 *     RING_THRESHOLD_LSB RING_OSC ring counter for reference clock.  The refernce clock counter is split into two register fields.This is the LSBs of the ring threshold count. The MSBs of the ring threshold count is ring_threshold_msb.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_CORE_RST_OCC_CTLr (0x0001d106 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_CORE_RST_OCC_CTLr_SIZE 4

/*
 * This structure should be used to declare and program DIG_CORE_RST_OCC_CTL.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_CORE_RST_OCC_CTLr_s {
	uint32_t v[1];
	uint32_t dig_core_rst_occ_ctl[1];
	uint32_t _dig_core_rst_occ_ctl;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_CORE_RST_OCC_CTLr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_CORE_RST_OCC_CTLr_CLR(r) (r).dig_core_rst_occ_ctl[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_CORE_RST_OCC_CTLr_SET(r,d) (r).dig_core_rst_occ_ctl[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_CORE_RST_OCC_CTLr_GET(r) (r).dig_core_rst_occ_ctl[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_CORE_RST_OCC_CTLr_RING_THRESHOLD_LSBf_GET(r) ((((r).dig_core_rst_occ_ctl[0]) >> 1) & 0x7fff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_CORE_RST_OCC_CTLr_RING_THRESHOLD_LSBf_SET(r,f) (r).dig_core_rst_occ_ctl[0]=(((r).dig_core_rst_occ_ctl[0] & ~((uint32_t)0x7fff << 1)) | ((((uint32_t)f) & 0x7fff) << 1)) | (32767 << (16 + 1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_CORE_RST_OCC_CTLr_CORE_REG_RESET_OCCURREDf_GET(r) (((r).dig_core_rst_occ_ctl[0]) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_CORE_RST_OCC_CTLr_CORE_REG_RESET_OCCURREDf_SET(r,f) (r).dig_core_rst_occ_ctl[0]=(((r).dig_core_rst_occ_ctl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access DIG_CORE_RST_OCC_CTL.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DIG_CORE_RST_OCC_CTLr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_CORE_RST_OCC_CTLr,(_r._dig_core_rst_occ_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DIG_CORE_RST_OCC_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_CORE_RST_OCC_CTLr,(_r._dig_core_rst_occ_ctl)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DIG_CORE_RST_OCC_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_CORE_RST_OCC_CTLr,(_r._dig_core_rst_occ_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DIG_CORE_RST_OCC_CTLr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_CORE_RST_OCC_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dig_core_rst_occ_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DIG_CORE_RST_OCC_CTLr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_CORE_RST_OCC_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dig_core_rst_occ_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DIG_CORE_RST_OCC_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_CORE_RST_OCC_CTLr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dig_core_rst_occ_ctl))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DIG_CORE_RST_OCC_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_CORE_RST_OCC_CTLr
#define DIG_CORE_RST_OCC_CTLr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_CORE_RST_OCC_CTLr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_CORE_RST_OCC_CTLr_t DIG_CORE_RST_OCC_CTLr_t;
#define DIG_CORE_RST_OCC_CTLr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_CORE_RST_OCC_CTLr_CLR
#define DIG_CORE_RST_OCC_CTLr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_CORE_RST_OCC_CTLr_SET
#define DIG_CORE_RST_OCC_CTLr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_CORE_RST_OCC_CTLr_GET
#define DIG_CORE_RST_OCC_CTLr_RING_THRESHOLD_LSBf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_CORE_RST_OCC_CTLr_RING_THRESHOLD_LSBf_GET
#define DIG_CORE_RST_OCC_CTLr_RING_THRESHOLD_LSBf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_CORE_RST_OCC_CTLr_RING_THRESHOLD_LSBf_SET
#define DIG_CORE_RST_OCC_CTLr_CORE_REG_RESET_OCCURREDf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_CORE_RST_OCC_CTLr_CORE_REG_RESET_OCCURREDf_GET
#define DIG_CORE_RST_OCC_CTLr_CORE_REG_RESET_OCCURREDf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_CORE_RST_OCC_CTLr_CORE_REG_RESET_OCCURREDf_SET
#define READ_DIG_CORE_RST_OCC_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DIG_CORE_RST_OCC_CTLr
#define WRITE_DIG_CORE_RST_OCC_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DIG_CORE_RST_OCC_CTLr
#define MODIFY_DIG_CORE_RST_OCC_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DIG_CORE_RST_OCC_CTLr
#define READLN_DIG_CORE_RST_OCC_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DIG_CORE_RST_OCC_CTLr
#define WRITELN_DIG_CORE_RST_OCC_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DIG_CORE_RST_OCC_CTLr
#define WRITEALL_DIG_CORE_RST_OCC_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DIG_CORE_RST_OCC_CTLr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_CORE_RST_OCC_CTLr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  DIG_CORE_DP_RST_ST_STS
 * BLOCKS:   DIG_COM
 * REGADDR:  0xd108
 * DEVAD:    1
 * DESC:     CORE_DP_RESET_STATE_STATUS
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     TX_LANE_RESET_RELEASED_INDEX Index of the lane number of the first TX lane in lane_reset_released state.
 *     LANE_RESET_RELEASED_INDEX Index of the lane number of the first RX lane in lane_reset_released state.
 *     LANE_RESET_RELEASED indicates if a lane is currently at {rx_lane_dp_reset_active, rx_lane_dp_reset_occurred} = 01.
 *     TX_LANE_RESET_RELEASED indicates if a lane is currently at {tx_lane_dp_reset_active, tx_lane_dp_reset_occurred} = 01.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_CORE_DP_RST_ST_STSr (0x0001d108 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_CORE_DP_RST_ST_STSr_SIZE 4

/*
 * This structure should be used to declare and program DIG_CORE_DP_RST_ST_STS.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_CORE_DP_RST_ST_STSr_s {
	uint32_t v[1];
	uint32_t dig_core_dp_rst_st_sts[1];
	uint32_t _dig_core_dp_rst_st_sts;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_CORE_DP_RST_ST_STSr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_CORE_DP_RST_ST_STSr_CLR(r) (r).dig_core_dp_rst_st_sts[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_CORE_DP_RST_ST_STSr_SET(r,d) (r).dig_core_dp_rst_st_sts[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_CORE_DP_RST_ST_STSr_GET(r) (r).dig_core_dp_rst_st_sts[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_CORE_DP_RST_ST_STSr_TX_LANE_RESET_RELEASEDf_GET(r) ((((r).dig_core_dp_rst_st_sts[0]) >> 15) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_CORE_DP_RST_ST_STSr_TX_LANE_RESET_RELEASEDf_SET(r,f) (r).dig_core_dp_rst_st_sts[0]=(((r).dig_core_dp_rst_st_sts[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_CORE_DP_RST_ST_STSr_LANE_RESET_RELEASEDf_GET(r) ((((r).dig_core_dp_rst_st_sts[0]) >> 14) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_CORE_DP_RST_ST_STSr_LANE_RESET_RELEASEDf_SET(r,f) (r).dig_core_dp_rst_st_sts[0]=(((r).dig_core_dp_rst_st_sts[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14)) | (1 << (16 + 14))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_CORE_DP_RST_ST_STSr_LANE_RESET_RELEASED_INDEXf_GET(r) ((((r).dig_core_dp_rst_st_sts[0]) >> 8) & 0x1f)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_CORE_DP_RST_ST_STSr_LANE_RESET_RELEASED_INDEXf_SET(r,f) (r).dig_core_dp_rst_st_sts[0]=(((r).dig_core_dp_rst_st_sts[0] & ~((uint32_t)0x1f << 8)) | ((((uint32_t)f) & 0x1f) << 8)) | (31 << (16 + 8))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_CORE_DP_RST_ST_STSr_TX_LANE_RESET_RELEASED_INDEXf_GET(r) ((((r).dig_core_dp_rst_st_sts[0]) >> 3) & 0x1f)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_CORE_DP_RST_ST_STSr_TX_LANE_RESET_RELEASED_INDEXf_SET(r,f) (r).dig_core_dp_rst_st_sts[0]=(((r).dig_core_dp_rst_st_sts[0] & ~((uint32_t)0x1f << 3)) | ((((uint32_t)f) & 0x1f) << 3)) | (31 << (16 + 3))

/*
 * These macros can be used to access DIG_CORE_DP_RST_ST_STS.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DIG_CORE_DP_RST_ST_STSr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_CORE_DP_RST_ST_STSr,(_r._dig_core_dp_rst_st_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DIG_CORE_DP_RST_ST_STSr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_CORE_DP_RST_ST_STSr,(_r._dig_core_dp_rst_st_sts)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DIG_CORE_DP_RST_ST_STSr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_CORE_DP_RST_ST_STSr,(_r._dig_core_dp_rst_st_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DIG_CORE_DP_RST_ST_STSr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_CORE_DP_RST_ST_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dig_core_dp_rst_st_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DIG_CORE_DP_RST_ST_STSr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_CORE_DP_RST_ST_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dig_core_dp_rst_st_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DIG_CORE_DP_RST_ST_STSr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_CORE_DP_RST_ST_STSr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dig_core_dp_rst_st_sts))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DIG_CORE_DP_RST_ST_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_CORE_DP_RST_ST_STSr
#define DIG_CORE_DP_RST_ST_STSr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_CORE_DP_RST_ST_STSr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_CORE_DP_RST_ST_STSr_t DIG_CORE_DP_RST_ST_STSr_t;
#define DIG_CORE_DP_RST_ST_STSr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_CORE_DP_RST_ST_STSr_CLR
#define DIG_CORE_DP_RST_ST_STSr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_CORE_DP_RST_ST_STSr_SET
#define DIG_CORE_DP_RST_ST_STSr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_CORE_DP_RST_ST_STSr_GET
#define DIG_CORE_DP_RST_ST_STSr_TX_LANE_RESET_RELEASEDf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_CORE_DP_RST_ST_STSr_TX_LANE_RESET_RELEASEDf_GET
#define DIG_CORE_DP_RST_ST_STSr_TX_LANE_RESET_RELEASEDf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_CORE_DP_RST_ST_STSr_TX_LANE_RESET_RELEASEDf_SET
#define DIG_CORE_DP_RST_ST_STSr_LANE_RESET_RELEASEDf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_CORE_DP_RST_ST_STSr_LANE_RESET_RELEASEDf_GET
#define DIG_CORE_DP_RST_ST_STSr_LANE_RESET_RELEASEDf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_CORE_DP_RST_ST_STSr_LANE_RESET_RELEASEDf_SET
#define DIG_CORE_DP_RST_ST_STSr_LANE_RESET_RELEASED_INDEXf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_CORE_DP_RST_ST_STSr_LANE_RESET_RELEASED_INDEXf_GET
#define DIG_CORE_DP_RST_ST_STSr_LANE_RESET_RELEASED_INDEXf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_CORE_DP_RST_ST_STSr_LANE_RESET_RELEASED_INDEXf_SET
#define DIG_CORE_DP_RST_ST_STSr_TX_LANE_RESET_RELEASED_INDEXf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_CORE_DP_RST_ST_STSr_TX_LANE_RESET_RELEASED_INDEXf_GET
#define DIG_CORE_DP_RST_ST_STSr_TX_LANE_RESET_RELEASED_INDEXf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_CORE_DP_RST_ST_STSr_TX_LANE_RESET_RELEASED_INDEXf_SET
#define READ_DIG_CORE_DP_RST_ST_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DIG_CORE_DP_RST_ST_STSr
#define WRITE_DIG_CORE_DP_RST_ST_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DIG_CORE_DP_RST_ST_STSr
#define MODIFY_DIG_CORE_DP_RST_ST_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DIG_CORE_DP_RST_ST_STSr
#define READLN_DIG_CORE_DP_RST_ST_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DIG_CORE_DP_RST_ST_STSr
#define WRITELN_DIG_CORE_DP_RST_ST_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DIG_CORE_DP_RST_ST_STSr
#define WRITEALL_DIG_CORE_DP_RST_ST_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DIG_CORE_DP_RST_ST_STSr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_CORE_DP_RST_ST_STSr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  DIG_REVID1
 * BLOCKS:   DIG_COM
 * REGADDR:  0xd10a
 * DEVAD:    1
 * DESC:     REVID1
 * RESETVAL: 0x803c (32828)
 * ACCESS:   R/O
 * FIELDS:
 *     REVID_EEE        EEE support present in core
 *     REVID_LLP        Ultra low latency path present in core
 *     REVID_PIR        PCS interface retiming flops present in core
 *     REVID_CL72       Clause 72 present in core
 *     REVID_MICRO      Microcontroller present in core
 *     REVID_MDIO       MDIO interface present in core
 *     REVID_MULTIPLICITY Number of lanes
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_REVID1r (0x0001d10a | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_REVID1r_SIZE 4

/*
 * This structure should be used to declare and program DIG_REVID1.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_REVID1r_s {
	uint32_t v[1];
	uint32_t dig_revid1[1];
	uint32_t _dig_revid1;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_REVID1r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_REVID1r_CLR(r) (r).dig_revid1[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_REVID1r_SET(r,d) (r).dig_revid1[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_REVID1r_GET(r) (r).dig_revid1[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_REVID1r_REVID_MULTIPLICITYf_GET(r) ((((r).dig_revid1[0]) >> 12) & 0xf)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_REVID1r_REVID_MULTIPLICITYf_SET(r,f) (r).dig_revid1[0]=(((r).dig_revid1[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12)) | (15 << (16 + 12))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_REVID1r_REVID_MDIOf_GET(r) ((((r).dig_revid1[0]) >> 5) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_REVID1r_REVID_MDIOf_SET(r,f) (r).dig_revid1[0]=(((r).dig_revid1[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_REVID1r_REVID_MICROf_GET(r) ((((r).dig_revid1[0]) >> 4) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_REVID1r_REVID_MICROf_SET(r,f) (r).dig_revid1[0]=(((r).dig_revid1[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_REVID1r_REVID_CL72f_GET(r) ((((r).dig_revid1[0]) >> 3) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_REVID1r_REVID_CL72f_SET(r,f) (r).dig_revid1[0]=(((r).dig_revid1[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_REVID1r_REVID_PIRf_GET(r) ((((r).dig_revid1[0]) >> 2) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_REVID1r_REVID_PIRf_SET(r,f) (r).dig_revid1[0]=(((r).dig_revid1[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_REVID1r_REVID_LLPf_GET(r) ((((r).dig_revid1[0]) >> 1) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_REVID1r_REVID_LLPf_SET(r,f) (r).dig_revid1[0]=(((r).dig_revid1[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_REVID1r_REVID_EEEf_GET(r) (((r).dig_revid1[0]) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_REVID1r_REVID_EEEf_SET(r,f) (r).dig_revid1[0]=(((r).dig_revid1[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access DIG_REVID1.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DIG_REVID1r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_REVID1r,(_r._dig_revid1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DIG_REVID1r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_REVID1r,(_r._dig_revid1)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DIG_REVID1r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_REVID1r,(_r._dig_revid1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DIG_REVID1r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_REVID1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dig_revid1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DIG_REVID1r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_REVID1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dig_revid1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DIG_REVID1r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_REVID1r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dig_revid1))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DIG_REVID1r BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_REVID1r
#define DIG_REVID1r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_REVID1r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_REVID1r_t DIG_REVID1r_t;
#define DIG_REVID1r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_REVID1r_CLR
#define DIG_REVID1r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_REVID1r_SET
#define DIG_REVID1r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_REVID1r_GET
#define DIG_REVID1r_REVID_MULTIPLICITYf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_REVID1r_REVID_MULTIPLICITYf_GET
#define DIG_REVID1r_REVID_MULTIPLICITYf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_REVID1r_REVID_MULTIPLICITYf_SET
#define DIG_REVID1r_REVID_MDIOf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_REVID1r_REVID_MDIOf_GET
#define DIG_REVID1r_REVID_MDIOf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_REVID1r_REVID_MDIOf_SET
#define DIG_REVID1r_REVID_MICROf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_REVID1r_REVID_MICROf_GET
#define DIG_REVID1r_REVID_MICROf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_REVID1r_REVID_MICROf_SET
#define DIG_REVID1r_REVID_CL72f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_REVID1r_REVID_CL72f_GET
#define DIG_REVID1r_REVID_CL72f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_REVID1r_REVID_CL72f_SET
#define DIG_REVID1r_REVID_PIRf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_REVID1r_REVID_PIRf_GET
#define DIG_REVID1r_REVID_PIRf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_REVID1r_REVID_PIRf_SET
#define DIG_REVID1r_REVID_LLPf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_REVID1r_REVID_LLPf_GET
#define DIG_REVID1r_REVID_LLPf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_REVID1r_REVID_LLPf_SET
#define DIG_REVID1r_REVID_EEEf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_REVID1r_REVID_EEEf_GET
#define DIG_REVID1r_REVID_EEEf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_REVID1r_REVID_EEEf_SET
#define READ_DIG_REVID1r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DIG_REVID1r
#define WRITE_DIG_REVID1r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DIG_REVID1r
#define MODIFY_DIG_REVID1r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DIG_REVID1r
#define READLN_DIG_REVID1r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DIG_REVID1r
#define WRITELN_DIG_REVID1r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DIG_REVID1r
#define WRITEALL_DIG_REVID1r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DIG_REVID1r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_REVID1r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  DIG_REVID2
 * BLOCKS:   DIG_COM
 * REGADDR:  0xd10e
 * DEVAD:    1
 * DESC:     REVID2
 * RESETVAL: 0x3 (3)
 * ACCESS:   R/O
 * FIELDS:
 *     REVID2           Revision ID2 code
 *     RING_COUNT_OVERFLOW RING_OSC ring counter has overflown.This is a sticky bit and cleared upon reset to the RING_OSC block.
 *     RING_DONE        RING_OSC ring counter is done.This is a sticky bit and cleared upon reset to the RING_OSC block.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_REVID2r (0x0001d10e | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_REVID2r_SIZE 4

/*
 * This structure should be used to declare and program DIG_REVID2.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_REVID2r_s {
	uint32_t v[1];
	uint32_t dig_revid2[1];
	uint32_t _dig_revid2;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_REVID2r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_REVID2r_CLR(r) (r).dig_revid2[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_REVID2r_SET(r,d) (r).dig_revid2[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_REVID2r_GET(r) (r).dig_revid2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_REVID2r_RING_DONEf_GET(r) ((((r).dig_revid2[0]) >> 15) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_REVID2r_RING_DONEf_SET(r,f) (r).dig_revid2[0]=(((r).dig_revid2[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_REVID2r_RING_COUNT_OVERFLOWf_GET(r) ((((r).dig_revid2[0]) >> 14) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_REVID2r_RING_COUNT_OVERFLOWf_SET(r,f) (r).dig_revid2[0]=(((r).dig_revid2[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14)) | (1 << (16 + 14))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_REVID2r_REVID2f_GET(r) (((r).dig_revid2[0]) & 0xf)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_REVID2r_REVID2f_SET(r,f) (r).dig_revid2[0]=(((r).dig_revid2[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf)) | (0xf << 16)

/*
 * These macros can be used to access DIG_REVID2.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DIG_REVID2r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_REVID2r,(_r._dig_revid2))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DIG_REVID2r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_REVID2r,(_r._dig_revid2)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DIG_REVID2r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_REVID2r,(_r._dig_revid2))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DIG_REVID2r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_REVID2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dig_revid2))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DIG_REVID2r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_REVID2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dig_revid2))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DIG_REVID2r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_REVID2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dig_revid2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DIG_REVID2r BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_REVID2r
#define DIG_REVID2r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_REVID2r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_REVID2r_t DIG_REVID2r_t;
#define DIG_REVID2r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_REVID2r_CLR
#define DIG_REVID2r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_REVID2r_SET
#define DIG_REVID2r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_REVID2r_GET
#define DIG_REVID2r_RING_DONEf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_REVID2r_RING_DONEf_GET
#define DIG_REVID2r_RING_DONEf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_REVID2r_RING_DONEf_SET
#define DIG_REVID2r_RING_COUNT_OVERFLOWf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_REVID2r_RING_COUNT_OVERFLOWf_GET
#define DIG_REVID2r_RING_COUNT_OVERFLOWf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_REVID2r_RING_COUNT_OVERFLOWf_SET
#define DIG_REVID2r_REVID2f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_REVID2r_REVID2f_GET
#define DIG_REVID2r_REVID2f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_REVID2r_REVID2f_SET
#define READ_DIG_REVID2r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DIG_REVID2r
#define WRITE_DIG_REVID2r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DIG_REVID2r
#define MODIFY_DIG_REVID2r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DIG_REVID2r
#define READLN_DIG_REVID2r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DIG_REVID2r
#define WRITELN_DIG_REVID2r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DIG_REVID2r
#define WRITEALL_DIG_REVID2r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DIG_REVID2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_REVID2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  AMS_PLL_PLL_CTL0
 * BLOCKS:   AMS_PLL_COM
 * REGADDR:  0xd110
 * DEVAD:    1
 * DESC:     AMS PLL CONTROL_0
 * RESETVAL: 0x1488 (5256)
 * ACCESS:   R/W
 * FIELDS:
 *     AMS_PLL_PWRDN_VDDR VDDR power down control. 0:powerup, 1:powerdown. AFE pll_ctrl 0:0  amsbus ctrl_out  0:0DFT_MUX
 *     AMS_PLL_PWRDN_RTL power down 2TD2C.It will kill the clock and all the RTL divider outputs. 0:powerup, 1:powerdown. AFE pll_ctrl 1:1  amsbus ctrl_out  1:1DFT_MUX
 *     AMS_PLL_PWRDN_MMD MMD power down control. 0:powerup. 1:powerdown. AFE pll_ctrl 2:2  amsbus ctrl_out  2:2DFT_MUX
 *     AMS_PLL_PWRDN_CLK2 Clock2 power down control. 0:powerup, 1:powerdown. AFE pll_ctrl 3:3  amsbus ctrl_out  3:3DFT_MUX
 *     AMS_PLL_PWRDN_CLK1 Clock1 power down control. 0:powerup, 1:powerdown. AFE pll_ctrl 4:4  amsbus ctrl_out  4:4DFT_MUX
 *     AMS_PLL_PWRDN_BUF CML divide-by-2 power down control. 0:powerup, 1:powerdown. AFE pll_ctrl 5:5  amsbus ctrl_out  5:5DFT_MUX
 *     AMS_PLL_PWRDN_CP Charge pump power down control. 0:powerup, 1:powerdown. AFE pll_ctrl 6:6  amsbus ctrl_out  6:6DFT_MUX
 *     AMS_PLL_PWRDN_B_SDM Sigma-Delta modulator power down control. 0:powerdown, 1:powerup. AFE pll_ctrl 7:7  amsbus ctrl_out  7:7DFT_MUX
 *     AMS_PLL_PWRDN_REFBUF Reference buffer power down control. 0:powerup, 1:powerdown. AFE pll_ctrl 8:8  amsbus ctrl_out  8:8DFT_MUX
 *     AMS_PLL_PWRDN_BG Bandgap power down control. 0:powerup, 1:powerdown. AFE pll_ctrl 9:9  amsbus ctrl_out  9:9DFT_MUX
 *     RESERVED_AMS_COM_0 Reserved bitsmust not be written to. A read returns an unknown value
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL0r (0x0001d110 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL0r_SIZE 4

/*
 * This structure should be used to declare and program AMS_PLL_PLL_CTL0.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL0r_s {
	uint32_t v[1];
	uint32_t ams_pll_pll_ctl0[1];
	uint32_t _ams_pll_pll_ctl0;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL0r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL0r_CLR(r) (r).ams_pll_pll_ctl0[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL0r_SET(r,d) (r).ams_pll_pll_ctl0[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL0r_GET(r) (r).ams_pll_pll_ctl0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL0r_RESERVED_AMS_COM_0f_GET(r) ((((r).ams_pll_pll_ctl0[0]) >> 10) & 0x3f)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL0r_RESERVED_AMS_COM_0f_SET(r,f) (r).ams_pll_pll_ctl0[0]=(((r).ams_pll_pll_ctl0[0] & ~((uint32_t)0x3f << 10)) | ((((uint32_t)f) & 0x3f) << 10)) | (63 << (16 + 10))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL0r_AMS_PLL_PWRDN_BGf_GET(r) ((((r).ams_pll_pll_ctl0[0]) >> 9) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL0r_AMS_PLL_PWRDN_BGf_SET(r,f) (r).ams_pll_pll_ctl0[0]=(((r).ams_pll_pll_ctl0[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9)) | (1 << (16 + 9))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL0r_AMS_PLL_PWRDN_REFBUFf_GET(r) ((((r).ams_pll_pll_ctl0[0]) >> 8) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL0r_AMS_PLL_PWRDN_REFBUFf_SET(r,f) (r).ams_pll_pll_ctl0[0]=(((r).ams_pll_pll_ctl0[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8)) | (1 << (16 + 8))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL0r_AMS_PLL_PWRDN_B_SDMf_GET(r) ((((r).ams_pll_pll_ctl0[0]) >> 7) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL0r_AMS_PLL_PWRDN_B_SDMf_SET(r,f) (r).ams_pll_pll_ctl0[0]=(((r).ams_pll_pll_ctl0[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL0r_AMS_PLL_PWRDN_CPf_GET(r) ((((r).ams_pll_pll_ctl0[0]) >> 6) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL0r_AMS_PLL_PWRDN_CPf_SET(r,f) (r).ams_pll_pll_ctl0[0]=(((r).ams_pll_pll_ctl0[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL0r_AMS_PLL_PWRDN_BUFf_GET(r) ((((r).ams_pll_pll_ctl0[0]) >> 5) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL0r_AMS_PLL_PWRDN_BUFf_SET(r,f) (r).ams_pll_pll_ctl0[0]=(((r).ams_pll_pll_ctl0[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL0r_AMS_PLL_PWRDN_CLK1f_GET(r) ((((r).ams_pll_pll_ctl0[0]) >> 4) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL0r_AMS_PLL_PWRDN_CLK1f_SET(r,f) (r).ams_pll_pll_ctl0[0]=(((r).ams_pll_pll_ctl0[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL0r_AMS_PLL_PWRDN_CLK2f_GET(r) ((((r).ams_pll_pll_ctl0[0]) >> 3) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL0r_AMS_PLL_PWRDN_CLK2f_SET(r,f) (r).ams_pll_pll_ctl0[0]=(((r).ams_pll_pll_ctl0[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL0r_AMS_PLL_PWRDN_MMDf_GET(r) ((((r).ams_pll_pll_ctl0[0]) >> 2) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL0r_AMS_PLL_PWRDN_MMDf_SET(r,f) (r).ams_pll_pll_ctl0[0]=(((r).ams_pll_pll_ctl0[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL0r_AMS_PLL_PWRDN_RTLf_GET(r) ((((r).ams_pll_pll_ctl0[0]) >> 1) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL0r_AMS_PLL_PWRDN_RTLf_SET(r,f) (r).ams_pll_pll_ctl0[0]=(((r).ams_pll_pll_ctl0[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL0r_AMS_PLL_PWRDN_VDDRf_GET(r) (((r).ams_pll_pll_ctl0[0]) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL0r_AMS_PLL_PWRDN_VDDRf_SET(r,f) (r).ams_pll_pll_ctl0[0]=(((r).ams_pll_pll_ctl0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access AMS_PLL_PLL_CTL0.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_AMS_PLL_PLL_CTL0r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL0r,(_r._ams_pll_pll_ctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_AMS_PLL_PLL_CTL0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL0r,(_r._ams_pll_pll_ctl0)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_AMS_PLL_PLL_CTL0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL0r,(_r._ams_pll_pll_ctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_AMS_PLL_PLL_CTL0r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_pll_pll_ctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_AMS_PLL_PLL_CTL0r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_pll_pll_ctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_AMS_PLL_PLL_CTL0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._ams_pll_pll_ctl0))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AMS_PLL_PLL_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL0r
#define AMS_PLL_PLL_CTL0r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL0r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL0r_t AMS_PLL_PLL_CTL0r_t;
#define AMS_PLL_PLL_CTL0r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL0r_CLR
#define AMS_PLL_PLL_CTL0r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL0r_SET
#define AMS_PLL_PLL_CTL0r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL0r_GET
#define AMS_PLL_PLL_CTL0r_RESERVED_AMS_COM_0f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL0r_RESERVED_AMS_COM_0f_GET
#define AMS_PLL_PLL_CTL0r_RESERVED_AMS_COM_0f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL0r_RESERVED_AMS_COM_0f_SET
#define AMS_PLL_PLL_CTL0r_AMS_PLL_PWRDN_BGf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL0r_AMS_PLL_PWRDN_BGf_GET
#define AMS_PLL_PLL_CTL0r_AMS_PLL_PWRDN_BGf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL0r_AMS_PLL_PWRDN_BGf_SET
#define AMS_PLL_PLL_CTL0r_AMS_PLL_PWRDN_REFBUFf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL0r_AMS_PLL_PWRDN_REFBUFf_GET
#define AMS_PLL_PLL_CTL0r_AMS_PLL_PWRDN_REFBUFf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL0r_AMS_PLL_PWRDN_REFBUFf_SET
#define AMS_PLL_PLL_CTL0r_AMS_PLL_PWRDN_B_SDMf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL0r_AMS_PLL_PWRDN_B_SDMf_GET
#define AMS_PLL_PLL_CTL0r_AMS_PLL_PWRDN_B_SDMf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL0r_AMS_PLL_PWRDN_B_SDMf_SET
#define AMS_PLL_PLL_CTL0r_AMS_PLL_PWRDN_CPf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL0r_AMS_PLL_PWRDN_CPf_GET
#define AMS_PLL_PLL_CTL0r_AMS_PLL_PWRDN_CPf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL0r_AMS_PLL_PWRDN_CPf_SET
#define AMS_PLL_PLL_CTL0r_AMS_PLL_PWRDN_BUFf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL0r_AMS_PLL_PWRDN_BUFf_GET
#define AMS_PLL_PLL_CTL0r_AMS_PLL_PWRDN_BUFf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL0r_AMS_PLL_PWRDN_BUFf_SET
#define AMS_PLL_PLL_CTL0r_AMS_PLL_PWRDN_CLK1f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL0r_AMS_PLL_PWRDN_CLK1f_GET
#define AMS_PLL_PLL_CTL0r_AMS_PLL_PWRDN_CLK1f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL0r_AMS_PLL_PWRDN_CLK1f_SET
#define AMS_PLL_PLL_CTL0r_AMS_PLL_PWRDN_CLK2f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL0r_AMS_PLL_PWRDN_CLK2f_GET
#define AMS_PLL_PLL_CTL0r_AMS_PLL_PWRDN_CLK2f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL0r_AMS_PLL_PWRDN_CLK2f_SET
#define AMS_PLL_PLL_CTL0r_AMS_PLL_PWRDN_MMDf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL0r_AMS_PLL_PWRDN_MMDf_GET
#define AMS_PLL_PLL_CTL0r_AMS_PLL_PWRDN_MMDf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL0r_AMS_PLL_PWRDN_MMDf_SET
#define AMS_PLL_PLL_CTL0r_AMS_PLL_PWRDN_RTLf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL0r_AMS_PLL_PWRDN_RTLf_GET
#define AMS_PLL_PLL_CTL0r_AMS_PLL_PWRDN_RTLf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL0r_AMS_PLL_PWRDN_RTLf_SET
#define AMS_PLL_PLL_CTL0r_AMS_PLL_PWRDN_VDDRf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL0r_AMS_PLL_PWRDN_VDDRf_GET
#define AMS_PLL_PLL_CTL0r_AMS_PLL_PWRDN_VDDRf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL0r_AMS_PLL_PWRDN_VDDRf_SET
#define READ_AMS_PLL_PLL_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_AMS_PLL_PLL_CTL0r
#define WRITE_AMS_PLL_PLL_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_AMS_PLL_PLL_CTL0r
#define MODIFY_AMS_PLL_PLL_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_AMS_PLL_PLL_CTL0r
#define READLN_AMS_PLL_PLL_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_AMS_PLL_PLL_CTL0r
#define WRITELN_AMS_PLL_PLL_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_AMS_PLL_PLL_CTL0r
#define WRITEALL_AMS_PLL_PLL_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_AMS_PLL_PLL_CTL0r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  AMS_PLL_PLL_CTL1
 * BLOCKS:   AMS_PLL_COM
 * REGADDR:  0xd111
 * DEVAD:    1
 * DESC:     AMS PLL CONTROL_1
 * RESETVAL: 0x731d (29469)
 * ACCESS:   R/W
 * FIELDS:
 *     RESERVED_AMS_COM_4 Reserved bitsmust not be written to. A read returns an unknown value
 *     AMS_PLL_TERM     Termination resistor(differential)selection.000:400ohm,001:300ohm,011:200ohm,111:100ohm AFE pll_ctrl 20:18  amsbus ctrl_out  20:18DFT_MUX
 *     AMS_PLL_REFDIV2  Divides the input refclk by 2. Bits Refdiv4 and Refdiv2 must not be asserted at the same time. To avoid glitches on the refclk, these two bits should be set with strap pins, or similar. AFE pll_ctrl 21:21  amsbus ctrl_out  21:21
 *     AMS_PLL_REFDIV4  Divides the input refclk by 4, and is applied to a refclk that is sourced from the bumps. AFE pll_ctrl 22:22  amsbus ctrl_out  22:22
 *     RESERVED_AMS_COM_3 Reserved bitmust not be written to. A read returns an unknown value
 *     RESERVED_AMS_COM_2 Reserved bitsmust not be written to. A read returns an unknown value
 *     RESERVED_AMS_COM_1 Reserved bitsmust not be written to. A read returns an unknown value
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL1r (0x0001d111 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL1r_SIZE 4

/*
 * This structure should be used to declare and program AMS_PLL_PLL_CTL1.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL1r_s {
	uint32_t v[1];
	uint32_t ams_pll_pll_ctl1[1];
	uint32_t _ams_pll_pll_ctl1;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL1r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL1r_CLR(r) (r).ams_pll_pll_ctl1[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL1r_SET(r,d) (r).ams_pll_pll_ctl1[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL1r_GET(r) (r).ams_pll_pll_ctl1[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL1r_RESERVED_AMS_COM_1f_GET(r) ((((r).ams_pll_pll_ctl1[0]) >> 14) & 0x3)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL1r_RESERVED_AMS_COM_1f_SET(r,f) (r).ams_pll_pll_ctl1[0]=(((r).ams_pll_pll_ctl1[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14)) | (3 << (16 + 14))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL1r_RESERVED_AMS_COM_2f_GET(r) ((((r).ams_pll_pll_ctl1[0]) >> 8) & 0x3f)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL1r_RESERVED_AMS_COM_2f_SET(r,f) (r).ams_pll_pll_ctl1[0]=(((r).ams_pll_pll_ctl1[0] & ~((uint32_t)0x3f << 8)) | ((((uint32_t)f) & 0x3f) << 8)) | (63 << (16 + 8))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL1r_RESERVED_AMS_COM_3f_GET(r) ((((r).ams_pll_pll_ctl1[0]) >> 7) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL1r_RESERVED_AMS_COM_3f_SET(r,f) (r).ams_pll_pll_ctl1[0]=(((r).ams_pll_pll_ctl1[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL1r_AMS_PLL_REFDIV4f_GET(r) ((((r).ams_pll_pll_ctl1[0]) >> 6) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL1r_AMS_PLL_REFDIV4f_SET(r,f) (r).ams_pll_pll_ctl1[0]=(((r).ams_pll_pll_ctl1[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL1r_AMS_PLL_REFDIV2f_GET(r) ((((r).ams_pll_pll_ctl1[0]) >> 5) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL1r_AMS_PLL_REFDIV2f_SET(r,f) (r).ams_pll_pll_ctl1[0]=(((r).ams_pll_pll_ctl1[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL1r_AMS_PLL_TERMf_GET(r) ((((r).ams_pll_pll_ctl1[0]) >> 2) & 0x7)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL1r_AMS_PLL_TERMf_SET(r,f) (r).ams_pll_pll_ctl1[0]=(((r).ams_pll_pll_ctl1[0] & ~((uint32_t)0x7 << 2)) | ((((uint32_t)f) & 0x7) << 2)) | (7 << (16 + 2))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL1r_RESERVED_AMS_COM_4f_GET(r) (((r).ams_pll_pll_ctl1[0]) & 0x3)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL1r_RESERVED_AMS_COM_4f_SET(r,f) (r).ams_pll_pll_ctl1[0]=(((r).ams_pll_pll_ctl1[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3)) | (0x3 << 16)

/*
 * These macros can be used to access AMS_PLL_PLL_CTL1.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_AMS_PLL_PLL_CTL1r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL1r,(_r._ams_pll_pll_ctl1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_AMS_PLL_PLL_CTL1r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL1r,(_r._ams_pll_pll_ctl1)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_AMS_PLL_PLL_CTL1r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL1r,(_r._ams_pll_pll_ctl1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_AMS_PLL_PLL_CTL1r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_pll_pll_ctl1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_AMS_PLL_PLL_CTL1r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_pll_pll_ctl1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_AMS_PLL_PLL_CTL1r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL1r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._ams_pll_pll_ctl1))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AMS_PLL_PLL_CTL1r BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL1r
#define AMS_PLL_PLL_CTL1r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL1r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL1r_t AMS_PLL_PLL_CTL1r_t;
#define AMS_PLL_PLL_CTL1r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL1r_CLR
#define AMS_PLL_PLL_CTL1r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL1r_SET
#define AMS_PLL_PLL_CTL1r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL1r_GET
#define AMS_PLL_PLL_CTL1r_RESERVED_AMS_COM_1f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL1r_RESERVED_AMS_COM_1f_GET
#define AMS_PLL_PLL_CTL1r_RESERVED_AMS_COM_1f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL1r_RESERVED_AMS_COM_1f_SET
#define AMS_PLL_PLL_CTL1r_RESERVED_AMS_COM_2f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL1r_RESERVED_AMS_COM_2f_GET
#define AMS_PLL_PLL_CTL1r_RESERVED_AMS_COM_2f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL1r_RESERVED_AMS_COM_2f_SET
#define AMS_PLL_PLL_CTL1r_RESERVED_AMS_COM_3f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL1r_RESERVED_AMS_COM_3f_GET
#define AMS_PLL_PLL_CTL1r_RESERVED_AMS_COM_3f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL1r_RESERVED_AMS_COM_3f_SET
#define AMS_PLL_PLL_CTL1r_AMS_PLL_REFDIV4f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL1r_AMS_PLL_REFDIV4f_GET
#define AMS_PLL_PLL_CTL1r_AMS_PLL_REFDIV4f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL1r_AMS_PLL_REFDIV4f_SET
#define AMS_PLL_PLL_CTL1r_AMS_PLL_REFDIV2f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL1r_AMS_PLL_REFDIV2f_GET
#define AMS_PLL_PLL_CTL1r_AMS_PLL_REFDIV2f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL1r_AMS_PLL_REFDIV2f_SET
#define AMS_PLL_PLL_CTL1r_AMS_PLL_TERMf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL1r_AMS_PLL_TERMf_GET
#define AMS_PLL_PLL_CTL1r_AMS_PLL_TERMf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL1r_AMS_PLL_TERMf_SET
#define AMS_PLL_PLL_CTL1r_RESERVED_AMS_COM_4f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL1r_RESERVED_AMS_COM_4f_GET
#define AMS_PLL_PLL_CTL1r_RESERVED_AMS_COM_4f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL1r_RESERVED_AMS_COM_4f_SET
#define READ_AMS_PLL_PLL_CTL1r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_AMS_PLL_PLL_CTL1r
#define WRITE_AMS_PLL_PLL_CTL1r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_AMS_PLL_PLL_CTL1r
#define MODIFY_AMS_PLL_PLL_CTL1r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_AMS_PLL_PLL_CTL1r
#define READLN_AMS_PLL_PLL_CTL1r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_AMS_PLL_PLL_CTL1r
#define WRITELN_AMS_PLL_PLL_CTL1r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_AMS_PLL_PLL_CTL1r
#define WRITEALL_AMS_PLL_PLL_CTL1r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_AMS_PLL_PLL_CTL1r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL1r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  AMS_PLL_PLL_CTL2
 * BLOCKS:   AMS_PLL_COM
 * REGADDR:  0xd112
 * DEVAD:    1
 * DESC:     AMS PLL CONTROL_2
 * RESETVAL: 0xa0 (160)
 * ACCESS:   R/W
 * FIELDS:
 *     RESERVED_AMS_COM_7 Reserved bitsmust not be written to. A read returns an unknown value
 *     RESERVED_AMS_COM_6 Reserved bitmust not be written to. A read returns an unknown value
 *     AMS_PLL_SPARE_39_37 AMS reserved [39:37] AFE pll_ctrl 39:37  amsbus ctrl_out  39:37DFT_MUX
 *     AMS_PLL_TEST_VBG_SEL measure internal BG nodes, 00:off, 01:Vbe, 10:Vbe2+IR, 11:Vbe2. To fully enable this mode, Test_vbypass = 1 and Test_bg = 1 AFE pll_ctrl 73:72  amsbus ctrl_out  73:72DFT_MUX
 *     AMS_PLL_TEST_BG  Test-port control bit, 0: disable bandgap test, 1: enable bandgap test AFE pll_ctrl 74:74  amsbus ctrl_out  74:74DFT_MUX
 *     AMS_PLL_TEST_IBG Test-port control bit, when test_bg = 1, 0: test bandgap voltage output, 1: test bandgap current output AFE pll_ctrl 75:75  amsbus ctrl_out  75:75DFT_MUX
 *     AMS_PLL_VDDR_FOR_TXRX Use VDD/R current for TX and RX bias current. When tx_drv_hv_disable = 0: 0: use bandgap current for TX and RX, 1: use VDD/R current for TX and RX.(When tx_drv_hv_disable = 1, always use VDD/R current.) AFE pll_ctrl 76:76  amsbus ctrl_out  76:76DFT_MUX
 *     AMS_PLL_VDD_0P8_EN Keep VDD/R bias current at 100uA if AVDD = 0.8V typical. 0: for AVDD = 0.75V, 1: for AVDD = 0.8V AFE pll_ctrl 77:77  amsbus ctrl_out  77:77DFT_MUX
 *     RESERVED_AMS_COM_5 Reserved bitsmust not be written to. A read returns an unknown value
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL2r (0x0001d112 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL2r_SIZE 4

/*
 * This structure should be used to declare and program AMS_PLL_PLL_CTL2.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL2r_s {
	uint32_t v[1];
	uint32_t ams_pll_pll_ctl2[1];
	uint32_t _ams_pll_pll_ctl2;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL2r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL2r_CLR(r) (r).ams_pll_pll_ctl2[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL2r_SET(r,d) (r).ams_pll_pll_ctl2[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL2r_GET(r) (r).ams_pll_pll_ctl2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL2r_RESERVED_AMS_COM_5f_GET(r) ((((r).ams_pll_pll_ctl2[0]) >> 14) & 0x3)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL2r_RESERVED_AMS_COM_5f_SET(r,f) (r).ams_pll_pll_ctl2[0]=(((r).ams_pll_pll_ctl2[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14)) | (3 << (16 + 14))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL2r_AMS_PLL_VDD_0P8_ENf_GET(r) ((((r).ams_pll_pll_ctl2[0]) >> 13) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL2r_AMS_PLL_VDD_0P8_ENf_SET(r,f) (r).ams_pll_pll_ctl2[0]=(((r).ams_pll_pll_ctl2[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13)) | (1 << (16 + 13))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL2r_AMS_PLL_VDDR_FOR_TXRXf_GET(r) ((((r).ams_pll_pll_ctl2[0]) >> 12) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL2r_AMS_PLL_VDDR_FOR_TXRXf_SET(r,f) (r).ams_pll_pll_ctl2[0]=(((r).ams_pll_pll_ctl2[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12)) | (1 << (16 + 12))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL2r_AMS_PLL_TEST_IBGf_GET(r) ((((r).ams_pll_pll_ctl2[0]) >> 11) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL2r_AMS_PLL_TEST_IBGf_SET(r,f) (r).ams_pll_pll_ctl2[0]=(((r).ams_pll_pll_ctl2[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11)) | (1 << (16 + 11))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL2r_AMS_PLL_TEST_BGf_GET(r) ((((r).ams_pll_pll_ctl2[0]) >> 10) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL2r_AMS_PLL_TEST_BGf_SET(r,f) (r).ams_pll_pll_ctl2[0]=(((r).ams_pll_pll_ctl2[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10)) | (1 << (16 + 10))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL2r_AMS_PLL_TEST_VBG_SELf_GET(r) ((((r).ams_pll_pll_ctl2[0]) >> 8) & 0x3)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL2r_AMS_PLL_TEST_VBG_SELf_SET(r,f) (r).ams_pll_pll_ctl2[0]=(((r).ams_pll_pll_ctl2[0] & ~((uint32_t)0x3 << 8)) | ((((uint32_t)f) & 0x3) << 8)) | (3 << (16 + 8))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL2r_AMS_PLL_SPARE_39_37f_GET(r) ((((r).ams_pll_pll_ctl2[0]) >> 5) & 0x7)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL2r_AMS_PLL_SPARE_39_37f_SET(r,f) (r).ams_pll_pll_ctl2[0]=(((r).ams_pll_pll_ctl2[0] & ~((uint32_t)0x7 << 5)) | ((((uint32_t)f) & 0x7) << 5)) | (7 << (16 + 5))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL2r_RESERVED_AMS_COM_6f_GET(r) ((((r).ams_pll_pll_ctl2[0]) >> 4) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL2r_RESERVED_AMS_COM_6f_SET(r,f) (r).ams_pll_pll_ctl2[0]=(((r).ams_pll_pll_ctl2[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL2r_RESERVED_AMS_COM_7f_GET(r) (((r).ams_pll_pll_ctl2[0]) & 0xf)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL2r_RESERVED_AMS_COM_7f_SET(r,f) (r).ams_pll_pll_ctl2[0]=(((r).ams_pll_pll_ctl2[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf)) | (0xf << 16)

/*
 * These macros can be used to access AMS_PLL_PLL_CTL2.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_AMS_PLL_PLL_CTL2r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL2r,(_r._ams_pll_pll_ctl2))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_AMS_PLL_PLL_CTL2r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL2r,(_r._ams_pll_pll_ctl2)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_AMS_PLL_PLL_CTL2r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL2r,(_r._ams_pll_pll_ctl2))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_AMS_PLL_PLL_CTL2r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_pll_pll_ctl2))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_AMS_PLL_PLL_CTL2r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_pll_pll_ctl2))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_AMS_PLL_PLL_CTL2r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._ams_pll_pll_ctl2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AMS_PLL_PLL_CTL2r BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL2r
#define AMS_PLL_PLL_CTL2r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL2r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL2r_t AMS_PLL_PLL_CTL2r_t;
#define AMS_PLL_PLL_CTL2r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL2r_CLR
#define AMS_PLL_PLL_CTL2r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL2r_SET
#define AMS_PLL_PLL_CTL2r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL2r_GET
#define AMS_PLL_PLL_CTL2r_RESERVED_AMS_COM_5f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL2r_RESERVED_AMS_COM_5f_GET
#define AMS_PLL_PLL_CTL2r_RESERVED_AMS_COM_5f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL2r_RESERVED_AMS_COM_5f_SET
#define AMS_PLL_PLL_CTL2r_AMS_PLL_VDD_0P8_ENf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL2r_AMS_PLL_VDD_0P8_ENf_GET
#define AMS_PLL_PLL_CTL2r_AMS_PLL_VDD_0P8_ENf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL2r_AMS_PLL_VDD_0P8_ENf_SET
#define AMS_PLL_PLL_CTL2r_AMS_PLL_VDDR_FOR_TXRXf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL2r_AMS_PLL_VDDR_FOR_TXRXf_GET
#define AMS_PLL_PLL_CTL2r_AMS_PLL_VDDR_FOR_TXRXf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL2r_AMS_PLL_VDDR_FOR_TXRXf_SET
#define AMS_PLL_PLL_CTL2r_AMS_PLL_TEST_IBGf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL2r_AMS_PLL_TEST_IBGf_GET
#define AMS_PLL_PLL_CTL2r_AMS_PLL_TEST_IBGf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL2r_AMS_PLL_TEST_IBGf_SET
#define AMS_PLL_PLL_CTL2r_AMS_PLL_TEST_BGf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL2r_AMS_PLL_TEST_BGf_GET
#define AMS_PLL_PLL_CTL2r_AMS_PLL_TEST_BGf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL2r_AMS_PLL_TEST_BGf_SET
#define AMS_PLL_PLL_CTL2r_AMS_PLL_TEST_VBG_SELf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL2r_AMS_PLL_TEST_VBG_SELf_GET
#define AMS_PLL_PLL_CTL2r_AMS_PLL_TEST_VBG_SELf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL2r_AMS_PLL_TEST_VBG_SELf_SET
#define AMS_PLL_PLL_CTL2r_AMS_PLL_SPARE_39_37f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL2r_AMS_PLL_SPARE_39_37f_GET
#define AMS_PLL_PLL_CTL2r_AMS_PLL_SPARE_39_37f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL2r_AMS_PLL_SPARE_39_37f_SET
#define AMS_PLL_PLL_CTL2r_RESERVED_AMS_COM_6f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL2r_RESERVED_AMS_COM_6f_GET
#define AMS_PLL_PLL_CTL2r_RESERVED_AMS_COM_6f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL2r_RESERVED_AMS_COM_6f_SET
#define AMS_PLL_PLL_CTL2r_RESERVED_AMS_COM_7f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL2r_RESERVED_AMS_COM_7f_GET
#define AMS_PLL_PLL_CTL2r_RESERVED_AMS_COM_7f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL2r_RESERVED_AMS_COM_7f_SET
#define READ_AMS_PLL_PLL_CTL2r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_AMS_PLL_PLL_CTL2r
#define WRITE_AMS_PLL_PLL_CTL2r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_AMS_PLL_PLL_CTL2r
#define MODIFY_AMS_PLL_PLL_CTL2r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_AMS_PLL_PLL_CTL2r
#define READLN_AMS_PLL_PLL_CTL2r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_AMS_PLL_PLL_CTL2r
#define WRITELN_AMS_PLL_PLL_CTL2r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_AMS_PLL_PLL_CTL2r
#define WRITEALL_AMS_PLL_PLL_CTL2r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_AMS_PLL_PLL_CTL2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  AMS_PLL_PLL_CTL3
 * BLOCKS:   AMS_PLL_COM
 * REGADDR:  0xd113
 * DEVAD:    1
 * DESC:     AMS PLL CONTROL_3
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RESERVED_AMS_COM_8 Reserved bitsmust not be written to. A read returns an unknown value
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL3r (0x0001d113 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL3r_SIZE 4

/*
 * This structure should be used to declare and program AMS_PLL_PLL_CTL3.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL3r_s {
	uint32_t v[1];
	uint32_t ams_pll_pll_ctl3[1];
	uint32_t _ams_pll_pll_ctl3;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL3r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL3r_CLR(r) (r).ams_pll_pll_ctl3[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL3r_SET(r,d) (r).ams_pll_pll_ctl3[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL3r_GET(r) (r).ams_pll_pll_ctl3[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL3r_RESERVED_AMS_COM_8f_GET(r) (((r).ams_pll_pll_ctl3[0]) & 0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL3r_RESERVED_AMS_COM_8f_SET(r,f) (r).ams_pll_pll_ctl3[0]=(((r).ams_pll_pll_ctl3[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access AMS_PLL_PLL_CTL3.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_AMS_PLL_PLL_CTL3r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL3r,(_r._ams_pll_pll_ctl3))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_AMS_PLL_PLL_CTL3r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL3r,(_r._ams_pll_pll_ctl3)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_AMS_PLL_PLL_CTL3r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL3r,(_r._ams_pll_pll_ctl3))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_AMS_PLL_PLL_CTL3r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL3r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_pll_pll_ctl3))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_AMS_PLL_PLL_CTL3r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL3r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_pll_pll_ctl3))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_AMS_PLL_PLL_CTL3r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL3r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._ams_pll_pll_ctl3))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AMS_PLL_PLL_CTL3r BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL3r
#define AMS_PLL_PLL_CTL3r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL3r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL3r_t AMS_PLL_PLL_CTL3r_t;
#define AMS_PLL_PLL_CTL3r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL3r_CLR
#define AMS_PLL_PLL_CTL3r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL3r_SET
#define AMS_PLL_PLL_CTL3r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL3r_GET
#define AMS_PLL_PLL_CTL3r_RESERVED_AMS_COM_8f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL3r_RESERVED_AMS_COM_8f_GET
#define AMS_PLL_PLL_CTL3r_RESERVED_AMS_COM_8f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL3r_RESERVED_AMS_COM_8f_SET
#define READ_AMS_PLL_PLL_CTL3r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_AMS_PLL_PLL_CTL3r
#define WRITE_AMS_PLL_PLL_CTL3r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_AMS_PLL_PLL_CTL3r
#define MODIFY_AMS_PLL_PLL_CTL3r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_AMS_PLL_PLL_CTL3r
#define READLN_AMS_PLL_PLL_CTL3r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_AMS_PLL_PLL_CTL3r
#define WRITELN_AMS_PLL_PLL_CTL3r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_AMS_PLL_PLL_CTL3r
#define WRITEALL_AMS_PLL_PLL_CTL3r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_AMS_PLL_PLL_CTL3r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL3r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  AMS_PLL_PLL_CTL4
 * BLOCKS:   AMS_PLL_COM
 * REGADDR:  0xd114
 * DEVAD:    1
 * DESC:     AMS PLL CONTROL_4
 * RESETVAL: 0x45 (69)
 * ACCESS:   R/W
 * FIELDS:
 *     AMS_PLL_SEL_CLK4REF Rate selection for the clock sending to reference buffer,00: div-by-40,01: div-by-80,10: div-by-160,11: div-by-320 AFE pll_ctrl 41:40  amsbus ctrl_out  41:40DFT_MUX
 *     RESERVED_AMS_COM_9 Reserved bitsmust not be written to. A read returns an unknown value
 *     AMS_PLL_I_EN_EXT_CMOS_REFCLK_IN Enable external CMOS refclk input buffer: 0: disable, 1: enable AFE pll_ctrl 64:64  amsbus ctrl_out  64:64
 *     AMS_PLL_I_EN_EXT_CML_REFCLK_OUT Enable external CML refclk output buffer: 0: disable, 1: enable AFE pll_ctrl 65:65  amsbus ctrl_out  65:65
 *     AMS_PLL_I_EN_EXT_CML_REFCLK_IN Enable external CML refclk input buffer. 0:disable, 1: enable AFE pll_ctrl 66:66  amsbus ctrl_out  66:66
 *     AMS_PLL_I_EN_EXTRA Enable extra branches (total of 3) in common mode to increase VCO current. Each unit adds 0.6 mA (~4% in highest current setting). see AMS AFE pll_ctrl 69:67  amsbus ctrl_out  69:67DFT_MUX
 *     AMS_PLL_VDDR_FOR_VCASN Use VDD/R current to generate NMOS mirror cascode bias voltage. When tx_drv_hv_disable = 0:0: use bandgap current to generate NMOS cascode bias voltage,1: use VDD/R current to generate NMOS cascode bias voltage. (When tx_drv_hv_disable = 1, always use VDD/R current.) AFE pll_ctrl 70:70  amsbus ctrl_out  70:70DFT_MUX
 *     AMS_PLL_VDDR_FOR_PLL Use VDD/R current for PLL bias current. When tx_drv_hv_disable = 0. 0: use bandgap current for PLL, 1: use VDD/R current for PLL. (When tx_drv_hv_disable = 1, always use VDD/R current.) AFE pll_ctrl 71:71  amsbus ctrl_out  71:71DFT_MUX
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL4r (0x0001d114 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL4r_SIZE 4

/*
 * This structure should be used to declare and program AMS_PLL_PLL_CTL4.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL4r_s {
	uint32_t v[1];
	uint32_t ams_pll_pll_ctl4[1];
	uint32_t _ams_pll_pll_ctl4;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL4r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL4r_CLR(r) (r).ams_pll_pll_ctl4[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL4r_SET(r,d) (r).ams_pll_pll_ctl4[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL4r_GET(r) (r).ams_pll_pll_ctl4[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL4r_AMS_PLL_VDDR_FOR_PLLf_GET(r) ((((r).ams_pll_pll_ctl4[0]) >> 15) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL4r_AMS_PLL_VDDR_FOR_PLLf_SET(r,f) (r).ams_pll_pll_ctl4[0]=(((r).ams_pll_pll_ctl4[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL4r_AMS_PLL_VDDR_FOR_VCASNf_GET(r) ((((r).ams_pll_pll_ctl4[0]) >> 14) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL4r_AMS_PLL_VDDR_FOR_VCASNf_SET(r,f) (r).ams_pll_pll_ctl4[0]=(((r).ams_pll_pll_ctl4[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14)) | (1 << (16 + 14))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL4r_AMS_PLL_I_EN_EXTRAf_GET(r) ((((r).ams_pll_pll_ctl4[0]) >> 11) & 0x7)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL4r_AMS_PLL_I_EN_EXTRAf_SET(r,f) (r).ams_pll_pll_ctl4[0]=(((r).ams_pll_pll_ctl4[0] & ~((uint32_t)0x7 << 11)) | ((((uint32_t)f) & 0x7) << 11)) | (7 << (16 + 11))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL4r_AMS_PLL_I_EN_EXT_CML_REFCLK_INf_GET(r) ((((r).ams_pll_pll_ctl4[0]) >> 10) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL4r_AMS_PLL_I_EN_EXT_CML_REFCLK_INf_SET(r,f) (r).ams_pll_pll_ctl4[0]=(((r).ams_pll_pll_ctl4[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10)) | (1 << (16 + 10))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL4r_AMS_PLL_I_EN_EXT_CML_REFCLK_OUTf_GET(r) ((((r).ams_pll_pll_ctl4[0]) >> 9) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL4r_AMS_PLL_I_EN_EXT_CML_REFCLK_OUTf_SET(r,f) (r).ams_pll_pll_ctl4[0]=(((r).ams_pll_pll_ctl4[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9)) | (1 << (16 + 9))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL4r_AMS_PLL_I_EN_EXT_CMOS_REFCLK_INf_GET(r) ((((r).ams_pll_pll_ctl4[0]) >> 8) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL4r_AMS_PLL_I_EN_EXT_CMOS_REFCLK_INf_SET(r,f) (r).ams_pll_pll_ctl4[0]=(((r).ams_pll_pll_ctl4[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8)) | (1 << (16 + 8))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL4r_RESERVED_AMS_COM_9f_GET(r) ((((r).ams_pll_pll_ctl4[0]) >> 2) & 0x3f)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL4r_RESERVED_AMS_COM_9f_SET(r,f) (r).ams_pll_pll_ctl4[0]=(((r).ams_pll_pll_ctl4[0] & ~((uint32_t)0x3f << 2)) | ((((uint32_t)f) & 0x3f) << 2)) | (63 << (16 + 2))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL4r_AMS_PLL_SEL_CLK4REFf_GET(r) (((r).ams_pll_pll_ctl4[0]) & 0x3)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL4r_AMS_PLL_SEL_CLK4REFf_SET(r,f) (r).ams_pll_pll_ctl4[0]=(((r).ams_pll_pll_ctl4[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3)) | (0x3 << 16)

/*
 * These macros can be used to access AMS_PLL_PLL_CTL4.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_AMS_PLL_PLL_CTL4r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL4r,(_r._ams_pll_pll_ctl4))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_AMS_PLL_PLL_CTL4r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL4r,(_r._ams_pll_pll_ctl4)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_AMS_PLL_PLL_CTL4r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL4r,(_r._ams_pll_pll_ctl4))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_AMS_PLL_PLL_CTL4r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL4r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_pll_pll_ctl4))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_AMS_PLL_PLL_CTL4r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL4r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_pll_pll_ctl4))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_AMS_PLL_PLL_CTL4r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL4r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._ams_pll_pll_ctl4))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AMS_PLL_PLL_CTL4r BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL4r
#define AMS_PLL_PLL_CTL4r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL4r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL4r_t AMS_PLL_PLL_CTL4r_t;
#define AMS_PLL_PLL_CTL4r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL4r_CLR
#define AMS_PLL_PLL_CTL4r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL4r_SET
#define AMS_PLL_PLL_CTL4r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL4r_GET
#define AMS_PLL_PLL_CTL4r_AMS_PLL_VDDR_FOR_PLLf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL4r_AMS_PLL_VDDR_FOR_PLLf_GET
#define AMS_PLL_PLL_CTL4r_AMS_PLL_VDDR_FOR_PLLf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL4r_AMS_PLL_VDDR_FOR_PLLf_SET
#define AMS_PLL_PLL_CTL4r_AMS_PLL_VDDR_FOR_VCASNf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL4r_AMS_PLL_VDDR_FOR_VCASNf_GET
#define AMS_PLL_PLL_CTL4r_AMS_PLL_VDDR_FOR_VCASNf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL4r_AMS_PLL_VDDR_FOR_VCASNf_SET
#define AMS_PLL_PLL_CTL4r_AMS_PLL_I_EN_EXTRAf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL4r_AMS_PLL_I_EN_EXTRAf_GET
#define AMS_PLL_PLL_CTL4r_AMS_PLL_I_EN_EXTRAf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL4r_AMS_PLL_I_EN_EXTRAf_SET
#define AMS_PLL_PLL_CTL4r_AMS_PLL_I_EN_EXT_CML_REFCLK_INf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL4r_AMS_PLL_I_EN_EXT_CML_REFCLK_INf_GET
#define AMS_PLL_PLL_CTL4r_AMS_PLL_I_EN_EXT_CML_REFCLK_INf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL4r_AMS_PLL_I_EN_EXT_CML_REFCLK_INf_SET
#define AMS_PLL_PLL_CTL4r_AMS_PLL_I_EN_EXT_CML_REFCLK_OUTf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL4r_AMS_PLL_I_EN_EXT_CML_REFCLK_OUTf_GET
#define AMS_PLL_PLL_CTL4r_AMS_PLL_I_EN_EXT_CML_REFCLK_OUTf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL4r_AMS_PLL_I_EN_EXT_CML_REFCLK_OUTf_SET
#define AMS_PLL_PLL_CTL4r_AMS_PLL_I_EN_EXT_CMOS_REFCLK_INf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL4r_AMS_PLL_I_EN_EXT_CMOS_REFCLK_INf_GET
#define AMS_PLL_PLL_CTL4r_AMS_PLL_I_EN_EXT_CMOS_REFCLK_INf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL4r_AMS_PLL_I_EN_EXT_CMOS_REFCLK_INf_SET
#define AMS_PLL_PLL_CTL4r_RESERVED_AMS_COM_9f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL4r_RESERVED_AMS_COM_9f_GET
#define AMS_PLL_PLL_CTL4r_RESERVED_AMS_COM_9f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL4r_RESERVED_AMS_COM_9f_SET
#define AMS_PLL_PLL_CTL4r_AMS_PLL_SEL_CLK4REFf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL4r_AMS_PLL_SEL_CLK4REFf_GET
#define AMS_PLL_PLL_CTL4r_AMS_PLL_SEL_CLK4REFf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL4r_AMS_PLL_SEL_CLK4REFf_SET
#define READ_AMS_PLL_PLL_CTL4r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_AMS_PLL_PLL_CTL4r
#define WRITE_AMS_PLL_PLL_CTL4r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_AMS_PLL_PLL_CTL4r
#define MODIFY_AMS_PLL_PLL_CTL4r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_AMS_PLL_PLL_CTL4r
#define READLN_AMS_PLL_PLL_CTL4r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_AMS_PLL_PLL_CTL4r
#define WRITELN_AMS_PLL_PLL_CTL4r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_AMS_PLL_PLL_CTL4r
#define WRITEALL_AMS_PLL_PLL_CTL4r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_AMS_PLL_PLL_CTL4r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL4r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  AMS_PLL_PLL_CTL5
 * BLOCKS:   AMS_PLL_COM
 * REGADDR:  0xd115
 * DEVAD:    1
 * DESC:     AMS PLL CONTROL_5
 * RESETVAL: 0x1800 (6144)
 * ACCESS:   R/W
 * FIELDS:
 *     RESERVED_AMS_COM_12 Reserved bitsmust not be written to. A read returns an unknown value
 *     RESERVED_AMS_COM_11 Reserved bitmust not be written to. A read returns an unknown value
 *     RESERVED_AMS_COM_10 Reserved bitsmust not be written to. A read returns an unknown value
 *     AMS_PLL_TEST_VREF Test-port control bit,0: VDD/R reference voltage doesn't go to testport,1: VDD/R reference voltage out to testport AFE pll_ctrl 136:136  amsbus ctrl_out  136:136DFT_MUX
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL5r (0x0001d115 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL5r_SIZE 4

/*
 * This structure should be used to declare and program AMS_PLL_PLL_CTL5.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL5r_s {
	uint32_t v[1];
	uint32_t ams_pll_pll_ctl5[1];
	uint32_t _ams_pll_pll_ctl5;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL5r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL5r_CLR(r) (r).ams_pll_pll_ctl5[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL5r_SET(r,d) (r).ams_pll_pll_ctl5[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL5r_GET(r) (r).ams_pll_pll_ctl5[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL5r_AMS_PLL_TEST_VREFf_GET(r) ((((r).ams_pll_pll_ctl5[0]) >> 14) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL5r_AMS_PLL_TEST_VREFf_SET(r,f) (r).ams_pll_pll_ctl5[0]=(((r).ams_pll_pll_ctl5[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14)) | (1 << (16 + 14))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL5r_RESERVED_AMS_COM_10f_GET(r) ((((r).ams_pll_pll_ctl5[0]) >> 11) & 0x7)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL5r_RESERVED_AMS_COM_10f_SET(r,f) (r).ams_pll_pll_ctl5[0]=(((r).ams_pll_pll_ctl5[0] & ~((uint32_t)0x7 << 11)) | ((((uint32_t)f) & 0x7) << 11)) | (7 << (16 + 11))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL5r_RESERVED_AMS_COM_11f_GET(r) ((((r).ams_pll_pll_ctl5[0]) >> 10) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL5r_RESERVED_AMS_COM_11f_SET(r,f) (r).ams_pll_pll_ctl5[0]=(((r).ams_pll_pll_ctl5[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10)) | (1 << (16 + 10))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL5r_RESERVED_AMS_COM_12f_GET(r) (((r).ams_pll_pll_ctl5[0]) & 0x3ff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL5r_RESERVED_AMS_COM_12f_SET(r,f) (r).ams_pll_pll_ctl5[0]=(((r).ams_pll_pll_ctl5[0] & ~((uint32_t)0x3ff)) | (((uint32_t)f) & 0x3ff)) | (0x3ff << 16)

/*
 * These macros can be used to access AMS_PLL_PLL_CTL5.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_AMS_PLL_PLL_CTL5r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL5r,(_r._ams_pll_pll_ctl5))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_AMS_PLL_PLL_CTL5r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL5r,(_r._ams_pll_pll_ctl5)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_AMS_PLL_PLL_CTL5r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL5r,(_r._ams_pll_pll_ctl5))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_AMS_PLL_PLL_CTL5r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL5r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_pll_pll_ctl5))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_AMS_PLL_PLL_CTL5r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL5r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_pll_pll_ctl5))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_AMS_PLL_PLL_CTL5r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL5r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._ams_pll_pll_ctl5))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AMS_PLL_PLL_CTL5r BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL5r
#define AMS_PLL_PLL_CTL5r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL5r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL5r_t AMS_PLL_PLL_CTL5r_t;
#define AMS_PLL_PLL_CTL5r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL5r_CLR
#define AMS_PLL_PLL_CTL5r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL5r_SET
#define AMS_PLL_PLL_CTL5r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL5r_GET
#define AMS_PLL_PLL_CTL5r_AMS_PLL_TEST_VREFf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL5r_AMS_PLL_TEST_VREFf_GET
#define AMS_PLL_PLL_CTL5r_AMS_PLL_TEST_VREFf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL5r_AMS_PLL_TEST_VREFf_SET
#define AMS_PLL_PLL_CTL5r_RESERVED_AMS_COM_10f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL5r_RESERVED_AMS_COM_10f_GET
#define AMS_PLL_PLL_CTL5r_RESERVED_AMS_COM_10f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL5r_RESERVED_AMS_COM_10f_SET
#define AMS_PLL_PLL_CTL5r_RESERVED_AMS_COM_11f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL5r_RESERVED_AMS_COM_11f_GET
#define AMS_PLL_PLL_CTL5r_RESERVED_AMS_COM_11f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL5r_RESERVED_AMS_COM_11f_SET
#define AMS_PLL_PLL_CTL5r_RESERVED_AMS_COM_12f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL5r_RESERVED_AMS_COM_12f_GET
#define AMS_PLL_PLL_CTL5r_RESERVED_AMS_COM_12f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL5r_RESERVED_AMS_COM_12f_SET
#define READ_AMS_PLL_PLL_CTL5r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_AMS_PLL_PLL_CTL5r
#define WRITE_AMS_PLL_PLL_CTL5r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_AMS_PLL_PLL_CTL5r
#define MODIFY_AMS_PLL_PLL_CTL5r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_AMS_PLL_PLL_CTL5r
#define READLN_AMS_PLL_PLL_CTL5r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_AMS_PLL_PLL_CTL5r
#define WRITELN_AMS_PLL_PLL_CTL5r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_AMS_PLL_PLL_CTL5r
#define WRITEALL_AMS_PLL_PLL_CTL5r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_AMS_PLL_PLL_CTL5r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL5r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  AMS_PLL_PLL_CTL6
 * BLOCKS:   AMS_PLL_COM
 * REGADDR:  0xd116
 * DEVAD:    1
 * DESC:     AMS PLL CONTROL_6
 * RESETVAL: 0x8400 (33792)
 * ACCESS:   R/W
 * FIELDS:
 *     RESERVED_AMS_COM_16 Reserved bitsmust not be written to. A read returns an unknown value
 *     AMS_PLL_RSTB_RTL_DIV Reset for RTL divider.Reset DFF on Refout divider(/10,/20,/40,/80) and clk3 50/50 retimer; reset clk4pcs,clk4sync, clkd66,clk_fb2dig. 0: Reset, 1:No action. AFE pll_ctrl 113:113  amsbus ctrl_out  113:113DFT_MUX
 *     RESERVED_AMS_COM_15 Reserved bitmust not be written to. A read returns an unknown value
 *     RESERVED_AMS_COM_14 Reserved bitmust not be written to. A read returns an unknown value
 *     RESERVED_AMS_COM_13 Reserved bitsmust not be written to. A read returns an unknown value
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL6r (0x0001d116 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL6r_SIZE 4

/*
 * This structure should be used to declare and program AMS_PLL_PLL_CTL6.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL6r_s {
	uint32_t v[1];
	uint32_t ams_pll_pll_ctl6[1];
	uint32_t _ams_pll_pll_ctl6;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL6r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL6r_CLR(r) (r).ams_pll_pll_ctl6[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL6r_SET(r,d) (r).ams_pll_pll_ctl6[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL6r_GET(r) (r).ams_pll_pll_ctl6[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL6r_RESERVED_AMS_COM_13f_GET(r) ((((r).ams_pll_pll_ctl6[0]) >> 13) & 0x7)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL6r_RESERVED_AMS_COM_13f_SET(r,f) (r).ams_pll_pll_ctl6[0]=(((r).ams_pll_pll_ctl6[0] & ~((uint32_t)0x7 << 13)) | ((((uint32_t)f) & 0x7) << 13)) | (7 << (16 + 13))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL6r_RESERVED_AMS_COM_14f_GET(r) ((((r).ams_pll_pll_ctl6[0]) >> 12) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL6r_RESERVED_AMS_COM_14f_SET(r,f) (r).ams_pll_pll_ctl6[0]=(((r).ams_pll_pll_ctl6[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12)) | (1 << (16 + 12))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL6r_RESERVED_AMS_COM_15f_GET(r) ((((r).ams_pll_pll_ctl6[0]) >> 11) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL6r_RESERVED_AMS_COM_15f_SET(r,f) (r).ams_pll_pll_ctl6[0]=(((r).ams_pll_pll_ctl6[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11)) | (1 << (16 + 11))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL6r_AMS_PLL_RSTB_RTL_DIVf_GET(r) ((((r).ams_pll_pll_ctl6[0]) >> 10) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL6r_AMS_PLL_RSTB_RTL_DIVf_SET(r,f) (r).ams_pll_pll_ctl6[0]=(((r).ams_pll_pll_ctl6[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10)) | (1 << (16 + 10))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL6r_RESERVED_AMS_COM_16f_GET(r) (((r).ams_pll_pll_ctl6[0]) & 0x3ff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL6r_RESERVED_AMS_COM_16f_SET(r,f) (r).ams_pll_pll_ctl6[0]=(((r).ams_pll_pll_ctl6[0] & ~((uint32_t)0x3ff)) | (((uint32_t)f) & 0x3ff)) | (0x3ff << 16)

/*
 * These macros can be used to access AMS_PLL_PLL_CTL6.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_AMS_PLL_PLL_CTL6r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL6r,(_r._ams_pll_pll_ctl6))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_AMS_PLL_PLL_CTL6r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL6r,(_r._ams_pll_pll_ctl6)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_AMS_PLL_PLL_CTL6r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL6r,(_r._ams_pll_pll_ctl6))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_AMS_PLL_PLL_CTL6r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL6r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_pll_pll_ctl6))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_AMS_PLL_PLL_CTL6r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL6r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_pll_pll_ctl6))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_AMS_PLL_PLL_CTL6r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL6r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._ams_pll_pll_ctl6))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AMS_PLL_PLL_CTL6r BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL6r
#define AMS_PLL_PLL_CTL6r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL6r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL6r_t AMS_PLL_PLL_CTL6r_t;
#define AMS_PLL_PLL_CTL6r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL6r_CLR
#define AMS_PLL_PLL_CTL6r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL6r_SET
#define AMS_PLL_PLL_CTL6r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL6r_GET
#define AMS_PLL_PLL_CTL6r_RESERVED_AMS_COM_13f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL6r_RESERVED_AMS_COM_13f_GET
#define AMS_PLL_PLL_CTL6r_RESERVED_AMS_COM_13f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL6r_RESERVED_AMS_COM_13f_SET
#define AMS_PLL_PLL_CTL6r_RESERVED_AMS_COM_14f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL6r_RESERVED_AMS_COM_14f_GET
#define AMS_PLL_PLL_CTL6r_RESERVED_AMS_COM_14f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL6r_RESERVED_AMS_COM_14f_SET
#define AMS_PLL_PLL_CTL6r_RESERVED_AMS_COM_15f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL6r_RESERVED_AMS_COM_15f_GET
#define AMS_PLL_PLL_CTL6r_RESERVED_AMS_COM_15f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL6r_RESERVED_AMS_COM_15f_SET
#define AMS_PLL_PLL_CTL6r_AMS_PLL_RSTB_RTL_DIVf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL6r_AMS_PLL_RSTB_RTL_DIVf_GET
#define AMS_PLL_PLL_CTL6r_AMS_PLL_RSTB_RTL_DIVf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL6r_AMS_PLL_RSTB_RTL_DIVf_SET
#define AMS_PLL_PLL_CTL6r_RESERVED_AMS_COM_16f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL6r_RESERVED_AMS_COM_16f_GET
#define AMS_PLL_PLL_CTL6r_RESERVED_AMS_COM_16f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL6r_RESERVED_AMS_COM_16f_SET
#define READ_AMS_PLL_PLL_CTL6r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_AMS_PLL_PLL_CTL6r
#define WRITE_AMS_PLL_PLL_CTL6r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_AMS_PLL_PLL_CTL6r
#define MODIFY_AMS_PLL_PLL_CTL6r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_AMS_PLL_PLL_CTL6r
#define READLN_AMS_PLL_PLL_CTL6r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_AMS_PLL_PLL_CTL6r
#define WRITELN_AMS_PLL_PLL_CTL6r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_AMS_PLL_PLL_CTL6r
#define WRITEALL_AMS_PLL_PLL_CTL6r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_AMS_PLL_PLL_CTL6r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL6r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  AMS_PLL_PLL_CTL7
 * BLOCKS:   AMS_PLL_COM
 * REGADDR:  0xd117
 * DEVAD:    1
 * DESC:     AMS PLL CONTROL_7
 * RESETVAL: 0x8000 (32768)
 * ACCESS:   R/W
 * FIELDS:
 *     RESERVED_AMS_COM_18 Reserved bitsmust not be written to. A read returns an unknown value
 *     RESERVED_AMS_COM_17 Reserved bitsmust not be written to. A read returns an unknown value
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL7r (0x0001d117 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL7r_SIZE 4

/*
 * This structure should be used to declare and program AMS_PLL_PLL_CTL7.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL7r_s {
	uint32_t v[1];
	uint32_t ams_pll_pll_ctl7[1];
	uint32_t _ams_pll_pll_ctl7;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL7r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL7r_CLR(r) (r).ams_pll_pll_ctl7[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL7r_SET(r,d) (r).ams_pll_pll_ctl7[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL7r_GET(r) (r).ams_pll_pll_ctl7[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL7r_RESERVED_AMS_COM_17f_GET(r) ((((r).ams_pll_pll_ctl7[0]) >> 12) & 0xf)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL7r_RESERVED_AMS_COM_17f_SET(r,f) (r).ams_pll_pll_ctl7[0]=(((r).ams_pll_pll_ctl7[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12)) | (15 << (16 + 12))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL7r_RESERVED_AMS_COM_18f_GET(r) (((r).ams_pll_pll_ctl7[0]) & 0xfff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL7r_RESERVED_AMS_COM_18f_SET(r,f) (r).ams_pll_pll_ctl7[0]=(((r).ams_pll_pll_ctl7[0] & ~((uint32_t)0xfff)) | (((uint32_t)f) & 0xfff)) | (0xfff << 16)

/*
 * These macros can be used to access AMS_PLL_PLL_CTL7.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_AMS_PLL_PLL_CTL7r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL7r,(_r._ams_pll_pll_ctl7))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_AMS_PLL_PLL_CTL7r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL7r,(_r._ams_pll_pll_ctl7)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_AMS_PLL_PLL_CTL7r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL7r,(_r._ams_pll_pll_ctl7))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_AMS_PLL_PLL_CTL7r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL7r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_pll_pll_ctl7))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_AMS_PLL_PLL_CTL7r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL7r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_pll_pll_ctl7))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_AMS_PLL_PLL_CTL7r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL7r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._ams_pll_pll_ctl7))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AMS_PLL_PLL_CTL7r BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL7r
#define AMS_PLL_PLL_CTL7r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL7r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL7r_t AMS_PLL_PLL_CTL7r_t;
#define AMS_PLL_PLL_CTL7r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL7r_CLR
#define AMS_PLL_PLL_CTL7r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL7r_SET
#define AMS_PLL_PLL_CTL7r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL7r_GET
#define AMS_PLL_PLL_CTL7r_RESERVED_AMS_COM_17f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL7r_RESERVED_AMS_COM_17f_GET
#define AMS_PLL_PLL_CTL7r_RESERVED_AMS_COM_17f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL7r_RESERVED_AMS_COM_17f_SET
#define AMS_PLL_PLL_CTL7r_RESERVED_AMS_COM_18f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL7r_RESERVED_AMS_COM_18f_GET
#define AMS_PLL_PLL_CTL7r_RESERVED_AMS_COM_18f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL7r_RESERVED_AMS_COM_18f_SET
#define READ_AMS_PLL_PLL_CTL7r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_AMS_PLL_PLL_CTL7r
#define WRITE_AMS_PLL_PLL_CTL7r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_AMS_PLL_PLL_CTL7r
#define MODIFY_AMS_PLL_PLL_CTL7r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_AMS_PLL_PLL_CTL7r
#define READLN_AMS_PLL_PLL_CTL7r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_AMS_PLL_PLL_CTL7r
#define WRITELN_AMS_PLL_PLL_CTL7r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_AMS_PLL_PLL_CTL7r
#define WRITEALL_AMS_PLL_PLL_CTL7r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_AMS_PLL_PLL_CTL7r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL7r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  AMS_PLL_PLL_CTL8
 * BLOCKS:   AMS_PLL_COM
 * REGADDR:  0xd118
 * DEVAD:    1
 * DESC:     AMS PLL CONTROL_8
 * RESETVAL: 0x1ef (495)
 * ACCESS:   R/W
 * FIELDS:
 *     RESERVED_AMS_COM_19 Reserved bitsmust not be written to. A read returns an unknown value
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL8r (0x0001d118 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL8r_SIZE 4

/*
 * This structure should be used to declare and program AMS_PLL_PLL_CTL8.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL8r_s {
	uint32_t v[1];
	uint32_t ams_pll_pll_ctl8[1];
	uint32_t _ams_pll_pll_ctl8;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL8r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL8r_CLR(r) (r).ams_pll_pll_ctl8[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL8r_SET(r,d) (r).ams_pll_pll_ctl8[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL8r_GET(r) (r).ams_pll_pll_ctl8[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL8r_RESERVED_AMS_COM_19f_GET(r) (((r).ams_pll_pll_ctl8[0]) & 0x3fff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL8r_RESERVED_AMS_COM_19f_SET(r,f) (r).ams_pll_pll_ctl8[0]=(((r).ams_pll_pll_ctl8[0] & ~((uint32_t)0x3fff)) | (((uint32_t)f) & 0x3fff)) | (0x3fff << 16)

/*
 * These macros can be used to access AMS_PLL_PLL_CTL8.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_AMS_PLL_PLL_CTL8r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL8r,(_r._ams_pll_pll_ctl8))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_AMS_PLL_PLL_CTL8r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL8r,(_r._ams_pll_pll_ctl8)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_AMS_PLL_PLL_CTL8r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL8r,(_r._ams_pll_pll_ctl8))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_AMS_PLL_PLL_CTL8r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL8r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_pll_pll_ctl8))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_AMS_PLL_PLL_CTL8r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL8r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_pll_pll_ctl8))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_AMS_PLL_PLL_CTL8r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL8r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._ams_pll_pll_ctl8))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AMS_PLL_PLL_CTL8r BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL8r
#define AMS_PLL_PLL_CTL8r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL8r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL8r_t AMS_PLL_PLL_CTL8r_t;
#define AMS_PLL_PLL_CTL8r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL8r_CLR
#define AMS_PLL_PLL_CTL8r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL8r_SET
#define AMS_PLL_PLL_CTL8r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL8r_GET
#define AMS_PLL_PLL_CTL8r_RESERVED_AMS_COM_19f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL8r_RESERVED_AMS_COM_19f_GET
#define AMS_PLL_PLL_CTL8r_RESERVED_AMS_COM_19f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL8r_RESERVED_AMS_COM_19f_SET
#define READ_AMS_PLL_PLL_CTL8r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_AMS_PLL_PLL_CTL8r
#define WRITE_AMS_PLL_PLL_CTL8r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_AMS_PLL_PLL_CTL8r
#define MODIFY_AMS_PLL_PLL_CTL8r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_AMS_PLL_PLL_CTL8r
#define READLN_AMS_PLL_PLL_CTL8r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_AMS_PLL_PLL_CTL8r
#define WRITELN_AMS_PLL_PLL_CTL8r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_AMS_PLL_PLL_CTL8r
#define WRITEALL_AMS_PLL_PLL_CTL8r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_AMS_PLL_PLL_CTL8r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL8r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  AMS_PLL_PLL_CTL9
 * BLOCKS:   AMS_PLL_COM
 * REGADDR:  0xd119
 * DEVAD:    1
 * DESC:     AMS PLL CONTROL_9
 * RESETVAL: 0x1800 (6144)
 * ACCESS:   R/W
 * FIELDS:
 *     RESERVED_AMS_COM_21 Reserved bitsmust not be written to. A read returns an unknown value
 *     AMS_PLL_PWRDN_BIAS4REF Bias for ref power down control. 0:pwerup, 1:pwerdown. AFE pll_ctrl 156:156  amsbus ctrl_out  156:156DFT_MUX
 *     AMS_PLL_PWRDN_AFE AFE power down control. 0:pwerup, 1:pwerdown. AFE pll_ctrl 157:157  amsbus ctrl_out  157:157DFT_MUX
 *     AMS_PLL_TEST_VBYPASS Test-port control bit, see AMS AFE pll_ctrl 158:158  amsbus ctrl_out  158:158DFT_MUX
 *     AMS_PLL_TEST_RX  Used to control rx_clk, set to 0, see AMS AFE pll_ctrl 159:159  amsbus ctrl_out  159:159DFT_MUX
 *     AMS_PLL_TEST_PLL Test-port control bit, see AMS AFE pll_ctrl 160:160  amsbus ctrl_out  160:160DFT_MUX
 *     AMS_PLL_TEST_CH  Select different signals to be sent to testport,0: sending PLL0 signals to testport,1: sending PLL1 signals to testport. AFE pll_ctrl 161:161  amsbus ctrl_out  161:161DFT_MUX
 *     AMS_PLL_RESETB_MMD Reset delta Modulator. After reset the modulator outputs, M<5:0> and A<3:0> should be set to 000110 and 0100 respectively: This is active LOW for resetting the internal states. It also resets the internal states of the MMD PSC. needs to see an active-low pulse (1 first, 0 for couple of microcontroller clock cycles and then goes to high,1). The calibration cycle needs to start after the aforementioned signal be applied to resetb_MMD. (This has to be done for all the mode) AFE pll_ctrl 162:162  amsbus ctrl_out  162:162DFT_MUX
 *     AMS_PLL_PLL_FRAC_MODE 00: direct integer division mapping for MMD: M = i_ndiv_int<9:4> && A = i_ndiv_int<3:0>, using div4/5. i_ndiv_int<3:0>, using div4/5, 10: div4/5 output mapping is used for MMD: M2 && A2 (Not to be used above for VCO Frequencies above 23GHz),11: direct integer division mapping, using div8/9 AFE pll_ctrl 164:163  amsbus ctrl_out  164:163DFT_MUX
 *     RESERVED_AMS_COM_20 Reserved bitsmust not be written to. A read returns an unknown value
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL9r (0x0001d119 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL9r_SIZE 4

/*
 * This structure should be used to declare and program AMS_PLL_PLL_CTL9.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL9r_s {
	uint32_t v[1];
	uint32_t ams_pll_pll_ctl9[1];
	uint32_t _ams_pll_pll_ctl9;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL9r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL9r_CLR(r) (r).ams_pll_pll_ctl9[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL9r_SET(r,d) (r).ams_pll_pll_ctl9[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL9r_GET(r) (r).ams_pll_pll_ctl9[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL9r_RESERVED_AMS_COM_20f_GET(r) ((((r).ams_pll_pll_ctl9[0]) >> 14) & 0x3)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL9r_RESERVED_AMS_COM_20f_SET(r,f) (r).ams_pll_pll_ctl9[0]=(((r).ams_pll_pll_ctl9[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14)) | (3 << (16 + 14))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL9r_AMS_PLL_PLL_FRAC_MODEf_GET(r) ((((r).ams_pll_pll_ctl9[0]) >> 12) & 0x3)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL9r_AMS_PLL_PLL_FRAC_MODEf_SET(r,f) (r).ams_pll_pll_ctl9[0]=(((r).ams_pll_pll_ctl9[0] & ~((uint32_t)0x3 << 12)) | ((((uint32_t)f) & 0x3) << 12)) | (3 << (16 + 12))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL9r_AMS_PLL_RESETB_MMDf_GET(r) ((((r).ams_pll_pll_ctl9[0]) >> 11) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL9r_AMS_PLL_RESETB_MMDf_SET(r,f) (r).ams_pll_pll_ctl9[0]=(((r).ams_pll_pll_ctl9[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11)) | (1 << (16 + 11))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL9r_AMS_PLL_TEST_CHf_GET(r) ((((r).ams_pll_pll_ctl9[0]) >> 10) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL9r_AMS_PLL_TEST_CHf_SET(r,f) (r).ams_pll_pll_ctl9[0]=(((r).ams_pll_pll_ctl9[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10)) | (1 << (16 + 10))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL9r_AMS_PLL_TEST_PLLf_GET(r) ((((r).ams_pll_pll_ctl9[0]) >> 9) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL9r_AMS_PLL_TEST_PLLf_SET(r,f) (r).ams_pll_pll_ctl9[0]=(((r).ams_pll_pll_ctl9[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9)) | (1 << (16 + 9))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL9r_AMS_PLL_TEST_RXf_GET(r) ((((r).ams_pll_pll_ctl9[0]) >> 8) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL9r_AMS_PLL_TEST_RXf_SET(r,f) (r).ams_pll_pll_ctl9[0]=(((r).ams_pll_pll_ctl9[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8)) | (1 << (16 + 8))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL9r_AMS_PLL_TEST_VBYPASSf_GET(r) ((((r).ams_pll_pll_ctl9[0]) >> 7) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL9r_AMS_PLL_TEST_VBYPASSf_SET(r,f) (r).ams_pll_pll_ctl9[0]=(((r).ams_pll_pll_ctl9[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL9r_AMS_PLL_PWRDN_AFEf_GET(r) ((((r).ams_pll_pll_ctl9[0]) >> 6) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL9r_AMS_PLL_PWRDN_AFEf_SET(r,f) (r).ams_pll_pll_ctl9[0]=(((r).ams_pll_pll_ctl9[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL9r_AMS_PLL_PWRDN_BIAS4REFf_GET(r) ((((r).ams_pll_pll_ctl9[0]) >> 5) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL9r_AMS_PLL_PWRDN_BIAS4REFf_SET(r,f) (r).ams_pll_pll_ctl9[0]=(((r).ams_pll_pll_ctl9[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL9r_RESERVED_AMS_COM_21f_GET(r) (((r).ams_pll_pll_ctl9[0]) & 0x1f)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL9r_RESERVED_AMS_COM_21f_SET(r,f) (r).ams_pll_pll_ctl9[0]=(((r).ams_pll_pll_ctl9[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f)) | (0x1f << 16)

/*
 * These macros can be used to access AMS_PLL_PLL_CTL9.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_AMS_PLL_PLL_CTL9r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL9r,(_r._ams_pll_pll_ctl9))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_AMS_PLL_PLL_CTL9r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL9r,(_r._ams_pll_pll_ctl9)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_AMS_PLL_PLL_CTL9r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL9r,(_r._ams_pll_pll_ctl9))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_AMS_PLL_PLL_CTL9r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL9r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_pll_pll_ctl9))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_AMS_PLL_PLL_CTL9r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL9r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_pll_pll_ctl9))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_AMS_PLL_PLL_CTL9r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL9r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._ams_pll_pll_ctl9))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AMS_PLL_PLL_CTL9r BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL9r
#define AMS_PLL_PLL_CTL9r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL9r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL9r_t AMS_PLL_PLL_CTL9r_t;
#define AMS_PLL_PLL_CTL9r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL9r_CLR
#define AMS_PLL_PLL_CTL9r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL9r_SET
#define AMS_PLL_PLL_CTL9r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL9r_GET
#define AMS_PLL_PLL_CTL9r_RESERVED_AMS_COM_20f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL9r_RESERVED_AMS_COM_20f_GET
#define AMS_PLL_PLL_CTL9r_RESERVED_AMS_COM_20f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL9r_RESERVED_AMS_COM_20f_SET
#define AMS_PLL_PLL_CTL9r_AMS_PLL_PLL_FRAC_MODEf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL9r_AMS_PLL_PLL_FRAC_MODEf_GET
#define AMS_PLL_PLL_CTL9r_AMS_PLL_PLL_FRAC_MODEf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL9r_AMS_PLL_PLL_FRAC_MODEf_SET
#define AMS_PLL_PLL_CTL9r_AMS_PLL_RESETB_MMDf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL9r_AMS_PLL_RESETB_MMDf_GET
#define AMS_PLL_PLL_CTL9r_AMS_PLL_RESETB_MMDf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL9r_AMS_PLL_RESETB_MMDf_SET
#define AMS_PLL_PLL_CTL9r_AMS_PLL_TEST_CHf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL9r_AMS_PLL_TEST_CHf_GET
#define AMS_PLL_PLL_CTL9r_AMS_PLL_TEST_CHf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL9r_AMS_PLL_TEST_CHf_SET
#define AMS_PLL_PLL_CTL9r_AMS_PLL_TEST_PLLf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL9r_AMS_PLL_TEST_PLLf_GET
#define AMS_PLL_PLL_CTL9r_AMS_PLL_TEST_PLLf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL9r_AMS_PLL_TEST_PLLf_SET
#define AMS_PLL_PLL_CTL9r_AMS_PLL_TEST_RXf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL9r_AMS_PLL_TEST_RXf_GET
#define AMS_PLL_PLL_CTL9r_AMS_PLL_TEST_RXf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL9r_AMS_PLL_TEST_RXf_SET
#define AMS_PLL_PLL_CTL9r_AMS_PLL_TEST_VBYPASSf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL9r_AMS_PLL_TEST_VBYPASSf_GET
#define AMS_PLL_PLL_CTL9r_AMS_PLL_TEST_VBYPASSf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL9r_AMS_PLL_TEST_VBYPASSf_SET
#define AMS_PLL_PLL_CTL9r_AMS_PLL_PWRDN_AFEf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL9r_AMS_PLL_PWRDN_AFEf_GET
#define AMS_PLL_PLL_CTL9r_AMS_PLL_PWRDN_AFEf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL9r_AMS_PLL_PWRDN_AFEf_SET
#define AMS_PLL_PLL_CTL9r_AMS_PLL_PWRDN_BIAS4REFf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL9r_AMS_PLL_PWRDN_BIAS4REFf_GET
#define AMS_PLL_PLL_CTL9r_AMS_PLL_PWRDN_BIAS4REFf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL9r_AMS_PLL_PWRDN_BIAS4REFf_SET
#define AMS_PLL_PLL_CTL9r_RESERVED_AMS_COM_21f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL9r_RESERVED_AMS_COM_21f_GET
#define AMS_PLL_PLL_CTL9r_RESERVED_AMS_COM_21f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL9r_RESERVED_AMS_COM_21f_SET
#define READ_AMS_PLL_PLL_CTL9r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_AMS_PLL_PLL_CTL9r
#define WRITE_AMS_PLL_PLL_CTL9r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_AMS_PLL_PLL_CTL9r
#define MODIFY_AMS_PLL_PLL_CTL9r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_AMS_PLL_PLL_CTL9r
#define READLN_AMS_PLL_PLL_CTL9r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_AMS_PLL_PLL_CTL9r
#define WRITELN_AMS_PLL_PLL_CTL9r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_AMS_PLL_PLL_CTL9r
#define WRITEALL_AMS_PLL_PLL_CTL9r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_AMS_PLL_PLL_CTL9r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL9r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  AMS_PLL_PLL_CTL_10
 * BLOCKS:   AMS_PLL_COM
 * REGADDR:  0xd11a
 * DEVAD:    1
 * DESC:     AMS PLL CONTROL_10
 * RESETVAL: 0xb4 (180)
 * ACCESS:   R/W
 * FIELDS:
 *     AMS_PLL_FRACN_NDIV_INT Feedback divider integer control (divider ratio=code),this value is added to fractional part (value is restricted to 12 to 511) or can be used directly to generate any divide ratio (value is 8 to 511). AFE pll_ctrl 176:167  amsbus ctrl_out  176:167DFT_MUX
 *     AMS_PLL_CLK4PCS_DIV Clock to PCS divider ratio.000:16,010:32,011:40,100:24,101:33,Others: Not allowed AFE pll_ctrl 209:207  amsbus ctrl_out  209:207DFT_MUX
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_10r (0x0001d11a | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_10r_SIZE 4

/*
 * This structure should be used to declare and program AMS_PLL_PLL_CTL_10.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_10r_s {
	uint32_t v[1];
	uint32_t ams_pll_pll_ctl_10[1];
	uint32_t _ams_pll_pll_ctl_10;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_10r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_10r_CLR(r) (r).ams_pll_pll_ctl_10[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_10r_SET(r,d) (r).ams_pll_pll_ctl_10[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_10r_GET(r) (r).ams_pll_pll_ctl_10[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_10r_AMS_PLL_CLK4PCS_DIVf_GET(r) ((((r).ams_pll_pll_ctl_10[0]) >> 10) & 0x7)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_10r_AMS_PLL_CLK4PCS_DIVf_SET(r,f) (r).ams_pll_pll_ctl_10[0]=(((r).ams_pll_pll_ctl_10[0] & ~((uint32_t)0x7 << 10)) | ((((uint32_t)f) & 0x7) << 10)) | (7 << (16 + 10))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_10r_AMS_PLL_FRACN_NDIV_INTf_GET(r) (((r).ams_pll_pll_ctl_10[0]) & 0x3ff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_10r_AMS_PLL_FRACN_NDIV_INTf_SET(r,f) (r).ams_pll_pll_ctl_10[0]=(((r).ams_pll_pll_ctl_10[0] & ~((uint32_t)0x3ff)) | (((uint32_t)f) & 0x3ff)) | (0x3ff << 16)

/*
 * These macros can be used to access AMS_PLL_PLL_CTL_10.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_AMS_PLL_PLL_CTL_10r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_10r,(_r._ams_pll_pll_ctl_10))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_AMS_PLL_PLL_CTL_10r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_10r,(_r._ams_pll_pll_ctl_10)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_AMS_PLL_PLL_CTL_10r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_10r,(_r._ams_pll_pll_ctl_10))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_AMS_PLL_PLL_CTL_10r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_10r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_pll_pll_ctl_10))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_AMS_PLL_PLL_CTL_10r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_10r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_pll_pll_ctl_10))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_AMS_PLL_PLL_CTL_10r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_10r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._ams_pll_pll_ctl_10))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AMS_PLL_PLL_CTL_10r BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_10r
#define AMS_PLL_PLL_CTL_10r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_10r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_10r_t AMS_PLL_PLL_CTL_10r_t;
#define AMS_PLL_PLL_CTL_10r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_10r_CLR
#define AMS_PLL_PLL_CTL_10r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_10r_SET
#define AMS_PLL_PLL_CTL_10r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_10r_GET
#define AMS_PLL_PLL_CTL_10r_AMS_PLL_CLK4PCS_DIVf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_10r_AMS_PLL_CLK4PCS_DIVf_GET
#define AMS_PLL_PLL_CTL_10r_AMS_PLL_CLK4PCS_DIVf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_10r_AMS_PLL_CLK4PCS_DIVf_SET
#define AMS_PLL_PLL_CTL_10r_AMS_PLL_FRACN_NDIV_INTf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_10r_AMS_PLL_FRACN_NDIV_INTf_GET
#define AMS_PLL_PLL_CTL_10r_AMS_PLL_FRACN_NDIV_INTf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_10r_AMS_PLL_FRACN_NDIV_INTf_SET
#define READ_AMS_PLL_PLL_CTL_10r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_AMS_PLL_PLL_CTL_10r
#define WRITE_AMS_PLL_PLL_CTL_10r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_AMS_PLL_PLL_CTL_10r
#define MODIFY_AMS_PLL_PLL_CTL_10r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_AMS_PLL_PLL_CTL_10r
#define READLN_AMS_PLL_PLL_CTL_10r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_AMS_PLL_PLL_CTL_10r
#define WRITELN_AMS_PLL_PLL_CTL_10r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_AMS_PLL_PLL_CTL_10r
#define WRITEALL_AMS_PLL_PLL_CTL_10r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_AMS_PLL_PLL_CTL_10r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_10r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  AMS_PLL_PLL_CTL_11
 * BLOCKS:   AMS_PLL_COM
 * REGADDR:  0xd11b
 * DEVAD:    1
 * DESC:     AMS PLL CONTROL_11
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     AMS_PLL_FRACN_NDIV_FRAC_L Fractional control of feedback divider lower 16bits.Divider fraction=i_ndiv_frac<17:0>/2^18, For fractional value 0.70099; this value is set to binary( 0.70099*2^18)=10 1100 1101 1101 0000. AFE pll_ctrl 192:177  amsbus ctrl_out  192:177DFT_MUX
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_11r (0x0001d11b | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_11r_SIZE 4

/*
 * This structure should be used to declare and program AMS_PLL_PLL_CTL_11.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_11r_s {
	uint32_t v[1];
	uint32_t ams_pll_pll_ctl_11[1];
	uint32_t _ams_pll_pll_ctl_11;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_11r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_11r_CLR(r) (r).ams_pll_pll_ctl_11[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_11r_SET(r,d) (r).ams_pll_pll_ctl_11[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_11r_GET(r) (r).ams_pll_pll_ctl_11[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_11r_AMS_PLL_FRACN_NDIV_FRAC_Lf_GET(r) (((r).ams_pll_pll_ctl_11[0]) & 0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_11r_AMS_PLL_FRACN_NDIV_FRAC_Lf_SET(r,f) (r).ams_pll_pll_ctl_11[0]=(((r).ams_pll_pll_ctl_11[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access AMS_PLL_PLL_CTL_11.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_AMS_PLL_PLL_CTL_11r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_11r,(_r._ams_pll_pll_ctl_11))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_AMS_PLL_PLL_CTL_11r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_11r,(_r._ams_pll_pll_ctl_11)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_AMS_PLL_PLL_CTL_11r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_11r,(_r._ams_pll_pll_ctl_11))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_AMS_PLL_PLL_CTL_11r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_11r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_pll_pll_ctl_11))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_AMS_PLL_PLL_CTL_11r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_11r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_pll_pll_ctl_11))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_AMS_PLL_PLL_CTL_11r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_11r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._ams_pll_pll_ctl_11))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AMS_PLL_PLL_CTL_11r BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_11r
#define AMS_PLL_PLL_CTL_11r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_11r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_11r_t AMS_PLL_PLL_CTL_11r_t;
#define AMS_PLL_PLL_CTL_11r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_11r_CLR
#define AMS_PLL_PLL_CTL_11r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_11r_SET
#define AMS_PLL_PLL_CTL_11r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_11r_GET
#define AMS_PLL_PLL_CTL_11r_AMS_PLL_FRACN_NDIV_FRAC_Lf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_11r_AMS_PLL_FRACN_NDIV_FRAC_Lf_GET
#define AMS_PLL_PLL_CTL_11r_AMS_PLL_FRACN_NDIV_FRAC_Lf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_11r_AMS_PLL_FRACN_NDIV_FRAC_Lf_SET
#define READ_AMS_PLL_PLL_CTL_11r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_AMS_PLL_PLL_CTL_11r
#define WRITE_AMS_PLL_PLL_CTL_11r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_AMS_PLL_PLL_CTL_11r
#define MODIFY_AMS_PLL_PLL_CTL_11r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_AMS_PLL_PLL_CTL_11r
#define READLN_AMS_PLL_PLL_CTL_11r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_AMS_PLL_PLL_CTL_11r
#define WRITELN_AMS_PLL_PLL_CTL_11r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_AMS_PLL_PLL_CTL_11r
#define WRITEALL_AMS_PLL_PLL_CTL_11r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_AMS_PLL_PLL_CTL_11r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_11r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  AMS_PLL_PLL_CTL_12
 * BLOCKS:   AMS_PLL_COM
 * REGADDR:  0xd11c
 * DEVAD:    1
 * DESC:     AMS PLL CONTROL_12
 * RESETVAL: 0x108 (264)
 * ACCESS:   R/W
 * FIELDS:
 *     AMS_PLL_FRACN_NDIV_FRAC_H Fractional control of feedback divider higher 2bits. AFE pll_ctrl 194:193  amsbus ctrl_out  194:193DFT_MUX
 *     AMS_PLL_FRACN_DITHER_EN Enable 1 bit dithering of the fractional input i_pll_ctrl<194:177>, 0=off, 1=on AFE pll_ctrl 195:195  amsbus ctrl_out  195:195DFT_MUX
 *     AMS_PLL_I_NDIV_VALID toggle low, load in new values for fracn_ndiv_frac<17:0> and fracn_ndiv_int<9:0>, then go back to high. This is for glitch-free operation when the fractional and integer Values are changed dynamically.1: new values are loaded for fracn_ndiv_frac<17:0> and fracn_ndiv_int<9:0>.0: not loaded. AFE pll_ctrl 196:196  amsbus ctrl_out  196:196DFT_MUX
 *     AMS_PLL_I_VCODIV_REFOUT Selects whether to deliver a divided down clock from the RTL divider to the reference clock buffer. The buffer output can be connected to the global reference clock channel. 0: delivers a copy of pad_i_refclkp/n or reference clock from the global channel to the reference clock buffer. 1: delivers a divided down clock of {/40, /80, /160, or /320} from the RTL divider to the reference clock buffer. AFE pll_ctrl 197:197  amsbus ctrl_out  197:197DFT_MUX
 *     AMS_PLL_EN_TESTCLK 00: power down test_clk_ref_fb,01:enable refclk,10:enable fb_ck,11 not allow AFE pll_ctrl 199:198  amsbus ctrl_out  199:198DFT_MUX
 *     AMS_PLL_SPARE_200_200 ams reserved [200:200] AFE pll_ctrl 200:200  amsbus ctrl_out  200:200DFT_MUX
 *     AMS_PLL_EN_CLK_FB2DIG Enable fb2dig clock AFE pll_ctrl 201:201  amsbus ctrl_out  201:201DFT_MUX
 *     AMS_PLL_EN_CLK4REF Enable /(40,80,160,320) feedback clock to reference buffer AFE pll_ctrl 202:202  amsbus ctrl_out  202:202DFT_MUX
 *     AMS_PLL_EN_CLKD66 Enable vco divide by 66 clock output AFE pll_ctrl 203:203  amsbus ctrl_out  203:203DFT_MUX
 *     AMS_PLL_CLK4SYNC_DIV8_6B clk4sync_div. sets clk4sync output freq. 0:6T, 1:8T, and T = 1/VCO freq AFE pll_ctrl 204:204  amsbus ctrl_out  204:204DFT_MUX
 *     AMS_PLL_EN_CLK4SYNC Enable sync clock block.0: Disable; 1: Enable AFE pll_ctrl 205:205  amsbus ctrl_out  205:205
 *     AMS_PLL_EN_CLK4PCS Enable pcs clock block.0: Disable; 1: Enable, 33T option will not be affected since it is coming from d66 block AFE pll_ctrl 206:206  amsbus ctrl_out  206:206DFT_MUX
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_12r (0x0001d11c | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_12r_SIZE 4

/*
 * This structure should be used to declare and program AMS_PLL_PLL_CTL_12.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_12r_s {
	uint32_t v[1];
	uint32_t ams_pll_pll_ctl_12[1];
	uint32_t _ams_pll_pll_ctl_12;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_12r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_12r_CLR(r) (r).ams_pll_pll_ctl_12[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_12r_SET(r,d) (r).ams_pll_pll_ctl_12[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_12r_GET(r) (r).ams_pll_pll_ctl_12[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_12r_AMS_PLL_EN_CLK4PCSf_GET(r) ((((r).ams_pll_pll_ctl_12[0]) >> 13) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_12r_AMS_PLL_EN_CLK4PCSf_SET(r,f) (r).ams_pll_pll_ctl_12[0]=(((r).ams_pll_pll_ctl_12[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13)) | (1 << (16 + 13))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_12r_AMS_PLL_EN_CLK4SYNCf_GET(r) ((((r).ams_pll_pll_ctl_12[0]) >> 12) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_12r_AMS_PLL_EN_CLK4SYNCf_SET(r,f) (r).ams_pll_pll_ctl_12[0]=(((r).ams_pll_pll_ctl_12[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12)) | (1 << (16 + 12))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_12r_AMS_PLL_CLK4SYNC_DIV8_6Bf_GET(r) ((((r).ams_pll_pll_ctl_12[0]) >> 11) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_12r_AMS_PLL_CLK4SYNC_DIV8_6Bf_SET(r,f) (r).ams_pll_pll_ctl_12[0]=(((r).ams_pll_pll_ctl_12[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11)) | (1 << (16 + 11))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_12r_AMS_PLL_EN_CLKD66f_GET(r) ((((r).ams_pll_pll_ctl_12[0]) >> 10) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_12r_AMS_PLL_EN_CLKD66f_SET(r,f) (r).ams_pll_pll_ctl_12[0]=(((r).ams_pll_pll_ctl_12[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10)) | (1 << (16 + 10))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_12r_AMS_PLL_EN_CLK4REFf_GET(r) ((((r).ams_pll_pll_ctl_12[0]) >> 9) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_12r_AMS_PLL_EN_CLK4REFf_SET(r,f) (r).ams_pll_pll_ctl_12[0]=(((r).ams_pll_pll_ctl_12[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9)) | (1 << (16 + 9))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_12r_AMS_PLL_EN_CLK_FB2DIGf_GET(r) ((((r).ams_pll_pll_ctl_12[0]) >> 8) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_12r_AMS_PLL_EN_CLK_FB2DIGf_SET(r,f) (r).ams_pll_pll_ctl_12[0]=(((r).ams_pll_pll_ctl_12[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8)) | (1 << (16 + 8))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_12r_AMS_PLL_SPARE_200_200f_GET(r) ((((r).ams_pll_pll_ctl_12[0]) >> 7) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_12r_AMS_PLL_SPARE_200_200f_SET(r,f) (r).ams_pll_pll_ctl_12[0]=(((r).ams_pll_pll_ctl_12[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_12r_AMS_PLL_EN_TESTCLKf_GET(r) ((((r).ams_pll_pll_ctl_12[0]) >> 5) & 0x3)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_12r_AMS_PLL_EN_TESTCLKf_SET(r,f) (r).ams_pll_pll_ctl_12[0]=(((r).ams_pll_pll_ctl_12[0] & ~((uint32_t)0x3 << 5)) | ((((uint32_t)f) & 0x3) << 5)) | (3 << (16 + 5))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_12r_AMS_PLL_I_VCODIV_REFOUTf_GET(r) ((((r).ams_pll_pll_ctl_12[0]) >> 4) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_12r_AMS_PLL_I_VCODIV_REFOUTf_SET(r,f) (r).ams_pll_pll_ctl_12[0]=(((r).ams_pll_pll_ctl_12[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_12r_AMS_PLL_I_NDIV_VALIDf_GET(r) ((((r).ams_pll_pll_ctl_12[0]) >> 3) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_12r_AMS_PLL_I_NDIV_VALIDf_SET(r,f) (r).ams_pll_pll_ctl_12[0]=(((r).ams_pll_pll_ctl_12[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_12r_AMS_PLL_FRACN_DITHER_ENf_GET(r) ((((r).ams_pll_pll_ctl_12[0]) >> 2) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_12r_AMS_PLL_FRACN_DITHER_ENf_SET(r,f) (r).ams_pll_pll_ctl_12[0]=(((r).ams_pll_pll_ctl_12[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_12r_AMS_PLL_FRACN_NDIV_FRAC_Hf_GET(r) (((r).ams_pll_pll_ctl_12[0]) & 0x3)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_12r_AMS_PLL_FRACN_NDIV_FRAC_Hf_SET(r,f) (r).ams_pll_pll_ctl_12[0]=(((r).ams_pll_pll_ctl_12[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3)) | (0x3 << 16)

/*
 * These macros can be used to access AMS_PLL_PLL_CTL_12.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_AMS_PLL_PLL_CTL_12r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_12r,(_r._ams_pll_pll_ctl_12))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_AMS_PLL_PLL_CTL_12r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_12r,(_r._ams_pll_pll_ctl_12)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_AMS_PLL_PLL_CTL_12r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_12r,(_r._ams_pll_pll_ctl_12))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_AMS_PLL_PLL_CTL_12r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_12r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_pll_pll_ctl_12))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_AMS_PLL_PLL_CTL_12r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_12r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_pll_pll_ctl_12))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_AMS_PLL_PLL_CTL_12r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_12r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._ams_pll_pll_ctl_12))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AMS_PLL_PLL_CTL_12r BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_12r
#define AMS_PLL_PLL_CTL_12r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_12r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_12r_t AMS_PLL_PLL_CTL_12r_t;
#define AMS_PLL_PLL_CTL_12r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_12r_CLR
#define AMS_PLL_PLL_CTL_12r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_12r_SET
#define AMS_PLL_PLL_CTL_12r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_12r_GET
#define AMS_PLL_PLL_CTL_12r_AMS_PLL_EN_CLK4PCSf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_12r_AMS_PLL_EN_CLK4PCSf_GET
#define AMS_PLL_PLL_CTL_12r_AMS_PLL_EN_CLK4PCSf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_12r_AMS_PLL_EN_CLK4PCSf_SET
#define AMS_PLL_PLL_CTL_12r_AMS_PLL_EN_CLK4SYNCf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_12r_AMS_PLL_EN_CLK4SYNCf_GET
#define AMS_PLL_PLL_CTL_12r_AMS_PLL_EN_CLK4SYNCf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_12r_AMS_PLL_EN_CLK4SYNCf_SET
#define AMS_PLL_PLL_CTL_12r_AMS_PLL_CLK4SYNC_DIV8_6Bf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_12r_AMS_PLL_CLK4SYNC_DIV8_6Bf_GET
#define AMS_PLL_PLL_CTL_12r_AMS_PLL_CLK4SYNC_DIV8_6Bf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_12r_AMS_PLL_CLK4SYNC_DIV8_6Bf_SET
#define AMS_PLL_PLL_CTL_12r_AMS_PLL_EN_CLKD66f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_12r_AMS_PLL_EN_CLKD66f_GET
#define AMS_PLL_PLL_CTL_12r_AMS_PLL_EN_CLKD66f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_12r_AMS_PLL_EN_CLKD66f_SET
#define AMS_PLL_PLL_CTL_12r_AMS_PLL_EN_CLK4REFf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_12r_AMS_PLL_EN_CLK4REFf_GET
#define AMS_PLL_PLL_CTL_12r_AMS_PLL_EN_CLK4REFf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_12r_AMS_PLL_EN_CLK4REFf_SET
#define AMS_PLL_PLL_CTL_12r_AMS_PLL_EN_CLK_FB2DIGf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_12r_AMS_PLL_EN_CLK_FB2DIGf_GET
#define AMS_PLL_PLL_CTL_12r_AMS_PLL_EN_CLK_FB2DIGf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_12r_AMS_PLL_EN_CLK_FB2DIGf_SET
#define AMS_PLL_PLL_CTL_12r_AMS_PLL_SPARE_200_200f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_12r_AMS_PLL_SPARE_200_200f_GET
#define AMS_PLL_PLL_CTL_12r_AMS_PLL_SPARE_200_200f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_12r_AMS_PLL_SPARE_200_200f_SET
#define AMS_PLL_PLL_CTL_12r_AMS_PLL_EN_TESTCLKf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_12r_AMS_PLL_EN_TESTCLKf_GET
#define AMS_PLL_PLL_CTL_12r_AMS_PLL_EN_TESTCLKf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_12r_AMS_PLL_EN_TESTCLKf_SET
#define AMS_PLL_PLL_CTL_12r_AMS_PLL_I_VCODIV_REFOUTf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_12r_AMS_PLL_I_VCODIV_REFOUTf_GET
#define AMS_PLL_PLL_CTL_12r_AMS_PLL_I_VCODIV_REFOUTf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_12r_AMS_PLL_I_VCODIV_REFOUTf_SET
#define AMS_PLL_PLL_CTL_12r_AMS_PLL_I_NDIV_VALIDf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_12r_AMS_PLL_I_NDIV_VALIDf_GET
#define AMS_PLL_PLL_CTL_12r_AMS_PLL_I_NDIV_VALIDf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_12r_AMS_PLL_I_NDIV_VALIDf_SET
#define AMS_PLL_PLL_CTL_12r_AMS_PLL_FRACN_DITHER_ENf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_12r_AMS_PLL_FRACN_DITHER_ENf_GET
#define AMS_PLL_PLL_CTL_12r_AMS_PLL_FRACN_DITHER_ENf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_12r_AMS_PLL_FRACN_DITHER_ENf_SET
#define AMS_PLL_PLL_CTL_12r_AMS_PLL_FRACN_NDIV_FRAC_Hf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_12r_AMS_PLL_FRACN_NDIV_FRAC_Hf_GET
#define AMS_PLL_PLL_CTL_12r_AMS_PLL_FRACN_NDIV_FRAC_Hf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_12r_AMS_PLL_FRACN_NDIV_FRAC_Hf_SET
#define READ_AMS_PLL_PLL_CTL_12r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_AMS_PLL_PLL_CTL_12r
#define WRITE_AMS_PLL_PLL_CTL_12r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_AMS_PLL_PLL_CTL_12r
#define MODIFY_AMS_PLL_PLL_CTL_12r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_AMS_PLL_PLL_CTL_12r
#define READLN_AMS_PLL_PLL_CTL_12r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_AMS_PLL_PLL_CTL_12r
#define WRITELN_AMS_PLL_PLL_CTL_12r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_AMS_PLL_PLL_CTL_12r
#define WRITEALL_AMS_PLL_PLL_CTL_12r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_AMS_PLL_PLL_CTL_12r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_12r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  AMS_PLL_PLL_CTL_13
 * BLOCKS:   AMS_PLL_COM
 * REGADDR:  0xd11d
 * DEVAD:    1
 * DESC:     AMS PLL CONTROL_13
 * RESETVAL: 0x30 (48)
 * ACCESS:   R/W
 * FIELDS:
 *     RESERVED_AMS_COM_22 Reserved bitsmust not be written to. A read returns an unknown value
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_13r (0x0001d11d | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_13r_SIZE 4

/*
 * This structure should be used to declare and program AMS_PLL_PLL_CTL_13.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_13r_s {
	uint32_t v[1];
	uint32_t ams_pll_pll_ctl_13[1];
	uint32_t _ams_pll_pll_ctl_13;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_13r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_13r_CLR(r) (r).ams_pll_pll_ctl_13[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_13r_SET(r,d) (r).ams_pll_pll_ctl_13[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_13r_GET(r) (r).ams_pll_pll_ctl_13[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_13r_RESERVED_AMS_COM_22f_GET(r) ((((r).ams_pll_pll_ctl_13[0]) >> 2) & 0xfff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_13r_RESERVED_AMS_COM_22f_SET(r,f) (r).ams_pll_pll_ctl_13[0]=(((r).ams_pll_pll_ctl_13[0] & ~((uint32_t)0xfff << 2)) | ((((uint32_t)f) & 0xfff) << 2)) | (4095 << (16 + 2))

/*
 * These macros can be used to access AMS_PLL_PLL_CTL_13.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_AMS_PLL_PLL_CTL_13r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_13r,(_r._ams_pll_pll_ctl_13))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_AMS_PLL_PLL_CTL_13r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_13r,(_r._ams_pll_pll_ctl_13)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_AMS_PLL_PLL_CTL_13r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_13r,(_r._ams_pll_pll_ctl_13))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_AMS_PLL_PLL_CTL_13r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_13r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_pll_pll_ctl_13))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_AMS_PLL_PLL_CTL_13r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_13r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_pll_pll_ctl_13))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_AMS_PLL_PLL_CTL_13r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_13r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._ams_pll_pll_ctl_13))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AMS_PLL_PLL_CTL_13r BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_13r
#define AMS_PLL_PLL_CTL_13r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_13r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_13r_t AMS_PLL_PLL_CTL_13r_t;
#define AMS_PLL_PLL_CTL_13r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_13r_CLR
#define AMS_PLL_PLL_CTL_13r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_13r_SET
#define AMS_PLL_PLL_CTL_13r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_13r_GET
#define AMS_PLL_PLL_CTL_13r_RESERVED_AMS_COM_22f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_13r_RESERVED_AMS_COM_22f_GET
#define AMS_PLL_PLL_CTL_13r_RESERVED_AMS_COM_22f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_13r_RESERVED_AMS_COM_22f_SET
#define READ_AMS_PLL_PLL_CTL_13r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_AMS_PLL_PLL_CTL_13r
#define WRITE_AMS_PLL_PLL_CTL_13r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_AMS_PLL_PLL_CTL_13r
#define MODIFY_AMS_PLL_PLL_CTL_13r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_AMS_PLL_PLL_CTL_13r
#define READLN_AMS_PLL_PLL_CTL_13r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_AMS_PLL_PLL_CTL_13r
#define WRITELN_AMS_PLL_PLL_CTL_13r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_AMS_PLL_PLL_CTL_13r
#define WRITEALL_AMS_PLL_PLL_CTL_13r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_AMS_PLL_PLL_CTL_13r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_13r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  AMS_PLL_PLL_CTL_14
 * BLOCKS:   AMS_PLL_COM
 * REGADDR:  0xd11e
 * DEVAD:    1
 * DESC:     AMS PLL CONTROL_14
 * RESETVAL: 0x7b (123)
 * ACCESS:   R/W
 * FIELDS:
 *     RESERVED_AMS_COM_23 Reserved bitsmust not be written to. A read returns an unknown value
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_14r (0x0001d11e | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_14r_SIZE 4

/*
 * This structure should be used to declare and program AMS_PLL_PLL_CTL_14.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_14r_s {
	uint32_t v[1];
	uint32_t ams_pll_pll_ctl_14[1];
	uint32_t _ams_pll_pll_ctl_14;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_14r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_14r_CLR(r) (r).ams_pll_pll_ctl_14[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_14r_SET(r,d) (r).ams_pll_pll_ctl_14[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_14r_GET(r) (r).ams_pll_pll_ctl_14[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_14r_RESERVED_AMS_COM_23f_GET(r) (((r).ams_pll_pll_ctl_14[0]) & 0x3ff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_14r_RESERVED_AMS_COM_23f_SET(r,f) (r).ams_pll_pll_ctl_14[0]=(((r).ams_pll_pll_ctl_14[0] & ~((uint32_t)0x3ff)) | (((uint32_t)f) & 0x3ff)) | (0x3ff << 16)

/*
 * These macros can be used to access AMS_PLL_PLL_CTL_14.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_AMS_PLL_PLL_CTL_14r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_14r,(_r._ams_pll_pll_ctl_14))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_AMS_PLL_PLL_CTL_14r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_14r,(_r._ams_pll_pll_ctl_14)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_AMS_PLL_PLL_CTL_14r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_14r,(_r._ams_pll_pll_ctl_14))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_AMS_PLL_PLL_CTL_14r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_14r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_pll_pll_ctl_14))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_AMS_PLL_PLL_CTL_14r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_14r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_pll_pll_ctl_14))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_AMS_PLL_PLL_CTL_14r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_14r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._ams_pll_pll_ctl_14))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AMS_PLL_PLL_CTL_14r BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_14r
#define AMS_PLL_PLL_CTL_14r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_14r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_14r_t AMS_PLL_PLL_CTL_14r_t;
#define AMS_PLL_PLL_CTL_14r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_14r_CLR
#define AMS_PLL_PLL_CTL_14r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_14r_SET
#define AMS_PLL_PLL_CTL_14r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_14r_GET
#define AMS_PLL_PLL_CTL_14r_RESERVED_AMS_COM_23f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_14r_RESERVED_AMS_COM_23f_GET
#define AMS_PLL_PLL_CTL_14r_RESERVED_AMS_COM_23f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_14r_RESERVED_AMS_COM_23f_SET
#define READ_AMS_PLL_PLL_CTL_14r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_AMS_PLL_PLL_CTL_14r
#define WRITE_AMS_PLL_PLL_CTL_14r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_AMS_PLL_PLL_CTL_14r
#define MODIFY_AMS_PLL_PLL_CTL_14r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_AMS_PLL_PLL_CTL_14r
#define READLN_AMS_PLL_PLL_CTL_14r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_AMS_PLL_PLL_CTL_14r
#define WRITELN_AMS_PLL_PLL_CTL_14r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_AMS_PLL_PLL_CTL_14r
#define WRITEALL_AMS_PLL_PLL_CTL_14r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_AMS_PLL_PLL_CTL_14r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_PLL_PLL_CTL_14r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  PATGEN_PATGEN_SEQ0
 * BLOCKS:   PATT_GEN_COM
 * REGADDR:  0xd120
 * DEVAD:    1
 * DESC:     Pattern Generator Sequence Word 0
 * RESETVAL: 0xff00 (65280)
 * ACCESS:   R/W
 * FIELDS:
 *     PATT_GEN_SEQ_0   Fixed Pattern Generator Sequence Word 0. MSB bits will be transmitted first on serial transmit lane in both shared and slice mode. This word will be transmitted last.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ0r (0x0001d120 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ0r_SIZE 4

/*
 * This structure should be used to declare and program PATGEN_PATGEN_SEQ0.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ0r_s {
	uint32_t v[1];
	uint32_t patgen_patgen_seq0[1];
	uint32_t _patgen_patgen_seq0;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ0r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ0r_CLR(r) (r).patgen_patgen_seq0[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ0r_SET(r,d) (r).patgen_patgen_seq0[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ0r_GET(r) (r).patgen_patgen_seq0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ0r_PATT_GEN_SEQ_0f_GET(r) (((r).patgen_patgen_seq0[0]) & 0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ0r_PATT_GEN_SEQ_0f_SET(r,f) (r).patgen_patgen_seq0[0]=(((r).patgen_patgen_seq0[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access PATGEN_PATGEN_SEQ0.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_PATGEN_PATGEN_SEQ0r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ0r,(_r._patgen_patgen_seq0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_PATGEN_PATGEN_SEQ0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ0r,(_r._patgen_patgen_seq0)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_PATGEN_PATGEN_SEQ0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ0r,(_r._patgen_patgen_seq0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_PATGEN_PATGEN_SEQ0r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._patgen_patgen_seq0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_PATGEN_PATGEN_SEQ0r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._patgen_patgen_seq0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_PATGEN_PATGEN_SEQ0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._patgen_patgen_seq0))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define PATGEN_PATGEN_SEQ0r BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ0r
#define PATGEN_PATGEN_SEQ0r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ0r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ0r_t PATGEN_PATGEN_SEQ0r_t;
#define PATGEN_PATGEN_SEQ0r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ0r_CLR
#define PATGEN_PATGEN_SEQ0r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ0r_SET
#define PATGEN_PATGEN_SEQ0r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ0r_GET
#define PATGEN_PATGEN_SEQ0r_PATT_GEN_SEQ_0f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ0r_PATT_GEN_SEQ_0f_GET
#define PATGEN_PATGEN_SEQ0r_PATT_GEN_SEQ_0f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ0r_PATT_GEN_SEQ_0f_SET
#define READ_PATGEN_PATGEN_SEQ0r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_PATGEN_PATGEN_SEQ0r
#define WRITE_PATGEN_PATGEN_SEQ0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_PATGEN_PATGEN_SEQ0r
#define MODIFY_PATGEN_PATGEN_SEQ0r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_PATGEN_PATGEN_SEQ0r
#define READLN_PATGEN_PATGEN_SEQ0r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_PATGEN_PATGEN_SEQ0r
#define WRITELN_PATGEN_PATGEN_SEQ0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_PATGEN_PATGEN_SEQ0r
#define WRITEALL_PATGEN_PATGEN_SEQ0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_PATGEN_PATGEN_SEQ0r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  PATGEN_PATGEN_SEQ1
 * BLOCKS:   PATT_GEN_COM
 * REGADDR:  0xd121
 * DEVAD:    1
 * DESC:     Pattern Generator Sequence Word 1
 * RESETVAL: 0xff00 (65280)
 * ACCESS:   R/W
 * FIELDS:
 *     PATT_GEN_SEQ_1   Fixed Pattern Generator Sequence Word 1. MSB bits will be transmitted first on serial transmit lane in both shared and slice mode.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ1r (0x0001d121 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ1r_SIZE 4

/*
 * This structure should be used to declare and program PATGEN_PATGEN_SEQ1.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ1r_s {
	uint32_t v[1];
	uint32_t patgen_patgen_seq1[1];
	uint32_t _patgen_patgen_seq1;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ1r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ1r_CLR(r) (r).patgen_patgen_seq1[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ1r_SET(r,d) (r).patgen_patgen_seq1[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ1r_GET(r) (r).patgen_patgen_seq1[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ1r_PATT_GEN_SEQ_1f_GET(r) (((r).patgen_patgen_seq1[0]) & 0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ1r_PATT_GEN_SEQ_1f_SET(r,f) (r).patgen_patgen_seq1[0]=(((r).patgen_patgen_seq1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access PATGEN_PATGEN_SEQ1.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_PATGEN_PATGEN_SEQ1r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ1r,(_r._patgen_patgen_seq1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_PATGEN_PATGEN_SEQ1r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ1r,(_r._patgen_patgen_seq1)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_PATGEN_PATGEN_SEQ1r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ1r,(_r._patgen_patgen_seq1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_PATGEN_PATGEN_SEQ1r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._patgen_patgen_seq1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_PATGEN_PATGEN_SEQ1r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._patgen_patgen_seq1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_PATGEN_PATGEN_SEQ1r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ1r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._patgen_patgen_seq1))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define PATGEN_PATGEN_SEQ1r BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ1r
#define PATGEN_PATGEN_SEQ1r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ1r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ1r_t PATGEN_PATGEN_SEQ1r_t;
#define PATGEN_PATGEN_SEQ1r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ1r_CLR
#define PATGEN_PATGEN_SEQ1r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ1r_SET
#define PATGEN_PATGEN_SEQ1r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ1r_GET
#define PATGEN_PATGEN_SEQ1r_PATT_GEN_SEQ_1f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ1r_PATT_GEN_SEQ_1f_GET
#define PATGEN_PATGEN_SEQ1r_PATT_GEN_SEQ_1f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ1r_PATT_GEN_SEQ_1f_SET
#define READ_PATGEN_PATGEN_SEQ1r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_PATGEN_PATGEN_SEQ1r
#define WRITE_PATGEN_PATGEN_SEQ1r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_PATGEN_PATGEN_SEQ1r
#define MODIFY_PATGEN_PATGEN_SEQ1r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_PATGEN_PATGEN_SEQ1r
#define READLN_PATGEN_PATGEN_SEQ1r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_PATGEN_PATGEN_SEQ1r
#define WRITELN_PATGEN_PATGEN_SEQ1r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_PATGEN_PATGEN_SEQ1r
#define WRITEALL_PATGEN_PATGEN_SEQ1r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_PATGEN_PATGEN_SEQ1r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ1r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  PATGEN_PATGEN_SEQ2
 * BLOCKS:   PATT_GEN_COM
 * REGADDR:  0xd122
 * DEVAD:    1
 * DESC:     Pattern Generator Sequence Word 2
 * RESETVAL: 0xff00 (65280)
 * ACCESS:   R/W
 * FIELDS:
 *     PATT_GEN_SEQ_2   Fixed Pattern Generator Sequence Word 2. MSB bits will be transmitted first on serial transmit lane in both shared and slice mode.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ2r (0x0001d122 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ2r_SIZE 4

/*
 * This structure should be used to declare and program PATGEN_PATGEN_SEQ2.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ2r_s {
	uint32_t v[1];
	uint32_t patgen_patgen_seq2[1];
	uint32_t _patgen_patgen_seq2;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ2r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ2r_CLR(r) (r).patgen_patgen_seq2[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ2r_SET(r,d) (r).patgen_patgen_seq2[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ2r_GET(r) (r).patgen_patgen_seq2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ2r_PATT_GEN_SEQ_2f_GET(r) (((r).patgen_patgen_seq2[0]) & 0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ2r_PATT_GEN_SEQ_2f_SET(r,f) (r).patgen_patgen_seq2[0]=(((r).patgen_patgen_seq2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access PATGEN_PATGEN_SEQ2.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_PATGEN_PATGEN_SEQ2r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ2r,(_r._patgen_patgen_seq2))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_PATGEN_PATGEN_SEQ2r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ2r,(_r._patgen_patgen_seq2)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_PATGEN_PATGEN_SEQ2r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ2r,(_r._patgen_patgen_seq2))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_PATGEN_PATGEN_SEQ2r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._patgen_patgen_seq2))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_PATGEN_PATGEN_SEQ2r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._patgen_patgen_seq2))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_PATGEN_PATGEN_SEQ2r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._patgen_patgen_seq2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define PATGEN_PATGEN_SEQ2r BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ2r
#define PATGEN_PATGEN_SEQ2r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ2r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ2r_t PATGEN_PATGEN_SEQ2r_t;
#define PATGEN_PATGEN_SEQ2r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ2r_CLR
#define PATGEN_PATGEN_SEQ2r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ2r_SET
#define PATGEN_PATGEN_SEQ2r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ2r_GET
#define PATGEN_PATGEN_SEQ2r_PATT_GEN_SEQ_2f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ2r_PATT_GEN_SEQ_2f_GET
#define PATGEN_PATGEN_SEQ2r_PATT_GEN_SEQ_2f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ2r_PATT_GEN_SEQ_2f_SET
#define READ_PATGEN_PATGEN_SEQ2r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_PATGEN_PATGEN_SEQ2r
#define WRITE_PATGEN_PATGEN_SEQ2r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_PATGEN_PATGEN_SEQ2r
#define MODIFY_PATGEN_PATGEN_SEQ2r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_PATGEN_PATGEN_SEQ2r
#define READLN_PATGEN_PATGEN_SEQ2r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_PATGEN_PATGEN_SEQ2r
#define WRITELN_PATGEN_PATGEN_SEQ2r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_PATGEN_PATGEN_SEQ2r
#define WRITEALL_PATGEN_PATGEN_SEQ2r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_PATGEN_PATGEN_SEQ2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  PATGEN_PATGEN_SEQ3
 * BLOCKS:   PATT_GEN_COM
 * REGADDR:  0xd123
 * DEVAD:    1
 * DESC:     Pattern Generator Sequence Word 3
 * RESETVAL: 0xff00 (65280)
 * ACCESS:   R/W
 * FIELDS:
 *     PATT_GEN_SEQ_3   Fixed Pattern Generator Sequence Word 3. MSB bits will be transmitted first on serial transmit lane in both shared and slice mode.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ3r (0x0001d123 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ3r_SIZE 4

/*
 * This structure should be used to declare and program PATGEN_PATGEN_SEQ3.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ3r_s {
	uint32_t v[1];
	uint32_t patgen_patgen_seq3[1];
	uint32_t _patgen_patgen_seq3;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ3r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ3r_CLR(r) (r).patgen_patgen_seq3[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ3r_SET(r,d) (r).patgen_patgen_seq3[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ3r_GET(r) (r).patgen_patgen_seq3[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ3r_PATT_GEN_SEQ_3f_GET(r) (((r).patgen_patgen_seq3[0]) & 0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ3r_PATT_GEN_SEQ_3f_SET(r,f) (r).patgen_patgen_seq3[0]=(((r).patgen_patgen_seq3[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access PATGEN_PATGEN_SEQ3.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_PATGEN_PATGEN_SEQ3r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ3r,(_r._patgen_patgen_seq3))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_PATGEN_PATGEN_SEQ3r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ3r,(_r._patgen_patgen_seq3)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_PATGEN_PATGEN_SEQ3r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ3r,(_r._patgen_patgen_seq3))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_PATGEN_PATGEN_SEQ3r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ3r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._patgen_patgen_seq3))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_PATGEN_PATGEN_SEQ3r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ3r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._patgen_patgen_seq3))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_PATGEN_PATGEN_SEQ3r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ3r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._patgen_patgen_seq3))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define PATGEN_PATGEN_SEQ3r BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ3r
#define PATGEN_PATGEN_SEQ3r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ3r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ3r_t PATGEN_PATGEN_SEQ3r_t;
#define PATGEN_PATGEN_SEQ3r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ3r_CLR
#define PATGEN_PATGEN_SEQ3r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ3r_SET
#define PATGEN_PATGEN_SEQ3r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ3r_GET
#define PATGEN_PATGEN_SEQ3r_PATT_GEN_SEQ_3f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ3r_PATT_GEN_SEQ_3f_GET
#define PATGEN_PATGEN_SEQ3r_PATT_GEN_SEQ_3f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ3r_PATT_GEN_SEQ_3f_SET
#define READ_PATGEN_PATGEN_SEQ3r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_PATGEN_PATGEN_SEQ3r
#define WRITE_PATGEN_PATGEN_SEQ3r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_PATGEN_PATGEN_SEQ3r
#define MODIFY_PATGEN_PATGEN_SEQ3r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_PATGEN_PATGEN_SEQ3r
#define READLN_PATGEN_PATGEN_SEQ3r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_PATGEN_PATGEN_SEQ3r
#define WRITELN_PATGEN_PATGEN_SEQ3r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_PATGEN_PATGEN_SEQ3r
#define WRITEALL_PATGEN_PATGEN_SEQ3r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_PATGEN_PATGEN_SEQ3r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ3r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  PATGEN_PATGEN_SEQ4
 * BLOCKS:   PATT_GEN_COM
 * REGADDR:  0xd124
 * DEVAD:    1
 * DESC:     Pattern Generator Sequence Word 4
 * RESETVAL: 0xff00 (65280)
 * ACCESS:   R/W
 * FIELDS:
 *     PATT_GEN_SEQ_4   Fixed Pattern Generator Sequence Word 4. MSB bits will be transmitted first on serial transmit lane in both shared and slice mode.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ4r (0x0001d124 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ4r_SIZE 4

/*
 * This structure should be used to declare and program PATGEN_PATGEN_SEQ4.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ4r_s {
	uint32_t v[1];
	uint32_t patgen_patgen_seq4[1];
	uint32_t _patgen_patgen_seq4;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ4r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ4r_CLR(r) (r).patgen_patgen_seq4[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ4r_SET(r,d) (r).patgen_patgen_seq4[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ4r_GET(r) (r).patgen_patgen_seq4[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ4r_PATT_GEN_SEQ_4f_GET(r) (((r).patgen_patgen_seq4[0]) & 0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ4r_PATT_GEN_SEQ_4f_SET(r,f) (r).patgen_patgen_seq4[0]=(((r).patgen_patgen_seq4[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access PATGEN_PATGEN_SEQ4.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_PATGEN_PATGEN_SEQ4r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ4r,(_r._patgen_patgen_seq4))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_PATGEN_PATGEN_SEQ4r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ4r,(_r._patgen_patgen_seq4)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_PATGEN_PATGEN_SEQ4r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ4r,(_r._patgen_patgen_seq4))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_PATGEN_PATGEN_SEQ4r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ4r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._patgen_patgen_seq4))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_PATGEN_PATGEN_SEQ4r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ4r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._patgen_patgen_seq4))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_PATGEN_PATGEN_SEQ4r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ4r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._patgen_patgen_seq4))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define PATGEN_PATGEN_SEQ4r BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ4r
#define PATGEN_PATGEN_SEQ4r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ4r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ4r_t PATGEN_PATGEN_SEQ4r_t;
#define PATGEN_PATGEN_SEQ4r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ4r_CLR
#define PATGEN_PATGEN_SEQ4r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ4r_SET
#define PATGEN_PATGEN_SEQ4r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ4r_GET
#define PATGEN_PATGEN_SEQ4r_PATT_GEN_SEQ_4f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ4r_PATT_GEN_SEQ_4f_GET
#define PATGEN_PATGEN_SEQ4r_PATT_GEN_SEQ_4f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ4r_PATT_GEN_SEQ_4f_SET
#define READ_PATGEN_PATGEN_SEQ4r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_PATGEN_PATGEN_SEQ4r
#define WRITE_PATGEN_PATGEN_SEQ4r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_PATGEN_PATGEN_SEQ4r
#define MODIFY_PATGEN_PATGEN_SEQ4r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_PATGEN_PATGEN_SEQ4r
#define READLN_PATGEN_PATGEN_SEQ4r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_PATGEN_PATGEN_SEQ4r
#define WRITELN_PATGEN_PATGEN_SEQ4r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_PATGEN_PATGEN_SEQ4r
#define WRITEALL_PATGEN_PATGEN_SEQ4r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_PATGEN_PATGEN_SEQ4r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ4r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  PATGEN_PATGEN_SEQ5
 * BLOCKS:   PATT_GEN_COM
 * REGADDR:  0xd125
 * DEVAD:    1
 * DESC:     Pattern Generator Sequence Word 5
 * RESETVAL: 0xff00 (65280)
 * ACCESS:   R/W
 * FIELDS:
 *     PATT_GEN_SEQ_5   Fixed Pattern Generator Sequence Word 5. MSB bits will be transmitted first on serial transmit lane in both shared and slice mode.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ5r (0x0001d125 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ5r_SIZE 4

/*
 * This structure should be used to declare and program PATGEN_PATGEN_SEQ5.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ5r_s {
	uint32_t v[1];
	uint32_t patgen_patgen_seq5[1];
	uint32_t _patgen_patgen_seq5;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ5r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ5r_CLR(r) (r).patgen_patgen_seq5[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ5r_SET(r,d) (r).patgen_patgen_seq5[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ5r_GET(r) (r).patgen_patgen_seq5[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ5r_PATT_GEN_SEQ_5f_GET(r) (((r).patgen_patgen_seq5[0]) & 0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ5r_PATT_GEN_SEQ_5f_SET(r,f) (r).patgen_patgen_seq5[0]=(((r).patgen_patgen_seq5[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access PATGEN_PATGEN_SEQ5.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_PATGEN_PATGEN_SEQ5r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ5r,(_r._patgen_patgen_seq5))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_PATGEN_PATGEN_SEQ5r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ5r,(_r._patgen_patgen_seq5)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_PATGEN_PATGEN_SEQ5r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ5r,(_r._patgen_patgen_seq5))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_PATGEN_PATGEN_SEQ5r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ5r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._patgen_patgen_seq5))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_PATGEN_PATGEN_SEQ5r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ5r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._patgen_patgen_seq5))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_PATGEN_PATGEN_SEQ5r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ5r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._patgen_patgen_seq5))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define PATGEN_PATGEN_SEQ5r BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ5r
#define PATGEN_PATGEN_SEQ5r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ5r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ5r_t PATGEN_PATGEN_SEQ5r_t;
#define PATGEN_PATGEN_SEQ5r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ5r_CLR
#define PATGEN_PATGEN_SEQ5r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ5r_SET
#define PATGEN_PATGEN_SEQ5r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ5r_GET
#define PATGEN_PATGEN_SEQ5r_PATT_GEN_SEQ_5f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ5r_PATT_GEN_SEQ_5f_GET
#define PATGEN_PATGEN_SEQ5r_PATT_GEN_SEQ_5f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ5r_PATT_GEN_SEQ_5f_SET
#define READ_PATGEN_PATGEN_SEQ5r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_PATGEN_PATGEN_SEQ5r
#define WRITE_PATGEN_PATGEN_SEQ5r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_PATGEN_PATGEN_SEQ5r
#define MODIFY_PATGEN_PATGEN_SEQ5r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_PATGEN_PATGEN_SEQ5r
#define READLN_PATGEN_PATGEN_SEQ5r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_PATGEN_PATGEN_SEQ5r
#define WRITELN_PATGEN_PATGEN_SEQ5r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_PATGEN_PATGEN_SEQ5r
#define WRITEALL_PATGEN_PATGEN_SEQ5r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_PATGEN_PATGEN_SEQ5r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ5r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  PATGEN_PATGEN_SEQ6
 * BLOCKS:   PATT_GEN_COM
 * REGADDR:  0xd126
 * DEVAD:    1
 * DESC:     Pattern Generator Sequence Word 6
 * RESETVAL: 0xff00 (65280)
 * ACCESS:   R/W
 * FIELDS:
 *     PATT_GEN_SEQ_6   Fixed Pattern Generator Sequence Word 6. MSB bits will be transmitted first on serial transmit lane in both shared and slice mode.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ6r (0x0001d126 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ6r_SIZE 4

/*
 * This structure should be used to declare and program PATGEN_PATGEN_SEQ6.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ6r_s {
	uint32_t v[1];
	uint32_t patgen_patgen_seq6[1];
	uint32_t _patgen_patgen_seq6;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ6r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ6r_CLR(r) (r).patgen_patgen_seq6[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ6r_SET(r,d) (r).patgen_patgen_seq6[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ6r_GET(r) (r).patgen_patgen_seq6[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ6r_PATT_GEN_SEQ_6f_GET(r) (((r).patgen_patgen_seq6[0]) & 0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ6r_PATT_GEN_SEQ_6f_SET(r,f) (r).patgen_patgen_seq6[0]=(((r).patgen_patgen_seq6[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access PATGEN_PATGEN_SEQ6.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_PATGEN_PATGEN_SEQ6r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ6r,(_r._patgen_patgen_seq6))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_PATGEN_PATGEN_SEQ6r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ6r,(_r._patgen_patgen_seq6)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_PATGEN_PATGEN_SEQ6r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ6r,(_r._patgen_patgen_seq6))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_PATGEN_PATGEN_SEQ6r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ6r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._patgen_patgen_seq6))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_PATGEN_PATGEN_SEQ6r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ6r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._patgen_patgen_seq6))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_PATGEN_PATGEN_SEQ6r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ6r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._patgen_patgen_seq6))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define PATGEN_PATGEN_SEQ6r BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ6r
#define PATGEN_PATGEN_SEQ6r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ6r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ6r_t PATGEN_PATGEN_SEQ6r_t;
#define PATGEN_PATGEN_SEQ6r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ6r_CLR
#define PATGEN_PATGEN_SEQ6r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ6r_SET
#define PATGEN_PATGEN_SEQ6r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ6r_GET
#define PATGEN_PATGEN_SEQ6r_PATT_GEN_SEQ_6f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ6r_PATT_GEN_SEQ_6f_GET
#define PATGEN_PATGEN_SEQ6r_PATT_GEN_SEQ_6f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ6r_PATT_GEN_SEQ_6f_SET
#define READ_PATGEN_PATGEN_SEQ6r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_PATGEN_PATGEN_SEQ6r
#define WRITE_PATGEN_PATGEN_SEQ6r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_PATGEN_PATGEN_SEQ6r
#define MODIFY_PATGEN_PATGEN_SEQ6r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_PATGEN_PATGEN_SEQ6r
#define READLN_PATGEN_PATGEN_SEQ6r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_PATGEN_PATGEN_SEQ6r
#define WRITELN_PATGEN_PATGEN_SEQ6r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_PATGEN_PATGEN_SEQ6r
#define WRITEALL_PATGEN_PATGEN_SEQ6r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_PATGEN_PATGEN_SEQ6r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ6r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  PATGEN_PATGEN_SEQ7
 * BLOCKS:   PATT_GEN_COM
 * REGADDR:  0xd127
 * DEVAD:    1
 * DESC:     Pattern Generator Sequence Word 7
 * RESETVAL: 0xff00 (65280)
 * ACCESS:   R/W
 * FIELDS:
 *     PATT_GEN_SEQ_7   Fixed Pattern Generator Sequence Word 7. MSB bits will be transmitted first on serial transmit lane in both shared and slice mode.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ7r (0x0001d127 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ7r_SIZE 4

/*
 * This structure should be used to declare and program PATGEN_PATGEN_SEQ7.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ7r_s {
	uint32_t v[1];
	uint32_t patgen_patgen_seq7[1];
	uint32_t _patgen_patgen_seq7;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ7r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ7r_CLR(r) (r).patgen_patgen_seq7[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ7r_SET(r,d) (r).patgen_patgen_seq7[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ7r_GET(r) (r).patgen_patgen_seq7[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ7r_PATT_GEN_SEQ_7f_GET(r) (((r).patgen_patgen_seq7[0]) & 0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ7r_PATT_GEN_SEQ_7f_SET(r,f) (r).patgen_patgen_seq7[0]=(((r).patgen_patgen_seq7[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access PATGEN_PATGEN_SEQ7.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_PATGEN_PATGEN_SEQ7r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ7r,(_r._patgen_patgen_seq7))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_PATGEN_PATGEN_SEQ7r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ7r,(_r._patgen_patgen_seq7)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_PATGEN_PATGEN_SEQ7r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ7r,(_r._patgen_patgen_seq7))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_PATGEN_PATGEN_SEQ7r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ7r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._patgen_patgen_seq7))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_PATGEN_PATGEN_SEQ7r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ7r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._patgen_patgen_seq7))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_PATGEN_PATGEN_SEQ7r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ7r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._patgen_patgen_seq7))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define PATGEN_PATGEN_SEQ7r BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ7r
#define PATGEN_PATGEN_SEQ7r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ7r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ7r_t PATGEN_PATGEN_SEQ7r_t;
#define PATGEN_PATGEN_SEQ7r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ7r_CLR
#define PATGEN_PATGEN_SEQ7r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ7r_SET
#define PATGEN_PATGEN_SEQ7r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ7r_GET
#define PATGEN_PATGEN_SEQ7r_PATT_GEN_SEQ_7f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ7r_PATT_GEN_SEQ_7f_GET
#define PATGEN_PATGEN_SEQ7r_PATT_GEN_SEQ_7f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ7r_PATT_GEN_SEQ_7f_SET
#define READ_PATGEN_PATGEN_SEQ7r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_PATGEN_PATGEN_SEQ7r
#define WRITE_PATGEN_PATGEN_SEQ7r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_PATGEN_PATGEN_SEQ7r
#define MODIFY_PATGEN_PATGEN_SEQ7r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_PATGEN_PATGEN_SEQ7r
#define READLN_PATGEN_PATGEN_SEQ7r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_PATGEN_PATGEN_SEQ7r
#define WRITELN_PATGEN_PATGEN_SEQ7r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_PATGEN_PATGEN_SEQ7r
#define WRITEALL_PATGEN_PATGEN_SEQ7r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_PATGEN_PATGEN_SEQ7r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ7r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  PATGEN_PATGEN_SEQ8
 * BLOCKS:   PATT_GEN_COM
 * REGADDR:  0xd128
 * DEVAD:    1
 * DESC:     Pattern Generator Sequence Word 8
 * RESETVAL: 0xff00 (65280)
 * ACCESS:   R/W
 * FIELDS:
 *     PATT_GEN_SEQ_8   Fixed Pattern Generator Sequence Word 8. MSB bits will be transmitted first on serial transmit lane in both shared and slice mode.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ8r (0x0001d128 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ8r_SIZE 4

/*
 * This structure should be used to declare and program PATGEN_PATGEN_SEQ8.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ8r_s {
	uint32_t v[1];
	uint32_t patgen_patgen_seq8[1];
	uint32_t _patgen_patgen_seq8;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ8r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ8r_CLR(r) (r).patgen_patgen_seq8[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ8r_SET(r,d) (r).patgen_patgen_seq8[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ8r_GET(r) (r).patgen_patgen_seq8[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ8r_PATT_GEN_SEQ_8f_GET(r) (((r).patgen_patgen_seq8[0]) & 0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ8r_PATT_GEN_SEQ_8f_SET(r,f) (r).patgen_patgen_seq8[0]=(((r).patgen_patgen_seq8[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access PATGEN_PATGEN_SEQ8.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_PATGEN_PATGEN_SEQ8r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ8r,(_r._patgen_patgen_seq8))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_PATGEN_PATGEN_SEQ8r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ8r,(_r._patgen_patgen_seq8)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_PATGEN_PATGEN_SEQ8r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ8r,(_r._patgen_patgen_seq8))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_PATGEN_PATGEN_SEQ8r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ8r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._patgen_patgen_seq8))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_PATGEN_PATGEN_SEQ8r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ8r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._patgen_patgen_seq8))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_PATGEN_PATGEN_SEQ8r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ8r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._patgen_patgen_seq8))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define PATGEN_PATGEN_SEQ8r BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ8r
#define PATGEN_PATGEN_SEQ8r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ8r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ8r_t PATGEN_PATGEN_SEQ8r_t;
#define PATGEN_PATGEN_SEQ8r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ8r_CLR
#define PATGEN_PATGEN_SEQ8r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ8r_SET
#define PATGEN_PATGEN_SEQ8r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ8r_GET
#define PATGEN_PATGEN_SEQ8r_PATT_GEN_SEQ_8f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ8r_PATT_GEN_SEQ_8f_GET
#define PATGEN_PATGEN_SEQ8r_PATT_GEN_SEQ_8f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ8r_PATT_GEN_SEQ_8f_SET
#define READ_PATGEN_PATGEN_SEQ8r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_PATGEN_PATGEN_SEQ8r
#define WRITE_PATGEN_PATGEN_SEQ8r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_PATGEN_PATGEN_SEQ8r
#define MODIFY_PATGEN_PATGEN_SEQ8r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_PATGEN_PATGEN_SEQ8r
#define READLN_PATGEN_PATGEN_SEQ8r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_PATGEN_PATGEN_SEQ8r
#define WRITELN_PATGEN_PATGEN_SEQ8r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_PATGEN_PATGEN_SEQ8r
#define WRITEALL_PATGEN_PATGEN_SEQ8r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_PATGEN_PATGEN_SEQ8r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ8r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  PATGEN_PATGEN_SEQ9
 * BLOCKS:   PATT_GEN_COM
 * REGADDR:  0xd129
 * DEVAD:    1
 * DESC:     Pattern Generator Sequence Word 9
 * RESETVAL: 0xff00 (65280)
 * ACCESS:   R/W
 * FIELDS:
 *     PATT_GEN_SEQ_9   Fixed Pattern Generator Sequence Word 9. MSB bits will be transmitted first on serial transmit lane in both shared and slice mode.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ9r (0x0001d129 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ9r_SIZE 4

/*
 * This structure should be used to declare and program PATGEN_PATGEN_SEQ9.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ9r_s {
	uint32_t v[1];
	uint32_t patgen_patgen_seq9[1];
	uint32_t _patgen_patgen_seq9;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ9r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ9r_CLR(r) (r).patgen_patgen_seq9[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ9r_SET(r,d) (r).patgen_patgen_seq9[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ9r_GET(r) (r).patgen_patgen_seq9[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ9r_PATT_GEN_SEQ_9f_GET(r) (((r).patgen_patgen_seq9[0]) & 0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ9r_PATT_GEN_SEQ_9f_SET(r,f) (r).patgen_patgen_seq9[0]=(((r).patgen_patgen_seq9[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access PATGEN_PATGEN_SEQ9.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_PATGEN_PATGEN_SEQ9r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ9r,(_r._patgen_patgen_seq9))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_PATGEN_PATGEN_SEQ9r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ9r,(_r._patgen_patgen_seq9)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_PATGEN_PATGEN_SEQ9r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ9r,(_r._patgen_patgen_seq9))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_PATGEN_PATGEN_SEQ9r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ9r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._patgen_patgen_seq9))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_PATGEN_PATGEN_SEQ9r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ9r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._patgen_patgen_seq9))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_PATGEN_PATGEN_SEQ9r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ9r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._patgen_patgen_seq9))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define PATGEN_PATGEN_SEQ9r BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ9r
#define PATGEN_PATGEN_SEQ9r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ9r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ9r_t PATGEN_PATGEN_SEQ9r_t;
#define PATGEN_PATGEN_SEQ9r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ9r_CLR
#define PATGEN_PATGEN_SEQ9r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ9r_SET
#define PATGEN_PATGEN_SEQ9r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ9r_GET
#define PATGEN_PATGEN_SEQ9r_PATT_GEN_SEQ_9f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ9r_PATT_GEN_SEQ_9f_GET
#define PATGEN_PATGEN_SEQ9r_PATT_GEN_SEQ_9f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ9r_PATT_GEN_SEQ_9f_SET
#define READ_PATGEN_PATGEN_SEQ9r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_PATGEN_PATGEN_SEQ9r
#define WRITE_PATGEN_PATGEN_SEQ9r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_PATGEN_PATGEN_SEQ9r
#define MODIFY_PATGEN_PATGEN_SEQ9r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_PATGEN_PATGEN_SEQ9r
#define READLN_PATGEN_PATGEN_SEQ9r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_PATGEN_PATGEN_SEQ9r
#define WRITELN_PATGEN_PATGEN_SEQ9r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_PATGEN_PATGEN_SEQ9r
#define WRITEALL_PATGEN_PATGEN_SEQ9r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_PATGEN_PATGEN_SEQ9r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ9r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  PATGEN_PATGEN_SEQ_10
 * BLOCKS:   PATT_GEN_COM
 * REGADDR:  0xd12a
 * DEVAD:    1
 * DESC:     Pattern Generator Sequence Word 10
 * RESETVAL: 0xff00 (65280)
 * ACCESS:   R/W
 * FIELDS:
 *     PATT_GEN_SEQ_10  Fixed Pattern Generator Sequence Word 10. MSB bits will be transmitted first on serial transmit lane in both shared and slice mode.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ_10r (0x0001d12a | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ_10r_SIZE 4

/*
 * This structure should be used to declare and program PATGEN_PATGEN_SEQ_10.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ_10r_s {
	uint32_t v[1];
	uint32_t patgen_patgen_seq_10[1];
	uint32_t _patgen_patgen_seq_10;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ_10r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ_10r_CLR(r) (r).patgen_patgen_seq_10[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ_10r_SET(r,d) (r).patgen_patgen_seq_10[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ_10r_GET(r) (r).patgen_patgen_seq_10[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ_10r_PATT_GEN_SEQ_10f_GET(r) (((r).patgen_patgen_seq_10[0]) & 0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ_10r_PATT_GEN_SEQ_10f_SET(r,f) (r).patgen_patgen_seq_10[0]=(((r).patgen_patgen_seq_10[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access PATGEN_PATGEN_SEQ_10.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_PATGEN_PATGEN_SEQ_10r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ_10r,(_r._patgen_patgen_seq_10))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_PATGEN_PATGEN_SEQ_10r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ_10r,(_r._patgen_patgen_seq_10)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_PATGEN_PATGEN_SEQ_10r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ_10r,(_r._patgen_patgen_seq_10))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_PATGEN_PATGEN_SEQ_10r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ_10r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._patgen_patgen_seq_10))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_PATGEN_PATGEN_SEQ_10r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ_10r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._patgen_patgen_seq_10))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_PATGEN_PATGEN_SEQ_10r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ_10r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._patgen_patgen_seq_10))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define PATGEN_PATGEN_SEQ_10r BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ_10r
#define PATGEN_PATGEN_SEQ_10r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ_10r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ_10r_t PATGEN_PATGEN_SEQ_10r_t;
#define PATGEN_PATGEN_SEQ_10r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ_10r_CLR
#define PATGEN_PATGEN_SEQ_10r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ_10r_SET
#define PATGEN_PATGEN_SEQ_10r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ_10r_GET
#define PATGEN_PATGEN_SEQ_10r_PATT_GEN_SEQ_10f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ_10r_PATT_GEN_SEQ_10f_GET
#define PATGEN_PATGEN_SEQ_10r_PATT_GEN_SEQ_10f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ_10r_PATT_GEN_SEQ_10f_SET
#define READ_PATGEN_PATGEN_SEQ_10r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_PATGEN_PATGEN_SEQ_10r
#define WRITE_PATGEN_PATGEN_SEQ_10r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_PATGEN_PATGEN_SEQ_10r
#define MODIFY_PATGEN_PATGEN_SEQ_10r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_PATGEN_PATGEN_SEQ_10r
#define READLN_PATGEN_PATGEN_SEQ_10r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_PATGEN_PATGEN_SEQ_10r
#define WRITELN_PATGEN_PATGEN_SEQ_10r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_PATGEN_PATGEN_SEQ_10r
#define WRITEALL_PATGEN_PATGEN_SEQ_10r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_PATGEN_PATGEN_SEQ_10r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ_10r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  PATGEN_PATGEN_SEQ_11
 * BLOCKS:   PATT_GEN_COM
 * REGADDR:  0xd12b
 * DEVAD:    1
 * DESC:     Pattern Generator Sequence Word 11
 * RESETVAL: 0xff00 (65280)
 * ACCESS:   R/W
 * FIELDS:
 *     PATT_GEN_SEQ_11  Fixed Pattern Generator Sequence Word 11. MSB bits will be transmitted first on serial transmit lane in both shared and slice mode.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ_11r (0x0001d12b | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ_11r_SIZE 4

/*
 * This structure should be used to declare and program PATGEN_PATGEN_SEQ_11.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ_11r_s {
	uint32_t v[1];
	uint32_t patgen_patgen_seq_11[1];
	uint32_t _patgen_patgen_seq_11;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ_11r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ_11r_CLR(r) (r).patgen_patgen_seq_11[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ_11r_SET(r,d) (r).patgen_patgen_seq_11[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ_11r_GET(r) (r).patgen_patgen_seq_11[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ_11r_PATT_GEN_SEQ_11f_GET(r) (((r).patgen_patgen_seq_11[0]) & 0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ_11r_PATT_GEN_SEQ_11f_SET(r,f) (r).patgen_patgen_seq_11[0]=(((r).patgen_patgen_seq_11[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access PATGEN_PATGEN_SEQ_11.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_PATGEN_PATGEN_SEQ_11r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ_11r,(_r._patgen_patgen_seq_11))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_PATGEN_PATGEN_SEQ_11r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ_11r,(_r._patgen_patgen_seq_11)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_PATGEN_PATGEN_SEQ_11r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ_11r,(_r._patgen_patgen_seq_11))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_PATGEN_PATGEN_SEQ_11r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ_11r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._patgen_patgen_seq_11))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_PATGEN_PATGEN_SEQ_11r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ_11r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._patgen_patgen_seq_11))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_PATGEN_PATGEN_SEQ_11r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ_11r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._patgen_patgen_seq_11))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define PATGEN_PATGEN_SEQ_11r BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ_11r
#define PATGEN_PATGEN_SEQ_11r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ_11r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ_11r_t PATGEN_PATGEN_SEQ_11r_t;
#define PATGEN_PATGEN_SEQ_11r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ_11r_CLR
#define PATGEN_PATGEN_SEQ_11r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ_11r_SET
#define PATGEN_PATGEN_SEQ_11r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ_11r_GET
#define PATGEN_PATGEN_SEQ_11r_PATT_GEN_SEQ_11f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ_11r_PATT_GEN_SEQ_11f_GET
#define PATGEN_PATGEN_SEQ_11r_PATT_GEN_SEQ_11f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ_11r_PATT_GEN_SEQ_11f_SET
#define READ_PATGEN_PATGEN_SEQ_11r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_PATGEN_PATGEN_SEQ_11r
#define WRITE_PATGEN_PATGEN_SEQ_11r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_PATGEN_PATGEN_SEQ_11r
#define MODIFY_PATGEN_PATGEN_SEQ_11r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_PATGEN_PATGEN_SEQ_11r
#define READLN_PATGEN_PATGEN_SEQ_11r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_PATGEN_PATGEN_SEQ_11r
#define WRITELN_PATGEN_PATGEN_SEQ_11r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_PATGEN_PATGEN_SEQ_11r
#define WRITEALL_PATGEN_PATGEN_SEQ_11r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_PATGEN_PATGEN_SEQ_11r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ_11r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  PATGEN_PATGEN_SEQ_12
 * BLOCKS:   PATT_GEN_COM
 * REGADDR:  0xd12c
 * DEVAD:    1
 * DESC:     Pattern Generator Sequence Word 12
 * RESETVAL: 0xff00 (65280)
 * ACCESS:   R/W
 * FIELDS:
 *     PATT_GEN_SEQ_12  Fixed Pattern Generator Sequence Word 12. MSB bits will be transmitted first on serial transmit lane in both shared and slice mode.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ_12r (0x0001d12c | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ_12r_SIZE 4

/*
 * This structure should be used to declare and program PATGEN_PATGEN_SEQ_12.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ_12r_s {
	uint32_t v[1];
	uint32_t patgen_patgen_seq_12[1];
	uint32_t _patgen_patgen_seq_12;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ_12r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ_12r_CLR(r) (r).patgen_patgen_seq_12[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ_12r_SET(r,d) (r).patgen_patgen_seq_12[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ_12r_GET(r) (r).patgen_patgen_seq_12[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ_12r_PATT_GEN_SEQ_12f_GET(r) (((r).patgen_patgen_seq_12[0]) & 0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ_12r_PATT_GEN_SEQ_12f_SET(r,f) (r).patgen_patgen_seq_12[0]=(((r).patgen_patgen_seq_12[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access PATGEN_PATGEN_SEQ_12.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_PATGEN_PATGEN_SEQ_12r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ_12r,(_r._patgen_patgen_seq_12))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_PATGEN_PATGEN_SEQ_12r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ_12r,(_r._patgen_patgen_seq_12)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_PATGEN_PATGEN_SEQ_12r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ_12r,(_r._patgen_patgen_seq_12))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_PATGEN_PATGEN_SEQ_12r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ_12r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._patgen_patgen_seq_12))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_PATGEN_PATGEN_SEQ_12r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ_12r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._patgen_patgen_seq_12))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_PATGEN_PATGEN_SEQ_12r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ_12r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._patgen_patgen_seq_12))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define PATGEN_PATGEN_SEQ_12r BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ_12r
#define PATGEN_PATGEN_SEQ_12r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ_12r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ_12r_t PATGEN_PATGEN_SEQ_12r_t;
#define PATGEN_PATGEN_SEQ_12r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ_12r_CLR
#define PATGEN_PATGEN_SEQ_12r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ_12r_SET
#define PATGEN_PATGEN_SEQ_12r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ_12r_GET
#define PATGEN_PATGEN_SEQ_12r_PATT_GEN_SEQ_12f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ_12r_PATT_GEN_SEQ_12f_GET
#define PATGEN_PATGEN_SEQ_12r_PATT_GEN_SEQ_12f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ_12r_PATT_GEN_SEQ_12f_SET
#define READ_PATGEN_PATGEN_SEQ_12r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_PATGEN_PATGEN_SEQ_12r
#define WRITE_PATGEN_PATGEN_SEQ_12r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_PATGEN_PATGEN_SEQ_12r
#define MODIFY_PATGEN_PATGEN_SEQ_12r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_PATGEN_PATGEN_SEQ_12r
#define READLN_PATGEN_PATGEN_SEQ_12r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_PATGEN_PATGEN_SEQ_12r
#define WRITELN_PATGEN_PATGEN_SEQ_12r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_PATGEN_PATGEN_SEQ_12r
#define WRITEALL_PATGEN_PATGEN_SEQ_12r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_PATGEN_PATGEN_SEQ_12r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ_12r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  PATGEN_PATGEN_SEQ_13
 * BLOCKS:   PATT_GEN_COM
 * REGADDR:  0xd12d
 * DEVAD:    1
 * DESC:     Pattern Generator Sequence Word 13
 * RESETVAL: 0xff00 (65280)
 * ACCESS:   R/W
 * FIELDS:
 *     PATT_GEN_SEQ_13  Fixed Pattern Generator Sequence Word 13. MSB bits will be transmitted first on serial transmit lane in both shared and slice mode.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ_13r (0x0001d12d | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ_13r_SIZE 4

/*
 * This structure should be used to declare and program PATGEN_PATGEN_SEQ_13.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ_13r_s {
	uint32_t v[1];
	uint32_t patgen_patgen_seq_13[1];
	uint32_t _patgen_patgen_seq_13;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ_13r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ_13r_CLR(r) (r).patgen_patgen_seq_13[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ_13r_SET(r,d) (r).patgen_patgen_seq_13[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ_13r_GET(r) (r).patgen_patgen_seq_13[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ_13r_PATT_GEN_SEQ_13f_GET(r) (((r).patgen_patgen_seq_13[0]) & 0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ_13r_PATT_GEN_SEQ_13f_SET(r,f) (r).patgen_patgen_seq_13[0]=(((r).patgen_patgen_seq_13[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access PATGEN_PATGEN_SEQ_13.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_PATGEN_PATGEN_SEQ_13r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ_13r,(_r._patgen_patgen_seq_13))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_PATGEN_PATGEN_SEQ_13r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ_13r,(_r._patgen_patgen_seq_13)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_PATGEN_PATGEN_SEQ_13r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ_13r,(_r._patgen_patgen_seq_13))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_PATGEN_PATGEN_SEQ_13r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ_13r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._patgen_patgen_seq_13))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_PATGEN_PATGEN_SEQ_13r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ_13r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._patgen_patgen_seq_13))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_PATGEN_PATGEN_SEQ_13r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ_13r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._patgen_patgen_seq_13))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define PATGEN_PATGEN_SEQ_13r BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ_13r
#define PATGEN_PATGEN_SEQ_13r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ_13r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ_13r_t PATGEN_PATGEN_SEQ_13r_t;
#define PATGEN_PATGEN_SEQ_13r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ_13r_CLR
#define PATGEN_PATGEN_SEQ_13r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ_13r_SET
#define PATGEN_PATGEN_SEQ_13r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ_13r_GET
#define PATGEN_PATGEN_SEQ_13r_PATT_GEN_SEQ_13f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ_13r_PATT_GEN_SEQ_13f_GET
#define PATGEN_PATGEN_SEQ_13r_PATT_GEN_SEQ_13f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ_13r_PATT_GEN_SEQ_13f_SET
#define READ_PATGEN_PATGEN_SEQ_13r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_PATGEN_PATGEN_SEQ_13r
#define WRITE_PATGEN_PATGEN_SEQ_13r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_PATGEN_PATGEN_SEQ_13r
#define MODIFY_PATGEN_PATGEN_SEQ_13r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_PATGEN_PATGEN_SEQ_13r
#define READLN_PATGEN_PATGEN_SEQ_13r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_PATGEN_PATGEN_SEQ_13r
#define WRITELN_PATGEN_PATGEN_SEQ_13r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_PATGEN_PATGEN_SEQ_13r
#define WRITEALL_PATGEN_PATGEN_SEQ_13r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_PATGEN_PATGEN_SEQ_13r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ_13r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  PATGEN_PATGEN_SEQ_14
 * BLOCKS:   PATT_GEN_COM
 * REGADDR:  0xd12e
 * DEVAD:    1
 * DESC:     Pattern Generator Sequence Word 14
 * RESETVAL: 0xff00 (65280)
 * ACCESS:   R/W
 * FIELDS:
 *     PATT_GEN_SEQ_14  Fixed Pattern Generator Sequence Word 14. MSB bits will be transmitted first on serial transmit lane in both shared and slice mode. This word will be transmitted first.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ_14r (0x0001d12e | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ_14r_SIZE 4

/*
 * This structure should be used to declare and program PATGEN_PATGEN_SEQ_14.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ_14r_s {
	uint32_t v[1];
	uint32_t patgen_patgen_seq_14[1];
	uint32_t _patgen_patgen_seq_14;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ_14r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ_14r_CLR(r) (r).patgen_patgen_seq_14[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ_14r_SET(r,d) (r).patgen_patgen_seq_14[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ_14r_GET(r) (r).patgen_patgen_seq_14[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ_14r_PATT_GEN_SEQ_14f_GET(r) (((r).patgen_patgen_seq_14[0]) & 0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ_14r_PATT_GEN_SEQ_14f_SET(r,f) (r).patgen_patgen_seq_14[0]=(((r).patgen_patgen_seq_14[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access PATGEN_PATGEN_SEQ_14.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_PATGEN_PATGEN_SEQ_14r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ_14r,(_r._patgen_patgen_seq_14))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_PATGEN_PATGEN_SEQ_14r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ_14r,(_r._patgen_patgen_seq_14)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_PATGEN_PATGEN_SEQ_14r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ_14r,(_r._patgen_patgen_seq_14))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_PATGEN_PATGEN_SEQ_14r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ_14r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._patgen_patgen_seq_14))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_PATGEN_PATGEN_SEQ_14r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ_14r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._patgen_patgen_seq_14))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_PATGEN_PATGEN_SEQ_14r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ_14r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._patgen_patgen_seq_14))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define PATGEN_PATGEN_SEQ_14r BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ_14r
#define PATGEN_PATGEN_SEQ_14r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ_14r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ_14r_t PATGEN_PATGEN_SEQ_14r_t;
#define PATGEN_PATGEN_SEQ_14r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ_14r_CLR
#define PATGEN_PATGEN_SEQ_14r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ_14r_SET
#define PATGEN_PATGEN_SEQ_14r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ_14r_GET
#define PATGEN_PATGEN_SEQ_14r_PATT_GEN_SEQ_14f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ_14r_PATT_GEN_SEQ_14f_GET
#define PATGEN_PATGEN_SEQ_14r_PATT_GEN_SEQ_14f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ_14r_PATT_GEN_SEQ_14f_SET
#define READ_PATGEN_PATGEN_SEQ_14r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_PATGEN_PATGEN_SEQ_14r
#define WRITE_PATGEN_PATGEN_SEQ_14r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_PATGEN_PATGEN_SEQ_14r
#define MODIFY_PATGEN_PATGEN_SEQ_14r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_PATGEN_PATGEN_SEQ_14r
#define READLN_PATGEN_PATGEN_SEQ_14r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_PATGEN_PATGEN_SEQ_14r
#define WRITELN_PATGEN_PATGEN_SEQ_14r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_PATGEN_PATGEN_SEQ_14r
#define WRITEALL_PATGEN_PATGEN_SEQ_14r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_PATGEN_PATGEN_SEQ_14r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_PATGEN_PATGEN_SEQ_14r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  TXFIR_UC_CTL0
 * BLOCKS:   TX_FED
 * REGADDR:  0xd130
 * DEVAD:    1
 * DESC:     Micro Control 0 Register
 * RESETVAL: 0xc160 (49504)
 * ACCESS:   R/W
 * FIELDS:
 *     MICRO_TX_DISABLE micro tx disableThis field is used by the Microcontroller for tx disable control during CL93N72 forced modePlease see Falcon PMD Internal Functional Specification for details
 *     TX_DISABLE_TRIGGER Tx disable triggerWhen this bit is set to 1, it triggers a TX disable with timer starting at 0.No matter where the TX disable state is, it start a new timer and apply TX disable.This bit is self clearing
 *     DP_RESET_TX_DISABLE_DIS Tx disable based on data path reset0 - Enable tx disable based on data path reset1 - Disable tx disable based on data path resetNeed to set this bit to 1 if tx_disable_output_sel = 2'b01 (send TX power down).
 *     PMD_TX_DISABLE_PKILL Tx disable using the pmd_tx_disable pin disable control0 - enable tx disable from pmd_tx_disable pin1 - disable tx disable from pmd_tx_disable pin
 *     TX_DISABLE_TIMER_CTRL tx_disable timer value controlstx_disable_timer_ctrl[5] (MSB) selects the timer units0 - 2us units1 - 1ms unitstx_disable_timer_ctrl[4:0] (LSB[4:0]) = controls the number of units perthe list below0                 0 units1                 1 units2                 2 units3                 3 units4                 4 units5                 5 units6                 6 units7                 7 units8                 8 units9                10 units10               12 units11               14 units12               16 units13               20 units14               24 units15               28 units16               32 units17               40 units18               48 units19               56 units20               64 units21               80 units22               96 units23              112 units24              128 units25              160 units26              192 units27              224 units28              256 units29              320 units30              384 units31              448 units
 *     TX_EEE_QUIET_EN  Tx eee quiet mode control1 - Enable eee quiet mode when pmd_tx_mode (input pins) == 2'b010 - Disable eee quiet mode
 *     TX_EEE_ALERT_EN  Tx eee alert mode control1 - Enable eee alert mode when pmd_tx_mode (input pins) == 2'b100 - Disable eee alert mode
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_UC_CTL0r (0x0001d130 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_UC_CTL0r_SIZE 4

/*
 * This structure should be used to declare and program TXFIR_UC_CTL0.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_UC_CTL0r_s {
	uint32_t v[1];
	uint32_t txfir_uc_ctl0[1];
	uint32_t _txfir_uc_ctl0;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_UC_CTL0r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_UC_CTL0r_CLR(r) (r).txfir_uc_ctl0[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_UC_CTL0r_SET(r,d) (r).txfir_uc_ctl0[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_UC_CTL0r_GET(r) (r).txfir_uc_ctl0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_UC_CTL0r_TX_EEE_ALERT_ENf_GET(r) ((((r).txfir_uc_ctl0[0]) >> 15) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_UC_CTL0r_TX_EEE_ALERT_ENf_SET(r,f) (r).txfir_uc_ctl0[0]=(((r).txfir_uc_ctl0[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_UC_CTL0r_TX_EEE_QUIET_ENf_GET(r) ((((r).txfir_uc_ctl0[0]) >> 14) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_UC_CTL0r_TX_EEE_QUIET_ENf_SET(r,f) (r).txfir_uc_ctl0[0]=(((r).txfir_uc_ctl0[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14)) | (1 << (16 + 14))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_UC_CTL0r_TX_DISABLE_TIMER_CTRLf_GET(r) ((((r).txfir_uc_ctl0[0]) >> 4) & 0x3f)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_UC_CTL0r_TX_DISABLE_TIMER_CTRLf_SET(r,f) (r).txfir_uc_ctl0[0]=(((r).txfir_uc_ctl0[0] & ~((uint32_t)0x3f << 4)) | ((((uint32_t)f) & 0x3f) << 4)) | (63 << (16 + 4))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_UC_CTL0r_PMD_TX_DISABLE_PKILLf_GET(r) ((((r).txfir_uc_ctl0[0]) >> 3) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_UC_CTL0r_PMD_TX_DISABLE_PKILLf_SET(r,f) (r).txfir_uc_ctl0[0]=(((r).txfir_uc_ctl0[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_UC_CTL0r_DP_RESET_TX_DISABLE_DISf_GET(r) ((((r).txfir_uc_ctl0[0]) >> 2) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_UC_CTL0r_DP_RESET_TX_DISABLE_DISf_SET(r,f) (r).txfir_uc_ctl0[0]=(((r).txfir_uc_ctl0[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_UC_CTL0r_TX_DISABLE_TRIGGERf_GET(r) ((((r).txfir_uc_ctl0[0]) >> 1) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_UC_CTL0r_TX_DISABLE_TRIGGERf_SET(r,f) (r).txfir_uc_ctl0[0]=(((r).txfir_uc_ctl0[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_UC_CTL0r_MICRO_TX_DISABLEf_GET(r) (((r).txfir_uc_ctl0[0]) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_UC_CTL0r_MICRO_TX_DISABLEf_SET(r,f) (r).txfir_uc_ctl0[0]=(((r).txfir_uc_ctl0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access TXFIR_UC_CTL0.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TXFIR_UC_CTL0r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_UC_CTL0r,(_r._txfir_uc_ctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TXFIR_UC_CTL0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_UC_CTL0r,(_r._txfir_uc_ctl0)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TXFIR_UC_CTL0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_UC_CTL0r,(_r._txfir_uc_ctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TXFIR_UC_CTL0r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_UC_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._txfir_uc_ctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TXFIR_UC_CTL0r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_UC_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._txfir_uc_ctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TXFIR_UC_CTL0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_UC_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._txfir_uc_ctl0))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TXFIR_UC_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_UC_CTL0r
#define TXFIR_UC_CTL0r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_UC_CTL0r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_UC_CTL0r_t TXFIR_UC_CTL0r_t;
#define TXFIR_UC_CTL0r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_UC_CTL0r_CLR
#define TXFIR_UC_CTL0r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_UC_CTL0r_SET
#define TXFIR_UC_CTL0r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_UC_CTL0r_GET
#define TXFIR_UC_CTL0r_TX_EEE_ALERT_ENf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_UC_CTL0r_TX_EEE_ALERT_ENf_GET
#define TXFIR_UC_CTL0r_TX_EEE_ALERT_ENf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_UC_CTL0r_TX_EEE_ALERT_ENf_SET
#define TXFIR_UC_CTL0r_TX_EEE_QUIET_ENf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_UC_CTL0r_TX_EEE_QUIET_ENf_GET
#define TXFIR_UC_CTL0r_TX_EEE_QUIET_ENf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_UC_CTL0r_TX_EEE_QUIET_ENf_SET
#define TXFIR_UC_CTL0r_TX_DISABLE_TIMER_CTRLf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_UC_CTL0r_TX_DISABLE_TIMER_CTRLf_GET
#define TXFIR_UC_CTL0r_TX_DISABLE_TIMER_CTRLf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_UC_CTL0r_TX_DISABLE_TIMER_CTRLf_SET
#define TXFIR_UC_CTL0r_PMD_TX_DISABLE_PKILLf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_UC_CTL0r_PMD_TX_DISABLE_PKILLf_GET
#define TXFIR_UC_CTL0r_PMD_TX_DISABLE_PKILLf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_UC_CTL0r_PMD_TX_DISABLE_PKILLf_SET
#define TXFIR_UC_CTL0r_DP_RESET_TX_DISABLE_DISf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_UC_CTL0r_DP_RESET_TX_DISABLE_DISf_GET
#define TXFIR_UC_CTL0r_DP_RESET_TX_DISABLE_DISf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_UC_CTL0r_DP_RESET_TX_DISABLE_DISf_SET
#define TXFIR_UC_CTL0r_TX_DISABLE_TRIGGERf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_UC_CTL0r_TX_DISABLE_TRIGGERf_GET
#define TXFIR_UC_CTL0r_TX_DISABLE_TRIGGERf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_UC_CTL0r_TX_DISABLE_TRIGGERf_SET
#define TXFIR_UC_CTL0r_MICRO_TX_DISABLEf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_UC_CTL0r_MICRO_TX_DISABLEf_GET
#define TXFIR_UC_CTL0r_MICRO_TX_DISABLEf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_UC_CTL0r_MICRO_TX_DISABLEf_SET
#define READ_TXFIR_UC_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TXFIR_UC_CTL0r
#define WRITE_TXFIR_UC_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TXFIR_UC_CTL0r
#define MODIFY_TXFIR_UC_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TXFIR_UC_CTL0r
#define READLN_TXFIR_UC_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TXFIR_UC_CTL0r
#define WRITELN_TXFIR_UC_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TXFIR_UC_CTL0r
#define WRITEALL_TXFIR_UC_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TXFIR_UC_CTL0r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_UC_CTL0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  TXFIR_MISC_CTL0
 * BLOCKS:   TX_FED
 * REGADDR:  0xd131
 * DEVAD:    1
 * DESC:     Misc Control 0 Register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     SDK_TX_DISABLE   sdk tx disableThis tx disable control field is for SDK use during TX programmingPlease see Eagle & Merlin PMD Internal Functional Specification for details
 *     TX_DISABLE_OUTPUT_SEL These bits select tx disable output function2'b00 - send electrical idles2'b01 - send power down2'b10 - send ones2'b11 - send zeroes
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_MISC_CTL0r (0x0001d131 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_MISC_CTL0r_SIZE 4

/*
 * This structure should be used to declare and program TXFIR_MISC_CTL0.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_MISC_CTL0r_s {
	uint32_t v[1];
	uint32_t txfir_misc_ctl0[1];
	uint32_t _txfir_misc_ctl0;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_MISC_CTL0r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_MISC_CTL0r_CLR(r) (r).txfir_misc_ctl0[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_MISC_CTL0r_SET(r,d) (r).txfir_misc_ctl0[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_MISC_CTL0r_GET(r) (r).txfir_misc_ctl0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_MISC_CTL0r_TX_DISABLE_OUTPUT_SELf_GET(r) ((((r).txfir_misc_ctl0[0]) >> 2) & 0x3)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_MISC_CTL0r_TX_DISABLE_OUTPUT_SELf_SET(r,f) (r).txfir_misc_ctl0[0]=(((r).txfir_misc_ctl0[0] & ~((uint32_t)0x3 << 2)) | ((((uint32_t)f) & 0x3) << 2)) | (3 << (16 + 2))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_MISC_CTL0r_SDK_TX_DISABLEf_GET(r) (((r).txfir_misc_ctl0[0]) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_MISC_CTL0r_SDK_TX_DISABLEf_SET(r,f) (r).txfir_misc_ctl0[0]=(((r).txfir_misc_ctl0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access TXFIR_MISC_CTL0.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TXFIR_MISC_CTL0r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_MISC_CTL0r,(_r._txfir_misc_ctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TXFIR_MISC_CTL0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_MISC_CTL0r,(_r._txfir_misc_ctl0)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TXFIR_MISC_CTL0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_MISC_CTL0r,(_r._txfir_misc_ctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TXFIR_MISC_CTL0r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_MISC_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._txfir_misc_ctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TXFIR_MISC_CTL0r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_MISC_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._txfir_misc_ctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TXFIR_MISC_CTL0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_MISC_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._txfir_misc_ctl0))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TXFIR_MISC_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_MISC_CTL0r
#define TXFIR_MISC_CTL0r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_MISC_CTL0r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_MISC_CTL0r_t TXFIR_MISC_CTL0r_t;
#define TXFIR_MISC_CTL0r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_MISC_CTL0r_CLR
#define TXFIR_MISC_CTL0r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_MISC_CTL0r_SET
#define TXFIR_MISC_CTL0r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_MISC_CTL0r_GET
#define TXFIR_MISC_CTL0r_TX_DISABLE_OUTPUT_SELf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_MISC_CTL0r_TX_DISABLE_OUTPUT_SELf_GET
#define TXFIR_MISC_CTL0r_TX_DISABLE_OUTPUT_SELf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_MISC_CTL0r_TX_DISABLE_OUTPUT_SELf_SET
#define TXFIR_MISC_CTL0r_SDK_TX_DISABLEf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_MISC_CTL0r_SDK_TX_DISABLEf_GET
#define TXFIR_MISC_CTL0r_SDK_TX_DISABLEf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_MISC_CTL0r_SDK_TX_DISABLEf_SET
#define READ_TXFIR_MISC_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TXFIR_MISC_CTL0r
#define WRITE_TXFIR_MISC_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TXFIR_MISC_CTL0r
#define MODIFY_TXFIR_MISC_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TXFIR_MISC_CTL0r
#define READLN_TXFIR_MISC_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TXFIR_MISC_CTL0r
#define WRITELN_TXFIR_MISC_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TXFIR_MISC_CTL0r
#define WRITEALL_TXFIR_MISC_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TXFIR_MISC_CTL0r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_MISC_CTL0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  TXFIR_MISC_STS0
 * BLOCKS:   TX_FED
 * REGADDR:  0xd132
 * DEVAD:    1
 * DESC:     Misc Status 0 Register
 * RESETVAL: 0x3 (3)
 * ACCESS:   R/O
 * FIELDS:
 *     TX_DISABLE_STATUS tx disable statusWhen this bit is set it indicates the tx_disable is active due to:1) pin at AN/PCS to PMD Interface OR2) dp_reset being asserted3) register bit dedicated to micro use4) register bit dedicated to SDK use5) tx disable timer that guarntees minimum assertion time has not expired
 *     TX_ELEC_IDLE_STATUS tx electrical idle statusWhen this bit is set it indicates the tx elecrticl idle active due to:1) tx disable being programmed to send electrical idles or2) An internal logic signal derived from PMD interface pins for EEE TX MODE
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_MISC_STS0r (0x0001d132 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_MISC_STS0r_SIZE 4

/*
 * This structure should be used to declare and program TXFIR_MISC_STS0.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_MISC_STS0r_s {
	uint32_t v[1];
	uint32_t txfir_misc_sts0[1];
	uint32_t _txfir_misc_sts0;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_MISC_STS0r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_MISC_STS0r_CLR(r) (r).txfir_misc_sts0[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_MISC_STS0r_SET(r,d) (r).txfir_misc_sts0[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_MISC_STS0r_GET(r) (r).txfir_misc_sts0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_MISC_STS0r_TX_ELEC_IDLE_STATUSf_GET(r) ((((r).txfir_misc_sts0[0]) >> 1) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_MISC_STS0r_TX_ELEC_IDLE_STATUSf_SET(r,f) (r).txfir_misc_sts0[0]=(((r).txfir_misc_sts0[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_MISC_STS0r_TX_DISABLE_STATUSf_GET(r) (((r).txfir_misc_sts0[0]) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_MISC_STS0r_TX_DISABLE_STATUSf_SET(r,f) (r).txfir_misc_sts0[0]=(((r).txfir_misc_sts0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access TXFIR_MISC_STS0.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TXFIR_MISC_STS0r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_MISC_STS0r,(_r._txfir_misc_sts0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TXFIR_MISC_STS0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_MISC_STS0r,(_r._txfir_misc_sts0)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TXFIR_MISC_STS0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_MISC_STS0r,(_r._txfir_misc_sts0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TXFIR_MISC_STS0r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_MISC_STS0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._txfir_misc_sts0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TXFIR_MISC_STS0r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_MISC_STS0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._txfir_misc_sts0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TXFIR_MISC_STS0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_MISC_STS0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._txfir_misc_sts0))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TXFIR_MISC_STS0r BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_MISC_STS0r
#define TXFIR_MISC_STS0r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_MISC_STS0r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_MISC_STS0r_t TXFIR_MISC_STS0r_t;
#define TXFIR_MISC_STS0r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_MISC_STS0r_CLR
#define TXFIR_MISC_STS0r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_MISC_STS0r_SET
#define TXFIR_MISC_STS0r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_MISC_STS0r_GET
#define TXFIR_MISC_STS0r_TX_ELEC_IDLE_STATUSf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_MISC_STS0r_TX_ELEC_IDLE_STATUSf_GET
#define TXFIR_MISC_STS0r_TX_ELEC_IDLE_STATUSf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_MISC_STS0r_TX_ELEC_IDLE_STATUSf_SET
#define TXFIR_MISC_STS0r_TX_DISABLE_STATUSf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_MISC_STS0r_TX_DISABLE_STATUSf_GET
#define TXFIR_MISC_STS0r_TX_DISABLE_STATUSf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_MISC_STS0r_TX_DISABLE_STATUSf_SET
#define READ_TXFIR_MISC_STS0r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TXFIR_MISC_STS0r
#define WRITE_TXFIR_MISC_STS0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TXFIR_MISC_STS0r
#define MODIFY_TXFIR_MISC_STS0r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TXFIR_MISC_STS0r
#define READLN_TXFIR_MISC_STS0r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TXFIR_MISC_STS0r
#define WRITELN_TXFIR_MISC_STS0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TXFIR_MISC_STS0r
#define WRITEALL_TXFIR_MISC_STS0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TXFIR_MISC_STS0r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_MISC_STS0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  TXFIR_TAP_CTL0
 * BLOCKS:   TX_FED
 * REGADDR:  0xd133
 * DEVAD:    1
 * DESC:     txfir tap control 0 register
 * RESETVAL: 0x1000 (4096)
 * ACCESS:   R/W
 * FIELDS:
 *     TXFIR_TAP0_COEFF TXFIR tap 0 coeffient values in signed 2's complement formattap range: -170 to +170 in PAM4 mode-127 to +127 in NRZ mode
 *     TXFIR_NRZ_TAP_RANGE_SEL TXFIR NRZ tap range select0 - PAM4 tap range -170..+1701 - NRZ tap range -127..+127
 *     TXFIR_TAP_LOAD   Load txfir tap valuesThe sequence to load the taps is:1) set taps values in the txfir_tap*_coeff fields as needed2) set txfir_tap_load field to 1'b1.This field is self-clearing, always read-back 0
 *     TXFIR_TAP_EN     txfir taps enable2'd0 - tap2:tap02'd1 - tap5:tap02'd2, 3'd3 - reserved for future use
 *     TXFIR_TEST_DATA_EN txfir DAC test data enable1 - Test mode. Enables test data path from the DAC memory to the DAC for characterization0 - Normal modes. TXFIR DAC driver is used to drive the DAC.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL0r (0x0001d133 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL0r_SIZE 4

/*
 * This structure should be used to declare and program TXFIR_TAP_CTL0.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL0r_s {
	uint32_t v[1];
	uint32_t txfir_tap_ctl0[1];
	uint32_t _txfir_tap_ctl0;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL0r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL0r_CLR(r) (r).txfir_tap_ctl0[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL0r_SET(r,d) (r).txfir_tap_ctl0[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL0r_GET(r) (r).txfir_tap_ctl0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL0r_TXFIR_TEST_DATA_ENf_GET(r) ((((r).txfir_tap_ctl0[0]) >> 15) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL0r_TXFIR_TEST_DATA_ENf_SET(r,f) (r).txfir_tap_ctl0[0]=(((r).txfir_tap_ctl0[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL0r_TXFIR_TAP_ENf_GET(r) ((((r).txfir_tap_ctl0[0]) >> 12) & 0x3)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL0r_TXFIR_TAP_ENf_SET(r,f) (r).txfir_tap_ctl0[0]=(((r).txfir_tap_ctl0[0] & ~((uint32_t)0x3 << 12)) | ((((uint32_t)f) & 0x3) << 12)) | (3 << (16 + 12))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL0r_TXFIR_TAP_LOADf_GET(r) ((((r).txfir_tap_ctl0[0]) >> 11) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL0r_TXFIR_TAP_LOADf_SET(r,f) (r).txfir_tap_ctl0[0]=(((r).txfir_tap_ctl0[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11)) | (1 << (16 + 11))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL0r_TXFIR_NRZ_TAP_RANGE_SELf_GET(r) ((((r).txfir_tap_ctl0[0]) >> 10) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL0r_TXFIR_NRZ_TAP_RANGE_SELf_SET(r,f) (r).txfir_tap_ctl0[0]=(((r).txfir_tap_ctl0[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10)) | (1 << (16 + 10))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL0r_TXFIR_TAP0_COEFFf_GET(r) (((r).txfir_tap_ctl0[0]) & 0x1ff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL0r_TXFIR_TAP0_COEFFf_SET(r,f) (r).txfir_tap_ctl0[0]=(((r).txfir_tap_ctl0[0] & ~((uint32_t)0x1ff)) | (((uint32_t)f) & 0x1ff)) | (0x1ff << 16)

/*
 * These macros can be used to access TXFIR_TAP_CTL0.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TXFIR_TAP_CTL0r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL0r,(_r._txfir_tap_ctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TXFIR_TAP_CTL0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL0r,(_r._txfir_tap_ctl0)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TXFIR_TAP_CTL0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL0r,(_r._txfir_tap_ctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TXFIR_TAP_CTL0r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._txfir_tap_ctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TXFIR_TAP_CTL0r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._txfir_tap_ctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TXFIR_TAP_CTL0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._txfir_tap_ctl0))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TXFIR_TAP_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL0r
#define TXFIR_TAP_CTL0r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL0r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL0r_t TXFIR_TAP_CTL0r_t;
#define TXFIR_TAP_CTL0r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL0r_CLR
#define TXFIR_TAP_CTL0r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL0r_SET
#define TXFIR_TAP_CTL0r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL0r_GET
#define TXFIR_TAP_CTL0r_TXFIR_TEST_DATA_ENf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL0r_TXFIR_TEST_DATA_ENf_GET
#define TXFIR_TAP_CTL0r_TXFIR_TEST_DATA_ENf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL0r_TXFIR_TEST_DATA_ENf_SET
#define TXFIR_TAP_CTL0r_TXFIR_TAP_ENf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL0r_TXFIR_TAP_ENf_GET
#define TXFIR_TAP_CTL0r_TXFIR_TAP_ENf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL0r_TXFIR_TAP_ENf_SET
#define TXFIR_TAP_CTL0r_TXFIR_TAP_LOADf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL0r_TXFIR_TAP_LOADf_GET
#define TXFIR_TAP_CTL0r_TXFIR_TAP_LOADf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL0r_TXFIR_TAP_LOADf_SET
#define TXFIR_TAP_CTL0r_TXFIR_NRZ_TAP_RANGE_SELf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL0r_TXFIR_NRZ_TAP_RANGE_SELf_GET
#define TXFIR_TAP_CTL0r_TXFIR_NRZ_TAP_RANGE_SELf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL0r_TXFIR_NRZ_TAP_RANGE_SELf_SET
#define TXFIR_TAP_CTL0r_TXFIR_TAP0_COEFFf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL0r_TXFIR_TAP0_COEFFf_GET
#define TXFIR_TAP_CTL0r_TXFIR_TAP0_COEFFf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL0r_TXFIR_TAP0_COEFFf_SET
#define READ_TXFIR_TAP_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TXFIR_TAP_CTL0r
#define WRITE_TXFIR_TAP_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TXFIR_TAP_CTL0r
#define MODIFY_TXFIR_TAP_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TXFIR_TAP_CTL0r
#define READLN_TXFIR_TAP_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TXFIR_TAP_CTL0r
#define WRITELN_TXFIR_TAP_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TXFIR_TAP_CTL0r
#define WRITEALL_TXFIR_TAP_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TXFIR_TAP_CTL0r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  TXFIR_TAP_CTL1
 * BLOCKS:   TX_FED
 * REGADDR:  0xd134
 * DEVAD:    1
 * DESC:     txfir tap control 1 register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     TXFIR_TAP1_COEFF TXFIR tap 1 coeffient values in signed 2's complement formattap range: -170 to +170 in PAM4 mode-127 to +127 in NRZ mode
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL1r (0x0001d134 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL1r_SIZE 4

/*
 * This structure should be used to declare and program TXFIR_TAP_CTL1.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL1r_s {
	uint32_t v[1];
	uint32_t txfir_tap_ctl1[1];
	uint32_t _txfir_tap_ctl1;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL1r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL1r_CLR(r) (r).txfir_tap_ctl1[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL1r_SET(r,d) (r).txfir_tap_ctl1[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL1r_GET(r) (r).txfir_tap_ctl1[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL1r_TXFIR_TAP1_COEFFf_GET(r) (((r).txfir_tap_ctl1[0]) & 0x1ff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL1r_TXFIR_TAP1_COEFFf_SET(r,f) (r).txfir_tap_ctl1[0]=(((r).txfir_tap_ctl1[0] & ~((uint32_t)0x1ff)) | (((uint32_t)f) & 0x1ff)) | (0x1ff << 16)

/*
 * These macros can be used to access TXFIR_TAP_CTL1.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TXFIR_TAP_CTL1r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL1r,(_r._txfir_tap_ctl1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TXFIR_TAP_CTL1r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL1r,(_r._txfir_tap_ctl1)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TXFIR_TAP_CTL1r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL1r,(_r._txfir_tap_ctl1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TXFIR_TAP_CTL1r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._txfir_tap_ctl1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TXFIR_TAP_CTL1r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._txfir_tap_ctl1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TXFIR_TAP_CTL1r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL1r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._txfir_tap_ctl1))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TXFIR_TAP_CTL1r BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL1r
#define TXFIR_TAP_CTL1r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL1r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL1r_t TXFIR_TAP_CTL1r_t;
#define TXFIR_TAP_CTL1r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL1r_CLR
#define TXFIR_TAP_CTL1r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL1r_SET
#define TXFIR_TAP_CTL1r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL1r_GET
#define TXFIR_TAP_CTL1r_TXFIR_TAP1_COEFFf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL1r_TXFIR_TAP1_COEFFf_GET
#define TXFIR_TAP_CTL1r_TXFIR_TAP1_COEFFf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL1r_TXFIR_TAP1_COEFFf_SET
#define READ_TXFIR_TAP_CTL1r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TXFIR_TAP_CTL1r
#define WRITE_TXFIR_TAP_CTL1r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TXFIR_TAP_CTL1r
#define MODIFY_TXFIR_TAP_CTL1r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TXFIR_TAP_CTL1r
#define READLN_TXFIR_TAP_CTL1r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TXFIR_TAP_CTL1r
#define WRITELN_TXFIR_TAP_CTL1r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TXFIR_TAP_CTL1r
#define WRITEALL_TXFIR_TAP_CTL1r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TXFIR_TAP_CTL1r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL1r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  TXFIR_TAP_CTL2
 * BLOCKS:   TX_FED
 * REGADDR:  0xd135
 * DEVAD:    1
 * DESC:     txfir tap control 2 register
 * RESETVAL: 0xa8 (168)
 * ACCESS:   R/W
 * FIELDS:
 *     TXFIR_TAP2_COEFF TXFIR tap 2 coeffient values in signed 2's complement formattap range: -170 to +170 in PAM4 mode-127 to +127 in NRZ mode
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL2r (0x0001d135 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL2r_SIZE 4

/*
 * This structure should be used to declare and program TXFIR_TAP_CTL2.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL2r_s {
	uint32_t v[1];
	uint32_t txfir_tap_ctl2[1];
	uint32_t _txfir_tap_ctl2;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL2r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL2r_CLR(r) (r).txfir_tap_ctl2[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL2r_SET(r,d) (r).txfir_tap_ctl2[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL2r_GET(r) (r).txfir_tap_ctl2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL2r_TXFIR_TAP2_COEFFf_GET(r) (((r).txfir_tap_ctl2[0]) & 0x1ff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL2r_TXFIR_TAP2_COEFFf_SET(r,f) (r).txfir_tap_ctl2[0]=(((r).txfir_tap_ctl2[0] & ~((uint32_t)0x1ff)) | (((uint32_t)f) & 0x1ff)) | (0x1ff << 16)

/*
 * These macros can be used to access TXFIR_TAP_CTL2.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TXFIR_TAP_CTL2r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL2r,(_r._txfir_tap_ctl2))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TXFIR_TAP_CTL2r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL2r,(_r._txfir_tap_ctl2)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TXFIR_TAP_CTL2r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL2r,(_r._txfir_tap_ctl2))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TXFIR_TAP_CTL2r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._txfir_tap_ctl2))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TXFIR_TAP_CTL2r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._txfir_tap_ctl2))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TXFIR_TAP_CTL2r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._txfir_tap_ctl2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TXFIR_TAP_CTL2r BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL2r
#define TXFIR_TAP_CTL2r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL2r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL2r_t TXFIR_TAP_CTL2r_t;
#define TXFIR_TAP_CTL2r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL2r_CLR
#define TXFIR_TAP_CTL2r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL2r_SET
#define TXFIR_TAP_CTL2r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL2r_GET
#define TXFIR_TAP_CTL2r_TXFIR_TAP2_COEFFf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL2r_TXFIR_TAP2_COEFFf_GET
#define TXFIR_TAP_CTL2r_TXFIR_TAP2_COEFFf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL2r_TXFIR_TAP2_COEFFf_SET
#define READ_TXFIR_TAP_CTL2r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TXFIR_TAP_CTL2r
#define WRITE_TXFIR_TAP_CTL2r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TXFIR_TAP_CTL2r
#define MODIFY_TXFIR_TAP_CTL2r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TXFIR_TAP_CTL2r
#define READLN_TXFIR_TAP_CTL2r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TXFIR_TAP_CTL2r
#define WRITELN_TXFIR_TAP_CTL2r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TXFIR_TAP_CTL2r
#define WRITEALL_TXFIR_TAP_CTL2r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TXFIR_TAP_CTL2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  TXFIR_TAP_CTL3
 * BLOCKS:   TX_FED
 * REGADDR:  0xd136
 * DEVAD:    1
 * DESC:     txfir tap control 3 register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     TXFIR_TAP3_COEFF TXFIR tap 3 coeffient values in signed 2's complement formattap range: -170 to +170 in PAM4 mode-127 to +127 in NRZ mode
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL3r (0x0001d136 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL3r_SIZE 4

/*
 * This structure should be used to declare and program TXFIR_TAP_CTL3.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL3r_s {
	uint32_t v[1];
	uint32_t txfir_tap_ctl3[1];
	uint32_t _txfir_tap_ctl3;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL3r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL3r_CLR(r) (r).txfir_tap_ctl3[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL3r_SET(r,d) (r).txfir_tap_ctl3[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL3r_GET(r) (r).txfir_tap_ctl3[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL3r_TXFIR_TAP3_COEFFf_GET(r) (((r).txfir_tap_ctl3[0]) & 0x1ff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL3r_TXFIR_TAP3_COEFFf_SET(r,f) (r).txfir_tap_ctl3[0]=(((r).txfir_tap_ctl3[0] & ~((uint32_t)0x1ff)) | (((uint32_t)f) & 0x1ff)) | (0x1ff << 16)

/*
 * These macros can be used to access TXFIR_TAP_CTL3.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TXFIR_TAP_CTL3r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL3r,(_r._txfir_tap_ctl3))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TXFIR_TAP_CTL3r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL3r,(_r._txfir_tap_ctl3)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TXFIR_TAP_CTL3r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL3r,(_r._txfir_tap_ctl3))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TXFIR_TAP_CTL3r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL3r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._txfir_tap_ctl3))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TXFIR_TAP_CTL3r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL3r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._txfir_tap_ctl3))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TXFIR_TAP_CTL3r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL3r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._txfir_tap_ctl3))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TXFIR_TAP_CTL3r BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL3r
#define TXFIR_TAP_CTL3r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL3r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL3r_t TXFIR_TAP_CTL3r_t;
#define TXFIR_TAP_CTL3r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL3r_CLR
#define TXFIR_TAP_CTL3r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL3r_SET
#define TXFIR_TAP_CTL3r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL3r_GET
#define TXFIR_TAP_CTL3r_TXFIR_TAP3_COEFFf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL3r_TXFIR_TAP3_COEFFf_GET
#define TXFIR_TAP_CTL3r_TXFIR_TAP3_COEFFf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL3r_TXFIR_TAP3_COEFFf_SET
#define READ_TXFIR_TAP_CTL3r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TXFIR_TAP_CTL3r
#define WRITE_TXFIR_TAP_CTL3r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TXFIR_TAP_CTL3r
#define MODIFY_TXFIR_TAP_CTL3r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TXFIR_TAP_CTL3r
#define READLN_TXFIR_TAP_CTL3r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TXFIR_TAP_CTL3r
#define WRITELN_TXFIR_TAP_CTL3r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TXFIR_TAP_CTL3r
#define WRITEALL_TXFIR_TAP_CTL3r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TXFIR_TAP_CTL3r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL3r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  TXFIR_TAP_CTL4
 * BLOCKS:   TX_FED
 * REGADDR:  0xd137
 * DEVAD:    1
 * DESC:     txfir tap control 4 register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     TXFIR_TAP4_COEFF TXFIR tap 4 coeffient values in signed 2's complement formattap range: -170 to +170 in PAM4 mode-127 to +127 in NRZ mode
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL4r (0x0001d137 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL4r_SIZE 4

/*
 * This structure should be used to declare and program TXFIR_TAP_CTL4.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL4r_s {
	uint32_t v[1];
	uint32_t txfir_tap_ctl4[1];
	uint32_t _txfir_tap_ctl4;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL4r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL4r_CLR(r) (r).txfir_tap_ctl4[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL4r_SET(r,d) (r).txfir_tap_ctl4[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL4r_GET(r) (r).txfir_tap_ctl4[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL4r_TXFIR_TAP4_COEFFf_GET(r) (((r).txfir_tap_ctl4[0]) & 0x1ff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL4r_TXFIR_TAP4_COEFFf_SET(r,f) (r).txfir_tap_ctl4[0]=(((r).txfir_tap_ctl4[0] & ~((uint32_t)0x1ff)) | (((uint32_t)f) & 0x1ff)) | (0x1ff << 16)

/*
 * These macros can be used to access TXFIR_TAP_CTL4.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TXFIR_TAP_CTL4r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL4r,(_r._txfir_tap_ctl4))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TXFIR_TAP_CTL4r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL4r,(_r._txfir_tap_ctl4)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TXFIR_TAP_CTL4r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL4r,(_r._txfir_tap_ctl4))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TXFIR_TAP_CTL4r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL4r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._txfir_tap_ctl4))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TXFIR_TAP_CTL4r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL4r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._txfir_tap_ctl4))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TXFIR_TAP_CTL4r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL4r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._txfir_tap_ctl4))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TXFIR_TAP_CTL4r BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL4r
#define TXFIR_TAP_CTL4r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL4r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL4r_t TXFIR_TAP_CTL4r_t;
#define TXFIR_TAP_CTL4r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL4r_CLR
#define TXFIR_TAP_CTL4r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL4r_SET
#define TXFIR_TAP_CTL4r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL4r_GET
#define TXFIR_TAP_CTL4r_TXFIR_TAP4_COEFFf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL4r_TXFIR_TAP4_COEFFf_GET
#define TXFIR_TAP_CTL4r_TXFIR_TAP4_COEFFf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL4r_TXFIR_TAP4_COEFFf_SET
#define READ_TXFIR_TAP_CTL4r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TXFIR_TAP_CTL4r
#define WRITE_TXFIR_TAP_CTL4r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TXFIR_TAP_CTL4r
#define MODIFY_TXFIR_TAP_CTL4r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TXFIR_TAP_CTL4r
#define READLN_TXFIR_TAP_CTL4r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TXFIR_TAP_CTL4r
#define WRITELN_TXFIR_TAP_CTL4r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TXFIR_TAP_CTL4r
#define WRITEALL_TXFIR_TAP_CTL4r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TXFIR_TAP_CTL4r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL4r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  TXFIR_TAP_CTL5
 * BLOCKS:   TX_FED
 * REGADDR:  0xd138
 * DEVAD:    1
 * DESC:     txfir tap control 5 register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     TXFIR_TAP5_COEFF TXFIR tap 5 coeffient values in signed 2's complement formattap range: -170 to +170 in PAM4 mode-127 to +127 in NRZ mode
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL5r (0x0001d138 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL5r_SIZE 4

/*
 * This structure should be used to declare and program TXFIR_TAP_CTL5.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL5r_s {
	uint32_t v[1];
	uint32_t txfir_tap_ctl5[1];
	uint32_t _txfir_tap_ctl5;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL5r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL5r_CLR(r) (r).txfir_tap_ctl5[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL5r_SET(r,d) (r).txfir_tap_ctl5[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL5r_GET(r) (r).txfir_tap_ctl5[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL5r_TXFIR_TAP5_COEFFf_GET(r) (((r).txfir_tap_ctl5[0]) & 0x1ff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL5r_TXFIR_TAP5_COEFFf_SET(r,f) (r).txfir_tap_ctl5[0]=(((r).txfir_tap_ctl5[0] & ~((uint32_t)0x1ff)) | (((uint32_t)f) & 0x1ff)) | (0x1ff << 16)

/*
 * These macros can be used to access TXFIR_TAP_CTL5.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TXFIR_TAP_CTL5r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL5r,(_r._txfir_tap_ctl5))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TXFIR_TAP_CTL5r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL5r,(_r._txfir_tap_ctl5)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TXFIR_TAP_CTL5r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL5r,(_r._txfir_tap_ctl5))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TXFIR_TAP_CTL5r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL5r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._txfir_tap_ctl5))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TXFIR_TAP_CTL5r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL5r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._txfir_tap_ctl5))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TXFIR_TAP_CTL5r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL5r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._txfir_tap_ctl5))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TXFIR_TAP_CTL5r BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL5r
#define TXFIR_TAP_CTL5r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL5r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL5r_t TXFIR_TAP_CTL5r_t;
#define TXFIR_TAP_CTL5r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL5r_CLR
#define TXFIR_TAP_CTL5r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL5r_SET
#define TXFIR_TAP_CTL5r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL5r_GET
#define TXFIR_TAP_CTL5r_TXFIR_TAP5_COEFFf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL5r_TXFIR_TAP5_COEFFf_GET
#define TXFIR_TAP_CTL5r_TXFIR_TAP5_COEFFf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL5r_TXFIR_TAP5_COEFFf_SET
#define READ_TXFIR_TAP_CTL5r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TXFIR_TAP_CTL5r
#define WRITE_TXFIR_TAP_CTL5r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TXFIR_TAP_CTL5r
#define MODIFY_TXFIR_TAP_CTL5r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TXFIR_TAP_CTL5r
#define READLN_TXFIR_TAP_CTL5r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TXFIR_TAP_CTL5r
#define WRITELN_TXFIR_TAP_CTL5r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TXFIR_TAP_CTL5r
#define WRITEALL_TXFIR_TAP_CTL5r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TXFIR_TAP_CTL5r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_TXFIR_TAP_CTL5r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  PLL_CAL_PLL_CALSTS0
 * BLOCKS:   PLL_CAL_COM
 * REGADDR:  0xd148
 * DEVAD:    1
 * DESC:     PLL_CALSTS_0
 * RESETVAL: 0x180 (384)
 * ACCESS:   R/O
 * FIELDS:
 *     PLL_RANGE        Pll range value
 *     PLL_LOCK_BAR_STKY Pll lock drop sticky status, clear upon read.
 *     PLL_LOCK         Pll lock status
 *     CAL_VALID        Cal valid status
 *     CAL_STATE        Calibratin State status, default to Idle state
 *     PLL_FAIL_STKY    Pll lock drop due to frequency comparison failure sticky status, clear upon read.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CAL_PLL_CALSTS0r (0x0001d148 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CAL_PLL_CALSTS0r_SIZE 4

/*
 * This structure should be used to declare and program PLL_CAL_PLL_CALSTS0.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CAL_PLL_CALSTS0r_s {
	uint32_t v[1];
	uint32_t pll_cal_pll_calsts0[1];
	uint32_t _pll_cal_pll_calsts0;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CAL_PLL_CALSTS0r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CAL_PLL_CALSTS0r_CLR(r) (r).pll_cal_pll_calsts0[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CAL_PLL_CALSTS0r_SET(r,d) (r).pll_cal_pll_calsts0[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CAL_PLL_CALSTS0r_GET(r) (r).pll_cal_pll_calsts0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CAL_PLL_CALSTS0r_PLL_FAIL_STKYf_GET(r) ((((r).pll_cal_pll_calsts0[0]) >> 15) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CAL_PLL_CALSTS0r_PLL_FAIL_STKYf_SET(r,f) (r).pll_cal_pll_calsts0[0]=(((r).pll_cal_pll_calsts0[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CAL_PLL_CALSTS0r_CAL_STATEf_GET(r) ((((r).pll_cal_pll_calsts0[0]) >> 11) & 0xf)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CAL_PLL_CALSTS0r_CAL_STATEf_SET(r,f) (r).pll_cal_pll_calsts0[0]=(((r).pll_cal_pll_calsts0[0] & ~((uint32_t)0xf << 11)) | ((((uint32_t)f) & 0xf) << 11)) | (15 << (16 + 11))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CAL_PLL_CALSTS0r_CAL_VALIDf_GET(r) ((((r).pll_cal_pll_calsts0[0]) >> 10) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CAL_PLL_CALSTS0r_CAL_VALIDf_SET(r,f) (r).pll_cal_pll_calsts0[0]=(((r).pll_cal_pll_calsts0[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10)) | (1 << (16 + 10))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CAL_PLL_CALSTS0r_PLL_LOCKf_GET(r) ((((r).pll_cal_pll_calsts0[0]) >> 9) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CAL_PLL_CALSTS0r_PLL_LOCKf_SET(r,f) (r).pll_cal_pll_calsts0[0]=(((r).pll_cal_pll_calsts0[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9)) | (1 << (16 + 9))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CAL_PLL_CALSTS0r_PLL_LOCK_BAR_STKYf_GET(r) ((((r).pll_cal_pll_calsts0[0]) >> 8) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CAL_PLL_CALSTS0r_PLL_LOCK_BAR_STKYf_SET(r,f) (r).pll_cal_pll_calsts0[0]=(((r).pll_cal_pll_calsts0[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8)) | (1 << (16 + 8))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CAL_PLL_CALSTS0r_PLL_RANGEf_GET(r) (((r).pll_cal_pll_calsts0[0]) & 0xff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CAL_PLL_CALSTS0r_PLL_RANGEf_SET(r,f) (r).pll_cal_pll_calsts0[0]=(((r).pll_cal_pll_calsts0[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff)) | (0xff << 16)

/*
 * These macros can be used to access PLL_CAL_PLL_CALSTS0.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_PLL_CAL_PLL_CALSTS0r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CAL_PLL_CALSTS0r,(_r._pll_cal_pll_calsts0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_PLL_CAL_PLL_CALSTS0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CAL_PLL_CALSTS0r,(_r._pll_cal_pll_calsts0)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_PLL_CAL_PLL_CALSTS0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CAL_PLL_CALSTS0r,(_r._pll_cal_pll_calsts0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_PLL_CAL_PLL_CALSTS0r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CAL_PLL_CALSTS0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._pll_cal_pll_calsts0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_PLL_CAL_PLL_CALSTS0r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CAL_PLL_CALSTS0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._pll_cal_pll_calsts0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_PLL_CAL_PLL_CALSTS0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CAL_PLL_CALSTS0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._pll_cal_pll_calsts0))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define PLL_CAL_PLL_CALSTS0r BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CAL_PLL_CALSTS0r
#define PLL_CAL_PLL_CALSTS0r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CAL_PLL_CALSTS0r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CAL_PLL_CALSTS0r_t PLL_CAL_PLL_CALSTS0r_t;
#define PLL_CAL_PLL_CALSTS0r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CAL_PLL_CALSTS0r_CLR
#define PLL_CAL_PLL_CALSTS0r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CAL_PLL_CALSTS0r_SET
#define PLL_CAL_PLL_CALSTS0r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CAL_PLL_CALSTS0r_GET
#define PLL_CAL_PLL_CALSTS0r_PLL_FAIL_STKYf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CAL_PLL_CALSTS0r_PLL_FAIL_STKYf_GET
#define PLL_CAL_PLL_CALSTS0r_PLL_FAIL_STKYf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CAL_PLL_CALSTS0r_PLL_FAIL_STKYf_SET
#define PLL_CAL_PLL_CALSTS0r_CAL_STATEf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CAL_PLL_CALSTS0r_CAL_STATEf_GET
#define PLL_CAL_PLL_CALSTS0r_CAL_STATEf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CAL_PLL_CALSTS0r_CAL_STATEf_SET
#define PLL_CAL_PLL_CALSTS0r_CAL_VALIDf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CAL_PLL_CALSTS0r_CAL_VALIDf_GET
#define PLL_CAL_PLL_CALSTS0r_CAL_VALIDf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CAL_PLL_CALSTS0r_CAL_VALIDf_SET
#define PLL_CAL_PLL_CALSTS0r_PLL_LOCKf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CAL_PLL_CALSTS0r_PLL_LOCKf_GET
#define PLL_CAL_PLL_CALSTS0r_PLL_LOCKf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CAL_PLL_CALSTS0r_PLL_LOCKf_SET
#define PLL_CAL_PLL_CALSTS0r_PLL_LOCK_BAR_STKYf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CAL_PLL_CALSTS0r_PLL_LOCK_BAR_STKYf_GET
#define PLL_CAL_PLL_CALSTS0r_PLL_LOCK_BAR_STKYf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CAL_PLL_CALSTS0r_PLL_LOCK_BAR_STKYf_SET
#define PLL_CAL_PLL_CALSTS0r_PLL_RANGEf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CAL_PLL_CALSTS0r_PLL_RANGEf_GET
#define PLL_CAL_PLL_CALSTS0r_PLL_RANGEf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CAL_PLL_CALSTS0r_PLL_RANGEf_SET
#define READ_PLL_CAL_PLL_CALSTS0r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_PLL_CAL_PLL_CALSTS0r
#define WRITE_PLL_CAL_PLL_CALSTS0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_PLL_CAL_PLL_CALSTS0r
#define MODIFY_PLL_CAL_PLL_CALSTS0r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_PLL_CAL_PLL_CALSTS0r
#define READLN_PLL_CAL_PLL_CALSTS0r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_PLL_CAL_PLL_CALSTS0r
#define WRITELN_PLL_CAL_PLL_CALSTS0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_PLL_CAL_PLL_CALSTS0r
#define WRITEALL_PLL_CAL_PLL_CALSTS0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_PLL_CAL_PLL_CALSTS0r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CAL_PLL_CALSTS0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  TLB_RX_PRBS_CHK_CNT_CFG
 * BLOCKS:   TLB_RX
 * REGADDR:  0xd160
 * DEVAD:    1
 * DESC:     PRBS Checker Count Control
 * RESETVAL: 0x8602 (34306)
 * ACCESS:   R/W
 * FIELDS:
 *     PRBS_CHK_LOCK_CNT specifies the number of consecutive valid clock cycles without any bit errorfor PRBS checker to go into PRBS lock state. Valid values are 0 to 31 where0 indicate that PRBS will lock as soon as it gets the first clock cycle with no bit error.likewise 31 indicates that PRBS will lock as soon as it gets the 32 consecutive clocks with no error.
 *     PRBS_CHK_OOL_CNT specifies the number of consecutive valid clock cycles with 1 or more bit errorsfor PRBS checker to go out of PRBS lock state. Valid values are 0 to 31 where0 indicate that PRBS will go out of lock as soon as it gets the first clock cycle with 1 or more bit errors.likewise 31 indicates that PRBS will go out of lock as soon as it gets the 32 consecutive clocks with 1 or more errors.
 *     RX_TRN_ACTIVE_AUTO_MODE_EN 1'b1 will forcefully disable the below described RX datapath functions automatically while RX Link Training is enabled and active irrespective of the below register bit settings .- PAM4 Gray Decoder         (enabled by field pam4_gray_dec_en       )- PAM4 Decoder              (enabled by field pam4_decoder_en        )- PAM4 Symbol bit-swap      (enabled by field pam4_rx_symbol_bit_swap)- PAM4 Back Channel Decoder (enabled by field bc_dec_en              )- PAM4 Descrambler          (enabled by field rx_descrambler_en      )- NRZ  Differential Decoder (enabled by field tlb_rx_diff_dec_en     )1'b0 will ignore the control signal from RX Link Training and the above RX datapath functions will be enabled based on their individual enable bits irrespective of the RX training status where enabled or disabled.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_CNT_CFGr (0x0001d160 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_CNT_CFGr_SIZE 4

/*
 * This structure should be used to declare and program TLB_RX_PRBS_CHK_CNT_CFG.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_CNT_CFGr_s {
	uint32_t v[1];
	uint32_t tlb_rx_prbs_chk_cnt_cfg[1];
	uint32_t _tlb_rx_prbs_chk_cnt_cfg;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_CNT_CFGr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_CNT_CFGr_CLR(r) (r).tlb_rx_prbs_chk_cnt_cfg[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_CNT_CFGr_SET(r,d) (r).tlb_rx_prbs_chk_cnt_cfg[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_CNT_CFGr_GET(r) (r).tlb_rx_prbs_chk_cnt_cfg[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_CNT_CFGr_RX_TRN_ACTIVE_AUTO_MODE_ENf_GET(r) ((((r).tlb_rx_prbs_chk_cnt_cfg[0]) >> 15) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_CNT_CFGr_RX_TRN_ACTIVE_AUTO_MODE_ENf_SET(r,f) (r).tlb_rx_prbs_chk_cnt_cfg[0]=(((r).tlb_rx_prbs_chk_cnt_cfg[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_CNT_CFGr_PRBS_CHK_OOL_CNTf_GET(r) ((((r).tlb_rx_prbs_chk_cnt_cfg[0]) >> 8) & 0x1f)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_CNT_CFGr_PRBS_CHK_OOL_CNTf_SET(r,f) (r).tlb_rx_prbs_chk_cnt_cfg[0]=(((r).tlb_rx_prbs_chk_cnt_cfg[0] & ~((uint32_t)0x1f << 8)) | ((((uint32_t)f) & 0x1f) << 8)) | (31 << (16 + 8))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_CNT_CFGr_PRBS_CHK_LOCK_CNTf_GET(r) (((r).tlb_rx_prbs_chk_cnt_cfg[0]) & 0x1f)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_CNT_CFGr_PRBS_CHK_LOCK_CNTf_SET(r,f) (r).tlb_rx_prbs_chk_cnt_cfg[0]=(((r).tlb_rx_prbs_chk_cnt_cfg[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f)) | (0x1f << 16)

/*
 * These macros can be used to access TLB_RX_PRBS_CHK_CNT_CFG.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TLB_RX_PRBS_CHK_CNT_CFGr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_CNT_CFGr,(_r._tlb_rx_prbs_chk_cnt_cfg))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TLB_RX_PRBS_CHK_CNT_CFGr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_CNT_CFGr,(_r._tlb_rx_prbs_chk_cnt_cfg)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TLB_RX_PRBS_CHK_CNT_CFGr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_CNT_CFGr,(_r._tlb_rx_prbs_chk_cnt_cfg))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TLB_RX_PRBS_CHK_CNT_CFGr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_CNT_CFGr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_rx_prbs_chk_cnt_cfg))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TLB_RX_PRBS_CHK_CNT_CFGr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_CNT_CFGr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_rx_prbs_chk_cnt_cfg))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TLB_RX_PRBS_CHK_CNT_CFGr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_CNT_CFGr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tlb_rx_prbs_chk_cnt_cfg))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TLB_RX_PRBS_CHK_CNT_CFGr BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_CNT_CFGr
#define TLB_RX_PRBS_CHK_CNT_CFGr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_CNT_CFGr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_CNT_CFGr_t TLB_RX_PRBS_CHK_CNT_CFGr_t;
#define TLB_RX_PRBS_CHK_CNT_CFGr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_CNT_CFGr_CLR
#define TLB_RX_PRBS_CHK_CNT_CFGr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_CNT_CFGr_SET
#define TLB_RX_PRBS_CHK_CNT_CFGr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_CNT_CFGr_GET
#define TLB_RX_PRBS_CHK_CNT_CFGr_RX_TRN_ACTIVE_AUTO_MODE_ENf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_CNT_CFGr_RX_TRN_ACTIVE_AUTO_MODE_ENf_GET
#define TLB_RX_PRBS_CHK_CNT_CFGr_RX_TRN_ACTIVE_AUTO_MODE_ENf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_CNT_CFGr_RX_TRN_ACTIVE_AUTO_MODE_ENf_SET
#define TLB_RX_PRBS_CHK_CNT_CFGr_PRBS_CHK_OOL_CNTf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_CNT_CFGr_PRBS_CHK_OOL_CNTf_GET
#define TLB_RX_PRBS_CHK_CNT_CFGr_PRBS_CHK_OOL_CNTf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_CNT_CFGr_PRBS_CHK_OOL_CNTf_SET
#define TLB_RX_PRBS_CHK_CNT_CFGr_PRBS_CHK_LOCK_CNTf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_CNT_CFGr_PRBS_CHK_LOCK_CNTf_GET
#define TLB_RX_PRBS_CHK_CNT_CFGr_PRBS_CHK_LOCK_CNTf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_CNT_CFGr_PRBS_CHK_LOCK_CNTf_SET
#define READ_TLB_RX_PRBS_CHK_CNT_CFGr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TLB_RX_PRBS_CHK_CNT_CFGr
#define WRITE_TLB_RX_PRBS_CHK_CNT_CFGr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TLB_RX_PRBS_CHK_CNT_CFGr
#define MODIFY_TLB_RX_PRBS_CHK_CNT_CFGr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TLB_RX_PRBS_CHK_CNT_CFGr
#define READLN_TLB_RX_PRBS_CHK_CNT_CFGr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TLB_RX_PRBS_CHK_CNT_CFGr
#define WRITELN_TLB_RX_PRBS_CHK_CNT_CFGr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TLB_RX_PRBS_CHK_CNT_CFGr
#define WRITEALL_TLB_RX_PRBS_CHK_CNT_CFGr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TLB_RX_PRBS_CHK_CNT_CFGr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_CNT_CFGr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  TLB_RX_PRBS_CHK_CFG
 * BLOCKS:   TLB_RX
 * REGADDR:  0xd161
 * DEVAD:    1
 * DESC:     PRBS Checker Control
 * RESETVAL: 0x12a (298)
 * ACCESS:   R/W
 * FIELDS:
 *     PRBS_CHK_EN      PRBS checker enable.1 => enable  the PRBS checker.0 => disable the PRBS checker.
 *     PRBS_CHK_MODE_SEL PRBS checker mode select. Selects the PRBS polynomial as shown below3'd0 -> PRBS 73'd1 -> PRBS 93'd2 -> PRBS 113'd3 -> PRBS 153'd4 -> PRBS 233'd5 -> PRBS 313'd6 -> PRBS 58 (1 + x^39 + x^58)3'd7 -> PRBS 49 (1 + x^40 + x^49)
 *     PRBS_CHK_INV     PRBS Invert enable.1 => will invert all the data bits to the PRBS checker.0 => will send normal data to the PRBS checker.
 *     PRBS_CHK_MODE    PRBS LOCK state machine select.2'd0 -> Self-sync mode w/ hysteresis. PRBS seed register is continuously seeded with previous received bits.This mode results in faster locking, but bit errors are counted multiple times (often by 3x).2'd1 -> Initial seed mode w/ hysteresis. PRBS seed registers is seeded with previous received bits only till PRBS lock isacquired and then they run locally independently from the received data until the checker goes out of PRBS lock.2'd2 -> Initial seed mode w/o hysteresis. Similar to mode 1 above except once locked it stays locked until PRBS is disabled.2'd3 -> reserved for future use.
 *     PRBS_CHK_EN_AUTO_MODE PRBS Checker Enable Mode Control.1 => select (rx_dsc_lock & prbs_chk_en) as PRBS checker enable control.0 => select                prbs_chk_en  as PRBS checker enable control.
 *     PRBS_BURST_LEN_CHK_EN 0 => disbale, 1=> enable (default)
 *     PRBS_CHK_ERR_CNT_BURST_MODE PRBS Error Counter Mode.1 => Each busrt of error will be counted as 1 error in the error counter. Each error busrt must be separated by 1 error-free cycle of data which in worst case should be 39 bits.0 => Each bit error will be counted.
 *     TRNSUM_ERROR_COUNT_EN Training sum error counter Mode enable.1 => will make the PRBS error counter used as trnsum_error counter. PRBS checker can not be used during this mode.0 => PRBS checker mode.
 *     PRBS_CHK_CLK_EN_FRC_ON PRBS checker clock enable.1'b1 will enable the PRBS checker clock. Recommended to be enabled before enabling the prbs_chk_en.
 *     PRBS_CHK_MODE_SEL_MSB Extending PRBS polynomial select by using this bit as bit[3] alongwith prbs_chk_mode_sel[2:0].1'b0 will select old PRBS polynomials for PRBS 7, 9, 11, 15, 23, 31, 49 and 58 based on prbs_chk_mode_sel[2:0].1'b1 will select new PRBS polynomials for PRBS 10, 20, 13 for PAM4 based on prbs_chk_mode_sel[2:0].1'b1 & prbs_chk_mode_sel[2:0] == 0 will select PRBS 10.1'b1 & prbs_chk_mode_sel[2:0] == 1 will select PRBS 20.1'b1 & prbs_chk_mode_sel[2:0] == 2 will select PRBS 13.1'b1 & prbs_chk_mode_sel[2:0] == 2 will select PRBS 13  with polynomial (1+x^1+x^2+x^12+x^13). This pattern is also used for PAM4 Link Training Lane 0 pattern.1'b1 & prbs_chk_mode_sel[2:0] == 3 is reserved for future use.1'b1 & prbs_chk_mode_sel[2:0] == 4 will select PAM4 Link Training Lane 1 PRBS 13  polynomial (1 + x2 + x3 + x7  + x13). Debug modes.1'b1 & prbs_chk_mode_sel[2:0] == 5 will select PAM4 Link Training Lane 2 PRBS 13  polynomial (1 + x2 + x4 + x8  + x13). Debug modes.1'b1 & prbs_chk_mode_sel[2:0] == 6 will select PAM4 Link Training Lane 3 PRBS 13  polynomial (1 + x2 + x5 + x9  + x13). Debug modes.1'b1 & prbs_chk_mode_sel[2:0] == 7 will enable 40 bit fixed pattern except all 0s pattern. fixed pattern must be 40 bits irrespective of the OSR modes.
 *     PRBS_CHK_BURST_ERR_CNT_EN PRBS checker burst error count mode enable.1'b1 will enable the PRBS checker burst error count mode. It should be enabled for prbs_chk_burst_err_cnt counter .Make sure that only one of the 2 register settings ((prbs_chk_en_timer_unit_sel >=2 & prbs_chk_en_timer_unit_timeout > 0) and prbs_chk_burst_err_cnt_en) are TRUE at any given time and not simultaneously TRUE.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_CFGr (0x0001d161 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_CFGr_SIZE 4

/*
 * This structure should be used to declare and program TLB_RX_PRBS_CHK_CFG.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_CFGr_s {
	uint32_t v[1];
	uint32_t tlb_rx_prbs_chk_cfg[1];
	uint32_t _tlb_rx_prbs_chk_cfg;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_CFGr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_CFGr_CLR(r) (r).tlb_rx_prbs_chk_cfg[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_CFGr_SET(r,d) (r).tlb_rx_prbs_chk_cfg[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_CFGr_GET(r) (r).tlb_rx_prbs_chk_cfg[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_CFGr_PRBS_CHK_BURST_ERR_CNT_ENf_GET(r) ((((r).tlb_rx_prbs_chk_cfg[0]) >> 15) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_CFGr_PRBS_CHK_BURST_ERR_CNT_ENf_SET(r,f) (r).tlb_rx_prbs_chk_cfg[0]=(((r).tlb_rx_prbs_chk_cfg[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_CFGr_PRBS_CHK_MODE_SEL_MSBf_GET(r) ((((r).tlb_rx_prbs_chk_cfg[0]) >> 12) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_CFGr_PRBS_CHK_MODE_SEL_MSBf_SET(r,f) (r).tlb_rx_prbs_chk_cfg[0]=(((r).tlb_rx_prbs_chk_cfg[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12)) | (1 << (16 + 12))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_CFGr_PRBS_CHK_CLK_EN_FRC_ONf_GET(r) ((((r).tlb_rx_prbs_chk_cfg[0]) >> 11) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_CFGr_PRBS_CHK_CLK_EN_FRC_ONf_SET(r,f) (r).tlb_rx_prbs_chk_cfg[0]=(((r).tlb_rx_prbs_chk_cfg[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11)) | (1 << (16 + 11))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_CFGr_TRNSUM_ERROR_COUNT_ENf_GET(r) ((((r).tlb_rx_prbs_chk_cfg[0]) >> 10) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_CFGr_TRNSUM_ERROR_COUNT_ENf_SET(r,f) (r).tlb_rx_prbs_chk_cfg[0]=(((r).tlb_rx_prbs_chk_cfg[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10)) | (1 << (16 + 10))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_CFGr_PRBS_CHK_ERR_CNT_BURST_MODEf_GET(r) ((((r).tlb_rx_prbs_chk_cfg[0]) >> 9) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_CFGr_PRBS_CHK_ERR_CNT_BURST_MODEf_SET(r,f) (r).tlb_rx_prbs_chk_cfg[0]=(((r).tlb_rx_prbs_chk_cfg[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9)) | (1 << (16 + 9))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_CFGr_PRBS_BURST_LEN_CHK_ENf_GET(r) ((((r).tlb_rx_prbs_chk_cfg[0]) >> 8) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_CFGr_PRBS_BURST_LEN_CHK_ENf_SET(r,f) (r).tlb_rx_prbs_chk_cfg[0]=(((r).tlb_rx_prbs_chk_cfg[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8)) | (1 << (16 + 8))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_CFGr_PRBS_CHK_EN_AUTO_MODEf_GET(r) ((((r).tlb_rx_prbs_chk_cfg[0]) >> 7) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_CFGr_PRBS_CHK_EN_AUTO_MODEf_SET(r,f) (r).tlb_rx_prbs_chk_cfg[0]=(((r).tlb_rx_prbs_chk_cfg[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_CFGr_PRBS_CHK_MODEf_GET(r) ((((r).tlb_rx_prbs_chk_cfg[0]) >> 5) & 0x3)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_CFGr_PRBS_CHK_MODEf_SET(r,f) (r).tlb_rx_prbs_chk_cfg[0]=(((r).tlb_rx_prbs_chk_cfg[0] & ~((uint32_t)0x3 << 5)) | ((((uint32_t)f) & 0x3) << 5)) | (3 << (16 + 5))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_CFGr_PRBS_CHK_INVf_GET(r) ((((r).tlb_rx_prbs_chk_cfg[0]) >> 4) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_CFGr_PRBS_CHK_INVf_SET(r,f) (r).tlb_rx_prbs_chk_cfg[0]=(((r).tlb_rx_prbs_chk_cfg[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_CFGr_PRBS_CHK_MODE_SELf_GET(r) ((((r).tlb_rx_prbs_chk_cfg[0]) >> 1) & 0x7)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_CFGr_PRBS_CHK_MODE_SELf_SET(r,f) (r).tlb_rx_prbs_chk_cfg[0]=(((r).tlb_rx_prbs_chk_cfg[0] & ~((uint32_t)0x7 << 1)) | ((((uint32_t)f) & 0x7) << 1)) | (7 << (16 + 1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_CFGr_PRBS_CHK_ENf_GET(r) (((r).tlb_rx_prbs_chk_cfg[0]) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_CFGr_PRBS_CHK_ENf_SET(r,f) (r).tlb_rx_prbs_chk_cfg[0]=(((r).tlb_rx_prbs_chk_cfg[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access TLB_RX_PRBS_CHK_CFG.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TLB_RX_PRBS_CHK_CFGr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_CFGr,(_r._tlb_rx_prbs_chk_cfg))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TLB_RX_PRBS_CHK_CFGr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_CFGr,(_r._tlb_rx_prbs_chk_cfg)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TLB_RX_PRBS_CHK_CFGr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_CFGr,(_r._tlb_rx_prbs_chk_cfg))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TLB_RX_PRBS_CHK_CFGr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_CFGr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_rx_prbs_chk_cfg))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TLB_RX_PRBS_CHK_CFGr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_CFGr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_rx_prbs_chk_cfg))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TLB_RX_PRBS_CHK_CFGr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_CFGr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tlb_rx_prbs_chk_cfg))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TLB_RX_PRBS_CHK_CFGr BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_CFGr
#define TLB_RX_PRBS_CHK_CFGr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_CFGr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_CFGr_t TLB_RX_PRBS_CHK_CFGr_t;
#define TLB_RX_PRBS_CHK_CFGr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_CFGr_CLR
#define TLB_RX_PRBS_CHK_CFGr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_CFGr_SET
#define TLB_RX_PRBS_CHK_CFGr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_CFGr_GET
#define TLB_RX_PRBS_CHK_CFGr_PRBS_CHK_BURST_ERR_CNT_ENf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_CFGr_PRBS_CHK_BURST_ERR_CNT_ENf_GET
#define TLB_RX_PRBS_CHK_CFGr_PRBS_CHK_BURST_ERR_CNT_ENf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_CFGr_PRBS_CHK_BURST_ERR_CNT_ENf_SET
#define TLB_RX_PRBS_CHK_CFGr_PRBS_CHK_MODE_SEL_MSBf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_CFGr_PRBS_CHK_MODE_SEL_MSBf_GET
#define TLB_RX_PRBS_CHK_CFGr_PRBS_CHK_MODE_SEL_MSBf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_CFGr_PRBS_CHK_MODE_SEL_MSBf_SET
#define TLB_RX_PRBS_CHK_CFGr_PRBS_CHK_CLK_EN_FRC_ONf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_CFGr_PRBS_CHK_CLK_EN_FRC_ONf_GET
#define TLB_RX_PRBS_CHK_CFGr_PRBS_CHK_CLK_EN_FRC_ONf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_CFGr_PRBS_CHK_CLK_EN_FRC_ONf_SET
#define TLB_RX_PRBS_CHK_CFGr_TRNSUM_ERROR_COUNT_ENf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_CFGr_TRNSUM_ERROR_COUNT_ENf_GET
#define TLB_RX_PRBS_CHK_CFGr_TRNSUM_ERROR_COUNT_ENf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_CFGr_TRNSUM_ERROR_COUNT_ENf_SET
#define TLB_RX_PRBS_CHK_CFGr_PRBS_CHK_ERR_CNT_BURST_MODEf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_CFGr_PRBS_CHK_ERR_CNT_BURST_MODEf_GET
#define TLB_RX_PRBS_CHK_CFGr_PRBS_CHK_ERR_CNT_BURST_MODEf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_CFGr_PRBS_CHK_ERR_CNT_BURST_MODEf_SET
#define TLB_RX_PRBS_CHK_CFGr_PRBS_BURST_LEN_CHK_ENf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_CFGr_PRBS_BURST_LEN_CHK_ENf_GET
#define TLB_RX_PRBS_CHK_CFGr_PRBS_BURST_LEN_CHK_ENf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_CFGr_PRBS_BURST_LEN_CHK_ENf_SET
#define TLB_RX_PRBS_CHK_CFGr_PRBS_CHK_EN_AUTO_MODEf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_CFGr_PRBS_CHK_EN_AUTO_MODEf_GET
#define TLB_RX_PRBS_CHK_CFGr_PRBS_CHK_EN_AUTO_MODEf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_CFGr_PRBS_CHK_EN_AUTO_MODEf_SET
#define TLB_RX_PRBS_CHK_CFGr_PRBS_CHK_MODEf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_CFGr_PRBS_CHK_MODEf_GET
#define TLB_RX_PRBS_CHK_CFGr_PRBS_CHK_MODEf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_CFGr_PRBS_CHK_MODEf_SET
#define TLB_RX_PRBS_CHK_CFGr_PRBS_CHK_INVf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_CFGr_PRBS_CHK_INVf_GET
#define TLB_RX_PRBS_CHK_CFGr_PRBS_CHK_INVf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_CFGr_PRBS_CHK_INVf_SET
#define TLB_RX_PRBS_CHK_CFGr_PRBS_CHK_MODE_SELf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_CFGr_PRBS_CHK_MODE_SELf_GET
#define TLB_RX_PRBS_CHK_CFGr_PRBS_CHK_MODE_SELf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_CFGr_PRBS_CHK_MODE_SELf_SET
#define TLB_RX_PRBS_CHK_CFGr_PRBS_CHK_ENf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_CFGr_PRBS_CHK_ENf_GET
#define TLB_RX_PRBS_CHK_CFGr_PRBS_CHK_ENf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_CFGr_PRBS_CHK_ENf_SET
#define READ_TLB_RX_PRBS_CHK_CFGr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TLB_RX_PRBS_CHK_CFGr
#define WRITE_TLB_RX_PRBS_CHK_CFGr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TLB_RX_PRBS_CHK_CFGr
#define MODIFY_TLB_RX_PRBS_CHK_CFGr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TLB_RX_PRBS_CHK_CFGr
#define READLN_TLB_RX_PRBS_CHK_CFGr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TLB_RX_PRBS_CHK_CFGr
#define WRITELN_TLB_RX_PRBS_CHK_CFGr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TLB_RX_PRBS_CHK_CFGr
#define WRITEALL_TLB_RX_PRBS_CHK_CFGr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TLB_RX_PRBS_CHK_CFGr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_CFGr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  TLB_RX_DIG_LPBK_CFG
 * BLOCKS:   TLB_RX
 * REGADDR:  0xd162
 * DEVAD:    1
 * DESC:     Digital Loopback Control
 * RESETVAL: 0xe (14)
 * ACCESS:   R/W
 * FIELDS:
 *     DIG_LPBK_EN      TX to RX Parallel Loopback (Digital Loopback) Enable.1 => Loopback is Enabled.0 => Loopback is Disabled.
 *     DIG_LPBK_PD_MODE Digital Loopback Phase Detector Mode. For normal operating conditions keep it at the default value of 1'b1.1'b0 - swap inc/dec. 1'b1 - normal mode.
 *     DIG_LPBK_PD_FLT_BYPASS Digital Loopback Phase Detector Filter Bypass. For repeater applications, it should be 1'b1.For other applications filter can be enabled for better jitter tolerance performance for the didgital loopback.
 *     DIG_LPBK_PD_BIAS_EN 1'b1 will enable PD inc bias mode where there will be inc generated every 16th clock cycle..1'b0 will disable the PD bias mode so inc/dec will be generated based on the PD output.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_DIG_LPBK_CFGr (0x0001d162 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_DIG_LPBK_CFGr_SIZE 4

/*
 * This structure should be used to declare and program TLB_RX_DIG_LPBK_CFG.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_DIG_LPBK_CFGr_s {
	uint32_t v[1];
	uint32_t tlb_rx_dig_lpbk_cfg[1];
	uint32_t _tlb_rx_dig_lpbk_cfg;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_DIG_LPBK_CFGr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_DIG_LPBK_CFGr_CLR(r) (r).tlb_rx_dig_lpbk_cfg[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_DIG_LPBK_CFGr_SET(r,d) (r).tlb_rx_dig_lpbk_cfg[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_DIG_LPBK_CFGr_GET(r) (r).tlb_rx_dig_lpbk_cfg[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_DIG_LPBK_CFGr_DIG_LPBK_PD_BIAS_ENf_GET(r) ((((r).tlb_rx_dig_lpbk_cfg[0]) >> 3) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_DIG_LPBK_CFGr_DIG_LPBK_PD_BIAS_ENf_SET(r,f) (r).tlb_rx_dig_lpbk_cfg[0]=(((r).tlb_rx_dig_lpbk_cfg[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_DIG_LPBK_CFGr_DIG_LPBK_PD_FLT_BYPASSf_GET(r) ((((r).tlb_rx_dig_lpbk_cfg[0]) >> 2) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_DIG_LPBK_CFGr_DIG_LPBK_PD_FLT_BYPASSf_SET(r,f) (r).tlb_rx_dig_lpbk_cfg[0]=(((r).tlb_rx_dig_lpbk_cfg[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_DIG_LPBK_CFGr_DIG_LPBK_PD_MODEf_GET(r) ((((r).tlb_rx_dig_lpbk_cfg[0]) >> 1) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_DIG_LPBK_CFGr_DIG_LPBK_PD_MODEf_SET(r,f) (r).tlb_rx_dig_lpbk_cfg[0]=(((r).tlb_rx_dig_lpbk_cfg[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_DIG_LPBK_CFGr_DIG_LPBK_ENf_GET(r) (((r).tlb_rx_dig_lpbk_cfg[0]) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_DIG_LPBK_CFGr_DIG_LPBK_ENf_SET(r,f) (r).tlb_rx_dig_lpbk_cfg[0]=(((r).tlb_rx_dig_lpbk_cfg[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access TLB_RX_DIG_LPBK_CFG.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TLB_RX_DIG_LPBK_CFGr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_DIG_LPBK_CFGr,(_r._tlb_rx_dig_lpbk_cfg))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TLB_RX_DIG_LPBK_CFGr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_DIG_LPBK_CFGr,(_r._tlb_rx_dig_lpbk_cfg)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TLB_RX_DIG_LPBK_CFGr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_DIG_LPBK_CFGr,(_r._tlb_rx_dig_lpbk_cfg))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TLB_RX_DIG_LPBK_CFGr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_DIG_LPBK_CFGr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_rx_dig_lpbk_cfg))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TLB_RX_DIG_LPBK_CFGr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_DIG_LPBK_CFGr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_rx_dig_lpbk_cfg))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TLB_RX_DIG_LPBK_CFGr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_DIG_LPBK_CFGr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tlb_rx_dig_lpbk_cfg))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TLB_RX_DIG_LPBK_CFGr BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_DIG_LPBK_CFGr
#define TLB_RX_DIG_LPBK_CFGr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_DIG_LPBK_CFGr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_DIG_LPBK_CFGr_t TLB_RX_DIG_LPBK_CFGr_t;
#define TLB_RX_DIG_LPBK_CFGr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_DIG_LPBK_CFGr_CLR
#define TLB_RX_DIG_LPBK_CFGr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_DIG_LPBK_CFGr_SET
#define TLB_RX_DIG_LPBK_CFGr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_DIG_LPBK_CFGr_GET
#define TLB_RX_DIG_LPBK_CFGr_DIG_LPBK_PD_BIAS_ENf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_DIG_LPBK_CFGr_DIG_LPBK_PD_BIAS_ENf_GET
#define TLB_RX_DIG_LPBK_CFGr_DIG_LPBK_PD_BIAS_ENf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_DIG_LPBK_CFGr_DIG_LPBK_PD_BIAS_ENf_SET
#define TLB_RX_DIG_LPBK_CFGr_DIG_LPBK_PD_FLT_BYPASSf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_DIG_LPBK_CFGr_DIG_LPBK_PD_FLT_BYPASSf_GET
#define TLB_RX_DIG_LPBK_CFGr_DIG_LPBK_PD_FLT_BYPASSf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_DIG_LPBK_CFGr_DIG_LPBK_PD_FLT_BYPASSf_SET
#define TLB_RX_DIG_LPBK_CFGr_DIG_LPBK_PD_MODEf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_DIG_LPBK_CFGr_DIG_LPBK_PD_MODEf_GET
#define TLB_RX_DIG_LPBK_CFGr_DIG_LPBK_PD_MODEf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_DIG_LPBK_CFGr_DIG_LPBK_PD_MODEf_SET
#define TLB_RX_DIG_LPBK_CFGr_DIG_LPBK_ENf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_DIG_LPBK_CFGr_DIG_LPBK_ENf_GET
#define TLB_RX_DIG_LPBK_CFGr_DIG_LPBK_ENf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_DIG_LPBK_CFGr_DIG_LPBK_ENf_SET
#define READ_TLB_RX_DIG_LPBK_CFGr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TLB_RX_DIG_LPBK_CFGr
#define WRITE_TLB_RX_DIG_LPBK_CFGr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TLB_RX_DIG_LPBK_CFGr
#define MODIFY_TLB_RX_DIG_LPBK_CFGr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TLB_RX_DIG_LPBK_CFGr
#define READLN_TLB_RX_DIG_LPBK_CFGr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TLB_RX_DIG_LPBK_CFGr
#define WRITELN_TLB_RX_DIG_LPBK_CFGr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TLB_RX_DIG_LPBK_CFGr
#define WRITEALL_TLB_RX_DIG_LPBK_CFGr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TLB_RX_DIG_LPBK_CFGr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_DIG_LPBK_CFGr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  TLB_RX_TLB_RX_MISC_CFG
 * BLOCKS:   TLB_RX
 * REGADDR:  0xd163
 * DEVAD:    1
 * DESC:     TLB RX Misc. Control
 * RESETVAL: 0x700 (1792)
 * ACCESS:   R/W
 * FIELDS:
 *     RX_PMD_DP_INVERT RX PMD Datapath Invert Control.When Enabled by writing to 1'b1, it will invert all the datapath bits of the logical lane.Recommended for use in case P and N pads are swapped on the PCB board.
 *     RX_DESCRAMBLER_EN PAM4 RX Datapath De-scrambler Enable. Applicable only for the PAM4 modes with PRBS or PCS data.Not applicable when external FEC feedback is used.1 => PAM4 RX Datapath  De-scrambler is Enabled. If rx_descrambler_en is enabled then 40 bits of the transmitted datawill be XORed with the 40 MSB bits of the fixed pattern sequence register {patt_gen_seq_14[15:0], patt_gen_seq_13[15:0], patt_gen_seq_12[15:8]}.Make sure {patt_gen_seq_14[15:0], patt_gen_seq_13[15:0], patt_gen_seq_12[15:8]} bits are only re-programmed or changed when rx_descrambler_en reg field is 1'b0.0 => PAM4 RX Datapath De-scrambler is Disabled.
 *     DBG_MASK_DIG_LPBK_EN Mask bit for dig_lpbk_en in the pmd_rx_lock equation. This is a debug register.1 => pmd_rx_lock will be forced to 1'b0 during digital loopback.0 => pmd_rx_lock will be forced to 1'b1 during digital loopback.
 *     TLB_RX_DIFF_DEC_EN 1'b1 will enable the Differential Decoder for pmd_rx_data. Only applicable to PCS RX data in OS1, 2 and 4 modes.Write it to 1'b0 for 1G OSR modes 16P5 and 20P625.
 *     TLB_RX_NRZ_LL_MODE_EN RX low latency mode enable for the NRZ OSR modes. It is not applicable to the PAM4 modes.When Enabled by writing to 1'b1 for NRZ OS modes, following will be the data format on the 40 bit RX data bus. RX data_valid will be forced to 1'b1 in this case.PCS RX data can be fed directly to the PCS TX data (with TX native analog format mode bit enabled) on the other end for Repeater Applications.OS1/2/4 modes        - 20 bits of RX data will be replicated in 2 consecutive odd/even bits to form the 40 bits data bus going out to PCS.OS8/16/32 modes      - 20 bits of over-sampled RX data will be replicated in 2 consecutive odd/even bits to form the 40 bits data bus going out to PCS.OS16.5/OS20.25 modes - 20 bits of over-sampled RX data will be replicated in 2 consecutive odd/even bits to form the 40 bits data bus going out to PCS.
 *     PAM4_GRAY_DEC_EN PAM4 Gray Decoder Enable. Enable it only for the PAM4 modes.1 => PAM4 Gray Decoder is Enabled.0 => PAM4 Gray Decoder is Disabled.
 *     PAM4_DECODER_EN  PAM4 Decoder Enable. Enable it only for the PAM4 NR mode.1 => PAM4 Decoder is Enabled.0 => PAM4 Decoder is Disabled.
 *     PAM4_RX_SYMBOL_BIT_SWAP PAM4 Symbol bits {A,B} swap enable. Enable it only for the PAM4 modes. Bit swapping is done just after the PAM4 gray decoder.1 => 2 bits PAM4 symbol bits will be swapped where PAM4 symbol bits {A,B} maps to the datastream bits {[n+1], [n]} where n is the first bit in receive order.0 => No swapping, default mode. PAM4 symbol bits {A,B} maps to the datastream bits {[n], [n+1]} where n is the first bit in receive order.
 *     PRBS_CHK_AUTO_DETECT_CNT Specifies the timer for the auto-detect search in each polynomial setting.
 *     PRBS_CHK_AUTO_DETECT_EN PRBS checker Auto detect mode enable. If enabled then it will go through all the supported PRBS polynomials in round-robin fashion and search for prbs_chk_lock=1 until AUTO-DETECT SEARCH timer is expired.
 *     PRBS_CHK_AUTO_DETECT_RELOCK_EN PRBS checker Auto detect Re-lock enable. If enabled then it will go and start the auto-detect upon loss of signal once it already found a valid AUTO-DETECT LOCK.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_TLB_RX_MISC_CFGr (0x0001d163 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_TLB_RX_MISC_CFGr_SIZE 4

/*
 * This structure should be used to declare and program TLB_RX_TLB_RX_MISC_CFG.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_TLB_RX_MISC_CFGr_s {
	uint32_t v[1];
	uint32_t tlb_rx_tlb_rx_misc_cfg[1];
	uint32_t _tlb_rx_tlb_rx_misc_cfg;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_TLB_RX_MISC_CFGr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_TLB_RX_MISC_CFGr_CLR(r) (r).tlb_rx_tlb_rx_misc_cfg[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_TLB_RX_MISC_CFGr_SET(r,d) (r).tlb_rx_tlb_rx_misc_cfg[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_TLB_RX_MISC_CFGr_GET(r) (r).tlb_rx_tlb_rx_misc_cfg[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_TLB_RX_MISC_CFGr_PRBS_CHK_AUTO_DETECT_RELOCK_ENf_GET(r) ((((r).tlb_rx_tlb_rx_misc_cfg[0]) >> 15) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_TLB_RX_MISC_CFGr_PRBS_CHK_AUTO_DETECT_RELOCK_ENf_SET(r,f) (r).tlb_rx_tlb_rx_misc_cfg[0]=(((r).tlb_rx_tlb_rx_misc_cfg[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_TLB_RX_MISC_CFGr_PRBS_CHK_AUTO_DETECT_ENf_GET(r) ((((r).tlb_rx_tlb_rx_misc_cfg[0]) >> 14) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_TLB_RX_MISC_CFGr_PRBS_CHK_AUTO_DETECT_ENf_SET(r,f) (r).tlb_rx_tlb_rx_misc_cfg[0]=(((r).tlb_rx_tlb_rx_misc_cfg[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14)) | (1 << (16 + 14))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_TLB_RX_MISC_CFGr_PRBS_CHK_AUTO_DETECT_CNTf_GET(r) ((((r).tlb_rx_tlb_rx_misc_cfg[0]) >> 8) & 0x1f)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_TLB_RX_MISC_CFGr_PRBS_CHK_AUTO_DETECT_CNTf_SET(r,f) (r).tlb_rx_tlb_rx_misc_cfg[0]=(((r).tlb_rx_tlb_rx_misc_cfg[0] & ~((uint32_t)0x1f << 8)) | ((((uint32_t)f) & 0x1f) << 8)) | (31 << (16 + 8))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_TLB_RX_MISC_CFGr_PAM4_RX_SYMBOL_BIT_SWAPf_GET(r) ((((r).tlb_rx_tlb_rx_misc_cfg[0]) >> 7) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_TLB_RX_MISC_CFGr_PAM4_RX_SYMBOL_BIT_SWAPf_SET(r,f) (r).tlb_rx_tlb_rx_misc_cfg[0]=(((r).tlb_rx_tlb_rx_misc_cfg[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_TLB_RX_MISC_CFGr_PAM4_DECODER_ENf_GET(r) ((((r).tlb_rx_tlb_rx_misc_cfg[0]) >> 6) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_TLB_RX_MISC_CFGr_PAM4_DECODER_ENf_SET(r,f) (r).tlb_rx_tlb_rx_misc_cfg[0]=(((r).tlb_rx_tlb_rx_misc_cfg[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_TLB_RX_MISC_CFGr_PAM4_GRAY_DEC_ENf_GET(r) ((((r).tlb_rx_tlb_rx_misc_cfg[0]) >> 5) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_TLB_RX_MISC_CFGr_PAM4_GRAY_DEC_ENf_SET(r,f) (r).tlb_rx_tlb_rx_misc_cfg[0]=(((r).tlb_rx_tlb_rx_misc_cfg[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_TLB_RX_MISC_CFGr_TLB_RX_NRZ_LL_MODE_ENf_GET(r) ((((r).tlb_rx_tlb_rx_misc_cfg[0]) >> 4) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_TLB_RX_MISC_CFGr_TLB_RX_NRZ_LL_MODE_ENf_SET(r,f) (r).tlb_rx_tlb_rx_misc_cfg[0]=(((r).tlb_rx_tlb_rx_misc_cfg[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_TLB_RX_MISC_CFGr_TLB_RX_DIFF_DEC_ENf_GET(r) ((((r).tlb_rx_tlb_rx_misc_cfg[0]) >> 3) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_TLB_RX_MISC_CFGr_TLB_RX_DIFF_DEC_ENf_SET(r,f) (r).tlb_rx_tlb_rx_misc_cfg[0]=(((r).tlb_rx_tlb_rx_misc_cfg[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_TLB_RX_MISC_CFGr_DBG_MASK_DIG_LPBK_ENf_GET(r) ((((r).tlb_rx_tlb_rx_misc_cfg[0]) >> 2) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_TLB_RX_MISC_CFGr_DBG_MASK_DIG_LPBK_ENf_SET(r,f) (r).tlb_rx_tlb_rx_misc_cfg[0]=(((r).tlb_rx_tlb_rx_misc_cfg[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_TLB_RX_MISC_CFGr_RX_DESCRAMBLER_ENf_GET(r) ((((r).tlb_rx_tlb_rx_misc_cfg[0]) >> 1) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_TLB_RX_MISC_CFGr_RX_DESCRAMBLER_ENf_SET(r,f) (r).tlb_rx_tlb_rx_misc_cfg[0]=(((r).tlb_rx_tlb_rx_misc_cfg[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_TLB_RX_MISC_CFGr_RX_PMD_DP_INVERTf_GET(r) (((r).tlb_rx_tlb_rx_misc_cfg[0]) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_TLB_RX_MISC_CFGr_RX_PMD_DP_INVERTf_SET(r,f) (r).tlb_rx_tlb_rx_misc_cfg[0]=(((r).tlb_rx_tlb_rx_misc_cfg[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access TLB_RX_TLB_RX_MISC_CFG.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TLB_RX_TLB_RX_MISC_CFGr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_TLB_RX_MISC_CFGr,(_r._tlb_rx_tlb_rx_misc_cfg))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TLB_RX_TLB_RX_MISC_CFGr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_TLB_RX_MISC_CFGr,(_r._tlb_rx_tlb_rx_misc_cfg)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TLB_RX_TLB_RX_MISC_CFGr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_TLB_RX_MISC_CFGr,(_r._tlb_rx_tlb_rx_misc_cfg))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TLB_RX_TLB_RX_MISC_CFGr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_TLB_RX_MISC_CFGr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_rx_tlb_rx_misc_cfg))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TLB_RX_TLB_RX_MISC_CFGr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_TLB_RX_MISC_CFGr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_rx_tlb_rx_misc_cfg))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TLB_RX_TLB_RX_MISC_CFGr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_TLB_RX_MISC_CFGr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tlb_rx_tlb_rx_misc_cfg))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TLB_RX_TLB_RX_MISC_CFGr BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_TLB_RX_MISC_CFGr
#define TLB_RX_TLB_RX_MISC_CFGr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_TLB_RX_MISC_CFGr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_TLB_RX_MISC_CFGr_t TLB_RX_TLB_RX_MISC_CFGr_t;
#define TLB_RX_TLB_RX_MISC_CFGr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_TLB_RX_MISC_CFGr_CLR
#define TLB_RX_TLB_RX_MISC_CFGr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_TLB_RX_MISC_CFGr_SET
#define TLB_RX_TLB_RX_MISC_CFGr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_TLB_RX_MISC_CFGr_GET
#define TLB_RX_TLB_RX_MISC_CFGr_PRBS_CHK_AUTO_DETECT_RELOCK_ENf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_TLB_RX_MISC_CFGr_PRBS_CHK_AUTO_DETECT_RELOCK_ENf_GET
#define TLB_RX_TLB_RX_MISC_CFGr_PRBS_CHK_AUTO_DETECT_RELOCK_ENf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_TLB_RX_MISC_CFGr_PRBS_CHK_AUTO_DETECT_RELOCK_ENf_SET
#define TLB_RX_TLB_RX_MISC_CFGr_PRBS_CHK_AUTO_DETECT_ENf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_TLB_RX_MISC_CFGr_PRBS_CHK_AUTO_DETECT_ENf_GET
#define TLB_RX_TLB_RX_MISC_CFGr_PRBS_CHK_AUTO_DETECT_ENf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_TLB_RX_MISC_CFGr_PRBS_CHK_AUTO_DETECT_ENf_SET
#define TLB_RX_TLB_RX_MISC_CFGr_PRBS_CHK_AUTO_DETECT_CNTf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_TLB_RX_MISC_CFGr_PRBS_CHK_AUTO_DETECT_CNTf_GET
#define TLB_RX_TLB_RX_MISC_CFGr_PRBS_CHK_AUTO_DETECT_CNTf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_TLB_RX_MISC_CFGr_PRBS_CHK_AUTO_DETECT_CNTf_SET
#define TLB_RX_TLB_RX_MISC_CFGr_PAM4_RX_SYMBOL_BIT_SWAPf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_TLB_RX_MISC_CFGr_PAM4_RX_SYMBOL_BIT_SWAPf_GET
#define TLB_RX_TLB_RX_MISC_CFGr_PAM4_RX_SYMBOL_BIT_SWAPf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_TLB_RX_MISC_CFGr_PAM4_RX_SYMBOL_BIT_SWAPf_SET
#define TLB_RX_TLB_RX_MISC_CFGr_PAM4_DECODER_ENf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_TLB_RX_MISC_CFGr_PAM4_DECODER_ENf_GET
#define TLB_RX_TLB_RX_MISC_CFGr_PAM4_DECODER_ENf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_TLB_RX_MISC_CFGr_PAM4_DECODER_ENf_SET
#define TLB_RX_TLB_RX_MISC_CFGr_PAM4_GRAY_DEC_ENf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_TLB_RX_MISC_CFGr_PAM4_GRAY_DEC_ENf_GET
#define TLB_RX_TLB_RX_MISC_CFGr_PAM4_GRAY_DEC_ENf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_TLB_RX_MISC_CFGr_PAM4_GRAY_DEC_ENf_SET
#define TLB_RX_TLB_RX_MISC_CFGr_TLB_RX_NRZ_LL_MODE_ENf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_TLB_RX_MISC_CFGr_TLB_RX_NRZ_LL_MODE_ENf_GET
#define TLB_RX_TLB_RX_MISC_CFGr_TLB_RX_NRZ_LL_MODE_ENf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_TLB_RX_MISC_CFGr_TLB_RX_NRZ_LL_MODE_ENf_SET
#define TLB_RX_TLB_RX_MISC_CFGr_TLB_RX_DIFF_DEC_ENf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_TLB_RX_MISC_CFGr_TLB_RX_DIFF_DEC_ENf_GET
#define TLB_RX_TLB_RX_MISC_CFGr_TLB_RX_DIFF_DEC_ENf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_TLB_RX_MISC_CFGr_TLB_RX_DIFF_DEC_ENf_SET
#define TLB_RX_TLB_RX_MISC_CFGr_DBG_MASK_DIG_LPBK_ENf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_TLB_RX_MISC_CFGr_DBG_MASK_DIG_LPBK_ENf_GET
#define TLB_RX_TLB_RX_MISC_CFGr_DBG_MASK_DIG_LPBK_ENf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_TLB_RX_MISC_CFGr_DBG_MASK_DIG_LPBK_ENf_SET
#define TLB_RX_TLB_RX_MISC_CFGr_RX_DESCRAMBLER_ENf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_TLB_RX_MISC_CFGr_RX_DESCRAMBLER_ENf_GET
#define TLB_RX_TLB_RX_MISC_CFGr_RX_DESCRAMBLER_ENf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_TLB_RX_MISC_CFGr_RX_DESCRAMBLER_ENf_SET
#define TLB_RX_TLB_RX_MISC_CFGr_RX_PMD_DP_INVERTf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_TLB_RX_MISC_CFGr_RX_PMD_DP_INVERTf_GET
#define TLB_RX_TLB_RX_MISC_CFGr_RX_PMD_DP_INVERTf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_TLB_RX_MISC_CFGr_RX_PMD_DP_INVERTf_SET
#define READ_TLB_RX_TLB_RX_MISC_CFGr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TLB_RX_TLB_RX_MISC_CFGr
#define WRITE_TLB_RX_TLB_RX_MISC_CFGr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TLB_RX_TLB_RX_MISC_CFGr
#define MODIFY_TLB_RX_TLB_RX_MISC_CFGr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TLB_RX_TLB_RX_MISC_CFGr
#define READLN_TLB_RX_TLB_RX_MISC_CFGr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TLB_RX_TLB_RX_MISC_CFGr
#define WRITELN_TLB_RX_TLB_RX_MISC_CFGr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TLB_RX_TLB_RX_MISC_CFGr
#define WRITEALL_TLB_RX_TLB_RX_MISC_CFGr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TLB_RX_TLB_RX_MISC_CFGr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_TLB_RX_MISC_CFGr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  TLB_RX_PRBS_CHK_EN_TMR_CTL
 * BLOCKS:   TLB_RX
 * REGADDR:  0xd164
 * DEVAD:    1
 * DESC:     TLB RX PRBS Checker Enable Timer Control
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     PRBS_CHK_EN_TIMER_UNIT_SEL prbs_chk_en timer unit select.3'd0 => prbs_chk_en timer is disabled and PRBS checker mode is enabled as per prbs_chk_en register.3'd1 => use use heartbeat_toggle_1us   as timer unit.3'd2 => use use heartbeat_toggle_10us  as timer unit.3'd3 => use use heartbeat_toggle_100us as timer unit.3'd4 => use use heartbeat_toggle_1ms   as timer unit.3'd5 => use use heartbeat_toggle_10ms  as timer unit.3'd6 => use use heartbeat_toggle_100ms as timer unit.3'd7 => Reserved.Make sure that only one of the 2 register settings ((prbs_chk_en_timer_unit_sel >=1 & prbs_chk_en_timer_unit_timeout > 0) and prbs_chk_burst_err_cnt_en) are TRUE at any given time and not simultaneously TRUE.
 *     PRBS_CHK_NEW_TIMER_MODE PRBS checker new timer mode enable.1 - keep the prbs checker always active irrespective of timer is enabled or not. Error counters will only count while timer is still active.timer can be started by writing prbs_chk_en_timer_unit_sel to 0 followed by a >=1 timer_unit_sel value. timer can also be started by reading the error counter prbs_chk_err_cnt_msb if prbs_chk_en_timer_unit_sel is already >=1 .0 - if timer mode is enabled then prbs checker and error counting will be only enabled while timer is active (backward compatible default mode).
 *     PRBS_CHK_EN_TIMER_UNIT_TIMEOUT PRBS checker timer timeout value.Valid value range 1 to 1022. Should be programmed before enabling the PRBS checker in timer mode. Timer value = prbs_chk_en_timer_unit_timeout * timer_unit selected by prbs_chk_en_timer_unit_sel.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_EN_TMR_CTLr (0x0001d164 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_EN_TMR_CTLr_SIZE 4

/*
 * This structure should be used to declare and program TLB_RX_PRBS_CHK_EN_TMR_CTL.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_EN_TMR_CTLr_s {
	uint32_t v[1];
	uint32_t tlb_rx_prbs_chk_en_tmr_ctl[1];
	uint32_t _tlb_rx_prbs_chk_en_tmr_ctl;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_EN_TMR_CTLr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_EN_TMR_CTLr_CLR(r) (r).tlb_rx_prbs_chk_en_tmr_ctl[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_EN_TMR_CTLr_SET(r,d) (r).tlb_rx_prbs_chk_en_tmr_ctl[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_EN_TMR_CTLr_GET(r) (r).tlb_rx_prbs_chk_en_tmr_ctl[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_EN_TMR_CTLr_PRBS_CHK_EN_TIMER_UNIT_TIMEOUTf_GET(r) ((((r).tlb_rx_prbs_chk_en_tmr_ctl[0]) >> 5) & 0x3ff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_EN_TMR_CTLr_PRBS_CHK_EN_TIMER_UNIT_TIMEOUTf_SET(r,f) (r).tlb_rx_prbs_chk_en_tmr_ctl[0]=(((r).tlb_rx_prbs_chk_en_tmr_ctl[0] & ~((uint32_t)0x3ff << 5)) | ((((uint32_t)f) & 0x3ff) << 5)) | (1023 << (16 + 5))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_EN_TMR_CTLr_PRBS_CHK_NEW_TIMER_MODEf_GET(r) ((((r).tlb_rx_prbs_chk_en_tmr_ctl[0]) >> 4) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_EN_TMR_CTLr_PRBS_CHK_NEW_TIMER_MODEf_SET(r,f) (r).tlb_rx_prbs_chk_en_tmr_ctl[0]=(((r).tlb_rx_prbs_chk_en_tmr_ctl[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_EN_TMR_CTLr_PRBS_CHK_EN_TIMER_UNIT_SELf_GET(r) (((r).tlb_rx_prbs_chk_en_tmr_ctl[0]) & 0x7)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_EN_TMR_CTLr_PRBS_CHK_EN_TIMER_UNIT_SELf_SET(r,f) (r).tlb_rx_prbs_chk_en_tmr_ctl[0]=(((r).tlb_rx_prbs_chk_en_tmr_ctl[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7)) | (0x7 << 16)

/*
 * These macros can be used to access TLB_RX_PRBS_CHK_EN_TMR_CTL.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TLB_RX_PRBS_CHK_EN_TMR_CTLr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_EN_TMR_CTLr,(_r._tlb_rx_prbs_chk_en_tmr_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TLB_RX_PRBS_CHK_EN_TMR_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_EN_TMR_CTLr,(_r._tlb_rx_prbs_chk_en_tmr_ctl)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TLB_RX_PRBS_CHK_EN_TMR_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_EN_TMR_CTLr,(_r._tlb_rx_prbs_chk_en_tmr_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TLB_RX_PRBS_CHK_EN_TMR_CTLr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_EN_TMR_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_rx_prbs_chk_en_tmr_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TLB_RX_PRBS_CHK_EN_TMR_CTLr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_EN_TMR_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_rx_prbs_chk_en_tmr_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TLB_RX_PRBS_CHK_EN_TMR_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_EN_TMR_CTLr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tlb_rx_prbs_chk_en_tmr_ctl))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TLB_RX_PRBS_CHK_EN_TMR_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_EN_TMR_CTLr
#define TLB_RX_PRBS_CHK_EN_TMR_CTLr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_EN_TMR_CTLr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_EN_TMR_CTLr_t TLB_RX_PRBS_CHK_EN_TMR_CTLr_t;
#define TLB_RX_PRBS_CHK_EN_TMR_CTLr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_EN_TMR_CTLr_CLR
#define TLB_RX_PRBS_CHK_EN_TMR_CTLr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_EN_TMR_CTLr_SET
#define TLB_RX_PRBS_CHK_EN_TMR_CTLr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_EN_TMR_CTLr_GET
#define TLB_RX_PRBS_CHK_EN_TMR_CTLr_PRBS_CHK_EN_TIMER_UNIT_TIMEOUTf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_EN_TMR_CTLr_PRBS_CHK_EN_TIMER_UNIT_TIMEOUTf_GET
#define TLB_RX_PRBS_CHK_EN_TMR_CTLr_PRBS_CHK_EN_TIMER_UNIT_TIMEOUTf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_EN_TMR_CTLr_PRBS_CHK_EN_TIMER_UNIT_TIMEOUTf_SET
#define TLB_RX_PRBS_CHK_EN_TMR_CTLr_PRBS_CHK_NEW_TIMER_MODEf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_EN_TMR_CTLr_PRBS_CHK_NEW_TIMER_MODEf_GET
#define TLB_RX_PRBS_CHK_EN_TMR_CTLr_PRBS_CHK_NEW_TIMER_MODEf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_EN_TMR_CTLr_PRBS_CHK_NEW_TIMER_MODEf_SET
#define TLB_RX_PRBS_CHK_EN_TMR_CTLr_PRBS_CHK_EN_TIMER_UNIT_SELf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_EN_TMR_CTLr_PRBS_CHK_EN_TIMER_UNIT_SELf_GET
#define TLB_RX_PRBS_CHK_EN_TMR_CTLr_PRBS_CHK_EN_TIMER_UNIT_SELf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_EN_TMR_CTLr_PRBS_CHK_EN_TIMER_UNIT_SELf_SET
#define READ_TLB_RX_PRBS_CHK_EN_TMR_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TLB_RX_PRBS_CHK_EN_TMR_CTLr
#define WRITE_TLB_RX_PRBS_CHK_EN_TMR_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TLB_RX_PRBS_CHK_EN_TMR_CTLr
#define MODIFY_TLB_RX_PRBS_CHK_EN_TMR_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TLB_RX_PRBS_CHK_EN_TMR_CTLr
#define READLN_TLB_RX_PRBS_CHK_EN_TMR_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TLB_RX_PRBS_CHK_EN_TMR_CTLr
#define WRITELN_TLB_RX_PRBS_CHK_EN_TMR_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TLB_RX_PRBS_CHK_EN_TMR_CTLr
#define WRITEALL_TLB_RX_PRBS_CHK_EN_TMR_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TLB_RX_PRBS_CHK_EN_TMR_CTLr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_EN_TMR_CTLr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  TLB_RX_PRBS_CHK_BURST_ERR_CNT_STS
 * BLOCKS:   TLB_RX
 * REGADDR:  0xd165
 * DEVAD:    1
 * DESC:     PRBS Checker Burst Error Counter Status
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     PRBS_CHK_BURST_ERR_CNT PRBS Checker Burst Error Counter Status Register. It is a clear on read register. This register countsthe number of Burst in errors separated by atleast 1 clock cycle worth of data without any bit in error.prbs_chk_burst_err_cnt_en should be set to 1'b1 for this counter to work.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_BURST_ERR_CNT_STSr (0x0001d165 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_BURST_ERR_CNT_STSr_SIZE 4

/*
 * This structure should be used to declare and program TLB_RX_PRBS_CHK_BURST_ERR_CNT_STS.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_BURST_ERR_CNT_STSr_s {
	uint32_t v[1];
	uint32_t tlb_rx_prbs_chk_burst_err_cnt_sts[1];
	uint32_t _tlb_rx_prbs_chk_burst_err_cnt_sts;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_BURST_ERR_CNT_STSr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_BURST_ERR_CNT_STSr_CLR(r) (r).tlb_rx_prbs_chk_burst_err_cnt_sts[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_BURST_ERR_CNT_STSr_SET(r,d) (r).tlb_rx_prbs_chk_burst_err_cnt_sts[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_BURST_ERR_CNT_STSr_GET(r) (r).tlb_rx_prbs_chk_burst_err_cnt_sts[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_BURST_ERR_CNT_STSr_PRBS_CHK_BURST_ERR_CNTf_GET(r) (((r).tlb_rx_prbs_chk_burst_err_cnt_sts[0]) & 0x3ff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_BURST_ERR_CNT_STSr_PRBS_CHK_BURST_ERR_CNTf_SET(r,f) (r).tlb_rx_prbs_chk_burst_err_cnt_sts[0]=(((r).tlb_rx_prbs_chk_burst_err_cnt_sts[0] & ~((uint32_t)0x3ff)) | (((uint32_t)f) & 0x3ff)) | (0x3ff << 16)

/*
 * These macros can be used to access TLB_RX_PRBS_CHK_BURST_ERR_CNT_STS.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TLB_RX_PRBS_CHK_BURST_ERR_CNT_STSr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_BURST_ERR_CNT_STSr,(_r._tlb_rx_prbs_chk_burst_err_cnt_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TLB_RX_PRBS_CHK_BURST_ERR_CNT_STSr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_BURST_ERR_CNT_STSr,(_r._tlb_rx_prbs_chk_burst_err_cnt_sts)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TLB_RX_PRBS_CHK_BURST_ERR_CNT_STSr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_BURST_ERR_CNT_STSr,(_r._tlb_rx_prbs_chk_burst_err_cnt_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TLB_RX_PRBS_CHK_BURST_ERR_CNT_STSr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_BURST_ERR_CNT_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_rx_prbs_chk_burst_err_cnt_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TLB_RX_PRBS_CHK_BURST_ERR_CNT_STSr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_BURST_ERR_CNT_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_rx_prbs_chk_burst_err_cnt_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TLB_RX_PRBS_CHK_BURST_ERR_CNT_STSr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_BURST_ERR_CNT_STSr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tlb_rx_prbs_chk_burst_err_cnt_sts))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TLB_RX_PRBS_CHK_BURST_ERR_CNT_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_BURST_ERR_CNT_STSr
#define TLB_RX_PRBS_CHK_BURST_ERR_CNT_STSr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_BURST_ERR_CNT_STSr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_BURST_ERR_CNT_STSr_t TLB_RX_PRBS_CHK_BURST_ERR_CNT_STSr_t;
#define TLB_RX_PRBS_CHK_BURST_ERR_CNT_STSr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_BURST_ERR_CNT_STSr_CLR
#define TLB_RX_PRBS_CHK_BURST_ERR_CNT_STSr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_BURST_ERR_CNT_STSr_SET
#define TLB_RX_PRBS_CHK_BURST_ERR_CNT_STSr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_BURST_ERR_CNT_STSr_GET
#define TLB_RX_PRBS_CHK_BURST_ERR_CNT_STSr_PRBS_CHK_BURST_ERR_CNTf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_BURST_ERR_CNT_STSr_PRBS_CHK_BURST_ERR_CNTf_GET
#define TLB_RX_PRBS_CHK_BURST_ERR_CNT_STSr_PRBS_CHK_BURST_ERR_CNTf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_BURST_ERR_CNT_STSr_PRBS_CHK_BURST_ERR_CNTf_SET
#define READ_TLB_RX_PRBS_CHK_BURST_ERR_CNT_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TLB_RX_PRBS_CHK_BURST_ERR_CNT_STSr
#define WRITE_TLB_RX_PRBS_CHK_BURST_ERR_CNT_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TLB_RX_PRBS_CHK_BURST_ERR_CNT_STSr
#define MODIFY_TLB_RX_PRBS_CHK_BURST_ERR_CNT_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TLB_RX_PRBS_CHK_BURST_ERR_CNT_STSr
#define READLN_TLB_RX_PRBS_CHK_BURST_ERR_CNT_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TLB_RX_PRBS_CHK_BURST_ERR_CNT_STSr
#define WRITELN_TLB_RX_PRBS_CHK_BURST_ERR_CNT_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TLB_RX_PRBS_CHK_BURST_ERR_CNT_STSr
#define WRITEALL_TLB_RX_PRBS_CHK_BURST_ERR_CNT_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TLB_RX_PRBS_CHK_BURST_ERR_CNT_STSr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_BURST_ERR_CNT_STSr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  TLB_RX_DBG_PMD_RX_LOCK_STS
 * BLOCKS:   TLB_RX
 * REGADDR:  0xd166
 * DEVAD:    1
 * DESC:     Debug PMD RX LOCK Status
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     DBG_PMD_RX_LOCK  Debug PMD RX LOCK Indication. This is a live indication of the status of the pmd_rx_lock output port.1 => PMD is in LOCKED state and RX PCS data should have acceptable BER.0 => PMD is not LOCKED yet.
 *     DBG_PMD_RX_LOCK_CHANGE Set to 1'b1 when change/transition on PMD RX LOCK. This is a sticky bit and cleared upon read. This is a debug register.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_DBG_PMD_RX_LOCK_STSr (0x0001d166 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_DBG_PMD_RX_LOCK_STSr_SIZE 4

/*
 * This structure should be used to declare and program TLB_RX_DBG_PMD_RX_LOCK_STS.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_DBG_PMD_RX_LOCK_STSr_s {
	uint32_t v[1];
	uint32_t tlb_rx_dbg_pmd_rx_lock_sts[1];
	uint32_t _tlb_rx_dbg_pmd_rx_lock_sts;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_DBG_PMD_RX_LOCK_STSr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_DBG_PMD_RX_LOCK_STSr_CLR(r) (r).tlb_rx_dbg_pmd_rx_lock_sts[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_DBG_PMD_RX_LOCK_STSr_SET(r,d) (r).tlb_rx_dbg_pmd_rx_lock_sts[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_DBG_PMD_RX_LOCK_STSr_GET(r) (r).tlb_rx_dbg_pmd_rx_lock_sts[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_DBG_PMD_RX_LOCK_STSr_DBG_PMD_RX_LOCK_CHANGEf_GET(r) ((((r).tlb_rx_dbg_pmd_rx_lock_sts[0]) >> 1) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_DBG_PMD_RX_LOCK_STSr_DBG_PMD_RX_LOCK_CHANGEf_SET(r,f) (r).tlb_rx_dbg_pmd_rx_lock_sts[0]=(((r).tlb_rx_dbg_pmd_rx_lock_sts[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_DBG_PMD_RX_LOCK_STSr_DBG_PMD_RX_LOCKf_GET(r) (((r).tlb_rx_dbg_pmd_rx_lock_sts[0]) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_DBG_PMD_RX_LOCK_STSr_DBG_PMD_RX_LOCKf_SET(r,f) (r).tlb_rx_dbg_pmd_rx_lock_sts[0]=(((r).tlb_rx_dbg_pmd_rx_lock_sts[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access TLB_RX_DBG_PMD_RX_LOCK_STS.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TLB_RX_DBG_PMD_RX_LOCK_STSr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_DBG_PMD_RX_LOCK_STSr,(_r._tlb_rx_dbg_pmd_rx_lock_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TLB_RX_DBG_PMD_RX_LOCK_STSr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_DBG_PMD_RX_LOCK_STSr,(_r._tlb_rx_dbg_pmd_rx_lock_sts)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TLB_RX_DBG_PMD_RX_LOCK_STSr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_DBG_PMD_RX_LOCK_STSr,(_r._tlb_rx_dbg_pmd_rx_lock_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TLB_RX_DBG_PMD_RX_LOCK_STSr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_DBG_PMD_RX_LOCK_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_rx_dbg_pmd_rx_lock_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TLB_RX_DBG_PMD_RX_LOCK_STSr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_DBG_PMD_RX_LOCK_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_rx_dbg_pmd_rx_lock_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TLB_RX_DBG_PMD_RX_LOCK_STSr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_DBG_PMD_RX_LOCK_STSr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tlb_rx_dbg_pmd_rx_lock_sts))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TLB_RX_DBG_PMD_RX_LOCK_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_DBG_PMD_RX_LOCK_STSr
#define TLB_RX_DBG_PMD_RX_LOCK_STSr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_DBG_PMD_RX_LOCK_STSr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_DBG_PMD_RX_LOCK_STSr_t TLB_RX_DBG_PMD_RX_LOCK_STSr_t;
#define TLB_RX_DBG_PMD_RX_LOCK_STSr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_DBG_PMD_RX_LOCK_STSr_CLR
#define TLB_RX_DBG_PMD_RX_LOCK_STSr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_DBG_PMD_RX_LOCK_STSr_SET
#define TLB_RX_DBG_PMD_RX_LOCK_STSr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_DBG_PMD_RX_LOCK_STSr_GET
#define TLB_RX_DBG_PMD_RX_LOCK_STSr_DBG_PMD_RX_LOCK_CHANGEf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_DBG_PMD_RX_LOCK_STSr_DBG_PMD_RX_LOCK_CHANGEf_GET
#define TLB_RX_DBG_PMD_RX_LOCK_STSr_DBG_PMD_RX_LOCK_CHANGEf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_DBG_PMD_RX_LOCK_STSr_DBG_PMD_RX_LOCK_CHANGEf_SET
#define TLB_RX_DBG_PMD_RX_LOCK_STSr_DBG_PMD_RX_LOCKf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_DBG_PMD_RX_LOCK_STSr_DBG_PMD_RX_LOCKf_GET
#define TLB_RX_DBG_PMD_RX_LOCK_STSr_DBG_PMD_RX_LOCKf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_DBG_PMD_RX_LOCK_STSr_DBG_PMD_RX_LOCKf_SET
#define READ_TLB_RX_DBG_PMD_RX_LOCK_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TLB_RX_DBG_PMD_RX_LOCK_STSr
#define WRITE_TLB_RX_DBG_PMD_RX_LOCK_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TLB_RX_DBG_PMD_RX_LOCK_STSr
#define MODIFY_TLB_RX_DBG_PMD_RX_LOCK_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TLB_RX_DBG_PMD_RX_LOCK_STSr
#define READLN_TLB_RX_DBG_PMD_RX_LOCK_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TLB_RX_DBG_PMD_RX_LOCK_STSr
#define WRITELN_TLB_RX_DBG_PMD_RX_LOCK_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TLB_RX_DBG_PMD_RX_LOCK_STSr
#define WRITEALL_TLB_RX_DBG_PMD_RX_LOCK_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TLB_RX_DBG_PMD_RX_LOCK_STSr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_DBG_PMD_RX_LOCK_STSr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  TLB_RX_UC_PMD_RX_LOCK_STS
 * BLOCKS:   TLB_RX
 * REGADDR:  0xd167
 * DEVAD:    1
 * DESC:     Debug PMD RX LOCK Status
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     UC_PMD_RX_LOCK   Debug PMD RX LOCK Indication. This is a live indication of the status of the pmd_rx_lock output port.1 => PMD is in LOCKED state and RX PCS data should have acceptable BER.0 => PMD is not LOCKED yet.
 *     UC_PMD_RX_LOCK_CHANGE Set to 1'b1 when change/transition on PMD RX LOCK. This is a sticky bit and cleared upon read. This is a debug register.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_UC_PMD_RX_LOCK_STSr (0x0001d167 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_UC_PMD_RX_LOCK_STSr_SIZE 4

/*
 * This structure should be used to declare and program TLB_RX_UC_PMD_RX_LOCK_STS.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_UC_PMD_RX_LOCK_STSr_s {
	uint32_t v[1];
	uint32_t tlb_rx_uc_pmd_rx_lock_sts[1];
	uint32_t _tlb_rx_uc_pmd_rx_lock_sts;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_UC_PMD_RX_LOCK_STSr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_UC_PMD_RX_LOCK_STSr_CLR(r) (r).tlb_rx_uc_pmd_rx_lock_sts[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_UC_PMD_RX_LOCK_STSr_SET(r,d) (r).tlb_rx_uc_pmd_rx_lock_sts[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_UC_PMD_RX_LOCK_STSr_GET(r) (r).tlb_rx_uc_pmd_rx_lock_sts[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_UC_PMD_RX_LOCK_STSr_UC_PMD_RX_LOCK_CHANGEf_GET(r) ((((r).tlb_rx_uc_pmd_rx_lock_sts[0]) >> 1) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_UC_PMD_RX_LOCK_STSr_UC_PMD_RX_LOCK_CHANGEf_SET(r,f) (r).tlb_rx_uc_pmd_rx_lock_sts[0]=(((r).tlb_rx_uc_pmd_rx_lock_sts[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_UC_PMD_RX_LOCK_STSr_UC_PMD_RX_LOCKf_GET(r) (((r).tlb_rx_uc_pmd_rx_lock_sts[0]) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_UC_PMD_RX_LOCK_STSr_UC_PMD_RX_LOCKf_SET(r,f) (r).tlb_rx_uc_pmd_rx_lock_sts[0]=(((r).tlb_rx_uc_pmd_rx_lock_sts[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access TLB_RX_UC_PMD_RX_LOCK_STS.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TLB_RX_UC_PMD_RX_LOCK_STSr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_UC_PMD_RX_LOCK_STSr,(_r._tlb_rx_uc_pmd_rx_lock_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TLB_RX_UC_PMD_RX_LOCK_STSr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_UC_PMD_RX_LOCK_STSr,(_r._tlb_rx_uc_pmd_rx_lock_sts)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TLB_RX_UC_PMD_RX_LOCK_STSr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_UC_PMD_RX_LOCK_STSr,(_r._tlb_rx_uc_pmd_rx_lock_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TLB_RX_UC_PMD_RX_LOCK_STSr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_UC_PMD_RX_LOCK_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_rx_uc_pmd_rx_lock_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TLB_RX_UC_PMD_RX_LOCK_STSr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_UC_PMD_RX_LOCK_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_rx_uc_pmd_rx_lock_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TLB_RX_UC_PMD_RX_LOCK_STSr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_UC_PMD_RX_LOCK_STSr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tlb_rx_uc_pmd_rx_lock_sts))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TLB_RX_UC_PMD_RX_LOCK_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_UC_PMD_RX_LOCK_STSr
#define TLB_RX_UC_PMD_RX_LOCK_STSr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_UC_PMD_RX_LOCK_STSr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_UC_PMD_RX_LOCK_STSr_t TLB_RX_UC_PMD_RX_LOCK_STSr_t;
#define TLB_RX_UC_PMD_RX_LOCK_STSr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_UC_PMD_RX_LOCK_STSr_CLR
#define TLB_RX_UC_PMD_RX_LOCK_STSr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_UC_PMD_RX_LOCK_STSr_SET
#define TLB_RX_UC_PMD_RX_LOCK_STSr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_UC_PMD_RX_LOCK_STSr_GET
#define TLB_RX_UC_PMD_RX_LOCK_STSr_UC_PMD_RX_LOCK_CHANGEf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_UC_PMD_RX_LOCK_STSr_UC_PMD_RX_LOCK_CHANGEf_GET
#define TLB_RX_UC_PMD_RX_LOCK_STSr_UC_PMD_RX_LOCK_CHANGEf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_UC_PMD_RX_LOCK_STSr_UC_PMD_RX_LOCK_CHANGEf_SET
#define TLB_RX_UC_PMD_RX_LOCK_STSr_UC_PMD_RX_LOCKf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_UC_PMD_RX_LOCK_STSr_UC_PMD_RX_LOCKf_GET
#define TLB_RX_UC_PMD_RX_LOCK_STSr_UC_PMD_RX_LOCKf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_UC_PMD_RX_LOCK_STSr_UC_PMD_RX_LOCKf_SET
#define READ_TLB_RX_UC_PMD_RX_LOCK_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TLB_RX_UC_PMD_RX_LOCK_STSr
#define WRITE_TLB_RX_UC_PMD_RX_LOCK_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TLB_RX_UC_PMD_RX_LOCK_STSr
#define MODIFY_TLB_RX_UC_PMD_RX_LOCK_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TLB_RX_UC_PMD_RX_LOCK_STSr
#define READLN_TLB_RX_UC_PMD_RX_LOCK_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TLB_RX_UC_PMD_RX_LOCK_STSr
#define WRITELN_TLB_RX_UC_PMD_RX_LOCK_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TLB_RX_UC_PMD_RX_LOCK_STSr
#define WRITEALL_TLB_RX_UC_PMD_RX_LOCK_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TLB_RX_UC_PMD_RX_LOCK_STSr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_UC_PMD_RX_LOCK_STSr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  TLB_RX_DIG_LPBK_PD_STS
 * BLOCKS:   TLB_RX
 * REGADDR:  0xd168
 * DEVAD:    1
 * DESC:     Digital Loopback Status
 * RESETVAL: 0x2 (2)
 * ACCESS:   R/O
 * FIELDS:
 *     DIG_LPBK_PD_LATE_IND 1 means dp_rclk20 is sampling data late so reduce the delay of the dp_rclk20 clock phase. This will result in RX PI phase step decrement.
 *     DIG_LPBK_PD_EARLY_IND 1 means dp_rclk20 is sampling data earlier so delay the dp_rclk20 clock phase. This will result in RX PI phase step increment.
 *     PRBS_CHK_AUTO_DETECT_LOCK Live indication of AUTO-DETECT Lock. Set to 1'b1 once auto-detect finds the PRBS lock.
 *     PRBS_CHK_INV_AUTO_DETECT Valid only when prbs_chk_auto_detect_lock=1. Indicates te PRBS polynomial invert bit.
 *     PRBS_CHK_MODE_SEL_AUTO_DETECT Valid only when prbs_chk_auto_detect_lock=1. Equivalent to prbs_chk_mode_sel     register in auto-detect mode.
 *     PRBS_CHK_MODE_SEL_MSB_AUTO_DETECT Valid only when prbs_chk_auto_detect_lock=1. Equivalent to prbs_chk_mode_sel_msb register in auto-detect mode.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_DIG_LPBK_PD_STSr (0x0001d168 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_DIG_LPBK_PD_STSr_SIZE 4

/*
 * This structure should be used to declare and program TLB_RX_DIG_LPBK_PD_STS.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_DIG_LPBK_PD_STSr_s {
	uint32_t v[1];
	uint32_t tlb_rx_dig_lpbk_pd_sts[1];
	uint32_t _tlb_rx_dig_lpbk_pd_sts;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_DIG_LPBK_PD_STSr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_DIG_LPBK_PD_STSr_CLR(r) (r).tlb_rx_dig_lpbk_pd_sts[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_DIG_LPBK_PD_STSr_SET(r,d) (r).tlb_rx_dig_lpbk_pd_sts[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_DIG_LPBK_PD_STSr_GET(r) (r).tlb_rx_dig_lpbk_pd_sts[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_DIG_LPBK_PD_STSr_PRBS_CHK_MODE_SEL_MSB_AUTO_DETECTf_GET(r) ((((r).tlb_rx_dig_lpbk_pd_sts[0]) >> 13) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_DIG_LPBK_PD_STSr_PRBS_CHK_MODE_SEL_MSB_AUTO_DETECTf_SET(r,f) (r).tlb_rx_dig_lpbk_pd_sts[0]=(((r).tlb_rx_dig_lpbk_pd_sts[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13)) | (1 << (16 + 13))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_DIG_LPBK_PD_STSr_PRBS_CHK_MODE_SEL_AUTO_DETECTf_GET(r) ((((r).tlb_rx_dig_lpbk_pd_sts[0]) >> 10) & 0x7)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_DIG_LPBK_PD_STSr_PRBS_CHK_MODE_SEL_AUTO_DETECTf_SET(r,f) (r).tlb_rx_dig_lpbk_pd_sts[0]=(((r).tlb_rx_dig_lpbk_pd_sts[0] & ~((uint32_t)0x7 << 10)) | ((((uint32_t)f) & 0x7) << 10)) | (7 << (16 + 10))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_DIG_LPBK_PD_STSr_PRBS_CHK_INV_AUTO_DETECTf_GET(r) ((((r).tlb_rx_dig_lpbk_pd_sts[0]) >> 9) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_DIG_LPBK_PD_STSr_PRBS_CHK_INV_AUTO_DETECTf_SET(r,f) (r).tlb_rx_dig_lpbk_pd_sts[0]=(((r).tlb_rx_dig_lpbk_pd_sts[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9)) | (1 << (16 + 9))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_DIG_LPBK_PD_STSr_PRBS_CHK_AUTO_DETECT_LOCKf_GET(r) ((((r).tlb_rx_dig_lpbk_pd_sts[0]) >> 8) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_DIG_LPBK_PD_STSr_PRBS_CHK_AUTO_DETECT_LOCKf_SET(r,f) (r).tlb_rx_dig_lpbk_pd_sts[0]=(((r).tlb_rx_dig_lpbk_pd_sts[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8)) | (1 << (16 + 8))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_DIG_LPBK_PD_STSr_DIG_LPBK_PD_EARLY_INDf_GET(r) ((((r).tlb_rx_dig_lpbk_pd_sts[0]) >> 1) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_DIG_LPBK_PD_STSr_DIG_LPBK_PD_EARLY_INDf_SET(r,f) (r).tlb_rx_dig_lpbk_pd_sts[0]=(((r).tlb_rx_dig_lpbk_pd_sts[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_DIG_LPBK_PD_STSr_DIG_LPBK_PD_LATE_INDf_GET(r) (((r).tlb_rx_dig_lpbk_pd_sts[0]) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_DIG_LPBK_PD_STSr_DIG_LPBK_PD_LATE_INDf_SET(r,f) (r).tlb_rx_dig_lpbk_pd_sts[0]=(((r).tlb_rx_dig_lpbk_pd_sts[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access TLB_RX_DIG_LPBK_PD_STS.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TLB_RX_DIG_LPBK_PD_STSr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_DIG_LPBK_PD_STSr,(_r._tlb_rx_dig_lpbk_pd_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TLB_RX_DIG_LPBK_PD_STSr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_DIG_LPBK_PD_STSr,(_r._tlb_rx_dig_lpbk_pd_sts)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TLB_RX_DIG_LPBK_PD_STSr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_DIG_LPBK_PD_STSr,(_r._tlb_rx_dig_lpbk_pd_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TLB_RX_DIG_LPBK_PD_STSr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_DIG_LPBK_PD_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_rx_dig_lpbk_pd_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TLB_RX_DIG_LPBK_PD_STSr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_DIG_LPBK_PD_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_rx_dig_lpbk_pd_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TLB_RX_DIG_LPBK_PD_STSr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_DIG_LPBK_PD_STSr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tlb_rx_dig_lpbk_pd_sts))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TLB_RX_DIG_LPBK_PD_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_DIG_LPBK_PD_STSr
#define TLB_RX_DIG_LPBK_PD_STSr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_DIG_LPBK_PD_STSr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_DIG_LPBK_PD_STSr_t TLB_RX_DIG_LPBK_PD_STSr_t;
#define TLB_RX_DIG_LPBK_PD_STSr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_DIG_LPBK_PD_STSr_CLR
#define TLB_RX_DIG_LPBK_PD_STSr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_DIG_LPBK_PD_STSr_SET
#define TLB_RX_DIG_LPBK_PD_STSr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_DIG_LPBK_PD_STSr_GET
#define TLB_RX_DIG_LPBK_PD_STSr_PRBS_CHK_MODE_SEL_MSB_AUTO_DETECTf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_DIG_LPBK_PD_STSr_PRBS_CHK_MODE_SEL_MSB_AUTO_DETECTf_GET
#define TLB_RX_DIG_LPBK_PD_STSr_PRBS_CHK_MODE_SEL_MSB_AUTO_DETECTf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_DIG_LPBK_PD_STSr_PRBS_CHK_MODE_SEL_MSB_AUTO_DETECTf_SET
#define TLB_RX_DIG_LPBK_PD_STSr_PRBS_CHK_MODE_SEL_AUTO_DETECTf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_DIG_LPBK_PD_STSr_PRBS_CHK_MODE_SEL_AUTO_DETECTf_GET
#define TLB_RX_DIG_LPBK_PD_STSr_PRBS_CHK_MODE_SEL_AUTO_DETECTf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_DIG_LPBK_PD_STSr_PRBS_CHK_MODE_SEL_AUTO_DETECTf_SET
#define TLB_RX_DIG_LPBK_PD_STSr_PRBS_CHK_INV_AUTO_DETECTf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_DIG_LPBK_PD_STSr_PRBS_CHK_INV_AUTO_DETECTf_GET
#define TLB_RX_DIG_LPBK_PD_STSr_PRBS_CHK_INV_AUTO_DETECTf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_DIG_LPBK_PD_STSr_PRBS_CHK_INV_AUTO_DETECTf_SET
#define TLB_RX_DIG_LPBK_PD_STSr_PRBS_CHK_AUTO_DETECT_LOCKf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_DIG_LPBK_PD_STSr_PRBS_CHK_AUTO_DETECT_LOCKf_GET
#define TLB_RX_DIG_LPBK_PD_STSr_PRBS_CHK_AUTO_DETECT_LOCKf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_DIG_LPBK_PD_STSr_PRBS_CHK_AUTO_DETECT_LOCKf_SET
#define TLB_RX_DIG_LPBK_PD_STSr_DIG_LPBK_PD_EARLY_INDf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_DIG_LPBK_PD_STSr_DIG_LPBK_PD_EARLY_INDf_GET
#define TLB_RX_DIG_LPBK_PD_STSr_DIG_LPBK_PD_EARLY_INDf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_DIG_LPBK_PD_STSr_DIG_LPBK_PD_EARLY_INDf_SET
#define TLB_RX_DIG_LPBK_PD_STSr_DIG_LPBK_PD_LATE_INDf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_DIG_LPBK_PD_STSr_DIG_LPBK_PD_LATE_INDf_GET
#define TLB_RX_DIG_LPBK_PD_STSr_DIG_LPBK_PD_LATE_INDf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_DIG_LPBK_PD_STSr_DIG_LPBK_PD_LATE_INDf_SET
#define READ_TLB_RX_DIG_LPBK_PD_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TLB_RX_DIG_LPBK_PD_STSr
#define WRITE_TLB_RX_DIG_LPBK_PD_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TLB_RX_DIG_LPBK_PD_STSr
#define MODIFY_TLB_RX_DIG_LPBK_PD_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TLB_RX_DIG_LPBK_PD_STSr
#define READLN_TLB_RX_DIG_LPBK_PD_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TLB_RX_DIG_LPBK_PD_STSr
#define WRITELN_TLB_RX_DIG_LPBK_PD_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TLB_RX_DIG_LPBK_PD_STSr
#define WRITEALL_TLB_RX_DIG_LPBK_PD_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TLB_RX_DIG_LPBK_PD_STSr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_DIG_LPBK_PD_STSr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  TLB_RX_PRBS_CHK_LOCK_STS
 * BLOCKS:   TLB_RX
 * REGADDR:  0xd169
 * DEVAD:    1
 * DESC:     PRBS Checker LOCK Status
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     PRBS_CHK_LOCK    PRBS Checker LOCK Indication. This is a live indication of the status of the PRBS Checker state machine.1 => PRBS Checker is in LOCKED state.0 => PRBS Checker is out of LOCK state and state machine is searching for a LOCK.
 *     PRBS_CHK_ERR_CNT_NO_CLR PRBS Checker Error Counter which does not get cleared upon read.MSB bit 14 is OR of the MSB bits [30:14] of the internal error counter.LSB bits [13:0] are assigned to LSB bits [13:0] of the internal error counter.It can be cleared by reading the status register prbs_chk_err_cnt_msb.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_LOCK_STSr (0x0001d169 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_LOCK_STSr_SIZE 4

/*
 * This structure should be used to declare and program TLB_RX_PRBS_CHK_LOCK_STS.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_LOCK_STSr_s {
	uint32_t v[1];
	uint32_t tlb_rx_prbs_chk_lock_sts[1];
	uint32_t _tlb_rx_prbs_chk_lock_sts;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_LOCK_STSr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_LOCK_STSr_CLR(r) (r).tlb_rx_prbs_chk_lock_sts[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_LOCK_STSr_SET(r,d) (r).tlb_rx_prbs_chk_lock_sts[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_LOCK_STSr_GET(r) (r).tlb_rx_prbs_chk_lock_sts[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_LOCK_STSr_PRBS_CHK_ERR_CNT_NO_CLRf_GET(r) ((((r).tlb_rx_prbs_chk_lock_sts[0]) >> 1) & 0x7fff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_LOCK_STSr_PRBS_CHK_ERR_CNT_NO_CLRf_SET(r,f) (r).tlb_rx_prbs_chk_lock_sts[0]=(((r).tlb_rx_prbs_chk_lock_sts[0] & ~((uint32_t)0x7fff << 1)) | ((((uint32_t)f) & 0x7fff) << 1)) | (32767 << (16 + 1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_LOCK_STSr_PRBS_CHK_LOCKf_GET(r) (((r).tlb_rx_prbs_chk_lock_sts[0]) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_LOCK_STSr_PRBS_CHK_LOCKf_SET(r,f) (r).tlb_rx_prbs_chk_lock_sts[0]=(((r).tlb_rx_prbs_chk_lock_sts[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access TLB_RX_PRBS_CHK_LOCK_STS.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TLB_RX_PRBS_CHK_LOCK_STSr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_LOCK_STSr,(_r._tlb_rx_prbs_chk_lock_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TLB_RX_PRBS_CHK_LOCK_STSr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_LOCK_STSr,(_r._tlb_rx_prbs_chk_lock_sts)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TLB_RX_PRBS_CHK_LOCK_STSr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_LOCK_STSr,(_r._tlb_rx_prbs_chk_lock_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TLB_RX_PRBS_CHK_LOCK_STSr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_LOCK_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_rx_prbs_chk_lock_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TLB_RX_PRBS_CHK_LOCK_STSr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_LOCK_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_rx_prbs_chk_lock_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TLB_RX_PRBS_CHK_LOCK_STSr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_LOCK_STSr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tlb_rx_prbs_chk_lock_sts))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TLB_RX_PRBS_CHK_LOCK_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_LOCK_STSr
#define TLB_RX_PRBS_CHK_LOCK_STSr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_LOCK_STSr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_LOCK_STSr_t TLB_RX_PRBS_CHK_LOCK_STSr_t;
#define TLB_RX_PRBS_CHK_LOCK_STSr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_LOCK_STSr_CLR
#define TLB_RX_PRBS_CHK_LOCK_STSr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_LOCK_STSr_SET
#define TLB_RX_PRBS_CHK_LOCK_STSr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_LOCK_STSr_GET
#define TLB_RX_PRBS_CHK_LOCK_STSr_PRBS_CHK_ERR_CNT_NO_CLRf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_LOCK_STSr_PRBS_CHK_ERR_CNT_NO_CLRf_GET
#define TLB_RX_PRBS_CHK_LOCK_STSr_PRBS_CHK_ERR_CNT_NO_CLRf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_LOCK_STSr_PRBS_CHK_ERR_CNT_NO_CLRf_SET
#define TLB_RX_PRBS_CHK_LOCK_STSr_PRBS_CHK_LOCKf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_LOCK_STSr_PRBS_CHK_LOCKf_GET
#define TLB_RX_PRBS_CHK_LOCK_STSr_PRBS_CHK_LOCKf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_LOCK_STSr_PRBS_CHK_LOCKf_SET
#define READ_TLB_RX_PRBS_CHK_LOCK_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TLB_RX_PRBS_CHK_LOCK_STSr
#define WRITE_TLB_RX_PRBS_CHK_LOCK_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TLB_RX_PRBS_CHK_LOCK_STSr
#define MODIFY_TLB_RX_PRBS_CHK_LOCK_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TLB_RX_PRBS_CHK_LOCK_STSr
#define READLN_TLB_RX_PRBS_CHK_LOCK_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TLB_RX_PRBS_CHK_LOCK_STSr
#define WRITELN_TLB_RX_PRBS_CHK_LOCK_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TLB_RX_PRBS_CHK_LOCK_STSr
#define WRITEALL_TLB_RX_PRBS_CHK_LOCK_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TLB_RX_PRBS_CHK_LOCK_STSr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_LOCK_STSr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  TLB_RX_PRBS_CHK_ERR_CNT_MSB_STS
 * BLOCKS:   TLB_RX
 * REGADDR:  0xd16a
 * DEVAD:    1
 * DESC:     PRBS Checker Error Counter MSB Status
 * RESETVAL: 0x8000 (32768)
 * ACCESS:   R/O
 * FIELDS:
 *     PRBS_CHK_ERR_CNT_MSB 15 bits MSB portion of PRBS Checker Error Counter Status Register. It is a clear on read register.Once MSB bits [30:16] of the counter are read then LSB bits [15:0] of the error counter is loadedinto a holding register and internal PRBS error counter's all bits are cleared to 0s(or if there are any error in that particular clock cycle then that will be loaded).MSB portion must be read first before reading the LSB portion of the error counter.
 *     PRBS_CHK_LOCK_LOST_LH PRBS Checker LOCK_LOST Latch High Indication. This register captures the 1->0 transition on theprbs_chk_lock live status register and keep it latched until read. This is a clear on read status register.prbs_chk_lock_lost_lh status bit also indicate other PRBS checker states as below.- PRBS Checker is currently not enabled ||- PRBS Checker is currently not locked ||- PRBS_LOCK was lost when checker was enabled since the last read
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STSr (0x0001d16a | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STSr_SIZE 4

/*
 * This structure should be used to declare and program TLB_RX_PRBS_CHK_ERR_CNT_MSB_STS.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STSr_s {
	uint32_t v[1];
	uint32_t tlb_rx_prbs_chk_err_cnt_msb_sts[1];
	uint32_t _tlb_rx_prbs_chk_err_cnt_msb_sts;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STSr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STSr_CLR(r) (r).tlb_rx_prbs_chk_err_cnt_msb_sts[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STSr_SET(r,d) (r).tlb_rx_prbs_chk_err_cnt_msb_sts[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STSr_GET(r) (r).tlb_rx_prbs_chk_err_cnt_msb_sts[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STSr_PRBS_CHK_LOCK_LOST_LHf_GET(r) ((((r).tlb_rx_prbs_chk_err_cnt_msb_sts[0]) >> 15) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STSr_PRBS_CHK_LOCK_LOST_LHf_SET(r,f) (r).tlb_rx_prbs_chk_err_cnt_msb_sts[0]=(((r).tlb_rx_prbs_chk_err_cnt_msb_sts[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STSr_PRBS_CHK_ERR_CNT_MSBf_GET(r) (((r).tlb_rx_prbs_chk_err_cnt_msb_sts[0]) & 0x7fff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STSr_PRBS_CHK_ERR_CNT_MSBf_SET(r,f) (r).tlb_rx_prbs_chk_err_cnt_msb_sts[0]=(((r).tlb_rx_prbs_chk_err_cnt_msb_sts[0] & ~((uint32_t)0x7fff)) | (((uint32_t)f) & 0x7fff)) | (0x7fff << 16)

/*
 * These macros can be used to access TLB_RX_PRBS_CHK_ERR_CNT_MSB_STS.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STSr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STSr,(_r._tlb_rx_prbs_chk_err_cnt_msb_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STSr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STSr,(_r._tlb_rx_prbs_chk_err_cnt_msb_sts)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STSr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STSr,(_r._tlb_rx_prbs_chk_err_cnt_msb_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STSr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_rx_prbs_chk_err_cnt_msb_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STSr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_rx_prbs_chk_err_cnt_msb_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STSr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STSr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tlb_rx_prbs_chk_err_cnt_msb_sts))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TLB_RX_PRBS_CHK_ERR_CNT_MSB_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STSr
#define TLB_RX_PRBS_CHK_ERR_CNT_MSB_STSr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STSr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STSr_t TLB_RX_PRBS_CHK_ERR_CNT_MSB_STSr_t;
#define TLB_RX_PRBS_CHK_ERR_CNT_MSB_STSr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STSr_CLR
#define TLB_RX_PRBS_CHK_ERR_CNT_MSB_STSr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STSr_SET
#define TLB_RX_PRBS_CHK_ERR_CNT_MSB_STSr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STSr_GET
#define TLB_RX_PRBS_CHK_ERR_CNT_MSB_STSr_PRBS_CHK_LOCK_LOST_LHf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STSr_PRBS_CHK_LOCK_LOST_LHf_GET
#define TLB_RX_PRBS_CHK_ERR_CNT_MSB_STSr_PRBS_CHK_LOCK_LOST_LHf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STSr_PRBS_CHK_LOCK_LOST_LHf_SET
#define TLB_RX_PRBS_CHK_ERR_CNT_MSB_STSr_PRBS_CHK_ERR_CNT_MSBf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STSr_PRBS_CHK_ERR_CNT_MSBf_GET
#define TLB_RX_PRBS_CHK_ERR_CNT_MSB_STSr_PRBS_CHK_ERR_CNT_MSBf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STSr_PRBS_CHK_ERR_CNT_MSBf_SET
#define READ_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STSr
#define WRITE_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STSr
#define MODIFY_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STSr
#define READLN_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STSr
#define WRITELN_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STSr
#define WRITEALL_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STSr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_MSB_STSr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  TLB_RX_PRBS_CHK_ERR_CNT_LSB_STS
 * BLOCKS:   TLB_RX
 * REGADDR:  0xd16b
 * DEVAD:    1
 * DESC:     PRBS Checker Error Counter LSB Status
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     PRBS_CHK_ERR_CNT_LSB 16 bits LSB portion of PRBS Checker Error Counter Status Register. This register indicatesthe value in the holding register when MSB portion [30:16] of the error counter are read.MSB portion must be read first before reading the LSB portion of the error counter.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_LSB_STSr (0x0001d16b | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_LSB_STSr_SIZE 4

/*
 * This structure should be used to declare and program TLB_RX_PRBS_CHK_ERR_CNT_LSB_STS.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_LSB_STSr_s {
	uint32_t v[1];
	uint32_t tlb_rx_prbs_chk_err_cnt_lsb_sts[1];
	uint32_t _tlb_rx_prbs_chk_err_cnt_lsb_sts;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_LSB_STSr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_LSB_STSr_CLR(r) (r).tlb_rx_prbs_chk_err_cnt_lsb_sts[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_LSB_STSr_SET(r,d) (r).tlb_rx_prbs_chk_err_cnt_lsb_sts[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_LSB_STSr_GET(r) (r).tlb_rx_prbs_chk_err_cnt_lsb_sts[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_LSB_STSr_PRBS_CHK_ERR_CNT_LSBf_GET(r) (((r).tlb_rx_prbs_chk_err_cnt_lsb_sts[0]) & 0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_LSB_STSr_PRBS_CHK_ERR_CNT_LSBf_SET(r,f) (r).tlb_rx_prbs_chk_err_cnt_lsb_sts[0]=(((r).tlb_rx_prbs_chk_err_cnt_lsb_sts[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access TLB_RX_PRBS_CHK_ERR_CNT_LSB_STS.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TLB_RX_PRBS_CHK_ERR_CNT_LSB_STSr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_LSB_STSr,(_r._tlb_rx_prbs_chk_err_cnt_lsb_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TLB_RX_PRBS_CHK_ERR_CNT_LSB_STSr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_LSB_STSr,(_r._tlb_rx_prbs_chk_err_cnt_lsb_sts)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TLB_RX_PRBS_CHK_ERR_CNT_LSB_STSr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_LSB_STSr,(_r._tlb_rx_prbs_chk_err_cnt_lsb_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TLB_RX_PRBS_CHK_ERR_CNT_LSB_STSr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_LSB_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_rx_prbs_chk_err_cnt_lsb_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TLB_RX_PRBS_CHK_ERR_CNT_LSB_STSr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_LSB_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_rx_prbs_chk_err_cnt_lsb_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TLB_RX_PRBS_CHK_ERR_CNT_LSB_STSr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_LSB_STSr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tlb_rx_prbs_chk_err_cnt_lsb_sts))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TLB_RX_PRBS_CHK_ERR_CNT_LSB_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_LSB_STSr
#define TLB_RX_PRBS_CHK_ERR_CNT_LSB_STSr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_LSB_STSr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_LSB_STSr_t TLB_RX_PRBS_CHK_ERR_CNT_LSB_STSr_t;
#define TLB_RX_PRBS_CHK_ERR_CNT_LSB_STSr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_LSB_STSr_CLR
#define TLB_RX_PRBS_CHK_ERR_CNT_LSB_STSr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_LSB_STSr_SET
#define TLB_RX_PRBS_CHK_ERR_CNT_LSB_STSr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_LSB_STSr_GET
#define TLB_RX_PRBS_CHK_ERR_CNT_LSB_STSr_PRBS_CHK_ERR_CNT_LSBf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_LSB_STSr_PRBS_CHK_ERR_CNT_LSBf_GET
#define TLB_RX_PRBS_CHK_ERR_CNT_LSB_STSr_PRBS_CHK_ERR_CNT_LSBf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_LSB_STSr_PRBS_CHK_ERR_CNT_LSBf_SET
#define READ_TLB_RX_PRBS_CHK_ERR_CNT_LSB_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TLB_RX_PRBS_CHK_ERR_CNT_LSB_STSr
#define WRITE_TLB_RX_PRBS_CHK_ERR_CNT_LSB_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TLB_RX_PRBS_CHK_ERR_CNT_LSB_STSr
#define MODIFY_TLB_RX_PRBS_CHK_ERR_CNT_LSB_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TLB_RX_PRBS_CHK_ERR_CNT_LSB_STSr
#define READLN_TLB_RX_PRBS_CHK_ERR_CNT_LSB_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TLB_RX_PRBS_CHK_ERR_CNT_LSB_STSr
#define WRITELN_TLB_RX_PRBS_CHK_ERR_CNT_LSB_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TLB_RX_PRBS_CHK_ERR_CNT_LSB_STSr
#define WRITEALL_TLB_RX_PRBS_CHK_ERR_CNT_LSB_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TLB_RX_PRBS_CHK_ERR_CNT_LSB_STSr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_CHK_ERR_CNT_LSB_STSr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  TLB_RX_PMD_RX_LOCK_STS
 * BLOCKS:   TLB_RX
 * REGADDR:  0xd16c
 * DEVAD:    1
 * DESC:     PMD RX LOCK Status
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     PMD_RX_LOCK      PMD RX LOCK Indication. This is a live indication of the status of the pmd_rx_lock output port.1 => PMD is in LOCKED state and RX PCS data should have acceptable BER.0 => PMD is not LOCKED yet.
 *     PMD_RX_LOCK_CHANGE Set to 1'b1 when change/transition on PMD RX LOCK. This is a sticky bit and cleared upon read.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PMD_RX_LOCK_STSr (0x0001d16c | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PMD_RX_LOCK_STSr_SIZE 4

/*
 * This structure should be used to declare and program TLB_RX_PMD_RX_LOCK_STS.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PMD_RX_LOCK_STSr_s {
	uint32_t v[1];
	uint32_t tlb_rx_pmd_rx_lock_sts[1];
	uint32_t _tlb_rx_pmd_rx_lock_sts;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PMD_RX_LOCK_STSr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PMD_RX_LOCK_STSr_CLR(r) (r).tlb_rx_pmd_rx_lock_sts[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PMD_RX_LOCK_STSr_SET(r,d) (r).tlb_rx_pmd_rx_lock_sts[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PMD_RX_LOCK_STSr_GET(r) (r).tlb_rx_pmd_rx_lock_sts[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PMD_RX_LOCK_STSr_PMD_RX_LOCK_CHANGEf_GET(r) ((((r).tlb_rx_pmd_rx_lock_sts[0]) >> 1) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PMD_RX_LOCK_STSr_PMD_RX_LOCK_CHANGEf_SET(r,f) (r).tlb_rx_pmd_rx_lock_sts[0]=(((r).tlb_rx_pmd_rx_lock_sts[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PMD_RX_LOCK_STSr_PMD_RX_LOCKf_GET(r) (((r).tlb_rx_pmd_rx_lock_sts[0]) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PMD_RX_LOCK_STSr_PMD_RX_LOCKf_SET(r,f) (r).tlb_rx_pmd_rx_lock_sts[0]=(((r).tlb_rx_pmd_rx_lock_sts[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access TLB_RX_PMD_RX_LOCK_STS.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TLB_RX_PMD_RX_LOCK_STSr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PMD_RX_LOCK_STSr,(_r._tlb_rx_pmd_rx_lock_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TLB_RX_PMD_RX_LOCK_STSr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PMD_RX_LOCK_STSr,(_r._tlb_rx_pmd_rx_lock_sts)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TLB_RX_PMD_RX_LOCK_STSr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PMD_RX_LOCK_STSr,(_r._tlb_rx_pmd_rx_lock_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TLB_RX_PMD_RX_LOCK_STSr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PMD_RX_LOCK_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_rx_pmd_rx_lock_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TLB_RX_PMD_RX_LOCK_STSr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PMD_RX_LOCK_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_rx_pmd_rx_lock_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TLB_RX_PMD_RX_LOCK_STSr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PMD_RX_LOCK_STSr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tlb_rx_pmd_rx_lock_sts))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TLB_RX_PMD_RX_LOCK_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PMD_RX_LOCK_STSr
#define TLB_RX_PMD_RX_LOCK_STSr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PMD_RX_LOCK_STSr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PMD_RX_LOCK_STSr_t TLB_RX_PMD_RX_LOCK_STSr_t;
#define TLB_RX_PMD_RX_LOCK_STSr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PMD_RX_LOCK_STSr_CLR
#define TLB_RX_PMD_RX_LOCK_STSr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PMD_RX_LOCK_STSr_SET
#define TLB_RX_PMD_RX_LOCK_STSr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PMD_RX_LOCK_STSr_GET
#define TLB_RX_PMD_RX_LOCK_STSr_PMD_RX_LOCK_CHANGEf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PMD_RX_LOCK_STSr_PMD_RX_LOCK_CHANGEf_GET
#define TLB_RX_PMD_RX_LOCK_STSr_PMD_RX_LOCK_CHANGEf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PMD_RX_LOCK_STSr_PMD_RX_LOCK_CHANGEf_SET
#define TLB_RX_PMD_RX_LOCK_STSr_PMD_RX_LOCKf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PMD_RX_LOCK_STSr_PMD_RX_LOCKf_GET
#define TLB_RX_PMD_RX_LOCK_STSr_PMD_RX_LOCKf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PMD_RX_LOCK_STSr_PMD_RX_LOCKf_SET
#define READ_TLB_RX_PMD_RX_LOCK_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TLB_RX_PMD_RX_LOCK_STSr
#define WRITE_TLB_RX_PMD_RX_LOCK_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TLB_RX_PMD_RX_LOCK_STSr
#define MODIFY_TLB_RX_PMD_RX_LOCK_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TLB_RX_PMD_RX_LOCK_STSr
#define READLN_TLB_RX_PMD_RX_LOCK_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TLB_RX_PMD_RX_LOCK_STSr
#define WRITELN_TLB_RX_PMD_RX_LOCK_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TLB_RX_PMD_RX_LOCK_STSr
#define WRITEALL_TLB_RX_PMD_RX_LOCK_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TLB_RX_PMD_RX_LOCK_STSr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PMD_RX_LOCK_STSr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  TLB_RX_PRBS_BURST_ERR_LEN_STS
 * BLOCKS:   TLB_RX
 * REGADDR:  0xd16d
 * DEVAD:    1
 * DESC:     PRBS Burst Error Length Status
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     PRBS_BURST_ERR_LENGTH_STATUS PRBS burst error length count. This the live indication of the live status of the PRBS burst error length and max at 6'd63. This register is cleared upon read.This register is supported for all the data traffic modes but only required for NRZ OSR modes OS1, OS2 and OS4 and PAM4 NR/PAM4 ER modes with and without Back Channel enabled.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_BURST_ERR_LEN_STSr (0x0001d16d | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_BURST_ERR_LEN_STSr_SIZE 4

/*
 * This structure should be used to declare and program TLB_RX_PRBS_BURST_ERR_LEN_STS.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_BURST_ERR_LEN_STSr_s {
	uint32_t v[1];
	uint32_t tlb_rx_prbs_burst_err_len_sts[1];
	uint32_t _tlb_rx_prbs_burst_err_len_sts;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_BURST_ERR_LEN_STSr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_BURST_ERR_LEN_STSr_CLR(r) (r).tlb_rx_prbs_burst_err_len_sts[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_BURST_ERR_LEN_STSr_SET(r,d) (r).tlb_rx_prbs_burst_err_len_sts[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_BURST_ERR_LEN_STSr_GET(r) (r).tlb_rx_prbs_burst_err_len_sts[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_BURST_ERR_LEN_STSr_PRBS_BURST_ERR_LENGTH_STATUSf_GET(r) (((r).tlb_rx_prbs_burst_err_len_sts[0]) & 0x3f)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_BURST_ERR_LEN_STSr_PRBS_BURST_ERR_LENGTH_STATUSf_SET(r,f) (r).tlb_rx_prbs_burst_err_len_sts[0]=(((r).tlb_rx_prbs_burst_err_len_sts[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f)) | (0x3f << 16)

/*
 * These macros can be used to access TLB_RX_PRBS_BURST_ERR_LEN_STS.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TLB_RX_PRBS_BURST_ERR_LEN_STSr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_BURST_ERR_LEN_STSr,(_r._tlb_rx_prbs_burst_err_len_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TLB_RX_PRBS_BURST_ERR_LEN_STSr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_BURST_ERR_LEN_STSr,(_r._tlb_rx_prbs_burst_err_len_sts)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TLB_RX_PRBS_BURST_ERR_LEN_STSr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_BURST_ERR_LEN_STSr,(_r._tlb_rx_prbs_burst_err_len_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TLB_RX_PRBS_BURST_ERR_LEN_STSr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_BURST_ERR_LEN_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_rx_prbs_burst_err_len_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TLB_RX_PRBS_BURST_ERR_LEN_STSr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_BURST_ERR_LEN_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_rx_prbs_burst_err_len_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TLB_RX_PRBS_BURST_ERR_LEN_STSr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_BURST_ERR_LEN_STSr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tlb_rx_prbs_burst_err_len_sts))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TLB_RX_PRBS_BURST_ERR_LEN_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_BURST_ERR_LEN_STSr
#define TLB_RX_PRBS_BURST_ERR_LEN_STSr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_BURST_ERR_LEN_STSr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_BURST_ERR_LEN_STSr_t TLB_RX_PRBS_BURST_ERR_LEN_STSr_t;
#define TLB_RX_PRBS_BURST_ERR_LEN_STSr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_BURST_ERR_LEN_STSr_CLR
#define TLB_RX_PRBS_BURST_ERR_LEN_STSr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_BURST_ERR_LEN_STSr_SET
#define TLB_RX_PRBS_BURST_ERR_LEN_STSr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_BURST_ERR_LEN_STSr_GET
#define TLB_RX_PRBS_BURST_ERR_LEN_STSr_PRBS_BURST_ERR_LENGTH_STATUSf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_BURST_ERR_LEN_STSr_PRBS_BURST_ERR_LENGTH_STATUSf_GET
#define TLB_RX_PRBS_BURST_ERR_LEN_STSr_PRBS_BURST_ERR_LENGTH_STATUSf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_BURST_ERR_LEN_STSr_PRBS_BURST_ERR_LENGTH_STATUSf_SET
#define READ_TLB_RX_PRBS_BURST_ERR_LEN_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TLB_RX_PRBS_BURST_ERR_LEN_STSr
#define WRITE_TLB_RX_PRBS_BURST_ERR_LEN_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TLB_RX_PRBS_BURST_ERR_LEN_STSr
#define MODIFY_TLB_RX_PRBS_BURST_ERR_LEN_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TLB_RX_PRBS_BURST_ERR_LEN_STSr
#define READLN_TLB_RX_PRBS_BURST_ERR_LEN_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TLB_RX_PRBS_BURST_ERR_LEN_STSr
#define WRITELN_TLB_RX_PRBS_BURST_ERR_LEN_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TLB_RX_PRBS_BURST_ERR_LEN_STSr
#define WRITEALL_TLB_RX_PRBS_BURST_ERR_LEN_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TLB_RX_PRBS_BURST_ERR_LEN_STSr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_PRBS_BURST_ERR_LEN_STSr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  TLB_RX_MAX_PRBS_BURST_ERR_LEN_STS
 * BLOCKS:   TLB_RX
 * REGADDR:  0xd16e
 * DEVAD:    1
 * DESC:     PRBS Burst Error Maximum Length Status
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     MAX_PRBS_BURST_ERR_LENGTH_STATUS PRBS burst error max length count. This the status of the PRBS burst error max length and max at 6'd63. This register is cleared upon read.This register is supported for all the data traffic modes but only required for NRZ OSR modes OS1, OS2 and OS4 and PAM4 NR/PAM4 ER modes with and without Back Channel enabled.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_MAX_PRBS_BURST_ERR_LEN_STSr (0x0001d16e | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_MAX_PRBS_BURST_ERR_LEN_STSr_SIZE 4

/*
 * This structure should be used to declare and program TLB_RX_MAX_PRBS_BURST_ERR_LEN_STS.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_MAX_PRBS_BURST_ERR_LEN_STSr_s {
	uint32_t v[1];
	uint32_t tlb_rx_max_prbs_burst_err_len_sts[1];
	uint32_t _tlb_rx_max_prbs_burst_err_len_sts;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_MAX_PRBS_BURST_ERR_LEN_STSr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_MAX_PRBS_BURST_ERR_LEN_STSr_CLR(r) (r).tlb_rx_max_prbs_burst_err_len_sts[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_MAX_PRBS_BURST_ERR_LEN_STSr_SET(r,d) (r).tlb_rx_max_prbs_burst_err_len_sts[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_MAX_PRBS_BURST_ERR_LEN_STSr_GET(r) (r).tlb_rx_max_prbs_burst_err_len_sts[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_MAX_PRBS_BURST_ERR_LEN_STSr_MAX_PRBS_BURST_ERR_LENGTH_STATUSf_GET(r) (((r).tlb_rx_max_prbs_burst_err_len_sts[0]) & 0x3f)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_MAX_PRBS_BURST_ERR_LEN_STSr_MAX_PRBS_BURST_ERR_LENGTH_STATUSf_SET(r,f) (r).tlb_rx_max_prbs_burst_err_len_sts[0]=(((r).tlb_rx_max_prbs_burst_err_len_sts[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f)) | (0x3f << 16)

/*
 * These macros can be used to access TLB_RX_MAX_PRBS_BURST_ERR_LEN_STS.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TLB_RX_MAX_PRBS_BURST_ERR_LEN_STSr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_MAX_PRBS_BURST_ERR_LEN_STSr,(_r._tlb_rx_max_prbs_burst_err_len_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TLB_RX_MAX_PRBS_BURST_ERR_LEN_STSr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_MAX_PRBS_BURST_ERR_LEN_STSr,(_r._tlb_rx_max_prbs_burst_err_len_sts)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TLB_RX_MAX_PRBS_BURST_ERR_LEN_STSr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_MAX_PRBS_BURST_ERR_LEN_STSr,(_r._tlb_rx_max_prbs_burst_err_len_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TLB_RX_MAX_PRBS_BURST_ERR_LEN_STSr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_MAX_PRBS_BURST_ERR_LEN_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_rx_max_prbs_burst_err_len_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TLB_RX_MAX_PRBS_BURST_ERR_LEN_STSr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_MAX_PRBS_BURST_ERR_LEN_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_rx_max_prbs_burst_err_len_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TLB_RX_MAX_PRBS_BURST_ERR_LEN_STSr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_MAX_PRBS_BURST_ERR_LEN_STSr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tlb_rx_max_prbs_burst_err_len_sts))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TLB_RX_MAX_PRBS_BURST_ERR_LEN_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_MAX_PRBS_BURST_ERR_LEN_STSr
#define TLB_RX_MAX_PRBS_BURST_ERR_LEN_STSr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_MAX_PRBS_BURST_ERR_LEN_STSr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_MAX_PRBS_BURST_ERR_LEN_STSr_t TLB_RX_MAX_PRBS_BURST_ERR_LEN_STSr_t;
#define TLB_RX_MAX_PRBS_BURST_ERR_LEN_STSr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_MAX_PRBS_BURST_ERR_LEN_STSr_CLR
#define TLB_RX_MAX_PRBS_BURST_ERR_LEN_STSr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_MAX_PRBS_BURST_ERR_LEN_STSr_SET
#define TLB_RX_MAX_PRBS_BURST_ERR_LEN_STSr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_MAX_PRBS_BURST_ERR_LEN_STSr_GET
#define TLB_RX_MAX_PRBS_BURST_ERR_LEN_STSr_MAX_PRBS_BURST_ERR_LENGTH_STATUSf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_MAX_PRBS_BURST_ERR_LEN_STSr_MAX_PRBS_BURST_ERR_LENGTH_STATUSf_GET
#define TLB_RX_MAX_PRBS_BURST_ERR_LEN_STSr_MAX_PRBS_BURST_ERR_LENGTH_STATUSf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_MAX_PRBS_BURST_ERR_LEN_STSr_MAX_PRBS_BURST_ERR_LENGTH_STATUSf_SET
#define READ_TLB_RX_MAX_PRBS_BURST_ERR_LEN_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TLB_RX_MAX_PRBS_BURST_ERR_LEN_STSr
#define WRITE_TLB_RX_MAX_PRBS_BURST_ERR_LEN_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TLB_RX_MAX_PRBS_BURST_ERR_LEN_STSr
#define MODIFY_TLB_RX_MAX_PRBS_BURST_ERR_LEN_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TLB_RX_MAX_PRBS_BURST_ERR_LEN_STSr
#define READLN_TLB_RX_MAX_PRBS_BURST_ERR_LEN_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TLB_RX_MAX_PRBS_BURST_ERR_LEN_STSr
#define WRITELN_TLB_RX_MAX_PRBS_BURST_ERR_LEN_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TLB_RX_MAX_PRBS_BURST_ERR_LEN_STSr
#define WRITEALL_TLB_RX_MAX_PRBS_BURST_ERR_LEN_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TLB_RX_MAX_PRBS_BURST_ERR_LEN_STSr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_MAX_PRBS_BURST_ERR_LEN_STSr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  TLB_TX_PATGEN_CFG
 * BLOCKS:   TLB_TX
 * REGADDR:  0xd170
 * DEVAD:    1
 * DESC:     Pattern Generator Control
 * RESETVAL: 0xb000 (45056)
 * ACCESS:   R/W
 * FIELDS:
 *     PATT_GEN_EN      Fixed pattern generator enable.1 => enable  the fixed pattern generator.0 => disable the fixed pattern generator.
 *     PAM4_TX_LINEARITY_PATT_EN PAM4 Transmitter Linearity Pattern Enable. Lower priority than pam4_tx_jp03b_patt_en if both bits are enabled simultaneously. Make sure gray encoder and PAM4 precoder is disabled for this fixed pattern mode.1 => enable  the fixed pattern for PAM4 Transmitter Linearity Pattern of 320 bits (i.e. 160 symbols) long repeating pattern of 10 PAM4 levels of {-1, -1/3, +1/3, +1, -1, +1, -1, +1, +1/3, -1/3} whereeach level is 16UI in duration.  Program reg field {patt_gen_seq_1[3:0], patt_gen_seq_0[15:0]} bits = 20'b_0001_1011_0011_0011_1001 = 20'h1B339 before enabling this pattern.Transmission order is MSB first.  If this bit is enabled then make sure that other lane fixed pattern do not use fixed pattern 20 bit chunk of bits 19:0.0 => disable the PAM4 Transmitter Linearity Pattern generation.
 *     PAM4_TX_JP03B_PATT_EN JP03B Fixed Pattern Enable. Higher priority than pam4_tx_linearity_patt_en if both bits are enabled simultaneously. Make sure gray encoder and PAM4 precoder is disabled for this fixed pattern mode.1 => Enable  the fixed pattern for JP03B pattern of 124 bits (i.e. 62 symbols) long repeating pattern of {15{00,11}} + {16{11,00}}. Program reg field patt_gen_seq_1[15:8] bits = 8'b_0011_1100 = 8'h3C before enabling this pattern.Transmission order is MSB first. If this bit is enabled then make sure that other lane fixed pattern do not use fixed pattern 20 bit chunk of bits 39:20.0 => Disable the JP03B fixed pattern generation.C
 *     PATT_GEN_STOP_POS Valid values are 11 to 0. Defines the stop  position of the pattern in 20 bit chunks.This register value should be less than or equal to rg_patt_gen_start_pos.11 means stop at bit  220,10 means stop at bit  200, ...,0 means stop at bit    0so stop  bit is (rg_patt_gen_stop_pos*20).
 *     PATT_GEN_START_POS Valid values are 11 to 0. Defines the start position of the pattern in 20 bit chunks.11 means start at bit 239,10 means start at bit 219, ...,0 means start at bit  19so start bit is (rg_patt_gen_start_pos*20 + 19).
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_PATGEN_CFGr (0x0001d170 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_PATGEN_CFGr_SIZE 4

/*
 * This structure should be used to declare and program TLB_TX_PATGEN_CFG.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_PATGEN_CFGr_s {
	uint32_t v[1];
	uint32_t tlb_tx_patgen_cfg[1];
	uint32_t _tlb_tx_patgen_cfg;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_PATGEN_CFGr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_PATGEN_CFGr_CLR(r) (r).tlb_tx_patgen_cfg[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_PATGEN_CFGr_SET(r,d) (r).tlb_tx_patgen_cfg[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_PATGEN_CFGr_GET(r) (r).tlb_tx_patgen_cfg[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_PATGEN_CFGr_PATT_GEN_START_POSf_GET(r) ((((r).tlb_tx_patgen_cfg[0]) >> 12) & 0xf)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_PATGEN_CFGr_PATT_GEN_START_POSf_SET(r,f) (r).tlb_tx_patgen_cfg[0]=(((r).tlb_tx_patgen_cfg[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12)) | (15 << (16 + 12))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_PATGEN_CFGr_PATT_GEN_STOP_POSf_GET(r) ((((r).tlb_tx_patgen_cfg[0]) >> 8) & 0xf)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_PATGEN_CFGr_PATT_GEN_STOP_POSf_SET(r,f) (r).tlb_tx_patgen_cfg[0]=(((r).tlb_tx_patgen_cfg[0] & ~((uint32_t)0xf << 8)) | ((((uint32_t)f) & 0xf) << 8)) | (15 << (16 + 8))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_PATGEN_CFGr_PAM4_TX_JP03B_PATT_ENf_GET(r) ((((r).tlb_tx_patgen_cfg[0]) >> 7) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_PATGEN_CFGr_PAM4_TX_JP03B_PATT_ENf_SET(r,f) (r).tlb_tx_patgen_cfg[0]=(((r).tlb_tx_patgen_cfg[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_PATGEN_CFGr_PAM4_TX_LINEARITY_PATT_ENf_GET(r) ((((r).tlb_tx_patgen_cfg[0]) >> 6) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_PATGEN_CFGr_PAM4_TX_LINEARITY_PATT_ENf_SET(r,f) (r).tlb_tx_patgen_cfg[0]=(((r).tlb_tx_patgen_cfg[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_PATGEN_CFGr_PATT_GEN_ENf_GET(r) (((r).tlb_tx_patgen_cfg[0]) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_PATGEN_CFGr_PATT_GEN_ENf_SET(r,f) (r).tlb_tx_patgen_cfg[0]=(((r).tlb_tx_patgen_cfg[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access TLB_TX_PATGEN_CFG.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TLB_TX_PATGEN_CFGr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_PATGEN_CFGr,(_r._tlb_tx_patgen_cfg))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TLB_TX_PATGEN_CFGr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_PATGEN_CFGr,(_r._tlb_tx_patgen_cfg)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TLB_TX_PATGEN_CFGr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_PATGEN_CFGr,(_r._tlb_tx_patgen_cfg))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TLB_TX_PATGEN_CFGr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_PATGEN_CFGr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_tx_patgen_cfg))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TLB_TX_PATGEN_CFGr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_PATGEN_CFGr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_tx_patgen_cfg))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TLB_TX_PATGEN_CFGr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_PATGEN_CFGr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tlb_tx_patgen_cfg))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TLB_TX_PATGEN_CFGr BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_PATGEN_CFGr
#define TLB_TX_PATGEN_CFGr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_PATGEN_CFGr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_PATGEN_CFGr_t TLB_TX_PATGEN_CFGr_t;
#define TLB_TX_PATGEN_CFGr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_PATGEN_CFGr_CLR
#define TLB_TX_PATGEN_CFGr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_PATGEN_CFGr_SET
#define TLB_TX_PATGEN_CFGr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_PATGEN_CFGr_GET
#define TLB_TX_PATGEN_CFGr_PATT_GEN_START_POSf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_PATGEN_CFGr_PATT_GEN_START_POSf_GET
#define TLB_TX_PATGEN_CFGr_PATT_GEN_START_POSf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_PATGEN_CFGr_PATT_GEN_START_POSf_SET
#define TLB_TX_PATGEN_CFGr_PATT_GEN_STOP_POSf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_PATGEN_CFGr_PATT_GEN_STOP_POSf_GET
#define TLB_TX_PATGEN_CFGr_PATT_GEN_STOP_POSf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_PATGEN_CFGr_PATT_GEN_STOP_POSf_SET
#define TLB_TX_PATGEN_CFGr_PAM4_TX_JP03B_PATT_ENf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_PATGEN_CFGr_PAM4_TX_JP03B_PATT_ENf_GET
#define TLB_TX_PATGEN_CFGr_PAM4_TX_JP03B_PATT_ENf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_PATGEN_CFGr_PAM4_TX_JP03B_PATT_ENf_SET
#define TLB_TX_PATGEN_CFGr_PAM4_TX_LINEARITY_PATT_ENf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_PATGEN_CFGr_PAM4_TX_LINEARITY_PATT_ENf_GET
#define TLB_TX_PATGEN_CFGr_PAM4_TX_LINEARITY_PATT_ENf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_PATGEN_CFGr_PAM4_TX_LINEARITY_PATT_ENf_SET
#define TLB_TX_PATGEN_CFGr_PATT_GEN_ENf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_PATGEN_CFGr_PATT_GEN_ENf_GET
#define TLB_TX_PATGEN_CFGr_PATT_GEN_ENf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_PATGEN_CFGr_PATT_GEN_ENf_SET
#define READ_TLB_TX_PATGEN_CFGr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TLB_TX_PATGEN_CFGr
#define WRITE_TLB_TX_PATGEN_CFGr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TLB_TX_PATGEN_CFGr
#define MODIFY_TLB_TX_PATGEN_CFGr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TLB_TX_PATGEN_CFGr
#define READLN_TLB_TX_PATGEN_CFGr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TLB_TX_PATGEN_CFGr
#define WRITELN_TLB_TX_PATGEN_CFGr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TLB_TX_PATGEN_CFGr
#define WRITEALL_TLB_TX_PATGEN_CFGr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TLB_TX_PATGEN_CFGr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_PATGEN_CFGr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  TLB_TX_PRBS_GEN_CFG
 * BLOCKS:   TLB_TX
 * REGADDR:  0xd171
 * DEVAD:    1
 * DESC:     PRBS Generator Control
 * RESETVAL: 0xa (10)
 * ACCESS:   R/W
 * FIELDS:
 *     PRBS_GEN_EN      PRBS generator enable.1 => enable  the PRBS generator.0 => disable the PRBS generator.
 *     PRBS_GEN_MODE_SEL PRBS generator mode select. Selects the PRBS polynomial as shown below3'd0 -> PRBS 73'd1 -> PRBS 93'd2 -> PRBS 113'd3 -> PRBS 153'd4 -> PRBS 233'd5 -> PRBS 313'd6 -> PRBS 58 (1 + x^39 + x^58)3'd7 -> PRBS 49 (1 + x^40 + x^49)
 *     PRBS_GEN_INV     PRBS Invert enable.1 => will invert all the data bits from the PRBS generator.0 => will send normal data from the PRBS generator.
 *     PRBS_GEN_ERR_INS PRBS Error Insert.0 to 1 transition on this signal will insert single bit error in the MSB bit of the data bus.
 *     PRBS_GEN_MODE_SEL_MSB Extending PRBS polynomial select by using this bit as bit[3] alongwith prbs_gen_mode_sel[2:0].1'b0 will select old PRBS polynomials for PRBS 7, 9, 11, 15, 23, 31, 49 and 58 based on prbs_gen_mode_sel[2:0].1'b1 will select new PRBS polynomials for PRBS 10, 20, 13 for PAM4 based on prbs_gen_mode_sel[2:0].1'b1 & prbs_gen_mode_sel[2:0] == 0 will select PRBS 10.1'b1 & prbs_gen_mode_sel[2:0] == 1 will select PRBS 20.1'b1 & prbs_gen_mode_sel[2:0] == 2 will select PRBS 13  with polynomial (1+x^1+x^2+x^12+x^13). This pattern is also used for PAM4 Link Training Lane 0 pattern.1'b1 & prbs_gen_mode_sel[2:0] == 3 is reserved for future use.1'b1 & prbs_gen_mode_sel[2:0] == 4 will select PAM4 Link Training Lane 1 PRBS 13  polynomial (1 + x2 + x3 + x7  + x13). Debug modes so auto-detect and self-sync mode is not supported.1'b1 & prbs_gen_mode_sel[2:0] == 5 will select PAM4 Link Training Lane 2 PRBS 13  polynomial (1 + x2 + x4 + x8  + x13). Debug modes so auto-detect and self-sync mode is not supported.1'b1 & prbs_gen_mode_sel[2:0] == 6 will select PAM4 Link Training Lane 3 PRBS 13  polynomial (1 + x2 + x5 + x9  + x13). Debug modes so auto-detect and self-sync mode is not supported.1'b1 & prbs_gen_mode_sel[2:0] == 7 is reserved for future use.
 *     PRBS_GEN_SEED_STROBE PRBS Generator Seed Strobe (debug register). It is a self clear register bit.Wrting to 1 will seed the PRBS generator for 1 clock cycle. PRBS generator is reset/seed when prbs_gen_en is disabled -> enabled but if polynomial is changed while prbs_gen_en = 1 then this register can be used to seed the generator. Seed value is based on the lane number.
 *     PRBS_GEN_PAUSE_STROBE PRBS Generator Pause Strobe (debug register). It is a self clear register bit.Wrting to 1 will pause the PRBS generator for 1 clock cycle which means same 40 bits data will be replicated in the paused clock cycle. This will result into loss of prbs checker lock on the link partner.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_PRBS_GEN_CFGr (0x0001d171 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_PRBS_GEN_CFGr_SIZE 4

/*
 * This structure should be used to declare and program TLB_TX_PRBS_GEN_CFG.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_PRBS_GEN_CFGr_s {
	uint32_t v[1];
	uint32_t tlb_tx_prbs_gen_cfg[1];
	uint32_t _tlb_tx_prbs_gen_cfg;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_PRBS_GEN_CFGr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_PRBS_GEN_CFGr_CLR(r) (r).tlb_tx_prbs_gen_cfg[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_PRBS_GEN_CFGr_SET(r,d) (r).tlb_tx_prbs_gen_cfg[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_PRBS_GEN_CFGr_GET(r) (r).tlb_tx_prbs_gen_cfg[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_PRBS_GEN_CFGr_PRBS_GEN_PAUSE_STROBEf_GET(r) ((((r).tlb_tx_prbs_gen_cfg[0]) >> 15) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_PRBS_GEN_CFGr_PRBS_GEN_PAUSE_STROBEf_SET(r,f) (r).tlb_tx_prbs_gen_cfg[0]=(((r).tlb_tx_prbs_gen_cfg[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_PRBS_GEN_CFGr_PRBS_GEN_SEED_STROBEf_GET(r) ((((r).tlb_tx_prbs_gen_cfg[0]) >> 14) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_PRBS_GEN_CFGr_PRBS_GEN_SEED_STROBEf_SET(r,f) (r).tlb_tx_prbs_gen_cfg[0]=(((r).tlb_tx_prbs_gen_cfg[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14)) | (1 << (16 + 14))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_PRBS_GEN_CFGr_PRBS_GEN_MODE_SEL_MSBf_GET(r) ((((r).tlb_tx_prbs_gen_cfg[0]) >> 12) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_PRBS_GEN_CFGr_PRBS_GEN_MODE_SEL_MSBf_SET(r,f) (r).tlb_tx_prbs_gen_cfg[0]=(((r).tlb_tx_prbs_gen_cfg[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12)) | (1 << (16 + 12))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_PRBS_GEN_CFGr_PRBS_GEN_ERR_INSf_GET(r) ((((r).tlb_tx_prbs_gen_cfg[0]) >> 5) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_PRBS_GEN_CFGr_PRBS_GEN_ERR_INSf_SET(r,f) (r).tlb_tx_prbs_gen_cfg[0]=(((r).tlb_tx_prbs_gen_cfg[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_PRBS_GEN_CFGr_PRBS_GEN_INVf_GET(r) ((((r).tlb_tx_prbs_gen_cfg[0]) >> 4) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_PRBS_GEN_CFGr_PRBS_GEN_INVf_SET(r,f) (r).tlb_tx_prbs_gen_cfg[0]=(((r).tlb_tx_prbs_gen_cfg[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_PRBS_GEN_CFGr_PRBS_GEN_MODE_SELf_GET(r) ((((r).tlb_tx_prbs_gen_cfg[0]) >> 1) & 0x7)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_PRBS_GEN_CFGr_PRBS_GEN_MODE_SELf_SET(r,f) (r).tlb_tx_prbs_gen_cfg[0]=(((r).tlb_tx_prbs_gen_cfg[0] & ~((uint32_t)0x7 << 1)) | ((((uint32_t)f) & 0x7) << 1)) | (7 << (16 + 1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_PRBS_GEN_CFGr_PRBS_GEN_ENf_GET(r) (((r).tlb_tx_prbs_gen_cfg[0]) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_PRBS_GEN_CFGr_PRBS_GEN_ENf_SET(r,f) (r).tlb_tx_prbs_gen_cfg[0]=(((r).tlb_tx_prbs_gen_cfg[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access TLB_TX_PRBS_GEN_CFG.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TLB_TX_PRBS_GEN_CFGr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_PRBS_GEN_CFGr,(_r._tlb_tx_prbs_gen_cfg))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TLB_TX_PRBS_GEN_CFGr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_PRBS_GEN_CFGr,(_r._tlb_tx_prbs_gen_cfg)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TLB_TX_PRBS_GEN_CFGr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_PRBS_GEN_CFGr,(_r._tlb_tx_prbs_gen_cfg))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TLB_TX_PRBS_GEN_CFGr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_PRBS_GEN_CFGr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_tx_prbs_gen_cfg))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TLB_TX_PRBS_GEN_CFGr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_PRBS_GEN_CFGr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_tx_prbs_gen_cfg))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TLB_TX_PRBS_GEN_CFGr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_PRBS_GEN_CFGr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tlb_tx_prbs_gen_cfg))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TLB_TX_PRBS_GEN_CFGr BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_PRBS_GEN_CFGr
#define TLB_TX_PRBS_GEN_CFGr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_PRBS_GEN_CFGr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_PRBS_GEN_CFGr_t TLB_TX_PRBS_GEN_CFGr_t;
#define TLB_TX_PRBS_GEN_CFGr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_PRBS_GEN_CFGr_CLR
#define TLB_TX_PRBS_GEN_CFGr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_PRBS_GEN_CFGr_SET
#define TLB_TX_PRBS_GEN_CFGr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_PRBS_GEN_CFGr_GET
#define TLB_TX_PRBS_GEN_CFGr_PRBS_GEN_PAUSE_STROBEf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_PRBS_GEN_CFGr_PRBS_GEN_PAUSE_STROBEf_GET
#define TLB_TX_PRBS_GEN_CFGr_PRBS_GEN_PAUSE_STROBEf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_PRBS_GEN_CFGr_PRBS_GEN_PAUSE_STROBEf_SET
#define TLB_TX_PRBS_GEN_CFGr_PRBS_GEN_SEED_STROBEf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_PRBS_GEN_CFGr_PRBS_GEN_SEED_STROBEf_GET
#define TLB_TX_PRBS_GEN_CFGr_PRBS_GEN_SEED_STROBEf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_PRBS_GEN_CFGr_PRBS_GEN_SEED_STROBEf_SET
#define TLB_TX_PRBS_GEN_CFGr_PRBS_GEN_MODE_SEL_MSBf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_PRBS_GEN_CFGr_PRBS_GEN_MODE_SEL_MSBf_GET
#define TLB_TX_PRBS_GEN_CFGr_PRBS_GEN_MODE_SEL_MSBf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_PRBS_GEN_CFGr_PRBS_GEN_MODE_SEL_MSBf_SET
#define TLB_TX_PRBS_GEN_CFGr_PRBS_GEN_ERR_INSf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_PRBS_GEN_CFGr_PRBS_GEN_ERR_INSf_GET
#define TLB_TX_PRBS_GEN_CFGr_PRBS_GEN_ERR_INSf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_PRBS_GEN_CFGr_PRBS_GEN_ERR_INSf_SET
#define TLB_TX_PRBS_GEN_CFGr_PRBS_GEN_INVf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_PRBS_GEN_CFGr_PRBS_GEN_INVf_GET
#define TLB_TX_PRBS_GEN_CFGr_PRBS_GEN_INVf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_PRBS_GEN_CFGr_PRBS_GEN_INVf_SET
#define TLB_TX_PRBS_GEN_CFGr_PRBS_GEN_MODE_SELf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_PRBS_GEN_CFGr_PRBS_GEN_MODE_SELf_GET
#define TLB_TX_PRBS_GEN_CFGr_PRBS_GEN_MODE_SELf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_PRBS_GEN_CFGr_PRBS_GEN_MODE_SELf_SET
#define TLB_TX_PRBS_GEN_CFGr_PRBS_GEN_ENf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_PRBS_GEN_CFGr_PRBS_GEN_ENf_GET
#define TLB_TX_PRBS_GEN_CFGr_PRBS_GEN_ENf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_PRBS_GEN_CFGr_PRBS_GEN_ENf_SET
#define READ_TLB_TX_PRBS_GEN_CFGr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TLB_TX_PRBS_GEN_CFGr
#define WRITE_TLB_TX_PRBS_GEN_CFGr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TLB_TX_PRBS_GEN_CFGr
#define MODIFY_TLB_TX_PRBS_GEN_CFGr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TLB_TX_PRBS_GEN_CFGr
#define READLN_TLB_TX_PRBS_GEN_CFGr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TLB_TX_PRBS_GEN_CFGr
#define WRITELN_TLB_TX_PRBS_GEN_CFGr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TLB_TX_PRBS_GEN_CFGr
#define WRITEALL_TLB_TX_PRBS_GEN_CFGr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TLB_TX_PRBS_GEN_CFGr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_PRBS_GEN_CFGr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  TLB_TX_RMT_LPBK_CFG
 * BLOCKS:   TLB_TX
 * REGADDR:  0xd172
 * DEVAD:    1
 * DESC:     Remote Loopback Control
 * RESETVAL: 0x2 (2)
 * ACCESS:   R/W
 * FIELDS:
 *     RMT_LPBK_EN      RX to TX Parallel Loopback (Remote Loopback) Enable.1 => Loopback is Enabled.0 => Loopback is Disabled.
 *     RMT_LPBK_PD_MODE Remote Loopback Phase Detector Mode. For normal operating conditions keep it at the default value of 1'b1.1'b0 - swap inc/dec. 1'b1 - normal mode.
 *     RMT_LPBK_PD_FRC_ON Remote loopback PD enable by force irrespective of rg_rmt_lpbk_en.1'b1 - enable the phase detector without the remote loopback enable. Can be used to lock RX and TXclock phases when there is a remote loopback outside PMD
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_RMT_LPBK_CFGr (0x0001d172 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_RMT_LPBK_CFGr_SIZE 4

/*
 * This structure should be used to declare and program TLB_TX_RMT_LPBK_CFG.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_RMT_LPBK_CFGr_s {
	uint32_t v[1];
	uint32_t tlb_tx_rmt_lpbk_cfg[1];
	uint32_t _tlb_tx_rmt_lpbk_cfg;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_RMT_LPBK_CFGr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_RMT_LPBK_CFGr_CLR(r) (r).tlb_tx_rmt_lpbk_cfg[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_RMT_LPBK_CFGr_SET(r,d) (r).tlb_tx_rmt_lpbk_cfg[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_RMT_LPBK_CFGr_GET(r) (r).tlb_tx_rmt_lpbk_cfg[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_RMT_LPBK_CFGr_RMT_LPBK_PD_FRC_ONf_GET(r) ((((r).tlb_tx_rmt_lpbk_cfg[0]) >> 2) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_RMT_LPBK_CFGr_RMT_LPBK_PD_FRC_ONf_SET(r,f) (r).tlb_tx_rmt_lpbk_cfg[0]=(((r).tlb_tx_rmt_lpbk_cfg[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_RMT_LPBK_CFGr_RMT_LPBK_PD_MODEf_GET(r) ((((r).tlb_tx_rmt_lpbk_cfg[0]) >> 1) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_RMT_LPBK_CFGr_RMT_LPBK_PD_MODEf_SET(r,f) (r).tlb_tx_rmt_lpbk_cfg[0]=(((r).tlb_tx_rmt_lpbk_cfg[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_RMT_LPBK_CFGr_RMT_LPBK_ENf_GET(r) (((r).tlb_tx_rmt_lpbk_cfg[0]) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_RMT_LPBK_CFGr_RMT_LPBK_ENf_SET(r,f) (r).tlb_tx_rmt_lpbk_cfg[0]=(((r).tlb_tx_rmt_lpbk_cfg[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access TLB_TX_RMT_LPBK_CFG.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TLB_TX_RMT_LPBK_CFGr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_RMT_LPBK_CFGr,(_r._tlb_tx_rmt_lpbk_cfg))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TLB_TX_RMT_LPBK_CFGr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_RMT_LPBK_CFGr,(_r._tlb_tx_rmt_lpbk_cfg)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TLB_TX_RMT_LPBK_CFGr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_RMT_LPBK_CFGr,(_r._tlb_tx_rmt_lpbk_cfg))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TLB_TX_RMT_LPBK_CFGr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_RMT_LPBK_CFGr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_tx_rmt_lpbk_cfg))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TLB_TX_RMT_LPBK_CFGr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_RMT_LPBK_CFGr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_tx_rmt_lpbk_cfg))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TLB_TX_RMT_LPBK_CFGr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_RMT_LPBK_CFGr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tlb_tx_rmt_lpbk_cfg))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TLB_TX_RMT_LPBK_CFGr BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_RMT_LPBK_CFGr
#define TLB_TX_RMT_LPBK_CFGr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_RMT_LPBK_CFGr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_RMT_LPBK_CFGr_t TLB_TX_RMT_LPBK_CFGr_t;
#define TLB_TX_RMT_LPBK_CFGr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_RMT_LPBK_CFGr_CLR
#define TLB_TX_RMT_LPBK_CFGr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_RMT_LPBK_CFGr_SET
#define TLB_TX_RMT_LPBK_CFGr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_RMT_LPBK_CFGr_GET
#define TLB_TX_RMT_LPBK_CFGr_RMT_LPBK_PD_FRC_ONf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_RMT_LPBK_CFGr_RMT_LPBK_PD_FRC_ONf_GET
#define TLB_TX_RMT_LPBK_CFGr_RMT_LPBK_PD_FRC_ONf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_RMT_LPBK_CFGr_RMT_LPBK_PD_FRC_ONf_SET
#define TLB_TX_RMT_LPBK_CFGr_RMT_LPBK_PD_MODEf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_RMT_LPBK_CFGr_RMT_LPBK_PD_MODEf_GET
#define TLB_TX_RMT_LPBK_CFGr_RMT_LPBK_PD_MODEf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_RMT_LPBK_CFGr_RMT_LPBK_PD_MODEf_SET
#define TLB_TX_RMT_LPBK_CFGr_RMT_LPBK_ENf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_RMT_LPBK_CFGr_RMT_LPBK_ENf_GET
#define TLB_TX_RMT_LPBK_CFGr_RMT_LPBK_ENf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_RMT_LPBK_CFGr_RMT_LPBK_ENf_SET
#define READ_TLB_TX_RMT_LPBK_CFGr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TLB_TX_RMT_LPBK_CFGr
#define WRITE_TLB_TX_RMT_LPBK_CFGr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TLB_TX_RMT_LPBK_CFGr
#define MODIFY_TLB_TX_RMT_LPBK_CFGr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TLB_TX_RMT_LPBK_CFGr
#define READLN_TLB_TX_RMT_LPBK_CFGr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TLB_TX_RMT_LPBK_CFGr
#define WRITELN_TLB_TX_RMT_LPBK_CFGr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TLB_TX_RMT_LPBK_CFGr
#define WRITEALL_TLB_TX_RMT_LPBK_CFGr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TLB_TX_RMT_LPBK_CFGr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_RMT_LPBK_CFGr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  TLB_TX_TLB_TX_MISC_CFG
 * BLOCKS:   TLB_TX
 * REGADDR:  0xd173
 * DEVAD:    1
 * DESC:     TLB TX Misc. Control
 * RESETVAL: 0x10 (16)
 * ACCESS:   R/W
 * FIELDS:
 *     TX_PMD_DP_INVERT TX PMD Datapath Invert Control.When Enabled by writing to 1'b1, it will invert all the datapath bits of the logical lane.Recommended for use in case P and N pads are swapped on the PCB board.
 *     TX_PCS_NATIVE_ANA_FRMT_EN TX PCS Interface Native Analog Format Enable.1 => TX PCS Interface is enabled in the Native Analog Format mode. TX PCS sends the over-sampled data in this mode which is sent directly to AFE.0 => Raw Data Mode where for every data request TX PCS will send 20 bits of valid data.
 *     TX_MUX_SEL_ORDER TX Data MUX Select Priority Order. When 1'b1 then priority of Pattern and PRBS generators are swapped w.r.t. CL72.0 => TX Data Mux select order from higher to lower priority is {rmt_lpbk, patt_gen, cl72_tx, prbs_gen, tx_pcs}.1 => TX Data Mux select order from higher to lower priority is {rmt_lpbk, prbs_gen, cl72_tx, patt_gen, tx_pcs}.
 *     TLB_TX_DIFF_ENC_EN 1'b1 will enable the Differential Encoder for pmd_tx_data. Only applicable to PCS TX data in OS1, 2 and 4 modes.Write it to 1'b0 for 1G OSR modes 16P5 and 20P625.
 *     TX_TRN_ACTIVE_AUTO_MODE_EN 1'b1 will forcefully disable the below described TX datapath functions automatically while TX Link Training is enabled and active irrespective of the below register bit settings .- PAM4 Gray Encoder         (enabled by field pam4_gray_enc_en)- PAM4 Precoder             (enabled by field pam4_precoder_en)- PAM4 Symbol bit-swap      (enabled by field pam4_tx_symbol_bit_swap)- NRZ Differential Encoder  (enabled by field tlb_tx_diff_enc_en)In addition to these function Back channel encoder and Scrambler are always disabled while TX Link Training is enabled and active irrespective of this register value.1'b0 will ignore the control signal from TX Link Training and the above TX datapath functions will be enabled based on their individual enable bits irrespective of the TX training status where enabled or disabled.
 *     TX_PCS_INTF_DLY_MODE 1 - extra PCS/chip level delaying of the TX PCS interface by 4 tclk cycles. Either pmd_tx_data_vld_<i> or pmd_tx_data_<i> can be delayed but sum of total delay must be 4 cycles w.r.t. tx_pcs_intf_dly_mode = 0 mode timing.
 *     TX_DATA_VLD_SYNC_EN Enable control for synchronization of the PMD pins pmd_tx_data_vld_k (where k is the lane number) for the aggregated modes where more than 1 TX lanes needs synchronization to minimize lane to lane skew.For all PAM4 OSR modes, keep this bit to 0 as pmd_tx_data_vld is always 1 so no synchronization is needed.1 => pmd_tx_data_vld_k synchronization between lanes will be enabled using the per lane PMD pin pmd_tx_data_vld_sync_pulse_k inputs.This bit must be enabled while lane datapath reset is still asserted. Refer to the User Spec for pmd_tx_data_vld_sync_pulse_k pin description for more details.0 => pmd_tx_data_vld_k synchronization will be disabled which means pmd_tx_data_vld is independent from other lanes. pmd_tx_data_vld_sync_pulse_k pin is ignored and not applicable.
 *     TX_PRBS_OR_PCS_ERR_INS_STROBE Self-clear bit. On every strobe, XOR PRBS or PCS data with the pattern programmed in rg_patt_gen_seq[39:0] to create transmit bit errors with PRBS or PCS traffic.This feature is supported for all PAM4 mode. It is also supported for NRZ modes OS1, OS2 and OS4 by programming odd and even bits (i.e. 2*N and 2*N + 1 where N=0 to 19) with the same value in rg_patt_gen_seq[39:0].This features re-uses the tx scrambler logic so it can not be used when tx_scrambler_en  bit is 1.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_TLB_TX_MISC_CFGr (0x0001d173 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_TLB_TX_MISC_CFGr_SIZE 4

/*
 * This structure should be used to declare and program TLB_TX_TLB_TX_MISC_CFG.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_TLB_TX_MISC_CFGr_s {
	uint32_t v[1];
	uint32_t tlb_tx_tlb_tx_misc_cfg[1];
	uint32_t _tlb_tx_tlb_tx_misc_cfg;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_TLB_TX_MISC_CFGr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_TLB_TX_MISC_CFGr_CLR(r) (r).tlb_tx_tlb_tx_misc_cfg[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_TLB_TX_MISC_CFGr_SET(r,d) (r).tlb_tx_tlb_tx_misc_cfg[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_TLB_TX_MISC_CFGr_GET(r) (r).tlb_tx_tlb_tx_misc_cfg[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_TLB_TX_MISC_CFGr_TX_PRBS_OR_PCS_ERR_INS_STROBEf_GET(r) ((((r).tlb_tx_tlb_tx_misc_cfg[0]) >> 15) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_TLB_TX_MISC_CFGr_TX_PRBS_OR_PCS_ERR_INS_STROBEf_SET(r,f) (r).tlb_tx_tlb_tx_misc_cfg[0]=(((r).tlb_tx_tlb_tx_misc_cfg[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_TLB_TX_MISC_CFGr_TX_DATA_VLD_SYNC_ENf_GET(r) ((((r).tlb_tx_tlb_tx_misc_cfg[0]) >> 6) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_TLB_TX_MISC_CFGr_TX_DATA_VLD_SYNC_ENf_SET(r,f) (r).tlb_tx_tlb_tx_misc_cfg[0]=(((r).tlb_tx_tlb_tx_misc_cfg[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_TLB_TX_MISC_CFGr_TX_PCS_INTF_DLY_MODEf_GET(r) ((((r).tlb_tx_tlb_tx_misc_cfg[0]) >> 5) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_TLB_TX_MISC_CFGr_TX_PCS_INTF_DLY_MODEf_SET(r,f) (r).tlb_tx_tlb_tx_misc_cfg[0]=(((r).tlb_tx_tlb_tx_misc_cfg[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_TLB_TX_MISC_CFGr_TX_TRN_ACTIVE_AUTO_MODE_ENf_GET(r) ((((r).tlb_tx_tlb_tx_misc_cfg[0]) >> 4) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_TLB_TX_MISC_CFGr_TX_TRN_ACTIVE_AUTO_MODE_ENf_SET(r,f) (r).tlb_tx_tlb_tx_misc_cfg[0]=(((r).tlb_tx_tlb_tx_misc_cfg[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_TLB_TX_MISC_CFGr_TLB_TX_DIFF_ENC_ENf_GET(r) ((((r).tlb_tx_tlb_tx_misc_cfg[0]) >> 3) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_TLB_TX_MISC_CFGr_TLB_TX_DIFF_ENC_ENf_SET(r,f) (r).tlb_tx_tlb_tx_misc_cfg[0]=(((r).tlb_tx_tlb_tx_misc_cfg[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_TLB_TX_MISC_CFGr_TX_MUX_SEL_ORDERf_GET(r) ((((r).tlb_tx_tlb_tx_misc_cfg[0]) >> 2) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_TLB_TX_MISC_CFGr_TX_MUX_SEL_ORDERf_SET(r,f) (r).tlb_tx_tlb_tx_misc_cfg[0]=(((r).tlb_tx_tlb_tx_misc_cfg[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_TLB_TX_MISC_CFGr_TX_PCS_NATIVE_ANA_FRMT_ENf_GET(r) ((((r).tlb_tx_tlb_tx_misc_cfg[0]) >> 1) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_TLB_TX_MISC_CFGr_TX_PCS_NATIVE_ANA_FRMT_ENf_SET(r,f) (r).tlb_tx_tlb_tx_misc_cfg[0]=(((r).tlb_tx_tlb_tx_misc_cfg[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_TLB_TX_MISC_CFGr_TX_PMD_DP_INVERTf_GET(r) (((r).tlb_tx_tlb_tx_misc_cfg[0]) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_TLB_TX_MISC_CFGr_TX_PMD_DP_INVERTf_SET(r,f) (r).tlb_tx_tlb_tx_misc_cfg[0]=(((r).tlb_tx_tlb_tx_misc_cfg[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access TLB_TX_TLB_TX_MISC_CFG.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TLB_TX_TLB_TX_MISC_CFGr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_TLB_TX_MISC_CFGr,(_r._tlb_tx_tlb_tx_misc_cfg))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TLB_TX_TLB_TX_MISC_CFGr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_TLB_TX_MISC_CFGr,(_r._tlb_tx_tlb_tx_misc_cfg)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TLB_TX_TLB_TX_MISC_CFGr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_TLB_TX_MISC_CFGr,(_r._tlb_tx_tlb_tx_misc_cfg))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TLB_TX_TLB_TX_MISC_CFGr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_TLB_TX_MISC_CFGr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_tx_tlb_tx_misc_cfg))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TLB_TX_TLB_TX_MISC_CFGr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_TLB_TX_MISC_CFGr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_tx_tlb_tx_misc_cfg))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TLB_TX_TLB_TX_MISC_CFGr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_TLB_TX_MISC_CFGr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tlb_tx_tlb_tx_misc_cfg))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TLB_TX_TLB_TX_MISC_CFGr BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_TLB_TX_MISC_CFGr
#define TLB_TX_TLB_TX_MISC_CFGr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_TLB_TX_MISC_CFGr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_TLB_TX_MISC_CFGr_t TLB_TX_TLB_TX_MISC_CFGr_t;
#define TLB_TX_TLB_TX_MISC_CFGr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_TLB_TX_MISC_CFGr_CLR
#define TLB_TX_TLB_TX_MISC_CFGr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_TLB_TX_MISC_CFGr_SET
#define TLB_TX_TLB_TX_MISC_CFGr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_TLB_TX_MISC_CFGr_GET
#define TLB_TX_TLB_TX_MISC_CFGr_TX_PRBS_OR_PCS_ERR_INS_STROBEf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_TLB_TX_MISC_CFGr_TX_PRBS_OR_PCS_ERR_INS_STROBEf_GET
#define TLB_TX_TLB_TX_MISC_CFGr_TX_PRBS_OR_PCS_ERR_INS_STROBEf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_TLB_TX_MISC_CFGr_TX_PRBS_OR_PCS_ERR_INS_STROBEf_SET
#define TLB_TX_TLB_TX_MISC_CFGr_TX_DATA_VLD_SYNC_ENf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_TLB_TX_MISC_CFGr_TX_DATA_VLD_SYNC_ENf_GET
#define TLB_TX_TLB_TX_MISC_CFGr_TX_DATA_VLD_SYNC_ENf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_TLB_TX_MISC_CFGr_TX_DATA_VLD_SYNC_ENf_SET
#define TLB_TX_TLB_TX_MISC_CFGr_TX_PCS_INTF_DLY_MODEf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_TLB_TX_MISC_CFGr_TX_PCS_INTF_DLY_MODEf_GET
#define TLB_TX_TLB_TX_MISC_CFGr_TX_PCS_INTF_DLY_MODEf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_TLB_TX_MISC_CFGr_TX_PCS_INTF_DLY_MODEf_SET
#define TLB_TX_TLB_TX_MISC_CFGr_TX_TRN_ACTIVE_AUTO_MODE_ENf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_TLB_TX_MISC_CFGr_TX_TRN_ACTIVE_AUTO_MODE_ENf_GET
#define TLB_TX_TLB_TX_MISC_CFGr_TX_TRN_ACTIVE_AUTO_MODE_ENf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_TLB_TX_MISC_CFGr_TX_TRN_ACTIVE_AUTO_MODE_ENf_SET
#define TLB_TX_TLB_TX_MISC_CFGr_TLB_TX_DIFF_ENC_ENf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_TLB_TX_MISC_CFGr_TLB_TX_DIFF_ENC_ENf_GET
#define TLB_TX_TLB_TX_MISC_CFGr_TLB_TX_DIFF_ENC_ENf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_TLB_TX_MISC_CFGr_TLB_TX_DIFF_ENC_ENf_SET
#define TLB_TX_TLB_TX_MISC_CFGr_TX_MUX_SEL_ORDERf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_TLB_TX_MISC_CFGr_TX_MUX_SEL_ORDERf_GET
#define TLB_TX_TLB_TX_MISC_CFGr_TX_MUX_SEL_ORDERf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_TLB_TX_MISC_CFGr_TX_MUX_SEL_ORDERf_SET
#define TLB_TX_TLB_TX_MISC_CFGr_TX_PCS_NATIVE_ANA_FRMT_ENf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_TLB_TX_MISC_CFGr_TX_PCS_NATIVE_ANA_FRMT_ENf_GET
#define TLB_TX_TLB_TX_MISC_CFGr_TX_PCS_NATIVE_ANA_FRMT_ENf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_TLB_TX_MISC_CFGr_TX_PCS_NATIVE_ANA_FRMT_ENf_SET
#define TLB_TX_TLB_TX_MISC_CFGr_TX_PMD_DP_INVERTf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_TLB_TX_MISC_CFGr_TX_PMD_DP_INVERTf_GET
#define TLB_TX_TLB_TX_MISC_CFGr_TX_PMD_DP_INVERTf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_TLB_TX_MISC_CFGr_TX_PMD_DP_INVERTf_SET
#define READ_TLB_TX_TLB_TX_MISC_CFGr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TLB_TX_TLB_TX_MISC_CFGr
#define WRITE_TLB_TX_TLB_TX_MISC_CFGr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TLB_TX_TLB_TX_MISC_CFGr
#define MODIFY_TLB_TX_TLB_TX_MISC_CFGr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TLB_TX_TLB_TX_MISC_CFGr
#define READLN_TLB_TX_TLB_TX_MISC_CFGr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TLB_TX_TLB_TX_MISC_CFGr
#define WRITELN_TLB_TX_TLB_TX_MISC_CFGr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TLB_TX_TLB_TX_MISC_CFGr
#define WRITEALL_TLB_TX_TLB_TX_MISC_CFGr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TLB_TX_TLB_TX_MISC_CFGr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_TLB_TX_MISC_CFGr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  TLB_TX_TLB_TX_PAM4_CFG0
 * BLOCKS:   TLB_TX
 * REGADDR:  0xd175
 * DEVAD:    1
 * DESC:     TLB TX PAM4 Controls 0
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     PAM4_GRAY_ENC_EN PAM4 Gray Encoder Enable. Enable it only for the PAM4 modes.1 => PAM4 Gray Encoder is Enabled.0 => PAM4 Gray Encoder is Disabled.
 *     PAM4_PRECODER_EN PAM4 Precoder Enable. Enable it only for the PAM4 modes.1 => PAM4 Precoder is Enabled.0 => PAM4 Precoder is Disabled.
 *     TX_SCRAMBLER_EN  PAM4 TX Datapath Scrambler Enable. Applicable only for the PAM4 modes with PRBS or PCS data.1 => PAM4 TX Datapath Scrambler is Enabled. If tx_scrambler_en is enabled then 40 bits of the transmitted datawill be XORed with the 40 LSB bits of the fixed pattern sequence register {patt_gen_seq_2[7:0], patt_gen_seq_1[15:0], patt_gen_seq_0[15:0]}.Make sure {patt_gen_seq_2[7:0], patt_gen_seq_1[15:0], patt_gen_seq_0[15:0]} bits are only re-programmed or changed when both tx_scrambler_en and bc_enc_err_ins_en reg fields are 1'b0.0 => PAM4 TX Datapath Scrambler is Disabled.
 *     PAM4_TX_SYMBOL_BIT_SWAP PAM4 Symbol bits {A,B} swap enable. Enable it only for the PAM4 modes. Bit swapping is done just before the PAM4 gray encoder.1 => 2 bits PAM4 symbol bits will be swapped where PAM4 symbol bits {A,B} maps to the datastream bits {[n+1], [n]} where n is the first bit in transmission order.0 => No swapping, default mode. PAM4 symbol bits {A,B} maps to the datastream bits {[n], [n+1]} where n is the first bit in transmission order.
 *     PAM4_PRECODER_SEED PAM4 Precoder seed. This seed is loaded at the start of the prbs sequence.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_TLB_TX_PAM4_CFG0r (0x0001d175 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_TLB_TX_PAM4_CFG0r_SIZE 4

/*
 * This structure should be used to declare and program TLB_TX_TLB_TX_PAM4_CFG0.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_TLB_TX_PAM4_CFG0r_s {
	uint32_t v[1];
	uint32_t tlb_tx_tlb_tx_pam4_cfg0[1];
	uint32_t _tlb_tx_tlb_tx_pam4_cfg0;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_TLB_TX_PAM4_CFG0r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_TLB_TX_PAM4_CFG0r_CLR(r) (r).tlb_tx_tlb_tx_pam4_cfg0[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_TLB_TX_PAM4_CFG0r_SET(r,d) (r).tlb_tx_tlb_tx_pam4_cfg0[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_TLB_TX_PAM4_CFG0r_GET(r) (r).tlb_tx_tlb_tx_pam4_cfg0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_TLB_TX_PAM4_CFG0r_PAM4_PRECODER_SEEDf_GET(r) ((((r).tlb_tx_tlb_tx_pam4_cfg0[0]) >> 8) & 0x3)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_TLB_TX_PAM4_CFG0r_PAM4_PRECODER_SEEDf_SET(r,f) (r).tlb_tx_tlb_tx_pam4_cfg0[0]=(((r).tlb_tx_tlb_tx_pam4_cfg0[0] & ~((uint32_t)0x3 << 8)) | ((((uint32_t)f) & 0x3) << 8)) | (3 << (16 + 8))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_TLB_TX_PAM4_CFG0r_PAM4_TX_SYMBOL_BIT_SWAPf_GET(r) ((((r).tlb_tx_tlb_tx_pam4_cfg0[0]) >> 3) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_TLB_TX_PAM4_CFG0r_PAM4_TX_SYMBOL_BIT_SWAPf_SET(r,f) (r).tlb_tx_tlb_tx_pam4_cfg0[0]=(((r).tlb_tx_tlb_tx_pam4_cfg0[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_TLB_TX_PAM4_CFG0r_TX_SCRAMBLER_ENf_GET(r) ((((r).tlb_tx_tlb_tx_pam4_cfg0[0]) >> 2) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_TLB_TX_PAM4_CFG0r_TX_SCRAMBLER_ENf_SET(r,f) (r).tlb_tx_tlb_tx_pam4_cfg0[0]=(((r).tlb_tx_tlb_tx_pam4_cfg0[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_TLB_TX_PAM4_CFG0r_PAM4_PRECODER_ENf_GET(r) ((((r).tlb_tx_tlb_tx_pam4_cfg0[0]) >> 1) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_TLB_TX_PAM4_CFG0r_PAM4_PRECODER_ENf_SET(r,f) (r).tlb_tx_tlb_tx_pam4_cfg0[0]=(((r).tlb_tx_tlb_tx_pam4_cfg0[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_TLB_TX_PAM4_CFG0r_PAM4_GRAY_ENC_ENf_GET(r) (((r).tlb_tx_tlb_tx_pam4_cfg0[0]) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_TLB_TX_PAM4_CFG0r_PAM4_GRAY_ENC_ENf_SET(r,f) (r).tlb_tx_tlb_tx_pam4_cfg0[0]=(((r).tlb_tx_tlb_tx_pam4_cfg0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access TLB_TX_TLB_TX_PAM4_CFG0.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TLB_TX_TLB_TX_PAM4_CFG0r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_TLB_TX_PAM4_CFG0r,(_r._tlb_tx_tlb_tx_pam4_cfg0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TLB_TX_TLB_TX_PAM4_CFG0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_TLB_TX_PAM4_CFG0r,(_r._tlb_tx_tlb_tx_pam4_cfg0)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TLB_TX_TLB_TX_PAM4_CFG0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_TLB_TX_PAM4_CFG0r,(_r._tlb_tx_tlb_tx_pam4_cfg0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TLB_TX_TLB_TX_PAM4_CFG0r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_TLB_TX_PAM4_CFG0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_tx_tlb_tx_pam4_cfg0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TLB_TX_TLB_TX_PAM4_CFG0r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_TLB_TX_PAM4_CFG0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_tx_tlb_tx_pam4_cfg0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TLB_TX_TLB_TX_PAM4_CFG0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_TLB_TX_PAM4_CFG0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tlb_tx_tlb_tx_pam4_cfg0))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TLB_TX_TLB_TX_PAM4_CFG0r BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_TLB_TX_PAM4_CFG0r
#define TLB_TX_TLB_TX_PAM4_CFG0r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_TLB_TX_PAM4_CFG0r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_TLB_TX_PAM4_CFG0r_t TLB_TX_TLB_TX_PAM4_CFG0r_t;
#define TLB_TX_TLB_TX_PAM4_CFG0r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_TLB_TX_PAM4_CFG0r_CLR
#define TLB_TX_TLB_TX_PAM4_CFG0r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_TLB_TX_PAM4_CFG0r_SET
#define TLB_TX_TLB_TX_PAM4_CFG0r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_TLB_TX_PAM4_CFG0r_GET
#define TLB_TX_TLB_TX_PAM4_CFG0r_PAM4_PRECODER_SEEDf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_TLB_TX_PAM4_CFG0r_PAM4_PRECODER_SEEDf_GET
#define TLB_TX_TLB_TX_PAM4_CFG0r_PAM4_PRECODER_SEEDf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_TLB_TX_PAM4_CFG0r_PAM4_PRECODER_SEEDf_SET
#define TLB_TX_TLB_TX_PAM4_CFG0r_PAM4_TX_SYMBOL_BIT_SWAPf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_TLB_TX_PAM4_CFG0r_PAM4_TX_SYMBOL_BIT_SWAPf_GET
#define TLB_TX_TLB_TX_PAM4_CFG0r_PAM4_TX_SYMBOL_BIT_SWAPf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_TLB_TX_PAM4_CFG0r_PAM4_TX_SYMBOL_BIT_SWAPf_SET
#define TLB_TX_TLB_TX_PAM4_CFG0r_TX_SCRAMBLER_ENf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_TLB_TX_PAM4_CFG0r_TX_SCRAMBLER_ENf_GET
#define TLB_TX_TLB_TX_PAM4_CFG0r_TX_SCRAMBLER_ENf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_TLB_TX_PAM4_CFG0r_TX_SCRAMBLER_ENf_SET
#define TLB_TX_TLB_TX_PAM4_CFG0r_PAM4_PRECODER_ENf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_TLB_TX_PAM4_CFG0r_PAM4_PRECODER_ENf_GET
#define TLB_TX_TLB_TX_PAM4_CFG0r_PAM4_PRECODER_ENf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_TLB_TX_PAM4_CFG0r_PAM4_PRECODER_ENf_SET
#define TLB_TX_TLB_TX_PAM4_CFG0r_PAM4_GRAY_ENC_ENf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_TLB_TX_PAM4_CFG0r_PAM4_GRAY_ENC_ENf_GET
#define TLB_TX_TLB_TX_PAM4_CFG0r_PAM4_GRAY_ENC_ENf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_TLB_TX_PAM4_CFG0r_PAM4_GRAY_ENC_ENf_SET
#define READ_TLB_TX_TLB_TX_PAM4_CFG0r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TLB_TX_TLB_TX_PAM4_CFG0r
#define WRITE_TLB_TX_TLB_TX_PAM4_CFG0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TLB_TX_TLB_TX_PAM4_CFG0r
#define MODIFY_TLB_TX_TLB_TX_PAM4_CFG0r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TLB_TX_TLB_TX_PAM4_CFG0r
#define READLN_TLB_TX_TLB_TX_PAM4_CFG0r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TLB_TX_TLB_TX_PAM4_CFG0r
#define WRITELN_TLB_TX_TLB_TX_PAM4_CFG0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TLB_TX_TLB_TX_PAM4_CFG0r
#define WRITEALL_TLB_TX_TLB_TX_PAM4_CFG0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TLB_TX_TLB_TX_PAM4_CFG0r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_TLB_TX_PAM4_CFG0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  TLB_TX_RMT_LPBK_PD_STS
 * BLOCKS:   TLB_TX
 * REGADDR:  0xd178
 * DEVAD:    1
 * DESC:     Remote Loopback Status
 * RESETVAL: 0x2 (2)
 * ACCESS:   R/O
 * FIELDS:
 *     RMT_LPBK_PD_LATE_IND 1 means dp_tclk20 is sampling data late so reduce the delay of the dp_tclk20 clock phase. This will result in TX PI phase step decrement.
 *     RMT_LPBK_PD_EARLY_IND 1 means dp_tclk20 is sampling data earlier so delay the dp_tclk20 clock phase. This will result in TX PI phase step increment.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_RMT_LPBK_PD_STSr (0x0001d178 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_RMT_LPBK_PD_STSr_SIZE 4

/*
 * This structure should be used to declare and program TLB_TX_RMT_LPBK_PD_STS.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_RMT_LPBK_PD_STSr_s {
	uint32_t v[1];
	uint32_t tlb_tx_rmt_lpbk_pd_sts[1];
	uint32_t _tlb_tx_rmt_lpbk_pd_sts;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_RMT_LPBK_PD_STSr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_RMT_LPBK_PD_STSr_CLR(r) (r).tlb_tx_rmt_lpbk_pd_sts[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_RMT_LPBK_PD_STSr_SET(r,d) (r).tlb_tx_rmt_lpbk_pd_sts[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_RMT_LPBK_PD_STSr_GET(r) (r).tlb_tx_rmt_lpbk_pd_sts[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_RMT_LPBK_PD_STSr_RMT_LPBK_PD_EARLY_INDf_GET(r) ((((r).tlb_tx_rmt_lpbk_pd_sts[0]) >> 1) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_RMT_LPBK_PD_STSr_RMT_LPBK_PD_EARLY_INDf_SET(r,f) (r).tlb_tx_rmt_lpbk_pd_sts[0]=(((r).tlb_tx_rmt_lpbk_pd_sts[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_RMT_LPBK_PD_STSr_RMT_LPBK_PD_LATE_INDf_GET(r) (((r).tlb_tx_rmt_lpbk_pd_sts[0]) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_RMT_LPBK_PD_STSr_RMT_LPBK_PD_LATE_INDf_SET(r,f) (r).tlb_tx_rmt_lpbk_pd_sts[0]=(((r).tlb_tx_rmt_lpbk_pd_sts[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access TLB_TX_RMT_LPBK_PD_STS.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TLB_TX_RMT_LPBK_PD_STSr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_RMT_LPBK_PD_STSr,(_r._tlb_tx_rmt_lpbk_pd_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TLB_TX_RMT_LPBK_PD_STSr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_RMT_LPBK_PD_STSr,(_r._tlb_tx_rmt_lpbk_pd_sts)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TLB_TX_RMT_LPBK_PD_STSr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_RMT_LPBK_PD_STSr,(_r._tlb_tx_rmt_lpbk_pd_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TLB_TX_RMT_LPBK_PD_STSr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_RMT_LPBK_PD_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_tx_rmt_lpbk_pd_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TLB_TX_RMT_LPBK_PD_STSr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_RMT_LPBK_PD_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_tx_rmt_lpbk_pd_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TLB_TX_RMT_LPBK_PD_STSr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_RMT_LPBK_PD_STSr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tlb_tx_rmt_lpbk_pd_sts))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TLB_TX_RMT_LPBK_PD_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_RMT_LPBK_PD_STSr
#define TLB_TX_RMT_LPBK_PD_STSr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_RMT_LPBK_PD_STSr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_RMT_LPBK_PD_STSr_t TLB_TX_RMT_LPBK_PD_STSr_t;
#define TLB_TX_RMT_LPBK_PD_STSr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_RMT_LPBK_PD_STSr_CLR
#define TLB_TX_RMT_LPBK_PD_STSr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_RMT_LPBK_PD_STSr_SET
#define TLB_TX_RMT_LPBK_PD_STSr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_RMT_LPBK_PD_STSr_GET
#define TLB_TX_RMT_LPBK_PD_STSr_RMT_LPBK_PD_EARLY_INDf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_RMT_LPBK_PD_STSr_RMT_LPBK_PD_EARLY_INDf_GET
#define TLB_TX_RMT_LPBK_PD_STSr_RMT_LPBK_PD_EARLY_INDf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_RMT_LPBK_PD_STSr_RMT_LPBK_PD_EARLY_INDf_SET
#define TLB_TX_RMT_LPBK_PD_STSr_RMT_LPBK_PD_LATE_INDf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_RMT_LPBK_PD_STSr_RMT_LPBK_PD_LATE_INDf_GET
#define TLB_TX_RMT_LPBK_PD_STSr_RMT_LPBK_PD_LATE_INDf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_RMT_LPBK_PD_STSr_RMT_LPBK_PD_LATE_INDf_SET
#define READ_TLB_TX_RMT_LPBK_PD_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TLB_TX_RMT_LPBK_PD_STSr
#define WRITE_TLB_TX_RMT_LPBK_PD_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TLB_TX_RMT_LPBK_PD_STSr
#define MODIFY_TLB_TX_RMT_LPBK_PD_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TLB_TX_RMT_LPBK_PD_STSr
#define READLN_TLB_TX_RMT_LPBK_PD_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TLB_TX_RMT_LPBK_PD_STSr
#define WRITELN_TLB_TX_RMT_LPBK_PD_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TLB_TX_RMT_LPBK_PD_STSr
#define WRITEALL_TLB_TX_RMT_LPBK_PD_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TLB_TX_RMT_LPBK_PD_STSr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_TX_RMT_LPBK_PD_STSr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  CORE_PLL_PMD_CORE_MODE_STS
 * BLOCKS:   CORE_PLL_COM
 * REGADDR:  0xd180
 * DEVAD:    1
 * DESC:     PMD_CORE_MODE_STATUS
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     PMD_CORE_MODE    This indicates the status of the core input bus pmd_core_mode[15:0].This is driven from PCS and used for communication between PCS and PMD Micro code.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_PMD_CORE_MODE_STSr (0x0001d180 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_PMD_CORE_MODE_STSr_SIZE 4

/*
 * This structure should be used to declare and program CORE_PLL_PMD_CORE_MODE_STS.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_PMD_CORE_MODE_STSr_s {
	uint32_t v[1];
	uint32_t core_pll_pmd_core_mode_sts[1];
	uint32_t _core_pll_pmd_core_mode_sts;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_PMD_CORE_MODE_STSr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_PMD_CORE_MODE_STSr_CLR(r) (r).core_pll_pmd_core_mode_sts[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_PMD_CORE_MODE_STSr_SET(r,d) (r).core_pll_pmd_core_mode_sts[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_PMD_CORE_MODE_STSr_GET(r) (r).core_pll_pmd_core_mode_sts[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_PMD_CORE_MODE_STSr_PMD_CORE_MODEf_GET(r) (((r).core_pll_pmd_core_mode_sts[0]) & 0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_PMD_CORE_MODE_STSr_PMD_CORE_MODEf_SET(r,f) (r).core_pll_pmd_core_mode_sts[0]=(((r).core_pll_pmd_core_mode_sts[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access CORE_PLL_PMD_CORE_MODE_STS.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_CORE_PLL_PMD_CORE_MODE_STSr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_PMD_CORE_MODE_STSr,(_r._core_pll_pmd_core_mode_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_CORE_PLL_PMD_CORE_MODE_STSr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_PMD_CORE_MODE_STSr,(_r._core_pll_pmd_core_mode_sts)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_CORE_PLL_PMD_CORE_MODE_STSr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_PMD_CORE_MODE_STSr,(_r._core_pll_pmd_core_mode_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_CORE_PLL_PMD_CORE_MODE_STSr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_PMD_CORE_MODE_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._core_pll_pmd_core_mode_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_CORE_PLL_PMD_CORE_MODE_STSr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_PMD_CORE_MODE_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._core_pll_pmd_core_mode_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_CORE_PLL_PMD_CORE_MODE_STSr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_PMD_CORE_MODE_STSr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._core_pll_pmd_core_mode_sts))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define CORE_PLL_PMD_CORE_MODE_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_PMD_CORE_MODE_STSr
#define CORE_PLL_PMD_CORE_MODE_STSr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_PMD_CORE_MODE_STSr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_PMD_CORE_MODE_STSr_t CORE_PLL_PMD_CORE_MODE_STSr_t;
#define CORE_PLL_PMD_CORE_MODE_STSr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_PMD_CORE_MODE_STSr_CLR
#define CORE_PLL_PMD_CORE_MODE_STSr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_PMD_CORE_MODE_STSr_SET
#define CORE_PLL_PMD_CORE_MODE_STSr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_PMD_CORE_MODE_STSr_GET
#define CORE_PLL_PMD_CORE_MODE_STSr_PMD_CORE_MODEf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_PMD_CORE_MODE_STSr_PMD_CORE_MODEf_GET
#define CORE_PLL_PMD_CORE_MODE_STSr_PMD_CORE_MODEf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_PMD_CORE_MODE_STSr_PMD_CORE_MODEf_SET
#define READ_CORE_PLL_PMD_CORE_MODE_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_CORE_PLL_PMD_CORE_MODE_STSr
#define WRITE_CORE_PLL_PMD_CORE_MODE_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_CORE_PLL_PMD_CORE_MODE_STSr
#define MODIFY_CORE_PLL_PMD_CORE_MODE_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_CORE_PLL_PMD_CORE_MODE_STSr
#define READLN_CORE_PLL_PMD_CORE_MODE_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_CORE_PLL_PMD_CORE_MODE_STSr
#define WRITELN_CORE_PLL_PMD_CORE_MODE_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_CORE_PLL_PMD_CORE_MODE_STSr
#define WRITEALL_CORE_PLL_PMD_CORE_MODE_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_CORE_PLL_PMD_CORE_MODE_STSr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_PMD_CORE_MODE_STSr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  CORE_PLL_TOP_USER_CTL
 * BLOCKS:   CORE_PLL_COM
 * REGADDR:  0xd184
 * DEVAD:    1
 * DESC:     TOP_USER_CONTROL
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     CORE_DP_S_RSTB   Active Low Core Level Datapath Soft Reset. If asserted by writingto 1'b0 will reset datapath logic of all the lanes. This soft resetis equivalent to the hard reset input pin core_dp_h_rstb.Minimum assertion time is 50 comclk cycles.
 *     AFE_S_PLL_PWRDN  Active High PLL Power Down control.Minimum assertion time is 50 comclk cycles.
 *     CORE_HW_FW_HANDSHAKE_DISABLE 1: disables the HW-FW handshake logic for the core which means there is no acknowledgement required from uC and core dp reset will be de-asserted once core reset register/pin conditions are de-asserted.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_TOP_USER_CTLr (0x0001d184 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_TOP_USER_CTLr_SIZE 4

/*
 * This structure should be used to declare and program CORE_PLL_TOP_USER_CTL.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_TOP_USER_CTLr_s {
	uint32_t v[1];
	uint32_t core_pll_top_user_ctl[1];
	uint32_t _core_pll_top_user_ctl;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_TOP_USER_CTLr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_TOP_USER_CTLr_CLR(r) (r).core_pll_top_user_ctl[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_TOP_USER_CTLr_SET(r,d) (r).core_pll_top_user_ctl[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_TOP_USER_CTLr_GET(r) (r).core_pll_top_user_ctl[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_TOP_USER_CTLr_CORE_HW_FW_HANDSHAKE_DISABLEf_GET(r) ((((r).core_pll_top_user_ctl[0]) >> 15) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_TOP_USER_CTLr_CORE_HW_FW_HANDSHAKE_DISABLEf_SET(r,f) (r).core_pll_top_user_ctl[0]=(((r).core_pll_top_user_ctl[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_TOP_USER_CTLr_AFE_S_PLL_PWRDNf_GET(r) ((((r).core_pll_top_user_ctl[0]) >> 14) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_TOP_USER_CTLr_AFE_S_PLL_PWRDNf_SET(r,f) (r).core_pll_top_user_ctl[0]=(((r).core_pll_top_user_ctl[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14)) | (1 << (16 + 14))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_TOP_USER_CTLr_CORE_DP_S_RSTBf_GET(r) ((((r).core_pll_top_user_ctl[0]) >> 13) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_TOP_USER_CTLr_CORE_DP_S_RSTBf_SET(r,f) (r).core_pll_top_user_ctl[0]=(((r).core_pll_top_user_ctl[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13)) | (1 << (16 + 13))

/*
 * These macros can be used to access CORE_PLL_TOP_USER_CTL.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_CORE_PLL_TOP_USER_CTLr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_TOP_USER_CTLr,(_r._core_pll_top_user_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_CORE_PLL_TOP_USER_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_TOP_USER_CTLr,(_r._core_pll_top_user_ctl)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_CORE_PLL_TOP_USER_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_TOP_USER_CTLr,(_r._core_pll_top_user_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_CORE_PLL_TOP_USER_CTLr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_TOP_USER_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._core_pll_top_user_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_CORE_PLL_TOP_USER_CTLr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_TOP_USER_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._core_pll_top_user_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_CORE_PLL_TOP_USER_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_TOP_USER_CTLr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._core_pll_top_user_ctl))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define CORE_PLL_TOP_USER_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_TOP_USER_CTLr
#define CORE_PLL_TOP_USER_CTLr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_TOP_USER_CTLr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_TOP_USER_CTLr_t CORE_PLL_TOP_USER_CTLr_t;
#define CORE_PLL_TOP_USER_CTLr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_TOP_USER_CTLr_CLR
#define CORE_PLL_TOP_USER_CTLr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_TOP_USER_CTLr_SET
#define CORE_PLL_TOP_USER_CTLr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_TOP_USER_CTLr_GET
#define CORE_PLL_TOP_USER_CTLr_CORE_HW_FW_HANDSHAKE_DISABLEf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_TOP_USER_CTLr_CORE_HW_FW_HANDSHAKE_DISABLEf_GET
#define CORE_PLL_TOP_USER_CTLr_CORE_HW_FW_HANDSHAKE_DISABLEf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_TOP_USER_CTLr_CORE_HW_FW_HANDSHAKE_DISABLEf_SET
#define CORE_PLL_TOP_USER_CTLr_AFE_S_PLL_PWRDNf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_TOP_USER_CTLr_AFE_S_PLL_PWRDNf_GET
#define CORE_PLL_TOP_USER_CTLr_AFE_S_PLL_PWRDNf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_TOP_USER_CTLr_AFE_S_PLL_PWRDNf_SET
#define CORE_PLL_TOP_USER_CTLr_CORE_DP_S_RSTBf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_TOP_USER_CTLr_CORE_DP_S_RSTBf_GET
#define CORE_PLL_TOP_USER_CTLr_CORE_DP_S_RSTBf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_TOP_USER_CTLr_CORE_DP_S_RSTBf_SET
#define READ_CORE_PLL_TOP_USER_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_CORE_PLL_TOP_USER_CTLr
#define WRITE_CORE_PLL_TOP_USER_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_CORE_PLL_TOP_USER_CTLr
#define MODIFY_CORE_PLL_TOP_USER_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_CORE_PLL_TOP_USER_CTLr
#define READLN_CORE_PLL_TOP_USER_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_CORE_PLL_TOP_USER_CTLr
#define WRITELN_CORE_PLL_TOP_USER_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_CORE_PLL_TOP_USER_CTLr
#define WRITEALL_CORE_PLL_TOP_USER_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_CORE_PLL_TOP_USER_CTLr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_TOP_USER_CTLr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  CORE_PLL_UC_ACK_CORE_CTL
 * BLOCKS:   CORE_PLL_COM
 * REGADDR:  0xd185
 * DEVAD:    1
 * DESC:     UC_ACK_CORE_CONTROL
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     UC_ACK_CORE_CFG_DONE uC will write this to 1 to indicate it's configuration of the core is complete. Writing to 1'b1 willshould release internal hold on core_dp_reset, only if core_dp_reset_state is 3'b001.
 *     UC_ACK_CORE_DP_RESET uC will write this to 1 to acknowledge a reset event after seeing "core_dp_reset_coccured".
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_UC_ACK_CORE_CTLr (0x0001d185 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_UC_ACK_CORE_CTLr_SIZE 4

/*
 * This structure should be used to declare and program CORE_PLL_UC_ACK_CORE_CTL.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_UC_ACK_CORE_CTLr_s {
	uint32_t v[1];
	uint32_t core_pll_uc_ack_core_ctl[1];
	uint32_t _core_pll_uc_ack_core_ctl;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_UC_ACK_CORE_CTLr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_UC_ACK_CORE_CTLr_CLR(r) (r).core_pll_uc_ack_core_ctl[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_UC_ACK_CORE_CTLr_SET(r,d) (r).core_pll_uc_ack_core_ctl[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_UC_ACK_CORE_CTLr_GET(r) (r).core_pll_uc_ack_core_ctl[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_UC_ACK_CORE_CTLr_UC_ACK_CORE_DP_RESETf_GET(r) ((((r).core_pll_uc_ack_core_ctl[0]) >> 1) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_UC_ACK_CORE_CTLr_UC_ACK_CORE_DP_RESETf_SET(r,f) (r).core_pll_uc_ack_core_ctl[0]=(((r).core_pll_uc_ack_core_ctl[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_UC_ACK_CORE_CTLr_UC_ACK_CORE_CFG_DONEf_GET(r) (((r).core_pll_uc_ack_core_ctl[0]) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_UC_ACK_CORE_CTLr_UC_ACK_CORE_CFG_DONEf_SET(r,f) (r).core_pll_uc_ack_core_ctl[0]=(((r).core_pll_uc_ack_core_ctl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access CORE_PLL_UC_ACK_CORE_CTL.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_CORE_PLL_UC_ACK_CORE_CTLr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_UC_ACK_CORE_CTLr,(_r._core_pll_uc_ack_core_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_CORE_PLL_UC_ACK_CORE_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_UC_ACK_CORE_CTLr,(_r._core_pll_uc_ack_core_ctl)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_CORE_PLL_UC_ACK_CORE_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_UC_ACK_CORE_CTLr,(_r._core_pll_uc_ack_core_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_CORE_PLL_UC_ACK_CORE_CTLr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_UC_ACK_CORE_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._core_pll_uc_ack_core_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_CORE_PLL_UC_ACK_CORE_CTLr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_UC_ACK_CORE_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._core_pll_uc_ack_core_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_CORE_PLL_UC_ACK_CORE_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_UC_ACK_CORE_CTLr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._core_pll_uc_ack_core_ctl))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define CORE_PLL_UC_ACK_CORE_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_UC_ACK_CORE_CTLr
#define CORE_PLL_UC_ACK_CORE_CTLr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_UC_ACK_CORE_CTLr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_UC_ACK_CORE_CTLr_t CORE_PLL_UC_ACK_CORE_CTLr_t;
#define CORE_PLL_UC_ACK_CORE_CTLr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_UC_ACK_CORE_CTLr_CLR
#define CORE_PLL_UC_ACK_CORE_CTLr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_UC_ACK_CORE_CTLr_SET
#define CORE_PLL_UC_ACK_CORE_CTLr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_UC_ACK_CORE_CTLr_GET
#define CORE_PLL_UC_ACK_CORE_CTLr_UC_ACK_CORE_DP_RESETf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_UC_ACK_CORE_CTLr_UC_ACK_CORE_DP_RESETf_GET
#define CORE_PLL_UC_ACK_CORE_CTLr_UC_ACK_CORE_DP_RESETf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_UC_ACK_CORE_CTLr_UC_ACK_CORE_DP_RESETf_SET
#define CORE_PLL_UC_ACK_CORE_CTLr_UC_ACK_CORE_CFG_DONEf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_UC_ACK_CORE_CTLr_UC_ACK_CORE_CFG_DONEf_GET
#define CORE_PLL_UC_ACK_CORE_CTLr_UC_ACK_CORE_CFG_DONEf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_UC_ACK_CORE_CTLr_UC_ACK_CORE_CFG_DONEf_SET
#define READ_CORE_PLL_UC_ACK_CORE_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_CORE_PLL_UC_ACK_CORE_CTLr
#define WRITE_CORE_PLL_UC_ACK_CORE_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_CORE_PLL_UC_ACK_CORE_CTLr
#define MODIFY_CORE_PLL_UC_ACK_CORE_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_CORE_PLL_UC_ACK_CORE_CTLr
#define READLN_CORE_PLL_UC_ACK_CORE_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_CORE_PLL_UC_ACK_CORE_CTLr
#define WRITELN_CORE_PLL_UC_ACK_CORE_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_CORE_PLL_UC_ACK_CORE_CTLr
#define WRITEALL_CORE_PLL_UC_ACK_CORE_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_CORE_PLL_UC_ACK_CORE_CTLr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_UC_ACK_CORE_CTLr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  CORE_PLL_PLL_DP_RST_ST_STS
 * BLOCKS:   CORE_PLL_COM
 * REGADDR:  0xd188
 * DEVAD:    1
 * DESC:     PLL_DP_RESET_STATE_STATUS
 * RESETVAL: 0x7 (7)
 * ACCESS:   R/O
 * FIELDS:
 *     CORE_DP_RESET_STATE Bit 2: core_dp_reset_active   : Set to 1'b1 whenenver core_dp_reset is currently requested through any register or pin controls.Bit 1: core_dp_reset_occurred : Set to 1'b1 whenenver core_dp_reset is currently requested through any register or pin controls and is latched high.Bit 0: core_dp_reset_held     : Set to 1'b1 whenenver core_dp_reset is internally held. Cleared to 1'b0, only if core_dp_reset_state==001 and uc_ack_core_cfg_done == 1.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_PLL_DP_RST_ST_STSr (0x0001d188 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_PLL_DP_RST_ST_STSr_SIZE 4

/*
 * This structure should be used to declare and program CORE_PLL_PLL_DP_RST_ST_STS.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_PLL_DP_RST_ST_STSr_s {
	uint32_t v[1];
	uint32_t core_pll_pll_dp_rst_st_sts[1];
	uint32_t _core_pll_pll_dp_rst_st_sts;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_PLL_DP_RST_ST_STSr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_PLL_DP_RST_ST_STSr_CLR(r) (r).core_pll_pll_dp_rst_st_sts[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_PLL_DP_RST_ST_STSr_SET(r,d) (r).core_pll_pll_dp_rst_st_sts[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_PLL_DP_RST_ST_STSr_GET(r) (r).core_pll_pll_dp_rst_st_sts[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_PLL_DP_RST_ST_STSr_CORE_DP_RESET_STATEf_GET(r) (((r).core_pll_pll_dp_rst_st_sts[0]) & 0x7)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_PLL_DP_RST_ST_STSr_CORE_DP_RESET_STATEf_SET(r,f) (r).core_pll_pll_dp_rst_st_sts[0]=(((r).core_pll_pll_dp_rst_st_sts[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7)) | (0x7 << 16)

/*
 * These macros can be used to access CORE_PLL_PLL_DP_RST_ST_STS.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_CORE_PLL_PLL_DP_RST_ST_STSr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_PLL_DP_RST_ST_STSr,(_r._core_pll_pll_dp_rst_st_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_CORE_PLL_PLL_DP_RST_ST_STSr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_PLL_DP_RST_ST_STSr,(_r._core_pll_pll_dp_rst_st_sts)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_CORE_PLL_PLL_DP_RST_ST_STSr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_PLL_DP_RST_ST_STSr,(_r._core_pll_pll_dp_rst_st_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_CORE_PLL_PLL_DP_RST_ST_STSr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_PLL_DP_RST_ST_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._core_pll_pll_dp_rst_st_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_CORE_PLL_PLL_DP_RST_ST_STSr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_PLL_DP_RST_ST_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._core_pll_pll_dp_rst_st_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_CORE_PLL_PLL_DP_RST_ST_STSr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_PLL_DP_RST_ST_STSr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._core_pll_pll_dp_rst_st_sts))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define CORE_PLL_PLL_DP_RST_ST_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_PLL_DP_RST_ST_STSr
#define CORE_PLL_PLL_DP_RST_ST_STSr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_PLL_DP_RST_ST_STSr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_PLL_DP_RST_ST_STSr_t CORE_PLL_PLL_DP_RST_ST_STSr_t;
#define CORE_PLL_PLL_DP_RST_ST_STSr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_PLL_DP_RST_ST_STSr_CLR
#define CORE_PLL_PLL_DP_RST_ST_STSr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_PLL_DP_RST_ST_STSr_SET
#define CORE_PLL_PLL_DP_RST_ST_STSr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_PLL_DP_RST_ST_STSr_GET
#define CORE_PLL_PLL_DP_RST_ST_STSr_CORE_DP_RESET_STATEf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_PLL_DP_RST_ST_STSr_CORE_DP_RESET_STATEf_GET
#define CORE_PLL_PLL_DP_RST_ST_STSr_CORE_DP_RESET_STATEf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_PLL_DP_RST_ST_STSr_CORE_DP_RESET_STATEf_SET
#define READ_CORE_PLL_PLL_DP_RST_ST_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_CORE_PLL_PLL_DP_RST_ST_STSr
#define WRITE_CORE_PLL_PLL_DP_RST_ST_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_CORE_PLL_PLL_DP_RST_ST_STSr
#define MODIFY_CORE_PLL_PLL_DP_RST_ST_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_CORE_PLL_PLL_DP_RST_ST_STSr
#define READLN_CORE_PLL_PLL_DP_RST_ST_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_CORE_PLL_PLL_DP_RST_ST_STSr
#define WRITELN_CORE_PLL_PLL_DP_RST_ST_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_CORE_PLL_PLL_DP_RST_ST_STSr
#define WRITEALL_CORE_PLL_PLL_DP_RST_ST_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_CORE_PLL_PLL_DP_RST_ST_STSr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_PLL_DP_RST_ST_STSr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  CORE_PLL_PLL_CFG_FWAPI_DATA0
 * BLOCKS:   CORE_PLL_COM
 * REGADDR:  0xd18d
 * DEVAD:    1
 * DESC:     PLL_CFG_FWAPI_DATA0
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     PLL_CFG_FWAPI_DATA0 PLL configuration firmware/API data 0This is a scratch register used by the firmware and API code to store and/or exchangePLL configuration information
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_PLL_CFG_FWAPI_DATA0r (0x0001d18d | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_PLL_CFG_FWAPI_DATA0r_SIZE 4

/*
 * This structure should be used to declare and program CORE_PLL_PLL_CFG_FWAPI_DATA0.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_PLL_CFG_FWAPI_DATA0r_s {
	uint32_t v[1];
	uint32_t core_pll_pll_cfg_fwapi_data0[1];
	uint32_t _core_pll_pll_cfg_fwapi_data0;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_PLL_CFG_FWAPI_DATA0r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_PLL_CFG_FWAPI_DATA0r_CLR(r) (r).core_pll_pll_cfg_fwapi_data0[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_PLL_CFG_FWAPI_DATA0r_SET(r,d) (r).core_pll_pll_cfg_fwapi_data0[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_PLL_CFG_FWAPI_DATA0r_GET(r) (r).core_pll_pll_cfg_fwapi_data0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_PLL_CFG_FWAPI_DATA0r_PLL_CFG_FWAPI_DATA0f_GET(r) (((r).core_pll_pll_cfg_fwapi_data0[0]) & 0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_PLL_CFG_FWAPI_DATA0r_PLL_CFG_FWAPI_DATA0f_SET(r,f) (r).core_pll_pll_cfg_fwapi_data0[0]=(((r).core_pll_pll_cfg_fwapi_data0[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access CORE_PLL_PLL_CFG_FWAPI_DATA0.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_CORE_PLL_PLL_CFG_FWAPI_DATA0r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_PLL_CFG_FWAPI_DATA0r,(_r._core_pll_pll_cfg_fwapi_data0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_CORE_PLL_PLL_CFG_FWAPI_DATA0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_PLL_CFG_FWAPI_DATA0r,(_r._core_pll_pll_cfg_fwapi_data0)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_CORE_PLL_PLL_CFG_FWAPI_DATA0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_PLL_CFG_FWAPI_DATA0r,(_r._core_pll_pll_cfg_fwapi_data0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_CORE_PLL_PLL_CFG_FWAPI_DATA0r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_PLL_CFG_FWAPI_DATA0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._core_pll_pll_cfg_fwapi_data0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_CORE_PLL_PLL_CFG_FWAPI_DATA0r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_PLL_CFG_FWAPI_DATA0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._core_pll_pll_cfg_fwapi_data0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_CORE_PLL_PLL_CFG_FWAPI_DATA0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_PLL_CFG_FWAPI_DATA0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._core_pll_pll_cfg_fwapi_data0))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define CORE_PLL_PLL_CFG_FWAPI_DATA0r BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_PLL_CFG_FWAPI_DATA0r
#define CORE_PLL_PLL_CFG_FWAPI_DATA0r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_PLL_CFG_FWAPI_DATA0r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_PLL_CFG_FWAPI_DATA0r_t CORE_PLL_PLL_CFG_FWAPI_DATA0r_t;
#define CORE_PLL_PLL_CFG_FWAPI_DATA0r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_PLL_CFG_FWAPI_DATA0r_CLR
#define CORE_PLL_PLL_CFG_FWAPI_DATA0r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_PLL_CFG_FWAPI_DATA0r_SET
#define CORE_PLL_PLL_CFG_FWAPI_DATA0r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_PLL_CFG_FWAPI_DATA0r_GET
#define CORE_PLL_PLL_CFG_FWAPI_DATA0r_PLL_CFG_FWAPI_DATA0f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_PLL_CFG_FWAPI_DATA0r_PLL_CFG_FWAPI_DATA0f_GET
#define CORE_PLL_PLL_CFG_FWAPI_DATA0r_PLL_CFG_FWAPI_DATA0f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_PLL_CFG_FWAPI_DATA0r_PLL_CFG_FWAPI_DATA0f_SET
#define READ_CORE_PLL_PLL_CFG_FWAPI_DATA0r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_CORE_PLL_PLL_CFG_FWAPI_DATA0r
#define WRITE_CORE_PLL_PLL_CFG_FWAPI_DATA0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_CORE_PLL_PLL_CFG_FWAPI_DATA0r
#define MODIFY_CORE_PLL_PLL_CFG_FWAPI_DATA0r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_CORE_PLL_PLL_CFG_FWAPI_DATA0r
#define READLN_CORE_PLL_PLL_CFG_FWAPI_DATA0r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_CORE_PLL_PLL_CFG_FWAPI_DATA0r
#define WRITELN_CORE_PLL_PLL_CFG_FWAPI_DATA0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_CORE_PLL_PLL_CFG_FWAPI_DATA0r
#define WRITEALL_CORE_PLL_PLL_CFG_FWAPI_DATA0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_CORE_PLL_PLL_CFG_FWAPI_DATA0r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_PLL_CFG_FWAPI_DATA0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  CORE_PLL_PLL_CFG_FWAPI_DATA1
 * BLOCKS:   CORE_PLL_COM
 * REGADDR:  0xd18e
 * DEVAD:    1
 * DESC:     PLL_CFG_FWAPI_DATA1
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     PLL_CFG_FWAPI_DATA1 PLL configuration firmware/API data 1This is a scratch register used by the firmware and API code to store and/or exchangePLL configuration information
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_PLL_CFG_FWAPI_DATA1r (0x0001d18e | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_PLL_CFG_FWAPI_DATA1r_SIZE 4

/*
 * This structure should be used to declare and program CORE_PLL_PLL_CFG_FWAPI_DATA1.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_PLL_CFG_FWAPI_DATA1r_s {
	uint32_t v[1];
	uint32_t core_pll_pll_cfg_fwapi_data1[1];
	uint32_t _core_pll_pll_cfg_fwapi_data1;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_PLL_CFG_FWAPI_DATA1r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_PLL_CFG_FWAPI_DATA1r_CLR(r) (r).core_pll_pll_cfg_fwapi_data1[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_PLL_CFG_FWAPI_DATA1r_SET(r,d) (r).core_pll_pll_cfg_fwapi_data1[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_PLL_CFG_FWAPI_DATA1r_GET(r) (r).core_pll_pll_cfg_fwapi_data1[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_PLL_CFG_FWAPI_DATA1r_PLL_CFG_FWAPI_DATA1f_GET(r) (((r).core_pll_pll_cfg_fwapi_data1[0]) & 0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_PLL_CFG_FWAPI_DATA1r_PLL_CFG_FWAPI_DATA1f_SET(r,f) (r).core_pll_pll_cfg_fwapi_data1[0]=(((r).core_pll_pll_cfg_fwapi_data1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access CORE_PLL_PLL_CFG_FWAPI_DATA1.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_CORE_PLL_PLL_CFG_FWAPI_DATA1r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_PLL_CFG_FWAPI_DATA1r,(_r._core_pll_pll_cfg_fwapi_data1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_CORE_PLL_PLL_CFG_FWAPI_DATA1r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_PLL_CFG_FWAPI_DATA1r,(_r._core_pll_pll_cfg_fwapi_data1)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_CORE_PLL_PLL_CFG_FWAPI_DATA1r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_PLL_CFG_FWAPI_DATA1r,(_r._core_pll_pll_cfg_fwapi_data1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_CORE_PLL_PLL_CFG_FWAPI_DATA1r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_PLL_CFG_FWAPI_DATA1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._core_pll_pll_cfg_fwapi_data1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_CORE_PLL_PLL_CFG_FWAPI_DATA1r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_PLL_CFG_FWAPI_DATA1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._core_pll_pll_cfg_fwapi_data1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_CORE_PLL_PLL_CFG_FWAPI_DATA1r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_PLL_CFG_FWAPI_DATA1r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._core_pll_pll_cfg_fwapi_data1))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define CORE_PLL_PLL_CFG_FWAPI_DATA1r BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_PLL_CFG_FWAPI_DATA1r
#define CORE_PLL_PLL_CFG_FWAPI_DATA1r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_PLL_CFG_FWAPI_DATA1r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_PLL_CFG_FWAPI_DATA1r_t CORE_PLL_PLL_CFG_FWAPI_DATA1r_t;
#define CORE_PLL_PLL_CFG_FWAPI_DATA1r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_PLL_CFG_FWAPI_DATA1r_CLR
#define CORE_PLL_PLL_CFG_FWAPI_DATA1r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_PLL_CFG_FWAPI_DATA1r_SET
#define CORE_PLL_PLL_CFG_FWAPI_DATA1r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_PLL_CFG_FWAPI_DATA1r_GET
#define CORE_PLL_PLL_CFG_FWAPI_DATA1r_PLL_CFG_FWAPI_DATA1f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_PLL_CFG_FWAPI_DATA1r_PLL_CFG_FWAPI_DATA1f_GET
#define CORE_PLL_PLL_CFG_FWAPI_DATA1r_PLL_CFG_FWAPI_DATA1f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_PLL_CFG_FWAPI_DATA1r_PLL_CFG_FWAPI_DATA1f_SET
#define READ_CORE_PLL_PLL_CFG_FWAPI_DATA1r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_CORE_PLL_PLL_CFG_FWAPI_DATA1r
#define WRITE_CORE_PLL_PLL_CFG_FWAPI_DATA1r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_CORE_PLL_PLL_CFG_FWAPI_DATA1r
#define MODIFY_CORE_PLL_PLL_CFG_FWAPI_DATA1r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_CORE_PLL_PLL_CFG_FWAPI_DATA1r
#define READLN_CORE_PLL_PLL_CFG_FWAPI_DATA1r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_CORE_PLL_PLL_CFG_FWAPI_DATA1r
#define WRITELN_CORE_PLL_PLL_CFG_FWAPI_DATA1r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_CORE_PLL_PLL_CFG_FWAPI_DATA1r
#define WRITEALL_CORE_PLL_PLL_CFG_FWAPI_DATA1r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_CORE_PLL_PLL_CFG_FWAPI_DATA1r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_CORE_PLL_PLL_CFG_FWAPI_DATA1r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  LN_ADDR0
 * BLOCKS:   DIG_COM_B
 * REGADDR:  0xd190
 * DEVAD:    1
 * DESC:     LANE_ADDR_0
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RX_LANE_ADDR_0   Determines the logical address associated with the PMD RX lane with physical index  "_0" at the PCS interface.rx_lane_addr_0 is the logical address of the lane with pins at the PCS interface labeled "_0".
 *     TX_LANE_ADDR_0   Determines the logical address associated with the PMD TX lane with physical index  "_0" at the PCS interface.tx_lane_addr_0 is the logical address of the TX lane with pins at the PCS interface labeled "_0".
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR0r (0x0001d190 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR0r_SIZE 4

/*
 * This structure should be used to declare and program LN_ADDR0.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR0r_s {
	uint32_t v[1];
	uint32_t ln_addr0[1];
	uint32_t _ln_addr0;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR0r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR0r_CLR(r) (r).ln_addr0[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR0r_SET(r,d) (r).ln_addr0[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR0r_GET(r) (r).ln_addr0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR0r_TX_LANE_ADDR_0f_GET(r) ((((r).ln_addr0[0]) >> 8) & 0x1f)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR0r_TX_LANE_ADDR_0f_SET(r,f) (r).ln_addr0[0]=(((r).ln_addr0[0] & ~((uint32_t)0x1f << 8)) | ((((uint32_t)f) & 0x1f) << 8)) | (31 << (16 + 8))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR0r_RX_LANE_ADDR_0f_GET(r) (((r).ln_addr0[0]) & 0x1f)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR0r_RX_LANE_ADDR_0f_SET(r,f) (r).ln_addr0[0]=(((r).ln_addr0[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f)) | (0x1f << 16)

/*
 * These macros can be used to access LN_ADDR0.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_LN_ADDR0r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR0r,(_r._ln_addr0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_LN_ADDR0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR0r,(_r._ln_addr0)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_LN_ADDR0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR0r,(_r._ln_addr0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_LN_ADDR0r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ln_addr0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_LN_ADDR0r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ln_addr0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_LN_ADDR0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._ln_addr0))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define LN_ADDR0r BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR0r
#define LN_ADDR0r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR0r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR0r_t LN_ADDR0r_t;
#define LN_ADDR0r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR0r_CLR
#define LN_ADDR0r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR0r_SET
#define LN_ADDR0r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR0r_GET
#define LN_ADDR0r_TX_LANE_ADDR_0f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR0r_TX_LANE_ADDR_0f_GET
#define LN_ADDR0r_TX_LANE_ADDR_0f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR0r_TX_LANE_ADDR_0f_SET
#define LN_ADDR0r_RX_LANE_ADDR_0f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR0r_RX_LANE_ADDR_0f_GET
#define LN_ADDR0r_RX_LANE_ADDR_0f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR0r_RX_LANE_ADDR_0f_SET
#define READ_LN_ADDR0r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_LN_ADDR0r
#define WRITE_LN_ADDR0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_LN_ADDR0r
#define MODIFY_LN_ADDR0r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_LN_ADDR0r
#define READLN_LN_ADDR0r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_LN_ADDR0r
#define WRITELN_LN_ADDR0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_LN_ADDR0r
#define WRITEALL_LN_ADDR0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_LN_ADDR0r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  LN_ADDR1
 * BLOCKS:   DIG_COM_B
 * REGADDR:  0xd191
 * DEVAD:    1
 * DESC:     LANE_ADDR_1
 * RESETVAL: 0x101 (257)
 * ACCESS:   R/W
 * FIELDS:
 *     RX_LANE_ADDR_1   Determines the logical address associated with the PMD RX lane with physical index  "_1" at the PCS interface.rx_lane_addr_1 is the logical address of the lane with pins at the PCS interface labeled "_1".
 *     TX_LANE_ADDR_1   Determines the logical address associated with the PMD TX lane with physical index  "_1" at the PCS interface.tx_lane_addr_1 is the logical address of the TX lane with pins at the PCS interface labeled "_1".
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR1r (0x0001d191 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR1r_SIZE 4

/*
 * This structure should be used to declare and program LN_ADDR1.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR1r_s {
	uint32_t v[1];
	uint32_t ln_addr1[1];
	uint32_t _ln_addr1;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR1r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR1r_CLR(r) (r).ln_addr1[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR1r_SET(r,d) (r).ln_addr1[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR1r_GET(r) (r).ln_addr1[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR1r_TX_LANE_ADDR_1f_GET(r) ((((r).ln_addr1[0]) >> 8) & 0x1f)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR1r_TX_LANE_ADDR_1f_SET(r,f) (r).ln_addr1[0]=(((r).ln_addr1[0] & ~((uint32_t)0x1f << 8)) | ((((uint32_t)f) & 0x1f) << 8)) | (31 << (16 + 8))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR1r_RX_LANE_ADDR_1f_GET(r) (((r).ln_addr1[0]) & 0x1f)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR1r_RX_LANE_ADDR_1f_SET(r,f) (r).ln_addr1[0]=(((r).ln_addr1[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f)) | (0x1f << 16)

/*
 * These macros can be used to access LN_ADDR1.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_LN_ADDR1r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR1r,(_r._ln_addr1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_LN_ADDR1r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR1r,(_r._ln_addr1)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_LN_ADDR1r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR1r,(_r._ln_addr1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_LN_ADDR1r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ln_addr1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_LN_ADDR1r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ln_addr1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_LN_ADDR1r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR1r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._ln_addr1))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define LN_ADDR1r BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR1r
#define LN_ADDR1r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR1r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR1r_t LN_ADDR1r_t;
#define LN_ADDR1r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR1r_CLR
#define LN_ADDR1r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR1r_SET
#define LN_ADDR1r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR1r_GET
#define LN_ADDR1r_TX_LANE_ADDR_1f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR1r_TX_LANE_ADDR_1f_GET
#define LN_ADDR1r_TX_LANE_ADDR_1f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR1r_TX_LANE_ADDR_1f_SET
#define LN_ADDR1r_RX_LANE_ADDR_1f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR1r_RX_LANE_ADDR_1f_GET
#define LN_ADDR1r_RX_LANE_ADDR_1f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR1r_RX_LANE_ADDR_1f_SET
#define READ_LN_ADDR1r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_LN_ADDR1r
#define WRITE_LN_ADDR1r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_LN_ADDR1r
#define MODIFY_LN_ADDR1r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_LN_ADDR1r
#define READLN_LN_ADDR1r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_LN_ADDR1r
#define WRITELN_LN_ADDR1r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_LN_ADDR1r
#define WRITEALL_LN_ADDR1r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_LN_ADDR1r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR1r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  LN_ADDR2
 * BLOCKS:   DIG_COM_B
 * REGADDR:  0xd192
 * DEVAD:    1
 * DESC:     LANE_ADDR_2
 * RESETVAL: 0x202 (514)
 * ACCESS:   R/W
 * FIELDS:
 *     RX_LANE_ADDR_2   Determines the logical address associated with the PMD RX lane with physical index  "_2" at the PCS interface.rx_lane_addr_2 is the logical address of the lane with pins at the PCS interface labeled "_2".
 *     TX_LANE_ADDR_2   Determines the logical address associated with the PMD TX lane with physical index  "_2" at the PCS interface.tx_lane_addr_2 is the logical address of the TX lane with pins at the PCS interface labeled "_2".
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR2r (0x0001d192 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR2r_SIZE 4

/*
 * This structure should be used to declare and program LN_ADDR2.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR2r_s {
	uint32_t v[1];
	uint32_t ln_addr2[1];
	uint32_t _ln_addr2;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR2r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR2r_CLR(r) (r).ln_addr2[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR2r_SET(r,d) (r).ln_addr2[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR2r_GET(r) (r).ln_addr2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR2r_TX_LANE_ADDR_2f_GET(r) ((((r).ln_addr2[0]) >> 8) & 0x1f)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR2r_TX_LANE_ADDR_2f_SET(r,f) (r).ln_addr2[0]=(((r).ln_addr2[0] & ~((uint32_t)0x1f << 8)) | ((((uint32_t)f) & 0x1f) << 8)) | (31 << (16 + 8))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR2r_RX_LANE_ADDR_2f_GET(r) (((r).ln_addr2[0]) & 0x1f)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR2r_RX_LANE_ADDR_2f_SET(r,f) (r).ln_addr2[0]=(((r).ln_addr2[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f)) | (0x1f << 16)

/*
 * These macros can be used to access LN_ADDR2.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_LN_ADDR2r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR2r,(_r._ln_addr2))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_LN_ADDR2r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR2r,(_r._ln_addr2)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_LN_ADDR2r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR2r,(_r._ln_addr2))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_LN_ADDR2r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ln_addr2))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_LN_ADDR2r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ln_addr2))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_LN_ADDR2r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._ln_addr2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define LN_ADDR2r BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR2r
#define LN_ADDR2r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR2r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR2r_t LN_ADDR2r_t;
#define LN_ADDR2r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR2r_CLR
#define LN_ADDR2r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR2r_SET
#define LN_ADDR2r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR2r_GET
#define LN_ADDR2r_TX_LANE_ADDR_2f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR2r_TX_LANE_ADDR_2f_GET
#define LN_ADDR2r_TX_LANE_ADDR_2f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR2r_TX_LANE_ADDR_2f_SET
#define LN_ADDR2r_RX_LANE_ADDR_2f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR2r_RX_LANE_ADDR_2f_GET
#define LN_ADDR2r_RX_LANE_ADDR_2f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR2r_RX_LANE_ADDR_2f_SET
#define READ_LN_ADDR2r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_LN_ADDR2r
#define WRITE_LN_ADDR2r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_LN_ADDR2r
#define MODIFY_LN_ADDR2r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_LN_ADDR2r
#define READLN_LN_ADDR2r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_LN_ADDR2r
#define WRITELN_LN_ADDR2r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_LN_ADDR2r
#define WRITEALL_LN_ADDR2r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_LN_ADDR2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  LN_ADDR3
 * BLOCKS:   DIG_COM_B
 * REGADDR:  0xd193
 * DEVAD:    1
 * DESC:     LANE_ADDR_3
 * RESETVAL: 0x303 (771)
 * ACCESS:   R/W
 * FIELDS:
 *     RX_LANE_ADDR_3   Determines the logical address associated with the PMD RX lane with physical index  "_3" at the PCS interface.rx_lane_addr_3 is the logical address of the lane with pins at the PCS interface labeled "_3".
 *     TX_LANE_ADDR_3   Determines the logical address associated with the PMD TX lane with physical index  "_3" at the PCS interface.tx_lane_addr_3 is the logical address of the TX lane with pins at the PCS interface labeled "_3".
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR3r (0x0001d193 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR3r_SIZE 4

/*
 * This structure should be used to declare and program LN_ADDR3.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR3r_s {
	uint32_t v[1];
	uint32_t ln_addr3[1];
	uint32_t _ln_addr3;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR3r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR3r_CLR(r) (r).ln_addr3[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR3r_SET(r,d) (r).ln_addr3[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR3r_GET(r) (r).ln_addr3[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR3r_TX_LANE_ADDR_3f_GET(r) ((((r).ln_addr3[0]) >> 8) & 0x1f)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR3r_TX_LANE_ADDR_3f_SET(r,f) (r).ln_addr3[0]=(((r).ln_addr3[0] & ~((uint32_t)0x1f << 8)) | ((((uint32_t)f) & 0x1f) << 8)) | (31 << (16 + 8))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR3r_RX_LANE_ADDR_3f_GET(r) (((r).ln_addr3[0]) & 0x1f)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR3r_RX_LANE_ADDR_3f_SET(r,f) (r).ln_addr3[0]=(((r).ln_addr3[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f)) | (0x1f << 16)

/*
 * These macros can be used to access LN_ADDR3.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_LN_ADDR3r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR3r,(_r._ln_addr3))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_LN_ADDR3r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR3r,(_r._ln_addr3)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_LN_ADDR3r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR3r,(_r._ln_addr3))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_LN_ADDR3r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR3r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ln_addr3))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_LN_ADDR3r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR3r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ln_addr3))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_LN_ADDR3r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR3r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._ln_addr3))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define LN_ADDR3r BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR3r
#define LN_ADDR3r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR3r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR3r_t LN_ADDR3r_t;
#define LN_ADDR3r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR3r_CLR
#define LN_ADDR3r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR3r_SET
#define LN_ADDR3r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR3r_GET
#define LN_ADDR3r_TX_LANE_ADDR_3f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR3r_TX_LANE_ADDR_3f_GET
#define LN_ADDR3r_TX_LANE_ADDR_3f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR3r_TX_LANE_ADDR_3f_SET
#define LN_ADDR3r_RX_LANE_ADDR_3f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR3r_RX_LANE_ADDR_3f_GET
#define LN_ADDR3r_RX_LANE_ADDR_3f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR3r_RX_LANE_ADDR_3f_SET
#define READ_LN_ADDR3r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_LN_ADDR3r
#define WRITE_LN_ADDR3r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_LN_ADDR3r
#define MODIFY_LN_ADDR3r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_LN_ADDR3r
#define READLN_LN_ADDR3r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_LN_ADDR3r
#define WRITELN_LN_ADDR3r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_LN_ADDR3r
#define WRITEALL_LN_ADDR3r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_LN_ADDR3r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR3r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  LN_ADDR4
 * BLOCKS:   DIG_COM_B
 * REGADDR:  0xd194
 * DEVAD:    1
 * DESC:     LANE_ADDR_4
 * RESETVAL: 0x404 (1028)
 * ACCESS:   R/W
 * FIELDS:
 *     RX_LANE_ADDR_4   Determines the logical address associated with the PMD RX lane with physical index  "_4" at the PCS interface.rx_lane_addr_4 is the logical address of the lane with pins at the PCS interface labeled "_4".
 *     TX_LANE_ADDR_4   Determines the logical address associated with the PMD TX lane with physical index  "_4" at the PCS interface.tx_lane_addr_4 is the logical address of the TX lane with pins at the PCS interface labeled "_4".
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR4r (0x0001d194 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR4r_SIZE 4

/*
 * This structure should be used to declare and program LN_ADDR4.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR4r_s {
	uint32_t v[1];
	uint32_t ln_addr4[1];
	uint32_t _ln_addr4;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR4r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR4r_CLR(r) (r).ln_addr4[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR4r_SET(r,d) (r).ln_addr4[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR4r_GET(r) (r).ln_addr4[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR4r_TX_LANE_ADDR_4f_GET(r) ((((r).ln_addr4[0]) >> 8) & 0x1f)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR4r_TX_LANE_ADDR_4f_SET(r,f) (r).ln_addr4[0]=(((r).ln_addr4[0] & ~((uint32_t)0x1f << 8)) | ((((uint32_t)f) & 0x1f) << 8)) | (31 << (16 + 8))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR4r_RX_LANE_ADDR_4f_GET(r) (((r).ln_addr4[0]) & 0x1f)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR4r_RX_LANE_ADDR_4f_SET(r,f) (r).ln_addr4[0]=(((r).ln_addr4[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f)) | (0x1f << 16)

/*
 * These macros can be used to access LN_ADDR4.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_LN_ADDR4r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR4r,(_r._ln_addr4))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_LN_ADDR4r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR4r,(_r._ln_addr4)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_LN_ADDR4r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR4r,(_r._ln_addr4))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_LN_ADDR4r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR4r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ln_addr4))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_LN_ADDR4r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR4r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ln_addr4))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_LN_ADDR4r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR4r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._ln_addr4))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define LN_ADDR4r BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR4r
#define LN_ADDR4r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR4r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR4r_t LN_ADDR4r_t;
#define LN_ADDR4r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR4r_CLR
#define LN_ADDR4r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR4r_SET
#define LN_ADDR4r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR4r_GET
#define LN_ADDR4r_TX_LANE_ADDR_4f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR4r_TX_LANE_ADDR_4f_GET
#define LN_ADDR4r_TX_LANE_ADDR_4f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR4r_TX_LANE_ADDR_4f_SET
#define LN_ADDR4r_RX_LANE_ADDR_4f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR4r_RX_LANE_ADDR_4f_GET
#define LN_ADDR4r_RX_LANE_ADDR_4f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR4r_RX_LANE_ADDR_4f_SET
#define READ_LN_ADDR4r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_LN_ADDR4r
#define WRITE_LN_ADDR4r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_LN_ADDR4r
#define MODIFY_LN_ADDR4r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_LN_ADDR4r
#define READLN_LN_ADDR4r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_LN_ADDR4r
#define WRITELN_LN_ADDR4r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_LN_ADDR4r
#define WRITEALL_LN_ADDR4r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_LN_ADDR4r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR4r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  LN_ADDR5
 * BLOCKS:   DIG_COM_B
 * REGADDR:  0xd195
 * DEVAD:    1
 * DESC:     LANE_ADDR_5
 * RESETVAL: 0x505 (1285)
 * ACCESS:   R/W
 * FIELDS:
 *     RX_LANE_ADDR_5   Determines the logical address associated with the PMD RX lane with physical index  "_5" at the PCS interface.rx_lane_addr_5 is the logical address of the lane with pins at the PCS interface labeled "_5".
 *     TX_LANE_ADDR_5   Determines the logical address associated with the PMD TX lane with physical index  "_5" at the PCS interface.tx_lane_addr_5 is the logical address of the TX lane with pins at the PCS interface labeled "_5".
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR5r (0x0001d195 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR5r_SIZE 4

/*
 * This structure should be used to declare and program LN_ADDR5.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR5r_s {
	uint32_t v[1];
	uint32_t ln_addr5[1];
	uint32_t _ln_addr5;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR5r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR5r_CLR(r) (r).ln_addr5[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR5r_SET(r,d) (r).ln_addr5[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR5r_GET(r) (r).ln_addr5[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR5r_TX_LANE_ADDR_5f_GET(r) ((((r).ln_addr5[0]) >> 8) & 0x1f)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR5r_TX_LANE_ADDR_5f_SET(r,f) (r).ln_addr5[0]=(((r).ln_addr5[0] & ~((uint32_t)0x1f << 8)) | ((((uint32_t)f) & 0x1f) << 8)) | (31 << (16 + 8))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR5r_RX_LANE_ADDR_5f_GET(r) (((r).ln_addr5[0]) & 0x1f)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR5r_RX_LANE_ADDR_5f_SET(r,f) (r).ln_addr5[0]=(((r).ln_addr5[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f)) | (0x1f << 16)

/*
 * These macros can be used to access LN_ADDR5.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_LN_ADDR5r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR5r,(_r._ln_addr5))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_LN_ADDR5r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR5r,(_r._ln_addr5)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_LN_ADDR5r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR5r,(_r._ln_addr5))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_LN_ADDR5r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR5r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ln_addr5))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_LN_ADDR5r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR5r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ln_addr5))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_LN_ADDR5r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR5r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._ln_addr5))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define LN_ADDR5r BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR5r
#define LN_ADDR5r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR5r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR5r_t LN_ADDR5r_t;
#define LN_ADDR5r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR5r_CLR
#define LN_ADDR5r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR5r_SET
#define LN_ADDR5r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR5r_GET
#define LN_ADDR5r_TX_LANE_ADDR_5f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR5r_TX_LANE_ADDR_5f_GET
#define LN_ADDR5r_TX_LANE_ADDR_5f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR5r_TX_LANE_ADDR_5f_SET
#define LN_ADDR5r_RX_LANE_ADDR_5f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR5r_RX_LANE_ADDR_5f_GET
#define LN_ADDR5r_RX_LANE_ADDR_5f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR5r_RX_LANE_ADDR_5f_SET
#define READ_LN_ADDR5r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_LN_ADDR5r
#define WRITE_LN_ADDR5r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_LN_ADDR5r
#define MODIFY_LN_ADDR5r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_LN_ADDR5r
#define READLN_LN_ADDR5r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_LN_ADDR5r
#define WRITELN_LN_ADDR5r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_LN_ADDR5r
#define WRITEALL_LN_ADDR5r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_LN_ADDR5r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR5r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  LN_ADDR6
 * BLOCKS:   DIG_COM_B
 * REGADDR:  0xd196
 * DEVAD:    1
 * DESC:     LANE_ADDR_6
 * RESETVAL: 0x606 (1542)
 * ACCESS:   R/W
 * FIELDS:
 *     RX_LANE_ADDR_6   Determines the logical address associated with the PMD RX lane with physical index  "_6" at the PCS interface.rx_lane_addr_6 is the logical address of the lane with pins at the PCS interface labeled "_6".
 *     TX_LANE_ADDR_6   Determines the logical address associated with the PMD TX lane with physical index  "_6" at the PCS interface.tx_lane_addr_6 is the logical address of the TX lane with pins at the PCS interface labeled "_6".
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR6r (0x0001d196 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR6r_SIZE 4

/*
 * This structure should be used to declare and program LN_ADDR6.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR6r_s {
	uint32_t v[1];
	uint32_t ln_addr6[1];
	uint32_t _ln_addr6;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR6r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR6r_CLR(r) (r).ln_addr6[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR6r_SET(r,d) (r).ln_addr6[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR6r_GET(r) (r).ln_addr6[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR6r_TX_LANE_ADDR_6f_GET(r) ((((r).ln_addr6[0]) >> 8) & 0x1f)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR6r_TX_LANE_ADDR_6f_SET(r,f) (r).ln_addr6[0]=(((r).ln_addr6[0] & ~((uint32_t)0x1f << 8)) | ((((uint32_t)f) & 0x1f) << 8)) | (31 << (16 + 8))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR6r_RX_LANE_ADDR_6f_GET(r) (((r).ln_addr6[0]) & 0x1f)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR6r_RX_LANE_ADDR_6f_SET(r,f) (r).ln_addr6[0]=(((r).ln_addr6[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f)) | (0x1f << 16)

/*
 * These macros can be used to access LN_ADDR6.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_LN_ADDR6r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR6r,(_r._ln_addr6))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_LN_ADDR6r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR6r,(_r._ln_addr6)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_LN_ADDR6r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR6r,(_r._ln_addr6))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_LN_ADDR6r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR6r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ln_addr6))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_LN_ADDR6r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR6r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ln_addr6))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_LN_ADDR6r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR6r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._ln_addr6))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define LN_ADDR6r BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR6r
#define LN_ADDR6r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR6r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR6r_t LN_ADDR6r_t;
#define LN_ADDR6r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR6r_CLR
#define LN_ADDR6r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR6r_SET
#define LN_ADDR6r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR6r_GET
#define LN_ADDR6r_TX_LANE_ADDR_6f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR6r_TX_LANE_ADDR_6f_GET
#define LN_ADDR6r_TX_LANE_ADDR_6f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR6r_TX_LANE_ADDR_6f_SET
#define LN_ADDR6r_RX_LANE_ADDR_6f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR6r_RX_LANE_ADDR_6f_GET
#define LN_ADDR6r_RX_LANE_ADDR_6f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR6r_RX_LANE_ADDR_6f_SET
#define READ_LN_ADDR6r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_LN_ADDR6r
#define WRITE_LN_ADDR6r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_LN_ADDR6r
#define MODIFY_LN_ADDR6r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_LN_ADDR6r
#define READLN_LN_ADDR6r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_LN_ADDR6r
#define WRITELN_LN_ADDR6r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_LN_ADDR6r
#define WRITEALL_LN_ADDR6r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_LN_ADDR6r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR6r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  LN_ADDR7
 * BLOCKS:   DIG_COM_B
 * REGADDR:  0xd197
 * DEVAD:    1
 * DESC:     LANE_ADDR_7
 * RESETVAL: 0x707 (1799)
 * ACCESS:   R/W
 * FIELDS:
 *     RX_LANE_ADDR_7   Determines the logical address associated with the PMD RX lane with physical index  "_7" at the PCS interface.rx_lane_addr_7 is the logical address of the lane with pins at the PCS interface labeled "_7".
 *     TX_LANE_ADDR_7   Determines the logical address associated with the PMD TX lane with physical index  "_7" at the PCS interface.tx_lane_addr_7 is the logical address of the TX lane with pins at the PCS interface labeled "_7".
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR7r (0x0001d197 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR7r_SIZE 4

/*
 * This structure should be used to declare and program LN_ADDR7.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR7r_s {
	uint32_t v[1];
	uint32_t ln_addr7[1];
	uint32_t _ln_addr7;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR7r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR7r_CLR(r) (r).ln_addr7[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR7r_SET(r,d) (r).ln_addr7[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR7r_GET(r) (r).ln_addr7[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR7r_TX_LANE_ADDR_7f_GET(r) ((((r).ln_addr7[0]) >> 8) & 0x1f)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR7r_TX_LANE_ADDR_7f_SET(r,f) (r).ln_addr7[0]=(((r).ln_addr7[0] & ~((uint32_t)0x1f << 8)) | ((((uint32_t)f) & 0x1f) << 8)) | (31 << (16 + 8))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR7r_RX_LANE_ADDR_7f_GET(r) (((r).ln_addr7[0]) & 0x1f)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR7r_RX_LANE_ADDR_7f_SET(r,f) (r).ln_addr7[0]=(((r).ln_addr7[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f)) | (0x1f << 16)

/*
 * These macros can be used to access LN_ADDR7.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_LN_ADDR7r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR7r,(_r._ln_addr7))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_LN_ADDR7r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR7r,(_r._ln_addr7)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_LN_ADDR7r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR7r,(_r._ln_addr7))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_LN_ADDR7r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR7r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ln_addr7))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_LN_ADDR7r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR7r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ln_addr7))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_LN_ADDR7r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR7r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._ln_addr7))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define LN_ADDR7r BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR7r
#define LN_ADDR7r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR7r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR7r_t LN_ADDR7r_t;
#define LN_ADDR7r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR7r_CLR
#define LN_ADDR7r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR7r_SET
#define LN_ADDR7r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR7r_GET
#define LN_ADDR7r_TX_LANE_ADDR_7f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR7r_TX_LANE_ADDR_7f_GET
#define LN_ADDR7r_TX_LANE_ADDR_7f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR7r_TX_LANE_ADDR_7f_SET
#define LN_ADDR7r_RX_LANE_ADDR_7f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR7r_RX_LANE_ADDR_7f_GET
#define LN_ADDR7r_RX_LANE_ADDR_7f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR7r_RX_LANE_ADDR_7f_SET
#define READ_LN_ADDR7r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_LN_ADDR7r
#define WRITE_LN_ADDR7r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_LN_ADDR7r
#define MODIFY_LN_ADDR7r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_LN_ADDR7r
#define READLN_LN_ADDR7r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_LN_ADDR7r
#define WRITELN_LN_ADDR7r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_LN_ADDR7r
#define WRITEALL_LN_ADDR7r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_LN_ADDR7r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_ADDR7r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  DIG_COM_B_STS_AFE_IPVERSION_ID
 * BLOCKS:   DIG_COM_B
 * REGADDR:  0xd19a
 * DEVAD:    1
 * DESC:     DIG_COM_B_STATUS_AFE_IPVERSION_ID
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     AFE_IPVERSION_ID Status from AFE o_ipversion_id pin.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_COM_B_STS_AFE_IPVERSION_IDr (0x0001d19a | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_COM_B_STS_AFE_IPVERSION_IDr_SIZE 4

/*
 * This structure should be used to declare and program DIG_COM_B_STS_AFE_IPVERSION_ID.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_COM_B_STS_AFE_IPVERSION_IDr_s {
	uint32_t v[1];
	uint32_t dig_com_b_sts_afe_ipversion_id[1];
	uint32_t _dig_com_b_sts_afe_ipversion_id;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_COM_B_STS_AFE_IPVERSION_IDr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_COM_B_STS_AFE_IPVERSION_IDr_CLR(r) (r).dig_com_b_sts_afe_ipversion_id[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_COM_B_STS_AFE_IPVERSION_IDr_SET(r,d) (r).dig_com_b_sts_afe_ipversion_id[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_COM_B_STS_AFE_IPVERSION_IDr_GET(r) (r).dig_com_b_sts_afe_ipversion_id[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_COM_B_STS_AFE_IPVERSION_IDr_AFE_IPVERSION_IDf_GET(r) (((r).dig_com_b_sts_afe_ipversion_id[0]) & 0x3f)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_COM_B_STS_AFE_IPVERSION_IDr_AFE_IPVERSION_IDf_SET(r,f) (r).dig_com_b_sts_afe_ipversion_id[0]=(((r).dig_com_b_sts_afe_ipversion_id[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f)) | (0x3f << 16)

/*
 * These macros can be used to access DIG_COM_B_STS_AFE_IPVERSION_ID.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DIG_COM_B_STS_AFE_IPVERSION_IDr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_COM_B_STS_AFE_IPVERSION_IDr,(_r._dig_com_b_sts_afe_ipversion_id))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DIG_COM_B_STS_AFE_IPVERSION_IDr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_COM_B_STS_AFE_IPVERSION_IDr,(_r._dig_com_b_sts_afe_ipversion_id)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DIG_COM_B_STS_AFE_IPVERSION_IDr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_COM_B_STS_AFE_IPVERSION_IDr,(_r._dig_com_b_sts_afe_ipversion_id))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DIG_COM_B_STS_AFE_IPVERSION_IDr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_COM_B_STS_AFE_IPVERSION_IDr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dig_com_b_sts_afe_ipversion_id))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DIG_COM_B_STS_AFE_IPVERSION_IDr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_COM_B_STS_AFE_IPVERSION_IDr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dig_com_b_sts_afe_ipversion_id))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DIG_COM_B_STS_AFE_IPVERSION_IDr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_COM_B_STS_AFE_IPVERSION_IDr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dig_com_b_sts_afe_ipversion_id))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DIG_COM_B_STS_AFE_IPVERSION_IDr BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_COM_B_STS_AFE_IPVERSION_IDr
#define DIG_COM_B_STS_AFE_IPVERSION_IDr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_COM_B_STS_AFE_IPVERSION_IDr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_COM_B_STS_AFE_IPVERSION_IDr_t DIG_COM_B_STS_AFE_IPVERSION_IDr_t;
#define DIG_COM_B_STS_AFE_IPVERSION_IDr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_COM_B_STS_AFE_IPVERSION_IDr_CLR
#define DIG_COM_B_STS_AFE_IPVERSION_IDr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_COM_B_STS_AFE_IPVERSION_IDr_SET
#define DIG_COM_B_STS_AFE_IPVERSION_IDr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_COM_B_STS_AFE_IPVERSION_IDr_GET
#define DIG_COM_B_STS_AFE_IPVERSION_IDr_AFE_IPVERSION_IDf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_COM_B_STS_AFE_IPVERSION_IDr_AFE_IPVERSION_IDf_GET
#define DIG_COM_B_STS_AFE_IPVERSION_IDr_AFE_IPVERSION_IDf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_COM_B_STS_AFE_IPVERSION_IDr_AFE_IPVERSION_IDf_SET
#define READ_DIG_COM_B_STS_AFE_IPVERSION_IDr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DIG_COM_B_STS_AFE_IPVERSION_IDr
#define WRITE_DIG_COM_B_STS_AFE_IPVERSION_IDr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DIG_COM_B_STS_AFE_IPVERSION_IDr
#define MODIFY_DIG_COM_B_STS_AFE_IPVERSION_IDr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DIG_COM_B_STS_AFE_IPVERSION_IDr
#define READLN_DIG_COM_B_STS_AFE_IPVERSION_IDr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DIG_COM_B_STS_AFE_IPVERSION_IDr
#define WRITELN_DIG_COM_B_STS_AFE_IPVERSION_IDr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DIG_COM_B_STS_AFE_IPVERSION_IDr
#define WRITEALL_DIG_COM_B_STS_AFE_IPVERSION_IDr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DIG_COM_B_STS_AFE_IPVERSION_IDr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_DIG_COM_B_STS_AFE_IPVERSION_IDr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  RX_LN_CLK_RST_N_PWRDWN_CTL
 * BLOCKS:   RX_CKRST_CTRL
 * REGADDR:  0xd1a1
 * DEVAD:    1
 * DESC:     RX_LANE_CLK_RESET_N_POWERDOWN_CONTROL
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     LN_RX_S_PWRDN    Active High Power Down control for RX Lane.If asserted by writing to 1'b1 will power down the RX Lane.
 *     AFE_SIGDET_PWRDN Power Down for Signal Detect. 1=power down
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_CLK_RST_N_PWRDWN_CTLr (0x0001d1a1 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_CLK_RST_N_PWRDWN_CTLr_SIZE 4

/*
 * This structure should be used to declare and program RX_LN_CLK_RST_N_PWRDWN_CTL.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_CLK_RST_N_PWRDWN_CTLr_s {
	uint32_t v[1];
	uint32_t rx_ln_clk_rst_n_pwrdwn_ctl[1];
	uint32_t _rx_ln_clk_rst_n_pwrdwn_ctl;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_CLK_RST_N_PWRDWN_CTLr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_CLK_RST_N_PWRDWN_CTLr_CLR(r) (r).rx_ln_clk_rst_n_pwrdwn_ctl[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_CLK_RST_N_PWRDWN_CTLr_SET(r,d) (r).rx_ln_clk_rst_n_pwrdwn_ctl[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_CLK_RST_N_PWRDWN_CTLr_GET(r) (r).rx_ln_clk_rst_n_pwrdwn_ctl[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_CLK_RST_N_PWRDWN_CTLr_AFE_SIGDET_PWRDNf_GET(r) ((((r).rx_ln_clk_rst_n_pwrdwn_ctl[0]) >> 1) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_CLK_RST_N_PWRDWN_CTLr_AFE_SIGDET_PWRDNf_SET(r,f) (r).rx_ln_clk_rst_n_pwrdwn_ctl[0]=(((r).rx_ln_clk_rst_n_pwrdwn_ctl[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_CLK_RST_N_PWRDWN_CTLr_LN_RX_S_PWRDNf_GET(r) (((r).rx_ln_clk_rst_n_pwrdwn_ctl[0]) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_CLK_RST_N_PWRDWN_CTLr_LN_RX_S_PWRDNf_SET(r,f) (r).rx_ln_clk_rst_n_pwrdwn_ctl[0]=(((r).rx_ln_clk_rst_n_pwrdwn_ctl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access RX_LN_CLK_RST_N_PWRDWN_CTL.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_RX_LN_CLK_RST_N_PWRDWN_CTLr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_CLK_RST_N_PWRDWN_CTLr,(_r._rx_ln_clk_rst_n_pwrdwn_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_RX_LN_CLK_RST_N_PWRDWN_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_CLK_RST_N_PWRDWN_CTLr,(_r._rx_ln_clk_rst_n_pwrdwn_ctl)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_RX_LN_CLK_RST_N_PWRDWN_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_CLK_RST_N_PWRDWN_CTLr,(_r._rx_ln_clk_rst_n_pwrdwn_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_RX_LN_CLK_RST_N_PWRDWN_CTLr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_CLK_RST_N_PWRDWN_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_ln_clk_rst_n_pwrdwn_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_RX_LN_CLK_RST_N_PWRDWN_CTLr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_CLK_RST_N_PWRDWN_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_ln_clk_rst_n_pwrdwn_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_RX_LN_CLK_RST_N_PWRDWN_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_CLK_RST_N_PWRDWN_CTLr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_ln_clk_rst_n_pwrdwn_ctl))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_LN_CLK_RST_N_PWRDWN_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_CLK_RST_N_PWRDWN_CTLr
#define RX_LN_CLK_RST_N_PWRDWN_CTLr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_CLK_RST_N_PWRDWN_CTLr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_CLK_RST_N_PWRDWN_CTLr_t RX_LN_CLK_RST_N_PWRDWN_CTLr_t;
#define RX_LN_CLK_RST_N_PWRDWN_CTLr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_CLK_RST_N_PWRDWN_CTLr_CLR
#define RX_LN_CLK_RST_N_PWRDWN_CTLr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_CLK_RST_N_PWRDWN_CTLr_SET
#define RX_LN_CLK_RST_N_PWRDWN_CTLr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_CLK_RST_N_PWRDWN_CTLr_GET
#define RX_LN_CLK_RST_N_PWRDWN_CTLr_AFE_SIGDET_PWRDNf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_CLK_RST_N_PWRDWN_CTLr_AFE_SIGDET_PWRDNf_GET
#define RX_LN_CLK_RST_N_PWRDWN_CTLr_AFE_SIGDET_PWRDNf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_CLK_RST_N_PWRDWN_CTLr_AFE_SIGDET_PWRDNf_SET
#define RX_LN_CLK_RST_N_PWRDWN_CTLr_LN_RX_S_PWRDNf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_CLK_RST_N_PWRDWN_CTLr_LN_RX_S_PWRDNf_GET
#define RX_LN_CLK_RST_N_PWRDWN_CTLr_LN_RX_S_PWRDNf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_CLK_RST_N_PWRDWN_CTLr_LN_RX_S_PWRDNf_SET
#define READ_RX_LN_CLK_RST_N_PWRDWN_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_RX_LN_CLK_RST_N_PWRDWN_CTLr
#define WRITE_RX_LN_CLK_RST_N_PWRDWN_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_RX_LN_CLK_RST_N_PWRDWN_CTLr
#define MODIFY_RX_LN_CLK_RST_N_PWRDWN_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_RX_LN_CLK_RST_N_PWRDWN_CTLr
#define READLN_RX_LN_CLK_RST_N_PWRDWN_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_RX_LN_CLK_RST_N_PWRDWN_CTLr
#define WRITELN_RX_LN_CLK_RST_N_PWRDWN_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_RX_LN_CLK_RST_N_PWRDWN_CTLr
#define WRITEALL_RX_LN_CLK_RST_N_PWRDWN_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_RX_LN_CLK_RST_N_PWRDWN_CTLr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_CLK_RST_N_PWRDWN_CTLr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  RX_LN_AFE_RST_PWRDWN_CTL_CTL
 * BLOCKS:   RX_CKRST_CTRL
 * REGADDR:  0xd1a2
 * DEVAD:    1
 * DESC:     RX_LANE_AFE_RESET_PWRDWN_CONTROL_CONTROL
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     AFE_RX_PWRDN_FRC AFE RX Lane powerdown force.
 *     AFE_RX_PWRDN_FRC_VAL AFE RX Lane powerdown force value.
 *     AFE_RX_RESET_FRC AFE RX Lane reset force.
 *     AFE_RX_RESET_FRC_VAL AFE RX Lane reset force value.
 *     AFE_RX_RCLK20_PWRDN_FRC AFE RX Lane rx_rclk20_pwrdwn force.
 *     AFE_RX_RCLK20_PWRDN_FRC_VAL AFE RX Lane rx_rclk20_pwrdwn force value.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_AFE_RST_PWRDWN_CTL_CTLr (0x0001d1a2 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_AFE_RST_PWRDWN_CTL_CTLr_SIZE 4

/*
 * This structure should be used to declare and program RX_LN_AFE_RST_PWRDWN_CTL_CTL.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_AFE_RST_PWRDWN_CTL_CTLr_s {
	uint32_t v[1];
	uint32_t rx_ln_afe_rst_pwrdwn_ctl_ctl[1];
	uint32_t _rx_ln_afe_rst_pwrdwn_ctl_ctl;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_AFE_RST_PWRDWN_CTL_CTLr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_AFE_RST_PWRDWN_CTL_CTLr_CLR(r) (r).rx_ln_afe_rst_pwrdwn_ctl_ctl[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_AFE_RST_PWRDWN_CTL_CTLr_SET(r,d) (r).rx_ln_afe_rst_pwrdwn_ctl_ctl[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_AFE_RST_PWRDWN_CTL_CTLr_GET(r) (r).rx_ln_afe_rst_pwrdwn_ctl_ctl[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_AFE_RST_PWRDWN_CTL_CTLr_AFE_RX_RCLK20_PWRDN_FRC_VALf_GET(r) ((((r).rx_ln_afe_rst_pwrdwn_ctl_ctl[0]) >> 5) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_AFE_RST_PWRDWN_CTL_CTLr_AFE_RX_RCLK20_PWRDN_FRC_VALf_SET(r,f) (r).rx_ln_afe_rst_pwrdwn_ctl_ctl[0]=(((r).rx_ln_afe_rst_pwrdwn_ctl_ctl[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_AFE_RST_PWRDWN_CTL_CTLr_AFE_RX_RCLK20_PWRDN_FRCf_GET(r) ((((r).rx_ln_afe_rst_pwrdwn_ctl_ctl[0]) >> 4) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_AFE_RST_PWRDWN_CTL_CTLr_AFE_RX_RCLK20_PWRDN_FRCf_SET(r,f) (r).rx_ln_afe_rst_pwrdwn_ctl_ctl[0]=(((r).rx_ln_afe_rst_pwrdwn_ctl_ctl[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_AFE_RST_PWRDWN_CTL_CTLr_AFE_RX_RESET_FRC_VALf_GET(r) ((((r).rx_ln_afe_rst_pwrdwn_ctl_ctl[0]) >> 3) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_AFE_RST_PWRDWN_CTL_CTLr_AFE_RX_RESET_FRC_VALf_SET(r,f) (r).rx_ln_afe_rst_pwrdwn_ctl_ctl[0]=(((r).rx_ln_afe_rst_pwrdwn_ctl_ctl[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_AFE_RST_PWRDWN_CTL_CTLr_AFE_RX_RESET_FRCf_GET(r) ((((r).rx_ln_afe_rst_pwrdwn_ctl_ctl[0]) >> 2) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_AFE_RST_PWRDWN_CTL_CTLr_AFE_RX_RESET_FRCf_SET(r,f) (r).rx_ln_afe_rst_pwrdwn_ctl_ctl[0]=(((r).rx_ln_afe_rst_pwrdwn_ctl_ctl[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_AFE_RST_PWRDWN_CTL_CTLr_AFE_RX_PWRDN_FRC_VALf_GET(r) ((((r).rx_ln_afe_rst_pwrdwn_ctl_ctl[0]) >> 1) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_AFE_RST_PWRDWN_CTL_CTLr_AFE_RX_PWRDN_FRC_VALf_SET(r,f) (r).rx_ln_afe_rst_pwrdwn_ctl_ctl[0]=(((r).rx_ln_afe_rst_pwrdwn_ctl_ctl[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_AFE_RST_PWRDWN_CTL_CTLr_AFE_RX_PWRDN_FRCf_GET(r) (((r).rx_ln_afe_rst_pwrdwn_ctl_ctl[0]) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_AFE_RST_PWRDWN_CTL_CTLr_AFE_RX_PWRDN_FRCf_SET(r,f) (r).rx_ln_afe_rst_pwrdwn_ctl_ctl[0]=(((r).rx_ln_afe_rst_pwrdwn_ctl_ctl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access RX_LN_AFE_RST_PWRDWN_CTL_CTL.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_RX_LN_AFE_RST_PWRDWN_CTL_CTLr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_AFE_RST_PWRDWN_CTL_CTLr,(_r._rx_ln_afe_rst_pwrdwn_ctl_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_RX_LN_AFE_RST_PWRDWN_CTL_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_AFE_RST_PWRDWN_CTL_CTLr,(_r._rx_ln_afe_rst_pwrdwn_ctl_ctl)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_RX_LN_AFE_RST_PWRDWN_CTL_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_AFE_RST_PWRDWN_CTL_CTLr,(_r._rx_ln_afe_rst_pwrdwn_ctl_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_RX_LN_AFE_RST_PWRDWN_CTL_CTLr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_AFE_RST_PWRDWN_CTL_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_ln_afe_rst_pwrdwn_ctl_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_RX_LN_AFE_RST_PWRDWN_CTL_CTLr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_AFE_RST_PWRDWN_CTL_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_ln_afe_rst_pwrdwn_ctl_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_RX_LN_AFE_RST_PWRDWN_CTL_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_AFE_RST_PWRDWN_CTL_CTLr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_ln_afe_rst_pwrdwn_ctl_ctl))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_LN_AFE_RST_PWRDWN_CTL_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_AFE_RST_PWRDWN_CTL_CTLr
#define RX_LN_AFE_RST_PWRDWN_CTL_CTLr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_AFE_RST_PWRDWN_CTL_CTLr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_AFE_RST_PWRDWN_CTL_CTLr_t RX_LN_AFE_RST_PWRDWN_CTL_CTLr_t;
#define RX_LN_AFE_RST_PWRDWN_CTL_CTLr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_AFE_RST_PWRDWN_CTL_CTLr_CLR
#define RX_LN_AFE_RST_PWRDWN_CTL_CTLr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_AFE_RST_PWRDWN_CTL_CTLr_SET
#define RX_LN_AFE_RST_PWRDWN_CTL_CTLr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_AFE_RST_PWRDWN_CTL_CTLr_GET
#define RX_LN_AFE_RST_PWRDWN_CTL_CTLr_AFE_RX_RCLK20_PWRDN_FRC_VALf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_AFE_RST_PWRDWN_CTL_CTLr_AFE_RX_RCLK20_PWRDN_FRC_VALf_GET
#define RX_LN_AFE_RST_PWRDWN_CTL_CTLr_AFE_RX_RCLK20_PWRDN_FRC_VALf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_AFE_RST_PWRDWN_CTL_CTLr_AFE_RX_RCLK20_PWRDN_FRC_VALf_SET
#define RX_LN_AFE_RST_PWRDWN_CTL_CTLr_AFE_RX_RCLK20_PWRDN_FRCf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_AFE_RST_PWRDWN_CTL_CTLr_AFE_RX_RCLK20_PWRDN_FRCf_GET
#define RX_LN_AFE_RST_PWRDWN_CTL_CTLr_AFE_RX_RCLK20_PWRDN_FRCf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_AFE_RST_PWRDWN_CTL_CTLr_AFE_RX_RCLK20_PWRDN_FRCf_SET
#define RX_LN_AFE_RST_PWRDWN_CTL_CTLr_AFE_RX_RESET_FRC_VALf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_AFE_RST_PWRDWN_CTL_CTLr_AFE_RX_RESET_FRC_VALf_GET
#define RX_LN_AFE_RST_PWRDWN_CTL_CTLr_AFE_RX_RESET_FRC_VALf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_AFE_RST_PWRDWN_CTL_CTLr_AFE_RX_RESET_FRC_VALf_SET
#define RX_LN_AFE_RST_PWRDWN_CTL_CTLr_AFE_RX_RESET_FRCf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_AFE_RST_PWRDWN_CTL_CTLr_AFE_RX_RESET_FRCf_GET
#define RX_LN_AFE_RST_PWRDWN_CTL_CTLr_AFE_RX_RESET_FRCf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_AFE_RST_PWRDWN_CTL_CTLr_AFE_RX_RESET_FRCf_SET
#define RX_LN_AFE_RST_PWRDWN_CTL_CTLr_AFE_RX_PWRDN_FRC_VALf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_AFE_RST_PWRDWN_CTL_CTLr_AFE_RX_PWRDN_FRC_VALf_GET
#define RX_LN_AFE_RST_PWRDWN_CTL_CTLr_AFE_RX_PWRDN_FRC_VALf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_AFE_RST_PWRDWN_CTL_CTLr_AFE_RX_PWRDN_FRC_VALf_SET
#define RX_LN_AFE_RST_PWRDWN_CTL_CTLr_AFE_RX_PWRDN_FRCf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_AFE_RST_PWRDWN_CTL_CTLr_AFE_RX_PWRDN_FRCf_GET
#define RX_LN_AFE_RST_PWRDWN_CTL_CTLr_AFE_RX_PWRDN_FRCf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_AFE_RST_PWRDWN_CTL_CTLr_AFE_RX_PWRDN_FRCf_SET
#define READ_RX_LN_AFE_RST_PWRDWN_CTL_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_RX_LN_AFE_RST_PWRDWN_CTL_CTLr
#define WRITE_RX_LN_AFE_RST_PWRDWN_CTL_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_RX_LN_AFE_RST_PWRDWN_CTL_CTLr
#define MODIFY_RX_LN_AFE_RST_PWRDWN_CTL_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_RX_LN_AFE_RST_PWRDWN_CTL_CTLr
#define READLN_RX_LN_AFE_RST_PWRDWN_CTL_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_RX_LN_AFE_RST_PWRDWN_CTL_CTLr
#define WRITELN_RX_LN_AFE_RST_PWRDWN_CTL_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_RX_LN_AFE_RST_PWRDWN_CTL_CTLr
#define WRITEALL_RX_LN_AFE_RST_PWRDWN_CTL_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_RX_LN_AFE_RST_PWRDWN_CTL_CTLr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_AFE_RST_PWRDWN_CTL_CTLr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  RX_LN_RST_N_PWRDN_PIN_KILL_CTL
 * BLOCKS:   RX_CKRST_CTRL
 * REGADDR:  0xd1a3
 * DEVAD:    1
 * DESC:     RX_LANE_RESET_N_PWRDN_PIN_KILL_CONTROL
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     PMD_LN_RX_H_PWRDN_PKILL 1'b1 will disable the pmd_ln_rx_h_pwrdn input pin.
 *     PMD_RX_LANE_MODE_FRC 1'b1 will force pmd_rx_lane_mode_frc_val which will be reflected in pmd_rx_lane_mode status.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_RST_N_PWRDN_PIN_KILL_CTLr (0x0001d1a3 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_RST_N_PWRDN_PIN_KILL_CTLr_SIZE 4

/*
 * This structure should be used to declare and program RX_LN_RST_N_PWRDN_PIN_KILL_CTL.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_RST_N_PWRDN_PIN_KILL_CTLr_s {
	uint32_t v[1];
	uint32_t rx_ln_rst_n_pwrdn_pin_kill_ctl[1];
	uint32_t _rx_ln_rst_n_pwrdn_pin_kill_ctl;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_RST_N_PWRDN_PIN_KILL_CTLr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_RST_N_PWRDN_PIN_KILL_CTLr_CLR(r) (r).rx_ln_rst_n_pwrdn_pin_kill_ctl[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_RST_N_PWRDN_PIN_KILL_CTLr_SET(r,d) (r).rx_ln_rst_n_pwrdn_pin_kill_ctl[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_RST_N_PWRDN_PIN_KILL_CTLr_GET(r) (r).rx_ln_rst_n_pwrdn_pin_kill_ctl[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_RST_N_PWRDN_PIN_KILL_CTLr_PMD_RX_LANE_MODE_FRCf_GET(r) ((((r).rx_ln_rst_n_pwrdn_pin_kill_ctl[0]) >> 15) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_RST_N_PWRDN_PIN_KILL_CTLr_PMD_RX_LANE_MODE_FRCf_SET(r,f) (r).rx_ln_rst_n_pwrdn_pin_kill_ctl[0]=(((r).rx_ln_rst_n_pwrdn_pin_kill_ctl[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_RST_N_PWRDN_PIN_KILL_CTLr_PMD_LN_RX_H_PWRDN_PKILLf_GET(r) (((r).rx_ln_rst_n_pwrdn_pin_kill_ctl[0]) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_RST_N_PWRDN_PIN_KILL_CTLr_PMD_LN_RX_H_PWRDN_PKILLf_SET(r,f) (r).rx_ln_rst_n_pwrdn_pin_kill_ctl[0]=(((r).rx_ln_rst_n_pwrdn_pin_kill_ctl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access RX_LN_RST_N_PWRDN_PIN_KILL_CTL.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_RX_LN_RST_N_PWRDN_PIN_KILL_CTLr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_RST_N_PWRDN_PIN_KILL_CTLr,(_r._rx_ln_rst_n_pwrdn_pin_kill_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_RX_LN_RST_N_PWRDN_PIN_KILL_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_RST_N_PWRDN_PIN_KILL_CTLr,(_r._rx_ln_rst_n_pwrdn_pin_kill_ctl)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_RX_LN_RST_N_PWRDN_PIN_KILL_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_RST_N_PWRDN_PIN_KILL_CTLr,(_r._rx_ln_rst_n_pwrdn_pin_kill_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_RX_LN_RST_N_PWRDN_PIN_KILL_CTLr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_RST_N_PWRDN_PIN_KILL_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_ln_rst_n_pwrdn_pin_kill_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_RX_LN_RST_N_PWRDN_PIN_KILL_CTLr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_RST_N_PWRDN_PIN_KILL_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_ln_rst_n_pwrdn_pin_kill_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_RX_LN_RST_N_PWRDN_PIN_KILL_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_RST_N_PWRDN_PIN_KILL_CTLr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_ln_rst_n_pwrdn_pin_kill_ctl))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_LN_RST_N_PWRDN_PIN_KILL_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_RST_N_PWRDN_PIN_KILL_CTLr
#define RX_LN_RST_N_PWRDN_PIN_KILL_CTLr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_RST_N_PWRDN_PIN_KILL_CTLr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_RST_N_PWRDN_PIN_KILL_CTLr_t RX_LN_RST_N_PWRDN_PIN_KILL_CTLr_t;
#define RX_LN_RST_N_PWRDN_PIN_KILL_CTLr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_RST_N_PWRDN_PIN_KILL_CTLr_CLR
#define RX_LN_RST_N_PWRDN_PIN_KILL_CTLr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_RST_N_PWRDN_PIN_KILL_CTLr_SET
#define RX_LN_RST_N_PWRDN_PIN_KILL_CTLr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_RST_N_PWRDN_PIN_KILL_CTLr_GET
#define RX_LN_RST_N_PWRDN_PIN_KILL_CTLr_PMD_RX_LANE_MODE_FRCf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_RST_N_PWRDN_PIN_KILL_CTLr_PMD_RX_LANE_MODE_FRCf_GET
#define RX_LN_RST_N_PWRDN_PIN_KILL_CTLr_PMD_RX_LANE_MODE_FRCf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_RST_N_PWRDN_PIN_KILL_CTLr_PMD_RX_LANE_MODE_FRCf_SET
#define RX_LN_RST_N_PWRDN_PIN_KILL_CTLr_PMD_LN_RX_H_PWRDN_PKILLf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_RST_N_PWRDN_PIN_KILL_CTLr_PMD_LN_RX_H_PWRDN_PKILLf_GET
#define RX_LN_RST_N_PWRDN_PIN_KILL_CTLr_PMD_LN_RX_H_PWRDN_PKILLf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_RST_N_PWRDN_PIN_KILL_CTLr_PMD_LN_RX_H_PWRDN_PKILLf_SET
#define READ_RX_LN_RST_N_PWRDN_PIN_KILL_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_RX_LN_RST_N_PWRDN_PIN_KILL_CTLr
#define WRITE_RX_LN_RST_N_PWRDN_PIN_KILL_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_RX_LN_RST_N_PWRDN_PIN_KILL_CTLr
#define MODIFY_RX_LN_RST_N_PWRDN_PIN_KILL_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_RX_LN_RST_N_PWRDN_PIN_KILL_CTLr
#define READLN_RX_LN_RST_N_PWRDN_PIN_KILL_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_RX_LN_RST_N_PWRDN_PIN_KILL_CTLr
#define WRITELN_RX_LN_RST_N_PWRDN_PIN_KILL_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_RX_LN_RST_N_PWRDN_PIN_KILL_CTLr
#define WRITEALL_RX_LN_RST_N_PWRDN_PIN_KILL_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_RX_LN_RST_N_PWRDN_PIN_KILL_CTLr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_RST_N_PWRDN_PIN_KILL_CTLr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  RX_LN_DBG_RST_CTL
 * BLOCKS:   RX_CKRST_CTRL
 * REGADDR:  0xd1a4
 * DEVAD:    1
 * DESC:     RX_LANE_DEBUG_RESET_CONTROL
 * RESETVAL: 0x3 (3)
 * ACCESS:   R/W
 * FIELDS:
 *     LN_RX_S_RSTB     Active Low Lane Soft Reset for RX datapath and registers. If asserted by writing to 1'b0 will reset the RX registers and datapath for a lane.This is a debug only register and it is not handled by FW-HW handshake
 *     LN_RX_DP_S_RSTB  Active Low Lane Soft Reset for RX datapath. If asserted by writing to 1'b0 will reset the RX datapath for a lane.This is a debug only register and it is not handled by FW-HW handshake
 *     SIGDET_DP_RSTB_EN If asserted by writing to 1'b1 then lane datapath reset will also reset the sigdet filetr logic alomg with lane register reset.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_DBG_RST_CTLr (0x0001d1a4 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_DBG_RST_CTLr_SIZE 4

/*
 * This structure should be used to declare and program RX_LN_DBG_RST_CTL.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_DBG_RST_CTLr_s {
	uint32_t v[1];
	uint32_t rx_ln_dbg_rst_ctl[1];
	uint32_t _rx_ln_dbg_rst_ctl;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_DBG_RST_CTLr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_DBG_RST_CTLr_CLR(r) (r).rx_ln_dbg_rst_ctl[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_DBG_RST_CTLr_SET(r,d) (r).rx_ln_dbg_rst_ctl[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_DBG_RST_CTLr_GET(r) (r).rx_ln_dbg_rst_ctl[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_DBG_RST_CTLr_SIGDET_DP_RSTB_ENf_GET(r) ((((r).rx_ln_dbg_rst_ctl[0]) >> 2) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_DBG_RST_CTLr_SIGDET_DP_RSTB_ENf_SET(r,f) (r).rx_ln_dbg_rst_ctl[0]=(((r).rx_ln_dbg_rst_ctl[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_DBG_RST_CTLr_LN_RX_DP_S_RSTBf_GET(r) ((((r).rx_ln_dbg_rst_ctl[0]) >> 1) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_DBG_RST_CTLr_LN_RX_DP_S_RSTBf_SET(r,f) (r).rx_ln_dbg_rst_ctl[0]=(((r).rx_ln_dbg_rst_ctl[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_DBG_RST_CTLr_LN_RX_S_RSTBf_GET(r) (((r).rx_ln_dbg_rst_ctl[0]) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_DBG_RST_CTLr_LN_RX_S_RSTBf_SET(r,f) (r).rx_ln_dbg_rst_ctl[0]=(((r).rx_ln_dbg_rst_ctl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access RX_LN_DBG_RST_CTL.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_RX_LN_DBG_RST_CTLr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_DBG_RST_CTLr,(_r._rx_ln_dbg_rst_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_RX_LN_DBG_RST_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_DBG_RST_CTLr,(_r._rx_ln_dbg_rst_ctl)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_RX_LN_DBG_RST_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_DBG_RST_CTLr,(_r._rx_ln_dbg_rst_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_RX_LN_DBG_RST_CTLr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_DBG_RST_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_ln_dbg_rst_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_RX_LN_DBG_RST_CTLr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_DBG_RST_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_ln_dbg_rst_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_RX_LN_DBG_RST_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_DBG_RST_CTLr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_ln_dbg_rst_ctl))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_LN_DBG_RST_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_DBG_RST_CTLr
#define RX_LN_DBG_RST_CTLr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_DBG_RST_CTLr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_DBG_RST_CTLr_t RX_LN_DBG_RST_CTLr_t;
#define RX_LN_DBG_RST_CTLr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_DBG_RST_CTLr_CLR
#define RX_LN_DBG_RST_CTLr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_DBG_RST_CTLr_SET
#define RX_LN_DBG_RST_CTLr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_DBG_RST_CTLr_GET
#define RX_LN_DBG_RST_CTLr_SIGDET_DP_RSTB_ENf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_DBG_RST_CTLr_SIGDET_DP_RSTB_ENf_GET
#define RX_LN_DBG_RST_CTLr_SIGDET_DP_RSTB_ENf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_DBG_RST_CTLr_SIGDET_DP_RSTB_ENf_SET
#define RX_LN_DBG_RST_CTLr_LN_RX_DP_S_RSTBf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_DBG_RST_CTLr_LN_RX_DP_S_RSTBf_GET
#define RX_LN_DBG_RST_CTLr_LN_RX_DP_S_RSTBf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_DBG_RST_CTLr_LN_RX_DP_S_RSTBf_SET
#define RX_LN_DBG_RST_CTLr_LN_RX_S_RSTBf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_DBG_RST_CTLr_LN_RX_S_RSTBf_GET
#define RX_LN_DBG_RST_CTLr_LN_RX_S_RSTBf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_DBG_RST_CTLr_LN_RX_S_RSTBf_SET
#define READ_RX_LN_DBG_RST_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_RX_LN_DBG_RST_CTLr
#define WRITE_RX_LN_DBG_RST_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_RX_LN_DBG_RST_CTLr
#define MODIFY_RX_LN_DBG_RST_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_RX_LN_DBG_RST_CTLr
#define READLN_RX_LN_DBG_RST_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_RX_LN_DBG_RST_CTLr
#define WRITELN_RX_LN_DBG_RST_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_RX_LN_DBG_RST_CTLr
#define WRITEALL_RX_LN_DBG_RST_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_RX_LN_DBG_RST_CTLr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_LN_DBG_RST_CTLr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  RX_PMD_LN_MODE_CTL
 * BLOCKS:   RX_CKRST_CTRL
 * REGADDR:  0xd1a5
 * DEVAD:    1
 * DESC:     RX_PMD_LANE_MODE_CONTROL
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     PMD_RX_LANE_MODE_FRC_VAL pmd_rx_lane_mode force value for debug.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_PMD_LN_MODE_CTLr (0x0001d1a5 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_PMD_LN_MODE_CTLr_SIZE 4

/*
 * This structure should be used to declare and program RX_PMD_LN_MODE_CTL.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_PMD_LN_MODE_CTLr_s {
	uint32_t v[1];
	uint32_t rx_pmd_ln_mode_ctl[1];
	uint32_t _rx_pmd_ln_mode_ctl;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_PMD_LN_MODE_CTLr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_PMD_LN_MODE_CTLr_CLR(r) (r).rx_pmd_ln_mode_ctl[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_PMD_LN_MODE_CTLr_SET(r,d) (r).rx_pmd_ln_mode_ctl[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_PMD_LN_MODE_CTLr_GET(r) (r).rx_pmd_ln_mode_ctl[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_PMD_LN_MODE_CTLr_PMD_RX_LANE_MODE_FRC_VALf_GET(r) (((r).rx_pmd_ln_mode_ctl[0]) & 0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_PMD_LN_MODE_CTLr_PMD_RX_LANE_MODE_FRC_VALf_SET(r,f) (r).rx_pmd_ln_mode_ctl[0]=(((r).rx_pmd_ln_mode_ctl[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access RX_PMD_LN_MODE_CTL.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_RX_PMD_LN_MODE_CTLr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_PMD_LN_MODE_CTLr,(_r._rx_pmd_ln_mode_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_RX_PMD_LN_MODE_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_PMD_LN_MODE_CTLr,(_r._rx_pmd_ln_mode_ctl)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_RX_PMD_LN_MODE_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_PMD_LN_MODE_CTLr,(_r._rx_pmd_ln_mode_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_RX_PMD_LN_MODE_CTLr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_PMD_LN_MODE_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_pmd_ln_mode_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_RX_PMD_LN_MODE_CTLr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_PMD_LN_MODE_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_pmd_ln_mode_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_RX_PMD_LN_MODE_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_PMD_LN_MODE_CTLr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_pmd_ln_mode_ctl))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_PMD_LN_MODE_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_PMD_LN_MODE_CTLr
#define RX_PMD_LN_MODE_CTLr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_PMD_LN_MODE_CTLr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_PMD_LN_MODE_CTLr_t RX_PMD_LN_MODE_CTLr_t;
#define RX_PMD_LN_MODE_CTLr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_PMD_LN_MODE_CTLr_CLR
#define RX_PMD_LN_MODE_CTLr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_PMD_LN_MODE_CTLr_SET
#define RX_PMD_LN_MODE_CTLr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_PMD_LN_MODE_CTLr_GET
#define RX_PMD_LN_MODE_CTLr_PMD_RX_LANE_MODE_FRC_VALf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_PMD_LN_MODE_CTLr_PMD_RX_LANE_MODE_FRC_VALf_GET
#define RX_PMD_LN_MODE_CTLr_PMD_RX_LANE_MODE_FRC_VALf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_PMD_LN_MODE_CTLr_PMD_RX_LANE_MODE_FRC_VALf_SET
#define READ_RX_PMD_LN_MODE_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_RX_PMD_LN_MODE_CTLr
#define WRITE_RX_PMD_LN_MODE_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_RX_PMD_LN_MODE_CTLr
#define MODIFY_RX_PMD_LN_MODE_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_RX_PMD_LN_MODE_CTLr
#define READLN_RX_PMD_LN_MODE_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_RX_PMD_LN_MODE_CTLr
#define WRITELN_RX_PMD_LN_MODE_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_RX_PMD_LN_MODE_CTLr
#define WRITEALL_RX_PMD_LN_MODE_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_RX_PMD_LN_MODE_CTLr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_PMD_LN_MODE_CTLr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  RX_CLK_N_RST_DBG_CTL
 * BLOCKS:   RX_CKRST_CTRL
 * REGADDR:  0xd1a7
 * DEVAD:    1
 * DESC:     RX_CLOCK_N_RESET_DEBUG_CONTROL
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     LN_RX_S_CLKGATE_FRC_ON RX Active High Lane clock gator enable. If 1'1b1 then rx lane clock will be gated off. It does not affect the rclk goingto RMIC block so rx lane based registers can still be readable but not writable.It is recommended for user to force pmd_rx_clk_vld to 1'b0 while rx_s_clkgate_frc_on is asserted to 1'b1by using pmd_rx_clk_vld_frc/frc_val registers.
 *     LN_RX_S_COMCLK_SEL Mux control for selection of comclk for RX Lane clocks.If asserted by writing to 1'b1 will select the comclk for the lane clocks.It is recommended for user to force pmd_rx_clk_vld to 1'b0 while ln_rx_s_comclk_sel is asserted to 1'b1by using pmd_rx_clk_vld_frc/frc_val registers.
 *     LN_RX_S_COMCLK_FRC_ON Mux control for selection of comclk for RX Lane clocks by force.If asserted by writing to 1'b1 will select the comclk for the lane clocks. This is a debug bit and should be only used if lane clock from AFE is dead.It is recommended for user to force pmd_rx_clk_vld to 1'b0 while ln_rx_s_comclk_frc_on is asserted to 1'b1by using pmd_rx_clk_vld_frc/frc_val registers.
 *     PMD_RX_CLK_VLD_FRC pmd_rx_clk_vld core output pin force.
 *     PMD_RX_CLK_VLD_FRC_VAL pmd_rx_clk_vld core output pin force value.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_CLK_N_RST_DBG_CTLr (0x0001d1a7 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_CLK_N_RST_DBG_CTLr_SIZE 4

/*
 * This structure should be used to declare and program RX_CLK_N_RST_DBG_CTL.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_CLK_N_RST_DBG_CTLr_s {
	uint32_t v[1];
	uint32_t rx_clk_n_rst_dbg_ctl[1];
	uint32_t _rx_clk_n_rst_dbg_ctl;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_CLK_N_RST_DBG_CTLr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_CLK_N_RST_DBG_CTLr_CLR(r) (r).rx_clk_n_rst_dbg_ctl[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_CLK_N_RST_DBG_CTLr_SET(r,d) (r).rx_clk_n_rst_dbg_ctl[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_CLK_N_RST_DBG_CTLr_GET(r) (r).rx_clk_n_rst_dbg_ctl[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_CLK_N_RST_DBG_CTLr_PMD_RX_CLK_VLD_FRC_VALf_GET(r) ((((r).rx_clk_n_rst_dbg_ctl[0]) >> 4) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_CLK_N_RST_DBG_CTLr_PMD_RX_CLK_VLD_FRC_VALf_SET(r,f) (r).rx_clk_n_rst_dbg_ctl[0]=(((r).rx_clk_n_rst_dbg_ctl[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_CLK_N_RST_DBG_CTLr_PMD_RX_CLK_VLD_FRCf_GET(r) ((((r).rx_clk_n_rst_dbg_ctl[0]) >> 3) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_CLK_N_RST_DBG_CTLr_PMD_RX_CLK_VLD_FRCf_SET(r,f) (r).rx_clk_n_rst_dbg_ctl[0]=(((r).rx_clk_n_rst_dbg_ctl[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_CLK_N_RST_DBG_CTLr_LN_RX_S_COMCLK_FRC_ONf_GET(r) ((((r).rx_clk_n_rst_dbg_ctl[0]) >> 2) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_CLK_N_RST_DBG_CTLr_LN_RX_S_COMCLK_FRC_ONf_SET(r,f) (r).rx_clk_n_rst_dbg_ctl[0]=(((r).rx_clk_n_rst_dbg_ctl[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_CLK_N_RST_DBG_CTLr_LN_RX_S_COMCLK_SELf_GET(r) ((((r).rx_clk_n_rst_dbg_ctl[0]) >> 1) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_CLK_N_RST_DBG_CTLr_LN_RX_S_COMCLK_SELf_SET(r,f) (r).rx_clk_n_rst_dbg_ctl[0]=(((r).rx_clk_n_rst_dbg_ctl[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_CLK_N_RST_DBG_CTLr_LN_RX_S_CLKGATE_FRC_ONf_GET(r) (((r).rx_clk_n_rst_dbg_ctl[0]) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_CLK_N_RST_DBG_CTLr_LN_RX_S_CLKGATE_FRC_ONf_SET(r,f) (r).rx_clk_n_rst_dbg_ctl[0]=(((r).rx_clk_n_rst_dbg_ctl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access RX_CLK_N_RST_DBG_CTL.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_RX_CLK_N_RST_DBG_CTLr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_CLK_N_RST_DBG_CTLr,(_r._rx_clk_n_rst_dbg_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_RX_CLK_N_RST_DBG_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_CLK_N_RST_DBG_CTLr,(_r._rx_clk_n_rst_dbg_ctl)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_RX_CLK_N_RST_DBG_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_CLK_N_RST_DBG_CTLr,(_r._rx_clk_n_rst_dbg_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_RX_CLK_N_RST_DBG_CTLr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_CLK_N_RST_DBG_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_clk_n_rst_dbg_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_RX_CLK_N_RST_DBG_CTLr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_CLK_N_RST_DBG_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_clk_n_rst_dbg_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_RX_CLK_N_RST_DBG_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_CLK_N_RST_DBG_CTLr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_clk_n_rst_dbg_ctl))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_CLK_N_RST_DBG_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_CLK_N_RST_DBG_CTLr
#define RX_CLK_N_RST_DBG_CTLr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_CLK_N_RST_DBG_CTLr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_CLK_N_RST_DBG_CTLr_t RX_CLK_N_RST_DBG_CTLr_t;
#define RX_CLK_N_RST_DBG_CTLr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_CLK_N_RST_DBG_CTLr_CLR
#define RX_CLK_N_RST_DBG_CTLr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_CLK_N_RST_DBG_CTLr_SET
#define RX_CLK_N_RST_DBG_CTLr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_CLK_N_RST_DBG_CTLr_GET
#define RX_CLK_N_RST_DBG_CTLr_PMD_RX_CLK_VLD_FRC_VALf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_CLK_N_RST_DBG_CTLr_PMD_RX_CLK_VLD_FRC_VALf_GET
#define RX_CLK_N_RST_DBG_CTLr_PMD_RX_CLK_VLD_FRC_VALf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_CLK_N_RST_DBG_CTLr_PMD_RX_CLK_VLD_FRC_VALf_SET
#define RX_CLK_N_RST_DBG_CTLr_PMD_RX_CLK_VLD_FRCf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_CLK_N_RST_DBG_CTLr_PMD_RX_CLK_VLD_FRCf_GET
#define RX_CLK_N_RST_DBG_CTLr_PMD_RX_CLK_VLD_FRCf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_CLK_N_RST_DBG_CTLr_PMD_RX_CLK_VLD_FRCf_SET
#define RX_CLK_N_RST_DBG_CTLr_LN_RX_S_COMCLK_FRC_ONf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_CLK_N_RST_DBG_CTLr_LN_RX_S_COMCLK_FRC_ONf_GET
#define RX_CLK_N_RST_DBG_CTLr_LN_RX_S_COMCLK_FRC_ONf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_CLK_N_RST_DBG_CTLr_LN_RX_S_COMCLK_FRC_ONf_SET
#define RX_CLK_N_RST_DBG_CTLr_LN_RX_S_COMCLK_SELf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_CLK_N_RST_DBG_CTLr_LN_RX_S_COMCLK_SELf_GET
#define RX_CLK_N_RST_DBG_CTLr_LN_RX_S_COMCLK_SELf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_CLK_N_RST_DBG_CTLr_LN_RX_S_COMCLK_SELf_SET
#define RX_CLK_N_RST_DBG_CTLr_LN_RX_S_CLKGATE_FRC_ONf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_CLK_N_RST_DBG_CTLr_LN_RX_S_CLKGATE_FRC_ONf_GET
#define RX_CLK_N_RST_DBG_CTLr_LN_RX_S_CLKGATE_FRC_ONf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_CLK_N_RST_DBG_CTLr_LN_RX_S_CLKGATE_FRC_ONf_SET
#define READ_RX_CLK_N_RST_DBG_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_RX_CLK_N_RST_DBG_CTLr
#define WRITE_RX_CLK_N_RST_DBG_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_RX_CLK_N_RST_DBG_CTLr
#define MODIFY_RX_CLK_N_RST_DBG_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_RX_CLK_N_RST_DBG_CTLr
#define READLN_RX_CLK_N_RST_DBG_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_RX_CLK_N_RST_DBG_CTLr
#define WRITELN_RX_CLK_N_RST_DBG_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_RX_CLK_N_RST_DBG_CTLr
#define WRITEALL_RX_CLK_N_RST_DBG_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_RX_CLK_N_RST_DBG_CTLr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_CLK_N_RST_DBG_CTLr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  RX_PMD_LN_MODE_STS
 * BLOCKS:   RX_CKRST_CTRL
 * REGADDR:  0xd1a8
 * DEVAD:    1
 * DESC:     RX_PMD_LANE_MODE_STATUS
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     PMD_RX_LANE_MODE This indicates the status of the core input pin pmd_rx_lane_mode.This is driven from PCS and used for communication between PCS and PMD Micro code.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_PMD_LN_MODE_STSr (0x0001d1a8 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_PMD_LN_MODE_STSr_SIZE 4

/*
 * This structure should be used to declare and program RX_PMD_LN_MODE_STS.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_PMD_LN_MODE_STSr_s {
	uint32_t v[1];
	uint32_t rx_pmd_ln_mode_sts[1];
	uint32_t _rx_pmd_ln_mode_sts;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_PMD_LN_MODE_STSr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_PMD_LN_MODE_STSr_CLR(r) (r).rx_pmd_ln_mode_sts[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_PMD_LN_MODE_STSr_SET(r,d) (r).rx_pmd_ln_mode_sts[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_PMD_LN_MODE_STSr_GET(r) (r).rx_pmd_ln_mode_sts[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_PMD_LN_MODE_STSr_PMD_RX_LANE_MODEf_GET(r) (((r).rx_pmd_ln_mode_sts[0]) & 0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_PMD_LN_MODE_STSr_PMD_RX_LANE_MODEf_SET(r,f) (r).rx_pmd_ln_mode_sts[0]=(((r).rx_pmd_ln_mode_sts[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access RX_PMD_LN_MODE_STS.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_RX_PMD_LN_MODE_STSr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_PMD_LN_MODE_STSr,(_r._rx_pmd_ln_mode_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_RX_PMD_LN_MODE_STSr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_PMD_LN_MODE_STSr,(_r._rx_pmd_ln_mode_sts)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_RX_PMD_LN_MODE_STSr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_PMD_LN_MODE_STSr,(_r._rx_pmd_ln_mode_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_RX_PMD_LN_MODE_STSr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_PMD_LN_MODE_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_pmd_ln_mode_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_RX_PMD_LN_MODE_STSr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_PMD_LN_MODE_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rx_pmd_ln_mode_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_RX_PMD_LN_MODE_STSr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_PMD_LN_MODE_STSr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rx_pmd_ln_mode_sts))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RX_PMD_LN_MODE_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_PMD_LN_MODE_STSr
#define RX_PMD_LN_MODE_STSr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_PMD_LN_MODE_STSr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_PMD_LN_MODE_STSr_t RX_PMD_LN_MODE_STSr_t;
#define RX_PMD_LN_MODE_STSr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_PMD_LN_MODE_STSr_CLR
#define RX_PMD_LN_MODE_STSr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_PMD_LN_MODE_STSr_SET
#define RX_PMD_LN_MODE_STSr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_PMD_LN_MODE_STSr_GET
#define RX_PMD_LN_MODE_STSr_PMD_RX_LANE_MODEf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_PMD_LN_MODE_STSr_PMD_RX_LANE_MODEf_GET
#define RX_PMD_LN_MODE_STSr_PMD_RX_LANE_MODEf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_PMD_LN_MODE_STSr_PMD_RX_LANE_MODEf_SET
#define READ_RX_PMD_LN_MODE_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_RX_PMD_LN_MODE_STSr
#define WRITE_RX_PMD_LN_MODE_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_RX_PMD_LN_MODE_STSr
#define MODIFY_RX_PMD_LN_MODE_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_RX_PMD_LN_MODE_STSr
#define READLN_RX_PMD_LN_MODE_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_RX_PMD_LN_MODE_STSr
#define WRITELN_RX_PMD_LN_MODE_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_RX_PMD_LN_MODE_STSr
#define WRITEALL_RX_PMD_LN_MODE_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_RX_PMD_LN_MODE_STSr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_RX_PMD_LN_MODE_STSr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  LN_CFG_FWAPI_DATA0
 * BLOCKS:   RX_CKRST_CTRL
 * REGADDR:  0xd1ad
 * DEVAD:    1
 * DESC:     LANE_CFG_FWAPI_DATA0
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     LANE_CFG_FWAPI_DATA0 Lane configuration firmware/API data 0This is a scratch register used by the firmware and API code to store and/or exchangelane configuration information
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_CFG_FWAPI_DATA0r (0x0001d1ad | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_CFG_FWAPI_DATA0r_SIZE 4

/*
 * This structure should be used to declare and program LN_CFG_FWAPI_DATA0.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_CFG_FWAPI_DATA0r_s {
	uint32_t v[1];
	uint32_t ln_cfg_fwapi_data0[1];
	uint32_t _ln_cfg_fwapi_data0;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_CFG_FWAPI_DATA0r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_CFG_FWAPI_DATA0r_CLR(r) (r).ln_cfg_fwapi_data0[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_CFG_FWAPI_DATA0r_SET(r,d) (r).ln_cfg_fwapi_data0[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_CFG_FWAPI_DATA0r_GET(r) (r).ln_cfg_fwapi_data0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_CFG_FWAPI_DATA0r_LANE_CFG_FWAPI_DATA0f_GET(r) (((r).ln_cfg_fwapi_data0[0]) & 0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_CFG_FWAPI_DATA0r_LANE_CFG_FWAPI_DATA0f_SET(r,f) (r).ln_cfg_fwapi_data0[0]=(((r).ln_cfg_fwapi_data0[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access LN_CFG_FWAPI_DATA0.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_LN_CFG_FWAPI_DATA0r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_CFG_FWAPI_DATA0r,(_r._ln_cfg_fwapi_data0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_LN_CFG_FWAPI_DATA0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_CFG_FWAPI_DATA0r,(_r._ln_cfg_fwapi_data0)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_LN_CFG_FWAPI_DATA0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_CFG_FWAPI_DATA0r,(_r._ln_cfg_fwapi_data0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_LN_CFG_FWAPI_DATA0r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_CFG_FWAPI_DATA0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ln_cfg_fwapi_data0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_LN_CFG_FWAPI_DATA0r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_CFG_FWAPI_DATA0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ln_cfg_fwapi_data0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_LN_CFG_FWAPI_DATA0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_CFG_FWAPI_DATA0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._ln_cfg_fwapi_data0))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define LN_CFG_FWAPI_DATA0r BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_CFG_FWAPI_DATA0r
#define LN_CFG_FWAPI_DATA0r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_CFG_FWAPI_DATA0r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_CFG_FWAPI_DATA0r_t LN_CFG_FWAPI_DATA0r_t;
#define LN_CFG_FWAPI_DATA0r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_CFG_FWAPI_DATA0r_CLR
#define LN_CFG_FWAPI_DATA0r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_CFG_FWAPI_DATA0r_SET
#define LN_CFG_FWAPI_DATA0r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_CFG_FWAPI_DATA0r_GET
#define LN_CFG_FWAPI_DATA0r_LANE_CFG_FWAPI_DATA0f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_CFG_FWAPI_DATA0r_LANE_CFG_FWAPI_DATA0f_GET
#define LN_CFG_FWAPI_DATA0r_LANE_CFG_FWAPI_DATA0f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_CFG_FWAPI_DATA0r_LANE_CFG_FWAPI_DATA0f_SET
#define READ_LN_CFG_FWAPI_DATA0r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_LN_CFG_FWAPI_DATA0r
#define WRITE_LN_CFG_FWAPI_DATA0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_LN_CFG_FWAPI_DATA0r
#define MODIFY_LN_CFG_FWAPI_DATA0r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_LN_CFG_FWAPI_DATA0r
#define READLN_LN_CFG_FWAPI_DATA0r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_LN_CFG_FWAPI_DATA0r
#define WRITELN_LN_CFG_FWAPI_DATA0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_LN_CFG_FWAPI_DATA0r
#define WRITEALL_LN_CFG_FWAPI_DATA0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_LN_CFG_FWAPI_DATA0r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_CFG_FWAPI_DATA0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  LN_CFG_FWAPI_DATA1
 * BLOCKS:   RX_CKRST_CTRL
 * REGADDR:  0xd1ae
 * DEVAD:    1
 * DESC:     LANE_CFG_FWAPI_DATA1
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     LANE_CFG_FWAPI_DATA1 Lane configuration firmware/API data 1This is a scratch register used by the firmware and API code to store and/or exchangelane configuration information
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_CFG_FWAPI_DATA1r (0x0001d1ae | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_CFG_FWAPI_DATA1r_SIZE 4

/*
 * This structure should be used to declare and program LN_CFG_FWAPI_DATA1.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_CFG_FWAPI_DATA1r_s {
	uint32_t v[1];
	uint32_t ln_cfg_fwapi_data1[1];
	uint32_t _ln_cfg_fwapi_data1;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_CFG_FWAPI_DATA1r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_CFG_FWAPI_DATA1r_CLR(r) (r).ln_cfg_fwapi_data1[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_CFG_FWAPI_DATA1r_SET(r,d) (r).ln_cfg_fwapi_data1[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_CFG_FWAPI_DATA1r_GET(r) (r).ln_cfg_fwapi_data1[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_CFG_FWAPI_DATA1r_LANE_CFG_FWAPI_DATA1f_GET(r) (((r).ln_cfg_fwapi_data1[0]) & 0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_CFG_FWAPI_DATA1r_LANE_CFG_FWAPI_DATA1f_SET(r,f) (r).ln_cfg_fwapi_data1[0]=(((r).ln_cfg_fwapi_data1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access LN_CFG_FWAPI_DATA1.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_LN_CFG_FWAPI_DATA1r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_CFG_FWAPI_DATA1r,(_r._ln_cfg_fwapi_data1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_LN_CFG_FWAPI_DATA1r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_CFG_FWAPI_DATA1r,(_r._ln_cfg_fwapi_data1)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_LN_CFG_FWAPI_DATA1r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_CFG_FWAPI_DATA1r,(_r._ln_cfg_fwapi_data1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_LN_CFG_FWAPI_DATA1r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_CFG_FWAPI_DATA1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ln_cfg_fwapi_data1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_LN_CFG_FWAPI_DATA1r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_CFG_FWAPI_DATA1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ln_cfg_fwapi_data1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_LN_CFG_FWAPI_DATA1r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_CFG_FWAPI_DATA1r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._ln_cfg_fwapi_data1))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define LN_CFG_FWAPI_DATA1r BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_CFG_FWAPI_DATA1r
#define LN_CFG_FWAPI_DATA1r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_CFG_FWAPI_DATA1r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_CFG_FWAPI_DATA1r_t LN_CFG_FWAPI_DATA1r_t;
#define LN_CFG_FWAPI_DATA1r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_CFG_FWAPI_DATA1r_CLR
#define LN_CFG_FWAPI_DATA1r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_CFG_FWAPI_DATA1r_SET
#define LN_CFG_FWAPI_DATA1r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_CFG_FWAPI_DATA1r_GET
#define LN_CFG_FWAPI_DATA1r_LANE_CFG_FWAPI_DATA1f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_CFG_FWAPI_DATA1r_LANE_CFG_FWAPI_DATA1f_GET
#define LN_CFG_FWAPI_DATA1r_LANE_CFG_FWAPI_DATA1f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_CFG_FWAPI_DATA1r_LANE_CFG_FWAPI_DATA1f_SET
#define READ_LN_CFG_FWAPI_DATA1r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_LN_CFG_FWAPI_DATA1r
#define WRITE_LN_CFG_FWAPI_DATA1r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_LN_CFG_FWAPI_DATA1r
#define MODIFY_LN_CFG_FWAPI_DATA1r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_LN_CFG_FWAPI_DATA1r
#define READLN_LN_CFG_FWAPI_DATA1r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_LN_CFG_FWAPI_DATA1r
#define WRITELN_LN_CFG_FWAPI_DATA1r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_LN_CFG_FWAPI_DATA1r
#define WRITEALL_LN_CFG_FWAPI_DATA1r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_LN_CFG_FWAPI_DATA1r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_LN_CFG_FWAPI_DATA1r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  TX_LN_CLK_RST_N_PWRDWN_CTL
 * BLOCKS:   TX_CKRST_CTRL
 * REGADDR:  0xd1b1
 * DEVAD:    1
 * DESC:     TX_LANE_CLK_RESET_N_POWERDOWN_CONTROL
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     LN_TX_S_PWRDN    Active High Power Down control for TX Lane.If asserted by writing to 1'b1 will power down the TX Lane.
 *     AFE_TX_RESET_DEASSERT AFE TX Lane reset control. This register will be reset upon POR reg/pin or lane reset reg/pin. Lower priority than the afe_tx_reset_frc/frc_val option.1 - AFE TX Lane tx_reset pin will be forcefully de-asserted irrespective of core/lane datapath pin/reg resets asserted.This bit must be set to 1'b1 for TX_Disable all 1s/0s mode to allow TX AFE to transmit the all 1s/0s data.0 - AFE TX Lane tx_reset pin will be asserted if core/lane pin/reg resets are asserted.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_LN_CLK_RST_N_PWRDWN_CTLr (0x0001d1b1 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_LN_CLK_RST_N_PWRDWN_CTLr_SIZE 4

/*
 * This structure should be used to declare and program TX_LN_CLK_RST_N_PWRDWN_CTL.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_LN_CLK_RST_N_PWRDWN_CTLr_s {
	uint32_t v[1];
	uint32_t tx_ln_clk_rst_n_pwrdwn_ctl[1];
	uint32_t _tx_ln_clk_rst_n_pwrdwn_ctl;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_LN_CLK_RST_N_PWRDWN_CTLr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_LN_CLK_RST_N_PWRDWN_CTLr_CLR(r) (r).tx_ln_clk_rst_n_pwrdwn_ctl[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_LN_CLK_RST_N_PWRDWN_CTLr_SET(r,d) (r).tx_ln_clk_rst_n_pwrdwn_ctl[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_LN_CLK_RST_N_PWRDWN_CTLr_GET(r) (r).tx_ln_clk_rst_n_pwrdwn_ctl[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_LN_CLK_RST_N_PWRDWN_CTLr_AFE_TX_RESET_DEASSERTf_GET(r) ((((r).tx_ln_clk_rst_n_pwrdwn_ctl[0]) >> 15) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_LN_CLK_RST_N_PWRDWN_CTLr_AFE_TX_RESET_DEASSERTf_SET(r,f) (r).tx_ln_clk_rst_n_pwrdwn_ctl[0]=(((r).tx_ln_clk_rst_n_pwrdwn_ctl[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_LN_CLK_RST_N_PWRDWN_CTLr_LN_TX_S_PWRDNf_GET(r) (((r).tx_ln_clk_rst_n_pwrdwn_ctl[0]) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_LN_CLK_RST_N_PWRDWN_CTLr_LN_TX_S_PWRDNf_SET(r,f) (r).tx_ln_clk_rst_n_pwrdwn_ctl[0]=(((r).tx_ln_clk_rst_n_pwrdwn_ctl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access TX_LN_CLK_RST_N_PWRDWN_CTL.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TX_LN_CLK_RST_N_PWRDWN_CTLr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_LN_CLK_RST_N_PWRDWN_CTLr,(_r._tx_ln_clk_rst_n_pwrdwn_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TX_LN_CLK_RST_N_PWRDWN_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_LN_CLK_RST_N_PWRDWN_CTLr,(_r._tx_ln_clk_rst_n_pwrdwn_ctl)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TX_LN_CLK_RST_N_PWRDWN_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_LN_CLK_RST_N_PWRDWN_CTLr,(_r._tx_ln_clk_rst_n_pwrdwn_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TX_LN_CLK_RST_N_PWRDWN_CTLr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_LN_CLK_RST_N_PWRDWN_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_ln_clk_rst_n_pwrdwn_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TX_LN_CLK_RST_N_PWRDWN_CTLr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_LN_CLK_RST_N_PWRDWN_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_ln_clk_rst_n_pwrdwn_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TX_LN_CLK_RST_N_PWRDWN_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_LN_CLK_RST_N_PWRDWN_CTLr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tx_ln_clk_rst_n_pwrdwn_ctl))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TX_LN_CLK_RST_N_PWRDWN_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_LN_CLK_RST_N_PWRDWN_CTLr
#define TX_LN_CLK_RST_N_PWRDWN_CTLr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_LN_CLK_RST_N_PWRDWN_CTLr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_LN_CLK_RST_N_PWRDWN_CTLr_t TX_LN_CLK_RST_N_PWRDWN_CTLr_t;
#define TX_LN_CLK_RST_N_PWRDWN_CTLr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_LN_CLK_RST_N_PWRDWN_CTLr_CLR
#define TX_LN_CLK_RST_N_PWRDWN_CTLr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_LN_CLK_RST_N_PWRDWN_CTLr_SET
#define TX_LN_CLK_RST_N_PWRDWN_CTLr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_LN_CLK_RST_N_PWRDWN_CTLr_GET
#define TX_LN_CLK_RST_N_PWRDWN_CTLr_AFE_TX_RESET_DEASSERTf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_LN_CLK_RST_N_PWRDWN_CTLr_AFE_TX_RESET_DEASSERTf_GET
#define TX_LN_CLK_RST_N_PWRDWN_CTLr_AFE_TX_RESET_DEASSERTf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_LN_CLK_RST_N_PWRDWN_CTLr_AFE_TX_RESET_DEASSERTf_SET
#define TX_LN_CLK_RST_N_PWRDWN_CTLr_LN_TX_S_PWRDNf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_LN_CLK_RST_N_PWRDWN_CTLr_LN_TX_S_PWRDNf_GET
#define TX_LN_CLK_RST_N_PWRDWN_CTLr_LN_TX_S_PWRDNf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_LN_CLK_RST_N_PWRDWN_CTLr_LN_TX_S_PWRDNf_SET
#define READ_TX_LN_CLK_RST_N_PWRDWN_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TX_LN_CLK_RST_N_PWRDWN_CTLr
#define WRITE_TX_LN_CLK_RST_N_PWRDWN_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TX_LN_CLK_RST_N_PWRDWN_CTLr
#define MODIFY_TX_LN_CLK_RST_N_PWRDWN_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TX_LN_CLK_RST_N_PWRDWN_CTLr
#define READLN_TX_LN_CLK_RST_N_PWRDWN_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TX_LN_CLK_RST_N_PWRDWN_CTLr
#define WRITELN_TX_LN_CLK_RST_N_PWRDWN_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TX_LN_CLK_RST_N_PWRDWN_CTLr
#define WRITEALL_TX_LN_CLK_RST_N_PWRDWN_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TX_LN_CLK_RST_N_PWRDWN_CTLr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_LN_CLK_RST_N_PWRDWN_CTLr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  TX_LN_AFE_RST_PWRDWN_CTL_CTL
 * BLOCKS:   TX_CKRST_CTRL
 * REGADDR:  0xd1b2
 * DEVAD:    1
 * DESC:     TX_LANE_AFE_RESET_PWRDWN_CONTROL_CONTROL
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     AFE_TX_PWRDN_FRC AFE TX Lane powerdown force.
 *     AFE_TX_PWRDN_FRC_VAL AFE TX Lane powerdown force value.
 *     AFE_TX_RESET_FRC AFE TX Lane reset force.
 *     AFE_TX_RESET_FRC_VAL AFE TX Lane reset force value.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_LN_AFE_RST_PWRDWN_CTL_CTLr (0x0001d1b2 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_LN_AFE_RST_PWRDWN_CTL_CTLr_SIZE 4

/*
 * This structure should be used to declare and program TX_LN_AFE_RST_PWRDWN_CTL_CTL.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_LN_AFE_RST_PWRDWN_CTL_CTLr_s {
	uint32_t v[1];
	uint32_t tx_ln_afe_rst_pwrdwn_ctl_ctl[1];
	uint32_t _tx_ln_afe_rst_pwrdwn_ctl_ctl;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_LN_AFE_RST_PWRDWN_CTL_CTLr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_LN_AFE_RST_PWRDWN_CTL_CTLr_CLR(r) (r).tx_ln_afe_rst_pwrdwn_ctl_ctl[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_LN_AFE_RST_PWRDWN_CTL_CTLr_SET(r,d) (r).tx_ln_afe_rst_pwrdwn_ctl_ctl[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_LN_AFE_RST_PWRDWN_CTL_CTLr_GET(r) (r).tx_ln_afe_rst_pwrdwn_ctl_ctl[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_LN_AFE_RST_PWRDWN_CTL_CTLr_AFE_TX_RESET_FRC_VALf_GET(r) ((((r).tx_ln_afe_rst_pwrdwn_ctl_ctl[0]) >> 3) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_LN_AFE_RST_PWRDWN_CTL_CTLr_AFE_TX_RESET_FRC_VALf_SET(r,f) (r).tx_ln_afe_rst_pwrdwn_ctl_ctl[0]=(((r).tx_ln_afe_rst_pwrdwn_ctl_ctl[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_LN_AFE_RST_PWRDWN_CTL_CTLr_AFE_TX_RESET_FRCf_GET(r) ((((r).tx_ln_afe_rst_pwrdwn_ctl_ctl[0]) >> 2) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_LN_AFE_RST_PWRDWN_CTL_CTLr_AFE_TX_RESET_FRCf_SET(r,f) (r).tx_ln_afe_rst_pwrdwn_ctl_ctl[0]=(((r).tx_ln_afe_rst_pwrdwn_ctl_ctl[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_LN_AFE_RST_PWRDWN_CTL_CTLr_AFE_TX_PWRDN_FRC_VALf_GET(r) ((((r).tx_ln_afe_rst_pwrdwn_ctl_ctl[0]) >> 1) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_LN_AFE_RST_PWRDWN_CTL_CTLr_AFE_TX_PWRDN_FRC_VALf_SET(r,f) (r).tx_ln_afe_rst_pwrdwn_ctl_ctl[0]=(((r).tx_ln_afe_rst_pwrdwn_ctl_ctl[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_LN_AFE_RST_PWRDWN_CTL_CTLr_AFE_TX_PWRDN_FRCf_GET(r) (((r).tx_ln_afe_rst_pwrdwn_ctl_ctl[0]) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_LN_AFE_RST_PWRDWN_CTL_CTLr_AFE_TX_PWRDN_FRCf_SET(r,f) (r).tx_ln_afe_rst_pwrdwn_ctl_ctl[0]=(((r).tx_ln_afe_rst_pwrdwn_ctl_ctl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access TX_LN_AFE_RST_PWRDWN_CTL_CTL.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TX_LN_AFE_RST_PWRDWN_CTL_CTLr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_LN_AFE_RST_PWRDWN_CTL_CTLr,(_r._tx_ln_afe_rst_pwrdwn_ctl_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TX_LN_AFE_RST_PWRDWN_CTL_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_LN_AFE_RST_PWRDWN_CTL_CTLr,(_r._tx_ln_afe_rst_pwrdwn_ctl_ctl)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TX_LN_AFE_RST_PWRDWN_CTL_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_LN_AFE_RST_PWRDWN_CTL_CTLr,(_r._tx_ln_afe_rst_pwrdwn_ctl_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TX_LN_AFE_RST_PWRDWN_CTL_CTLr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_LN_AFE_RST_PWRDWN_CTL_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_ln_afe_rst_pwrdwn_ctl_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TX_LN_AFE_RST_PWRDWN_CTL_CTLr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_LN_AFE_RST_PWRDWN_CTL_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_ln_afe_rst_pwrdwn_ctl_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TX_LN_AFE_RST_PWRDWN_CTL_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_LN_AFE_RST_PWRDWN_CTL_CTLr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tx_ln_afe_rst_pwrdwn_ctl_ctl))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TX_LN_AFE_RST_PWRDWN_CTL_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_LN_AFE_RST_PWRDWN_CTL_CTLr
#define TX_LN_AFE_RST_PWRDWN_CTL_CTLr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_LN_AFE_RST_PWRDWN_CTL_CTLr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_LN_AFE_RST_PWRDWN_CTL_CTLr_t TX_LN_AFE_RST_PWRDWN_CTL_CTLr_t;
#define TX_LN_AFE_RST_PWRDWN_CTL_CTLr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_LN_AFE_RST_PWRDWN_CTL_CTLr_CLR
#define TX_LN_AFE_RST_PWRDWN_CTL_CTLr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_LN_AFE_RST_PWRDWN_CTL_CTLr_SET
#define TX_LN_AFE_RST_PWRDWN_CTL_CTLr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_LN_AFE_RST_PWRDWN_CTL_CTLr_GET
#define TX_LN_AFE_RST_PWRDWN_CTL_CTLr_AFE_TX_RESET_FRC_VALf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_LN_AFE_RST_PWRDWN_CTL_CTLr_AFE_TX_RESET_FRC_VALf_GET
#define TX_LN_AFE_RST_PWRDWN_CTL_CTLr_AFE_TX_RESET_FRC_VALf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_LN_AFE_RST_PWRDWN_CTL_CTLr_AFE_TX_RESET_FRC_VALf_SET
#define TX_LN_AFE_RST_PWRDWN_CTL_CTLr_AFE_TX_RESET_FRCf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_LN_AFE_RST_PWRDWN_CTL_CTLr_AFE_TX_RESET_FRCf_GET
#define TX_LN_AFE_RST_PWRDWN_CTL_CTLr_AFE_TX_RESET_FRCf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_LN_AFE_RST_PWRDWN_CTL_CTLr_AFE_TX_RESET_FRCf_SET
#define TX_LN_AFE_RST_PWRDWN_CTL_CTLr_AFE_TX_PWRDN_FRC_VALf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_LN_AFE_RST_PWRDWN_CTL_CTLr_AFE_TX_PWRDN_FRC_VALf_GET
#define TX_LN_AFE_RST_PWRDWN_CTL_CTLr_AFE_TX_PWRDN_FRC_VALf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_LN_AFE_RST_PWRDWN_CTL_CTLr_AFE_TX_PWRDN_FRC_VALf_SET
#define TX_LN_AFE_RST_PWRDWN_CTL_CTLr_AFE_TX_PWRDN_FRCf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_LN_AFE_RST_PWRDWN_CTL_CTLr_AFE_TX_PWRDN_FRCf_GET
#define TX_LN_AFE_RST_PWRDWN_CTL_CTLr_AFE_TX_PWRDN_FRCf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_LN_AFE_RST_PWRDWN_CTL_CTLr_AFE_TX_PWRDN_FRCf_SET
#define READ_TX_LN_AFE_RST_PWRDWN_CTL_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TX_LN_AFE_RST_PWRDWN_CTL_CTLr
#define WRITE_TX_LN_AFE_RST_PWRDWN_CTL_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TX_LN_AFE_RST_PWRDWN_CTL_CTLr
#define MODIFY_TX_LN_AFE_RST_PWRDWN_CTL_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TX_LN_AFE_RST_PWRDWN_CTL_CTLr
#define READLN_TX_LN_AFE_RST_PWRDWN_CTL_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TX_LN_AFE_RST_PWRDWN_CTL_CTLr
#define WRITELN_TX_LN_AFE_RST_PWRDWN_CTL_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TX_LN_AFE_RST_PWRDWN_CTL_CTLr
#define WRITEALL_TX_LN_AFE_RST_PWRDWN_CTL_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TX_LN_AFE_RST_PWRDWN_CTL_CTLr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_LN_AFE_RST_PWRDWN_CTL_CTLr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  TX_LN_RST_N_PWRDN_PIN_KILL_CTL
 * BLOCKS:   TX_CKRST_CTRL
 * REGADDR:  0xd1b3
 * DEVAD:    1
 * DESC:     TX_LANE_RESET_N_PWRDN_PIN_KILL_CONTROL
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     PMD_LN_TX_H_PWRDN_PKILL 1'b1 will disable the pmd_ln_tx_h_pwrdn input pin.
 *     PMD_TX_LANE_MODE_FRC 1'b1 will force pmd_tx_lane_mode_frc_val which will be reflected in pmd_tx_lane_mode status.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_LN_RST_N_PWRDN_PIN_KILL_CTLr (0x0001d1b3 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_LN_RST_N_PWRDN_PIN_KILL_CTLr_SIZE 4

/*
 * This structure should be used to declare and program TX_LN_RST_N_PWRDN_PIN_KILL_CTL.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_LN_RST_N_PWRDN_PIN_KILL_CTLr_s {
	uint32_t v[1];
	uint32_t tx_ln_rst_n_pwrdn_pin_kill_ctl[1];
	uint32_t _tx_ln_rst_n_pwrdn_pin_kill_ctl;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_LN_RST_N_PWRDN_PIN_KILL_CTLr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_LN_RST_N_PWRDN_PIN_KILL_CTLr_CLR(r) (r).tx_ln_rst_n_pwrdn_pin_kill_ctl[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_LN_RST_N_PWRDN_PIN_KILL_CTLr_SET(r,d) (r).tx_ln_rst_n_pwrdn_pin_kill_ctl[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_LN_RST_N_PWRDN_PIN_KILL_CTLr_GET(r) (r).tx_ln_rst_n_pwrdn_pin_kill_ctl[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_LN_RST_N_PWRDN_PIN_KILL_CTLr_PMD_TX_LANE_MODE_FRCf_GET(r) ((((r).tx_ln_rst_n_pwrdn_pin_kill_ctl[0]) >> 15) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_LN_RST_N_PWRDN_PIN_KILL_CTLr_PMD_TX_LANE_MODE_FRCf_SET(r,f) (r).tx_ln_rst_n_pwrdn_pin_kill_ctl[0]=(((r).tx_ln_rst_n_pwrdn_pin_kill_ctl[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_LN_RST_N_PWRDN_PIN_KILL_CTLr_PMD_LN_TX_H_PWRDN_PKILLf_GET(r) (((r).tx_ln_rst_n_pwrdn_pin_kill_ctl[0]) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_LN_RST_N_PWRDN_PIN_KILL_CTLr_PMD_LN_TX_H_PWRDN_PKILLf_SET(r,f) (r).tx_ln_rst_n_pwrdn_pin_kill_ctl[0]=(((r).tx_ln_rst_n_pwrdn_pin_kill_ctl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access TX_LN_RST_N_PWRDN_PIN_KILL_CTL.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TX_LN_RST_N_PWRDN_PIN_KILL_CTLr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_LN_RST_N_PWRDN_PIN_KILL_CTLr,(_r._tx_ln_rst_n_pwrdn_pin_kill_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TX_LN_RST_N_PWRDN_PIN_KILL_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_LN_RST_N_PWRDN_PIN_KILL_CTLr,(_r._tx_ln_rst_n_pwrdn_pin_kill_ctl)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TX_LN_RST_N_PWRDN_PIN_KILL_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_LN_RST_N_PWRDN_PIN_KILL_CTLr,(_r._tx_ln_rst_n_pwrdn_pin_kill_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TX_LN_RST_N_PWRDN_PIN_KILL_CTLr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_LN_RST_N_PWRDN_PIN_KILL_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_ln_rst_n_pwrdn_pin_kill_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TX_LN_RST_N_PWRDN_PIN_KILL_CTLr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_LN_RST_N_PWRDN_PIN_KILL_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_ln_rst_n_pwrdn_pin_kill_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TX_LN_RST_N_PWRDN_PIN_KILL_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_LN_RST_N_PWRDN_PIN_KILL_CTLr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tx_ln_rst_n_pwrdn_pin_kill_ctl))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TX_LN_RST_N_PWRDN_PIN_KILL_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_LN_RST_N_PWRDN_PIN_KILL_CTLr
#define TX_LN_RST_N_PWRDN_PIN_KILL_CTLr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_LN_RST_N_PWRDN_PIN_KILL_CTLr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_LN_RST_N_PWRDN_PIN_KILL_CTLr_t TX_LN_RST_N_PWRDN_PIN_KILL_CTLr_t;
#define TX_LN_RST_N_PWRDN_PIN_KILL_CTLr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_LN_RST_N_PWRDN_PIN_KILL_CTLr_CLR
#define TX_LN_RST_N_PWRDN_PIN_KILL_CTLr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_LN_RST_N_PWRDN_PIN_KILL_CTLr_SET
#define TX_LN_RST_N_PWRDN_PIN_KILL_CTLr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_LN_RST_N_PWRDN_PIN_KILL_CTLr_GET
#define TX_LN_RST_N_PWRDN_PIN_KILL_CTLr_PMD_TX_LANE_MODE_FRCf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_LN_RST_N_PWRDN_PIN_KILL_CTLr_PMD_TX_LANE_MODE_FRCf_GET
#define TX_LN_RST_N_PWRDN_PIN_KILL_CTLr_PMD_TX_LANE_MODE_FRCf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_LN_RST_N_PWRDN_PIN_KILL_CTLr_PMD_TX_LANE_MODE_FRCf_SET
#define TX_LN_RST_N_PWRDN_PIN_KILL_CTLr_PMD_LN_TX_H_PWRDN_PKILLf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_LN_RST_N_PWRDN_PIN_KILL_CTLr_PMD_LN_TX_H_PWRDN_PKILLf_GET
#define TX_LN_RST_N_PWRDN_PIN_KILL_CTLr_PMD_LN_TX_H_PWRDN_PKILLf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_LN_RST_N_PWRDN_PIN_KILL_CTLr_PMD_LN_TX_H_PWRDN_PKILLf_SET
#define READ_TX_LN_RST_N_PWRDN_PIN_KILL_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TX_LN_RST_N_PWRDN_PIN_KILL_CTLr
#define WRITE_TX_LN_RST_N_PWRDN_PIN_KILL_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TX_LN_RST_N_PWRDN_PIN_KILL_CTLr
#define MODIFY_TX_LN_RST_N_PWRDN_PIN_KILL_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TX_LN_RST_N_PWRDN_PIN_KILL_CTLr
#define READLN_TX_LN_RST_N_PWRDN_PIN_KILL_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TX_LN_RST_N_PWRDN_PIN_KILL_CTLr
#define WRITELN_TX_LN_RST_N_PWRDN_PIN_KILL_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TX_LN_RST_N_PWRDN_PIN_KILL_CTLr
#define WRITEALL_TX_LN_RST_N_PWRDN_PIN_KILL_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TX_LN_RST_N_PWRDN_PIN_KILL_CTLr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_LN_RST_N_PWRDN_PIN_KILL_CTLr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  TX_LN_DBG_RST_CTL
 * BLOCKS:   TX_CKRST_CTRL
 * REGADDR:  0xd1b4
 * DEVAD:    1
 * DESC:     TX_LANE_DEBUG_RESET_CONTROL
 * RESETVAL: 0x3 (3)
 * ACCESS:   R/W
 * FIELDS:
 *     LN_TX_S_RSTB     Active Low Lane Soft Reset for TX datapath and registers. If asserted by writing to 1'b0 will reset the TX registers and datapath for a lane.This is a debug only register and it is not handled by FW-HW handshake
 *     LN_TX_DP_S_RSTB  Active Low Lane Soft Reset for TX datapath. If asserted by writing to 1'b0 will reset the TX datapath for a lane.This is a debug only register and it is not handled by FW-HW handshake
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_LN_DBG_RST_CTLr (0x0001d1b4 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_LN_DBG_RST_CTLr_SIZE 4

/*
 * This structure should be used to declare and program TX_LN_DBG_RST_CTL.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_LN_DBG_RST_CTLr_s {
	uint32_t v[1];
	uint32_t tx_ln_dbg_rst_ctl[1];
	uint32_t _tx_ln_dbg_rst_ctl;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_LN_DBG_RST_CTLr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_LN_DBG_RST_CTLr_CLR(r) (r).tx_ln_dbg_rst_ctl[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_LN_DBG_RST_CTLr_SET(r,d) (r).tx_ln_dbg_rst_ctl[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_LN_DBG_RST_CTLr_GET(r) (r).tx_ln_dbg_rst_ctl[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_LN_DBG_RST_CTLr_LN_TX_DP_S_RSTBf_GET(r) ((((r).tx_ln_dbg_rst_ctl[0]) >> 1) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_LN_DBG_RST_CTLr_LN_TX_DP_S_RSTBf_SET(r,f) (r).tx_ln_dbg_rst_ctl[0]=(((r).tx_ln_dbg_rst_ctl[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_LN_DBG_RST_CTLr_LN_TX_S_RSTBf_GET(r) (((r).tx_ln_dbg_rst_ctl[0]) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_LN_DBG_RST_CTLr_LN_TX_S_RSTBf_SET(r,f) (r).tx_ln_dbg_rst_ctl[0]=(((r).tx_ln_dbg_rst_ctl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access TX_LN_DBG_RST_CTL.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TX_LN_DBG_RST_CTLr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_LN_DBG_RST_CTLr,(_r._tx_ln_dbg_rst_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TX_LN_DBG_RST_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_LN_DBG_RST_CTLr,(_r._tx_ln_dbg_rst_ctl)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TX_LN_DBG_RST_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_LN_DBG_RST_CTLr,(_r._tx_ln_dbg_rst_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TX_LN_DBG_RST_CTLr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_LN_DBG_RST_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_ln_dbg_rst_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TX_LN_DBG_RST_CTLr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_LN_DBG_RST_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_ln_dbg_rst_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TX_LN_DBG_RST_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_LN_DBG_RST_CTLr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tx_ln_dbg_rst_ctl))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TX_LN_DBG_RST_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_LN_DBG_RST_CTLr
#define TX_LN_DBG_RST_CTLr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_LN_DBG_RST_CTLr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_LN_DBG_RST_CTLr_t TX_LN_DBG_RST_CTLr_t;
#define TX_LN_DBG_RST_CTLr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_LN_DBG_RST_CTLr_CLR
#define TX_LN_DBG_RST_CTLr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_LN_DBG_RST_CTLr_SET
#define TX_LN_DBG_RST_CTLr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_LN_DBG_RST_CTLr_GET
#define TX_LN_DBG_RST_CTLr_LN_TX_DP_S_RSTBf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_LN_DBG_RST_CTLr_LN_TX_DP_S_RSTBf_GET
#define TX_LN_DBG_RST_CTLr_LN_TX_DP_S_RSTBf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_LN_DBG_RST_CTLr_LN_TX_DP_S_RSTBf_SET
#define TX_LN_DBG_RST_CTLr_LN_TX_S_RSTBf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_LN_DBG_RST_CTLr_LN_TX_S_RSTBf_GET
#define TX_LN_DBG_RST_CTLr_LN_TX_S_RSTBf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_LN_DBG_RST_CTLr_LN_TX_S_RSTBf_SET
#define READ_TX_LN_DBG_RST_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TX_LN_DBG_RST_CTLr
#define WRITE_TX_LN_DBG_RST_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TX_LN_DBG_RST_CTLr
#define MODIFY_TX_LN_DBG_RST_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TX_LN_DBG_RST_CTLr
#define READLN_TX_LN_DBG_RST_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TX_LN_DBG_RST_CTLr
#define WRITELN_TX_LN_DBG_RST_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TX_LN_DBG_RST_CTLr
#define WRITEALL_TX_LN_DBG_RST_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TX_LN_DBG_RST_CTLr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_LN_DBG_RST_CTLr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  TX_PMD_LN_MODE_CTL
 * BLOCKS:   TX_CKRST_CTRL
 * REGADDR:  0xd1b5
 * DEVAD:    1
 * DESC:     TX_PMD_LANE_MODE_CONTROL
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     PMD_TX_LANE_MODE_FRC_VAL pmd_tx_lane_mode force value for debug.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PMD_LN_MODE_CTLr (0x0001d1b5 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PMD_LN_MODE_CTLr_SIZE 4

/*
 * This structure should be used to declare and program TX_PMD_LN_MODE_CTL.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PMD_LN_MODE_CTLr_s {
	uint32_t v[1];
	uint32_t tx_pmd_ln_mode_ctl[1];
	uint32_t _tx_pmd_ln_mode_ctl;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PMD_LN_MODE_CTLr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PMD_LN_MODE_CTLr_CLR(r) (r).tx_pmd_ln_mode_ctl[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PMD_LN_MODE_CTLr_SET(r,d) (r).tx_pmd_ln_mode_ctl[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PMD_LN_MODE_CTLr_GET(r) (r).tx_pmd_ln_mode_ctl[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PMD_LN_MODE_CTLr_PMD_TX_LANE_MODE_FRC_VALf_GET(r) (((r).tx_pmd_ln_mode_ctl[0]) & 0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PMD_LN_MODE_CTLr_PMD_TX_LANE_MODE_FRC_VALf_SET(r,f) (r).tx_pmd_ln_mode_ctl[0]=(((r).tx_pmd_ln_mode_ctl[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access TX_PMD_LN_MODE_CTL.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TX_PMD_LN_MODE_CTLr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PMD_LN_MODE_CTLr,(_r._tx_pmd_ln_mode_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TX_PMD_LN_MODE_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PMD_LN_MODE_CTLr,(_r._tx_pmd_ln_mode_ctl)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TX_PMD_LN_MODE_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PMD_LN_MODE_CTLr,(_r._tx_pmd_ln_mode_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TX_PMD_LN_MODE_CTLr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PMD_LN_MODE_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_pmd_ln_mode_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TX_PMD_LN_MODE_CTLr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PMD_LN_MODE_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_pmd_ln_mode_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TX_PMD_LN_MODE_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PMD_LN_MODE_CTLr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tx_pmd_ln_mode_ctl))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TX_PMD_LN_MODE_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PMD_LN_MODE_CTLr
#define TX_PMD_LN_MODE_CTLr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PMD_LN_MODE_CTLr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PMD_LN_MODE_CTLr_t TX_PMD_LN_MODE_CTLr_t;
#define TX_PMD_LN_MODE_CTLr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PMD_LN_MODE_CTLr_CLR
#define TX_PMD_LN_MODE_CTLr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PMD_LN_MODE_CTLr_SET
#define TX_PMD_LN_MODE_CTLr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PMD_LN_MODE_CTLr_GET
#define TX_PMD_LN_MODE_CTLr_PMD_TX_LANE_MODE_FRC_VALf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PMD_LN_MODE_CTLr_PMD_TX_LANE_MODE_FRC_VALf_GET
#define TX_PMD_LN_MODE_CTLr_PMD_TX_LANE_MODE_FRC_VALf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PMD_LN_MODE_CTLr_PMD_TX_LANE_MODE_FRC_VALf_SET
#define READ_TX_PMD_LN_MODE_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TX_PMD_LN_MODE_CTLr
#define WRITE_TX_PMD_LN_MODE_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TX_PMD_LN_MODE_CTLr
#define MODIFY_TX_PMD_LN_MODE_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TX_PMD_LN_MODE_CTLr
#define READLN_TX_PMD_LN_MODE_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TX_PMD_LN_MODE_CTLr
#define WRITELN_TX_PMD_LN_MODE_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TX_PMD_LN_MODE_CTLr
#define WRITEALL_TX_PMD_LN_MODE_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TX_PMD_LN_MODE_CTLr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PMD_LN_MODE_CTLr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  TX_CLK_N_RST_DBG_CTL
 * BLOCKS:   TX_CKRST_CTRL
 * REGADDR:  0xd1b7
 * DEVAD:    1
 * DESC:     TX_CLOCK_N_RESET_DEBUG_CONTROL
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     LN_TX_S_CLKGATE_FRC_ON TX Active High Lane clock gator enable. If 1'1b1 then tx lane clock will be gated off. It does not affect the tclk goingto RMIC block so tx lane based registers can still be readable but not writable.It is recommended for user to force pmd_tx_clk_vld to 1'b0 while tx_s_clkgate_frc_on is asserted to 1'b1by using pmd_tx_clk_vld_frc/frc_val registers.
 *     LN_TX_S_COMCLK_SEL Mux control for selection of comclk for TX Lane clocks.If asserted by writing to 1'b1 will select the comclk for the lane clocks.It is recommended for user to force pmd_tx_clk_vld to 1'b0 while tx_s_comclk_sel is asserted to 1'b1by using pmd_tx_clk_vld_frc/frc_val registers.
 *     LN_TX_S_COMCLK_FRC_ON Mux control for selection of comclk for TX Lane clocks by force.If asserted by writing to 1'b1 will select the comclk for the TX lane clocks. This is a debug bit and should be only used if lane clock from AFE is dead.It is recommended for user to force pmd_tx_clk_vld to 1'b0 while tx_s_comclk_frc_on is asserted to 1'b1by using pmd_tx_clk_vld_frc/frc_val registers.
 *     PMD_TX_CLK_VLD_FRC pmd_tx_clk_vld core output pin force.
 *     PMD_TX_CLK_VLD_FRC_VAL pmd_tx_clk_vld core output pin force value.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_CLK_N_RST_DBG_CTLr (0x0001d1b7 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_CLK_N_RST_DBG_CTLr_SIZE 4

/*
 * This structure should be used to declare and program TX_CLK_N_RST_DBG_CTL.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_CLK_N_RST_DBG_CTLr_s {
	uint32_t v[1];
	uint32_t tx_clk_n_rst_dbg_ctl[1];
	uint32_t _tx_clk_n_rst_dbg_ctl;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_CLK_N_RST_DBG_CTLr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_CLK_N_RST_DBG_CTLr_CLR(r) (r).tx_clk_n_rst_dbg_ctl[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_CLK_N_RST_DBG_CTLr_SET(r,d) (r).tx_clk_n_rst_dbg_ctl[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_CLK_N_RST_DBG_CTLr_GET(r) (r).tx_clk_n_rst_dbg_ctl[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_CLK_N_RST_DBG_CTLr_PMD_TX_CLK_VLD_FRC_VALf_GET(r) ((((r).tx_clk_n_rst_dbg_ctl[0]) >> 4) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_CLK_N_RST_DBG_CTLr_PMD_TX_CLK_VLD_FRC_VALf_SET(r,f) (r).tx_clk_n_rst_dbg_ctl[0]=(((r).tx_clk_n_rst_dbg_ctl[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_CLK_N_RST_DBG_CTLr_PMD_TX_CLK_VLD_FRCf_GET(r) ((((r).tx_clk_n_rst_dbg_ctl[0]) >> 3) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_CLK_N_RST_DBG_CTLr_PMD_TX_CLK_VLD_FRCf_SET(r,f) (r).tx_clk_n_rst_dbg_ctl[0]=(((r).tx_clk_n_rst_dbg_ctl[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_CLK_N_RST_DBG_CTLr_LN_TX_S_COMCLK_FRC_ONf_GET(r) ((((r).tx_clk_n_rst_dbg_ctl[0]) >> 2) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_CLK_N_RST_DBG_CTLr_LN_TX_S_COMCLK_FRC_ONf_SET(r,f) (r).tx_clk_n_rst_dbg_ctl[0]=(((r).tx_clk_n_rst_dbg_ctl[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_CLK_N_RST_DBG_CTLr_LN_TX_S_COMCLK_SELf_GET(r) ((((r).tx_clk_n_rst_dbg_ctl[0]) >> 1) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_CLK_N_RST_DBG_CTLr_LN_TX_S_COMCLK_SELf_SET(r,f) (r).tx_clk_n_rst_dbg_ctl[0]=(((r).tx_clk_n_rst_dbg_ctl[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_CLK_N_RST_DBG_CTLr_LN_TX_S_CLKGATE_FRC_ONf_GET(r) (((r).tx_clk_n_rst_dbg_ctl[0]) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_CLK_N_RST_DBG_CTLr_LN_TX_S_CLKGATE_FRC_ONf_SET(r,f) (r).tx_clk_n_rst_dbg_ctl[0]=(((r).tx_clk_n_rst_dbg_ctl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access TX_CLK_N_RST_DBG_CTL.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TX_CLK_N_RST_DBG_CTLr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_CLK_N_RST_DBG_CTLr,(_r._tx_clk_n_rst_dbg_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TX_CLK_N_RST_DBG_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_CLK_N_RST_DBG_CTLr,(_r._tx_clk_n_rst_dbg_ctl)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TX_CLK_N_RST_DBG_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_CLK_N_RST_DBG_CTLr,(_r._tx_clk_n_rst_dbg_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TX_CLK_N_RST_DBG_CTLr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_CLK_N_RST_DBG_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_clk_n_rst_dbg_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TX_CLK_N_RST_DBG_CTLr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_CLK_N_RST_DBG_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_clk_n_rst_dbg_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TX_CLK_N_RST_DBG_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_CLK_N_RST_DBG_CTLr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tx_clk_n_rst_dbg_ctl))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TX_CLK_N_RST_DBG_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_CLK_N_RST_DBG_CTLr
#define TX_CLK_N_RST_DBG_CTLr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_CLK_N_RST_DBG_CTLr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_CLK_N_RST_DBG_CTLr_t TX_CLK_N_RST_DBG_CTLr_t;
#define TX_CLK_N_RST_DBG_CTLr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_CLK_N_RST_DBG_CTLr_CLR
#define TX_CLK_N_RST_DBG_CTLr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_CLK_N_RST_DBG_CTLr_SET
#define TX_CLK_N_RST_DBG_CTLr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_CLK_N_RST_DBG_CTLr_GET
#define TX_CLK_N_RST_DBG_CTLr_PMD_TX_CLK_VLD_FRC_VALf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_CLK_N_RST_DBG_CTLr_PMD_TX_CLK_VLD_FRC_VALf_GET
#define TX_CLK_N_RST_DBG_CTLr_PMD_TX_CLK_VLD_FRC_VALf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_CLK_N_RST_DBG_CTLr_PMD_TX_CLK_VLD_FRC_VALf_SET
#define TX_CLK_N_RST_DBG_CTLr_PMD_TX_CLK_VLD_FRCf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_CLK_N_RST_DBG_CTLr_PMD_TX_CLK_VLD_FRCf_GET
#define TX_CLK_N_RST_DBG_CTLr_PMD_TX_CLK_VLD_FRCf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_CLK_N_RST_DBG_CTLr_PMD_TX_CLK_VLD_FRCf_SET
#define TX_CLK_N_RST_DBG_CTLr_LN_TX_S_COMCLK_FRC_ONf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_CLK_N_RST_DBG_CTLr_LN_TX_S_COMCLK_FRC_ONf_GET
#define TX_CLK_N_RST_DBG_CTLr_LN_TX_S_COMCLK_FRC_ONf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_CLK_N_RST_DBG_CTLr_LN_TX_S_COMCLK_FRC_ONf_SET
#define TX_CLK_N_RST_DBG_CTLr_LN_TX_S_COMCLK_SELf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_CLK_N_RST_DBG_CTLr_LN_TX_S_COMCLK_SELf_GET
#define TX_CLK_N_RST_DBG_CTLr_LN_TX_S_COMCLK_SELf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_CLK_N_RST_DBG_CTLr_LN_TX_S_COMCLK_SELf_SET
#define TX_CLK_N_RST_DBG_CTLr_LN_TX_S_CLKGATE_FRC_ONf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_CLK_N_RST_DBG_CTLr_LN_TX_S_CLKGATE_FRC_ONf_GET
#define TX_CLK_N_RST_DBG_CTLr_LN_TX_S_CLKGATE_FRC_ONf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_CLK_N_RST_DBG_CTLr_LN_TX_S_CLKGATE_FRC_ONf_SET
#define READ_TX_CLK_N_RST_DBG_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TX_CLK_N_RST_DBG_CTLr
#define WRITE_TX_CLK_N_RST_DBG_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TX_CLK_N_RST_DBG_CTLr
#define MODIFY_TX_CLK_N_RST_DBG_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TX_CLK_N_RST_DBG_CTLr
#define READLN_TX_CLK_N_RST_DBG_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TX_CLK_N_RST_DBG_CTLr
#define WRITELN_TX_CLK_N_RST_DBG_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TX_CLK_N_RST_DBG_CTLr
#define WRITEALL_TX_CLK_N_RST_DBG_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TX_CLK_N_RST_DBG_CTLr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_CLK_N_RST_DBG_CTLr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  TX_PMD_LN_MODE_STS
 * BLOCKS:   TX_CKRST_CTRL
 * REGADDR:  0xd1b8
 * DEVAD:    1
 * DESC:     TX_PMD_LANE_MODE_STATUS
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     PMD_TX_LANE_MODE This indicates the status of the core input pin pmd_tx_lane_mode.This is driven from PCS and used for communication between PCS and PMD Micro code.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PMD_LN_MODE_STSr (0x0001d1b8 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PMD_LN_MODE_STSr_SIZE 4

/*
 * This structure should be used to declare and program TX_PMD_LN_MODE_STS.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PMD_LN_MODE_STSr_s {
	uint32_t v[1];
	uint32_t tx_pmd_ln_mode_sts[1];
	uint32_t _tx_pmd_ln_mode_sts;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PMD_LN_MODE_STSr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PMD_LN_MODE_STSr_CLR(r) (r).tx_pmd_ln_mode_sts[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PMD_LN_MODE_STSr_SET(r,d) (r).tx_pmd_ln_mode_sts[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PMD_LN_MODE_STSr_GET(r) (r).tx_pmd_ln_mode_sts[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PMD_LN_MODE_STSr_PMD_TX_LANE_MODEf_GET(r) (((r).tx_pmd_ln_mode_sts[0]) & 0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PMD_LN_MODE_STSr_PMD_TX_LANE_MODEf_SET(r,f) (r).tx_pmd_ln_mode_sts[0]=(((r).tx_pmd_ln_mode_sts[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access TX_PMD_LN_MODE_STS.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TX_PMD_LN_MODE_STSr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PMD_LN_MODE_STSr,(_r._tx_pmd_ln_mode_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TX_PMD_LN_MODE_STSr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PMD_LN_MODE_STSr,(_r._tx_pmd_ln_mode_sts)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TX_PMD_LN_MODE_STSr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PMD_LN_MODE_STSr,(_r._tx_pmd_ln_mode_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TX_PMD_LN_MODE_STSr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PMD_LN_MODE_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_pmd_ln_mode_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TX_PMD_LN_MODE_STSr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PMD_LN_MODE_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_pmd_ln_mode_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TX_PMD_LN_MODE_STSr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PMD_LN_MODE_STSr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tx_pmd_ln_mode_sts))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TX_PMD_LN_MODE_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PMD_LN_MODE_STSr
#define TX_PMD_LN_MODE_STSr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PMD_LN_MODE_STSr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PMD_LN_MODE_STSr_t TX_PMD_LN_MODE_STSr_t;
#define TX_PMD_LN_MODE_STSr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PMD_LN_MODE_STSr_CLR
#define TX_PMD_LN_MODE_STSr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PMD_LN_MODE_STSr_SET
#define TX_PMD_LN_MODE_STSr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PMD_LN_MODE_STSr_GET
#define TX_PMD_LN_MODE_STSr_PMD_TX_LANE_MODEf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PMD_LN_MODE_STSr_PMD_TX_LANE_MODEf_GET
#define TX_PMD_LN_MODE_STSr_PMD_TX_LANE_MODEf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PMD_LN_MODE_STSr_PMD_TX_LANE_MODEf_SET
#define READ_TX_PMD_LN_MODE_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TX_PMD_LN_MODE_STSr
#define WRITE_TX_PMD_LN_MODE_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TX_PMD_LN_MODE_STSr
#define MODIFY_TX_PMD_LN_MODE_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TX_PMD_LN_MODE_STSr
#define READLN_TX_PMD_LN_MODE_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TX_PMD_LN_MODE_STSr
#define WRITELN_TX_PMD_LN_MODE_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TX_PMD_LN_MODE_STSr
#define WRITEALL_TX_PMD_LN_MODE_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TX_PMD_LN_MODE_STSr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_PMD_LN_MODE_STSr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  TX_CLK_N_RST_MISC_CTL
 * BLOCKS:   TX_CKRST_CTRL
 * REGADDR:  0xd1bd
 * DEVAD:    1
 * DESC:     TX_CLOCK_N_RESET_MISC_CONTROL
 * RESETVAL: 0x1 (1)
 * ACCESS:   R/W
 * FIELDS:
 *     TX_PI_LOOP_FILTER_STABLE This register bit is ANDed with pmd_tx_clk_vld before frc/frc_val mux. This register will be controlled by the firmware when TX_PI is enabled.When TX_PI is enabled then this register will be written to 1'b0 while TX_PI is acquiring the lock with the source clock and will be written to 1'b1 by firmwareto indicate that clocks are locked. It indicates to chip level via pmd_tx_clk_vld to reset any datapath FIFOs and come out of reset when TX clock is stable.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_CLK_N_RST_MISC_CTLr (0x0001d1bd | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_CLK_N_RST_MISC_CTLr_SIZE 4

/*
 * This structure should be used to declare and program TX_CLK_N_RST_MISC_CTL.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_CLK_N_RST_MISC_CTLr_s {
	uint32_t v[1];
	uint32_t tx_clk_n_rst_misc_ctl[1];
	uint32_t _tx_clk_n_rst_misc_ctl;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_CLK_N_RST_MISC_CTLr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_CLK_N_RST_MISC_CTLr_CLR(r) (r).tx_clk_n_rst_misc_ctl[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_CLK_N_RST_MISC_CTLr_SET(r,d) (r).tx_clk_n_rst_misc_ctl[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_CLK_N_RST_MISC_CTLr_GET(r) (r).tx_clk_n_rst_misc_ctl[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_CLK_N_RST_MISC_CTLr_TX_PI_LOOP_FILTER_STABLEf_GET(r) (((r).tx_clk_n_rst_misc_ctl[0]) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_CLK_N_RST_MISC_CTLr_TX_PI_LOOP_FILTER_STABLEf_SET(r,f) (r).tx_clk_n_rst_misc_ctl[0]=(((r).tx_clk_n_rst_misc_ctl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access TX_CLK_N_RST_MISC_CTL.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TX_CLK_N_RST_MISC_CTLr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_CLK_N_RST_MISC_CTLr,(_r._tx_clk_n_rst_misc_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TX_CLK_N_RST_MISC_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_CLK_N_RST_MISC_CTLr,(_r._tx_clk_n_rst_misc_ctl)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TX_CLK_N_RST_MISC_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_CLK_N_RST_MISC_CTLr,(_r._tx_clk_n_rst_misc_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TX_CLK_N_RST_MISC_CTLr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_CLK_N_RST_MISC_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_clk_n_rst_misc_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TX_CLK_N_RST_MISC_CTLr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_CLK_N_RST_MISC_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tx_clk_n_rst_misc_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TX_CLK_N_RST_MISC_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_CLK_N_RST_MISC_CTLr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tx_clk_n_rst_misc_ctl))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TX_CLK_N_RST_MISC_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_CLK_N_RST_MISC_CTLr
#define TX_CLK_N_RST_MISC_CTLr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_CLK_N_RST_MISC_CTLr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_CLK_N_RST_MISC_CTLr_t TX_CLK_N_RST_MISC_CTLr_t;
#define TX_CLK_N_RST_MISC_CTLr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_CLK_N_RST_MISC_CTLr_CLR
#define TX_CLK_N_RST_MISC_CTLr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_CLK_N_RST_MISC_CTLr_SET
#define TX_CLK_N_RST_MISC_CTLr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_CLK_N_RST_MISC_CTLr_GET
#define TX_CLK_N_RST_MISC_CTLr_TX_PI_LOOP_FILTER_STABLEf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_CLK_N_RST_MISC_CTLr_TX_PI_LOOP_FILTER_STABLEf_GET
#define TX_CLK_N_RST_MISC_CTLr_TX_PI_LOOP_FILTER_STABLEf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_CLK_N_RST_MISC_CTLr_TX_PI_LOOP_FILTER_STABLEf_SET
#define READ_TX_CLK_N_RST_MISC_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TX_CLK_N_RST_MISC_CTLr
#define WRITE_TX_CLK_N_RST_MISC_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TX_CLK_N_RST_MISC_CTLr
#define MODIFY_TX_CLK_N_RST_MISC_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TX_CLK_N_RST_MISC_CTLr
#define READLN_TX_CLK_N_RST_MISC_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TX_CLK_N_RST_MISC_CTLr
#define WRITELN_TX_CLK_N_RST_MISC_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TX_CLK_N_RST_MISC_CTLr
#define WRITEALL_TX_CLK_N_RST_MISC_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TX_CLK_N_RST_MISC_CTLr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_TX_CLK_N_RST_MISC_CTLr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  RXCOM_OSR_MODE_CTL
 * BLOCKS:   RXCOM_CKRST_CTRL
 * REGADDR:  0xd1c0
 * DEVAD:    1
 * DESC:     RXCOM_OSR_MODE_CONTROL
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RX_OSR_MODE_FRC_VAL NRZ/PAM4 oversample (OS) mode Decoding of this register is as follows. pam4_mode should be 3'd0 or 3'd1 for this NRZ/PAM4 OS modes.OSX1          4'd0     (NRZ mode and PAM4 mode)OSX2          4'd1     (NRZ mode and PAM4 mode)OSX4          4'd2     (NRZ mode only         )OSX2P5      4'd3     (NRZ mode only         )OSX21P25      4'd4     (NRZ mode only         )OSX16P5       4'd8     (NRZ mode only         )OSX20P625     4'd12    (NRZ mode only         )OSX8          4'd5     (NRZ mode only         )OSX16         4'd9     (NRZ mode only         )OSX32         4'd13    (NRZ mode only         )
 *     RX_PAM4_MODE_FRC_VAL PAM4 signalling mode Decoding of this register is as follows. osr_mode should be 4'd0 or 4'd1 for the PAM4 modes below.NRZ OS modes  3'd0PAM4 OS modes 3'd1         (rx_pam4_er_mode reg field when 1'b1 is PAM4 ER mode and 1'b0 is PAM4 NR mode)Reserved      3'd2:3d7Note: This field is PMD uC driven and off limits for users
 *     RX_PAM4_MODE_FRC PAM4 signalling mode force. Setting this bit will allow the register value to be used for pam4 mode.Othersise, the pin input values are used for pam4 mode Note: This field is PMD uC driven and off limits for users
 *     RX_OSR_MODE_FRC  NRZ/PAM4 oversample (OS) mode force. Setting this bit will allow the register value to be used for OS mode.Othersise, the pin input values are used for OS mode
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_OSR_MODE_CTLr (0x0001d1c0 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_OSR_MODE_CTLr_SIZE 4

/*
 * This structure should be used to declare and program RXCOM_OSR_MODE_CTL.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_OSR_MODE_CTLr_s {
	uint32_t v[1];
	uint32_t rxcom_osr_mode_ctl[1];
	uint32_t _rxcom_osr_mode_ctl;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_OSR_MODE_CTLr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_OSR_MODE_CTLr_CLR(r) (r).rxcom_osr_mode_ctl[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_OSR_MODE_CTLr_SET(r,d) (r).rxcom_osr_mode_ctl[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_OSR_MODE_CTLr_GET(r) (r).rxcom_osr_mode_ctl[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_OSR_MODE_CTLr_RX_OSR_MODE_FRCf_GET(r) ((((r).rxcom_osr_mode_ctl[0]) >> 15) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_OSR_MODE_CTLr_RX_OSR_MODE_FRCf_SET(r,f) (r).rxcom_osr_mode_ctl[0]=(((r).rxcom_osr_mode_ctl[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_OSR_MODE_CTLr_RX_PAM4_MODE_FRCf_GET(r) ((((r).rxcom_osr_mode_ctl[0]) >> 14) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_OSR_MODE_CTLr_RX_PAM4_MODE_FRCf_SET(r,f) (r).rxcom_osr_mode_ctl[0]=(((r).rxcom_osr_mode_ctl[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14)) | (1 << (16 + 14))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_OSR_MODE_CTLr_RX_PAM4_MODE_FRC_VALf_GET(r) ((((r).rxcom_osr_mode_ctl[0]) >> 4) & 0x7)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_OSR_MODE_CTLr_RX_PAM4_MODE_FRC_VALf_SET(r,f) (r).rxcom_osr_mode_ctl[0]=(((r).rxcom_osr_mode_ctl[0] & ~((uint32_t)0x7 << 4)) | ((((uint32_t)f) & 0x7) << 4)) | (7 << (16 + 4))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_OSR_MODE_CTLr_RX_OSR_MODE_FRC_VALf_GET(r) (((r).rxcom_osr_mode_ctl[0]) & 0xf)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_OSR_MODE_CTLr_RX_OSR_MODE_FRC_VALf_SET(r,f) (r).rxcom_osr_mode_ctl[0]=(((r).rxcom_osr_mode_ctl[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf)) | (0xf << 16)

/*
 * These macros can be used to access RXCOM_OSR_MODE_CTL.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_RXCOM_OSR_MODE_CTLr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_OSR_MODE_CTLr,(_r._rxcom_osr_mode_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_RXCOM_OSR_MODE_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_OSR_MODE_CTLr,(_r._rxcom_osr_mode_ctl)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_RXCOM_OSR_MODE_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_OSR_MODE_CTLr,(_r._rxcom_osr_mode_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_RXCOM_OSR_MODE_CTLr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_OSR_MODE_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rxcom_osr_mode_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_RXCOM_OSR_MODE_CTLr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_OSR_MODE_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rxcom_osr_mode_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_RXCOM_OSR_MODE_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_OSR_MODE_CTLr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rxcom_osr_mode_ctl))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RXCOM_OSR_MODE_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_OSR_MODE_CTLr
#define RXCOM_OSR_MODE_CTLr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_OSR_MODE_CTLr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_OSR_MODE_CTLr_t RXCOM_OSR_MODE_CTLr_t;
#define RXCOM_OSR_MODE_CTLr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_OSR_MODE_CTLr_CLR
#define RXCOM_OSR_MODE_CTLr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_OSR_MODE_CTLr_SET
#define RXCOM_OSR_MODE_CTLr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_OSR_MODE_CTLr_GET
#define RXCOM_OSR_MODE_CTLr_RX_OSR_MODE_FRCf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_OSR_MODE_CTLr_RX_OSR_MODE_FRCf_GET
#define RXCOM_OSR_MODE_CTLr_RX_OSR_MODE_FRCf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_OSR_MODE_CTLr_RX_OSR_MODE_FRCf_SET
#define RXCOM_OSR_MODE_CTLr_RX_PAM4_MODE_FRCf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_OSR_MODE_CTLr_RX_PAM4_MODE_FRCf_GET
#define RXCOM_OSR_MODE_CTLr_RX_PAM4_MODE_FRCf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_OSR_MODE_CTLr_RX_PAM4_MODE_FRCf_SET
#define RXCOM_OSR_MODE_CTLr_RX_PAM4_MODE_FRC_VALf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_OSR_MODE_CTLr_RX_PAM4_MODE_FRC_VALf_GET
#define RXCOM_OSR_MODE_CTLr_RX_PAM4_MODE_FRC_VALf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_OSR_MODE_CTLr_RX_PAM4_MODE_FRC_VALf_SET
#define RXCOM_OSR_MODE_CTLr_RX_OSR_MODE_FRC_VALf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_OSR_MODE_CTLr_RX_OSR_MODE_FRC_VALf_GET
#define RXCOM_OSR_MODE_CTLr_RX_OSR_MODE_FRC_VALf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_OSR_MODE_CTLr_RX_OSR_MODE_FRC_VALf_SET
#define READ_RXCOM_OSR_MODE_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_RXCOM_OSR_MODE_CTLr
#define WRITE_RXCOM_OSR_MODE_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_RXCOM_OSR_MODE_CTLr
#define MODIFY_RXCOM_OSR_MODE_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_RXCOM_OSR_MODE_CTLr
#define READLN_RXCOM_OSR_MODE_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_RXCOM_OSR_MODE_CTLr
#define WRITELN_RXCOM_OSR_MODE_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_RXCOM_OSR_MODE_CTLr
#define WRITEALL_RXCOM_OSR_MODE_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_RXCOM_OSR_MODE_CTLr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_OSR_MODE_CTLr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  RXCOM_LN_CLK_RST_N_PWRDWN_CTL
 * BLOCKS:   RXCOM_CKRST_CTRL
 * REGADDR:  0xd1c1
 * DEVAD:    1
 * DESC:     RXCOM_LANE_CLK_RESET_N_POWERDOWN_CONTROL
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RX_LN_DP_S_RSTB  Active Low Lane Soft Reset for datapath. If asserted by writing to 1'b0 will reset the datapath for a lane.This soft reset is equivalent to the hard reset input pin pmd_ln_dp_h_rstb_i.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_CLK_RST_N_PWRDWN_CTLr (0x0001d1c1 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_CLK_RST_N_PWRDWN_CTLr_SIZE 4

/*
 * This structure should be used to declare and program RXCOM_LN_CLK_RST_N_PWRDWN_CTL.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_CLK_RST_N_PWRDWN_CTLr_s {
	uint32_t v[1];
	uint32_t rxcom_ln_clk_rst_n_pwrdwn_ctl[1];
	uint32_t _rxcom_ln_clk_rst_n_pwrdwn_ctl;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_CLK_RST_N_PWRDWN_CTLr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_CLK_RST_N_PWRDWN_CTLr_CLR(r) (r).rxcom_ln_clk_rst_n_pwrdwn_ctl[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_CLK_RST_N_PWRDWN_CTLr_SET(r,d) (r).rxcom_ln_clk_rst_n_pwrdwn_ctl[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_CLK_RST_N_PWRDWN_CTLr_GET(r) (r).rxcom_ln_clk_rst_n_pwrdwn_ctl[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_CLK_RST_N_PWRDWN_CTLr_RX_LN_DP_S_RSTBf_GET(r) (((r).rxcom_ln_clk_rst_n_pwrdwn_ctl[0]) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_CLK_RST_N_PWRDWN_CTLr_RX_LN_DP_S_RSTBf_SET(r,f) (r).rxcom_ln_clk_rst_n_pwrdwn_ctl[0]=(((r).rxcom_ln_clk_rst_n_pwrdwn_ctl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access RXCOM_LN_CLK_RST_N_PWRDWN_CTL.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_RXCOM_LN_CLK_RST_N_PWRDWN_CTLr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_CLK_RST_N_PWRDWN_CTLr,(_r._rxcom_ln_clk_rst_n_pwrdwn_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_RXCOM_LN_CLK_RST_N_PWRDWN_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_CLK_RST_N_PWRDWN_CTLr,(_r._rxcom_ln_clk_rst_n_pwrdwn_ctl)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_RXCOM_LN_CLK_RST_N_PWRDWN_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_CLK_RST_N_PWRDWN_CTLr,(_r._rxcom_ln_clk_rst_n_pwrdwn_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_RXCOM_LN_CLK_RST_N_PWRDWN_CTLr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_CLK_RST_N_PWRDWN_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rxcom_ln_clk_rst_n_pwrdwn_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_RXCOM_LN_CLK_RST_N_PWRDWN_CTLr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_CLK_RST_N_PWRDWN_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rxcom_ln_clk_rst_n_pwrdwn_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_RXCOM_LN_CLK_RST_N_PWRDWN_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_CLK_RST_N_PWRDWN_CTLr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rxcom_ln_clk_rst_n_pwrdwn_ctl))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RXCOM_LN_CLK_RST_N_PWRDWN_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_CLK_RST_N_PWRDWN_CTLr
#define RXCOM_LN_CLK_RST_N_PWRDWN_CTLr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_CLK_RST_N_PWRDWN_CTLr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_CLK_RST_N_PWRDWN_CTLr_t RXCOM_LN_CLK_RST_N_PWRDWN_CTLr_t;
#define RXCOM_LN_CLK_RST_N_PWRDWN_CTLr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_CLK_RST_N_PWRDWN_CTLr_CLR
#define RXCOM_LN_CLK_RST_N_PWRDWN_CTLr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_CLK_RST_N_PWRDWN_CTLr_SET
#define RXCOM_LN_CLK_RST_N_PWRDWN_CTLr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_CLK_RST_N_PWRDWN_CTLr_GET
#define RXCOM_LN_CLK_RST_N_PWRDWN_CTLr_RX_LN_DP_S_RSTBf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_CLK_RST_N_PWRDWN_CTLr_RX_LN_DP_S_RSTBf_GET
#define RXCOM_LN_CLK_RST_N_PWRDWN_CTLr_RX_LN_DP_S_RSTBf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_CLK_RST_N_PWRDWN_CTLr_RX_LN_DP_S_RSTBf_SET
#define READ_RXCOM_LN_CLK_RST_N_PWRDWN_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_RXCOM_LN_CLK_RST_N_PWRDWN_CTLr
#define WRITE_RXCOM_LN_CLK_RST_N_PWRDWN_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_RXCOM_LN_CLK_RST_N_PWRDWN_CTLr
#define MODIFY_RXCOM_LN_CLK_RST_N_PWRDWN_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_RXCOM_LN_CLK_RST_N_PWRDWN_CTLr
#define READLN_RXCOM_LN_CLK_RST_N_PWRDWN_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_RXCOM_LN_CLK_RST_N_PWRDWN_CTLr
#define WRITELN_RXCOM_LN_CLK_RST_N_PWRDWN_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_RXCOM_LN_CLK_RST_N_PWRDWN_CTLr
#define WRITEALL_RXCOM_LN_CLK_RST_N_PWRDWN_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_RXCOM_LN_CLK_RST_N_PWRDWN_CTLr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_CLK_RST_N_PWRDWN_CTLr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  RXCOM_LN_RST_N_PWRDN_PIN_KILL_CTL
 * BLOCKS:   RXCOM_CKRST_CTRL
 * REGADDR:  0xd1c3
 * DEVAD:    1
 * DESC:     RXCOM_LANE_RESET_N_PWRDN_PIN_KILL_CONTROL
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     PMD_LN_RX_H_RSTB_PKILL 1'b1 will disable the pmd_ln_h_rstb input pin.
 *     PMD_LN_RX_DP_H_RSTB_PKILL 1'b1 will disable the pmd_ln_dp_h_rstb input pin.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr (0x0001d1c3 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_SIZE 4

/*
 * This structure should be used to declare and program RXCOM_LN_RST_N_PWRDN_PIN_KILL_CTL.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_s {
	uint32_t v[1];
	uint32_t rxcom_ln_rst_n_pwrdn_pin_kill_ctl[1];
	uint32_t _rxcom_ln_rst_n_pwrdn_pin_kill_ctl;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_CLR(r) (r).rxcom_ln_rst_n_pwrdn_pin_kill_ctl[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_SET(r,d) (r).rxcom_ln_rst_n_pwrdn_pin_kill_ctl[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_GET(r) (r).rxcom_ln_rst_n_pwrdn_pin_kill_ctl[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_PMD_LN_RX_DP_H_RSTB_PKILLf_GET(r) ((((r).rxcom_ln_rst_n_pwrdn_pin_kill_ctl[0]) >> 1) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_PMD_LN_RX_DP_H_RSTB_PKILLf_SET(r,f) (r).rxcom_ln_rst_n_pwrdn_pin_kill_ctl[0]=(((r).rxcom_ln_rst_n_pwrdn_pin_kill_ctl[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_PMD_LN_RX_H_RSTB_PKILLf_GET(r) (((r).rxcom_ln_rst_n_pwrdn_pin_kill_ctl[0]) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_PMD_LN_RX_H_RSTB_PKILLf_SET(r,f) (r).rxcom_ln_rst_n_pwrdn_pin_kill_ctl[0]=(((r).rxcom_ln_rst_n_pwrdn_pin_kill_ctl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access RXCOM_LN_RST_N_PWRDN_PIN_KILL_CTL.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_RXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr,(_r._rxcom_ln_rst_n_pwrdn_pin_kill_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_RXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr,(_r._rxcom_ln_rst_n_pwrdn_pin_kill_ctl)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_RXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr,(_r._rxcom_ln_rst_n_pwrdn_pin_kill_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_RXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rxcom_ln_rst_n_pwrdn_pin_kill_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_RXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rxcom_ln_rst_n_pwrdn_pin_kill_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_RXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rxcom_ln_rst_n_pwrdn_pin_kill_ctl))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr
#define RXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_t RXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_t;
#define RXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_CLR
#define RXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_SET
#define RXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_GET
#define RXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_PMD_LN_RX_DP_H_RSTB_PKILLf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_PMD_LN_RX_DP_H_RSTB_PKILLf_GET
#define RXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_PMD_LN_RX_DP_H_RSTB_PKILLf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_PMD_LN_RX_DP_H_RSTB_PKILLf_SET
#define RXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_PMD_LN_RX_H_RSTB_PKILLf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_PMD_LN_RX_H_RSTB_PKILLf_GET
#define RXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_PMD_LN_RX_H_RSTB_PKILLf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_PMD_LN_RX_H_RSTB_PKILLf_SET
#define READ_RXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_RXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr
#define WRITE_RXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_RXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr
#define MODIFY_RXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_RXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr
#define READLN_RXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_RXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr
#define WRITELN_RXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_RXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr
#define WRITEALL_RXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_RXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  RXCOM_UC_ACK_LN_CTL
 * BLOCKS:   RXCOM_CKRST_CTRL
 * REGADDR:  0xd1c5
 * DEVAD:    1
 * DESC:     RXCOM_UC_ACK_LANE_CONTROL
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RX_UC_ACK_LANE_CFG_DONE uC will write this to 1 to indicate it's configuration of the lane is complete. Writing to 1'b1 willshould release internal hold on lane_dp_reset, only if lane_dp_reset_state is 3'b001.
 *     RX_UC_ACK_LANE_DP_RESET uC will write this to 1 to acknowledge a reset event after seeing "lane_dp_reset_coccured".
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_UC_ACK_LN_CTLr (0x0001d1c5 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_UC_ACK_LN_CTLr_SIZE 4

/*
 * This structure should be used to declare and program RXCOM_UC_ACK_LN_CTL.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_UC_ACK_LN_CTLr_s {
	uint32_t v[1];
	uint32_t rxcom_uc_ack_ln_ctl[1];
	uint32_t _rxcom_uc_ack_ln_ctl;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_UC_ACK_LN_CTLr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_UC_ACK_LN_CTLr_CLR(r) (r).rxcom_uc_ack_ln_ctl[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_UC_ACK_LN_CTLr_SET(r,d) (r).rxcom_uc_ack_ln_ctl[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_UC_ACK_LN_CTLr_GET(r) (r).rxcom_uc_ack_ln_ctl[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_UC_ACK_LN_CTLr_RX_UC_ACK_LANE_DP_RESETf_GET(r) ((((r).rxcom_uc_ack_ln_ctl[0]) >> 1) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_UC_ACK_LN_CTLr_RX_UC_ACK_LANE_DP_RESETf_SET(r,f) (r).rxcom_uc_ack_ln_ctl[0]=(((r).rxcom_uc_ack_ln_ctl[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_UC_ACK_LN_CTLr_RX_UC_ACK_LANE_CFG_DONEf_GET(r) (((r).rxcom_uc_ack_ln_ctl[0]) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_UC_ACK_LN_CTLr_RX_UC_ACK_LANE_CFG_DONEf_SET(r,f) (r).rxcom_uc_ack_ln_ctl[0]=(((r).rxcom_uc_ack_ln_ctl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access RXCOM_UC_ACK_LN_CTL.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_RXCOM_UC_ACK_LN_CTLr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_UC_ACK_LN_CTLr,(_r._rxcom_uc_ack_ln_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_RXCOM_UC_ACK_LN_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_UC_ACK_LN_CTLr,(_r._rxcom_uc_ack_ln_ctl)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_RXCOM_UC_ACK_LN_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_UC_ACK_LN_CTLr,(_r._rxcom_uc_ack_ln_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_RXCOM_UC_ACK_LN_CTLr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_UC_ACK_LN_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rxcom_uc_ack_ln_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_RXCOM_UC_ACK_LN_CTLr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_UC_ACK_LN_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rxcom_uc_ack_ln_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_RXCOM_UC_ACK_LN_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_UC_ACK_LN_CTLr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rxcom_uc_ack_ln_ctl))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RXCOM_UC_ACK_LN_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_UC_ACK_LN_CTLr
#define RXCOM_UC_ACK_LN_CTLr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_UC_ACK_LN_CTLr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_UC_ACK_LN_CTLr_t RXCOM_UC_ACK_LN_CTLr_t;
#define RXCOM_UC_ACK_LN_CTLr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_UC_ACK_LN_CTLr_CLR
#define RXCOM_UC_ACK_LN_CTLr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_UC_ACK_LN_CTLr_SET
#define RXCOM_UC_ACK_LN_CTLr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_UC_ACK_LN_CTLr_GET
#define RXCOM_UC_ACK_LN_CTLr_RX_UC_ACK_LANE_DP_RESETf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_UC_ACK_LN_CTLr_RX_UC_ACK_LANE_DP_RESETf_GET
#define RXCOM_UC_ACK_LN_CTLr_RX_UC_ACK_LANE_DP_RESETf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_UC_ACK_LN_CTLr_RX_UC_ACK_LANE_DP_RESETf_SET
#define RXCOM_UC_ACK_LN_CTLr_RX_UC_ACK_LANE_CFG_DONEf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_UC_ACK_LN_CTLr_RX_UC_ACK_LANE_CFG_DONEf_GET
#define RXCOM_UC_ACK_LN_CTLr_RX_UC_ACK_LANE_CFG_DONEf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_UC_ACK_LN_CTLr_RX_UC_ACK_LANE_CFG_DONEf_SET
#define READ_RXCOM_UC_ACK_LN_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_RXCOM_UC_ACK_LN_CTLr
#define WRITE_RXCOM_UC_ACK_LN_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_RXCOM_UC_ACK_LN_CTLr
#define MODIFY_RXCOM_UC_ACK_LN_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_RXCOM_UC_ACK_LN_CTLr
#define READLN_RXCOM_UC_ACK_LN_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_RXCOM_UC_ACK_LN_CTLr
#define WRITELN_RXCOM_UC_ACK_LN_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_RXCOM_UC_ACK_LN_CTLr
#define WRITEALL_RXCOM_UC_ACK_LN_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_RXCOM_UC_ACK_LN_CTLr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_UC_ACK_LN_CTLr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  RXCOM_LN_RST_OCC_CTL
 * BLOCKS:   RXCOM_CKRST_CTRL
 * REGADDR:  0xd1c6
 * DEVAD:    1
 * DESC:     RXCOM_LANE_REG_RESET_OCCURRED_CONTROL
 * RESETVAL: 0x1 (1)
 * ACCESS:   R/W
 * FIELDS:
 *     RX_LANE_REG_RESET_OCCURRED Set to 1'b1 upon lane level register reset and remains so until cleared by register write from uC.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_RST_OCC_CTLr (0x0001d1c6 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_RST_OCC_CTLr_SIZE 4

/*
 * This structure should be used to declare and program RXCOM_LN_RST_OCC_CTL.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_RST_OCC_CTLr_s {
	uint32_t v[1];
	uint32_t rxcom_ln_rst_occ_ctl[1];
	uint32_t _rxcom_ln_rst_occ_ctl;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_RST_OCC_CTLr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_RST_OCC_CTLr_CLR(r) (r).rxcom_ln_rst_occ_ctl[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_RST_OCC_CTLr_SET(r,d) (r).rxcom_ln_rst_occ_ctl[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_RST_OCC_CTLr_GET(r) (r).rxcom_ln_rst_occ_ctl[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_RST_OCC_CTLr_RX_LANE_REG_RESET_OCCURREDf_GET(r) (((r).rxcom_ln_rst_occ_ctl[0]) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_RST_OCC_CTLr_RX_LANE_REG_RESET_OCCURREDf_SET(r,f) (r).rxcom_ln_rst_occ_ctl[0]=(((r).rxcom_ln_rst_occ_ctl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access RXCOM_LN_RST_OCC_CTL.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_RXCOM_LN_RST_OCC_CTLr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_RST_OCC_CTLr,(_r._rxcom_ln_rst_occ_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_RXCOM_LN_RST_OCC_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_RST_OCC_CTLr,(_r._rxcom_ln_rst_occ_ctl)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_RXCOM_LN_RST_OCC_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_RST_OCC_CTLr,(_r._rxcom_ln_rst_occ_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_RXCOM_LN_RST_OCC_CTLr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_RST_OCC_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rxcom_ln_rst_occ_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_RXCOM_LN_RST_OCC_CTLr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_RST_OCC_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rxcom_ln_rst_occ_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_RXCOM_LN_RST_OCC_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_RST_OCC_CTLr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rxcom_ln_rst_occ_ctl))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RXCOM_LN_RST_OCC_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_RST_OCC_CTLr
#define RXCOM_LN_RST_OCC_CTLr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_RST_OCC_CTLr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_RST_OCC_CTLr_t RXCOM_LN_RST_OCC_CTLr_t;
#define RXCOM_LN_RST_OCC_CTLr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_RST_OCC_CTLr_CLR
#define RXCOM_LN_RST_OCC_CTLr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_RST_OCC_CTLr_SET
#define RXCOM_LN_RST_OCC_CTLr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_RST_OCC_CTLr_GET
#define RXCOM_LN_RST_OCC_CTLr_RX_LANE_REG_RESET_OCCURREDf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_RST_OCC_CTLr_RX_LANE_REG_RESET_OCCURREDf_GET
#define RXCOM_LN_RST_OCC_CTLr_RX_LANE_REG_RESET_OCCURREDf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_RST_OCC_CTLr_RX_LANE_REG_RESET_OCCURREDf_SET
#define READ_RXCOM_LN_RST_OCC_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_RXCOM_LN_RST_OCC_CTLr
#define WRITE_RXCOM_LN_RST_OCC_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_RXCOM_LN_RST_OCC_CTLr
#define MODIFY_RXCOM_LN_RST_OCC_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_RXCOM_LN_RST_OCC_CTLr
#define READLN_RXCOM_LN_RST_OCC_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_RXCOM_LN_RST_OCC_CTLr
#define WRITELN_RXCOM_LN_RST_OCC_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_RXCOM_LN_RST_OCC_CTLr
#define WRITEALL_RXCOM_LN_RST_OCC_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_RXCOM_LN_RST_OCC_CTLr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_RST_OCC_CTLr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  RXCOM_LN_DP_RST_ST_STS
 * BLOCKS:   RXCOM_CKRST_CTRL
 * REGADDR:  0xd1c9
 * DEVAD:    1
 * DESC:     RXCOM_LANE_DP_RESET_STATE_STATUS
 * RESETVAL: 0x7 (7)
 * ACCESS:   R/O
 * FIELDS:
 *     RX_LANE_DP_RESET_STATE Bit 2: lane_dp_reset_active   : Set to 1'b1 whenenver lane_dp_reset is currently requested through any register or pin controls.Bit 1: lane_dp_reset_occurred : Set to 1'b1 whenenver lane_dp_reset is currently requested through any register or pin controls and is latched high.Bit 0: lane_dp_reset_held     : Set to 1'b1 whenenver lane_dp_reset is internally held. Cleared to 1'b0, only if lane_dp_reset_state==001 and uc_ack_lane_cfg_done == 1.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_DP_RST_ST_STSr (0x0001d1c9 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_DP_RST_ST_STSr_SIZE 4

/*
 * This structure should be used to declare and program RXCOM_LN_DP_RST_ST_STS.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_DP_RST_ST_STSr_s {
	uint32_t v[1];
	uint32_t rxcom_ln_dp_rst_st_sts[1];
	uint32_t _rxcom_ln_dp_rst_st_sts;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_DP_RST_ST_STSr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_DP_RST_ST_STSr_CLR(r) (r).rxcom_ln_dp_rst_st_sts[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_DP_RST_ST_STSr_SET(r,d) (r).rxcom_ln_dp_rst_st_sts[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_DP_RST_ST_STSr_GET(r) (r).rxcom_ln_dp_rst_st_sts[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_DP_RST_ST_STSr_RX_LANE_DP_RESET_STATEf_GET(r) (((r).rxcom_ln_dp_rst_st_sts[0]) & 0x7)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_DP_RST_ST_STSr_RX_LANE_DP_RESET_STATEf_SET(r,f) (r).rxcom_ln_dp_rst_st_sts[0]=(((r).rxcom_ln_dp_rst_st_sts[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7)) | (0x7 << 16)

/*
 * These macros can be used to access RXCOM_LN_DP_RST_ST_STS.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_RXCOM_LN_DP_RST_ST_STSr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_DP_RST_ST_STSr,(_r._rxcom_ln_dp_rst_st_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_RXCOM_LN_DP_RST_ST_STSr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_DP_RST_ST_STSr,(_r._rxcom_ln_dp_rst_st_sts)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_RXCOM_LN_DP_RST_ST_STSr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_DP_RST_ST_STSr,(_r._rxcom_ln_dp_rst_st_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_RXCOM_LN_DP_RST_ST_STSr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_DP_RST_ST_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rxcom_ln_dp_rst_st_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_RXCOM_LN_DP_RST_ST_STSr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_DP_RST_ST_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rxcom_ln_dp_rst_st_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_RXCOM_LN_DP_RST_ST_STSr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_DP_RST_ST_STSr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rxcom_ln_dp_rst_st_sts))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RXCOM_LN_DP_RST_ST_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_DP_RST_ST_STSr
#define RXCOM_LN_DP_RST_ST_STSr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_DP_RST_ST_STSr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_DP_RST_ST_STSr_t RXCOM_LN_DP_RST_ST_STSr_t;
#define RXCOM_LN_DP_RST_ST_STSr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_DP_RST_ST_STSr_CLR
#define RXCOM_LN_DP_RST_ST_STSr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_DP_RST_ST_STSr_SET
#define RXCOM_LN_DP_RST_ST_STSr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_DP_RST_ST_STSr_GET
#define RXCOM_LN_DP_RST_ST_STSr_RX_LANE_DP_RESET_STATEf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_DP_RST_ST_STSr_RX_LANE_DP_RESET_STATEf_GET
#define RXCOM_LN_DP_RST_ST_STSr_RX_LANE_DP_RESET_STATEf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_DP_RST_ST_STSr_RX_LANE_DP_RESET_STATEf_SET
#define READ_RXCOM_LN_DP_RST_ST_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_RXCOM_LN_DP_RST_ST_STSr
#define WRITE_RXCOM_LN_DP_RST_ST_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_RXCOM_LN_DP_RST_ST_STSr
#define MODIFY_RXCOM_LN_DP_RST_ST_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_RXCOM_LN_DP_RST_ST_STSr
#define READLN_RXCOM_LN_DP_RST_ST_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_RXCOM_LN_DP_RST_ST_STSr
#define WRITELN_RXCOM_LN_DP_RST_ST_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_RXCOM_LN_DP_RST_ST_STSr
#define WRITEALL_RXCOM_LN_DP_RST_ST_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_RXCOM_LN_DP_RST_ST_STSr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_DP_RST_ST_STSr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  RXCOM_MCST_MASK_CTL
 * BLOCKS:   RXCOM_CKRST_CTRL
 * REGADDR:  0xd1ca
 * DEVAD:    1
 * DESC:     RXCOM_MULTICAST_MASK_CONTROL
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RX_MULTICAST_MASK_CONTROL This masks the lane from a broadcast or multicast write operation.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_MCST_MASK_CTLr (0x0001d1ca | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_MCST_MASK_CTLr_SIZE 4

/*
 * This structure should be used to declare and program RXCOM_MCST_MASK_CTL.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_MCST_MASK_CTLr_s {
	uint32_t v[1];
	uint32_t rxcom_mcst_mask_ctl[1];
	uint32_t _rxcom_mcst_mask_ctl;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_MCST_MASK_CTLr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_MCST_MASK_CTLr_CLR(r) (r).rxcom_mcst_mask_ctl[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_MCST_MASK_CTLr_SET(r,d) (r).rxcom_mcst_mask_ctl[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_MCST_MASK_CTLr_GET(r) (r).rxcom_mcst_mask_ctl[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_MCST_MASK_CTLr_RX_MULTICAST_MASK_CONTROLf_GET(r) (((r).rxcom_mcst_mask_ctl[0]) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_MCST_MASK_CTLr_RX_MULTICAST_MASK_CONTROLf_SET(r,f) (r).rxcom_mcst_mask_ctl[0]=(((r).rxcom_mcst_mask_ctl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access RXCOM_MCST_MASK_CTL.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_RXCOM_MCST_MASK_CTLr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_MCST_MASK_CTLr,(_r._rxcom_mcst_mask_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_RXCOM_MCST_MASK_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_MCST_MASK_CTLr,(_r._rxcom_mcst_mask_ctl)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_RXCOM_MCST_MASK_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_MCST_MASK_CTLr,(_r._rxcom_mcst_mask_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_RXCOM_MCST_MASK_CTLr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_MCST_MASK_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rxcom_mcst_mask_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_RXCOM_MCST_MASK_CTLr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_MCST_MASK_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rxcom_mcst_mask_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_RXCOM_MCST_MASK_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_MCST_MASK_CTLr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rxcom_mcst_mask_ctl))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RXCOM_MCST_MASK_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_MCST_MASK_CTLr
#define RXCOM_MCST_MASK_CTLr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_MCST_MASK_CTLr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_MCST_MASK_CTLr_t RXCOM_MCST_MASK_CTLr_t;
#define RXCOM_MCST_MASK_CTLr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_MCST_MASK_CTLr_CLR
#define RXCOM_MCST_MASK_CTLr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_MCST_MASK_CTLr_SET
#define RXCOM_MCST_MASK_CTLr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_MCST_MASK_CTLr_GET
#define RXCOM_MCST_MASK_CTLr_RX_MULTICAST_MASK_CONTROLf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_MCST_MASK_CTLr_RX_MULTICAST_MASK_CONTROLf_GET
#define RXCOM_MCST_MASK_CTLr_RX_MULTICAST_MASK_CONTROLf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_MCST_MASK_CTLr_RX_MULTICAST_MASK_CONTROLf_SET
#define READ_RXCOM_MCST_MASK_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_RXCOM_MCST_MASK_CTLr
#define WRITE_RXCOM_MCST_MASK_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_RXCOM_MCST_MASK_CTLr
#define MODIFY_RXCOM_MCST_MASK_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_RXCOM_MCST_MASK_CTLr
#define READLN_RXCOM_MCST_MASK_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_RXCOM_MCST_MASK_CTLr
#define WRITELN_RXCOM_MCST_MASK_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_RXCOM_MCST_MASK_CTLr
#define WRITEALL_RXCOM_MCST_MASK_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_RXCOM_MCST_MASK_CTLr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_MCST_MASK_CTLr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  RXCOM_OSR_MODE_STS_MC_MASK
 * BLOCKS:   RXCOM_CKRST_CTRL
 * REGADDR:  0xd1cb
 * DEVAD:    1
 * DESC:     RXCOM_OSR_MODE_STATUS_MC_MASK
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     RX_OSR_MODE      OSR Mode status after the osr_mode_frc/frc_val mux.OSX1          4'd0     (NRZ mode and PAM4 mode)OSX2          4'd1     (NRZ mode and PAM4 mode)OSX4          4'd2     (NRZ mode only         )OSX2P5      4'd3     (NRZ mode only         )OSX21P25      4'd4     (NRZ mode only         )OSX16P5       4'd8     (NRZ mode only         )OSX20P625     4'd12    (NRZ mode only         )OSX8          4'd5     (NRZ mode only         )OSX16         4'd9     (NRZ mode only         )OSX32         4'd13    (NRZ mode only         )
 *     RX_PAM4_MODE     PAM4 signalling mode status after the pam4_mode_frc/frc_val mux.NRZ OS modes  3'd0PAM4 OS modes 3'd1         (rx_pam4_er_mode reg field when 1'b1 is PAM4 ER mode and 1'b0 is PAM4 NR mode)Reserved      3'd2:3d7
 *     RX_MULTICAST_MASK_CONTROL_STATUS Status of multicast mask control for masking lane from multicast write operation.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_OSR_MODE_STS_MC_MASKr (0x0001d1cb | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_OSR_MODE_STS_MC_MASKr_SIZE 4

/*
 * This structure should be used to declare and program RXCOM_OSR_MODE_STS_MC_MASK.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_OSR_MODE_STS_MC_MASKr_s {
	uint32_t v[1];
	uint32_t rxcom_osr_mode_sts_mc_mask[1];
	uint32_t _rxcom_osr_mode_sts_mc_mask;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_OSR_MODE_STS_MC_MASKr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_OSR_MODE_STS_MC_MASKr_CLR(r) (r).rxcom_osr_mode_sts_mc_mask[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_OSR_MODE_STS_MC_MASKr_SET(r,d) (r).rxcom_osr_mode_sts_mc_mask[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_OSR_MODE_STS_MC_MASKr_GET(r) (r).rxcom_osr_mode_sts_mc_mask[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_OSR_MODE_STS_MC_MASKr_RX_MULTICAST_MASK_CONTROL_STATUSf_GET(r) ((((r).rxcom_osr_mode_sts_mc_mask[0]) >> 15) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_OSR_MODE_STS_MC_MASKr_RX_MULTICAST_MASK_CONTROL_STATUSf_SET(r,f) (r).rxcom_osr_mode_sts_mc_mask[0]=(((r).rxcom_osr_mode_sts_mc_mask[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_OSR_MODE_STS_MC_MASKr_RX_PAM4_MODEf_GET(r) ((((r).rxcom_osr_mode_sts_mc_mask[0]) >> 4) & 0x7)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_OSR_MODE_STS_MC_MASKr_RX_PAM4_MODEf_SET(r,f) (r).rxcom_osr_mode_sts_mc_mask[0]=(((r).rxcom_osr_mode_sts_mc_mask[0] & ~((uint32_t)0x7 << 4)) | ((((uint32_t)f) & 0x7) << 4)) | (7 << (16 + 4))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_OSR_MODE_STS_MC_MASKr_RX_OSR_MODEf_GET(r) (((r).rxcom_osr_mode_sts_mc_mask[0]) & 0xf)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_OSR_MODE_STS_MC_MASKr_RX_OSR_MODEf_SET(r,f) (r).rxcom_osr_mode_sts_mc_mask[0]=(((r).rxcom_osr_mode_sts_mc_mask[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf)) | (0xf << 16)

/*
 * These macros can be used to access RXCOM_OSR_MODE_STS_MC_MASK.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_RXCOM_OSR_MODE_STS_MC_MASKr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_OSR_MODE_STS_MC_MASKr,(_r._rxcom_osr_mode_sts_mc_mask))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_RXCOM_OSR_MODE_STS_MC_MASKr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_OSR_MODE_STS_MC_MASKr,(_r._rxcom_osr_mode_sts_mc_mask)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_RXCOM_OSR_MODE_STS_MC_MASKr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_OSR_MODE_STS_MC_MASKr,(_r._rxcom_osr_mode_sts_mc_mask))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_RXCOM_OSR_MODE_STS_MC_MASKr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_OSR_MODE_STS_MC_MASKr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rxcom_osr_mode_sts_mc_mask))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_RXCOM_OSR_MODE_STS_MC_MASKr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_OSR_MODE_STS_MC_MASKr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rxcom_osr_mode_sts_mc_mask))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_RXCOM_OSR_MODE_STS_MC_MASKr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_OSR_MODE_STS_MC_MASKr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rxcom_osr_mode_sts_mc_mask))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RXCOM_OSR_MODE_STS_MC_MASKr BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_OSR_MODE_STS_MC_MASKr
#define RXCOM_OSR_MODE_STS_MC_MASKr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_OSR_MODE_STS_MC_MASKr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_OSR_MODE_STS_MC_MASKr_t RXCOM_OSR_MODE_STS_MC_MASKr_t;
#define RXCOM_OSR_MODE_STS_MC_MASKr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_OSR_MODE_STS_MC_MASKr_CLR
#define RXCOM_OSR_MODE_STS_MC_MASKr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_OSR_MODE_STS_MC_MASKr_SET
#define RXCOM_OSR_MODE_STS_MC_MASKr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_OSR_MODE_STS_MC_MASKr_GET
#define RXCOM_OSR_MODE_STS_MC_MASKr_RX_MULTICAST_MASK_CONTROL_STATUSf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_OSR_MODE_STS_MC_MASKr_RX_MULTICAST_MASK_CONTROL_STATUSf_GET
#define RXCOM_OSR_MODE_STS_MC_MASKr_RX_MULTICAST_MASK_CONTROL_STATUSf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_OSR_MODE_STS_MC_MASKr_RX_MULTICAST_MASK_CONTROL_STATUSf_SET
#define RXCOM_OSR_MODE_STS_MC_MASKr_RX_PAM4_MODEf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_OSR_MODE_STS_MC_MASKr_RX_PAM4_MODEf_GET
#define RXCOM_OSR_MODE_STS_MC_MASKr_RX_PAM4_MODEf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_OSR_MODE_STS_MC_MASKr_RX_PAM4_MODEf_SET
#define RXCOM_OSR_MODE_STS_MC_MASKr_RX_OSR_MODEf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_OSR_MODE_STS_MC_MASKr_RX_OSR_MODEf_GET
#define RXCOM_OSR_MODE_STS_MC_MASKr_RX_OSR_MODEf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_OSR_MODE_STS_MC_MASKr_RX_OSR_MODEf_SET
#define READ_RXCOM_OSR_MODE_STS_MC_MASKr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_RXCOM_OSR_MODE_STS_MC_MASKr
#define WRITE_RXCOM_OSR_MODE_STS_MC_MASKr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_RXCOM_OSR_MODE_STS_MC_MASKr
#define MODIFY_RXCOM_OSR_MODE_STS_MC_MASKr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_RXCOM_OSR_MODE_STS_MC_MASKr
#define READLN_RXCOM_OSR_MODE_STS_MC_MASKr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_RXCOM_OSR_MODE_STS_MC_MASKr
#define WRITELN_RXCOM_OSR_MODE_STS_MC_MASKr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_RXCOM_OSR_MODE_STS_MC_MASKr
#define WRITEALL_RXCOM_OSR_MODE_STS_MC_MASKr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_RXCOM_OSR_MODE_STS_MC_MASKr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_OSR_MODE_STS_MC_MASKr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  RXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STS
 * BLOCKS:   RXCOM_CKRST_CTRL
 * REGADDR:  0xd1cc
 * DEVAD:    1
 * DESC:     RXCOM_AFE_RESET_PWRDN_OSR_MODE_PIN_STATUS
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     RX_OSR_MODE_PIN  Indicates the status of the pmd_osr_mode input pin.Decoding of pmd_osr_mode[3:0] pin and osr_mode registers are as follows.OSX1          4'd0     (NRZ mode and PAM4 mode)OSX2          4'd1     (NRZ mode and PAM4 mode)OSX4          4'd2     (NRZ mode only         )OSX2P5      4'd3     (NRZ mode only         )OSX21P25      4'd4     (NRZ mode only         )OSX16P5       4'd8     (NRZ mode only         )OSX20P625     4'd12    (NRZ mode only         )OSX8          4'd5     (NRZ mode only         )OSX16         4'd9     (NRZ mode only         )OSX32         4'd13    (NRZ mode only         )
 *     RX_PAM4_MODE_PIN Indicates the status of the pmd_pam4_mode input pin.Decoding of pmd_pam4_mode[2:0] pin and pam4_mode registers are as follows.NRZ OS modes  3'd0PAM4 OS modes 3'd1         (rx_pam4_er_mode reg field when 1'b1 is PAM4 ER mode and 1'b0 is PAM4 NR mode)Reserved      3'd2:3d7
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr (0x0001d1cc | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_SIZE 4

/*
 * This structure should be used to declare and program RXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STS.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_s {
	uint32_t v[1];
	uint32_t rxcom_afe_rst_pwrdn_osr_mode_pin_sts[1];
	uint32_t _rxcom_afe_rst_pwrdn_osr_mode_pin_sts;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_CLR(r) (r).rxcom_afe_rst_pwrdn_osr_mode_pin_sts[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_SET(r,d) (r).rxcom_afe_rst_pwrdn_osr_mode_pin_sts[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_GET(r) (r).rxcom_afe_rst_pwrdn_osr_mode_pin_sts[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_RX_PAM4_MODE_PINf_GET(r) ((((r).rxcom_afe_rst_pwrdn_osr_mode_pin_sts[0]) >> 4) & 0x7)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_RX_PAM4_MODE_PINf_SET(r,f) (r).rxcom_afe_rst_pwrdn_osr_mode_pin_sts[0]=(((r).rxcom_afe_rst_pwrdn_osr_mode_pin_sts[0] & ~((uint32_t)0x7 << 4)) | ((((uint32_t)f) & 0x7) << 4)) | (7 << (16 + 4))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_RX_OSR_MODE_PINf_GET(r) (((r).rxcom_afe_rst_pwrdn_osr_mode_pin_sts[0]) & 0xf)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_RX_OSR_MODE_PINf_SET(r,f) (r).rxcom_afe_rst_pwrdn_osr_mode_pin_sts[0]=(((r).rxcom_afe_rst_pwrdn_osr_mode_pin_sts[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf)) | (0xf << 16)

/*
 * These macros can be used to access RXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STS.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_RXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr,(_r._rxcom_afe_rst_pwrdn_osr_mode_pin_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_RXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr,(_r._rxcom_afe_rst_pwrdn_osr_mode_pin_sts)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_RXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr,(_r._rxcom_afe_rst_pwrdn_osr_mode_pin_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_RXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rxcom_afe_rst_pwrdn_osr_mode_pin_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_RXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rxcom_afe_rst_pwrdn_osr_mode_pin_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_RXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rxcom_afe_rst_pwrdn_osr_mode_pin_sts))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr
#define RXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_t RXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_t;
#define RXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_CLR
#define RXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_SET
#define RXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_GET
#define RXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_RX_PAM4_MODE_PINf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_RX_PAM4_MODE_PINf_GET
#define RXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_RX_PAM4_MODE_PINf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_RX_PAM4_MODE_PINf_SET
#define RXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_RX_OSR_MODE_PINf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_RX_OSR_MODE_PINf_GET
#define RXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_RX_OSR_MODE_PINf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_RX_OSR_MODE_PINf_SET
#define READ_RXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_RXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr
#define WRITE_RXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_RXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr
#define MODIFY_RXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_RXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr
#define READLN_RXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_RXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr
#define WRITELN_RXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_RXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr
#define WRITEALL_RXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_RXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  RXCOM_LN_S_RSTB_CTL
 * BLOCKS:   RXCOM_CKRST_CTRL
 * REGADDR:  0xd1ce
 * DEVAD:    1
 * DESC:     RXCOM_LN_S_RSTB_CONTROL
 * RESETVAL: 0x1 (1)
 * ACCESS:   R/W
 * FIELDS:
 *     RX_LN_S_RSTB     Active Low Lane Soft Reset. If asserted by writing to 1'b0 will reset the registers and datapath for a lane.This soft reset is equivalent to the hard reset input pin pmd_ln_h_rstb_i.
 *     RX_HW_FW_HANDSHAKE_DISABLE This register bit is unused in RX lane.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_S_RSTB_CTLr (0x0001d1ce | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_S_RSTB_CTLr_SIZE 4

/*
 * This structure should be used to declare and program RXCOM_LN_S_RSTB_CTL.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_S_RSTB_CTLr_s {
	uint32_t v[1];
	uint32_t rxcom_ln_s_rstb_ctl[1];
	uint32_t _rxcom_ln_s_rstb_ctl;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_S_RSTB_CTLr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_S_RSTB_CTLr_CLR(r) (r).rxcom_ln_s_rstb_ctl[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_S_RSTB_CTLr_SET(r,d) (r).rxcom_ln_s_rstb_ctl[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_S_RSTB_CTLr_GET(r) (r).rxcom_ln_s_rstb_ctl[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_S_RSTB_CTLr_RX_HW_FW_HANDSHAKE_DISABLEf_GET(r) ((((r).rxcom_ln_s_rstb_ctl[0]) >> 1) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_S_RSTB_CTLr_RX_HW_FW_HANDSHAKE_DISABLEf_SET(r,f) (r).rxcom_ln_s_rstb_ctl[0]=(((r).rxcom_ln_s_rstb_ctl[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_S_RSTB_CTLr_RX_LN_S_RSTBf_GET(r) (((r).rxcom_ln_s_rstb_ctl[0]) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_S_RSTB_CTLr_RX_LN_S_RSTBf_SET(r,f) (r).rxcom_ln_s_rstb_ctl[0]=(((r).rxcom_ln_s_rstb_ctl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access RXCOM_LN_S_RSTB_CTL.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_RXCOM_LN_S_RSTB_CTLr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_S_RSTB_CTLr,(_r._rxcom_ln_s_rstb_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_RXCOM_LN_S_RSTB_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_S_RSTB_CTLr,(_r._rxcom_ln_s_rstb_ctl)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_RXCOM_LN_S_RSTB_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_S_RSTB_CTLr,(_r._rxcom_ln_s_rstb_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_RXCOM_LN_S_RSTB_CTLr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_S_RSTB_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rxcom_ln_s_rstb_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_RXCOM_LN_S_RSTB_CTLr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_S_RSTB_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._rxcom_ln_s_rstb_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_RXCOM_LN_S_RSTB_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_S_RSTB_CTLr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._rxcom_ln_s_rstb_ctl))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define RXCOM_LN_S_RSTB_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_S_RSTB_CTLr
#define RXCOM_LN_S_RSTB_CTLr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_S_RSTB_CTLr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_S_RSTB_CTLr_t RXCOM_LN_S_RSTB_CTLr_t;
#define RXCOM_LN_S_RSTB_CTLr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_S_RSTB_CTLr_CLR
#define RXCOM_LN_S_RSTB_CTLr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_S_RSTB_CTLr_SET
#define RXCOM_LN_S_RSTB_CTLr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_S_RSTB_CTLr_GET
#define RXCOM_LN_S_RSTB_CTLr_RX_HW_FW_HANDSHAKE_DISABLEf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_S_RSTB_CTLr_RX_HW_FW_HANDSHAKE_DISABLEf_GET
#define RXCOM_LN_S_RSTB_CTLr_RX_HW_FW_HANDSHAKE_DISABLEf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_S_RSTB_CTLr_RX_HW_FW_HANDSHAKE_DISABLEf_SET
#define RXCOM_LN_S_RSTB_CTLr_RX_LN_S_RSTBf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_S_RSTB_CTLr_RX_LN_S_RSTBf_GET
#define RXCOM_LN_S_RSTB_CTLr_RX_LN_S_RSTBf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_S_RSTB_CTLr_RX_LN_S_RSTBf_SET
#define READ_RXCOM_LN_S_RSTB_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_RXCOM_LN_S_RSTB_CTLr
#define WRITE_RXCOM_LN_S_RSTB_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_RXCOM_LN_S_RSTB_CTLr
#define MODIFY_RXCOM_LN_S_RSTB_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_RXCOM_LN_S_RSTB_CTLr
#define READLN_RXCOM_LN_S_RSTB_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_RXCOM_LN_S_RSTB_CTLr
#define WRITELN_RXCOM_LN_S_RSTB_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_RXCOM_LN_S_RSTB_CTLr
#define WRITEALL_RXCOM_LN_S_RSTB_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_RXCOM_LN_S_RSTB_CTLr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_RXCOM_LN_S_RSTB_CTLr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  TXCOM_OSR_MODE_CTL
 * BLOCKS:   TXCOM_CKRST_CTRL
 * REGADDR:  0xd1d0
 * DEVAD:    1
 * DESC:     TXCOM_OSR_MODE_CONTROL
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     TX_OSR_MODE_FRC_VAL NRZ/PAM4 oversample (OS) mode Decoding of this register is as follows. pam4_mode should be 3'd0 or 3'd1 for this NRZ/PAM4 OS modes.OSX1          4'd0     (NRZ mode and PAM4 mode)OSX2          4'd1     (NRZ mode and PAM4 mode)OSX4          4'd2     (NRZ mode only         )OSX2P5      4'd3     (NRZ mode only         )OSX21P25      4'd4     (NRZ mode only         )OSX16P5       4'd8     (NRZ mode only         )OSX20P625     4'd12    (NRZ mode only         )OSX8          4'd5     (NRZ mode only         )OSX16         4'd9     (NRZ mode only         )OSX32         4'd13    (NRZ mode only         )
 *     TX_PAM4_MODE_FRC_VAL PAM4 signalling mode Decoding of this register is as follows. osr_mode should be 4'd0 or 4'd1 for the PAM4 modes below.NRZ OS modes  3'd0PAM4 OS modes 3'd1         (rx_pam4_er_mode reg field when 1'b1 is PAM4 ER mode and 1'b0 is PAM4 NR mode)Reserved      3'd2:3d7Note: This field is PMD uC driven and off limits for users
 *     TX_PAM4_MODE_FRC PAM4 signalling mode force. Setting this bit will allow the register value to be used for pam4 mode.Othersise, the pin input values are used for pam4 mode Note: This field is PMD uC driven and off limits for users
 *     TX_OSR_MODE_FRC  NRZ/PAM4 oversample (OS) mode force. Setting this bit will allow the register value to be used for OS mode.Othersise, the pin input values are used for OS mode
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_OSR_MODE_CTLr (0x0001d1d0 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_OSR_MODE_CTLr_SIZE 4

/*
 * This structure should be used to declare and program TXCOM_OSR_MODE_CTL.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_OSR_MODE_CTLr_s {
	uint32_t v[1];
	uint32_t txcom_osr_mode_ctl[1];
	uint32_t _txcom_osr_mode_ctl;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_OSR_MODE_CTLr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_OSR_MODE_CTLr_CLR(r) (r).txcom_osr_mode_ctl[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_OSR_MODE_CTLr_SET(r,d) (r).txcom_osr_mode_ctl[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_OSR_MODE_CTLr_GET(r) (r).txcom_osr_mode_ctl[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_OSR_MODE_CTLr_TX_OSR_MODE_FRCf_GET(r) ((((r).txcom_osr_mode_ctl[0]) >> 15) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_OSR_MODE_CTLr_TX_OSR_MODE_FRCf_SET(r,f) (r).txcom_osr_mode_ctl[0]=(((r).txcom_osr_mode_ctl[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_OSR_MODE_CTLr_TX_PAM4_MODE_FRCf_GET(r) ((((r).txcom_osr_mode_ctl[0]) >> 14) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_OSR_MODE_CTLr_TX_PAM4_MODE_FRCf_SET(r,f) (r).txcom_osr_mode_ctl[0]=(((r).txcom_osr_mode_ctl[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14)) | (1 << (16 + 14))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_OSR_MODE_CTLr_TX_PAM4_MODE_FRC_VALf_GET(r) ((((r).txcom_osr_mode_ctl[0]) >> 4) & 0x7)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_OSR_MODE_CTLr_TX_PAM4_MODE_FRC_VALf_SET(r,f) (r).txcom_osr_mode_ctl[0]=(((r).txcom_osr_mode_ctl[0] & ~((uint32_t)0x7 << 4)) | ((((uint32_t)f) & 0x7) << 4)) | (7 << (16 + 4))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_OSR_MODE_CTLr_TX_OSR_MODE_FRC_VALf_GET(r) (((r).txcom_osr_mode_ctl[0]) & 0xf)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_OSR_MODE_CTLr_TX_OSR_MODE_FRC_VALf_SET(r,f) (r).txcom_osr_mode_ctl[0]=(((r).txcom_osr_mode_ctl[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf)) | (0xf << 16)

/*
 * These macros can be used to access TXCOM_OSR_MODE_CTL.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TXCOM_OSR_MODE_CTLr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_OSR_MODE_CTLr,(_r._txcom_osr_mode_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TXCOM_OSR_MODE_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_OSR_MODE_CTLr,(_r._txcom_osr_mode_ctl)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TXCOM_OSR_MODE_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_OSR_MODE_CTLr,(_r._txcom_osr_mode_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TXCOM_OSR_MODE_CTLr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_OSR_MODE_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._txcom_osr_mode_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TXCOM_OSR_MODE_CTLr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_OSR_MODE_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._txcom_osr_mode_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TXCOM_OSR_MODE_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_OSR_MODE_CTLr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._txcom_osr_mode_ctl))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TXCOM_OSR_MODE_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_OSR_MODE_CTLr
#define TXCOM_OSR_MODE_CTLr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_OSR_MODE_CTLr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_OSR_MODE_CTLr_t TXCOM_OSR_MODE_CTLr_t;
#define TXCOM_OSR_MODE_CTLr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_OSR_MODE_CTLr_CLR
#define TXCOM_OSR_MODE_CTLr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_OSR_MODE_CTLr_SET
#define TXCOM_OSR_MODE_CTLr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_OSR_MODE_CTLr_GET
#define TXCOM_OSR_MODE_CTLr_TX_OSR_MODE_FRCf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_OSR_MODE_CTLr_TX_OSR_MODE_FRCf_GET
#define TXCOM_OSR_MODE_CTLr_TX_OSR_MODE_FRCf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_OSR_MODE_CTLr_TX_OSR_MODE_FRCf_SET
#define TXCOM_OSR_MODE_CTLr_TX_PAM4_MODE_FRCf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_OSR_MODE_CTLr_TX_PAM4_MODE_FRCf_GET
#define TXCOM_OSR_MODE_CTLr_TX_PAM4_MODE_FRCf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_OSR_MODE_CTLr_TX_PAM4_MODE_FRCf_SET
#define TXCOM_OSR_MODE_CTLr_TX_PAM4_MODE_FRC_VALf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_OSR_MODE_CTLr_TX_PAM4_MODE_FRC_VALf_GET
#define TXCOM_OSR_MODE_CTLr_TX_PAM4_MODE_FRC_VALf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_OSR_MODE_CTLr_TX_PAM4_MODE_FRC_VALf_SET
#define TXCOM_OSR_MODE_CTLr_TX_OSR_MODE_FRC_VALf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_OSR_MODE_CTLr_TX_OSR_MODE_FRC_VALf_GET
#define TXCOM_OSR_MODE_CTLr_TX_OSR_MODE_FRC_VALf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_OSR_MODE_CTLr_TX_OSR_MODE_FRC_VALf_SET
#define READ_TXCOM_OSR_MODE_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TXCOM_OSR_MODE_CTLr
#define WRITE_TXCOM_OSR_MODE_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TXCOM_OSR_MODE_CTLr
#define MODIFY_TXCOM_OSR_MODE_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TXCOM_OSR_MODE_CTLr
#define READLN_TXCOM_OSR_MODE_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TXCOM_OSR_MODE_CTLr
#define WRITELN_TXCOM_OSR_MODE_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TXCOM_OSR_MODE_CTLr
#define WRITEALL_TXCOM_OSR_MODE_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TXCOM_OSR_MODE_CTLr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_OSR_MODE_CTLr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  TXCOM_LN_CLK_RST_N_PWRDWN_CTL
 * BLOCKS:   TXCOM_CKRST_CTRL
 * REGADDR:  0xd1d1
 * DEVAD:    1
 * DESC:     TXCOM_LANE_CLK_RESET_N_POWERDOWN_CONTROL
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     TX_LN_DP_S_RSTB  Active Low Lane Soft Reset for datapath. If asserted by writing to 1'b0 will reset the datapath for a lane.This soft reset is equivalent to the hard reset input pin pmd_ln_dp_h_rstb_i.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_CLK_RST_N_PWRDWN_CTLr (0x0001d1d1 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_CLK_RST_N_PWRDWN_CTLr_SIZE 4

/*
 * This structure should be used to declare and program TXCOM_LN_CLK_RST_N_PWRDWN_CTL.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_CLK_RST_N_PWRDWN_CTLr_s {
	uint32_t v[1];
	uint32_t txcom_ln_clk_rst_n_pwrdwn_ctl[1];
	uint32_t _txcom_ln_clk_rst_n_pwrdwn_ctl;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_CLK_RST_N_PWRDWN_CTLr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_CLK_RST_N_PWRDWN_CTLr_CLR(r) (r).txcom_ln_clk_rst_n_pwrdwn_ctl[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_CLK_RST_N_PWRDWN_CTLr_SET(r,d) (r).txcom_ln_clk_rst_n_pwrdwn_ctl[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_CLK_RST_N_PWRDWN_CTLr_GET(r) (r).txcom_ln_clk_rst_n_pwrdwn_ctl[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_CLK_RST_N_PWRDWN_CTLr_TX_LN_DP_S_RSTBf_GET(r) (((r).txcom_ln_clk_rst_n_pwrdwn_ctl[0]) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_CLK_RST_N_PWRDWN_CTLr_TX_LN_DP_S_RSTBf_SET(r,f) (r).txcom_ln_clk_rst_n_pwrdwn_ctl[0]=(((r).txcom_ln_clk_rst_n_pwrdwn_ctl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access TXCOM_LN_CLK_RST_N_PWRDWN_CTL.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TXCOM_LN_CLK_RST_N_PWRDWN_CTLr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_CLK_RST_N_PWRDWN_CTLr,(_r._txcom_ln_clk_rst_n_pwrdwn_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TXCOM_LN_CLK_RST_N_PWRDWN_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_CLK_RST_N_PWRDWN_CTLr,(_r._txcom_ln_clk_rst_n_pwrdwn_ctl)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TXCOM_LN_CLK_RST_N_PWRDWN_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_CLK_RST_N_PWRDWN_CTLr,(_r._txcom_ln_clk_rst_n_pwrdwn_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TXCOM_LN_CLK_RST_N_PWRDWN_CTLr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_CLK_RST_N_PWRDWN_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._txcom_ln_clk_rst_n_pwrdwn_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TXCOM_LN_CLK_RST_N_PWRDWN_CTLr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_CLK_RST_N_PWRDWN_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._txcom_ln_clk_rst_n_pwrdwn_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TXCOM_LN_CLK_RST_N_PWRDWN_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_CLK_RST_N_PWRDWN_CTLr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._txcom_ln_clk_rst_n_pwrdwn_ctl))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TXCOM_LN_CLK_RST_N_PWRDWN_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_CLK_RST_N_PWRDWN_CTLr
#define TXCOM_LN_CLK_RST_N_PWRDWN_CTLr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_CLK_RST_N_PWRDWN_CTLr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_CLK_RST_N_PWRDWN_CTLr_t TXCOM_LN_CLK_RST_N_PWRDWN_CTLr_t;
#define TXCOM_LN_CLK_RST_N_PWRDWN_CTLr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_CLK_RST_N_PWRDWN_CTLr_CLR
#define TXCOM_LN_CLK_RST_N_PWRDWN_CTLr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_CLK_RST_N_PWRDWN_CTLr_SET
#define TXCOM_LN_CLK_RST_N_PWRDWN_CTLr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_CLK_RST_N_PWRDWN_CTLr_GET
#define TXCOM_LN_CLK_RST_N_PWRDWN_CTLr_TX_LN_DP_S_RSTBf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_CLK_RST_N_PWRDWN_CTLr_TX_LN_DP_S_RSTBf_GET
#define TXCOM_LN_CLK_RST_N_PWRDWN_CTLr_TX_LN_DP_S_RSTBf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_CLK_RST_N_PWRDWN_CTLr_TX_LN_DP_S_RSTBf_SET
#define READ_TXCOM_LN_CLK_RST_N_PWRDWN_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TXCOM_LN_CLK_RST_N_PWRDWN_CTLr
#define WRITE_TXCOM_LN_CLK_RST_N_PWRDWN_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TXCOM_LN_CLK_RST_N_PWRDWN_CTLr
#define MODIFY_TXCOM_LN_CLK_RST_N_PWRDWN_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TXCOM_LN_CLK_RST_N_PWRDWN_CTLr
#define READLN_TXCOM_LN_CLK_RST_N_PWRDWN_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TXCOM_LN_CLK_RST_N_PWRDWN_CTLr
#define WRITELN_TXCOM_LN_CLK_RST_N_PWRDWN_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TXCOM_LN_CLK_RST_N_PWRDWN_CTLr
#define WRITEALL_TXCOM_LN_CLK_RST_N_PWRDWN_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TXCOM_LN_CLK_RST_N_PWRDWN_CTLr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_CLK_RST_N_PWRDWN_CTLr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  TXCOM_LN_RST_N_PWRDN_PIN_KILL_CTL
 * BLOCKS:   TXCOM_CKRST_CTRL
 * REGADDR:  0xd1d3
 * DEVAD:    1
 * DESC:     TXCOM_LANE_RESET_N_PWRDN_PIN_KILL_CONTROL
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     PMD_LN_TX_H_RSTB_PKILL 1'b1 will disable the pmd_ln_h_rstb input pin.
 *     PMD_LN_TX_DP_H_RSTB_PKILL 1'b1 will disable the pmd_ln_dp_h_rstb input pin.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr (0x0001d1d3 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_SIZE 4

/*
 * This structure should be used to declare and program TXCOM_LN_RST_N_PWRDN_PIN_KILL_CTL.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_s {
	uint32_t v[1];
	uint32_t txcom_ln_rst_n_pwrdn_pin_kill_ctl[1];
	uint32_t _txcom_ln_rst_n_pwrdn_pin_kill_ctl;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_CLR(r) (r).txcom_ln_rst_n_pwrdn_pin_kill_ctl[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_SET(r,d) (r).txcom_ln_rst_n_pwrdn_pin_kill_ctl[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_GET(r) (r).txcom_ln_rst_n_pwrdn_pin_kill_ctl[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_PMD_LN_TX_DP_H_RSTB_PKILLf_GET(r) ((((r).txcom_ln_rst_n_pwrdn_pin_kill_ctl[0]) >> 1) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_PMD_LN_TX_DP_H_RSTB_PKILLf_SET(r,f) (r).txcom_ln_rst_n_pwrdn_pin_kill_ctl[0]=(((r).txcom_ln_rst_n_pwrdn_pin_kill_ctl[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_PMD_LN_TX_H_RSTB_PKILLf_GET(r) (((r).txcom_ln_rst_n_pwrdn_pin_kill_ctl[0]) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_PMD_LN_TX_H_RSTB_PKILLf_SET(r,f) (r).txcom_ln_rst_n_pwrdn_pin_kill_ctl[0]=(((r).txcom_ln_rst_n_pwrdn_pin_kill_ctl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access TXCOM_LN_RST_N_PWRDN_PIN_KILL_CTL.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr,(_r._txcom_ln_rst_n_pwrdn_pin_kill_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr,(_r._txcom_ln_rst_n_pwrdn_pin_kill_ctl)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr,(_r._txcom_ln_rst_n_pwrdn_pin_kill_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._txcom_ln_rst_n_pwrdn_pin_kill_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._txcom_ln_rst_n_pwrdn_pin_kill_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._txcom_ln_rst_n_pwrdn_pin_kill_ctl))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr
#define TXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_t TXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_t;
#define TXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_CLR
#define TXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_SET
#define TXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_GET
#define TXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_PMD_LN_TX_DP_H_RSTB_PKILLf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_PMD_LN_TX_DP_H_RSTB_PKILLf_GET
#define TXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_PMD_LN_TX_DP_H_RSTB_PKILLf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_PMD_LN_TX_DP_H_RSTB_PKILLf_SET
#define TXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_PMD_LN_TX_H_RSTB_PKILLf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_PMD_LN_TX_H_RSTB_PKILLf_GET
#define TXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_PMD_LN_TX_H_RSTB_PKILLf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr_PMD_LN_TX_H_RSTB_PKILLf_SET
#define READ_TXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr
#define WRITE_TXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr
#define MODIFY_TXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr
#define READLN_TXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr
#define WRITELN_TXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr
#define WRITEALL_TXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_RST_N_PWRDN_PIN_KILL_CTLr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  TXCOM_UC_ACK_LN_CTL
 * BLOCKS:   TXCOM_CKRST_CTRL
 * REGADDR:  0xd1d5
 * DEVAD:    1
 * DESC:     TXCOM_UC_ACK_LANE_CONTROL
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     TX_UC_ACK_LANE_CFG_DONE uC will write this to 1 to indicate it's configuration of the lane is complete. Writing to 1'b1 willshould release internal hold on lane_dp_reset, only if lane_dp_reset_state is 3'b001.
 *     TX_UC_ACK_LANE_DP_RESET uC will write this to 1 to acknowledge a reset event after seeing "lane_dp_reset_coccured".
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_UC_ACK_LN_CTLr (0x0001d1d5 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_UC_ACK_LN_CTLr_SIZE 4

/*
 * This structure should be used to declare and program TXCOM_UC_ACK_LN_CTL.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_UC_ACK_LN_CTLr_s {
	uint32_t v[1];
	uint32_t txcom_uc_ack_ln_ctl[1];
	uint32_t _txcom_uc_ack_ln_ctl;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_UC_ACK_LN_CTLr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_UC_ACK_LN_CTLr_CLR(r) (r).txcom_uc_ack_ln_ctl[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_UC_ACK_LN_CTLr_SET(r,d) (r).txcom_uc_ack_ln_ctl[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_UC_ACK_LN_CTLr_GET(r) (r).txcom_uc_ack_ln_ctl[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_UC_ACK_LN_CTLr_TX_UC_ACK_LANE_DP_RESETf_GET(r) ((((r).txcom_uc_ack_ln_ctl[0]) >> 1) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_UC_ACK_LN_CTLr_TX_UC_ACK_LANE_DP_RESETf_SET(r,f) (r).txcom_uc_ack_ln_ctl[0]=(((r).txcom_uc_ack_ln_ctl[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_UC_ACK_LN_CTLr_TX_UC_ACK_LANE_CFG_DONEf_GET(r) (((r).txcom_uc_ack_ln_ctl[0]) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_UC_ACK_LN_CTLr_TX_UC_ACK_LANE_CFG_DONEf_SET(r,f) (r).txcom_uc_ack_ln_ctl[0]=(((r).txcom_uc_ack_ln_ctl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access TXCOM_UC_ACK_LN_CTL.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TXCOM_UC_ACK_LN_CTLr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_UC_ACK_LN_CTLr,(_r._txcom_uc_ack_ln_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TXCOM_UC_ACK_LN_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_UC_ACK_LN_CTLr,(_r._txcom_uc_ack_ln_ctl)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TXCOM_UC_ACK_LN_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_UC_ACK_LN_CTLr,(_r._txcom_uc_ack_ln_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TXCOM_UC_ACK_LN_CTLr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_UC_ACK_LN_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._txcom_uc_ack_ln_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TXCOM_UC_ACK_LN_CTLr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_UC_ACK_LN_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._txcom_uc_ack_ln_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TXCOM_UC_ACK_LN_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_UC_ACK_LN_CTLr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._txcom_uc_ack_ln_ctl))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TXCOM_UC_ACK_LN_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_UC_ACK_LN_CTLr
#define TXCOM_UC_ACK_LN_CTLr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_UC_ACK_LN_CTLr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_UC_ACK_LN_CTLr_t TXCOM_UC_ACK_LN_CTLr_t;
#define TXCOM_UC_ACK_LN_CTLr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_UC_ACK_LN_CTLr_CLR
#define TXCOM_UC_ACK_LN_CTLr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_UC_ACK_LN_CTLr_SET
#define TXCOM_UC_ACK_LN_CTLr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_UC_ACK_LN_CTLr_GET
#define TXCOM_UC_ACK_LN_CTLr_TX_UC_ACK_LANE_DP_RESETf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_UC_ACK_LN_CTLr_TX_UC_ACK_LANE_DP_RESETf_GET
#define TXCOM_UC_ACK_LN_CTLr_TX_UC_ACK_LANE_DP_RESETf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_UC_ACK_LN_CTLr_TX_UC_ACK_LANE_DP_RESETf_SET
#define TXCOM_UC_ACK_LN_CTLr_TX_UC_ACK_LANE_CFG_DONEf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_UC_ACK_LN_CTLr_TX_UC_ACK_LANE_CFG_DONEf_GET
#define TXCOM_UC_ACK_LN_CTLr_TX_UC_ACK_LANE_CFG_DONEf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_UC_ACK_LN_CTLr_TX_UC_ACK_LANE_CFG_DONEf_SET
#define READ_TXCOM_UC_ACK_LN_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TXCOM_UC_ACK_LN_CTLr
#define WRITE_TXCOM_UC_ACK_LN_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TXCOM_UC_ACK_LN_CTLr
#define MODIFY_TXCOM_UC_ACK_LN_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TXCOM_UC_ACK_LN_CTLr
#define READLN_TXCOM_UC_ACK_LN_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TXCOM_UC_ACK_LN_CTLr
#define WRITELN_TXCOM_UC_ACK_LN_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TXCOM_UC_ACK_LN_CTLr
#define WRITEALL_TXCOM_UC_ACK_LN_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TXCOM_UC_ACK_LN_CTLr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_UC_ACK_LN_CTLr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  TXCOM_LN_RST_OCC_CTL
 * BLOCKS:   TXCOM_CKRST_CTRL
 * REGADDR:  0xd1d6
 * DEVAD:    1
 * DESC:     TXCOM_LANE_REG_RESET_OCCURRED_CONTROL
 * RESETVAL: 0x1 (1)
 * ACCESS:   R/W
 * FIELDS:
 *     TX_LANE_REG_RESET_OCCURRED Set to 1'b1 upon lane level register reset and remains so until cleared by register write from uC.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_RST_OCC_CTLr (0x0001d1d6 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_RST_OCC_CTLr_SIZE 4

/*
 * This structure should be used to declare and program TXCOM_LN_RST_OCC_CTL.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_RST_OCC_CTLr_s {
	uint32_t v[1];
	uint32_t txcom_ln_rst_occ_ctl[1];
	uint32_t _txcom_ln_rst_occ_ctl;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_RST_OCC_CTLr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_RST_OCC_CTLr_CLR(r) (r).txcom_ln_rst_occ_ctl[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_RST_OCC_CTLr_SET(r,d) (r).txcom_ln_rst_occ_ctl[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_RST_OCC_CTLr_GET(r) (r).txcom_ln_rst_occ_ctl[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_RST_OCC_CTLr_TX_LANE_REG_RESET_OCCURREDf_GET(r) (((r).txcom_ln_rst_occ_ctl[0]) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_RST_OCC_CTLr_TX_LANE_REG_RESET_OCCURREDf_SET(r,f) (r).txcom_ln_rst_occ_ctl[0]=(((r).txcom_ln_rst_occ_ctl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access TXCOM_LN_RST_OCC_CTL.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TXCOM_LN_RST_OCC_CTLr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_RST_OCC_CTLr,(_r._txcom_ln_rst_occ_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TXCOM_LN_RST_OCC_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_RST_OCC_CTLr,(_r._txcom_ln_rst_occ_ctl)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TXCOM_LN_RST_OCC_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_RST_OCC_CTLr,(_r._txcom_ln_rst_occ_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TXCOM_LN_RST_OCC_CTLr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_RST_OCC_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._txcom_ln_rst_occ_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TXCOM_LN_RST_OCC_CTLr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_RST_OCC_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._txcom_ln_rst_occ_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TXCOM_LN_RST_OCC_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_RST_OCC_CTLr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._txcom_ln_rst_occ_ctl))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TXCOM_LN_RST_OCC_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_RST_OCC_CTLr
#define TXCOM_LN_RST_OCC_CTLr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_RST_OCC_CTLr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_RST_OCC_CTLr_t TXCOM_LN_RST_OCC_CTLr_t;
#define TXCOM_LN_RST_OCC_CTLr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_RST_OCC_CTLr_CLR
#define TXCOM_LN_RST_OCC_CTLr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_RST_OCC_CTLr_SET
#define TXCOM_LN_RST_OCC_CTLr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_RST_OCC_CTLr_GET
#define TXCOM_LN_RST_OCC_CTLr_TX_LANE_REG_RESET_OCCURREDf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_RST_OCC_CTLr_TX_LANE_REG_RESET_OCCURREDf_GET
#define TXCOM_LN_RST_OCC_CTLr_TX_LANE_REG_RESET_OCCURREDf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_RST_OCC_CTLr_TX_LANE_REG_RESET_OCCURREDf_SET
#define READ_TXCOM_LN_RST_OCC_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TXCOM_LN_RST_OCC_CTLr
#define WRITE_TXCOM_LN_RST_OCC_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TXCOM_LN_RST_OCC_CTLr
#define MODIFY_TXCOM_LN_RST_OCC_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TXCOM_LN_RST_OCC_CTLr
#define READLN_TXCOM_LN_RST_OCC_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TXCOM_LN_RST_OCC_CTLr
#define WRITELN_TXCOM_LN_RST_OCC_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TXCOM_LN_RST_OCC_CTLr
#define WRITEALL_TXCOM_LN_RST_OCC_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TXCOM_LN_RST_OCC_CTLr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_RST_OCC_CTLr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  TXCOM_LN_DP_RST_ST_STS
 * BLOCKS:   TXCOM_CKRST_CTRL
 * REGADDR:  0xd1d9
 * DEVAD:    1
 * DESC:     TXCOM_LANE_DP_RESET_STATE_STATUS
 * RESETVAL: 0x7 (7)
 * ACCESS:   R/O
 * FIELDS:
 *     TX_LANE_DP_RESET_STATE Bit 2: lane_dp_reset_active   : Set to 1'b1 whenenver lane_dp_reset is currently requested through any register or pin controls.Bit 1: lane_dp_reset_occurred : Set to 1'b1 whenenver lane_dp_reset is currently requested through any register or pin controls and is latched high.Bit 0: lane_dp_reset_held     : Set to 1'b1 whenenver lane_dp_reset is internally held. Cleared to 1'b0, only if lane_dp_reset_state==001 and uc_ack_lane_cfg_done == 1.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_DP_RST_ST_STSr (0x0001d1d9 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_DP_RST_ST_STSr_SIZE 4

/*
 * This structure should be used to declare and program TXCOM_LN_DP_RST_ST_STS.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_DP_RST_ST_STSr_s {
	uint32_t v[1];
	uint32_t txcom_ln_dp_rst_st_sts[1];
	uint32_t _txcom_ln_dp_rst_st_sts;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_DP_RST_ST_STSr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_DP_RST_ST_STSr_CLR(r) (r).txcom_ln_dp_rst_st_sts[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_DP_RST_ST_STSr_SET(r,d) (r).txcom_ln_dp_rst_st_sts[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_DP_RST_ST_STSr_GET(r) (r).txcom_ln_dp_rst_st_sts[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_DP_RST_ST_STSr_TX_LANE_DP_RESET_STATEf_GET(r) (((r).txcom_ln_dp_rst_st_sts[0]) & 0x7)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_DP_RST_ST_STSr_TX_LANE_DP_RESET_STATEf_SET(r,f) (r).txcom_ln_dp_rst_st_sts[0]=(((r).txcom_ln_dp_rst_st_sts[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7)) | (0x7 << 16)

/*
 * These macros can be used to access TXCOM_LN_DP_RST_ST_STS.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TXCOM_LN_DP_RST_ST_STSr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_DP_RST_ST_STSr,(_r._txcom_ln_dp_rst_st_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TXCOM_LN_DP_RST_ST_STSr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_DP_RST_ST_STSr,(_r._txcom_ln_dp_rst_st_sts)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TXCOM_LN_DP_RST_ST_STSr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_DP_RST_ST_STSr,(_r._txcom_ln_dp_rst_st_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TXCOM_LN_DP_RST_ST_STSr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_DP_RST_ST_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._txcom_ln_dp_rst_st_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TXCOM_LN_DP_RST_ST_STSr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_DP_RST_ST_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._txcom_ln_dp_rst_st_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TXCOM_LN_DP_RST_ST_STSr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_DP_RST_ST_STSr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._txcom_ln_dp_rst_st_sts))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TXCOM_LN_DP_RST_ST_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_DP_RST_ST_STSr
#define TXCOM_LN_DP_RST_ST_STSr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_DP_RST_ST_STSr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_DP_RST_ST_STSr_t TXCOM_LN_DP_RST_ST_STSr_t;
#define TXCOM_LN_DP_RST_ST_STSr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_DP_RST_ST_STSr_CLR
#define TXCOM_LN_DP_RST_ST_STSr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_DP_RST_ST_STSr_SET
#define TXCOM_LN_DP_RST_ST_STSr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_DP_RST_ST_STSr_GET
#define TXCOM_LN_DP_RST_ST_STSr_TX_LANE_DP_RESET_STATEf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_DP_RST_ST_STSr_TX_LANE_DP_RESET_STATEf_GET
#define TXCOM_LN_DP_RST_ST_STSr_TX_LANE_DP_RESET_STATEf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_DP_RST_ST_STSr_TX_LANE_DP_RESET_STATEf_SET
#define READ_TXCOM_LN_DP_RST_ST_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TXCOM_LN_DP_RST_ST_STSr
#define WRITE_TXCOM_LN_DP_RST_ST_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TXCOM_LN_DP_RST_ST_STSr
#define MODIFY_TXCOM_LN_DP_RST_ST_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TXCOM_LN_DP_RST_ST_STSr
#define READLN_TXCOM_LN_DP_RST_ST_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TXCOM_LN_DP_RST_ST_STSr
#define WRITELN_TXCOM_LN_DP_RST_ST_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TXCOM_LN_DP_RST_ST_STSr
#define WRITEALL_TXCOM_LN_DP_RST_ST_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TXCOM_LN_DP_RST_ST_STSr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_DP_RST_ST_STSr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  TXCOM_MCST_MASK_CTL
 * BLOCKS:   TXCOM_CKRST_CTRL
 * REGADDR:  0xd1da
 * DEVAD:    1
 * DESC:     TXCOM_MULTICAST_MASK_CONTROL
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     TX_MULTICAST_MASK_CONTROL This masks the lane from a broadcast or multicast write operation.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_MCST_MASK_CTLr (0x0001d1da | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_MCST_MASK_CTLr_SIZE 4

/*
 * This structure should be used to declare and program TXCOM_MCST_MASK_CTL.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_MCST_MASK_CTLr_s {
	uint32_t v[1];
	uint32_t txcom_mcst_mask_ctl[1];
	uint32_t _txcom_mcst_mask_ctl;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_MCST_MASK_CTLr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_MCST_MASK_CTLr_CLR(r) (r).txcom_mcst_mask_ctl[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_MCST_MASK_CTLr_SET(r,d) (r).txcom_mcst_mask_ctl[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_MCST_MASK_CTLr_GET(r) (r).txcom_mcst_mask_ctl[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_MCST_MASK_CTLr_TX_MULTICAST_MASK_CONTROLf_GET(r) (((r).txcom_mcst_mask_ctl[0]) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_MCST_MASK_CTLr_TX_MULTICAST_MASK_CONTROLf_SET(r,f) (r).txcom_mcst_mask_ctl[0]=(((r).txcom_mcst_mask_ctl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access TXCOM_MCST_MASK_CTL.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TXCOM_MCST_MASK_CTLr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_MCST_MASK_CTLr,(_r._txcom_mcst_mask_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TXCOM_MCST_MASK_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_MCST_MASK_CTLr,(_r._txcom_mcst_mask_ctl)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TXCOM_MCST_MASK_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_MCST_MASK_CTLr,(_r._txcom_mcst_mask_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TXCOM_MCST_MASK_CTLr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_MCST_MASK_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._txcom_mcst_mask_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TXCOM_MCST_MASK_CTLr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_MCST_MASK_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._txcom_mcst_mask_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TXCOM_MCST_MASK_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_MCST_MASK_CTLr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._txcom_mcst_mask_ctl))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TXCOM_MCST_MASK_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_MCST_MASK_CTLr
#define TXCOM_MCST_MASK_CTLr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_MCST_MASK_CTLr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_MCST_MASK_CTLr_t TXCOM_MCST_MASK_CTLr_t;
#define TXCOM_MCST_MASK_CTLr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_MCST_MASK_CTLr_CLR
#define TXCOM_MCST_MASK_CTLr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_MCST_MASK_CTLr_SET
#define TXCOM_MCST_MASK_CTLr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_MCST_MASK_CTLr_GET
#define TXCOM_MCST_MASK_CTLr_TX_MULTICAST_MASK_CONTROLf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_MCST_MASK_CTLr_TX_MULTICAST_MASK_CONTROLf_GET
#define TXCOM_MCST_MASK_CTLr_TX_MULTICAST_MASK_CONTROLf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_MCST_MASK_CTLr_TX_MULTICAST_MASK_CONTROLf_SET
#define READ_TXCOM_MCST_MASK_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TXCOM_MCST_MASK_CTLr
#define WRITE_TXCOM_MCST_MASK_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TXCOM_MCST_MASK_CTLr
#define MODIFY_TXCOM_MCST_MASK_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TXCOM_MCST_MASK_CTLr
#define READLN_TXCOM_MCST_MASK_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TXCOM_MCST_MASK_CTLr
#define WRITELN_TXCOM_MCST_MASK_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TXCOM_MCST_MASK_CTLr
#define WRITEALL_TXCOM_MCST_MASK_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TXCOM_MCST_MASK_CTLr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_MCST_MASK_CTLr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  TXCOM_OSR_MODE_STS_MC_MASK
 * BLOCKS:   TXCOM_CKRST_CTRL
 * REGADDR:  0xd1db
 * DEVAD:    1
 * DESC:     TXCOM_OSR_MODE_STATUS_MC_MASK
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     TX_OSR_MODE      OSR Mode status after the osr_mode_frc/frc_val mux.OSX1          4'd0     (NRZ mode and PAM4 mode)OSX2          4'd1     (NRZ mode and PAM4 mode)OSX4          4'd2     (NRZ mode only         )OSX2P5      4'd3     (NRZ mode only         )OSX21P25      4'd4     (NRZ mode only         )OSX16P5       4'd8     (NRZ mode only         )OSX20P625     4'd12    (NRZ mode only         )OSX8          4'd5     (NRZ mode only         )OSX16         4'd9     (NRZ mode only         )OSX32         4'd13    (NRZ mode only         )
 *     TX_PAM4_MODE     PAM4 signalling mode status after the pam4_mode_frc/frc_val mux.NRZ OS modes  3'd0PAM4 OS modes 3'd1         (rx_pam4_er_mode reg field when 1'b1 is PAM4 ER mode and 1'b0 is PAM4 NR mode)Reserved      3'd2:3d7
 *     TX_MULTICAST_MASK_CONTROL_STATUS Status of multicast mask control for masking lane from multicast write operation.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_OSR_MODE_STS_MC_MASKr (0x0001d1db | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_OSR_MODE_STS_MC_MASKr_SIZE 4

/*
 * This structure should be used to declare and program TXCOM_OSR_MODE_STS_MC_MASK.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_OSR_MODE_STS_MC_MASKr_s {
	uint32_t v[1];
	uint32_t txcom_osr_mode_sts_mc_mask[1];
	uint32_t _txcom_osr_mode_sts_mc_mask;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_OSR_MODE_STS_MC_MASKr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_OSR_MODE_STS_MC_MASKr_CLR(r) (r).txcom_osr_mode_sts_mc_mask[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_OSR_MODE_STS_MC_MASKr_SET(r,d) (r).txcom_osr_mode_sts_mc_mask[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_OSR_MODE_STS_MC_MASKr_GET(r) (r).txcom_osr_mode_sts_mc_mask[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_OSR_MODE_STS_MC_MASKr_TX_MULTICAST_MASK_CONTROL_STATUSf_GET(r) ((((r).txcom_osr_mode_sts_mc_mask[0]) >> 15) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_OSR_MODE_STS_MC_MASKr_TX_MULTICAST_MASK_CONTROL_STATUSf_SET(r,f) (r).txcom_osr_mode_sts_mc_mask[0]=(((r).txcom_osr_mode_sts_mc_mask[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_OSR_MODE_STS_MC_MASKr_TX_PAM4_MODEf_GET(r) ((((r).txcom_osr_mode_sts_mc_mask[0]) >> 4) & 0x7)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_OSR_MODE_STS_MC_MASKr_TX_PAM4_MODEf_SET(r,f) (r).txcom_osr_mode_sts_mc_mask[0]=(((r).txcom_osr_mode_sts_mc_mask[0] & ~((uint32_t)0x7 << 4)) | ((((uint32_t)f) & 0x7) << 4)) | (7 << (16 + 4))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_OSR_MODE_STS_MC_MASKr_TX_OSR_MODEf_GET(r) (((r).txcom_osr_mode_sts_mc_mask[0]) & 0xf)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_OSR_MODE_STS_MC_MASKr_TX_OSR_MODEf_SET(r,f) (r).txcom_osr_mode_sts_mc_mask[0]=(((r).txcom_osr_mode_sts_mc_mask[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf)) | (0xf << 16)

/*
 * These macros can be used to access TXCOM_OSR_MODE_STS_MC_MASK.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TXCOM_OSR_MODE_STS_MC_MASKr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_OSR_MODE_STS_MC_MASKr,(_r._txcom_osr_mode_sts_mc_mask))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TXCOM_OSR_MODE_STS_MC_MASKr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_OSR_MODE_STS_MC_MASKr,(_r._txcom_osr_mode_sts_mc_mask)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TXCOM_OSR_MODE_STS_MC_MASKr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_OSR_MODE_STS_MC_MASKr,(_r._txcom_osr_mode_sts_mc_mask))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TXCOM_OSR_MODE_STS_MC_MASKr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_OSR_MODE_STS_MC_MASKr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._txcom_osr_mode_sts_mc_mask))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TXCOM_OSR_MODE_STS_MC_MASKr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_OSR_MODE_STS_MC_MASKr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._txcom_osr_mode_sts_mc_mask))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TXCOM_OSR_MODE_STS_MC_MASKr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_OSR_MODE_STS_MC_MASKr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._txcom_osr_mode_sts_mc_mask))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TXCOM_OSR_MODE_STS_MC_MASKr BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_OSR_MODE_STS_MC_MASKr
#define TXCOM_OSR_MODE_STS_MC_MASKr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_OSR_MODE_STS_MC_MASKr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_OSR_MODE_STS_MC_MASKr_t TXCOM_OSR_MODE_STS_MC_MASKr_t;
#define TXCOM_OSR_MODE_STS_MC_MASKr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_OSR_MODE_STS_MC_MASKr_CLR
#define TXCOM_OSR_MODE_STS_MC_MASKr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_OSR_MODE_STS_MC_MASKr_SET
#define TXCOM_OSR_MODE_STS_MC_MASKr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_OSR_MODE_STS_MC_MASKr_GET
#define TXCOM_OSR_MODE_STS_MC_MASKr_TX_MULTICAST_MASK_CONTROL_STATUSf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_OSR_MODE_STS_MC_MASKr_TX_MULTICAST_MASK_CONTROL_STATUSf_GET
#define TXCOM_OSR_MODE_STS_MC_MASKr_TX_MULTICAST_MASK_CONTROL_STATUSf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_OSR_MODE_STS_MC_MASKr_TX_MULTICAST_MASK_CONTROL_STATUSf_SET
#define TXCOM_OSR_MODE_STS_MC_MASKr_TX_PAM4_MODEf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_OSR_MODE_STS_MC_MASKr_TX_PAM4_MODEf_GET
#define TXCOM_OSR_MODE_STS_MC_MASKr_TX_PAM4_MODEf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_OSR_MODE_STS_MC_MASKr_TX_PAM4_MODEf_SET
#define TXCOM_OSR_MODE_STS_MC_MASKr_TX_OSR_MODEf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_OSR_MODE_STS_MC_MASKr_TX_OSR_MODEf_GET
#define TXCOM_OSR_MODE_STS_MC_MASKr_TX_OSR_MODEf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_OSR_MODE_STS_MC_MASKr_TX_OSR_MODEf_SET
#define READ_TXCOM_OSR_MODE_STS_MC_MASKr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TXCOM_OSR_MODE_STS_MC_MASKr
#define WRITE_TXCOM_OSR_MODE_STS_MC_MASKr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TXCOM_OSR_MODE_STS_MC_MASKr
#define MODIFY_TXCOM_OSR_MODE_STS_MC_MASKr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TXCOM_OSR_MODE_STS_MC_MASKr
#define READLN_TXCOM_OSR_MODE_STS_MC_MASKr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TXCOM_OSR_MODE_STS_MC_MASKr
#define WRITELN_TXCOM_OSR_MODE_STS_MC_MASKr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TXCOM_OSR_MODE_STS_MC_MASKr
#define WRITEALL_TXCOM_OSR_MODE_STS_MC_MASKr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TXCOM_OSR_MODE_STS_MC_MASKr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_OSR_MODE_STS_MC_MASKr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  TXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STS
 * BLOCKS:   TXCOM_CKRST_CTRL
 * REGADDR:  0xd1dc
 * DEVAD:    1
 * DESC:     TXCOM_AFE_RESET_PWRDN_OSR_MODE_PIN_STATUS
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     TX_OSR_MODE_PIN  Indicates the status of the pmd_osr_mode input pin.Decoding of pmd_osr_mode[3:0] pin and osr_mode registers are as follows.OSX1          4'd0     (NRZ mode and PAM4 mode)OSX2          4'd1     (NRZ mode and PAM4 mode)OSX4          4'd2     (NRZ mode only         )OSX2P5      4'd3     (NRZ mode only         )OSX21P25      4'd4     (NRZ mode only         )OSX16P5       4'd8     (NRZ mode only         )OSX20P625     4'd12    (NRZ mode only         )OSX8          4'd5     (NRZ mode only         )OSX16         4'd9     (NRZ mode only         )OSX32         4'd13    (NRZ mode only         )
 *     TX_PAM4_MODE_PIN Indicates the status of the pmd_pam4_mode input pin.Decoding of pmd_pam4_mode[2:0] pin and pam4_mode registers are as follows.NRZ OS modes  3'd0PAM4 OS modes 3'd1         (rx_pam4_er_mode reg field when 1'b1 is PAM4 ER mode and 1'b0 is PAM4 NR mode)Reserved      3'd2:3d7
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr (0x0001d1dc | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_SIZE 4

/*
 * This structure should be used to declare and program TXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STS.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_s {
	uint32_t v[1];
	uint32_t txcom_afe_rst_pwrdn_osr_mode_pin_sts[1];
	uint32_t _txcom_afe_rst_pwrdn_osr_mode_pin_sts;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_CLR(r) (r).txcom_afe_rst_pwrdn_osr_mode_pin_sts[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_SET(r,d) (r).txcom_afe_rst_pwrdn_osr_mode_pin_sts[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_GET(r) (r).txcom_afe_rst_pwrdn_osr_mode_pin_sts[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_TX_PAM4_MODE_PINf_GET(r) ((((r).txcom_afe_rst_pwrdn_osr_mode_pin_sts[0]) >> 4) & 0x7)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_TX_PAM4_MODE_PINf_SET(r,f) (r).txcom_afe_rst_pwrdn_osr_mode_pin_sts[0]=(((r).txcom_afe_rst_pwrdn_osr_mode_pin_sts[0] & ~((uint32_t)0x7 << 4)) | ((((uint32_t)f) & 0x7) << 4)) | (7 << (16 + 4))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_TX_OSR_MODE_PINf_GET(r) (((r).txcom_afe_rst_pwrdn_osr_mode_pin_sts[0]) & 0xf)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_TX_OSR_MODE_PINf_SET(r,f) (r).txcom_afe_rst_pwrdn_osr_mode_pin_sts[0]=(((r).txcom_afe_rst_pwrdn_osr_mode_pin_sts[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf)) | (0xf << 16)

/*
 * These macros can be used to access TXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STS.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr,(_r._txcom_afe_rst_pwrdn_osr_mode_pin_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr,(_r._txcom_afe_rst_pwrdn_osr_mode_pin_sts)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr,(_r._txcom_afe_rst_pwrdn_osr_mode_pin_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._txcom_afe_rst_pwrdn_osr_mode_pin_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._txcom_afe_rst_pwrdn_osr_mode_pin_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._txcom_afe_rst_pwrdn_osr_mode_pin_sts))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr
#define TXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_t TXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_t;
#define TXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_CLR
#define TXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_SET
#define TXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_GET
#define TXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_TX_PAM4_MODE_PINf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_TX_PAM4_MODE_PINf_GET
#define TXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_TX_PAM4_MODE_PINf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_TX_PAM4_MODE_PINf_SET
#define TXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_TX_OSR_MODE_PINf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_TX_OSR_MODE_PINf_GET
#define TXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_TX_OSR_MODE_PINf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr_TX_OSR_MODE_PINf_SET
#define READ_TXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr
#define WRITE_TXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr
#define MODIFY_TXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr
#define READLN_TXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr
#define WRITELN_TXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr
#define WRITEALL_TXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_AFE_RST_PWRDN_OSR_MODE_PIN_STSr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  TXCOM_LN_S_RSTB_CTL
 * BLOCKS:   TXCOM_CKRST_CTRL
 * REGADDR:  0xd1de
 * DEVAD:    1
 * DESC:     TXCOM_LN_S_RSTB_CONTROL
 * RESETVAL: 0x1 (1)
 * ACCESS:   R/W
 * FIELDS:
 *     TX_LN_S_RSTB     Active Low Lane Soft Reset. If asserted by writing to 1'b0 will reset the registers and datapath for a lane.This soft reset is equivalent to the hard reset input pin pmd_ln_h_rstb_i.
 *     TX_HW_FW_HANDSHAKE_DISABLE 1: disables the HW-FW handshake logic for the TX lane which means there is no acknowledgement required from uC and lane reset will be de-asserted once reset register/pin conditions are de-asserted.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_S_RSTB_CTLr (0x0001d1de | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_S_RSTB_CTLr_SIZE 4

/*
 * This structure should be used to declare and program TXCOM_LN_S_RSTB_CTL.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_S_RSTB_CTLr_s {
	uint32_t v[1];
	uint32_t txcom_ln_s_rstb_ctl[1];
	uint32_t _txcom_ln_s_rstb_ctl;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_S_RSTB_CTLr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_S_RSTB_CTLr_CLR(r) (r).txcom_ln_s_rstb_ctl[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_S_RSTB_CTLr_SET(r,d) (r).txcom_ln_s_rstb_ctl[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_S_RSTB_CTLr_GET(r) (r).txcom_ln_s_rstb_ctl[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_S_RSTB_CTLr_TX_HW_FW_HANDSHAKE_DISABLEf_GET(r) ((((r).txcom_ln_s_rstb_ctl[0]) >> 1) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_S_RSTB_CTLr_TX_HW_FW_HANDSHAKE_DISABLEf_SET(r,f) (r).txcom_ln_s_rstb_ctl[0]=(((r).txcom_ln_s_rstb_ctl[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_S_RSTB_CTLr_TX_LN_S_RSTBf_GET(r) (((r).txcom_ln_s_rstb_ctl[0]) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_S_RSTB_CTLr_TX_LN_S_RSTBf_SET(r,f) (r).txcom_ln_s_rstb_ctl[0]=(((r).txcom_ln_s_rstb_ctl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access TXCOM_LN_S_RSTB_CTL.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TXCOM_LN_S_RSTB_CTLr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_S_RSTB_CTLr,(_r._txcom_ln_s_rstb_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TXCOM_LN_S_RSTB_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_S_RSTB_CTLr,(_r._txcom_ln_s_rstb_ctl)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TXCOM_LN_S_RSTB_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_S_RSTB_CTLr,(_r._txcom_ln_s_rstb_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TXCOM_LN_S_RSTB_CTLr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_S_RSTB_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._txcom_ln_s_rstb_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TXCOM_LN_S_RSTB_CTLr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_S_RSTB_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._txcom_ln_s_rstb_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TXCOM_LN_S_RSTB_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_S_RSTB_CTLr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._txcom_ln_s_rstb_ctl))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TXCOM_LN_S_RSTB_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_S_RSTB_CTLr
#define TXCOM_LN_S_RSTB_CTLr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_S_RSTB_CTLr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_S_RSTB_CTLr_t TXCOM_LN_S_RSTB_CTLr_t;
#define TXCOM_LN_S_RSTB_CTLr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_S_RSTB_CTLr_CLR
#define TXCOM_LN_S_RSTB_CTLr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_S_RSTB_CTLr_SET
#define TXCOM_LN_S_RSTB_CTLr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_S_RSTB_CTLr_GET
#define TXCOM_LN_S_RSTB_CTLr_TX_HW_FW_HANDSHAKE_DISABLEf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_S_RSTB_CTLr_TX_HW_FW_HANDSHAKE_DISABLEf_GET
#define TXCOM_LN_S_RSTB_CTLr_TX_HW_FW_HANDSHAKE_DISABLEf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_S_RSTB_CTLr_TX_HW_FW_HANDSHAKE_DISABLEf_SET
#define TXCOM_LN_S_RSTB_CTLr_TX_LN_S_RSTBf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_S_RSTB_CTLr_TX_LN_S_RSTBf_GET
#define TXCOM_LN_S_RSTB_CTLr_TX_LN_S_RSTBf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_S_RSTB_CTLr_TX_LN_S_RSTBf_SET
#define READ_TXCOM_LN_S_RSTB_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TXCOM_LN_S_RSTB_CTLr
#define WRITE_TXCOM_LN_S_RSTB_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TXCOM_LN_S_RSTB_CTLr
#define MODIFY_TXCOM_LN_S_RSTB_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TXCOM_LN_S_RSTB_CTLr
#define READLN_TXCOM_LN_S_RSTB_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TXCOM_LN_S_RSTB_CTLr
#define WRITELN_TXCOM_LN_S_RSTB_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TXCOM_LN_S_RSTB_CTLr
#define WRITEALL_TXCOM_LN_S_RSTB_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TXCOM_LN_S_RSTB_CTLr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_TXCOM_LN_S_RSTB_CTLr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  TLB_RX_C_TLB_RX_C_CFG0
 * BLOCKS:   TLB_RX_C
 * REGADDR:  0xd1f0
 * DEVAD:    1
 * DESC:     TLB_RX_C Control 0
 * RESETVAL: 0x453c (17724)
 * ACCESS:   R/W
 * FIELDS:
 *     TLB_ERR_START_ERROR_ANALYZER This starts error analyzer in the lane. When set to 0, it will stop error analyzer and clear the internal errors counterstlb_err_analyze_lanes_active, and tlb_err_analyze_en need to be set to enable error analyzer results to be stored in memorytlb_err_aggr_lanes_active need to be set to be chosen for aggregation
 *     TLB_ERR_FEC_L_EN If this bit is set to 1 and tlb_err_fec_r_en is set to 0, it implies that the left 20 bits of the 40 bit word are processed.
 *     TLB_ERR_FEC_R_EN If this bit is set to 1 and tlb_err_fec_l_en is set to 0, it implies that the right 20 bits of the 40 bit word are processed.
 *     TLB_ERR_FEC_MSB_EN When this bit is set to 0, tlb_err_symbol_msb_lsb_group to 1, tlb_err_fec_lsb_en to 1, only lsbs of the PAM4 symbols are analyzed
 *     TLB_ERR_FEC_LSB_EN When this bit is set to 0, tlb_err_symbol_msb_lsb_group to 1, tlb_err_fec_msb_en to 1, only msbs of the PAM4 symbols are analyzed
 *     TLB_ERR_IGNORE_BACK_CHANNEL By setting this bit, the frame counter in the error analyzer continues count when back channel word arrives.When back channel word arrives, the error analyzer treats it like a valid prbs code but assumes zero errors.This is a debug feature.
 *     TLB_ERR_SYMBOL_MSB_LSB_GROUP If set to 1, along with tlb_err_fec_lsb_en and tlb_err_fec_msb_en set to 1, this bit groups msb's and lsb's of the PAM4 symbols to form FEC symbols
 *     TLB_ERR_FEC_SIZE_FRAC Defines the portion of the fec frame size during the duration of tlb_err_fec_size*20UI across all lanes(40*number of lanes for aggregation*tlb_err_fec_size) / (number of FECs per lane*FEC frame size)2'b00: 1/1, 2'b01: 1/8, 2'b10: 1/4, 2'b11: 1/2
 *     TLB_ERR_FEC_SIZE Defines the size of the FEC frame.Valid values for this field must be >= 6The frame size = (tlb_err_fec_size * 320) bitsTo get 5440 bits FEC, N = 5440/320 = 17.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_C_TLB_RX_C_CFG0r (0x0001d1f0 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_C_TLB_RX_C_CFG0r_SIZE 4

/*
 * This structure should be used to declare and program TLB_RX_C_TLB_RX_C_CFG0.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_C_TLB_RX_C_CFG0r_s {
	uint32_t v[1];
	uint32_t tlb_rx_c_tlb_rx_c_cfg0[1];
	uint32_t _tlb_rx_c_tlb_rx_c_cfg0;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_C_TLB_RX_C_CFG0r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_C_TLB_RX_C_CFG0r_CLR(r) (r).tlb_rx_c_tlb_rx_c_cfg0[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_C_TLB_RX_C_CFG0r_SET(r,d) (r).tlb_rx_c_tlb_rx_c_cfg0[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_C_TLB_RX_C_CFG0r_GET(r) (r).tlb_rx_c_tlb_rx_c_cfg0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_C_TLB_RX_C_CFG0r_TLB_ERR_FEC_SIZEf_GET(r) ((((r).tlb_rx_c_tlb_rx_c_cfg0[0]) >> 10) & 0x3f)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_C_TLB_RX_C_CFG0r_TLB_ERR_FEC_SIZEf_SET(r,f) (r).tlb_rx_c_tlb_rx_c_cfg0[0]=(((r).tlb_rx_c_tlb_rx_c_cfg0[0] & ~((uint32_t)0x3f << 10)) | ((((uint32_t)f) & 0x3f) << 10)) | (63 << (16 + 10))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_C_TLB_RX_C_CFG0r_TLB_ERR_FEC_SIZE_FRACf_GET(r) ((((r).tlb_rx_c_tlb_rx_c_cfg0[0]) >> 8) & 0x3)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_C_TLB_RX_C_CFG0r_TLB_ERR_FEC_SIZE_FRACf_SET(r,f) (r).tlb_rx_c_tlb_rx_c_cfg0[0]=(((r).tlb_rx_c_tlb_rx_c_cfg0[0] & ~((uint32_t)0x3 << 8)) | ((((uint32_t)f) & 0x3) << 8)) | (3 << (16 + 8))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_C_TLB_RX_C_CFG0r_TLB_ERR_SYMBOL_MSB_LSB_GROUPf_GET(r) ((((r).tlb_rx_c_tlb_rx_c_cfg0[0]) >> 7) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_C_TLB_RX_C_CFG0r_TLB_ERR_SYMBOL_MSB_LSB_GROUPf_SET(r,f) (r).tlb_rx_c_tlb_rx_c_cfg0[0]=(((r).tlb_rx_c_tlb_rx_c_cfg0[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_C_TLB_RX_C_CFG0r_TLB_ERR_IGNORE_BACK_CHANNELf_GET(r) ((((r).tlb_rx_c_tlb_rx_c_cfg0[0]) >> 6) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_C_TLB_RX_C_CFG0r_TLB_ERR_IGNORE_BACK_CHANNELf_SET(r,f) (r).tlb_rx_c_tlb_rx_c_cfg0[0]=(((r).tlb_rx_c_tlb_rx_c_cfg0[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_C_TLB_RX_C_CFG0r_TLB_ERR_FEC_LSB_ENf_GET(r) ((((r).tlb_rx_c_tlb_rx_c_cfg0[0]) >> 5) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_C_TLB_RX_C_CFG0r_TLB_ERR_FEC_LSB_ENf_SET(r,f) (r).tlb_rx_c_tlb_rx_c_cfg0[0]=(((r).tlb_rx_c_tlb_rx_c_cfg0[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_C_TLB_RX_C_CFG0r_TLB_ERR_FEC_MSB_ENf_GET(r) ((((r).tlb_rx_c_tlb_rx_c_cfg0[0]) >> 4) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_C_TLB_RX_C_CFG0r_TLB_ERR_FEC_MSB_ENf_SET(r,f) (r).tlb_rx_c_tlb_rx_c_cfg0[0]=(((r).tlb_rx_c_tlb_rx_c_cfg0[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_C_TLB_RX_C_CFG0r_TLB_ERR_FEC_R_ENf_GET(r) ((((r).tlb_rx_c_tlb_rx_c_cfg0[0]) >> 3) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_C_TLB_RX_C_CFG0r_TLB_ERR_FEC_R_ENf_SET(r,f) (r).tlb_rx_c_tlb_rx_c_cfg0[0]=(((r).tlb_rx_c_tlb_rx_c_cfg0[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_C_TLB_RX_C_CFG0r_TLB_ERR_FEC_L_ENf_GET(r) ((((r).tlb_rx_c_tlb_rx_c_cfg0[0]) >> 2) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_C_TLB_RX_C_CFG0r_TLB_ERR_FEC_L_ENf_SET(r,f) (r).tlb_rx_c_tlb_rx_c_cfg0[0]=(((r).tlb_rx_c_tlb_rx_c_cfg0[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_C_TLB_RX_C_CFG0r_TLB_ERR_START_ERROR_ANALYZERf_GET(r) ((((r).tlb_rx_c_tlb_rx_c_cfg0[0]) >> 1) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_C_TLB_RX_C_CFG0r_TLB_ERR_START_ERROR_ANALYZERf_SET(r,f) (r).tlb_rx_c_tlb_rx_c_cfg0[0]=(((r).tlb_rx_c_tlb_rx_c_cfg0[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))

/*
 * These macros can be used to access TLB_RX_C_TLB_RX_C_CFG0.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TLB_RX_C_TLB_RX_C_CFG0r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_C_TLB_RX_C_CFG0r,(_r._tlb_rx_c_tlb_rx_c_cfg0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TLB_RX_C_TLB_RX_C_CFG0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_C_TLB_RX_C_CFG0r,(_r._tlb_rx_c_tlb_rx_c_cfg0)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TLB_RX_C_TLB_RX_C_CFG0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_C_TLB_RX_C_CFG0r,(_r._tlb_rx_c_tlb_rx_c_cfg0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TLB_RX_C_TLB_RX_C_CFG0r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_C_TLB_RX_C_CFG0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_rx_c_tlb_rx_c_cfg0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TLB_RX_C_TLB_RX_C_CFG0r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_C_TLB_RX_C_CFG0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_rx_c_tlb_rx_c_cfg0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TLB_RX_C_TLB_RX_C_CFG0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_C_TLB_RX_C_CFG0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tlb_rx_c_tlb_rx_c_cfg0))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TLB_RX_C_TLB_RX_C_CFG0r BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_C_TLB_RX_C_CFG0r
#define TLB_RX_C_TLB_RX_C_CFG0r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_C_TLB_RX_C_CFG0r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_C_TLB_RX_C_CFG0r_t TLB_RX_C_TLB_RX_C_CFG0r_t;
#define TLB_RX_C_TLB_RX_C_CFG0r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_C_TLB_RX_C_CFG0r_CLR
#define TLB_RX_C_TLB_RX_C_CFG0r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_C_TLB_RX_C_CFG0r_SET
#define TLB_RX_C_TLB_RX_C_CFG0r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_C_TLB_RX_C_CFG0r_GET
#define TLB_RX_C_TLB_RX_C_CFG0r_TLB_ERR_FEC_SIZEf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_C_TLB_RX_C_CFG0r_TLB_ERR_FEC_SIZEf_GET
#define TLB_RX_C_TLB_RX_C_CFG0r_TLB_ERR_FEC_SIZEf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_C_TLB_RX_C_CFG0r_TLB_ERR_FEC_SIZEf_SET
#define TLB_RX_C_TLB_RX_C_CFG0r_TLB_ERR_FEC_SIZE_FRACf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_C_TLB_RX_C_CFG0r_TLB_ERR_FEC_SIZE_FRACf_GET
#define TLB_RX_C_TLB_RX_C_CFG0r_TLB_ERR_FEC_SIZE_FRACf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_C_TLB_RX_C_CFG0r_TLB_ERR_FEC_SIZE_FRACf_SET
#define TLB_RX_C_TLB_RX_C_CFG0r_TLB_ERR_SYMBOL_MSB_LSB_GROUPf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_C_TLB_RX_C_CFG0r_TLB_ERR_SYMBOL_MSB_LSB_GROUPf_GET
#define TLB_RX_C_TLB_RX_C_CFG0r_TLB_ERR_SYMBOL_MSB_LSB_GROUPf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_C_TLB_RX_C_CFG0r_TLB_ERR_SYMBOL_MSB_LSB_GROUPf_SET
#define TLB_RX_C_TLB_RX_C_CFG0r_TLB_ERR_IGNORE_BACK_CHANNELf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_C_TLB_RX_C_CFG0r_TLB_ERR_IGNORE_BACK_CHANNELf_GET
#define TLB_RX_C_TLB_RX_C_CFG0r_TLB_ERR_IGNORE_BACK_CHANNELf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_C_TLB_RX_C_CFG0r_TLB_ERR_IGNORE_BACK_CHANNELf_SET
#define TLB_RX_C_TLB_RX_C_CFG0r_TLB_ERR_FEC_LSB_ENf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_C_TLB_RX_C_CFG0r_TLB_ERR_FEC_LSB_ENf_GET
#define TLB_RX_C_TLB_RX_C_CFG0r_TLB_ERR_FEC_LSB_ENf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_C_TLB_RX_C_CFG0r_TLB_ERR_FEC_LSB_ENf_SET
#define TLB_RX_C_TLB_RX_C_CFG0r_TLB_ERR_FEC_MSB_ENf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_C_TLB_RX_C_CFG0r_TLB_ERR_FEC_MSB_ENf_GET
#define TLB_RX_C_TLB_RX_C_CFG0r_TLB_ERR_FEC_MSB_ENf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_C_TLB_RX_C_CFG0r_TLB_ERR_FEC_MSB_ENf_SET
#define TLB_RX_C_TLB_RX_C_CFG0r_TLB_ERR_FEC_R_ENf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_C_TLB_RX_C_CFG0r_TLB_ERR_FEC_R_ENf_GET
#define TLB_RX_C_TLB_RX_C_CFG0r_TLB_ERR_FEC_R_ENf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_C_TLB_RX_C_CFG0r_TLB_ERR_FEC_R_ENf_SET
#define TLB_RX_C_TLB_RX_C_CFG0r_TLB_ERR_FEC_L_ENf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_C_TLB_RX_C_CFG0r_TLB_ERR_FEC_L_ENf_GET
#define TLB_RX_C_TLB_RX_C_CFG0r_TLB_ERR_FEC_L_ENf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_C_TLB_RX_C_CFG0r_TLB_ERR_FEC_L_ENf_SET
#define TLB_RX_C_TLB_RX_C_CFG0r_TLB_ERR_START_ERROR_ANALYZERf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_C_TLB_RX_C_CFG0r_TLB_ERR_START_ERROR_ANALYZERf_GET
#define TLB_RX_C_TLB_RX_C_CFG0r_TLB_ERR_START_ERROR_ANALYZERf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_C_TLB_RX_C_CFG0r_TLB_ERR_START_ERROR_ANALYZERf_SET
#define READ_TLB_RX_C_TLB_RX_C_CFG0r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TLB_RX_C_TLB_RX_C_CFG0r
#define WRITE_TLB_RX_C_TLB_RX_C_CFG0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TLB_RX_C_TLB_RX_C_CFG0r
#define MODIFY_TLB_RX_C_TLB_RX_C_CFG0r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TLB_RX_C_TLB_RX_C_CFG0r
#define READLN_TLB_RX_C_TLB_RX_C_CFG0r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TLB_RX_C_TLB_RX_C_CFG0r
#define WRITELN_TLB_RX_C_TLB_RX_C_CFG0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TLB_RX_C_TLB_RX_C_CFG0r
#define WRITEALL_TLB_RX_C_TLB_RX_C_CFG0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TLB_RX_C_TLB_RX_C_CFG0r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_C_TLB_RX_C_CFG0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  TLB_RX_C_TLB_RX_C_CFG1
 * BLOCKS:   TLB_RX_C
 * REGADDR:  0xd1f1
 * DEVAD:    1
 * DESC:     TLB_RX_C Control 1
 * RESETVAL: 0x4 (4)
 * ACCESS:   R/W
 * FIELDS:
 *     TLB_ERR_ANALYZE_LANES_ACTIVE When set to 1, the error counters from this lane is stored in the memory for analysis
 *     TLB_ERR_AGGR_LANES_ACTIVE When set to 1, this lane is chosen for aggregation
 *     TLB_ERR_FEC_RSCODE_SWAP_EN When this bit is set to 1, RS code word order is swapped every 20 bits
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_C_TLB_RX_C_CFG1r (0x0001d1f1 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_C_TLB_RX_C_CFG1r_SIZE 4

/*
 * This structure should be used to declare and program TLB_RX_C_TLB_RX_C_CFG1.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_C_TLB_RX_C_CFG1r_s {
	uint32_t v[1];
	uint32_t tlb_rx_c_tlb_rx_c_cfg1[1];
	uint32_t _tlb_rx_c_tlb_rx_c_cfg1;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_C_TLB_RX_C_CFG1r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_C_TLB_RX_C_CFG1r_CLR(r) (r).tlb_rx_c_tlb_rx_c_cfg1[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_C_TLB_RX_C_CFG1r_SET(r,d) (r).tlb_rx_c_tlb_rx_c_cfg1[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_C_TLB_RX_C_CFG1r_GET(r) (r).tlb_rx_c_tlb_rx_c_cfg1[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_C_TLB_RX_C_CFG1r_TLB_ERR_FEC_RSCODE_SWAP_ENf_GET(r) ((((r).tlb_rx_c_tlb_rx_c_cfg1[0]) >> 2) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_C_TLB_RX_C_CFG1r_TLB_ERR_FEC_RSCODE_SWAP_ENf_SET(r,f) (r).tlb_rx_c_tlb_rx_c_cfg1[0]=(((r).tlb_rx_c_tlb_rx_c_cfg1[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_C_TLB_RX_C_CFG1r_TLB_ERR_AGGR_LANES_ACTIVEf_GET(r) ((((r).tlb_rx_c_tlb_rx_c_cfg1[0]) >> 1) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_C_TLB_RX_C_CFG1r_TLB_ERR_AGGR_LANES_ACTIVEf_SET(r,f) (r).tlb_rx_c_tlb_rx_c_cfg1[0]=(((r).tlb_rx_c_tlb_rx_c_cfg1[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_C_TLB_RX_C_CFG1r_TLB_ERR_ANALYZE_LANES_ACTIVEf_GET(r) (((r).tlb_rx_c_tlb_rx_c_cfg1[0]) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_C_TLB_RX_C_CFG1r_TLB_ERR_ANALYZE_LANES_ACTIVEf_SET(r,f) (r).tlb_rx_c_tlb_rx_c_cfg1[0]=(((r).tlb_rx_c_tlb_rx_c_cfg1[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access TLB_RX_C_TLB_RX_C_CFG1.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TLB_RX_C_TLB_RX_C_CFG1r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_C_TLB_RX_C_CFG1r,(_r._tlb_rx_c_tlb_rx_c_cfg1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TLB_RX_C_TLB_RX_C_CFG1r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_C_TLB_RX_C_CFG1r,(_r._tlb_rx_c_tlb_rx_c_cfg1)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TLB_RX_C_TLB_RX_C_CFG1r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_C_TLB_RX_C_CFG1r,(_r._tlb_rx_c_tlb_rx_c_cfg1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TLB_RX_C_TLB_RX_C_CFG1r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_C_TLB_RX_C_CFG1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_rx_c_tlb_rx_c_cfg1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TLB_RX_C_TLB_RX_C_CFG1r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_C_TLB_RX_C_CFG1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_rx_c_tlb_rx_c_cfg1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TLB_RX_C_TLB_RX_C_CFG1r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_C_TLB_RX_C_CFG1r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tlb_rx_c_tlb_rx_c_cfg1))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TLB_RX_C_TLB_RX_C_CFG1r BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_C_TLB_RX_C_CFG1r
#define TLB_RX_C_TLB_RX_C_CFG1r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_C_TLB_RX_C_CFG1r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_C_TLB_RX_C_CFG1r_t TLB_RX_C_TLB_RX_C_CFG1r_t;
#define TLB_RX_C_TLB_RX_C_CFG1r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_C_TLB_RX_C_CFG1r_CLR
#define TLB_RX_C_TLB_RX_C_CFG1r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_C_TLB_RX_C_CFG1r_SET
#define TLB_RX_C_TLB_RX_C_CFG1r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_C_TLB_RX_C_CFG1r_GET
#define TLB_RX_C_TLB_RX_C_CFG1r_TLB_ERR_FEC_RSCODE_SWAP_ENf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_C_TLB_RX_C_CFG1r_TLB_ERR_FEC_RSCODE_SWAP_ENf_GET
#define TLB_RX_C_TLB_RX_C_CFG1r_TLB_ERR_FEC_RSCODE_SWAP_ENf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_C_TLB_RX_C_CFG1r_TLB_ERR_FEC_RSCODE_SWAP_ENf_SET
#define TLB_RX_C_TLB_RX_C_CFG1r_TLB_ERR_AGGR_LANES_ACTIVEf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_C_TLB_RX_C_CFG1r_TLB_ERR_AGGR_LANES_ACTIVEf_GET
#define TLB_RX_C_TLB_RX_C_CFG1r_TLB_ERR_AGGR_LANES_ACTIVEf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_C_TLB_RX_C_CFG1r_TLB_ERR_AGGR_LANES_ACTIVEf_SET
#define TLB_RX_C_TLB_RX_C_CFG1r_TLB_ERR_ANALYZE_LANES_ACTIVEf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_C_TLB_RX_C_CFG1r_TLB_ERR_ANALYZE_LANES_ACTIVEf_GET
#define TLB_RX_C_TLB_RX_C_CFG1r_TLB_ERR_ANALYZE_LANES_ACTIVEf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_C_TLB_RX_C_CFG1r_TLB_ERR_ANALYZE_LANES_ACTIVEf_SET
#define READ_TLB_RX_C_TLB_RX_C_CFG1r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TLB_RX_C_TLB_RX_C_CFG1r
#define WRITE_TLB_RX_C_TLB_RX_C_CFG1r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TLB_RX_C_TLB_RX_C_CFG1r
#define MODIFY_TLB_RX_C_TLB_RX_C_CFG1r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TLB_RX_C_TLB_RX_C_CFG1r
#define READLN_TLB_RX_C_TLB_RX_C_CFG1r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TLB_RX_C_TLB_RX_C_CFG1r
#define WRITELN_TLB_RX_C_TLB_RX_C_CFG1r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TLB_RX_C_TLB_RX_C_CFG1r
#define WRITEALL_TLB_RX_C_TLB_RX_C_CFG1r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TLB_RX_C_TLB_RX_C_CFG1r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_RX_C_TLB_RX_C_CFG1r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  UC_CLK_CTL0
 * BLOCKS:   MICRO_A
 * REGADDR:  0xd200
 * DEVAD:    1
 * DESC:     Clock control registers 0
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     MICRO_MASTER_CLK_EN master clock enable:By default the clock to micro sub-system is disabled andonly the micro control and status registers can be accessed throughthe RMIC interface. Setting this field to 1'b1 enable the master clock0 - disabled1 - enables
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_CLK_CTL0r (0x0001d200 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_CLK_CTL0r_SIZE 4

/*
 * This structure should be used to declare and program UC_CLK_CTL0.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_CLK_CTL0r_s {
	uint32_t v[1];
	uint32_t uc_clk_ctl0[1];
	uint32_t _uc_clk_ctl0;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_CLK_CTL0r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_CLK_CTL0r_CLR(r) (r).uc_clk_ctl0[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_CLK_CTL0r_SET(r,d) (r).uc_clk_ctl0[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_CLK_CTL0r_GET(r) (r).uc_clk_ctl0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_CLK_CTL0r_MICRO_MASTER_CLK_ENf_GET(r) (((r).uc_clk_ctl0[0]) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_CLK_CTL0r_MICRO_MASTER_CLK_ENf_SET(r,f) (r).uc_clk_ctl0[0]=(((r).uc_clk_ctl0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access UC_CLK_CTL0.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_CLK_CTL0r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_CLK_CTL0r,(_r._uc_clk_ctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_CLK_CTL0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_CLK_CTL0r,(_r._uc_clk_ctl0)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_CLK_CTL0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_CLK_CTL0r,(_r._uc_clk_ctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_CLK_CTL0r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_CLK_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_clk_ctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_CLK_CTL0r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_CLK_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_clk_ctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_CLK_CTL0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_CLK_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_clk_ctl0))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define UC_CLK_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_CLK_CTL0r
#define UC_CLK_CTL0r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_CLK_CTL0r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_CLK_CTL0r_t UC_CLK_CTL0r_t;
#define UC_CLK_CTL0r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_CLK_CTL0r_CLR
#define UC_CLK_CTL0r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_CLK_CTL0r_SET
#define UC_CLK_CTL0r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_CLK_CTL0r_GET
#define UC_CLK_CTL0r_MICRO_MASTER_CLK_ENf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_CLK_CTL0r_MICRO_MASTER_CLK_ENf_GET
#define UC_CLK_CTL0r_MICRO_MASTER_CLK_ENf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_CLK_CTL0r_MICRO_MASTER_CLK_ENf_SET
#define READ_UC_CLK_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_CLK_CTL0r
#define WRITE_UC_CLK_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_CLK_CTL0r
#define MODIFY_UC_CLK_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_CLK_CTL0r
#define READLN_UC_CLK_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_CLK_CTL0r
#define WRITELN_UC_CLK_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_CLK_CTL0r
#define WRITEALL_UC_CLK_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_CLK_CTL0r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_CLK_CTL0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  UC_RST_CTL0
 * BLOCKS:   MICRO_A
 * REGADDR:  0xd201
 * DEVAD:    1
 * DESC:     Reset control registers 0
 * RESETVAL: 0x4000 (16384)
 * ACCESS:   R/W
 * FIELDS:
 *     MICRO_MASTER_RSTB master reset :By default a reset to micro controller sub-system is asserted, andonly the micro control and status registers can be accessed throughthe RMIC interface. Setting this field to 1'b1 de-assert a reset to the micro-subsystem0 - asserted1 - de-asserted
 *     MICRO_SW_TIMESTAMP_TIMER_RSTB Timestamp timer software resetThis field allows the chip firmware to reset the timestamp timers inall Serdes cores to be be with 1 or 2 time units.0 - asserted, Timestamp timer set 0.1 - de-asserted,  normal operation.
 *     MICRO_PRAM_IF_RSTB PRAM interface reset :By default a reset to the PRAM interface is asserted, andonly the micro control and status registers can be accessed throughthe RMIC interface. Setting this field to 1'b1 de-assert a reset to the PRAM interface0 - asserted1 - de-asserted
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RST_CTL0r (0x0001d201 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RST_CTL0r_SIZE 4

/*
 * This structure should be used to declare and program UC_RST_CTL0.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RST_CTL0r_s {
	uint32_t v[1];
	uint32_t uc_rst_ctl0[1];
	uint32_t _uc_rst_ctl0;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RST_CTL0r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RST_CTL0r_CLR(r) (r).uc_rst_ctl0[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RST_CTL0r_SET(r,d) (r).uc_rst_ctl0[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RST_CTL0r_GET(r) (r).uc_rst_ctl0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RST_CTL0r_MICRO_PRAM_IF_RSTBf_GET(r) ((((r).uc_rst_ctl0[0]) >> 15) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RST_CTL0r_MICRO_PRAM_IF_RSTBf_SET(r,f) (r).uc_rst_ctl0[0]=(((r).uc_rst_ctl0[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RST_CTL0r_MICRO_SW_TIMESTAMP_TIMER_RSTBf_GET(r) ((((r).uc_rst_ctl0[0]) >> 14) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RST_CTL0r_MICRO_SW_TIMESTAMP_TIMER_RSTBf_SET(r,f) (r).uc_rst_ctl0[0]=(((r).uc_rst_ctl0[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14)) | (1 << (16 + 14))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RST_CTL0r_MICRO_MASTER_RSTBf_GET(r) (((r).uc_rst_ctl0[0]) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RST_CTL0r_MICRO_MASTER_RSTBf_SET(r,f) (r).uc_rst_ctl0[0]=(((r).uc_rst_ctl0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access UC_RST_CTL0.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_RST_CTL0r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RST_CTL0r,(_r._uc_rst_ctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_RST_CTL0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RST_CTL0r,(_r._uc_rst_ctl0)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_RST_CTL0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RST_CTL0r,(_r._uc_rst_ctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_RST_CTL0r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RST_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_rst_ctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_RST_CTL0r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RST_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_rst_ctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_RST_CTL0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RST_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_rst_ctl0))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define UC_RST_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RST_CTL0r
#define UC_RST_CTL0r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RST_CTL0r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RST_CTL0r_t UC_RST_CTL0r_t;
#define UC_RST_CTL0r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RST_CTL0r_CLR
#define UC_RST_CTL0r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RST_CTL0r_SET
#define UC_RST_CTL0r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RST_CTL0r_GET
#define UC_RST_CTL0r_MICRO_PRAM_IF_RSTBf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RST_CTL0r_MICRO_PRAM_IF_RSTBf_GET
#define UC_RST_CTL0r_MICRO_PRAM_IF_RSTBf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RST_CTL0r_MICRO_PRAM_IF_RSTBf_SET
#define UC_RST_CTL0r_MICRO_SW_TIMESTAMP_TIMER_RSTBf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RST_CTL0r_MICRO_SW_TIMESTAMP_TIMER_RSTBf_GET
#define UC_RST_CTL0r_MICRO_SW_TIMESTAMP_TIMER_RSTBf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RST_CTL0r_MICRO_SW_TIMESTAMP_TIMER_RSTBf_SET
#define UC_RST_CTL0r_MICRO_MASTER_RSTBf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RST_CTL0r_MICRO_MASTER_RSTBf_GET
#define UC_RST_CTL0r_MICRO_MASTER_RSTBf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RST_CTL0r_MICRO_MASTER_RSTBf_SET
#define READ_UC_RST_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_RST_CTL0r
#define WRITE_UC_RST_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_RST_CTL0r
#define MODIFY_UC_RST_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_RST_CTL0r
#define READLN_UC_RST_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_RST_CTL0r
#define WRITELN_UC_RST_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_RST_CTL0r
#define WRITEALL_UC_RST_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_RST_CTL0r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RST_CTL0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  UC_AHB_CTL0
 * BLOCKS:   MICRO_A
 * REGADDR:  0xd202
 * DEVAD:    1
 * DESC:     rmi to ahb control registers 0
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     MICRO_RA_WRDATASIZE write data size select'd0 : 8-bit'd1 : 16-bit'd2 : 32-bit'd3 : reserved
 *     MICRO_RA_RDDATASIZE read data size select'd0 : 8-bit'd1 : 16-bit'd2 : 32-bit'd3 : reserved
 *     MICRO_RA_INIT    Intialize code/data RAM2'b01: initailize code RAM - write zeroes to all locations2'b10: initialize data RAM - write zeroes to all loactions2'b00, 2'b11: ignored
 *     MICRO_AUTOINC_WRADDR_EN Automatic increment write address enable0 - disabled, micro_ra_wraddr_lsw and micro_ra_wraddr_msw field specify the constant addresswhere the data from the micro_ra_wrdata_msw and micro_ra_wrdata_lsw is written.1 - enabled, micro_ra_wraddr_lsw and micro_ra_wraddr_msw field specify the start addresswhere the data from the micro_ra_wrdata_msw and micro_ra_wrdata_lsw is written.the address automatically increments based on the micro_ra_wrdatasize field afterthe write has been performed
 *     MICRO_AUTOINC_RDADDR_EN Automatic increment read address enable0 - disabled, micro_ra_rdaddr_lsw and micro_ra_rdaddr_msw field specify the constant addresswhere the data is read via the micro_ra_rddata_msw and micro_ra_rddata_lsw fileds1 - enabled, micro_ra_rdaddr_lsw and micro_ra_rdaddr_msw field specify the start addresswhere the data is read via the micro_ra_rddata_msw and micro_ra_rddata_lsw filedsthe address automatically increments based on the micro_ra_rddatasize field afterthe read has been performed
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_CTL0r (0x0001d202 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_CTL0r_SIZE 4

/*
 * This structure should be used to declare and program UC_AHB_CTL0.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_CTL0r_s {
	uint32_t v[1];
	uint32_t uc_ahb_ctl0[1];
	uint32_t _uc_ahb_ctl0;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_CTL0r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_CTL0r_CLR(r) (r).uc_ahb_ctl0[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_CTL0r_SET(r,d) (r).uc_ahb_ctl0[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_CTL0r_GET(r) (r).uc_ahb_ctl0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_CTL0r_MICRO_AUTOINC_RDADDR_ENf_GET(r) ((((r).uc_ahb_ctl0[0]) >> 13) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_CTL0r_MICRO_AUTOINC_RDADDR_ENf_SET(r,f) (r).uc_ahb_ctl0[0]=(((r).uc_ahb_ctl0[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13)) | (1 << (16 + 13))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_CTL0r_MICRO_AUTOINC_WRADDR_ENf_GET(r) ((((r).uc_ahb_ctl0[0]) >> 12) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_CTL0r_MICRO_AUTOINC_WRADDR_ENf_SET(r,f) (r).uc_ahb_ctl0[0]=(((r).uc_ahb_ctl0[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12)) | (1 << (16 + 12))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_CTL0r_MICRO_RA_INITf_GET(r) ((((r).uc_ahb_ctl0[0]) >> 8) & 0x3)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_CTL0r_MICRO_RA_INITf_SET(r,f) (r).uc_ahb_ctl0[0]=(((r).uc_ahb_ctl0[0] & ~((uint32_t)0x3 << 8)) | ((((uint32_t)f) & 0x3) << 8)) | (3 << (16 + 8))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_CTL0r_MICRO_RA_RDDATASIZEf_GET(r) ((((r).uc_ahb_ctl0[0]) >> 4) & 0x3)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_CTL0r_MICRO_RA_RDDATASIZEf_SET(r,f) (r).uc_ahb_ctl0[0]=(((r).uc_ahb_ctl0[0] & ~((uint32_t)0x3 << 4)) | ((((uint32_t)f) & 0x3) << 4)) | (3 << (16 + 4))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_CTL0r_MICRO_RA_WRDATASIZEf_GET(r) (((r).uc_ahb_ctl0[0]) & 0x3)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_CTL0r_MICRO_RA_WRDATASIZEf_SET(r,f) (r).uc_ahb_ctl0[0]=(((r).uc_ahb_ctl0[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3)) | (0x3 << 16)

/*
 * These macros can be used to access UC_AHB_CTL0.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_AHB_CTL0r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_CTL0r,(_r._uc_ahb_ctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_AHB_CTL0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_CTL0r,(_r._uc_ahb_ctl0)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_AHB_CTL0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_CTL0r,(_r._uc_ahb_ctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_AHB_CTL0r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_ahb_ctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_AHB_CTL0r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_ahb_ctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_AHB_CTL0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_ahb_ctl0))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define UC_AHB_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_CTL0r
#define UC_AHB_CTL0r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_CTL0r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_CTL0r_t UC_AHB_CTL0r_t;
#define UC_AHB_CTL0r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_CTL0r_CLR
#define UC_AHB_CTL0r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_CTL0r_SET
#define UC_AHB_CTL0r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_CTL0r_GET
#define UC_AHB_CTL0r_MICRO_AUTOINC_RDADDR_ENf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_CTL0r_MICRO_AUTOINC_RDADDR_ENf_GET
#define UC_AHB_CTL0r_MICRO_AUTOINC_RDADDR_ENf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_CTL0r_MICRO_AUTOINC_RDADDR_ENf_SET
#define UC_AHB_CTL0r_MICRO_AUTOINC_WRADDR_ENf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_CTL0r_MICRO_AUTOINC_WRADDR_ENf_GET
#define UC_AHB_CTL0r_MICRO_AUTOINC_WRADDR_ENf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_CTL0r_MICRO_AUTOINC_WRADDR_ENf_SET
#define UC_AHB_CTL0r_MICRO_RA_INITf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_CTL0r_MICRO_RA_INITf_GET
#define UC_AHB_CTL0r_MICRO_RA_INITf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_CTL0r_MICRO_RA_INITf_SET
#define UC_AHB_CTL0r_MICRO_RA_RDDATASIZEf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_CTL0r_MICRO_RA_RDDATASIZEf_GET
#define UC_AHB_CTL0r_MICRO_RA_RDDATASIZEf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_CTL0r_MICRO_RA_RDDATASIZEf_SET
#define UC_AHB_CTL0r_MICRO_RA_WRDATASIZEf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_CTL0r_MICRO_RA_WRDATASIZEf_GET
#define UC_AHB_CTL0r_MICRO_RA_WRDATASIZEf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_CTL0r_MICRO_RA_WRDATASIZEf_SET
#define READ_UC_AHB_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_AHB_CTL0r
#define WRITE_UC_AHB_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_AHB_CTL0r
#define MODIFY_UC_AHB_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_AHB_CTL0r
#define READLN_UC_AHB_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_AHB_CTL0r
#define WRITELN_UC_AHB_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_AHB_CTL0r
#define WRITEALL_UC_AHB_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_AHB_CTL0r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_CTL0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  UC_AHB_STS0
 * BLOCKS:   MICRO_A
 * REGADDR:  0xd203
 * DEVAD:    1
 * DESC:     rmi to ahb status registers 0
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     MICRO_RA_INITDONE When this bit is set, it indicate that code/data RAM initialization process is completeThis reamins set until
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_STS0r (0x0001d203 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_STS0r_SIZE 4

/*
 * This structure should be used to declare and program UC_AHB_STS0.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_STS0r_s {
	uint32_t v[1];
	uint32_t uc_ahb_sts0[1];
	uint32_t _uc_ahb_sts0;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_STS0r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_STS0r_CLR(r) (r).uc_ahb_sts0[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_STS0r_SET(r,d) (r).uc_ahb_sts0[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_STS0r_GET(r) (r).uc_ahb_sts0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_STS0r_MICRO_RA_INITDONEf_GET(r) (((r).uc_ahb_sts0[0]) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_STS0r_MICRO_RA_INITDONEf_SET(r,f) (r).uc_ahb_sts0[0]=(((r).uc_ahb_sts0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access UC_AHB_STS0.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_AHB_STS0r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_STS0r,(_r._uc_ahb_sts0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_AHB_STS0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_STS0r,(_r._uc_ahb_sts0)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_AHB_STS0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_STS0r,(_r._uc_ahb_sts0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_AHB_STS0r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_STS0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_ahb_sts0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_AHB_STS0r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_STS0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_ahb_sts0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_AHB_STS0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_STS0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_ahb_sts0))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define UC_AHB_STS0r BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_STS0r
#define UC_AHB_STS0r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_STS0r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_STS0r_t UC_AHB_STS0r_t;
#define UC_AHB_STS0r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_STS0r_CLR
#define UC_AHB_STS0r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_STS0r_SET
#define UC_AHB_STS0r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_STS0r_GET
#define UC_AHB_STS0r_MICRO_RA_INITDONEf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_STS0r_MICRO_RA_INITDONEf_GET
#define UC_AHB_STS0r_MICRO_RA_INITDONEf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_STS0r_MICRO_RA_INITDONEf_SET
#define READ_UC_AHB_STS0r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_AHB_STS0r
#define WRITE_UC_AHB_STS0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_AHB_STS0r
#define MODIFY_UC_AHB_STS0r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_AHB_STS0r
#define READLN_UC_AHB_STS0r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_AHB_STS0r
#define WRITELN_UC_AHB_STS0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_AHB_STS0r
#define WRITEALL_UC_AHB_STS0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_AHB_STS0r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_STS0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  UC_AHB_WRADDR_LSW
 * BLOCKS:   MICRO_A
 * REGADDR:  0xd204
 * DEVAD:    1
 * DESC:     rmi to ahb write address LSW (bits 15:0) register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     MICRO_RA_WRADDR_LSW These bits are used to generate the lower 16-bits of the address on the AHB-Lite bus during write transactionsbit 0 is not used during 16-bit transactions andbits[1:0] are not used during 32-bit transactions
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_WRADDR_LSWr (0x0001d204 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_WRADDR_LSWr_SIZE 4

/*
 * This structure should be used to declare and program UC_AHB_WRADDR_LSW.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_WRADDR_LSWr_s {
	uint32_t v[1];
	uint32_t uc_ahb_wraddr_lsw[1];
	uint32_t _uc_ahb_wraddr_lsw;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_WRADDR_LSWr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_WRADDR_LSWr_CLR(r) (r).uc_ahb_wraddr_lsw[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_WRADDR_LSWr_SET(r,d) (r).uc_ahb_wraddr_lsw[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_WRADDR_LSWr_GET(r) (r).uc_ahb_wraddr_lsw[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_WRADDR_LSWr_MICRO_RA_WRADDR_LSWf_GET(r) (((r).uc_ahb_wraddr_lsw[0]) & 0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_WRADDR_LSWr_MICRO_RA_WRADDR_LSWf_SET(r,f) (r).uc_ahb_wraddr_lsw[0]=(((r).uc_ahb_wraddr_lsw[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access UC_AHB_WRADDR_LSW.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_AHB_WRADDR_LSWr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_WRADDR_LSWr,(_r._uc_ahb_wraddr_lsw))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_AHB_WRADDR_LSWr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_WRADDR_LSWr,(_r._uc_ahb_wraddr_lsw)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_AHB_WRADDR_LSWr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_WRADDR_LSWr,(_r._uc_ahb_wraddr_lsw))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_AHB_WRADDR_LSWr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_WRADDR_LSWr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_ahb_wraddr_lsw))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_AHB_WRADDR_LSWr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_WRADDR_LSWr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_ahb_wraddr_lsw))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_AHB_WRADDR_LSWr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_WRADDR_LSWr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_ahb_wraddr_lsw))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define UC_AHB_WRADDR_LSWr BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_WRADDR_LSWr
#define UC_AHB_WRADDR_LSWr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_WRADDR_LSWr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_WRADDR_LSWr_t UC_AHB_WRADDR_LSWr_t;
#define UC_AHB_WRADDR_LSWr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_WRADDR_LSWr_CLR
#define UC_AHB_WRADDR_LSWr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_WRADDR_LSWr_SET
#define UC_AHB_WRADDR_LSWr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_WRADDR_LSWr_GET
#define UC_AHB_WRADDR_LSWr_MICRO_RA_WRADDR_LSWf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_WRADDR_LSWr_MICRO_RA_WRADDR_LSWf_GET
#define UC_AHB_WRADDR_LSWr_MICRO_RA_WRADDR_LSWf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_WRADDR_LSWr_MICRO_RA_WRADDR_LSWf_SET
#define READ_UC_AHB_WRADDR_LSWr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_AHB_WRADDR_LSWr
#define WRITE_UC_AHB_WRADDR_LSWr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_AHB_WRADDR_LSWr
#define MODIFY_UC_AHB_WRADDR_LSWr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_AHB_WRADDR_LSWr
#define READLN_UC_AHB_WRADDR_LSWr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_AHB_WRADDR_LSWr
#define WRITELN_UC_AHB_WRADDR_LSWr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_AHB_WRADDR_LSWr
#define WRITEALL_UC_AHB_WRADDR_LSWr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_AHB_WRADDR_LSWr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_WRADDR_LSWr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  UC_AHB_WRADDR_MSW
 * BLOCKS:   MICRO_A
 * REGADDR:  0xd205
 * DEVAD:    1
 * DESC:     rmi to ahb write address MSW (bits 31:16) register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     MICRO_RA_WRADDR_MSW These bits are used to generate the upper 16-bits of the address on the AHB-Lite bus during write transactions
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_WRADDR_MSWr (0x0001d205 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_WRADDR_MSWr_SIZE 4

/*
 * This structure should be used to declare and program UC_AHB_WRADDR_MSW.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_WRADDR_MSWr_s {
	uint32_t v[1];
	uint32_t uc_ahb_wraddr_msw[1];
	uint32_t _uc_ahb_wraddr_msw;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_WRADDR_MSWr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_WRADDR_MSWr_CLR(r) (r).uc_ahb_wraddr_msw[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_WRADDR_MSWr_SET(r,d) (r).uc_ahb_wraddr_msw[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_WRADDR_MSWr_GET(r) (r).uc_ahb_wraddr_msw[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_WRADDR_MSWr_MICRO_RA_WRADDR_MSWf_GET(r) (((r).uc_ahb_wraddr_msw[0]) & 0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_WRADDR_MSWr_MICRO_RA_WRADDR_MSWf_SET(r,f) (r).uc_ahb_wraddr_msw[0]=(((r).uc_ahb_wraddr_msw[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access UC_AHB_WRADDR_MSW.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_AHB_WRADDR_MSWr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_WRADDR_MSWr,(_r._uc_ahb_wraddr_msw))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_AHB_WRADDR_MSWr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_WRADDR_MSWr,(_r._uc_ahb_wraddr_msw)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_AHB_WRADDR_MSWr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_WRADDR_MSWr,(_r._uc_ahb_wraddr_msw))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_AHB_WRADDR_MSWr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_WRADDR_MSWr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_ahb_wraddr_msw))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_AHB_WRADDR_MSWr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_WRADDR_MSWr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_ahb_wraddr_msw))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_AHB_WRADDR_MSWr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_WRADDR_MSWr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_ahb_wraddr_msw))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define UC_AHB_WRADDR_MSWr BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_WRADDR_MSWr
#define UC_AHB_WRADDR_MSWr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_WRADDR_MSWr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_WRADDR_MSWr_t UC_AHB_WRADDR_MSWr_t;
#define UC_AHB_WRADDR_MSWr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_WRADDR_MSWr_CLR
#define UC_AHB_WRADDR_MSWr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_WRADDR_MSWr_SET
#define UC_AHB_WRADDR_MSWr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_WRADDR_MSWr_GET
#define UC_AHB_WRADDR_MSWr_MICRO_RA_WRADDR_MSWf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_WRADDR_MSWr_MICRO_RA_WRADDR_MSWf_GET
#define UC_AHB_WRADDR_MSWr_MICRO_RA_WRADDR_MSWf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_WRADDR_MSWr_MICRO_RA_WRADDR_MSWf_SET
#define READ_UC_AHB_WRADDR_MSWr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_AHB_WRADDR_MSWr
#define WRITE_UC_AHB_WRADDR_MSWr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_AHB_WRADDR_MSWr
#define MODIFY_UC_AHB_WRADDR_MSWr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_AHB_WRADDR_MSWr
#define READLN_UC_AHB_WRADDR_MSWr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_AHB_WRADDR_MSWr
#define WRITELN_UC_AHB_WRADDR_MSWr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_AHB_WRADDR_MSWr
#define WRITEALL_UC_AHB_WRADDR_MSWr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_AHB_WRADDR_MSWr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_WRADDR_MSWr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  UC_AHB_WRDATA_LSW
 * BLOCKS:   MICRO_A
 * REGADDR:  0xd206
 * DEVAD:    1
 * DESC:     rmi to ahb write data LSW (bits 15:0) register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     MICRO_RA_WRDATA_LSW These bits are used to generate the lower 16-bits of the data on the AHB-Lite bus during write transactionsWrite transaction on the AHB-Lite is initiated when this register is written
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_WRDATA_LSWr (0x0001d206 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_WRDATA_LSWr_SIZE 4

/*
 * This structure should be used to declare and program UC_AHB_WRDATA_LSW.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_WRDATA_LSWr_s {
	uint32_t v[1];
	uint32_t uc_ahb_wrdata_lsw[1];
	uint32_t _uc_ahb_wrdata_lsw;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_WRDATA_LSWr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_WRDATA_LSWr_CLR(r) (r).uc_ahb_wrdata_lsw[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_WRDATA_LSWr_SET(r,d) (r).uc_ahb_wrdata_lsw[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_WRDATA_LSWr_GET(r) (r).uc_ahb_wrdata_lsw[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_WRDATA_LSWr_MICRO_RA_WRDATA_LSWf_GET(r) (((r).uc_ahb_wrdata_lsw[0]) & 0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_WRDATA_LSWr_MICRO_RA_WRDATA_LSWf_SET(r,f) (r).uc_ahb_wrdata_lsw[0]=(((r).uc_ahb_wrdata_lsw[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access UC_AHB_WRDATA_LSW.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_AHB_WRDATA_LSWr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_WRDATA_LSWr,(_r._uc_ahb_wrdata_lsw))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_AHB_WRDATA_LSWr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_WRDATA_LSWr,(_r._uc_ahb_wrdata_lsw)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_AHB_WRDATA_LSWr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_WRDATA_LSWr,(_r._uc_ahb_wrdata_lsw))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_AHB_WRDATA_LSWr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_WRDATA_LSWr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_ahb_wrdata_lsw))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_AHB_WRDATA_LSWr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_WRDATA_LSWr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_ahb_wrdata_lsw))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_AHB_WRDATA_LSWr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_WRDATA_LSWr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_ahb_wrdata_lsw))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define UC_AHB_WRDATA_LSWr BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_WRDATA_LSWr
#define UC_AHB_WRDATA_LSWr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_WRDATA_LSWr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_WRDATA_LSWr_t UC_AHB_WRDATA_LSWr_t;
#define UC_AHB_WRDATA_LSWr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_WRDATA_LSWr_CLR
#define UC_AHB_WRDATA_LSWr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_WRDATA_LSWr_SET
#define UC_AHB_WRDATA_LSWr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_WRDATA_LSWr_GET
#define UC_AHB_WRDATA_LSWr_MICRO_RA_WRDATA_LSWf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_WRDATA_LSWr_MICRO_RA_WRDATA_LSWf_GET
#define UC_AHB_WRDATA_LSWr_MICRO_RA_WRDATA_LSWf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_WRDATA_LSWr_MICRO_RA_WRDATA_LSWf_SET
#define READ_UC_AHB_WRDATA_LSWr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_AHB_WRDATA_LSWr
#define WRITE_UC_AHB_WRDATA_LSWr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_AHB_WRDATA_LSWr
#define MODIFY_UC_AHB_WRDATA_LSWr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_AHB_WRDATA_LSWr
#define READLN_UC_AHB_WRDATA_LSWr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_AHB_WRDATA_LSWr
#define WRITELN_UC_AHB_WRDATA_LSWr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_AHB_WRDATA_LSWr
#define WRITEALL_UC_AHB_WRDATA_LSWr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_AHB_WRDATA_LSWr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_WRDATA_LSWr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  UC_AHB_WRDATA_MSW
 * BLOCKS:   MICRO_A
 * REGADDR:  0xd207
 * DEVAD:    1
 * DESC:     rmi to ahb write data MSW (bits 31:16) register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     MICRO_RA_WRDATA_MSW These bits are used  to generate the upper 16-bits of the data on the AHB-Lite bus during write transactions
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_WRDATA_MSWr (0x0001d207 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_WRDATA_MSWr_SIZE 4

/*
 * This structure should be used to declare and program UC_AHB_WRDATA_MSW.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_WRDATA_MSWr_s {
	uint32_t v[1];
	uint32_t uc_ahb_wrdata_msw[1];
	uint32_t _uc_ahb_wrdata_msw;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_WRDATA_MSWr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_WRDATA_MSWr_CLR(r) (r).uc_ahb_wrdata_msw[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_WRDATA_MSWr_SET(r,d) (r).uc_ahb_wrdata_msw[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_WRDATA_MSWr_GET(r) (r).uc_ahb_wrdata_msw[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_WRDATA_MSWr_MICRO_RA_WRDATA_MSWf_GET(r) (((r).uc_ahb_wrdata_msw[0]) & 0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_WRDATA_MSWr_MICRO_RA_WRDATA_MSWf_SET(r,f) (r).uc_ahb_wrdata_msw[0]=(((r).uc_ahb_wrdata_msw[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access UC_AHB_WRDATA_MSW.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_AHB_WRDATA_MSWr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_WRDATA_MSWr,(_r._uc_ahb_wrdata_msw))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_AHB_WRDATA_MSWr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_WRDATA_MSWr,(_r._uc_ahb_wrdata_msw)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_AHB_WRDATA_MSWr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_WRDATA_MSWr,(_r._uc_ahb_wrdata_msw))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_AHB_WRDATA_MSWr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_WRDATA_MSWr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_ahb_wrdata_msw))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_AHB_WRDATA_MSWr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_WRDATA_MSWr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_ahb_wrdata_msw))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_AHB_WRDATA_MSWr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_WRDATA_MSWr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_ahb_wrdata_msw))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define UC_AHB_WRDATA_MSWr BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_WRDATA_MSWr
#define UC_AHB_WRDATA_MSWr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_WRDATA_MSWr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_WRDATA_MSWr_t UC_AHB_WRDATA_MSWr_t;
#define UC_AHB_WRDATA_MSWr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_WRDATA_MSWr_CLR
#define UC_AHB_WRDATA_MSWr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_WRDATA_MSWr_SET
#define UC_AHB_WRDATA_MSWr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_WRDATA_MSWr_GET
#define UC_AHB_WRDATA_MSWr_MICRO_RA_WRDATA_MSWf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_WRDATA_MSWr_MICRO_RA_WRDATA_MSWf_GET
#define UC_AHB_WRDATA_MSWr_MICRO_RA_WRDATA_MSWf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_WRDATA_MSWr_MICRO_RA_WRDATA_MSWf_SET
#define READ_UC_AHB_WRDATA_MSWr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_AHB_WRDATA_MSWr
#define WRITE_UC_AHB_WRDATA_MSWr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_AHB_WRDATA_MSWr
#define MODIFY_UC_AHB_WRDATA_MSWr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_AHB_WRDATA_MSWr
#define READLN_UC_AHB_WRDATA_MSWr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_AHB_WRDATA_MSWr
#define WRITELN_UC_AHB_WRDATA_MSWr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_AHB_WRDATA_MSWr
#define WRITEALL_UC_AHB_WRDATA_MSWr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_AHB_WRDATA_MSWr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_WRDATA_MSWr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  UC_AHB_RDADDR_LSW
 * BLOCKS:   MICRO_A
 * REGADDR:  0xd208
 * DEVAD:    1
 * DESC:     rmi to ahb read address LSW (bits 15:0) register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     MICRO_RA_RDADDR_LSW These bits are used to generate the lower 16-bits of the address on the AHB-Lite bus during read transactionsbit 0 is not used during 16-bit transactions andbits[1:0] are not used during 32-bit transactionsRead transaction is initiated on the AHB-Lite when this register is written
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_RDADDR_LSWr (0x0001d208 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_RDADDR_LSWr_SIZE 4

/*
 * This structure should be used to declare and program UC_AHB_RDADDR_LSW.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_RDADDR_LSWr_s {
	uint32_t v[1];
	uint32_t uc_ahb_rdaddr_lsw[1];
	uint32_t _uc_ahb_rdaddr_lsw;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_RDADDR_LSWr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_RDADDR_LSWr_CLR(r) (r).uc_ahb_rdaddr_lsw[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_RDADDR_LSWr_SET(r,d) (r).uc_ahb_rdaddr_lsw[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_RDADDR_LSWr_GET(r) (r).uc_ahb_rdaddr_lsw[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_RDADDR_LSWr_MICRO_RA_RDADDR_LSWf_GET(r) (((r).uc_ahb_rdaddr_lsw[0]) & 0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_RDADDR_LSWr_MICRO_RA_RDADDR_LSWf_SET(r,f) (r).uc_ahb_rdaddr_lsw[0]=(((r).uc_ahb_rdaddr_lsw[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access UC_AHB_RDADDR_LSW.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_AHB_RDADDR_LSWr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_RDADDR_LSWr,(_r._uc_ahb_rdaddr_lsw))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_AHB_RDADDR_LSWr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_RDADDR_LSWr,(_r._uc_ahb_rdaddr_lsw)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_AHB_RDADDR_LSWr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_RDADDR_LSWr,(_r._uc_ahb_rdaddr_lsw))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_AHB_RDADDR_LSWr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_RDADDR_LSWr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_ahb_rdaddr_lsw))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_AHB_RDADDR_LSWr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_RDADDR_LSWr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_ahb_rdaddr_lsw))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_AHB_RDADDR_LSWr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_RDADDR_LSWr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_ahb_rdaddr_lsw))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define UC_AHB_RDADDR_LSWr BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_RDADDR_LSWr
#define UC_AHB_RDADDR_LSWr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_RDADDR_LSWr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_RDADDR_LSWr_t UC_AHB_RDADDR_LSWr_t;
#define UC_AHB_RDADDR_LSWr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_RDADDR_LSWr_CLR
#define UC_AHB_RDADDR_LSWr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_RDADDR_LSWr_SET
#define UC_AHB_RDADDR_LSWr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_RDADDR_LSWr_GET
#define UC_AHB_RDADDR_LSWr_MICRO_RA_RDADDR_LSWf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_RDADDR_LSWr_MICRO_RA_RDADDR_LSWf_GET
#define UC_AHB_RDADDR_LSWr_MICRO_RA_RDADDR_LSWf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_RDADDR_LSWr_MICRO_RA_RDADDR_LSWf_SET
#define READ_UC_AHB_RDADDR_LSWr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_AHB_RDADDR_LSWr
#define WRITE_UC_AHB_RDADDR_LSWr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_AHB_RDADDR_LSWr
#define MODIFY_UC_AHB_RDADDR_LSWr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_AHB_RDADDR_LSWr
#define READLN_UC_AHB_RDADDR_LSWr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_AHB_RDADDR_LSWr
#define WRITELN_UC_AHB_RDADDR_LSWr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_AHB_RDADDR_LSWr
#define WRITEALL_UC_AHB_RDADDR_LSWr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_AHB_RDADDR_LSWr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_RDADDR_LSWr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  UC_AHB_RDADDR_MSW
 * BLOCKS:   MICRO_A
 * REGADDR:  0xd209
 * DEVAD:    1
 * DESC:     rmi to ahb read address MSW (bits 31:16) register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     MICRO_RA_RDADDR_MSW These bits are used by to generate the upper 16-bits of the address on the AHB-Lite bus during read transactions
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_RDADDR_MSWr (0x0001d209 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_RDADDR_MSWr_SIZE 4

/*
 * This structure should be used to declare and program UC_AHB_RDADDR_MSW.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_RDADDR_MSWr_s {
	uint32_t v[1];
	uint32_t uc_ahb_rdaddr_msw[1];
	uint32_t _uc_ahb_rdaddr_msw;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_RDADDR_MSWr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_RDADDR_MSWr_CLR(r) (r).uc_ahb_rdaddr_msw[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_RDADDR_MSWr_SET(r,d) (r).uc_ahb_rdaddr_msw[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_RDADDR_MSWr_GET(r) (r).uc_ahb_rdaddr_msw[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_RDADDR_MSWr_MICRO_RA_RDADDR_MSWf_GET(r) (((r).uc_ahb_rdaddr_msw[0]) & 0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_RDADDR_MSWr_MICRO_RA_RDADDR_MSWf_SET(r,f) (r).uc_ahb_rdaddr_msw[0]=(((r).uc_ahb_rdaddr_msw[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access UC_AHB_RDADDR_MSW.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_AHB_RDADDR_MSWr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_RDADDR_MSWr,(_r._uc_ahb_rdaddr_msw))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_AHB_RDADDR_MSWr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_RDADDR_MSWr,(_r._uc_ahb_rdaddr_msw)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_AHB_RDADDR_MSWr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_RDADDR_MSWr,(_r._uc_ahb_rdaddr_msw))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_AHB_RDADDR_MSWr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_RDADDR_MSWr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_ahb_rdaddr_msw))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_AHB_RDADDR_MSWr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_RDADDR_MSWr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_ahb_rdaddr_msw))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_AHB_RDADDR_MSWr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_RDADDR_MSWr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_ahb_rdaddr_msw))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define UC_AHB_RDADDR_MSWr BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_RDADDR_MSWr
#define UC_AHB_RDADDR_MSWr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_RDADDR_MSWr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_RDADDR_MSWr_t UC_AHB_RDADDR_MSWr_t;
#define UC_AHB_RDADDR_MSWr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_RDADDR_MSWr_CLR
#define UC_AHB_RDADDR_MSWr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_RDADDR_MSWr_SET
#define UC_AHB_RDADDR_MSWr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_RDADDR_MSWr_GET
#define UC_AHB_RDADDR_MSWr_MICRO_RA_RDADDR_MSWf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_RDADDR_MSWr_MICRO_RA_RDADDR_MSWf_GET
#define UC_AHB_RDADDR_MSWr_MICRO_RA_RDADDR_MSWf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_RDADDR_MSWr_MICRO_RA_RDADDR_MSWf_SET
#define READ_UC_AHB_RDADDR_MSWr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_AHB_RDADDR_MSWr
#define WRITE_UC_AHB_RDADDR_MSWr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_AHB_RDADDR_MSWr
#define MODIFY_UC_AHB_RDADDR_MSWr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_AHB_RDADDR_MSWr
#define READLN_UC_AHB_RDADDR_MSWr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_AHB_RDADDR_MSWr
#define WRITELN_UC_AHB_RDADDR_MSWr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_AHB_RDADDR_MSWr
#define WRITEALL_UC_AHB_RDADDR_MSWr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_AHB_RDADDR_MSWr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_RDADDR_MSWr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  UC_AHB_RDDATA_LSW
 * BLOCKS:   MICRO_A
 * REGADDR:  0xd20a
 * DEVAD:    1
 * DESC:     rmi to ahb read data LSW (bits 15:0) register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     MICRO_RA_RDDATA_LSW These are the lower 16-bits of the read data from the AHB-Lite slave deviceRead transaction is initiated on the AHB-Lite when this register is read
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_RDDATA_LSWr (0x0001d20a | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_RDDATA_LSWr_SIZE 4

/*
 * This structure should be used to declare and program UC_AHB_RDDATA_LSW.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_RDDATA_LSWr_s {
	uint32_t v[1];
	uint32_t uc_ahb_rddata_lsw[1];
	uint32_t _uc_ahb_rddata_lsw;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_RDDATA_LSWr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_RDDATA_LSWr_CLR(r) (r).uc_ahb_rddata_lsw[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_RDDATA_LSWr_SET(r,d) (r).uc_ahb_rddata_lsw[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_RDDATA_LSWr_GET(r) (r).uc_ahb_rddata_lsw[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_RDDATA_LSWr_MICRO_RA_RDDATA_LSWf_GET(r) (((r).uc_ahb_rddata_lsw[0]) & 0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_RDDATA_LSWr_MICRO_RA_RDDATA_LSWf_SET(r,f) (r).uc_ahb_rddata_lsw[0]=(((r).uc_ahb_rddata_lsw[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access UC_AHB_RDDATA_LSW.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_AHB_RDDATA_LSWr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_RDDATA_LSWr,(_r._uc_ahb_rddata_lsw))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_AHB_RDDATA_LSWr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_RDDATA_LSWr,(_r._uc_ahb_rddata_lsw)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_AHB_RDDATA_LSWr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_RDDATA_LSWr,(_r._uc_ahb_rddata_lsw))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_AHB_RDDATA_LSWr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_RDDATA_LSWr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_ahb_rddata_lsw))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_AHB_RDDATA_LSWr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_RDDATA_LSWr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_ahb_rddata_lsw))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_AHB_RDDATA_LSWr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_RDDATA_LSWr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_ahb_rddata_lsw))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define UC_AHB_RDDATA_LSWr BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_RDDATA_LSWr
#define UC_AHB_RDDATA_LSWr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_RDDATA_LSWr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_RDDATA_LSWr_t UC_AHB_RDDATA_LSWr_t;
#define UC_AHB_RDDATA_LSWr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_RDDATA_LSWr_CLR
#define UC_AHB_RDDATA_LSWr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_RDDATA_LSWr_SET
#define UC_AHB_RDDATA_LSWr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_RDDATA_LSWr_GET
#define UC_AHB_RDDATA_LSWr_MICRO_RA_RDDATA_LSWf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_RDDATA_LSWr_MICRO_RA_RDDATA_LSWf_GET
#define UC_AHB_RDDATA_LSWr_MICRO_RA_RDDATA_LSWf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_RDDATA_LSWr_MICRO_RA_RDDATA_LSWf_SET
#define READ_UC_AHB_RDDATA_LSWr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_AHB_RDDATA_LSWr
#define WRITE_UC_AHB_RDDATA_LSWr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_AHB_RDDATA_LSWr
#define MODIFY_UC_AHB_RDDATA_LSWr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_AHB_RDDATA_LSWr
#define READLN_UC_AHB_RDDATA_LSWr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_AHB_RDDATA_LSWr
#define WRITELN_UC_AHB_RDDATA_LSWr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_AHB_RDDATA_LSWr
#define WRITEALL_UC_AHB_RDDATA_LSWr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_AHB_RDDATA_LSWr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_RDDATA_LSWr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  UC_AHB_RDDATA_MSW
 * BLOCKS:   MICRO_A
 * REGADDR:  0xd20b
 * DEVAD:    1
 * DESC:     rmi to ahb read data MSW (bits 31:16) register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     MICRO_RA_RDDATA_MSW These are the upper 16-bits of the read data from the AHB-Lite slave device
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_RDDATA_MSWr (0x0001d20b | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_RDDATA_MSWr_SIZE 4

/*
 * This structure should be used to declare and program UC_AHB_RDDATA_MSW.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_RDDATA_MSWr_s {
	uint32_t v[1];
	uint32_t uc_ahb_rddata_msw[1];
	uint32_t _uc_ahb_rddata_msw;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_RDDATA_MSWr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_RDDATA_MSWr_CLR(r) (r).uc_ahb_rddata_msw[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_RDDATA_MSWr_SET(r,d) (r).uc_ahb_rddata_msw[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_RDDATA_MSWr_GET(r) (r).uc_ahb_rddata_msw[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_RDDATA_MSWr_MICRO_RA_RDDATA_MSWf_GET(r) (((r).uc_ahb_rddata_msw[0]) & 0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_RDDATA_MSWr_MICRO_RA_RDDATA_MSWf_SET(r,f) (r).uc_ahb_rddata_msw[0]=(((r).uc_ahb_rddata_msw[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access UC_AHB_RDDATA_MSW.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_AHB_RDDATA_MSWr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_RDDATA_MSWr,(_r._uc_ahb_rddata_msw))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_AHB_RDDATA_MSWr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_RDDATA_MSWr,(_r._uc_ahb_rddata_msw)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_AHB_RDDATA_MSWr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_RDDATA_MSWr,(_r._uc_ahb_rddata_msw))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_AHB_RDDATA_MSWr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_RDDATA_MSWr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_ahb_rddata_msw))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_AHB_RDDATA_MSWr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_RDDATA_MSWr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_ahb_rddata_msw))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_AHB_RDDATA_MSWr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_RDDATA_MSWr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_ahb_rddata_msw))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define UC_AHB_RDDATA_MSWr BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_RDDATA_MSWr
#define UC_AHB_RDDATA_MSWr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_RDDATA_MSWr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_RDDATA_MSWr_t UC_AHB_RDDATA_MSWr_t;
#define UC_AHB_RDDATA_MSWr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_RDDATA_MSWr_CLR
#define UC_AHB_RDDATA_MSWr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_RDDATA_MSWr_SET
#define UC_AHB_RDDATA_MSWr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_RDDATA_MSWr_GET
#define UC_AHB_RDDATA_MSWr_MICRO_RA_RDDATA_MSWf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_RDDATA_MSWr_MICRO_RA_RDDATA_MSWf_GET
#define UC_AHB_RDDATA_MSWr_MICRO_RA_RDDATA_MSWf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_RDDATA_MSWr_MICRO_RA_RDDATA_MSWf_SET
#define READ_UC_AHB_RDDATA_MSWr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_AHB_RDDATA_MSWr
#define WRITE_UC_AHB_RDDATA_MSWr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_AHB_RDDATA_MSWr
#define MODIFY_UC_AHB_RDDATA_MSWr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_AHB_RDDATA_MSWr
#define READLN_UC_AHB_RDDATA_MSWr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_AHB_RDDATA_MSWr
#define WRITELN_UC_AHB_RDDATA_MSWr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_AHB_RDDATA_MSWr
#define WRITEALL_UC_AHB_RDDATA_MSWr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_AHB_RDDATA_MSWr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_AHB_RDDATA_MSWr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  UC_PRAMIF_CTL0
 * BLOCKS:   MICRO_A
 * REGADDR:  0xd20c
 * DEVAD:    1
 * DESC:     pram i/f to ahb control registers 0
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     MICRO_PRAMIF_EN  When this bit is set, pram if interface can generate write transactions on theAHB-Lite bus, the start address of the transaction is specifieldin the pramif_ahb_wraddr_lsw and pramif_ahb_wraddr_msw fields
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_PRAMIF_CTL0r (0x0001d20c | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_PRAMIF_CTL0r_SIZE 4

/*
 * This structure should be used to declare and program UC_PRAMIF_CTL0.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_PRAMIF_CTL0r_s {
	uint32_t v[1];
	uint32_t uc_pramif_ctl0[1];
	uint32_t _uc_pramif_ctl0;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_PRAMIF_CTL0r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_PRAMIF_CTL0r_CLR(r) (r).uc_pramif_ctl0[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_PRAMIF_CTL0r_SET(r,d) (r).uc_pramif_ctl0[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_PRAMIF_CTL0r_GET(r) (r).uc_pramif_ctl0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_PRAMIF_CTL0r_MICRO_PRAMIF_ENf_GET(r) (((r).uc_pramif_ctl0[0]) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_PRAMIF_CTL0r_MICRO_PRAMIF_ENf_SET(r,f) (r).uc_pramif_ctl0[0]=(((r).uc_pramif_ctl0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access UC_PRAMIF_CTL0.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_PRAMIF_CTL0r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_PRAMIF_CTL0r,(_r._uc_pramif_ctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_PRAMIF_CTL0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_PRAMIF_CTL0r,(_r._uc_pramif_ctl0)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_PRAMIF_CTL0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_PRAMIF_CTL0r,(_r._uc_pramif_ctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_PRAMIF_CTL0r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_PRAMIF_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_pramif_ctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_PRAMIF_CTL0r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_PRAMIF_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_pramif_ctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_PRAMIF_CTL0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_PRAMIF_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_pramif_ctl0))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define UC_PRAMIF_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_PRAMIF_CTL0r
#define UC_PRAMIF_CTL0r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_PRAMIF_CTL0r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_PRAMIF_CTL0r_t UC_PRAMIF_CTL0r_t;
#define UC_PRAMIF_CTL0r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_PRAMIF_CTL0r_CLR
#define UC_PRAMIF_CTL0r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_PRAMIF_CTL0r_SET
#define UC_PRAMIF_CTL0r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_PRAMIF_CTL0r_GET
#define UC_PRAMIF_CTL0r_MICRO_PRAMIF_ENf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_PRAMIF_CTL0r_MICRO_PRAMIF_ENf_GET
#define UC_PRAMIF_CTL0r_MICRO_PRAMIF_ENf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_PRAMIF_CTL0r_MICRO_PRAMIF_ENf_SET
#define READ_UC_PRAMIF_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_PRAMIF_CTL0r
#define WRITE_UC_PRAMIF_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_PRAMIF_CTL0r
#define MODIFY_UC_PRAMIF_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_PRAMIF_CTL0r
#define READLN_UC_PRAMIF_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_PRAMIF_CTL0r
#define WRITELN_UC_PRAMIF_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_PRAMIF_CTL0r
#define WRITEALL_UC_PRAMIF_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_PRAMIF_CTL0r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_PRAMIF_CTL0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  UC_PRAMIF_AHB_WRADDR_LSW
 * BLOCKS:   MICRO_A
 * REGADDR:  0xd20d
 * DEVAD:    1
 * DESC:     pram i/f to ahb write address LSW (bits 15:0) register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     MICRO_PRAMIF_AHB_WRADDR_LSW These bits are used to generate the lower 14-bits of the address on the AHB-Lite bus during pram interface write transactionsbits[1:0] are not used for 32 transactions
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_PRAMIF_AHB_WRADDR_LSWr (0x0001d20d | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_PRAMIF_AHB_WRADDR_LSWr_SIZE 4

/*
 * This structure should be used to declare and program UC_PRAMIF_AHB_WRADDR_LSW.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_PRAMIF_AHB_WRADDR_LSWr_s {
	uint32_t v[1];
	uint32_t uc_pramif_ahb_wraddr_lsw[1];
	uint32_t _uc_pramif_ahb_wraddr_lsw;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_PRAMIF_AHB_WRADDR_LSWr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_PRAMIF_AHB_WRADDR_LSWr_CLR(r) (r).uc_pramif_ahb_wraddr_lsw[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_PRAMIF_AHB_WRADDR_LSWr_SET(r,d) (r).uc_pramif_ahb_wraddr_lsw[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_PRAMIF_AHB_WRADDR_LSWr_GET(r) (r).uc_pramif_ahb_wraddr_lsw[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_PRAMIF_AHB_WRADDR_LSWr_MICRO_PRAMIF_AHB_WRADDR_LSWf_GET(r) ((((r).uc_pramif_ahb_wraddr_lsw[0]) >> 2) & 0x3fff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_PRAMIF_AHB_WRADDR_LSWr_MICRO_PRAMIF_AHB_WRADDR_LSWf_SET(r,f) (r).uc_pramif_ahb_wraddr_lsw[0]=(((r).uc_pramif_ahb_wraddr_lsw[0] & ~((uint32_t)0x3fff << 2)) | ((((uint32_t)f) & 0x3fff) << 2)) | (16383 << (16 + 2))

/*
 * These macros can be used to access UC_PRAMIF_AHB_WRADDR_LSW.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_PRAMIF_AHB_WRADDR_LSWr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_PRAMIF_AHB_WRADDR_LSWr,(_r._uc_pramif_ahb_wraddr_lsw))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_PRAMIF_AHB_WRADDR_LSWr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_PRAMIF_AHB_WRADDR_LSWr,(_r._uc_pramif_ahb_wraddr_lsw)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_PRAMIF_AHB_WRADDR_LSWr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_PRAMIF_AHB_WRADDR_LSWr,(_r._uc_pramif_ahb_wraddr_lsw))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_PRAMIF_AHB_WRADDR_LSWr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_PRAMIF_AHB_WRADDR_LSWr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_pramif_ahb_wraddr_lsw))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_PRAMIF_AHB_WRADDR_LSWr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_PRAMIF_AHB_WRADDR_LSWr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_pramif_ahb_wraddr_lsw))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_PRAMIF_AHB_WRADDR_LSWr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_PRAMIF_AHB_WRADDR_LSWr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_pramif_ahb_wraddr_lsw))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define UC_PRAMIF_AHB_WRADDR_LSWr BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_PRAMIF_AHB_WRADDR_LSWr
#define UC_PRAMIF_AHB_WRADDR_LSWr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_PRAMIF_AHB_WRADDR_LSWr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_PRAMIF_AHB_WRADDR_LSWr_t UC_PRAMIF_AHB_WRADDR_LSWr_t;
#define UC_PRAMIF_AHB_WRADDR_LSWr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_PRAMIF_AHB_WRADDR_LSWr_CLR
#define UC_PRAMIF_AHB_WRADDR_LSWr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_PRAMIF_AHB_WRADDR_LSWr_SET
#define UC_PRAMIF_AHB_WRADDR_LSWr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_PRAMIF_AHB_WRADDR_LSWr_GET
#define UC_PRAMIF_AHB_WRADDR_LSWr_MICRO_PRAMIF_AHB_WRADDR_LSWf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_PRAMIF_AHB_WRADDR_LSWr_MICRO_PRAMIF_AHB_WRADDR_LSWf_GET
#define UC_PRAMIF_AHB_WRADDR_LSWr_MICRO_PRAMIF_AHB_WRADDR_LSWf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_PRAMIF_AHB_WRADDR_LSWr_MICRO_PRAMIF_AHB_WRADDR_LSWf_SET
#define READ_UC_PRAMIF_AHB_WRADDR_LSWr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_PRAMIF_AHB_WRADDR_LSWr
#define WRITE_UC_PRAMIF_AHB_WRADDR_LSWr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_PRAMIF_AHB_WRADDR_LSWr
#define MODIFY_UC_PRAMIF_AHB_WRADDR_LSWr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_PRAMIF_AHB_WRADDR_LSWr
#define READLN_UC_PRAMIF_AHB_WRADDR_LSWr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_PRAMIF_AHB_WRADDR_LSWr
#define WRITELN_UC_PRAMIF_AHB_WRADDR_LSWr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_PRAMIF_AHB_WRADDR_LSWr
#define WRITEALL_UC_PRAMIF_AHB_WRADDR_LSWr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_PRAMIF_AHB_WRADDR_LSWr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_PRAMIF_AHB_WRADDR_LSWr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  UC_PRAMIF_AHB_WRADDR_MSW
 * BLOCKS:   MICRO_A
 * REGADDR:  0xd20e
 * DEVAD:    1
 * DESC:     pram i/f to ahb write address MSW (bits 31:16) register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     MICRO_PRAMIF_AHB_WRADDR_MSW These bits are used to generate the upper 16-bits of the address on the AHB-Lite bus during pram interface write transactions
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_PRAMIF_AHB_WRADDR_MSWr (0x0001d20e | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_PRAMIF_AHB_WRADDR_MSWr_SIZE 4

/*
 * This structure should be used to declare and program UC_PRAMIF_AHB_WRADDR_MSW.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_PRAMIF_AHB_WRADDR_MSWr_s {
	uint32_t v[1];
	uint32_t uc_pramif_ahb_wraddr_msw[1];
	uint32_t _uc_pramif_ahb_wraddr_msw;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_PRAMIF_AHB_WRADDR_MSWr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_PRAMIF_AHB_WRADDR_MSWr_CLR(r) (r).uc_pramif_ahb_wraddr_msw[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_PRAMIF_AHB_WRADDR_MSWr_SET(r,d) (r).uc_pramif_ahb_wraddr_msw[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_PRAMIF_AHB_WRADDR_MSWr_GET(r) (r).uc_pramif_ahb_wraddr_msw[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_PRAMIF_AHB_WRADDR_MSWr_MICRO_PRAMIF_AHB_WRADDR_MSWf_GET(r) (((r).uc_pramif_ahb_wraddr_msw[0]) & 0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_PRAMIF_AHB_WRADDR_MSWr_MICRO_PRAMIF_AHB_WRADDR_MSWf_SET(r,f) (r).uc_pramif_ahb_wraddr_msw[0]=(((r).uc_pramif_ahb_wraddr_msw[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access UC_PRAMIF_AHB_WRADDR_MSW.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_PRAMIF_AHB_WRADDR_MSWr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_PRAMIF_AHB_WRADDR_MSWr,(_r._uc_pramif_ahb_wraddr_msw))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_PRAMIF_AHB_WRADDR_MSWr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_PRAMIF_AHB_WRADDR_MSWr,(_r._uc_pramif_ahb_wraddr_msw)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_PRAMIF_AHB_WRADDR_MSWr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_PRAMIF_AHB_WRADDR_MSWr,(_r._uc_pramif_ahb_wraddr_msw))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_PRAMIF_AHB_WRADDR_MSWr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_PRAMIF_AHB_WRADDR_MSWr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_pramif_ahb_wraddr_msw))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_PRAMIF_AHB_WRADDR_MSWr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_PRAMIF_AHB_WRADDR_MSWr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_pramif_ahb_wraddr_msw))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_PRAMIF_AHB_WRADDR_MSWr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_PRAMIF_AHB_WRADDR_MSWr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_pramif_ahb_wraddr_msw))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define UC_PRAMIF_AHB_WRADDR_MSWr BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_PRAMIF_AHB_WRADDR_MSWr
#define UC_PRAMIF_AHB_WRADDR_MSWr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_PRAMIF_AHB_WRADDR_MSWr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_PRAMIF_AHB_WRADDR_MSWr_t UC_PRAMIF_AHB_WRADDR_MSWr_t;
#define UC_PRAMIF_AHB_WRADDR_MSWr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_PRAMIF_AHB_WRADDR_MSWr_CLR
#define UC_PRAMIF_AHB_WRADDR_MSWr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_PRAMIF_AHB_WRADDR_MSWr_SET
#define UC_PRAMIF_AHB_WRADDR_MSWr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_PRAMIF_AHB_WRADDR_MSWr_GET
#define UC_PRAMIF_AHB_WRADDR_MSWr_MICRO_PRAMIF_AHB_WRADDR_MSWf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_PRAMIF_AHB_WRADDR_MSWr_MICRO_PRAMIF_AHB_WRADDR_MSWf_GET
#define UC_PRAMIF_AHB_WRADDR_MSWr_MICRO_PRAMIF_AHB_WRADDR_MSWf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_PRAMIF_AHB_WRADDR_MSWr_MICRO_PRAMIF_AHB_WRADDR_MSWf_SET
#define READ_UC_PRAMIF_AHB_WRADDR_MSWr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_PRAMIF_AHB_WRADDR_MSWr
#define WRITE_UC_PRAMIF_AHB_WRADDR_MSWr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_PRAMIF_AHB_WRADDR_MSWr
#define MODIFY_UC_PRAMIF_AHB_WRADDR_MSWr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_PRAMIF_AHB_WRADDR_MSWr
#define READLN_UC_PRAMIF_AHB_WRADDR_MSWr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_PRAMIF_AHB_WRADDR_MSWr
#define WRITELN_UC_PRAMIF_AHB_WRADDR_MSWr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_PRAMIF_AHB_WRADDR_MSWr
#define WRITEALL_UC_PRAMIF_AHB_WRADDR_MSWr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_PRAMIF_AHB_WRADDR_MSWr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_PRAMIF_AHB_WRADDR_MSWr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  UC_PVT_STS0
 * BLOCKS:   MICRO_B
 * REGADDR:  0xd210
 * DEVAD:    1
 * DESC:     pvt temperature status register 0
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     MICRO_PVT_TEMPDATA_RMI temperature data{5'd0,tempearture_data[10:0]}reads the current value of the temperature data capatured
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_PVT_STS0r (0x0001d210 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_PVT_STS0r_SIZE 4

/*
 * This structure should be used to declare and program UC_PVT_STS0.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_PVT_STS0r_s {
	uint32_t v[1];
	uint32_t uc_pvt_sts0[1];
	uint32_t _uc_pvt_sts0;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_PVT_STS0r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_PVT_STS0r_CLR(r) (r).uc_pvt_sts0[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_PVT_STS0r_SET(r,d) (r).uc_pvt_sts0[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_PVT_STS0r_GET(r) (r).uc_pvt_sts0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_PVT_STS0r_MICRO_PVT_TEMPDATA_RMIf_GET(r) (((r).uc_pvt_sts0[0]) & 0x7ff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_PVT_STS0r_MICRO_PVT_TEMPDATA_RMIf_SET(r,f) (r).uc_pvt_sts0[0]=(((r).uc_pvt_sts0[0] & ~((uint32_t)0x7ff)) | (((uint32_t)f) & 0x7ff)) | (0x7ff << 16)

/*
 * These macros can be used to access UC_PVT_STS0.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_PVT_STS0r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_PVT_STS0r,(_r._uc_pvt_sts0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_PVT_STS0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_PVT_STS0r,(_r._uc_pvt_sts0)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_PVT_STS0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_PVT_STS0r,(_r._uc_pvt_sts0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_PVT_STS0r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_PVT_STS0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_pvt_sts0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_PVT_STS0r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_PVT_STS0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_pvt_sts0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_PVT_STS0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_PVT_STS0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_pvt_sts0))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define UC_PVT_STS0r BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_PVT_STS0r
#define UC_PVT_STS0r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_PVT_STS0r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_PVT_STS0r_t UC_PVT_STS0r_t;
#define UC_PVT_STS0r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_PVT_STS0r_CLR
#define UC_PVT_STS0r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_PVT_STS0r_SET
#define UC_PVT_STS0r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_PVT_STS0r_GET
#define UC_PVT_STS0r_MICRO_PVT_TEMPDATA_RMIf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_PVT_STS0r_MICRO_PVT_TEMPDATA_RMIf_GET
#define UC_PVT_STS0r_MICRO_PVT_TEMPDATA_RMIf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_PVT_STS0r_MICRO_PVT_TEMPDATA_RMIf_SET
#define READ_UC_PVT_STS0r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_PVT_STS0r
#define WRITE_UC_PVT_STS0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_PVT_STS0r
#define MODIFY_UC_PVT_STS0r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_PVT_STS0r
#define READLN_UC_PVT_STS0r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_PVT_STS0r
#define WRITELN_UC_PVT_STS0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_PVT_STS0r
#define WRITEALL_UC_PVT_STS0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_PVT_STS0r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_PVT_STS0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  UC_RMI_AHB_CTL1
 * BLOCKS:   MICRO_B
 * REGADDR:  0xd211
 * DEVAD:    1
 * DESC:     ahb control register 1
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     MICRO_PMI_HP_ACK_TIMEOUT_DIS pmi_hp_ack_timeout disableWhen micro initates a read/write transctions on the pmi_hp busit allows upto 256 clock cycles for pmi_hp_ack to be assertedIf pmi_hp_ack_* is not received within this time, then it1. terminates the current transactions on the pmi_hp bus2. set the pmi_hp_ack_timeout_status field of the ahbcommon_pmi_hp_status0 register.3. performs the response error signaling on the micro AHB bus when micro_m0p_hresp_en field is set to 1'b1This timeout period/error reporting/reponse error signaling can be disabled by setting this field i.e.0: enabled1: disabled
 *     MICRO_RA_ARG_MICROBLK_SEL select micro to access it's amba bus registers through the registers interface0 - select micro 0 amba registers1 - select micro 1 amba registers2 - select micro 2 amba registers3 - select micro 3 amba registers
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_AHB_CTL1r (0x0001d211 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_AHB_CTL1r_SIZE 4

/*
 * This structure should be used to declare and program UC_RMI_AHB_CTL1.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_AHB_CTL1r_s {
	uint32_t v[1];
	uint32_t uc_rmi_ahb_ctl1[1];
	uint32_t _uc_rmi_ahb_ctl1;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_AHB_CTL1r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_AHB_CTL1r_CLR(r) (r).uc_rmi_ahb_ctl1[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_AHB_CTL1r_SET(r,d) (r).uc_rmi_ahb_ctl1[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_AHB_CTL1r_GET(r) (r).uc_rmi_ahb_ctl1[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_AHB_CTL1r_MICRO_RA_ARG_MICROBLK_SELf_GET(r) ((((r).uc_rmi_ahb_ctl1[0]) >> 4) & 0x7)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_AHB_CTL1r_MICRO_RA_ARG_MICROBLK_SELf_SET(r,f) (r).uc_rmi_ahb_ctl1[0]=(((r).uc_rmi_ahb_ctl1[0] & ~((uint32_t)0x7 << 4)) | ((((uint32_t)f) & 0x7) << 4)) | (7 << (16 + 4))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_AHB_CTL1r_MICRO_PMI_HP_ACK_TIMEOUT_DISf_GET(r) (((r).uc_rmi_ahb_ctl1[0]) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_AHB_CTL1r_MICRO_PMI_HP_ACK_TIMEOUT_DISf_SET(r,f) (r).uc_rmi_ahb_ctl1[0]=(((r).uc_rmi_ahb_ctl1[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access UC_RMI_AHB_CTL1.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_RMI_AHB_CTL1r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_AHB_CTL1r,(_r._uc_rmi_ahb_ctl1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_RMI_AHB_CTL1r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_AHB_CTL1r,(_r._uc_rmi_ahb_ctl1)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_RMI_AHB_CTL1r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_AHB_CTL1r,(_r._uc_rmi_ahb_ctl1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_RMI_AHB_CTL1r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_AHB_CTL1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_rmi_ahb_ctl1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_RMI_AHB_CTL1r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_AHB_CTL1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_rmi_ahb_ctl1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_RMI_AHB_CTL1r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_AHB_CTL1r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_rmi_ahb_ctl1))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define UC_RMI_AHB_CTL1r BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_AHB_CTL1r
#define UC_RMI_AHB_CTL1r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_AHB_CTL1r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_AHB_CTL1r_t UC_RMI_AHB_CTL1r_t;
#define UC_RMI_AHB_CTL1r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_AHB_CTL1r_CLR
#define UC_RMI_AHB_CTL1r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_AHB_CTL1r_SET
#define UC_RMI_AHB_CTL1r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_AHB_CTL1r_GET
#define UC_RMI_AHB_CTL1r_MICRO_RA_ARG_MICROBLK_SELf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_AHB_CTL1r_MICRO_RA_ARG_MICROBLK_SELf_GET
#define UC_RMI_AHB_CTL1r_MICRO_RA_ARG_MICROBLK_SELf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_AHB_CTL1r_MICRO_RA_ARG_MICROBLK_SELf_SET
#define UC_RMI_AHB_CTL1r_MICRO_PMI_HP_ACK_TIMEOUT_DISf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_AHB_CTL1r_MICRO_PMI_HP_ACK_TIMEOUT_DISf_GET
#define UC_RMI_AHB_CTL1r_MICRO_PMI_HP_ACK_TIMEOUT_DISf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_AHB_CTL1r_MICRO_PMI_HP_ACK_TIMEOUT_DISf_SET
#define READ_UC_RMI_AHB_CTL1r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_RMI_AHB_CTL1r
#define WRITE_UC_RMI_AHB_CTL1r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_RMI_AHB_CTL1r
#define MODIFY_UC_RMI_AHB_CTL1r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_RMI_AHB_CTL1r
#define READLN_UC_RMI_AHB_CTL1r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_RMI_AHB_CTL1r
#define WRITELN_UC_RMI_AHB_CTL1r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_RMI_AHB_CTL1r
#define WRITEALL_UC_RMI_AHB_CTL1r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_RMI_AHB_CTL1r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_AHB_CTL1r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  UC_RMI_AHB_STS1
 * BLOCKS:   MICRO_B
 * REGADDR:  0xd212
 * DEVAD:    1
 * DESC:     ahb status register 1
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     MICRO_RMI_DEFAULT_SLAVE_ERROR register interface default slave error detected. Register interface attempted to access un-used address1 - error detected - latched high clear on read0 - no error
 *     MICRO_PR_DEFAULT_SLAVE_ERROR PRAM interface default slave error detected. PRAM interface attempted to access un-used address1 - error detected - latched high clear on read0 - no error
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_AHB_STS1r (0x0001d212 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_AHB_STS1r_SIZE 4

/*
 * This structure should be used to declare and program UC_RMI_AHB_STS1.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_AHB_STS1r_s {
	uint32_t v[1];
	uint32_t uc_rmi_ahb_sts1[1];
	uint32_t _uc_rmi_ahb_sts1;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_AHB_STS1r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_AHB_STS1r_CLR(r) (r).uc_rmi_ahb_sts1[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_AHB_STS1r_SET(r,d) (r).uc_rmi_ahb_sts1[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_AHB_STS1r_GET(r) (r).uc_rmi_ahb_sts1[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_AHB_STS1r_MICRO_PR_DEFAULT_SLAVE_ERRORf_GET(r) ((((r).uc_rmi_ahb_sts1[0]) >> 1) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_AHB_STS1r_MICRO_PR_DEFAULT_SLAVE_ERRORf_SET(r,f) (r).uc_rmi_ahb_sts1[0]=(((r).uc_rmi_ahb_sts1[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_AHB_STS1r_MICRO_RMI_DEFAULT_SLAVE_ERRORf_GET(r) (((r).uc_rmi_ahb_sts1[0]) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_AHB_STS1r_MICRO_RMI_DEFAULT_SLAVE_ERRORf_SET(r,f) (r).uc_rmi_ahb_sts1[0]=(((r).uc_rmi_ahb_sts1[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access UC_RMI_AHB_STS1.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_RMI_AHB_STS1r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_AHB_STS1r,(_r._uc_rmi_ahb_sts1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_RMI_AHB_STS1r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_AHB_STS1r,(_r._uc_rmi_ahb_sts1)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_RMI_AHB_STS1r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_AHB_STS1r,(_r._uc_rmi_ahb_sts1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_RMI_AHB_STS1r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_AHB_STS1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_rmi_ahb_sts1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_RMI_AHB_STS1r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_AHB_STS1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_rmi_ahb_sts1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_RMI_AHB_STS1r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_AHB_STS1r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_rmi_ahb_sts1))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define UC_RMI_AHB_STS1r BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_AHB_STS1r
#define UC_RMI_AHB_STS1r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_AHB_STS1r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_AHB_STS1r_t UC_RMI_AHB_STS1r_t;
#define UC_RMI_AHB_STS1r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_AHB_STS1r_CLR
#define UC_RMI_AHB_STS1r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_AHB_STS1r_SET
#define UC_RMI_AHB_STS1r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_AHB_STS1r_GET
#define UC_RMI_AHB_STS1r_MICRO_PR_DEFAULT_SLAVE_ERRORf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_AHB_STS1r_MICRO_PR_DEFAULT_SLAVE_ERRORf_GET
#define UC_RMI_AHB_STS1r_MICRO_PR_DEFAULT_SLAVE_ERRORf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_AHB_STS1r_MICRO_PR_DEFAULT_SLAVE_ERRORf_SET
#define UC_RMI_AHB_STS1r_MICRO_RMI_DEFAULT_SLAVE_ERRORf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_AHB_STS1r_MICRO_RMI_DEFAULT_SLAVE_ERRORf_GET
#define UC_RMI_AHB_STS1r_MICRO_RMI_DEFAULT_SLAVE_ERRORf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_AHB_STS1r_MICRO_RMI_DEFAULT_SLAVE_ERRORf_SET
#define READ_UC_RMI_AHB_STS1r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_RMI_AHB_STS1r
#define WRITE_UC_RMI_AHB_STS1r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_RMI_AHB_STS1r
#define MODIFY_UC_RMI_AHB_STS1r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_RMI_AHB_STS1r
#define READLN_UC_RMI_AHB_STS1r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_RMI_AHB_STS1r
#define WRITELN_UC_RMI_AHB_STS1r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_RMI_AHB_STS1r
#define WRITEALL_UC_RMI_AHB_STS1r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_RMI_AHB_STS1r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_AHB_STS1r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  UC_RMI_RA_AINC_NXT_WRADDR_LSW
 * BLOCKS:   MICRO_B
 * REGADDR:  0xd213
 * DEVAD:    1
 * DESC:     rmi to ahb auto-incremented write address LSW (bits 15:0) register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     MICRO_RA_AUTOINC_NXT_WRADDR_LSW When the micro_autoinc_wraddr_en is set, then these bitsindicate the lower 16-bits of the address that will be usedduring the next write transaction.These bits allow address tracking when rmi interface auto addressincrement mode is used
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_RA_AINC_NXT_WRADDR_LSWr (0x0001d213 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_RA_AINC_NXT_WRADDR_LSWr_SIZE 4

/*
 * This structure should be used to declare and program UC_RMI_RA_AINC_NXT_WRADDR_LSW.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_RA_AINC_NXT_WRADDR_LSWr_s {
	uint32_t v[1];
	uint32_t uc_rmi_ra_ainc_nxt_wraddr_lsw[1];
	uint32_t _uc_rmi_ra_ainc_nxt_wraddr_lsw;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_RA_AINC_NXT_WRADDR_LSWr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_RA_AINC_NXT_WRADDR_LSWr_CLR(r) (r).uc_rmi_ra_ainc_nxt_wraddr_lsw[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_RA_AINC_NXT_WRADDR_LSWr_SET(r,d) (r).uc_rmi_ra_ainc_nxt_wraddr_lsw[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_RA_AINC_NXT_WRADDR_LSWr_GET(r) (r).uc_rmi_ra_ainc_nxt_wraddr_lsw[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_RA_AINC_NXT_WRADDR_LSWr_MICRO_RA_AUTOINC_NXT_WRADDR_LSWf_GET(r) (((r).uc_rmi_ra_ainc_nxt_wraddr_lsw[0]) & 0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_RA_AINC_NXT_WRADDR_LSWr_MICRO_RA_AUTOINC_NXT_WRADDR_LSWf_SET(r,f) (r).uc_rmi_ra_ainc_nxt_wraddr_lsw[0]=(((r).uc_rmi_ra_ainc_nxt_wraddr_lsw[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access UC_RMI_RA_AINC_NXT_WRADDR_LSW.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_RMI_RA_AINC_NXT_WRADDR_LSWr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_RA_AINC_NXT_WRADDR_LSWr,(_r._uc_rmi_ra_ainc_nxt_wraddr_lsw))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_RMI_RA_AINC_NXT_WRADDR_LSWr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_RA_AINC_NXT_WRADDR_LSWr,(_r._uc_rmi_ra_ainc_nxt_wraddr_lsw)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_RMI_RA_AINC_NXT_WRADDR_LSWr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_RA_AINC_NXT_WRADDR_LSWr,(_r._uc_rmi_ra_ainc_nxt_wraddr_lsw))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_RMI_RA_AINC_NXT_WRADDR_LSWr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_RA_AINC_NXT_WRADDR_LSWr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_rmi_ra_ainc_nxt_wraddr_lsw))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_RMI_RA_AINC_NXT_WRADDR_LSWr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_RA_AINC_NXT_WRADDR_LSWr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_rmi_ra_ainc_nxt_wraddr_lsw))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_RMI_RA_AINC_NXT_WRADDR_LSWr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_RA_AINC_NXT_WRADDR_LSWr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_rmi_ra_ainc_nxt_wraddr_lsw))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define UC_RMI_RA_AINC_NXT_WRADDR_LSWr BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_RA_AINC_NXT_WRADDR_LSWr
#define UC_RMI_RA_AINC_NXT_WRADDR_LSWr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_RA_AINC_NXT_WRADDR_LSWr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_RA_AINC_NXT_WRADDR_LSWr_t UC_RMI_RA_AINC_NXT_WRADDR_LSWr_t;
#define UC_RMI_RA_AINC_NXT_WRADDR_LSWr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_RA_AINC_NXT_WRADDR_LSWr_CLR
#define UC_RMI_RA_AINC_NXT_WRADDR_LSWr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_RA_AINC_NXT_WRADDR_LSWr_SET
#define UC_RMI_RA_AINC_NXT_WRADDR_LSWr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_RA_AINC_NXT_WRADDR_LSWr_GET
#define UC_RMI_RA_AINC_NXT_WRADDR_LSWr_MICRO_RA_AUTOINC_NXT_WRADDR_LSWf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_RA_AINC_NXT_WRADDR_LSWr_MICRO_RA_AUTOINC_NXT_WRADDR_LSWf_GET
#define UC_RMI_RA_AINC_NXT_WRADDR_LSWr_MICRO_RA_AUTOINC_NXT_WRADDR_LSWf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_RA_AINC_NXT_WRADDR_LSWr_MICRO_RA_AUTOINC_NXT_WRADDR_LSWf_SET
#define READ_UC_RMI_RA_AINC_NXT_WRADDR_LSWr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_RMI_RA_AINC_NXT_WRADDR_LSWr
#define WRITE_UC_RMI_RA_AINC_NXT_WRADDR_LSWr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_RMI_RA_AINC_NXT_WRADDR_LSWr
#define MODIFY_UC_RMI_RA_AINC_NXT_WRADDR_LSWr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_RMI_RA_AINC_NXT_WRADDR_LSWr
#define READLN_UC_RMI_RA_AINC_NXT_WRADDR_LSWr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_RMI_RA_AINC_NXT_WRADDR_LSWr
#define WRITELN_UC_RMI_RA_AINC_NXT_WRADDR_LSWr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_RMI_RA_AINC_NXT_WRADDR_LSWr
#define WRITEALL_UC_RMI_RA_AINC_NXT_WRADDR_LSWr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_RMI_RA_AINC_NXT_WRADDR_LSWr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_RA_AINC_NXT_WRADDR_LSWr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  UC_RMI_RA_AINC_NXT_RDADDR_LSW
 * BLOCKS:   MICRO_B
 * REGADDR:  0xd214
 * DEVAD:    1
 * DESC:     rmi to ahb auto-incremented read address LSW (bits 15:0) register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     MICRO_RA_AUTOINC_NXT_RDADDR_LSW When the micro_autoinc_rdaddr_en is set, then these bitsindicate the lower 16-bits of the address that will be usedduring the next read transaction.These bits allow address tracking when rmi interface auto addressincrement mode is used
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_RA_AINC_NXT_RDADDR_LSWr (0x0001d214 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_RA_AINC_NXT_RDADDR_LSWr_SIZE 4

/*
 * This structure should be used to declare and program UC_RMI_RA_AINC_NXT_RDADDR_LSW.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_RA_AINC_NXT_RDADDR_LSWr_s {
	uint32_t v[1];
	uint32_t uc_rmi_ra_ainc_nxt_rdaddr_lsw[1];
	uint32_t _uc_rmi_ra_ainc_nxt_rdaddr_lsw;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_RA_AINC_NXT_RDADDR_LSWr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_RA_AINC_NXT_RDADDR_LSWr_CLR(r) (r).uc_rmi_ra_ainc_nxt_rdaddr_lsw[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_RA_AINC_NXT_RDADDR_LSWr_SET(r,d) (r).uc_rmi_ra_ainc_nxt_rdaddr_lsw[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_RA_AINC_NXT_RDADDR_LSWr_GET(r) (r).uc_rmi_ra_ainc_nxt_rdaddr_lsw[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_RA_AINC_NXT_RDADDR_LSWr_MICRO_RA_AUTOINC_NXT_RDADDR_LSWf_GET(r) (((r).uc_rmi_ra_ainc_nxt_rdaddr_lsw[0]) & 0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_RA_AINC_NXT_RDADDR_LSWr_MICRO_RA_AUTOINC_NXT_RDADDR_LSWf_SET(r,f) (r).uc_rmi_ra_ainc_nxt_rdaddr_lsw[0]=(((r).uc_rmi_ra_ainc_nxt_rdaddr_lsw[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access UC_RMI_RA_AINC_NXT_RDADDR_LSW.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_RMI_RA_AINC_NXT_RDADDR_LSWr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_RA_AINC_NXT_RDADDR_LSWr,(_r._uc_rmi_ra_ainc_nxt_rdaddr_lsw))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_RMI_RA_AINC_NXT_RDADDR_LSWr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_RA_AINC_NXT_RDADDR_LSWr,(_r._uc_rmi_ra_ainc_nxt_rdaddr_lsw)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_RMI_RA_AINC_NXT_RDADDR_LSWr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_RA_AINC_NXT_RDADDR_LSWr,(_r._uc_rmi_ra_ainc_nxt_rdaddr_lsw))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_RMI_RA_AINC_NXT_RDADDR_LSWr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_RA_AINC_NXT_RDADDR_LSWr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_rmi_ra_ainc_nxt_rdaddr_lsw))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_RMI_RA_AINC_NXT_RDADDR_LSWr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_RA_AINC_NXT_RDADDR_LSWr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_rmi_ra_ainc_nxt_rdaddr_lsw))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_RMI_RA_AINC_NXT_RDADDR_LSWr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_RA_AINC_NXT_RDADDR_LSWr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_rmi_ra_ainc_nxt_rdaddr_lsw))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define UC_RMI_RA_AINC_NXT_RDADDR_LSWr BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_RA_AINC_NXT_RDADDR_LSWr
#define UC_RMI_RA_AINC_NXT_RDADDR_LSWr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_RA_AINC_NXT_RDADDR_LSWr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_RA_AINC_NXT_RDADDR_LSWr_t UC_RMI_RA_AINC_NXT_RDADDR_LSWr_t;
#define UC_RMI_RA_AINC_NXT_RDADDR_LSWr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_RA_AINC_NXT_RDADDR_LSWr_CLR
#define UC_RMI_RA_AINC_NXT_RDADDR_LSWr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_RA_AINC_NXT_RDADDR_LSWr_SET
#define UC_RMI_RA_AINC_NXT_RDADDR_LSWr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_RA_AINC_NXT_RDADDR_LSWr_GET
#define UC_RMI_RA_AINC_NXT_RDADDR_LSWr_MICRO_RA_AUTOINC_NXT_RDADDR_LSWf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_RA_AINC_NXT_RDADDR_LSWr_MICRO_RA_AUTOINC_NXT_RDADDR_LSWf_GET
#define UC_RMI_RA_AINC_NXT_RDADDR_LSWr_MICRO_RA_AUTOINC_NXT_RDADDR_LSWf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_RA_AINC_NXT_RDADDR_LSWr_MICRO_RA_AUTOINC_NXT_RDADDR_LSWf_SET
#define READ_UC_RMI_RA_AINC_NXT_RDADDR_LSWr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_RMI_RA_AINC_NXT_RDADDR_LSWr
#define WRITE_UC_RMI_RA_AINC_NXT_RDADDR_LSWr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_RMI_RA_AINC_NXT_RDADDR_LSWr
#define MODIFY_UC_RMI_RA_AINC_NXT_RDADDR_LSWr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_RMI_RA_AINC_NXT_RDADDR_LSWr
#define READLN_UC_RMI_RA_AINC_NXT_RDADDR_LSWr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_RMI_RA_AINC_NXT_RDADDR_LSWr
#define WRITELN_UC_RMI_RA_AINC_NXT_RDADDR_LSWr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_RMI_RA_AINC_NXT_RDADDR_LSWr
#define WRITEALL_UC_RMI_RA_AINC_NXT_RDADDR_LSWr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_RMI_RA_AINC_NXT_RDADDR_LSWr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_RA_AINC_NXT_RDADDR_LSWr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  UC_RMI_PR_AINC_NXT_WRADDR_LSW
 * BLOCKS:   MICRO_B
 * REGADDR:  0xd215
 * DEVAD:    1
 * DESC:     pram i/f to ahb auto-incremented write address LSW (bits 15:0) register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     MICRO_PR_AUTOINC_NXT_WRADDR_LSW When pram interface is used to write to the code/data RAMthen these bits indicate the lower 16-bits of the address that will be usedduring the next write transaction.These bits allow address tracking
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_PR_AINC_NXT_WRADDR_LSWr (0x0001d215 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_PR_AINC_NXT_WRADDR_LSWr_SIZE 4

/*
 * This structure should be used to declare and program UC_RMI_PR_AINC_NXT_WRADDR_LSW.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_PR_AINC_NXT_WRADDR_LSWr_s {
	uint32_t v[1];
	uint32_t uc_rmi_pr_ainc_nxt_wraddr_lsw[1];
	uint32_t _uc_rmi_pr_ainc_nxt_wraddr_lsw;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_PR_AINC_NXT_WRADDR_LSWr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_PR_AINC_NXT_WRADDR_LSWr_CLR(r) (r).uc_rmi_pr_ainc_nxt_wraddr_lsw[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_PR_AINC_NXT_WRADDR_LSWr_SET(r,d) (r).uc_rmi_pr_ainc_nxt_wraddr_lsw[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_PR_AINC_NXT_WRADDR_LSWr_GET(r) (r).uc_rmi_pr_ainc_nxt_wraddr_lsw[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_PR_AINC_NXT_WRADDR_LSWr_MICRO_PR_AUTOINC_NXT_WRADDR_LSWf_GET(r) (((r).uc_rmi_pr_ainc_nxt_wraddr_lsw[0]) & 0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_PR_AINC_NXT_WRADDR_LSWr_MICRO_PR_AUTOINC_NXT_WRADDR_LSWf_SET(r,f) (r).uc_rmi_pr_ainc_nxt_wraddr_lsw[0]=(((r).uc_rmi_pr_ainc_nxt_wraddr_lsw[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access UC_RMI_PR_AINC_NXT_WRADDR_LSW.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_RMI_PR_AINC_NXT_WRADDR_LSWr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_PR_AINC_NXT_WRADDR_LSWr,(_r._uc_rmi_pr_ainc_nxt_wraddr_lsw))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_RMI_PR_AINC_NXT_WRADDR_LSWr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_PR_AINC_NXT_WRADDR_LSWr,(_r._uc_rmi_pr_ainc_nxt_wraddr_lsw)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_RMI_PR_AINC_NXT_WRADDR_LSWr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_PR_AINC_NXT_WRADDR_LSWr,(_r._uc_rmi_pr_ainc_nxt_wraddr_lsw))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_RMI_PR_AINC_NXT_WRADDR_LSWr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_PR_AINC_NXT_WRADDR_LSWr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_rmi_pr_ainc_nxt_wraddr_lsw))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_RMI_PR_AINC_NXT_WRADDR_LSWr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_PR_AINC_NXT_WRADDR_LSWr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_rmi_pr_ainc_nxt_wraddr_lsw))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_RMI_PR_AINC_NXT_WRADDR_LSWr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_PR_AINC_NXT_WRADDR_LSWr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_rmi_pr_ainc_nxt_wraddr_lsw))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define UC_RMI_PR_AINC_NXT_WRADDR_LSWr BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_PR_AINC_NXT_WRADDR_LSWr
#define UC_RMI_PR_AINC_NXT_WRADDR_LSWr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_PR_AINC_NXT_WRADDR_LSWr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_PR_AINC_NXT_WRADDR_LSWr_t UC_RMI_PR_AINC_NXT_WRADDR_LSWr_t;
#define UC_RMI_PR_AINC_NXT_WRADDR_LSWr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_PR_AINC_NXT_WRADDR_LSWr_CLR
#define UC_RMI_PR_AINC_NXT_WRADDR_LSWr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_PR_AINC_NXT_WRADDR_LSWr_SET
#define UC_RMI_PR_AINC_NXT_WRADDR_LSWr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_PR_AINC_NXT_WRADDR_LSWr_GET
#define UC_RMI_PR_AINC_NXT_WRADDR_LSWr_MICRO_PR_AUTOINC_NXT_WRADDR_LSWf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_PR_AINC_NXT_WRADDR_LSWr_MICRO_PR_AUTOINC_NXT_WRADDR_LSWf_GET
#define UC_RMI_PR_AINC_NXT_WRADDR_LSWr_MICRO_PR_AUTOINC_NXT_WRADDR_LSWf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_PR_AINC_NXT_WRADDR_LSWr_MICRO_PR_AUTOINC_NXT_WRADDR_LSWf_SET
#define READ_UC_RMI_PR_AINC_NXT_WRADDR_LSWr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_RMI_PR_AINC_NXT_WRADDR_LSWr
#define WRITE_UC_RMI_PR_AINC_NXT_WRADDR_LSWr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_RMI_PR_AINC_NXT_WRADDR_LSWr
#define MODIFY_UC_RMI_PR_AINC_NXT_WRADDR_LSWr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_RMI_PR_AINC_NXT_WRADDR_LSWr
#define READLN_UC_RMI_PR_AINC_NXT_WRADDR_LSWr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_RMI_PR_AINC_NXT_WRADDR_LSWr
#define WRITELN_UC_RMI_PR_AINC_NXT_WRADDR_LSWr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_RMI_PR_AINC_NXT_WRADDR_LSWr
#define WRITEALL_UC_RMI_PR_AINC_NXT_WRADDR_LSWr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_RMI_PR_AINC_NXT_WRADDR_LSWr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_PR_AINC_NXT_WRADDR_LSWr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  UC_RMI_PVT_CTL0
 * BLOCKS:   MICRO_B
 * REGADDR:  0xd216
 * DEVAD:    1
 * DESC:     rmi pvt temperature control register 0
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     MICRO_PVT_TEMPDATA_FRCVAL temperature data force valueWhen micro_pvt_tempdata_frc field is set to 1'b1 then micro_pvt_tempdata_frcvalfield is used to set the temperature value. The temperature value can be readvia micro_pvt_tempdata_rmi field of the pvt_status0 register orvia ahbcommon_pvt_tempdata filed of the ahbcommon_pvt_tempdata register
 *     MICRO_PVT_TEMPDATA_FRC temperature dat force enableWhen micro_pvt_tempdata_frc field is set to 1'b1 then micro_pvt_tempdata_frcvalfield is used to set the temperature value. The temperature value can be readvia micro_pvt_tempdata_rmi field of the pvt_status0 register orvia ahbcommon_pvt_tempdata filed of the ahbcommon_pvt_tempdata register
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_PVT_CTL0r (0x0001d216 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_PVT_CTL0r_SIZE 4

/*
 * This structure should be used to declare and program UC_RMI_PVT_CTL0.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_PVT_CTL0r_s {
	uint32_t v[1];
	uint32_t uc_rmi_pvt_ctl0[1];
	uint32_t _uc_rmi_pvt_ctl0;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_PVT_CTL0r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_PVT_CTL0r_CLR(r) (r).uc_rmi_pvt_ctl0[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_PVT_CTL0r_SET(r,d) (r).uc_rmi_pvt_ctl0[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_PVT_CTL0r_GET(r) (r).uc_rmi_pvt_ctl0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_PVT_CTL0r_MICRO_PVT_TEMPDATA_FRCf_GET(r) ((((r).uc_rmi_pvt_ctl0[0]) >> 12) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_PVT_CTL0r_MICRO_PVT_TEMPDATA_FRCf_SET(r,f) (r).uc_rmi_pvt_ctl0[0]=(((r).uc_rmi_pvt_ctl0[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12)) | (1 << (16 + 12))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_PVT_CTL0r_MICRO_PVT_TEMPDATA_FRCVALf_GET(r) (((r).uc_rmi_pvt_ctl0[0]) & 0x7ff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_PVT_CTL0r_MICRO_PVT_TEMPDATA_FRCVALf_SET(r,f) (r).uc_rmi_pvt_ctl0[0]=(((r).uc_rmi_pvt_ctl0[0] & ~((uint32_t)0x7ff)) | (((uint32_t)f) & 0x7ff)) | (0x7ff << 16)

/*
 * These macros can be used to access UC_RMI_PVT_CTL0.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_RMI_PVT_CTL0r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_PVT_CTL0r,(_r._uc_rmi_pvt_ctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_RMI_PVT_CTL0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_PVT_CTL0r,(_r._uc_rmi_pvt_ctl0)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_RMI_PVT_CTL0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_PVT_CTL0r,(_r._uc_rmi_pvt_ctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_RMI_PVT_CTL0r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_PVT_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_rmi_pvt_ctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_RMI_PVT_CTL0r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_PVT_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_rmi_pvt_ctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_RMI_PVT_CTL0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_PVT_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_rmi_pvt_ctl0))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define UC_RMI_PVT_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_PVT_CTL0r
#define UC_RMI_PVT_CTL0r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_PVT_CTL0r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_PVT_CTL0r_t UC_RMI_PVT_CTL0r_t;
#define UC_RMI_PVT_CTL0r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_PVT_CTL0r_CLR
#define UC_RMI_PVT_CTL0r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_PVT_CTL0r_SET
#define UC_RMI_PVT_CTL0r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_PVT_CTL0r_GET
#define UC_RMI_PVT_CTL0r_MICRO_PVT_TEMPDATA_FRCf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_PVT_CTL0r_MICRO_PVT_TEMPDATA_FRCf_GET
#define UC_RMI_PVT_CTL0r_MICRO_PVT_TEMPDATA_FRCf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_PVT_CTL0r_MICRO_PVT_TEMPDATA_FRCf_SET
#define UC_RMI_PVT_CTL0r_MICRO_PVT_TEMPDATA_FRCVALf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_PVT_CTL0r_MICRO_PVT_TEMPDATA_FRCVALf_GET
#define UC_RMI_PVT_CTL0r_MICRO_PVT_TEMPDATA_FRCVALf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_PVT_CTL0r_MICRO_PVT_TEMPDATA_FRCVALf_SET
#define READ_UC_RMI_PVT_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_RMI_PVT_CTL0r
#define WRITE_UC_RMI_PVT_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_RMI_PVT_CTL0r
#define MODIFY_UC_RMI_PVT_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_RMI_PVT_CTL0r
#define READLN_UC_RMI_PVT_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_RMI_PVT_CTL0r
#define WRITELN_UC_RMI_PVT_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_RMI_PVT_CTL0r
#define WRITEALL_UC_RMI_PVT_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_RMI_PVT_CTL0r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_PVT_CTL0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  UC_RMI_RAM_CR_CRCCTL0
 * BLOCKS:   MICRO_B
 * REGADDR:  0xd217
 * DEVAD:    1
 * DESC:     code ram crc control 0 register
 * RESETVAL: 0x3 (3)
 * ACCESS:   R/W
 * FIELDS:
 *     MICRO_CR_CRC_CALC_EN Calculate/Update CRC16 CCITT checksum enable1: calculate new CRC16 CCITT checksum when RAM is written0: do not calculate (or stop calculating) CRC16 CCITT checksum when RAM is written
 *     MICRO_CR_CRC_INIT Code RAM CRC16 CCITT checksum initializeWhen thes micro_cr_crc_init is set to 1'b1, it initialize CRC16 CCITT checksum to 16'hFFFF{micro_cr_crc_init, micro_cr_crc_calc_en}2'b1x   - initialize crc checksum to 16'hFFFF2'b01   - update/calculate CRC upon writes to the code RAM
 *     MICRO_CR_CRC_PRTSEL This field selects the RAM port to be used for CRC calculation0 - Select Port A1 - Select Port B
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_RAM_CR_CRCCTL0r (0x0001d217 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_RAM_CR_CRCCTL0r_SIZE 4

/*
 * This structure should be used to declare and program UC_RMI_RAM_CR_CRCCTL0.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_RAM_CR_CRCCTL0r_s {
	uint32_t v[1];
	uint32_t uc_rmi_ram_cr_crcctl0[1];
	uint32_t _uc_rmi_ram_cr_crcctl0;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_RAM_CR_CRCCTL0r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_RAM_CR_CRCCTL0r_CLR(r) (r).uc_rmi_ram_cr_crcctl0[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_RAM_CR_CRCCTL0r_SET(r,d) (r).uc_rmi_ram_cr_crcctl0[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_RAM_CR_CRCCTL0r_GET(r) (r).uc_rmi_ram_cr_crcctl0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_RAM_CR_CRCCTL0r_MICRO_CR_CRC_PRTSELf_GET(r) ((((r).uc_rmi_ram_cr_crcctl0[0]) >> 2) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_RAM_CR_CRCCTL0r_MICRO_CR_CRC_PRTSELf_SET(r,f) (r).uc_rmi_ram_cr_crcctl0[0]=(((r).uc_rmi_ram_cr_crcctl0[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_RAM_CR_CRCCTL0r_MICRO_CR_CRC_INITf_GET(r) ((((r).uc_rmi_ram_cr_crcctl0[0]) >> 1) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_RAM_CR_CRCCTL0r_MICRO_CR_CRC_INITf_SET(r,f) (r).uc_rmi_ram_cr_crcctl0[0]=(((r).uc_rmi_ram_cr_crcctl0[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_RAM_CR_CRCCTL0r_MICRO_CR_CRC_CALC_ENf_GET(r) (((r).uc_rmi_ram_cr_crcctl0[0]) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_RAM_CR_CRCCTL0r_MICRO_CR_CRC_CALC_ENf_SET(r,f) (r).uc_rmi_ram_cr_crcctl0[0]=(((r).uc_rmi_ram_cr_crcctl0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access UC_RMI_RAM_CR_CRCCTL0.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_RMI_RAM_CR_CRCCTL0r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_RAM_CR_CRCCTL0r,(_r._uc_rmi_ram_cr_crcctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_RMI_RAM_CR_CRCCTL0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_RAM_CR_CRCCTL0r,(_r._uc_rmi_ram_cr_crcctl0)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_RMI_RAM_CR_CRCCTL0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_RAM_CR_CRCCTL0r,(_r._uc_rmi_ram_cr_crcctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_RMI_RAM_CR_CRCCTL0r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_RAM_CR_CRCCTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_rmi_ram_cr_crcctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_RMI_RAM_CR_CRCCTL0r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_RAM_CR_CRCCTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_rmi_ram_cr_crcctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_RMI_RAM_CR_CRCCTL0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_RAM_CR_CRCCTL0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_rmi_ram_cr_crcctl0))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define UC_RMI_RAM_CR_CRCCTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_RAM_CR_CRCCTL0r
#define UC_RMI_RAM_CR_CRCCTL0r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_RAM_CR_CRCCTL0r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_RAM_CR_CRCCTL0r_t UC_RMI_RAM_CR_CRCCTL0r_t;
#define UC_RMI_RAM_CR_CRCCTL0r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_RAM_CR_CRCCTL0r_CLR
#define UC_RMI_RAM_CR_CRCCTL0r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_RAM_CR_CRCCTL0r_SET
#define UC_RMI_RAM_CR_CRCCTL0r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_RAM_CR_CRCCTL0r_GET
#define UC_RMI_RAM_CR_CRCCTL0r_MICRO_CR_CRC_PRTSELf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_RAM_CR_CRCCTL0r_MICRO_CR_CRC_PRTSELf_GET
#define UC_RMI_RAM_CR_CRCCTL0r_MICRO_CR_CRC_PRTSELf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_RAM_CR_CRCCTL0r_MICRO_CR_CRC_PRTSELf_SET
#define UC_RMI_RAM_CR_CRCCTL0r_MICRO_CR_CRC_INITf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_RAM_CR_CRCCTL0r_MICRO_CR_CRC_INITf_GET
#define UC_RMI_RAM_CR_CRCCTL0r_MICRO_CR_CRC_INITf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_RAM_CR_CRCCTL0r_MICRO_CR_CRC_INITf_SET
#define UC_RMI_RAM_CR_CRCCTL0r_MICRO_CR_CRC_CALC_ENf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_RAM_CR_CRCCTL0r_MICRO_CR_CRC_CALC_ENf_GET
#define UC_RMI_RAM_CR_CRCCTL0r_MICRO_CR_CRC_CALC_ENf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_RAM_CR_CRCCTL0r_MICRO_CR_CRC_CALC_ENf_SET
#define READ_UC_RMI_RAM_CR_CRCCTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_RMI_RAM_CR_CRCCTL0r
#define WRITE_UC_RMI_RAM_CR_CRCCTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_RMI_RAM_CR_CRCCTL0r
#define MODIFY_UC_RMI_RAM_CR_CRCCTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_RMI_RAM_CR_CRCCTL0r
#define READLN_UC_RMI_RAM_CR_CRCCTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_RMI_RAM_CR_CRCCTL0r
#define WRITELN_UC_RMI_RAM_CR_CRCCTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_RMI_RAM_CR_CRCCTL0r
#define WRITEALL_UC_RMI_RAM_CR_CRCCTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_RMI_RAM_CR_CRCCTL0r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_RAM_CR_CRCCTL0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  UC_RMI_RAM_CR_CRCSTS0
 * BLOCKS:   MICRO_B
 * REGADDR:  0xd218
 * DEVAD:    1
 * DESC:     code ram crc status 0 register
 * RESETVAL: 0xffff (65535)
 * ACCESS:   R/O
 * FIELDS:
 *     MICRO_CR_CRC_CHECKSUM This field indicate the current crc16 ccitt checksum.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_RAM_CR_CRCSTS0r (0x0001d218 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_RAM_CR_CRCSTS0r_SIZE 4

/*
 * This structure should be used to declare and program UC_RMI_RAM_CR_CRCSTS0.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_RAM_CR_CRCSTS0r_s {
	uint32_t v[1];
	uint32_t uc_rmi_ram_cr_crcsts0[1];
	uint32_t _uc_rmi_ram_cr_crcsts0;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_RAM_CR_CRCSTS0r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_RAM_CR_CRCSTS0r_CLR(r) (r).uc_rmi_ram_cr_crcsts0[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_RAM_CR_CRCSTS0r_SET(r,d) (r).uc_rmi_ram_cr_crcsts0[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_RAM_CR_CRCSTS0r_GET(r) (r).uc_rmi_ram_cr_crcsts0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_RAM_CR_CRCSTS0r_MICRO_CR_CRC_CHECKSUMf_GET(r) (((r).uc_rmi_ram_cr_crcsts0[0]) & 0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_RAM_CR_CRCSTS0r_MICRO_CR_CRC_CHECKSUMf_SET(r,f) (r).uc_rmi_ram_cr_crcsts0[0]=(((r).uc_rmi_ram_cr_crcsts0[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access UC_RMI_RAM_CR_CRCSTS0.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_RMI_RAM_CR_CRCSTS0r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_RAM_CR_CRCSTS0r,(_r._uc_rmi_ram_cr_crcsts0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_RMI_RAM_CR_CRCSTS0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_RAM_CR_CRCSTS0r,(_r._uc_rmi_ram_cr_crcsts0)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_RMI_RAM_CR_CRCSTS0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_RAM_CR_CRCSTS0r,(_r._uc_rmi_ram_cr_crcsts0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_RMI_RAM_CR_CRCSTS0r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_RAM_CR_CRCSTS0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_rmi_ram_cr_crcsts0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_RMI_RAM_CR_CRCSTS0r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_RAM_CR_CRCSTS0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_rmi_ram_cr_crcsts0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_RMI_RAM_CR_CRCSTS0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_RAM_CR_CRCSTS0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_rmi_ram_cr_crcsts0))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define UC_RMI_RAM_CR_CRCSTS0r BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_RAM_CR_CRCSTS0r
#define UC_RMI_RAM_CR_CRCSTS0r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_RAM_CR_CRCSTS0r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_RAM_CR_CRCSTS0r_t UC_RMI_RAM_CR_CRCSTS0r_t;
#define UC_RMI_RAM_CR_CRCSTS0r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_RAM_CR_CRCSTS0r_CLR
#define UC_RMI_RAM_CR_CRCSTS0r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_RAM_CR_CRCSTS0r_SET
#define UC_RMI_RAM_CR_CRCSTS0r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_RAM_CR_CRCSTS0r_GET
#define UC_RMI_RAM_CR_CRCSTS0r_MICRO_CR_CRC_CHECKSUMf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_RAM_CR_CRCSTS0r_MICRO_CR_CRC_CHECKSUMf_GET
#define UC_RMI_RAM_CR_CRCSTS0r_MICRO_CR_CRC_CHECKSUMf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_RAM_CR_CRCSTS0r_MICRO_CR_CRC_CHECKSUMf_SET
#define READ_UC_RMI_RAM_CR_CRCSTS0r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_RMI_RAM_CR_CRCSTS0r
#define WRITE_UC_RMI_RAM_CR_CRCSTS0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_RMI_RAM_CR_CRCSTS0r
#define MODIFY_UC_RMI_RAM_CR_CRCSTS0r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_RMI_RAM_CR_CRCSTS0r
#define READLN_UC_RMI_RAM_CR_CRCSTS0r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_RMI_RAM_CR_CRCSTS0r
#define WRITELN_UC_RMI_RAM_CR_CRCSTS0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_RMI_RAM_CR_CRCSTS0r
#define WRITEALL_UC_RMI_RAM_CR_CRCSTS0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_RMI_RAM_CR_CRCSTS0r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_RAM_CR_CRCSTS0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  UC_RMI_UC_HARDFAULT_CTL0
 * BLOCKS:   MICRO_B
 * REGADDR:  0xd219
 * DEVAD:    1
 * DESC:     micro hard fault control 0 register
 * RESETVAL: 0xe01 (3585)
 * ACCESS:   R/W
 * FIELDS:
 *     MICRO_PMI_HP_ERROR_INTR_EN Enable interrupt on IRQ2 when pmi_hp_error signal is asserted by RMICduring pmi_hp bus tranactions1 - Enable0 - Disable
 *     MICRO_PMI_HP_WORD_ACCESS_ERR_INTR_EN Enable interrupt on IRQ2 when M0P performs 32-bit operations to access on pmi_hp busOnly 8/16-bits operations are allowed1 - Enable0 - Disable
 *     MICRO_PMI_HP_ACK_TIMEOUT_INTR_EN Enable interrupt on IRQ2 when pmi_hp_ack signal timeout on the pmi_hp busdoes not toggle within 256 clock cycle1 - Enable0 - Disable
 *     MICRO_M0P_DEFAULT_SLAVE_ERROR_INTR_EN Enable interrupt on IRQ2 when M0P detects default slave error.Default slave error are detected when M0P attempted to access un-used address1 - Enable0 - Disable
 *     MICRO_PMI_HP_ERROR_HRESP_EN Enable HRESP hard fault signaling when pmi_hp_error signal is asserted by RMICduring pmi_hp bus tranactions1 - Enable0 - Disable
 *     MICRO_PMI_HP_WORD_ACCESS_ERR_HRESP_EN Enable HRESP hard fault signaling when M0P performs 32-bit operations to access on pmi_hp busOnly 8/16-bits operations are allowed1 - Enable0 - Disable
 *     MICRO_PMI_HP_ACK_TIMEOUT_HRESP_EN Enable HRESP hard fault signaling  when pmi_hp_ack signal timeout on the pmi_hp busdoes not toggle within 256 clock cycle1 - Enable0 - Disable
 *     MICRO_M0P_DEFAULT_SLAVE_ERROR_HRESP_EN Enable HRESP hard fault signaling when M0P detects default slave error.Default slave error are detected when M0P attempted to access un-used address1 - Enable0 - Disable
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_HARDFAULT_CTL0r (0x0001d219 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_HARDFAULT_CTL0r_SIZE 4

/*
 * This structure should be used to declare and program UC_RMI_UC_HARDFAULT_CTL0.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_HARDFAULT_CTL0r_s {
	uint32_t v[1];
	uint32_t uc_rmi_uc_hardfault_ctl0[1];
	uint32_t _uc_rmi_uc_hardfault_ctl0;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_HARDFAULT_CTL0r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_HARDFAULT_CTL0r_CLR(r) (r).uc_rmi_uc_hardfault_ctl0[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_HARDFAULT_CTL0r_SET(r,d) (r).uc_rmi_uc_hardfault_ctl0[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_HARDFAULT_CTL0r_GET(r) (r).uc_rmi_uc_hardfault_ctl0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_HARDFAULT_CTL0r_MICRO_M0P_DEFAULT_SLAVE_ERROR_HRESP_ENf_GET(r) ((((r).uc_rmi_uc_hardfault_ctl0[0]) >> 11) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_HARDFAULT_CTL0r_MICRO_M0P_DEFAULT_SLAVE_ERROR_HRESP_ENf_SET(r,f) (r).uc_rmi_uc_hardfault_ctl0[0]=(((r).uc_rmi_uc_hardfault_ctl0[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11)) | (1 << (16 + 11))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_HARDFAULT_CTL0r_MICRO_PMI_HP_ACK_TIMEOUT_HRESP_ENf_GET(r) ((((r).uc_rmi_uc_hardfault_ctl0[0]) >> 10) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_HARDFAULT_CTL0r_MICRO_PMI_HP_ACK_TIMEOUT_HRESP_ENf_SET(r,f) (r).uc_rmi_uc_hardfault_ctl0[0]=(((r).uc_rmi_uc_hardfault_ctl0[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10)) | (1 << (16 + 10))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_HARDFAULT_CTL0r_MICRO_PMI_HP_WORD_ACCESS_ERR_HRESP_ENf_GET(r) ((((r).uc_rmi_uc_hardfault_ctl0[0]) >> 9) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_HARDFAULT_CTL0r_MICRO_PMI_HP_WORD_ACCESS_ERR_HRESP_ENf_SET(r,f) (r).uc_rmi_uc_hardfault_ctl0[0]=(((r).uc_rmi_uc_hardfault_ctl0[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9)) | (1 << (16 + 9))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_HARDFAULT_CTL0r_MICRO_PMI_HP_ERROR_HRESP_ENf_GET(r) ((((r).uc_rmi_uc_hardfault_ctl0[0]) >> 8) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_HARDFAULT_CTL0r_MICRO_PMI_HP_ERROR_HRESP_ENf_SET(r,f) (r).uc_rmi_uc_hardfault_ctl0[0]=(((r).uc_rmi_uc_hardfault_ctl0[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8)) | (1 << (16 + 8))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_HARDFAULT_CTL0r_MICRO_M0P_DEFAULT_SLAVE_ERROR_INTR_ENf_GET(r) ((((r).uc_rmi_uc_hardfault_ctl0[0]) >> 3) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_HARDFAULT_CTL0r_MICRO_M0P_DEFAULT_SLAVE_ERROR_INTR_ENf_SET(r,f) (r).uc_rmi_uc_hardfault_ctl0[0]=(((r).uc_rmi_uc_hardfault_ctl0[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_HARDFAULT_CTL0r_MICRO_PMI_HP_ACK_TIMEOUT_INTR_ENf_GET(r) ((((r).uc_rmi_uc_hardfault_ctl0[0]) >> 2) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_HARDFAULT_CTL0r_MICRO_PMI_HP_ACK_TIMEOUT_INTR_ENf_SET(r,f) (r).uc_rmi_uc_hardfault_ctl0[0]=(((r).uc_rmi_uc_hardfault_ctl0[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_HARDFAULT_CTL0r_MICRO_PMI_HP_WORD_ACCESS_ERR_INTR_ENf_GET(r) ((((r).uc_rmi_uc_hardfault_ctl0[0]) >> 1) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_HARDFAULT_CTL0r_MICRO_PMI_HP_WORD_ACCESS_ERR_INTR_ENf_SET(r,f) (r).uc_rmi_uc_hardfault_ctl0[0]=(((r).uc_rmi_uc_hardfault_ctl0[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_HARDFAULT_CTL0r_MICRO_PMI_HP_ERROR_INTR_ENf_GET(r) (((r).uc_rmi_uc_hardfault_ctl0[0]) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_HARDFAULT_CTL0r_MICRO_PMI_HP_ERROR_INTR_ENf_SET(r,f) (r).uc_rmi_uc_hardfault_ctl0[0]=(((r).uc_rmi_uc_hardfault_ctl0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access UC_RMI_UC_HARDFAULT_CTL0.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_RMI_UC_HARDFAULT_CTL0r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_HARDFAULT_CTL0r,(_r._uc_rmi_uc_hardfault_ctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_RMI_UC_HARDFAULT_CTL0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_HARDFAULT_CTL0r,(_r._uc_rmi_uc_hardfault_ctl0)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_RMI_UC_HARDFAULT_CTL0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_HARDFAULT_CTL0r,(_r._uc_rmi_uc_hardfault_ctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_RMI_UC_HARDFAULT_CTL0r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_HARDFAULT_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_rmi_uc_hardfault_ctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_RMI_UC_HARDFAULT_CTL0r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_HARDFAULT_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_rmi_uc_hardfault_ctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_RMI_UC_HARDFAULT_CTL0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_HARDFAULT_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_rmi_uc_hardfault_ctl0))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define UC_RMI_UC_HARDFAULT_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_HARDFAULT_CTL0r
#define UC_RMI_UC_HARDFAULT_CTL0r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_HARDFAULT_CTL0r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_HARDFAULT_CTL0r_t UC_RMI_UC_HARDFAULT_CTL0r_t;
#define UC_RMI_UC_HARDFAULT_CTL0r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_HARDFAULT_CTL0r_CLR
#define UC_RMI_UC_HARDFAULT_CTL0r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_HARDFAULT_CTL0r_SET
#define UC_RMI_UC_HARDFAULT_CTL0r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_HARDFAULT_CTL0r_GET
#define UC_RMI_UC_HARDFAULT_CTL0r_MICRO_M0P_DEFAULT_SLAVE_ERROR_HRESP_ENf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_HARDFAULT_CTL0r_MICRO_M0P_DEFAULT_SLAVE_ERROR_HRESP_ENf_GET
#define UC_RMI_UC_HARDFAULT_CTL0r_MICRO_M0P_DEFAULT_SLAVE_ERROR_HRESP_ENf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_HARDFAULT_CTL0r_MICRO_M0P_DEFAULT_SLAVE_ERROR_HRESP_ENf_SET
#define UC_RMI_UC_HARDFAULT_CTL0r_MICRO_PMI_HP_ACK_TIMEOUT_HRESP_ENf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_HARDFAULT_CTL0r_MICRO_PMI_HP_ACK_TIMEOUT_HRESP_ENf_GET
#define UC_RMI_UC_HARDFAULT_CTL0r_MICRO_PMI_HP_ACK_TIMEOUT_HRESP_ENf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_HARDFAULT_CTL0r_MICRO_PMI_HP_ACK_TIMEOUT_HRESP_ENf_SET
#define UC_RMI_UC_HARDFAULT_CTL0r_MICRO_PMI_HP_WORD_ACCESS_ERR_HRESP_ENf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_HARDFAULT_CTL0r_MICRO_PMI_HP_WORD_ACCESS_ERR_HRESP_ENf_GET
#define UC_RMI_UC_HARDFAULT_CTL0r_MICRO_PMI_HP_WORD_ACCESS_ERR_HRESP_ENf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_HARDFAULT_CTL0r_MICRO_PMI_HP_WORD_ACCESS_ERR_HRESP_ENf_SET
#define UC_RMI_UC_HARDFAULT_CTL0r_MICRO_PMI_HP_ERROR_HRESP_ENf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_HARDFAULT_CTL0r_MICRO_PMI_HP_ERROR_HRESP_ENf_GET
#define UC_RMI_UC_HARDFAULT_CTL0r_MICRO_PMI_HP_ERROR_HRESP_ENf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_HARDFAULT_CTL0r_MICRO_PMI_HP_ERROR_HRESP_ENf_SET
#define UC_RMI_UC_HARDFAULT_CTL0r_MICRO_M0P_DEFAULT_SLAVE_ERROR_INTR_ENf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_HARDFAULT_CTL0r_MICRO_M0P_DEFAULT_SLAVE_ERROR_INTR_ENf_GET
#define UC_RMI_UC_HARDFAULT_CTL0r_MICRO_M0P_DEFAULT_SLAVE_ERROR_INTR_ENf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_HARDFAULT_CTL0r_MICRO_M0P_DEFAULT_SLAVE_ERROR_INTR_ENf_SET
#define UC_RMI_UC_HARDFAULT_CTL0r_MICRO_PMI_HP_ACK_TIMEOUT_INTR_ENf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_HARDFAULT_CTL0r_MICRO_PMI_HP_ACK_TIMEOUT_INTR_ENf_GET
#define UC_RMI_UC_HARDFAULT_CTL0r_MICRO_PMI_HP_ACK_TIMEOUT_INTR_ENf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_HARDFAULT_CTL0r_MICRO_PMI_HP_ACK_TIMEOUT_INTR_ENf_SET
#define UC_RMI_UC_HARDFAULT_CTL0r_MICRO_PMI_HP_WORD_ACCESS_ERR_INTR_ENf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_HARDFAULT_CTL0r_MICRO_PMI_HP_WORD_ACCESS_ERR_INTR_ENf_GET
#define UC_RMI_UC_HARDFAULT_CTL0r_MICRO_PMI_HP_WORD_ACCESS_ERR_INTR_ENf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_HARDFAULT_CTL0r_MICRO_PMI_HP_WORD_ACCESS_ERR_INTR_ENf_SET
#define UC_RMI_UC_HARDFAULT_CTL0r_MICRO_PMI_HP_ERROR_INTR_ENf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_HARDFAULT_CTL0r_MICRO_PMI_HP_ERROR_INTR_ENf_GET
#define UC_RMI_UC_HARDFAULT_CTL0r_MICRO_PMI_HP_ERROR_INTR_ENf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_HARDFAULT_CTL0r_MICRO_PMI_HP_ERROR_INTR_ENf_SET
#define READ_UC_RMI_UC_HARDFAULT_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_RMI_UC_HARDFAULT_CTL0r
#define WRITE_UC_RMI_UC_HARDFAULT_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_RMI_UC_HARDFAULT_CTL0r
#define MODIFY_UC_RMI_UC_HARDFAULT_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_RMI_UC_HARDFAULT_CTL0r
#define READLN_UC_RMI_UC_HARDFAULT_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_RMI_UC_HARDFAULT_CTL0r
#define WRITELN_UC_RMI_UC_HARDFAULT_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_RMI_UC_HARDFAULT_CTL0r
#define WRITEALL_UC_RMI_UC_HARDFAULT_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_RMI_UC_HARDFAULT_CTL0r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_HARDFAULT_CTL0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  UC_RMI_UC_SDK_STS0
 * BLOCKS:   MICRO_B
 * REGADDR:  0xd21a
 * DEVAD:    1
 * DESC:     micro SDK status 0 register
 * RESETVAL: 0x4000 (16384)
 * ACCESS:   R/O
 * FIELDS:
 *     MICRO_UC_ACTIVE_0 Indicates if micro core 0 is active1 - active0 - not active
 *     MICRO_UC_ACTIVE_1 Indicates if micro core 1 is active1 - active0 - not active
 *     MICRO_UC_ACTIVE_2 Indicates if micro core 2 is active1 - active0 - not active
 *     MICRO_UC_ACTIVE_3 Indicates if micro core 3 is active1 - active0 - not active
 *     MICRO_NUM_UC_CORES Number of micro cores in the micro controller subsystemrange is 1 to 15
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_SDK_STS0r (0x0001d21a | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_SDK_STS0r_SIZE 4

/*
 * This structure should be used to declare and program UC_RMI_UC_SDK_STS0.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_SDK_STS0r_s {
	uint32_t v[1];
	uint32_t uc_rmi_uc_sdk_sts0[1];
	uint32_t _uc_rmi_uc_sdk_sts0;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_SDK_STS0r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_SDK_STS0r_CLR(r) (r).uc_rmi_uc_sdk_sts0[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_SDK_STS0r_SET(r,d) (r).uc_rmi_uc_sdk_sts0[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_SDK_STS0r_GET(r) (r).uc_rmi_uc_sdk_sts0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_SDK_STS0r_MICRO_NUM_UC_CORESf_GET(r) ((((r).uc_rmi_uc_sdk_sts0[0]) >> 12) & 0xf)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_SDK_STS0r_MICRO_NUM_UC_CORESf_SET(r,f) (r).uc_rmi_uc_sdk_sts0[0]=(((r).uc_rmi_uc_sdk_sts0[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12)) | (15 << (16 + 12))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_SDK_STS0r_MICRO_UC_ACTIVE_3f_GET(r) ((((r).uc_rmi_uc_sdk_sts0[0]) >> 3) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_SDK_STS0r_MICRO_UC_ACTIVE_3f_SET(r,f) (r).uc_rmi_uc_sdk_sts0[0]=(((r).uc_rmi_uc_sdk_sts0[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_SDK_STS0r_MICRO_UC_ACTIVE_2f_GET(r) ((((r).uc_rmi_uc_sdk_sts0[0]) >> 2) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_SDK_STS0r_MICRO_UC_ACTIVE_2f_SET(r,f) (r).uc_rmi_uc_sdk_sts0[0]=(((r).uc_rmi_uc_sdk_sts0[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_SDK_STS0r_MICRO_UC_ACTIVE_1f_GET(r) ((((r).uc_rmi_uc_sdk_sts0[0]) >> 1) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_SDK_STS0r_MICRO_UC_ACTIVE_1f_SET(r,f) (r).uc_rmi_uc_sdk_sts0[0]=(((r).uc_rmi_uc_sdk_sts0[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_SDK_STS0r_MICRO_UC_ACTIVE_0f_GET(r) (((r).uc_rmi_uc_sdk_sts0[0]) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_SDK_STS0r_MICRO_UC_ACTIVE_0f_SET(r,f) (r).uc_rmi_uc_sdk_sts0[0]=(((r).uc_rmi_uc_sdk_sts0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access UC_RMI_UC_SDK_STS0.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_RMI_UC_SDK_STS0r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_SDK_STS0r,(_r._uc_rmi_uc_sdk_sts0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_RMI_UC_SDK_STS0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_SDK_STS0r,(_r._uc_rmi_uc_sdk_sts0)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_RMI_UC_SDK_STS0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_SDK_STS0r,(_r._uc_rmi_uc_sdk_sts0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_RMI_UC_SDK_STS0r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_SDK_STS0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_rmi_uc_sdk_sts0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_RMI_UC_SDK_STS0r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_SDK_STS0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_rmi_uc_sdk_sts0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_RMI_UC_SDK_STS0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_SDK_STS0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_rmi_uc_sdk_sts0))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define UC_RMI_UC_SDK_STS0r BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_SDK_STS0r
#define UC_RMI_UC_SDK_STS0r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_SDK_STS0r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_SDK_STS0r_t UC_RMI_UC_SDK_STS0r_t;
#define UC_RMI_UC_SDK_STS0r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_SDK_STS0r_CLR
#define UC_RMI_UC_SDK_STS0r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_SDK_STS0r_SET
#define UC_RMI_UC_SDK_STS0r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_SDK_STS0r_GET
#define UC_RMI_UC_SDK_STS0r_MICRO_NUM_UC_CORESf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_SDK_STS0r_MICRO_NUM_UC_CORESf_GET
#define UC_RMI_UC_SDK_STS0r_MICRO_NUM_UC_CORESf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_SDK_STS0r_MICRO_NUM_UC_CORESf_SET
#define UC_RMI_UC_SDK_STS0r_MICRO_UC_ACTIVE_3f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_SDK_STS0r_MICRO_UC_ACTIVE_3f_GET
#define UC_RMI_UC_SDK_STS0r_MICRO_UC_ACTIVE_3f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_SDK_STS0r_MICRO_UC_ACTIVE_3f_SET
#define UC_RMI_UC_SDK_STS0r_MICRO_UC_ACTIVE_2f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_SDK_STS0r_MICRO_UC_ACTIVE_2f_GET
#define UC_RMI_UC_SDK_STS0r_MICRO_UC_ACTIVE_2f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_SDK_STS0r_MICRO_UC_ACTIVE_2f_SET
#define UC_RMI_UC_SDK_STS0r_MICRO_UC_ACTIVE_1f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_SDK_STS0r_MICRO_UC_ACTIVE_1f_GET
#define UC_RMI_UC_SDK_STS0r_MICRO_UC_ACTIVE_1f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_SDK_STS0r_MICRO_UC_ACTIVE_1f_SET
#define UC_RMI_UC_SDK_STS0r_MICRO_UC_ACTIVE_0f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_SDK_STS0r_MICRO_UC_ACTIVE_0f_GET
#define UC_RMI_UC_SDK_STS0r_MICRO_UC_ACTIVE_0f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_SDK_STS0r_MICRO_UC_ACTIVE_0f_SET
#define READ_UC_RMI_UC_SDK_STS0r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_RMI_UC_SDK_STS0r
#define WRITE_UC_RMI_UC_SDK_STS0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_RMI_UC_SDK_STS0r
#define MODIFY_UC_RMI_UC_SDK_STS0r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_RMI_UC_SDK_STS0r
#define READLN_UC_RMI_UC_SDK_STS0r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_RMI_UC_SDK_STS0r
#define WRITELN_UC_RMI_UC_SDK_STS0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_RMI_UC_SDK_STS0r
#define WRITEALL_UC_RMI_UC_SDK_STS0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_RMI_UC_SDK_STS0r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_SDK_STS0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  UC_RMI_UC_DBGGER_ID_LSW
 * BLOCKS:   MICRO_B
 * REGADDR:  0xd21b
 * DEVAD:    1
 * DESC:     micro debugger id bits [15:0]
 * RESETVAL: 0x817f (33151)
 * ACCESS:   R/O
 * FIELDS:
 *     MICRO_DEBUGGER_ID_LSW micro debugger id bits [15:0]32bit debugger id consists of [31:0] = {micro core instance_id[3:0], micro_swdbg_id_strap[7:0], revid0[7:0], brcm jtag id bits [11:0]}Where:micro core instance id[3:0]  = 0,1,2,3..15 for micro core 0,1,2,3..15. Maps to bits [31:28]. Please see micro_num_uc_coresmicro_swdbg_id_strap[7:0]    = external input, shared with mdio controller. Maps to bits [27:20]revid0[7:0]                  = revid0 bits [7:0]. Map bits[19:12]BRCM jtag ID[11:0]           = {JEP106 continuation[3:0], JEP106 identification[6:0], 1'b1} = 12'h17F. Maps to bits [11:0]
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_DBGGER_ID_LSWr (0x0001d21b | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_DBGGER_ID_LSWr_SIZE 4

/*
 * This structure should be used to declare and program UC_RMI_UC_DBGGER_ID_LSW.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_DBGGER_ID_LSWr_s {
	uint32_t v[1];
	uint32_t uc_rmi_uc_dbgger_id_lsw[1];
	uint32_t _uc_rmi_uc_dbgger_id_lsw;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_DBGGER_ID_LSWr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_DBGGER_ID_LSWr_CLR(r) (r).uc_rmi_uc_dbgger_id_lsw[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_DBGGER_ID_LSWr_SET(r,d) (r).uc_rmi_uc_dbgger_id_lsw[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_DBGGER_ID_LSWr_GET(r) (r).uc_rmi_uc_dbgger_id_lsw[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_DBGGER_ID_LSWr_MICRO_DEBUGGER_ID_LSWf_GET(r) (((r).uc_rmi_uc_dbgger_id_lsw[0]) & 0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_DBGGER_ID_LSWr_MICRO_DEBUGGER_ID_LSWf_SET(r,f) (r).uc_rmi_uc_dbgger_id_lsw[0]=(((r).uc_rmi_uc_dbgger_id_lsw[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access UC_RMI_UC_DBGGER_ID_LSW.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_RMI_UC_DBGGER_ID_LSWr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_DBGGER_ID_LSWr,(_r._uc_rmi_uc_dbgger_id_lsw))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_RMI_UC_DBGGER_ID_LSWr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_DBGGER_ID_LSWr,(_r._uc_rmi_uc_dbgger_id_lsw)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_RMI_UC_DBGGER_ID_LSWr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_DBGGER_ID_LSWr,(_r._uc_rmi_uc_dbgger_id_lsw))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_RMI_UC_DBGGER_ID_LSWr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_DBGGER_ID_LSWr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_rmi_uc_dbgger_id_lsw))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_RMI_UC_DBGGER_ID_LSWr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_DBGGER_ID_LSWr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_rmi_uc_dbgger_id_lsw))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_RMI_UC_DBGGER_ID_LSWr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_DBGGER_ID_LSWr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_rmi_uc_dbgger_id_lsw))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define UC_RMI_UC_DBGGER_ID_LSWr BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_DBGGER_ID_LSWr
#define UC_RMI_UC_DBGGER_ID_LSWr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_DBGGER_ID_LSWr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_DBGGER_ID_LSWr_t UC_RMI_UC_DBGGER_ID_LSWr_t;
#define UC_RMI_UC_DBGGER_ID_LSWr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_DBGGER_ID_LSWr_CLR
#define UC_RMI_UC_DBGGER_ID_LSWr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_DBGGER_ID_LSWr_SET
#define UC_RMI_UC_DBGGER_ID_LSWr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_DBGGER_ID_LSWr_GET
#define UC_RMI_UC_DBGGER_ID_LSWr_MICRO_DEBUGGER_ID_LSWf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_DBGGER_ID_LSWr_MICRO_DEBUGGER_ID_LSWf_GET
#define UC_RMI_UC_DBGGER_ID_LSWr_MICRO_DEBUGGER_ID_LSWf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_DBGGER_ID_LSWr_MICRO_DEBUGGER_ID_LSWf_SET
#define READ_UC_RMI_UC_DBGGER_ID_LSWr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_RMI_UC_DBGGER_ID_LSWr
#define WRITE_UC_RMI_UC_DBGGER_ID_LSWr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_RMI_UC_DBGGER_ID_LSWr
#define MODIFY_UC_RMI_UC_DBGGER_ID_LSWr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_RMI_UC_DBGGER_ID_LSWr
#define READLN_UC_RMI_UC_DBGGER_ID_LSWr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_RMI_UC_DBGGER_ID_LSWr
#define WRITELN_UC_RMI_UC_DBGGER_ID_LSWr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_RMI_UC_DBGGER_ID_LSWr
#define WRITEALL_UC_RMI_UC_DBGGER_ID_LSWr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_RMI_UC_DBGGER_ID_LSWr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_DBGGER_ID_LSWr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  UC_RMI_UC_DBGGER_ID_MSW
 * BLOCKS:   MICRO_B
 * REGADDR:  0xd21c
 * DEVAD:    1
 * DESC:     micro debugger id bits [27:16]
 * RESETVAL: 0x2 (2)
 * ACCESS:   R/O
 * FIELDS:
 *     MICRO_DEBUGGER_ID_MSW micro debugger id bits [27:16]32bit debugger id consists of [31:0] = {micro core instance_id[3:0], micro_swdbg_id_strap[7:0], revid0[7:0], brcm jtag id bits [11:0]}Where:micro core instance id[3:0]  = 0,1,2,3..15 for micro core 0,1,2,3..15. Maps to bits [31:28]. Please see micro_num_uc_coresmicro_swdbg_id_strap[7:0]    = external input, shared with mdio controller. Maps to bits [27:20]revid0[7:0]                  = revid0 bits [7:0]. Map bits[19:12]BRCM jtag ID[11:0]           = {JEP106 continuation[3:0], JEP106 identification[6:0], 1'b1} = 12'h17F. Maps to bits [11:0]Note: the default value assume  micro_swdbg_id_strap[7:0] = 8'd0
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_DBGGER_ID_MSWr (0x0001d21c | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_DBGGER_ID_MSWr_SIZE 4

/*
 * This structure should be used to declare and program UC_RMI_UC_DBGGER_ID_MSW.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_DBGGER_ID_MSWr_s {
	uint32_t v[1];
	uint32_t uc_rmi_uc_dbgger_id_msw[1];
	uint32_t _uc_rmi_uc_dbgger_id_msw;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_DBGGER_ID_MSWr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_DBGGER_ID_MSWr_CLR(r) (r).uc_rmi_uc_dbgger_id_msw[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_DBGGER_ID_MSWr_SET(r,d) (r).uc_rmi_uc_dbgger_id_msw[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_DBGGER_ID_MSWr_GET(r) (r).uc_rmi_uc_dbgger_id_msw[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_DBGGER_ID_MSWr_MICRO_DEBUGGER_ID_MSWf_GET(r) (((r).uc_rmi_uc_dbgger_id_msw[0]) & 0xfff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_DBGGER_ID_MSWr_MICRO_DEBUGGER_ID_MSWf_SET(r,f) (r).uc_rmi_uc_dbgger_id_msw[0]=(((r).uc_rmi_uc_dbgger_id_msw[0] & ~((uint32_t)0xfff)) | (((uint32_t)f) & 0xfff)) | (0xfff << 16)

/*
 * These macros can be used to access UC_RMI_UC_DBGGER_ID_MSW.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_RMI_UC_DBGGER_ID_MSWr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_DBGGER_ID_MSWr,(_r._uc_rmi_uc_dbgger_id_msw))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_RMI_UC_DBGGER_ID_MSWr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_DBGGER_ID_MSWr,(_r._uc_rmi_uc_dbgger_id_msw)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_RMI_UC_DBGGER_ID_MSWr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_DBGGER_ID_MSWr,(_r._uc_rmi_uc_dbgger_id_msw))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_RMI_UC_DBGGER_ID_MSWr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_DBGGER_ID_MSWr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_rmi_uc_dbgger_id_msw))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_RMI_UC_DBGGER_ID_MSWr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_DBGGER_ID_MSWr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_rmi_uc_dbgger_id_msw))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_RMI_UC_DBGGER_ID_MSWr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_DBGGER_ID_MSWr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_rmi_uc_dbgger_id_msw))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define UC_RMI_UC_DBGGER_ID_MSWr BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_DBGGER_ID_MSWr
#define UC_RMI_UC_DBGGER_ID_MSWr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_DBGGER_ID_MSWr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_DBGGER_ID_MSWr_t UC_RMI_UC_DBGGER_ID_MSWr_t;
#define UC_RMI_UC_DBGGER_ID_MSWr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_DBGGER_ID_MSWr_CLR
#define UC_RMI_UC_DBGGER_ID_MSWr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_DBGGER_ID_MSWr_SET
#define UC_RMI_UC_DBGGER_ID_MSWr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_DBGGER_ID_MSWr_GET
#define UC_RMI_UC_DBGGER_ID_MSWr_MICRO_DEBUGGER_ID_MSWf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_DBGGER_ID_MSWr_MICRO_DEBUGGER_ID_MSWf_GET
#define UC_RMI_UC_DBGGER_ID_MSWr_MICRO_DEBUGGER_ID_MSWf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_DBGGER_ID_MSWr_MICRO_DEBUGGER_ID_MSWf_SET
#define READ_UC_RMI_UC_DBGGER_ID_MSWr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_RMI_UC_DBGGER_ID_MSWr
#define WRITE_UC_RMI_UC_DBGGER_ID_MSWr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_RMI_UC_DBGGER_ID_MSWr
#define MODIFY_UC_RMI_UC_DBGGER_ID_MSWr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_RMI_UC_DBGGER_ID_MSWr
#define READLN_UC_RMI_UC_DBGGER_ID_MSWr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_RMI_UC_DBGGER_ID_MSWr
#define WRITELN_UC_RMI_UC_DBGGER_ID_MSWr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_RMI_UC_DBGGER_ID_MSWr
#define WRITEALL_UC_RMI_UC_DBGGER_ID_MSWr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_RMI_UC_DBGGER_ID_MSWr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_DBGGER_ID_MSWr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  UC_RMI_UC_MISC_STS0
 * BLOCKS:   MICRO_B
 * REGADDR:  0xd21d
 * DEVAD:    1
 * DESC:     micro misc status register
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     MICRO_RA_AUTOINC_NXT_WRADDR_MSW When the micro_autoinc_wraddr_en is set to 1, then{micro_ra_autoinc_nxt_wraddr_msw[1:0], micro_ra_autoinc_nxt_wraddr_lsw[15:0]}indicate address that will be used during the next write transaction.These bits allow address tracking when rmi interface auto addressincrement mode is used
 *     MICRO_RA_AUTOINC_NXT_RDADDR_MSW When the micro_autoinc_rdaddr_en is set, then{micro_ra_autoinc_nxt_rdaddr_msw[1:0], micro_ra_autoinc_nxt_rdaddr_lsw[15:0]} indicate{address that will be used during the next read transaction.These bits allow address tracking when rmi interface auto addressincrement mode is used
 *     MICRO_PR_AUTOINC_NXT_WRADDR_MSW When pram interface is used to write to the code/data RAMthen {micro_pr_autoinc_nxt_wraddr_msw[1:0], micro_pr_autoinc_nxt_wraddr_lsw[15:0]}indicate the address that will be used during the next write transaction.These bits allow address tracking
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MISC_STS0r (0x0001d21d | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MISC_STS0r_SIZE 4

/*
 * This structure should be used to declare and program UC_RMI_UC_MISC_STS0.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MISC_STS0r_s {
	uint32_t v[1];
	uint32_t uc_rmi_uc_misc_sts0[1];
	uint32_t _uc_rmi_uc_misc_sts0;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MISC_STS0r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MISC_STS0r_CLR(r) (r).uc_rmi_uc_misc_sts0[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MISC_STS0r_SET(r,d) (r).uc_rmi_uc_misc_sts0[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MISC_STS0r_GET(r) (r).uc_rmi_uc_misc_sts0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MISC_STS0r_MICRO_PR_AUTOINC_NXT_WRADDR_MSWf_GET(r) ((((r).uc_rmi_uc_misc_sts0[0]) >> 4) & 0x3)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MISC_STS0r_MICRO_PR_AUTOINC_NXT_WRADDR_MSWf_SET(r,f) (r).uc_rmi_uc_misc_sts0[0]=(((r).uc_rmi_uc_misc_sts0[0] & ~((uint32_t)0x3 << 4)) | ((((uint32_t)f) & 0x3) << 4)) | (3 << (16 + 4))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MISC_STS0r_MICRO_RA_AUTOINC_NXT_RDADDR_MSWf_GET(r) ((((r).uc_rmi_uc_misc_sts0[0]) >> 2) & 0x3)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MISC_STS0r_MICRO_RA_AUTOINC_NXT_RDADDR_MSWf_SET(r,f) (r).uc_rmi_uc_misc_sts0[0]=(((r).uc_rmi_uc_misc_sts0[0] & ~((uint32_t)0x3 << 2)) | ((((uint32_t)f) & 0x3) << 2)) | (3 << (16 + 2))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MISC_STS0r_MICRO_RA_AUTOINC_NXT_WRADDR_MSWf_GET(r) (((r).uc_rmi_uc_misc_sts0[0]) & 0x3)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MISC_STS0r_MICRO_RA_AUTOINC_NXT_WRADDR_MSWf_SET(r,f) (r).uc_rmi_uc_misc_sts0[0]=(((r).uc_rmi_uc_misc_sts0[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3)) | (0x3 << 16)

/*
 * These macros can be used to access UC_RMI_UC_MISC_STS0.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_RMI_UC_MISC_STS0r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MISC_STS0r,(_r._uc_rmi_uc_misc_sts0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_RMI_UC_MISC_STS0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MISC_STS0r,(_r._uc_rmi_uc_misc_sts0)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_RMI_UC_MISC_STS0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MISC_STS0r,(_r._uc_rmi_uc_misc_sts0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_RMI_UC_MISC_STS0r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MISC_STS0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_rmi_uc_misc_sts0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_RMI_UC_MISC_STS0r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MISC_STS0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_rmi_uc_misc_sts0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_RMI_UC_MISC_STS0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MISC_STS0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_rmi_uc_misc_sts0))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define UC_RMI_UC_MISC_STS0r BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MISC_STS0r
#define UC_RMI_UC_MISC_STS0r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MISC_STS0r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MISC_STS0r_t UC_RMI_UC_MISC_STS0r_t;
#define UC_RMI_UC_MISC_STS0r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MISC_STS0r_CLR
#define UC_RMI_UC_MISC_STS0r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MISC_STS0r_SET
#define UC_RMI_UC_MISC_STS0r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MISC_STS0r_GET
#define UC_RMI_UC_MISC_STS0r_MICRO_PR_AUTOINC_NXT_WRADDR_MSWf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MISC_STS0r_MICRO_PR_AUTOINC_NXT_WRADDR_MSWf_GET
#define UC_RMI_UC_MISC_STS0r_MICRO_PR_AUTOINC_NXT_WRADDR_MSWf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MISC_STS0r_MICRO_PR_AUTOINC_NXT_WRADDR_MSWf_SET
#define UC_RMI_UC_MISC_STS0r_MICRO_RA_AUTOINC_NXT_RDADDR_MSWf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MISC_STS0r_MICRO_RA_AUTOINC_NXT_RDADDR_MSWf_GET
#define UC_RMI_UC_MISC_STS0r_MICRO_RA_AUTOINC_NXT_RDADDR_MSWf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MISC_STS0r_MICRO_RA_AUTOINC_NXT_RDADDR_MSWf_SET
#define UC_RMI_UC_MISC_STS0r_MICRO_RA_AUTOINC_NXT_WRADDR_MSWf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MISC_STS0r_MICRO_RA_AUTOINC_NXT_WRADDR_MSWf_GET
#define UC_RMI_UC_MISC_STS0r_MICRO_RA_AUTOINC_NXT_WRADDR_MSWf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MISC_STS0r_MICRO_RA_AUTOINC_NXT_WRADDR_MSWf_SET
#define READ_UC_RMI_UC_MISC_STS0r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_RMI_UC_MISC_STS0r
#define WRITE_UC_RMI_UC_MISC_STS0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_RMI_UC_MISC_STS0r
#define MODIFY_UC_RMI_UC_MISC_STS0r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_RMI_UC_MISC_STS0r
#define READLN_UC_RMI_UC_MISC_STS0r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_RMI_UC_MISC_STS0r
#define WRITELN_UC_RMI_UC_MISC_STS0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_RMI_UC_MISC_STS0r
#define WRITEALL_UC_RMI_UC_MISC_STS0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_RMI_UC_MISC_STS0r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MISC_STS0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  UC_RMI_UC_DBGGER_CTL0
 * BLOCKS:   MICRO_B
 * REGADDR:  0xd21e
 * DEVAD:    1
 * DESC:     micro debugger control register 0
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     MICRO_DEBUGGER_ID_FRCVAL micro debugger id bits [27:20] force valueThe micro debugger has 32bit id. Bit 27 to 20 can be forced to different valueusing micro_debugger_id_frc and micro_debugger_id_frcval fields i.e.micro_debugger_id[31:28]  = micro core instance id[3:0], i.e. 0,1,2,3 .... 15micro_debugger_id[27:20]  = micro_debugger_id_frc ? micro_debugger_id_frcval[7:0] : micro_swdbg_id_strap[7:0]micro_debugger_id[19:12]  = revid0[7:0]micro_debugger_id[11:0]  = BRCM jtag ID[11:0]
 *     MICRO_DEBUGGER_ID_FRC micro debugger id force enablemicro_debugger_id_frc and micro_debugger_id_frcval are used to override portion of the micro debugger IDPlease note that the debugger ID should only be changed while all of the micro cores are in reset i.e.micro_master_rstb = 1'b0 to avoid any problems
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_DBGGER_CTL0r (0x0001d21e | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_DBGGER_CTL0r_SIZE 4

/*
 * This structure should be used to declare and program UC_RMI_UC_DBGGER_CTL0.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_DBGGER_CTL0r_s {
	uint32_t v[1];
	uint32_t uc_rmi_uc_dbgger_ctl0[1];
	uint32_t _uc_rmi_uc_dbgger_ctl0;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_DBGGER_CTL0r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_DBGGER_CTL0r_CLR(r) (r).uc_rmi_uc_dbgger_ctl0[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_DBGGER_CTL0r_SET(r,d) (r).uc_rmi_uc_dbgger_ctl0[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_DBGGER_CTL0r_GET(r) (r).uc_rmi_uc_dbgger_ctl0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_DBGGER_CTL0r_MICRO_DEBUGGER_ID_FRCf_GET(r) ((((r).uc_rmi_uc_dbgger_ctl0[0]) >> 15) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_DBGGER_CTL0r_MICRO_DEBUGGER_ID_FRCf_SET(r,f) (r).uc_rmi_uc_dbgger_ctl0[0]=(((r).uc_rmi_uc_dbgger_ctl0[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_DBGGER_CTL0r_MICRO_DEBUGGER_ID_FRCVALf_GET(r) (((r).uc_rmi_uc_dbgger_ctl0[0]) & 0xff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_DBGGER_CTL0r_MICRO_DEBUGGER_ID_FRCVALf_SET(r,f) (r).uc_rmi_uc_dbgger_ctl0[0]=(((r).uc_rmi_uc_dbgger_ctl0[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff)) | (0xff << 16)

/*
 * These macros can be used to access UC_RMI_UC_DBGGER_CTL0.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_RMI_UC_DBGGER_CTL0r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_DBGGER_CTL0r,(_r._uc_rmi_uc_dbgger_ctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_RMI_UC_DBGGER_CTL0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_DBGGER_CTL0r,(_r._uc_rmi_uc_dbgger_ctl0)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_RMI_UC_DBGGER_CTL0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_DBGGER_CTL0r,(_r._uc_rmi_uc_dbgger_ctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_RMI_UC_DBGGER_CTL0r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_DBGGER_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_rmi_uc_dbgger_ctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_RMI_UC_DBGGER_CTL0r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_DBGGER_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_rmi_uc_dbgger_ctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_RMI_UC_DBGGER_CTL0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_DBGGER_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_rmi_uc_dbgger_ctl0))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define UC_RMI_UC_DBGGER_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_DBGGER_CTL0r
#define UC_RMI_UC_DBGGER_CTL0r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_DBGGER_CTL0r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_DBGGER_CTL0r_t UC_RMI_UC_DBGGER_CTL0r_t;
#define UC_RMI_UC_DBGGER_CTL0r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_DBGGER_CTL0r_CLR
#define UC_RMI_UC_DBGGER_CTL0r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_DBGGER_CTL0r_SET
#define UC_RMI_UC_DBGGER_CTL0r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_DBGGER_CTL0r_GET
#define UC_RMI_UC_DBGGER_CTL0r_MICRO_DEBUGGER_ID_FRCf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_DBGGER_CTL0r_MICRO_DEBUGGER_ID_FRCf_GET
#define UC_RMI_UC_DBGGER_CTL0r_MICRO_DEBUGGER_ID_FRCf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_DBGGER_CTL0r_MICRO_DEBUGGER_ID_FRCf_SET
#define UC_RMI_UC_DBGGER_CTL0r_MICRO_DEBUGGER_ID_FRCVALf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_DBGGER_CTL0r_MICRO_DEBUGGER_ID_FRCVALf_GET
#define UC_RMI_UC_DBGGER_CTL0r_MICRO_DEBUGGER_ID_FRCVALf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_DBGGER_CTL0r_MICRO_DEBUGGER_ID_FRCVALf_SET
#define READ_UC_RMI_UC_DBGGER_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_RMI_UC_DBGGER_CTL0r
#define WRITE_UC_RMI_UC_DBGGER_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_RMI_UC_DBGGER_CTL0r
#define MODIFY_UC_RMI_UC_DBGGER_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_RMI_UC_DBGGER_CTL0r
#define READLN_UC_RMI_UC_DBGGER_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_RMI_UC_DBGGER_CTL0r
#define WRITELN_UC_RMI_UC_DBGGER_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_RMI_UC_DBGGER_CTL0r
#define WRITEALL_UC_RMI_UC_DBGGER_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_RMI_UC_DBGGER_CTL0r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_DBGGER_CTL0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  UC_RAM_ECCCTL0
 * BLOCKS:   MICRO_C
 * REGADDR:  0xd220
 * DEVAD:    1
 * DESC:     ram ecc control 0
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     MICRO_CR_ECCG_MODE ecc code generation mode for code RAM0: Hardware mode - ECC code generated by hardware, ECC error checking enabled1: Software mode - ECC code from the rg_ra_ecc_wrdata field are written into code/data RAMECC error checking disabled. This mode is only supportedwhen register interface is used
 *     MICRO_CR_ECC_FRC_DISABLE ecc force disable for code RAM0: ECC Enabled  - ECC error code generation determine by the micro_eccg_mode fieldECC error checking enabled in hardware mode only1: ECC Disabled - ECC error codes values written into the RAM set to zeroECC error checking disabled
 *     MICRO_CR_ECC_CORRUPT This field allows the ecc codes to be corrupted in code RAM for testing.2'b00 - normal mode2'b01 - corrupt the ECC code written into the code/data RAM2'b10 - corrupt data - add 1 bit data error on the RX side2'b11 - corrupt data - add 2 bit data error on the RA side
 *     MICRO_CR_ECC_DEBUG_PRTSEL The field selects the RAM port to used for ECC debug and software ECC mode:0 - Select Port A1 - Select Port BAssumptions:a.  Only one RAM (code or data) is used during ECC debug, thereforemicro_ra_ecc_wrdata and micro_ra_ecc_rddata fields are sharedbetween Code and Data RAMb.  Only one port RAM (port A or port B) used during ECC debug, thereforemicro_cr_ecc_err_addr, micro_cr_ecc_corr_err, and micro_cr_ecc_corr_errfields are shared between Port A and Port B
 *     MICRO_DR_ECCG_MODE ecc code generation mode for data RAM0: Hardware mode - ECC code generated by hardware, ECC error checking enabled1: Software mode - ECC code from the rg_ra_ecc_wrdata field are written into code/data RAMECC error checking disabled. This mode is only supportedwhen register interface is used
 *     MICRO_DR_ECC_FRC_DISABLE ecc force disable for data RAM0: ECC Enabled  - ECC error code generation determine by the micro_eccg_mode fieldECC error checking enabled in hardware mode only1: ECC Disabled - ECC error codes values written into the RAM set to zeroECC error checking disabled
 *     MICRO_DR_ECC_CORRUPT This field allows the ecc codes to be corrupted in data RAM for testing.2'b00 - normal mode2'b01 - corrupt the ECC code written into the data RAM2'b10 - corrupt data - add 1 bit data error on the RX side2'b11 - corrupt data - add 2 bit data error on the RA side
 *     MICRO_DR_ECC_DEBUG_PRTSEL The field selects the RAM port to used for ECC debug and software ECC mode:0 - Select Port A1 - Select Port BAssumptions:a.  Only one RAM (code or data) is used during ECC debug, thereforemicro_ra_ecc_wrdata and micro_ra_ecc_rddata fields are sharedbetween Code and Data RAMb.  Only one port RAM (port A or port B) used during ECC debug, thereforemicro_dr_ecc_err_addr, micro_dr_ecc_corr_err, and micro_dr_ecc_corr_errfields are shared between Port A and Port B
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCCTL0r (0x0001d220 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCCTL0r_SIZE 4

/*
 * This structure should be used to declare and program UC_RAM_ECCCTL0.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCCTL0r_s {
	uint32_t v[1];
	uint32_t uc_ram_eccctl0[1];
	uint32_t _uc_ram_eccctl0;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCCTL0r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCCTL0r_CLR(r) (r).uc_ram_eccctl0[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCCTL0r_SET(r,d) (r).uc_ram_eccctl0[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCCTL0r_GET(r) (r).uc_ram_eccctl0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCCTL0r_MICRO_DR_ECC_DEBUG_PRTSELf_GET(r) ((((r).uc_ram_eccctl0[0]) >> 12) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCCTL0r_MICRO_DR_ECC_DEBUG_PRTSELf_SET(r,f) (r).uc_ram_eccctl0[0]=(((r).uc_ram_eccctl0[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12)) | (1 << (16 + 12))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCCTL0r_MICRO_DR_ECC_CORRUPTf_GET(r) ((((r).uc_ram_eccctl0[0]) >> 10) & 0x3)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCCTL0r_MICRO_DR_ECC_CORRUPTf_SET(r,f) (r).uc_ram_eccctl0[0]=(((r).uc_ram_eccctl0[0] & ~((uint32_t)0x3 << 10)) | ((((uint32_t)f) & 0x3) << 10)) | (3 << (16 + 10))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCCTL0r_MICRO_DR_ECC_FRC_DISABLEf_GET(r) ((((r).uc_ram_eccctl0[0]) >> 9) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCCTL0r_MICRO_DR_ECC_FRC_DISABLEf_SET(r,f) (r).uc_ram_eccctl0[0]=(((r).uc_ram_eccctl0[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9)) | (1 << (16 + 9))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCCTL0r_MICRO_DR_ECCG_MODEf_GET(r) ((((r).uc_ram_eccctl0[0]) >> 8) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCCTL0r_MICRO_DR_ECCG_MODEf_SET(r,f) (r).uc_ram_eccctl0[0]=(((r).uc_ram_eccctl0[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8)) | (1 << (16 + 8))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCCTL0r_MICRO_CR_ECC_DEBUG_PRTSELf_GET(r) ((((r).uc_ram_eccctl0[0]) >> 4) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCCTL0r_MICRO_CR_ECC_DEBUG_PRTSELf_SET(r,f) (r).uc_ram_eccctl0[0]=(((r).uc_ram_eccctl0[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCCTL0r_MICRO_CR_ECC_CORRUPTf_GET(r) ((((r).uc_ram_eccctl0[0]) >> 2) & 0x3)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCCTL0r_MICRO_CR_ECC_CORRUPTf_SET(r,f) (r).uc_ram_eccctl0[0]=(((r).uc_ram_eccctl0[0] & ~((uint32_t)0x3 << 2)) | ((((uint32_t)f) & 0x3) << 2)) | (3 << (16 + 2))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCCTL0r_MICRO_CR_ECC_FRC_DISABLEf_GET(r) ((((r).uc_ram_eccctl0[0]) >> 1) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCCTL0r_MICRO_CR_ECC_FRC_DISABLEf_SET(r,f) (r).uc_ram_eccctl0[0]=(((r).uc_ram_eccctl0[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCCTL0r_MICRO_CR_ECCG_MODEf_GET(r) (((r).uc_ram_eccctl0[0]) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCCTL0r_MICRO_CR_ECCG_MODEf_SET(r,f) (r).uc_ram_eccctl0[0]=(((r).uc_ram_eccctl0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access UC_RAM_ECCCTL0.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_RAM_ECCCTL0r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCCTL0r,(_r._uc_ram_eccctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_RAM_ECCCTL0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCCTL0r,(_r._uc_ram_eccctl0)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_RAM_ECCCTL0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCCTL0r,(_r._uc_ram_eccctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_RAM_ECCCTL0r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCCTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_ram_eccctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_RAM_ECCCTL0r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCCTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_ram_eccctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_RAM_ECCCTL0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCCTL0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_ram_eccctl0))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define UC_RAM_ECCCTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCCTL0r
#define UC_RAM_ECCCTL0r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCCTL0r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCCTL0r_t UC_RAM_ECCCTL0r_t;
#define UC_RAM_ECCCTL0r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCCTL0r_CLR
#define UC_RAM_ECCCTL0r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCCTL0r_SET
#define UC_RAM_ECCCTL0r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCCTL0r_GET
#define UC_RAM_ECCCTL0r_MICRO_DR_ECC_DEBUG_PRTSELf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCCTL0r_MICRO_DR_ECC_DEBUG_PRTSELf_GET
#define UC_RAM_ECCCTL0r_MICRO_DR_ECC_DEBUG_PRTSELf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCCTL0r_MICRO_DR_ECC_DEBUG_PRTSELf_SET
#define UC_RAM_ECCCTL0r_MICRO_DR_ECC_CORRUPTf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCCTL0r_MICRO_DR_ECC_CORRUPTf_GET
#define UC_RAM_ECCCTL0r_MICRO_DR_ECC_CORRUPTf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCCTL0r_MICRO_DR_ECC_CORRUPTf_SET
#define UC_RAM_ECCCTL0r_MICRO_DR_ECC_FRC_DISABLEf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCCTL0r_MICRO_DR_ECC_FRC_DISABLEf_GET
#define UC_RAM_ECCCTL0r_MICRO_DR_ECC_FRC_DISABLEf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCCTL0r_MICRO_DR_ECC_FRC_DISABLEf_SET
#define UC_RAM_ECCCTL0r_MICRO_DR_ECCG_MODEf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCCTL0r_MICRO_DR_ECCG_MODEf_GET
#define UC_RAM_ECCCTL0r_MICRO_DR_ECCG_MODEf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCCTL0r_MICRO_DR_ECCG_MODEf_SET
#define UC_RAM_ECCCTL0r_MICRO_CR_ECC_DEBUG_PRTSELf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCCTL0r_MICRO_CR_ECC_DEBUG_PRTSELf_GET
#define UC_RAM_ECCCTL0r_MICRO_CR_ECC_DEBUG_PRTSELf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCCTL0r_MICRO_CR_ECC_DEBUG_PRTSELf_SET
#define UC_RAM_ECCCTL0r_MICRO_CR_ECC_CORRUPTf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCCTL0r_MICRO_CR_ECC_CORRUPTf_GET
#define UC_RAM_ECCCTL0r_MICRO_CR_ECC_CORRUPTf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCCTL0r_MICRO_CR_ECC_CORRUPTf_SET
#define UC_RAM_ECCCTL0r_MICRO_CR_ECC_FRC_DISABLEf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCCTL0r_MICRO_CR_ECC_FRC_DISABLEf_GET
#define UC_RAM_ECCCTL0r_MICRO_CR_ECC_FRC_DISABLEf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCCTL0r_MICRO_CR_ECC_FRC_DISABLEf_SET
#define UC_RAM_ECCCTL0r_MICRO_CR_ECCG_MODEf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCCTL0r_MICRO_CR_ECCG_MODEf_GET
#define UC_RAM_ECCCTL0r_MICRO_CR_ECCG_MODEf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCCTL0r_MICRO_CR_ECCG_MODEf_SET
#define READ_UC_RAM_ECCCTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_RAM_ECCCTL0r
#define WRITE_UC_RAM_ECCCTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_RAM_ECCCTL0r
#define MODIFY_UC_RAM_ECCCTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_RAM_ECCCTL0r
#define READLN_UC_RAM_ECCCTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_RAM_ECCCTL0r
#define WRITELN_UC_RAM_ECCCTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_RAM_ECCCTL0r
#define WRITEALL_UC_RAM_ECCCTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_RAM_ECCCTL0r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCCTL0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  UC_RAM_ECCCTL1
 * BLOCKS:   MICRO_C
 * REGADDR:  0xd221
 * DEVAD:    1
 * DESC:     ram ecc control 1
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     MICRO_RA_ECC_WRDATA This foield is used to write the ECC codes into the code/data RAM when ECC software modes is enabled
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCCTL1r (0x0001d221 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCCTL1r_SIZE 4

/*
 * This structure should be used to declare and program UC_RAM_ECCCTL1.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCCTL1r_s {
	uint32_t v[1];
	uint32_t uc_ram_eccctl1[1];
	uint32_t _uc_ram_eccctl1;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCCTL1r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCCTL1r_CLR(r) (r).uc_ram_eccctl1[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCCTL1r_SET(r,d) (r).uc_ram_eccctl1[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCCTL1r_GET(r) (r).uc_ram_eccctl1[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCCTL1r_MICRO_RA_ECC_WRDATAf_GET(r) (((r).uc_ram_eccctl1[0]) & 0x7f)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCCTL1r_MICRO_RA_ECC_WRDATAf_SET(r,f) (r).uc_ram_eccctl1[0]=(((r).uc_ram_eccctl1[0] & ~((uint32_t)0x7f)) | (((uint32_t)f) & 0x7f)) | (0x7f << 16)

/*
 * These macros can be used to access UC_RAM_ECCCTL1.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_RAM_ECCCTL1r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCCTL1r,(_r._uc_ram_eccctl1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_RAM_ECCCTL1r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCCTL1r,(_r._uc_ram_eccctl1)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_RAM_ECCCTL1r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCCTL1r,(_r._uc_ram_eccctl1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_RAM_ECCCTL1r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCCTL1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_ram_eccctl1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_RAM_ECCCTL1r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCCTL1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_ram_eccctl1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_RAM_ECCCTL1r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCCTL1r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_ram_eccctl1))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define UC_RAM_ECCCTL1r BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCCTL1r
#define UC_RAM_ECCCTL1r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCCTL1r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCCTL1r_t UC_RAM_ECCCTL1r_t;
#define UC_RAM_ECCCTL1r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCCTL1r_CLR
#define UC_RAM_ECCCTL1r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCCTL1r_SET
#define UC_RAM_ECCCTL1r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCCTL1r_GET
#define UC_RAM_ECCCTL1r_MICRO_RA_ECC_WRDATAf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCCTL1r_MICRO_RA_ECC_WRDATAf_GET
#define UC_RAM_ECCCTL1r_MICRO_RA_ECC_WRDATAf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCCTL1r_MICRO_RA_ECC_WRDATAf_SET
#define READ_UC_RAM_ECCCTL1r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_RAM_ECCCTL1r
#define WRITE_UC_RAM_ECCCTL1r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_RAM_ECCCTL1r
#define MODIFY_UC_RAM_ECCCTL1r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_RAM_ECCCTL1r
#define READLN_UC_RAM_ECCCTL1r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_RAM_ECCCTL1r
#define WRITELN_UC_RAM_ECCCTL1r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_RAM_ECCCTL1r
#define WRITEALL_UC_RAM_ECCCTL1r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_RAM_ECCCTL1r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCCTL1r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  UC_RAM_ECCSTS0
 * BLOCKS:   MICRO_C
 * REGADDR:  0xd222
 * DEVAD:    1
 * DESC:     ram ecc status 0
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     MICRO_RMI_CR_ECC_ADDRESS_STATUS First ecc error address detected in the Code RAM
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCSTS0r (0x0001d222 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCSTS0r_SIZE 4

/*
 * This structure should be used to declare and program UC_RAM_ECCSTS0.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCSTS0r_s {
	uint32_t v[1];
	uint32_t uc_ram_eccsts0[1];
	uint32_t _uc_ram_eccsts0;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCSTS0r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCSTS0r_CLR(r) (r).uc_ram_eccsts0[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCSTS0r_SET(r,d) (r).uc_ram_eccsts0[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCSTS0r_GET(r) (r).uc_ram_eccsts0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCSTS0r_MICRO_RMI_CR_ECC_ADDRESS_STATUSf_GET(r) ((((r).uc_ram_eccsts0[0]) >> 2) & 0x3fff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCSTS0r_MICRO_RMI_CR_ECC_ADDRESS_STATUSf_SET(r,f) (r).uc_ram_eccsts0[0]=(((r).uc_ram_eccsts0[0] & ~((uint32_t)0x3fff << 2)) | ((((uint32_t)f) & 0x3fff) << 2)) | (16383 << (16 + 2))

/*
 * These macros can be used to access UC_RAM_ECCSTS0.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_RAM_ECCSTS0r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCSTS0r,(_r._uc_ram_eccsts0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_RAM_ECCSTS0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCSTS0r,(_r._uc_ram_eccsts0)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_RAM_ECCSTS0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCSTS0r,(_r._uc_ram_eccsts0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_RAM_ECCSTS0r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCSTS0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_ram_eccsts0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_RAM_ECCSTS0r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCSTS0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_ram_eccsts0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_RAM_ECCSTS0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCSTS0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_ram_eccsts0))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define UC_RAM_ECCSTS0r BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCSTS0r
#define UC_RAM_ECCSTS0r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCSTS0r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCSTS0r_t UC_RAM_ECCSTS0r_t;
#define UC_RAM_ECCSTS0r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCSTS0r_CLR
#define UC_RAM_ECCSTS0r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCSTS0r_SET
#define UC_RAM_ECCSTS0r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCSTS0r_GET
#define UC_RAM_ECCSTS0r_MICRO_RMI_CR_ECC_ADDRESS_STATUSf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCSTS0r_MICRO_RMI_CR_ECC_ADDRESS_STATUSf_GET
#define UC_RAM_ECCSTS0r_MICRO_RMI_CR_ECC_ADDRESS_STATUSf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCSTS0r_MICRO_RMI_CR_ECC_ADDRESS_STATUSf_SET
#define READ_UC_RAM_ECCSTS0r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_RAM_ECCSTS0r
#define WRITE_UC_RAM_ECCSTS0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_RAM_ECCSTS0r
#define MODIFY_UC_RAM_ECCSTS0r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_RAM_ECCSTS0r
#define READLN_UC_RAM_ECCSTS0r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_RAM_ECCSTS0r
#define WRITELN_UC_RAM_ECCSTS0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_RAM_ECCSTS0r
#define WRITEALL_UC_RAM_ECCSTS0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_RAM_ECCSTS0r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCSTS0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  UC_RAM_ECCSTS1
 * BLOCKS:   MICRO_C
 * REGADDR:  0xd223
 * DEVAD:    1
 * DESC:     ram ecc status 1
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     MICRO_RA_ECC_RDDATA When the register interface is used to read code/data RAM, then this field providesECC codes currently stored in the code/data RAM
 *     MICRO_RMI_CR_ECC_ADDRESS_STATUS_16 ECC error address bit 16 detected in the Code RAM
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCSTS1r (0x0001d223 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCSTS1r_SIZE 4

/*
 * This structure should be used to declare and program UC_RAM_ECCSTS1.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCSTS1r_s {
	uint32_t v[1];
	uint32_t uc_ram_eccsts1[1];
	uint32_t _uc_ram_eccsts1;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCSTS1r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCSTS1r_CLR(r) (r).uc_ram_eccsts1[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCSTS1r_SET(r,d) (r).uc_ram_eccsts1[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCSTS1r_GET(r) (r).uc_ram_eccsts1[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCSTS1r_MICRO_RMI_CR_ECC_ADDRESS_STATUS_16f_GET(r) ((((r).uc_ram_eccsts1[0]) >> 15) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCSTS1r_MICRO_RMI_CR_ECC_ADDRESS_STATUS_16f_SET(r,f) (r).uc_ram_eccsts1[0]=(((r).uc_ram_eccsts1[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCSTS1r_MICRO_RA_ECC_RDDATAf_GET(r) (((r).uc_ram_eccsts1[0]) & 0x7f)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCSTS1r_MICRO_RA_ECC_RDDATAf_SET(r,f) (r).uc_ram_eccsts1[0]=(((r).uc_ram_eccsts1[0] & ~((uint32_t)0x7f)) | (((uint32_t)f) & 0x7f)) | (0x7f << 16)

/*
 * These macros can be used to access UC_RAM_ECCSTS1.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_RAM_ECCSTS1r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCSTS1r,(_r._uc_ram_eccsts1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_RAM_ECCSTS1r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCSTS1r,(_r._uc_ram_eccsts1)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_RAM_ECCSTS1r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCSTS1r,(_r._uc_ram_eccsts1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_RAM_ECCSTS1r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCSTS1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_ram_eccsts1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_RAM_ECCSTS1r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCSTS1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_ram_eccsts1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_RAM_ECCSTS1r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCSTS1r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_ram_eccsts1))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define UC_RAM_ECCSTS1r BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCSTS1r
#define UC_RAM_ECCSTS1r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCSTS1r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCSTS1r_t UC_RAM_ECCSTS1r_t;
#define UC_RAM_ECCSTS1r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCSTS1r_CLR
#define UC_RAM_ECCSTS1r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCSTS1r_SET
#define UC_RAM_ECCSTS1r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCSTS1r_GET
#define UC_RAM_ECCSTS1r_MICRO_RMI_CR_ECC_ADDRESS_STATUS_16f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCSTS1r_MICRO_RMI_CR_ECC_ADDRESS_STATUS_16f_GET
#define UC_RAM_ECCSTS1r_MICRO_RMI_CR_ECC_ADDRESS_STATUS_16f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCSTS1r_MICRO_RMI_CR_ECC_ADDRESS_STATUS_16f_SET
#define UC_RAM_ECCSTS1r_MICRO_RA_ECC_RDDATAf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCSTS1r_MICRO_RA_ECC_RDDATAf_GET
#define UC_RAM_ECCSTS1r_MICRO_RA_ECC_RDDATAf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCSTS1r_MICRO_RA_ECC_RDDATAf_SET
#define READ_UC_RAM_ECCSTS1r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_RAM_ECCSTS1r
#define WRITE_UC_RAM_ECCSTS1r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_RAM_ECCSTS1r
#define MODIFY_UC_RAM_ECCSTS1r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_RAM_ECCSTS1r
#define READLN_UC_RAM_ECCSTS1r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_RAM_ECCSTS1r
#define WRITELN_UC_RAM_ECCSTS1r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_RAM_ECCSTS1r
#define WRITEALL_UC_RAM_ECCSTS1r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_RAM_ECCSTS1r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCSTS1r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  UC_RAM_ECCSTS2
 * BLOCKS:   MICRO_C
 * REGADDR:  0xd224
 * DEVAD:    1
 * DESC:     ram ecc status 2
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     MICRO_RMI_DR_ECC_ADDRESS_STATUS First ecc error address detected in the Data RAM
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCSTS2r (0x0001d224 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCSTS2r_SIZE 4

/*
 * This structure should be used to declare and program UC_RAM_ECCSTS2.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCSTS2r_s {
	uint32_t v[1];
	uint32_t uc_ram_eccsts2[1];
	uint32_t _uc_ram_eccsts2;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCSTS2r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCSTS2r_CLR(r) (r).uc_ram_eccsts2[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCSTS2r_SET(r,d) (r).uc_ram_eccsts2[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCSTS2r_GET(r) (r).uc_ram_eccsts2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCSTS2r_MICRO_RMI_DR_ECC_ADDRESS_STATUSf_GET(r) ((((r).uc_ram_eccsts2[0]) >> 2) & 0x3fff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCSTS2r_MICRO_RMI_DR_ECC_ADDRESS_STATUSf_SET(r,f) (r).uc_ram_eccsts2[0]=(((r).uc_ram_eccsts2[0] & ~((uint32_t)0x3fff << 2)) | ((((uint32_t)f) & 0x3fff) << 2)) | (16383 << (16 + 2))

/*
 * These macros can be used to access UC_RAM_ECCSTS2.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_RAM_ECCSTS2r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCSTS2r,(_r._uc_ram_eccsts2))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_RAM_ECCSTS2r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCSTS2r,(_r._uc_ram_eccsts2)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_RAM_ECCSTS2r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCSTS2r,(_r._uc_ram_eccsts2))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_RAM_ECCSTS2r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCSTS2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_ram_eccsts2))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_RAM_ECCSTS2r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCSTS2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_ram_eccsts2))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_RAM_ECCSTS2r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCSTS2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_ram_eccsts2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define UC_RAM_ECCSTS2r BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCSTS2r
#define UC_RAM_ECCSTS2r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCSTS2r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCSTS2r_t UC_RAM_ECCSTS2r_t;
#define UC_RAM_ECCSTS2r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCSTS2r_CLR
#define UC_RAM_ECCSTS2r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCSTS2r_SET
#define UC_RAM_ECCSTS2r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCSTS2r_GET
#define UC_RAM_ECCSTS2r_MICRO_RMI_DR_ECC_ADDRESS_STATUSf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCSTS2r_MICRO_RMI_DR_ECC_ADDRESS_STATUSf_GET
#define UC_RAM_ECCSTS2r_MICRO_RMI_DR_ECC_ADDRESS_STATUSf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCSTS2r_MICRO_RMI_DR_ECC_ADDRESS_STATUSf_SET
#define READ_UC_RAM_ECCSTS2r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_RAM_ECCSTS2r
#define WRITE_UC_RAM_ECCSTS2r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_RAM_ECCSTS2r
#define MODIFY_UC_RAM_ECCSTS2r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_RAM_ECCSTS2r
#define READLN_UC_RAM_ECCSTS2r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_RAM_ECCSTS2r
#define WRITELN_UC_RAM_ECCSTS2r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_RAM_ECCSTS2r
#define WRITEALL_UC_RAM_ECCSTS2r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_RAM_ECCSTS2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_ECCSTS2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  UC_RAM_TESTIFCTL0
 * BLOCKS:   MICRO_C
 * REGADDR:  0xd225
 * DEVAD:    1
 * DESC:     ram test interface control 0
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     MICRO_CR_TM      Code RAM Test Mode.These pins are used to put Code RAM the instance into various testmodes that can be used for a number of different purposesincluding extended screening, yield improvement and debug.The default mode of the instance is tm<?:0>='d0. It ishighly recommended that the user has control over all thetm<?:0> inputs. All tm<?:0> inputs are asynchronous. Seethe Test Modes section of the on line M16SP WebSpecification for further details.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_TESTIFCTL0r (0x0001d225 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_TESTIFCTL0r_SIZE 4

/*
 * This structure should be used to declare and program UC_RAM_TESTIFCTL0.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_TESTIFCTL0r_s {
	uint32_t v[1];
	uint32_t uc_ram_testifctl0[1];
	uint32_t _uc_ram_testifctl0;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_TESTIFCTL0r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_TESTIFCTL0r_CLR(r) (r).uc_ram_testifctl0[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_TESTIFCTL0r_SET(r,d) (r).uc_ram_testifctl0[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_TESTIFCTL0r_GET(r) (r).uc_ram_testifctl0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_TESTIFCTL0r_MICRO_CR_TMf_GET(r) (((r).uc_ram_testifctl0[0]) & 0x1ff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_TESTIFCTL0r_MICRO_CR_TMf_SET(r,f) (r).uc_ram_testifctl0[0]=(((r).uc_ram_testifctl0[0] & ~((uint32_t)0x1ff)) | (((uint32_t)f) & 0x1ff)) | (0x1ff << 16)

/*
 * These macros can be used to access UC_RAM_TESTIFCTL0.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_RAM_TESTIFCTL0r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_TESTIFCTL0r,(_r._uc_ram_testifctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_RAM_TESTIFCTL0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_TESTIFCTL0r,(_r._uc_ram_testifctl0)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_RAM_TESTIFCTL0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_TESTIFCTL0r,(_r._uc_ram_testifctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_RAM_TESTIFCTL0r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_TESTIFCTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_ram_testifctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_RAM_TESTIFCTL0r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_TESTIFCTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_ram_testifctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_RAM_TESTIFCTL0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_TESTIFCTL0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_ram_testifctl0))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define UC_RAM_TESTIFCTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_TESTIFCTL0r
#define UC_RAM_TESTIFCTL0r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_TESTIFCTL0r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_TESTIFCTL0r_t UC_RAM_TESTIFCTL0r_t;
#define UC_RAM_TESTIFCTL0r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_TESTIFCTL0r_CLR
#define UC_RAM_TESTIFCTL0r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_TESTIFCTL0r_SET
#define UC_RAM_TESTIFCTL0r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_TESTIFCTL0r_GET
#define UC_RAM_TESTIFCTL0r_MICRO_CR_TMf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_TESTIFCTL0r_MICRO_CR_TMf_GET
#define UC_RAM_TESTIFCTL0r_MICRO_CR_TMf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_TESTIFCTL0r_MICRO_CR_TMf_SET
#define READ_UC_RAM_TESTIFCTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_RAM_TESTIFCTL0r
#define WRITE_UC_RAM_TESTIFCTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_RAM_TESTIFCTL0r
#define MODIFY_UC_RAM_TESTIFCTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_RAM_TESTIFCTL0r
#define READLN_UC_RAM_TESTIFCTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_RAM_TESTIFCTL0r
#define WRITELN_UC_RAM_TESTIFCTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_RAM_TESTIFCTL0r
#define WRITEALL_UC_RAM_TESTIFCTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_RAM_TESTIFCTL0r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_TESTIFCTL0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  UC_RAM_TESTIFCTL1
 * BLOCKS:   MICRO_C
 * REGADDR:  0xd226
 * DEVAD:    1
 * DESC:     ram test interface control 1
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     MICRO_DR_TM      Data RAM Test Mode.These pins are used to put Code RAM the instance into various testmodes that can be used for a number of different purposesincluding extended screening, yield improvement and debug.The default mode of the instance is tm<?:0>='d0. It ishighly recommended that the user has control over all thetm<?:0> inputs. All tm<?:0> inputs are asynchronous. Seethe Test Modes section of the on line M16SP WebSpecification for further details.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_TESTIFCTL1r (0x0001d226 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_TESTIFCTL1r_SIZE 4

/*
 * This structure should be used to declare and program UC_RAM_TESTIFCTL1.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_TESTIFCTL1r_s {
	uint32_t v[1];
	uint32_t uc_ram_testifctl1[1];
	uint32_t _uc_ram_testifctl1;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_TESTIFCTL1r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_TESTIFCTL1r_CLR(r) (r).uc_ram_testifctl1[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_TESTIFCTL1r_SET(r,d) (r).uc_ram_testifctl1[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_TESTIFCTL1r_GET(r) (r).uc_ram_testifctl1[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_TESTIFCTL1r_MICRO_DR_TMf_GET(r) (((r).uc_ram_testifctl1[0]) & 0x1ff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_TESTIFCTL1r_MICRO_DR_TMf_SET(r,f) (r).uc_ram_testifctl1[0]=(((r).uc_ram_testifctl1[0] & ~((uint32_t)0x1ff)) | (((uint32_t)f) & 0x1ff)) | (0x1ff << 16)

/*
 * These macros can be used to access UC_RAM_TESTIFCTL1.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_RAM_TESTIFCTL1r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_TESTIFCTL1r,(_r._uc_ram_testifctl1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_RAM_TESTIFCTL1r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_TESTIFCTL1r,(_r._uc_ram_testifctl1)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_RAM_TESTIFCTL1r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_TESTIFCTL1r,(_r._uc_ram_testifctl1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_RAM_TESTIFCTL1r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_TESTIFCTL1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_ram_testifctl1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_RAM_TESTIFCTL1r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_TESTIFCTL1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_ram_testifctl1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_RAM_TESTIFCTL1r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_TESTIFCTL1r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_ram_testifctl1))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define UC_RAM_TESTIFCTL1r BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_TESTIFCTL1r
#define UC_RAM_TESTIFCTL1r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_TESTIFCTL1r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_TESTIFCTL1r_t UC_RAM_TESTIFCTL1r_t;
#define UC_RAM_TESTIFCTL1r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_TESTIFCTL1r_CLR
#define UC_RAM_TESTIFCTL1r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_TESTIFCTL1r_SET
#define UC_RAM_TESTIFCTL1r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_TESTIFCTL1r_GET
#define UC_RAM_TESTIFCTL1r_MICRO_DR_TMf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_TESTIFCTL1r_MICRO_DR_TMf_GET
#define UC_RAM_TESTIFCTL1r_MICRO_DR_TMf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_TESTIFCTL1r_MICRO_DR_TMf_SET
#define READ_UC_RAM_TESTIFCTL1r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_RAM_TESTIFCTL1r
#define WRITE_UC_RAM_TESTIFCTL1r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_RAM_TESTIFCTL1r
#define MODIFY_UC_RAM_TESTIFCTL1r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_RAM_TESTIFCTL1r
#define READLN_UC_RAM_TESTIFCTL1r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_RAM_TESTIFCTL1r
#define WRITELN_UC_RAM_TESTIFCTL1r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_RAM_TESTIFCTL1r
#define WRITEALL_UC_RAM_TESTIFCTL1r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_RAM_TESTIFCTL1r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_TESTIFCTL1r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  UC_RAM_CTL0
 * BLOCKS:   MICRO_C
 * REGADDR:  0xd227
 * DEVAD:    1
 * DESC:     ram configuration register 0
 * RESETVAL: 0x8382 (33666)
 * ACCESS:   R/W
 * FIELDS:
 *     MICRO_CR_ACCESS_EN Code RAM access enable0 - Disabled. RAM address, data, chip select and write enable are set to inactive stateto prevent timing violations from corrupting the contents of the RAMThe API software should clear this field before loading the firmware and also re-starting the micro1 - Enabled.
 *     MICRO_CR_IGNORE_MICRO_CODE_WRITES Code RAM ignore micro writes to the code portion of the RAM0 - Allow writes1 - Ignore writes
 *     MICRO_CR_RAIF_PRTSEL Selects Code RAM Port to used when accessing the memory through the register interface0 - Port A1 - Port B
 *     MICRO_CR_PRIF_PRTSEL Selects Code RAM Port to used when writing memory through the PRAM interface0 - Port A1 - Port B
 *     MICRO_CR_LOWPOWER_EN Code RAM low power enable1 - Enabled. Gate of the chip select to the Code RAM when memory is not being acccessed to save dynamic power(i.e. mem_cs = ~rg_cr_lowpower_en & rg_master_rstb & rg_cr_access_en).0 - Disabled
 *     MICRO_DR_ACCESS_EN Data RAM access enable0 - Disabled. RAM address, data, chip select and write enable are set to inactive stateto prevent timing violations from corrupting the contents of the RAMThe API software should clear this field before loading the firmware and also re-starting the micro1 - Enabled.
 *     MICRO_DR_IGNORE_MICRO_CODE_WRITES Data RAM ignore micro writes to the code portion of the RAM0 - Allow writes1 - Ignore writes
 *     MICRO_DR_RAIF_PRTSEL Selects Data RAM Port to used when accessing the memory through the register interface0 - Port A1 - Port B
 *     MICRO_DR_PRIF_PRTSEL Selects Data RAM Port to used when writing memory through the PRAM interface0 - Port A1 - Port B
 *     MICRO_DR_LOWPOWER_EN Data RAM low power enable1 - Enabled. Gate of the chip select to the Data RAM when memory is not being acccessed to save dynamic power(i.e. mem_cs = ~rg_dr_lowpower_en & rg_master_rstb & rg_dr_access_en).0 - Disabled
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_CTL0r (0x0001d227 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_CTL0r_SIZE 4

/*
 * This structure should be used to declare and program UC_RAM_CTL0.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_CTL0r_s {
	uint32_t v[1];
	uint32_t uc_ram_ctl0[1];
	uint32_t _uc_ram_ctl0;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_CTL0r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_CTL0r_CLR(r) (r).uc_ram_ctl0[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_CTL0r_SET(r,d) (r).uc_ram_ctl0[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_CTL0r_GET(r) (r).uc_ram_ctl0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_CTL0r_MICRO_DR_LOWPOWER_ENf_GET(r) ((((r).uc_ram_ctl0[0]) >> 15) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_CTL0r_MICRO_DR_LOWPOWER_ENf_SET(r,f) (r).uc_ram_ctl0[0]=(((r).uc_ram_ctl0[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_CTL0r_MICRO_DR_PRIF_PRTSELf_GET(r) ((((r).uc_ram_ctl0[0]) >> 11) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_CTL0r_MICRO_DR_PRIF_PRTSELf_SET(r,f) (r).uc_ram_ctl0[0]=(((r).uc_ram_ctl0[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11)) | (1 << (16 + 11))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_CTL0r_MICRO_DR_RAIF_PRTSELf_GET(r) ((((r).uc_ram_ctl0[0]) >> 10) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_CTL0r_MICRO_DR_RAIF_PRTSELf_SET(r,f) (r).uc_ram_ctl0[0]=(((r).uc_ram_ctl0[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10)) | (1 << (16 + 10))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_CTL0r_MICRO_DR_IGNORE_MICRO_CODE_WRITESf_GET(r) ((((r).uc_ram_ctl0[0]) >> 9) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_CTL0r_MICRO_DR_IGNORE_MICRO_CODE_WRITESf_SET(r,f) (r).uc_ram_ctl0[0]=(((r).uc_ram_ctl0[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9)) | (1 << (16 + 9))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_CTL0r_MICRO_DR_ACCESS_ENf_GET(r) ((((r).uc_ram_ctl0[0]) >> 8) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_CTL0r_MICRO_DR_ACCESS_ENf_SET(r,f) (r).uc_ram_ctl0[0]=(((r).uc_ram_ctl0[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8)) | (1 << (16 + 8))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_CTL0r_MICRO_CR_LOWPOWER_ENf_GET(r) ((((r).uc_ram_ctl0[0]) >> 7) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_CTL0r_MICRO_CR_LOWPOWER_ENf_SET(r,f) (r).uc_ram_ctl0[0]=(((r).uc_ram_ctl0[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_CTL0r_MICRO_CR_PRIF_PRTSELf_GET(r) ((((r).uc_ram_ctl0[0]) >> 3) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_CTL0r_MICRO_CR_PRIF_PRTSELf_SET(r,f) (r).uc_ram_ctl0[0]=(((r).uc_ram_ctl0[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_CTL0r_MICRO_CR_RAIF_PRTSELf_GET(r) ((((r).uc_ram_ctl0[0]) >> 2) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_CTL0r_MICRO_CR_RAIF_PRTSELf_SET(r,f) (r).uc_ram_ctl0[0]=(((r).uc_ram_ctl0[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_CTL0r_MICRO_CR_IGNORE_MICRO_CODE_WRITESf_GET(r) ((((r).uc_ram_ctl0[0]) >> 1) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_CTL0r_MICRO_CR_IGNORE_MICRO_CODE_WRITESf_SET(r,f) (r).uc_ram_ctl0[0]=(((r).uc_ram_ctl0[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_CTL0r_MICRO_CR_ACCESS_ENf_GET(r) (((r).uc_ram_ctl0[0]) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_CTL0r_MICRO_CR_ACCESS_ENf_SET(r,f) (r).uc_ram_ctl0[0]=(((r).uc_ram_ctl0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access UC_RAM_CTL0.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_RAM_CTL0r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_CTL0r,(_r._uc_ram_ctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_RAM_CTL0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_CTL0r,(_r._uc_ram_ctl0)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_RAM_CTL0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_CTL0r,(_r._uc_ram_ctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_RAM_CTL0r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_ram_ctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_RAM_CTL0r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_ram_ctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_RAM_CTL0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_ram_ctl0))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define UC_RAM_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_CTL0r
#define UC_RAM_CTL0r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_CTL0r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_CTL0r_t UC_RAM_CTL0r_t;
#define UC_RAM_CTL0r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_CTL0r_CLR
#define UC_RAM_CTL0r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_CTL0r_SET
#define UC_RAM_CTL0r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_CTL0r_GET
#define UC_RAM_CTL0r_MICRO_DR_LOWPOWER_ENf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_CTL0r_MICRO_DR_LOWPOWER_ENf_GET
#define UC_RAM_CTL0r_MICRO_DR_LOWPOWER_ENf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_CTL0r_MICRO_DR_LOWPOWER_ENf_SET
#define UC_RAM_CTL0r_MICRO_DR_PRIF_PRTSELf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_CTL0r_MICRO_DR_PRIF_PRTSELf_GET
#define UC_RAM_CTL0r_MICRO_DR_PRIF_PRTSELf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_CTL0r_MICRO_DR_PRIF_PRTSELf_SET
#define UC_RAM_CTL0r_MICRO_DR_RAIF_PRTSELf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_CTL0r_MICRO_DR_RAIF_PRTSELf_GET
#define UC_RAM_CTL0r_MICRO_DR_RAIF_PRTSELf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_CTL0r_MICRO_DR_RAIF_PRTSELf_SET
#define UC_RAM_CTL0r_MICRO_DR_IGNORE_MICRO_CODE_WRITESf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_CTL0r_MICRO_DR_IGNORE_MICRO_CODE_WRITESf_GET
#define UC_RAM_CTL0r_MICRO_DR_IGNORE_MICRO_CODE_WRITESf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_CTL0r_MICRO_DR_IGNORE_MICRO_CODE_WRITESf_SET
#define UC_RAM_CTL0r_MICRO_DR_ACCESS_ENf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_CTL0r_MICRO_DR_ACCESS_ENf_GET
#define UC_RAM_CTL0r_MICRO_DR_ACCESS_ENf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_CTL0r_MICRO_DR_ACCESS_ENf_SET
#define UC_RAM_CTL0r_MICRO_CR_LOWPOWER_ENf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_CTL0r_MICRO_CR_LOWPOWER_ENf_GET
#define UC_RAM_CTL0r_MICRO_CR_LOWPOWER_ENf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_CTL0r_MICRO_CR_LOWPOWER_ENf_SET
#define UC_RAM_CTL0r_MICRO_CR_PRIF_PRTSELf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_CTL0r_MICRO_CR_PRIF_PRTSELf_GET
#define UC_RAM_CTL0r_MICRO_CR_PRIF_PRTSELf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_CTL0r_MICRO_CR_PRIF_PRTSELf_SET
#define UC_RAM_CTL0r_MICRO_CR_RAIF_PRTSELf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_CTL0r_MICRO_CR_RAIF_PRTSELf_GET
#define UC_RAM_CTL0r_MICRO_CR_RAIF_PRTSELf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_CTL0r_MICRO_CR_RAIF_PRTSELf_SET
#define UC_RAM_CTL0r_MICRO_CR_IGNORE_MICRO_CODE_WRITESf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_CTL0r_MICRO_CR_IGNORE_MICRO_CODE_WRITESf_GET
#define UC_RAM_CTL0r_MICRO_CR_IGNORE_MICRO_CODE_WRITESf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_CTL0r_MICRO_CR_IGNORE_MICRO_CODE_WRITESf_SET
#define UC_RAM_CTL0r_MICRO_CR_ACCESS_ENf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_CTL0r_MICRO_CR_ACCESS_ENf_GET
#define UC_RAM_CTL0r_MICRO_CR_ACCESS_ENf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_CTL0r_MICRO_CR_ACCESS_ENf_SET
#define READ_UC_RAM_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_RAM_CTL0r
#define WRITE_UC_RAM_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_RAM_CTL0r
#define MODIFY_UC_RAM_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_RAM_CTL0r
#define READLN_UC_RAM_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_RAM_CTL0r
#define WRITELN_UC_RAM_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_RAM_CTL0r
#define WRITEALL_UC_RAM_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_RAM_CTL0r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_CTL0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  UC_RAM_CTL1
 * BLOCKS:   MICRO_C
 * REGADDR:  0xd228
 * DEVAD:    1
 * DESC:     ram configuration register 1
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     MICRO_CR_DATA_SIZE Code RAM - allocation for data storgaeThe CODE_RAM_SIZE=120KB and this field is used to allocate code RAM for data storgae on a 1KB granualarity8'd0  : code RAM allocation for data = 0KB,  code RAM allocation for code = CODE_RAM_SIZE - code RAM allocation for data8'd1  : code RAM allocation for data = 1KB,  code RAM allocation for code = CODE_RAM_SIZE - code RAM allocation for data8'd2  : code RAM allocation for data = 2KB,  code RAM allocation for code = CODE_RAM_SIZE - code RAM allocation for data...   : code RAM allocation for data = .. ,  code RAM allocation for code = .....   : code RAM allocation for data = .. ,  code RAM allocation for code = ..8'd119 : code RAM allocation for data = 119KB, code RAM allocation for code = CODE_RAM_SIZE - code RAM allocation for data8'd120 : code RAM allocation for data = 120KB, code RAM allocation for code = CODE_RAM_SIZE - code RAM allocation for data
 *     MICRO_DR_CODE_SIZE Data RAM - allocation for code storgaeThe DATA_RAM_SIZE=40KB and this field is used to allocate data RAM for code storgae on a 1KB granualarity8'd0  : data RAM allocation for code = 0KB,  data RAM allocation for data = DATA_RAM_SIZE - data RAM allocation for code8'd1  : data RAM allocation for code = 1KB,  data RAM allocation for data = DATA_RAM_SIZE - data RAM allocation for code8'd2  : data RAM allocation for code = 2KB,  data RAM allocation for data = DATA_RAM_SIZE - data RAM allocation for code...   : data RAM allocation for code = .. ,  data RAM allocation for data = .....   : data RAM allocation for code = .. ,  data RAM allocation for data = ..8'd39 : data RAM allocation for code = 39KB, data RAM allocation for data = DATA_RAM_SIZE - data RAM allocation for code8'd40 : data RAM allocation for code = 40KB, data RAM allocation for data = DATA_RAM_SIZE - data RAM allocation for code
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_CTL1r (0x0001d228 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_CTL1r_SIZE 4

/*
 * This structure should be used to declare and program UC_RAM_CTL1.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_CTL1r_s {
	uint32_t v[1];
	uint32_t uc_ram_ctl1[1];
	uint32_t _uc_ram_ctl1;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_CTL1r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_CTL1r_CLR(r) (r).uc_ram_ctl1[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_CTL1r_SET(r,d) (r).uc_ram_ctl1[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_CTL1r_GET(r) (r).uc_ram_ctl1[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_CTL1r_MICRO_DR_CODE_SIZEf_GET(r) ((((r).uc_ram_ctl1[0]) >> 8) & 0xff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_CTL1r_MICRO_DR_CODE_SIZEf_SET(r,f) (r).uc_ram_ctl1[0]=(((r).uc_ram_ctl1[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8)) | (255 << (16 + 8))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_CTL1r_MICRO_CR_DATA_SIZEf_GET(r) (((r).uc_ram_ctl1[0]) & 0xff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_CTL1r_MICRO_CR_DATA_SIZEf_SET(r,f) (r).uc_ram_ctl1[0]=(((r).uc_ram_ctl1[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff)) | (0xff << 16)

/*
 * These macros can be used to access UC_RAM_CTL1.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_RAM_CTL1r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_CTL1r,(_r._uc_ram_ctl1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_RAM_CTL1r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_CTL1r,(_r._uc_ram_ctl1)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_RAM_CTL1r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_CTL1r,(_r._uc_ram_ctl1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_RAM_CTL1r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_CTL1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_ram_ctl1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_RAM_CTL1r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_CTL1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_ram_ctl1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_RAM_CTL1r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_CTL1r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_ram_ctl1))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define UC_RAM_CTL1r BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_CTL1r
#define UC_RAM_CTL1r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_CTL1r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_CTL1r_t UC_RAM_CTL1r_t;
#define UC_RAM_CTL1r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_CTL1r_CLR
#define UC_RAM_CTL1r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_CTL1r_SET
#define UC_RAM_CTL1r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_CTL1r_GET
#define UC_RAM_CTL1r_MICRO_DR_CODE_SIZEf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_CTL1r_MICRO_DR_CODE_SIZEf_GET
#define UC_RAM_CTL1r_MICRO_DR_CODE_SIZEf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_CTL1r_MICRO_DR_CODE_SIZEf_SET
#define UC_RAM_CTL1r_MICRO_CR_DATA_SIZEf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_CTL1r_MICRO_CR_DATA_SIZEf_GET
#define UC_RAM_CTL1r_MICRO_CR_DATA_SIZEf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_CTL1r_MICRO_CR_DATA_SIZEf_SET
#define READ_UC_RAM_CTL1r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_RAM_CTL1r
#define WRITE_UC_RAM_CTL1r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_RAM_CTL1r
#define MODIFY_UC_RAM_CTL1r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_RAM_CTL1r
#define READLN_UC_RAM_CTL1r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_RAM_CTL1r
#define WRITELN_UC_RAM_CTL1r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_RAM_CTL1r
#define WRITEALL_UC_RAM_CTL1r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_RAM_CTL1r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_CTL1r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  UC_RMI_EXT_INTR_CTL0
 * BLOCKS:   MICRO_C
 * REGADDR:  0xd229
 * DEVAD:    1
 * DESC:     rmi external interrupt control register 0
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     MICRO_RMI_CR_ECC_CORR_ERR_INTR_EN Code RAM ECC 1 bit correctable error detect interrupt enableWhen this field is set to 1'b1 then the micro_rmi_ecc_corr_err_status field of the rmi_ext_intr_status0registers generate an interrupt on the micro_ext_intr pin
 *     MICRO_RMI_CR_ECC_UNCORR_ERR_INTR_EN Code RAM ECC 2 bit un-correctable error detect interrupt enableWhen this field is set to 1'b1 then the micro_rmi_ecc_uncorr_err_status field of the rmi_ext_intr_status0registers generate an interrupt on the micro_ext_intr pin
 *     MICRO_RMI_CR_ECC_MULTIROW_ERR_INTR_EN Code RAM ECC error on multiple row detect interrupt enableWhen this field is set to 1'b1 then the micro_rmi_ecc_multirow_err_status field of the rmi_ext_intr_status0registers generate an interrupt on the micro_ext_intr pin
 *     MICRO_RMI_DR_ECC_CORR_ERR_INTR_EN Data RAM ECC 1 bit correctable error detect interrupt enableWhen this field is set to 1'b1 then the micro_rmi_ecc_corr_err_status field of the rmi_ext_intr_status0registers generate an interrupt on the micro_ext_intr pin
 *     MICRO_RMI_DR_ECC_UNCORR_ERR_INTR_EN Data RAM ECC 2 bit un-correctable error detect interrupt enableWhen this field is set to 1'b1 then the micro_rmi_ecc_uncorr_err_status field of the rmi_ext_intr_status0registers generate an interrupt on the micro_ext_intr pin
 *     MICRO_RMI_DR_ECC_MULTIROW_ERR_INTR_EN Data RAM ECC error on multiple row detect interrupt enableWhen this field is set to 1'b1 then the micro_rmi_ecc_multirow_err_status field of the rmi_ext_intr_status0registers generate an interrupt on the micro_ext_intr pin
 *     MICRO_RMI_MBOX_MSGOUT_INTR_EN Mailbox memssage out Interrupt EnableWhen this field is set to 1'b1 then the micro_rmi_mbox_msgout_status_or field of the rmi_ext_intr_status0registers generate an interrupt on the micro_ext_intr pin
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_EXT_INTR_CTL0r (0x0001d229 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_EXT_INTR_CTL0r_SIZE 4

/*
 * This structure should be used to declare and program UC_RMI_EXT_INTR_CTL0.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_EXT_INTR_CTL0r_s {
	uint32_t v[1];
	uint32_t uc_rmi_ext_intr_ctl0[1];
	uint32_t _uc_rmi_ext_intr_ctl0;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_EXT_INTR_CTL0r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_EXT_INTR_CTL0r_CLR(r) (r).uc_rmi_ext_intr_ctl0[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_EXT_INTR_CTL0r_SET(r,d) (r).uc_rmi_ext_intr_ctl0[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_EXT_INTR_CTL0r_GET(r) (r).uc_rmi_ext_intr_ctl0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_EXT_INTR_CTL0r_MICRO_RMI_MBOX_MSGOUT_INTR_ENf_GET(r) ((((r).uc_rmi_ext_intr_ctl0[0]) >> 10) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_EXT_INTR_CTL0r_MICRO_RMI_MBOX_MSGOUT_INTR_ENf_SET(r,f) (r).uc_rmi_ext_intr_ctl0[0]=(((r).uc_rmi_ext_intr_ctl0[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10)) | (1 << (16 + 10))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_EXT_INTR_CTL0r_MICRO_RMI_DR_ECC_MULTIROW_ERR_INTR_ENf_GET(r) ((((r).uc_rmi_ext_intr_ctl0[0]) >> 6) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_EXT_INTR_CTL0r_MICRO_RMI_DR_ECC_MULTIROW_ERR_INTR_ENf_SET(r,f) (r).uc_rmi_ext_intr_ctl0[0]=(((r).uc_rmi_ext_intr_ctl0[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_EXT_INTR_CTL0r_MICRO_RMI_DR_ECC_UNCORR_ERR_INTR_ENf_GET(r) ((((r).uc_rmi_ext_intr_ctl0[0]) >> 5) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_EXT_INTR_CTL0r_MICRO_RMI_DR_ECC_UNCORR_ERR_INTR_ENf_SET(r,f) (r).uc_rmi_ext_intr_ctl0[0]=(((r).uc_rmi_ext_intr_ctl0[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_EXT_INTR_CTL0r_MICRO_RMI_DR_ECC_CORR_ERR_INTR_ENf_GET(r) ((((r).uc_rmi_ext_intr_ctl0[0]) >> 4) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_EXT_INTR_CTL0r_MICRO_RMI_DR_ECC_CORR_ERR_INTR_ENf_SET(r,f) (r).uc_rmi_ext_intr_ctl0[0]=(((r).uc_rmi_ext_intr_ctl0[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_EXT_INTR_CTL0r_MICRO_RMI_CR_ECC_MULTIROW_ERR_INTR_ENf_GET(r) ((((r).uc_rmi_ext_intr_ctl0[0]) >> 2) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_EXT_INTR_CTL0r_MICRO_RMI_CR_ECC_MULTIROW_ERR_INTR_ENf_SET(r,f) (r).uc_rmi_ext_intr_ctl0[0]=(((r).uc_rmi_ext_intr_ctl0[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_EXT_INTR_CTL0r_MICRO_RMI_CR_ECC_UNCORR_ERR_INTR_ENf_GET(r) ((((r).uc_rmi_ext_intr_ctl0[0]) >> 1) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_EXT_INTR_CTL0r_MICRO_RMI_CR_ECC_UNCORR_ERR_INTR_ENf_SET(r,f) (r).uc_rmi_ext_intr_ctl0[0]=(((r).uc_rmi_ext_intr_ctl0[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_EXT_INTR_CTL0r_MICRO_RMI_CR_ECC_CORR_ERR_INTR_ENf_GET(r) (((r).uc_rmi_ext_intr_ctl0[0]) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_EXT_INTR_CTL0r_MICRO_RMI_CR_ECC_CORR_ERR_INTR_ENf_SET(r,f) (r).uc_rmi_ext_intr_ctl0[0]=(((r).uc_rmi_ext_intr_ctl0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access UC_RMI_EXT_INTR_CTL0.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_RMI_EXT_INTR_CTL0r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_EXT_INTR_CTL0r,(_r._uc_rmi_ext_intr_ctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_RMI_EXT_INTR_CTL0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_EXT_INTR_CTL0r,(_r._uc_rmi_ext_intr_ctl0)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_RMI_EXT_INTR_CTL0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_EXT_INTR_CTL0r,(_r._uc_rmi_ext_intr_ctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_RMI_EXT_INTR_CTL0r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_EXT_INTR_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_rmi_ext_intr_ctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_RMI_EXT_INTR_CTL0r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_EXT_INTR_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_rmi_ext_intr_ctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_RMI_EXT_INTR_CTL0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_EXT_INTR_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_rmi_ext_intr_ctl0))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define UC_RMI_EXT_INTR_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_EXT_INTR_CTL0r
#define UC_RMI_EXT_INTR_CTL0r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_EXT_INTR_CTL0r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_EXT_INTR_CTL0r_t UC_RMI_EXT_INTR_CTL0r_t;
#define UC_RMI_EXT_INTR_CTL0r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_EXT_INTR_CTL0r_CLR
#define UC_RMI_EXT_INTR_CTL0r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_EXT_INTR_CTL0r_SET
#define UC_RMI_EXT_INTR_CTL0r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_EXT_INTR_CTL0r_GET
#define UC_RMI_EXT_INTR_CTL0r_MICRO_RMI_MBOX_MSGOUT_INTR_ENf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_EXT_INTR_CTL0r_MICRO_RMI_MBOX_MSGOUT_INTR_ENf_GET
#define UC_RMI_EXT_INTR_CTL0r_MICRO_RMI_MBOX_MSGOUT_INTR_ENf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_EXT_INTR_CTL0r_MICRO_RMI_MBOX_MSGOUT_INTR_ENf_SET
#define UC_RMI_EXT_INTR_CTL0r_MICRO_RMI_DR_ECC_MULTIROW_ERR_INTR_ENf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_EXT_INTR_CTL0r_MICRO_RMI_DR_ECC_MULTIROW_ERR_INTR_ENf_GET
#define UC_RMI_EXT_INTR_CTL0r_MICRO_RMI_DR_ECC_MULTIROW_ERR_INTR_ENf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_EXT_INTR_CTL0r_MICRO_RMI_DR_ECC_MULTIROW_ERR_INTR_ENf_SET
#define UC_RMI_EXT_INTR_CTL0r_MICRO_RMI_DR_ECC_UNCORR_ERR_INTR_ENf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_EXT_INTR_CTL0r_MICRO_RMI_DR_ECC_UNCORR_ERR_INTR_ENf_GET
#define UC_RMI_EXT_INTR_CTL0r_MICRO_RMI_DR_ECC_UNCORR_ERR_INTR_ENf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_EXT_INTR_CTL0r_MICRO_RMI_DR_ECC_UNCORR_ERR_INTR_ENf_SET
#define UC_RMI_EXT_INTR_CTL0r_MICRO_RMI_DR_ECC_CORR_ERR_INTR_ENf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_EXT_INTR_CTL0r_MICRO_RMI_DR_ECC_CORR_ERR_INTR_ENf_GET
#define UC_RMI_EXT_INTR_CTL0r_MICRO_RMI_DR_ECC_CORR_ERR_INTR_ENf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_EXT_INTR_CTL0r_MICRO_RMI_DR_ECC_CORR_ERR_INTR_ENf_SET
#define UC_RMI_EXT_INTR_CTL0r_MICRO_RMI_CR_ECC_MULTIROW_ERR_INTR_ENf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_EXT_INTR_CTL0r_MICRO_RMI_CR_ECC_MULTIROW_ERR_INTR_ENf_GET
#define UC_RMI_EXT_INTR_CTL0r_MICRO_RMI_CR_ECC_MULTIROW_ERR_INTR_ENf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_EXT_INTR_CTL0r_MICRO_RMI_CR_ECC_MULTIROW_ERR_INTR_ENf_SET
#define UC_RMI_EXT_INTR_CTL0r_MICRO_RMI_CR_ECC_UNCORR_ERR_INTR_ENf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_EXT_INTR_CTL0r_MICRO_RMI_CR_ECC_UNCORR_ERR_INTR_ENf_GET
#define UC_RMI_EXT_INTR_CTL0r_MICRO_RMI_CR_ECC_UNCORR_ERR_INTR_ENf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_EXT_INTR_CTL0r_MICRO_RMI_CR_ECC_UNCORR_ERR_INTR_ENf_SET
#define UC_RMI_EXT_INTR_CTL0r_MICRO_RMI_CR_ECC_CORR_ERR_INTR_ENf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_EXT_INTR_CTL0r_MICRO_RMI_CR_ECC_CORR_ERR_INTR_ENf_GET
#define UC_RMI_EXT_INTR_CTL0r_MICRO_RMI_CR_ECC_CORR_ERR_INTR_ENf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_EXT_INTR_CTL0r_MICRO_RMI_CR_ECC_CORR_ERR_INTR_ENf_SET
#define READ_UC_RMI_EXT_INTR_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_RMI_EXT_INTR_CTL0r
#define WRITE_UC_RMI_EXT_INTR_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_RMI_EXT_INTR_CTL0r
#define MODIFY_UC_RMI_EXT_INTR_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_RMI_EXT_INTR_CTL0r
#define READLN_UC_RMI_EXT_INTR_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_RMI_EXT_INTR_CTL0r
#define WRITELN_UC_RMI_EXT_INTR_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_RMI_EXT_INTR_CTL0r
#define WRITEALL_UC_RMI_EXT_INTR_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_RMI_EXT_INTR_CTL0r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_EXT_INTR_CTL0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  UC_RMI_EXT_INTR_STS0
 * BLOCKS:   MICRO_C
 * REGADDR:  0xd22a
 * DEVAD:    1
 * DESC:     rmi external interrupt status register 0
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     MICRO_RMI_CR_ECC_CORR_ERR_STATUS Code RAM ECC 1 bit correctable error detected statusThis field is set to 1'b1 when the ECC logic detects one bit correctable error.This bits remain remains set until this register is read
 *     MICRO_RMI_CR_ECC_UNCORR_ERR_STATUS Code RAM ECC 2 bit un-correctable error detected statusThis field is set to 1'b1 when the ECC logic detects one bit un-correctable error.This bits remain remains set until this register is read
 *     MICRO_RMI_CR_ECC_MULTIROW_ERR_STATUS Code RAM ECC error on multiple row detected  statusThis field is set to 1'b1 when the ECC logic detects correctable or uncorrecatble errors on multiple rows.This bits remain remains set until this register is read
 *     MICRO_RMI_DR_ECC_CORR_ERR_STATUS Data RAM ECC 1 bit correctable error detected statusThis field is set to 1'b1 when the ECC logic detects one bit correctable error.This bits remain remains set until this register is read
 *     MICRO_RMI_DR_ECC_UNCORR_ERR_STATUS Data RAM ECC 2 bit un-correctable error detected statusThis field is set to 1'b1 when the ECC logic detects one bit un-correctable error.This bits remain remains set until this register is read
 *     MICRO_RMI_DR_ECC_MULTIROW_ERR_STATUS Data RAM ECC error on multiple row detected  statusThis field is set to 1'b1 when the ECC logic detects correctable or uncorrecatble errors on multiple rows.This bits remain remains set until this register is read
 *     MICRO_RMI_MBOX_MSGOUT_STATUS_OR This is logic OR of the mbox_msgout_status field from all micro cores in the designIt will remain set until "mbox_msgout_status" field for all micro cores are zero
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_EXT_INTR_STS0r (0x0001d22a | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_EXT_INTR_STS0r_SIZE 4

/*
 * This structure should be used to declare and program UC_RMI_EXT_INTR_STS0.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_EXT_INTR_STS0r_s {
	uint32_t v[1];
	uint32_t uc_rmi_ext_intr_sts0[1];
	uint32_t _uc_rmi_ext_intr_sts0;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_EXT_INTR_STS0r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_EXT_INTR_STS0r_CLR(r) (r).uc_rmi_ext_intr_sts0[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_EXT_INTR_STS0r_SET(r,d) (r).uc_rmi_ext_intr_sts0[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_EXT_INTR_STS0r_GET(r) (r).uc_rmi_ext_intr_sts0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_EXT_INTR_STS0r_MICRO_RMI_MBOX_MSGOUT_STATUS_ORf_GET(r) ((((r).uc_rmi_ext_intr_sts0[0]) >> 10) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_EXT_INTR_STS0r_MICRO_RMI_MBOX_MSGOUT_STATUS_ORf_SET(r,f) (r).uc_rmi_ext_intr_sts0[0]=(((r).uc_rmi_ext_intr_sts0[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10)) | (1 << (16 + 10))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_EXT_INTR_STS0r_MICRO_RMI_DR_ECC_MULTIROW_ERR_STATUSf_GET(r) ((((r).uc_rmi_ext_intr_sts0[0]) >> 6) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_EXT_INTR_STS0r_MICRO_RMI_DR_ECC_MULTIROW_ERR_STATUSf_SET(r,f) (r).uc_rmi_ext_intr_sts0[0]=(((r).uc_rmi_ext_intr_sts0[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_EXT_INTR_STS0r_MICRO_RMI_DR_ECC_UNCORR_ERR_STATUSf_GET(r) ((((r).uc_rmi_ext_intr_sts0[0]) >> 5) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_EXT_INTR_STS0r_MICRO_RMI_DR_ECC_UNCORR_ERR_STATUSf_SET(r,f) (r).uc_rmi_ext_intr_sts0[0]=(((r).uc_rmi_ext_intr_sts0[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_EXT_INTR_STS0r_MICRO_RMI_DR_ECC_CORR_ERR_STATUSf_GET(r) ((((r).uc_rmi_ext_intr_sts0[0]) >> 4) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_EXT_INTR_STS0r_MICRO_RMI_DR_ECC_CORR_ERR_STATUSf_SET(r,f) (r).uc_rmi_ext_intr_sts0[0]=(((r).uc_rmi_ext_intr_sts0[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_EXT_INTR_STS0r_MICRO_RMI_CR_ECC_MULTIROW_ERR_STATUSf_GET(r) ((((r).uc_rmi_ext_intr_sts0[0]) >> 2) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_EXT_INTR_STS0r_MICRO_RMI_CR_ECC_MULTIROW_ERR_STATUSf_SET(r,f) (r).uc_rmi_ext_intr_sts0[0]=(((r).uc_rmi_ext_intr_sts0[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_EXT_INTR_STS0r_MICRO_RMI_CR_ECC_UNCORR_ERR_STATUSf_GET(r) ((((r).uc_rmi_ext_intr_sts0[0]) >> 1) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_EXT_INTR_STS0r_MICRO_RMI_CR_ECC_UNCORR_ERR_STATUSf_SET(r,f) (r).uc_rmi_ext_intr_sts0[0]=(((r).uc_rmi_ext_intr_sts0[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_EXT_INTR_STS0r_MICRO_RMI_CR_ECC_CORR_ERR_STATUSf_GET(r) (((r).uc_rmi_ext_intr_sts0[0]) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_EXT_INTR_STS0r_MICRO_RMI_CR_ECC_CORR_ERR_STATUSf_SET(r,f) (r).uc_rmi_ext_intr_sts0[0]=(((r).uc_rmi_ext_intr_sts0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access UC_RMI_EXT_INTR_STS0.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_RMI_EXT_INTR_STS0r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_EXT_INTR_STS0r,(_r._uc_rmi_ext_intr_sts0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_RMI_EXT_INTR_STS0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_EXT_INTR_STS0r,(_r._uc_rmi_ext_intr_sts0)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_RMI_EXT_INTR_STS0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_EXT_INTR_STS0r,(_r._uc_rmi_ext_intr_sts0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_RMI_EXT_INTR_STS0r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_EXT_INTR_STS0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_rmi_ext_intr_sts0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_RMI_EXT_INTR_STS0r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_EXT_INTR_STS0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_rmi_ext_intr_sts0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_RMI_EXT_INTR_STS0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_EXT_INTR_STS0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_rmi_ext_intr_sts0))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define UC_RMI_EXT_INTR_STS0r BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_EXT_INTR_STS0r
#define UC_RMI_EXT_INTR_STS0r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_EXT_INTR_STS0r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_EXT_INTR_STS0r_t UC_RMI_EXT_INTR_STS0r_t;
#define UC_RMI_EXT_INTR_STS0r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_EXT_INTR_STS0r_CLR
#define UC_RMI_EXT_INTR_STS0r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_EXT_INTR_STS0r_SET
#define UC_RMI_EXT_INTR_STS0r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_EXT_INTR_STS0r_GET
#define UC_RMI_EXT_INTR_STS0r_MICRO_RMI_MBOX_MSGOUT_STATUS_ORf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_EXT_INTR_STS0r_MICRO_RMI_MBOX_MSGOUT_STATUS_ORf_GET
#define UC_RMI_EXT_INTR_STS0r_MICRO_RMI_MBOX_MSGOUT_STATUS_ORf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_EXT_INTR_STS0r_MICRO_RMI_MBOX_MSGOUT_STATUS_ORf_SET
#define UC_RMI_EXT_INTR_STS0r_MICRO_RMI_DR_ECC_MULTIROW_ERR_STATUSf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_EXT_INTR_STS0r_MICRO_RMI_DR_ECC_MULTIROW_ERR_STATUSf_GET
#define UC_RMI_EXT_INTR_STS0r_MICRO_RMI_DR_ECC_MULTIROW_ERR_STATUSf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_EXT_INTR_STS0r_MICRO_RMI_DR_ECC_MULTIROW_ERR_STATUSf_SET
#define UC_RMI_EXT_INTR_STS0r_MICRO_RMI_DR_ECC_UNCORR_ERR_STATUSf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_EXT_INTR_STS0r_MICRO_RMI_DR_ECC_UNCORR_ERR_STATUSf_GET
#define UC_RMI_EXT_INTR_STS0r_MICRO_RMI_DR_ECC_UNCORR_ERR_STATUSf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_EXT_INTR_STS0r_MICRO_RMI_DR_ECC_UNCORR_ERR_STATUSf_SET
#define UC_RMI_EXT_INTR_STS0r_MICRO_RMI_DR_ECC_CORR_ERR_STATUSf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_EXT_INTR_STS0r_MICRO_RMI_DR_ECC_CORR_ERR_STATUSf_GET
#define UC_RMI_EXT_INTR_STS0r_MICRO_RMI_DR_ECC_CORR_ERR_STATUSf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_EXT_INTR_STS0r_MICRO_RMI_DR_ECC_CORR_ERR_STATUSf_SET
#define UC_RMI_EXT_INTR_STS0r_MICRO_RMI_CR_ECC_MULTIROW_ERR_STATUSf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_EXT_INTR_STS0r_MICRO_RMI_CR_ECC_MULTIROW_ERR_STATUSf_GET
#define UC_RMI_EXT_INTR_STS0r_MICRO_RMI_CR_ECC_MULTIROW_ERR_STATUSf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_EXT_INTR_STS0r_MICRO_RMI_CR_ECC_MULTIROW_ERR_STATUSf_SET
#define UC_RMI_EXT_INTR_STS0r_MICRO_RMI_CR_ECC_UNCORR_ERR_STATUSf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_EXT_INTR_STS0r_MICRO_RMI_CR_ECC_UNCORR_ERR_STATUSf_GET
#define UC_RMI_EXT_INTR_STS0r_MICRO_RMI_CR_ECC_UNCORR_ERR_STATUSf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_EXT_INTR_STS0r_MICRO_RMI_CR_ECC_UNCORR_ERR_STATUSf_SET
#define UC_RMI_EXT_INTR_STS0r_MICRO_RMI_CR_ECC_CORR_ERR_STATUSf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_EXT_INTR_STS0r_MICRO_RMI_CR_ECC_CORR_ERR_STATUSf_GET
#define UC_RMI_EXT_INTR_STS0r_MICRO_RMI_CR_ECC_CORR_ERR_STATUSf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_EXT_INTR_STS0r_MICRO_RMI_CR_ECC_CORR_ERR_STATUSf_SET
#define READ_UC_RMI_EXT_INTR_STS0r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_RMI_EXT_INTR_STS0r
#define WRITE_UC_RMI_EXT_INTR_STS0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_RMI_EXT_INTR_STS0r
#define MODIFY_UC_RMI_EXT_INTR_STS0r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_RMI_EXT_INTR_STS0r
#define READLN_UC_RMI_EXT_INTR_STS0r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_RMI_EXT_INTR_STS0r
#define WRITELN_UC_RMI_EXT_INTR_STS0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_RMI_EXT_INTR_STS0r
#define WRITEALL_UC_RMI_EXT_INTR_STS0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_RMI_EXT_INTR_STS0r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_EXT_INTR_STS0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  UC_RMI_PMI_IF_CTL0
 * BLOCKS:   MICRO_C
 * REGADDR:  0xd22b
 * DEVAD:    1
 * DESC:     pmi interface control register 0
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     MICRO_PMI_HP_FAST_READ_EN pmi hp interface fast read enable1 - use pmi_hp_read_vld during read0 - use pmi_hp_ack during read
 *     MICRO_PMI_HP_FAST_BKTOBK_EN pmi hp interface fast back to back enable1 - skip over some of the states in the fsm during back to back transition0 - state transitions as in f28
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_PMI_IF_CTL0r (0x0001d22b | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_PMI_IF_CTL0r_SIZE 4

/*
 * This structure should be used to declare and program UC_RMI_PMI_IF_CTL0.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_PMI_IF_CTL0r_s {
	uint32_t v[1];
	uint32_t uc_rmi_pmi_if_ctl0[1];
	uint32_t _uc_rmi_pmi_if_ctl0;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_PMI_IF_CTL0r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_PMI_IF_CTL0r_CLR(r) (r).uc_rmi_pmi_if_ctl0[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_PMI_IF_CTL0r_SET(r,d) (r).uc_rmi_pmi_if_ctl0[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_PMI_IF_CTL0r_GET(r) (r).uc_rmi_pmi_if_ctl0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_PMI_IF_CTL0r_MICRO_PMI_HP_FAST_BKTOBK_ENf_GET(r) ((((r).uc_rmi_pmi_if_ctl0[0]) >> 2) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_PMI_IF_CTL0r_MICRO_PMI_HP_FAST_BKTOBK_ENf_SET(r,f) (r).uc_rmi_pmi_if_ctl0[0]=(((r).uc_rmi_pmi_if_ctl0[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_PMI_IF_CTL0r_MICRO_PMI_HP_FAST_READ_ENf_GET(r) (((r).uc_rmi_pmi_if_ctl0[0]) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_PMI_IF_CTL0r_MICRO_PMI_HP_FAST_READ_ENf_SET(r,f) (r).uc_rmi_pmi_if_ctl0[0]=(((r).uc_rmi_pmi_if_ctl0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access UC_RMI_PMI_IF_CTL0.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_RMI_PMI_IF_CTL0r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_PMI_IF_CTL0r,(_r._uc_rmi_pmi_if_ctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_RMI_PMI_IF_CTL0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_PMI_IF_CTL0r,(_r._uc_rmi_pmi_if_ctl0)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_RMI_PMI_IF_CTL0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_PMI_IF_CTL0r,(_r._uc_rmi_pmi_if_ctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_RMI_PMI_IF_CTL0r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_PMI_IF_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_rmi_pmi_if_ctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_RMI_PMI_IF_CTL0r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_PMI_IF_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_rmi_pmi_if_ctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_RMI_PMI_IF_CTL0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_PMI_IF_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_rmi_pmi_if_ctl0))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define UC_RMI_PMI_IF_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_PMI_IF_CTL0r
#define UC_RMI_PMI_IF_CTL0r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_PMI_IF_CTL0r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_PMI_IF_CTL0r_t UC_RMI_PMI_IF_CTL0r_t;
#define UC_RMI_PMI_IF_CTL0r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_PMI_IF_CTL0r_CLR
#define UC_RMI_PMI_IF_CTL0r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_PMI_IF_CTL0r_SET
#define UC_RMI_PMI_IF_CTL0r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_PMI_IF_CTL0r_GET
#define UC_RMI_PMI_IF_CTL0r_MICRO_PMI_HP_FAST_BKTOBK_ENf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_PMI_IF_CTL0r_MICRO_PMI_HP_FAST_BKTOBK_ENf_GET
#define UC_RMI_PMI_IF_CTL0r_MICRO_PMI_HP_FAST_BKTOBK_ENf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_PMI_IF_CTL0r_MICRO_PMI_HP_FAST_BKTOBK_ENf_SET
#define UC_RMI_PMI_IF_CTL0r_MICRO_PMI_HP_FAST_READ_ENf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_PMI_IF_CTL0r_MICRO_PMI_HP_FAST_READ_ENf_GET
#define UC_RMI_PMI_IF_CTL0r_MICRO_PMI_HP_FAST_READ_ENf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_PMI_IF_CTL0r_MICRO_PMI_HP_FAST_READ_ENf_SET
#define READ_UC_RMI_PMI_IF_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_RMI_PMI_IF_CTL0r
#define WRITE_UC_RMI_PMI_IF_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_RMI_PMI_IF_CTL0r
#define MODIFY_UC_RMI_PMI_IF_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_RMI_PMI_IF_CTL0r
#define READLN_UC_RMI_PMI_IF_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_RMI_PMI_IF_CTL0r
#define WRITELN_UC_RMI_PMI_IF_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_RMI_PMI_IF_CTL0r
#define WRITEALL_UC_RMI_PMI_IF_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_RMI_PMI_IF_CTL0r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_PMI_IF_CTL0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  UC_RMI_SILICON_DBG_CTL0
 * BLOCKS:   MICRO_C
 * REGADDR:  0xd22c
 * DEVAD:    1
 * DESC:     Silicon debug control register 0
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     MICRO_SILICON_DEBUG_STATUS_MUX_SEL This field is used to select the data to be muxed to rmi_silicon_debug_status0 registers0 - register interface - {5'd0, init_req,  wraddr_changed,  write_req,rdaddr_changed, read_req, ra_state[1:0],1'b0, ra_his_state[2:0]}1 - pram interface     - {1'b0, pif_state_status[1:0], pif_his_state_status[3:0],pr_hready, pr_dr_chipsel, pr_cr_chipsel, pr_state[1:0], 1'b0,pr_his_state[2:0]};2 - pmi_hp interface of micro_core 0  - {1'b0, pmi_state[2:0], 4'h0, pmi_his_state[7:0]}3 - pmi_hp interface of micro_core 1  - {1'b0, pmi_state[2:0], 4'h0, pmi_his_state[7:0]}4 - pmi_hp interface of micro_core 2  - {1'b0, pmi_state[2:0], 4'h0, pmi_his_state[7:0]}5 - pmi_hp interface of micro_core 3  - {1'b0, pmi_state[2:0], 4'h0, pmi_his_state[7:0]}
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_SILICON_DBG_CTL0r (0x0001d22c | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_SILICON_DBG_CTL0r_SIZE 4

/*
 * This structure should be used to declare and program UC_RMI_SILICON_DBG_CTL0.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_SILICON_DBG_CTL0r_s {
	uint32_t v[1];
	uint32_t uc_rmi_silicon_dbg_ctl0[1];
	uint32_t _uc_rmi_silicon_dbg_ctl0;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_SILICON_DBG_CTL0r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_SILICON_DBG_CTL0r_CLR(r) (r).uc_rmi_silicon_dbg_ctl0[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_SILICON_DBG_CTL0r_SET(r,d) (r).uc_rmi_silicon_dbg_ctl0[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_SILICON_DBG_CTL0r_GET(r) (r).uc_rmi_silicon_dbg_ctl0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_SILICON_DBG_CTL0r_MICRO_SILICON_DEBUG_STATUS_MUX_SELf_GET(r) (((r).uc_rmi_silicon_dbg_ctl0[0]) & 0x7)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_SILICON_DBG_CTL0r_MICRO_SILICON_DEBUG_STATUS_MUX_SELf_SET(r,f) (r).uc_rmi_silicon_dbg_ctl0[0]=(((r).uc_rmi_silicon_dbg_ctl0[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7)) | (0x7 << 16)

/*
 * These macros can be used to access UC_RMI_SILICON_DBG_CTL0.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_RMI_SILICON_DBG_CTL0r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_SILICON_DBG_CTL0r,(_r._uc_rmi_silicon_dbg_ctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_RMI_SILICON_DBG_CTL0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_SILICON_DBG_CTL0r,(_r._uc_rmi_silicon_dbg_ctl0)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_RMI_SILICON_DBG_CTL0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_SILICON_DBG_CTL0r,(_r._uc_rmi_silicon_dbg_ctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_RMI_SILICON_DBG_CTL0r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_SILICON_DBG_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_rmi_silicon_dbg_ctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_RMI_SILICON_DBG_CTL0r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_SILICON_DBG_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_rmi_silicon_dbg_ctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_RMI_SILICON_DBG_CTL0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_SILICON_DBG_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_rmi_silicon_dbg_ctl0))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define UC_RMI_SILICON_DBG_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_SILICON_DBG_CTL0r
#define UC_RMI_SILICON_DBG_CTL0r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_SILICON_DBG_CTL0r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_SILICON_DBG_CTL0r_t UC_RMI_SILICON_DBG_CTL0r_t;
#define UC_RMI_SILICON_DBG_CTL0r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_SILICON_DBG_CTL0r_CLR
#define UC_RMI_SILICON_DBG_CTL0r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_SILICON_DBG_CTL0r_SET
#define UC_RMI_SILICON_DBG_CTL0r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_SILICON_DBG_CTL0r_GET
#define UC_RMI_SILICON_DBG_CTL0r_MICRO_SILICON_DEBUG_STATUS_MUX_SELf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_SILICON_DBG_CTL0r_MICRO_SILICON_DEBUG_STATUS_MUX_SELf_GET
#define UC_RMI_SILICON_DBG_CTL0r_MICRO_SILICON_DEBUG_STATUS_MUX_SELf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_SILICON_DBG_CTL0r_MICRO_SILICON_DEBUG_STATUS_MUX_SELf_SET
#define READ_UC_RMI_SILICON_DBG_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_RMI_SILICON_DBG_CTL0r
#define WRITE_UC_RMI_SILICON_DBG_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_RMI_SILICON_DBG_CTL0r
#define MODIFY_UC_RMI_SILICON_DBG_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_RMI_SILICON_DBG_CTL0r
#define READLN_UC_RMI_SILICON_DBG_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_RMI_SILICON_DBG_CTL0r
#define WRITELN_UC_RMI_SILICON_DBG_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_RMI_SILICON_DBG_CTL0r
#define WRITEALL_UC_RMI_SILICON_DBG_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_RMI_SILICON_DBG_CTL0r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_SILICON_DBG_CTL0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  UC_RMI_SILICON_DBG_STS0
 * BLOCKS:   MICRO_C
 * REGADDR:  0xd22d
 * DEVAD:    1
 * DESC:     Silicon debug status register 0
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     MICRO_SILICON_DEBUG_STATUS_MUXED_DATA Muxed status data is made avaialable on this field.micro_silicon_debug_status_mux_sel is used to select the data source
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_SILICON_DBG_STS0r (0x0001d22d | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_SILICON_DBG_STS0r_SIZE 4

/*
 * This structure should be used to declare and program UC_RMI_SILICON_DBG_STS0.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_SILICON_DBG_STS0r_s {
	uint32_t v[1];
	uint32_t uc_rmi_silicon_dbg_sts0[1];
	uint32_t _uc_rmi_silicon_dbg_sts0;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_SILICON_DBG_STS0r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_SILICON_DBG_STS0r_CLR(r) (r).uc_rmi_silicon_dbg_sts0[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_SILICON_DBG_STS0r_SET(r,d) (r).uc_rmi_silicon_dbg_sts0[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_SILICON_DBG_STS0r_GET(r) (r).uc_rmi_silicon_dbg_sts0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_SILICON_DBG_STS0r_MICRO_SILICON_DEBUG_STATUS_MUXED_DATAf_GET(r) (((r).uc_rmi_silicon_dbg_sts0[0]) & 0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_SILICON_DBG_STS0r_MICRO_SILICON_DEBUG_STATUS_MUXED_DATAf_SET(r,f) (r).uc_rmi_silicon_dbg_sts0[0]=(((r).uc_rmi_silicon_dbg_sts0[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access UC_RMI_SILICON_DBG_STS0.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_RMI_SILICON_DBG_STS0r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_SILICON_DBG_STS0r,(_r._uc_rmi_silicon_dbg_sts0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_RMI_SILICON_DBG_STS0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_SILICON_DBG_STS0r,(_r._uc_rmi_silicon_dbg_sts0)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_RMI_SILICON_DBG_STS0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_SILICON_DBG_STS0r,(_r._uc_rmi_silicon_dbg_sts0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_RMI_SILICON_DBG_STS0r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_SILICON_DBG_STS0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_rmi_silicon_dbg_sts0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_RMI_SILICON_DBG_STS0r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_SILICON_DBG_STS0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_rmi_silicon_dbg_sts0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_RMI_SILICON_DBG_STS0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_SILICON_DBG_STS0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_rmi_silicon_dbg_sts0))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define UC_RMI_SILICON_DBG_STS0r BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_SILICON_DBG_STS0r
#define UC_RMI_SILICON_DBG_STS0r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_SILICON_DBG_STS0r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_SILICON_DBG_STS0r_t UC_RMI_SILICON_DBG_STS0r_t;
#define UC_RMI_SILICON_DBG_STS0r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_SILICON_DBG_STS0r_CLR
#define UC_RMI_SILICON_DBG_STS0r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_SILICON_DBG_STS0r_SET
#define UC_RMI_SILICON_DBG_STS0r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_SILICON_DBG_STS0r_GET
#define UC_RMI_SILICON_DBG_STS0r_MICRO_SILICON_DEBUG_STATUS_MUXED_DATAf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_SILICON_DBG_STS0r_MICRO_SILICON_DEBUG_STATUS_MUXED_DATAf_GET
#define UC_RMI_SILICON_DBG_STS0r_MICRO_SILICON_DEBUG_STATUS_MUXED_DATAf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_SILICON_DBG_STS0r_MICRO_SILICON_DEBUG_STATUS_MUXED_DATAf_SET
#define READ_UC_RMI_SILICON_DBG_STS0r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_RMI_SILICON_DBG_STS0r
#define WRITE_UC_RMI_SILICON_DBG_STS0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_RMI_SILICON_DBG_STS0r
#define MODIFY_UC_RMI_SILICON_DBG_STS0r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_RMI_SILICON_DBG_STS0r
#define READLN_UC_RMI_SILICON_DBG_STS0r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_RMI_SILICON_DBG_STS0r
#define WRITELN_UC_RMI_SILICON_DBG_STS0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_RMI_SILICON_DBG_STS0r
#define WRITEALL_UC_RMI_SILICON_DBG_STS0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_RMI_SILICON_DBG_STS0r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_SILICON_DBG_STS0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  UC_RAM_CTL2
 * BLOCKS:   MICRO_C
 * REGADDR:  0xd22e
 * DEVAD:    1
 * DESC:     ram configuration register 2
 * RESETVAL: 0x8400 (33792)
 * ACCESS:   R/W
 * FIELDS:
 *     MICRO_CORE_STACK_SIZE Micro Core Stack SizeThis field is used to set the stack size for a micro core on a 4 byte granualarity.All of the micro cores (Cortex-M0P) use the same stack size. The total amount ofmemory allocated for stack = number of cores * micro_core_stack_size.For 40K Data RAM, limiting the stack size to 10K.
 *     MICRO_CORE_STACK_EN Micro Core Stack Enable1 - Enabled (default) - perform logical to physical address mapping un the data RAM for stack0 - Disabled
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_CTL2r (0x0001d22e | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_CTL2r_SIZE 4

/*
 * This structure should be used to declare and program UC_RAM_CTL2.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_CTL2r_s {
	uint32_t v[1];
	uint32_t uc_ram_ctl2[1];
	uint32_t _uc_ram_ctl2;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_CTL2r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_CTL2r_CLR(r) (r).uc_ram_ctl2[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_CTL2r_SET(r,d) (r).uc_ram_ctl2[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_CTL2r_GET(r) (r).uc_ram_ctl2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_CTL2r_MICRO_CORE_STACK_ENf_GET(r) ((((r).uc_ram_ctl2[0]) >> 15) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_CTL2r_MICRO_CORE_STACK_ENf_SET(r,f) (r).uc_ram_ctl2[0]=(((r).uc_ram_ctl2[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_CTL2r_MICRO_CORE_STACK_SIZEf_GET(r) ((((r).uc_ram_ctl2[0]) >> 2) & 0x1fff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_CTL2r_MICRO_CORE_STACK_SIZEf_SET(r,f) (r).uc_ram_ctl2[0]=(((r).uc_ram_ctl2[0] & ~((uint32_t)0x1fff << 2)) | ((((uint32_t)f) & 0x1fff) << 2)) | (8191 << (16 + 2))

/*
 * These macros can be used to access UC_RAM_CTL2.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_RAM_CTL2r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_CTL2r,(_r._uc_ram_ctl2))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_RAM_CTL2r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_CTL2r,(_r._uc_ram_ctl2)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_RAM_CTL2r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_CTL2r,(_r._uc_ram_ctl2))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_RAM_CTL2r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_CTL2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_ram_ctl2))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_RAM_CTL2r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_CTL2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_ram_ctl2))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_RAM_CTL2r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_CTL2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_ram_ctl2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define UC_RAM_CTL2r BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_CTL2r
#define UC_RAM_CTL2r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_CTL2r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_CTL2r_t UC_RAM_CTL2r_t;
#define UC_RAM_CTL2r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_CTL2r_CLR
#define UC_RAM_CTL2r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_CTL2r_SET
#define UC_RAM_CTL2r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_CTL2r_GET
#define UC_RAM_CTL2r_MICRO_CORE_STACK_ENf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_CTL2r_MICRO_CORE_STACK_ENf_GET
#define UC_RAM_CTL2r_MICRO_CORE_STACK_ENf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_CTL2r_MICRO_CORE_STACK_ENf_SET
#define UC_RAM_CTL2r_MICRO_CORE_STACK_SIZEf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_CTL2r_MICRO_CORE_STACK_SIZEf_GET
#define UC_RAM_CTL2r_MICRO_CORE_STACK_SIZEf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_CTL2r_MICRO_CORE_STACK_SIZEf_SET
#define READ_UC_RAM_CTL2r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_RAM_CTL2r
#define WRITE_UC_RAM_CTL2r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_RAM_CTL2r
#define MODIFY_UC_RAM_CTL2r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_RAM_CTL2r
#define READLN_UC_RAM_CTL2r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_RAM_CTL2r
#define WRITELN_UC_RAM_CTL2r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_RAM_CTL2r
#define WRITEALL_UC_RAM_CTL2r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_RAM_CTL2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RAM_CTL2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  UC_RMI_UC_MSG_CTL0
 * BLOCKS:   MICRO_D
 * REGADDR:  0xd230
 * DEVAD:    1
 * DESC:     micro message control register 0
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     MICRO_MSG0       This field is used to exchange information between micro core(s) and chip level firmwareBoth the micro cores(s) and the chip level firmware can read/write this field
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MSG_CTL0r (0x0001d230 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MSG_CTL0r_SIZE 4

/*
 * This structure should be used to declare and program UC_RMI_UC_MSG_CTL0.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MSG_CTL0r_s {
	uint32_t v[1];
	uint32_t uc_rmi_uc_msg_ctl0[1];
	uint32_t _uc_rmi_uc_msg_ctl0;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MSG_CTL0r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MSG_CTL0r_CLR(r) (r).uc_rmi_uc_msg_ctl0[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MSG_CTL0r_SET(r,d) (r).uc_rmi_uc_msg_ctl0[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MSG_CTL0r_GET(r) (r).uc_rmi_uc_msg_ctl0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MSG_CTL0r_MICRO_MSG0f_GET(r) (((r).uc_rmi_uc_msg_ctl0[0]) & 0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MSG_CTL0r_MICRO_MSG0f_SET(r,f) (r).uc_rmi_uc_msg_ctl0[0]=(((r).uc_rmi_uc_msg_ctl0[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access UC_RMI_UC_MSG_CTL0.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_RMI_UC_MSG_CTL0r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MSG_CTL0r,(_r._uc_rmi_uc_msg_ctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_RMI_UC_MSG_CTL0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MSG_CTL0r,(_r._uc_rmi_uc_msg_ctl0)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_RMI_UC_MSG_CTL0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MSG_CTL0r,(_r._uc_rmi_uc_msg_ctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_RMI_UC_MSG_CTL0r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MSG_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_rmi_uc_msg_ctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_RMI_UC_MSG_CTL0r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MSG_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_rmi_uc_msg_ctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_RMI_UC_MSG_CTL0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MSG_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_rmi_uc_msg_ctl0))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define UC_RMI_UC_MSG_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MSG_CTL0r
#define UC_RMI_UC_MSG_CTL0r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MSG_CTL0r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MSG_CTL0r_t UC_RMI_UC_MSG_CTL0r_t;
#define UC_RMI_UC_MSG_CTL0r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MSG_CTL0r_CLR
#define UC_RMI_UC_MSG_CTL0r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MSG_CTL0r_SET
#define UC_RMI_UC_MSG_CTL0r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MSG_CTL0r_GET
#define UC_RMI_UC_MSG_CTL0r_MICRO_MSG0f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MSG_CTL0r_MICRO_MSG0f_GET
#define UC_RMI_UC_MSG_CTL0r_MICRO_MSG0f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MSG_CTL0r_MICRO_MSG0f_SET
#define READ_UC_RMI_UC_MSG_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_RMI_UC_MSG_CTL0r
#define WRITE_UC_RMI_UC_MSG_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_RMI_UC_MSG_CTL0r
#define MODIFY_UC_RMI_UC_MSG_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_RMI_UC_MSG_CTL0r
#define READLN_UC_RMI_UC_MSG_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_RMI_UC_MSG_CTL0r
#define WRITELN_UC_RMI_UC_MSG_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_RMI_UC_MSG_CTL0r
#define WRITEALL_UC_RMI_UC_MSG_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_RMI_UC_MSG_CTL0r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MSG_CTL0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  UC_RMI_UC_MSG_CTL1
 * BLOCKS:   MICRO_D
 * REGADDR:  0xd231
 * DEVAD:    1
 * DESC:     micro message control register 1
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     MICRO_MSG1       This field is used to exchange information between micro core(s) and chip level firmwareBoth the micro cores(s) and the chip level firmware can read/write this field
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MSG_CTL1r (0x0001d231 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MSG_CTL1r_SIZE 4

/*
 * This structure should be used to declare and program UC_RMI_UC_MSG_CTL1.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MSG_CTL1r_s {
	uint32_t v[1];
	uint32_t uc_rmi_uc_msg_ctl1[1];
	uint32_t _uc_rmi_uc_msg_ctl1;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MSG_CTL1r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MSG_CTL1r_CLR(r) (r).uc_rmi_uc_msg_ctl1[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MSG_CTL1r_SET(r,d) (r).uc_rmi_uc_msg_ctl1[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MSG_CTL1r_GET(r) (r).uc_rmi_uc_msg_ctl1[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MSG_CTL1r_MICRO_MSG1f_GET(r) (((r).uc_rmi_uc_msg_ctl1[0]) & 0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MSG_CTL1r_MICRO_MSG1f_SET(r,f) (r).uc_rmi_uc_msg_ctl1[0]=(((r).uc_rmi_uc_msg_ctl1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access UC_RMI_UC_MSG_CTL1.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_RMI_UC_MSG_CTL1r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MSG_CTL1r,(_r._uc_rmi_uc_msg_ctl1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_RMI_UC_MSG_CTL1r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MSG_CTL1r,(_r._uc_rmi_uc_msg_ctl1)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_RMI_UC_MSG_CTL1r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MSG_CTL1r,(_r._uc_rmi_uc_msg_ctl1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_RMI_UC_MSG_CTL1r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MSG_CTL1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_rmi_uc_msg_ctl1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_RMI_UC_MSG_CTL1r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MSG_CTL1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_rmi_uc_msg_ctl1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_RMI_UC_MSG_CTL1r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MSG_CTL1r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_rmi_uc_msg_ctl1))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define UC_RMI_UC_MSG_CTL1r BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MSG_CTL1r
#define UC_RMI_UC_MSG_CTL1r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MSG_CTL1r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MSG_CTL1r_t UC_RMI_UC_MSG_CTL1r_t;
#define UC_RMI_UC_MSG_CTL1r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MSG_CTL1r_CLR
#define UC_RMI_UC_MSG_CTL1r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MSG_CTL1r_SET
#define UC_RMI_UC_MSG_CTL1r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MSG_CTL1r_GET
#define UC_RMI_UC_MSG_CTL1r_MICRO_MSG1f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MSG_CTL1r_MICRO_MSG1f_GET
#define UC_RMI_UC_MSG_CTL1r_MICRO_MSG1f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MSG_CTL1r_MICRO_MSG1f_SET
#define READ_UC_RMI_UC_MSG_CTL1r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_RMI_UC_MSG_CTL1r
#define WRITE_UC_RMI_UC_MSG_CTL1r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_RMI_UC_MSG_CTL1r
#define MODIFY_UC_RMI_UC_MSG_CTL1r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_RMI_UC_MSG_CTL1r
#define READLN_UC_RMI_UC_MSG_CTL1r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_RMI_UC_MSG_CTL1r
#define WRITELN_UC_RMI_UC_MSG_CTL1r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_RMI_UC_MSG_CTL1r
#define WRITEALL_UC_RMI_UC_MSG_CTL1r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_RMI_UC_MSG_CTL1r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MSG_CTL1r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  UC_RMI_UC_MSG_CTL2
 * BLOCKS:   MICRO_D
 * REGADDR:  0xd232
 * DEVAD:    1
 * DESC:     micro message control register 2
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     MICRO_MSG2       This field is used to exchange information between micro core(s) and chip level firmwareBoth the micro cores(s) and the chip level firmware can read/write this field
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MSG_CTL2r (0x0001d232 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MSG_CTL2r_SIZE 4

/*
 * This structure should be used to declare and program UC_RMI_UC_MSG_CTL2.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MSG_CTL2r_s {
	uint32_t v[1];
	uint32_t uc_rmi_uc_msg_ctl2[1];
	uint32_t _uc_rmi_uc_msg_ctl2;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MSG_CTL2r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MSG_CTL2r_CLR(r) (r).uc_rmi_uc_msg_ctl2[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MSG_CTL2r_SET(r,d) (r).uc_rmi_uc_msg_ctl2[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MSG_CTL2r_GET(r) (r).uc_rmi_uc_msg_ctl2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MSG_CTL2r_MICRO_MSG2f_GET(r) (((r).uc_rmi_uc_msg_ctl2[0]) & 0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MSG_CTL2r_MICRO_MSG2f_SET(r,f) (r).uc_rmi_uc_msg_ctl2[0]=(((r).uc_rmi_uc_msg_ctl2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access UC_RMI_UC_MSG_CTL2.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_RMI_UC_MSG_CTL2r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MSG_CTL2r,(_r._uc_rmi_uc_msg_ctl2))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_RMI_UC_MSG_CTL2r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MSG_CTL2r,(_r._uc_rmi_uc_msg_ctl2)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_RMI_UC_MSG_CTL2r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MSG_CTL2r,(_r._uc_rmi_uc_msg_ctl2))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_RMI_UC_MSG_CTL2r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MSG_CTL2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_rmi_uc_msg_ctl2))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_RMI_UC_MSG_CTL2r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MSG_CTL2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_rmi_uc_msg_ctl2))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_RMI_UC_MSG_CTL2r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MSG_CTL2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_rmi_uc_msg_ctl2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define UC_RMI_UC_MSG_CTL2r BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MSG_CTL2r
#define UC_RMI_UC_MSG_CTL2r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MSG_CTL2r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MSG_CTL2r_t UC_RMI_UC_MSG_CTL2r_t;
#define UC_RMI_UC_MSG_CTL2r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MSG_CTL2r_CLR
#define UC_RMI_UC_MSG_CTL2r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MSG_CTL2r_SET
#define UC_RMI_UC_MSG_CTL2r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MSG_CTL2r_GET
#define UC_RMI_UC_MSG_CTL2r_MICRO_MSG2f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MSG_CTL2r_MICRO_MSG2f_GET
#define UC_RMI_UC_MSG_CTL2r_MICRO_MSG2f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MSG_CTL2r_MICRO_MSG2f_SET
#define READ_UC_RMI_UC_MSG_CTL2r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_RMI_UC_MSG_CTL2r
#define WRITE_UC_RMI_UC_MSG_CTL2r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_RMI_UC_MSG_CTL2r
#define MODIFY_UC_RMI_UC_MSG_CTL2r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_RMI_UC_MSG_CTL2r
#define READLN_UC_RMI_UC_MSG_CTL2r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_RMI_UC_MSG_CTL2r
#define WRITELN_UC_RMI_UC_MSG_CTL2r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_RMI_UC_MSG_CTL2r
#define WRITEALL_UC_RMI_UC_MSG_CTL2r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_RMI_UC_MSG_CTL2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MSG_CTL2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  UC_RMI_UC_MSG_CTL3
 * BLOCKS:   MICRO_D
 * REGADDR:  0xd233
 * DEVAD:    1
 * DESC:     micro message control register 3
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     MICRO_MSG3       This field is used to exchange information between micro core(s) and chip level firmwareBoth the micro cores(s) and the chip level firmware can read/write this field
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MSG_CTL3r (0x0001d233 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MSG_CTL3r_SIZE 4

/*
 * This structure should be used to declare and program UC_RMI_UC_MSG_CTL3.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MSG_CTL3r_s {
	uint32_t v[1];
	uint32_t uc_rmi_uc_msg_ctl3[1];
	uint32_t _uc_rmi_uc_msg_ctl3;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MSG_CTL3r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MSG_CTL3r_CLR(r) (r).uc_rmi_uc_msg_ctl3[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MSG_CTL3r_SET(r,d) (r).uc_rmi_uc_msg_ctl3[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MSG_CTL3r_GET(r) (r).uc_rmi_uc_msg_ctl3[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MSG_CTL3r_MICRO_MSG3f_GET(r) (((r).uc_rmi_uc_msg_ctl3[0]) & 0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MSG_CTL3r_MICRO_MSG3f_SET(r,f) (r).uc_rmi_uc_msg_ctl3[0]=(((r).uc_rmi_uc_msg_ctl3[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access UC_RMI_UC_MSG_CTL3.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_RMI_UC_MSG_CTL3r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MSG_CTL3r,(_r._uc_rmi_uc_msg_ctl3))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_RMI_UC_MSG_CTL3r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MSG_CTL3r,(_r._uc_rmi_uc_msg_ctl3)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_RMI_UC_MSG_CTL3r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MSG_CTL3r,(_r._uc_rmi_uc_msg_ctl3))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_RMI_UC_MSG_CTL3r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MSG_CTL3r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_rmi_uc_msg_ctl3))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_RMI_UC_MSG_CTL3r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MSG_CTL3r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_rmi_uc_msg_ctl3))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_RMI_UC_MSG_CTL3r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MSG_CTL3r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_rmi_uc_msg_ctl3))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define UC_RMI_UC_MSG_CTL3r BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MSG_CTL3r
#define UC_RMI_UC_MSG_CTL3r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MSG_CTL3r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MSG_CTL3r_t UC_RMI_UC_MSG_CTL3r_t;
#define UC_RMI_UC_MSG_CTL3r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MSG_CTL3r_CLR
#define UC_RMI_UC_MSG_CTL3r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MSG_CTL3r_SET
#define UC_RMI_UC_MSG_CTL3r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MSG_CTL3r_GET
#define UC_RMI_UC_MSG_CTL3r_MICRO_MSG3f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MSG_CTL3r_MICRO_MSG3f_GET
#define UC_RMI_UC_MSG_CTL3r_MICRO_MSG3f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MSG_CTL3r_MICRO_MSG3f_SET
#define READ_UC_RMI_UC_MSG_CTL3r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_RMI_UC_MSG_CTL3r
#define WRITE_UC_RMI_UC_MSG_CTL3r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_RMI_UC_MSG_CTL3r
#define MODIFY_UC_RMI_UC_MSG_CTL3r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_RMI_UC_MSG_CTL3r
#define READLN_UC_RMI_UC_MSG_CTL3r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_RMI_UC_MSG_CTL3r
#define WRITELN_UC_RMI_UC_MSG_CTL3r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_RMI_UC_MSG_CTL3r
#define WRITEALL_UC_RMI_UC_MSG_CTL3r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_RMI_UC_MSG_CTL3r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_MSG_CTL3r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  UC_RMI_UC_CTL0
 * BLOCKS:   MICRO_D
 * REGADDR:  0xd23e
 * DEVAD:    1
 * DESC:     micro control register 0
 * RESETVAL: 0x1 (1)
 * ACCESS:   R/W
 * FIELDS:
 *     MICRO_MICRO_S_RSTB micro software reset :This register field resets the entire microcontroller subsystem except:micro_msg/micro_micro_s_rstb/micro_core_cfg_fwapi_data/micro_pvt_tempdata_frcmicro_pvt_tempdata_frcval/micro_debugger_id_frc/micro_debugger_id_frcval register fields,pvtmon logic and rmic micro clock slice logic.Setting this field to 1'b1 de-assert's a reset0 - asserted1 - de-asserted
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_CTL0r (0x0001d23e | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_CTL0r_SIZE 4

/*
 * This structure should be used to declare and program UC_RMI_UC_CTL0.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_CTL0r_s {
	uint32_t v[1];
	uint32_t uc_rmi_uc_ctl0[1];
	uint32_t _uc_rmi_uc_ctl0;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_CTL0r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_CTL0r_CLR(r) (r).uc_rmi_uc_ctl0[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_CTL0r_SET(r,d) (r).uc_rmi_uc_ctl0[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_CTL0r_GET(r) (r).uc_rmi_uc_ctl0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_CTL0r_MICRO_MICRO_S_RSTBf_GET(r) (((r).uc_rmi_uc_ctl0[0]) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_CTL0r_MICRO_MICRO_S_RSTBf_SET(r,f) (r).uc_rmi_uc_ctl0[0]=(((r).uc_rmi_uc_ctl0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access UC_RMI_UC_CTL0.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_RMI_UC_CTL0r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_CTL0r,(_r._uc_rmi_uc_ctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_RMI_UC_CTL0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_CTL0r,(_r._uc_rmi_uc_ctl0)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_RMI_UC_CTL0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_CTL0r,(_r._uc_rmi_uc_ctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_RMI_UC_CTL0r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_rmi_uc_ctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_RMI_UC_CTL0r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_rmi_uc_ctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_RMI_UC_CTL0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_rmi_uc_ctl0))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define UC_RMI_UC_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_CTL0r
#define UC_RMI_UC_CTL0r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_CTL0r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_CTL0r_t UC_RMI_UC_CTL0r_t;
#define UC_RMI_UC_CTL0r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_CTL0r_CLR
#define UC_RMI_UC_CTL0r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_CTL0r_SET
#define UC_RMI_UC_CTL0r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_CTL0r_GET
#define UC_RMI_UC_CTL0r_MICRO_MICRO_S_RSTBf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_CTL0r_MICRO_MICRO_S_RSTBf_GET
#define UC_RMI_UC_CTL0r_MICRO_MICRO_S_RSTBf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_CTL0r_MICRO_MICRO_S_RSTBf_SET
#define READ_UC_RMI_UC_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_RMI_UC_CTL0r
#define WRITE_UC_RMI_UC_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_RMI_UC_CTL0r
#define MODIFY_UC_RMI_UC_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_RMI_UC_CTL0r
#define READLN_UC_RMI_UC_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_RMI_UC_CTL0r
#define WRITELN_UC_RMI_UC_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_RMI_UC_CTL0r
#define WRITEALL_UC_RMI_UC_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_RMI_UC_CTL0r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_RMI_UC_CTL0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  UC_UC_CORE_CLK_CTL0
 * BLOCKS:   MICRO_E
 * REGADDR:  0xd240
 * DEVAD:    1
 * DESC:     micro core clock control registers 0
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     MICRO_CORE_CLK_EN micro core clock enable for core:While the micro-code is being loaded into the code RAM, the clock tomicro_core is normally disabled and a reset is asserted0 - disabled1 - enables
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CLK_CTL0r (0x0001d240 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CLK_CTL0r_SIZE 4

/*
 * This structure should be used to declare and program UC_UC_CORE_CLK_CTL0.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CLK_CTL0r_s {
	uint32_t v[1];
	uint32_t uc_uc_core_clk_ctl0[1];
	uint32_t _uc_uc_core_clk_ctl0;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CLK_CTL0r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CLK_CTL0r_CLR(r) (r).uc_uc_core_clk_ctl0[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CLK_CTL0r_SET(r,d) (r).uc_uc_core_clk_ctl0[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CLK_CTL0r_GET(r) (r).uc_uc_core_clk_ctl0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CLK_CTL0r_MICRO_CORE_CLK_ENf_GET(r) (((r).uc_uc_core_clk_ctl0[0]) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CLK_CTL0r_MICRO_CORE_CLK_ENf_SET(r,f) (r).uc_uc_core_clk_ctl0[0]=(((r).uc_uc_core_clk_ctl0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access UC_UC_CORE_CLK_CTL0.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_UC_CORE_CLK_CTL0r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CLK_CTL0r,(_r._uc_uc_core_clk_ctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_UC_CORE_CLK_CTL0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CLK_CTL0r,(_r._uc_uc_core_clk_ctl0)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_UC_CORE_CLK_CTL0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CLK_CTL0r,(_r._uc_uc_core_clk_ctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_UC_CORE_CLK_CTL0r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CLK_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_uc_core_clk_ctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_UC_CORE_CLK_CTL0r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CLK_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_uc_core_clk_ctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_UC_CORE_CLK_CTL0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CLK_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_uc_core_clk_ctl0))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define UC_UC_CORE_CLK_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CLK_CTL0r
#define UC_UC_CORE_CLK_CTL0r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CLK_CTL0r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CLK_CTL0r_t UC_UC_CORE_CLK_CTL0r_t;
#define UC_UC_CORE_CLK_CTL0r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CLK_CTL0r_CLR
#define UC_UC_CORE_CLK_CTL0r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CLK_CTL0r_SET
#define UC_UC_CORE_CLK_CTL0r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CLK_CTL0r_GET
#define UC_UC_CORE_CLK_CTL0r_MICRO_CORE_CLK_ENf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CLK_CTL0r_MICRO_CORE_CLK_ENf_GET
#define UC_UC_CORE_CLK_CTL0r_MICRO_CORE_CLK_ENf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CLK_CTL0r_MICRO_CORE_CLK_ENf_SET
#define READ_UC_UC_CORE_CLK_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_UC_CORE_CLK_CTL0r
#define WRITE_UC_UC_CORE_CLK_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_UC_CORE_CLK_CTL0r
#define MODIFY_UC_UC_CORE_CLK_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_UC_CORE_CLK_CTL0r
#define READLN_UC_UC_CORE_CLK_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_UC_CORE_CLK_CTL0r
#define WRITELN_UC_UC_CORE_CLK_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_UC_CORE_CLK_CTL0r
#define WRITEALL_UC_UC_CORE_CLK_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_UC_CORE_CLK_CTL0r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CLK_CTL0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  UC_UC_CORE_RST_CTL0
 * BLOCKS:   MICRO_E
 * REGADDR:  0xd241
 * DEVAD:    1
 * DESC:     micro core reset control registers 0
 * RESETVAL: 0xc000 (49152)
 * ACCESS:   R/W
 * FIELDS:
 *     MICRO_CORE_RSTB  micro core reset for core:While the micro-code is being loaded into the code RAM, the clock tomicro_core (m0) is normally disabled and a reset is asserted.Setting this field to 1'b1 de-asserts a reset to the micro.0 - disabled1 - enables
 *     MICRO_DAP_PORESET_S_RSTB micro core debugger software reset:A reset on BA21 por_rst_i pin is asserted when:1) pmd_por_h_rstb pin = 0 (upon power-on) OR2) micro_dap_poreset_s_rstb register field = 0 (software reset)0 - asserted1 - de-asserted
 *     MICRO_SW_PMI_HP_RSTB Software reset pmi_hp interface logicThis bit is to initialize the pmi_hp block0 - reset asserted1 - reset de-asserted
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_RST_CTL0r (0x0001d241 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_RST_CTL0r_SIZE 4

/*
 * This structure should be used to declare and program UC_UC_CORE_RST_CTL0.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_RST_CTL0r_s {
	uint32_t v[1];
	uint32_t uc_uc_core_rst_ctl0[1];
	uint32_t _uc_uc_core_rst_ctl0;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_RST_CTL0r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_RST_CTL0r_CLR(r) (r).uc_uc_core_rst_ctl0[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_RST_CTL0r_SET(r,d) (r).uc_uc_core_rst_ctl0[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_RST_CTL0r_GET(r) (r).uc_uc_core_rst_ctl0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_RST_CTL0r_MICRO_SW_PMI_HP_RSTBf_GET(r) ((((r).uc_uc_core_rst_ctl0[0]) >> 15) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_RST_CTL0r_MICRO_SW_PMI_HP_RSTBf_SET(r,f) (r).uc_uc_core_rst_ctl0[0]=(((r).uc_uc_core_rst_ctl0[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_RST_CTL0r_MICRO_DAP_PORESET_S_RSTBf_GET(r) ((((r).uc_uc_core_rst_ctl0[0]) >> 14) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_RST_CTL0r_MICRO_DAP_PORESET_S_RSTBf_SET(r,f) (r).uc_uc_core_rst_ctl0[0]=(((r).uc_uc_core_rst_ctl0[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14)) | (1 << (16 + 14))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_RST_CTL0r_MICRO_CORE_RSTBf_GET(r) (((r).uc_uc_core_rst_ctl0[0]) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_RST_CTL0r_MICRO_CORE_RSTBf_SET(r,f) (r).uc_uc_core_rst_ctl0[0]=(((r).uc_uc_core_rst_ctl0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access UC_UC_CORE_RST_CTL0.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_UC_CORE_RST_CTL0r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_RST_CTL0r,(_r._uc_uc_core_rst_ctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_UC_CORE_RST_CTL0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_RST_CTL0r,(_r._uc_uc_core_rst_ctl0)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_UC_CORE_RST_CTL0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_RST_CTL0r,(_r._uc_uc_core_rst_ctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_UC_CORE_RST_CTL0r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_RST_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_uc_core_rst_ctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_UC_CORE_RST_CTL0r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_RST_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_uc_core_rst_ctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_UC_CORE_RST_CTL0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_RST_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_uc_core_rst_ctl0))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define UC_UC_CORE_RST_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_RST_CTL0r
#define UC_UC_CORE_RST_CTL0r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_RST_CTL0r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_RST_CTL0r_t UC_UC_CORE_RST_CTL0r_t;
#define UC_UC_CORE_RST_CTL0r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_RST_CTL0r_CLR
#define UC_UC_CORE_RST_CTL0r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_RST_CTL0r_SET
#define UC_UC_CORE_RST_CTL0r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_RST_CTL0r_GET
#define UC_UC_CORE_RST_CTL0r_MICRO_SW_PMI_HP_RSTBf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_RST_CTL0r_MICRO_SW_PMI_HP_RSTBf_GET
#define UC_UC_CORE_RST_CTL0r_MICRO_SW_PMI_HP_RSTBf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_RST_CTL0r_MICRO_SW_PMI_HP_RSTBf_SET
#define UC_UC_CORE_RST_CTL0r_MICRO_DAP_PORESET_S_RSTBf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_RST_CTL0r_MICRO_DAP_PORESET_S_RSTBf_GET
#define UC_UC_CORE_RST_CTL0r_MICRO_DAP_PORESET_S_RSTBf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_RST_CTL0r_MICRO_DAP_PORESET_S_RSTBf_SET
#define UC_UC_CORE_RST_CTL0r_MICRO_CORE_RSTBf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_RST_CTL0r_MICRO_CORE_RSTBf_GET
#define UC_UC_CORE_RST_CTL0r_MICRO_CORE_RSTBf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_RST_CTL0r_MICRO_CORE_RSTBf_SET
#define READ_UC_UC_CORE_RST_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_UC_CORE_RST_CTL0r
#define WRITE_UC_UC_CORE_RST_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_UC_CORE_RST_CTL0r
#define MODIFY_UC_UC_CORE_RST_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_UC_CORE_RST_CTL0r
#define READLN_UC_UC_CORE_RST_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_UC_CORE_RST_CTL0r
#define WRITELN_UC_UC_CORE_RST_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_UC_CORE_RST_CTL0r
#define WRITEALL_UC_UC_CORE_RST_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_UC_CORE_RST_CTL0r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_RST_CTL0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  UC_UC_CORE_STS0
 * BLOCKS:   MICRO_E
 * REGADDR:  0xd242
 * DEVAD:    1
 * DESC:     rmi micro core status register 0
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     MICRO_PMI_HP_ERROR_STATUS pmi_hp_error signal statusThis field is set when pmi_hp_error signal is asserted by RMIC during pmi_hp bus tranactionsThis bit remains set, until this register is read (latch high, clear on read)
 *     MICRO_PMI_HP_WORD_ACCESS_ERR_STATUS This field is set when 32-bit operation is perform to generate transations on the pmi_hp busOnly 8/16-bits operations are allowedThis bit remains set, until this register is read (latch high, clear on read)
 *     MICRO_PMI_HP_ACK_TIMEOUT_STATUS This field is set when pmi_hp_ack signal on the pmi_hp bus does not toggle within 256 clock cycleThis bit remains set, until this register is read (latch high, clear on read)
 *     MICRO_M0P_DEFAULT_SLAVE_ERROR_STATUS m0p default slave error detected. M0P attempted to access un-used address1 - error detected - latched high clear on read0 - no error
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS0r (0x0001d242 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS0r_SIZE 4

/*
 * This structure should be used to declare and program UC_UC_CORE_STS0.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS0r_s {
	uint32_t v[1];
	uint32_t uc_uc_core_sts0[1];
	uint32_t _uc_uc_core_sts0;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS0r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS0r_CLR(r) (r).uc_uc_core_sts0[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS0r_SET(r,d) (r).uc_uc_core_sts0[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS0r_GET(r) (r).uc_uc_core_sts0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS0r_MICRO_M0P_DEFAULT_SLAVE_ERROR_STATUSf_GET(r) ((((r).uc_uc_core_sts0[0]) >> 3) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS0r_MICRO_M0P_DEFAULT_SLAVE_ERROR_STATUSf_SET(r,f) (r).uc_uc_core_sts0[0]=(((r).uc_uc_core_sts0[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS0r_MICRO_PMI_HP_ACK_TIMEOUT_STATUSf_GET(r) ((((r).uc_uc_core_sts0[0]) >> 2) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS0r_MICRO_PMI_HP_ACK_TIMEOUT_STATUSf_SET(r,f) (r).uc_uc_core_sts0[0]=(((r).uc_uc_core_sts0[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS0r_MICRO_PMI_HP_WORD_ACCESS_ERR_STATUSf_GET(r) ((((r).uc_uc_core_sts0[0]) >> 1) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS0r_MICRO_PMI_HP_WORD_ACCESS_ERR_STATUSf_SET(r,f) (r).uc_uc_core_sts0[0]=(((r).uc_uc_core_sts0[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS0r_MICRO_PMI_HP_ERROR_STATUSf_GET(r) (((r).uc_uc_core_sts0[0]) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS0r_MICRO_PMI_HP_ERROR_STATUSf_SET(r,f) (r).uc_uc_core_sts0[0]=(((r).uc_uc_core_sts0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access UC_UC_CORE_STS0.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_UC_CORE_STS0r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS0r,(_r._uc_uc_core_sts0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_UC_CORE_STS0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS0r,(_r._uc_uc_core_sts0)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_UC_CORE_STS0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS0r,(_r._uc_uc_core_sts0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_UC_CORE_STS0r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_uc_core_sts0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_UC_CORE_STS0r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_uc_core_sts0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_UC_CORE_STS0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_uc_core_sts0))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define UC_UC_CORE_STS0r BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS0r
#define UC_UC_CORE_STS0r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS0r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS0r_t UC_UC_CORE_STS0r_t;
#define UC_UC_CORE_STS0r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS0r_CLR
#define UC_UC_CORE_STS0r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS0r_SET
#define UC_UC_CORE_STS0r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS0r_GET
#define UC_UC_CORE_STS0r_MICRO_M0P_DEFAULT_SLAVE_ERROR_STATUSf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS0r_MICRO_M0P_DEFAULT_SLAVE_ERROR_STATUSf_GET
#define UC_UC_CORE_STS0r_MICRO_M0P_DEFAULT_SLAVE_ERROR_STATUSf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS0r_MICRO_M0P_DEFAULT_SLAVE_ERROR_STATUSf_SET
#define UC_UC_CORE_STS0r_MICRO_PMI_HP_ACK_TIMEOUT_STATUSf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS0r_MICRO_PMI_HP_ACK_TIMEOUT_STATUSf_GET
#define UC_UC_CORE_STS0r_MICRO_PMI_HP_ACK_TIMEOUT_STATUSf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS0r_MICRO_PMI_HP_ACK_TIMEOUT_STATUSf_SET
#define UC_UC_CORE_STS0r_MICRO_PMI_HP_WORD_ACCESS_ERR_STATUSf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS0r_MICRO_PMI_HP_WORD_ACCESS_ERR_STATUSf_GET
#define UC_UC_CORE_STS0r_MICRO_PMI_HP_WORD_ACCESS_ERR_STATUSf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS0r_MICRO_PMI_HP_WORD_ACCESS_ERR_STATUSf_SET
#define UC_UC_CORE_STS0r_MICRO_PMI_HP_ERROR_STATUSf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS0r_MICRO_PMI_HP_ERROR_STATUSf_GET
#define UC_UC_CORE_STS0r_MICRO_PMI_HP_ERROR_STATUSf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS0r_MICRO_PMI_HP_ERROR_STATUSf_SET
#define READ_UC_UC_CORE_STS0r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_UC_CORE_STS0r
#define WRITE_UC_UC_CORE_STS0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_UC_CORE_STS0r
#define MODIFY_UC_UC_CORE_STS0r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_UC_CORE_STS0r
#define READLN_UC_UC_CORE_STS0r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_UC_CORE_STS0r
#define WRITELN_UC_UC_CORE_STS0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_UC_CORE_STS0r
#define WRITEALL_UC_UC_CORE_STS0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_UC_CORE_STS0r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  UC_UC_CORE_CTL0
 * BLOCKS:   MICRO_E
 * REGADDR:  0xd243
 * DEVAD:    1
 * DESC:     rmi micro core control register 0
 * RESETVAL: 0x3 (3)
 * ACCESS:   R/W
 * FIELDS:
 *     MICRO_CORE_LN_SEL This field indicates lanes that are selected for micro_corePLEASE NOTE:The default value of this register field for each micro core is unique.the default values are:micro core 0 - 8'h3micro core 1 - 8'hCmicro core 2 - 8'h30micro core 3 - 8'hC0
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CTL0r (0x0001d243 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CTL0r_SIZE 4

/*
 * This structure should be used to declare and program UC_UC_CORE_CTL0.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CTL0r_s {
	uint32_t v[1];
	uint32_t uc_uc_core_ctl0[1];
	uint32_t _uc_uc_core_ctl0;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CTL0r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CTL0r_CLR(r) (r).uc_uc_core_ctl0[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CTL0r_SET(r,d) (r).uc_uc_core_ctl0[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CTL0r_GET(r) (r).uc_uc_core_ctl0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CTL0r_MICRO_CORE_LN_SELf_GET(r) (((r).uc_uc_core_ctl0[0]) & 0xff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CTL0r_MICRO_CORE_LN_SELf_SET(r,f) (r).uc_uc_core_ctl0[0]=(((r).uc_uc_core_ctl0[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff)) | (0xff << 16)

/*
 * These macros can be used to access UC_UC_CORE_CTL0.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_UC_CORE_CTL0r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CTL0r,(_r._uc_uc_core_ctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_UC_CORE_CTL0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CTL0r,(_r._uc_uc_core_ctl0)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_UC_CORE_CTL0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CTL0r,(_r._uc_uc_core_ctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_UC_CORE_CTL0r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_uc_core_ctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_UC_CORE_CTL0r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_uc_core_ctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_UC_CORE_CTL0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_uc_core_ctl0))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define UC_UC_CORE_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CTL0r
#define UC_UC_CORE_CTL0r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CTL0r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CTL0r_t UC_UC_CORE_CTL0r_t;
#define UC_UC_CORE_CTL0r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CTL0r_CLR
#define UC_UC_CORE_CTL0r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CTL0r_SET
#define UC_UC_CORE_CTL0r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CTL0r_GET
#define UC_UC_CORE_CTL0r_MICRO_CORE_LN_SELf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CTL0r_MICRO_CORE_LN_SELf_GET
#define UC_UC_CORE_CTL0r_MICRO_CORE_LN_SELf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CTL0r_MICRO_CORE_LN_SELf_SET
#define READ_UC_UC_CORE_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_UC_CORE_CTL0r
#define WRITE_UC_UC_CORE_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_UC_CORE_CTL0r
#define MODIFY_UC_UC_CORE_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_UC_CORE_CTL0r
#define READLN_UC_UC_CORE_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_UC_CORE_CTL0r
#define WRITELN_UC_UC_CORE_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_UC_CORE_CTL0r
#define WRITEALL_UC_UC_CORE_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_UC_CORE_CTL0r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CTL0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  UC_UC_CORE_MBOX_CTL0
 * BLOCKS:   MICRO_E
 * REGADDR:  0xd244
 * DEVAD:    1
 * DESC:     rmi micro core mail box control register 0
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     MICRO_MBOX_MSGIN_INTR mailbox message in interrupt for microSet by the MDIO/PMI_LP, cleared by the micro via PMI HPDrive the micro interrupt pin
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_MBOX_CTL0r (0x0001d244 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_MBOX_CTL0r_SIZE 4

/*
 * This structure should be used to declare and program UC_UC_CORE_MBOX_CTL0.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_MBOX_CTL0r_s {
	uint32_t v[1];
	uint32_t uc_uc_core_mbox_ctl0[1];
	uint32_t _uc_uc_core_mbox_ctl0;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_MBOX_CTL0r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_MBOX_CTL0r_CLR(r) (r).uc_uc_core_mbox_ctl0[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_MBOX_CTL0r_SET(r,d) (r).uc_uc_core_mbox_ctl0[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_MBOX_CTL0r_GET(r) (r).uc_uc_core_mbox_ctl0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_MBOX_CTL0r_MICRO_MBOX_MSGIN_INTRf_GET(r) (((r).uc_uc_core_mbox_ctl0[0]) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_MBOX_CTL0r_MICRO_MBOX_MSGIN_INTRf_SET(r,f) (r).uc_uc_core_mbox_ctl0[0]=(((r).uc_uc_core_mbox_ctl0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access UC_UC_CORE_MBOX_CTL0.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_UC_CORE_MBOX_CTL0r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_MBOX_CTL0r,(_r._uc_uc_core_mbox_ctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_UC_CORE_MBOX_CTL0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_MBOX_CTL0r,(_r._uc_uc_core_mbox_ctl0)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_UC_CORE_MBOX_CTL0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_MBOX_CTL0r,(_r._uc_uc_core_mbox_ctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_UC_CORE_MBOX_CTL0r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_MBOX_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_uc_core_mbox_ctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_UC_CORE_MBOX_CTL0r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_MBOX_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_uc_core_mbox_ctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_UC_CORE_MBOX_CTL0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_MBOX_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_uc_core_mbox_ctl0))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define UC_UC_CORE_MBOX_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_MBOX_CTL0r
#define UC_UC_CORE_MBOX_CTL0r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_MBOX_CTL0r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_MBOX_CTL0r_t UC_UC_CORE_MBOX_CTL0r_t;
#define UC_UC_CORE_MBOX_CTL0r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_MBOX_CTL0r_CLR
#define UC_UC_CORE_MBOX_CTL0r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_MBOX_CTL0r_SET
#define UC_UC_CORE_MBOX_CTL0r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_MBOX_CTL0r_GET
#define UC_UC_CORE_MBOX_CTL0r_MICRO_MBOX_MSGIN_INTRf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_MBOX_CTL0r_MICRO_MBOX_MSGIN_INTRf_GET
#define UC_UC_CORE_MBOX_CTL0r_MICRO_MBOX_MSGIN_INTRf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_MBOX_CTL0r_MICRO_MBOX_MSGIN_INTRf_SET
#define READ_UC_UC_CORE_MBOX_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_UC_CORE_MBOX_CTL0r
#define WRITE_UC_UC_CORE_MBOX_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_UC_CORE_MBOX_CTL0r
#define MODIFY_UC_UC_CORE_MBOX_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_UC_CORE_MBOX_CTL0r
#define READLN_UC_UC_CORE_MBOX_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_UC_CORE_MBOX_CTL0r
#define WRITELN_UC_UC_CORE_MBOX_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_UC_CORE_MBOX_CTL0r
#define WRITEALL_UC_UC_CORE_MBOX_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_UC_CORE_MBOX_CTL0r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_MBOX_CTL0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  UC_UC_CORE_LOW_PWR_CTL0
 * BLOCKS:   MICRO_E
 * REGADDR:  0xd245
 * DEVAD:    1
 * DESC:     rmi micro core low power control register 0
 * RESETVAL: 0x2e (46)
 * ACCESS:   R/W
 * FIELDS:
 *     MICRO_SLEEPHOLDREQ_N Request to extend the processor sleeping state regardlessof wake-up events. If the processor acknowledges this requestdriving m0p_sleepholdack_n LOW, this guarantees the processorremains idle even on receipt of a wake-up event.This is used to safely shutdown the micro_core0 - request to extend deep sleep state1 - no request
 *     MICRO_M0P_GCLK_FRCVAL Micro core clock gate force valueThe clock to the micro cores can be gated of in the low power modeusing pm_gatehclk signals for micro core. The micro_m0p_gclk_frc andmicro_m0p_gclk_frcval provides a mechanism override the clock gating{micro_m0p_gclk_frc, micro_m0p_gclk_frcval}2'b11 - pm_gatehclk ignored. Clock gate bypass (default)2'b10 - pm_gatehclk ignored. Micro hclk clock gated off2'b0X - pm_gatehclk used to gate Micro hclk clock
 *     MICRO_M0P_GCLK_FRC Micro core clock gate force enableThe clock to the Micro core can be gated of in the low power modeusing pm_gatehclk signals for micro core. The micro_m0p_gclk_frc andmicro_m0p_gclk_frcval provides a mechanism override the clock gating{micro_m0p_gclk_frc, micro_m0p_gclk_frcval}2'b11 - pm_gatehclk ignored. Clock gate bypass (default)2'b10 - pm_gatehclk ignored. Micro hclk clock gated off2'b0X - pm_gatehclk used to gate Micro hclk clock
 *     MICRO_BA21_PICINT_FRCVAL BA21 PIC int pin force value{micro_ba21_picint_frc, micro_ba21_picint_frcval}2'b11 - set BA21 pic_int pin to 12'b10 - set BA21 pic_int pin to 02'b0X - pic_int pin = |IRQ i.e. generate an interrupt when any interrupt is active
 *     MICRO_BA21_PICINT_FRC BA21 PIC int pin force enable{micro_ba21_picint_frc, micro_ba21_picint_frcval}2'b11 - set BA21 pic_int pin to 12'b10 - set BA21 pic_int pin to 02'b0X - pic_int pin = |IRQ i.e. generate an interrupt when any interrupt is active
 *     MICRO_WAKEUP_INTR micro core wakeup interruptWhen this field is set to 1, it generates interrupts an interrupt on IRQ28. This couldbe used to wake up the micro core from sleep state. The filed will normally be set by the master micro coreor API code and cleared by the slave micro upon wakeup
 *     MICRO_DP_RCLK20_RST_INTR_EN This field enables and interr upon detecting a change on the lane dp_rclk20_rstWhen this field is set 1, and selected lane(s) micro_dp_rclk20_rst_status_LH fields is setthen an interrupt is generated on IRQ28. This could be used to wake up the micro core from sleep state
 *     MICRO_PMD_SIGNAL_DETECT_INTR_EN This field enables an interrupt upon detecting a change on the lane pmd_signal_detectWhen this field is set 1, and selectd lane(s) micro_pmd_signal_detect_status_LH field is setthen an interrupt is generated on IRQ28. This could be used to wake up the micro core from sleep state
 *     MICRO_PM_MODE_EN Power Management Mode EnableWhen this field is set 1, the hardware sequencing to gate-off the micro clock is enabledThe firmware requests the micro core to enter the sleep state and hardware performsa sequence to safely gate of the clock to the micro core1 - Enable harware to safely gate-off the micro clock0 - Diasbaled. Do not gate-off micro core clock
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_LOW_PWR_CTL0r (0x0001d245 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_LOW_PWR_CTL0r_SIZE 4

/*
 * This structure should be used to declare and program UC_UC_CORE_LOW_PWR_CTL0.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_LOW_PWR_CTL0r_s {
	uint32_t v[1];
	uint32_t uc_uc_core_low_pwr_ctl0[1];
	uint32_t _uc_uc_core_low_pwr_ctl0;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_LOW_PWR_CTL0r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_LOW_PWR_CTL0r_CLR(r) (r).uc_uc_core_low_pwr_ctl0[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_LOW_PWR_CTL0r_SET(r,d) (r).uc_uc_core_low_pwr_ctl0[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_LOW_PWR_CTL0r_GET(r) (r).uc_uc_core_low_pwr_ctl0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_LOW_PWR_CTL0r_MICRO_PM_MODE_ENf_GET(r) ((((r).uc_uc_core_low_pwr_ctl0[0]) >> 15) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_LOW_PWR_CTL0r_MICRO_PM_MODE_ENf_SET(r,f) (r).uc_uc_core_low_pwr_ctl0[0]=(((r).uc_uc_core_low_pwr_ctl0[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_LOW_PWR_CTL0r_MICRO_PMD_SIGNAL_DETECT_INTR_ENf_GET(r) ((((r).uc_uc_core_low_pwr_ctl0[0]) >> 14) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_LOW_PWR_CTL0r_MICRO_PMD_SIGNAL_DETECT_INTR_ENf_SET(r,f) (r).uc_uc_core_low_pwr_ctl0[0]=(((r).uc_uc_core_low_pwr_ctl0[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14)) | (1 << (16 + 14))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_LOW_PWR_CTL0r_MICRO_DP_RCLK20_RST_INTR_ENf_GET(r) ((((r).uc_uc_core_low_pwr_ctl0[0]) >> 13) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_LOW_PWR_CTL0r_MICRO_DP_RCLK20_RST_INTR_ENf_SET(r,f) (r).uc_uc_core_low_pwr_ctl0[0]=(((r).uc_uc_core_low_pwr_ctl0[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13)) | (1 << (16 + 13))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_LOW_PWR_CTL0r_MICRO_WAKEUP_INTRf_GET(r) ((((r).uc_uc_core_low_pwr_ctl0[0]) >> 12) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_LOW_PWR_CTL0r_MICRO_WAKEUP_INTRf_SET(r,f) (r).uc_uc_core_low_pwr_ctl0[0]=(((r).uc_uc_core_low_pwr_ctl0[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12)) | (1 << (16 + 12))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_LOW_PWR_CTL0r_MICRO_BA21_PICINT_FRCf_GET(r) ((((r).uc_uc_core_low_pwr_ctl0[0]) >> 5) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_LOW_PWR_CTL0r_MICRO_BA21_PICINT_FRCf_SET(r,f) (r).uc_uc_core_low_pwr_ctl0[0]=(((r).uc_uc_core_low_pwr_ctl0[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_LOW_PWR_CTL0r_MICRO_BA21_PICINT_FRCVALf_GET(r) ((((r).uc_uc_core_low_pwr_ctl0[0]) >> 4) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_LOW_PWR_CTL0r_MICRO_BA21_PICINT_FRCVALf_SET(r,f) (r).uc_uc_core_low_pwr_ctl0[0]=(((r).uc_uc_core_low_pwr_ctl0[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_LOW_PWR_CTL0r_MICRO_M0P_GCLK_FRCf_GET(r) ((((r).uc_uc_core_low_pwr_ctl0[0]) >> 3) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_LOW_PWR_CTL0r_MICRO_M0P_GCLK_FRCf_SET(r,f) (r).uc_uc_core_low_pwr_ctl0[0]=(((r).uc_uc_core_low_pwr_ctl0[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_LOW_PWR_CTL0r_MICRO_M0P_GCLK_FRCVALf_GET(r) ((((r).uc_uc_core_low_pwr_ctl0[0]) >> 2) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_LOW_PWR_CTL0r_MICRO_M0P_GCLK_FRCVALf_SET(r,f) (r).uc_uc_core_low_pwr_ctl0[0]=(((r).uc_uc_core_low_pwr_ctl0[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_LOW_PWR_CTL0r_MICRO_SLEEPHOLDREQ_Nf_GET(r) ((((r).uc_uc_core_low_pwr_ctl0[0]) >> 1) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_LOW_PWR_CTL0r_MICRO_SLEEPHOLDREQ_Nf_SET(r,f) (r).uc_uc_core_low_pwr_ctl0[0]=(((r).uc_uc_core_low_pwr_ctl0[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))

/*
 * These macros can be used to access UC_UC_CORE_LOW_PWR_CTL0.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_UC_CORE_LOW_PWR_CTL0r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_LOW_PWR_CTL0r,(_r._uc_uc_core_low_pwr_ctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_UC_CORE_LOW_PWR_CTL0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_LOW_PWR_CTL0r,(_r._uc_uc_core_low_pwr_ctl0)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_UC_CORE_LOW_PWR_CTL0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_LOW_PWR_CTL0r,(_r._uc_uc_core_low_pwr_ctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_UC_CORE_LOW_PWR_CTL0r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_LOW_PWR_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_uc_core_low_pwr_ctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_UC_CORE_LOW_PWR_CTL0r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_LOW_PWR_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_uc_core_low_pwr_ctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_UC_CORE_LOW_PWR_CTL0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_LOW_PWR_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_uc_core_low_pwr_ctl0))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define UC_UC_CORE_LOW_PWR_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_LOW_PWR_CTL0r
#define UC_UC_CORE_LOW_PWR_CTL0r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_LOW_PWR_CTL0r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_LOW_PWR_CTL0r_t UC_UC_CORE_LOW_PWR_CTL0r_t;
#define UC_UC_CORE_LOW_PWR_CTL0r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_LOW_PWR_CTL0r_CLR
#define UC_UC_CORE_LOW_PWR_CTL0r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_LOW_PWR_CTL0r_SET
#define UC_UC_CORE_LOW_PWR_CTL0r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_LOW_PWR_CTL0r_GET
#define UC_UC_CORE_LOW_PWR_CTL0r_MICRO_PM_MODE_ENf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_LOW_PWR_CTL0r_MICRO_PM_MODE_ENf_GET
#define UC_UC_CORE_LOW_PWR_CTL0r_MICRO_PM_MODE_ENf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_LOW_PWR_CTL0r_MICRO_PM_MODE_ENf_SET
#define UC_UC_CORE_LOW_PWR_CTL0r_MICRO_PMD_SIGNAL_DETECT_INTR_ENf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_LOW_PWR_CTL0r_MICRO_PMD_SIGNAL_DETECT_INTR_ENf_GET
#define UC_UC_CORE_LOW_PWR_CTL0r_MICRO_PMD_SIGNAL_DETECT_INTR_ENf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_LOW_PWR_CTL0r_MICRO_PMD_SIGNAL_DETECT_INTR_ENf_SET
#define UC_UC_CORE_LOW_PWR_CTL0r_MICRO_DP_RCLK20_RST_INTR_ENf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_LOW_PWR_CTL0r_MICRO_DP_RCLK20_RST_INTR_ENf_GET
#define UC_UC_CORE_LOW_PWR_CTL0r_MICRO_DP_RCLK20_RST_INTR_ENf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_LOW_PWR_CTL0r_MICRO_DP_RCLK20_RST_INTR_ENf_SET
#define UC_UC_CORE_LOW_PWR_CTL0r_MICRO_WAKEUP_INTRf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_LOW_PWR_CTL0r_MICRO_WAKEUP_INTRf_GET
#define UC_UC_CORE_LOW_PWR_CTL0r_MICRO_WAKEUP_INTRf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_LOW_PWR_CTL0r_MICRO_WAKEUP_INTRf_SET
#define UC_UC_CORE_LOW_PWR_CTL0r_MICRO_BA21_PICINT_FRCf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_LOW_PWR_CTL0r_MICRO_BA21_PICINT_FRCf_GET
#define UC_UC_CORE_LOW_PWR_CTL0r_MICRO_BA21_PICINT_FRCf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_LOW_PWR_CTL0r_MICRO_BA21_PICINT_FRCf_SET
#define UC_UC_CORE_LOW_PWR_CTL0r_MICRO_BA21_PICINT_FRCVALf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_LOW_PWR_CTL0r_MICRO_BA21_PICINT_FRCVALf_GET
#define UC_UC_CORE_LOW_PWR_CTL0r_MICRO_BA21_PICINT_FRCVALf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_LOW_PWR_CTL0r_MICRO_BA21_PICINT_FRCVALf_SET
#define UC_UC_CORE_LOW_PWR_CTL0r_MICRO_M0P_GCLK_FRCf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_LOW_PWR_CTL0r_MICRO_M0P_GCLK_FRCf_GET
#define UC_UC_CORE_LOW_PWR_CTL0r_MICRO_M0P_GCLK_FRCf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_LOW_PWR_CTL0r_MICRO_M0P_GCLK_FRCf_SET
#define UC_UC_CORE_LOW_PWR_CTL0r_MICRO_M0P_GCLK_FRCVALf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_LOW_PWR_CTL0r_MICRO_M0P_GCLK_FRCVALf_GET
#define UC_UC_CORE_LOW_PWR_CTL0r_MICRO_M0P_GCLK_FRCVALf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_LOW_PWR_CTL0r_MICRO_M0P_GCLK_FRCVALf_SET
#define UC_UC_CORE_LOW_PWR_CTL0r_MICRO_SLEEPHOLDREQ_Nf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_LOW_PWR_CTL0r_MICRO_SLEEPHOLDREQ_Nf_GET
#define UC_UC_CORE_LOW_PWR_CTL0r_MICRO_SLEEPHOLDREQ_Nf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_LOW_PWR_CTL0r_MICRO_SLEEPHOLDREQ_Nf_SET
#define READ_UC_UC_CORE_LOW_PWR_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_UC_CORE_LOW_PWR_CTL0r
#define WRITE_UC_UC_CORE_LOW_PWR_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_UC_CORE_LOW_PWR_CTL0r
#define MODIFY_UC_UC_CORE_LOW_PWR_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_UC_CORE_LOW_PWR_CTL0r
#define READLN_UC_UC_CORE_LOW_PWR_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_UC_CORE_LOW_PWR_CTL0r
#define WRITELN_UC_UC_CORE_LOW_PWR_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_UC_CORE_LOW_PWR_CTL0r
#define WRITEALL_UC_UC_CORE_LOW_PWR_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_UC_CORE_LOW_PWR_CTL0r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_LOW_PWR_CTL0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  UC_UC_CORE_LOW_PWR_STS0
 * BLOCKS:   MICRO_E
 * REGADDR:  0xd246
 * DEVAD:    1
 * DESC:     rmi micro core low power status register 0
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     MICRO_PM_CPU_SLEEP Micro core in sleep statusThis field provides live status. It indicates if the micro core is sleep or normal mode1 - micro core in sleep mode0 - micro core in normal mode
 *     MICRO_PM_CPU_SLEEP_LH Micro core in sleep latch statusThis field is set to 1 when the micro core enters the sleep mode (i.e. low to high detection).It remains set until this field is read
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_LOW_PWR_STS0r (0x0001d246 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_LOW_PWR_STS0r_SIZE 4

/*
 * This structure should be used to declare and program UC_UC_CORE_LOW_PWR_STS0.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_LOW_PWR_STS0r_s {
	uint32_t v[1];
	uint32_t uc_uc_core_low_pwr_sts0[1];
	uint32_t _uc_uc_core_low_pwr_sts0;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_LOW_PWR_STS0r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_LOW_PWR_STS0r_CLR(r) (r).uc_uc_core_low_pwr_sts0[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_LOW_PWR_STS0r_SET(r,d) (r).uc_uc_core_low_pwr_sts0[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_LOW_PWR_STS0r_GET(r) (r).uc_uc_core_low_pwr_sts0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_LOW_PWR_STS0r_MICRO_PM_CPU_SLEEP_LHf_GET(r) ((((r).uc_uc_core_low_pwr_sts0[0]) >> 15) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_LOW_PWR_STS0r_MICRO_PM_CPU_SLEEP_LHf_SET(r,f) (r).uc_uc_core_low_pwr_sts0[0]=(((r).uc_uc_core_low_pwr_sts0[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_LOW_PWR_STS0r_MICRO_PM_CPU_SLEEPf_GET(r) ((((r).uc_uc_core_low_pwr_sts0[0]) >> 14) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_LOW_PWR_STS0r_MICRO_PM_CPU_SLEEPf_SET(r,f) (r).uc_uc_core_low_pwr_sts0[0]=(((r).uc_uc_core_low_pwr_sts0[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14)) | (1 << (16 + 14))

/*
 * These macros can be used to access UC_UC_CORE_LOW_PWR_STS0.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_UC_CORE_LOW_PWR_STS0r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_LOW_PWR_STS0r,(_r._uc_uc_core_low_pwr_sts0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_UC_CORE_LOW_PWR_STS0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_LOW_PWR_STS0r,(_r._uc_uc_core_low_pwr_sts0)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_UC_CORE_LOW_PWR_STS0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_LOW_PWR_STS0r,(_r._uc_uc_core_low_pwr_sts0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_UC_CORE_LOW_PWR_STS0r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_LOW_PWR_STS0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_uc_core_low_pwr_sts0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_UC_CORE_LOW_PWR_STS0r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_LOW_PWR_STS0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_uc_core_low_pwr_sts0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_UC_CORE_LOW_PWR_STS0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_LOW_PWR_STS0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_uc_core_low_pwr_sts0))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define UC_UC_CORE_LOW_PWR_STS0r BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_LOW_PWR_STS0r
#define UC_UC_CORE_LOW_PWR_STS0r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_LOW_PWR_STS0r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_LOW_PWR_STS0r_t UC_UC_CORE_LOW_PWR_STS0r_t;
#define UC_UC_CORE_LOW_PWR_STS0r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_LOW_PWR_STS0r_CLR
#define UC_UC_CORE_LOW_PWR_STS0r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_LOW_PWR_STS0r_SET
#define UC_UC_CORE_LOW_PWR_STS0r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_LOW_PWR_STS0r_GET
#define UC_UC_CORE_LOW_PWR_STS0r_MICRO_PM_CPU_SLEEP_LHf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_LOW_PWR_STS0r_MICRO_PM_CPU_SLEEP_LHf_GET
#define UC_UC_CORE_LOW_PWR_STS0r_MICRO_PM_CPU_SLEEP_LHf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_LOW_PWR_STS0r_MICRO_PM_CPU_SLEEP_LHf_SET
#define UC_UC_CORE_LOW_PWR_STS0r_MICRO_PM_CPU_SLEEPf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_LOW_PWR_STS0r_MICRO_PM_CPU_SLEEPf_GET
#define UC_UC_CORE_LOW_PWR_STS0r_MICRO_PM_CPU_SLEEPf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_LOW_PWR_STS0r_MICRO_PM_CPU_SLEEPf_SET
#define READ_UC_UC_CORE_LOW_PWR_STS0r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_UC_CORE_LOW_PWR_STS0r
#define WRITE_UC_UC_CORE_LOW_PWR_STS0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_UC_CORE_LOW_PWR_STS0r
#define MODIFY_UC_UC_CORE_LOW_PWR_STS0r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_UC_CORE_LOW_PWR_STS0r
#define READLN_UC_UC_CORE_LOW_PWR_STS0r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_UC_CORE_LOW_PWR_STS0r
#define WRITELN_UC_UC_CORE_LOW_PWR_STS0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_UC_CORE_LOW_PWR_STS0r
#define WRITEALL_UC_UC_CORE_LOW_PWR_STS0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_UC_CORE_LOW_PWR_STS0r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_LOW_PWR_STS0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  UC_UC_CORE_STS1
 * BLOCKS:   MICRO_E
 * REGADDR:  0xd247
 * DEVAD:    1
 * DESC:     rmi micro core status register 1
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     MICRO_RMI_MBOX_MSGOUT_STATUS mailbox message out statusThis field is set to 1'b1 when the firmware set the ahbcommon_mbox_send_msgout to 1'b1to send a message outIt will remain set until this field is read
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS1r (0x0001d247 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS1r_SIZE 4

/*
 * This structure should be used to declare and program UC_UC_CORE_STS1.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS1r_s {
	uint32_t v[1];
	uint32_t uc_uc_core_sts1[1];
	uint32_t _uc_uc_core_sts1;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS1r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS1r_CLR(r) (r).uc_uc_core_sts1[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS1r_SET(r,d) (r).uc_uc_core_sts1[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS1r_GET(r) (r).uc_uc_core_sts1[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS1r_MICRO_RMI_MBOX_MSGOUT_STATUSf_GET(r) ((((r).uc_uc_core_sts1[0]) >> 2) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS1r_MICRO_RMI_MBOX_MSGOUT_STATUSf_SET(r,f) (r).uc_uc_core_sts1[0]=(((r).uc_uc_core_sts1[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))

/*
 * These macros can be used to access UC_UC_CORE_STS1.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_UC_CORE_STS1r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS1r,(_r._uc_uc_core_sts1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_UC_CORE_STS1r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS1r,(_r._uc_uc_core_sts1)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_UC_CORE_STS1r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS1r,(_r._uc_uc_core_sts1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_UC_CORE_STS1r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_uc_core_sts1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_UC_CORE_STS1r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_uc_core_sts1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_UC_CORE_STS1r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS1r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_uc_core_sts1))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define UC_UC_CORE_STS1r BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS1r
#define UC_UC_CORE_STS1r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS1r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS1r_t UC_UC_CORE_STS1r_t;
#define UC_UC_CORE_STS1r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS1r_CLR
#define UC_UC_CORE_STS1r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS1r_SET
#define UC_UC_CORE_STS1r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS1r_GET
#define UC_UC_CORE_STS1r_MICRO_RMI_MBOX_MSGOUT_STATUSf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS1r_MICRO_RMI_MBOX_MSGOUT_STATUSf_GET
#define UC_UC_CORE_STS1r_MICRO_RMI_MBOX_MSGOUT_STATUSf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS1r_MICRO_RMI_MBOX_MSGOUT_STATUSf_SET
#define READ_UC_UC_CORE_STS1r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_UC_CORE_STS1r
#define WRITE_UC_UC_CORE_STS1r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_UC_CORE_STS1r
#define MODIFY_UC_UC_CORE_STS1r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_UC_CORE_STS1r
#define READLN_UC_UC_CORE_STS1r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_UC_CORE_STS1r
#define WRITELN_UC_UC_CORE_STS1r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_UC_CORE_STS1r
#define WRITEALL_UC_UC_CORE_STS1r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_UC_CORE_STS1r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS1r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  UC_UC_CORE_STS2
 * BLOCKS:   MICRO_E
 * REGADDR:  0xd248
 * DEVAD:    1
 * DESC:     rmi micro core status register 2
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     MICRO_DP_RCLK20_RST_STATUS_LH Indicatees a change on rx lane datapath reset detected1 - change detected. This can be used to  generate wake-up eventif micro_dp_rclk20_rst_wakeup_en is set to 1'b10 - no changesclear-on-read
 *     MICRO_PMD_SIGNAL_DETECT_STATUS_LH Indicates a changes lane pmd_signal_detect detected1 - change detected. This can be used to  generate wake-up eventif micro_pmd_signal_detect_wakeup_en is set to 1'b10 - no changesclear-on-read
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS2r (0x0001d248 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS2r_SIZE 4

/*
 * This structure should be used to declare and program UC_UC_CORE_STS2.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS2r_s {
	uint32_t v[1];
	uint32_t uc_uc_core_sts2[1];
	uint32_t _uc_uc_core_sts2;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS2r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS2r_CLR(r) (r).uc_uc_core_sts2[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS2r_SET(r,d) (r).uc_uc_core_sts2[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS2r_GET(r) (r).uc_uc_core_sts2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS2r_MICRO_PMD_SIGNAL_DETECT_STATUS_LHf_GET(r) ((((r).uc_uc_core_sts2[0]) >> 8) & 0xff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS2r_MICRO_PMD_SIGNAL_DETECT_STATUS_LHf_SET(r,f) (r).uc_uc_core_sts2[0]=(((r).uc_uc_core_sts2[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8)) | (255 << (16 + 8))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS2r_MICRO_DP_RCLK20_RST_STATUS_LHf_GET(r) (((r).uc_uc_core_sts2[0]) & 0xff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS2r_MICRO_DP_RCLK20_RST_STATUS_LHf_SET(r,f) (r).uc_uc_core_sts2[0]=(((r).uc_uc_core_sts2[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff)) | (0xff << 16)

/*
 * These macros can be used to access UC_UC_CORE_STS2.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_UC_CORE_STS2r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS2r,(_r._uc_uc_core_sts2))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_UC_CORE_STS2r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS2r,(_r._uc_uc_core_sts2)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_UC_CORE_STS2r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS2r,(_r._uc_uc_core_sts2))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_UC_CORE_STS2r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_uc_core_sts2))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_UC_CORE_STS2r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_uc_core_sts2))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_UC_CORE_STS2r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_uc_core_sts2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define UC_UC_CORE_STS2r BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS2r
#define UC_UC_CORE_STS2r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS2r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS2r_t UC_UC_CORE_STS2r_t;
#define UC_UC_CORE_STS2r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS2r_CLR
#define UC_UC_CORE_STS2r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS2r_SET
#define UC_UC_CORE_STS2r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS2r_GET
#define UC_UC_CORE_STS2r_MICRO_PMD_SIGNAL_DETECT_STATUS_LHf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS2r_MICRO_PMD_SIGNAL_DETECT_STATUS_LHf_GET
#define UC_UC_CORE_STS2r_MICRO_PMD_SIGNAL_DETECT_STATUS_LHf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS2r_MICRO_PMD_SIGNAL_DETECT_STATUS_LHf_SET
#define UC_UC_CORE_STS2r_MICRO_DP_RCLK20_RST_STATUS_LHf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS2r_MICRO_DP_RCLK20_RST_STATUS_LHf_GET
#define UC_UC_CORE_STS2r_MICRO_DP_RCLK20_RST_STATUS_LHf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS2r_MICRO_DP_RCLK20_RST_STATUS_LHf_SET
#define READ_UC_UC_CORE_STS2r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_UC_CORE_STS2r
#define WRITE_UC_UC_CORE_STS2r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_UC_CORE_STS2r
#define MODIFY_UC_UC_CORE_STS2r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_UC_CORE_STS2r
#define READLN_UC_UC_CORE_STS2r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_UC_CORE_STS2r
#define WRITELN_UC_UC_CORE_STS2r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_UC_CORE_STS2r
#define WRITEALL_UC_UC_CORE_STS2r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_UC_CORE_STS2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  UC_UC_CORE_STS3
 * BLOCKS:   MICRO_E
 * REGADDR:  0xd249
 * DEVAD:    1
 * DESC:     rmi micro core status register 3
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     MICRO_PMI_HP_ERR_ADDR_15_0_STATUS This field capatures pmi_hp_addr[15:0] address bits when a fault is detectedon the pmi hp bus. This field is cleared upon readA fault condition on pmi hp bus can occurs when:1) pmi_hp_ack signal on the pmi_hp bus does not toggle within 256 clock cycle2) pmi_hp_error signal is asserted by RMIC during pmi_hp bus tranactions3) micro performs 32-bit operation to generate transations on the pmi_hp busThis field only captures the address of the first fault condition detected on thepmi hp bus. However, the address capture for a fault condition can be skipped usingmicro_pmi_hp_err_addr_ackt_en, micro_pmi_hp_err_addr_pmierr_en andmicro_pmi_hp_err_addr_waccess_en register fieldsclear-on-read
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS3r (0x0001d249 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS3r_SIZE 4

/*
 * This structure should be used to declare and program UC_UC_CORE_STS3.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS3r_s {
	uint32_t v[1];
	uint32_t uc_uc_core_sts3[1];
	uint32_t _uc_uc_core_sts3;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS3r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS3r_CLR(r) (r).uc_uc_core_sts3[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS3r_SET(r,d) (r).uc_uc_core_sts3[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS3r_GET(r) (r).uc_uc_core_sts3[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS3r_MICRO_PMI_HP_ERR_ADDR_15_0_STATUSf_GET(r) (((r).uc_uc_core_sts3[0]) & 0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS3r_MICRO_PMI_HP_ERR_ADDR_15_0_STATUSf_SET(r,f) (r).uc_uc_core_sts3[0]=(((r).uc_uc_core_sts3[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access UC_UC_CORE_STS3.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_UC_CORE_STS3r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS3r,(_r._uc_uc_core_sts3))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_UC_CORE_STS3r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS3r,(_r._uc_uc_core_sts3)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_UC_CORE_STS3r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS3r,(_r._uc_uc_core_sts3))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_UC_CORE_STS3r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS3r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_uc_core_sts3))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_UC_CORE_STS3r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS3r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_uc_core_sts3))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_UC_CORE_STS3r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS3r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_uc_core_sts3))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define UC_UC_CORE_STS3r BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS3r
#define UC_UC_CORE_STS3r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS3r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS3r_t UC_UC_CORE_STS3r_t;
#define UC_UC_CORE_STS3r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS3r_CLR
#define UC_UC_CORE_STS3r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS3r_SET
#define UC_UC_CORE_STS3r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS3r_GET
#define UC_UC_CORE_STS3r_MICRO_PMI_HP_ERR_ADDR_15_0_STATUSf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS3r_MICRO_PMI_HP_ERR_ADDR_15_0_STATUSf_GET
#define UC_UC_CORE_STS3r_MICRO_PMI_HP_ERR_ADDR_15_0_STATUSf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS3r_MICRO_PMI_HP_ERR_ADDR_15_0_STATUSf_SET
#define READ_UC_UC_CORE_STS3r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_UC_CORE_STS3r
#define WRITE_UC_UC_CORE_STS3r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_UC_CORE_STS3r
#define MODIFY_UC_UC_CORE_STS3r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_UC_CORE_STS3r
#define READLN_UC_UC_CORE_STS3r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_UC_CORE_STS3r
#define WRITELN_UC_UC_CORE_STS3r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_UC_CORE_STS3r
#define WRITEALL_UC_UC_CORE_STS3r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_UC_CORE_STS3r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS3r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  UC_UC_CORE_STS4
 * BLOCKS:   MICRO_E
 * REGADDR:  0xd24a
 * DEVAD:    1
 * DESC:     rmi micro core status register 4
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     MICRO_PMI_HP_ERR_ADDR_31_16_STATUS This field capatures pmi_hp_addr[31:16] address bits when a fault is detectedon the pmi hp bus. THIS FIELD IS CLEARED WHEN micro_pmi_hp_err_addr_15_0_status IS READA fault condition on pmi hp bus can occurs when:1) pmi_hp_ack signal on the pmi_hp bus does not toggle within 256 clock cycle2) pmi_hp_error signal is asserted by RMIC during pmi_hp bus tranactions3) micro performs 32-bit operation to generate transations on the pmi_hp busThis field only captures the address of the first fault condition detected on thepmi hp bus. However, the address capture for a fault condition can be skipped usingmicro_pmi_hp_err_addr_ackt_en, micro_pmi_hp_err_addr_pmierr_en andmicro_pmi_hp_err_addr_waccess_en register fields
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS4r (0x0001d24a | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS4r_SIZE 4

/*
 * This structure should be used to declare and program UC_UC_CORE_STS4.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS4r_s {
	uint32_t v[1];
	uint32_t uc_uc_core_sts4[1];
	uint32_t _uc_uc_core_sts4;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS4r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS4r_CLR(r) (r).uc_uc_core_sts4[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS4r_SET(r,d) (r).uc_uc_core_sts4[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS4r_GET(r) (r).uc_uc_core_sts4[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS4r_MICRO_PMI_HP_ERR_ADDR_31_16_STATUSf_GET(r) (((r).uc_uc_core_sts4[0]) & 0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS4r_MICRO_PMI_HP_ERR_ADDR_31_16_STATUSf_SET(r,f) (r).uc_uc_core_sts4[0]=(((r).uc_uc_core_sts4[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access UC_UC_CORE_STS4.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_UC_CORE_STS4r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS4r,(_r._uc_uc_core_sts4))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_UC_CORE_STS4r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS4r,(_r._uc_uc_core_sts4)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_UC_CORE_STS4r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS4r,(_r._uc_uc_core_sts4))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_UC_CORE_STS4r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS4r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_uc_core_sts4))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_UC_CORE_STS4r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS4r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_uc_core_sts4))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_UC_CORE_STS4r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS4r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_uc_core_sts4))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define UC_UC_CORE_STS4r BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS4r
#define UC_UC_CORE_STS4r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS4r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS4r_t UC_UC_CORE_STS4r_t;
#define UC_UC_CORE_STS4r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS4r_CLR
#define UC_UC_CORE_STS4r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS4r_SET
#define UC_UC_CORE_STS4r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS4r_GET
#define UC_UC_CORE_STS4r_MICRO_PMI_HP_ERR_ADDR_31_16_STATUSf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS4r_MICRO_PMI_HP_ERR_ADDR_31_16_STATUSf_GET
#define UC_UC_CORE_STS4r_MICRO_PMI_HP_ERR_ADDR_31_16_STATUSf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS4r_MICRO_PMI_HP_ERR_ADDR_31_16_STATUSf_SET
#define READ_UC_UC_CORE_STS4r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_UC_CORE_STS4r
#define WRITE_UC_UC_CORE_STS4r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_UC_CORE_STS4r
#define MODIFY_UC_UC_CORE_STS4r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_UC_CORE_STS4r
#define READLN_UC_UC_CORE_STS4r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_UC_CORE_STS4r
#define WRITELN_UC_UC_CORE_STS4r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_UC_CORE_STS4r
#define WRITEALL_UC_UC_CORE_STS4r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_UC_CORE_STS4r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_STS4r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  UC_UC_CORE_CTL1
 * BLOCKS:   MICRO_E
 * REGADDR:  0xd24b
 * DEVAD:    1
 * DESC:     rmi micro core control register 1
 * RESETVAL: 0x7 (7)
 * ACCESS:   R/W
 * FIELDS:
 *     MICRO_PMI_HP_ERR_ADDR_PMIERR_EN Enable pmi hp address to be captured in micro_pmi_hp_err_addr_31_16_status andmicro_pmi_hp_err_addr_15_0_status fields when pmi_hp_error signal is asserted by RMICduring pmi_hp bus tranactions1 - Enable0 - Disable
 *     MICRO_PMI_HP_ERR_ADDR_WACCESS_EN Enable pmi hp address to be captured in micro_pmi_hp_err_addr_31_16_status andmicro_pmi_hp_err_addr_15_0_status fields when M0P performs 32-bit operations to access on pmi_hp busOnly 8/16-bits operations are allowed1 - Enable0 - Disable
 *     MICRO_PMI_HP_ERR_ADDR_ACKT_EN Enable pmi hp address to be captured in micro_pmi_hp_err_addr_31_16_status andmicro_pmi_hp_err_addr_15_0_status fields when pmi_hp_ack signal timeout on the pmi_hp busdoes not toggle within 256 clock cycle1 - Enable0 - Disable
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CTL1r (0x0001d24b | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CTL1r_SIZE 4

/*
 * This structure should be used to declare and program UC_UC_CORE_CTL1.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CTL1r_s {
	uint32_t v[1];
	uint32_t uc_uc_core_ctl1[1];
	uint32_t _uc_uc_core_ctl1;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CTL1r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CTL1r_CLR(r) (r).uc_uc_core_ctl1[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CTL1r_SET(r,d) (r).uc_uc_core_ctl1[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CTL1r_GET(r) (r).uc_uc_core_ctl1[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CTL1r_MICRO_PMI_HP_ERR_ADDR_ACKT_ENf_GET(r) ((((r).uc_uc_core_ctl1[0]) >> 2) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CTL1r_MICRO_PMI_HP_ERR_ADDR_ACKT_ENf_SET(r,f) (r).uc_uc_core_ctl1[0]=(((r).uc_uc_core_ctl1[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CTL1r_MICRO_PMI_HP_ERR_ADDR_WACCESS_ENf_GET(r) ((((r).uc_uc_core_ctl1[0]) >> 1) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CTL1r_MICRO_PMI_HP_ERR_ADDR_WACCESS_ENf_SET(r,f) (r).uc_uc_core_ctl1[0]=(((r).uc_uc_core_ctl1[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CTL1r_MICRO_PMI_HP_ERR_ADDR_PMIERR_ENf_GET(r) (((r).uc_uc_core_ctl1[0]) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CTL1r_MICRO_PMI_HP_ERR_ADDR_PMIERR_ENf_SET(r,f) (r).uc_uc_core_ctl1[0]=(((r).uc_uc_core_ctl1[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access UC_UC_CORE_CTL1.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_UC_CORE_CTL1r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CTL1r,(_r._uc_uc_core_ctl1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_UC_CORE_CTL1r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CTL1r,(_r._uc_uc_core_ctl1)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_UC_CORE_CTL1r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CTL1r,(_r._uc_uc_core_ctl1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_UC_CORE_CTL1r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CTL1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_uc_core_ctl1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_UC_CORE_CTL1r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CTL1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_uc_core_ctl1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_UC_CORE_CTL1r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CTL1r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_uc_core_ctl1))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define UC_UC_CORE_CTL1r BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CTL1r
#define UC_UC_CORE_CTL1r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CTL1r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CTL1r_t UC_UC_CORE_CTL1r_t;
#define UC_UC_CORE_CTL1r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CTL1r_CLR
#define UC_UC_CORE_CTL1r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CTL1r_SET
#define UC_UC_CORE_CTL1r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CTL1r_GET
#define UC_UC_CORE_CTL1r_MICRO_PMI_HP_ERR_ADDR_ACKT_ENf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CTL1r_MICRO_PMI_HP_ERR_ADDR_ACKT_ENf_GET
#define UC_UC_CORE_CTL1r_MICRO_PMI_HP_ERR_ADDR_ACKT_ENf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CTL1r_MICRO_PMI_HP_ERR_ADDR_ACKT_ENf_SET
#define UC_UC_CORE_CTL1r_MICRO_PMI_HP_ERR_ADDR_WACCESS_ENf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CTL1r_MICRO_PMI_HP_ERR_ADDR_WACCESS_ENf_GET
#define UC_UC_CORE_CTL1r_MICRO_PMI_HP_ERR_ADDR_WACCESS_ENf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CTL1r_MICRO_PMI_HP_ERR_ADDR_WACCESS_ENf_SET
#define UC_UC_CORE_CTL1r_MICRO_PMI_HP_ERR_ADDR_PMIERR_ENf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CTL1r_MICRO_PMI_HP_ERR_ADDR_PMIERR_ENf_GET
#define UC_UC_CORE_CTL1r_MICRO_PMI_HP_ERR_ADDR_PMIERR_ENf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CTL1r_MICRO_PMI_HP_ERR_ADDR_PMIERR_ENf_SET
#define READ_UC_UC_CORE_CTL1r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_UC_CORE_CTL1r
#define WRITE_UC_UC_CORE_CTL1r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_UC_CORE_CTL1r
#define MODIFY_UC_UC_CORE_CTL1r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_UC_CORE_CTL1r
#define READLN_UC_UC_CORE_CTL1r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_UC_CORE_CTL1r
#define WRITELN_UC_UC_CORE_CTL1r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_UC_CORE_CTL1r
#define WRITEALL_UC_UC_CORE_CTL1r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_UC_CORE_CTL1r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CTL1r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  UC_UC_CORE_CFG_FWAPI_DATA0
 * BLOCKS:   MICRO_E
 * REGADDR:  0xd24d
 * DEVAD:    1
 * DESC:     micro core firmware/api data registers 0
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     MICRO_CORE_CFG_FWAPI_DATA0 Micro core firmware/API data 0This is a scratch register used by the firmware and API code to store and/or exchangemicro core configuration information
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CFG_FWAPI_DATA0r (0x0001d24d | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CFG_FWAPI_DATA0r_SIZE 4

/*
 * This structure should be used to declare and program UC_UC_CORE_CFG_FWAPI_DATA0.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CFG_FWAPI_DATA0r_s {
	uint32_t v[1];
	uint32_t uc_uc_core_cfg_fwapi_data0[1];
	uint32_t _uc_uc_core_cfg_fwapi_data0;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CFG_FWAPI_DATA0r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CFG_FWAPI_DATA0r_CLR(r) (r).uc_uc_core_cfg_fwapi_data0[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CFG_FWAPI_DATA0r_SET(r,d) (r).uc_uc_core_cfg_fwapi_data0[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CFG_FWAPI_DATA0r_GET(r) (r).uc_uc_core_cfg_fwapi_data0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CFG_FWAPI_DATA0r_MICRO_CORE_CFG_FWAPI_DATA0f_GET(r) (((r).uc_uc_core_cfg_fwapi_data0[0]) & 0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CFG_FWAPI_DATA0r_MICRO_CORE_CFG_FWAPI_DATA0f_SET(r,f) (r).uc_uc_core_cfg_fwapi_data0[0]=(((r).uc_uc_core_cfg_fwapi_data0[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access UC_UC_CORE_CFG_FWAPI_DATA0.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_UC_CORE_CFG_FWAPI_DATA0r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CFG_FWAPI_DATA0r,(_r._uc_uc_core_cfg_fwapi_data0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_UC_CORE_CFG_FWAPI_DATA0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CFG_FWAPI_DATA0r,(_r._uc_uc_core_cfg_fwapi_data0)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_UC_CORE_CFG_FWAPI_DATA0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CFG_FWAPI_DATA0r,(_r._uc_uc_core_cfg_fwapi_data0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_UC_CORE_CFG_FWAPI_DATA0r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CFG_FWAPI_DATA0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_uc_core_cfg_fwapi_data0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_UC_CORE_CFG_FWAPI_DATA0r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CFG_FWAPI_DATA0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_uc_core_cfg_fwapi_data0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_UC_CORE_CFG_FWAPI_DATA0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CFG_FWAPI_DATA0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_uc_core_cfg_fwapi_data0))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define UC_UC_CORE_CFG_FWAPI_DATA0r BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CFG_FWAPI_DATA0r
#define UC_UC_CORE_CFG_FWAPI_DATA0r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CFG_FWAPI_DATA0r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CFG_FWAPI_DATA0r_t UC_UC_CORE_CFG_FWAPI_DATA0r_t;
#define UC_UC_CORE_CFG_FWAPI_DATA0r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CFG_FWAPI_DATA0r_CLR
#define UC_UC_CORE_CFG_FWAPI_DATA0r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CFG_FWAPI_DATA0r_SET
#define UC_UC_CORE_CFG_FWAPI_DATA0r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CFG_FWAPI_DATA0r_GET
#define UC_UC_CORE_CFG_FWAPI_DATA0r_MICRO_CORE_CFG_FWAPI_DATA0f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CFG_FWAPI_DATA0r_MICRO_CORE_CFG_FWAPI_DATA0f_GET
#define UC_UC_CORE_CFG_FWAPI_DATA0r_MICRO_CORE_CFG_FWAPI_DATA0f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CFG_FWAPI_DATA0r_MICRO_CORE_CFG_FWAPI_DATA0f_SET
#define READ_UC_UC_CORE_CFG_FWAPI_DATA0r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_UC_CORE_CFG_FWAPI_DATA0r
#define WRITE_UC_UC_CORE_CFG_FWAPI_DATA0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_UC_CORE_CFG_FWAPI_DATA0r
#define MODIFY_UC_UC_CORE_CFG_FWAPI_DATA0r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_UC_CORE_CFG_FWAPI_DATA0r
#define READLN_UC_UC_CORE_CFG_FWAPI_DATA0r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_UC_CORE_CFG_FWAPI_DATA0r
#define WRITELN_UC_UC_CORE_CFG_FWAPI_DATA0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_UC_CORE_CFG_FWAPI_DATA0r
#define WRITEALL_UC_UC_CORE_CFG_FWAPI_DATA0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_UC_CORE_CFG_FWAPI_DATA0r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CFG_FWAPI_DATA0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  UC_UC_CORE_CFG_FWAPI_DATA1
 * BLOCKS:   MICRO_E
 * REGADDR:  0xd24e
 * DEVAD:    1
 * DESC:     micro core firmware/api data registers 1
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     MICRO_CORE_CFG_FWAPI_DATA1 Micro core firmware/API data 1This is a scratch register used by the firmware and API code to store and/or exchangemicro core configuration information
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CFG_FWAPI_DATA1r (0x0001d24e | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CFG_FWAPI_DATA1r_SIZE 4

/*
 * This structure should be used to declare and program UC_UC_CORE_CFG_FWAPI_DATA1.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CFG_FWAPI_DATA1r_s {
	uint32_t v[1];
	uint32_t uc_uc_core_cfg_fwapi_data1[1];
	uint32_t _uc_uc_core_cfg_fwapi_data1;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CFG_FWAPI_DATA1r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CFG_FWAPI_DATA1r_CLR(r) (r).uc_uc_core_cfg_fwapi_data1[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CFG_FWAPI_DATA1r_SET(r,d) (r).uc_uc_core_cfg_fwapi_data1[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CFG_FWAPI_DATA1r_GET(r) (r).uc_uc_core_cfg_fwapi_data1[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CFG_FWAPI_DATA1r_MICRO_CORE_CFG_FWAPI_DATA1f_GET(r) (((r).uc_uc_core_cfg_fwapi_data1[0]) & 0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CFG_FWAPI_DATA1r_MICRO_CORE_CFG_FWAPI_DATA1f_SET(r,f) (r).uc_uc_core_cfg_fwapi_data1[0]=(((r).uc_uc_core_cfg_fwapi_data1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access UC_UC_CORE_CFG_FWAPI_DATA1.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_UC_CORE_CFG_FWAPI_DATA1r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CFG_FWAPI_DATA1r,(_r._uc_uc_core_cfg_fwapi_data1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_UC_CORE_CFG_FWAPI_DATA1r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CFG_FWAPI_DATA1r,(_r._uc_uc_core_cfg_fwapi_data1)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_UC_CORE_CFG_FWAPI_DATA1r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CFG_FWAPI_DATA1r,(_r._uc_uc_core_cfg_fwapi_data1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_UC_CORE_CFG_FWAPI_DATA1r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CFG_FWAPI_DATA1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_uc_core_cfg_fwapi_data1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_UC_CORE_CFG_FWAPI_DATA1r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CFG_FWAPI_DATA1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._uc_uc_core_cfg_fwapi_data1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_UC_CORE_CFG_FWAPI_DATA1r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CFG_FWAPI_DATA1r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._uc_uc_core_cfg_fwapi_data1))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define UC_UC_CORE_CFG_FWAPI_DATA1r BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CFG_FWAPI_DATA1r
#define UC_UC_CORE_CFG_FWAPI_DATA1r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CFG_FWAPI_DATA1r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CFG_FWAPI_DATA1r_t UC_UC_CORE_CFG_FWAPI_DATA1r_t;
#define UC_UC_CORE_CFG_FWAPI_DATA1r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CFG_FWAPI_DATA1r_CLR
#define UC_UC_CORE_CFG_FWAPI_DATA1r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CFG_FWAPI_DATA1r_SET
#define UC_UC_CORE_CFG_FWAPI_DATA1r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CFG_FWAPI_DATA1r_GET
#define UC_UC_CORE_CFG_FWAPI_DATA1r_MICRO_CORE_CFG_FWAPI_DATA1f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CFG_FWAPI_DATA1r_MICRO_CORE_CFG_FWAPI_DATA1f_GET
#define UC_UC_CORE_CFG_FWAPI_DATA1r_MICRO_CORE_CFG_FWAPI_DATA1f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CFG_FWAPI_DATA1r_MICRO_CORE_CFG_FWAPI_DATA1f_SET
#define READ_UC_UC_CORE_CFG_FWAPI_DATA1r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_UC_UC_CORE_CFG_FWAPI_DATA1r
#define WRITE_UC_UC_CORE_CFG_FWAPI_DATA1r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_UC_UC_CORE_CFG_FWAPI_DATA1r
#define MODIFY_UC_UC_CORE_CFG_FWAPI_DATA1r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_UC_UC_CORE_CFG_FWAPI_DATA1r
#define READLN_UC_UC_CORE_CFG_FWAPI_DATA1r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_UC_UC_CORE_CFG_FWAPI_DATA1r
#define WRITELN_UC_UC_CORE_CFG_FWAPI_DATA1r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_UC_UC_CORE_CFG_FWAPI_DATA1r
#define WRITEALL_UC_UC_CORE_CFG_FWAPI_DATA1r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_UC_UC_CORE_CFG_FWAPI_DATA1r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_UC_UC_CORE_CFG_FWAPI_DATA1r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  TLB_ERR_AGGR_TLB_ERR_AGGR_CFG0
 * BLOCKS:   TLB_ERR_AGGR
 * REGADDR:  0xd310
 * DEVAD:    1
 * DESC:     tlb_err_aggr Control 0
 * RESETVAL: 0xa (10)
 * ACCESS:   R/W
 * FIELDS:
 *     TLB_ERR_AGGR_START_ERROR_AGGREGATION When a "1" is written to this register, it will start multi lane error aggregation.When a "0" is written to this register, it will clear all the error aggregation error count status registers.
 *     TLB_ERR_AGGR_GCLK_DIV2_EN_IGNORE When this bit is unset, it uses clk32 to sample lane error frame counters instead of clk16.This mode should only be used in PAM4 OS2 mode. This is a debug feature.
 *     TLB_ERR_AGGR_ACTIVE_PATTERN_DEPTH These bits define the depth of pattern recognition for enabling the tlb error aggregation blockWith pattern recognition enabled, the aggregate error count will be 1 less than the lane error count every time thetlb error aggregator is enabled.0 - Detects 9'bxxxxxxx10, 1 - Detects 9'bxxxxxx100, 2 - Detects 9'bxxxxx1000, 3 - Detects 9'bxxxx10000.4 - Detects 9'bxxx100000, 5 - Detects 9'bxx1000000, 6 - Detects 9'bx10000000, 7 - Detects 9'b100000000.This is a debug feature
 *     TLB_ERR_AGGR_CLK_OUT_OF_SYNC_PATTERN_DEPTH These bits define the depth of pattern recognition for enabling the tlb error aggregation block0 - Out of sync 4 clk_16s, 1 - Out of sync 5 clk_16s, 2 - Out of sync 6 clk_16s, 3 - Out of sync 7 clk_16s4 - Out of sync 8 clk_16s, 5 - Out of sync 9 clk_16s, 6 - Out of sync 10 clk_16s, 7 - Out of sync 11 clk_16sThe number of programmed clock cycles should be less than the FEC frame size value 'N' (tlb_err_fec_size)This is a debug feature
 *     TLB_ERR_AGGR_DELAY_DATA_CAPTURE From when the error data launches, delay the capturing of data0 - 3 clks, 1 - 4 clks, 2 - 5 clks, 3 - 6 clksclk by default is clk16. There is a feature to make the clock clk32This is a debug feature
 *     TLB_ERR_AGGR_EN_FORCE Enables the aggregation block by force even when the pattern is not matchedThis is a debug feature
 *     TLB_ERR_AGGR_MODE Defines how many lanes are being aggregated00-not active (clock gated), 01 - 2 lanes, 10 - 4 lanes, 11 - 8 lanes
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_AGGR_CFG0r (0x0001d310 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_AGGR_CFG0r_SIZE 4

/*
 * This structure should be used to declare and program TLB_ERR_AGGR_TLB_ERR_AGGR_CFG0.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_AGGR_CFG0r_s {
	uint32_t v[1];
	uint32_t tlb_err_aggr_tlb_err_aggr_cfg0[1];
	uint32_t _tlb_err_aggr_tlb_err_aggr_cfg0;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_AGGR_CFG0r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_AGGR_CFG0r_CLR(r) (r).tlb_err_aggr_tlb_err_aggr_cfg0[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_AGGR_CFG0r_SET(r,d) (r).tlb_err_aggr_tlb_err_aggr_cfg0[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_AGGR_CFG0r_GET(r) (r).tlb_err_aggr_tlb_err_aggr_cfg0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_AGGR_CFG0r_TLB_ERR_AGGR_MODEf_GET(r) ((((r).tlb_err_aggr_tlb_err_aggr_cfg0[0]) >> 14) & 0x3)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_AGGR_CFG0r_TLB_ERR_AGGR_MODEf_SET(r,f) (r).tlb_err_aggr_tlb_err_aggr_cfg0[0]=(((r).tlb_err_aggr_tlb_err_aggr_cfg0[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14)) | (3 << (16 + 14))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_AGGR_CFG0r_TLB_ERR_AGGR_EN_FORCEf_GET(r) ((((r).tlb_err_aggr_tlb_err_aggr_cfg0[0]) >> 13) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_AGGR_CFG0r_TLB_ERR_AGGR_EN_FORCEf_SET(r,f) (r).tlb_err_aggr_tlb_err_aggr_cfg0[0]=(((r).tlb_err_aggr_tlb_err_aggr_cfg0[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13)) | (1 << (16 + 13))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_AGGR_CFG0r_TLB_ERR_AGGR_DELAY_DATA_CAPTUREf_GET(r) ((((r).tlb_err_aggr_tlb_err_aggr_cfg0[0]) >> 11) & 0x3)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_AGGR_CFG0r_TLB_ERR_AGGR_DELAY_DATA_CAPTUREf_SET(r,f) (r).tlb_err_aggr_tlb_err_aggr_cfg0[0]=(((r).tlb_err_aggr_tlb_err_aggr_cfg0[0] & ~((uint32_t)0x3 << 11)) | ((((uint32_t)f) & 0x3) << 11)) | (3 << (16 + 11))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_AGGR_CFG0r_TLB_ERR_AGGR_CLK_OUT_OF_SYNC_PATTERN_DEPTHf_GET(r) ((((r).tlb_err_aggr_tlb_err_aggr_cfg0[0]) >> 8) & 0x7)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_AGGR_CFG0r_TLB_ERR_AGGR_CLK_OUT_OF_SYNC_PATTERN_DEPTHf_SET(r,f) (r).tlb_err_aggr_tlb_err_aggr_cfg0[0]=(((r).tlb_err_aggr_tlb_err_aggr_cfg0[0] & ~((uint32_t)0x7 << 8)) | ((((uint32_t)f) & 0x7) << 8)) | (7 << (16 + 8))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_AGGR_CFG0r_TLB_ERR_AGGR_ACTIVE_PATTERN_DEPTHf_GET(r) ((((r).tlb_err_aggr_tlb_err_aggr_cfg0[0]) >> 2) & 0x7)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_AGGR_CFG0r_TLB_ERR_AGGR_ACTIVE_PATTERN_DEPTHf_SET(r,f) (r).tlb_err_aggr_tlb_err_aggr_cfg0[0]=(((r).tlb_err_aggr_tlb_err_aggr_cfg0[0] & ~((uint32_t)0x7 << 2)) | ((((uint32_t)f) & 0x7) << 2)) | (7 << (16 + 2))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_AGGR_CFG0r_TLB_ERR_AGGR_GCLK_DIV2_EN_IGNOREf_GET(r) ((((r).tlb_err_aggr_tlb_err_aggr_cfg0[0]) >> 1) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_AGGR_CFG0r_TLB_ERR_AGGR_GCLK_DIV2_EN_IGNOREf_SET(r,f) (r).tlb_err_aggr_tlb_err_aggr_cfg0[0]=(((r).tlb_err_aggr_tlb_err_aggr_cfg0[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_AGGR_CFG0r_TLB_ERR_AGGR_START_ERROR_AGGREGATIONf_GET(r) (((r).tlb_err_aggr_tlb_err_aggr_cfg0[0]) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_AGGR_CFG0r_TLB_ERR_AGGR_START_ERROR_AGGREGATIONf_SET(r,f) (r).tlb_err_aggr_tlb_err_aggr_cfg0[0]=(((r).tlb_err_aggr_tlb_err_aggr_cfg0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access TLB_ERR_AGGR_TLB_ERR_AGGR_CFG0.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TLB_ERR_AGGR_TLB_ERR_AGGR_CFG0r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_AGGR_CFG0r,(_r._tlb_err_aggr_tlb_err_aggr_cfg0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TLB_ERR_AGGR_TLB_ERR_AGGR_CFG0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_AGGR_CFG0r,(_r._tlb_err_aggr_tlb_err_aggr_cfg0)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TLB_ERR_AGGR_TLB_ERR_AGGR_CFG0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_AGGR_CFG0r,(_r._tlb_err_aggr_tlb_err_aggr_cfg0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TLB_ERR_AGGR_TLB_ERR_AGGR_CFG0r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_AGGR_CFG0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_err_aggr_tlb_err_aggr_cfg0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TLB_ERR_AGGR_TLB_ERR_AGGR_CFG0r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_AGGR_CFG0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_err_aggr_tlb_err_aggr_cfg0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TLB_ERR_AGGR_TLB_ERR_AGGR_CFG0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_AGGR_CFG0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tlb_err_aggr_tlb_err_aggr_cfg0))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TLB_ERR_AGGR_TLB_ERR_AGGR_CFG0r BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_AGGR_CFG0r
#define TLB_ERR_AGGR_TLB_ERR_AGGR_CFG0r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_AGGR_CFG0r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_AGGR_CFG0r_t TLB_ERR_AGGR_TLB_ERR_AGGR_CFG0r_t;
#define TLB_ERR_AGGR_TLB_ERR_AGGR_CFG0r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_AGGR_CFG0r_CLR
#define TLB_ERR_AGGR_TLB_ERR_AGGR_CFG0r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_AGGR_CFG0r_SET
#define TLB_ERR_AGGR_TLB_ERR_AGGR_CFG0r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_AGGR_CFG0r_GET
#define TLB_ERR_AGGR_TLB_ERR_AGGR_CFG0r_TLB_ERR_AGGR_MODEf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_AGGR_CFG0r_TLB_ERR_AGGR_MODEf_GET
#define TLB_ERR_AGGR_TLB_ERR_AGGR_CFG0r_TLB_ERR_AGGR_MODEf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_AGGR_CFG0r_TLB_ERR_AGGR_MODEf_SET
#define TLB_ERR_AGGR_TLB_ERR_AGGR_CFG0r_TLB_ERR_AGGR_EN_FORCEf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_AGGR_CFG0r_TLB_ERR_AGGR_EN_FORCEf_GET
#define TLB_ERR_AGGR_TLB_ERR_AGGR_CFG0r_TLB_ERR_AGGR_EN_FORCEf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_AGGR_CFG0r_TLB_ERR_AGGR_EN_FORCEf_SET
#define TLB_ERR_AGGR_TLB_ERR_AGGR_CFG0r_TLB_ERR_AGGR_DELAY_DATA_CAPTUREf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_AGGR_CFG0r_TLB_ERR_AGGR_DELAY_DATA_CAPTUREf_GET
#define TLB_ERR_AGGR_TLB_ERR_AGGR_CFG0r_TLB_ERR_AGGR_DELAY_DATA_CAPTUREf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_AGGR_CFG0r_TLB_ERR_AGGR_DELAY_DATA_CAPTUREf_SET
#define TLB_ERR_AGGR_TLB_ERR_AGGR_CFG0r_TLB_ERR_AGGR_CLK_OUT_OF_SYNC_PATTERN_DEPTHf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_AGGR_CFG0r_TLB_ERR_AGGR_CLK_OUT_OF_SYNC_PATTERN_DEPTHf_GET
#define TLB_ERR_AGGR_TLB_ERR_AGGR_CFG0r_TLB_ERR_AGGR_CLK_OUT_OF_SYNC_PATTERN_DEPTHf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_AGGR_CFG0r_TLB_ERR_AGGR_CLK_OUT_OF_SYNC_PATTERN_DEPTHf_SET
#define TLB_ERR_AGGR_TLB_ERR_AGGR_CFG0r_TLB_ERR_AGGR_ACTIVE_PATTERN_DEPTHf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_AGGR_CFG0r_TLB_ERR_AGGR_ACTIVE_PATTERN_DEPTHf_GET
#define TLB_ERR_AGGR_TLB_ERR_AGGR_CFG0r_TLB_ERR_AGGR_ACTIVE_PATTERN_DEPTHf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_AGGR_CFG0r_TLB_ERR_AGGR_ACTIVE_PATTERN_DEPTHf_SET
#define TLB_ERR_AGGR_TLB_ERR_AGGR_CFG0r_TLB_ERR_AGGR_GCLK_DIV2_EN_IGNOREf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_AGGR_CFG0r_TLB_ERR_AGGR_GCLK_DIV2_EN_IGNOREf_GET
#define TLB_ERR_AGGR_TLB_ERR_AGGR_CFG0r_TLB_ERR_AGGR_GCLK_DIV2_EN_IGNOREf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_AGGR_CFG0r_TLB_ERR_AGGR_GCLK_DIV2_EN_IGNOREf_SET
#define TLB_ERR_AGGR_TLB_ERR_AGGR_CFG0r_TLB_ERR_AGGR_START_ERROR_AGGREGATIONf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_AGGR_CFG0r_TLB_ERR_AGGR_START_ERROR_AGGREGATIONf_GET
#define TLB_ERR_AGGR_TLB_ERR_AGGR_CFG0r_TLB_ERR_AGGR_START_ERROR_AGGREGATIONf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_AGGR_CFG0r_TLB_ERR_AGGR_START_ERROR_AGGREGATIONf_SET
#define READ_TLB_ERR_AGGR_TLB_ERR_AGGR_CFG0r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TLB_ERR_AGGR_TLB_ERR_AGGR_CFG0r
#define WRITE_TLB_ERR_AGGR_TLB_ERR_AGGR_CFG0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TLB_ERR_AGGR_TLB_ERR_AGGR_CFG0r
#define MODIFY_TLB_ERR_AGGR_TLB_ERR_AGGR_CFG0r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TLB_ERR_AGGR_TLB_ERR_AGGR_CFG0r
#define READLN_TLB_ERR_AGGR_TLB_ERR_AGGR_CFG0r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TLB_ERR_AGGR_TLB_ERR_AGGR_CFG0r
#define WRITELN_TLB_ERR_AGGR_TLB_ERR_AGGR_CFG0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TLB_ERR_AGGR_TLB_ERR_AGGR_CFG0r
#define WRITEALL_TLB_ERR_AGGR_TLB_ERR_AGGR_CFG0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TLB_ERR_AGGR_TLB_ERR_AGGR_CFG0r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_AGGR_CFG0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG0
 * BLOCKS:   TLB_ERR_AGGR
 * REGADDR:  0xd311
 * DEVAD:    1
 * DESC:     tlb_err_analyze Control 0
 * RESETVAL: 0x2 (2)
 * ACCESS:   R/W
 * FIELDS:
 *     TLB_ERR_ANALYZE_EN Enables error analysis and accumulation counters to write into memory for analysis
 *     TLB_ERR_ANALYZE_COUNTER_MORE_THAN_15_EN This bit enables counter which counts > 15 errors in a FEC FRAME
 *     TLB_ERR_ANALYZE_RESET_MEM_DATA When this bit is set, the input to the dac pattern memory is 140'd0. This bit should be set while clearing the dac patt memoryThe dac pattern memory cannot be cleared when tlb_err_analyze_en is enabled
 *     TLB_ERR_ANALYZE_WCLK_SWITCH This bit has been deprecated.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG0r (0x0001d311 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG0r_SIZE 4

/*
 * This structure should be used to declare and program TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG0.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG0r_s {
	uint32_t v[1];
	uint32_t tlb_err_aggr_tlb_err_analyze_cfg0[1];
	uint32_t _tlb_err_aggr_tlb_err_analyze_cfg0;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG0r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG0r_CLR(r) (r).tlb_err_aggr_tlb_err_analyze_cfg0[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG0r_SET(r,d) (r).tlb_err_aggr_tlb_err_analyze_cfg0[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG0r_GET(r) (r).tlb_err_aggr_tlb_err_analyze_cfg0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG0r_TLB_ERR_ANALYZE_WCLK_SWITCHf_GET(r) ((((r).tlb_err_aggr_tlb_err_analyze_cfg0[0]) >> 3) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG0r_TLB_ERR_ANALYZE_WCLK_SWITCHf_SET(r,f) (r).tlb_err_aggr_tlb_err_analyze_cfg0[0]=(((r).tlb_err_aggr_tlb_err_analyze_cfg0[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG0r_TLB_ERR_ANALYZE_RESET_MEM_DATAf_GET(r) ((((r).tlb_err_aggr_tlb_err_analyze_cfg0[0]) >> 2) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG0r_TLB_ERR_ANALYZE_RESET_MEM_DATAf_SET(r,f) (r).tlb_err_aggr_tlb_err_analyze_cfg0[0]=(((r).tlb_err_aggr_tlb_err_analyze_cfg0[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG0r_TLB_ERR_ANALYZE_COUNTER_MORE_THAN_15_ENf_GET(r) ((((r).tlb_err_aggr_tlb_err_analyze_cfg0[0]) >> 1) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG0r_TLB_ERR_ANALYZE_COUNTER_MORE_THAN_15_ENf_SET(r,f) (r).tlb_err_aggr_tlb_err_analyze_cfg0[0]=(((r).tlb_err_aggr_tlb_err_analyze_cfg0[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG0r_TLB_ERR_ANALYZE_ENf_GET(r) (((r).tlb_err_aggr_tlb_err_analyze_cfg0[0]) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG0r_TLB_ERR_ANALYZE_ENf_SET(r,f) (r).tlb_err_aggr_tlb_err_analyze_cfg0[0]=(((r).tlb_err_aggr_tlb_err_analyze_cfg0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG0.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG0r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG0r,(_r._tlb_err_aggr_tlb_err_analyze_cfg0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG0r,(_r._tlb_err_aggr_tlb_err_analyze_cfg0)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG0r,(_r._tlb_err_aggr_tlb_err_analyze_cfg0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG0r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_err_aggr_tlb_err_analyze_cfg0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG0r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_err_aggr_tlb_err_analyze_cfg0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tlb_err_aggr_tlb_err_analyze_cfg0))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG0r BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG0r
#define TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG0r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG0r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG0r_t TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG0r_t;
#define TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG0r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG0r_CLR
#define TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG0r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG0r_SET
#define TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG0r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG0r_GET
#define TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG0r_TLB_ERR_ANALYZE_WCLK_SWITCHf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG0r_TLB_ERR_ANALYZE_WCLK_SWITCHf_GET
#define TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG0r_TLB_ERR_ANALYZE_WCLK_SWITCHf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG0r_TLB_ERR_ANALYZE_WCLK_SWITCHf_SET
#define TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG0r_TLB_ERR_ANALYZE_RESET_MEM_DATAf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG0r_TLB_ERR_ANALYZE_RESET_MEM_DATAf_GET
#define TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG0r_TLB_ERR_ANALYZE_RESET_MEM_DATAf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG0r_TLB_ERR_ANALYZE_RESET_MEM_DATAf_SET
#define TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG0r_TLB_ERR_ANALYZE_COUNTER_MORE_THAN_15_ENf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG0r_TLB_ERR_ANALYZE_COUNTER_MORE_THAN_15_ENf_GET
#define TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG0r_TLB_ERR_ANALYZE_COUNTER_MORE_THAN_15_ENf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG0r_TLB_ERR_ANALYZE_COUNTER_MORE_THAN_15_ENf_SET
#define TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG0r_TLB_ERR_ANALYZE_ENf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG0r_TLB_ERR_ANALYZE_ENf_GET
#define TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG0r_TLB_ERR_ANALYZE_ENf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG0r_TLB_ERR_ANALYZE_ENf_SET
#define READ_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG0r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG0r
#define WRITE_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG0r
#define MODIFY_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG0r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG0r
#define READLN_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG0r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG0r
#define WRITELN_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG0r
#define WRITEALL_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG0r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG1
 * BLOCKS:   TLB_ERR_AGGR
 * REGADDR:  0xd312
 * DEVAD:    1
 * DESC:     tlb_err_analyze Control 1
 * RESETVAL: 0xffff (65535)
 * ACCESS:   R/W
 * FIELDS:
 *     TLB_ERR_ANALYZE_COUNTER_EN Each bit determines if certain counters are enabled or disabledbit 0 enables counter with 0 FEC frame errors, bit 1 enables counter with 1 FEC frame error and so on
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG1r (0x0001d312 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG1r_SIZE 4

/*
 * This structure should be used to declare and program TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG1.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG1r_s {
	uint32_t v[1];
	uint32_t tlb_err_aggr_tlb_err_analyze_cfg1[1];
	uint32_t _tlb_err_aggr_tlb_err_analyze_cfg1;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG1r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG1r_CLR(r) (r).tlb_err_aggr_tlb_err_analyze_cfg1[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG1r_SET(r,d) (r).tlb_err_aggr_tlb_err_analyze_cfg1[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG1r_GET(r) (r).tlb_err_aggr_tlb_err_analyze_cfg1[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG1r_TLB_ERR_ANALYZE_COUNTER_ENf_GET(r) (((r).tlb_err_aggr_tlb_err_analyze_cfg1[0]) & 0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG1r_TLB_ERR_ANALYZE_COUNTER_ENf_SET(r,f) (r).tlb_err_aggr_tlb_err_analyze_cfg1[0]=(((r).tlb_err_aggr_tlb_err_analyze_cfg1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG1.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG1r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG1r,(_r._tlb_err_aggr_tlb_err_analyze_cfg1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG1r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG1r,(_r._tlb_err_aggr_tlb_err_analyze_cfg1)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG1r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG1r,(_r._tlb_err_aggr_tlb_err_analyze_cfg1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG1r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_err_aggr_tlb_err_analyze_cfg1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG1r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_err_aggr_tlb_err_analyze_cfg1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG1r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG1r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tlb_err_aggr_tlb_err_analyze_cfg1))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG1r BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG1r
#define TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG1r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG1r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG1r_t TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG1r_t;
#define TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG1r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG1r_CLR
#define TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG1r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG1r_SET
#define TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG1r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG1r_GET
#define TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG1r_TLB_ERR_ANALYZE_COUNTER_ENf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG1r_TLB_ERR_ANALYZE_COUNTER_ENf_GET
#define TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG1r_TLB_ERR_ANALYZE_COUNTER_ENf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG1r_TLB_ERR_ANALYZE_COUNTER_ENf_SET
#define READ_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG1r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG1r
#define WRITE_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG1r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG1r
#define MODIFY_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG1r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG1r
#define READLN_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG1r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG1r
#define WRITELN_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG1r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG1r
#define WRITEALL_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG1r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG1r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG1r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG2
 * BLOCKS:   TLB_ERR_AGGR
 * REGADDR:  0xd313
 * DEVAD:    1
 * DESC:     tlb_err_analyze Control 2
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     TLB_ERR_ANALYZE_READADDR When a counter at this address is updated during error analyzer operation, that counter can be read
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG2r (0x0001d313 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG2r_SIZE 4

/*
 * This structure should be used to declare and program TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG2.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG2r_s {
	uint32_t v[1];
	uint32_t tlb_err_aggr_tlb_err_analyze_cfg2[1];
	uint32_t _tlb_err_aggr_tlb_err_analyze_cfg2;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG2r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG2r_CLR(r) (r).tlb_err_aggr_tlb_err_analyze_cfg2[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG2r_SET(r,d) (r).tlb_err_aggr_tlb_err_analyze_cfg2[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG2r_GET(r) (r).tlb_err_aggr_tlb_err_analyze_cfg2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG2r_TLB_ERR_ANALYZE_READADDRf_GET(r) (((r).tlb_err_aggr_tlb_err_analyze_cfg2[0]) & 0xff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG2r_TLB_ERR_ANALYZE_READADDRf_SET(r,f) (r).tlb_err_aggr_tlb_err_analyze_cfg2[0]=(((r).tlb_err_aggr_tlb_err_analyze_cfg2[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff)) | (0xff << 16)

/*
 * These macros can be used to access TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG2.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG2r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG2r,(_r._tlb_err_aggr_tlb_err_analyze_cfg2))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG2r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG2r,(_r._tlb_err_aggr_tlb_err_analyze_cfg2)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG2r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG2r,(_r._tlb_err_aggr_tlb_err_analyze_cfg2))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG2r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_err_aggr_tlb_err_analyze_cfg2))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG2r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_err_aggr_tlb_err_analyze_cfg2))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG2r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tlb_err_aggr_tlb_err_analyze_cfg2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG2r BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG2r
#define TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG2r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG2r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG2r_t TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG2r_t;
#define TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG2r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG2r_CLR
#define TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG2r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG2r_SET
#define TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG2r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG2r_GET
#define TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG2r_TLB_ERR_ANALYZE_READADDRf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG2r_TLB_ERR_ANALYZE_READADDRf_GET
#define TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG2r_TLB_ERR_ANALYZE_READADDRf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG2r_TLB_ERR_ANALYZE_READADDRf_SET
#define READ_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG2r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG2r
#define WRITE_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG2r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG2r
#define MODIFY_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG2r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG2r
#define READLN_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG2r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG2r
#define WRITELN_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG2r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG2r
#define WRITEALL_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG2r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_CFG2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  TLB_ERR_AGGR_NUM_ERRS_IN_FEC_FRAMES_STS_HI
 * BLOCKS:   TLB_ERR_AGGR
 * REGADDR:  0xd315
 * DEVAD:    1
 * DESC:     tlb_err_aggr Status 8
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     TLB_ERR_AGGR_ACTIVE_STATUS This bit is set when the tlb error aggregation feature is enabled after pattern recognition
 *     TLB_ERR_AGGR_CLKS_OUT_OF_SYNC_STATUS This bit indicates that a clock out of sync scenario is detected due to clock wander
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_NUM_ERRS_IN_FEC_FRAMES_STS_HIr (0x0001d315 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_NUM_ERRS_IN_FEC_FRAMES_STS_HIr_SIZE 4

/*
 * This structure should be used to declare and program TLB_ERR_AGGR_NUM_ERRS_IN_FEC_FRAMES_STS_HI.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_NUM_ERRS_IN_FEC_FRAMES_STS_HIr_s {
	uint32_t v[1];
	uint32_t tlb_err_aggr_num_errs_in_fec_frames_sts_hi[1];
	uint32_t _tlb_err_aggr_num_errs_in_fec_frames_sts_hi;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_NUM_ERRS_IN_FEC_FRAMES_STS_HIr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_NUM_ERRS_IN_FEC_FRAMES_STS_HIr_CLR(r) (r).tlb_err_aggr_num_errs_in_fec_frames_sts_hi[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_NUM_ERRS_IN_FEC_FRAMES_STS_HIr_SET(r,d) (r).tlb_err_aggr_num_errs_in_fec_frames_sts_hi[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_NUM_ERRS_IN_FEC_FRAMES_STS_HIr_GET(r) (r).tlb_err_aggr_num_errs_in_fec_frames_sts_hi[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_NUM_ERRS_IN_FEC_FRAMES_STS_HIr_TLB_ERR_AGGR_CLKS_OUT_OF_SYNC_STATUSf_GET(r) ((((r).tlb_err_aggr_num_errs_in_fec_frames_sts_hi[0]) >> 5) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_NUM_ERRS_IN_FEC_FRAMES_STS_HIr_TLB_ERR_AGGR_CLKS_OUT_OF_SYNC_STATUSf_SET(r,f) (r).tlb_err_aggr_num_errs_in_fec_frames_sts_hi[0]=(((r).tlb_err_aggr_num_errs_in_fec_frames_sts_hi[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_NUM_ERRS_IN_FEC_FRAMES_STS_HIr_TLB_ERR_AGGR_ACTIVE_STATUSf_GET(r) ((((r).tlb_err_aggr_num_errs_in_fec_frames_sts_hi[0]) >> 4) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_NUM_ERRS_IN_FEC_FRAMES_STS_HIr_TLB_ERR_AGGR_ACTIVE_STATUSf_SET(r,f) (r).tlb_err_aggr_num_errs_in_fec_frames_sts_hi[0]=(((r).tlb_err_aggr_num_errs_in_fec_frames_sts_hi[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))

/*
 * These macros can be used to access TLB_ERR_AGGR_NUM_ERRS_IN_FEC_FRAMES_STS_HI.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TLB_ERR_AGGR_NUM_ERRS_IN_FEC_FRAMES_STS_HIr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_NUM_ERRS_IN_FEC_FRAMES_STS_HIr,(_r._tlb_err_aggr_num_errs_in_fec_frames_sts_hi))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TLB_ERR_AGGR_NUM_ERRS_IN_FEC_FRAMES_STS_HIr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_NUM_ERRS_IN_FEC_FRAMES_STS_HIr,(_r._tlb_err_aggr_num_errs_in_fec_frames_sts_hi)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TLB_ERR_AGGR_NUM_ERRS_IN_FEC_FRAMES_STS_HIr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_NUM_ERRS_IN_FEC_FRAMES_STS_HIr,(_r._tlb_err_aggr_num_errs_in_fec_frames_sts_hi))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TLB_ERR_AGGR_NUM_ERRS_IN_FEC_FRAMES_STS_HIr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_NUM_ERRS_IN_FEC_FRAMES_STS_HIr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_err_aggr_num_errs_in_fec_frames_sts_hi))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TLB_ERR_AGGR_NUM_ERRS_IN_FEC_FRAMES_STS_HIr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_NUM_ERRS_IN_FEC_FRAMES_STS_HIr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_err_aggr_num_errs_in_fec_frames_sts_hi))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TLB_ERR_AGGR_NUM_ERRS_IN_FEC_FRAMES_STS_HIr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_NUM_ERRS_IN_FEC_FRAMES_STS_HIr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tlb_err_aggr_num_errs_in_fec_frames_sts_hi))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TLB_ERR_AGGR_NUM_ERRS_IN_FEC_FRAMES_STS_HIr BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_NUM_ERRS_IN_FEC_FRAMES_STS_HIr
#define TLB_ERR_AGGR_NUM_ERRS_IN_FEC_FRAMES_STS_HIr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_NUM_ERRS_IN_FEC_FRAMES_STS_HIr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_NUM_ERRS_IN_FEC_FRAMES_STS_HIr_t TLB_ERR_AGGR_NUM_ERRS_IN_FEC_FRAMES_STS_HIr_t;
#define TLB_ERR_AGGR_NUM_ERRS_IN_FEC_FRAMES_STS_HIr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_NUM_ERRS_IN_FEC_FRAMES_STS_HIr_CLR
#define TLB_ERR_AGGR_NUM_ERRS_IN_FEC_FRAMES_STS_HIr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_NUM_ERRS_IN_FEC_FRAMES_STS_HIr_SET
#define TLB_ERR_AGGR_NUM_ERRS_IN_FEC_FRAMES_STS_HIr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_NUM_ERRS_IN_FEC_FRAMES_STS_HIr_GET
#define TLB_ERR_AGGR_NUM_ERRS_IN_FEC_FRAMES_STS_HIr_TLB_ERR_AGGR_CLKS_OUT_OF_SYNC_STATUSf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_NUM_ERRS_IN_FEC_FRAMES_STS_HIr_TLB_ERR_AGGR_CLKS_OUT_OF_SYNC_STATUSf_GET
#define TLB_ERR_AGGR_NUM_ERRS_IN_FEC_FRAMES_STS_HIr_TLB_ERR_AGGR_CLKS_OUT_OF_SYNC_STATUSf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_NUM_ERRS_IN_FEC_FRAMES_STS_HIr_TLB_ERR_AGGR_CLKS_OUT_OF_SYNC_STATUSf_SET
#define TLB_ERR_AGGR_NUM_ERRS_IN_FEC_FRAMES_STS_HIr_TLB_ERR_AGGR_ACTIVE_STATUSf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_NUM_ERRS_IN_FEC_FRAMES_STS_HIr_TLB_ERR_AGGR_ACTIVE_STATUSf_GET
#define TLB_ERR_AGGR_NUM_ERRS_IN_FEC_FRAMES_STS_HIr_TLB_ERR_AGGR_ACTIVE_STATUSf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_NUM_ERRS_IN_FEC_FRAMES_STS_HIr_TLB_ERR_AGGR_ACTIVE_STATUSf_SET
#define READ_TLB_ERR_AGGR_NUM_ERRS_IN_FEC_FRAMES_STS_HIr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TLB_ERR_AGGR_NUM_ERRS_IN_FEC_FRAMES_STS_HIr
#define WRITE_TLB_ERR_AGGR_NUM_ERRS_IN_FEC_FRAMES_STS_HIr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TLB_ERR_AGGR_NUM_ERRS_IN_FEC_FRAMES_STS_HIr
#define MODIFY_TLB_ERR_AGGR_NUM_ERRS_IN_FEC_FRAMES_STS_HIr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TLB_ERR_AGGR_NUM_ERRS_IN_FEC_FRAMES_STS_HIr
#define READLN_TLB_ERR_AGGR_NUM_ERRS_IN_FEC_FRAMES_STS_HIr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TLB_ERR_AGGR_NUM_ERRS_IN_FEC_FRAMES_STS_HIr
#define WRITELN_TLB_ERR_AGGR_NUM_ERRS_IN_FEC_FRAMES_STS_HIr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TLB_ERR_AGGR_NUM_ERRS_IN_FEC_FRAMES_STS_HIr
#define WRITEALL_TLB_ERR_AGGR_NUM_ERRS_IN_FEC_FRAMES_STS_HIr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TLB_ERR_AGGR_NUM_ERRS_IN_FEC_FRAMES_STS_HIr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_NUM_ERRS_IN_FEC_FRAMES_STS_HIr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS2
 * BLOCKS:   TLB_ERR_AGGR
 * REGADDR:  0xd316
 * DEVAD:    1
 * DESC:     tlb_err_analyze Status 2
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     TLB_ERR_ANALYZE_READDATA_HI Bits 34:19 out of 34:0 of the error counter that is read
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS2r (0x0001d316 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS2r_SIZE 4

/*
 * This structure should be used to declare and program TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS2.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS2r_s {
	uint32_t v[1];
	uint32_t tlb_err_aggr_tlb_err_analyze_sts2[1];
	uint32_t _tlb_err_aggr_tlb_err_analyze_sts2;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS2r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS2r_CLR(r) (r).tlb_err_aggr_tlb_err_analyze_sts2[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS2r_SET(r,d) (r).tlb_err_aggr_tlb_err_analyze_sts2[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS2r_GET(r) (r).tlb_err_aggr_tlb_err_analyze_sts2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS2r_TLB_ERR_ANALYZE_READDATA_HIf_GET(r) (((r).tlb_err_aggr_tlb_err_analyze_sts2[0]) & 0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS2r_TLB_ERR_ANALYZE_READDATA_HIf_SET(r,f) (r).tlb_err_aggr_tlb_err_analyze_sts2[0]=(((r).tlb_err_aggr_tlb_err_analyze_sts2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS2.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS2r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS2r,(_r._tlb_err_aggr_tlb_err_analyze_sts2))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS2r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS2r,(_r._tlb_err_aggr_tlb_err_analyze_sts2)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS2r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS2r,(_r._tlb_err_aggr_tlb_err_analyze_sts2))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS2r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_err_aggr_tlb_err_analyze_sts2))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS2r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_err_aggr_tlb_err_analyze_sts2))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS2r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tlb_err_aggr_tlb_err_analyze_sts2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS2r BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS2r
#define TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS2r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS2r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS2r_t TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS2r_t;
#define TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS2r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS2r_CLR
#define TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS2r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS2r_SET
#define TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS2r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS2r_GET
#define TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS2r_TLB_ERR_ANALYZE_READDATA_HIf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS2r_TLB_ERR_ANALYZE_READDATA_HIf_GET
#define TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS2r_TLB_ERR_ANALYZE_READDATA_HIf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS2r_TLB_ERR_ANALYZE_READDATA_HIf_SET
#define READ_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS2r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS2r
#define WRITE_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS2r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS2r
#define MODIFY_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS2r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS2r
#define READLN_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS2r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS2r
#define WRITELN_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS2r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS2r
#define WRITEALL_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS2r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS1
 * BLOCKS:   TLB_ERR_AGGR
 * REGADDR:  0xd317
 * DEVAD:    1
 * DESC:     tlb_err_analyze Status 1
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     TLB_ERR_ANALYZE_READDATA_MED Bits 18:3 out of 34:0 of the error counter that is read
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS1r (0x0001d317 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS1r_SIZE 4

/*
 * This structure should be used to declare and program TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS1.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS1r_s {
	uint32_t v[1];
	uint32_t tlb_err_aggr_tlb_err_analyze_sts1[1];
	uint32_t _tlb_err_aggr_tlb_err_analyze_sts1;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS1r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS1r_CLR(r) (r).tlb_err_aggr_tlb_err_analyze_sts1[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS1r_SET(r,d) (r).tlb_err_aggr_tlb_err_analyze_sts1[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS1r_GET(r) (r).tlb_err_aggr_tlb_err_analyze_sts1[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS1r_TLB_ERR_ANALYZE_READDATA_MEDf_GET(r) (((r).tlb_err_aggr_tlb_err_analyze_sts1[0]) & 0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS1r_TLB_ERR_ANALYZE_READDATA_MEDf_SET(r,f) (r).tlb_err_aggr_tlb_err_analyze_sts1[0]=(((r).tlb_err_aggr_tlb_err_analyze_sts1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS1.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS1r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS1r,(_r._tlb_err_aggr_tlb_err_analyze_sts1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS1r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS1r,(_r._tlb_err_aggr_tlb_err_analyze_sts1)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS1r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS1r,(_r._tlb_err_aggr_tlb_err_analyze_sts1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS1r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_err_aggr_tlb_err_analyze_sts1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS1r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_err_aggr_tlb_err_analyze_sts1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS1r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS1r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tlb_err_aggr_tlb_err_analyze_sts1))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS1r BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS1r
#define TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS1r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS1r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS1r_t TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS1r_t;
#define TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS1r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS1r_CLR
#define TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS1r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS1r_SET
#define TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS1r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS1r_GET
#define TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS1r_TLB_ERR_ANALYZE_READDATA_MEDf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS1r_TLB_ERR_ANALYZE_READDATA_MEDf_GET
#define TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS1r_TLB_ERR_ANALYZE_READDATA_MEDf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS1r_TLB_ERR_ANALYZE_READDATA_MEDf_SET
#define READ_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS1r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS1r
#define WRITE_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS1r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS1r
#define MODIFY_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS1r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS1r
#define READLN_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS1r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS1r
#define WRITELN_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS1r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS1r
#define WRITEALL_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS1r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS1r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS1r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS0
 * BLOCKS:   TLB_ERR_AGGR
 * REGADDR:  0xd318
 * DEVAD:    1
 * DESC:     tlb_err_analyze Status 0
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     TLB_ERR_ANALYZE_READBACK_AVAILABLE When this flag is set to 1, a new error count for the counter at address tlb_err_analyze_readaddr is available
 *     TLB_ERR_ANALYZE_READDATA_LO Bits 2:0 out of 34:0 of the error counter that is read
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS0r (0x0001d318 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS0r_SIZE 4

/*
 * This structure should be used to declare and program TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS0.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS0r_s {
	uint32_t v[1];
	uint32_t tlb_err_aggr_tlb_err_analyze_sts0[1];
	uint32_t _tlb_err_aggr_tlb_err_analyze_sts0;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS0r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS0r_CLR(r) (r).tlb_err_aggr_tlb_err_analyze_sts0[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS0r_SET(r,d) (r).tlb_err_aggr_tlb_err_analyze_sts0[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS0r_GET(r) (r).tlb_err_aggr_tlb_err_analyze_sts0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS0r_TLB_ERR_ANALYZE_READDATA_LOf_GET(r) ((((r).tlb_err_aggr_tlb_err_analyze_sts0[0]) >> 1) & 0x7)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS0r_TLB_ERR_ANALYZE_READDATA_LOf_SET(r,f) (r).tlb_err_aggr_tlb_err_analyze_sts0[0]=(((r).tlb_err_aggr_tlb_err_analyze_sts0[0] & ~((uint32_t)0x7 << 1)) | ((((uint32_t)f) & 0x7) << 1)) | (7 << (16 + 1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS0r_TLB_ERR_ANALYZE_READBACK_AVAILABLEf_GET(r) (((r).tlb_err_aggr_tlb_err_analyze_sts0[0]) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS0r_TLB_ERR_ANALYZE_READBACK_AVAILABLEf_SET(r,f) (r).tlb_err_aggr_tlb_err_analyze_sts0[0]=(((r).tlb_err_aggr_tlb_err_analyze_sts0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS0.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS0r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS0r,(_r._tlb_err_aggr_tlb_err_analyze_sts0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS0r,(_r._tlb_err_aggr_tlb_err_analyze_sts0)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS0r,(_r._tlb_err_aggr_tlb_err_analyze_sts0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS0r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_err_aggr_tlb_err_analyze_sts0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS0r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._tlb_err_aggr_tlb_err_analyze_sts0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._tlb_err_aggr_tlb_err_analyze_sts0))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS0r BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS0r
#define TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS0r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS0r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS0r_t TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS0r_t;
#define TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS0r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS0r_CLR
#define TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS0r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS0r_SET
#define TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS0r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS0r_GET
#define TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS0r_TLB_ERR_ANALYZE_READDATA_LOf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS0r_TLB_ERR_ANALYZE_READDATA_LOf_GET
#define TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS0r_TLB_ERR_ANALYZE_READDATA_LOf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS0r_TLB_ERR_ANALYZE_READDATA_LOf_SET
#define TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS0r_TLB_ERR_ANALYZE_READBACK_AVAILABLEf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS0r_TLB_ERR_ANALYZE_READBACK_AVAILABLEf_GET
#define TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS0r_TLB_ERR_ANALYZE_READBACK_AVAILABLEf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS0r_TLB_ERR_ANALYZE_READBACK_AVAILABLEf_SET
#define READ_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS0r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS0r
#define WRITE_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS0r
#define MODIFY_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS0r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS0r
#define READLN_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS0r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS0r
#define WRITELN_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS0r
#define WRITEALL_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS0r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_TLB_ERR_AGGR_TLB_ERR_ANALYZE_STS0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  PLL_CTL0
 * BLOCKS:   AMS_PLL_COM_B
 * REGADDR:  0xd320
 * DEVAD:    1
 * DESC:     AMS PLL CONTROL_0
 * RESETVAL: 0x1800 (6144)
 * ACCESS:   R/W
 * FIELDS:
 *     RESERVED_AMS_1_COM_1 Reserved bitsmust not be written to. A read returns an unknown value
 *     AMS_PLL_TEST_VC  Test-port control bit, see AMS. AFE pll_ctrl 232:232  amsbus ctrl_out  10:10DFT_MUX
 *     RESERVED_AMS_1_COM_0 Reserved bitsmust not be written to. A read returns an unknown value
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CTL0r (0x0001d320 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CTL0r_SIZE 4

/*
 * This structure should be used to declare and program PLL_CTL0.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CTL0r_s {
	uint32_t v[1];
	uint32_t pll_ctl0[1];
	uint32_t _pll_ctl0;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CTL0r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CTL0r_CLR(r) (r).pll_ctl0[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CTL0r_SET(r,d) (r).pll_ctl0[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CTL0r_GET(r) (r).pll_ctl0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CTL0r_RESERVED_AMS_1_COM_0f_GET(r) ((((r).pll_ctl0[0]) >> 11) & 0x3)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CTL0r_RESERVED_AMS_1_COM_0f_SET(r,f) (r).pll_ctl0[0]=(((r).pll_ctl0[0] & ~((uint32_t)0x3 << 11)) | ((((uint32_t)f) & 0x3) << 11)) | (3 << (16 + 11))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CTL0r_AMS_PLL_TEST_VCf_GET(r) ((((r).pll_ctl0[0]) >> 10) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CTL0r_AMS_PLL_TEST_VCf_SET(r,f) (r).pll_ctl0[0]=(((r).pll_ctl0[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10)) | (1 << (16 + 10))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CTL0r_RESERVED_AMS_1_COM_1f_GET(r) (((r).pll_ctl0[0]) & 0x3ff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CTL0r_RESERVED_AMS_1_COM_1f_SET(r,f) (r).pll_ctl0[0]=(((r).pll_ctl0[0] & ~((uint32_t)0x3ff)) | (((uint32_t)f) & 0x3ff)) | (0x3ff << 16)

/*
 * These macros can be used to access PLL_CTL0.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_PLL_CTL0r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CTL0r,(_r._pll_ctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_PLL_CTL0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CTL0r,(_r._pll_ctl0)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_PLL_CTL0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CTL0r,(_r._pll_ctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_PLL_CTL0r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._pll_ctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_PLL_CTL0r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._pll_ctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_PLL_CTL0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._pll_ctl0))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define PLL_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CTL0r
#define PLL_CTL0r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CTL0r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CTL0r_t PLL_CTL0r_t;
#define PLL_CTL0r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CTL0r_CLR
#define PLL_CTL0r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CTL0r_SET
#define PLL_CTL0r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CTL0r_GET
#define PLL_CTL0r_RESERVED_AMS_1_COM_0f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CTL0r_RESERVED_AMS_1_COM_0f_GET
#define PLL_CTL0r_RESERVED_AMS_1_COM_0f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CTL0r_RESERVED_AMS_1_COM_0f_SET
#define PLL_CTL0r_AMS_PLL_TEST_VCf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CTL0r_AMS_PLL_TEST_VCf_GET
#define PLL_CTL0r_AMS_PLL_TEST_VCf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CTL0r_AMS_PLL_TEST_VCf_SET
#define PLL_CTL0r_RESERVED_AMS_1_COM_1f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CTL0r_RESERVED_AMS_1_COM_1f_GET
#define PLL_CTL0r_RESERVED_AMS_1_COM_1f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CTL0r_RESERVED_AMS_1_COM_1f_SET
#define READ_PLL_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_PLL_CTL0r
#define WRITE_PLL_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_PLL_CTL0r
#define MODIFY_PLL_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_PLL_CTL0r
#define READLN_PLL_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_PLL_CTL0r
#define WRITELN_PLL_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_PLL_CTL0r
#define WRITEALL_PLL_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_PLL_CTL0r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CTL0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  PLL_CTL1
 * BLOCKS:   AMS_PLL_COM_B
 * REGADDR:  0xd321
 * DEVAD:    1
 * DESC:     AMS PLL CONTROL_1
 * RESETVAL: 0x3840 (14400)
 * ACCESS:   R/W
 * FIELDS:
 *     RESERVED_AMS_1_COM_2 Reserved bitsmust not be written to. A read returns an unknown value
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CTL1r (0x0001d321 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CTL1r_SIZE 4

/*
 * This structure should be used to declare and program PLL_CTL1.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CTL1r_s {
	uint32_t v[1];
	uint32_t pll_ctl1[1];
	uint32_t _pll_ctl1;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CTL1r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CTL1r_CLR(r) (r).pll_ctl1[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CTL1r_SET(r,d) (r).pll_ctl1[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CTL1r_GET(r) (r).pll_ctl1[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CTL1r_RESERVED_AMS_1_COM_2f_GET(r) (((r).pll_ctl1[0]) & 0x7fff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CTL1r_RESERVED_AMS_1_COM_2f_SET(r,f) (r).pll_ctl1[0]=(((r).pll_ctl1[0] & ~((uint32_t)0x7fff)) | (((uint32_t)f) & 0x7fff)) | (0x7fff << 16)

/*
 * These macros can be used to access PLL_CTL1.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_PLL_CTL1r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CTL1r,(_r._pll_ctl1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_PLL_CTL1r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CTL1r,(_r._pll_ctl1)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_PLL_CTL1r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CTL1r,(_r._pll_ctl1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_PLL_CTL1r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CTL1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._pll_ctl1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_PLL_CTL1r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CTL1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._pll_ctl1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_PLL_CTL1r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CTL1r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._pll_ctl1))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define PLL_CTL1r BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CTL1r
#define PLL_CTL1r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CTL1r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CTL1r_t PLL_CTL1r_t;
#define PLL_CTL1r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CTL1r_CLR
#define PLL_CTL1r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CTL1r_SET
#define PLL_CTL1r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CTL1r_GET
#define PLL_CTL1r_RESERVED_AMS_1_COM_2f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CTL1r_RESERVED_AMS_1_COM_2f_GET
#define PLL_CTL1r_RESERVED_AMS_1_COM_2f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CTL1r_RESERVED_AMS_1_COM_2f_SET
#define READ_PLL_CTL1r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_PLL_CTL1r
#define WRITE_PLL_CTL1r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_PLL_CTL1r
#define MODIFY_PLL_CTL1r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_PLL_CTL1r
#define READLN_PLL_CTL1r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_PLL_CTL1r
#define WRITELN_PLL_CTL1r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_PLL_CTL1r
#define WRITEALL_PLL_CTL1r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_PLL_CTL1r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CTL1r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  PLL_CTL2
 * BLOCKS:   AMS_PLL_COM_B
 * REGADDR:  0xd322
 * DEVAD:    1
 * DESC:     AMS PLL CONTROL_2
 * RESETVAL: 0x2800 (10240)
 * ACCESS:   R/W
 * FIELDS:
 *     RESERVED_AMS_1_COM_3 Reserved bitsmust not be written to. A read returns an unknown value
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CTL2r (0x0001d322 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CTL2r_SIZE 4

/*
 * This structure should be used to declare and program PLL_CTL2.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CTL2r_s {
	uint32_t v[1];
	uint32_t pll_ctl2[1];
	uint32_t _pll_ctl2;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CTL2r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CTL2r_CLR(r) (r).pll_ctl2[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CTL2r_SET(r,d) (r).pll_ctl2[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CTL2r_GET(r) (r).pll_ctl2[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CTL2r_RESERVED_AMS_1_COM_3f_GET(r) (((r).pll_ctl2[0]) & 0x3fff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CTL2r_RESERVED_AMS_1_COM_3f_SET(r,f) (r).pll_ctl2[0]=(((r).pll_ctl2[0] & ~((uint32_t)0x3fff)) | (((uint32_t)f) & 0x3fff)) | (0x3fff << 16)

/*
 * These macros can be used to access PLL_CTL2.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_PLL_CTL2r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CTL2r,(_r._pll_ctl2))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_PLL_CTL2r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CTL2r,(_r._pll_ctl2)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_PLL_CTL2r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CTL2r,(_r._pll_ctl2))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_PLL_CTL2r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CTL2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._pll_ctl2))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_PLL_CTL2r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CTL2r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._pll_ctl2))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_PLL_CTL2r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CTL2r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._pll_ctl2))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define PLL_CTL2r BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CTL2r
#define PLL_CTL2r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CTL2r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CTL2r_t PLL_CTL2r_t;
#define PLL_CTL2r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CTL2r_CLR
#define PLL_CTL2r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CTL2r_SET
#define PLL_CTL2r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CTL2r_GET
#define PLL_CTL2r_RESERVED_AMS_1_COM_3f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CTL2r_RESERVED_AMS_1_COM_3f_GET
#define PLL_CTL2r_RESERVED_AMS_1_COM_3f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CTL2r_RESERVED_AMS_1_COM_3f_SET
#define READ_PLL_CTL2r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_PLL_CTL2r
#define WRITE_PLL_CTL2r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_PLL_CTL2r
#define MODIFY_PLL_CTL2r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_PLL_CTL2r
#define READLN_PLL_CTL2r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_PLL_CTL2r
#define WRITELN_PLL_CTL2r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_PLL_CTL2r
#define WRITEALL_PLL_CTL2r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_PLL_CTL2r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CTL2r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  PLL_CTL3
 * BLOCKS:   AMS_PLL_COM_B
 * REGADDR:  0xd323
 * DEVAD:    1
 * DESC:     AMS PLL CONTROL_3
 * RESETVAL: 0x82 (130)
 * ACCESS:   R/W
 * FIELDS:
 *     RESERVED_AMS_1_COM_4 Reserved bitsmust not be written to. A read returns an unknown value
 *     AMS_PLL_BIAS_EN  Enable the bias, including PLL internal bias, constant gm bias, and bias for RX reference ladder. Can be overwritten by i_test signal. see AMS. AFE pll_ctrl 271:271  amsbus ctrl_out  49:49DFT_MUX
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CTL3r (0x0001d323 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CTL3r_SIZE 4

/*
 * This structure should be used to declare and program PLL_CTL3.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CTL3r_s {
	uint32_t v[1];
	uint32_t pll_ctl3[1];
	uint32_t _pll_ctl3;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CTL3r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CTL3r_CLR(r) (r).pll_ctl3[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CTL3r_SET(r,d) (r).pll_ctl3[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CTL3r_GET(r) (r).pll_ctl3[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CTL3r_AMS_PLL_BIAS_ENf_GET(r) ((((r).pll_ctl3[0]) >> 7) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CTL3r_AMS_PLL_BIAS_ENf_SET(r,f) (r).pll_ctl3[0]=(((r).pll_ctl3[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CTL3r_RESERVED_AMS_1_COM_4f_GET(r) (((r).pll_ctl3[0]) & 0x7f)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CTL3r_RESERVED_AMS_1_COM_4f_SET(r,f) (r).pll_ctl3[0]=(((r).pll_ctl3[0] & ~((uint32_t)0x7f)) | (((uint32_t)f) & 0x7f)) | (0x7f << 16)

/*
 * These macros can be used to access PLL_CTL3.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_PLL_CTL3r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CTL3r,(_r._pll_ctl3))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_PLL_CTL3r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CTL3r,(_r._pll_ctl3)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_PLL_CTL3r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CTL3r,(_r._pll_ctl3))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_PLL_CTL3r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CTL3r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._pll_ctl3))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_PLL_CTL3r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CTL3r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._pll_ctl3))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_PLL_CTL3r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CTL3r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._pll_ctl3))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define PLL_CTL3r BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CTL3r
#define PLL_CTL3r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CTL3r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CTL3r_t PLL_CTL3r_t;
#define PLL_CTL3r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CTL3r_CLR
#define PLL_CTL3r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CTL3r_SET
#define PLL_CTL3r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CTL3r_GET
#define PLL_CTL3r_AMS_PLL_BIAS_ENf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CTL3r_AMS_PLL_BIAS_ENf_GET
#define PLL_CTL3r_AMS_PLL_BIAS_ENf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CTL3r_AMS_PLL_BIAS_ENf_SET
#define PLL_CTL3r_RESERVED_AMS_1_COM_4f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CTL3r_RESERVED_AMS_1_COM_4f_GET
#define PLL_CTL3r_RESERVED_AMS_1_COM_4f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CTL3r_RESERVED_AMS_1_COM_4f_SET
#define READ_PLL_CTL3r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_PLL_CTL3r
#define WRITE_PLL_CTL3r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_PLL_CTL3r
#define MODIFY_PLL_CTL3r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_PLL_CTL3r
#define READLN_PLL_CTL3r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_PLL_CTL3r
#define WRITELN_PLL_CTL3r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_PLL_CTL3r
#define WRITEALL_PLL_CTL3r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_PLL_CTL3r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_CTL3r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  PLL_INTCTL
 * BLOCKS:   AMS_PLL_COM_B
 * REGADDR:  0xd324
 * DEVAD:    1
 * DESC:     INTERNAL PLL CONTROL
 * RESETVAL: 0x4 (4)
 * ACCESS:   R/W
 * FIELDS:
 *     AMS_PLL_RTERM_SEL when 0, sel rterm input pins, when 1 sel pll AMS ctrl
 *     AMS_PLL_DIV4_2_SEL when 0, sel div4/2 input pin, when 1 sel pll AMS ctrl
 *     AMS_PLL_PWRDN    when 1, power down pll
 *     AMS_PLL_EN_EXT_CML_CMOS_SEL when 0, sel en_ext input pin, when 1, sel pll AMS ctrl
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_INTCTLr (0x0001d324 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_INTCTLr_SIZE 4

/*
 * This structure should be used to declare and program PLL_INTCTL.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_INTCTLr_s {
	uint32_t v[1];
	uint32_t pll_intctl[1];
	uint32_t _pll_intctl;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_INTCTLr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_INTCTLr_CLR(r) (r).pll_intctl[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_INTCTLr_SET(r,d) (r).pll_intctl[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_INTCTLr_GET(r) (r).pll_intctl[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_INTCTLr_AMS_PLL_EN_EXT_CML_CMOS_SELf_GET(r) ((((r).pll_intctl[0]) >> 3) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_INTCTLr_AMS_PLL_EN_EXT_CML_CMOS_SELf_SET(r,f) (r).pll_intctl[0]=(((r).pll_intctl[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_INTCTLr_AMS_PLL_PWRDNf_GET(r) ((((r).pll_intctl[0]) >> 2) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_INTCTLr_AMS_PLL_PWRDNf_SET(r,f) (r).pll_intctl[0]=(((r).pll_intctl[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_INTCTLr_AMS_PLL_DIV4_2_SELf_GET(r) ((((r).pll_intctl[0]) >> 1) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_INTCTLr_AMS_PLL_DIV4_2_SELf_SET(r,f) (r).pll_intctl[0]=(((r).pll_intctl[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1)) | (1 << (16 + 1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_INTCTLr_AMS_PLL_RTERM_SELf_GET(r) (((r).pll_intctl[0]) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_INTCTLr_AMS_PLL_RTERM_SELf_SET(r,f) (r).pll_intctl[0]=(((r).pll_intctl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access PLL_INTCTL.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_PLL_INTCTLr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_INTCTLr,(_r._pll_intctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_PLL_INTCTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_INTCTLr,(_r._pll_intctl)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_PLL_INTCTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_INTCTLr,(_r._pll_intctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_PLL_INTCTLr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_INTCTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._pll_intctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_PLL_INTCTLr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_INTCTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._pll_intctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_PLL_INTCTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_INTCTLr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._pll_intctl))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define PLL_INTCTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_INTCTLr
#define PLL_INTCTLr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_INTCTLr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_INTCTLr_t PLL_INTCTLr_t;
#define PLL_INTCTLr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_INTCTLr_CLR
#define PLL_INTCTLr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_INTCTLr_SET
#define PLL_INTCTLr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_INTCTLr_GET
#define PLL_INTCTLr_AMS_PLL_EN_EXT_CML_CMOS_SELf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_INTCTLr_AMS_PLL_EN_EXT_CML_CMOS_SELf_GET
#define PLL_INTCTLr_AMS_PLL_EN_EXT_CML_CMOS_SELf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_INTCTLr_AMS_PLL_EN_EXT_CML_CMOS_SELf_SET
#define PLL_INTCTLr_AMS_PLL_PWRDNf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_INTCTLr_AMS_PLL_PWRDNf_GET
#define PLL_INTCTLr_AMS_PLL_PWRDNf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_INTCTLr_AMS_PLL_PWRDNf_SET
#define PLL_INTCTLr_AMS_PLL_DIV4_2_SELf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_INTCTLr_AMS_PLL_DIV4_2_SELf_GET
#define PLL_INTCTLr_AMS_PLL_DIV4_2_SELf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_INTCTLr_AMS_PLL_DIV4_2_SELf_SET
#define PLL_INTCTLr_AMS_PLL_RTERM_SELf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_INTCTLr_AMS_PLL_RTERM_SELf_GET
#define PLL_INTCTLr_AMS_PLL_RTERM_SELf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_INTCTLr_AMS_PLL_RTERM_SELf_SET
#define READ_PLL_INTCTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_PLL_INTCTLr
#define WRITE_PLL_INTCTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_PLL_INTCTLr
#define MODIFY_PLL_INTCTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_PLL_INTCTLr
#define READLN_PLL_INTCTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_PLL_INTCTLr
#define WRITELN_PLL_INTCTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_PLL_INTCTLr
#define WRITEALL_PLL_INTCTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_PLL_INTCTLr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_PLL_INTCTLr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  DSC_RX_DFE_TAP2_H_CTL0
 * BLOCKS:   DSC_G
 * REGADDR:  0xd410
 * DEVAD:    1
 * DESC:     rx_dfe_tap2_h_ctrl0 register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RXB_DFE_TAP2_H_VAL signed 2's complement  +/-15, 1LSB=150mV/128
 *     RXB_DFE_TAP2_H_WRITE write strobe for writing to rxb_dfe_tap2_h
 *     RXA_DFE_TAP2_H_VAL signed 2's complement +/-15, 1LSB=150mV/128
 *     RXA_DFE_TAP2_H_WRITE write strobe for writing to rxa_dfe_tap2_h
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_H_CTL0r (0x0001d410 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_H_CTL0r_SIZE 4

/*
 * This structure should be used to declare and program DSC_RX_DFE_TAP2_H_CTL0.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_H_CTL0r_s {
	uint32_t v[1];
	uint32_t dsc_rx_dfe_tap2_h_ctl0[1];
	uint32_t _dsc_rx_dfe_tap2_h_ctl0;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_H_CTL0r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_H_CTL0r_CLR(r) (r).dsc_rx_dfe_tap2_h_ctl0[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_H_CTL0r_SET(r,d) (r).dsc_rx_dfe_tap2_h_ctl0[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_H_CTL0r_GET(r) (r).dsc_rx_dfe_tap2_h_ctl0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_H_CTL0r_RXA_DFE_TAP2_H_WRITEf_GET(r) ((((r).dsc_rx_dfe_tap2_h_ctl0[0]) >> 15) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_H_CTL0r_RXA_DFE_TAP2_H_WRITEf_SET(r,f) (r).dsc_rx_dfe_tap2_h_ctl0[0]=(((r).dsc_rx_dfe_tap2_h_ctl0[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_H_CTL0r_RXA_DFE_TAP2_H_VALf_GET(r) ((((r).dsc_rx_dfe_tap2_h_ctl0[0]) >> 8) & 0x3f)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_H_CTL0r_RXA_DFE_TAP2_H_VALf_SET(r,f) (r).dsc_rx_dfe_tap2_h_ctl0[0]=(((r).dsc_rx_dfe_tap2_h_ctl0[0] & ~((uint32_t)0x3f << 8)) | ((((uint32_t)f) & 0x3f) << 8)) | (63 << (16 + 8))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_H_CTL0r_RXB_DFE_TAP2_H_WRITEf_GET(r) ((((r).dsc_rx_dfe_tap2_h_ctl0[0]) >> 7) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_H_CTL0r_RXB_DFE_TAP2_H_WRITEf_SET(r,f) (r).dsc_rx_dfe_tap2_h_ctl0[0]=(((r).dsc_rx_dfe_tap2_h_ctl0[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7)) | (1 << (16 + 7))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_H_CTL0r_RXB_DFE_TAP2_H_VALf_GET(r) (((r).dsc_rx_dfe_tap2_h_ctl0[0]) & 0x3f)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_H_CTL0r_RXB_DFE_TAP2_H_VALf_SET(r,f) (r).dsc_rx_dfe_tap2_h_ctl0[0]=(((r).dsc_rx_dfe_tap2_h_ctl0[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f)) | (0x3f << 16)

/*
 * These macros can be used to access DSC_RX_DFE_TAP2_H_CTL0.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DSC_RX_DFE_TAP2_H_CTL0r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_H_CTL0r,(_r._dsc_rx_dfe_tap2_h_ctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DSC_RX_DFE_TAP2_H_CTL0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_H_CTL0r,(_r._dsc_rx_dfe_tap2_h_ctl0)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DSC_RX_DFE_TAP2_H_CTL0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_H_CTL0r,(_r._dsc_rx_dfe_tap2_h_ctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DSC_RX_DFE_TAP2_H_CTL0r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_H_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_dfe_tap2_h_ctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DSC_RX_DFE_TAP2_H_CTL0r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_H_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_dfe_tap2_h_ctl0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DSC_RX_DFE_TAP2_H_CTL0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_H_CTL0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_rx_dfe_tap2_h_ctl0))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_RX_DFE_TAP2_H_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_H_CTL0r
#define DSC_RX_DFE_TAP2_H_CTL0r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_H_CTL0r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_H_CTL0r_t DSC_RX_DFE_TAP2_H_CTL0r_t;
#define DSC_RX_DFE_TAP2_H_CTL0r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_H_CTL0r_CLR
#define DSC_RX_DFE_TAP2_H_CTL0r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_H_CTL0r_SET
#define DSC_RX_DFE_TAP2_H_CTL0r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_H_CTL0r_GET
#define DSC_RX_DFE_TAP2_H_CTL0r_RXA_DFE_TAP2_H_WRITEf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_H_CTL0r_RXA_DFE_TAP2_H_WRITEf_GET
#define DSC_RX_DFE_TAP2_H_CTL0r_RXA_DFE_TAP2_H_WRITEf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_H_CTL0r_RXA_DFE_TAP2_H_WRITEf_SET
#define DSC_RX_DFE_TAP2_H_CTL0r_RXA_DFE_TAP2_H_VALf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_H_CTL0r_RXA_DFE_TAP2_H_VALf_GET
#define DSC_RX_DFE_TAP2_H_CTL0r_RXA_DFE_TAP2_H_VALf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_H_CTL0r_RXA_DFE_TAP2_H_VALf_SET
#define DSC_RX_DFE_TAP2_H_CTL0r_RXB_DFE_TAP2_H_WRITEf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_H_CTL0r_RXB_DFE_TAP2_H_WRITEf_GET
#define DSC_RX_DFE_TAP2_H_CTL0r_RXB_DFE_TAP2_H_WRITEf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_H_CTL0r_RXB_DFE_TAP2_H_WRITEf_SET
#define DSC_RX_DFE_TAP2_H_CTL0r_RXB_DFE_TAP2_H_VALf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_H_CTL0r_RXB_DFE_TAP2_H_VALf_GET
#define DSC_RX_DFE_TAP2_H_CTL0r_RXB_DFE_TAP2_H_VALf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_H_CTL0r_RXB_DFE_TAP2_H_VALf_SET
#define READ_DSC_RX_DFE_TAP2_H_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DSC_RX_DFE_TAP2_H_CTL0r
#define WRITE_DSC_RX_DFE_TAP2_H_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DSC_RX_DFE_TAP2_H_CTL0r
#define MODIFY_DSC_RX_DFE_TAP2_H_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DSC_RX_DFE_TAP2_H_CTL0r
#define READLN_DSC_RX_DFE_TAP2_H_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DSC_RX_DFE_TAP2_H_CTL0r
#define WRITELN_DSC_RX_DFE_TAP2_H_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DSC_RX_DFE_TAP2_H_CTL0r
#define WRITEALL_DSC_RX_DFE_TAP2_H_CTL0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DSC_RX_DFE_TAP2_H_CTL0r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_H_CTL0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  DSC_RX_DFE_TAP2_CTL
 * BLOCKS:   DSC_G
 * REGADDR:  0xd414
 * DEVAD:    1
 * DESC:     rx_dfe_tap2_ctrl register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RXB_DFE_TAP2_VAL signed 2's complement  +/-15, 1LSB=150mV/64
 *     RXA_DFE_TAP2_VAL signed 2's complement +/-15, 1LSB=150mV/64
 *     RXA_DFE_TAP2_WRITE write strobe for writing to rxa_dfe_tap2; need to set rx_afe_override_sel to 6
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_CTLr (0x0001d414 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_CTLr_SIZE 4

/*
 * This structure should be used to declare and program DSC_RX_DFE_TAP2_CTL.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_CTLr_s {
	uint32_t v[1];
	uint32_t dsc_rx_dfe_tap2_ctl[1];
	uint32_t _dsc_rx_dfe_tap2_ctl;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_CTLr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_CTLr_CLR(r) (r).dsc_rx_dfe_tap2_ctl[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_CTLr_SET(r,d) (r).dsc_rx_dfe_tap2_ctl[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_CTLr_GET(r) (r).dsc_rx_dfe_tap2_ctl[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_CTLr_RXA_DFE_TAP2_WRITEf_GET(r) ((((r).dsc_rx_dfe_tap2_ctl[0]) >> 15) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_CTLr_RXA_DFE_TAP2_WRITEf_SET(r,f) (r).dsc_rx_dfe_tap2_ctl[0]=(((r).dsc_rx_dfe_tap2_ctl[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_CTLr_RXA_DFE_TAP2_VALf_GET(r) ((((r).dsc_rx_dfe_tap2_ctl[0]) >> 9) & 0x3f)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_CTLr_RXA_DFE_TAP2_VALf_SET(r,f) (r).dsc_rx_dfe_tap2_ctl[0]=(((r).dsc_rx_dfe_tap2_ctl[0] & ~((uint32_t)0x3f << 9)) | ((((uint32_t)f) & 0x3f) << 9)) | (63 << (16 + 9))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_CTLr_RXB_DFE_TAP2_VALf_GET(r) ((((r).dsc_rx_dfe_tap2_ctl[0]) >> 3) & 0x3f)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_CTLr_RXB_DFE_TAP2_VALf_SET(r,f) (r).dsc_rx_dfe_tap2_ctl[0]=(((r).dsc_rx_dfe_tap2_ctl[0] & ~((uint32_t)0x3f << 3)) | ((((uint32_t)f) & 0x3f) << 3)) | (63 << (16 + 3))

/*
 * These macros can be used to access DSC_RX_DFE_TAP2_CTL.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DSC_RX_DFE_TAP2_CTLr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_CTLr,(_r._dsc_rx_dfe_tap2_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DSC_RX_DFE_TAP2_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_CTLr,(_r._dsc_rx_dfe_tap2_ctl)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DSC_RX_DFE_TAP2_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_CTLr,(_r._dsc_rx_dfe_tap2_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DSC_RX_DFE_TAP2_CTLr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_dfe_tap2_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DSC_RX_DFE_TAP2_CTLr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_dfe_tap2_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DSC_RX_DFE_TAP2_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_CTLr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_rx_dfe_tap2_ctl))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_RX_DFE_TAP2_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_CTLr
#define DSC_RX_DFE_TAP2_CTLr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_CTLr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_CTLr_t DSC_RX_DFE_TAP2_CTLr_t;
#define DSC_RX_DFE_TAP2_CTLr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_CTLr_CLR
#define DSC_RX_DFE_TAP2_CTLr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_CTLr_SET
#define DSC_RX_DFE_TAP2_CTLr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_CTLr_GET
#define DSC_RX_DFE_TAP2_CTLr_RXA_DFE_TAP2_WRITEf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_CTLr_RXA_DFE_TAP2_WRITEf_GET
#define DSC_RX_DFE_TAP2_CTLr_RXA_DFE_TAP2_WRITEf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_CTLr_RXA_DFE_TAP2_WRITEf_SET
#define DSC_RX_DFE_TAP2_CTLr_RXA_DFE_TAP2_VALf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_CTLr_RXA_DFE_TAP2_VALf_GET
#define DSC_RX_DFE_TAP2_CTLr_RXA_DFE_TAP2_VALf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_CTLr_RXA_DFE_TAP2_VALf_SET
#define DSC_RX_DFE_TAP2_CTLr_RXB_DFE_TAP2_VALf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_CTLr_RXB_DFE_TAP2_VALf_GET
#define DSC_RX_DFE_TAP2_CTLr_RXB_DFE_TAP2_VALf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_CTLr_RXB_DFE_TAP2_VALf_SET
#define READ_DSC_RX_DFE_TAP2_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DSC_RX_DFE_TAP2_CTLr
#define WRITE_DSC_RX_DFE_TAP2_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DSC_RX_DFE_TAP2_CTLr
#define MODIFY_DSC_RX_DFE_TAP2_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DSC_RX_DFE_TAP2_CTLr
#define READLN_DSC_RX_DFE_TAP2_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DSC_RX_DFE_TAP2_CTLr
#define WRITELN_DSC_RX_DFE_TAP2_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DSC_RX_DFE_TAP2_CTLr
#define WRITEALL_DSC_RX_DFE_TAP2_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DSC_RX_DFE_TAP2_CTLr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_CTLr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  DSC_RX_DFE_TAP2_3_CTL
 * BLOCKS:   DSC_G
 * REGADDR:  0xd415
 * DEVAD:    1
 * DESC:     rx_dfe_tap2_3_ctrl register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RXB_DFE_TAP3_VAL signed 2's complement +/-15, 1LSB=150mV/64
 *     RXA_DFE_TAP3_VAL signed 2's complement +/-15, 1LSB=150mV/64
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_3_CTLr (0x0001d415 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_3_CTLr_SIZE 4

/*
 * This structure should be used to declare and program DSC_RX_DFE_TAP2_3_CTL.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_3_CTLr_s {
	uint32_t v[1];
	uint32_t dsc_rx_dfe_tap2_3_ctl[1];
	uint32_t _dsc_rx_dfe_tap2_3_ctl;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_3_CTLr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_3_CTLr_CLR(r) (r).dsc_rx_dfe_tap2_3_ctl[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_3_CTLr_SET(r,d) (r).dsc_rx_dfe_tap2_3_ctl[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_3_CTLr_GET(r) (r).dsc_rx_dfe_tap2_3_ctl[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_3_CTLr_RXA_DFE_TAP3_VALf_GET(r) ((((r).dsc_rx_dfe_tap2_3_ctl[0]) >> 5) & 0x1f)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_3_CTLr_RXA_DFE_TAP3_VALf_SET(r,f) (r).dsc_rx_dfe_tap2_3_ctl[0]=(((r).dsc_rx_dfe_tap2_3_ctl[0] & ~((uint32_t)0x1f << 5)) | ((((uint32_t)f) & 0x1f) << 5)) | (31 << (16 + 5))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_3_CTLr_RXB_DFE_TAP3_VALf_GET(r) (((r).dsc_rx_dfe_tap2_3_ctl[0]) & 0x1f)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_3_CTLr_RXB_DFE_TAP3_VALf_SET(r,f) (r).dsc_rx_dfe_tap2_3_ctl[0]=(((r).dsc_rx_dfe_tap2_3_ctl[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f)) | (0x1f << 16)

/*
 * These macros can be used to access DSC_RX_DFE_TAP2_3_CTL.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DSC_RX_DFE_TAP2_3_CTLr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_3_CTLr,(_r._dsc_rx_dfe_tap2_3_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DSC_RX_DFE_TAP2_3_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_3_CTLr,(_r._dsc_rx_dfe_tap2_3_ctl)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DSC_RX_DFE_TAP2_3_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_3_CTLr,(_r._dsc_rx_dfe_tap2_3_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DSC_RX_DFE_TAP2_3_CTLr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_3_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_dfe_tap2_3_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DSC_RX_DFE_TAP2_3_CTLr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_3_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_dfe_tap2_3_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DSC_RX_DFE_TAP2_3_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_3_CTLr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_rx_dfe_tap2_3_ctl))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_RX_DFE_TAP2_3_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_3_CTLr
#define DSC_RX_DFE_TAP2_3_CTLr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_3_CTLr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_3_CTLr_t DSC_RX_DFE_TAP2_3_CTLr_t;
#define DSC_RX_DFE_TAP2_3_CTLr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_3_CTLr_CLR
#define DSC_RX_DFE_TAP2_3_CTLr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_3_CTLr_SET
#define DSC_RX_DFE_TAP2_3_CTLr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_3_CTLr_GET
#define DSC_RX_DFE_TAP2_3_CTLr_RXA_DFE_TAP3_VALf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_3_CTLr_RXA_DFE_TAP3_VALf_GET
#define DSC_RX_DFE_TAP2_3_CTLr_RXA_DFE_TAP3_VALf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_3_CTLr_RXA_DFE_TAP3_VALf_SET
#define DSC_RX_DFE_TAP2_3_CTLr_RXB_DFE_TAP3_VALf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_3_CTLr_RXB_DFE_TAP3_VALf_GET
#define DSC_RX_DFE_TAP2_3_CTLr_RXB_DFE_TAP3_VALf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_3_CTLr_RXB_DFE_TAP3_VALf_SET
#define READ_DSC_RX_DFE_TAP2_3_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DSC_RX_DFE_TAP2_3_CTLr
#define WRITE_DSC_RX_DFE_TAP2_3_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DSC_RX_DFE_TAP2_3_CTLr
#define MODIFY_DSC_RX_DFE_TAP2_3_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DSC_RX_DFE_TAP2_3_CTLr
#define READLN_DSC_RX_DFE_TAP2_3_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DSC_RX_DFE_TAP2_3_CTLr
#define WRITELN_DSC_RX_DFE_TAP2_3_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DSC_RX_DFE_TAP2_3_CTLr
#define WRITEALL_DSC_RX_DFE_TAP2_3_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DSC_RX_DFE_TAP2_3_CTLr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP2_3_CTLr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  DSC_RX_DFE_TAP3_CTL
 * BLOCKS:   DSC_G
 * REGADDR:  0xd416
 * DEVAD:    1
 * DESC:     rx_dfe_tap3_ctrl register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RXB_DFE_TAP3_WRITE write strobe for writing to rxb_dfe_tap3; need to set rx_afe_override_sel to 6
 *     RXA_DFE_TAP3_WRITE write strobe for writing to rxa_dfe_tap3; need to set rx_afe_override_sel to 6
 *     RXB_DFE_TAP2_WRITE write strobe for writing to rxb_dfe_tap2; need to set rx_afe_override_sel to 6
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP3_CTLr (0x0001d416 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP3_CTLr_SIZE 4

/*
 * This structure should be used to declare and program DSC_RX_DFE_TAP3_CTL.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP3_CTLr_s {
	uint32_t v[1];
	uint32_t dsc_rx_dfe_tap3_ctl[1];
	uint32_t _dsc_rx_dfe_tap3_ctl;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP3_CTLr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP3_CTLr_CLR(r) (r).dsc_rx_dfe_tap3_ctl[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP3_CTLr_SET(r,d) (r).dsc_rx_dfe_tap3_ctl[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP3_CTLr_GET(r) (r).dsc_rx_dfe_tap3_ctl[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP3_CTLr_RXB_DFE_TAP2_WRITEf_GET(r) ((((r).dsc_rx_dfe_tap3_ctl[0]) >> 15) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP3_CTLr_RXB_DFE_TAP2_WRITEf_SET(r,f) (r).dsc_rx_dfe_tap3_ctl[0]=(((r).dsc_rx_dfe_tap3_ctl[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP3_CTLr_RXA_DFE_TAP3_WRITEf_GET(r) ((((r).dsc_rx_dfe_tap3_ctl[0]) >> 13) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP3_CTLr_RXA_DFE_TAP3_WRITEf_SET(r,f) (r).dsc_rx_dfe_tap3_ctl[0]=(((r).dsc_rx_dfe_tap3_ctl[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13)) | (1 << (16 + 13))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP3_CTLr_RXB_DFE_TAP3_WRITEf_GET(r) ((((r).dsc_rx_dfe_tap3_ctl[0]) >> 12) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP3_CTLr_RXB_DFE_TAP3_WRITEf_SET(r,f) (r).dsc_rx_dfe_tap3_ctl[0]=(((r).dsc_rx_dfe_tap3_ctl[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12)) | (1 << (16 + 12))

/*
 * These macros can be used to access DSC_RX_DFE_TAP3_CTL.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DSC_RX_DFE_TAP3_CTLr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP3_CTLr,(_r._dsc_rx_dfe_tap3_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DSC_RX_DFE_TAP3_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP3_CTLr,(_r._dsc_rx_dfe_tap3_ctl)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DSC_RX_DFE_TAP3_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP3_CTLr,(_r._dsc_rx_dfe_tap3_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DSC_RX_DFE_TAP3_CTLr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP3_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_dfe_tap3_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DSC_RX_DFE_TAP3_CTLr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP3_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_dfe_tap3_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DSC_RX_DFE_TAP3_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP3_CTLr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_rx_dfe_tap3_ctl))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_RX_DFE_TAP3_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP3_CTLr
#define DSC_RX_DFE_TAP3_CTLr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP3_CTLr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP3_CTLr_t DSC_RX_DFE_TAP3_CTLr_t;
#define DSC_RX_DFE_TAP3_CTLr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP3_CTLr_CLR
#define DSC_RX_DFE_TAP3_CTLr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP3_CTLr_SET
#define DSC_RX_DFE_TAP3_CTLr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP3_CTLr_GET
#define DSC_RX_DFE_TAP3_CTLr_RXB_DFE_TAP2_WRITEf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP3_CTLr_RXB_DFE_TAP2_WRITEf_GET
#define DSC_RX_DFE_TAP3_CTLr_RXB_DFE_TAP2_WRITEf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP3_CTLr_RXB_DFE_TAP2_WRITEf_SET
#define DSC_RX_DFE_TAP3_CTLr_RXA_DFE_TAP3_WRITEf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP3_CTLr_RXA_DFE_TAP3_WRITEf_GET
#define DSC_RX_DFE_TAP3_CTLr_RXA_DFE_TAP3_WRITEf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP3_CTLr_RXA_DFE_TAP3_WRITEf_SET
#define DSC_RX_DFE_TAP3_CTLr_RXB_DFE_TAP3_WRITEf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP3_CTLr_RXB_DFE_TAP3_WRITEf_GET
#define DSC_RX_DFE_TAP3_CTLr_RXB_DFE_TAP3_WRITEf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP3_CTLr_RXB_DFE_TAP3_WRITEf_SET
#define READ_DSC_RX_DFE_TAP3_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DSC_RX_DFE_TAP3_CTLr
#define WRITE_DSC_RX_DFE_TAP3_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DSC_RX_DFE_TAP3_CTLr
#define MODIFY_DSC_RX_DFE_TAP3_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DSC_RX_DFE_TAP3_CTLr
#define READLN_DSC_RX_DFE_TAP3_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DSC_RX_DFE_TAP3_CTLr
#define WRITELN_DSC_RX_DFE_TAP3_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DSC_RX_DFE_TAP3_CTLr
#define WRITEALL_DSC_RX_DFE_TAP3_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DSC_RX_DFE_TAP3_CTLr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP3_CTLr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  DSC_RX_PF_CTL_DC_OFFS_AND_VGA
 * BLOCKS:   DSC_H
 * REGADDR:  0xd42e
 * DEVAD:    1
 * DESC:     rx_pf_ctrl_dc_offset_and_vga register.
 * RESETVAL: 0x27 (39)
 * ACCESS:   R/W
 * FIELDS:
 *     RX_VGA_VAL       this is the value of vga that sets the final vga value
 *     RX_PF2_CTRL_VAL  DC cut (Low PF),  This value is written to the final value after t2+1 cycles that is set by the ana_t2_timer
 *     RX_PF_CTRL_VAL   Main Peaking Filter This value is written to the final value after t2+1 cycles that is set by the ana_t2_timer
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PF_CTL_DC_OFFS_AND_VGAr (0x0001d42e | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PF_CTL_DC_OFFS_AND_VGAr_SIZE 4

/*
 * This structure should be used to declare and program DSC_RX_PF_CTL_DC_OFFS_AND_VGA.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PF_CTL_DC_OFFS_AND_VGAr_s {
	uint32_t v[1];
	uint32_t dsc_rx_pf_ctl_dc_offs_and_vga[1];
	uint32_t _dsc_rx_pf_ctl_dc_offs_and_vga;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PF_CTL_DC_OFFS_AND_VGAr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PF_CTL_DC_OFFS_AND_VGAr_CLR(r) (r).dsc_rx_pf_ctl_dc_offs_and_vga[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PF_CTL_DC_OFFS_AND_VGAr_SET(r,d) (r).dsc_rx_pf_ctl_dc_offs_and_vga[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PF_CTL_DC_OFFS_AND_VGAr_GET(r) (r).dsc_rx_pf_ctl_dc_offs_and_vga[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PF_CTL_DC_OFFS_AND_VGAr_RX_PF_CTRL_VALf_GET(r) ((((r).dsc_rx_pf_ctl_dc_offs_and_vga[0]) >> 10) & 0x1f)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PF_CTL_DC_OFFS_AND_VGAr_RX_PF_CTRL_VALf_SET(r,f) (r).dsc_rx_pf_ctl_dc_offs_and_vga[0]=(((r).dsc_rx_pf_ctl_dc_offs_and_vga[0] & ~((uint32_t)0x1f << 10)) | ((((uint32_t)f) & 0x1f) << 10)) | (31 << (16 + 10))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PF_CTL_DC_OFFS_AND_VGAr_RX_PF2_CTRL_VALf_GET(r) ((((r).dsc_rx_pf_ctl_dc_offs_and_vga[0]) >> 7) & 0x7)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PF_CTL_DC_OFFS_AND_VGAr_RX_PF2_CTRL_VALf_SET(r,f) (r).dsc_rx_pf_ctl_dc_offs_and_vga[0]=(((r).dsc_rx_pf_ctl_dc_offs_and_vga[0] & ~((uint32_t)0x7 << 7)) | ((((uint32_t)f) & 0x7) << 7)) | (7 << (16 + 7))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PF_CTL_DC_OFFS_AND_VGAr_RX_VGA_VALf_GET(r) (((r).dsc_rx_pf_ctl_dc_offs_and_vga[0]) & 0x7f)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PF_CTL_DC_OFFS_AND_VGAr_RX_VGA_VALf_SET(r,f) (r).dsc_rx_pf_ctl_dc_offs_and_vga[0]=(((r).dsc_rx_pf_ctl_dc_offs_and_vga[0] & ~((uint32_t)0x7f)) | (((uint32_t)f) & 0x7f)) | (0x7f << 16)

/*
 * These macros can be used to access DSC_RX_PF_CTL_DC_OFFS_AND_VGA.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DSC_RX_PF_CTL_DC_OFFS_AND_VGAr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PF_CTL_DC_OFFS_AND_VGAr,(_r._dsc_rx_pf_ctl_dc_offs_and_vga))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DSC_RX_PF_CTL_DC_OFFS_AND_VGAr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PF_CTL_DC_OFFS_AND_VGAr,(_r._dsc_rx_pf_ctl_dc_offs_and_vga)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DSC_RX_PF_CTL_DC_OFFS_AND_VGAr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PF_CTL_DC_OFFS_AND_VGAr,(_r._dsc_rx_pf_ctl_dc_offs_and_vga))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DSC_RX_PF_CTL_DC_OFFS_AND_VGAr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PF_CTL_DC_OFFS_AND_VGAr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_pf_ctl_dc_offs_and_vga))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DSC_RX_PF_CTL_DC_OFFS_AND_VGAr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PF_CTL_DC_OFFS_AND_VGAr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_pf_ctl_dc_offs_and_vga))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DSC_RX_PF_CTL_DC_OFFS_AND_VGAr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PF_CTL_DC_OFFS_AND_VGAr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_rx_pf_ctl_dc_offs_and_vga))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_RX_PF_CTL_DC_OFFS_AND_VGAr BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PF_CTL_DC_OFFS_AND_VGAr
#define DSC_RX_PF_CTL_DC_OFFS_AND_VGAr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PF_CTL_DC_OFFS_AND_VGAr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PF_CTL_DC_OFFS_AND_VGAr_t DSC_RX_PF_CTL_DC_OFFS_AND_VGAr_t;
#define DSC_RX_PF_CTL_DC_OFFS_AND_VGAr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PF_CTL_DC_OFFS_AND_VGAr_CLR
#define DSC_RX_PF_CTL_DC_OFFS_AND_VGAr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PF_CTL_DC_OFFS_AND_VGAr_SET
#define DSC_RX_PF_CTL_DC_OFFS_AND_VGAr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PF_CTL_DC_OFFS_AND_VGAr_GET
#define DSC_RX_PF_CTL_DC_OFFS_AND_VGAr_RX_PF_CTRL_VALf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PF_CTL_DC_OFFS_AND_VGAr_RX_PF_CTRL_VALf_GET
#define DSC_RX_PF_CTL_DC_OFFS_AND_VGAr_RX_PF_CTRL_VALf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PF_CTL_DC_OFFS_AND_VGAr_RX_PF_CTRL_VALf_SET
#define DSC_RX_PF_CTL_DC_OFFS_AND_VGAr_RX_PF2_CTRL_VALf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PF_CTL_DC_OFFS_AND_VGAr_RX_PF2_CTRL_VALf_GET
#define DSC_RX_PF_CTL_DC_OFFS_AND_VGAr_RX_PF2_CTRL_VALf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PF_CTL_DC_OFFS_AND_VGAr_RX_PF2_CTRL_VALf_SET
#define DSC_RX_PF_CTL_DC_OFFS_AND_VGAr_RX_VGA_VALf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PF_CTL_DC_OFFS_AND_VGAr_RX_VGA_VALf_GET
#define DSC_RX_PF_CTL_DC_OFFS_AND_VGAr_RX_VGA_VALf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PF_CTL_DC_OFFS_AND_VGAr_RX_VGA_VALf_SET
#define READ_DSC_RX_PF_CTL_DC_OFFS_AND_VGAr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DSC_RX_PF_CTL_DC_OFFS_AND_VGAr
#define WRITE_DSC_RX_PF_CTL_DC_OFFS_AND_VGAr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DSC_RX_PF_CTL_DC_OFFS_AND_VGAr
#define MODIFY_DSC_RX_PF_CTL_DC_OFFS_AND_VGAr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DSC_RX_PF_CTL_DC_OFFS_AND_VGAr
#define READLN_DSC_RX_PF_CTL_DC_OFFS_AND_VGAr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DSC_RX_PF_CTL_DC_OFFS_AND_VGAr
#define WRITELN_DSC_RX_PF_CTL_DC_OFFS_AND_VGAr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DSC_RX_PF_CTL_DC_OFFS_AND_VGAr
#define WRITEALL_DSC_RX_PF_CTL_DC_OFFS_AND_VGAr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DSC_RX_PF_CTL_DC_OFFS_AND_VGAr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_PF_CTL_DC_OFFS_AND_VGAr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  DSC_RX_DFE_TAP4_AB_CTL
 * BLOCKS:   DSC_J
 * REGADDR:  0xd456
 * DEVAD:    1
 * DESC:     rx_dfe_tap4_ab_ctrl register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RXB_DFE_TAP4_VAL signed 2's complement +/-15, 1LSB=150mV/64
 *     RXA_DFE_TAP4_VAL signed 2's complement +/-15, 1LSB=150mV/64
 *     RXB_DFE_TAP4_WRITE write strobe for writing to rxb_dfe_tap4; need to set rx_afe_override_sel to 6
 *     RXA_DFE_TAP4_WRITE write strobe for writing to rxa_dfe_tap4; need to set rx_afe_override_sel to 6
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP4_AB_CTLr (0x0001d456 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP4_AB_CTLr_SIZE 4

/*
 * This structure should be used to declare and program DSC_RX_DFE_TAP4_AB_CTL.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP4_AB_CTLr_s {
	uint32_t v[1];
	uint32_t dsc_rx_dfe_tap4_ab_ctl[1];
	uint32_t _dsc_rx_dfe_tap4_ab_ctl;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP4_AB_CTLr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP4_AB_CTLr_CLR(r) (r).dsc_rx_dfe_tap4_ab_ctl[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP4_AB_CTLr_SET(r,d) (r).dsc_rx_dfe_tap4_ab_ctl[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP4_AB_CTLr_GET(r) (r).dsc_rx_dfe_tap4_ab_ctl[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP4_AB_CTLr_RXA_DFE_TAP4_WRITEf_GET(r) ((((r).dsc_rx_dfe_tap4_ab_ctl[0]) >> 11) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP4_AB_CTLr_RXA_DFE_TAP4_WRITEf_SET(r,f) (r).dsc_rx_dfe_tap4_ab_ctl[0]=(((r).dsc_rx_dfe_tap4_ab_ctl[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11)) | (1 << (16 + 11))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP4_AB_CTLr_RXB_DFE_TAP4_WRITEf_GET(r) ((((r).dsc_rx_dfe_tap4_ab_ctl[0]) >> 10) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP4_AB_CTLr_RXB_DFE_TAP4_WRITEf_SET(r,f) (r).dsc_rx_dfe_tap4_ab_ctl[0]=(((r).dsc_rx_dfe_tap4_ab_ctl[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10)) | (1 << (16 + 10))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP4_AB_CTLr_RXA_DFE_TAP4_VALf_GET(r) ((((r).dsc_rx_dfe_tap4_ab_ctl[0]) >> 5) & 0x1f)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP4_AB_CTLr_RXA_DFE_TAP4_VALf_SET(r,f) (r).dsc_rx_dfe_tap4_ab_ctl[0]=(((r).dsc_rx_dfe_tap4_ab_ctl[0] & ~((uint32_t)0x1f << 5)) | ((((uint32_t)f) & 0x1f) << 5)) | (31 << (16 + 5))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP4_AB_CTLr_RXB_DFE_TAP4_VALf_GET(r) (((r).dsc_rx_dfe_tap4_ab_ctl[0]) & 0x1f)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP4_AB_CTLr_RXB_DFE_TAP4_VALf_SET(r,f) (r).dsc_rx_dfe_tap4_ab_ctl[0]=(((r).dsc_rx_dfe_tap4_ab_ctl[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f)) | (0x1f << 16)

/*
 * These macros can be used to access DSC_RX_DFE_TAP4_AB_CTL.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DSC_RX_DFE_TAP4_AB_CTLr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP4_AB_CTLr,(_r._dsc_rx_dfe_tap4_ab_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DSC_RX_DFE_TAP4_AB_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP4_AB_CTLr,(_r._dsc_rx_dfe_tap4_ab_ctl)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DSC_RX_DFE_TAP4_AB_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP4_AB_CTLr,(_r._dsc_rx_dfe_tap4_ab_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DSC_RX_DFE_TAP4_AB_CTLr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP4_AB_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_dfe_tap4_ab_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DSC_RX_DFE_TAP4_AB_CTLr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP4_AB_CTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_dfe_tap4_ab_ctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DSC_RX_DFE_TAP4_AB_CTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP4_AB_CTLr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_rx_dfe_tap4_ab_ctl))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_RX_DFE_TAP4_AB_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP4_AB_CTLr
#define DSC_RX_DFE_TAP4_AB_CTLr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP4_AB_CTLr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP4_AB_CTLr_t DSC_RX_DFE_TAP4_AB_CTLr_t;
#define DSC_RX_DFE_TAP4_AB_CTLr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP4_AB_CTLr_CLR
#define DSC_RX_DFE_TAP4_AB_CTLr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP4_AB_CTLr_SET
#define DSC_RX_DFE_TAP4_AB_CTLr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP4_AB_CTLr_GET
#define DSC_RX_DFE_TAP4_AB_CTLr_RXA_DFE_TAP4_WRITEf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP4_AB_CTLr_RXA_DFE_TAP4_WRITEf_GET
#define DSC_RX_DFE_TAP4_AB_CTLr_RXA_DFE_TAP4_WRITEf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP4_AB_CTLr_RXA_DFE_TAP4_WRITEf_SET
#define DSC_RX_DFE_TAP4_AB_CTLr_RXB_DFE_TAP4_WRITEf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP4_AB_CTLr_RXB_DFE_TAP4_WRITEf_GET
#define DSC_RX_DFE_TAP4_AB_CTLr_RXB_DFE_TAP4_WRITEf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP4_AB_CTLr_RXB_DFE_TAP4_WRITEf_SET
#define DSC_RX_DFE_TAP4_AB_CTLr_RXA_DFE_TAP4_VALf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP4_AB_CTLr_RXA_DFE_TAP4_VALf_GET
#define DSC_RX_DFE_TAP4_AB_CTLr_RXA_DFE_TAP4_VALf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP4_AB_CTLr_RXA_DFE_TAP4_VALf_SET
#define DSC_RX_DFE_TAP4_AB_CTLr_RXB_DFE_TAP4_VALf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP4_AB_CTLr_RXB_DFE_TAP4_VALf_GET
#define DSC_RX_DFE_TAP4_AB_CTLr_RXB_DFE_TAP4_VALf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP4_AB_CTLr_RXB_DFE_TAP4_VALf_SET
#define READ_DSC_RX_DFE_TAP4_AB_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DSC_RX_DFE_TAP4_AB_CTLr
#define WRITE_DSC_RX_DFE_TAP4_AB_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DSC_RX_DFE_TAP4_AB_CTLr
#define MODIFY_DSC_RX_DFE_TAP4_AB_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DSC_RX_DFE_TAP4_AB_CTLr
#define READLN_DSC_RX_DFE_TAP4_AB_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DSC_RX_DFE_TAP4_AB_CTLr
#define WRITELN_DSC_RX_DFE_TAP4_AB_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DSC_RX_DFE_TAP4_AB_CTLr
#define WRITEALL_DSC_RX_DFE_TAP4_AB_CTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DSC_RX_DFE_TAP4_AB_CTLr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP4_AB_CTLr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  DSC_RX_DFE_TAP4_AB_STS
 * BLOCKS:   DSC_J
 * REGADDR:  0xd458
 * DEVAD:    1
 * DESC:     rx_dfe_tap4_ab_status register.
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/O
 * FIELDS:
 *     RXB_DFE_TAP4_STATUS signed 2's complement +/-15, 1LSB=150mV/64
 *     RXA_DFE_TAP4_STATUS signed 2's complement +/-15, 1LSB=150mV/64
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP4_AB_STSr (0x0001d458 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP4_AB_STSr_SIZE 4

/*
 * This structure should be used to declare and program DSC_RX_DFE_TAP4_AB_STS.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP4_AB_STSr_s {
	uint32_t v[1];
	uint32_t dsc_rx_dfe_tap4_ab_sts[1];
	uint32_t _dsc_rx_dfe_tap4_ab_sts;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP4_AB_STSr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP4_AB_STSr_CLR(r) (r).dsc_rx_dfe_tap4_ab_sts[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP4_AB_STSr_SET(r,d) (r).dsc_rx_dfe_tap4_ab_sts[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP4_AB_STSr_GET(r) (r).dsc_rx_dfe_tap4_ab_sts[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP4_AB_STSr_RXA_DFE_TAP4_STATUSf_GET(r) ((((r).dsc_rx_dfe_tap4_ab_sts[0]) >> 5) & 0x1f)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP4_AB_STSr_RXA_DFE_TAP4_STATUSf_SET(r,f) (r).dsc_rx_dfe_tap4_ab_sts[0]=(((r).dsc_rx_dfe_tap4_ab_sts[0] & ~((uint32_t)0x1f << 5)) | ((((uint32_t)f) & 0x1f) << 5)) | (31 << (16 + 5))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP4_AB_STSr_RXB_DFE_TAP4_STATUSf_GET(r) (((r).dsc_rx_dfe_tap4_ab_sts[0]) & 0x1f)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP4_AB_STSr_RXB_DFE_TAP4_STATUSf_SET(r,f) (r).dsc_rx_dfe_tap4_ab_sts[0]=(((r).dsc_rx_dfe_tap4_ab_sts[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f)) | (0x1f << 16)

/*
 * These macros can be used to access DSC_RX_DFE_TAP4_AB_STS.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DSC_RX_DFE_TAP4_AB_STSr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP4_AB_STSr,(_r._dsc_rx_dfe_tap4_ab_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DSC_RX_DFE_TAP4_AB_STSr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP4_AB_STSr,(_r._dsc_rx_dfe_tap4_ab_sts)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DSC_RX_DFE_TAP4_AB_STSr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP4_AB_STSr,(_r._dsc_rx_dfe_tap4_ab_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DSC_RX_DFE_TAP4_AB_STSr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP4_AB_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_dfe_tap4_ab_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DSC_RX_DFE_TAP4_AB_STSr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP4_AB_STSr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._dsc_rx_dfe_tap4_ab_sts))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DSC_RX_DFE_TAP4_AB_STSr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP4_AB_STSr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._dsc_rx_dfe_tap4_ab_sts))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define DSC_RX_DFE_TAP4_AB_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP4_AB_STSr
#define DSC_RX_DFE_TAP4_AB_STSr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP4_AB_STSr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP4_AB_STSr_t DSC_RX_DFE_TAP4_AB_STSr_t;
#define DSC_RX_DFE_TAP4_AB_STSr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP4_AB_STSr_CLR
#define DSC_RX_DFE_TAP4_AB_STSr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP4_AB_STSr_SET
#define DSC_RX_DFE_TAP4_AB_STSr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP4_AB_STSr_GET
#define DSC_RX_DFE_TAP4_AB_STSr_RXA_DFE_TAP4_STATUSf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP4_AB_STSr_RXA_DFE_TAP4_STATUSf_GET
#define DSC_RX_DFE_TAP4_AB_STSr_RXA_DFE_TAP4_STATUSf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP4_AB_STSr_RXA_DFE_TAP4_STATUSf_SET
#define DSC_RX_DFE_TAP4_AB_STSr_RXB_DFE_TAP4_STATUSf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP4_AB_STSr_RXB_DFE_TAP4_STATUSf_GET
#define DSC_RX_DFE_TAP4_AB_STSr_RXB_DFE_TAP4_STATUSf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP4_AB_STSr_RXB_DFE_TAP4_STATUSf_SET
#define READ_DSC_RX_DFE_TAP4_AB_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_DSC_RX_DFE_TAP4_AB_STSr
#define WRITE_DSC_RX_DFE_TAP4_AB_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_DSC_RX_DFE_TAP4_AB_STSr
#define MODIFY_DSC_RX_DFE_TAP4_AB_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_DSC_RX_DFE_TAP4_AB_STSr
#define READLN_DSC_RX_DFE_TAP4_AB_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_DSC_RX_DFE_TAP4_AB_STSr
#define WRITELN_DSC_RX_DFE_TAP4_AB_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_DSC_RX_DFE_TAP4_AB_STSr
#define WRITEALL_DSC_RX_DFE_TAP4_AB_STSr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_DSC_RX_DFE_TAP4_AB_STSr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_DSC_RX_DFE_TAP4_AB_STSr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  AMS_RX_B_RX_INTCTL
 * BLOCKS:   AMS_RX_B
 * REGADDR:  0xd470
 * DEVAD:    1
 * DESC:     INTERNAL RX CONTROL
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     RESERVED_AMS_RX_B_0 Reserved bitsmust not be written to. A read returns an unknown value
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_B_RX_INTCTLr (0x0001d470 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_B_RX_INTCTLr_SIZE 4

/*
 * This structure should be used to declare and program AMS_RX_B_RX_INTCTL.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_B_RX_INTCTLr_s {
	uint32_t v[1];
	uint32_t ams_rx_b_rx_intctl[1];
	uint32_t _ams_rx_b_rx_intctl;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_B_RX_INTCTLr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_B_RX_INTCTLr_CLR(r) (r).ams_rx_b_rx_intctl[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_B_RX_INTCTLr_SET(r,d) (r).ams_rx_b_rx_intctl[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_B_RX_INTCTLr_GET(r) (r).ams_rx_b_rx_intctl[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_B_RX_INTCTLr_RESERVED_AMS_RX_B_0f_GET(r) (((r).ams_rx_b_rx_intctl[0]) & 0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_B_RX_INTCTLr_RESERVED_AMS_RX_B_0f_SET(r,f) (r).ams_rx_b_rx_intctl[0]=(((r).ams_rx_b_rx_intctl[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access AMS_RX_B_RX_INTCTL.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_AMS_RX_B_RX_INTCTLr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_B_RX_INTCTLr,(_r._ams_rx_b_rx_intctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_AMS_RX_B_RX_INTCTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_B_RX_INTCTLr,(_r._ams_rx_b_rx_intctl)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_AMS_RX_B_RX_INTCTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_B_RX_INTCTLr,(_r._ams_rx_b_rx_intctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_AMS_RX_B_RX_INTCTLr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_B_RX_INTCTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_rx_b_rx_intctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_AMS_RX_B_RX_INTCTLr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_B_RX_INTCTLr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_rx_b_rx_intctl))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_AMS_RX_B_RX_INTCTLr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_B_RX_INTCTLr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._ams_rx_b_rx_intctl))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AMS_RX_B_RX_INTCTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_B_RX_INTCTLr
#define AMS_RX_B_RX_INTCTLr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_B_RX_INTCTLr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_B_RX_INTCTLr_t AMS_RX_B_RX_INTCTLr_t;
#define AMS_RX_B_RX_INTCTLr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_B_RX_INTCTLr_CLR
#define AMS_RX_B_RX_INTCTLr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_B_RX_INTCTLr_SET
#define AMS_RX_B_RX_INTCTLr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_B_RX_INTCTLr_GET
#define AMS_RX_B_RX_INTCTLr_RESERVED_AMS_RX_B_0f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_B_RX_INTCTLr_RESERVED_AMS_RX_B_0f_GET
#define AMS_RX_B_RX_INTCTLr_RESERVED_AMS_RX_B_0f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_B_RX_INTCTLr_RESERVED_AMS_RX_B_0f_SET
#define READ_AMS_RX_B_RX_INTCTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_AMS_RX_B_RX_INTCTLr
#define WRITE_AMS_RX_B_RX_INTCTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_AMS_RX_B_RX_INTCTLr
#define MODIFY_AMS_RX_B_RX_INTCTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_AMS_RX_B_RX_INTCTLr
#define READLN_AMS_RX_B_RX_INTCTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_AMS_RX_B_RX_INTCTLr
#define WRITELN_AMS_RX_B_RX_INTCTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_AMS_RX_B_RX_INTCTLr
#define WRITEALL_AMS_RX_B_RX_INTCTLr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_AMS_RX_B_RX_INTCTLr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_B_RX_INTCTLr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  AMS_RX_B_RX_INT_STS0
 * BLOCKS:   AMS_RX_B
 * REGADDR:  0xd478
 * DEVAD:    1
 * DESC:     INTERNAL RX STATUS 0
 * RESETVAL: 0x8888 (34952)
 * ACCESS:   R/O
 * FIELDS:
 *     RESERVED_AMS_RX_B_1 Reserved bitsmust not be written to. A read returns an unknown value
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_B_RX_INT_STS0r (0x0001d478 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_B_RX_INT_STS0r_SIZE 4

/*
 * This structure should be used to declare and program AMS_RX_B_RX_INT_STS0.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_B_RX_INT_STS0r_s {
	uint32_t v[1];
	uint32_t ams_rx_b_rx_int_sts0[1];
	uint32_t _ams_rx_b_rx_int_sts0;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_B_RX_INT_STS0r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_B_RX_INT_STS0r_CLR(r) (r).ams_rx_b_rx_int_sts0[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_B_RX_INT_STS0r_SET(r,d) (r).ams_rx_b_rx_int_sts0[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_B_RX_INT_STS0r_GET(r) (r).ams_rx_b_rx_int_sts0[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_B_RX_INT_STS0r_RESERVED_AMS_RX_B_1f_GET(r) (((r).ams_rx_b_rx_int_sts0[0]) & 0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_B_RX_INT_STS0r_RESERVED_AMS_RX_B_1f_SET(r,f) (r).ams_rx_b_rx_int_sts0[0]=(((r).ams_rx_b_rx_int_sts0[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access AMS_RX_B_RX_INT_STS0.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_AMS_RX_B_RX_INT_STS0r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_B_RX_INT_STS0r,(_r._ams_rx_b_rx_int_sts0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_AMS_RX_B_RX_INT_STS0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_B_RX_INT_STS0r,(_r._ams_rx_b_rx_int_sts0)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_AMS_RX_B_RX_INT_STS0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_B_RX_INT_STS0r,(_r._ams_rx_b_rx_int_sts0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_AMS_RX_B_RX_INT_STS0r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_B_RX_INT_STS0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_rx_b_rx_int_sts0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_AMS_RX_B_RX_INT_STS0r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_B_RX_INT_STS0r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_rx_b_rx_int_sts0))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_AMS_RX_B_RX_INT_STS0r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_B_RX_INT_STS0r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._ams_rx_b_rx_int_sts0))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AMS_RX_B_RX_INT_STS0r BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_B_RX_INT_STS0r
#define AMS_RX_B_RX_INT_STS0r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_B_RX_INT_STS0r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_B_RX_INT_STS0r_t AMS_RX_B_RX_INT_STS0r_t;
#define AMS_RX_B_RX_INT_STS0r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_B_RX_INT_STS0r_CLR
#define AMS_RX_B_RX_INT_STS0r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_B_RX_INT_STS0r_SET
#define AMS_RX_B_RX_INT_STS0r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_B_RX_INT_STS0r_GET
#define AMS_RX_B_RX_INT_STS0r_RESERVED_AMS_RX_B_1f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_B_RX_INT_STS0r_RESERVED_AMS_RX_B_1f_GET
#define AMS_RX_B_RX_INT_STS0r_RESERVED_AMS_RX_B_1f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_B_RX_INT_STS0r_RESERVED_AMS_RX_B_1f_SET
#define READ_AMS_RX_B_RX_INT_STS0r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_AMS_RX_B_RX_INT_STS0r
#define WRITE_AMS_RX_B_RX_INT_STS0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_AMS_RX_B_RX_INT_STS0r
#define MODIFY_AMS_RX_B_RX_INT_STS0r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_AMS_RX_B_RX_INT_STS0r
#define READLN_AMS_RX_B_RX_INT_STS0r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_AMS_RX_B_RX_INT_STS0r
#define WRITELN_AMS_RX_B_RX_INT_STS0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_AMS_RX_B_RX_INT_STS0r
#define WRITEALL_AMS_RX_B_RX_INT_STS0r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_AMS_RX_B_RX_INT_STS0r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_B_RX_INT_STS0r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  AMS_RX_B_RX_INT_STS1
 * BLOCKS:   AMS_RX_B
 * REGADDR:  0xd479
 * DEVAD:    1
 * DESC:     INTERNAL RX STATUS 1
 * RESETVAL: 0x8880 (34944)
 * ACCESS:   R/O
 * FIELDS:
 *     RESERVED_AMS_RX_B_2 Reserved bitsmust not be written to. A read returns an unknown value
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_B_RX_INT_STS1r (0x0001d479 | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_B_RX_INT_STS1r_SIZE 4

/*
 * This structure should be used to declare and program AMS_RX_B_RX_INT_STS1.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_B_RX_INT_STS1r_s {
	uint32_t v[1];
	uint32_t ams_rx_b_rx_int_sts1[1];
	uint32_t _ams_rx_b_rx_int_sts1;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_B_RX_INT_STS1r_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_B_RX_INT_STS1r_CLR(r) (r).ams_rx_b_rx_int_sts1[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_B_RX_INT_STS1r_SET(r,d) (r).ams_rx_b_rx_int_sts1[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_B_RX_INT_STS1r_GET(r) (r).ams_rx_b_rx_int_sts1[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_B_RX_INT_STS1r_RESERVED_AMS_RX_B_2f_GET(r) (((r).ams_rx_b_rx_int_sts1[0]) & 0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_B_RX_INT_STS1r_RESERVED_AMS_RX_B_2f_SET(r,f) (r).ams_rx_b_rx_int_sts1[0]=(((r).ams_rx_b_rx_int_sts1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff)) | (0xffff << 16)

/*
 * These macros can be used to access AMS_RX_B_RX_INT_STS1.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_AMS_RX_B_RX_INT_STS1r(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_B_RX_INT_STS1r,(_r._ams_rx_b_rx_int_sts1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_AMS_RX_B_RX_INT_STS1r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_B_RX_INT_STS1r,(_r._ams_rx_b_rx_int_sts1)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_AMS_RX_B_RX_INT_STS1r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_B_RX_INT_STS1r,(_r._ams_rx_b_rx_int_sts1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_AMS_RX_B_RX_INT_STS1r(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_B_RX_INT_STS1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_rx_b_rx_int_sts1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_AMS_RX_B_RX_INT_STS1r(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_B_RX_INT_STS1r|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._ams_rx_b_rx_int_sts1))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_AMS_RX_B_RX_INT_STS1r(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_B_RX_INT_STS1r|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._ams_rx_b_rx_int_sts1))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define AMS_RX_B_RX_INT_STS1r BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_B_RX_INT_STS1r
#define AMS_RX_B_RX_INT_STS1r_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_B_RX_INT_STS1r_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_B_RX_INT_STS1r_t AMS_RX_B_RX_INT_STS1r_t;
#define AMS_RX_B_RX_INT_STS1r_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_B_RX_INT_STS1r_CLR
#define AMS_RX_B_RX_INT_STS1r_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_B_RX_INT_STS1r_SET
#define AMS_RX_B_RX_INT_STS1r_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_B_RX_INT_STS1r_GET
#define AMS_RX_B_RX_INT_STS1r_RESERVED_AMS_RX_B_2f_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_B_RX_INT_STS1r_RESERVED_AMS_RX_B_2f_GET
#define AMS_RX_B_RX_INT_STS1r_RESERVED_AMS_RX_B_2f_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_B_RX_INT_STS1r_RESERVED_AMS_RX_B_2f_SET
#define READ_AMS_RX_B_RX_INT_STS1r BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_AMS_RX_B_RX_INT_STS1r
#define WRITE_AMS_RX_B_RX_INT_STS1r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_AMS_RX_B_RX_INT_STS1r
#define MODIFY_AMS_RX_B_RX_INT_STS1r BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_AMS_RX_B_RX_INT_STS1r
#define READLN_AMS_RX_B_RX_INT_STS1r BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_AMS_RX_B_RX_INT_STS1r
#define WRITELN_AMS_RX_B_RX_INT_STS1r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_AMS_RX_B_RX_INT_STS1r
#define WRITEALL_AMS_RX_B_RX_INT_STS1r BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_AMS_RX_B_RX_INT_STS1r

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_AMS_RX_B_RX_INT_STS1r'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  MDIO_BCST_PORT_ADDR
 * BLOCKS:   MDIO_MMDSEL_AER_COM
 * REGADDR:  0xffdc
 * DEVAD:    1
 * DESC:     Broadcast Port Address
 * RESETVAL: 0x1f (31)
 * ACCESS:   R/W
 * FIELDS:
 *     MDIO_BRCST_PORT_ADDR Braodcast port address that can be used to broadcast mdio commandsto multiple controllers connected to the same mdio station manager
 *     MDIO_DRV_COMCLK  Debug control bit to select between mdio_clk and comclk to drive out mdio_out and mdio_oeb signals.0=mdio_clk, 1=comclk
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MDIO_BCST_PORT_ADDRr (0x0001ffdc | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MDIO_BCST_PORT_ADDRr_SIZE 4

/*
 * This structure should be used to declare and program MDIO_BCST_PORT_ADDR.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_MDIO_BCST_PORT_ADDRr_s {
	uint32_t v[1];
	uint32_t mdio_bcst_port_addr[1];
	uint32_t _mdio_bcst_port_addr;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_MDIO_BCST_PORT_ADDRr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MDIO_BCST_PORT_ADDRr_CLR(r) (r).mdio_bcst_port_addr[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MDIO_BCST_PORT_ADDRr_SET(r,d) (r).mdio_bcst_port_addr[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MDIO_BCST_PORT_ADDRr_GET(r) (r).mdio_bcst_port_addr[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MDIO_BCST_PORT_ADDRr_MDIO_DRV_COMCLKf_GET(r) ((((r).mdio_bcst_port_addr[0]) >> 15) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MDIO_BCST_PORT_ADDRr_MDIO_DRV_COMCLKf_SET(r,f) (r).mdio_bcst_port_addr[0]=(((r).mdio_bcst_port_addr[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MDIO_BCST_PORT_ADDRr_MDIO_BRCST_PORT_ADDRf_GET(r) (((r).mdio_bcst_port_addr[0]) & 0x1f)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MDIO_BCST_PORT_ADDRr_MDIO_BRCST_PORT_ADDRf_SET(r,f) (r).mdio_bcst_port_addr[0]=(((r).mdio_bcst_port_addr[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f)) | (0x1f << 16)

/*
 * These macros can be used to access MDIO_BCST_PORT_ADDR.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_MDIO_BCST_PORT_ADDRr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_MDIO_BCST_PORT_ADDRr,(_r._mdio_bcst_port_addr))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_MDIO_BCST_PORT_ADDRr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_MDIO_BCST_PORT_ADDRr,(_r._mdio_bcst_port_addr)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_MDIO_BCST_PORT_ADDRr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_MDIO_BCST_PORT_ADDRr,(_r._mdio_bcst_port_addr))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_MDIO_BCST_PORT_ADDRr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_MDIO_BCST_PORT_ADDRr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._mdio_bcst_port_addr))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_MDIO_BCST_PORT_ADDRr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_MDIO_BCST_PORT_ADDRr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._mdio_bcst_port_addr))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_MDIO_BCST_PORT_ADDRr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_MDIO_BCST_PORT_ADDRr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._mdio_bcst_port_addr))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define MDIO_BCST_PORT_ADDRr BCMI_BLACKHAWK7_V1L8P1_XGXS_MDIO_BCST_PORT_ADDRr
#define MDIO_BCST_PORT_ADDRr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_MDIO_BCST_PORT_ADDRr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_MDIO_BCST_PORT_ADDRr_t MDIO_BCST_PORT_ADDRr_t;
#define MDIO_BCST_PORT_ADDRr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_MDIO_BCST_PORT_ADDRr_CLR
#define MDIO_BCST_PORT_ADDRr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_MDIO_BCST_PORT_ADDRr_SET
#define MDIO_BCST_PORT_ADDRr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_MDIO_BCST_PORT_ADDRr_GET
#define MDIO_BCST_PORT_ADDRr_MDIO_DRV_COMCLKf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_MDIO_BCST_PORT_ADDRr_MDIO_DRV_COMCLKf_GET
#define MDIO_BCST_PORT_ADDRr_MDIO_DRV_COMCLKf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_MDIO_BCST_PORT_ADDRr_MDIO_DRV_COMCLKf_SET
#define MDIO_BCST_PORT_ADDRr_MDIO_BRCST_PORT_ADDRf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_MDIO_BCST_PORT_ADDRr_MDIO_BRCST_PORT_ADDRf_GET
#define MDIO_BCST_PORT_ADDRr_MDIO_BRCST_PORT_ADDRf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_MDIO_BCST_PORT_ADDRr_MDIO_BRCST_PORT_ADDRf_SET
#define READ_MDIO_BCST_PORT_ADDRr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_MDIO_BCST_PORT_ADDRr
#define WRITE_MDIO_BCST_PORT_ADDRr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_MDIO_BCST_PORT_ADDRr
#define MODIFY_MDIO_BCST_PORT_ADDRr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_MDIO_BCST_PORT_ADDRr
#define READLN_MDIO_BCST_PORT_ADDRr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_MDIO_BCST_PORT_ADDRr
#define WRITELN_MDIO_BCST_PORT_ADDRr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_MDIO_BCST_PORT_ADDRr
#define WRITEALL_MDIO_BCST_PORT_ADDRr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_MDIO_BCST_PORT_ADDRr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_MDIO_BCST_PORT_ADDRr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  MDIO_MMD_SEL
 * BLOCKS:   MDIO_MMDSEL_AER_COM
 * REGADDR:  0xffdd
 * DEVAD:    1
 * DESC:     MMD Select
 * RESETVAL: 0x404d (16461)
 * ACCESS:   R/W
 * FIELDS:
 *     MDIO_DEV_ID0_EN  When set and mdio_multi_mmds_en=1 then device id 0 registers can be directlyaccessed through the MDIO serial data stream.
 *     MDIO_DEV_PMD_EN  When set and mdio_multi_mmds_en=1 then the PMD device=1 registers can be directlyaccessed through the MDIO serial data stream.
 *     MDIO_DEV_AN_EN   When set and mdio_multi_mmds_en=1 then the AN device=7 registers can be directlyaccessed through the MDIO serial data stream.
 *     MDIO_DEV_PHY_EN  When set and mdio_multi_mmds_en=1 then the PHY device=4 registers can be directlyaccessed through the MDIO serial data stream.
 *     MDIO_DEV_DTE_EN  When set and mdio_multi_mmds_en=1 then the DTE device=5 registers can be directlyaccessed through the MDIO serial data stream.
 *     MDIO_DEV_PCS_EN  When set and mdio_multi_mmds_en=1 then the PCS device=3 registers can be directlyaccessed through the MDIO serial data stream.
 *     MDIO_MULTI_MMDS_EN When set enables the multiple MMD functionality.  MD_ST is ignored andeach device can be accessed directly with the appropriate CL45protocol.
 *     MDIO_MULTI_PRTS_EN When set enables multiple prtad functionality.  Each of the lanes'mmds can be accessed with consecutive PRTADs.  Lane 0 is accessedwith PRTAD_STRAP, lane 1 with PRTAD_STRAP+1, lane 2 with PRTAD_STRAP+2and lane 3 with PRTAD_STRAP+3.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MDIO_MMD_SELr (0x0001ffdd | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MDIO_MMD_SELr_SIZE 4

/*
 * This structure should be used to declare and program MDIO_MMD_SEL.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_MDIO_MMD_SELr_s {
	uint32_t v[1];
	uint32_t mdio_mmd_sel[1];
	uint32_t _mdio_mmd_sel;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_MDIO_MMD_SELr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MDIO_MMD_SELr_CLR(r) (r).mdio_mmd_sel[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MDIO_MMD_SELr_SET(r,d) (r).mdio_mmd_sel[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MDIO_MMD_SELr_GET(r) (r).mdio_mmd_sel[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MDIO_MMD_SELr_MDIO_MULTI_PRTS_ENf_GET(r) ((((r).mdio_mmd_sel[0]) >> 15) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MDIO_MMD_SELr_MDIO_MULTI_PRTS_ENf_SET(r,f) (r).mdio_mmd_sel[0]=(((r).mdio_mmd_sel[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15)) | (1 << (16 + 15))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MDIO_MMD_SELr_MDIO_MULTI_MMDS_ENf_GET(r) ((((r).mdio_mmd_sel[0]) >> 14) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MDIO_MMD_SELr_MDIO_MULTI_MMDS_ENf_SET(r,f) (r).mdio_mmd_sel[0]=(((r).mdio_mmd_sel[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14)) | (1 << (16 + 14))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MDIO_MMD_SELr_MDIO_DEV_PCS_ENf_GET(r) ((((r).mdio_mmd_sel[0]) >> 6) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MDIO_MMD_SELr_MDIO_DEV_PCS_ENf_SET(r,f) (r).mdio_mmd_sel[0]=(((r).mdio_mmd_sel[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6)) | (1 << (16 + 6))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MDIO_MMD_SELr_MDIO_DEV_DTE_ENf_GET(r) ((((r).mdio_mmd_sel[0]) >> 5) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MDIO_MMD_SELr_MDIO_DEV_DTE_ENf_SET(r,f) (r).mdio_mmd_sel[0]=(((r).mdio_mmd_sel[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5)) | (1 << (16 + 5))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MDIO_MMD_SELr_MDIO_DEV_PHY_ENf_GET(r) ((((r).mdio_mmd_sel[0]) >> 4) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MDIO_MMD_SELr_MDIO_DEV_PHY_ENf_SET(r,f) (r).mdio_mmd_sel[0]=(((r).mdio_mmd_sel[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4)) | (1 << (16 + 4))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MDIO_MMD_SELr_MDIO_DEV_AN_ENf_GET(r) ((((r).mdio_mmd_sel[0]) >> 3) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MDIO_MMD_SELr_MDIO_DEV_AN_ENf_SET(r,f) (r).mdio_mmd_sel[0]=(((r).mdio_mmd_sel[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3)) | (1 << (16 + 3))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MDIO_MMD_SELr_MDIO_DEV_PMD_ENf_GET(r) ((((r).mdio_mmd_sel[0]) >> 2) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MDIO_MMD_SELr_MDIO_DEV_PMD_ENf_SET(r,f) (r).mdio_mmd_sel[0]=(((r).mdio_mmd_sel[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2)) | (1 << (16 + 2))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MDIO_MMD_SELr_MDIO_DEV_ID0_ENf_GET(r) (((r).mdio_mmd_sel[0]) & 0x1)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MDIO_MMD_SELr_MDIO_DEV_ID0_ENf_SET(r,f) (r).mdio_mmd_sel[0]=(((r).mdio_mmd_sel[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1)) | (0x1 << 16)

/*
 * These macros can be used to access MDIO_MMD_SEL.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_MDIO_MMD_SELr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_MDIO_MMD_SELr,(_r._mdio_mmd_sel))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_MDIO_MMD_SELr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_MDIO_MMD_SELr,(_r._mdio_mmd_sel)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_MDIO_MMD_SELr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_MDIO_MMD_SELr,(_r._mdio_mmd_sel))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_MDIO_MMD_SELr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_MDIO_MMD_SELr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._mdio_mmd_sel))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_MDIO_MMD_SELr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_MDIO_MMD_SELr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._mdio_mmd_sel))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_MDIO_MMD_SELr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_MDIO_MMD_SELr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._mdio_mmd_sel))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define MDIO_MMD_SELr BCMI_BLACKHAWK7_V1L8P1_XGXS_MDIO_MMD_SELr
#define MDIO_MMD_SELr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_MDIO_MMD_SELr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_MDIO_MMD_SELr_t MDIO_MMD_SELr_t;
#define MDIO_MMD_SELr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_MDIO_MMD_SELr_CLR
#define MDIO_MMD_SELr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_MDIO_MMD_SELr_SET
#define MDIO_MMD_SELr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_MDIO_MMD_SELr_GET
#define MDIO_MMD_SELr_MDIO_MULTI_PRTS_ENf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_MDIO_MMD_SELr_MDIO_MULTI_PRTS_ENf_GET
#define MDIO_MMD_SELr_MDIO_MULTI_PRTS_ENf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_MDIO_MMD_SELr_MDIO_MULTI_PRTS_ENf_SET
#define MDIO_MMD_SELr_MDIO_MULTI_MMDS_ENf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_MDIO_MMD_SELr_MDIO_MULTI_MMDS_ENf_GET
#define MDIO_MMD_SELr_MDIO_MULTI_MMDS_ENf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_MDIO_MMD_SELr_MDIO_MULTI_MMDS_ENf_SET
#define MDIO_MMD_SELr_MDIO_DEV_PCS_ENf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_MDIO_MMD_SELr_MDIO_DEV_PCS_ENf_GET
#define MDIO_MMD_SELr_MDIO_DEV_PCS_ENf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_MDIO_MMD_SELr_MDIO_DEV_PCS_ENf_SET
#define MDIO_MMD_SELr_MDIO_DEV_DTE_ENf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_MDIO_MMD_SELr_MDIO_DEV_DTE_ENf_GET
#define MDIO_MMD_SELr_MDIO_DEV_DTE_ENf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_MDIO_MMD_SELr_MDIO_DEV_DTE_ENf_SET
#define MDIO_MMD_SELr_MDIO_DEV_PHY_ENf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_MDIO_MMD_SELr_MDIO_DEV_PHY_ENf_GET
#define MDIO_MMD_SELr_MDIO_DEV_PHY_ENf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_MDIO_MMD_SELr_MDIO_DEV_PHY_ENf_SET
#define MDIO_MMD_SELr_MDIO_DEV_AN_ENf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_MDIO_MMD_SELr_MDIO_DEV_AN_ENf_GET
#define MDIO_MMD_SELr_MDIO_DEV_AN_ENf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_MDIO_MMD_SELr_MDIO_DEV_AN_ENf_SET
#define MDIO_MMD_SELr_MDIO_DEV_PMD_ENf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_MDIO_MMD_SELr_MDIO_DEV_PMD_ENf_GET
#define MDIO_MMD_SELr_MDIO_DEV_PMD_ENf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_MDIO_MMD_SELr_MDIO_DEV_PMD_ENf_SET
#define MDIO_MMD_SELr_MDIO_DEV_ID0_ENf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_MDIO_MMD_SELr_MDIO_DEV_ID0_ENf_GET
#define MDIO_MMD_SELr_MDIO_DEV_ID0_ENf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_MDIO_MMD_SELr_MDIO_DEV_ID0_ENf_SET
#define READ_MDIO_MMD_SELr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_MDIO_MMD_SELr
#define WRITE_MDIO_MMD_SELr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_MDIO_MMD_SELr
#define MODIFY_MDIO_MMD_SELr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_MDIO_MMD_SELr
#define READLN_MDIO_MMD_SELr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_MDIO_MMD_SELr
#define WRITELN_MDIO_MMD_SELr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_MDIO_MMD_SELr
#define WRITEALL_MDIO_MMD_SELr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_MDIO_MMD_SELr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_MDIO_MMD_SELr'
 */




/*******************************************************************************
 * CHIP:  BCMI_BLACKHAWK7_V1L8P1_XGXS
 * REGISTER:  MDIO_AER
 * BLOCKS:   MDIO_MMDSEL_AER_COM
 * REGADDR:  0xffde
 * DEVAD:    1
 * DESC:     AER
 * RESETVAL: 0x0 (0)
 * ACCESS:   R/W
 * FIELDS:
 *     MDIO_AER         Provides 11-bits of 32-bit address for clause45 mdio transactions. This maps tp bits 26:16 of the 32-bit address.BIT 10:  Broadcast control for writing to the per PLL/micro registers so that all the register can be written together. Bits 9:8 will be don't-care when this bit is set. Only applicable for writes and not for reads. Only applies for writes to per PLL or per micro register blocks. Other register blocks are unaffected by this address bit.BIT 9:8: PLL/micro number. This is used to address the per PLL and per micro registers associated with the PLL or micro  if there are multiple PLLs or multiple micros in this core. Registers that are not replicated per PLL or micro will not use these bits in their decode.BIT 7:0: 8-bit lane/broadcast/multicast. Registers that are not replicated per lane will not use these bits in their decode.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MDIO_AERr (0x0001ffde | PHYMOD_REG_ACC_TSC_IBLK)

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MDIO_AERr_SIZE 4

/*
 * This structure should be used to declare and program MDIO_AER.
 */
typedef union BCMI_BLACKHAWK7_V1L8P1_XGXS_MDIO_AERr_s {
	uint32_t v[1];
	uint32_t mdio_aer[1];
	uint32_t _mdio_aer;
} BCMI_BLACKHAWK7_V1L8P1_XGXS_MDIO_AERr_t;

#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MDIO_AERr_CLR(r) (r).mdio_aer[0] = 0
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MDIO_AERr_SET(r,d) (r).mdio_aer[0] = d
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MDIO_AERr_GET(r) (r).mdio_aer[0]

/*
 * These macros can be used to access individual fields.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MDIO_AERr_MDIO_AERf_GET(r) (((r).mdio_aer[0]) & 0x7ff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MDIO_AERr_MDIO_AERf_SET(r,f) (r).mdio_aer[0]=(((r).mdio_aer[0] & ~((uint32_t)0x7ff)) | (((uint32_t)f) & 0x7ff)) | (0x7ff << 16)

/*
 * These macros can be used to access MDIO_AER.
 */
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_MDIO_AERr(_pc,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_MDIO_AERr,(_r._mdio_aer))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_MDIO_AERr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_MDIO_AERr,(_r._mdio_aer)&0xffff)
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_MDIO_AERr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_MDIO_AERr,(_r._mdio_aer))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_MDIO_AERr(_pc,_l,_r) phymod_tscbh_iblk_read(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_MDIO_AERr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._mdio_aer))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_MDIO_AERr(_pc,_l,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_MDIO_AERr|PHYMOD_REG_ACC_TSC_IBLK_FORCE_LANE|LSHIFT32(((_l)&0x3),PHYMOD_REG_ACCESS_FLAGS_SHIFT),(_r._mdio_aer))
#define BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_MDIO_AERr(_pc,_r) phymod_tscbh_iblk_write(_pc,BCMI_BLACKHAWK7_V1L8P1_XGXS_MDIO_AERr|PHYMOD_REG_ACC_TSC_IBLK_BCAST,(_r._mdio_aer))

/*
 * Unless PHYMOD_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHYMOD_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 */
#ifndef PHYMOD_EXCLUDE_CHIPLESS_TYPES

#define MDIO_AERr BCMI_BLACKHAWK7_V1L8P1_XGXS_MDIO_AERr
#define MDIO_AERr_SIZE BCMI_BLACKHAWK7_V1L8P1_XGXS_MDIO_AERr_SIZE
typedef BCMI_BLACKHAWK7_V1L8P1_XGXS_MDIO_AERr_t MDIO_AERr_t;
#define MDIO_AERr_CLR BCMI_BLACKHAWK7_V1L8P1_XGXS_MDIO_AERr_CLR
#define MDIO_AERr_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_MDIO_AERr_SET
#define MDIO_AERr_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_MDIO_AERr_GET
#define MDIO_AERr_MDIO_AERf_GET BCMI_BLACKHAWK7_V1L8P1_XGXS_MDIO_AERr_MDIO_AERf_GET
#define MDIO_AERr_MDIO_AERf_SET BCMI_BLACKHAWK7_V1L8P1_XGXS_MDIO_AERr_MDIO_AERf_SET
#define READ_MDIO_AERr BCMI_BLACKHAWK7_V1L8P1_XGXS_READ_MDIO_AERr
#define WRITE_MDIO_AERr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITE_MDIO_AERr
#define MODIFY_MDIO_AERr BCMI_BLACKHAWK7_V1L8P1_XGXS_MODIFY_MDIO_AERr
#define READLN_MDIO_AERr BCMI_BLACKHAWK7_V1L8P1_XGXS_READLN_MDIO_AERr
#define WRITELN_MDIO_AERr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITELN_MDIO_AERr
#define WRITEALL_MDIO_AERr BCMI_BLACKHAWK7_V1L8P1_XGXS_WRITEALL_MDIO_AERr

#endif /* PHYMOD_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_BLACKHAWK7_V1L8P1_XGXS_MDIO_AERr'
 */




#endif /* __BCMI_BLACKHAWK7_V1L8P1_XGXS_DEFS_H__ */
