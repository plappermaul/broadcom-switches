/***********************************************************************************
 ***********************************************************************************
 *                                                                                 *
 *  Revision    :        *
 *                                                                                 *
 *  Description :  Interface functions targeted to IP user                         *
 *                                                                                 *
 * This license is set out in https://raw.githubusercontent.com/Broadcom-Network-Switching-Software/OpenBCM/master/Legal/LICENSE file.
 * 
 * Copyright 2007-2020 Broadcom Inc. All rights reserved.                                                           *
 *  No portions of this material may be reproduced in any form without             *
 *  the written permission of:                                                     *
 *      Broadcom Corporation                                                       *
 *      5300 California Avenue                                                     *
 *      Irvine, CA  92617                                                          *
 *                                                                                 *
 *  All information contained in this document is Broadcom Corporation             *
 *  company private proprietary, and trade secret.                                 *
 */

/** @file blackhawk_tsc_prbs.h
 * PRBS test functions provided to IP User
 */

#ifndef BLACKHAWK_TSC_API_PRBS_H
#define BLACKHAWK_TSC_API_PRBS_H

#include "blackhawk_tsc_ipconfig.h"
#include "common/srds_api_enum.h"
#include "common/srds_api_err_code.h"
#include "common/srds_api_types.h"
#include "blackhawk_tsc_usr_includes.h"

#define PRBS_VERBOSE 0
/*------------------------------*/
/*  Shared TX Pattern Generator */
/*------------------------------*/
/** Configure Shared TX Pattern API.
 * An input string (hex, binary or PAM4 format) and pattern length are taken in as inputs, based on which the Pattern Generator registers
 * are programmed to the appropriate values to generate that pattern. \n
 * NOTE: blackhawk_tsc_tx_shared_patt_gen_en() API should be called to enable the Pattern generator for that particular lane. \n\n
 *
 *  For NRZ  mode, the input pattern should be provided in either hex or binary. \n
 *  -   eg: For a repeating pattern "0000010110101111", input_pattern = "0000010110101111" or "0x05AF" and patt_length = 16\n\n
 *  For PAM4 mode, the input pattern should be provided in PAM4 format, as described below. \n
 *  - PAM4 format uses four symbols - 0, 1, 2 or 3 (corresponding to voltage levels -3,-1,+1 and +3). \n
 *  - The input should be preceded by "p" to indicate a PAM4 format. The input could be spaced with "_" for better readability \n
 *  - Since each symbol is equivalent to 2 bits, the pattern_length = 2 * number of symbols in the pattern \n
 *  -   eg: For a repeating pattern of "-3-3-1-1+1+1+3+3", input_pattern = "p0011_2233" and patt_length = 16
 *
 * @param sa__ is an opaque state vector passed through to device access functions.
 * @param patt_length Pattern length
 * @param pattern Input Pattern - Can be in hex (eg: "0xB055") or in binary (eg: "011011")
 * @return Error Code generated by invalid input pattern or pattern length (returns ERR_CODE_NONE if no errors)
 */
err_code_t blackhawk_tsc_config_shared_tx_pattern(srds_access_t *sa__, uint8_t patt_length, const char pattern[]);

/** Configure TX to JP03B Pattern
 * @param sa__ is an opaque state vector passed through to device access functions.
 * @param enable Enable JP03B fixed pattern (1 = Enable; 0 = Disable)
 * @return Error Code generated by invalid input pattern or pattern length (returns ERR_CODE_NONE if no errors)
 */
err_code_t blackhawk_tsc_config_tx_jp03b_pattern(srds_access_t *sa__, uint8_t enable);

/** Configure TX Linearity Pattern
 * @param sa__ is an opaque state vector passed through to device access functions.
 * @param enable Enable TX Linearity pattern (1 = Enable; 0 = Disable)
 * @return Error Code generated by invalid input pattern or pattern length (returns ERR_CODE_NONE if no errors)
 */
err_code_t blackhawk_tsc_config_tx_linearity_pattern(srds_access_t *sa__, uint8_t enable);

/**************************************************/
/* LANE Based APIs - Required to be used per Lane */
/**************************************************/

/*----------------------------*/
/*  Enable Pattern Generator  */
/*----------------------------*/
/** Enable/Disable Shared TX pattern generator.
 * Note: The patt_length input to the function should be the value sent to the blackhawk_tsc_config_shared_tx_pattern() function
 * @param sa__ is an opaque state vector passed through to device access functions.
 * @param enable Enable shared fixed pattern generator (1 = Enable; 0 = Disable)
 * @param patt_length length of the pattern used in blackhawk_tsc_config_shared_tx_pattern()
 * @return Error Code generated by API (returns ERR_CODE_NONE if no errors)
 */
err_code_t blackhawk_tsc_tx_shared_patt_gen_en(srds_access_t *sa__, uint8_t enable, uint8_t patt_length);

/*----------------------------*/
/*  Configure PRBS Functions  */
/*----------------------------*/
/**  Configure PRBS Generator.
 * Once the PRBS generator is configured, to enable PRBS use the blackhawk_tsc_tx_prbs_en() API.
 * @param sa__ is an opaque state vector passed through to device access functions.
 * @param prbs_poly_mode PRBS generator mode select (selects required PRBS polynomial)
 * @param prbs_inv PRBS invert enable
 * @return Error Code generated by API (returns ERR_CODE_NONE if no errors)
 */
err_code_t blackhawk_tsc_config_tx_prbs(srds_access_t *sa__, enum srds_prbs_polynomial_enum prbs_poly_mode, uint8_t prbs_inv);

/**  Get PRBS Generator Configuration.
 * @param sa__ is an opaque state vector passed through to device access functions.
 * @param *prbs_poly_mode PRBS generator mode select (selects required PRBS polynomial)
 * @param *prbs_inv PRBS invert enable
 * @return Error Code generated by API (returns ERR_CODE_NONE if no errors)
 */
err_code_t blackhawk_tsc_get_tx_prbs_config(srds_access_t *sa__, enum srds_prbs_polynomial_enum *prbs_poly_mode, uint8_t *prbs_inv);

/** PRBS Generator Enable/Disable.
 * @param sa__ is an opaque state vector passed through to device access functions.
 * @param enable Enable PRBS Generator (1 = Enable; 0 = Disable)
 * @return Error Code generated by API (returns ERR_CODE_NONE if no errors)
 */
err_code_t blackhawk_tsc_tx_prbs_en(srds_access_t *sa__, uint8_t enable);

/** Get PRBS Generator Enable/Disable.
 * @param sa__ is an opaque state vector passed through to device access functions.
 * @param *enable returns the value of Enable PRBS Generator (1 = Enable; 0 = Disable)
 * @return Error Code generated by API (returns ERR_CODE_NONE if no errors)
 */
err_code_t blackhawk_tsc_get_tx_prbs_en(srds_access_t *sa__, uint8_t *enable);

/** PRBS Generator Single Bit Error Injection.
 * @param sa__ is an opaque state vector passed through to device access functions.
 * @param enable (1 = error is injected; 0 = no error is injected)
 * @return Error Code generated by API (returns ERR_CODE_NONE if no errors)
 */
err_code_t blackhawk_tsc_tx_prbs_err_inject(srds_access_t *sa__, uint8_t enable);

/**  Configure PRBS Checker.
 * Once the PRBS checker is configured, use the blackhawk_tsc_rx_prbs_en() API to enable the checker.
 * @param sa__ is an opaque state vector passed through to device access functions.
 * @param prbs_poly_mode PRBS checker mode select (selects required PRBS polynomial)
 * @param prbs_checker_mode Checker Mode to select PRBS LOCK state machine
 * @param prbs_inv PRBS invert enable
 * @return Error Code generated by API (returns ERR_CODE_NONE if no errors)
 */
err_code_t blackhawk_tsc_config_rx_prbs(srds_access_t *sa__, enum srds_prbs_polynomial_enum prbs_poly_mode, enum srds_prbs_checker_mode_enum prbs_checker_mode, uint8_t prbs_inv);

/**  Get PRBS Checker congifuration.
 * @param sa__ is an opaque state vector passed through to device access functions.
 * @param *prbs_poly_mode PRBS checker mode select (selects required PRBS polynomial)
 * @param *prbs_checker_mode Checker Mode to select PRBS LOCK state machine
 * @param *prbs_inv PRBS invert enable
 * @return Error Code generated by API (returns ERR_CODE_NONE if no errors)
 */
err_code_t blackhawk_tsc_get_rx_prbs_config(srds_access_t *sa__, enum srds_prbs_polynomial_enum *prbs_poly_mode, enum srds_prbs_checker_mode_enum *prbs_checker_mode, uint8_t *prbs_inv);

/** PRBS Checker Enable/Disable.
 * @param sa__ is an opaque state vector passed through to device access functions.
 * @param enable Enable PRBS Checker (1 = Enable; 0 = Disable)
 * @return Error Code generated by API (returns ERR_CODE_NONE if no errors)
 */
err_code_t blackhawk_tsc_rx_prbs_en(srds_access_t *sa__, uint8_t enable);

/** Get PRBS Checker Enable/Disable.
 * @param sa__ is an opaque state vector passed through to device access functions.
 * @param *enable returns with the value of Enable PRBS Checker (1 = Enable; 0 = Disable)
 * @return Error Code generated by API (returns ERR_CODE_NONE if no errors)
 */
err_code_t blackhawk_tsc_get_rx_prbs_en(srds_access_t *sa__, uint8_t *enable);

/** PRBS Checker LOCK status (live status).
 * @param sa__ is an opaque state vector passed through to device access functions.
 * @param *chk_lock Live lock status read by API
 * @return Error Code generated by API (returns ERR_CODE_NONE if no errors)
 */
err_code_t blackhawk_tsc_prbs_chk_lock_state(srds_access_t *sa__, uint8_t *chk_lock);

/** PRBS Error Count and Lock Lost status.
 * Error count and lock lost read back as a single 32bit value. Bit 31 is lock lost and [30:0] is error count.
 * @param sa__ is an opaque state vector passed through to device access functions.
 * @param *prbs_err_cnt 32bit value returned by API ([30:0] = Error Count; [31] = Lock lost)
 * @return Error Code generated by API (returns ERR_CODE_NONE if no errors)
 */
err_code_t blackhawk_tsc_prbs_err_count_ll(srds_access_t *sa__, uint32_t *prbs_err_cnt);

/** PRBS Error Count and Lock Lost status.
 * Error count and lock lost read back on separate variables
 * @param sa__ is an opaque state vector passed through to device access functions.
 * @param *prbs_err_cnt 32bit Error count value
 * @param *lock_lost Lock Lost status (1 = if lock was ever lost)
 * @return Error Code generated by API (returns ERR_CODE_NONE if no errors)
 */
err_code_t blackhawk_tsc_prbs_err_count_state(srds_access_t *sa__, uint32_t *prbs_err_cnt, uint8_t *lock_lost);

/** PRBS checker' hardware configuartion Struct */
struct prbs_chk_hw_timer_ctrl_st {
    /** PRBS checker burst error count mode enable */
    uint8_t prbs_chk_burst_err_cnt_en;
    /** prbs_chk_en timer mode */
    uint8_t prbs_chk_en_timer_mode;
    /** PRBS timer timeout value */
    uint8_t prbs_chk_en_timeout;
};

/** Get PRBS hardware timers configuration.
 * @param sa__ is an opaque state vector passed through to device access functions.
 * @param *prbs_chk_hw_timer_ctrl_bak Structure to store PRBS checker's hardware timers configuration
 * @return Error Code generated by API (returns ERR_CODE_NONE if no errors)
 */
err_code_t blackhawk_tsc_get_prbs_chk_hw_timer_ctrl(srds_access_t *sa__, struct prbs_chk_hw_timer_ctrl_st * const prbs_chk_hw_timer_ctrl_bak);

/** Set PRBS hardware timers configuration.
 * @param sa__ is an opaque state vector passed through to device access functions.
 * @param *prbs_chk_hw_timer_ctrl_bak Structure to be used to restore PRBS checker's hardware timers configuration
 * @return Error Code generated by API (returns ERR_CODE_NONE if no errors)
 */
err_code_t blackhawk_tsc_set_prbs_chk_hw_timer_ctrl(srds_access_t *sa__, struct prbs_chk_hw_timer_ctrl_st const * const prbs_chk_hw_timer_ctrl_bak);

/** Configure PRBS checker's hardware timers.
 * @param sa__ is an opaque state vector passed through to device access functions.
 * @param time_ms is the amount of time to delay for BER calculation
 * @param time_ms_adjusted is the amount of time delay that will be used for BER calculation
 * @return Error Code generated by API (returns ERR_CODE_NONE if no errors)
 */
err_code_t blackhawk_tsc_config_prbs_chk_hw_timer(srds_access_t *sa__, uint16_t time_ms, uint16_t *time_ms_adjusted);

/** Toggle PRBS checker enable.
 * @param sa__ is an opaque state vector passed through to device access functions.
 * @return Error Code generated by API (returns ERR_CODE_NONE if no errors)
 */
err_code_t blackhawk_tsc_prbs_chk_en_toggle(srds_access_t *sa__);

/** Header display for detailed PRBS display function
 * This can be displayed once and then several cores and lanes after each showing one line
 * @return Error Code generated by API (returns ERR_CODE_NONE if no errors)
 */
err_code_t blackhawk_tsc_display_detailed_prbs_state_hdr(void);

/** Display detailed PRBS data per lane including Burst Error
 *
 * @param sa__ is an opaque state vector passed through to device access functions.
 * @return Error Code generated by API (returns ERR_CODE_NONE if no errors)
 */
err_code_t blackhawk_tsc_display_detailed_prbs_state(srds_access_t *sa__);

extern const char* blackhawk_tsc_e2s_prbs_mode_enum[17];

/*---------------------------------*/
/*  PRBS Error Analyzer Functions  */
/*---------------------------------*/

#define BLACKHAWK_TSC_PRBS_FEC_FRAME_SIZE_MULTIPLIER         320
#define BLACKHAWK_TSC_PRBS_FEC_FRAME_SIZE_ROUND_UP           240  /* 3/4th of difference b/w configurable fec_size's (320) */
#define BLACKHAWK_TSC_PRBS_ERR_ANALYZER_FEC_SIZE_MIN         ( 6 * BLACKHAWK_TSC_PRBS_FEC_FRAME_SIZE_MULTIPLIER)
#define BLACKHAWK_TSC_PRBS_ERR_ANALYZER_FEC_SIZE_MAX         (63 * BLACKHAWK_TSC_PRBS_FEC_FRAME_SIZE_MULTIPLIER)
#define BLACKHAWK_TSC_PRBS_ERR_ANALYZER_ERR_THRESH_MIN        1
#define BLACKHAWK_TSC_PRBS_ERR_ANALYZER_ERR_THRESH_MAX       15
#define BLACKHAWK_TSC_PRBS_ERR_ANALYZER_HIST_ERR_THRESH_MIN   1
#define BLACKHAWK_TSC_PRBS_ERR_ANALYZER_HIST_ERR_THRESH_MAX   8
#define BLACKHAWK_TSC_PRBS_ERR_ANALYZER_FRAME_OVERLAP_FACTOR  8
#define BLACKHAWK_TSC_PRBS_ERR_ANALYZER_LINEARITY_ADJUST      1.0
#define BLACKHAWK_TSC_PRBS_ERR_ANALYZER_NUM_COUNTERS          8

/** PRBS Error Analyzer Error Count Struct */
typedef struct {
  /** prbs_errcnt[i] - Num of FEC frames with N+i errors (N = "histogram_error_thresh"; i = 0 to 7) ;
   ** prbs_errcnt[8] - Num of FEC frames with atleast X errors (X = "error_count_threshold") */
  uint32_t prbs_errcnt[9];
  /** hist_errcnt_thresh - historgram error count threshold */
  uint8_t hist_errcnt_thresh;
  /** prbs_errcnt_thresh - PRBS error count threshold */
  uint8_t prbs_errcnt_thresh;
} blackhawk_tsc_prbs_err_analyzer_errcnt_st;


/** PRBS Error Analyzer Struct used to report Projection data */
typedef struct {
  /** Projected BER values (Equivalent projected post-FEC BER for t=15) */
  USR_DOUBLE proj_ber;
  /** Projected BER Invalid (0 -> valid, +1 -> BER greater than; -1 -> BER less than) */
  int8_t ber_proj_invalid;
  /** Number of Measured BER points available for extrapolation */
  uint8_t delta_n;
} blackhawk_tsc_prbs_err_analyzer_report_st;

/** Configure PRBS Error Analyzer
 * NOTE: This feature is enabled only if PRBS Checker is configured and enabled
 * @param sa__ is an opaque state vector passed through to device access functions.
 * @param prbs_err_fec_size Defines the size of the FEC frames in bits
 * @param prbs_errcnt_thresh Error Count Threshold (range [1-15]). FEC frame considered bad if error_cnt in frame >= threshold
 * @param hist_errcnt_thresh Histogram Error Threshold (range [1-7]). Counts the number of errors in frames for x, x+1,..,x+7 errors in the FEC frames
 * @return Error Code generated by API (returns ERR_CODE_NONE if no errors)
 */
err_code_t blackhawk_tsc_prbs_error_analyzer_config(srds_access_t *sa__, uint16_t prbs_err_fec_size, uint8_t prbs_errcnt_thresh, uint8_t hist_errcnt_thresh);

/** Get PRBS Error Analyzer configuration
 * @param sa__ is an opaque state vector passed through to device access functions.
 * @param *prbs_err_fec_size Defines the size of the FEC frames in bits
 * @param *prbs_errcnt_thresh Error Count Threshold (range [1-15]). FEC frame considered bad if error_cnt in frame > threshold
 * @param *hist_errcnt_thresh Histogram Error Threshold (range [1-8]). Counts the number of errors in frames for x, x+1,..,x+7 errors in the FEC frames
 * @return Error Code generated by API (returns ERR_CODE_NONE if no errors)
 */
err_code_t blackhawk_tsc_get_prbs_error_analyzer_config(srds_access_t *sa__, uint16_t *prbs_err_fec_size, uint8_t *prbs_errcnt_thresh, uint8_t *hist_errcnt_thresh);

/** Display PRBS Error Analyzer configuration
 * @param sa__ is an opaque state vector passed through to device access functions.
 * @param prbs_errcnt_thresh Error Count Threshold (range [1-15]). FEC frame considered bad if error_cnt in frame > threshold
 * @param hist_errcnt_thresh Histogram Error Threshold (range [1-8]). Counts the number of errors in frames for x, x+1,..,x+7 errors in the FEC frames
 * @param timeout_s Time (in seconds) for which the PRBS errors are accumulated
 * @return Error Code generated by API (returns ERR_CODE_NONE if no errors)
 */
err_code_t blackhawk_tsc_display_prbs_error_analyzer_config(srds_access_t *sa__, uint8_t prbs_errcnt_thresh, uint8_t hist_errcnt_thresh, uint32_t timeout_s);

/** Get PRBS Error Analyzer Error Count
 * @param sa__ is an opaque state vector passed through to device access functions.
 * @param *err_analyzer PRBS Error Analyzer Error Count & Thresholds (includes total FEC Frame errors and also FEC frame errors with > x, x+1,..,x+7 errors)
 * @return Error Code generated by API (returns ERR_CODE_NONE if no errors)
 */
err_code_t blackhawk_tsc_prbs_error_analyzer_err_count(srds_access_t *sa__, blackhawk_tsc_prbs_err_analyzer_errcnt_st *err_analyzer);

/** PRBS Error Analyzer Accumulate Error Count
 * Reads out the PRBS error counters and accumulates the error count in #blackhawk_tsc_prbs_err_analyzer_errcnt_st.
 * @param sa__ is an opaque state vector passed through to device access functions.
 * @param *err_analyzer PRBS Error Analyzer Error Count & Thresholds (includes total FEC Frame errors and also FEC frame errors with > x, x+1,..,x+7 errors)
 * @return Error Code generated by API (returns ERR_CODE_NONE if no errors)
 */
err_code_t blackhawk_tsc_prbs_error_analyzer_accumulate_err_count(srds_access_t *sa__, blackhawk_tsc_prbs_err_analyzer_errcnt_st *err_analyzer);

/** Optimize the histogram error count threshold for use in PRBS Error Analyzer
 * The functoin updates histogram error count threshold register (== X errors) & PRBS error count threshold register (>X errors)
 * @param sa__ is an opaque state vector passed through to device access functions.
 * @param *err_analyzer PRBS Error Analyzer Error Count & Thresholds (includes total FEC Frame errors and also FEC frame errors with > x, x+1,..,x+7 errors)
 * @param timeout_check Time (in seconds) for which the PRBS Error Analyzer data structure (passed to this function) has accumulated the data
 * @param timeout_s Time (in seconds) for which the PRBS errors are going to be accumulated for (full test time)
 * @return Error Code generated by API (returns ERR_CODE_NONE if no errors)
 */
err_code_t blackhawk_tsc_optimize_hist_errcnt_thresh(srds_access_t *sa__, blackhawk_tsc_prbs_err_analyzer_errcnt_st *err_analyzer, uint32_t timeout_check, uint32_t timeout_s);

/** Display the Error counts accumulated by the PRBS Error Analyzer
 * @param sa__ is an opaque state vector passed through to device access functions.
 * @param err_analyzer PRBS Error Analyzer Error Count & Thresholds (includes total FEC Frame errors and also FEC frame errors with > x, x+1,..,x+7 errors)
 * @return Error Code generated by API (returns ERR_CODE_NONE if no errors)
 */
err_code_t blackhawk_tsc_display_prbs_error_analyzer_err_count(srds_access_t *sa__, blackhawk_tsc_prbs_err_analyzer_errcnt_st err_analyzer);

/** Display PRBS Error Analyzer Projection
 * The Error Analyzer Projection API observes the number of frame errors generated  based on hist_threshold value programmed for the given time duration,
 * and then projects it to t=15 errors. \n
 * NOTE: This feature is enabled only if PRBS Checker is configured and enabled
 * @param sa__ is an opaque state vector passed through to device access functions.
 * @param prbs_err_fec_size Defines the size of the FEC frames in bits
 * @param hist_errcnt_thresh Histogram Error Threshold (range [1-8]). Counts the number of errors in frames for x, x+1,..,x+7 errors in the FEC frames
 * @param timeout_s Time (in seconds) for which the PRBS errors are accumulated
 * @return Error Code generated by API (returns ERR_CODE_NONE if no errors)
 */
err_code_t blackhawk_tsc_display_prbs_error_analyzer_proj(srds_access_t *sa__, uint16_t prbs_err_fec_size, uint8_t hist_errcnt_thresh, uint32_t timeout_s);

/** Display PRBS Error Analyzer Projection with automatic threshold adjusting
 * The Error Analyzer Projection API automatically adjusts the threshold based on counting errors for 5% of timeout
 * and then projects it to t=15 errors.
 * NOTE: This feature is enabled only if PRBS Checker is configured and enabled
 * @param sa__ is an opaque state vector passed through to device access functions.
 * @param prbs_err_fec_size Defines the size of the FEC frames in bits
 * @param timeout_s Time (in seconds) for which the PRBS errors are accumulated
 * @return Error Code generated by API (returns ERR_CODE_NONE if no errors)
 */
err_code_t blackhawk_tsc_display_prbs_error_analyzer_proj_auto_threshold(srds_access_t *sa__, uint16_t prbs_err_fec_size, uint32_t timeout_s);

/** Report PRBS Error Analyzer Projection results
 * @param sa__ is an opaque state vector passed through to device access functions.
 * @param err_analyzer PRBS Error Analyzer Error Count & Thresholds (includes total FEC Frame errors and also FEC frame errors with > x, x+1,..,x+7 errors)
 * @param timeout_s Time (in seconds) for which the PRBS errors are accumulated
 * @param *err_analyzer_report Report results of PRBS Error Analyzer projection
 * @return Error Code generated by API (returns ERR_CODE_NONE if no errors)
 */
err_code_t blackhawk_tsc_prbs_error_analyzer_report_proj(srds_access_t *sa__, blackhawk_tsc_prbs_err_analyzer_errcnt_st err_analyzer, uint32_t timeout_s, blackhawk_tsc_prbs_err_analyzer_report_st *err_analyzer_report);

/** Compute PRBS Error Analyzer Projection results
 * @param sa__ is an opaque state vector passed through to device access functions.
 * @param err_analyzer PRBS Error Analyzer Error Count & Thresholds (includes total FEC Frame errors and also FEC frame errors with > x, x+1,..,x+7 errors)
 * @param timeout_s Time (in seconds) for which the PRBS errors are accumulated
 * @return Error Code generated by API (returns ERR_CODE_NONE if no errors)
 */
err_code_t blackhawk_tsc_prbs_error_analyzer_compute_proj(srds_access_t *sa__, blackhawk_tsc_prbs_err_analyzer_errcnt_st err_analyzer, uint32_t timeout_s);

/** Reads prbsfb status and checks for done_once flag.
 * prbsfb tuning occurs once immediately after the pmd lock, it requires prbs checker to be enabled and locked
 * Note: Recommend a 6s timeout between pmd lock and prbsfb completion
 * @param sa__ is an opaque state vector passed through to device access functions.
 * @param done_once a pointer to user variable where prbsfb status bit done_once is returned
 * @return Error Code generated by API (ERR_CODE_NONE if no errors)
 */
err_code_t blackhawk_tsc_get_prbsfb_status(srds_access_t *sa__, uint8_t *done_once);


#endif
