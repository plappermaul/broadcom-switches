#
# \file lt_field_rename_report.py
#
# This script handles the case of renaming a field within an LT. It contains
# a class that can add a new report of field renaming as well as it can
# generate a C file with the structure that are derived from the report
# file.
#
# This license is set out in https://raw.githubusercontent.com/Broadcom-Network-Switching-Software/OpenBCM/master/Legal/LICENSE file.
# 
# Copyright 2007-2020 Broadcom Inc. All rights reserved.
#

import sys
import os
import csv
import shutil

LT_FLD_CHANGE_FILE = 'issu_lt_fld.db'
LT_FLD_CHANGE_C_FILE = 'issu_lt_fld.c'
DEFAULT_DEV = 'all'
DEFAULT_VARIANT = 'all'


# Defines structure DB entry.
class fld_db_entry:
    lt = ''  # LT name.
    old_fname = ''
    new_fname = ''
    ver = ''
    device = ''
    variant = ''


class lt_field_rename:
    """Class that handles LT field rename"""

    def __init__(self, dir_name):
        self.changed = False
        self.dict = {}
        self.fname = dir_name + LT_FLD_CHANGE_FILE

        if not os.path.isfile(self.fname):
            return

        try:
            fh = open(self.fname, 'r')
        except:
            print('Failed to open file %s' % self.fname)
            return

        self._read_file_content(fh)
        fh.close()

    def __del__(self):
        if not self.changed:
            return

        fh = open(self.fname, 'w')
        self._write_file_content(fh)
        fh.close()

    def _read_file_content(self, fh):
        # Read the content of the file into csv dictionary
        csvdict = csv.DictReader(fh, fieldnames = ['LT', 'old_fname',
                                                   'new_fname', 'ver',
                                                   'device', 'variant'])

        # Populate the structure dictionary with the content found in
        # STRUCT_DB_FILE
        for rec in csvdict:
            ent = fld_db_entry()
            ent.lt = rec['LT']
            ent.old_fname = rec['old_fname']
            ent.new_fname = rec['new_fname']
            ent.ver = rec['ver']
            ent.device = rec['device']
            ent.variant = rec['variant']
            self.dict[ent.lt + ent.old_fname + ent.device + ent.variant] = ent

    def _write_file_content(self, fh):
        for id in sorted(self.dict.keys()):
            ent = self.dict[id]
            fh.write('%s,%s,%s,%s,%s,%s\n' %
                      (ent.lt, ent.old_fname, ent.new_fname, ent.ver,
                       ent.device, ent.variant))

    def add_field(self, lt_name, old_fld_name, new_fld_name, version,
                  device, variant):

        ent = fld_db_entry()
        ent.lt = lt_name
        ent.old_fname = old_fld_name
        ent.new_fname = new_fld_name
        ent.ver = version
        if device == '':
            ent.device = DEFAULT_DEV
        else:
            ent.device = device
        if variant == '':
            ent.variant = DEFAULT_VARIANT
        else:
            ent.variant = variant

        key = lt_name + old_fld_name + ent.device + ent.variant
        if key in self.dict:
            return

        self.dict[key] = ent

        self.changed = True  # Remember that the database had .

    def dump_to_c(self, out_dir):
        out_fname = out_dir + LT_FLD_CHANGE_C_FILE
        try:
            fh = open(out_fname, 'w')
        except:
            print('Failed to open file %s' % out_fname)
            return

        self._write_out_header(fh)
        fh.write('static const bcmissu_lt_renamed_fields_t renamed_fields[] = {\n')
        for key in sorted(self.dict.keys()):
            ent = self.dict[key]
            fh.write('    {\"%s\", \"%s\", \"%s\", \"%s\", \"%s\", \"%s\"},\n' %
                      (ent.lt, ent.old_fname, ent.new_fname, ent.ver,
                       ent.device, ent.variant))

        fh.write('    {NULL}\n')
        fh.write('};\n')

        fh.write('\nconst bcmissu_lt_renamed_fields_t *bcmissu_renamed_fields_dict_get()\n')
        fh.write('{\n')
        fh.write('    return renamed_fields;\n')
        fh.write('}\n')

    def _write_out_header(self, fh):
        fh.write('/***************************************************************************\n')
        fh.write(' *\n')
        fh.write(' * DO NOT EDIT THIS FILE!\n')
        fh.write(' * This file is auto-generated by the ISSU parser from YAML formatted file.\n')
        fh.write(' * Edits to this file will be lost when it is regenerated.\n')
        fh.write(' * Tool: bcmha/scripts/lt_field_rename_report.py\n')
        fh.write(' *\n')
        fh.write(' * $Copyright:.$\n')
        fh.write(' *\n')
        fh.write(' ***************************************************************************/\n')
        fh.write('\n')
        fh.write("#include <bcmissu/issu_types.h>\n\n")

