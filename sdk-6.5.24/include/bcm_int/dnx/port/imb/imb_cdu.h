
/*
 *         
 * 
 * 
 * This license is set out in https://raw.githubusercontent.com/Broadcom-Network-Switching-Software/OpenBCM/master/Legal/LICENSE file.
 * 
 * Copyright 2007-2021 Broadcom Inc. All rights reserved.
 *         
 *     
 * DO NOT EDIT THIS FILE!
 */

#ifndef _IMB_CDU_H__H_
#define _IMB_CDU_H__H_

#include <soc/portmod/portmod.h>
#include <bcm/port.h>
#include <bcm/cosq.h>
#include <bcm_int/dnx/port/imb/imb_diag.h>
#include <bcm_int/dnx/cosq/ingress/cosq_ingress_port.h>
#include <soc/dnxc/dnxc_port.h>
/*initialize an IMB.*/
int imb_cdu_init(
    int unit,
    const imb_create_info_t * imb_info,
    imb_specific_create_info_t * imb_specific_info);

/*De-initialize an existing IMB.*/
int imb_cdu_deinit(
    int unit,
    const imb_create_info_t * imb_info,
    imb_specific_create_info_t * imb_specific_info);

/*Add new IMB (Interface Management Block) port*/
int imb_cdu_port_attach(
    int unit,
    bcm_port_t port,
    uint32 flags);

/*Remove an existing IMB (Interface Management Block) port*/
int imb_cdu_port_detach(
    int unit,
    bcm_port_t port);

/*Enable / disable EEE for a port*/
int imb_cdu_port_eee_enable_set(
    int unit,
    bcm_port_t port,
    int enable);
int imb_cdu_port_eee_enable_get(
    int unit,
    bcm_port_t port,
    int *enable);

/*Get/set the Start TX threshold.*/
int imb_cdu_port_tx_start_thr_set(
    int unit,
    bcm_port_t port,
    int speed,
    int start_tx_thr);
int imb_cdu_port_tx_start_thr_get(
    int unit,
    bcm_port_t port,
    int *start_tx_thr);

/*Configure PRD thresholds.*/
int imb_cdu_prd_threshold_set(
    int unit,
    bcm_port_t port,
    uint32 priority,
    uint32 threshold);
int imb_cdu_prd_threshold_get(
    int unit,
    bcm_port_t port,
    uint32 priority,
    uint32 *threshold);

/*Get maximum PRD threshold value.*/
int imb_cdu_prd_threshold_max_get(
    int unit,
    bcm_port_t port,
    uint32 *threshold);

/*Set/Get port advertise abilities*/
int imb_cdu_port_autoneg_ability_advert_set(
    int unit,
    bcm_port_t port,
    int num_ability,
    const bcm_port_speed_ability_t * abilities);
int imb_cdu_port_autoneg_ability_advert_get(
    int unit,
    bcm_port_t port,
    int max_num_ability,
    bcm_port_speed_ability_t * abilities,
    int *actual_num_ability);

/*Get the local speed abilities*/
int imb_cdu_port_speed_ability_local_get(
    int unit,
    bcm_port_t port,
    int max_num_ability,
    bcm_port_speed_ability_t * abilities,
    int *actual_num_ability);

/*Get the remote abilities*/
int imb_cdu_port_autoneg_ability_remote_get(
    int unit,
    bcm_port_t port,
    int max_num_ability,
    bcm_port_speed_ability_t * abilities,
    int *actual_num_ability);

/*Get port's default resource configurations*/
int imb_cdu_port_resource_default_get(
    int unit,
    bcm_port_t port,
    uint32 flags,
    bcm_port_resource_t * resource);

/*Get phys associated with imb instance*/
int imb_cdu_phys_get(
    int unit,
    int imb_id,
    bcm_pbmp_t * phys);

/* Checks port validaity in a early stage before any DB is modified*/
int imb_cdu_port_pre_add_validate(
    int unit,
    bcm_port_t port,
    bcm_pbmp_t phys);

/*Verify input AN abilities.*/
int imb_cdu_port_autoneg_ability_verify(
    int unit,
    bcm_port_t port,
    int num_ability,
    const bcm_port_speed_ability_t * abilities);

/*Initialize Portmod add_info before calling portmod_port_add.*/
int imb_cdu_portmod_add_info_config(
    int unit,
    bcm_port_t port,
    portmod_port_add_info_t * add_info);

/*Lock the mutex that protects portmod soft_reset context*/
int imb_cdu_portmod_soft_reset_lock(
    int unit,
    bcm_port_t port);

/*Unlock the mutex that protects portmod soft_reset context*/
int imb_cdu_portmod_soft_reset_unlock(
    int unit,
    bcm_port_t port);

#endif /*_IMB_CDU_H_*/
